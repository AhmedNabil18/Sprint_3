
EEPROM_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00000d86  00000e1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010d  008000c4  008000c4  00000e7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027f2  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da4  00000000  00000000  00003976  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000198c  00000000  00000000  0000471a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000924  00000000  00000000  000060a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010e5  00000000  00000000  000069cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e6e  00000000  00000000  00007ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000a91f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__vector_13>
  38:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__vector_14>
  3c:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3c       	cpi	r26, 0xC4	; 196
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 ec       	ldi	r26, 0xC4	; 196
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3d       	cpi	r26, 0xD1	; 209
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8e 02 	call	0x51c	; 0x51c <main>
  8a:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	84 30       	cpi	r24, 0x04	; 4
  98:	81 f0       	breq	.+32     	; 0xba <App_init+0x28>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	/* Call the initializer of the Terminal */
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
  9a:	0e 94 43 02 	call	0x486	; 0x486 <Terminal_init>
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	49 f4       	brne	.+18     	; 0xb4 <App_init+0x22>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Call the initializer of the Eeprom */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
  a2:	0e 94 76 01 	call	0x2ec	; 0x2ec <Eeprom_24_init>
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	39 f4       	brne	.+14     	; 0xb8 <App_init+0x26>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return APP_STATUS_ERROR_OK;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	08 95       	ret
/**************************************************************************************/

	/* Call the initializer of the Terminal */
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
	{
		return APP_STATUS_ERROR_NOK;
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	08 95       	ret
	}
	/* Call the initializer of the Eeprom */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
	{
		return APP_STATUS_ERROR_NOK;
  b8:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
  ba:	08 95       	ret

000000bc <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	c1 50       	subi	r28, 0x01	; 1
  c6:	d1 40       	sbci	r29, 0x01	; 1
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
  d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d6:	84 30       	cpi	r24, 0x04	; 4
  d8:	09 f0       	breq	.+2      	; 0xdc <App_update+0x20>
  da:	bf c0       	rjmp	.+382    	; 0x25a <App_update+0x19e>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	static uint16_t u16_locationAddress=0;
	uint8_t u8_data[2]={0};
  dc:	1a 82       	std	Y+2, r1	; 0x02
  de:	19 82       	std	Y+1, r1	; 0x01
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
  e0:	ce 01       	movw	r24, r28
  e2:	03 96       	adiw	r24, 0x03	; 3
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	fc 01       	movw	r30, r24
  e8:	11 92       	st	Z+, r1
  ea:	2a 95       	dec	r18
  ec:	e9 f7       	brne	.-6      	; 0xe8 <App_update+0x2c>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
  ee:	0e 94 73 02 	call	0x4e6	; 0x4e6 <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
  f2:	85 30       	cpi	r24, 0x05	; 5
  f4:	09 f0       	breq	.+2      	; 0xf8 <App_update+0x3c>
  f6:	ad c0       	rjmp	.+346    	; 0x252 <App_update+0x196>
	{
		if(gu8_appState == APP_STATE_CMD)
  f8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <gu8_appState>
  fc:	81 11       	cpse	r24, r1
  fe:	38 c0       	rjmp	.+112    	; 0x170 <App_update+0xb4>
		{
			if(stringCompare(au8_inputString,(uint8_t*)cgau8_writeString) == 1)
 100:	6d eb       	ldi	r22, 0xBD	; 189
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	ce 01       	movw	r24, r28
 106:	03 96       	adiw	r24, 0x03	; 3
 108:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <stringCompare>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	69 f4       	brne	.+26     	; 0x12a <App_update+0x6e>
			{
				gu8_appAction = APP_ACTION_WRITE;
 110:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <gu8_appAction>
				gu8_appState = APP_STATE_ADDRESS;
 114:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <gu8_appState>
				if(Terminal_Out((uint8_t*)"Address: ") != TERMINAL_STATUS_ERROR_OK)
 118:	82 e9       	ldi	r24, 0x92	; 146
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Terminal_Out>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	09 f4       	brne	.+2      	; 0x126 <App_update+0x6a>
 124:	9c c0       	rjmp	.+312    	; 0x25e <App_update+0x1a2>
					return APP_STATUS_ERROR_NOK;
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	b5 c0       	rjmp	.+362    	; 0x294 <App_update+0x1d8>
			}else if(stringCompare(au8_inputString,(uint8_t*)cgau8_readString) == 1)
 12a:	68 eb       	ldi	r22, 0xB8	; 184
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	ce 01       	movw	r24, r28
 130:	03 96       	adiw	r24, 0x03	; 3
 132:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <stringCompare>
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	79 f4       	brne	.+30     	; 0x158 <App_update+0x9c>
			{
				gu8_appAction = APP_ACTION_READ;
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <gu8_appAction>
				gu8_appState = APP_STATE_ADDRESS;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <gu8_appState>
				if(Terminal_Out((uint8_t*)"Address: ") != TERMINAL_STATUS_ERROR_OK)
 146:	82 e9       	ldi	r24, 0x92	; 146
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Terminal_Out>
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	09 f4       	brne	.+2      	; 0x154 <App_update+0x98>
 152:	87 c0       	rjmp	.+270    	; 0x262 <App_update+0x1a6>
					return APP_STATUS_ERROR_NOK;
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	9e c0       	rjmp	.+316    	; 0x294 <App_update+0x1d8>
			}else
			{
				if(Terminal_Out((uint8_t*)"INVALID Input!! \rCommand: ") != TERMINAL_STATUS_ERROR_OK)
 158:	84 e6       	ldi	r24, 0x64	; 100
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Terminal_Out>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	09 f0       	breq	.+2      	; 0x166 <App_update+0xaa>
 164:	80 c0       	rjmp	.+256    	; 0x266 <App_update+0x1aa>
					return APP_STATUS_ERROR_NOK;
				gu8_appAction = APP_ACTION_TERMINAL;
 166:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <gu8_appAction>
				gu8_appState = APP_STATE_CMD;
 16a:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <gu8_appState>
 16e:	92 c0       	rjmp	.+292    	; 0x294 <App_update+0x1d8>
			}
		}else if(gu8_appState == APP_STATE_ADDRESS)
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	09 f0       	breq	.+2      	; 0x176 <App_update+0xba>
 174:	54 c0       	rjmp	.+168    	; 0x21e <App_update+0x162>
		{
			stringHexToNum(au8_inputString,&u16_locationAddress);
 176:	64 ec       	ldi	r22, 0xC4	; 196
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	ce 01       	movw	r24, r28
 17c:	03 96       	adiw	r24, 0x03	; 3
 17e:	0e 94 40 05 	call	0xa80	; 0xa80 <stringHexToNum>
			if(u16_locationAddress > EEPROM_24_WORDS_NUM-1)
 182:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
 186:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <__data_end+0x1>
 18a:	81 15       	cp	r24, r1
 18c:	98 40       	sbci	r25, 0x08	; 8
 18e:	48 f0       	brcs	.+18     	; 0x1a2 <App_update+0xe6>
			{
				if(Terminal_Out((uint8_t*)"INVALID Address!! \rAddress: ") != TERMINAL_STATUS_ERROR_OK)
 190:	8f e7       	ldi	r24, 0x7F	; 127
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Terminal_Out>
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	09 f4       	brne	.+2      	; 0x19e <App_update+0xe2>
 19c:	66 c0       	rjmp	.+204    	; 0x26a <App_update+0x1ae>
					return APP_STATUS_ERROR_NOK;
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	79 c0       	rjmp	.+242    	; 0x294 <App_update+0x1d8>
			}else
			{
				if(Terminal_Out((uint8_t*)"OK\r") != TERMINAL_STATUS_ERROR_OK)
 1a2:	8c e9       	ldi	r24, 0x9C	; 156
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Terminal_Out>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	09 f0       	breq	.+2      	; 0x1b0 <App_update+0xf4>
 1ae:	5f c0       	rjmp	.+190    	; 0x26e <App_update+0x1b2>
					return APP_STATUS_ERROR_NOK;
				if(gu8_appAction == APP_ACTION_READ)
 1b0:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <gu8_appAction>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	21 f5       	brne	.+72     	; 0x200 <App_update+0x144>
				{
					Eeprom_24_readByte(u16_locationAddress,u8_data);
 1b8:	be 01       	movw	r22, r28
 1ba:	6f 5f       	subi	r22, 0xFF	; 255
 1bc:	7f 4f       	sbci	r23, 0xFF	; 255
 1be:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
 1c2:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <__data_end+0x1>
 1c6:	0e 94 c1 01 	call	0x382	; 0x382 <Eeprom_24_readByte>
					u8_data[1] = '\0';
 1ca:	1a 82       	std	Y+2, r1	; 0x02
					if(Terminal_Out((uint8_t*)"Data Stored is: ") != TERMINAL_STATUS_ERROR_OK)
 1cc:	80 ea       	ldi	r24, 0xA0	; 160
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Terminal_Out>
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	09 f0       	breq	.+2      	; 0x1da <App_update+0x11e>
 1d8:	4c c0       	rjmp	.+152    	; 0x272 <App_update+0x1b6>
						return APP_STATUS_ERROR_NOK;
					if(Terminal_Out(u8_data) != TERMINAL_STATUS_ERROR_OK)
 1da:	ce 01       	movw	r24, r28
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Terminal_Out>
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <App_update+0x12c>
 1e6:	47 c0       	rjmp	.+142    	; 0x276 <App_update+0x1ba>
						return APP_STATUS_ERROR_NOK;
					if(Terminal_Out((uint8_t*)"\rCommand: ") != TERMINAL_STATUS_ERROR_OK)
 1e8:	84 e7       	ldi	r24, 0x74	; 116
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Terminal_Out>
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <App_update+0x13a>
 1f4:	42 c0       	rjmp	.+132    	; 0x27a <App_update+0x1be>
						return APP_STATUS_ERROR_NOK;
					gu8_appAction = APP_ACTION_TERMINAL;
 1f6:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <gu8_appAction>
					gu8_appState = APP_STATE_CMD;
 1fa:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <gu8_appState>
 1fe:	4a c0       	rjmp	.+148    	; 0x294 <App_update+0x1d8>
				}else if(gu8_appAction == APP_ACTION_WRITE)
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	e9 f5       	brne	.+122    	; 0x27e <App_update+0x1c2>
				{
					if(Terminal_Out((uint8_t*)"Data: ") != TERMINAL_STATUS_ERROR_OK)
 204:	81 eb       	ldi	r24, 0xB1	; 177
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Terminal_Out>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	c9 f5       	brne	.+114    	; 0x282 <App_update+0x1c6>
						return APP_STATUS_ERROR_NOK;
					gu8_appAction = APP_ACTION_WRITE;
 210:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <gu8_appAction>
					gu8_appState = APP_STATE_DATA;
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <gu8_appState>
			gu8_appState = APP_STATE_CMD;
		}
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	3b c0       	rjmp	.+118    	; 0x294 <App_update+0x1d8>
						return APP_STATUS_ERROR_NOK;
					gu8_appAction = APP_ACTION_WRITE;
					gu8_appState = APP_STATE_DATA;
				}
			}
		}else if(gu8_appState == APP_STATE_DATA)
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	91 f5       	brne	.+100    	; 0x286 <App_update+0x1ca>
		{
			if(Terminal_Out((uint8_t*)"OK\r") != TERMINAL_STATUS_ERROR_OK)
 222:	8c e9       	ldi	r24, 0x9C	; 156
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Terminal_Out>
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	71 f5       	brne	.+92     	; 0x28a <App_update+0x1ce>
				return APP_STATUS_ERROR_NOK;
			Eeprom_24_writeByte(u16_locationAddress, au8_inputString[0]);
 22e:	6b 81       	ldd	r22, Y+3	; 0x03
 230:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
 234:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <__data_end+0x1>
 238:	0e 94 85 01 	call	0x30a	; 0x30a <Eeprom_24_writeByte>
			if(Terminal_Out((uint8_t*)"Command: ") != TERMINAL_STATUS_ERROR_OK)
 23c:	85 e7       	ldi	r24, 0x75	; 117
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Terminal_Out>
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	19 f5       	brne	.+70     	; 0x28e <App_update+0x1d2>
				return APP_STATUS_ERROR_NOK;
			gu8_appAction = APP_ACTION_TERMINAL;
 248:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <gu8_appAction>
			gu8_appState = APP_STATE_CMD;
 24c:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <gu8_appState>
 250:	21 c0       	rjmp	.+66     	; 0x294 <App_update+0x1d8>
		}
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	f1 f0       	breq	.+60     	; 0x292 <App_update+0x1d6>
		return APP_STATUS_ERROR_NOK;
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	1d c0       	rjmp	.+58     	; 0x294 <App_update+0x1d8>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
 25a:	85 e0       	ldi	r24, 0x05	; 5
 25c:	1b c0       	rjmp	.+54     	; 0x294 <App_update+0x1d8>
			gu8_appState = APP_STATE_CMD;
		}
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	19 c0       	rjmp	.+50     	; 0x294 <App_update+0x1d8>
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	17 c0       	rjmp	.+46     	; 0x294 <App_update+0x1d8>
				if(Terminal_Out((uint8_t*)"Address: ") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
			}else
			{
				if(Terminal_Out((uint8_t*)"INVALID Input!! \rCommand: ") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	15 c0       	rjmp	.+42     	; 0x294 <App_update+0x1d8>
			gu8_appState = APP_STATE_CMD;
		}
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	13 c0       	rjmp	.+38     	; 0x294 <App_update+0x1d8>
				if(Terminal_Out((uint8_t*)"INVALID Address!! \rAddress: ") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
			}else
			{
				if(Terminal_Out((uint8_t*)"OK\r") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	11 c0       	rjmp	.+34     	; 0x294 <App_update+0x1d8>
				if(gu8_appAction == APP_ACTION_READ)
				{
					Eeprom_24_readByte(u16_locationAddress,u8_data);
					u8_data[1] = '\0';
					if(Terminal_Out((uint8_t*)"Data Stored is: ") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0f c0       	rjmp	.+30     	; 0x294 <App_update+0x1d8>
					if(Terminal_Out(u8_data) != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0d c0       	rjmp	.+26     	; 0x294 <App_update+0x1d8>
					if(Terminal_Out((uint8_t*)"\rCommand: ") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0b c0       	rjmp	.+22     	; 0x294 <App_update+0x1d8>
			gu8_appState = APP_STATE_CMD;
		}
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	09 c0       	rjmp	.+18     	; 0x294 <App_update+0x1d8>
					gu8_appAction = APP_ACTION_TERMINAL;
					gu8_appState = APP_STATE_CMD;
				}else if(gu8_appAction == APP_ACTION_WRITE)
				{
					if(Terminal_Out((uint8_t*)"Data: ") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	07 c0       	rjmp	.+14     	; 0x294 <App_update+0x1d8>
			gu8_appState = APP_STATE_CMD;
		}
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	05 c0       	rjmp	.+10     	; 0x294 <App_update+0x1d8>
				}
			}
		}else if(gu8_appState == APP_STATE_DATA)
		{
			if(Terminal_Out((uint8_t*)"OK\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	03 c0       	rjmp	.+6      	; 0x294 <App_update+0x1d8>
			Eeprom_24_writeByte(u16_locationAddress, au8_inputString[0]);
			if(Terminal_Out((uint8_t*)"Command: ") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	01 c0       	rjmp	.+2      	; 0x294 <App_update+0x1d8>
			gu8_appState = APP_STATE_CMD;
		}
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	cf 5f       	subi	r28, 0xFF	; 255
 296:	de 4f       	sbci	r29, 0xFE	; 254
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
 2a8:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	69 f4       	brne	.+26     	; 0x2ca <App_start+0x22>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
 2b0:	8f b7       	in	r24, 0x3f	; 63
 2b2:	80 68       	ori	r24, 0x80	; 128
 2b4:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	if(Terminal_Out((uint8_t*)"Command: ") != TERMINAL_STATUS_ERROR_OK)
 2b6:	85 e7       	ldi	r24, 0x75	; 117
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Terminal_Out>
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	21 f4       	brne	.+8      	; 0x2ca <App_start+0x22>
		return APP_STATUS_ERROR_NOK;
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
 2c2:	0e 94 5e 00 	call	0xbc	; 0xbc <App_update>
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	e1 f3       	breq	.-8      	; 0x2c2 <App_start+0x1a>
			return APP_STATUS_ERROR_NOK;
			
	}
}
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	08 95       	ret

000002ce <EEPROM_getAddresses>:
* Description: Function to Calculate the slave address byte and the word address byte from the location
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
 2ce:	9a 01       	movw	r18, r20
 2d0:	22 27       	eor	r18, r18
 2d2:	37 70       	andi	r19, 0x07	; 7
 2d4:	22 0f       	add	r18, r18
 2d6:	23 2f       	mov	r18, r19
 2d8:	22 1f       	adc	r18, r18
 2da:	33 0b       	sbc	r19, r19
 2dc:	31 95       	neg	r19
 2de:	20 65       	ori	r18, 0x50	; 80
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
 2e4:	fb 01       	movw	r30, r22
 2e6:	40 83       	st	Z, r20
	return EEPROM_24_STATUS_ERROR_OK;
}
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	08 95       	ret

000002ec <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
 2ec:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_eepromModuleState>
 2f0:	83 30       	cpi	r24, 0x03	; 3
 2f2:	51 f0       	breq	.+20     	; 0x308 <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
 2f4:	0e 94 21 03 	call	0x642	; 0x642 <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
 2f8:	85 30       	cpi	r24, 0x05	; 5
 2fa:	29 f0       	breq	.+10     	; 0x306 <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
 2fc:	83 e0       	ldi	r24, 0x03	; 3
 2fe:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
 306:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
 308:	08 95       	ret

0000030a <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	00 d0       	rcall	.+0      	; 0x312 <Eeprom_24_writeByte+0x8>
 312:	1f 92       	push	r1
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
 318:	ac 01       	movw	r20, r24
 31a:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
 31c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
 320:	93 30       	cpi	r25, 0x03	; 3
 322:	11 f5       	brne	.+68     	; 0x368 <Eeprom_24_writeByte+0x5e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
 324:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
 326:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
 328:	be 01       	movw	r22, r28
 32a:	6e 5f       	subi	r22, 0xFE	; 254
 32c:	7f 4f       	sbci	r23, 0xFF	; 255
 32e:	ce 01       	movw	r24, r28
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	0e 94 67 01 	call	0x2ce	; 0x2ce <EEPROM_getAddresses>
 336:	18 2f       	mov	r17, r24
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	c1 f4       	brne	.+48     	; 0x36c <Eeprom_24_writeByte+0x62>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	ae 01       	movw	r20, r28
 342:	4d 5f       	subi	r20, 0xFD	; 253
 344:	5f 4f       	sbci	r21, 0xFF	; 255
 346:	6a 81       	ldd	r22, Y+2	; 0x02
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <I2C_MasterSendToLocation>
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	79 f4       	brne	.+30     	; 0x370 <Eeprom_24_writeByte+0x66>
		return EEPROM_24_STATUS_ERROR_NOK;
	Delay_ms(15);
 352:	2f e0       	ldi	r18, 0x0F	; 15
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 91 02 	call	0x522	; 0x522 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
 366:	05 c0       	rjmp	.+10     	; 0x372 <Eeprom_24_writeByte+0x68>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
 368:	12 e0       	ldi	r17, 0x02	; 2
 36a:	03 c0       	rjmp	.+6      	; 0x372 <Eeprom_24_writeByte+0x68>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
 36c:	10 e0       	ldi	r17, 0x00	; 0
 36e:	01 c0       	rjmp	.+2      	; 0x372 <Eeprom_24_writeByte+0x68>
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
 370:	10 e0       	ldi	r17, 0x00	; 0
	Delay_ms(15);
	return EEPROM_24_STATUS_ERROR_OK;
}
 372:	81 2f       	mov	r24, r17
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	08 95       	ret

00000382 <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
 382:	ef 92       	push	r14
 384:	ff 92       	push	r15
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	00 d0       	rcall	.+0      	; 0x38e <Eeprom_24_readByte+0xc>
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
 392:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
 394:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
 398:	93 30       	cpi	r25, 0x03	; 3
 39a:	21 f5       	brne	.+72     	; 0x3e4 <Eeprom_24_readByte+0x62>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
 39c:	61 15       	cp	r22, r1
 39e:	71 05       	cpc	r23, r1
 3a0:	19 f1       	breq	.+70     	; 0x3e8 <Eeprom_24_readByte+0x66>
 3a2:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
 3a4:	19 82       	std	Y+1, r1	; 0x01
	uint8_t word_addr=0;
 3a6:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
 3a8:	be 01       	movw	r22, r28
 3aa:	6e 5f       	subi	r22, 0xFE	; 254
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255
 3ae:	ce 01       	movw	r24, r28
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	0e 94 67 01 	call	0x2ce	; 0x2ce <EEPROM_getAddresses>
 3b6:	18 2f       	mov	r17, r24
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	c1 f4       	brne	.+48     	; 0x3ec <Eeprom_24_readByte+0x6a>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
 3bc:	21 e0       	ldi	r18, 0x01	; 1
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	a7 01       	movw	r20, r14
 3c2:	6a 81       	ldd	r22, Y+2	; 0x02
 3c4:	89 81       	ldd	r24, Y+1	; 0x01
 3c6:	0e 94 a9 04 	call	0x952	; 0x952 <I2C_MasterReceiveFromLocation>
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	89 f4       	brne	.+34     	; 0x3f0 <Eeprom_24_readByte+0x6e>
		return EEPROM_24_STATUS_ERROR_NOK;
	Delay_ms(5);
 3ce:	25 e0       	ldi	r18, 0x05	; 5
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	50 e0       	ldi	r21, 0x00	; 0
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 91 02 	call	0x522	; 0x522 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
 3e2:	07 c0       	rjmp	.+14     	; 0x3f2 <Eeprom_24_readByte+0x70>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
 3e4:	12 e0       	ldi	r17, 0x02	; 2
 3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <Eeprom_24_readByte+0x70>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
 3e8:	14 e0       	ldi	r17, 0x04	; 4
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <Eeprom_24_readByte+0x70>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
	uint8_t word_addr=0;
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
 3ec:	10 e0       	ldi	r17, 0x00	; 0
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <Eeprom_24_readByte+0x70>
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
 3f0:	10 e0       	ldi	r17, 0x00	; 0
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
 3f2:	81 2f       	mov	r24, r17
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	08 95       	ret

00000404 <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
 408:	c0 91 c9 00 	lds	r28, 0x00C9	; 0x8000c9 <gu8_counter>
 40c:	d0 e0       	ldi	r29, 0x00	; 0
 40e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <Uart_DataRegister>
 412:	c6 53       	subi	r28, 0x36	; 54
 414:	df 4f       	sbci	r29, 0xFF	; 255
 416:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
 418:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <gu8_counter>
 41c:	e9 2f       	mov	r30, r25
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	e6 53       	subi	r30, 0x36	; 54
 422:	ff 4f       	sbci	r31, 0xFF	; 255
 424:	80 81       	ld	r24, Z
 426:	8d 30       	cpi	r24, 0x0D	; 13
 428:	71 f4       	brne	.+28     	; 0x446 <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
 42a:	0e 94 c8 05 	call	0xb90	; 0xb90 <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
 42e:	e0 91 c9 00 	lds	r30, 0x00C9	; 0x8000c9 <gu8_counter>
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	e6 53       	subi	r30, 0x36	; 54
 436:	ff 4f       	sbci	r31, 0xFF	; 255
 438:	10 82       	st	Z, r1
		gu8_counter = 0;
 43a:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <gu8_counter>
		gu8_flag = 1;
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <gu8_flag>
 444:	1d c0       	rjmp	.+58     	; 0x480 <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
 446:	88 30       	cpi	r24, 0x08	; 8
 448:	51 f4       	brne	.+20     	; 0x45e <Uart_RXC_ISR+0x5a>
 44a:	99 23       	and	r25, r25
 44c:	41 f0       	breq	.+16     	; 0x45e <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
 44e:	0e 94 c8 05 	call	0xb90	; 0xb90 <Uart_sendByte>
		gu8_counter--;
 452:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <gu8_counter>
 456:	81 50       	subi	r24, 0x01	; 1
 458:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <gu8_counter>
 45c:	11 c0       	rjmp	.+34     	; 0x480 <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
 45e:	88 30       	cpi	r24, 0x08	; 8
 460:	79 f0       	breq	.+30     	; 0x480 <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
 462:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <gu8_visibility>
 466:	91 30       	cpi	r25, 0x01	; 1
 468:	21 f4       	brne	.+8      	; 0x472 <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
 46a:	8a e2       	ldi	r24, 0x2A	; 42
 46c:	0e 94 c8 05 	call	0xb90	; 0xb90 <Uart_sendByte>
 470:	02 c0       	rjmp	.+4      	; 0x476 <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
 472:	0e 94 c8 05 	call	0xb90	; 0xb90 <Uart_sendByte>
		}
		gu8_counter++;
 476:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <gu8_counter>
 47a:	8f 5f       	subi	r24, 0xFF	; 255
 47c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <gu8_counter>
	}
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
 486:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
 48a:	83 30       	cpi	r24, 0x03	; 3
 48c:	81 f0       	breq	.+32     	; 0x4ae <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
 48e:	0e 94 b2 05 	call	0xb64	; 0xb64 <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	11 f0       	breq	.+4      	; 0x49a <Terminal_init+0x14>
 496:	87 30       	cpi	r24, 0x07	; 7
 498:	49 f4       	brne	.+18     	; 0x4ac <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
 49a:	82 e0       	ldi	r24, 0x02	; 2
 49c:	92 e0       	ldi	r25, 0x02	; 2
 49e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
 4a2:	83 e0       	ldi	r24, 0x03	; 3
 4a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
 4ac:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
 4ae:	08 95       	ret

000004b0 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
 4b4:	00 97       	sbiw	r24, 0x00	; 0
 4b6:	81 f0       	breq	.+32     	; 0x4d8 <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
 4b8:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <genu_TerminalModuleState>
 4bc:	22 30       	cpi	r18, 0x02	; 2
 4be:	79 f0       	breq	.+30     	; 0x4de <Terminal_Out+0x2e>
 4c0:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
 4c2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <stringLength>
 4c6:	68 2f       	mov	r22, r24
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	ce 01       	movw	r24, r28
 4cc:	0e 94 d3 05 	call	0xba6	; 0xba6 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	21 f0       	breq	.+8      	; 0x4dc <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
 4d4:	20 e0       	ldi	r18, 0x00	; 0
 4d6:	03 c0       	rjmp	.+6      	; 0x4de <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
 4d8:	24 e0       	ldi	r18, 0x04	; 4
 4da:	01 c0       	rjmp	.+2      	; 0x4de <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
 4dc:	21 e0       	ldi	r18, 0x01	; 1
}
 4de:	82 2f       	mov	r24, r18
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
 4e6:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
 4e8:	89 2b       	or	r24, r25
 4ea:	a1 f0       	breq	.+40     	; 0x514 <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
 4ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
 4f0:	82 30       	cpi	r24, 0x02	; 2
 4f2:	99 f0       	breq	.+38     	; 0x51a <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
 4f4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gu8_flag>
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	71 f4       	brne	.+28     	; 0x518 <Terminal_In+0x32>
	{
		gu8_flag = 0;
 4fc:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
 500:	8a ec       	ldi	r24, 0xCA	; 202
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 2f 05 	call	0xa5e	; 0xa5e <stringCopy>
		EmptyString(gau8_data);
 508:	8a ec       	ldi	r24, 0xCA	; 202
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 23 05 	call	0xa46	; 0xa46 <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
 510:	85 e0       	ldi	r24, 0x05	; 5
 512:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
 514:	84 e0       	ldi	r24, 0x04	; 4
 516:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
 518:	81 e0       	ldi	r24, 0x01	; 1
}
 51a:	08 95       	ret

0000051c <main>:

#include "App Layer/App.h"

int main(void)
{
	App_start();
 51c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <App_start>
 520:	ff cf       	rjmp	.-2      	; 0x520 <main+0x4>

00000522 <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
 522:	2f 92       	push	r2
 524:	3f 92       	push	r3
 526:	4f 92       	push	r4
 528:	5f 92       	push	r5
 52a:	6f 92       	push	r6
 52c:	7f 92       	push	r7
 52e:	8f 92       	push	r8
 530:	9f 92       	push	r9
 532:	af 92       	push	r10
 534:	bf 92       	push	r11
 536:	cf 92       	push	r12
 538:	df 92       	push	r13
 53a:	ef 92       	push	r14
 53c:	ff 92       	push	r15
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	00 d0       	rcall	.+0      	; 0x548 <Delay_ms+0x26>
 548:	00 d0       	rcall	.+0      	; 0x54a <Delay_ms+0x28>
 54a:	1f 92       	push	r1
 54c:	cd b7       	in	r28, 0x3d	; 61
 54e:	de b7       	in	r29, 0x3e	; 62
 550:	22 2e       	mov	r2, r18
 552:	33 2e       	mov	r3, r19
 554:	44 2e       	mov	r4, r20
 556:	55 2e       	mov	r5, r21
 558:	66 2e       	mov	r6, r22
 55a:	79 83       	std	Y+1, r23	; 0x01
 55c:	8a 83       	std	Y+2, r24	; 0x02
 55e:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
 560:	91 2c       	mov	r9, r1
 562:	1d 82       	std	Y+5, r1	; 0x05
 564:	1c 82       	std	Y+4, r1	; 0x04
 566:	b0 e0       	ldi	r27, 0x00	; 0
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	e0 e0       	ldi	r30, 0x00	; 0
 56c:	71 2c       	mov	r7, r1
 56e:	81 2c       	mov	r8, r1
 570:	3d c0       	rjmp	.+122    	; 0x5ec <Delay_ms+0xca>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
 572:	2c 2d       	mov	r18, r12
 574:	3d 2d       	mov	r19, r13
 576:	4e 2d       	mov	r20, r14
 578:	5f 2d       	mov	r21, r15
 57a:	60 2f       	mov	r22, r16
 57c:	71 2f       	mov	r23, r17
 57e:	8a 2d       	mov	r24, r10
 580:	9b 2d       	mov	r25, r11
 582:	a1 e0       	ldi	r26, 0x01	; 1
 584:	0e 94 a0 06 	call	0xd40	; 0xd40 <__adddi3_s8>
 588:	c2 2e       	mov	r12, r18
 58a:	d3 2e       	mov	r13, r19
 58c:	e4 2e       	mov	r14, r20
 58e:	f5 2e       	mov	r15, r21
 590:	06 2f       	mov	r16, r22
 592:	17 2f       	mov	r17, r23
 594:	a8 2e       	mov	r10, r24
 596:	b9 2e       	mov	r11, r25
 598:	08 c0       	rjmp	.+16     	; 0x5aa <Delay_ms+0x88>
 59a:	c1 2c       	mov	r12, r1
 59c:	d1 2c       	mov	r13, r1
 59e:	e1 2c       	mov	r14, r1
 5a0:	f1 2c       	mov	r15, r1
 5a2:	00 e0       	ldi	r16, 0x00	; 0
 5a4:	10 e0       	ldi	r17, 0x00	; 0
 5a6:	a1 2c       	mov	r10, r1
 5a8:	b1 2c       	mov	r11, r1
 5aa:	2c 2d       	mov	r18, r12
 5ac:	3d 2d       	mov	r19, r13
 5ae:	4e 2d       	mov	r20, r14
 5b0:	5f 2d       	mov	r21, r15
 5b2:	60 2f       	mov	r22, r16
 5b4:	71 2f       	mov	r23, r17
 5b6:	8a 2d       	mov	r24, r10
 5b8:	9b 2d       	mov	r25, r11
 5ba:	ac e0       	ldi	r26, 0x0C	; 12
 5bc:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__cmpdi2_s8>
 5c0:	c1 f2       	breq	.-80     	; 0x572 <Delay_ms+0x50>
 5c2:	b8 f2       	brcs	.-82     	; 0x572 <Delay_ms+0x50>
 5c4:	8c 81       	ldd	r24, Y+4	; 0x04

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
 5c6:	29 2d       	mov	r18, r9
 5c8:	3d 81       	ldd	r19, Y+5	; 0x05
 5ca:	48 2f       	mov	r20, r24
 5cc:	5b 2f       	mov	r21, r27
 5ce:	6f 2f       	mov	r22, r31
 5d0:	7e 2f       	mov	r23, r30
 5d2:	87 2d       	mov	r24, r7
 5d4:	98 2d       	mov	r25, r8
 5d6:	a1 e0       	ldi	r26, 0x01	; 1
 5d8:	0e 94 a0 06 	call	0xd40	; 0xd40 <__adddi3_s8>
 5dc:	92 2e       	mov	r9, r18
 5de:	3d 83       	std	Y+5, r19	; 0x05
 5e0:	4c 83       	std	Y+4, r20	; 0x04
 5e2:	b5 2f       	mov	r27, r21
 5e4:	f6 2f       	mov	r31, r22
 5e6:	e7 2f       	mov	r30, r23
 5e8:	78 2e       	mov	r7, r24
 5ea:	89 2e       	mov	r8, r25
 5ec:	29 2d       	mov	r18, r9
 5ee:	3d 81       	ldd	r19, Y+5	; 0x05
 5f0:	4c 81       	ldd	r20, Y+4	; 0x04
 5f2:	5b 2f       	mov	r21, r27
 5f4:	6f 2f       	mov	r22, r31
 5f6:	7e 2f       	mov	r23, r30
 5f8:	87 2d       	mov	r24, r7
 5fa:	98 2d       	mov	r25, r8
 5fc:	a2 2c       	mov	r10, r2
 5fe:	b3 2c       	mov	r11, r3
 600:	c4 2c       	mov	r12, r4
 602:	d5 2c       	mov	r13, r5
 604:	e6 2c       	mov	r14, r6
 606:	f9 80       	ldd	r15, Y+1	; 0x01
 608:	0a 81       	ldd	r16, Y+2	; 0x02
 60a:	1b 81       	ldd	r17, Y+3	; 0x03
 60c:	0e 94 ac 06 	call	0xd58	; 0xd58 <__cmpdi2>
 610:	20 f2       	brcs	.-120    	; 0x59a <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
 612:	0f 90       	pop	r0
 614:	0f 90       	pop	r0
 616:	0f 90       	pop	r0
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	1f 91       	pop	r17
 622:	0f 91       	pop	r16
 624:	ff 90       	pop	r15
 626:	ef 90       	pop	r14
 628:	df 90       	pop	r13
 62a:	cf 90       	pop	r12
 62c:	bf 90       	pop	r11
 62e:	af 90       	pop	r10
 630:	9f 90       	pop	r9
 632:	8f 90       	pop	r8
 634:	7f 90       	pop	r7
 636:	6f 90       	pop	r6
 638:	5f 90       	pop	r5
 63a:	4f 90       	pop	r4
 63c:	3f 90       	pop	r3
 63e:	2f 90       	pop	r2
 640:	08 95       	ret

00000642 <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
 642:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 646:	86 30       	cpi	r24, 0x06	; 6
 648:	41 f0       	breq	.+16     	; 0x65a <I2C_MasterInit+0x18>
 64a:	11 b8       	out	0x01, r1	; 1
 64c:	8a ef       	ldi	r24, 0xFA	; 250
 64e:	80 b9       	out	0x00, r24	; 0
 650:	86 e0       	ldi	r24, 0x06	; 6
 652:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <genuI2C_Status>
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	08 95       	ret
 65a:	87 e0       	ldi	r24, 0x07	; 7
 65c:	08 95       	ret

0000065e <I2C_MasterSendSTART>:
 65e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 662:	86 30       	cpi	r24, 0x06	; 6
 664:	59 f4       	brne	.+22     	; 0x67c <I2C_MasterSendSTART+0x1e>
 666:	84 ea       	ldi	r24, 0xA4	; 164
 668:	86 bf       	out	0x36, r24	; 54
 66a:	06 b6       	in	r0, 0x36	; 54
 66c:	07 fe       	sbrs	r0, 7
 66e:	fd cf       	rjmp	.-6      	; 0x66a <I2C_MasterSendSTART+0xc>
 670:	81 b1       	in	r24, 0x01	; 1
 672:	88 7f       	andi	r24, 0xF8	; 248
 674:	88 30       	cpi	r24, 0x08	; 8
 676:	21 f0       	breq	.+8      	; 0x680 <I2C_MasterSendSTART+0x22>
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	08 95       	ret
 67c:	85 e0       	ldi	r24, 0x05	; 5
 67e:	08 95       	ret
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	08 95       	ret

00000684 <I2C_MasterSendSlaveAddress>:
 684:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
 688:	96 30       	cpi	r25, 0x06	; 6
 68a:	29 f5       	brne	.+74     	; 0x6d6 <I2C_MasterSendSlaveAddress+0x52>
 68c:	62 30       	cpi	r22, 0x02	; 2
 68e:	28 f5       	brcc	.+74     	; 0x6da <I2C_MasterSendSlaveAddress+0x56>
 690:	88 23       	and	r24, r24
 692:	2c f1       	brlt	.+74     	; 0x6de <I2C_MasterSendSlaveAddress+0x5a>
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	68 2b       	or	r22, r24
 69c:	63 b9       	out	0x03, r22	; 3
 69e:	84 e8       	ldi	r24, 0x84	; 132
 6a0:	86 bf       	out	0x36, r24	; 54
 6a2:	06 b6       	in	r0, 0x36	; 54
 6a4:	07 fe       	sbrs	r0, 7
 6a6:	fd cf       	rjmp	.-6      	; 0x6a2 <I2C_MasterSendSlaveAddress+0x1e>
 6a8:	81 b1       	in	r24, 0x01	; 1
 6aa:	88 7f       	andi	r24, 0xF8	; 248
 6ac:	88 33       	cpi	r24, 0x38	; 56
 6ae:	59 f0       	breq	.+22     	; 0x6c6 <I2C_MasterSendSlaveAddress+0x42>
 6b0:	28 f4       	brcc	.+10     	; 0x6bc <I2C_MasterSendSlaveAddress+0x38>
 6b2:	88 31       	cpi	r24, 0x18	; 24
 6b4:	b1 f0       	breq	.+44     	; 0x6e2 <I2C_MasterSendSlaveAddress+0x5e>
 6b6:	80 32       	cpi	r24, 0x20	; 32
 6b8:	41 f0       	breq	.+16     	; 0x6ca <I2C_MasterSendSlaveAddress+0x46>
 6ba:	0b c0       	rjmp	.+22     	; 0x6d2 <I2C_MasterSendSlaveAddress+0x4e>
 6bc:	80 34       	cpi	r24, 0x40	; 64
 6be:	89 f0       	breq	.+34     	; 0x6e2 <I2C_MasterSendSlaveAddress+0x5e>
 6c0:	88 34       	cpi	r24, 0x48	; 72
 6c2:	29 f0       	breq	.+10     	; 0x6ce <I2C_MasterSendSlaveAddress+0x4a>
 6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <I2C_MasterSendSlaveAddress+0x4e>
 6c6:	88 e3       	ldi	r24, 0x38	; 56
 6c8:	08 95       	ret
 6ca:	80 e2       	ldi	r24, 0x20	; 32
 6cc:	08 95       	ret
 6ce:	88 e4       	ldi	r24, 0x48	; 72
 6d0:	08 95       	ret
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	08 95       	ret
 6d6:	85 e0       	ldi	r24, 0x05	; 5
 6d8:	08 95       	ret
 6da:	82 e0       	ldi	r24, 0x02	; 2
 6dc:	08 95       	ret
 6de:	83 e0       	ldi	r24, 0x03	; 3
 6e0:	08 95       	ret
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	08 95       	ret

000006e6 <I2C_MasterSendRepSTART>:
 6e6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 6ea:	86 30       	cpi	r24, 0x06	; 6
 6ec:	59 f4       	brne	.+22     	; 0x704 <I2C_MasterSendRepSTART+0x1e>
 6ee:	84 ea       	ldi	r24, 0xA4	; 164
 6f0:	86 bf       	out	0x36, r24	; 54
 6f2:	06 b6       	in	r0, 0x36	; 54
 6f4:	07 fe       	sbrs	r0, 7
 6f6:	fd cf       	rjmp	.-6      	; 0x6f2 <I2C_MasterSendRepSTART+0xc>
 6f8:	81 b1       	in	r24, 0x01	; 1
 6fa:	88 7f       	andi	r24, 0xF8	; 248
 6fc:	80 31       	cpi	r24, 0x10	; 16
 6fe:	21 f0       	breq	.+8      	; 0x708 <I2C_MasterSendRepSTART+0x22>
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	08 95       	ret
 704:	85 e0       	ldi	r24, 0x05	; 5
 706:	08 95       	ret
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	08 95       	ret

0000070c <I2C_MasterSendSTOP>:
 70c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 710:	86 30       	cpi	r24, 0x06	; 6
 712:	39 f4       	brne	.+14     	; 0x722 <I2C_MasterSendSTOP+0x16>
 714:	84 e9       	ldi	r24, 0x94	; 148
 716:	86 bf       	out	0x36, r24	; 54
 718:	06 b6       	in	r0, 0x36	; 54
 71a:	04 fc       	sbrc	r0, 4
 71c:	fd cf       	rjmp	.-6      	; 0x718 <I2C_MasterSendSTOP+0xc>
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	08 95       	ret
 722:	85 e0       	ldi	r24, 0x05	; 5
 724:	08 95       	ret

00000726 <I2C_MasterSendByte>:
 726:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
 72a:	96 30       	cpi	r25, 0x06	; 6
 72c:	69 f4       	brne	.+26     	; 0x748 <I2C_MasterSendByte+0x22>
 72e:	83 b9       	out	0x03, r24	; 3
 730:	84 e8       	ldi	r24, 0x84	; 132
 732:	86 bf       	out	0x36, r24	; 54
 734:	06 b6       	in	r0, 0x36	; 54
 736:	07 fe       	sbrs	r0, 7
 738:	fd cf       	rjmp	.-6      	; 0x734 <I2C_MasterSendByte+0xe>
 73a:	81 b1       	in	r24, 0x01	; 1
 73c:	88 7f       	andi	r24, 0xF8	; 248
 73e:	88 32       	cpi	r24, 0x28	; 40
 740:	29 f0       	breq	.+10     	; 0x74c <I2C_MasterSendByte+0x26>
 742:	80 33       	cpi	r24, 0x30	; 48
 744:	29 f4       	brne	.+10     	; 0x750 <I2C_MasterSendByte+0x2a>
 746:	08 95       	ret
 748:	85 e0       	ldi	r24, 0x05	; 5
 74a:	08 95       	ret
 74c:	88 e2       	ldi	r24, 0x28	; 40
 74e:	08 95       	ret
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	08 95       	ret

00000754 <I2C_MasterReceiveByte_ACK>:
 754:	fc 01       	movw	r30, r24
 756:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
 75a:	96 30       	cpi	r25, 0x06	; 6
 75c:	79 f4       	brne	.+30     	; 0x77c <I2C_MasterReceiveByte_ACK+0x28>
 75e:	30 97       	sbiw	r30, 0x00	; 0
 760:	79 f0       	breq	.+30     	; 0x780 <I2C_MasterReceiveByte_ACK+0x2c>
 762:	84 ec       	ldi	r24, 0xC4	; 196
 764:	86 bf       	out	0x36, r24	; 54
 766:	06 b6       	in	r0, 0x36	; 54
 768:	07 fe       	sbrs	r0, 7
 76a:	fd cf       	rjmp	.-6      	; 0x766 <I2C_MasterReceiveByte_ACK+0x12>
 76c:	81 b1       	in	r24, 0x01	; 1
 76e:	88 7f       	andi	r24, 0xF8	; 248
 770:	80 35       	cpi	r24, 0x50	; 80
 772:	41 f4       	brne	.+16     	; 0x784 <I2C_MasterReceiveByte_ACK+0x30>
 774:	83 b1       	in	r24, 0x03	; 3
 776:	80 83       	st	Z, r24
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	08 95       	ret
 77c:	85 e0       	ldi	r24, 0x05	; 5
 77e:	08 95       	ret
 780:	84 e0       	ldi	r24, 0x04	; 4
 782:	08 95       	ret
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	08 95       	ret

00000788 <I2C_MasterReceiveByte_NACK>:
 788:	fc 01       	movw	r30, r24
 78a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
 78e:	96 30       	cpi	r25, 0x06	; 6
 790:	79 f4       	brne	.+30     	; 0x7b0 <I2C_MasterReceiveByte_NACK+0x28>
 792:	30 97       	sbiw	r30, 0x00	; 0
 794:	79 f0       	breq	.+30     	; 0x7b4 <I2C_MasterReceiveByte_NACK+0x2c>
 796:	84 e8       	ldi	r24, 0x84	; 132
 798:	86 bf       	out	0x36, r24	; 54
 79a:	06 b6       	in	r0, 0x36	; 54
 79c:	07 fe       	sbrs	r0, 7
 79e:	fd cf       	rjmp	.-6      	; 0x79a <I2C_MasterReceiveByte_NACK+0x12>
 7a0:	81 b1       	in	r24, 0x01	; 1
 7a2:	88 7f       	andi	r24, 0xF8	; 248
 7a4:	88 35       	cpi	r24, 0x58	; 88
 7a6:	41 f4       	brne	.+16     	; 0x7b8 <I2C_MasterReceiveByte_NACK+0x30>
 7a8:	83 b1       	in	r24, 0x03	; 3
 7aa:	80 83       	st	Z, r24
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	08 95       	ret
 7b0:	85 e0       	ldi	r24, 0x05	; 5
 7b2:	08 95       	ret
 7b4:	84 e0       	ldi	r24, 0x04	; 4
 7b6:	08 95       	ret
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	08 95       	ret

000007bc <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
 7bc:	7f 92       	push	r7
 7be:	8f 92       	push	r8
 7c0:	9f 92       	push	r9
 7c2:	af 92       	push	r10
 7c4:	bf 92       	push	r11
 7c6:	cf 92       	push	r12
 7c8:	df 92       	push	r13
 7ca:	ef 92       	push	r14
 7cc:	ff 92       	push	r15
 7ce:	0f 93       	push	r16
 7d0:	1f 93       	push	r17
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	78 2e       	mov	r7, r24
 7d8:	eb 01       	movw	r28, r22
 7da:	7a 01       	movw	r14, r20
 7dc:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
 7de:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 7e2:	86 30       	cpi	r24, 0x06	; 6
 7e4:	09 f0       	breq	.+2      	; 0x7e8 <I2C_MasterReceiveGeneral+0x2c>
 7e6:	47 c0       	rjmp	.+142    	; 0x876 <__stack+0x17>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
 7e8:	20 97       	sbiw	r28, 0x00	; 0
 7ea:	09 f4       	brne	.+2      	; 0x7ee <I2C_MasterReceiveGeneral+0x32>
 7ec:	46 c0       	rjmp	.+140    	; 0x87a <__stack+0x1b>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
 7ee:	23 2b       	or	r18, r19
 7f0:	09 f4       	brne	.+2      	; 0x7f4 <I2C_MasterReceiveGeneral+0x38>
 7f2:	45 c0       	rjmp	.+138    	; 0x87e <__stack+0x1f>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
 7f4:	77 20       	and	r7, r7
 7f6:	0c f4       	brge	.+2      	; 0x7fa <I2C_MasterReceiveGeneral+0x3e>
 7f8:	44 c0       	rjmp	.+136    	; 0x882 <__stack+0x23>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 7fa:	0e 94 2f 03 	call	0x65e	; 0x65e <I2C_MasterSendSTART>
 7fe:	88 23       	and	r24, r24
 800:	09 f4       	brne	.+2      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 802:	4a c0       	rjmp	.+148    	; 0x898 <__stack+0x39>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 804:	60 e0       	ldi	r22, 0x00	; 0
 806:	87 2d       	mov	r24, r7
 808:	0e 94 42 03 	call	0x684	; 0x684 <I2C_MasterSendSlaveAddress>
 80c:	81 30       	cpi	r24, 0x01	; 1
 80e:	d9 f5       	brne	.+118    	; 0x886 <__stack+0x27>
 810:	0b c0       	rjmp	.+22     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 812:	4e 01       	movw	r8, r28
 814:	8f ef       	ldi	r24, 0xFF	; 255
 816:	88 1a       	sub	r8, r24
 818:	98 0a       	sbc	r9, r24
 81a:	88 81       	ld	r24, Y
 81c:	0e 94 93 03 	call	0x726	; 0x726 <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
 820:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 822:	88 23       	and	r24, r24
 824:	c9 f1       	breq	.+114    	; 0x898 <__stack+0x39>
 826:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
 828:	57 01       	movw	r10, r14
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	a8 1a       	sub	r10, r24
 82e:	b1 08       	sbc	r11, r1
 830:	ef 28       	or	r14, r15
 832:	79 f7       	brne	.-34     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
 834:	0e 94 73 03 	call	0x6e6	; 0x6e6 <I2C_MasterSendRepSTART>
 838:	81 30       	cpi	r24, 0x01	; 1
 83a:	39 f5       	brne	.+78     	; 0x88a <__stack+0x2b>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 83c:	61 e0       	ldi	r22, 0x01	; 1
 83e:	87 2d       	mov	r24, r7
 840:	0e 94 42 03 	call	0x684	; 0x684 <I2C_MasterSendSlaveAddress>
 844:	81 30       	cpi	r24, 0x01	; 1
 846:	19 f5       	brne	.+70     	; 0x88e <__stack+0x2f>
 848:	08 c0       	rjmp	.+16     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
 84a:	e6 01       	movw	r28, r12
 84c:	21 96       	adiw	r28, 0x01	; 1
 84e:	c6 01       	movw	r24, r12
 850:	0e 94 aa 03 	call	0x754	; 0x754 <I2C_MasterReceiveByte_ACK>
 854:	81 30       	cpi	r24, 0x01	; 1
 856:	e9 f4       	brne	.+58     	; 0x892 <__stack+0x33>
 858:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
 85a:	01 50       	subi	r16, 0x01	; 1
 85c:	11 09       	sbc	r17, r1
 85e:	a9 f7       	brne	.-22     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
 860:	c6 01       	movw	r24, r12
 862:	0e 94 c4 03 	call	0x788	; 0x788 <I2C_MasterReceiveByte_NACK>
 866:	81 30       	cpi	r24, 0x01	; 1
 868:	b1 f4       	brne	.+44     	; 0x896 <__stack+0x37>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
 86a:	0e 94 86 03 	call	0x70c	; 0x70c <I2C_MasterSendSTOP>
 86e:	81 30       	cpi	r24, 0x01	; 1
 870:	99 f0       	breq	.+38     	; 0x898 <__stack+0x39>
		return I2C_STATUS_ERROR_NOK;
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	11 c0       	rjmp	.+34     	; 0x898 <__stack+0x39>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
 876:	85 e0       	ldi	r24, 0x05	; 5
 878:	0f c0       	rjmp	.+30     	; 0x898 <__stack+0x39>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
 87a:	84 e0       	ldi	r24, 0x04	; 4
 87c:	0d c0       	rjmp	.+26     	; 0x898 <__stack+0x39>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
 87e:	84 e0       	ldi	r24, 0x04	; 4
 880:	0b c0       	rjmp	.+22     	; 0x898 <__stack+0x39>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
 882:	83 e0       	ldi	r24, 0x03	; 3
 884:	09 c0       	rjmp	.+18     	; 0x898 <__stack+0x39>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	07 c0       	rjmp	.+14     	; 0x898 <__stack+0x39>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	05 c0       	rjmp	.+10     	; 0x898 <__stack+0x39>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	03 c0       	rjmp	.+6      	; 0x898 <__stack+0x39>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	01 c0       	rjmp	.+2      	; 0x898 <__stack+0x39>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
 896:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
 898:	df 91       	pop	r29
 89a:	cf 91       	pop	r28
 89c:	1f 91       	pop	r17
 89e:	0f 91       	pop	r16
 8a0:	ff 90       	pop	r15
 8a2:	ef 90       	pop	r14
 8a4:	df 90       	pop	r13
 8a6:	cf 90       	pop	r12
 8a8:	bf 90       	pop	r11
 8aa:	af 90       	pop	r10
 8ac:	9f 90       	pop	r9
 8ae:	8f 90       	pop	r8
 8b0:	7f 90       	pop	r7
 8b2:	08 95       	ret

000008b4 <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
 8b4:	bf 92       	push	r11
 8b6:	cf 92       	push	r12
 8b8:	df 92       	push	r13
 8ba:	ef 92       	push	r14
 8bc:	ff 92       	push	r15
 8be:	0f 93       	push	r16
 8c0:	1f 93       	push	r17
 8c2:	cf 93       	push	r28
 8c4:	df 93       	push	r29
 8c6:	18 2f       	mov	r17, r24
 8c8:	06 2f       	mov	r16, r22
 8ca:	ea 01       	movw	r28, r20
 8cc:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
 8ce:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 8d2:	86 30       	cpi	r24, 0x06	; 6
 8d4:	59 f5       	brne	.+86     	; 0x92c <I2C_MasterSendToLocation+0x78>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
 8d6:	20 97       	sbiw	r28, 0x00	; 0
 8d8:	59 f1       	breq	.+86     	; 0x930 <I2C_MasterSendToLocation+0x7c>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
 8da:	11 23       	and	r17, r17
 8dc:	5c f1       	brlt	.+86     	; 0x934 <I2C_MasterSendToLocation+0x80>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 8de:	0e 94 2f 03 	call	0x65e	; 0x65e <I2C_MasterSendSTART>
 8e2:	88 23       	and	r24, r24
 8e4:	61 f1       	breq	.+88     	; 0x93e <I2C_MasterSendToLocation+0x8a>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 8e6:	60 e0       	ldi	r22, 0x00	; 0
 8e8:	81 2f       	mov	r24, r17
 8ea:	0e 94 42 03 	call	0x684	; 0x684 <I2C_MasterSendSlaveAddress>
 8ee:	b8 2e       	mov	r11, r24
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	b8 12       	cpse	r11, r24
 8f4:	21 c0       	rjmp	.+66     	; 0x938 <I2C_MasterSendToLocation+0x84>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 8f6:	80 2f       	mov	r24, r16
 8f8:	0e 94 93 03 	call	0x726	; 0x726 <I2C_MasterSendByte>
 8fc:	81 11       	cpse	r24, r1
 8fe:	0c c0       	rjmp	.+24     	; 0x918 <I2C_MasterSendToLocation+0x64>
 900:	1e c0       	rjmp	.+60     	; 0x93e <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 902:	6e 01       	movw	r12, r28
 904:	8f ef       	ldi	r24, 0xFF	; 255
 906:	c8 1a       	sub	r12, r24
 908:	d8 0a       	sbc	r13, r24
 90a:	88 81       	ld	r24, Y
 90c:	0e 94 93 03 	call	0x726	; 0x726 <I2C_MasterSendByte>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
 910:	78 01       	movw	r14, r16
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 912:	88 23       	and	r24, r24
 914:	a1 f0       	breq	.+40     	; 0x93e <I2C_MasterSendToLocation+0x8a>
 916:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
 918:	87 01       	movw	r16, r14
 91a:	01 50       	subi	r16, 0x01	; 1
 91c:	11 09       	sbc	r17, r1
 91e:	ef 28       	or	r14, r15
 920:	81 f7       	brne	.-32     	; 0x902 <I2C_MasterSendToLocation+0x4e>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 922:	0e 94 86 03 	call	0x70c	; 0x70c <I2C_MasterSendSTOP>
 926:	81 11       	cpse	r24, r1
 928:	09 c0       	rjmp	.+18     	; 0x93c <I2C_MasterSendToLocation+0x88>
 92a:	09 c0       	rjmp	.+18     	; 0x93e <I2C_MasterSendToLocation+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
 92c:	85 e0       	ldi	r24, 0x05	; 5
 92e:	07 c0       	rjmp	.+14     	; 0x93e <I2C_MasterSendToLocation+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
 930:	84 e0       	ldi	r24, 0x04	; 4
 932:	05 c0       	rjmp	.+10     	; 0x93e <I2C_MasterSendToLocation+0x8a>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
 934:	83 e0       	ldi	r24, 0x03	; 3
 936:	03 c0       	rjmp	.+6      	; 0x93e <I2C_MasterSendToLocation+0x8a>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 938:	80 e0       	ldi	r24, 0x00	; 0
 93a:	01 c0       	rjmp	.+2      	; 0x93e <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
 93c:	8b 2d       	mov	r24, r11
}
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	1f 91       	pop	r17
 944:	0f 91       	pop	r16
 946:	ff 90       	pop	r15
 948:	ef 90       	pop	r14
 94a:	df 90       	pop	r13
 94c:	cf 90       	pop	r12
 94e:	bf 90       	pop	r11
 950:	08 95       	ret

00000952 <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
 952:	0f 93       	push	r16
 954:	1f 93       	push	r17
 956:	cf 93       	push	r28
 958:	df 93       	push	r29
 95a:	1f 92       	push	r1
 95c:	cd b7       	in	r28, 0x3d	; 61
 95e:	de b7       	in	r29, 0x3e	; 62
 960:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
 962:	89 01       	movw	r16, r18
 964:	9a 01       	movw	r18, r20
 966:	41 e0       	ldi	r20, 0x01	; 1
 968:	50 e0       	ldi	r21, 0x00	; 0
 96a:	be 01       	movw	r22, r28
 96c:	6f 5f       	subi	r22, 0xFF	; 255
 96e:	7f 4f       	sbci	r23, 0xFF	; 255
 970:	0e 94 de 03 	call	0x7bc	; 0x7bc <I2C_MasterReceiveGeneral>
}
 974:	0f 90       	pop	r0
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	1f 91       	pop	r17
 97c:	0f 91       	pop	r16
 97e:	08 95       	ret

00000980 <power>:
        else if(string1[u8_loopIndex] < string2[u8_loopIndex])
            return 2;
        u8_loopIndex++;
    }
    return 3;
}
 980:	cf 93       	push	r28
 982:	c8 2f       	mov	r28, r24
 984:	f6 2f       	mov	r31, r22
 986:	66 23       	and	r22, r22
 988:	a1 f0       	breq	.+40     	; 0x9b2 <power+0x32>
 98a:	88 23       	and	r24, r24
 98c:	b9 f0       	breq	.+46     	; 0x9bc <power+0x3c>
 98e:	61 e0       	ldi	r22, 0x01	; 1
 990:	70 e0       	ldi	r23, 0x00	; 0
 992:	80 e0       	ldi	r24, 0x00	; 0
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	e0 e0       	ldi	r30, 0x00	; 0
 998:	09 c0       	rjmp	.+18     	; 0x9ac <power+0x2c>
 99a:	ac 2f       	mov	r26, r28
 99c:	b0 e0       	ldi	r27, 0x00	; 0
 99e:	26 2f       	mov	r18, r22
 9a0:	37 2f       	mov	r19, r23
 9a2:	48 2f       	mov	r20, r24
 9a4:	59 2f       	mov	r21, r25
 9a6:	0e 94 95 06 	call	0xd2a	; 0xd2a <__muluhisi3>
 9aa:	ef 5f       	subi	r30, 0xFF	; 255
 9ac:	ef 17       	cp	r30, r31
 9ae:	a8 f3       	brcs	.-22     	; 0x99a <power+0x1a>
 9b0:	09 c0       	rjmp	.+18     	; 0x9c4 <power+0x44>
 9b2:	61 e0       	ldi	r22, 0x01	; 1
 9b4:	70 e0       	ldi	r23, 0x00	; 0
 9b6:	80 e0       	ldi	r24, 0x00	; 0
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	04 c0       	rjmp	.+8      	; 0x9c4 <power+0x44>
 9bc:	60 e0       	ldi	r22, 0x00	; 0
 9be:	70 e0       	ldi	r23, 0x00	; 0
 9c0:	80 e0       	ldi	r24, 0x00	; 0
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	cf 91       	pop	r28
 9c6:	08 95       	ret

000009c8 <stringLength>:
 9c8:	ac 01       	movw	r20, r24
 9ca:	80 e0       	ldi	r24, 0x00	; 0
 9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <stringLength+0x8>
 9ce:	8f 5f       	subi	r24, 0xFF	; 255
 9d0:	fa 01       	movw	r30, r20
 9d2:	e8 0f       	add	r30, r24
 9d4:	f1 1d       	adc	r31, r1
 9d6:	20 81       	ld	r18, Z
 9d8:	21 11       	cpse	r18, r1
 9da:	f9 cf       	rjmp	.-14     	; 0x9ce <stringLength+0x6>
 9dc:	8f 5f       	subi	r24, 0xFF	; 255
 9de:	08 95       	ret

000009e0 <stringCompare>:
 9e0:	ff 92       	push	r15
 9e2:	0f 93       	push	r16
 9e4:	1f 93       	push	r17
 9e6:	cf 93       	push	r28
 9e8:	df 93       	push	r29
 9ea:	8c 01       	movw	r16, r24
 9ec:	eb 01       	movw	r28, r22
 9ee:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <stringLength>
 9f2:	f8 2e       	mov	r15, r24
 9f4:	ce 01       	movw	r24, r28
 9f6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <stringLength>
 9fa:	8f 15       	cp	r24, r15
 9fc:	b8 f0       	brcs	.+46     	; 0xa2c <stringCompare+0x4c>
 9fe:	f8 16       	cp	r15, r24
 a00:	b8 f0       	brcs	.+46     	; 0xa30 <stringCompare+0x50>
 a02:	30 e0       	ldi	r19, 0x00	; 0
 a04:	09 c0       	rjmp	.+18     	; 0xa18 <stringCompare+0x38>
 a06:	fe 01       	movw	r30, r28
 a08:	e8 0f       	add	r30, r24
 a0a:	f9 1f       	adc	r31, r25
 a0c:	80 81       	ld	r24, Z
 a0e:	82 17       	cp	r24, r18
 a10:	88 f0       	brcs	.+34     	; 0xa34 <stringCompare+0x54>
 a12:	28 17       	cp	r18, r24
 a14:	88 f0       	brcs	.+34     	; 0xa38 <stringCompare+0x58>
 a16:	3f 5f       	subi	r19, 0xFF	; 255
 a18:	83 2f       	mov	r24, r19
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	f8 01       	movw	r30, r16
 a1e:	e8 0f       	add	r30, r24
 a20:	f9 1f       	adc	r31, r25
 a22:	20 81       	ld	r18, Z
 a24:	21 11       	cpse	r18, r1
 a26:	ef cf       	rjmp	.-34     	; 0xa06 <stringCompare+0x26>
 a28:	81 e0       	ldi	r24, 0x01	; 1
 a2a:	07 c0       	rjmp	.+14     	; 0xa3a <stringCompare+0x5a>
 a2c:	82 e0       	ldi	r24, 0x02	; 2
 a2e:	05 c0       	rjmp	.+10     	; 0xa3a <stringCompare+0x5a>
 a30:	83 e0       	ldi	r24, 0x03	; 3
 a32:	03 c0       	rjmp	.+6      	; 0xa3a <stringCompare+0x5a>
 a34:	82 e0       	ldi	r24, 0x02	; 2
 a36:	01 c0       	rjmp	.+2      	; 0xa3a <stringCompare+0x5a>
 a38:	83 e0       	ldi	r24, 0x03	; 3
 a3a:	df 91       	pop	r29
 a3c:	cf 91       	pop	r28
 a3e:	1f 91       	pop	r17
 a40:	0f 91       	pop	r16
 a42:	ff 90       	pop	r15
 a44:	08 95       	ret

00000a46 <EmptyString>:

void EmptyString(uint8_t *string)
{
 a46:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
 a48:	90 e0       	ldi	r25, 0x00	; 0
	while(string[u8_loopIndex] != '\0')
 a4a:	02 c0       	rjmp	.+4      	; 0xa50 <EmptyString+0xa>
		string[u8_loopIndex++] = '\0';
 a4c:	9f 5f       	subi	r25, 0xFF	; 255
 a4e:	10 82       	st	Z, r1
}

void EmptyString(uint8_t *string)
{
	uint8_t u8_loopIndex=0;
	while(string[u8_loopIndex] != '\0')
 a50:	fa 01       	movw	r30, r20
 a52:	e9 0f       	add	r30, r25
 a54:	f1 1d       	adc	r31, r1
 a56:	20 81       	ld	r18, Z
 a58:	21 11       	cpse	r18, r1
 a5a:	f8 cf       	rjmp	.-16     	; 0xa4c <EmptyString+0x6>
		string[u8_loopIndex++] = '\0';
}
 a5c:	08 95       	ret

00000a5e <stringCopy>:

void stringCopy(uint8_t* source, uint8_t* destination)
{
 a5e:	dc 01       	movw	r26, r24
    uint8_t u8_loopIndex=0;
 a60:	90 e0       	ldi	r25, 0x00	; 0
    while(source[u8_loopIndex] != '\0')
 a62:	05 c0       	rjmp	.+10     	; 0xa6e <stringCopy+0x10>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
 a64:	fb 01       	movw	r30, r22
 a66:	e2 0f       	add	r30, r18
 a68:	f3 1f       	adc	r31, r19
 a6a:	40 83       	st	Z, r20
	    u8_loopIndex++;
 a6c:	9f 5f       	subi	r25, 0xFF	; 255
}

void stringCopy(uint8_t* source, uint8_t* destination)
{
    uint8_t u8_loopIndex=0;
    while(source[u8_loopIndex] != '\0')
 a6e:	29 2f       	mov	r18, r25
 a70:	30 e0       	ldi	r19, 0x00	; 0
 a72:	fd 01       	movw	r30, r26
 a74:	e2 0f       	add	r30, r18
 a76:	f3 1f       	adc	r31, r19
 a78:	40 81       	ld	r20, Z
 a7a:	41 11       	cpse	r20, r1
 a7c:	f3 cf       	rjmp	.-26     	; 0xa64 <stringCopy+0x6>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
	    u8_loopIndex++;
    }
}
 a7e:	08 95       	ret

00000a80 <stringHexToNum>:
void stringHexToNum(uint8_t *pu8_String, uint16_t *pu16_Num)
{
 a80:	df 92       	push	r13
 a82:	ef 92       	push	r14
 a84:	ff 92       	push	r15
 a86:	0f 93       	push	r16
 a88:	1f 93       	push	r17
 a8a:	cf 93       	push	r28
 a8c:	df 93       	push	r29
 a8e:	7c 01       	movw	r14, r24
 a90:	8b 01       	movw	r16, r22
	sint8_t s8_loopIndex=0;
	uint8_t u8_powerValue=0;
	uint8_t temp_val=0;
	uint8_t u8_stringLength = stringLength(pu8_String)-1;
 a92:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <stringLength>
	*pu16_Num = 0;
 a96:	f8 01       	movw	r30, r16
 a98:	11 82       	std	Z+1, r1	; 0x01
 a9a:	10 82       	st	Z, r1
	for(s8_loopIndex=u8_stringLength-1 ; s8_loopIndex>=0 ; s8_loopIndex--)
 a9c:	ce ef       	ldi	r28, 0xFE	; 254
 a9e:	c8 0f       	add	r28, r24
    }
}
void stringHexToNum(uint8_t *pu8_String, uint16_t *pu16_Num)
{
	sint8_t s8_loopIndex=0;
	uint8_t u8_powerValue=0;
 aa0:	60 e0       	ldi	r22, 0x00	; 0
	uint8_t temp_val=0;
	uint8_t u8_stringLength = stringLength(pu8_String)-1;
	*pu16_Num = 0;
	for(s8_loopIndex=u8_stringLength-1 ; s8_loopIndex>=0 ; s8_loopIndex--)
 aa2:	55 c0       	rjmp	.+170    	; 0xb4e <stringHexToNum+0xce>
	{
		if ((pu8_String[s8_loopIndex]>='0') && (pu8_String[s8_loopIndex]<='9'))
 aa4:	f7 01       	movw	r30, r14
 aa6:	ec 0f       	add	r30, r28
 aa8:	f1 1d       	adc	r31, r1
 aaa:	c7 fd       	sbrc	r28, 7
 aac:	fa 95       	dec	r31
 aae:	a0 81       	ld	r26, Z
 ab0:	d0 ed       	ldi	r29, 0xD0	; 208
 ab2:	da 0f       	add	r29, r26
 ab4:	da 30       	cpi	r29, 0x0A	; 10
 ab6:	a8 f4       	brcc	.+42     	; 0xae2 <stringHexToNum+0x62>
		{
			temp_val = pu8_String[s8_loopIndex] - '0';
			*pu16_Num += temp_val*power(16,u8_powerValue++);
 ab8:	dd 24       	eor	r13, r13
 aba:	d3 94       	inc	r13
 abc:	d6 0e       	add	r13, r22
 abe:	80 e1       	ldi	r24, 0x10	; 16
 ac0:	0e 94 c0 04 	call	0x980	; 0x980 <power>
 ac4:	9b 01       	movw	r18, r22
 ac6:	ac 01       	movw	r20, r24
 ac8:	ad 2f       	mov	r26, r29
 aca:	b0 e0       	ldi	r27, 0x00	; 0
 acc:	0e 94 95 06 	call	0xd2a	; 0xd2a <__muluhisi3>
 ad0:	f8 01       	movw	r30, r16
 ad2:	20 81       	ld	r18, Z
 ad4:	31 81       	ldd	r19, Z+1	; 0x01
 ad6:	62 0f       	add	r22, r18
 ad8:	73 1f       	adc	r23, r19
 ada:	71 83       	std	Z+1, r23	; 0x01
 adc:	60 83       	st	Z, r22
 ade:	6d 2d       	mov	r22, r13
 ae0:	35 c0       	rjmp	.+106    	; 0xb4c <stringHexToNum+0xcc>
		}else if((pu8_String[s8_loopIndex]>='A') && (pu8_String[s8_loopIndex]<='F'))
 ae2:	8f eb       	ldi	r24, 0xBF	; 191
 ae4:	8a 0f       	add	r24, r26
 ae6:	86 30       	cpi	r24, 0x06	; 6
 ae8:	b8 f4       	brcc	.+46     	; 0xb18 <stringHexToNum+0x98>
		{
			temp_val = pu8_String[s8_loopIndex] - 55;
 aea:	d9 ec       	ldi	r29, 0xC9	; 201
 aec:	da 0f       	add	r29, r26
			*pu16_Num += temp_val*power(16,u8_powerValue++);
 aee:	dd 24       	eor	r13, r13
 af0:	d3 94       	inc	r13
 af2:	d6 0e       	add	r13, r22
 af4:	80 e1       	ldi	r24, 0x10	; 16
 af6:	0e 94 c0 04 	call	0x980	; 0x980 <power>
 afa:	9b 01       	movw	r18, r22
 afc:	ac 01       	movw	r20, r24
 afe:	ad 2f       	mov	r26, r29
 b00:	b0 e0       	ldi	r27, 0x00	; 0
 b02:	0e 94 95 06 	call	0xd2a	; 0xd2a <__muluhisi3>
 b06:	f8 01       	movw	r30, r16
 b08:	20 81       	ld	r18, Z
 b0a:	31 81       	ldd	r19, Z+1	; 0x01
 b0c:	62 0f       	add	r22, r18
 b0e:	73 1f       	adc	r23, r19
 b10:	71 83       	std	Z+1, r23	; 0x01
 b12:	60 83       	st	Z, r22
 b14:	6d 2d       	mov	r22, r13
 b16:	1a c0       	rjmp	.+52     	; 0xb4c <stringHexToNum+0xcc>
		}else if((pu8_String[s8_loopIndex]>='a') && (pu8_String[s8_loopIndex]<='f'))
 b18:	8f e9       	ldi	r24, 0x9F	; 159
 b1a:	8a 0f       	add	r24, r26
 b1c:	86 30       	cpi	r24, 0x06	; 6
 b1e:	b0 f4       	brcc	.+44     	; 0xb4c <stringHexToNum+0xcc>
		{
			temp_val = pu8_String[s8_loopIndex] - 87;
 b20:	d9 ea       	ldi	r29, 0xA9	; 169
 b22:	da 0f       	add	r29, r26
			*pu16_Num += temp_val*power(16,u8_powerValue++);
 b24:	dd 24       	eor	r13, r13
 b26:	d3 94       	inc	r13
 b28:	d6 0e       	add	r13, r22
 b2a:	80 e1       	ldi	r24, 0x10	; 16
 b2c:	0e 94 c0 04 	call	0x980	; 0x980 <power>
 b30:	9b 01       	movw	r18, r22
 b32:	ac 01       	movw	r20, r24
 b34:	ad 2f       	mov	r26, r29
 b36:	b0 e0       	ldi	r27, 0x00	; 0
 b38:	0e 94 95 06 	call	0xd2a	; 0xd2a <__muluhisi3>
 b3c:	f8 01       	movw	r30, r16
 b3e:	20 81       	ld	r18, Z
 b40:	31 81       	ldd	r19, Z+1	; 0x01
 b42:	62 0f       	add	r22, r18
 b44:	73 1f       	adc	r23, r19
 b46:	71 83       	std	Z+1, r23	; 0x01
 b48:	60 83       	st	Z, r22
 b4a:	6d 2d       	mov	r22, r13
	sint8_t s8_loopIndex=0;
	uint8_t u8_powerValue=0;
	uint8_t temp_val=0;
	uint8_t u8_stringLength = stringLength(pu8_String)-1;
	*pu16_Num = 0;
	for(s8_loopIndex=u8_stringLength-1 ; s8_loopIndex>=0 ; s8_loopIndex--)
 b4c:	c1 50       	subi	r28, 0x01	; 1
 b4e:	cc 23       	and	r28, r28
 b50:	0c f0       	brlt	.+2      	; 0xb54 <stringHexToNum+0xd4>
 b52:	a8 cf       	rjmp	.-176    	; 0xaa4 <stringHexToNum+0x24>
			temp_val = pu8_String[s8_loopIndex] - 87;
			*pu16_Num += temp_val*power(16,u8_powerValue++);
		}

	}
}
 b54:	df 91       	pop	r29
 b56:	cf 91       	pop	r28
 b58:	1f 91       	pop	r17
 b5a:	0f 91       	pop	r16
 b5c:	ff 90       	pop	r15
 b5e:	ef 90       	pop	r14
 b60:	df 90       	pop	r13
 b62:	08 95       	ret

00000b64 <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
 b64:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <u8_Uart_Status>
 b68:	81 30       	cpi	r24, 0x01	; 1
 b6a:	81 f0       	breq	.+32     	; 0xb8c <Uart_init+0x28>
 b6c:	10 bc       	out	0x20, r1	; 32
 b6e:	8c e0       	ldi	r24, 0x0C	; 12
 b70:	89 b9       	out	0x09, r24	; 9
 b72:	82 e0       	ldi	r24, 0x02	; 2
 b74:	8b b9       	out	0x0b, r24	; 11
 b76:	88 e1       	ldi	r24, 0x18	; 24
 b78:	8a b9       	out	0x0a, r24	; 10
 b7a:	80 e8       	ldi	r24, 0x80	; 128
 b7c:	80 bd       	out	0x20, r24	; 32
 b7e:	80 b5       	in	r24, 0x20	; 32
 b80:	86 68       	ori	r24, 0x86	; 134
 b82:	80 bd       	out	0x20, r24	; 32
 b84:	81 e0       	ldi	r24, 0x01	; 1
 b86:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <u8_Uart_Status>
 b8a:	08 95       	ret
 b8c:	87 e0       	ldi	r24, 0x07	; 7
 b8e:	08 95       	ret

00000b90 <Uart_sendByte>:
 b90:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <u8_Uart_Status>
 b94:	99 23       	and	r25, r25
 b96:	29 f0       	breq	.+10     	; 0xba2 <Uart_sendByte+0x12>
 b98:	5d 9b       	sbis	0x0b, 5	; 11
 b9a:	fe cf       	rjmp	.-4      	; 0xb98 <Uart_sendByte+0x8>
 b9c:	8c b9       	out	0x0c, r24	; 12
 b9e:	81 e0       	ldi	r24, 0x01	; 1
 ba0:	08 95       	ret
 ba2:	86 e0       	ldi	r24, 0x06	; 6
 ba4:	08 95       	ret

00000ba6 <Uart_sendPacket>:
 ba6:	ef 92       	push	r14
 ba8:	ff 92       	push	r15
 baa:	0f 93       	push	r16
 bac:	1f 93       	push	r17
 bae:	cf 93       	push	r28
 bb0:	df 93       	push	r29
 bb2:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <u8_Uart_Status>
 bb6:	22 23       	and	r18, r18
 bb8:	99 f0       	breq	.+38     	; 0xbe0 <Uart_sendPacket+0x3a>
 bba:	8b 01       	movw	r16, r22
 bbc:	7c 01       	movw	r14, r24
 bbe:	c0 e0       	ldi	r28, 0x00	; 0
 bc0:	d0 e0       	ldi	r29, 0x00	; 0
 bc2:	09 c0       	rjmp	.+18     	; 0xbd6 <Uart_sendPacket+0x30>
 bc4:	f7 01       	movw	r30, r14
 bc6:	ec 0f       	add	r30, r28
 bc8:	fd 1f       	adc	r31, r29
 bca:	80 81       	ld	r24, Z
 bcc:	0e 94 c8 05 	call	0xb90	; 0xb90 <Uart_sendByte>
 bd0:	81 30       	cpi	r24, 0x01	; 1
 bd2:	41 f4       	brne	.+16     	; 0xbe4 <Uart_sendPacket+0x3e>
 bd4:	21 96       	adiw	r28, 0x01	; 1
 bd6:	c0 17       	cp	r28, r16
 bd8:	d1 07       	cpc	r29, r17
 bda:	a0 f3       	brcs	.-24     	; 0xbc4 <Uart_sendPacket+0x1e>
 bdc:	81 e0       	ldi	r24, 0x01	; 1
 bde:	03 c0       	rjmp	.+6      	; 0xbe6 <Uart_sendPacket+0x40>
 be0:	86 e0       	ldi	r24, 0x06	; 6
 be2:	01 c0       	rjmp	.+2      	; 0xbe6 <Uart_sendPacket+0x40>
 be4:	80 e0       	ldi	r24, 0x00	; 0
 be6:	df 91       	pop	r29
 be8:	cf 91       	pop	r28
 bea:	1f 91       	pop	r17
 bec:	0f 91       	pop	r16
 bee:	ff 90       	pop	r15
 bf0:	ef 90       	pop	r14
 bf2:	08 95       	ret

00000bf4 <Uart_EnableNotification_RXC>:
 bf4:	9c 01       	movw	r18, r24
 bf6:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <u8_Uart_Status>
 bfa:	99 23       	and	r25, r25
 bfc:	61 f0       	breq	.+24     	; 0xc16 <Uart_EnableNotification_RXC+0x22>
 bfe:	21 15       	cp	r18, r1
 c00:	31 05       	cpc	r19, r1
 c02:	59 f0       	breq	.+22     	; 0xc1a <Uart_EnableNotification_RXC+0x26>
 c04:	8a b1       	in	r24, 0x0a	; 10
 c06:	80 68       	ori	r24, 0x80	; 128
 c08:	8a b9       	out	0x0a, r24	; 10
 c0a:	30 93 ce 01 	sts	0x01CE, r19	; 0x8001ce <Uart_RXC_CallBackPtr+0x1>
 c0e:	20 93 cd 01 	sts	0x01CD, r18	; 0x8001cd <Uart_RXC_CallBackPtr>
 c12:	81 e0       	ldi	r24, 0x01	; 1
 c14:	08 95       	ret
 c16:	86 e0       	ldi	r24, 0x06	; 6
 c18:	08 95       	ret
 c1a:	85 e0       	ldi	r24, 0x05	; 5
 c1c:	08 95       	ret

00000c1e <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
 c1e:	8c b1       	in	r24, 0x0c	; 12
}
 c20:	08 95       	ret

00000c22 <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
 c22:	1f 92       	push	r1
 c24:	0f 92       	push	r0
 c26:	0f b6       	in	r0, 0x3f	; 63
 c28:	0f 92       	push	r0
 c2a:	11 24       	eor	r1, r1
 c2c:	2f 93       	push	r18
 c2e:	3f 93       	push	r19
 c30:	4f 93       	push	r20
 c32:	5f 93       	push	r21
 c34:	6f 93       	push	r22
 c36:	7f 93       	push	r23
 c38:	8f 93       	push	r24
 c3a:	9f 93       	push	r25
 c3c:	af 93       	push	r26
 c3e:	bf 93       	push	r27
 c40:	ef 93       	push	r30
 c42:	ff 93       	push	r31
 c44:	e0 91 cf 01 	lds	r30, 0x01CF	; 0x8001cf <Uart_TXC_CallBackPtr>
 c48:	f0 91 d0 01 	lds	r31, 0x01D0	; 0x8001d0 <Uart_TXC_CallBackPtr+0x1>
 c4c:	09 95       	icall
 c4e:	ff 91       	pop	r31
 c50:	ef 91       	pop	r30
 c52:	bf 91       	pop	r27
 c54:	af 91       	pop	r26
 c56:	9f 91       	pop	r25
 c58:	8f 91       	pop	r24
 c5a:	7f 91       	pop	r23
 c5c:	6f 91       	pop	r22
 c5e:	5f 91       	pop	r21
 c60:	4f 91       	pop	r20
 c62:	3f 91       	pop	r19
 c64:	2f 91       	pop	r18
 c66:	0f 90       	pop	r0
 c68:	0f be       	out	0x3f, r0	; 63
 c6a:	0f 90       	pop	r0
 c6c:	1f 90       	pop	r1
 c6e:	18 95       	reti

00000c70 <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
 c70:	1f 92       	push	r1
 c72:	0f 92       	push	r0
 c74:	0f b6       	in	r0, 0x3f	; 63
 c76:	0f 92       	push	r0
 c78:	11 24       	eor	r1, r1
 c7a:	2f 93       	push	r18
 c7c:	3f 93       	push	r19
 c7e:	4f 93       	push	r20
 c80:	5f 93       	push	r21
 c82:	6f 93       	push	r22
 c84:	7f 93       	push	r23
 c86:	8f 93       	push	r24
 c88:	9f 93       	push	r25
 c8a:	af 93       	push	r26
 c8c:	bf 93       	push	r27
 c8e:	ef 93       	push	r30
 c90:	ff 93       	push	r31
 c92:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <Uart_RXC_CallBackPtr>
 c96:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <Uart_RXC_CallBackPtr+0x1>
 c9a:	09 95       	icall
 c9c:	ff 91       	pop	r31
 c9e:	ef 91       	pop	r30
 ca0:	bf 91       	pop	r27
 ca2:	af 91       	pop	r26
 ca4:	9f 91       	pop	r25
 ca6:	8f 91       	pop	r24
 ca8:	7f 91       	pop	r23
 caa:	6f 91       	pop	r22
 cac:	5f 91       	pop	r21
 cae:	4f 91       	pop	r20
 cb0:	3f 91       	pop	r19
 cb2:	2f 91       	pop	r18
 cb4:	0f 90       	pop	r0
 cb6:	0f be       	out	0x3f, r0	; 63
 cb8:	0f 90       	pop	r0
 cba:	1f 90       	pop	r1
 cbc:	18 95       	reti

00000cbe <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
 cbe:	1f 92       	push	r1
 cc0:	0f 92       	push	r0
 cc2:	0f b6       	in	r0, 0x3f	; 63
 cc4:	0f 92       	push	r0
 cc6:	11 24       	eor	r1, r1
 cc8:	2f 93       	push	r18
 cca:	3f 93       	push	r19
 ccc:	4f 93       	push	r20
 cce:	5f 93       	push	r21
 cd0:	6f 93       	push	r22
 cd2:	7f 93       	push	r23
 cd4:	8f 93       	push	r24
 cd6:	9f 93       	push	r25
 cd8:	af 93       	push	r26
 cda:	bf 93       	push	r27
 cdc:	ef 93       	push	r30
 cde:	ff 93       	push	r31
 ce0:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <Uart_UDRE_CallBackPtr>
 ce4:	f0 91 cc 01 	lds	r31, 0x01CC	; 0x8001cc <Uart_UDRE_CallBackPtr+0x1>
 ce8:	09 95       	icall
 cea:	ff 91       	pop	r31
 cec:	ef 91       	pop	r30
 cee:	bf 91       	pop	r27
 cf0:	af 91       	pop	r26
 cf2:	9f 91       	pop	r25
 cf4:	8f 91       	pop	r24
 cf6:	7f 91       	pop	r23
 cf8:	6f 91       	pop	r22
 cfa:	5f 91       	pop	r21
 cfc:	4f 91       	pop	r20
 cfe:	3f 91       	pop	r19
 d00:	2f 91       	pop	r18
 d02:	0f 90       	pop	r0
 d04:	0f be       	out	0x3f, r0	; 63
 d06:	0f 90       	pop	r0
 d08:	1f 90       	pop	r1
 d0a:	18 95       	reti

00000d0c <__umulhisi3>:
 d0c:	a2 9f       	mul	r26, r18
 d0e:	b0 01       	movw	r22, r0
 d10:	b3 9f       	mul	r27, r19
 d12:	c0 01       	movw	r24, r0
 d14:	a3 9f       	mul	r26, r19
 d16:	70 0d       	add	r23, r0
 d18:	81 1d       	adc	r24, r1
 d1a:	11 24       	eor	r1, r1
 d1c:	91 1d       	adc	r25, r1
 d1e:	b2 9f       	mul	r27, r18
 d20:	70 0d       	add	r23, r0
 d22:	81 1d       	adc	r24, r1
 d24:	11 24       	eor	r1, r1
 d26:	91 1d       	adc	r25, r1
 d28:	08 95       	ret

00000d2a <__muluhisi3>:
 d2a:	0e 94 86 06 	call	0xd0c	; 0xd0c <__umulhisi3>
 d2e:	a5 9f       	mul	r26, r21
 d30:	90 0d       	add	r25, r0
 d32:	b4 9f       	mul	r27, r20
 d34:	90 0d       	add	r25, r0
 d36:	a4 9f       	mul	r26, r20
 d38:	80 0d       	add	r24, r0
 d3a:	91 1d       	adc	r25, r1
 d3c:	11 24       	eor	r1, r1
 d3e:	08 95       	ret

00000d40 <__adddi3_s8>:
 d40:	00 24       	eor	r0, r0
 d42:	a7 fd       	sbrc	r26, 7
 d44:	00 94       	com	r0
 d46:	2a 0f       	add	r18, r26
 d48:	30 1d       	adc	r19, r0
 d4a:	40 1d       	adc	r20, r0
 d4c:	50 1d       	adc	r21, r0
 d4e:	60 1d       	adc	r22, r0
 d50:	70 1d       	adc	r23, r0
 d52:	80 1d       	adc	r24, r0
 d54:	90 1d       	adc	r25, r0
 d56:	08 95       	ret

00000d58 <__cmpdi2>:
 d58:	2a 15       	cp	r18, r10
 d5a:	3b 05       	cpc	r19, r11
 d5c:	4c 05       	cpc	r20, r12
 d5e:	5d 05       	cpc	r21, r13
 d60:	6e 05       	cpc	r22, r14
 d62:	7f 05       	cpc	r23, r15
 d64:	80 07       	cpc	r24, r16
 d66:	91 07       	cpc	r25, r17
 d68:	08 95       	ret

00000d6a <__cmpdi2_s8>:
 d6a:	00 24       	eor	r0, r0
 d6c:	a7 fd       	sbrc	r26, 7
 d6e:	00 94       	com	r0
 d70:	2a 17       	cp	r18, r26
 d72:	30 05       	cpc	r19, r0
 d74:	40 05       	cpc	r20, r0
 d76:	50 05       	cpc	r21, r0
 d78:	60 05       	cpc	r22, r0
 d7a:	70 05       	cpc	r23, r0
 d7c:	80 05       	cpc	r24, r0
 d7e:	90 05       	cpc	r25, r0
 d80:	08 95       	ret

00000d82 <_exit>:
 d82:	f8 94       	cli

00000d84 <__stop_program>:
 d84:	ff cf       	rjmp	.-2      	; 0xd84 <__stop_program>
