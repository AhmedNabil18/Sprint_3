
EEPROM_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00000bd2  00000c66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010c  008000c4  008000c4  00000cca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000235e  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cad  00000000  00000000  000032c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001565  00000000  00000000  00003f73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000072c  00000000  00000000  000054d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f82  00000000  00000000  00005c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022ee  00000000  00000000  00006b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00008e74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__vector_13>
  38:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__vector_14>
  3c:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3c       	cpi	r26, 0xC4	; 196
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 ec       	ldi	r26, 0xC4	; 196
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3d       	cpi	r26, 0xD0	; 208
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 57 03 	call	0x6ae	; 0x6ae <main>
  8a:	0c 94 e7 05 	jmp	0xbce	; 0xbce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	84 30       	cpi	r24, 0x04	; 4
  98:	81 f0       	breq	.+32     	; 0xba <App_init+0x28>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	/* Call the initializer of the Terminal */
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
  9a:	0e 94 0c 03 	call	0x618	; 0x618 <Terminal_init>
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	49 f4       	brne	.+18     	; 0xb4 <App_init+0x22>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Call the initializer of the Eeprom */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
  a2:	0e 94 76 01 	call	0x2ec	; 0x2ec <Eeprom_24_init>
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	39 f4       	brne	.+14     	; 0xb8 <App_init+0x26>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return APP_STATUS_ERROR_OK;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	08 95       	ret
/**************************************************************************************/

	/* Call the initializer of the Terminal */
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
	{
		return APP_STATUS_ERROR_NOK;
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	08 95       	ret
	}
	/* Call the initializer of the Eeprom */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
	{
		return APP_STATUS_ERROR_NOK;
  b8:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
  ba:	08 95       	ret

000000bc <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	c1 50       	subi	r28, 0x01	; 1
  c6:	d1 40       	sbci	r29, 0x01	; 1
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
  d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d6:	84 30       	cpi	r24, 0x04	; 4
  d8:	09 f0       	breq	.+2      	; 0xdc <App_update+0x20>
  da:	bf c0       	rjmp	.+382    	; 0x25a <App_update+0x19e>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	static uint16_t u16_locationAddress=0;
	uint8_t u8_data[2]={0};
  dc:	1a 82       	std	Y+2, r1	; 0x02
  de:	19 82       	std	Y+1, r1	; 0x01
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
  e0:	ce 01       	movw	r24, r28
  e2:	03 96       	adiw	r24, 0x03	; 3
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	fc 01       	movw	r30, r24
  e8:	11 92       	st	Z+, r1
  ea:	2a 95       	dec	r18
  ec:	e9 f7       	brne	.-6      	; 0xe8 <App_update+0x2c>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
  ee:	0e 94 3c 03 	call	0x678	; 0x678 <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
  f2:	85 30       	cpi	r24, 0x05	; 5
  f4:	09 f0       	breq	.+2      	; 0xf8 <App_update+0x3c>
  f6:	ad c0       	rjmp	.+346    	; 0x252 <App_update+0x196>
	{
		if(gu8_appState == APP_STATE_CMD)
  f8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <gu8_appState>
  fc:	81 11       	cpse	r24, r1
  fe:	38 c0       	rjmp	.+112    	; 0x170 <App_update+0xb4>
		{
			if(stringCompare(au8_inputString,(uint8_t*)cgau8_writeString) == 1)
 100:	6d eb       	ldi	r22, 0xBD	; 189
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	ce 01       	movw	r24, r28
 106:	03 96       	adiw	r24, 0x03	; 3
 108:	0e 94 1c 02 	call	0x438	; 0x438 <stringCompare>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	69 f4       	brne	.+26     	; 0x12a <App_update+0x6e>
			{
				gu8_appAction = APP_ACTION_WRITE;
 110:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <gu8_appAction>
				gu8_appState = APP_STATE_ADDRESS;
 114:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <gu8_appState>
				if(Terminal_Out((uint8_t*)"Address: ") != TERMINAL_STATUS_ERROR_OK)
 118:	82 e9       	ldi	r24, 0x92	; 146
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 21 03 	call	0x642	; 0x642 <Terminal_Out>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	09 f4       	brne	.+2      	; 0x126 <App_update+0x6a>
 124:	9c c0       	rjmp	.+312    	; 0x25e <App_update+0x1a2>
					return APP_STATUS_ERROR_NOK;
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	b5 c0       	rjmp	.+362    	; 0x294 <App_update+0x1d8>
			}else if(stringCompare(au8_inputString,(uint8_t*)cgau8_readString) == 1)
 12a:	68 eb       	ldi	r22, 0xB8	; 184
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	ce 01       	movw	r24, r28
 130:	03 96       	adiw	r24, 0x03	; 3
 132:	0e 94 1c 02 	call	0x438	; 0x438 <stringCompare>
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	79 f4       	brne	.+30     	; 0x158 <App_update+0x9c>
			{
				gu8_appAction = APP_ACTION_READ;
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <gu8_appAction>
				gu8_appState = APP_STATE_ADDRESS;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <gu8_appState>
				if(Terminal_Out((uint8_t*)"Address: ") != TERMINAL_STATUS_ERROR_OK)
 146:	82 e9       	ldi	r24, 0x92	; 146
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 21 03 	call	0x642	; 0x642 <Terminal_Out>
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	09 f4       	brne	.+2      	; 0x154 <App_update+0x98>
 152:	87 c0       	rjmp	.+270    	; 0x262 <App_update+0x1a6>
					return APP_STATUS_ERROR_NOK;
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	9e c0       	rjmp	.+316    	; 0x294 <App_update+0x1d8>
			}else
			{
				if(Terminal_Out((uint8_t*)"INVALID Input!! \rCommand: ") != TERMINAL_STATUS_ERROR_OK)
 158:	84 e6       	ldi	r24, 0x64	; 100
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 21 03 	call	0x642	; 0x642 <Terminal_Out>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	09 f0       	breq	.+2      	; 0x166 <App_update+0xaa>
 164:	80 c0       	rjmp	.+256    	; 0x266 <App_update+0x1aa>
					return APP_STATUS_ERROR_NOK;
				gu8_appAction = APP_ACTION_TERMINAL;
 166:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <gu8_appAction>
				gu8_appState = APP_STATE_CMD;
 16a:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <gu8_appState>
 16e:	92 c0       	rjmp	.+292    	; 0x294 <App_update+0x1d8>
			}
		}else if(gu8_appState == APP_STATE_ADDRESS)
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	09 f0       	breq	.+2      	; 0x176 <App_update+0xba>
 174:	54 c0       	rjmp	.+168    	; 0x21e <App_update+0x162>
		{
			stringHexToNum(au8_inputString,&u16_locationAddress);
 176:	64 ec       	ldi	r22, 0xC4	; 196
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	ce 01       	movw	r24, r28
 17c:	03 96       	adiw	r24, 0x03	; 3
 17e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <stringHexToNum>
			if(u16_locationAddress > EEPROM_24_WORDS_NUM-1)
 182:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
 186:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <__data_end+0x1>
 18a:	81 15       	cp	r24, r1
 18c:	98 40       	sbci	r25, 0x08	; 8
 18e:	48 f0       	brcs	.+18     	; 0x1a2 <App_update+0xe6>
			{
				if(Terminal_Out((uint8_t*)"INVALID Address!! \rAddress: ") != TERMINAL_STATUS_ERROR_OK)
 190:	8f e7       	ldi	r24, 0x7F	; 127
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 21 03 	call	0x642	; 0x642 <Terminal_Out>
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	09 f4       	brne	.+2      	; 0x19e <App_update+0xe2>
 19c:	66 c0       	rjmp	.+204    	; 0x26a <App_update+0x1ae>
					return APP_STATUS_ERROR_NOK;
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	79 c0       	rjmp	.+242    	; 0x294 <App_update+0x1d8>
			}else
			{
				if(Terminal_Out((uint8_t*)"OK\r") != TERMINAL_STATUS_ERROR_OK)
 1a2:	8c e9       	ldi	r24, 0x9C	; 156
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 21 03 	call	0x642	; 0x642 <Terminal_Out>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	09 f0       	breq	.+2      	; 0x1b0 <App_update+0xf4>
 1ae:	5f c0       	rjmp	.+190    	; 0x26e <App_update+0x1b2>
					return APP_STATUS_ERROR_NOK;
				if(gu8_appAction == APP_ACTION_READ)
 1b0:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <gu8_appAction>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	21 f5       	brne	.+72     	; 0x200 <App_update+0x144>
				{
					Eeprom_24_readByte(u16_locationAddress,u8_data);
 1b8:	be 01       	movw	r22, r28
 1ba:	6f 5f       	subi	r22, 0xFF	; 255
 1bc:	7f 4f       	sbci	r23, 0xFF	; 255
 1be:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
 1c2:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <__data_end+0x1>
 1c6:	0e 94 b6 01 	call	0x36c	; 0x36c <Eeprom_24_readByte>
					u8_data[1] = '\0';
 1ca:	1a 82       	std	Y+2, r1	; 0x02
					if(Terminal_Out((uint8_t*)"Data Stored is: ") != TERMINAL_STATUS_ERROR_OK)
 1cc:	80 ea       	ldi	r24, 0xA0	; 160
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 21 03 	call	0x642	; 0x642 <Terminal_Out>
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	09 f0       	breq	.+2      	; 0x1da <App_update+0x11e>
 1d8:	4c c0       	rjmp	.+152    	; 0x272 <App_update+0x1b6>
						return APP_STATUS_ERROR_NOK;
					if(Terminal_Out(u8_data) != TERMINAL_STATUS_ERROR_OK)
 1da:	ce 01       	movw	r24, r28
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	0e 94 21 03 	call	0x642	; 0x642 <Terminal_Out>
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <App_update+0x12c>
 1e6:	47 c0       	rjmp	.+142    	; 0x276 <App_update+0x1ba>
						return APP_STATUS_ERROR_NOK;
					if(Terminal_Out((uint8_t*)"\rCommand: ") != TERMINAL_STATUS_ERROR_OK)
 1e8:	84 e7       	ldi	r24, 0x74	; 116
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 21 03 	call	0x642	; 0x642 <Terminal_Out>
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <App_update+0x13a>
 1f4:	42 c0       	rjmp	.+132    	; 0x27a <App_update+0x1be>
						return APP_STATUS_ERROR_NOK;
					gu8_appAction = APP_ACTION_TERMINAL;
 1f6:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <gu8_appAction>
					gu8_appState = APP_STATE_CMD;
 1fa:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <gu8_appState>
 1fe:	4a c0       	rjmp	.+148    	; 0x294 <App_update+0x1d8>
				}else if(gu8_appAction == APP_ACTION_WRITE)
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	e9 f5       	brne	.+122    	; 0x27e <App_update+0x1c2>
				{
					if(Terminal_Out((uint8_t*)"Data: ") != TERMINAL_STATUS_ERROR_OK)
 204:	81 eb       	ldi	r24, 0xB1	; 177
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 21 03 	call	0x642	; 0x642 <Terminal_Out>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	c9 f5       	brne	.+114    	; 0x282 <App_update+0x1c6>
						return APP_STATUS_ERROR_NOK;
					gu8_appAction = APP_ACTION_WRITE;
 210:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <gu8_appAction>
					gu8_appState = APP_STATE_DATA;
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <gu8_appState>
			gu8_appState = APP_STATE_CMD;
		}
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	3b c0       	rjmp	.+118    	; 0x294 <App_update+0x1d8>
						return APP_STATUS_ERROR_NOK;
					gu8_appAction = APP_ACTION_WRITE;
					gu8_appState = APP_STATE_DATA;
				}
			}
		}else if(gu8_appState == APP_STATE_DATA)
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	91 f5       	brne	.+100    	; 0x286 <App_update+0x1ca>
		{
			if(Terminal_Out((uint8_t*)"OK\r") != TERMINAL_STATUS_ERROR_OK)
 222:	8c e9       	ldi	r24, 0x9C	; 156
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 21 03 	call	0x642	; 0x642 <Terminal_Out>
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	71 f5       	brne	.+92     	; 0x28a <App_update+0x1ce>
				return APP_STATUS_ERROR_NOK;
			Eeprom_24_writeByte(u16_locationAddress, au8_inputString[0]);
 22e:	6b 81       	ldd	r22, Y+3	; 0x03
 230:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
 234:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <__data_end+0x1>
 238:	0e 94 85 01 	call	0x30a	; 0x30a <Eeprom_24_writeByte>
			if(Terminal_Out((uint8_t*)"Command: ") != TERMINAL_STATUS_ERROR_OK)
 23c:	85 e7       	ldi	r24, 0x75	; 117
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 21 03 	call	0x642	; 0x642 <Terminal_Out>
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	19 f5       	brne	.+70     	; 0x28e <App_update+0x1d2>
				return APP_STATUS_ERROR_NOK;
			gu8_appAction = APP_ACTION_TERMINAL;
 248:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <gu8_appAction>
			gu8_appState = APP_STATE_CMD;
 24c:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <gu8_appState>
 250:	21 c0       	rjmp	.+66     	; 0x294 <App_update+0x1d8>
		}
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	f1 f0       	breq	.+60     	; 0x292 <App_update+0x1d6>
		return APP_STATUS_ERROR_NOK;
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	1d c0       	rjmp	.+58     	; 0x294 <App_update+0x1d8>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
 25a:	85 e0       	ldi	r24, 0x05	; 5
 25c:	1b c0       	rjmp	.+54     	; 0x294 <App_update+0x1d8>
			gu8_appState = APP_STATE_CMD;
		}
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	19 c0       	rjmp	.+50     	; 0x294 <App_update+0x1d8>
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	17 c0       	rjmp	.+46     	; 0x294 <App_update+0x1d8>
				if(Terminal_Out((uint8_t*)"Address: ") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
			}else
			{
				if(Terminal_Out((uint8_t*)"INVALID Input!! \rCommand: ") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	15 c0       	rjmp	.+42     	; 0x294 <App_update+0x1d8>
			gu8_appState = APP_STATE_CMD;
		}
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	13 c0       	rjmp	.+38     	; 0x294 <App_update+0x1d8>
				if(Terminal_Out((uint8_t*)"INVALID Address!! \rAddress: ") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
			}else
			{
				if(Terminal_Out((uint8_t*)"OK\r") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	11 c0       	rjmp	.+34     	; 0x294 <App_update+0x1d8>
				if(gu8_appAction == APP_ACTION_READ)
				{
					Eeprom_24_readByte(u16_locationAddress,u8_data);
					u8_data[1] = '\0';
					if(Terminal_Out((uint8_t*)"Data Stored is: ") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0f c0       	rjmp	.+30     	; 0x294 <App_update+0x1d8>
					if(Terminal_Out(u8_data) != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0d c0       	rjmp	.+26     	; 0x294 <App_update+0x1d8>
					if(Terminal_Out((uint8_t*)"\rCommand: ") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0b c0       	rjmp	.+22     	; 0x294 <App_update+0x1d8>
			gu8_appState = APP_STATE_CMD;
		}
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	09 c0       	rjmp	.+18     	; 0x294 <App_update+0x1d8>
					gu8_appAction = APP_ACTION_TERMINAL;
					gu8_appState = APP_STATE_CMD;
				}else if(gu8_appAction == APP_ACTION_WRITE)
				{
					if(Terminal_Out((uint8_t*)"Data: ") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	07 c0       	rjmp	.+14     	; 0x294 <App_update+0x1d8>
			gu8_appState = APP_STATE_CMD;
		}
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	05 c0       	rjmp	.+10     	; 0x294 <App_update+0x1d8>
				}
			}
		}else if(gu8_appState == APP_STATE_DATA)
		{
			if(Terminal_Out((uint8_t*)"OK\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	03 c0       	rjmp	.+6      	; 0x294 <App_update+0x1d8>
			Eeprom_24_writeByte(u16_locationAddress, au8_inputString[0]);
			if(Terminal_Out((uint8_t*)"Command: ") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	01 c0       	rjmp	.+2      	; 0x294 <App_update+0x1d8>
			gu8_appState = APP_STATE_CMD;
		}
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	cf 5f       	subi	r28, 0xFF	; 255
 296:	de 4f       	sbci	r29, 0xFE	; 254
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
 2a8:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	69 f4       	brne	.+26     	; 0x2ca <App_start+0x22>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
 2b0:	8f b7       	in	r24, 0x3f	; 63
 2b2:	80 68       	ori	r24, 0x80	; 128
 2b4:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	if(Terminal_Out((uint8_t*)"Command: ") != TERMINAL_STATUS_ERROR_OK)
 2b6:	85 e7       	ldi	r24, 0x75	; 117
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 21 03 	call	0x642	; 0x642 <Terminal_Out>
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	21 f4       	brne	.+8      	; 0x2ca <App_start+0x22>
		return APP_STATUS_ERROR_NOK;
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
 2c2:	0e 94 5e 00 	call	0xbc	; 0xbc <App_update>
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	e1 f3       	breq	.-8      	; 0x2c2 <App_start+0x1a>
			return APP_STATUS_ERROR_NOK;
			
	}
}
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	08 95       	ret

000002ce <EEPROM_getAddresses>:
* Description: Function to Calculate the slave address byte and the word address byte from the location
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
 2ce:	9a 01       	movw	r18, r20
 2d0:	22 27       	eor	r18, r18
 2d2:	37 70       	andi	r19, 0x07	; 7
 2d4:	22 0f       	add	r18, r18
 2d6:	23 2f       	mov	r18, r19
 2d8:	22 1f       	adc	r18, r18
 2da:	33 0b       	sbc	r19, r19
 2dc:	31 95       	neg	r19
 2de:	20 65       	ori	r18, 0x50	; 80
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
 2e4:	fb 01       	movw	r30, r22
 2e6:	40 83       	st	Z, r20
	return EEPROM_24_STATUS_ERROR_OK;
}
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	08 95       	ret

000002ec <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
 2ec:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_eepromModuleState>
 2f0:	83 30       	cpi	r24, 0x03	; 3
 2f2:	51 f0       	breq	.+20     	; 0x308 <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
 2f4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
 2f8:	85 30       	cpi	r24, 0x05	; 5
 2fa:	29 f0       	breq	.+10     	; 0x306 <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
 2fc:	83 e0       	ldi	r24, 0x03	; 3
 2fe:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
 306:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
 308:	08 95       	ret

0000030a <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	00 d0       	rcall	.+0      	; 0x312 <Eeprom_24_writeByte+0x8>
 312:	1f 92       	push	r1
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
 318:	ac 01       	movw	r20, r24
 31a:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
 31c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
 320:	93 30       	cpi	r25, 0x03	; 3
 322:	c9 f4       	brne	.+50     	; 0x356 <Eeprom_24_writeByte+0x4c>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
 324:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
 326:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
 328:	be 01       	movw	r22, r28
 32a:	6e 5f       	subi	r22, 0xFE	; 254
 32c:	7f 4f       	sbci	r23, 0xFF	; 255
 32e:	ce 01       	movw	r24, r28
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	0e 94 67 01 	call	0x2ce	; 0x2ce <EEPROM_getAddresses>
 336:	18 2f       	mov	r17, r24
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	79 f4       	brne	.+30     	; 0x35a <Eeprom_24_writeByte+0x50>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	ae 01       	movw	r20, r28
 342:	4d 5f       	subi	r20, 0xFD	; 253
 344:	5f 4f       	sbci	r21, 0xFF	; 255
 346:	6a 81       	ldd	r22, Y+2	; 0x02
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	0e 94 93 04 	call	0x926	; 0x926 <I2C_MasterSendToLocation>
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	29 f0       	breq	.+10     	; 0x35c <Eeprom_24_writeByte+0x52>
		return EEPROM_24_STATUS_ERROR_NOK;
 352:	10 e0       	ldi	r17, 0x00	; 0
 354:	03 c0       	rjmp	.+6      	; 0x35c <Eeprom_24_writeByte+0x52>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
 356:	12 e0       	ldi	r17, 0x02	; 2
 358:	01 c0       	rjmp	.+2      	; 0x35c <Eeprom_24_writeByte+0x52>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
 35a:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
 35c:	81 2f       	mov	r24, r17
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	08 95       	ret

0000036c <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
 36c:	ef 92       	push	r14
 36e:	ff 92       	push	r15
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	00 d0       	rcall	.+0      	; 0x378 <Eeprom_24_readByte+0xc>
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
 37c:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
 37e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
 382:	93 30       	cpi	r25, 0x03	; 3
 384:	d9 f4       	brne	.+54     	; 0x3bc <Eeprom_24_readByte+0x50>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
 386:	61 15       	cp	r22, r1
 388:	71 05       	cpc	r23, r1
 38a:	d1 f0       	breq	.+52     	; 0x3c0 <Eeprom_24_readByte+0x54>
 38c:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
 38e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t word_addr=0;
 390:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
 392:	be 01       	movw	r22, r28
 394:	6e 5f       	subi	r22, 0xFE	; 254
 396:	7f 4f       	sbci	r23, 0xFF	; 255
 398:	ce 01       	movw	r24, r28
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	0e 94 67 01 	call	0x2ce	; 0x2ce <EEPROM_getAddresses>
 3a0:	18 2f       	mov	r17, r24
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	79 f4       	brne	.+30     	; 0x3c4 <Eeprom_24_readByte+0x58>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
 3a6:	21 e0       	ldi	r18, 0x01	; 1
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	a7 01       	movw	r20, r14
 3ac:	6a 81       	ldd	r22, Y+2	; 0x02
 3ae:	89 81       	ldd	r24, Y+1	; 0x01
 3b0:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <I2C_MasterReceiveFromLocation>
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	39 f0       	breq	.+14     	; 0x3c6 <Eeprom_24_readByte+0x5a>
		return EEPROM_24_STATUS_ERROR_NOK;
 3b8:	10 e0       	ldi	r17, 0x00	; 0
 3ba:	05 c0       	rjmp	.+10     	; 0x3c6 <Eeprom_24_readByte+0x5a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
 3bc:	12 e0       	ldi	r17, 0x02	; 2
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <Eeprom_24_readByte+0x5a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
 3c0:	14 e0       	ldi	r17, 0x04	; 4
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <Eeprom_24_readByte+0x5a>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
	uint8_t word_addr=0;
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
 3c4:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
 3c6:	81 2f       	mov	r24, r17
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	08 95       	ret

000003d8 <power>:
        else if(string1[u8_loopIndex] < string2[u8_loopIndex])
            return 2;
        u8_loopIndex++;
    }
    return 3;
}
 3d8:	cf 93       	push	r28
 3da:	c8 2f       	mov	r28, r24
 3dc:	f6 2f       	mov	r31, r22
 3de:	66 23       	and	r22, r22
 3e0:	a1 f0       	breq	.+40     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3e2:	88 23       	and	r24, r24
 3e4:	b9 f0       	breq	.+46     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	e0 e0       	ldi	r30, 0x00	; 0
 3f0:	09 c0       	rjmp	.+18     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3f2:	ac 2f       	mov	r26, r28
 3f4:	b0 e0       	ldi	r27, 0x00	; 0
 3f6:	26 2f       	mov	r18, r22
 3f8:	37 2f       	mov	r19, r23
 3fa:	48 2f       	mov	r20, r24
 3fc:	59 2f       	mov	r21, r25
 3fe:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__muluhisi3>
 402:	ef 5f       	subi	r30, 0xFF	; 255
 404:	ef 17       	cp	r30, r31
 406:	a8 f3       	brcs	.-22     	; 0x3f2 <power+0x1a>
 408:	09 c0       	rjmp	.+18     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	04 c0       	rjmp	.+8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <stringLength>:
 420:	ac 01       	movw	r20, r24
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	01 c0       	rjmp	.+2      	; 0x428 <stringLength+0x8>
 426:	8f 5f       	subi	r24, 0xFF	; 255
 428:	fa 01       	movw	r30, r20
 42a:	e8 0f       	add	r30, r24
 42c:	f1 1d       	adc	r31, r1
 42e:	20 81       	ld	r18, Z
 430:	21 11       	cpse	r18, r1
 432:	f9 cf       	rjmp	.-14     	; 0x426 <stringLength+0x6>
 434:	8f 5f       	subi	r24, 0xFF	; 255
 436:	08 95       	ret

00000438 <stringCompare>:
 438:	ff 92       	push	r15
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	ec 01       	movw	r28, r24
 444:	8b 01       	movw	r16, r22
 446:	0e 94 10 02 	call	0x420	; 0x420 <stringLength>
 44a:	f8 2e       	mov	r15, r24
 44c:	c8 01       	movw	r24, r16
 44e:	0e 94 10 02 	call	0x420	; 0x420 <stringLength>
 452:	8f 15       	cp	r24, r15
 454:	a8 f0       	brcs	.+42     	; 0x480 <stringCompare+0x48>
 456:	f8 16       	cp	r15, r24
 458:	a8 f0       	brcs	.+42     	; 0x484 <stringCompare+0x4c>
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	07 c0       	rjmp	.+14     	; 0x46c <stringCompare+0x34>
 45e:	f8 01       	movw	r30, r16
 460:	e8 0f       	add	r30, r24
 462:	f9 1f       	adc	r31, r25
 464:	80 81       	ld	r24, Z
 466:	28 13       	cpse	r18, r24
 468:	0f c0       	rjmp	.+30     	; 0x488 <stringCompare+0x50>
 46a:	3f 5f       	subi	r19, 0xFF	; 255
 46c:	83 2f       	mov	r24, r19
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	fe 01       	movw	r30, r28
 472:	e8 0f       	add	r30, r24
 474:	f9 1f       	adc	r31, r25
 476:	20 81       	ld	r18, Z
 478:	21 11       	cpse	r18, r1
 47a:	f1 cf       	rjmp	.-30     	; 0x45e <stringCompare+0x26>
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	05 c0       	rjmp	.+10     	; 0x48a <stringCompare+0x52>
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	03 c0       	rjmp	.+6      	; 0x48a <stringCompare+0x52>
 484:	83 e0       	ldi	r24, 0x03	; 3
 486:	01 c0       	rjmp	.+2      	; 0x48a <stringCompare+0x52>
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	ff 90       	pop	r15
 494:	08 95       	ret

00000496 <EmptyString>:

void EmptyString(uint8_t *string)
{
 496:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
 498:	90 e0       	ldi	r25, 0x00	; 0
	while(string[u8_loopIndex] != '\0')
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <EmptyString+0xa>
		string[u8_loopIndex++] = '\0';
 49c:	9f 5f       	subi	r25, 0xFF	; 255
 49e:	10 82       	st	Z, r1
}

void EmptyString(uint8_t *string)
{
	uint8_t u8_loopIndex=0;
	while(string[u8_loopIndex] != '\0')
 4a0:	fa 01       	movw	r30, r20
 4a2:	e9 0f       	add	r30, r25
 4a4:	f1 1d       	adc	r31, r1
 4a6:	20 81       	ld	r18, Z
 4a8:	21 11       	cpse	r18, r1
 4aa:	f8 cf       	rjmp	.-16     	; 0x49c <EmptyString+0x6>
		string[u8_loopIndex++] = '\0';
}
 4ac:	08 95       	ret

000004ae <stringCopy>:

void stringCopy(uint8_t* source, uint8_t* destination)
{
 4ae:	dc 01       	movw	r26, r24
    uint8_t u8_loopIndex=0;
 4b0:	90 e0       	ldi	r25, 0x00	; 0
    while(source[u8_loopIndex] != '\0')
 4b2:	05 c0       	rjmp	.+10     	; 0x4be <stringCopy+0x10>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
 4b4:	fb 01       	movw	r30, r22
 4b6:	e2 0f       	add	r30, r18
 4b8:	f3 1f       	adc	r31, r19
 4ba:	40 83       	st	Z, r20
	    u8_loopIndex++;
 4bc:	9f 5f       	subi	r25, 0xFF	; 255
}

void stringCopy(uint8_t* source, uint8_t* destination)
{
    uint8_t u8_loopIndex=0;
    while(source[u8_loopIndex] != '\0')
 4be:	29 2f       	mov	r18, r25
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	fd 01       	movw	r30, r26
 4c4:	e2 0f       	add	r30, r18
 4c6:	f3 1f       	adc	r31, r19
 4c8:	40 81       	ld	r20, Z
 4ca:	41 11       	cpse	r20, r1
 4cc:	f3 cf       	rjmp	.-26     	; 0x4b4 <stringCopy+0x6>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
	    u8_loopIndex++;
    }
}
 4ce:	08 95       	ret

000004d0 <stringHexToNum>:
void stringHexToNum(uint8_t *pu8_String, uint16_t *pu16_Num)
{
 4d0:	df 92       	push	r13
 4d2:	ef 92       	push	r14
 4d4:	ff 92       	push	r15
 4d6:	0f 93       	push	r16
 4d8:	1f 93       	push	r17
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	7c 01       	movw	r14, r24
 4e0:	8b 01       	movw	r16, r22
	sint8_t s8_loopIndex=0;
	uint8_t u8_powerValue=0;
	uint8_t temp_val=0;
	uint8_t u8_stringLength = stringLength(pu8_String)-1;
 4e2:	0e 94 10 02 	call	0x420	; 0x420 <stringLength>
	*pu16_Num = 0;
 4e6:	f8 01       	movw	r30, r16
 4e8:	11 82       	std	Z+1, r1	; 0x01
 4ea:	10 82       	st	Z, r1
	for(s8_loopIndex=u8_stringLength-1 ; s8_loopIndex>=0 ; s8_loopIndex--)
 4ec:	ce ef       	ldi	r28, 0xFE	; 254
 4ee:	c8 0f       	add	r28, r24
    }
}
void stringHexToNum(uint8_t *pu8_String, uint16_t *pu16_Num)
{
	sint8_t s8_loopIndex=0;
	uint8_t u8_powerValue=0;
 4f0:	60 e0       	ldi	r22, 0x00	; 0
	uint8_t temp_val=0;
	uint8_t u8_stringLength = stringLength(pu8_String)-1;
	*pu16_Num = 0;
	for(s8_loopIndex=u8_stringLength-1 ; s8_loopIndex>=0 ; s8_loopIndex--)
 4f2:	55 c0       	rjmp	.+170    	; 0x59e <stringHexToNum+0xce>
	{
		if ((pu8_String[s8_loopIndex]>='0') && (pu8_String[s8_loopIndex]<='9'))
 4f4:	f7 01       	movw	r30, r14
 4f6:	ec 0f       	add	r30, r28
 4f8:	f1 1d       	adc	r31, r1
 4fa:	c7 fd       	sbrc	r28, 7
 4fc:	fa 95       	dec	r31
 4fe:	a0 81       	ld	r26, Z
 500:	d0 ed       	ldi	r29, 0xD0	; 208
 502:	da 0f       	add	r29, r26
 504:	da 30       	cpi	r29, 0x0A	; 10
 506:	a8 f4       	brcc	.+42     	; 0x532 <stringHexToNum+0x62>
		{
			temp_val = pu8_String[s8_loopIndex] - '0';
			*pu16_Num += temp_val*power(16,u8_powerValue++);
 508:	dd 24       	eor	r13, r13
 50a:	d3 94       	inc	r13
 50c:	d6 0e       	add	r13, r22
 50e:	80 e1       	ldi	r24, 0x10	; 16
 510:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <power>
 514:	9b 01       	movw	r18, r22
 516:	ac 01       	movw	r20, r24
 518:	ad 2f       	mov	r26, r29
 51a:	b0 e0       	ldi	r27, 0x00	; 0
 51c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__muluhisi3>
 520:	f8 01       	movw	r30, r16
 522:	20 81       	ld	r18, Z
 524:	31 81       	ldd	r19, Z+1	; 0x01
 526:	62 0f       	add	r22, r18
 528:	73 1f       	adc	r23, r19
 52a:	71 83       	std	Z+1, r23	; 0x01
 52c:	60 83       	st	Z, r22
 52e:	6d 2d       	mov	r22, r13
 530:	35 c0       	rjmp	.+106    	; 0x59c <stringHexToNum+0xcc>
		}else if((pu8_String[s8_loopIndex]>='A') && (pu8_String[s8_loopIndex]<='F'))
 532:	8f eb       	ldi	r24, 0xBF	; 191
 534:	8a 0f       	add	r24, r26
 536:	86 30       	cpi	r24, 0x06	; 6
 538:	b8 f4       	brcc	.+46     	; 0x568 <stringHexToNum+0x98>
		{
			temp_val = pu8_String[s8_loopIndex] - 55;
 53a:	d9 ec       	ldi	r29, 0xC9	; 201
 53c:	da 0f       	add	r29, r26
			*pu16_Num += temp_val*power(16,u8_powerValue++);
 53e:	dd 24       	eor	r13, r13
 540:	d3 94       	inc	r13
 542:	d6 0e       	add	r13, r22
 544:	80 e1       	ldi	r24, 0x10	; 16
 546:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <power>
 54a:	9b 01       	movw	r18, r22
 54c:	ac 01       	movw	r20, r24
 54e:	ad 2f       	mov	r26, r29
 550:	b0 e0       	ldi	r27, 0x00	; 0
 552:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__muluhisi3>
 556:	f8 01       	movw	r30, r16
 558:	20 81       	ld	r18, Z
 55a:	31 81       	ldd	r19, Z+1	; 0x01
 55c:	62 0f       	add	r22, r18
 55e:	73 1f       	adc	r23, r19
 560:	71 83       	std	Z+1, r23	; 0x01
 562:	60 83       	st	Z, r22
 564:	6d 2d       	mov	r22, r13
 566:	1a c0       	rjmp	.+52     	; 0x59c <stringHexToNum+0xcc>
		}else if((pu8_String[s8_loopIndex]>='a') && (pu8_String[s8_loopIndex]<='f'))
 568:	8f e9       	ldi	r24, 0x9F	; 159
 56a:	8a 0f       	add	r24, r26
 56c:	86 30       	cpi	r24, 0x06	; 6
 56e:	b0 f4       	brcc	.+44     	; 0x59c <stringHexToNum+0xcc>
		{
			temp_val = pu8_String[s8_loopIndex] - 87;
 570:	d9 ea       	ldi	r29, 0xA9	; 169
 572:	da 0f       	add	r29, r26
			*pu16_Num += temp_val*power(16,u8_powerValue++);
 574:	dd 24       	eor	r13, r13
 576:	d3 94       	inc	r13
 578:	d6 0e       	add	r13, r22
 57a:	80 e1       	ldi	r24, 0x10	; 16
 57c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <power>
 580:	9b 01       	movw	r18, r22
 582:	ac 01       	movw	r20, r24
 584:	ad 2f       	mov	r26, r29
 586:	b0 e0       	ldi	r27, 0x00	; 0
 588:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__muluhisi3>
 58c:	f8 01       	movw	r30, r16
 58e:	20 81       	ld	r18, Z
 590:	31 81       	ldd	r19, Z+1	; 0x01
 592:	62 0f       	add	r22, r18
 594:	73 1f       	adc	r23, r19
 596:	71 83       	std	Z+1, r23	; 0x01
 598:	60 83       	st	Z, r22
 59a:	6d 2d       	mov	r22, r13
	sint8_t s8_loopIndex=0;
	uint8_t u8_powerValue=0;
	uint8_t temp_val=0;
	uint8_t u8_stringLength = stringLength(pu8_String)-1;
	*pu16_Num = 0;
	for(s8_loopIndex=u8_stringLength-1 ; s8_loopIndex>=0 ; s8_loopIndex--)
 59c:	c1 50       	subi	r28, 0x01	; 1
 59e:	cc 23       	and	r28, r28
 5a0:	0c f0       	brlt	.+2      	; 0x5a4 <stringHexToNum+0xd4>
 5a2:	a8 cf       	rjmp	.-176    	; 0x4f4 <stringHexToNum+0x24>
			temp_val = pu8_String[s8_loopIndex] - 87;
			*pu16_Num += temp_val*power(16,u8_powerValue++);
		}

	}
}
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	1f 91       	pop	r17
 5aa:	0f 91       	pop	r16
 5ac:	ff 90       	pop	r15
 5ae:	ef 90       	pop	r14
 5b0:	df 90       	pop	r13
 5b2:	08 95       	ret

000005b4 <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
 5b8:	c0 91 c9 00 	lds	r28, 0x00C9	; 0x8000c9 <gu8_counter>
 5bc:	d0 e0       	ldi	r29, 0x00	; 0
 5be:	0e 94 56 05 	call	0xaac	; 0xaac <Uart_DataRegister>
 5c2:	c6 53       	subi	r28, 0x36	; 54
 5c4:	df 4f       	sbci	r29, 0xFF	; 255
 5c6:	88 83       	st	Y, r24
	Uart_sendByte(gau8_data[gu8_counter]);
 5c8:	e0 91 c9 00 	lds	r30, 0x00C9	; 0x8000c9 <gu8_counter>
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	e6 53       	subi	r30, 0x36	; 54
 5d0:	ff 4f       	sbci	r31, 0xFF	; 255
 5d2:	80 81       	ld	r24, Z
 5d4:	0e 94 0f 05 	call	0xa1e	; 0xa1e <Uart_sendByte>
	if (gau8_data[gu8_counter] == '\r')
 5d8:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <gu8_counter>
 5dc:	28 2f       	mov	r18, r24
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	f9 01       	movw	r30, r18
 5e2:	e6 53       	subi	r30, 0x36	; 54
 5e4:	ff 4f       	sbci	r31, 0xFF	; 255
 5e6:	90 81       	ld	r25, Z
 5e8:	9d 30       	cpi	r25, 0x0D	; 13
 5ea:	51 f4       	brne	.+20     	; 0x600 <Uart_RXC_ISR+0x4c>
	{
		gau8_data[gu8_counter] = '\0';
 5ec:	f9 01       	movw	r30, r18
 5ee:	e6 53       	subi	r30, 0x36	; 54
 5f0:	ff 4f       	sbci	r31, 0xFF	; 255
 5f2:	10 82       	st	Z, r1
		gu8_counter = 0;
 5f4:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <gu8_counter>
		gu8_flag = 1;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <gu8_flag>
 5fe:	09 c0       	rjmp	.+18     	; 0x612 <Uart_RXC_ISR+0x5e>
	}else if (gau8_data[gu8_counter] == '\b')
 600:	98 30       	cpi	r25, 0x08	; 8
 602:	21 f4       	brne	.+8      	; 0x60c <Uart_RXC_ISR+0x58>
	{
		gu8_counter--;
 604:	81 50       	subi	r24, 0x01	; 1
 606:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <gu8_counter>
 60a:	03 c0       	rjmp	.+6      	; 0x612 <Uart_RXC_ISR+0x5e>
	}
	else
	{
		gu8_counter++;
 60c:	8f 5f       	subi	r24, 0xFF	; 255
 60e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <gu8_counter>
	}
}
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	08 95       	ret

00000618 <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
 618:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
 61c:	83 30       	cpi	r24, 0x03	; 3
 61e:	81 f0       	breq	.+32     	; 0x640 <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
 620:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
 624:	81 30       	cpi	r24, 0x01	; 1
 626:	11 f0       	breq	.+4      	; 0x62c <Terminal_init+0x14>
 628:	87 30       	cpi	r24, 0x07	; 7
 62a:	49 f4       	brne	.+18     	; 0x63e <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
 62c:	8a ed       	ldi	r24, 0xDA	; 218
 62e:	92 e0       	ldi	r25, 0x02	; 2
 630:	0e 94 41 05 	call	0xa82	; 0xa82 <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
 634:	83 e0       	ldi	r24, 0x03	; 3
 636:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
 63e:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
 640:	08 95       	ret

00000642 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
 646:	00 97       	sbiw	r24, 0x00	; 0
 648:	81 f0       	breq	.+32     	; 0x66a <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
 64a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <genu_TerminalModuleState>
 64e:	22 30       	cpi	r18, 0x02	; 2
 650:	79 f0       	breq	.+30     	; 0x670 <Terminal_Out+0x2e>
 652:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
 654:	0e 94 10 02 	call	0x420	; 0x420 <stringLength>
 658:	68 2f       	mov	r22, r24
 65a:	70 e0       	ldi	r23, 0x00	; 0
 65c:	ce 01       	movw	r24, r28
 65e:	0e 94 1a 05 	call	0xa34	; 0xa34 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
 662:	81 30       	cpi	r24, 0x01	; 1
 664:	21 f0       	breq	.+8      	; 0x66e <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
 666:	20 e0       	ldi	r18, 0x00	; 0
 668:	03 c0       	rjmp	.+6      	; 0x670 <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
 66a:	24 e0       	ldi	r18, 0x04	; 4
 66c:	01 c0       	rjmp	.+2      	; 0x670 <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
 66e:	21 e0       	ldi	r18, 0x01	; 1
}
 670:	82 2f       	mov	r24, r18
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	08 95       	ret

00000678 <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
 678:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
 67a:	89 2b       	or	r24, r25
 67c:	a1 f0       	breq	.+40     	; 0x6a6 <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
 67e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
 682:	82 30       	cpi	r24, 0x02	; 2
 684:	99 f0       	breq	.+38     	; 0x6ac <Terminal_In+0x34>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(gu8_flag == 1)
 686:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gu8_flag>
 68a:	81 30       	cpi	r24, 0x01	; 1
 68c:	71 f4       	brne	.+28     	; 0x6aa <Terminal_In+0x32>
	{
		gu8_flag = 0;
 68e:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
 692:	8a ec       	ldi	r24, 0xCA	; 202
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 57 02 	call	0x4ae	; 0x4ae <stringCopy>
		EmptyString(gau8_data);
 69a:	8a ec       	ldi	r24, 0xCA	; 202
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 4b 02 	call	0x496	; 0x496 <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
 6a2:	85 e0       	ldi	r24, 0x05	; 5
 6a4:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
 6a6:	84 e0       	ldi	r24, 0x04	; 4
 6a8:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
 6aa:	81 e0       	ldi	r24, 0x01	; 1
}
 6ac:	08 95       	ret

000006ae <main>:

#include "App Layer/App.h"

int main(void)
{
	App_start();
 6ae:	0e 94 54 01 	call	0x2a8	; 0x2a8 <App_start>
 6b2:	ff cf       	rjmp	.-2      	; 0x6b2 <main+0x4>

000006b4 <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
 6b4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 6b8:	86 30       	cpi	r24, 0x06	; 6
 6ba:	41 f0       	breq	.+16     	; 0x6cc <I2C_MasterInit+0x18>
 6bc:	11 b8       	out	0x01, r1	; 1
 6be:	8a ef       	ldi	r24, 0xFA	; 250
 6c0:	80 b9       	out	0x00, r24	; 0
 6c2:	86 e0       	ldi	r24, 0x06	; 6
 6c4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <genuI2C_Status>
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	08 95       	ret
 6cc:	87 e0       	ldi	r24, 0x07	; 7
 6ce:	08 95       	ret

000006d0 <I2C_MasterSendSTART>:
 6d0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 6d4:	86 30       	cpi	r24, 0x06	; 6
 6d6:	59 f4       	brne	.+22     	; 0x6ee <I2C_MasterSendSTART+0x1e>
 6d8:	84 ea       	ldi	r24, 0xA4	; 164
 6da:	86 bf       	out	0x36, r24	; 54
 6dc:	06 b6       	in	r0, 0x36	; 54
 6de:	07 fe       	sbrs	r0, 7
 6e0:	fd cf       	rjmp	.-6      	; 0x6dc <I2C_MasterSendSTART+0xc>
 6e2:	81 b1       	in	r24, 0x01	; 1
 6e4:	88 7f       	andi	r24, 0xF8	; 248
 6e6:	88 30       	cpi	r24, 0x08	; 8
 6e8:	21 f0       	breq	.+8      	; 0x6f2 <I2C_MasterSendSTART+0x22>
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	08 95       	ret
 6ee:	85 e0       	ldi	r24, 0x05	; 5
 6f0:	08 95       	ret
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	08 95       	ret

000006f6 <I2C_MasterSendSlaveAddress>:
 6f6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
 6fa:	96 30       	cpi	r25, 0x06	; 6
 6fc:	29 f5       	brne	.+74     	; 0x748 <I2C_MasterSendSlaveAddress+0x52>
 6fe:	62 30       	cpi	r22, 0x02	; 2
 700:	28 f5       	brcc	.+74     	; 0x74c <I2C_MasterSendSlaveAddress+0x56>
 702:	88 23       	and	r24, r24
 704:	2c f1       	brlt	.+74     	; 0x750 <I2C_MasterSendSlaveAddress+0x5a>
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	88 0f       	add	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	68 2b       	or	r22, r24
 70e:	63 b9       	out	0x03, r22	; 3
 710:	84 e8       	ldi	r24, 0x84	; 132
 712:	86 bf       	out	0x36, r24	; 54
 714:	06 b6       	in	r0, 0x36	; 54
 716:	07 fe       	sbrs	r0, 7
 718:	fd cf       	rjmp	.-6      	; 0x714 <I2C_MasterSendSlaveAddress+0x1e>
 71a:	81 b1       	in	r24, 0x01	; 1
 71c:	88 7f       	andi	r24, 0xF8	; 248
 71e:	88 33       	cpi	r24, 0x38	; 56
 720:	59 f0       	breq	.+22     	; 0x738 <I2C_MasterSendSlaveAddress+0x42>
 722:	28 f4       	brcc	.+10     	; 0x72e <I2C_MasterSendSlaveAddress+0x38>
 724:	88 31       	cpi	r24, 0x18	; 24
 726:	b1 f0       	breq	.+44     	; 0x754 <I2C_MasterSendSlaveAddress+0x5e>
 728:	80 32       	cpi	r24, 0x20	; 32
 72a:	41 f0       	breq	.+16     	; 0x73c <I2C_MasterSendSlaveAddress+0x46>
 72c:	0b c0       	rjmp	.+22     	; 0x744 <I2C_MasterSendSlaveAddress+0x4e>
 72e:	80 34       	cpi	r24, 0x40	; 64
 730:	89 f0       	breq	.+34     	; 0x754 <I2C_MasterSendSlaveAddress+0x5e>
 732:	88 34       	cpi	r24, 0x48	; 72
 734:	29 f0       	breq	.+10     	; 0x740 <I2C_MasterSendSlaveAddress+0x4a>
 736:	06 c0       	rjmp	.+12     	; 0x744 <I2C_MasterSendSlaveAddress+0x4e>
 738:	88 e3       	ldi	r24, 0x38	; 56
 73a:	08 95       	ret
 73c:	80 e2       	ldi	r24, 0x20	; 32
 73e:	08 95       	ret
 740:	88 e4       	ldi	r24, 0x48	; 72
 742:	08 95       	ret
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	08 95       	ret
 748:	85 e0       	ldi	r24, 0x05	; 5
 74a:	08 95       	ret
 74c:	82 e0       	ldi	r24, 0x02	; 2
 74e:	08 95       	ret
 750:	83 e0       	ldi	r24, 0x03	; 3
 752:	08 95       	ret
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	08 95       	ret

00000758 <I2C_MasterSendRepSTART>:
 758:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 75c:	86 30       	cpi	r24, 0x06	; 6
 75e:	59 f4       	brne	.+22     	; 0x776 <I2C_MasterSendRepSTART+0x1e>
 760:	84 ea       	ldi	r24, 0xA4	; 164
 762:	86 bf       	out	0x36, r24	; 54
 764:	06 b6       	in	r0, 0x36	; 54
 766:	07 fe       	sbrs	r0, 7
 768:	fd cf       	rjmp	.-6      	; 0x764 <I2C_MasterSendRepSTART+0xc>
 76a:	81 b1       	in	r24, 0x01	; 1
 76c:	88 7f       	andi	r24, 0xF8	; 248
 76e:	80 31       	cpi	r24, 0x10	; 16
 770:	21 f0       	breq	.+8      	; 0x77a <I2C_MasterSendRepSTART+0x22>
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	08 95       	ret
 776:	85 e0       	ldi	r24, 0x05	; 5
 778:	08 95       	ret
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	08 95       	ret

0000077e <I2C_MasterSendSTOP>:
 77e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 782:	86 30       	cpi	r24, 0x06	; 6
 784:	39 f4       	brne	.+14     	; 0x794 <I2C_MasterSendSTOP+0x16>
 786:	84 e9       	ldi	r24, 0x94	; 148
 788:	86 bf       	out	0x36, r24	; 54
 78a:	06 b6       	in	r0, 0x36	; 54
 78c:	04 fc       	sbrc	r0, 4
 78e:	fd cf       	rjmp	.-6      	; 0x78a <I2C_MasterSendSTOP+0xc>
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	08 95       	ret
 794:	85 e0       	ldi	r24, 0x05	; 5
 796:	08 95       	ret

00000798 <I2C_MasterSendByte>:
 798:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
 79c:	96 30       	cpi	r25, 0x06	; 6
 79e:	69 f4       	brne	.+26     	; 0x7ba <I2C_MasterSendByte+0x22>
 7a0:	83 b9       	out	0x03, r24	; 3
 7a2:	84 e8       	ldi	r24, 0x84	; 132
 7a4:	86 bf       	out	0x36, r24	; 54
 7a6:	06 b6       	in	r0, 0x36	; 54
 7a8:	07 fe       	sbrs	r0, 7
 7aa:	fd cf       	rjmp	.-6      	; 0x7a6 <I2C_MasterSendByte+0xe>
 7ac:	81 b1       	in	r24, 0x01	; 1
 7ae:	88 7f       	andi	r24, 0xF8	; 248
 7b0:	88 32       	cpi	r24, 0x28	; 40
 7b2:	29 f0       	breq	.+10     	; 0x7be <I2C_MasterSendByte+0x26>
 7b4:	80 33       	cpi	r24, 0x30	; 48
 7b6:	29 f4       	brne	.+10     	; 0x7c2 <I2C_MasterSendByte+0x2a>
 7b8:	08 95       	ret
 7ba:	85 e0       	ldi	r24, 0x05	; 5
 7bc:	08 95       	ret
 7be:	88 e2       	ldi	r24, 0x28	; 40
 7c0:	08 95       	ret
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	08 95       	ret

000007c6 <I2C_MasterReceiveByte_ACK>:
 7c6:	fc 01       	movw	r30, r24
 7c8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
 7cc:	96 30       	cpi	r25, 0x06	; 6
 7ce:	79 f4       	brne	.+30     	; 0x7ee <I2C_MasterReceiveByte_ACK+0x28>
 7d0:	30 97       	sbiw	r30, 0x00	; 0
 7d2:	79 f0       	breq	.+30     	; 0x7f2 <I2C_MasterReceiveByte_ACK+0x2c>
 7d4:	84 ec       	ldi	r24, 0xC4	; 196
 7d6:	86 bf       	out	0x36, r24	; 54
 7d8:	06 b6       	in	r0, 0x36	; 54
 7da:	07 fe       	sbrs	r0, 7
 7dc:	fd cf       	rjmp	.-6      	; 0x7d8 <I2C_MasterReceiveByte_ACK+0x12>
 7de:	81 b1       	in	r24, 0x01	; 1
 7e0:	88 7f       	andi	r24, 0xF8	; 248
 7e2:	80 35       	cpi	r24, 0x50	; 80
 7e4:	41 f4       	brne	.+16     	; 0x7f6 <I2C_MasterReceiveByte_ACK+0x30>
 7e6:	83 b1       	in	r24, 0x03	; 3
 7e8:	80 83       	st	Z, r24
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	08 95       	ret
 7ee:	85 e0       	ldi	r24, 0x05	; 5
 7f0:	08 95       	ret
 7f2:	84 e0       	ldi	r24, 0x04	; 4
 7f4:	08 95       	ret
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	08 95       	ret

000007fa <I2C_MasterReceiveByte_NACK>:
 7fa:	fc 01       	movw	r30, r24
 7fc:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
 800:	96 30       	cpi	r25, 0x06	; 6
 802:	79 f4       	brne	.+30     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 804:	30 97       	sbiw	r30, 0x00	; 0
 806:	79 f0       	breq	.+30     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 808:	84 e8       	ldi	r24, 0x84	; 132
 80a:	86 bf       	out	0x36, r24	; 54
 80c:	06 b6       	in	r0, 0x36	; 54
 80e:	07 fe       	sbrs	r0, 7
 810:	fd cf       	rjmp	.-6      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 812:	81 b1       	in	r24, 0x01	; 1
 814:	88 7f       	andi	r24, 0xF8	; 248
 816:	88 35       	cpi	r24, 0x58	; 88
 818:	41 f4       	brne	.+16     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 81a:	83 b1       	in	r24, 0x03	; 3
 81c:	80 83       	st	Z, r24
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	08 95       	ret
 822:	85 e0       	ldi	r24, 0x05	; 5
 824:	08 95       	ret
 826:	84 e0       	ldi	r24, 0x04	; 4
 828:	08 95       	ret
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	08 95       	ret

0000082e <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
 82e:	7f 92       	push	r7
 830:	8f 92       	push	r8
 832:	9f 92       	push	r9
 834:	af 92       	push	r10
 836:	bf 92       	push	r11
 838:	cf 92       	push	r12
 83a:	df 92       	push	r13
 83c:	ef 92       	push	r14
 83e:	ff 92       	push	r15
 840:	0f 93       	push	r16
 842:	1f 93       	push	r17
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	78 2e       	mov	r7, r24
 84a:	eb 01       	movw	r28, r22
 84c:	7a 01       	movw	r14, r20
 84e:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
 850:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 854:	86 30       	cpi	r24, 0x06	; 6
 856:	09 f0       	breq	.+2      	; 0x85a <I2C_MasterReceiveGeneral+0x2c>
 858:	47 c0       	rjmp	.+142    	; 0x8e8 <__stack+0x89>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
 85a:	20 97       	sbiw	r28, 0x00	; 0
 85c:	09 f4       	brne	.+2      	; 0x860 <__stack+0x1>
 85e:	46 c0       	rjmp	.+140    	; 0x8ec <__stack+0x8d>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
 860:	23 2b       	or	r18, r19
 862:	09 f4       	brne	.+2      	; 0x866 <__stack+0x7>
 864:	45 c0       	rjmp	.+138    	; 0x8f0 <__stack+0x91>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
 866:	77 20       	and	r7, r7
 868:	0c f4       	brge	.+2      	; 0x86c <__stack+0xd>
 86a:	44 c0       	rjmp	.+136    	; 0x8f4 <__stack+0x95>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 86c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <I2C_MasterSendSTART>
 870:	88 23       	and	r24, r24
 872:	09 f4       	brne	.+2      	; 0x876 <__stack+0x17>
 874:	4a c0       	rjmp	.+148    	; 0x90a <__stack+0xab>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 876:	60 e0       	ldi	r22, 0x00	; 0
 878:	87 2d       	mov	r24, r7
 87a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <I2C_MasterSendSlaveAddress>
 87e:	81 30       	cpi	r24, 0x01	; 1
 880:	d9 f5       	brne	.+118    	; 0x8f8 <__stack+0x99>
 882:	0b c0       	rjmp	.+22     	; 0x89a <__stack+0x3b>
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 884:	4e 01       	movw	r8, r28
 886:	8f ef       	ldi	r24, 0xFF	; 255
 888:	88 1a       	sub	r8, r24
 88a:	98 0a       	sbc	r9, r24
 88c:	88 81       	ld	r24, Y
 88e:	0e 94 cc 03 	call	0x798	; 0x798 <I2C_MasterSendByte>
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
 892:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 894:	88 23       	and	r24, r24
 896:	c9 f1       	breq	.+114    	; 0x90a <__stack+0xab>
 898:	e4 01       	movw	r28, r8
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
 89a:	57 01       	movw	r10, r14
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	a8 1a       	sub	r10, r24
 8a0:	b1 08       	sbc	r11, r1
 8a2:	ef 28       	or	r14, r15
 8a4:	79 f7       	brne	.-34     	; 0x884 <__stack+0x25>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
 8a6:	0e 94 ac 03 	call	0x758	; 0x758 <I2C_MasterSendRepSTART>
 8aa:	81 30       	cpi	r24, 0x01	; 1
 8ac:	39 f5       	brne	.+78     	; 0x8fc <__stack+0x9d>
		return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 8ae:	61 e0       	ldi	r22, 0x01	; 1
 8b0:	87 2d       	mov	r24, r7
 8b2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <I2C_MasterSendSlaveAddress>
 8b6:	81 30       	cpi	r24, 0x01	; 1
 8b8:	19 f5       	brne	.+70     	; 0x900 <__stack+0xa1>
 8ba:	08 c0       	rjmp	.+16     	; 0x8cc <__stack+0x6d>
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
	if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
 8bc:	e6 01       	movw	r28, r12
 8be:	21 96       	adiw	r28, 0x01	; 1
 8c0:	c6 01       	movw	r24, r12
 8c2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <I2C_MasterReceiveByte_ACK>
 8c6:	81 30       	cpi	r24, 0x01	; 1
 8c8:	e9 f4       	brne	.+58     	; 0x904 <__stack+0xa5>
 8ca:	6e 01       	movw	r12, r28
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
 8cc:	01 50       	subi	r16, 0x01	; 1
 8ce:	11 09       	sbc	r17, r1
 8d0:	a9 f7       	brne	.-22     	; 0x8bc <__stack+0x5d>
	if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
 8d2:	c6 01       	movw	r24, r12
 8d4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <I2C_MasterReceiveByte_NACK>
 8d8:	81 30       	cpi	r24, 0x01	; 1
 8da:	b1 f4       	brne	.+44     	; 0x908 <__stack+0xa9>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
 8dc:	0e 94 bf 03 	call	0x77e	; 0x77e <I2C_MasterSendSTOP>
 8e0:	81 30       	cpi	r24, 0x01	; 1
 8e2:	99 f0       	breq	.+38     	; 0x90a <__stack+0xab>
		return I2C_STATUS_ERROR_NOK;
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	11 c0       	rjmp	.+34     	; 0x90a <__stack+0xab>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
 8e8:	85 e0       	ldi	r24, 0x05	; 5
 8ea:	0f c0       	rjmp	.+30     	; 0x90a <__stack+0xab>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
 8ec:	84 e0       	ldi	r24, 0x04	; 4
 8ee:	0d c0       	rjmp	.+26     	; 0x90a <__stack+0xab>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
 8f0:	84 e0       	ldi	r24, 0x04	; 4
 8f2:	0b c0       	rjmp	.+22     	; 0x90a <__stack+0xab>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
 8f4:	83 e0       	ldi	r24, 0x03	; 3
 8f6:	09 c0       	rjmp	.+18     	; 0x90a <__stack+0xab>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	07 c0       	rjmp	.+14     	; 0x90a <__stack+0xab>
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
 8fc:	80 e0       	ldi	r24, 0x00	; 0
 8fe:	05 c0       	rjmp	.+10     	; 0x90a <__stack+0xab>
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	03 c0       	rjmp	.+6      	; 0x90a <__stack+0xab>
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
	if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	01 c0       	rjmp	.+2      	; 0x90a <__stack+0xab>
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
 908:	80 e0       	ldi	r24, 0x00	; 0
	/* Send a Stop Bit */
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
 90a:	df 91       	pop	r29
 90c:	cf 91       	pop	r28
 90e:	1f 91       	pop	r17
 910:	0f 91       	pop	r16
 912:	ff 90       	pop	r15
 914:	ef 90       	pop	r14
 916:	df 90       	pop	r13
 918:	cf 90       	pop	r12
 91a:	bf 90       	pop	r11
 91c:	af 90       	pop	r10
 91e:	9f 90       	pop	r9
 920:	8f 90       	pop	r8
 922:	7f 90       	pop	r7
 924:	08 95       	ret

00000926 <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
 926:	bf 92       	push	r11
 928:	cf 92       	push	r12
 92a:	df 92       	push	r13
 92c:	ef 92       	push	r14
 92e:	ff 92       	push	r15
 930:	0f 93       	push	r16
 932:	1f 93       	push	r17
 934:	cf 93       	push	r28
 936:	df 93       	push	r29
 938:	18 2f       	mov	r17, r24
 93a:	06 2f       	mov	r16, r22
 93c:	ea 01       	movw	r28, r20
 93e:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
 940:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 944:	86 30       	cpi	r24, 0x06	; 6
 946:	59 f5       	brne	.+86     	; 0x99e <I2C_MasterSendToLocation+0x78>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
 948:	20 97       	sbiw	r28, 0x00	; 0
 94a:	59 f1       	breq	.+86     	; 0x9a2 <I2C_MasterSendToLocation+0x7c>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
 94c:	11 23       	and	r17, r17
 94e:	5c f1       	brlt	.+86     	; 0x9a6 <I2C_MasterSendToLocation+0x80>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 950:	0e 94 68 03 	call	0x6d0	; 0x6d0 <I2C_MasterSendSTART>
 954:	88 23       	and	r24, r24
 956:	61 f1       	breq	.+88     	; 0x9b0 <I2C_MasterSendToLocation+0x8a>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 958:	60 e0       	ldi	r22, 0x00	; 0
 95a:	81 2f       	mov	r24, r17
 95c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <I2C_MasterSendSlaveAddress>
 960:	b8 2e       	mov	r11, r24
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	b8 12       	cpse	r11, r24
 966:	21 c0       	rjmp	.+66     	; 0x9aa <I2C_MasterSendToLocation+0x84>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 968:	80 2f       	mov	r24, r16
 96a:	0e 94 cc 03 	call	0x798	; 0x798 <I2C_MasterSendByte>
 96e:	81 11       	cpse	r24, r1
 970:	0c c0       	rjmp	.+24     	; 0x98a <I2C_MasterSendToLocation+0x64>
 972:	1e c0       	rjmp	.+60     	; 0x9b0 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 974:	6e 01       	movw	r12, r28
 976:	8f ef       	ldi	r24, 0xFF	; 255
 978:	c8 1a       	sub	r12, r24
 97a:	d8 0a       	sbc	r13, r24
 97c:	88 81       	ld	r24, Y
 97e:	0e 94 cc 03 	call	0x798	; 0x798 <I2C_MasterSendByte>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
 982:	78 01       	movw	r14, r16
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 984:	88 23       	and	r24, r24
 986:	a1 f0       	breq	.+40     	; 0x9b0 <I2C_MasterSendToLocation+0x8a>
 988:	e6 01       	movw	r28, r12
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
 98a:	87 01       	movw	r16, r14
 98c:	01 50       	subi	r16, 0x01	; 1
 98e:	11 09       	sbc	r17, r1
 990:	ef 28       	or	r14, r15
 992:	81 f7       	brne	.-32     	; 0x974 <I2C_MasterSendToLocation+0x4e>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 994:	0e 94 bf 03 	call	0x77e	; 0x77e <I2C_MasterSendSTOP>
 998:	81 11       	cpse	r24, r1
 99a:	09 c0       	rjmp	.+18     	; 0x9ae <I2C_MasterSendToLocation+0x88>
 99c:	09 c0       	rjmp	.+18     	; 0x9b0 <I2C_MasterSendToLocation+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
 99e:	85 e0       	ldi	r24, 0x05	; 5
 9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <I2C_MasterSendToLocation+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
 9a2:	84 e0       	ldi	r24, 0x04	; 4
 9a4:	05 c0       	rjmp	.+10     	; 0x9b0 <I2C_MasterSendToLocation+0x8a>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
 9a6:	83 e0       	ldi	r24, 0x03	; 3
 9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <I2C_MasterSendToLocation+0x8a>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 9aa:	80 e0       	ldi	r24, 0x00	; 0
 9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
 9ae:	8b 2d       	mov	r24, r11
}
 9b0:	df 91       	pop	r29
 9b2:	cf 91       	pop	r28
 9b4:	1f 91       	pop	r17
 9b6:	0f 91       	pop	r16
 9b8:	ff 90       	pop	r15
 9ba:	ef 90       	pop	r14
 9bc:	df 90       	pop	r13
 9be:	cf 90       	pop	r12
 9c0:	bf 90       	pop	r11
 9c2:	08 95       	ret

000009c4 <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
 9c4:	0f 93       	push	r16
 9c6:	1f 93       	push	r17
 9c8:	cf 93       	push	r28
 9ca:	df 93       	push	r29
 9cc:	1f 92       	push	r1
 9ce:	cd b7       	in	r28, 0x3d	; 61
 9d0:	de b7       	in	r29, 0x3e	; 62
 9d2:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
 9d4:	89 01       	movw	r16, r18
 9d6:	9a 01       	movw	r18, r20
 9d8:	41 e0       	ldi	r20, 0x01	; 1
 9da:	50 e0       	ldi	r21, 0x00	; 0
 9dc:	be 01       	movw	r22, r28
 9de:	6f 5f       	subi	r22, 0xFF	; 255
 9e0:	7f 4f       	sbci	r23, 0xFF	; 255
 9e2:	0e 94 17 04 	call	0x82e	; 0x82e <I2C_MasterReceiveGeneral>
}
 9e6:	0f 90       	pop	r0
 9e8:	df 91       	pop	r29
 9ea:	cf 91       	pop	r28
 9ec:	1f 91       	pop	r17
 9ee:	0f 91       	pop	r16
 9f0:	08 95       	ret

000009f2 <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
 9f2:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <u8_Uart_Status>
 9f6:	81 30       	cpi	r24, 0x01	; 1
 9f8:	81 f0       	breq	.+32     	; 0xa1a <Uart_init+0x28>
 9fa:	10 bc       	out	0x20, r1	; 32
 9fc:	8c e0       	ldi	r24, 0x0C	; 12
 9fe:	89 b9       	out	0x09, r24	; 9
 a00:	82 e0       	ldi	r24, 0x02	; 2
 a02:	8b b9       	out	0x0b, r24	; 11
 a04:	88 e1       	ldi	r24, 0x18	; 24
 a06:	8a b9       	out	0x0a, r24	; 10
 a08:	80 e8       	ldi	r24, 0x80	; 128
 a0a:	80 bd       	out	0x20, r24	; 32
 a0c:	80 b5       	in	r24, 0x20	; 32
 a0e:	86 68       	ori	r24, 0x86	; 134
 a10:	80 bd       	out	0x20, r24	; 32
 a12:	81 e0       	ldi	r24, 0x01	; 1
 a14:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <u8_Uart_Status>
 a18:	08 95       	ret
 a1a:	87 e0       	ldi	r24, 0x07	; 7
 a1c:	08 95       	ret

00000a1e <Uart_sendByte>:
 a1e:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <u8_Uart_Status>
 a22:	99 23       	and	r25, r25
 a24:	29 f0       	breq	.+10     	; 0xa30 <Uart_sendByte+0x12>
 a26:	5d 9b       	sbis	0x0b, 5	; 11
 a28:	fe cf       	rjmp	.-4      	; 0xa26 <Uart_sendByte+0x8>
 a2a:	8c b9       	out	0x0c, r24	; 12
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	08 95       	ret
 a30:	86 e0       	ldi	r24, 0x06	; 6
 a32:	08 95       	ret

00000a34 <Uart_sendPacket>:
 a34:	ef 92       	push	r14
 a36:	ff 92       	push	r15
 a38:	0f 93       	push	r16
 a3a:	1f 93       	push	r17
 a3c:	cf 93       	push	r28
 a3e:	df 93       	push	r29
 a40:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <u8_Uart_Status>
 a44:	22 23       	and	r18, r18
 a46:	99 f0       	breq	.+38     	; 0xa6e <Uart_sendPacket+0x3a>
 a48:	8b 01       	movw	r16, r22
 a4a:	7c 01       	movw	r14, r24
 a4c:	c0 e0       	ldi	r28, 0x00	; 0
 a4e:	d0 e0       	ldi	r29, 0x00	; 0
 a50:	09 c0       	rjmp	.+18     	; 0xa64 <Uart_sendPacket+0x30>
 a52:	f7 01       	movw	r30, r14
 a54:	ec 0f       	add	r30, r28
 a56:	fd 1f       	adc	r31, r29
 a58:	80 81       	ld	r24, Z
 a5a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <Uart_sendByte>
 a5e:	81 30       	cpi	r24, 0x01	; 1
 a60:	41 f4       	brne	.+16     	; 0xa72 <Uart_sendPacket+0x3e>
 a62:	21 96       	adiw	r28, 0x01	; 1
 a64:	c0 17       	cp	r28, r16
 a66:	d1 07       	cpc	r29, r17
 a68:	a0 f3       	brcs	.-24     	; 0xa52 <Uart_sendPacket+0x1e>
 a6a:	81 e0       	ldi	r24, 0x01	; 1
 a6c:	03 c0       	rjmp	.+6      	; 0xa74 <Uart_sendPacket+0x40>
 a6e:	86 e0       	ldi	r24, 0x06	; 6
 a70:	01 c0       	rjmp	.+2      	; 0xa74 <Uart_sendPacket+0x40>
 a72:	80 e0       	ldi	r24, 0x00	; 0
 a74:	df 91       	pop	r29
 a76:	cf 91       	pop	r28
 a78:	1f 91       	pop	r17
 a7a:	0f 91       	pop	r16
 a7c:	ff 90       	pop	r15
 a7e:	ef 90       	pop	r14
 a80:	08 95       	ret

00000a82 <Uart_EnableNotification_RXC>:
 a82:	9c 01       	movw	r18, r24
 a84:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <u8_Uart_Status>
 a88:	99 23       	and	r25, r25
 a8a:	61 f0       	breq	.+24     	; 0xaa4 <Uart_EnableNotification_RXC+0x22>
 a8c:	21 15       	cp	r18, r1
 a8e:	31 05       	cpc	r19, r1
 a90:	59 f0       	breq	.+22     	; 0xaa8 <Uart_EnableNotification_RXC+0x26>
 a92:	8a b1       	in	r24, 0x0a	; 10
 a94:	80 68       	ori	r24, 0x80	; 128
 a96:	8a b9       	out	0x0a, r24	; 10
 a98:	30 93 cd 01 	sts	0x01CD, r19	; 0x8001cd <Uart_RXC_CallBackPtr+0x1>
 a9c:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <Uart_RXC_CallBackPtr>
 aa0:	81 e0       	ldi	r24, 0x01	; 1
 aa2:	08 95       	ret
 aa4:	86 e0       	ldi	r24, 0x06	; 6
 aa6:	08 95       	ret
 aa8:	85 e0       	ldi	r24, 0x05	; 5
 aaa:	08 95       	ret

00000aac <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
 aac:	8c b1       	in	r24, 0x0c	; 12
}
 aae:	08 95       	ret

00000ab0 <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
 ab0:	1f 92       	push	r1
 ab2:	0f 92       	push	r0
 ab4:	0f b6       	in	r0, 0x3f	; 63
 ab6:	0f 92       	push	r0
 ab8:	11 24       	eor	r1, r1
 aba:	2f 93       	push	r18
 abc:	3f 93       	push	r19
 abe:	4f 93       	push	r20
 ac0:	5f 93       	push	r21
 ac2:	6f 93       	push	r22
 ac4:	7f 93       	push	r23
 ac6:	8f 93       	push	r24
 ac8:	9f 93       	push	r25
 aca:	af 93       	push	r26
 acc:	bf 93       	push	r27
 ace:	ef 93       	push	r30
 ad0:	ff 93       	push	r31
 ad2:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <Uart_TXC_CallBackPtr>
 ad6:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <Uart_TXC_CallBackPtr+0x1>
 ada:	09 95       	icall
 adc:	ff 91       	pop	r31
 ade:	ef 91       	pop	r30
 ae0:	bf 91       	pop	r27
 ae2:	af 91       	pop	r26
 ae4:	9f 91       	pop	r25
 ae6:	8f 91       	pop	r24
 ae8:	7f 91       	pop	r23
 aea:	6f 91       	pop	r22
 aec:	5f 91       	pop	r21
 aee:	4f 91       	pop	r20
 af0:	3f 91       	pop	r19
 af2:	2f 91       	pop	r18
 af4:	0f 90       	pop	r0
 af6:	0f be       	out	0x3f, r0	; 63
 af8:	0f 90       	pop	r0
 afa:	1f 90       	pop	r1
 afc:	18 95       	reti

00000afe <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
 afe:	1f 92       	push	r1
 b00:	0f 92       	push	r0
 b02:	0f b6       	in	r0, 0x3f	; 63
 b04:	0f 92       	push	r0
 b06:	11 24       	eor	r1, r1
 b08:	2f 93       	push	r18
 b0a:	3f 93       	push	r19
 b0c:	4f 93       	push	r20
 b0e:	5f 93       	push	r21
 b10:	6f 93       	push	r22
 b12:	7f 93       	push	r23
 b14:	8f 93       	push	r24
 b16:	9f 93       	push	r25
 b18:	af 93       	push	r26
 b1a:	bf 93       	push	r27
 b1c:	ef 93       	push	r30
 b1e:	ff 93       	push	r31
 b20:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <Uart_RXC_CallBackPtr>
 b24:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <Uart_RXC_CallBackPtr+0x1>
 b28:	09 95       	icall
 b2a:	ff 91       	pop	r31
 b2c:	ef 91       	pop	r30
 b2e:	bf 91       	pop	r27
 b30:	af 91       	pop	r26
 b32:	9f 91       	pop	r25
 b34:	8f 91       	pop	r24
 b36:	7f 91       	pop	r23
 b38:	6f 91       	pop	r22
 b3a:	5f 91       	pop	r21
 b3c:	4f 91       	pop	r20
 b3e:	3f 91       	pop	r19
 b40:	2f 91       	pop	r18
 b42:	0f 90       	pop	r0
 b44:	0f be       	out	0x3f, r0	; 63
 b46:	0f 90       	pop	r0
 b48:	1f 90       	pop	r1
 b4a:	18 95       	reti

00000b4c <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
 b4c:	1f 92       	push	r1
 b4e:	0f 92       	push	r0
 b50:	0f b6       	in	r0, 0x3f	; 63
 b52:	0f 92       	push	r0
 b54:	11 24       	eor	r1, r1
 b56:	2f 93       	push	r18
 b58:	3f 93       	push	r19
 b5a:	4f 93       	push	r20
 b5c:	5f 93       	push	r21
 b5e:	6f 93       	push	r22
 b60:	7f 93       	push	r23
 b62:	8f 93       	push	r24
 b64:	9f 93       	push	r25
 b66:	af 93       	push	r26
 b68:	bf 93       	push	r27
 b6a:	ef 93       	push	r30
 b6c:	ff 93       	push	r31
 b6e:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <Uart_UDRE_CallBackPtr>
 b72:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <Uart_UDRE_CallBackPtr+0x1>
 b76:	09 95       	icall
 b78:	ff 91       	pop	r31
 b7a:	ef 91       	pop	r30
 b7c:	bf 91       	pop	r27
 b7e:	af 91       	pop	r26
 b80:	9f 91       	pop	r25
 b82:	8f 91       	pop	r24
 b84:	7f 91       	pop	r23
 b86:	6f 91       	pop	r22
 b88:	5f 91       	pop	r21
 b8a:	4f 91       	pop	r20
 b8c:	3f 91       	pop	r19
 b8e:	2f 91       	pop	r18
 b90:	0f 90       	pop	r0
 b92:	0f be       	out	0x3f, r0	; 63
 b94:	0f 90       	pop	r0
 b96:	1f 90       	pop	r1
 b98:	18 95       	reti

00000b9a <__muluhisi3>:
 b9a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__umulhisi3>
 b9e:	a5 9f       	mul	r26, r21
 ba0:	90 0d       	add	r25, r0
 ba2:	b4 9f       	mul	r27, r20
 ba4:	90 0d       	add	r25, r0
 ba6:	a4 9f       	mul	r26, r20
 ba8:	80 0d       	add	r24, r0
 baa:	91 1d       	adc	r25, r1
 bac:	11 24       	eor	r1, r1
 bae:	08 95       	ret

00000bb0 <__umulhisi3>:
 bb0:	a2 9f       	mul	r26, r18
 bb2:	b0 01       	movw	r22, r0
 bb4:	b3 9f       	mul	r27, r19
 bb6:	c0 01       	movw	r24, r0
 bb8:	a3 9f       	mul	r26, r19
 bba:	70 0d       	add	r23, r0
 bbc:	81 1d       	adc	r24, r1
 bbe:	11 24       	eor	r1, r1
 bc0:	91 1d       	adc	r25, r1
 bc2:	b2 9f       	mul	r27, r18
 bc4:	70 0d       	add	r23, r0
 bc6:	81 1d       	adc	r24, r1
 bc8:	11 24       	eor	r1, r1
 bca:	91 1d       	adc	r25, r1
 bcc:	08 95       	ret

00000bce <_exit>:
 bce:	f8 94       	cli

00000bd0 <__stop_program>:
 bd0:	ff cf       	rjmp	.-2      	; 0xbd0 <__stop_program>
