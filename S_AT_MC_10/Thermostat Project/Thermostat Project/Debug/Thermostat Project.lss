
Thermostat Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002036  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00002036  000020ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  008000f6  008000f6  00002160  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002190  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  000021cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b29  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001552  00000000  00000000  000060cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002376  00000000  00000000  0000761f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a9c  00000000  00000000  00009998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001981  00000000  00000000  0000a434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000284c  00000000  00000000  0000bdb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000e601  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__vector_4>
      14:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__vector_5>
      18:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__vector_6>
      1c:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <__vector_7>
      20:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__vector_8>
      24:	0c 94 07 09 	jmp	0x120e	; 0x120e <__vector_9>
      28:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__vector_10>
      2c:	0c 94 bd 08 	jmp	0x117a	; 0x117a <__vector_11>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 97 04 	jmp	0x92e	; 0x92e <__vector_16>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	df 0b       	sbc	r29, r31
      56:	eb 0b       	sbc	r30, r27
      58:	e2 0b       	sbc	r30, r18
      5a:	e5 0b       	sbc	r30, r21
      5c:	e8 0b       	sbc	r30, r24
      5e:	df 0b       	sbc	r29, r31
      60:	df 0b       	sbc	r29, r31

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e6 e3       	ldi	r30, 0x36	; 54
      76:	f0 e2       	ldi	r31, 0x20	; 32
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a6 3f       	cpi	r26, 0xF6	; 246
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	21 e0       	ldi	r18, 0x01	; 1
      86:	a6 ef       	ldi	r26, 0xF6	; 246
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a4 32       	cpi	r26, 0x24	; 36
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <main>
      98:	0c 94 19 10 	jmp	0x2032	; 0x2032 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
      a0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <enuCurrentAppStatus>
      a4:	84 30       	cpi	r24, 0x04	; 4
      a6:	61 f1       	breq	.+88     	; 0x100 <App_init+0x60>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	DIO_PORTB_DIR |= 1<<3;
      a8:	87 b3       	in	r24, 0x17	; 23
      aa:	88 60       	ori	r24, 0x08	; 8
      ac:	87 bb       	out	0x17, r24	; 23
	/* Call the initializer of the Terminal */
	if(SRVC_STATUS_ERROR_OK != Service_init())
      ae:	0e 94 cd 0c 	call	0x199a	; 0x199a <Service_init>
      b2:	81 30       	cpi	r24, 0x01	; 1
      b4:	e1 f4       	brne	.+56     	; 0xee <App_init+0x4e>
	{
		return APP_STATUS_ERROR_NOK;
	}
	if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
      b6:	60 e0       	ldi	r22, 0x00	; 0
      b8:	80 e0       	ldi	r24, 0x00	; 0
      ba:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Lcd_setCursor>
      be:	81 30       	cpi	r24, 0x01	; 1
      c0:	c1 f4       	brne	.+48     	; 0xf2 <App_init+0x52>
		return SRVC_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Temp:   Fan: 0%") != LCD_STATUS_ERROR_OK)
      c2:	85 ec       	ldi	r24, 0xC5	; 197
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	0e 94 90 02 	call	0x520	; 0x520 <Lcd_printString>
      ca:	81 30       	cpi	r24, 0x01	; 1
      cc:	a1 f4       	brne	.+40     	; 0xf6 <App_init+0x56>
		return SRVC_STATUS_ERROR_NOK;
	if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
      ce:	60 e0       	ldi	r22, 0x00	; 0
      d0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Lcd_setCursor>
      d4:	81 30       	cpi	r24, 0x01	; 1
      d6:	89 f4       	brne	.+34     	; 0xfa <App_init+0x5a>
		return SRVC_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Tref:     Set:  ") != LCD_STATUS_ERROR_OK)
      d8:	85 ed       	ldi	r24, 0xD5	; 213
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	0e 94 90 02 	call	0x520	; 0x520 <Lcd_printString>
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	69 f4       	brne	.+26     	; 0xfe <App_init+0x5e>
		return SRVC_STATUS_ERROR_NOK;
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
      e4:	84 e0       	ldi	r24, 0x04	; 4
      e6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <enuCurrentAppStatus>
	return APP_STATUS_ERROR_OK;
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	08 95       	ret
/**************************************************************************************/
	DIO_PORTB_DIR |= 1<<3;
	/* Call the initializer of the Terminal */
	if(SRVC_STATUS_ERROR_OK != Service_init())
	{
		return APP_STATUS_ERROR_NOK;
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	08 95       	ret
	}
	if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
		return SRVC_STATUS_ERROR_NOK;
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	08 95       	ret
	if(Lcd_printString((uint8_t*)"Temp:   Fan: 0%") != LCD_STATUS_ERROR_OK)
		return SRVC_STATUS_ERROR_NOK;
      f6:	80 e0       	ldi	r24, 0x00	; 0
      f8:	08 95       	ret
	if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
		return SRVC_STATUS_ERROR_NOK;
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	08 95       	ret
	if(Lcd_printString((uint8_t*)"Tref:     Set:  ") != LCD_STATUS_ERROR_OK)
		return SRVC_STATUS_ERROR_NOK;
      fe:	80 e0       	ldi	r24, 0x00	; 0
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     100:	08 95       	ret

00000102 <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
     102:	cf 92       	push	r12
     104:	df 92       	push	r13
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
     10e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <enuCurrentAppStatus>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <App_update+0x16>
     116:	92 c0       	rjmp	.+292    	; 0x23c <App_update+0x13a>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuSrvc_Status_t KeypdaStatus = Service_ReportKeypad(gau8_threshold);
     118:	8f ef       	ldi	r24, 0xFF	; 255
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <Service_ReportKeypad>
	static uint8_t sau8_fanSpeed[5] = "0  %";
	static uint8_t su8_fanSpeed = 0;
	if(KeypdaStatus == SRVC_KPD_NUM)
     120:	86 30       	cpi	r24, 0x06	; 6
     122:	a1 f4       	brne	.+40     	; 0x14c <App_update+0x4a>
	{
		stringToInteger((uint32_t*)&gu32_Tref, gau8_threshold);
     124:	6f ef       	ldi	r22, 0xFF	; 255
     126:	70 e0       	ldi	r23, 0x00	; 0
     128:	8b ef       	ldi	r24, 0xFB	; 251
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <stringToInteger>
		if(Lcd_setCursor(1,5) != LCD_STATUS_ERROR_OK)
     130:	65 e0       	ldi	r22, 0x05	; 5
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Lcd_setCursor>
     138:	81 30       	cpi	r24, 0x01	; 1
     13a:	09 f0       	breq	.+2      	; 0x13e <App_update+0x3c>
     13c:	81 c0       	rjmp	.+258    	; 0x240 <App_update+0x13e>
			return SRVC_STATUS_ERROR_NOK;
		if(Lcd_printString(gau8_threshold) != LCD_STATUS_ERROR_OK)
     13e:	8f ef       	ldi	r24, 0xFF	; 255
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 90 02 	call	0x520	; 0x520 <Lcd_printString>
     146:	81 30       	cpi	r24, 0x01	; 1
     148:	09 f0       	breq	.+2      	; 0x14c <App_update+0x4a>
     14a:	7c c0       	rjmp	.+248    	; 0x244 <App_update+0x142>
			return SRVC_STATUS_ERROR_NOK;
	}
	if (LM35_readTemp(&gu8_temp) == LM35_STATUS_ERROR_OK)
     14c:	87 ef       	ldi	r24, 0xF7	; 247
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LM35_readTemp>
     154:	81 30       	cpi	r24, 0x01	; 1
     156:	b1 f4       	brne	.+44     	; 0x184 <App_update+0x82>
	{
		integerToString((uint16_t)gu8_temp, gau8_temp, DEC);
     158:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <gu8_temp>
     15c:	41 e0       	ldi	r20, 0x01	; 1
     15e:	68 ef       	ldi	r22, 0xF8	; 248
     160:	70 e0       	ldi	r23, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 0e 0a 	call	0x141c	; 0x141c <integerToString>
		if(Lcd_setCursor(0,5) != LCD_STATUS_ERROR_OK)
     168:	65 e0       	ldi	r22, 0x05	; 5
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Lcd_setCursor>
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	09 f0       	breq	.+2      	; 0x176 <App_update+0x74>
     174:	69 c0       	rjmp	.+210    	; 0x248 <App_update+0x146>
		return SRVC_STATUS_ERROR_NOK;
		if(Lcd_printString(gau8_temp) != LCD_STATUS_ERROR_OK)
     176:	88 ef       	ldi	r24, 0xF8	; 248
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 90 02 	call	0x520	; 0x520 <Lcd_printString>
     17e:	81 30       	cpi	r24, 0x01	; 1
     180:	09 f0       	breq	.+2      	; 0x184 <App_update+0x82>
     182:	64 c0       	rjmp	.+200    	; 0x24c <App_update+0x14a>
		return SRVC_STATUS_ERROR_NOK;
	}
	
	su8_fanSpeed = (100*(gu8_temp-gu32_Tref))/(MAX_TEMP-gu32_Tref);
     184:	c0 90 fb 00 	lds	r12, 0x00FB	; 0x8000fb <gu32_Tref>
     188:	d0 90 fc 00 	lds	r13, 0x00FC	; 0x8000fc <gu32_Tref+0x1>
     18c:	e0 90 fd 00 	lds	r14, 0x00FD	; 0x8000fd <gu32_Tref+0x2>
     190:	f0 90 fe 00 	lds	r15, 0x00FE	; 0x8000fe <gu32_Tref+0x3>
     194:	20 91 f7 00 	lds	r18, 0x00F7	; 0x8000f7 <gu8_temp>
     198:	82 2f       	mov	r24, r18
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	b0 e0       	ldi	r27, 0x00	; 0
     1a0:	9c 01       	movw	r18, r24
     1a2:	ad 01       	movw	r20, r26
     1a4:	2c 19       	sub	r18, r12
     1a6:	3d 09       	sbc	r19, r13
     1a8:	4e 09       	sbc	r20, r14
     1aa:	5f 09       	sbc	r21, r15
     1ac:	a4 e6       	ldi	r26, 0x64	; 100
     1ae:	b0 e0       	ldi	r27, 0x00	; 0
     1b0:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__muluhisi3>
     1b4:	02 e3       	ldi	r16, 0x32	; 50
     1b6:	10 e0       	ldi	r17, 0x00	; 0
     1b8:	20 e0       	ldi	r18, 0x00	; 0
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	a9 01       	movw	r20, r18
     1be:	98 01       	movw	r18, r16
     1c0:	2c 19       	sub	r18, r12
     1c2:	3d 09       	sbc	r19, r13
     1c4:	4e 09       	sbc	r20, r14
     1c6:	5f 09       	sbc	r21, r15
     1c8:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__udivmodsi4>
     1cc:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__data_end>
	if(su8_fanSpeed>100) su8_fanSpeed=0;
     1d0:	25 36       	cpi	r18, 0x65	; 101
     1d2:	10 f0       	brcs	.+4      	; 0x1d8 <App_update+0xd6>
     1d4:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__data_end>
	
	if(Lcd_setCursor(0,12) != LCD_STATUS_ERROR_OK)
     1d8:	6c e0       	ldi	r22, 0x0C	; 12
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Lcd_setCursor>
     1e0:	81 30       	cpi	r24, 0x01	; 1
     1e2:	b1 f5       	brne	.+108    	; 0x250 <App_update+0x14e>
	return SRVC_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"   %") != LCD_STATUS_ERROR_OK)
     1e4:	86 ee       	ldi	r24, 0xE6	; 230
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 90 02 	call	0x520	; 0x520 <Lcd_printString>
     1ec:	81 30       	cpi	r24, 0x01	; 1
     1ee:	91 f5       	brne	.+100    	; 0x254 <App_update+0x152>
	return SRVC_STATUS_ERROR_NOK;
	
	if(Lcd_setCursor(0,12) != LCD_STATUS_ERROR_OK)
     1f0:	6c e0       	ldi	r22, 0x0C	; 12
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Lcd_setCursor>
     1f8:	81 30       	cpi	r24, 0x01	; 1
     1fa:	71 f5       	brne	.+92     	; 0x258 <App_update+0x156>
	return SRVC_STATUS_ERROR_NOK;
	if(Lcd_printDecimal(su8_fanSpeed) != LCD_STATUS_ERROR_OK)
     1fc:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 a4 02 	call	0x548	; 0x548 <Lcd_printDecimal>
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	49 f5       	brne	.+82     	; 0x25c <App_update+0x15a>
	return SRVC_STATUS_ERROR_NOK;
	EmptyString(sau8_fanSpeed);
     20a:	80 e6       	ldi	r24, 0x60	; 96
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <EmptyString>
	
	Motor_stop(MOTOR_FAN_ID);
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	0e 94 1b 03 	call	0x636	; 0x636 <Motor_stop>
	Motor_run(MOTOR_FAN_ID,su8_fanSpeed,MOTOR_DIR_CLK_WISE);
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	60 91 f6 00 	lds	r22, 0x00F6	; 0x8000f6 <__data_end>
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	0e 94 8a 03 	call	0x714	; 0x714 <Motor_run>

	
	Delay_ms(175);
     224:	2f ea       	ldi	r18, 0xAF	; 175
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 be 04 	call	0x97c	; 0x97c <Delay_ms>
	return APP_STATUS_ERROR_OK;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	11 c0       	rjmp	.+34     	; 0x25e <App_update+0x15c>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
     23c:	85 e0       	ldi	r24, 0x05	; 5
     23e:	0f c0       	rjmp	.+30     	; 0x25e <App_update+0x15c>
	static uint8_t su8_fanSpeed = 0;
	if(KeypdaStatus == SRVC_KPD_NUM)
	{
		stringToInteger((uint32_t*)&gu32_Tref, gau8_threshold);
		if(Lcd_setCursor(1,5) != LCD_STATUS_ERROR_OK)
			return SRVC_STATUS_ERROR_NOK;
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	0d c0       	rjmp	.+26     	; 0x25e <App_update+0x15c>
		if(Lcd_printString(gau8_threshold) != LCD_STATUS_ERROR_OK)
			return SRVC_STATUS_ERROR_NOK;
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	0b c0       	rjmp	.+22     	; 0x25e <App_update+0x15c>
	}
	if (LM35_readTemp(&gu8_temp) == LM35_STATUS_ERROR_OK)
	{
		integerToString((uint16_t)gu8_temp, gau8_temp, DEC);
		if(Lcd_setCursor(0,5) != LCD_STATUS_ERROR_OK)
		return SRVC_STATUS_ERROR_NOK;
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	09 c0       	rjmp	.+18     	; 0x25e <App_update+0x15c>
		if(Lcd_printString(gau8_temp) != LCD_STATUS_ERROR_OK)
		return SRVC_STATUS_ERROR_NOK;
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	07 c0       	rjmp	.+14     	; 0x25e <App_update+0x15c>
	
	su8_fanSpeed = (100*(gu8_temp-gu32_Tref))/(MAX_TEMP-gu32_Tref);
	if(su8_fanSpeed>100) su8_fanSpeed=0;
	
	if(Lcd_setCursor(0,12) != LCD_STATUS_ERROR_OK)
	return SRVC_STATUS_ERROR_NOK;
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	05 c0       	rjmp	.+10     	; 0x25e <App_update+0x15c>
	if(Lcd_printString((uint8_t*)"   %") != LCD_STATUS_ERROR_OK)
	return SRVC_STATUS_ERROR_NOK;
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	03 c0       	rjmp	.+6      	; 0x25e <App_update+0x15c>
	
	if(Lcd_setCursor(0,12) != LCD_STATUS_ERROR_OK)
	return SRVC_STATUS_ERROR_NOK;
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	01 c0       	rjmp	.+2      	; 0x25e <App_update+0x15c>
	if(Lcd_printDecimal(su8_fanSpeed) != LCD_STATUS_ERROR_OK)
	return SRVC_STATUS_ERROR_NOK;
     25c:	80 e0       	ldi	r24, 0x00	; 0
	Motor_run(MOTOR_FAN_ID,su8_fanSpeed,MOTOR_DIR_CLK_WISE);

	
	Delay_ms(175);
	return APP_STATUS_ERROR_OK;
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	ff 90       	pop	r15
     264:	ef 90       	pop	r14
     266:	df 90       	pop	r13
     268:	cf 90       	pop	r12
     26a:	08 95       	ret

0000026c <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
     26c:	0e 94 50 00 	call	0xa0	; 0xa0 <App_init>
     270:	81 30       	cpi	r24, 0x01	; 1
     272:	39 f4       	brne	.+14     	; 0x282 <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
     274:	8f b7       	in	r24, 0x3f	; 63
     276:	80 68       	ori	r24, 0x80	; 128
     278:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
     27a:	0e 94 81 00 	call	0x102	; 0x102 <App_update>
     27e:	81 30       	cpi	r24, 0x01	; 1
     280:	e1 f3       	breq	.-8      	; 0x27a <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
			
	}
}
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	08 95       	ret

00000286 <Keypad_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is already initialized */
	if (genu_KeypadModuleState == KEYPAD_STATUS_INIT)
     286:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <genu_KeypadModuleState>
     28a:	85 30       	cpi	r24, 0x05	; 5
     28c:	71 f0       	breq	.+28     	; 0x2aa <Keypad_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
     28e:	80 e8       	ldi	r24, 0x80	; 128
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
     296:	81 30       	cpi	r24, 0x01	; 1
     298:	11 f0       	breq	.+4      	; 0x29e <Keypad_init+0x18>
     29a:	87 30       	cpi	r24, 0x07	; 7
     29c:	29 f4       	brne	.+10     	; 0x2a8 <Keypad_init+0x22>
		return KEYPAD_STATUS_ERROR_NOK;
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
     29e:	85 e0       	ldi	r24, 0x05	; 5
     2a0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <genu_KeypadModuleState>
	return KEYPAD_STATUS_ERROR_OK;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return KEYPAD_STATUS_ERROR_NOK;
     2a8:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
	return KEYPAD_STATUS_ERROR_OK;
}
     2aa:	08 95       	ret

000002ac <Keypad_readKey>:
* Parameters (out): pu8_pressedKey - Pointer to a Char to hold the pressed key.
* Return value: enuKeypad_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current pressed Key.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuKeypad_Status_t Keypad_readKey(uint8_t * pu8_pressedKey)
{
     2ac:	af 92       	push	r10
     2ae:	bf 92       	push	r11
     2b0:	cf 92       	push	r12
     2b2:	df 92       	push	r13
     2b4:	ef 92       	push	r14
     2b6:	ff 92       	push	r15
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	1f 92       	push	r1
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
     2c6:	7c 01       	movw	r14, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
     2c8:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <genu_KeypadModuleState>
     2cc:	95 30       	cpi	r25, 0x05	; 5
     2ce:	09 f0       	breq	.+2      	; 0x2d2 <Keypad_readKey+0x26>
     2d0:	50 c0       	rjmp	.+160    	; 0x372 <Keypad_readKey+0xc6>
	{
		return KEYPAD_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
     2d2:	e1 14       	cp	r14, r1
     2d4:	f1 04       	cpc	r15, r1
     2d6:	09 f4       	brne	.+2      	; 0x2da <Keypad_readKey+0x2e>
     2d8:	4e c0       	rjmp	.+156    	; 0x376 <Keypad_readKey+0xca>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	89 83       	std	Y+1, r24	; 0x01
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
     2de:	00 e0       	ldi	r16, 0x00	; 0
     2e0:	43 c0       	rjmp	.+134    	; 0x368 <Keypad_readKey+0xbc>
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
     2e2:	a0 2e       	mov	r10, r16
     2e4:	b1 2c       	mov	r11, r1
     2e6:	f5 01       	movw	r30, r10
     2e8:	e9 58       	subi	r30, 0x89	; 137
     2ea:	ff 4f       	sbci	r31, 0xFF	; 255
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     2f4:	81 30       	cpi	r24, 0x01	; 1
     2f6:	09 f0       	breq	.+2      	; 0x2fa <Keypad_readKey+0x4e>
     2f8:	40 c0       	rjmp	.+128    	; 0x37a <Keypad_readKey+0xce>
     2fa:	10 e0       	ldi	r17, 0x00	; 0
     2fc:	29 c0       	rjmp	.+82     	; 0x350 <Keypad_readKey+0xa4>
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
     2fe:	c1 2e       	mov	r12, r17
     300:	d1 2c       	mov	r13, r1
     302:	f6 01       	movw	r30, r12
     304:	ed 58       	subi	r30, 0x8D	; 141
     306:	ff 4f       	sbci	r31, 0xFF	; 255
     308:	be 01       	movw	r22, r28
     30a:	6f 5f       	subi	r22, 0xFF	; 255
     30c:	7f 4f       	sbci	r23, 0xFF	; 255
     30e:	80 81       	ld	r24, Z
     310:	0e 94 2d 07 	call	0xe5a	; 0xe5a <Dio_readPin>
     314:	81 30       	cpi	r24, 0x01	; 1
     316:	99 f5       	brne	.+102    	; 0x37e <Keypad_readKey+0xd2>
				return KEYPAD_STATUS_ERROR_NOK;
			if(u8_pinValue == PIN_LOW)
     318:	89 81       	ldd	r24, Y+1	; 0x01
     31a:	81 11       	cpse	r24, r1
     31c:	18 c0       	rjmp	.+48     	; 0x34e <Keypad_readKey+0xa2>
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
     31e:	61 e0       	ldi	r22, 0x01	; 1
     320:	f5 01       	movw	r30, r10
     322:	e9 58       	subi	r30, 0x89	; 137
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	80 81       	ld	r24, Z
     328:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     32c:	81 30       	cpi	r24, 0x01	; 1
     32e:	49 f5       	brne	.+82     	; 0x382 <Keypad_readKey+0xd6>
					return KEYPAD_STATUS_ERROR_NOK;
				*pu8_pressedKey = gau8_ButtonSymbols[u8_RowIndex][u8_ColumnIndex];
     330:	c6 01       	movw	r24, r12
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	8c 0d       	add	r24, r12
     338:	9d 1d       	adc	r25, r13
     33a:	89 59       	subi	r24, 0x99	; 153
     33c:	9f 4f       	sbci	r25, 0xFF	; 255
     33e:	fc 01       	movw	r30, r24
     340:	ea 0d       	add	r30, r10
     342:	fb 1d       	adc	r31, r11
     344:	80 81       	ld	r24, Z
     346:	f7 01       	movw	r30, r14
     348:	80 83       	st	Z, r24
				return KEYPAD_STATUS_PRESSED;
     34a:	86 e0       	ldi	r24, 0x06	; 6
     34c:	1d c0       	rjmp	.+58     	; 0x388 <Keypad_readKey+0xdc>
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
     34e:	1f 5f       	subi	r17, 0xFF	; 255
     350:	14 30       	cpi	r17, 0x04	; 4
     352:	a8 f2       	brcs	.-86     	; 0x2fe <Keypad_readKey+0x52>
				return KEYPAD_STATUS_PRESSED;
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
     354:	f5 01       	movw	r30, r10
     356:	e9 58       	subi	r30, 0x89	; 137
     358:	ff 4f       	sbci	r31, 0xFF	; 255
     35a:	61 e0       	ldi	r22, 0x01	; 1
     35c:	80 81       	ld	r24, Z
     35e:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     362:	81 30       	cpi	r24, 0x01	; 1
     364:	81 f4       	brne	.+32     	; 0x386 <Keypad_readKey+0xda>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
     366:	0f 5f       	subi	r16, 0xFF	; 255
     368:	03 30       	cpi	r16, 0x03	; 3
     36a:	08 f4       	brcc	.+2      	; 0x36e <Keypad_readKey+0xc2>
     36c:	ba cf       	rjmp	.-140    	; 0x2e2 <Keypad_readKey+0x36>
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
     36e:	87 e0       	ldi	r24, 0x07	; 7
     370:	0b c0       	rjmp	.+22     	; 0x388 <Keypad_readKey+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
	{
		return KEYPAD_STATUS_NOT_INIT;
     372:	84 e0       	ldi	r24, 0x04	; 4
     374:	09 c0       	rjmp	.+18     	; 0x388 <Keypad_readKey+0xdc>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
	{
		return KEYPAD_STATUS_ERROR_NULL;
     376:	83 e0       	ldi	r24, 0x03	; 3
     378:	07 c0       	rjmp	.+14     	; 0x388 <Keypad_readKey+0xdc>
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	05 c0       	rjmp	.+10     	; 0x388 <Keypad_readKey+0xdc>
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
				return KEYPAD_STATUS_ERROR_NOK;
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	03 c0       	rjmp	.+6      	; 0x388 <Keypad_readKey+0xdc>
			if(u8_pinValue == PIN_LOW)
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
					return KEYPAD_STATUS_ERROR_NOK;
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	01 c0       	rjmp	.+2      	; 0x388 <Keypad_readKey+0xdc>
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
     386:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
     388:	0f 90       	pop	r0
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	1f 91       	pop	r17
     390:	0f 91       	pop	r16
     392:	ff 90       	pop	r15
     394:	ef 90       	pop	r14
     396:	df 90       	pop	r13
     398:	cf 90       	pop	r12
     39a:	bf 90       	pop	r11
     39c:	af 90       	pop	r10
     39e:	08 95       	ret

000003a0 <Lcd_WriteData>:
{
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, BIN);
	Lcd_printString(au8_snum);
	return LCD_STATUS_ERROR_OK;
}
     3a0:	cf 93       	push	r28
     3a2:	c8 2f       	mov	r28, r24
     3a4:	80 ff       	sbrs	r24, 0
     3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <Lcd_WriteData+0x12>
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	8a e0       	ldi	r24, 0x0A	; 10
     3ac:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     3b0:	04 c0       	rjmp	.+8      	; 0x3ba <Lcd_WriteData+0x1a>
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	8a e0       	ldi	r24, 0x0A	; 10
     3b6:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     3ba:	c1 ff       	sbrs	r28, 1
     3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <Lcd_WriteData+0x28>
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	8b e0       	ldi	r24, 0x0B	; 11
     3c2:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <Lcd_WriteData+0x30>
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	8b e0       	ldi	r24, 0x0B	; 11
     3cc:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     3d0:	c2 ff       	sbrs	r28, 2
     3d2:	05 c0       	rjmp	.+10     	; 0x3de <Lcd_WriteData+0x3e>
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	8c e0       	ldi	r24, 0x0C	; 12
     3d8:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <Lcd_WriteData+0x46>
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	8c e0       	ldi	r24, 0x0C	; 12
     3e2:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     3e6:	c3 ff       	sbrs	r28, 3
     3e8:	05 c0       	rjmp	.+10     	; 0x3f4 <Lcd_WriteData+0x54>
     3ea:	61 e0       	ldi	r22, 0x01	; 1
     3ec:	8d e0       	ldi	r24, 0x0D	; 13
     3ee:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     3f2:	04 c0       	rjmp	.+8      	; 0x3fc <Lcd_WriteData+0x5c>
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	8d e0       	ldi	r24, 0x0D	; 13
     3f8:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <Lcd_EnableToggle>:
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	89 e0       	ldi	r24, 0x09	; 9
     404:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     408:	21 e0       	ldi	r18, 0x01	; 1
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 be 04 	call	0x97c	; 0x97c <Delay_ms>
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	89 e0       	ldi	r24, 0x09	; 9
     420:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     424:	08 95       	ret

00000426 <Lcd_sendCommand>:
     426:	cf 93       	push	r28
     428:	c8 2f       	mov	r28, r24
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	87 e0       	ldi	r24, 0x07	; 7
     42e:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     432:	8c 2f       	mov	r24, r28
     434:	82 95       	swap	r24
     436:	8f 70       	andi	r24, 0x0F	; 15
     438:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <Lcd_WriteData>
     43c:	0e 94 00 02 	call	0x400	; 0x400 <Lcd_EnableToggle>
     440:	8c 2f       	mov	r24, r28
     442:	8f 70       	andi	r24, 0x0F	; 15
     444:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <Lcd_WriteData>
     448:	0e 94 00 02 	call	0x400	; 0x400 <Lcd_EnableToggle>
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <Lcd_init>:
     452:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <genu_LcdModuleState>
     456:	86 30       	cpi	r24, 0x06	; 6
     458:	59 f1       	breq	.+86     	; 0x4b0 <Lcd_init+0x5e>
     45a:	80 e8       	ldi	r24, 0x80	; 128
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Dio_init>
     462:	81 30       	cpi	r24, 0x01	; 1
     464:	11 f0       	breq	.+4      	; 0x46a <Lcd_init+0x18>
     466:	87 30       	cpi	r24, 0x07	; 7
     468:	11 f5       	brne	.+68     	; 0x4ae <Lcd_init+0x5c>
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	87 e0       	ldi	r24, 0x07	; 7
     46e:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	89 e0       	ldi	r24, 0x09	; 9
     476:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     47a:	83 e3       	ldi	r24, 0x33	; 51
     47c:	0e 94 13 02 	call	0x426	; 0x426 <Lcd_sendCommand>
     480:	82 e3       	ldi	r24, 0x32	; 50
     482:	0e 94 13 02 	call	0x426	; 0x426 <Lcd_sendCommand>
     486:	88 e2       	ldi	r24, 0x28	; 40
     488:	0e 94 13 02 	call	0x426	; 0x426 <Lcd_sendCommand>
     48c:	88 e0       	ldi	r24, 0x08	; 8
     48e:	0e 94 13 02 	call	0x426	; 0x426 <Lcd_sendCommand>
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	0e 94 13 02 	call	0x426	; 0x426 <Lcd_sendCommand>
     498:	86 e0       	ldi	r24, 0x06	; 6
     49a:	0e 94 13 02 	call	0x426	; 0x426 <Lcd_sendCommand>
     49e:	8c e0       	ldi	r24, 0x0C	; 12
     4a0:	0e 94 13 02 	call	0x426	; 0x426 <Lcd_sendCommand>
     4a4:	86 e0       	ldi	r24, 0x06	; 6
     4a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <genu_LcdModuleState>
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	08 95       	ret
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	08 95       	ret

000004b2 <Lcd_setCursor>:
     4b2:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <genu_LcdModuleState>
     4b6:	96 30       	cpi	r25, 0x06	; 6
     4b8:	89 f4       	brne	.+34     	; 0x4dc <Lcd_setCursor+0x2a>
     4ba:	83 30       	cpi	r24, 0x03	; 3
     4bc:	88 f4       	brcc	.+34     	; 0x4e0 <Lcd_setCursor+0x2e>
     4be:	61 31       	cpi	r22, 0x11	; 17
     4c0:	88 f4       	brcc	.+34     	; 0x4e4 <Lcd_setCursor+0x32>
     4c2:	28 2f       	mov	r18, r24
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	2e 5f       	subi	r18, 0xFE	; 254
     4c8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ca:	86 2f       	mov	r24, r22
     4cc:	90 e4       	ldi	r25, 0x40	; 64
     4ce:	29 9f       	mul	r18, r25
     4d0:	80 0d       	add	r24, r0
     4d2:	11 24       	eor	r1, r1
     4d4:	0e 94 13 02 	call	0x426	; 0x426 <Lcd_sendCommand>
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	08 95       	ret
     4dc:	85 e0       	ldi	r24, 0x05	; 5
     4de:	08 95       	ret
     4e0:	83 e0       	ldi	r24, 0x03	; 3
     4e2:	08 95       	ret
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	08 95       	ret

000004e8 <Lcd_printChar>:
     4e8:	cf 93       	push	r28
     4ea:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <genu_LcdModuleState>
     4ee:	96 30       	cpi	r25, 0x06	; 6
     4f0:	a1 f4       	brne	.+40     	; 0x51a <Lcd_printChar+0x32>
     4f2:	c8 2f       	mov	r28, r24
     4f4:	61 e0       	ldi	r22, 0x01	; 1
     4f6:	87 e0       	ldi	r24, 0x07	; 7
     4f8:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     4fc:	8c 2f       	mov	r24, r28
     4fe:	82 95       	swap	r24
     500:	8f 70       	andi	r24, 0x0F	; 15
     502:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <Lcd_WriteData>
     506:	0e 94 00 02 	call	0x400	; 0x400 <Lcd_EnableToggle>
     50a:	8c 2f       	mov	r24, r28
     50c:	8f 70       	andi	r24, 0x0F	; 15
     50e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <Lcd_WriteData>
     512:	0e 94 00 02 	call	0x400	; 0x400 <Lcd_EnableToggle>
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	01 c0       	rjmp	.+2      	; 0x51c <Lcd_printChar+0x34>
     51a:	85 e0       	ldi	r24, 0x05	; 5
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <Lcd_printString>:
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	ec 01       	movw	r28, r24
     526:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <genu_LcdModuleState>
     52a:	86 30       	cpi	r24, 0x06	; 6
     52c:	49 f4       	brne	.+18     	; 0x540 <Lcd_printString+0x20>
     52e:	03 c0       	rjmp	.+6      	; 0x536 <Lcd_printString+0x16>
     530:	21 96       	adiw	r28, 0x01	; 1
     532:	0e 94 74 02 	call	0x4e8	; 0x4e8 <Lcd_printChar>
     536:	88 81       	ld	r24, Y
     538:	81 11       	cpse	r24, r1
     53a:	fa cf       	rjmp	.-12     	; 0x530 <Lcd_printString+0x10>
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	01 c0       	rjmp	.+2      	; 0x542 <Lcd_printString+0x22>
     540:	85 e0       	ldi	r24, 0x05	; 5
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <Lcd_printDecimal>:
enuLcd_Status_t Lcd_printDecimal(uint16_t u16_num)
{
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	61 97       	sbiw	r28, 0x11	; 17
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	f8 94       	cli
     556:	de bf       	out	0x3e, r29	; 62
     558:	0f be       	out	0x3f, r0	; 63
     55a:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, DEC);
     55c:	41 e0       	ldi	r20, 0x01	; 1
     55e:	be 01       	movw	r22, r28
     560:	6f 5f       	subi	r22, 0xFF	; 255
     562:	7f 4f       	sbci	r23, 0xFF	; 255
     564:	0e 94 0e 0a 	call	0x141c	; 0x141c <integerToString>
	Lcd_printString(au8_snum);
     568:	ce 01       	movw	r24, r28
     56a:	01 96       	adiw	r24, 0x01	; 1
     56c:	0e 94 90 02 	call	0x520	; 0x520 <Lcd_printString>
	return LCD_STATUS_ERROR_OK;
}
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	61 96       	adiw	r28, 0x11	; 17
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	08 95       	ret

00000584 <LM35_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is already initialized */
	if (genu_LM35ModuleState == LM35_STATUS_INIT)
     584:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <genu_LM35ModuleState>
     588:	85 30       	cpi	r24, 0x05	; 5
     58a:	51 f0       	breq	.+20     	; 0x5a0 <LM35_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
     58c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Adc_init>
     590:	81 30       	cpi	r24, 0x01	; 1
     592:	29 f4       	brne	.+10     	; 0x59e <LM35_init+0x1a>
		return LM35_STATUS_ERROR_NOK;
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
     594:	85 e0       	ldi	r24, 0x05	; 5
     596:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <genu_LM35ModuleState>
	return LM35_STATUS_ERROR_OK;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
		return LM35_STATUS_ERROR_NOK;
     59e:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
	return LM35_STATUS_ERROR_OK;
}
     5a0:	08 95       	ret

000005a2 <LM35_readTemp>:
* Parameters (out): pu8_Temp - Pointer to a Char to hold the temperature.
* Return value: enuLM35_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current temperature and return in celsius.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLM35_Status_t LM35_readTemp(uint8_t * pu8_Temp)
{
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <LM35_readTemp+0xa>
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <LM35_readTemp+0xc>
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	9c 01       	movw	r18, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
     5b4:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <genu_LM35ModuleState>
     5b8:	95 30       	cpi	r25, 0x05	; 5
     5ba:	f1 f4       	brne	.+60     	; 0x5f8 <LM35_readTemp+0x56>
	{
	return LM35_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
     5bc:	21 15       	cp	r18, r1
     5be:	31 05       	cpc	r19, r1
     5c0:	e9 f0       	breq	.+58     	; 0x5fc <LM35_readTemp+0x5a>
     5c2:	89 01       	movw	r16, r18
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
     5c4:	19 82       	std	Y+1, r1	; 0x01
     5c6:	1a 82       	std	Y+2, r1	; 0x02
     5c8:	1b 82       	std	Y+3, r1	; 0x03
     5ca:	1c 82       	std	Y+4, r1	; 0x04
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
     5cc:	be 01       	movw	r22, r28
     5ce:	6f 5f       	subi	r22, 0xFF	; 255
     5d0:	7f 4f       	sbci	r23, 0xFF	; 255
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0e 94 25 04 	call	0x84a	; 0x84a <Adc_start>
     5d8:	81 30       	cpi	r24, 0x01	; 1
     5da:	91 f4       	brne	.+36     	; 0x600 <LM35_readTemp+0x5e>
		return LM35_STATUS_ERROR_NOK;
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
     5dc:	69 81       	ldd	r22, Y+1	; 0x01
     5de:	7a 81       	ldd	r23, Y+2	; 0x02
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	9c 81       	ldd	r25, Y+4	; 0x04
     5e4:	2a e0       	ldi	r18, 0x0A	; 10
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__udivmodsi4>
     5f0:	f8 01       	movw	r30, r16
     5f2:	20 83       	st	Z, r18
		
	return LM35_STATUS_ERROR_OK;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	05 c0       	rjmp	.+10     	; 0x602 <LM35_readTemp+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
	{
	return LM35_STATUS_NOT_INIT;
     5f8:	84 e0       	ldi	r24, 0x04	; 4
     5fa:	03 c0       	rjmp	.+6      	; 0x602 <LM35_readTemp+0x60>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
	{
		return LM35_STATUS_ERROR_NULL;
     5fc:	83 e0       	ldi	r24, 0x03	; 3
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <LM35_readTemp+0x60>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
		return LM35_STATUS_ERROR_NOK;
     600:	80 e0       	ldi	r24, 0x00	; 0
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
		
	return LM35_STATUS_ERROR_OK;
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	08 95       	ret

00000614 <Motor_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
     614:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <gu8_MotorModuleStatus>
     618:	86 30       	cpi	r24, 0x06	; 6
     61a:	49 f0       	breq	.+18     	; 0x62e <Motor_init+0x1a>
/**************************************************************************************/
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
     61c:	0e 94 35 0b 	call	0x166a	; 0x166a <SWPwm_Init>
     620:	81 30       	cpi	r24, 0x01	; 1
     622:	39 f4       	brne	.+14     	; 0x632 <Motor_init+0x1e>
		return MOTOR_STATUS_ERROR_NOK;
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
     624:	86 e0       	ldi	r24, 0x06	; 6
     626:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <gu8_MotorModuleStatus>
	return MOTOR_STATUS_ERROR_OK;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_INIT;
     62e:	86 e0       	ldi	r24, 0x06	; 6
     630:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
		return MOTOR_STATUS_ERROR_NOK;
     632:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
	return MOTOR_STATUS_ERROR_OK;
}
     634:	08 95       	ret

00000636 <Motor_stop>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the motor.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to stop motor */
enuMotor_Status_t Motor_stop(uint8_t u8_motorID)
{
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
     644:	81 11       	cpse	r24, r1
     646:	5d c0       	rjmp	.+186    	; 0x702 <Motor_stop+0xcc>
     648:	d8 2e       	mov	r13, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Stop the Motor by driving the pins to LOW */
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
     64a:	08 2f       	mov	r16, r24
     64c:	10 e0       	ldi	r17, 0x00	; 0
     64e:	78 01       	movw	r14, r16
     650:	ee 0c       	add	r14, r14
     652:	ff 1c       	adc	r15, r15
     654:	ee 0c       	add	r14, r14
     656:	ff 1c       	adc	r15, r15
     658:	c7 01       	movw	r24, r14
     65a:	80 0f       	add	r24, r16
     65c:	91 1f       	adc	r25, r17
     65e:	ec 01       	movw	r28, r24
     660:	c5 51       	subi	r28, 0x15	; 21
     662:	df 4f       	sbci	r29, 0xFF	; 255
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	89 81       	ldd	r24, Y+1	; 0x01
     668:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	8a 81       	ldd	r24, Y+2	; 0x02
     670:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
     674:	e0 e0       	ldi	r30, 0x00	; 0
     676:	1c c0       	rjmp	.+56     	; 0x6b0 <Motor_stop+0x7a>
	{
		if(u8_loopIndex == u8_motorID) /* Skip the current motor */
     678:	ed 15       	cp	r30, r13
     67a:	c9 f0       	breq	.+50     	; 0x6ae <Motor_stop+0x78>
		{
			continue;
		}
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
     67c:	d8 01       	movw	r26, r16
     67e:	aa 0f       	add	r26, r26
     680:	bb 1f       	adc	r27, r27
     682:	aa 0f       	add	r26, r26
     684:	bb 1f       	adc	r27, r27
     686:	a0 0f       	add	r26, r16
     688:	b1 1f       	adc	r27, r17
     68a:	a5 51       	subi	r26, 0x15	; 21
     68c:	bf 4f       	sbci	r27, 0xFF	; 255
     68e:	2c 91       	ld	r18, X
     690:	8e 2f       	mov	r24, r30
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	dc 01       	movw	r26, r24
     696:	aa 0f       	add	r26, r26
     698:	bb 1f       	adc	r27, r27
     69a:	aa 0f       	add	r26, r26
     69c:	bb 1f       	adc	r27, r27
     69e:	8a 0f       	add	r24, r26
     6a0:	9b 1f       	adc	r25, r27
     6a2:	dc 01       	movw	r26, r24
     6a4:	a5 51       	subi	r26, 0x15	; 21
     6a6:	bf 4f       	sbci	r27, 0xFF	; 255
     6a8:	8c 91       	ld	r24, X
     6aa:	28 17       	cp	r18, r24
     6ac:	19 f0       	breq	.+6      	; 0x6b4 <Motor_stop+0x7e>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
     6ae:	ef 5f       	subi	r30, 0xFF	; 255
     6b0:	ee 23       	and	r30, r30
     6b2:	11 f3       	breq	.-60     	; 0x678 <Motor_stop+0x42>
			break;
		}
	}
	
	
	if(u8_loopIndex == MOTORS_USED_NUM)
     6b4:	e1 30       	cpi	r30, 0x01	; 1
     6b6:	69 f4       	brne	.+26     	; 0x6d2 <Motor_stop+0x9c>
	{ /* In case that there isn't any motor using the same PWM Channel --> Stop the PWM */
		SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
     6b8:	f8 01       	movw	r30, r16
     6ba:	ee 0f       	add	r30, r30
     6bc:	ff 1f       	adc	r31, r31
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	e0 0f       	add	r30, r16
     6c4:	f1 1f       	adc	r31, r17
     6c6:	e5 51       	subi	r30, 0x15	; 21
     6c8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ca:	80 81       	ld	r24, Z
     6cc:	0e 94 85 0c 	call	0x190a	; 0x190a <SWPwm_Stop>
     6d0:	12 c0       	rjmp	.+36     	; 0x6f6 <Motor_stop+0xc0>
	}else
	{/* In case that there is another motor using the same PWM Channel */
		if (gau8_MotorsState[u8_loopIndex] == MOTOR_STOPPED) /* Check if the other motor is not running */
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	ee 5f       	subi	r30, 0xFE	; 254
     6d6:	fe 4f       	sbci	r31, 0xFE	; 254
     6d8:	80 81       	ld	r24, Z
     6da:	81 11       	cpse	r24, r1
     6dc:	0c c0       	rjmp	.+24     	; 0x6f6 <Motor_stop+0xc0>
		{/* In case that the other motor is not running --> Stop the PWM */
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
     6de:	f8 01       	movw	r30, r16
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	ee 0f       	add	r30, r30
     6e6:	ff 1f       	adc	r31, r31
     6e8:	e0 0f       	add	r30, r16
     6ea:	f1 1f       	adc	r31, r17
     6ec:	e5 51       	subi	r30, 0x15	; 21
     6ee:	ff 4f       	sbci	r31, 0xFF	; 255
     6f0:	80 81       	ld	r24, Z
     6f2:	0e 94 85 0c 	call	0x190a	; 0x190a <SWPwm_Stop>
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
     6f6:	f8 01       	movw	r30, r16
     6f8:	ee 5f       	subi	r30, 0xFE	; 254
     6fa:	fe 4f       	sbci	r31, 0xFE	; 254
     6fc:	10 82       	st	Z, r1
	return MOTOR_STATUS_ERROR_OK;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	01 c0       	rjmp	.+2      	; 0x704 <Motor_stop+0xce>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
     702:	82 e0       	ldi	r24, 0x02	; 2
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
	return MOTOR_STATUS_ERROR_OK;
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	ff 90       	pop	r15
     70e:	ef 90       	pop	r14
     710:	df 90       	pop	r13
     712:	08 95       	ret

00000714 <Motor_run>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Move the motor in the given direction.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to move the motor forward with given speed in % */
enuMotor_Status_t Motor_run(uint8_t u8_motorID, uint8_t u8_speed, uint8_t u8_direction)
{
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
     71e:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <gu8_MotorModuleStatus>
     722:	96 30       	cpi	r25, 0x06	; 6
     724:	09 f0       	breq	.+2      	; 0x728 <Motor_run+0x14>
     726:	57 c0       	rjmp	.+174    	; 0x7d6 <Motor_run+0xc2>
	{
		return MOTOR_STATUS_UNINIT;
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
     728:	81 11       	cpse	r24, r1
     72a:	57 c0       	rjmp	.+174    	; 0x7da <Motor_run+0xc6>
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
     72c:	65 36       	cpi	r22, 0x65	; 101
     72e:	08 f0       	brcs	.+2      	; 0x732 <Motor_run+0x1e>
     730:	56 c0       	rjmp	.+172    	; 0x7de <Motor_run+0xca>
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
     732:	42 30       	cpi	r20, 0x02	; 2
     734:	08 f0       	brcs	.+2      	; 0x738 <Motor_run+0x24>
     736:	55 c0       	rjmp	.+170    	; 0x7e2 <Motor_run+0xce>
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
     738:	08 2f       	mov	r16, r24
     73a:	10 e0       	ldi	r17, 0x00	; 0
     73c:	f8 01       	movw	r30, r16
     73e:	ee 5f       	subi	r30, 0xFE	; 254
     740:	fe 4f       	sbci	r31, 0xFE	; 254
     742:	90 81       	ld	r25, Z
     744:	91 30       	cpi	r25, 0x01	; 1
     746:	09 f4       	brne	.+2      	; 0x74a <Motor_run+0x36>
     748:	4e c0       	rjmp	.+156    	; 0x7e6 <Motor_run+0xd2>
     74a:	f6 2e       	mov	r15, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_speed == 0) 
     74c:	61 11       	cpse	r22, r1
     74e:	04 c0       	rjmp	.+8      	; 0x758 <Motor_run+0x44>
	{
		Motor_stop(u8_motorID);
     750:	0e 94 1b 03 	call	0x636	; 0x636 <Motor_stop>
		return MOTOR_STATUS_ERROR_OK;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	48 c0       	rjmp	.+144    	; 0x7e8 <Motor_run+0xd4>
	}
	if(u8_direction == MOTOR_DIR_CLK_WISE) /* Activate the Motor in the Clock Wise Direction */
     758:	41 11       	cpse	r20, r1
     75a:	12 c0       	rjmp	.+36     	; 0x780 <Motor_run+0x6c>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_HIGH);
     75c:	25 e0       	ldi	r18, 0x05	; 5
     75e:	20 9f       	mul	r18, r16
     760:	c0 01       	movw	r24, r0
     762:	21 9f       	mul	r18, r17
     764:	90 0d       	add	r25, r0
     766:	11 24       	eor	r1, r1
     768:	ec 01       	movw	r28, r24
     76a:	c5 51       	subi	r28, 0x15	; 21
     76c:	df 4f       	sbci	r29, 0xFF	; 255
     76e:	61 e0       	ldi	r22, 0x01	; 1
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	8a 81       	ldd	r24, Y+2	; 0x02
     77a:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
     77e:	13 c0       	rjmp	.+38     	; 0x7a6 <Motor_run+0x92>
	}else if(u8_direction == MOTOR_DIR_ANTI_CLK_WISE) /* Activate the Motor in the Anti Clock Wise Direction */
     780:	41 30       	cpi	r20, 0x01	; 1
     782:	89 f4       	brne	.+34     	; 0x7a6 <Motor_run+0x92>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
     784:	25 e0       	ldi	r18, 0x05	; 5
     786:	20 9f       	mul	r18, r16
     788:	c0 01       	movw	r24, r0
     78a:	21 9f       	mul	r18, r17
     78c:	90 0d       	add	r25, r0
     78e:	11 24       	eor	r1, r1
     790:	ec 01       	movw	r28, r24
     792:	c5 51       	subi	r28, 0x15	; 21
     794:	df 4f       	sbci	r29, 0xFF	; 255
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	89 81       	ldd	r24, Y+1	; 0x01
     79a:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_HIGH);
     79e:	61 e0       	ldi	r22, 0x01	; 1
     7a0:	8a 81       	ldd	r24, Y+2	; 0x02
     7a2:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
	}
	
	/* Change the state of the Motor to Running */
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
     7a6:	f8 01       	movw	r30, r16
     7a8:	ee 5f       	subi	r30, 0xFE	; 254
     7aa:	fe 4f       	sbci	r31, 0xFE	; 254
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	80 83       	st	Z, r24
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
     7b0:	f8 01       	movw	r30, r16
     7b2:	ee 0f       	add	r30, r30
     7b4:	ff 1f       	adc	r31, r31
     7b6:	ee 0f       	add	r30, r30
     7b8:	ff 1f       	adc	r31, r31
     7ba:	e0 0f       	add	r30, r16
     7bc:	f1 1f       	adc	r31, r17
     7be:	e5 51       	subi	r30, 0x15	; 21
     7c0:	ff 4f       	sbci	r31, 0xFF	; 255
     7c2:	43 81       	ldd	r20, Z+3	; 0x03
     7c4:	54 81       	ldd	r21, Z+4	; 0x04
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	2f 2d       	mov	r18, r15
     7cc:	80 81       	ld	r24, Z
     7ce:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <SWPwm_Start>
	
	return MOTOR_STATUS_ERROR_OK;
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <Motor_run+0xd4>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_UNINIT;
     7d6:	87 e0       	ldi	r24, 0x07	; 7
     7d8:	07 c0       	rjmp	.+14     	; 0x7e8 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	05 c0       	rjmp	.+10     	; 0x7e8 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
     7de:	83 e0       	ldi	r24, 0x03	; 3
     7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
     7e2:	84 e0       	ldi	r24, 0x04	; 4
     7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
	{
		return MOTOR_STATUS_ERROR_RUNNING;
     7e6:	85 e0       	ldi	r24, 0x05	; 5
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
	
	return MOTOR_STATUS_ERROR_OK;
}
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	ff 90       	pop	r15
     7f2:	08 95       	ret

000007f4 <main>:

#include "App Layer/App.h"

int main(void)
{
	App_start();
     7f4:	0e 94 36 01 	call	0x26c	; 0x26c <App_start>
     7f8:	ff cf       	rjmp	.-2      	; 0x7f8 <main+0x4>

000007fa <Adc_init>:
		f32_Resolution = (1000*ADC_AREF_VALUE)/ADC_STEPS_NUM;
	}
	*pu32_data = u16_Result*f32_Resolution;
			
	return ADC_STATUS_ERROR_OK;
}
     7fa:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <genuAdc_Status>
     7fe:	87 30       	cpi	r24, 0x07	; 7
     800:	11 f1       	breq	.+68     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	13 c0       	rjmp	.+38     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     806:	3b b3       	in	r19, 0x1b	; 27
     808:	e2 2f       	mov	r30, r18
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	ee 0f       	add	r30, r30
     80e:	ff 1f       	adc	r31, r31
     810:	e2 58       	subi	r30, 0x82	; 130
     812:	ff 4f       	sbci	r31, 0xFF	; 255
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	00 80       	ld	r0, Z
     81a:	02 c0       	rjmp	.+4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	0a 94       	dec	r0
     822:	e2 f7       	brpl	.-8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     824:	80 95       	com	r24
     826:	83 23       	and	r24, r19
     828:	8b bb       	out	0x1b, r24	; 27
     82a:	2f 5f       	subi	r18, 0xFF	; 255
     82c:	22 23       	and	r18, r18
     82e:	59 f3       	breq	.-42     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     830:	97 e0       	ldi	r25, 0x07	; 7
     832:	96 b9       	out	0x06, r25	; 6
     834:	86 b1       	in	r24, 0x06	; 6
     836:	8f 7d       	andi	r24, 0xDF	; 223
     838:	86 b9       	out	0x06, r24	; 6
     83a:	86 b1       	in	r24, 0x06	; 6
     83c:	86 b9       	out	0x06, r24	; 6
     83e:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <genuAdc_Status>
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	08 95       	ret
     846:	88 e0       	ldi	r24, 0x08	; 8
     848:	08 95       	ret

0000084a <Adc_start>:
     84a:	cf 92       	push	r12
     84c:	df 92       	push	r13
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <genuAdc_Status>
     85a:	97 30       	cpi	r25, 0x07	; 7
     85c:	09 f0       	breq	.+2      	; 0x860 <__stack+0x1>
     85e:	5d c0       	rjmp	.+186    	; 0x91a <__stack+0xbb>
     860:	61 15       	cp	r22, r1
     862:	71 05       	cpc	r23, r1
     864:	09 f4       	brne	.+2      	; 0x868 <__stack+0x9>
     866:	5b c0       	rjmp	.+182    	; 0x91e <__stack+0xbf>
     868:	37 b1       	in	r19, 0x07	; 7
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	fc 01       	movw	r30, r24
     86e:	ee 0f       	add	r30, r30
     870:	ff 1f       	adc	r31, r31
     872:	e2 58       	subi	r30, 0x82	; 130
     874:	ff 4f       	sbci	r31, 0xFF	; 255
     876:	20 81       	ld	r18, Z
     878:	23 2b       	or	r18, r19
     87a:	27 b9       	out	0x07, r18	; 7
     87c:	47 b1       	in	r20, 0x07	; 7
     87e:	31 81       	ldd	r19, Z+1	; 0x01
     880:	50 e4       	ldi	r21, 0x40	; 64
     882:	35 9f       	mul	r19, r21
     884:	90 01       	movw	r18, r0
     886:	11 24       	eor	r1, r1
     888:	24 2b       	or	r18, r20
     88a:	27 b9       	out	0x07, r18	; 7
     88c:	26 b1       	in	r18, 0x06	; 6
     88e:	20 68       	ori	r18, 0x80	; 128
     890:	26 b9       	out	0x06, r18	; 6
     892:	26 b1       	in	r18, 0x06	; 6
     894:	20 64       	ori	r18, 0x40	; 64
     896:	26 b9       	out	0x06, r18	; 6
     898:	34 9b       	sbis	0x06, 4	; 6
     89a:	fe cf       	rjmp	.-4      	; 0x898 <__stack+0x39>
     89c:	44 b1       	in	r20, 0x04	; 4
     89e:	25 b1       	in	r18, 0x05	; 5
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	32 2f       	mov	r19, r18
     8a4:	22 27       	eor	r18, r18
     8a6:	24 2b       	or	r18, r20
     8a8:	88 0f       	add	r24, r24
     8aa:	99 1f       	adc	r25, r25
     8ac:	fc 01       	movw	r30, r24
     8ae:	e2 58       	subi	r30, 0x82	; 130
     8b0:	ff 4f       	sbci	r31, 0xFF	; 255
     8b2:	81 81       	ldd	r24, Z+1	; 0x01
     8b4:	83 30       	cpi	r24, 0x03	; 3
     8b6:	41 f0       	breq	.+16     	; 0x8c8 <__stack+0x69>
     8b8:	81 30       	cpi	r24, 0x01	; 1
     8ba:	69 f0       	breq	.+26     	; 0x8d6 <__stack+0x77>
     8bc:	88 23       	and	r24, r24
     8be:	91 f0       	breq	.+36     	; 0x8e4 <__stack+0x85>
     8c0:	c1 2c       	mov	r12, r1
     8c2:	d1 2c       	mov	r13, r1
     8c4:	76 01       	movw	r14, r12
     8c6:	14 c0       	rjmp	.+40     	; 0x8f0 <__stack+0x91>
     8c8:	c1 2c       	mov	r12, r1
     8ca:	d1 2c       	mov	r13, r1
     8cc:	76 01       	movw	r14, r12
     8ce:	68 94       	set
     8d0:	e5 f8       	bld	r14, 5
     8d2:	f6 f8       	bld	r15, 6
     8d4:	0d c0       	rjmp	.+26     	; 0x8f0 <__stack+0x91>
     8d6:	c1 2c       	mov	r12, r1
     8d8:	d1 2c       	mov	r13, r1
     8da:	76 01       	movw	r14, r12
     8dc:	68 94       	set
     8de:	e7 f8       	bld	r14, 7
     8e0:	f6 f8       	bld	r15, 6
     8e2:	06 c0       	rjmp	.+12     	; 0x8f0 <__stack+0x91>
     8e4:	c1 2c       	mov	r12, r1
     8e6:	d1 2c       	mov	r13, r1
     8e8:	76 01       	movw	r14, r12
     8ea:	68 94       	set
     8ec:	e7 f8       	bld	r14, 7
     8ee:	f6 f8       	bld	r15, 6
     8f0:	eb 01       	movw	r28, r22
     8f2:	b9 01       	movw	r22, r18
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__floatunsisf>
     8fc:	a7 01       	movw	r20, r14
     8fe:	96 01       	movw	r18, r12
     900:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__mulsf3>
     904:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__fixunssfsi>
     908:	68 83       	st	Y, r22
     90a:	79 83       	std	Y+1, r23	; 0x01
     90c:	8a 83       	std	Y+2, r24	; 0x02
     90e:	9b 83       	std	Y+3, r25	; 0x03
     910:	86 b1       	in	r24, 0x06	; 6
     912:	80 61       	ori	r24, 0x10	; 16
     914:	86 b9       	out	0x06, r24	; 6
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	03 c0       	rjmp	.+6      	; 0x920 <__stack+0xc1>
     91a:	86 e0       	ldi	r24, 0x06	; 6
     91c:	01 c0       	rjmp	.+2      	; 0x920 <__stack+0xc1>
     91e:	85 e0       	ldi	r24, 0x05	; 5
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	df 90       	pop	r13
     92a:	cf 90       	pop	r12
     92c:	08 95       	ret

0000092e <__vector_16>:

ISR(ADC_IRQ)
{
     92e:	1f 92       	push	r1
     930:	0f 92       	push	r0
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	0f 92       	push	r0
     936:	11 24       	eor	r1, r1
     938:	2f 93       	push	r18
     93a:	3f 93       	push	r19
     93c:	4f 93       	push	r20
     93e:	5f 93       	push	r21
     940:	6f 93       	push	r22
     942:	7f 93       	push	r23
     944:	8f 93       	push	r24
     946:	9f 93       	push	r25
     948:	af 93       	push	r26
     94a:	bf 93       	push	r27
     94c:	ef 93       	push	r30
     94e:	ff 93       	push	r31
	(*ADC_CallBackPtr)();
     950:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <ADC_CallBackPtr>
     954:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <ADC_CallBackPtr+0x1>
     958:	09 95       	icall
     95a:	ff 91       	pop	r31
     95c:	ef 91       	pop	r30
     95e:	bf 91       	pop	r27
     960:	af 91       	pop	r26
     962:	9f 91       	pop	r25
     964:	8f 91       	pop	r24
     966:	7f 91       	pop	r23
     968:	6f 91       	pop	r22
     96a:	5f 91       	pop	r21
     96c:	4f 91       	pop	r20
     96e:	3f 91       	pop	r19
     970:	2f 91       	pop	r18
     972:	0f 90       	pop	r0
     974:	0f be       	out	0x3f, r0	; 63
     976:	0f 90       	pop	r0
     978:	1f 90       	pop	r1
     97a:	18 95       	reti

0000097c <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
     97c:	2f 92       	push	r2
     97e:	3f 92       	push	r3
     980:	4f 92       	push	r4
     982:	5f 92       	push	r5
     984:	6f 92       	push	r6
     986:	7f 92       	push	r7
     988:	8f 92       	push	r8
     98a:	9f 92       	push	r9
     98c:	af 92       	push	r10
     98e:	bf 92       	push	r11
     990:	cf 92       	push	r12
     992:	df 92       	push	r13
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <Delay_ms+0x26>
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <Delay_ms+0x28>
     9a4:	1f 92       	push	r1
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
     9aa:	22 2e       	mov	r2, r18
     9ac:	33 2e       	mov	r3, r19
     9ae:	44 2e       	mov	r4, r20
     9b0:	55 2e       	mov	r5, r21
     9b2:	66 2e       	mov	r6, r22
     9b4:	79 83       	std	Y+1, r23	; 0x01
     9b6:	8a 83       	std	Y+2, r24	; 0x02
     9b8:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
     9ba:	91 2c       	mov	r9, r1
     9bc:	1d 82       	std	Y+5, r1	; 0x05
     9be:	1c 82       	std	Y+4, r1	; 0x04
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	71 2c       	mov	r7, r1
     9c8:	81 2c       	mov	r8, r1
     9ca:	3d c0       	rjmp	.+122    	; 0xa46 <Delay_ms+0xca>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
     9cc:	2c 2d       	mov	r18, r12
     9ce:	3d 2d       	mov	r19, r13
     9d0:	4e 2d       	mov	r20, r14
     9d2:	5f 2d       	mov	r21, r15
     9d4:	60 2f       	mov	r22, r16
     9d6:	71 2f       	mov	r23, r17
     9d8:	8a 2d       	mov	r24, r10
     9da:	9b 2d       	mov	r25, r11
     9dc:	a1 e0       	ldi	r26, 0x01	; 1
     9de:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__adddi3_s8>
     9e2:	c2 2e       	mov	r12, r18
     9e4:	d3 2e       	mov	r13, r19
     9e6:	e4 2e       	mov	r14, r20
     9e8:	f5 2e       	mov	r15, r21
     9ea:	06 2f       	mov	r16, r22
     9ec:	17 2f       	mov	r17, r23
     9ee:	a8 2e       	mov	r10, r24
     9f0:	b9 2e       	mov	r11, r25
     9f2:	08 c0       	rjmp	.+16     	; 0xa04 <Delay_ms+0x88>
     9f4:	c1 2c       	mov	r12, r1
     9f6:	d1 2c       	mov	r13, r1
     9f8:	e1 2c       	mov	r14, r1
     9fa:	f1 2c       	mov	r15, r1
     9fc:	00 e0       	ldi	r16, 0x00	; 0
     9fe:	10 e0       	ldi	r17, 0x00	; 0
     a00:	a1 2c       	mov	r10, r1
     a02:	b1 2c       	mov	r11, r1
     a04:	2c 2d       	mov	r18, r12
     a06:	3d 2d       	mov	r19, r13
     a08:	4e 2d       	mov	r20, r14
     a0a:	5f 2d       	mov	r21, r15
     a0c:	60 2f       	mov	r22, r16
     a0e:	71 2f       	mov	r23, r17
     a10:	8a 2d       	mov	r24, r10
     a12:	9b 2d       	mov	r25, r11
     a14:	ac e0       	ldi	r26, 0x0C	; 12
     a16:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__cmpdi2_s8>
     a1a:	c1 f2       	breq	.-80     	; 0x9cc <Delay_ms+0x50>
     a1c:	b8 f2       	brcs	.-82     	; 0x9cc <Delay_ms+0x50>
     a1e:	8c 81       	ldd	r24, Y+4	; 0x04

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
     a20:	29 2d       	mov	r18, r9
     a22:	3d 81       	ldd	r19, Y+5	; 0x05
     a24:	48 2f       	mov	r20, r24
     a26:	5b 2f       	mov	r21, r27
     a28:	6f 2f       	mov	r22, r31
     a2a:	7e 2f       	mov	r23, r30
     a2c:	87 2d       	mov	r24, r7
     a2e:	98 2d       	mov	r25, r8
     a30:	a1 e0       	ldi	r26, 0x01	; 1
     a32:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__adddi3_s8>
     a36:	92 2e       	mov	r9, r18
     a38:	3d 83       	std	Y+5, r19	; 0x05
     a3a:	4c 83       	std	Y+4, r20	; 0x04
     a3c:	b5 2f       	mov	r27, r21
     a3e:	f6 2f       	mov	r31, r22
     a40:	e7 2f       	mov	r30, r23
     a42:	78 2e       	mov	r7, r24
     a44:	89 2e       	mov	r8, r25
     a46:	29 2d       	mov	r18, r9
     a48:	3d 81       	ldd	r19, Y+5	; 0x05
     a4a:	4c 81       	ldd	r20, Y+4	; 0x04
     a4c:	5b 2f       	mov	r21, r27
     a4e:	6f 2f       	mov	r22, r31
     a50:	7e 2f       	mov	r23, r30
     a52:	87 2d       	mov	r24, r7
     a54:	98 2d       	mov	r25, r8
     a56:	a2 2c       	mov	r10, r2
     a58:	b3 2c       	mov	r11, r3
     a5a:	c4 2c       	mov	r12, r4
     a5c:	d5 2c       	mov	r13, r5
     a5e:	e6 2c       	mov	r14, r6
     a60:	f9 80       	ldd	r15, Y+1	; 0x01
     a62:	0a 81       	ldd	r16, Y+2	; 0x02
     a64:	1b 81       	ldd	r17, Y+3	; 0x03
     a66:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__cmpdi2>
     a6a:	20 f2       	brcs	.-120    	; 0x9f4 <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	9f 90       	pop	r9
     a8c:	8f 90       	pop	r8
     a8e:	7f 90       	pop	r7
     a90:	6f 90       	pop	r6
     a92:	5f 90       	pop	r5
     a94:	4f 90       	pop	r4
     a96:	3f 90       	pop	r3
     a98:	2f 90       	pop	r2
     a9a:	08 95       	ret

00000a9c <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
     a9c:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
     a9e:	89 2b       	or	r24, r25
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <Dio_init+0x8>
     aa2:	e4 c0       	rjmp	.+456    	; 0xc6c <Dio_init+0x1d0>
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	d7 c0       	rjmp	.+430    	; 0xc56 <Dio_init+0x1ba>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
     aa8:	e9 2f       	mov	r30, r25
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	ee 0f       	add	r30, r30
     aae:	ff 1f       	adc	r31, r31
     ab0:	ee 0f       	add	r30, r30
     ab2:	ff 1f       	adc	r31, r31
     ab4:	e4 0f       	add	r30, r20
     ab6:	f5 1f       	adc	r31, r21
     ab8:	31 81       	ldd	r19, Z+1	; 0x01
     aba:	38 30       	cpi	r19, 0x08	; 8
     abc:	08 f0       	brcs	.+2      	; 0xac0 <Dio_init+0x24>
     abe:	d8 c0       	rjmp	.+432    	; 0xc70 <Dio_init+0x1d4>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
     ac0:	20 81       	ld	r18, Z
     ac2:	21 30       	cpi	r18, 0x01	; 1
     ac4:	c1 f1       	breq	.+112    	; 0xb36 <Dio_init+0x9a>
     ac6:	38 f0       	brcs	.+14     	; 0xad6 <Dio_init+0x3a>
     ac8:	22 30       	cpi	r18, 0x02	; 2
     aca:	09 f4       	brne	.+2      	; 0xace <Dio_init+0x32>
     acc:	64 c0       	rjmp	.+200    	; 0xb96 <Dio_init+0xfa>
     ace:	23 30       	cpi	r18, 0x03	; 3
     ad0:	09 f4       	brne	.+2      	; 0xad4 <Dio_init+0x38>
     ad2:	91 c0       	rjmp	.+290    	; 0xbf6 <Dio_init+0x15a>
     ad4:	cf c0       	rjmp	.+414    	; 0xc74 <Dio_init+0x1d8>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     ad6:	2a b3       	in	r18, 0x1a	; 26
     ad8:	61 e0       	ldi	r22, 0x01	; 1
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	db 01       	movw	r26, r22
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <Dio_init+0x48>
     ae0:	aa 0f       	add	r26, r26
     ae2:	bb 1f       	adc	r27, r27
     ae4:	3a 95       	dec	r19
     ae6:	e2 f7       	brpl	.-8      	; 0xae0 <Dio_init+0x44>
     ae8:	8a 2f       	mov	r24, r26
     aea:	80 95       	com	r24
     aec:	82 23       	and	r24, r18
     aee:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     af0:	aa b3       	in	r26, 0x1a	; 26
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	28 2f       	mov	r18, r24
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	01 80       	ldd	r0, Z+1	; 0x01
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <Dio_init+0x64>
     afc:	22 0f       	add	r18, r18
     afe:	33 1f       	adc	r19, r19
     b00:	0a 94       	dec	r0
     b02:	e2 f7       	brpl	.-8      	; 0xafc <Dio_init+0x60>
     b04:	2a 2b       	or	r18, r26
     b06:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     b08:	8b b3       	in	r24, 0x1b	; 27
     b0a:	01 80       	ldd	r0, Z+1	; 0x01
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <Dio_init+0x76>
     b0e:	66 0f       	add	r22, r22
     b10:	77 1f       	adc	r23, r23
     b12:	0a 94       	dec	r0
     b14:	e2 f7       	brpl	.-8      	; 0xb0e <Dio_init+0x72>
     b16:	60 95       	com	r22
     b18:	68 23       	and	r22, r24
     b1a:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     b1c:	6b b3       	in	r22, 0x1b	; 27
     b1e:	83 81       	ldd	r24, Z+3	; 0x03
     b20:	28 2f       	mov	r18, r24
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	01 80       	ldd	r0, Z+1	; 0x01
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <Dio_init+0x90>
     b28:	22 0f       	add	r18, r18
     b2a:	33 1f       	adc	r19, r19
     b2c:	0a 94       	dec	r0
     b2e:	e2 f7       	brpl	.-8      	; 0xb28 <Dio_init+0x8c>
     b30:	26 2b       	or	r18, r22
     b32:	2b bb       	out	0x1b, r18	; 27
				break;
     b34:	8f c0       	rjmp	.+286    	; 0xc54 <Dio_init+0x1b8>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     b36:	27 b3       	in	r18, 0x17	; 23
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	db 01       	movw	r26, r22
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <Dio_init+0xa8>
     b40:	aa 0f       	add	r26, r26
     b42:	bb 1f       	adc	r27, r27
     b44:	3a 95       	dec	r19
     b46:	e2 f7       	brpl	.-8      	; 0xb40 <Dio_init+0xa4>
     b48:	8a 2f       	mov	r24, r26
     b4a:	80 95       	com	r24
     b4c:	82 23       	and	r24, r18
     b4e:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     b50:	a7 b3       	in	r26, 0x17	; 23
     b52:	82 81       	ldd	r24, Z+2	; 0x02
     b54:	28 2f       	mov	r18, r24
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	01 80       	ldd	r0, Z+1	; 0x01
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <Dio_init+0xc4>
     b5c:	22 0f       	add	r18, r18
     b5e:	33 1f       	adc	r19, r19
     b60:	0a 94       	dec	r0
     b62:	e2 f7       	brpl	.-8      	; 0xb5c <Dio_init+0xc0>
     b64:	2a 2b       	or	r18, r26
     b66:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     b68:	88 b3       	in	r24, 0x18	; 24
     b6a:	01 80       	ldd	r0, Z+1	; 0x01
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <Dio_init+0xd6>
     b6e:	66 0f       	add	r22, r22
     b70:	77 1f       	adc	r23, r23
     b72:	0a 94       	dec	r0
     b74:	e2 f7       	brpl	.-8      	; 0xb6e <Dio_init+0xd2>
     b76:	60 95       	com	r22
     b78:	68 23       	and	r22, r24
     b7a:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     b7c:	68 b3       	in	r22, 0x18	; 24
     b7e:	83 81       	ldd	r24, Z+3	; 0x03
     b80:	28 2f       	mov	r18, r24
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	01 80       	ldd	r0, Z+1	; 0x01
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <Dio_init+0xf0>
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	0a 94       	dec	r0
     b8e:	e2 f7       	brpl	.-8      	; 0xb88 <Dio_init+0xec>
     b90:	26 2b       	or	r18, r22
     b92:	28 bb       	out	0x18, r18	; 24
				break;
     b94:	5f c0       	rjmp	.+190    	; 0xc54 <Dio_init+0x1b8>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     b96:	24 b3       	in	r18, 0x14	; 20
     b98:	61 e0       	ldi	r22, 0x01	; 1
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	db 01       	movw	r26, r22
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <Dio_init+0x108>
     ba0:	aa 0f       	add	r26, r26
     ba2:	bb 1f       	adc	r27, r27
     ba4:	3a 95       	dec	r19
     ba6:	e2 f7       	brpl	.-8      	; 0xba0 <Dio_init+0x104>
     ba8:	8a 2f       	mov	r24, r26
     baa:	80 95       	com	r24
     bac:	82 23       	and	r24, r18
     bae:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     bb0:	a4 b3       	in	r26, 0x14	; 20
     bb2:	82 81       	ldd	r24, Z+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	01 80       	ldd	r0, Z+1	; 0x01
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <Dio_init+0x124>
     bbc:	22 0f       	add	r18, r18
     bbe:	33 1f       	adc	r19, r19
     bc0:	0a 94       	dec	r0
     bc2:	e2 f7       	brpl	.-8      	; 0xbbc <Dio_init+0x120>
     bc4:	2a 2b       	or	r18, r26
     bc6:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     bc8:	85 b3       	in	r24, 0x15	; 21
     bca:	01 80       	ldd	r0, Z+1	; 0x01
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <Dio_init+0x136>
     bce:	66 0f       	add	r22, r22
     bd0:	77 1f       	adc	r23, r23
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <Dio_init+0x132>
     bd6:	60 95       	com	r22
     bd8:	68 23       	and	r22, r24
     bda:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     bdc:	65 b3       	in	r22, 0x15	; 21
     bde:	83 81       	ldd	r24, Z+3	; 0x03
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	01 80       	ldd	r0, Z+1	; 0x01
     be6:	02 c0       	rjmp	.+4      	; 0xbec <Dio_init+0x150>
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <Dio_init+0x14c>
     bf0:	26 2b       	or	r18, r22
     bf2:	25 bb       	out	0x15, r18	; 21
				break;
     bf4:	2f c0       	rjmp	.+94     	; 0xc54 <Dio_init+0x1b8>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     bf6:	21 b3       	in	r18, 0x11	; 17
     bf8:	61 e0       	ldi	r22, 0x01	; 1
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	db 01       	movw	r26, r22
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <Dio_init+0x168>
     c00:	aa 0f       	add	r26, r26
     c02:	bb 1f       	adc	r27, r27
     c04:	3a 95       	dec	r19
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <Dio_init+0x164>
     c08:	8a 2f       	mov	r24, r26
     c0a:	80 95       	com	r24
     c0c:	82 23       	and	r24, r18
     c0e:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     c10:	a1 b3       	in	r26, 0x11	; 17
     c12:	82 81       	ldd	r24, Z+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	01 80       	ldd	r0, Z+1	; 0x01
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <Dio_init+0x184>
     c1c:	22 0f       	add	r18, r18
     c1e:	33 1f       	adc	r19, r19
     c20:	0a 94       	dec	r0
     c22:	e2 f7       	brpl	.-8      	; 0xc1c <Dio_init+0x180>
     c24:	2a 2b       	or	r18, r26
     c26:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     c28:	82 b3       	in	r24, 0x12	; 18
     c2a:	01 80       	ldd	r0, Z+1	; 0x01
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <Dio_init+0x196>
     c2e:	66 0f       	add	r22, r22
     c30:	77 1f       	adc	r23, r23
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <Dio_init+0x192>
     c36:	60 95       	com	r22
     c38:	68 23       	and	r22, r24
     c3a:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     c3c:	62 b3       	in	r22, 0x12	; 18
     c3e:	83 81       	ldd	r24, Z+3	; 0x03
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	01 80       	ldd	r0, Z+1	; 0x01
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <Dio_init+0x1b0>
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <Dio_init+0x1ac>
     c50:	26 2b       	or	r18, r22
     c52:	22 bb       	out	0x12, r18	; 18
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
     c54:	9f 5f       	subi	r25, 0xFF	; 255
     c56:	91 31       	cpi	r25, 0x11	; 17
     c58:	08 f4       	brcc	.+2      	; 0xc5c <Dio_init+0x1c0>
     c5a:	26 cf       	rjmp	.-436    	; 0xaa8 <Dio_init+0xc>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
     c5c:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <pstrDio_pinsConfig+0x1>
     c60:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <pstrDio_pinsConfig>
	u8_Dio_Status = DIO_INITIALIZED;
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
     c6a:	08 95       	ret
{
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
     c6c:	85 e0       	ldi	r24, 0x05	; 5
     c6e:	08 95       	ret
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
     c74:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
     c76:	08 95       	ret

00000c78 <Dio_writePin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
     c78:	82 31       	cpi	r24, 0x12	; 18
     c7a:	08 f0       	brcs	.+2      	; 0xc7e <Dio_writePin+0x6>
     c7c:	90 c0       	rjmp	.+288    	; 0xd9e <Dio_writePin+0x126>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
     c7e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <u8_Dio_Status>
     c82:	99 23       	and	r25, r25
     c84:	09 f4       	brne	.+2      	; 0xc88 <Dio_writePin+0x10>
     c86:	8d c0       	rjmp	.+282    	; 0xda2 <Dio_writePin+0x12a>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
     c88:	e8 2f       	mov	r30, r24
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	cf 01       	movw	r24, r30
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <pstrDio_pinsConfig>
     c9a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <pstrDio_pinsConfig+0x1>
     c9e:	e8 0f       	add	r30, r24
     ca0:	f9 1f       	adc	r31, r25
     ca2:	80 81       	ld	r24, Z
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	21 f1       	breq	.+72     	; 0xcf0 <Dio_writePin+0x78>
     ca8:	30 f0       	brcs	.+12     	; 0xcb6 <Dio_writePin+0x3e>
     caa:	82 30       	cpi	r24, 0x02	; 2
     cac:	f1 f1       	breq	.+124    	; 0xd2a <Dio_writePin+0xb2>
     cae:	83 30       	cpi	r24, 0x03	; 3
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <Dio_writePin+0x3c>
     cb2:	58 c0       	rjmp	.+176    	; 0xd64 <Dio_writePin+0xec>
     cb4:	78 c0       	rjmp	.+240    	; 0xda6 <Dio_writePin+0x12e>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
     cb6:	61 30       	cpi	r22, 0x01	; 1
     cb8:	69 f4       	brne	.+26     	; 0xcd4 <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     cba:	2b b3       	in	r18, 0x1b	; 27
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	01 80       	ldd	r0, Z+1	; 0x01
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <Dio_writePin+0x50>
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	0a 94       	dec	r0
     cca:	e2 f7       	brpl	.-8      	; 0xcc4 <Dio_writePin+0x4c>
     ccc:	82 2b       	or	r24, r18
     cce:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     cd4:	2b b3       	in	r18, 0x1b	; 27
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	01 80       	ldd	r0, Z+1	; 0x01
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <Dio_writePin+0x6a>
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	0a 94       	dec	r0
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <Dio_writePin+0x66>
     ce6:	80 95       	com	r24
     ce8:	82 23       	and	r24, r18
     cea:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
     cf0:	61 30       	cpi	r22, 0x01	; 1
     cf2:	69 f4       	brne	.+26     	; 0xd0e <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     cf4:	28 b3       	in	r18, 0x18	; 24
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	01 80       	ldd	r0, Z+1	; 0x01
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <Dio_writePin+0x8a>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <Dio_writePin+0x86>
     d06:	82 2b       	or	r24, r18
     d08:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     d0e:	28 b3       	in	r18, 0x18	; 24
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	01 80       	ldd	r0, Z+1	; 0x01
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <Dio_writePin+0xa4>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <Dio_writePin+0xa0>
     d20:	80 95       	com	r24
     d22:	82 23       	and	r24, r18
     d24:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
     d2a:	61 30       	cpi	r22, 0x01	; 1
     d2c:	69 f4       	brne	.+26     	; 0xd48 <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     d2e:	25 b3       	in	r18, 0x15	; 21
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	01 80       	ldd	r0, Z+1	; 0x01
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <Dio_writePin+0xc4>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <Dio_writePin+0xc0>
     d40:	82 2b       	or	r24, r18
     d42:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     d48:	25 b3       	in	r18, 0x15	; 21
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	01 80       	ldd	r0, Z+1	; 0x01
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <Dio_writePin+0xde>
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	0a 94       	dec	r0
     d58:	e2 f7       	brpl	.-8      	; 0xd52 <Dio_writePin+0xda>
     d5a:	80 95       	com	r24
     d5c:	82 23       	and	r24, r18
     d5e:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
     d64:	61 30       	cpi	r22, 0x01	; 1
     d66:	69 f4       	brne	.+26     	; 0xd82 <Dio_writePin+0x10a>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     d68:	22 b3       	in	r18, 0x12	; 18
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	01 80       	ldd	r0, Z+1	; 0x01
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <Dio_writePin+0xfe>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	0a 94       	dec	r0
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <Dio_writePin+0xfa>
     d7a:	82 2b       	or	r24, r18
     d7c:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     d82:	22 b3       	in	r18, 0x12	; 18
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	01 80       	ldd	r0, Z+1	; 0x01
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <Dio_writePin+0x118>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <Dio_writePin+0x114>
     d94:	80 95       	com	r24
     d96:	82 23       	and	r24, r18
     d98:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	08 95       	ret
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
     da2:	86 e0       	ldi	r24, 0x06	; 6
     da4:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
     da6:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
     da8:	08 95       	ret

00000daa <Dio_togglePin>:
* Description: Function to Toggle data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
     daa:	82 31       	cpi	r24, 0x12	; 18
     dac:	08 f0       	brcs	.+2      	; 0xdb0 <Dio_togglePin+0x6>
     dae:	4f c0       	rjmp	.+158    	; 0xe4e <Dio_togglePin+0xa4>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
     db0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <u8_Dio_Status>
     db4:	99 23       	and	r25, r25
     db6:	09 f4       	brne	.+2      	; 0xdba <Dio_togglePin+0x10>
     db8:	4c c0       	rjmp	.+152    	; 0xe52 <Dio_togglePin+0xa8>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
     dba:	e8 2f       	mov	r30, r24
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	cf 01       	movw	r24, r30
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <pstrDio_pinsConfig>
     dcc:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <pstrDio_pinsConfig+0x1>
     dd0:	e8 0f       	add	r30, r24
     dd2:	f9 1f       	adc	r31, r25
     dd4:	80 81       	ld	r24, Z
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	99 f0       	breq	.+38     	; 0xe00 <Dio_togglePin+0x56>
     dda:	28 f0       	brcs	.+10     	; 0xde6 <Dio_togglePin+0x3c>
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	e9 f0       	breq	.+58     	; 0xe1a <Dio_togglePin+0x70>
     de0:	83 30       	cpi	r24, 0x03	; 3
     de2:	41 f1       	breq	.+80     	; 0xe34 <Dio_togglePin+0x8a>
     de4:	38 c0       	rjmp	.+112    	; 0xe56 <Dio_togglePin+0xac>
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     de6:	2b b3       	in	r18, 0x1b	; 27
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	01 80       	ldd	r0, Z+1	; 0x01
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <Dio_togglePin+0x4a>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <Dio_togglePin+0x46>
     df8:	82 27       	eor	r24, r18
     dfa:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     dfe:	08 95       	ret
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     e00:	28 b3       	in	r18, 0x18	; 24
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	01 80       	ldd	r0, Z+1	; 0x01
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <Dio_togglePin+0x64>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <Dio_togglePin+0x60>
     e12:	82 27       	eor	r24, r18
     e14:	88 bb       	out	0x18, r24	; 24
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     e16:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     e18:	08 95       	ret
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     e1a:	25 b3       	in	r18, 0x15	; 21
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	01 80       	ldd	r0, Z+1	; 0x01
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <Dio_togglePin+0x7e>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <Dio_togglePin+0x7a>
     e2c:	82 27       	eor	r24, r18
     e2e:	85 bb       	out	0x15, r24	; 21
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     e30:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     e32:	08 95       	ret
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     e34:	22 b3       	in	r18, 0x12	; 18
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	01 80       	ldd	r0, Z+1	; 0x01
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <Dio_togglePin+0x98>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <Dio_togglePin+0x94>
     e46:	82 27       	eor	r24, r18
     e48:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     e4c:	08 95       	ret
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
     e52:	86 e0       	ldi	r24, 0x06	; 6
     e54:	08 95       	ret
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
     e56:	84 e0       	ldi	r24, 0x04	; 4
	}	
	return DIO_STATUS_ERROR_OK;
}
     e58:	08 95       	ret

00000e5a <Dio_readPin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
     e5a:	82 31       	cpi	r24, 0x12	; 18
     e5c:	08 f0       	brcs	.+2      	; 0xe60 <Dio_readPin+0x6>
     e5e:	7c c0       	rjmp	.+248    	; 0xf58 <Dio_readPin+0xfe>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
     e60:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <u8_Dio_Status>
     e64:	99 23       	and	r25, r25
     e66:	09 f4       	brne	.+2      	; 0xe6a <Dio_readPin+0x10>
     e68:	79 c0       	rjmp	.+242    	; 0xf5c <Dio_readPin+0x102>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
     e6a:	e8 2f       	mov	r30, r24
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	cf 01       	movw	r24, r30
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <pstrDio_pinsConfig>
     e7c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <pstrDio_pinsConfig+0x1>
     e80:	e8 0f       	add	r30, r24
     e82:	f9 1f       	adc	r31, r25
     e84:	80 81       	ld	r24, Z
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	f9 f0       	breq	.+62     	; 0xec8 <Dio_readPin+0x6e>
     e8a:	30 f0       	brcs	.+12     	; 0xe98 <Dio_readPin+0x3e>
     e8c:	82 30       	cpi	r24, 0x02	; 2
     e8e:	a1 f1       	breq	.+104    	; 0xef8 <Dio_readPin+0x9e>
     e90:	83 30       	cpi	r24, 0x03	; 3
     e92:	09 f4       	brne	.+2      	; 0xe96 <Dio_readPin+0x3c>
     e94:	49 c0       	rjmp	.+146    	; 0xf28 <Dio_readPin+0xce>
     e96:	64 c0       	rjmp	.+200    	; 0xf60 <Dio_readPin+0x106>
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     e98:	49 b3       	in	r20, 0x19	; 25
     e9a:	51 81       	ldd	r21, Z+1	; 0x01
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	9c 01       	movw	r18, r24
     ea2:	05 2e       	mov	r0, r21
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <Dio_readPin+0x50>
     ea6:	22 0f       	add	r18, r18
     ea8:	33 1f       	adc	r19, r19
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <Dio_readPin+0x4c>
     eae:	84 2f       	mov	r24, r20
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	82 23       	and	r24, r18
     eb4:	93 23       	and	r25, r19
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <Dio_readPin+0x62>
     eb8:	95 95       	asr	r25
     eba:	87 95       	ror	r24
     ebc:	5a 95       	dec	r21
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <Dio_readPin+0x5e>
     ec0:	fb 01       	movw	r30, r22
     ec2:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     ec4:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     ec6:	08 95       	ret
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     ec8:	46 b3       	in	r20, 0x16	; 22
     eca:	51 81       	ldd	r21, Z+1	; 0x01
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9c 01       	movw	r18, r24
     ed2:	05 2e       	mov	r0, r21
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <Dio_readPin+0x80>
     ed6:	22 0f       	add	r18, r18
     ed8:	33 1f       	adc	r19, r19
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <Dio_readPin+0x7c>
     ede:	84 2f       	mov	r24, r20
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	82 23       	and	r24, r18
     ee4:	93 23       	and	r25, r19
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <Dio_readPin+0x92>
     ee8:	95 95       	asr	r25
     eea:	87 95       	ror	r24
     eec:	5a 95       	dec	r21
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <Dio_readPin+0x8e>
     ef0:	fb 01       	movw	r30, r22
     ef2:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     ef6:	08 95       	ret
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     ef8:	43 b3       	in	r20, 0x13	; 19
     efa:	51 81       	ldd	r21, Z+1	; 0x01
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	9c 01       	movw	r18, r24
     f02:	05 2e       	mov	r0, r21
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <Dio_readPin+0xb0>
     f06:	22 0f       	add	r18, r18
     f08:	33 1f       	adc	r19, r19
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <Dio_readPin+0xac>
     f0e:	84 2f       	mov	r24, r20
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	82 23       	and	r24, r18
     f14:	93 23       	and	r25, r19
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <Dio_readPin+0xc2>
     f18:	95 95       	asr	r25
     f1a:	87 95       	ror	r24
     f1c:	5a 95       	dec	r21
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <Dio_readPin+0xbe>
     f20:	fb 01       	movw	r30, r22
     f22:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     f24:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     f26:	08 95       	ret
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     f28:	40 b3       	in	r20, 0x10	; 16
     f2a:	51 81       	ldd	r21, Z+1	; 0x01
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9c 01       	movw	r18, r24
     f32:	05 2e       	mov	r0, r21
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <Dio_readPin+0xe0>
     f36:	22 0f       	add	r18, r18
     f38:	33 1f       	adc	r19, r19
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <Dio_readPin+0xdc>
     f3e:	84 2f       	mov	r24, r20
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	82 23       	and	r24, r18
     f44:	93 23       	and	r25, r19
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <Dio_readPin+0xf2>
     f48:	95 95       	asr	r25
     f4a:	87 95       	ror	r24
     f4c:	5a 95       	dec	r21
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <Dio_readPin+0xee>
     f50:	fb 01       	movw	r30, r22
     f52:	80 83       	st	Z, r24
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     f54:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     f56:	08 95       	ret
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
     f5c:	86 e0       	ldi	r24, 0x06	; 6
     f5e:	08 95       	ret
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
     f60:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
     f62:	08 95       	ret

00000f64 <Gpt_ISRHandler>:
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_EXPIRED;
	return GPT_STATUS_ERROR_OK;
}
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e c0       	rjmp	.+28     	; 0xf84 <Gpt_ISRHandler+0x20>
     f68:	29 2f       	mov	r18, r25
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	f9 01       	movw	r30, r18
     f6e:	ee 0f       	add	r30, r30
     f70:	ff 1f       	adc	r31, r31
     f72:	2e 0f       	add	r18, r30
     f74:	3f 1f       	adc	r19, r31
     f76:	f9 01       	movw	r30, r18
     f78:	e0 51       	subi	r30, 0x10	; 16
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	20 81       	ld	r18, Z
     f7e:	28 17       	cp	r18, r24
     f80:	19 f0       	breq	.+6      	; 0xf88 <Gpt_ISRHandler+0x24>
     f82:	9f 5f       	subi	r25, 0xFF	; 255
     f84:	99 23       	and	r25, r25
     f86:	81 f3       	breq	.-32     	; 0xf68 <Gpt_ISRHandler+0x4>
     f88:	89 2f       	mov	r24, r25
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	fc 01       	movw	r30, r24
     f8e:	ee 0f       	add	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	ee 0f       	add	r30, r30
     f94:	ff 1f       	adc	r31, r31
     f96:	e7 5f       	subi	r30, 0xF7	; 247
     f98:	fe 4f       	sbci	r31, 0xFE	; 254
     f9a:	40 81       	ld	r20, Z
     f9c:	51 81       	ldd	r21, Z+1	; 0x01
     f9e:	62 81       	ldd	r22, Z+2	; 0x02
     fa0:	73 81       	ldd	r23, Z+3	; 0x03
     fa2:	41 15       	cp	r20, r1
     fa4:	51 05       	cpc	r21, r1
     fa6:	61 05       	cpc	r22, r1
     fa8:	71 05       	cpc	r23, r1
     faa:	81 f0       	breq	.+32     	; 0xfcc <Gpt_ISRHandler+0x68>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	fc 01       	movw	r30, r24
     fb6:	e7 5f       	subi	r30, 0xF7	; 247
     fb8:	fe 4f       	sbci	r31, 0xFE	; 254
     fba:	41 50       	subi	r20, 0x01	; 1
     fbc:	51 09       	sbc	r21, r1
     fbe:	61 09       	sbc	r22, r1
     fc0:	71 09       	sbc	r23, r1
     fc2:	40 83       	st	Z, r20
     fc4:	51 83       	std	Z+1, r21	; 0x01
     fc6:	62 83       	std	Z+2, r22	; 0x02
     fc8:	73 83       	std	Z+3, r23	; 0x03
     fca:	08 95       	ret
     fcc:	23 b7       	in	r18, 0x33	; 51
     fce:	2e 7f       	andi	r18, 0xFE	; 254
     fd0:	23 bf       	out	0x33, r18	; 51
     fd2:	23 b7       	in	r18, 0x33	; 51
     fd4:	2d 7f       	andi	r18, 0xFD	; 253
     fd6:	23 bf       	out	0x33, r18	; 51
     fd8:	23 b7       	in	r18, 0x33	; 51
     fda:	2b 7f       	andi	r18, 0xFB	; 251
     fdc:	23 bf       	out	0x33, r18	; 51
     fde:	29 b7       	in	r18, 0x39	; 57
     fe0:	2e 7f       	andi	r18, 0xFE	; 254
     fe2:	29 bf       	out	0x39, r18	; 57
     fe4:	fc 01       	movw	r30, r24
     fe6:	e3 5f       	subi	r30, 0xF3	; 243
     fe8:	fe 4f       	sbci	r31, 0xFE	; 254
     fea:	24 e0       	ldi	r18, 0x04	; 4
     fec:	20 83       	st	Z, r18
     fee:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <Gpt_Timer0_CallBackPtr>
     ff2:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <Gpt_Timer0_CallBackPtr+0x1>
     ff6:	09 95       	icall
     ff8:	08 95       	ret

00000ffa <GptInit>:
     ffa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <genu_GPTModStatus>
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	61 f1       	breq	.+88     	; 0x105a <GptInit+0x60>
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	24 c0       	rjmp	.+72     	; 0x104e <GptInit+0x54>
    1006:	82 2f       	mov	r24, r18
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	fc 01       	movw	r30, r24
    100c:	ee 0f       	add	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	e8 0f       	add	r30, r24
    1012:	f9 1f       	adc	r31, r25
    1014:	e0 51       	subi	r30, 0x10	; 16
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	30 81       	ld	r19, Z
    101a:	33 23       	and	r19, r19
    101c:	19 f0       	breq	.+6      	; 0x1024 <GptInit+0x2a>
    101e:	33 30       	cpi	r19, 0x03	; 3
    1020:	f0 f4       	brcc	.+60     	; 0x105e <GptInit+0x64>
    1022:	0f c0       	rjmp	.+30     	; 0x1042 <GptInit+0x48>
    1024:	fc 01       	movw	r30, r24
    1026:	ee 0f       	add	r30, r30
    1028:	ff 1f       	adc	r31, r31
    102a:	e8 0f       	add	r30, r24
    102c:	f9 1f       	adc	r31, r25
    102e:	e0 51       	subi	r30, 0x10	; 16
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	32 81       	ldd	r19, Z+2	; 0x02
    1034:	31 11       	cpse	r19, r1
    1036:	05 c0       	rjmp	.+10     	; 0x1042 <GptInit+0x48>
    1038:	13 be       	out	0x33, r1	; 51
    103a:	39 b7       	in	r19, 0x39	; 57
    103c:	3c 7f       	andi	r19, 0xFC	; 252
    103e:	39 bf       	out	0x39, r19	; 57
    1040:	12 be       	out	0x32, r1	; 50
    1042:	fc 01       	movw	r30, r24
    1044:	e3 5f       	subi	r30, 0xF3	; 243
    1046:	fe 4f       	sbci	r31, 0xFE	; 254
    1048:	31 e0       	ldi	r19, 0x01	; 1
    104a:	30 83       	st	Z, r19
    104c:	2f 5f       	subi	r18, 0xFF	; 255
    104e:	22 23       	and	r18, r18
    1050:	d1 f2       	breq	.-76     	; 0x1006 <GptInit+0xc>
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <genu_GPTModStatus>
    1058:	08 95       	ret
    105a:	83 e0       	ldi	r24, 0x03	; 3
    105c:	08 95       	ret
    105e:	85 e0       	ldi	r24, 0x05	; 5
    1060:	08 95       	ret

00001062 <GptStart_aSync>:
* Return value: enuGpt_Status_t - Returns the status of the function (if there is any error)
* Description: Function to Start the Timer module counting from 0x00 until (u16_Ticks)
               and generate interrupt when OVF.
************************************************************************************/
enuGpt_Status_t GptStart_aSync(u8Gpt_Channel_t ChannelId, u32Gpt_Value_t u16_Ticks, pfGpt_CallBack_t CallBack)
{
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	89 01       	movw	r16, r18
	
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    106c:	81 11       	cpse	r24, r1
    106e:	4a c0       	rjmp	.+148    	; 0x1104 <GptStart_aSync+0xa2>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    1070:	c8 2f       	mov	r28, r24
    1072:	d0 e0       	ldi	r29, 0x00	; 0
    1074:	fe 01       	movw	r30, r28
    1076:	e3 5f       	subi	r30, 0xF3	; 243
    1078:	fe 4f       	sbci	r31, 0xFE	; 254
    107a:	80 81       	ld	r24, Z
    107c:	88 23       	and	r24, r24
    107e:	09 f4       	brne	.+2      	; 0x1082 <GptStart_aSync+0x20>
    1080:	43 c0       	rjmp	.+134    	; 0x1108 <GptStart_aSync+0xa6>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
    1082:	82 30       	cpi	r24, 0x02	; 2
    1084:	09 f4       	brne	.+2      	; 0x1088 <GptStart_aSync+0x26>
    1086:	42 c0       	rjmp	.+132    	; 0x110c <GptStart_aSync+0xaa>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u16_remainderCount=0;
	
	enuChannelsState[ChannelId] = GPT_RUNNING;
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	fe 01       	movw	r30, r28
    108c:	e3 5f       	subi	r30, 0xF3	; 243
    108e:	fe 4f       	sbci	r31, 0xFE	; 254
    1090:	80 83       	st	Z, r24
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    1092:	fe 01       	movw	r30, r28
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	ec 0f       	add	r30, r28
    109a:	fd 1f       	adc	r31, r29
    109c:	e0 51       	subi	r30, 0x10	; 16
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	80 81       	ld	r24, Z
    10a2:	88 23       	and	r24, r24
    10a4:	21 f0       	breq	.+8      	; 0x10ae <GptStart_aSync+0x4c>
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	98 f1       	brcs	.+102    	; 0x1110 <GptStart_aSync+0xae>
		case GPT_TIMER_2: /* In case of Timer 2 */
			break;
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    10aa:	85 e0       	ldi	r24, 0x05	; 5
    10ac:	34 c0       	rjmp	.+104    	; 0x1116 <GptStart_aSync+0xb4>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Get Number of loops to overflow the timer counter */
			u32_Channels_ISR_Count[ChannelId] = u16_Ticks / GPT_MAX_VALUE_8BIT; //0xFF
    10ae:	cb 01       	movw	r24, r22
    10b0:	ba 01       	movw	r22, r20
    10b2:	2f ef       	ldi	r18, 0xFF	; 255
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__udivmodsi4>
    10be:	fe 01       	movw	r30, r28
    10c0:	ee 0f       	add	r30, r30
    10c2:	ff 1f       	adc	r31, r31
    10c4:	ee 0f       	add	r30, r30
    10c6:	ff 1f       	adc	r31, r31
    10c8:	e7 5f       	subi	r30, 0xF7	; 247
    10ca:	fe 4f       	sbci	r31, 0xFE	; 254
    10cc:	20 83       	st	Z, r18
    10ce:	31 83       	std	Z+1, r19	; 0x01
    10d0:	42 83       	std	Z+2, r20	; 0x02
    10d2:	53 83       	std	Z+3, r21	; 0x03
			/* Get Number of extra ticks (remainder) */
			u16_remainderCount = u16_Ticks % GPT_MAX_VALUE_8BIT;
    10d4:	26 2f       	mov	r18, r22
    10d6:	37 2f       	mov	r19, r23
			/* Set the interrupt enable */
			REG_SET_BIT(GPT_TIMSK_REG, GPT_TIMSK_TOIE0);
    10d8:	89 b7       	in	r24, 0x39	; 57
    10da:	81 60       	ori	r24, 0x01	; 1
    10dc:	89 bf       	out	0x39, r24	; 57
			/* Set the callback function pointer */
			Gpt_Timer0_CallBackPtr=CallBack;
    10de:	10 93 0f 01 	sts	0x010F, r17	; 0x80010f <Gpt_Timer0_CallBackPtr+0x1>
    10e2:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <Gpt_Timer0_CallBackPtr>
			/* Start the clock with the given pre scaler */
			GPT_TCCR0_REG = (Timers_Configurations[ChannelId].enuClock_Src) << GPT_TCCR0_CS00;
    10e6:	ce 01       	movw	r24, r28
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	c8 0f       	add	r28, r24
    10ee:	d9 1f       	adc	r29, r25
    10f0:	c0 51       	subi	r28, 0x10	; 16
    10f2:	df 4f       	sbci	r29, 0xFF	; 255
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	83 bf       	out	0x33, r24	; 51
			/* Run the remainder ticks */
			/* Put the value of the 0xFF - remainderTicks to start count from it */
			if(u16_remainderCount != 0)
    10f8:	23 2b       	or	r18, r19
    10fa:	61 f0       	breq	.+24     	; 0x1114 <GptStart_aSync+0xb2>
			{
				GPT_TCNT0_REG = 256 - u16_remainderCount;
    10fc:	61 95       	neg	r22
    10fe:	62 bf       	out	0x32, r22	; 50
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	09 c0       	rjmp	.+18     	; 0x1116 <GptStart_aSync+0xb4>
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    1104:	86 e0       	ldi	r24, 0x06	; 6
    1106:	07 c0       	rjmp	.+14     	; 0x1116 <GptStart_aSync+0xb4>
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    1108:	82 e0       	ldi	r24, 0x02	; 2
    110a:	05 c0       	rjmp	.+10     	; 0x1116 <GptStart_aSync+0xb4>
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_BUSY;
    110c:	87 e0       	ldi	r24, 0x07	; 7
    110e:	03 c0       	rjmp	.+6      	; 0x1116 <GptStart_aSync+0xb4>
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <GptStart_aSync+0xb4>
    1114:	81 e0       	ldi	r24, 0x01	; 1
}
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	08 95       	ret

00001120 <GptStop>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    1120:	81 11       	cpse	r24, r1
    1122:	23 c0       	rjmp	.+70     	; 0x116a <GptStop+0x4a>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	fc 01       	movw	r30, r24
    1128:	e3 5f       	subi	r30, 0xF3	; 243
    112a:	fe 4f       	sbci	r31, 0xFE	; 254
    112c:	20 81       	ld	r18, Z
    112e:	22 23       	and	r18, r18
    1130:	f1 f0       	breq	.+60     	; 0x116e <GptStop+0x4e>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
    1132:	22 30       	cpi	r18, 0x02	; 2
    1134:	f1 f4       	brne	.+60     	; 0x1172 <GptStop+0x52>

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    1136:	fc 01       	movw	r30, r24
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	e8 0f       	add	r30, r24
    113e:	f9 1f       	adc	r31, r25
    1140:	e0 51       	subi	r30, 0x10	; 16
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	20 81       	ld	r18, Z
    1146:	22 23       	and	r18, r18
    1148:	19 f0       	breq	.+6      	; 0x1150 <GptStop+0x30>
    114a:	23 30       	cpi	r18, 0x03	; 3
    114c:	a0 f4       	brcc	.+40     	; 0x1176 <GptStop+0x56>
    114e:	06 c0       	rjmp	.+12     	; 0x115c <GptStop+0x3c>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Stop the clock from the timer */
			GPT_TCCR0_REG &= ~(7 << GPT_TCCR0_CS00);
    1150:	23 b7       	in	r18, 0x33	; 51
    1152:	28 7f       	andi	r18, 0xF8	; 248
    1154:	23 bf       	out	0x33, r18	; 51
			GPT_TIMSK_REG &= ~(3 << GPT_TIMSK_TOIE0);
    1156:	29 b7       	in	r18, 0x39	; 57
    1158:	2c 7f       	andi	r18, 0xFC	; 252
    115a:	29 bf       	out	0x39, r18	; 57
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
    115c:	fc 01       	movw	r30, r24
    115e:	e3 5f       	subi	r30, 0xF3	; 243
    1160:	fe 4f       	sbci	r31, 0xFE	; 254
    1162:	23 e0       	ldi	r18, 0x03	; 3
    1164:	20 83       	st	Z, r18
	return GPT_STATUS_ERROR_OK;
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    116a:	86 e0       	ldi	r24, 0x06	; 6
    116c:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_STOPPED;
    1172:	88 e0       	ldi	r24, 0x08	; 8
    1174:	08 95       	ret
		case GPT_TIMER_2: /* In case of Timer 2 */
		break;
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    1176:	85 e0       	ldi	r24, 0x05	; 5
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
    1178:	08 95       	ret

0000117a <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    117a:	1f 92       	push	r1
    117c:	0f 92       	push	r0
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	0f 92       	push	r0
    1182:	11 24       	eor	r1, r1
    1184:	2f 93       	push	r18
    1186:	3f 93       	push	r19
    1188:	4f 93       	push	r20
    118a:	5f 93       	push	r21
    118c:	6f 93       	push	r22
    118e:	7f 93       	push	r23
    1190:	8f 93       	push	r24
    1192:	9f 93       	push	r25
    1194:	af 93       	push	r26
    1196:	bf 93       	push	r27
    1198:	ef 93       	push	r30
    119a:	ff 93       	push	r31
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	0e 94 b2 07 	call	0xf64	; 0xf64 <Gpt_ISRHandler>
    11a2:	ff 91       	pop	r31
    11a4:	ef 91       	pop	r30
    11a6:	bf 91       	pop	r27
    11a8:	af 91       	pop	r26
    11aa:	9f 91       	pop	r25
    11ac:	8f 91       	pop	r24
    11ae:	7f 91       	pop	r23
    11b0:	6f 91       	pop	r22
    11b2:	5f 91       	pop	r21
    11b4:	4f 91       	pop	r20
    11b6:	3f 91       	pop	r19
    11b8:	2f 91       	pop	r18
    11ba:	0f 90       	pop	r0
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	0f 90       	pop	r0
    11c0:	1f 90       	pop	r1
    11c2:	18 95       	reti

000011c4 <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    11c4:	1f 92       	push	r1
    11c6:	0f 92       	push	r0
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	0f 92       	push	r0
    11cc:	11 24       	eor	r1, r1
    11ce:	2f 93       	push	r18
    11d0:	3f 93       	push	r19
    11d2:	4f 93       	push	r20
    11d4:	5f 93       	push	r21
    11d6:	6f 93       	push	r22
    11d8:	7f 93       	push	r23
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
    11de:	af 93       	push	r26
    11e0:	bf 93       	push	r27
    11e2:	ef 93       	push	r30
    11e4:	ff 93       	push	r31
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	0e 94 b2 07 	call	0xf64	; 0xf64 <Gpt_ISRHandler>
    11ec:	ff 91       	pop	r31
    11ee:	ef 91       	pop	r30
    11f0:	bf 91       	pop	r27
    11f2:	af 91       	pop	r26
    11f4:	9f 91       	pop	r25
    11f6:	8f 91       	pop	r24
    11f8:	7f 91       	pop	r23
    11fa:	6f 91       	pop	r22
    11fc:	5f 91       	pop	r21
    11fe:	4f 91       	pop	r20
    1200:	3f 91       	pop	r19
    1202:	2f 91       	pop	r18
    1204:	0f 90       	pop	r0
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	0f 90       	pop	r0
    120a:	1f 90       	pop	r1
    120c:	18 95       	reti

0000120e <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    120e:	1f 92       	push	r1
    1210:	0f 92       	push	r0
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	0f 92       	push	r0
    1216:	11 24       	eor	r1, r1
    1218:	2f 93       	push	r18
    121a:	3f 93       	push	r19
    121c:	4f 93       	push	r20
    121e:	5f 93       	push	r21
    1220:	6f 93       	push	r22
    1222:	7f 93       	push	r23
    1224:	8f 93       	push	r24
    1226:	9f 93       	push	r25
    1228:	af 93       	push	r26
    122a:	bf 93       	push	r27
    122c:	ef 93       	push	r30
    122e:	ff 93       	push	r31
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	0e 94 b2 07 	call	0xf64	; 0xf64 <Gpt_ISRHandler>
    1236:	ff 91       	pop	r31
    1238:	ef 91       	pop	r30
    123a:	bf 91       	pop	r27
    123c:	af 91       	pop	r26
    123e:	9f 91       	pop	r25
    1240:	8f 91       	pop	r24
    1242:	7f 91       	pop	r23
    1244:	6f 91       	pop	r22
    1246:	5f 91       	pop	r21
    1248:	4f 91       	pop	r20
    124a:	3f 91       	pop	r19
    124c:	2f 91       	pop	r18
    124e:	0f 90       	pop	r0
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	0f 90       	pop	r0
    1254:	1f 90       	pop	r1
    1256:	18 95       	reti

00001258 <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    1258:	1f 92       	push	r1
    125a:	0f 92       	push	r0
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	0f 92       	push	r0
    1260:	11 24       	eor	r1, r1
    1262:	2f 93       	push	r18
    1264:	3f 93       	push	r19
    1266:	4f 93       	push	r20
    1268:	5f 93       	push	r21
    126a:	6f 93       	push	r22
    126c:	7f 93       	push	r23
    126e:	8f 93       	push	r24
    1270:	9f 93       	push	r25
    1272:	af 93       	push	r26
    1274:	bf 93       	push	r27
    1276:	ef 93       	push	r30
    1278:	ff 93       	push	r31
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	0e 94 b2 07 	call	0xf64	; 0xf64 <Gpt_ISRHandler>
    1280:	ff 91       	pop	r31
    1282:	ef 91       	pop	r30
    1284:	bf 91       	pop	r27
    1286:	af 91       	pop	r26
    1288:	9f 91       	pop	r25
    128a:	8f 91       	pop	r24
    128c:	7f 91       	pop	r23
    128e:	6f 91       	pop	r22
    1290:	5f 91       	pop	r21
    1292:	4f 91       	pop	r20
    1294:	3f 91       	pop	r19
    1296:	2f 91       	pop	r18
    1298:	0f 90       	pop	r0
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	0f 90       	pop	r0
    129e:	1f 90       	pop	r1
    12a0:	18 95       	reti

000012a2 <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    12a2:	1f 92       	push	r1
    12a4:	0f 92       	push	r0
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	0f 92       	push	r0
    12aa:	11 24       	eor	r1, r1
    12ac:	2f 93       	push	r18
    12ae:	3f 93       	push	r19
    12b0:	4f 93       	push	r20
    12b2:	5f 93       	push	r21
    12b4:	6f 93       	push	r22
    12b6:	7f 93       	push	r23
    12b8:	8f 93       	push	r24
    12ba:	9f 93       	push	r25
    12bc:	af 93       	push	r26
    12be:	bf 93       	push	r27
    12c0:	ef 93       	push	r30
    12c2:	ff 93       	push	r31
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	0e 94 b2 07 	call	0xf64	; 0xf64 <Gpt_ISRHandler>
    12ca:	ff 91       	pop	r31
    12cc:	ef 91       	pop	r30
    12ce:	bf 91       	pop	r27
    12d0:	af 91       	pop	r26
    12d2:	9f 91       	pop	r25
    12d4:	8f 91       	pop	r24
    12d6:	7f 91       	pop	r23
    12d8:	6f 91       	pop	r22
    12da:	5f 91       	pop	r21
    12dc:	4f 91       	pop	r20
    12de:	3f 91       	pop	r19
    12e0:	2f 91       	pop	r18
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	1f 90       	pop	r1
    12ea:	18 95       	reti

000012ec <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    12ec:	1f 92       	push	r1
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	0f 92       	push	r0
    12f4:	11 24       	eor	r1, r1
    12f6:	2f 93       	push	r18
    12f8:	3f 93       	push	r19
    12fa:	4f 93       	push	r20
    12fc:	5f 93       	push	r21
    12fe:	6f 93       	push	r22
    1300:	7f 93       	push	r23
    1302:	8f 93       	push	r24
    1304:	9f 93       	push	r25
    1306:	af 93       	push	r26
    1308:	bf 93       	push	r27
    130a:	ef 93       	push	r30
    130c:	ff 93       	push	r31
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	0e 94 b2 07 	call	0xf64	; 0xf64 <Gpt_ISRHandler>
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    1336:	1f 92       	push	r1
    1338:	0f 92       	push	r0
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	0f 92       	push	r0
    133e:	11 24       	eor	r1, r1
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	6f 93       	push	r22
    134a:	7f 93       	push	r23
    134c:	8f 93       	push	r24
    134e:	9f 93       	push	r25
    1350:	af 93       	push	r26
    1352:	bf 93       	push	r27
    1354:	ef 93       	push	r30
    1356:	ff 93       	push	r31
    1358:	82 e0       	ldi	r24, 0x02	; 2
    135a:	0e 94 b2 07 	call	0xf64	; 0xf64 <Gpt_ISRHandler>
    135e:	ff 91       	pop	r31
    1360:	ef 91       	pop	r30
    1362:	bf 91       	pop	r27
    1364:	af 91       	pop	r26
    1366:	9f 91       	pop	r25
    1368:	8f 91       	pop	r24
    136a:	7f 91       	pop	r23
    136c:	6f 91       	pop	r22
    136e:	5f 91       	pop	r21
    1370:	4f 91       	pop	r20
    1372:	3f 91       	pop	r19
    1374:	2f 91       	pop	r18
    1376:	0f 90       	pop	r0
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	0f 90       	pop	r0
    137c:	1f 90       	pop	r1
    137e:	18 95       	reti

00001380 <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    1380:	1f 92       	push	r1
    1382:	0f 92       	push	r0
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	0f 92       	push	r0
    1388:	11 24       	eor	r1, r1
    138a:	2f 93       	push	r18
    138c:	3f 93       	push	r19
    138e:	4f 93       	push	r20
    1390:	5f 93       	push	r21
    1392:	6f 93       	push	r22
    1394:	7f 93       	push	r23
    1396:	8f 93       	push	r24
    1398:	9f 93       	push	r25
    139a:	af 93       	push	r26
    139c:	bf 93       	push	r27
    139e:	ef 93       	push	r30
    13a0:	ff 93       	push	r31
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    13a4:	0e 94 b2 07 	call	0xf64	; 0xf64 <Gpt_ISRHandler>
    13a8:	ff 91       	pop	r31
    13aa:	ef 91       	pop	r30
    13ac:	bf 91       	pop	r27
    13ae:	af 91       	pop	r26
    13b0:	9f 91       	pop	r25
    13b2:	8f 91       	pop	r24
    13b4:	7f 91       	pop	r23
    13b6:	6f 91       	pop	r22
    13b8:	5f 91       	pop	r21
    13ba:	4f 91       	pop	r20
    13bc:	3f 91       	pop	r19
    13be:	2f 91       	pop	r18
    13c0:	0f 90       	pop	r0
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	0f 90       	pop	r0
    13c6:	1f 90       	pop	r1
    13c8:	18 95       	reti

000013ca <stringLength>:
			temp_val = pu8_String[s8_loopIndex] - 87;
			*pu16_Num += temp_val*power(16,u8_powerValue++);
		}

	}
}
    13ca:	ac 01       	movw	r20, r24
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <stringLength+0x8>
    13d0:	8f 5f       	subi	r24, 0xFF	; 255
    13d2:	fa 01       	movw	r30, r20
    13d4:	e8 0f       	add	r30, r24
    13d6:	f1 1d       	adc	r31, r1
    13d8:	20 81       	ld	r18, Z
    13da:	21 11       	cpse	r18, r1
    13dc:	f9 cf       	rjmp	.-14     	; 0x13d0 <stringLength+0x6>
    13de:	8f 5f       	subi	r24, 0xFF	; 255
    13e0:	08 95       	ret

000013e2 <EmptyString>:
    13e2:	ac 01       	movw	r20, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <EmptyString+0xa>
    13e8:	9f 5f       	subi	r25, 0xFF	; 255
    13ea:	10 82       	st	Z, r1
    13ec:	fa 01       	movw	r30, r20
    13ee:	e9 0f       	add	r30, r25
    13f0:	f1 1d       	adc	r31, r1
    13f2:	20 81       	ld	r18, Z
    13f4:	21 11       	cpse	r18, r1
    13f6:	f8 cf       	rjmp	.-16     	; 0x13e8 <EmptyString+0x6>
    13f8:	08 95       	ret

000013fa <stringCopy>:
    13fa:	dc 01       	movw	r26, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <stringCopy+0x10>
    1400:	fb 01       	movw	r30, r22
    1402:	e2 0f       	add	r30, r18
    1404:	f3 1f       	adc	r31, r19
    1406:	40 83       	st	Z, r20
    1408:	9f 5f       	subi	r25, 0xFF	; 255
    140a:	29 2f       	mov	r18, r25
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	fd 01       	movw	r30, r26
    1410:	e2 0f       	add	r30, r18
    1412:	f3 1f       	adc	r31, r19
    1414:	40 81       	ld	r20, Z
    1416:	41 11       	cpse	r20, r1
    1418:	f3 cf       	rjmp	.-26     	; 0x1400 <stringCopy+0x6>
    141a:	08 95       	ret

0000141c <integerToString>:

void integerToString(uint16_t u16_Num, uint8_t *pu8_String, uint8_t u8_base)
{
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	fc 01       	movw	r30, r24
    1426:	8b 01       	movw	r16, r22
	if(u8_base == DEC)
    1428:	41 30       	cpi	r20, 0x01	; 1
    142a:	d1 f5       	brne	.+116    	; 0x14a0 <integerToString+0x84>
	{
		int i=0,n=0;
		n=u16_Num;
		for(i=0;;i++)
    142c:	c0 e0       	ldi	r28, 0x00	; 0
    142e:	d0 e0       	ldi	r29, 0x00	; 0
		{
			n/=10;
    1430:	6a e0       	ldi	r22, 0x0A	; 10
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <__divmodhi4>
    1438:	cb 01       	movw	r24, r22
			if(n==0) break;
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	79 f1       	breq	.+94     	; 0x149c <integerToString+0x80>
{
	if(u8_base == DEC)
	{
		int i=0,n=0;
		n=u16_Num;
		for(i=0;;i++)
    143e:	21 96       	adiw	r28, 0x01	; 1
		{
			n/=10;
			if(n==0) break;
		}
    1440:	f7 cf       	rjmp	.-18     	; 0x1430 <integerToString+0x14>
		while (u16_Num)
		{
			pu8_String[i--] = (u16_Num % 10) + '0';
    1442:	a8 01       	movw	r20, r16
    1444:	4c 0f       	add	r20, r28
    1446:	5d 1f       	adc	r21, r29
    1448:	9f 01       	movw	r18, r30
    144a:	ad ec       	ldi	r26, 0xCD	; 205
    144c:	bc ec       	ldi	r27, 0xCC	; 204
    144e:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__umulhisi3>
    1452:	96 95       	lsr	r25
    1454:	87 95       	ror	r24
    1456:	96 95       	lsr	r25
    1458:	87 95       	ror	r24
    145a:	96 95       	lsr	r25
    145c:	87 95       	ror	r24
    145e:	9c 01       	movw	r18, r24
    1460:	22 0f       	add	r18, r18
    1462:	33 1f       	adc	r19, r19
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	82 0f       	add	r24, r18
    1472:	93 1f       	adc	r25, r19
    1474:	9f 01       	movw	r18, r30
    1476:	28 1b       	sub	r18, r24
    1478:	39 0b       	sbc	r19, r25
    147a:	c9 01       	movw	r24, r18
    147c:	80 5d       	subi	r24, 0xD0	; 208
    147e:	da 01       	movw	r26, r20
    1480:	8c 93       	st	X, r24
			u16_Num /= 10;
    1482:	9f 01       	movw	r18, r30
    1484:	ad ec       	ldi	r26, 0xCD	; 205
    1486:	bc ec       	ldi	r27, 0xCC	; 204
    1488:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__umulhisi3>
    148c:	fc 01       	movw	r30, r24
    148e:	f6 95       	lsr	r31
    1490:	e7 95       	ror	r30
    1492:	f6 95       	lsr	r31
    1494:	e7 95       	ror	r30
    1496:	f6 95       	lsr	r31
    1498:	e7 95       	ror	r30
			n/=10;
			if(n==0) break;
		}
		while (u16_Num)
		{
			pu8_String[i--] = (u16_Num % 10) + '0';
    149a:	21 97       	sbiw	r28, 0x01	; 1
		for(i=0;;i++)
		{
			n/=10;
			if(n==0) break;
		}
		while (u16_Num)
    149c:	30 97       	sbiw	r30, 0x00	; 0
    149e:	89 f6       	brne	.-94     	; 0x1442 <integerToString+0x26>

	}else if(u8_base == HEX)
	{

	}
}
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
    14a6:	0f 91       	pop	r16
    14a8:	08 95       	ret

000014aa <stringToInteger>:
void stringToInteger(uint32_t *pu32_Num, uint8_t *pu8_String)
{
    14aa:	8f 92       	push	r8
    14ac:	9f 92       	push	r9
    14ae:	af 92       	push	r10
    14b0:	bf 92       	push	r11
    14b2:	cf 92       	push	r12
    14b4:	df 92       	push	r13
    14b6:	ef 92       	push	r14
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	ec 01       	movw	r28, r24
    14c4:	8b 01       	movw	r16, r22
	sint8_t s8_loopIndex=0;
	uint8_t length = stringLength(pu8_String);
    14c6:	cb 01       	movw	r24, r22
    14c8:	0e 94 e5 09 	call	0x13ca	; 0x13ca <stringLength>
	*pu32_Num = 0;
    14cc:	18 82       	st	Y, r1
    14ce:	19 82       	std	Y+1, r1	; 0x01
    14d0:	1a 82       	std	Y+2, r1	; 0x02
    14d2:	1b 82       	std	Y+3, r1	; 0x03
	uint32_t digit=1;
	for (s8_loopIndex=length-2; s8_loopIndex>=0; s8_loopIndex--)
    14d4:	ee ef       	ldi	r30, 0xFE	; 254
    14d6:	e8 0f       	add	r30, r24
void stringToInteger(uint32_t *pu32_Num, uint8_t *pu8_String)
{
	sint8_t s8_loopIndex=0;
	uint8_t length = stringLength(pu8_String);
	*pu32_Num = 0;
	uint32_t digit=1;
    14d8:	c1 2c       	mov	r12, r1
    14da:	d1 2c       	mov	r13, r1
    14dc:	76 01       	movw	r14, r12
    14de:	c3 94       	inc	r12
	for (s8_loopIndex=length-2; s8_loopIndex>=0; s8_loopIndex--)
    14e0:	2d c0       	rjmp	.+90     	; 0x153c <stringToInteger+0x92>
	{
		*pu32_Num += (pu8_String[s8_loopIndex]-'0') *digit;
    14e2:	d8 01       	movw	r26, r16
    14e4:	ae 0f       	add	r26, r30
    14e6:	b1 1d       	adc	r27, r1
    14e8:	e7 fd       	sbrc	r30, 7
    14ea:	ba 95       	dec	r27
    14ec:	ac 91       	ld	r26, X
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	d0 97       	sbiw	r26, 0x30	; 48
    14f2:	a7 01       	movw	r20, r14
    14f4:	96 01       	movw	r18, r12
    14f6:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__mulshisi3>
    14fa:	88 80       	ld	r8, Y
    14fc:	99 80       	ldd	r9, Y+1	; 0x01
    14fe:	aa 80       	ldd	r10, Y+2	; 0x02
    1500:	bb 80       	ldd	r11, Y+3	; 0x03
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	88 0d       	add	r24, r8
    1508:	99 1d       	adc	r25, r9
    150a:	aa 1d       	adc	r26, r10
    150c:	bb 1d       	adc	r27, r11
    150e:	88 83       	st	Y, r24
    1510:	99 83       	std	Y+1, r25	; 0x01
    1512:	aa 83       	std	Y+2, r26	; 0x02
    1514:	bb 83       	std	Y+3, r27	; 0x03
		digit*=10;
    1516:	cc 0c       	add	r12, r12
    1518:	dd 1c       	adc	r13, r13
    151a:	ee 1c       	adc	r14, r14
    151c:	ff 1c       	adc	r15, r15
    151e:	d7 01       	movw	r26, r14
    1520:	c6 01       	movw	r24, r12
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	aa 1f       	adc	r26, r26
    1528:	bb 1f       	adc	r27, r27
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	aa 1f       	adc	r26, r26
    1530:	bb 1f       	adc	r27, r27
    1532:	c8 0e       	add	r12, r24
    1534:	d9 1e       	adc	r13, r25
    1536:	ea 1e       	adc	r14, r26
    1538:	fb 1e       	adc	r15, r27
{
	sint8_t s8_loopIndex=0;
	uint8_t length = stringLength(pu8_String);
	*pu32_Num = 0;
	uint32_t digit=1;
	for (s8_loopIndex=length-2; s8_loopIndex>=0; s8_loopIndex--)
    153a:	e1 50       	subi	r30, 0x01	; 1
    153c:	ee 23       	and	r30, r30
    153e:	8c f6       	brge	.-94     	; 0x14e2 <stringToInteger+0x38>
	{
		*pu32_Num += (pu8_String[s8_loopIndex]-'0') *digit;
		digit*=10;
	}
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	bf 90       	pop	r11
    1552:	af 90       	pop	r10
    1554:	9f 90       	pop	r9
    1556:	8f 90       	pop	r8
    1558:	08 95       	ret

0000155a <waveFunction>:
* Parameters (out): None
* Return value: None
* Description: Function to be called inside the timer's ISR.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
void waveFunction(void)
{
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
	/* Toggle the Pin of the PWM Channel */
	if(Dio_togglePin(SWPwm_Channels[gu8_currentPwmChannel].u8_DioChannelID) != DIO_STATUS_ERROR_OK)
    155e:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <gu8_currentPwmChannel>
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	ee 0f       	add	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	ed 50       	subi	r30, 0x0D	; 13
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	80 81       	ld	r24, Z
    156e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_togglePin>
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	09 f0       	breq	.+2      	; 0x1578 <waveFunction+0x1e>
    1576:	76 c0       	rjmp	.+236    	; 0x1664 <waveFunction+0x10a>
		return;
	/* Check if the PWM Channel is still in Running State */
	if (gstr_ChannelsData[gu8_currentPwmChannel].enuChannelState == SWPWM_RUNNING)
    1578:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <gu8_currentPwmChannel>
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	9c 01       	movw	r18, r24
    1580:	22 0f       	add	r18, r18
    1582:	33 1f       	adc	r19, r19
    1584:	f9 01       	movw	r30, r18
    1586:	ee 0f       	add	r30, r30
    1588:	ff 1f       	adc	r31, r31
    158a:	ee 0f       	add	r30, r30
    158c:	ff 1f       	adc	r31, r31
    158e:	ee 0f       	add	r30, r30
    1590:	ff 1f       	adc	r31, r31
    1592:	e2 1b       	sub	r30, r18
    1594:	f3 0b       	sbc	r31, r19
    1596:	ee 5e       	subi	r30, 0xEE	; 238
    1598:	fe 4f       	sbci	r31, 0xFE	; 254
    159a:	25 85       	ldd	r18, Z+13	; 0x0d
    159c:	22 30       	cpi	r18, 0x02	; 2
    159e:	09 f0       	breq	.+2      	; 0x15a2 <waveFunction+0x48>
    15a0:	61 c0       	rjmp	.+194    	; 0x1664 <waveFunction+0x10a>
	{
		/* Start the Timer again with the new ticks assigned */
		if(GptStart_aSync(SWPwm_Channels[gu8_currentPwmChannel].u8_GptChannelID,\
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	fc 01       	movw	r30, r24
    15a8:	ee 0f       	add	r30, r30
    15aa:	ff 1f       	adc	r31, r31
    15ac:	ee 0f       	add	r30, r30
    15ae:	ff 1f       	adc	r31, r31
    15b0:	ee 0f       	add	r30, r30
    15b2:	ff 1f       	adc	r31, r31
    15b4:	e8 1b       	sub	r30, r24
    15b6:	f9 0b       	sbc	r31, r25
    15b8:	ee 5e       	subi	r30, 0xEE	; 238
    15ba:	fe 4f       	sbci	r31, 0xFE	; 254
    15bc:	41 85       	ldd	r20, Z+9	; 0x09
    15be:	52 85       	ldd	r21, Z+10	; 0x0a
    15c0:	63 85       	ldd	r22, Z+11	; 0x0b
    15c2:	74 85       	ldd	r23, Z+12	; 0x0c
    15c4:	fc 01       	movw	r30, r24
    15c6:	ed 50       	subi	r30, 0x0D	; 13
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	2d ea       	ldi	r18, 0xAD	; 173
    15cc:	3a e0       	ldi	r19, 0x0A	; 10
    15ce:	81 81       	ldd	r24, Z+1	; 0x01
    15d0:	0e 94 31 08 	call	0x1062	; 0x1062 <GptStart_aSync>
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	09 f0       	breq	.+2      	; 0x15da <waveFunction+0x80>
    15d8:	45 c0       	rjmp	.+138    	; 0x1664 <waveFunction+0x10a>
		                  gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks,\
						   waveFunction) != GPT_STATUS_ERROR_OK)	return;
		
		/* Replace the next ticks to be counted between ONTicks and OFFTicks*/
		if(gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks == gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks)
    15da:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <gu8_currentPwmChannel>
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9c 01       	movw	r18, r24
    15e2:	22 0f       	add	r18, r18
    15e4:	33 1f       	adc	r19, r19
    15e6:	f9 01       	movw	r30, r18
    15e8:	ee 0f       	add	r30, r30
    15ea:	ff 1f       	adc	r31, r31
    15ec:	ee 0f       	add	r30, r30
    15ee:	ff 1f       	adc	r31, r31
    15f0:	ee 0f       	add	r30, r30
    15f2:	ff 1f       	adc	r31, r31
    15f4:	e2 1b       	sub	r30, r18
    15f6:	f3 0b       	sbc	r31, r19
    15f8:	ee 5e       	subi	r30, 0xEE	; 238
    15fa:	fe 4f       	sbci	r31, 0xFE	; 254
    15fc:	01 85       	ldd	r16, Z+9	; 0x09
    15fe:	12 85       	ldd	r17, Z+10	; 0x0a
    1600:	23 85       	ldd	r18, Z+11	; 0x0b
    1602:	34 85       	ldd	r19, Z+12	; 0x0c
    1604:	45 81       	ldd	r20, Z+5	; 0x05
    1606:	56 81       	ldd	r21, Z+6	; 0x06
    1608:	67 81       	ldd	r22, Z+7	; 0x07
    160a:	70 85       	ldd	r23, Z+8	; 0x08
    160c:	04 17       	cp	r16, r20
    160e:	15 07       	cpc	r17, r21
    1610:	26 07       	cpc	r18, r22
    1612:	37 07       	cpc	r19, r23
    1614:	b1 f4       	brne	.+44     	; 0x1642 <waveFunction+0xe8>
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_ONTicks;
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	fc 01       	movw	r30, r24
    161c:	ee 0f       	add	r30, r30
    161e:	ff 1f       	adc	r31, r31
    1620:	ee 0f       	add	r30, r30
    1622:	ff 1f       	adc	r31, r31
    1624:	ee 0f       	add	r30, r30
    1626:	ff 1f       	adc	r31, r31
    1628:	e8 1b       	sub	r30, r24
    162a:	f9 0b       	sbc	r31, r25
    162c:	ee 5e       	subi	r30, 0xEE	; 238
    162e:	fe 4f       	sbci	r31, 0xFE	; 254
    1630:	81 81       	ldd	r24, Z+1	; 0x01
    1632:	92 81       	ldd	r25, Z+2	; 0x02
    1634:	a3 81       	ldd	r26, Z+3	; 0x03
    1636:	b4 81       	ldd	r27, Z+4	; 0x04
    1638:	81 87       	std	Z+9, r24	; 0x09
    163a:	92 87       	std	Z+10, r25	; 0x0a
    163c:	a3 87       	std	Z+11, r26	; 0x0b
    163e:	b4 87       	std	Z+12, r27	; 0x0c
    1640:	11 c0       	rjmp	.+34     	; 0x1664 <waveFunction+0x10a>
		else
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks;
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	fc 01       	movw	r30, r24
    1648:	ee 0f       	add	r30, r30
    164a:	ff 1f       	adc	r31, r31
    164c:	ee 0f       	add	r30, r30
    164e:	ff 1f       	adc	r31, r31
    1650:	ee 0f       	add	r30, r30
    1652:	ff 1f       	adc	r31, r31
    1654:	e8 1b       	sub	r30, r24
    1656:	f9 0b       	sbc	r31, r25
    1658:	ee 5e       	subi	r30, 0xEE	; 238
    165a:	fe 4f       	sbci	r31, 0xFE	; 254
    165c:	41 87       	std	Z+9, r20	; 0x09
    165e:	52 87       	std	Z+10, r21	; 0x0a
    1660:	63 87       	std	Z+11, r22	; 0x0b
    1662:	74 87       	std	Z+12, r23	; 0x0c
	}
}
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	08 95       	ret

0000166a <SWPwm_Init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
    166a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <genu_SWPwmModStatus>
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	91 f0       	breq	.+36     	; 0x1696 <SWPwm_Init+0x2c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
    1672:	0e 94 fd 07 	call	0xffa	; 0xffa <GptInit>
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	11 f0       	breq	.+4      	; 0x167e <SWPwm_Init+0x14>
    167a:	83 30       	cpi	r24, 0x03	; 3
    167c:	71 f4       	brne	.+28     	; 0x169a <SWPwm_Init+0x30>
		return SWPWM_STATUS_ERROR_NOK;
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    167e:	80 e8       	ldi	r24, 0x80	; 128
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	11 f0       	breq	.+4      	; 0x168e <SWPwm_Init+0x24>
    168a:	87 30       	cpi	r24, 0x07	; 7
    168c:	41 f4       	brne	.+16     	; 0x169e <SWPwm_Init+0x34>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <genu_SWPwmModStatus>
	return SWPWM_STATUS_ERROR_OK;
    1694:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_ERROR_NOK;
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
		return SWPWM_STATUS_ERROR_NOK;
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	08 95       	ret
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return SWPWM_STATUS_ERROR_NOK;
    169e:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
	return SWPWM_STATUS_ERROR_OK;
}
    16a0:	08 95       	ret

000016a2 <SWPwm_Start>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Start(u8SWPwm_Channel_t u8_ChannelID, uint32_t u32_Freq, uint8_t u8_DutyCycle)
{
    16a2:	4f 92       	push	r4
    16a4:	5f 92       	push	r5
    16a6:	6f 92       	push	r6
    16a8:	7f 92       	push	r7
    16aa:	8f 92       	push	r8
    16ac:	9f 92       	push	r9
    16ae:	af 92       	push	r10
    16b0:	bf 92       	push	r11
    16b2:	cf 92       	push	r12
    16b4:	df 92       	push	r13
    16b6:	ef 92       	push	r14
    16b8:	ff 92       	push	r15
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <SWPwm_Start+0x22>
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <SWPwm_Start+0x24>
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <SWPwm_Start+0x26>
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    16cc:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <genu_SWPwmModStatus>
    16d0:	91 30       	cpi	r25, 0x01	; 1
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <SWPwm_Start+0x34>
    16d4:	f2 c0       	rjmp	.+484    	; 0x18ba <SWPwm_Start+0x218>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    16d6:	81 11       	cpse	r24, r1
    16d8:	f2 c0       	rjmp	.+484    	; 0x18be <SWPwm_Start+0x21c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
    16da:	25 36       	cpi	r18, 0x65	; 101
    16dc:	08 f0       	brcs	.+2      	; 0x16e0 <SWPwm_Start+0x3e>
    16de:	f1 c0       	rjmp	.+482    	; 0x18c2 <SWPwm_Start+0x220>
	{
		return SWPWM_STATUS_DC_OUTRANGE;
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
    16e0:	e8 2f       	mov	r30, r24
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	fe 83       	std	Y+6, r31	; 0x06
    16e6:	ed 83       	std	Y+5, r30	; 0x05
    16e8:	df 01       	movw	r26, r30
    16ea:	aa 0f       	add	r26, r26
    16ec:	bb 1f       	adc	r27, r27
    16ee:	fd 01       	movw	r30, r26
    16f0:	ee 0f       	add	r30, r30
    16f2:	ff 1f       	adc	r31, r31
    16f4:	ee 0f       	add	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	ee 0f       	add	r30, r30
    16fa:	ff 1f       	adc	r31, r31
    16fc:	ea 1b       	sub	r30, r26
    16fe:	fb 0b       	sbc	r31, r27
    1700:	ee 5e       	subi	r30, 0xEE	; 238
    1702:	fe 4f       	sbci	r31, 0xFE	; 254
    1704:	95 85       	ldd	r25, Z+13	; 0x0d
    1706:	92 30       	cpi	r25, 0x02	; 2
    1708:	09 f4       	brne	.+2      	; 0x170c <SWPwm_Start+0x6a>
    170a:	dd c0       	rjmp	.+442    	; 0x18c6 <SWPwm_Start+0x224>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
    170c:	22 23       	and	r18, r18
    170e:	09 f4       	brne	.+2      	; 0x1712 <SWPwm_Start+0x70>
    1710:	dc c0       	rjmp	.+440    	; 0x18ca <SWPwm_Start+0x228>
    1712:	12 2f       	mov	r17, r18
    1714:	c8 2e       	mov	r12, r24
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
	}else if(u8_DutyCycle == 100)
    1716:	24 36       	cpi	r18, 0x64	; 100
    1718:	61 f4       	brne	.+24     	; 0x1732 <SWPwm_Start+0x90>
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    171a:	fd 01       	movw	r30, r26
    171c:	ed 50       	subi	r30, 0x0D	; 13
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	61 e0       	ldi	r22, 0x01	; 1
    1722:	80 81       	ld	r24, Z
    1724:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	09 f4       	brne	.+2      	; 0x172e <SWPwm_Start+0x8c>
    172c:	d0 c0       	rjmp	.+416    	; 0x18ce <SWPwm_Start+0x22c>
			return SWPWM_STATUS_ERROR_NOK;
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	d5 c0       	rjmp	.+426    	; 0x18dc <SWPwm_Start+0x23a>
		return SWPWM_STATUS_ERROR_OK;
	}
	
	float32_t f32_wavePeriodTime = (float32_t)1 / u32_Freq;					/* The Periodic Time for the Generated Pulse in Seconds */
    1732:	cb 01       	movw	r24, r22
    1734:	ba 01       	movw	r22, r20
    1736:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__floatunsisf>
    173a:	9b 01       	movw	r18, r22
    173c:	ac 01       	movw	r20, r24
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	80 e8       	ldi	r24, 0x80	; 128
    1744:	9f e3       	ldi	r25, 0x3F	; 63
    1746:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__divsf3>
    174a:	4b 01       	movw	r8, r22
    174c:	5c 01       	movw	r10, r24
	float32_t f32_waveONTime = (f32_wavePeriodTime*u8_DutyCycle) / 100;		/* The HIGH Level Time in Seconds */
    174e:	61 2f       	mov	r22, r17
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <__floatsisf>
    175a:	a5 01       	movw	r20, r10
    175c:	94 01       	movw	r18, r8
    175e:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__mulsf3>
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	48 ec       	ldi	r20, 0xC8	; 200
    1768:	52 e4       	ldi	r21, 0x42	; 66
    176a:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__divsf3>
    176e:	2b 01       	movw	r4, r22
    1770:	3c 01       	movw	r6, r24
	float32_t f32_waveOFFTime = f32_wavePeriodTime - f32_waveONTime;		/* The LOW Level Time in Seconds */
    1772:	9b 01       	movw	r18, r22
    1774:	ac 01       	movw	r20, r24
    1776:	c5 01       	movw	r24, r10
    1778:	b4 01       	movw	r22, r8
    177a:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__subsf3>
    177e:	4b 01       	movw	r8, r22
    1780:	5c 01       	movw	r10, r24
	float32_t f32_systemPeriodTime = 0.0;
	uint16_t  u16_prescalerValue = 0;
	
	/* Get the Prescaler Value of the used Timer Channel */
	switch(Timers_Configurations[SWPwm_Channels[u8_ChannelID].u8_GptChannelID].enuClock_Src)
    1782:	ed 81       	ldd	r30, Y+5	; 0x05
    1784:	fe 81       	ldd	r31, Y+6	; 0x06
    1786:	ee 0f       	add	r30, r30
    1788:	ff 1f       	adc	r31, r31
    178a:	ed 50       	subi	r30, 0x0D	; 13
    178c:	ff 4f       	sbci	r31, 0xFF	; 255
    178e:	d1 80       	ldd	r13, Z+1	; 0x01
    1790:	8d 2d       	mov	r24, r13
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	fc 01       	movw	r30, r24
    1796:	ee 0f       	add	r30, r30
    1798:	ff 1f       	adc	r31, r31
    179a:	8e 0f       	add	r24, r30
    179c:	9f 1f       	adc	r25, r31
    179e:	fc 01       	movw	r30, r24
    17a0:	e0 51       	subi	r30, 0x10	; 16
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	e1 81       	ldd	r30, Z+1	; 0x01
    17a6:	8e 2f       	mov	r24, r30
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	fc 01       	movw	r30, r24
    17ac:	31 97       	sbiw	r30, 0x01	; 1
    17ae:	e7 30       	cpi	r30, 0x07	; 7
    17b0:	f1 05       	cpc	r31, r1
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <SWPwm_Start+0x114>
    17b4:	8e c0       	rjmp	.+284    	; 0x18d2 <SWPwm_Start+0x230>
    17b6:	e6 5d       	subi	r30, 0xD6	; 214
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__tablejump2__>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
    17be:	61 e0       	ldi	r22, 0x01	; 1
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	0b c0       	rjmp	.+22     	; 0x17da <SWPwm_Start+0x138>
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
			break;
		case GPT_CLK_SRC_PRSCLR_64:
			u16_prescalerValue = 64;
    17c4:	60 e4       	ldi	r22, 0x40	; 64
    17c6:	70 e0       	ldi	r23, 0x00	; 0
			break;
    17c8:	08 c0       	rjmp	.+16     	; 0x17da <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_256:
			u16_prescalerValue = 256;
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	71 e0       	ldi	r23, 0x01	; 1
			break;
    17ce:	05 c0       	rjmp	.+10     	; 0x17da <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_1024:
			u16_prescalerValue = 1024;
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	74 e0       	ldi	r23, 0x04	; 4
			break;
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <SWPwm_Start+0x138>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
    17d6:	68 e0       	ldi	r22, 0x08	; 8
    17d8:	70 e0       	ldi	r23, 0x00	; 0
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
	}
	
	f32_systemPeriodTime = (float32_t)u16_prescalerValue/SYS_CLOCK_FREQUENCY;				/* The Controllers Periodic Time in seconds based on the System Clock Frequency */
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__floatunsisf>
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	34 e2       	ldi	r19, 0x24	; 36
    17e6:	44 e7       	ldi	r20, 0x74	; 116
    17e8:	59 e4       	ldi	r21, 0x49	; 73
    17ea:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__divsf3>
    17ee:	69 83       	std	Y+1, r22	; 0x01
    17f0:	7a 83       	std	Y+2, r23	; 0x02
    17f2:	8b 83       	std	Y+3, r24	; 0x03
    17f4:	9c 83       	std	Y+4, r25	; 0x04
	gu8_currentPwmChannel = u8_ChannelID;
    17f6:	c0 92 11 01 	sts	0x0111, r12	; 0x800111 <gu8_currentPwmChannel>
	gstr_ChannelsData[u8_ChannelID].u32_ONTicks = f32_waveONTime/f32_systemPeriodTime;		/* The HIGH Level Time in Ticks */
    17fa:	9b 01       	movw	r18, r22
    17fc:	ac 01       	movw	r20, r24
    17fe:	c3 01       	movw	r24, r6
    1800:	b2 01       	movw	r22, r4
    1802:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__divsf3>
    1806:	ed 80       	ldd	r14, Y+5	; 0x05
    1808:	fe 80       	ldd	r15, Y+6	; 0x06
    180a:	ee 0c       	add	r14, r14
    180c:	ff 1c       	adc	r15, r15
    180e:	87 01       	movw	r16, r14
    1810:	00 0f       	add	r16, r16
    1812:	11 1f       	adc	r17, r17
    1814:	00 0f       	add	r16, r16
    1816:	11 1f       	adc	r17, r17
    1818:	00 0f       	add	r16, r16
    181a:	11 1f       	adc	r17, r17
    181c:	0e 19       	sub	r16, r14
    181e:	1f 09       	sbc	r17, r15
    1820:	0e 5e       	subi	r16, 0xEE	; 238
    1822:	1e 4f       	sbci	r17, 0xFE	; 254
    1824:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__fixunssfsi>
    1828:	f8 01       	movw	r30, r16
    182a:	61 83       	std	Z+1, r22	; 0x01
    182c:	72 83       	std	Z+2, r23	; 0x02
    182e:	83 83       	std	Z+3, r24	; 0x03
    1830:	94 83       	std	Z+4, r25	; 0x04
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
    1832:	29 81       	ldd	r18, Y+1	; 0x01
    1834:	3a 81       	ldd	r19, Y+2	; 0x02
    1836:	4b 81       	ldd	r20, Y+3	; 0x03
    1838:	5c 81       	ldd	r21, Y+4	; 0x04
    183a:	c5 01       	movw	r24, r10
    183c:	b4 01       	movw	r22, r8
    183e:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__divsf3>
    1842:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__fixunssfsi>
    1846:	f8 01       	movw	r30, r16
    1848:	65 83       	std	Z+5, r22	; 0x05
    184a:	76 83       	std	Z+6, r23	; 0x06
    184c:	87 83       	std	Z+7, r24	; 0x07
    184e:	90 87       	std	Z+8, r25	; 0x08
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;
    1850:	c0 82       	st	Z, r12

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    1852:	f7 01       	movw	r30, r14
    1854:	ed 50       	subi	r30, 0x0D	; 13
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	80 81       	ld	r24, Z
    185c:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
    1860:	81 30       	cpi	r24, 0x01	; 1
    1862:	c9 f5       	brne	.+114    	; 0x18d6 <SWPwm_Start+0x234>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
    1864:	8e e0       	ldi	r24, 0x0E	; 14
    1866:	2d 81       	ldd	r18, Y+5	; 0x05
    1868:	3e 81       	ldd	r19, Y+6	; 0x06
    186a:	82 9f       	mul	r24, r18
    186c:	f0 01       	movw	r30, r0
    186e:	83 9f       	mul	r24, r19
    1870:	f0 0d       	add	r31, r0
    1872:	11 24       	eor	r1, r1
    1874:	ee 5e       	subi	r30, 0xEE	; 238
    1876:	fe 4f       	sbci	r31, 0xFE	; 254
    1878:	41 81       	ldd	r20, Z+1	; 0x01
    187a:	52 81       	ldd	r21, Z+2	; 0x02
    187c:	63 81       	ldd	r22, Z+3	; 0x03
    187e:	74 81       	ldd	r23, Z+4	; 0x04
    1880:	2d ea       	ldi	r18, 0xAD	; 173
    1882:	3a e0       	ldi	r19, 0x0A	; 10
    1884:	8d 2d       	mov	r24, r13
    1886:	0e 94 31 08 	call	0x1062	; 0x1062 <GptStart_aSync>
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	31 f5       	brne	.+76     	; 0x18da <SWPwm_Start+0x238>
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
	
	/* Assign the Next Ticks to be counted by the Asynchronous Timer */
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
    188e:	8e e0       	ldi	r24, 0x0E	; 14
    1890:	2d 81       	ldd	r18, Y+5	; 0x05
    1892:	3e 81       	ldd	r19, Y+6	; 0x06
    1894:	82 9f       	mul	r24, r18
    1896:	f0 01       	movw	r30, r0
    1898:	83 9f       	mul	r24, r19
    189a:	f0 0d       	add	r31, r0
    189c:	11 24       	eor	r1, r1
    189e:	ee 5e       	subi	r30, 0xEE	; 238
    18a0:	fe 4f       	sbci	r31, 0xFE	; 254
    18a2:	85 81       	ldd	r24, Z+5	; 0x05
    18a4:	96 81       	ldd	r25, Z+6	; 0x06
    18a6:	a7 81       	ldd	r26, Z+7	; 0x07
    18a8:	b0 85       	ldd	r27, Z+8	; 0x08
    18aa:	81 87       	std	Z+9, r24	; 0x09
    18ac:	92 87       	std	Z+10, r25	; 0x0a
    18ae:	a3 87       	std	Z+11, r26	; 0x0b
    18b0:	b4 87       	std	Z+12, r27	; 0x0c
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	85 87       	std	Z+13, r24	; 0x0d

	return SWPWM_STATUS_ERROR_OK;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	11 c0       	rjmp	.+34     	; 0x18dc <SWPwm_Start+0x23a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    18ba:	82 e0       	ldi	r24, 0x02	; 2
    18bc:	0f c0       	rjmp	.+30     	; 0x18dc <SWPwm_Start+0x23a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    18be:	83 e0       	ldi	r24, 0x03	; 3
    18c0:	0d c0       	rjmp	.+26     	; 0x18dc <SWPwm_Start+0x23a>
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
	{
		return SWPWM_STATUS_DC_OUTRANGE;
    18c2:	84 e0       	ldi	r24, 0x04	; 4
    18c4:	0b c0       	rjmp	.+22     	; 0x18dc <SWPwm_Start+0x23a>
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    18c6:	85 e0       	ldi	r24, 0x05	; 5
    18c8:	09 c0       	rjmp	.+18     	; 0x18dc <SWPwm_Start+0x23a>
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	07 c0       	rjmp	.+14     	; 0x18dc <SWPwm_Start+0x23a>
	}else if(u8_DutyCycle == 100)
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return SWPWM_STATUS_ERROR_NOK;
		return SWPWM_STATUS_ERROR_OK;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	05 c0       	rjmp	.+10     	; 0x18dc <SWPwm_Start+0x23a>
			break;
		case GPT_CLK_SRC_PRSCLR_EXT_RISE:
			u16_prescalerValue = 1;
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	03 c0       	rjmp	.+6      	; 0x18dc <SWPwm_Start+0x23a>
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	01 c0       	rjmp	.+2      	; 0x18dc <SWPwm_Start+0x23a>
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
    18da:	80 e0       	ldi	r24, 0x00	; 0
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;

	return SWPWM_STATUS_ERROR_OK;
}
    18dc:	26 96       	adiw	r28, 0x06	; 6
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	1f 91       	pop	r17
    18ee:	0f 91       	pop	r16
    18f0:	ff 90       	pop	r15
    18f2:	ef 90       	pop	r14
    18f4:	df 90       	pop	r13
    18f6:	cf 90       	pop	r12
    18f8:	bf 90       	pop	r11
    18fa:	af 90       	pop	r10
    18fc:	9f 90       	pop	r9
    18fe:	8f 90       	pop	r8
    1900:	7f 90       	pop	r7
    1902:	6f 90       	pop	r6
    1904:	5f 90       	pop	r5
    1906:	4f 90       	pop	r4
    1908:	08 95       	ret

0000190a <SWPwm_Stop>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Stop(u8SWPwm_Channel_t u8_ChannelID)
{
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    190e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <genu_SWPwmModStatus>
    1912:	91 30       	cpi	r25, 0x01	; 1
    1914:	b1 f5       	brne	.+108    	; 0x1982 <SWPwm_Stop+0x78>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    1916:	81 11       	cpse	r24, r1
    1918:	36 c0       	rjmp	.+108    	; 0x1986 <SWPwm_Stop+0x7c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
    191a:	c8 2f       	mov	r28, r24
    191c:	d0 e0       	ldi	r29, 0x00	; 0
    191e:	ce 01       	movw	r24, r28
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	fc 01       	movw	r30, r24
    1926:	ee 0f       	add	r30, r30
    1928:	ff 1f       	adc	r31, r31
    192a:	ee 0f       	add	r30, r30
    192c:	ff 1f       	adc	r31, r31
    192e:	ee 0f       	add	r30, r30
    1930:	ff 1f       	adc	r31, r31
    1932:	e8 1b       	sub	r30, r24
    1934:	f9 0b       	sbc	r31, r25
    1936:	ee 5e       	subi	r30, 0xEE	; 238
    1938:	fe 4f       	sbci	r31, 0xFE	; 254
    193a:	85 85       	ldd	r24, Z+13	; 0x0d
    193c:	82 30       	cpi	r24, 0x02	; 2
    193e:	29 f5       	brne	.+74     	; 0x198a <SWPwm_Stop+0x80>
	
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
    1940:	fe 01       	movw	r30, r28
    1942:	ee 0f       	add	r30, r30
    1944:	ff 1f       	adc	r31, r31
    1946:	ed 50       	subi	r30, 0x0D	; 13
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	0e 94 3c 06 	call	0xc78	; 0xc78 <Dio_writePin>
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	e1 f4       	brne	.+56     	; 0x198e <SWPwm_Stop+0x84>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the State of the PWM Channel to STOPPED */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
    1956:	8e e0       	ldi	r24, 0x0E	; 14
    1958:	8c 9f       	mul	r24, r28
    195a:	f0 01       	movw	r30, r0
    195c:	8d 9f       	mul	r24, r29
    195e:	f0 0d       	add	r31, r0
    1960:	11 24       	eor	r1, r1
    1962:	ee 5e       	subi	r30, 0xEE	; 238
    1964:	fe 4f       	sbci	r31, 0xFE	; 254
    1966:	83 e0       	ldi	r24, 0x03	; 3
    1968:	85 87       	std	Z+13, r24	; 0x0d
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
    196a:	fe 01       	movw	r30, r28
    196c:	ee 0f       	add	r30, r30
    196e:	ff 1f       	adc	r31, r31
    1970:	ed 50       	subi	r30, 0x0D	; 13
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	81 81       	ldd	r24, Z+1	; 0x01
    1976:	0e 94 90 08 	call	0x1120	; 0x1120 <GptStop>
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	51 f0       	breq	.+20     	; 0x1992 <SWPwm_Stop+0x88>
		return SWPWM_STATUS_ERROR_NOK;
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	09 c0       	rjmp	.+18     	; 0x1994 <SWPwm_Stop+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    1982:	82 e0       	ldi	r24, 0x02	; 2
    1984:	07 c0       	rjmp	.+14     	; 0x1994 <SWPwm_Stop+0x8a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    1986:	83 e0       	ldi	r24, 0x03	; 3
    1988:	05 c0       	rjmp	.+10     	; 0x1994 <SWPwm_Stop+0x8a>
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    198a:	85 e0       	ldi	r24, 0x05	; 5
    198c:	03 c0       	rjmp	.+6      	; 0x1994 <SWPwm_Stop+0x8a>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	01 c0       	rjmp	.+2      	; 0x1994 <SWPwm_Stop+0x8a>
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
	
	return SWPWM_STATUS_ERROR_OK;
    1992:	81 e0       	ldi	r24, 0x01	; 1
}
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	08 95       	ret

0000199a <Service_init>:
* Description: Function to Initialize the Service layer -- Initialize all the below Modules.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_init(void)
{
	/* Check if the Service Layer has been already initialized */
	if(genu_SrvcStatus == SRVC_STATUS_INITIALIZED)
    199a:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <genu_SrvcStatus>
    199e:	84 30       	cpi	r24, 0x04	; 4
    19a0:	e1 f0       	breq	.+56     	; 0x19da <Service_init+0x40>
		return SRVC_STATUS_INITIALIZED;
		
	if(LCD_STATUS_ERROR_OK != Lcd_init())
    19a2:	0e 94 29 02 	call	0x452	; 0x452 <Lcd_init>
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	89 f4       	brne	.+34     	; 0x19cc <Service_init+0x32>
		return SRVC_STATUS_ERROR_NOK;	
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
    19aa:	0e 94 43 01 	call	0x286	; 0x286 <Keypad_init>
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	79 f4       	brne	.+30     	; 0x19d0 <Service_init+0x36>
		return SRVC_STATUS_ERROR_NOK;
	if(LM35_STATUS_ERROR_OK != LM35_init())
    19b2:	0e 94 c2 02 	call	0x584	; 0x584 <LM35_init>
    19b6:	81 30       	cpi	r24, 0x01	; 1
    19b8:	69 f4       	brne	.+26     	; 0x19d4 <Service_init+0x3a>
		return SRVC_STATUS_ERROR_NOK;
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
    19ba:	0e 94 0a 03 	call	0x614	; 0x614 <Motor_init>
    19be:	81 30       	cpi	r24, 0x01	; 1
    19c0:	59 f4       	brne	.+22     	; 0x19d8 <Service_init+0x3e>
		return SRVC_STATUS_ERROR_NOK;
		
	genu_SrvcStatus = SRVC_STATUS_INITIALIZED;
    19c2:	84 e0       	ldi	r24, 0x04	; 4
    19c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <genu_SrvcStatus>
	return SRVC_STATUS_ERROR_OK;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	08 95       	ret
	/* Check if the Service Layer has been already initialized */
	if(genu_SrvcStatus == SRVC_STATUS_INITIALIZED)
		return SRVC_STATUS_INITIALIZED;
		
	if(LCD_STATUS_ERROR_OK != Lcd_init())
		return SRVC_STATUS_ERROR_NOK;	
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	08 95       	ret
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
		return SRVC_STATUS_ERROR_NOK;
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	08 95       	ret
	if(LM35_STATUS_ERROR_OK != LM35_init())
		return SRVC_STATUS_ERROR_NOK;
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	08 95       	ret
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
		return SRVC_STATUS_ERROR_NOK;
    19d8:	80 e0       	ldi	r24, 0x00	; 0
		
	genu_SrvcStatus = SRVC_STATUS_INITIALIZED;
	return SRVC_STATUS_ERROR_OK;
}
    19da:	08 95       	ret

000019dc <Service_ReportKeypad>:
* Parameters (out): pu8_key - Pointer to variable to hold the button pressed
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the value pressed in the keypad.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_ReportKeypad(uint8_t* pu8_key)
{
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	ec 01       	movw	r28, r24
	static uint8_t u8_index = 0;
	static uint8_t sau8_data[3]={0};
	enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&sau8_data[u8_index]);
    19e2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <u8_index.1869>
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	80 5e       	subi	r24, 0xE0	; 224
    19ea:	9e 4f       	sbci	r25, 0xFE	; 254
    19ec:	0e 94 56 01 	call	0x2ac	; 0x2ac <Keypad_readKey>
	
	if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
    19f0:	86 30       	cpi	r24, 0x06	; 6
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <Service_ReportKeypad+0x1a>
    19f4:	6c c0       	rjmp	.+216    	; 0x1ace <Service_ReportKeypad+0xf2>
	{
		if(sau8_data[u8_index] == '#')
    19f6:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <u8_index.1869>
    19fa:	86 2f       	mov	r24, r22
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	fc 01       	movw	r30, r24
    1a00:	e0 5e       	subi	r30, 0xE0	; 224
    1a02:	fe 4f       	sbci	r31, 0xFE	; 254
    1a04:	20 81       	ld	r18, Z
    1a06:	23 32       	cpi	r18, 0x23	; 35
    1a08:	61 f5       	brne	.+88     	; 0x1a62 <Service_ReportKeypad+0x86>
		{
			sau8_data[u8_index] = '\0';
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	e0 5e       	subi	r30, 0xE0	; 224
    1a0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a10:	10 82       	st	Z, r1
			u8_index = 0;
    1a12:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <u8_index.1869>
			if(Lcd_setCursor(1,14) != LCD_STATUS_ERROR_OK)
    1a16:	6e e0       	ldi	r22, 0x0E	; 14
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Lcd_setCursor>
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <Service_ReportKeypad+0x48>
    1a22:	57 c0       	rjmp	.+174    	; 0x1ad2 <Service_ReportKeypad+0xf6>
				return SRVC_STATUS_ERROR_NOK;
			if(Lcd_printChar(' ') != LCD_STATUS_ERROR_OK)
    1a24:	80 e2       	ldi	r24, 0x20	; 32
    1a26:	0e 94 74 02 	call	0x4e8	; 0x4e8 <Lcd_printChar>
    1a2a:	81 30       	cpi	r24, 0x01	; 1
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <Service_ReportKeypad+0x54>
    1a2e:	53 c0       	rjmp	.+166    	; 0x1ad6 <Service_ReportKeypad+0xfa>
				return SRVC_STATUS_ERROR_NOK;
			if(Lcd_setCursor(1,15) != LCD_STATUS_ERROR_OK)
    1a30:	6f e0       	ldi	r22, 0x0F	; 15
    1a32:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Lcd_setCursor>
    1a36:	81 30       	cpi	r24, 0x01	; 1
    1a38:	09 f0       	breq	.+2      	; 0x1a3c <Service_ReportKeypad+0x60>
    1a3a:	4f c0       	rjmp	.+158    	; 0x1ada <Service_ReportKeypad+0xfe>
				return SRVC_STATUS_ERROR_NOK;
			if(Lcd_printChar(' ') != LCD_STATUS_ERROR_OK)
    1a3c:	80 e2       	ldi	r24, 0x20	; 32
    1a3e:	0e 94 74 02 	call	0x4e8	; 0x4e8 <Lcd_printChar>
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <Service_ReportKeypad+0x6c>
    1a46:	4b c0       	rjmp	.+150    	; 0x1ade <Service_ReportKeypad+0x102>
				return SRVC_STATUS_ERROR_NOK;
			if(Lcd_setCursor(1,14) != LCD_STATUS_ERROR_OK)
    1a48:	6e e0       	ldi	r22, 0x0E	; 14
    1a4a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Lcd_setCursor>
    1a4e:	81 30       	cpi	r24, 0x01	; 1
    1a50:	09 f0       	breq	.+2      	; 0x1a54 <Service_ReportKeypad+0x78>
    1a52:	47 c0       	rjmp	.+142    	; 0x1ae2 <Service_ReportKeypad+0x106>
				return SRVC_STATUS_ERROR_NOK;
			stringCopy(sau8_data, pu8_key);
    1a54:	be 01       	movw	r22, r28
    1a56:	80 e2       	ldi	r24, 0x20	; 32
    1a58:	91 e0       	ldi	r25, 0x01	; 1
    1a5a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <stringCopy>
			return SRVC_KPD_NUM;
    1a5e:	86 e0       	ldi	r24, 0x06	; 6
    1a60:	49 c0       	rjmp	.+146    	; 0x1af4 <Service_ReportKeypad+0x118>
		}else if(sau8_data[u8_index] == '*')
    1a62:	2a 32       	cpi	r18, 0x2A	; 42
    1a64:	a9 f4       	brne	.+42     	; 0x1a90 <Service_ReportKeypad+0xb4>
		{
			u8_index--;
    1a66:	ef ef       	ldi	r30, 0xFF	; 255
    1a68:	e6 0f       	add	r30, r22
    1a6a:	e0 93 23 01 	sts	0x0123, r30	; 0x800123 <u8_index.1869>
			sau8_data[u8_index] = '\0';
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	e0 5e       	subi	r30, 0xE0	; 224
    1a72:	fe 4f       	sbci	r31, 0xFE	; 254
    1a74:	10 82       	st	Z, r1
			if(Lcd_setCursor(1,u8_index+14) != LCD_STATUS_ERROR_OK)
    1a76:	63 5f       	subi	r22, 0xF3	; 243
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Lcd_setCursor>
    1a7e:	81 30       	cpi	r24, 0x01	; 1
    1a80:	91 f5       	brne	.+100    	; 0x1ae6 <Service_ReportKeypad+0x10a>
			return SRVC_STATUS_ERROR_NOK;
			if(Lcd_printChar(' ') != LCD_STATUS_ERROR_OK)
    1a82:	80 e2       	ldi	r24, 0x20	; 32
    1a84:	0e 94 74 02 	call	0x4e8	; 0x4e8 <Lcd_printChar>
    1a88:	81 30       	cpi	r24, 0x01	; 1
    1a8a:	79 f1       	breq	.+94     	; 0x1aea <Service_ReportKeypad+0x10e>
			return SRVC_KPD_NUM;
    1a8c:	86 e0       	ldi	r24, 0x06	; 6
    1a8e:	32 c0       	rjmp	.+100    	; 0x1af4 <Service_ReportKeypad+0x118>
		}else
		{
			if(u8_index!=2)
    1a90:	62 30       	cpi	r22, 0x02	; 2
    1a92:	b9 f0       	breq	.+46     	; 0x1ac2 <Service_ReportKeypad+0xe6>
			{
				if(Lcd_setCursor(1,u8_index+14) != LCD_STATUS_ERROR_OK)
    1a94:	62 5f       	subi	r22, 0xF2	; 242
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Lcd_setCursor>
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	39 f5       	brne	.+78     	; 0x1aee <Service_ReportKeypad+0x112>
					return SRVC_STATUS_ERROR_NOK;
				if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
    1aa0:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <u8_index.1869>
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	e0 5e       	subi	r30, 0xE0	; 224
    1aa8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aaa:	80 81       	ld	r24, Z
    1aac:	0e 94 74 02 	call	0x4e8	; 0x4e8 <Lcd_printChar>
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	f9 f4       	brne	.+62     	; 0x1af2 <Service_ReportKeypad+0x116>
					return SRVC_STATUS_ERROR_NOK;
				u8_index++;
    1ab4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <u8_index.1869>
    1ab8:	8f 5f       	subi	r24, 0xFF	; 255
    1aba:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <u8_index.1869>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return SRVC_STATUS_ERROR_OK;
	}
	
	return SRVC_STATUS_ERROR_OK;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	19 c0       	rjmp	.+50     	; 0x1af4 <Service_ReportKeypad+0x118>
				if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
					return SRVC_STATUS_ERROR_NOK;
				u8_index++;
			}else
			{
				sau8_data[u8_index] = '\0';
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	e0 5e       	subi	r30, 0xE0	; 224
    1ac6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac8:	10 82       	st	Z, r1
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return SRVC_STATUS_ERROR_OK;
	}
	
	return SRVC_STATUS_ERROR_OK;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	13 c0       	rjmp	.+38     	; 0x1af4 <Service_ReportKeypad+0x118>
			}
			
		}
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return SRVC_STATUS_ERROR_OK;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	11 c0       	rjmp	.+34     	; 0x1af4 <Service_ReportKeypad+0x118>
		if(sau8_data[u8_index] == '#')
		{
			sau8_data[u8_index] = '\0';
			u8_index = 0;
			if(Lcd_setCursor(1,14) != LCD_STATUS_ERROR_OK)
				return SRVC_STATUS_ERROR_NOK;
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	0f c0       	rjmp	.+30     	; 0x1af4 <Service_ReportKeypad+0x118>
			if(Lcd_printChar(' ') != LCD_STATUS_ERROR_OK)
				return SRVC_STATUS_ERROR_NOK;
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	0d c0       	rjmp	.+26     	; 0x1af4 <Service_ReportKeypad+0x118>
			if(Lcd_setCursor(1,15) != LCD_STATUS_ERROR_OK)
				return SRVC_STATUS_ERROR_NOK;
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	0b c0       	rjmp	.+22     	; 0x1af4 <Service_ReportKeypad+0x118>
			if(Lcd_printChar(' ') != LCD_STATUS_ERROR_OK)
				return SRVC_STATUS_ERROR_NOK;
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	09 c0       	rjmp	.+18     	; 0x1af4 <Service_ReportKeypad+0x118>
			if(Lcd_setCursor(1,14) != LCD_STATUS_ERROR_OK)
				return SRVC_STATUS_ERROR_NOK;
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	07 c0       	rjmp	.+14     	; 0x1af4 <Service_ReportKeypad+0x118>
		}else if(sau8_data[u8_index] == '*')
		{
			u8_index--;
			sau8_data[u8_index] = '\0';
			if(Lcd_setCursor(1,u8_index+14) != LCD_STATUS_ERROR_OK)
			return SRVC_STATUS_ERROR_NOK;
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	05 c0       	rjmp	.+10     	; 0x1af4 <Service_ReportKeypad+0x118>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return SRVC_STATUS_ERROR_OK;
	}
	
	return SRVC_STATUS_ERROR_OK;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	03 c0       	rjmp	.+6      	; 0x1af4 <Service_ReportKeypad+0x118>
		}else
		{
			if(u8_index!=2)
			{
				if(Lcd_setCursor(1,u8_index+14) != LCD_STATUS_ERROR_OK)
					return SRVC_STATUS_ERROR_NOK;
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	01 c0       	rjmp	.+2      	; 0x1af4 <Service_ReportKeypad+0x118>
				if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
					return SRVC_STATUS_ERROR_NOK;
    1af2:	80 e0       	ldi	r24, 0x00	; 0
	{
		return SRVC_STATUS_ERROR_OK;
	}
	
	return SRVC_STATUS_ERROR_OK;
}
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	08 95       	ret

00001afa <__subsf3>:
    1afa:	50 58       	subi	r21, 0x80	; 128

00001afc <__addsf3>:
    1afc:	bb 27       	eor	r27, r27
    1afe:	aa 27       	eor	r26, r26
    1b00:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__addsf3x>
    1b04:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <__fp_round>
    1b08:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__fp_pscA>
    1b0c:	38 f0       	brcs	.+14     	; 0x1b1c <__addsf3+0x20>
    1b0e:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__fp_pscB>
    1b12:	20 f0       	brcs	.+8      	; 0x1b1c <__addsf3+0x20>
    1b14:	39 f4       	brne	.+14     	; 0x1b24 <__addsf3+0x28>
    1b16:	9f 3f       	cpi	r25, 0xFF	; 255
    1b18:	19 f4       	brne	.+6      	; 0x1b20 <__addsf3+0x24>
    1b1a:	26 f4       	brtc	.+8      	; 0x1b24 <__addsf3+0x28>
    1b1c:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__fp_nan>
    1b20:	0e f4       	brtc	.+2      	; 0x1b24 <__addsf3+0x28>
    1b22:	e0 95       	com	r30
    1b24:	e7 fb       	bst	r30, 7
    1b26:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <__fp_inf>

00001b2a <__addsf3x>:
    1b2a:	e9 2f       	mov	r30, r25
    1b2c:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__fp_split3>
    1b30:	58 f3       	brcs	.-42     	; 0x1b08 <__addsf3+0xc>
    1b32:	ba 17       	cp	r27, r26
    1b34:	62 07       	cpc	r22, r18
    1b36:	73 07       	cpc	r23, r19
    1b38:	84 07       	cpc	r24, r20
    1b3a:	95 07       	cpc	r25, r21
    1b3c:	20 f0       	brcs	.+8      	; 0x1b46 <__addsf3x+0x1c>
    1b3e:	79 f4       	brne	.+30     	; 0x1b5e <__addsf3x+0x34>
    1b40:	a6 f5       	brtc	.+104    	; 0x1baa <__addsf3x+0x80>
    1b42:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <__fp_zero>
    1b46:	0e f4       	brtc	.+2      	; 0x1b4a <__addsf3x+0x20>
    1b48:	e0 95       	com	r30
    1b4a:	0b 2e       	mov	r0, r27
    1b4c:	ba 2f       	mov	r27, r26
    1b4e:	a0 2d       	mov	r26, r0
    1b50:	0b 01       	movw	r0, r22
    1b52:	b9 01       	movw	r22, r18
    1b54:	90 01       	movw	r18, r0
    1b56:	0c 01       	movw	r0, r24
    1b58:	ca 01       	movw	r24, r20
    1b5a:	a0 01       	movw	r20, r0
    1b5c:	11 24       	eor	r1, r1
    1b5e:	ff 27       	eor	r31, r31
    1b60:	59 1b       	sub	r21, r25
    1b62:	99 f0       	breq	.+38     	; 0x1b8a <__addsf3x+0x60>
    1b64:	59 3f       	cpi	r21, 0xF9	; 249
    1b66:	50 f4       	brcc	.+20     	; 0x1b7c <__addsf3x+0x52>
    1b68:	50 3e       	cpi	r21, 0xE0	; 224
    1b6a:	68 f1       	brcs	.+90     	; 0x1bc6 <__addsf3x+0x9c>
    1b6c:	1a 16       	cp	r1, r26
    1b6e:	f0 40       	sbci	r31, 0x00	; 0
    1b70:	a2 2f       	mov	r26, r18
    1b72:	23 2f       	mov	r18, r19
    1b74:	34 2f       	mov	r19, r20
    1b76:	44 27       	eor	r20, r20
    1b78:	58 5f       	subi	r21, 0xF8	; 248
    1b7a:	f3 cf       	rjmp	.-26     	; 0x1b62 <__addsf3x+0x38>
    1b7c:	46 95       	lsr	r20
    1b7e:	37 95       	ror	r19
    1b80:	27 95       	ror	r18
    1b82:	a7 95       	ror	r26
    1b84:	f0 40       	sbci	r31, 0x00	; 0
    1b86:	53 95       	inc	r21
    1b88:	c9 f7       	brne	.-14     	; 0x1b7c <__addsf3x+0x52>
    1b8a:	7e f4       	brtc	.+30     	; 0x1baa <__addsf3x+0x80>
    1b8c:	1f 16       	cp	r1, r31
    1b8e:	ba 0b       	sbc	r27, r26
    1b90:	62 0b       	sbc	r22, r18
    1b92:	73 0b       	sbc	r23, r19
    1b94:	84 0b       	sbc	r24, r20
    1b96:	ba f0       	brmi	.+46     	; 0x1bc6 <__addsf3x+0x9c>
    1b98:	91 50       	subi	r25, 0x01	; 1
    1b9a:	a1 f0       	breq	.+40     	; 0x1bc4 <__addsf3x+0x9a>
    1b9c:	ff 0f       	add	r31, r31
    1b9e:	bb 1f       	adc	r27, r27
    1ba0:	66 1f       	adc	r22, r22
    1ba2:	77 1f       	adc	r23, r23
    1ba4:	88 1f       	adc	r24, r24
    1ba6:	c2 f7       	brpl	.-16     	; 0x1b98 <__addsf3x+0x6e>
    1ba8:	0e c0       	rjmp	.+28     	; 0x1bc6 <__addsf3x+0x9c>
    1baa:	ba 0f       	add	r27, r26
    1bac:	62 1f       	adc	r22, r18
    1bae:	73 1f       	adc	r23, r19
    1bb0:	84 1f       	adc	r24, r20
    1bb2:	48 f4       	brcc	.+18     	; 0x1bc6 <__addsf3x+0x9c>
    1bb4:	87 95       	ror	r24
    1bb6:	77 95       	ror	r23
    1bb8:	67 95       	ror	r22
    1bba:	b7 95       	ror	r27
    1bbc:	f7 95       	ror	r31
    1bbe:	9e 3f       	cpi	r25, 0xFE	; 254
    1bc0:	08 f0       	brcs	.+2      	; 0x1bc4 <__addsf3x+0x9a>
    1bc2:	b0 cf       	rjmp	.-160    	; 0x1b24 <__addsf3+0x28>
    1bc4:	93 95       	inc	r25
    1bc6:	88 0f       	add	r24, r24
    1bc8:	08 f0       	brcs	.+2      	; 0x1bcc <__addsf3x+0xa2>
    1bca:	99 27       	eor	r25, r25
    1bcc:	ee 0f       	add	r30, r30
    1bce:	97 95       	ror	r25
    1bd0:	87 95       	ror	r24
    1bd2:	08 95       	ret

00001bd4 <__divsf3>:
    1bd4:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__divsf3x>
    1bd8:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <__fp_round>
    1bdc:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__fp_pscB>
    1be0:	58 f0       	brcs	.+22     	; 0x1bf8 <__divsf3+0x24>
    1be2:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__fp_pscA>
    1be6:	40 f0       	brcs	.+16     	; 0x1bf8 <__divsf3+0x24>
    1be8:	29 f4       	brne	.+10     	; 0x1bf4 <__divsf3+0x20>
    1bea:	5f 3f       	cpi	r21, 0xFF	; 255
    1bec:	29 f0       	breq	.+10     	; 0x1bf8 <__divsf3+0x24>
    1bee:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <__fp_inf>
    1bf2:	51 11       	cpse	r21, r1
    1bf4:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__fp_szero>
    1bf8:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__fp_nan>

00001bfc <__divsf3x>:
    1bfc:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__fp_split3>
    1c00:	68 f3       	brcs	.-38     	; 0x1bdc <__divsf3+0x8>

00001c02 <__divsf3_pse>:
    1c02:	99 23       	and	r25, r25
    1c04:	b1 f3       	breq	.-20     	; 0x1bf2 <__divsf3+0x1e>
    1c06:	55 23       	and	r21, r21
    1c08:	91 f3       	breq	.-28     	; 0x1bee <__divsf3+0x1a>
    1c0a:	95 1b       	sub	r25, r21
    1c0c:	55 0b       	sbc	r21, r21
    1c0e:	bb 27       	eor	r27, r27
    1c10:	aa 27       	eor	r26, r26
    1c12:	62 17       	cp	r22, r18
    1c14:	73 07       	cpc	r23, r19
    1c16:	84 07       	cpc	r24, r20
    1c18:	38 f0       	brcs	.+14     	; 0x1c28 <__divsf3_pse+0x26>
    1c1a:	9f 5f       	subi	r25, 0xFF	; 255
    1c1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c1e:	22 0f       	add	r18, r18
    1c20:	33 1f       	adc	r19, r19
    1c22:	44 1f       	adc	r20, r20
    1c24:	aa 1f       	adc	r26, r26
    1c26:	a9 f3       	breq	.-22     	; 0x1c12 <__divsf3_pse+0x10>
    1c28:	35 d0       	rcall	.+106    	; 0x1c94 <__divsf3_pse+0x92>
    1c2a:	0e 2e       	mov	r0, r30
    1c2c:	3a f0       	brmi	.+14     	; 0x1c3c <__divsf3_pse+0x3a>
    1c2e:	e0 e8       	ldi	r30, 0x80	; 128
    1c30:	32 d0       	rcall	.+100    	; 0x1c96 <__divsf3_pse+0x94>
    1c32:	91 50       	subi	r25, 0x01	; 1
    1c34:	50 40       	sbci	r21, 0x00	; 0
    1c36:	e6 95       	lsr	r30
    1c38:	00 1c       	adc	r0, r0
    1c3a:	ca f7       	brpl	.-14     	; 0x1c2e <__divsf3_pse+0x2c>
    1c3c:	2b d0       	rcall	.+86     	; 0x1c94 <__divsf3_pse+0x92>
    1c3e:	fe 2f       	mov	r31, r30
    1c40:	29 d0       	rcall	.+82     	; 0x1c94 <__divsf3_pse+0x92>
    1c42:	66 0f       	add	r22, r22
    1c44:	77 1f       	adc	r23, r23
    1c46:	88 1f       	adc	r24, r24
    1c48:	bb 1f       	adc	r27, r27
    1c4a:	26 17       	cp	r18, r22
    1c4c:	37 07       	cpc	r19, r23
    1c4e:	48 07       	cpc	r20, r24
    1c50:	ab 07       	cpc	r26, r27
    1c52:	b0 e8       	ldi	r27, 0x80	; 128
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <__divsf3_pse+0x56>
    1c56:	bb 0b       	sbc	r27, r27
    1c58:	80 2d       	mov	r24, r0
    1c5a:	bf 01       	movw	r22, r30
    1c5c:	ff 27       	eor	r31, r31
    1c5e:	93 58       	subi	r25, 0x83	; 131
    1c60:	5f 4f       	sbci	r21, 0xFF	; 255
    1c62:	3a f0       	brmi	.+14     	; 0x1c72 <__divsf3_pse+0x70>
    1c64:	9e 3f       	cpi	r25, 0xFE	; 254
    1c66:	51 05       	cpc	r21, r1
    1c68:	78 f0       	brcs	.+30     	; 0x1c88 <__divsf3_pse+0x86>
    1c6a:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <__fp_inf>
    1c6e:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__fp_szero>
    1c72:	5f 3f       	cpi	r21, 0xFF	; 255
    1c74:	e4 f3       	brlt	.-8      	; 0x1c6e <__divsf3_pse+0x6c>
    1c76:	98 3e       	cpi	r25, 0xE8	; 232
    1c78:	d4 f3       	brlt	.-12     	; 0x1c6e <__divsf3_pse+0x6c>
    1c7a:	86 95       	lsr	r24
    1c7c:	77 95       	ror	r23
    1c7e:	67 95       	ror	r22
    1c80:	b7 95       	ror	r27
    1c82:	f7 95       	ror	r31
    1c84:	9f 5f       	subi	r25, 0xFF	; 255
    1c86:	c9 f7       	brne	.-14     	; 0x1c7a <__divsf3_pse+0x78>
    1c88:	88 0f       	add	r24, r24
    1c8a:	91 1d       	adc	r25, r1
    1c8c:	96 95       	lsr	r25
    1c8e:	87 95       	ror	r24
    1c90:	97 f9       	bld	r25, 7
    1c92:	08 95       	ret
    1c94:	e1 e0       	ldi	r30, 0x01	; 1
    1c96:	66 0f       	add	r22, r22
    1c98:	77 1f       	adc	r23, r23
    1c9a:	88 1f       	adc	r24, r24
    1c9c:	bb 1f       	adc	r27, r27
    1c9e:	62 17       	cp	r22, r18
    1ca0:	73 07       	cpc	r23, r19
    1ca2:	84 07       	cpc	r24, r20
    1ca4:	ba 07       	cpc	r27, r26
    1ca6:	20 f0       	brcs	.+8      	; 0x1cb0 <__divsf3_pse+0xae>
    1ca8:	62 1b       	sub	r22, r18
    1caa:	73 0b       	sbc	r23, r19
    1cac:	84 0b       	sbc	r24, r20
    1cae:	ba 0b       	sbc	r27, r26
    1cb0:	ee 1f       	adc	r30, r30
    1cb2:	88 f7       	brcc	.-30     	; 0x1c96 <__divsf3_pse+0x94>
    1cb4:	e0 95       	com	r30
    1cb6:	08 95       	ret

00001cb8 <__fixunssfsi>:
    1cb8:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__fp_splitA>
    1cbc:	88 f0       	brcs	.+34     	; 0x1ce0 <__fixunssfsi+0x28>
    1cbe:	9f 57       	subi	r25, 0x7F	; 127
    1cc0:	98 f0       	brcs	.+38     	; 0x1ce8 <__fixunssfsi+0x30>
    1cc2:	b9 2f       	mov	r27, r25
    1cc4:	99 27       	eor	r25, r25
    1cc6:	b7 51       	subi	r27, 0x17	; 23
    1cc8:	b0 f0       	brcs	.+44     	; 0x1cf6 <__fixunssfsi+0x3e>
    1cca:	e1 f0       	breq	.+56     	; 0x1d04 <__fixunssfsi+0x4c>
    1ccc:	66 0f       	add	r22, r22
    1cce:	77 1f       	adc	r23, r23
    1cd0:	88 1f       	adc	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	1a f0       	brmi	.+6      	; 0x1cdc <__fixunssfsi+0x24>
    1cd6:	ba 95       	dec	r27
    1cd8:	c9 f7       	brne	.-14     	; 0x1ccc <__fixunssfsi+0x14>
    1cda:	14 c0       	rjmp	.+40     	; 0x1d04 <__fixunssfsi+0x4c>
    1cdc:	b1 30       	cpi	r27, 0x01	; 1
    1cde:	91 f0       	breq	.+36     	; 0x1d04 <__fixunssfsi+0x4c>
    1ce0:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__fp_zero>
    1ce4:	b1 e0       	ldi	r27, 0x01	; 1
    1ce6:	08 95       	ret
    1ce8:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <__fp_zero>
    1cec:	67 2f       	mov	r22, r23
    1cee:	78 2f       	mov	r23, r24
    1cf0:	88 27       	eor	r24, r24
    1cf2:	b8 5f       	subi	r27, 0xF8	; 248
    1cf4:	39 f0       	breq	.+14     	; 0x1d04 <__fixunssfsi+0x4c>
    1cf6:	b9 3f       	cpi	r27, 0xF9	; 249
    1cf8:	cc f3       	brlt	.-14     	; 0x1cec <__fixunssfsi+0x34>
    1cfa:	86 95       	lsr	r24
    1cfc:	77 95       	ror	r23
    1cfe:	67 95       	ror	r22
    1d00:	b3 95       	inc	r27
    1d02:	d9 f7       	brne	.-10     	; 0x1cfa <__fixunssfsi+0x42>
    1d04:	3e f4       	brtc	.+14     	; 0x1d14 <__fixunssfsi+0x5c>
    1d06:	90 95       	com	r25
    1d08:	80 95       	com	r24
    1d0a:	70 95       	com	r23
    1d0c:	61 95       	neg	r22
    1d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d10:	8f 4f       	sbci	r24, 0xFF	; 255
    1d12:	9f 4f       	sbci	r25, 0xFF	; 255
    1d14:	08 95       	ret

00001d16 <__floatunsisf>:
    1d16:	e8 94       	clt
    1d18:	09 c0       	rjmp	.+18     	; 0x1d2c <__floatsisf+0x12>

00001d1a <__floatsisf>:
    1d1a:	97 fb       	bst	r25, 7
    1d1c:	3e f4       	brtc	.+14     	; 0x1d2c <__floatsisf+0x12>
    1d1e:	90 95       	com	r25
    1d20:	80 95       	com	r24
    1d22:	70 95       	com	r23
    1d24:	61 95       	neg	r22
    1d26:	7f 4f       	sbci	r23, 0xFF	; 255
    1d28:	8f 4f       	sbci	r24, 0xFF	; 255
    1d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2c:	99 23       	and	r25, r25
    1d2e:	a9 f0       	breq	.+42     	; 0x1d5a <__floatsisf+0x40>
    1d30:	f9 2f       	mov	r31, r25
    1d32:	96 e9       	ldi	r25, 0x96	; 150
    1d34:	bb 27       	eor	r27, r27
    1d36:	93 95       	inc	r25
    1d38:	f6 95       	lsr	r31
    1d3a:	87 95       	ror	r24
    1d3c:	77 95       	ror	r23
    1d3e:	67 95       	ror	r22
    1d40:	b7 95       	ror	r27
    1d42:	f1 11       	cpse	r31, r1
    1d44:	f8 cf       	rjmp	.-16     	; 0x1d36 <__floatsisf+0x1c>
    1d46:	fa f4       	brpl	.+62     	; 0x1d86 <__floatsisf+0x6c>
    1d48:	bb 0f       	add	r27, r27
    1d4a:	11 f4       	brne	.+4      	; 0x1d50 <__floatsisf+0x36>
    1d4c:	60 ff       	sbrs	r22, 0
    1d4e:	1b c0       	rjmp	.+54     	; 0x1d86 <__floatsisf+0x6c>
    1d50:	6f 5f       	subi	r22, 0xFF	; 255
    1d52:	7f 4f       	sbci	r23, 0xFF	; 255
    1d54:	8f 4f       	sbci	r24, 0xFF	; 255
    1d56:	9f 4f       	sbci	r25, 0xFF	; 255
    1d58:	16 c0       	rjmp	.+44     	; 0x1d86 <__floatsisf+0x6c>
    1d5a:	88 23       	and	r24, r24
    1d5c:	11 f0       	breq	.+4      	; 0x1d62 <__floatsisf+0x48>
    1d5e:	96 e9       	ldi	r25, 0x96	; 150
    1d60:	11 c0       	rjmp	.+34     	; 0x1d84 <__floatsisf+0x6a>
    1d62:	77 23       	and	r23, r23
    1d64:	21 f0       	breq	.+8      	; 0x1d6e <__floatsisf+0x54>
    1d66:	9e e8       	ldi	r25, 0x8E	; 142
    1d68:	87 2f       	mov	r24, r23
    1d6a:	76 2f       	mov	r23, r22
    1d6c:	05 c0       	rjmp	.+10     	; 0x1d78 <__floatsisf+0x5e>
    1d6e:	66 23       	and	r22, r22
    1d70:	71 f0       	breq	.+28     	; 0x1d8e <__floatsisf+0x74>
    1d72:	96 e8       	ldi	r25, 0x86	; 134
    1d74:	86 2f       	mov	r24, r22
    1d76:	70 e0       	ldi	r23, 0x00	; 0
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	2a f0       	brmi	.+10     	; 0x1d86 <__floatsisf+0x6c>
    1d7c:	9a 95       	dec	r25
    1d7e:	66 0f       	add	r22, r22
    1d80:	77 1f       	adc	r23, r23
    1d82:	88 1f       	adc	r24, r24
    1d84:	da f7       	brpl	.-10     	; 0x1d7c <__floatsisf+0x62>
    1d86:	88 0f       	add	r24, r24
    1d88:	96 95       	lsr	r25
    1d8a:	87 95       	ror	r24
    1d8c:	97 f9       	bld	r25, 7
    1d8e:	08 95       	ret

00001d90 <__fp_inf>:
    1d90:	97 f9       	bld	r25, 7
    1d92:	9f 67       	ori	r25, 0x7F	; 127
    1d94:	80 e8       	ldi	r24, 0x80	; 128
    1d96:	70 e0       	ldi	r23, 0x00	; 0
    1d98:	60 e0       	ldi	r22, 0x00	; 0
    1d9a:	08 95       	ret

00001d9c <__fp_nan>:
    1d9c:	9f ef       	ldi	r25, 0xFF	; 255
    1d9e:	80 ec       	ldi	r24, 0xC0	; 192
    1da0:	08 95       	ret

00001da2 <__fp_pscA>:
    1da2:	00 24       	eor	r0, r0
    1da4:	0a 94       	dec	r0
    1da6:	16 16       	cp	r1, r22
    1da8:	17 06       	cpc	r1, r23
    1daa:	18 06       	cpc	r1, r24
    1dac:	09 06       	cpc	r0, r25
    1dae:	08 95       	ret

00001db0 <__fp_pscB>:
    1db0:	00 24       	eor	r0, r0
    1db2:	0a 94       	dec	r0
    1db4:	12 16       	cp	r1, r18
    1db6:	13 06       	cpc	r1, r19
    1db8:	14 06       	cpc	r1, r20
    1dba:	05 06       	cpc	r0, r21
    1dbc:	08 95       	ret

00001dbe <__fp_round>:
    1dbe:	09 2e       	mov	r0, r25
    1dc0:	03 94       	inc	r0
    1dc2:	00 0c       	add	r0, r0
    1dc4:	11 f4       	brne	.+4      	; 0x1dca <__fp_round+0xc>
    1dc6:	88 23       	and	r24, r24
    1dc8:	52 f0       	brmi	.+20     	; 0x1dde <__fp_round+0x20>
    1dca:	bb 0f       	add	r27, r27
    1dcc:	40 f4       	brcc	.+16     	; 0x1dde <__fp_round+0x20>
    1dce:	bf 2b       	or	r27, r31
    1dd0:	11 f4       	brne	.+4      	; 0x1dd6 <__fp_round+0x18>
    1dd2:	60 ff       	sbrs	r22, 0
    1dd4:	04 c0       	rjmp	.+8      	; 0x1dde <__fp_round+0x20>
    1dd6:	6f 5f       	subi	r22, 0xFF	; 255
    1dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dda:	8f 4f       	sbci	r24, 0xFF	; 255
    1ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dde:	08 95       	ret

00001de0 <__fp_split3>:
    1de0:	57 fd       	sbrc	r21, 7
    1de2:	90 58       	subi	r25, 0x80	; 128
    1de4:	44 0f       	add	r20, r20
    1de6:	55 1f       	adc	r21, r21
    1de8:	59 f0       	breq	.+22     	; 0x1e00 <__fp_splitA+0x10>
    1dea:	5f 3f       	cpi	r21, 0xFF	; 255
    1dec:	71 f0       	breq	.+28     	; 0x1e0a <__fp_splitA+0x1a>
    1dee:	47 95       	ror	r20

00001df0 <__fp_splitA>:
    1df0:	88 0f       	add	r24, r24
    1df2:	97 fb       	bst	r25, 7
    1df4:	99 1f       	adc	r25, r25
    1df6:	61 f0       	breq	.+24     	; 0x1e10 <__fp_splitA+0x20>
    1df8:	9f 3f       	cpi	r25, 0xFF	; 255
    1dfa:	79 f0       	breq	.+30     	; 0x1e1a <__fp_splitA+0x2a>
    1dfc:	87 95       	ror	r24
    1dfe:	08 95       	ret
    1e00:	12 16       	cp	r1, r18
    1e02:	13 06       	cpc	r1, r19
    1e04:	14 06       	cpc	r1, r20
    1e06:	55 1f       	adc	r21, r21
    1e08:	f2 cf       	rjmp	.-28     	; 0x1dee <__fp_split3+0xe>
    1e0a:	46 95       	lsr	r20
    1e0c:	f1 df       	rcall	.-30     	; 0x1df0 <__fp_splitA>
    1e0e:	08 c0       	rjmp	.+16     	; 0x1e20 <__fp_splitA+0x30>
    1e10:	16 16       	cp	r1, r22
    1e12:	17 06       	cpc	r1, r23
    1e14:	18 06       	cpc	r1, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	f1 cf       	rjmp	.-30     	; 0x1dfc <__fp_splitA+0xc>
    1e1a:	86 95       	lsr	r24
    1e1c:	71 05       	cpc	r23, r1
    1e1e:	61 05       	cpc	r22, r1
    1e20:	08 94       	sec
    1e22:	08 95       	ret

00001e24 <__fp_zero>:
    1e24:	e8 94       	clt

00001e26 <__fp_szero>:
    1e26:	bb 27       	eor	r27, r27
    1e28:	66 27       	eor	r22, r22
    1e2a:	77 27       	eor	r23, r23
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	97 f9       	bld	r25, 7
    1e30:	08 95       	ret

00001e32 <__mulsf3>:
    1e32:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <__mulsf3x>
    1e36:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <__fp_round>
    1e3a:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__fp_pscA>
    1e3e:	38 f0       	brcs	.+14     	; 0x1e4e <__mulsf3+0x1c>
    1e40:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__fp_pscB>
    1e44:	20 f0       	brcs	.+8      	; 0x1e4e <__mulsf3+0x1c>
    1e46:	95 23       	and	r25, r21
    1e48:	11 f0       	breq	.+4      	; 0x1e4e <__mulsf3+0x1c>
    1e4a:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <__fp_inf>
    1e4e:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__fp_nan>
    1e52:	11 24       	eor	r1, r1
    1e54:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__fp_szero>

00001e58 <__mulsf3x>:
    1e58:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__fp_split3>
    1e5c:	70 f3       	brcs	.-36     	; 0x1e3a <__mulsf3+0x8>

00001e5e <__mulsf3_pse>:
    1e5e:	95 9f       	mul	r25, r21
    1e60:	c1 f3       	breq	.-16     	; 0x1e52 <__mulsf3+0x20>
    1e62:	95 0f       	add	r25, r21
    1e64:	50 e0       	ldi	r21, 0x00	; 0
    1e66:	55 1f       	adc	r21, r21
    1e68:	62 9f       	mul	r22, r18
    1e6a:	f0 01       	movw	r30, r0
    1e6c:	72 9f       	mul	r23, r18
    1e6e:	bb 27       	eor	r27, r27
    1e70:	f0 0d       	add	r31, r0
    1e72:	b1 1d       	adc	r27, r1
    1e74:	63 9f       	mul	r22, r19
    1e76:	aa 27       	eor	r26, r26
    1e78:	f0 0d       	add	r31, r0
    1e7a:	b1 1d       	adc	r27, r1
    1e7c:	aa 1f       	adc	r26, r26
    1e7e:	64 9f       	mul	r22, r20
    1e80:	66 27       	eor	r22, r22
    1e82:	b0 0d       	add	r27, r0
    1e84:	a1 1d       	adc	r26, r1
    1e86:	66 1f       	adc	r22, r22
    1e88:	82 9f       	mul	r24, r18
    1e8a:	22 27       	eor	r18, r18
    1e8c:	b0 0d       	add	r27, r0
    1e8e:	a1 1d       	adc	r26, r1
    1e90:	62 1f       	adc	r22, r18
    1e92:	73 9f       	mul	r23, r19
    1e94:	b0 0d       	add	r27, r0
    1e96:	a1 1d       	adc	r26, r1
    1e98:	62 1f       	adc	r22, r18
    1e9a:	83 9f       	mul	r24, r19
    1e9c:	a0 0d       	add	r26, r0
    1e9e:	61 1d       	adc	r22, r1
    1ea0:	22 1f       	adc	r18, r18
    1ea2:	74 9f       	mul	r23, r20
    1ea4:	33 27       	eor	r19, r19
    1ea6:	a0 0d       	add	r26, r0
    1ea8:	61 1d       	adc	r22, r1
    1eaa:	23 1f       	adc	r18, r19
    1eac:	84 9f       	mul	r24, r20
    1eae:	60 0d       	add	r22, r0
    1eb0:	21 1d       	adc	r18, r1
    1eb2:	82 2f       	mov	r24, r18
    1eb4:	76 2f       	mov	r23, r22
    1eb6:	6a 2f       	mov	r22, r26
    1eb8:	11 24       	eor	r1, r1
    1eba:	9f 57       	subi	r25, 0x7F	; 127
    1ebc:	50 40       	sbci	r21, 0x00	; 0
    1ebe:	9a f0       	brmi	.+38     	; 0x1ee6 <__mulsf3_pse+0x88>
    1ec0:	f1 f0       	breq	.+60     	; 0x1efe <__mulsf3_pse+0xa0>
    1ec2:	88 23       	and	r24, r24
    1ec4:	4a f0       	brmi	.+18     	; 0x1ed8 <__mulsf3_pse+0x7a>
    1ec6:	ee 0f       	add	r30, r30
    1ec8:	ff 1f       	adc	r31, r31
    1eca:	bb 1f       	adc	r27, r27
    1ecc:	66 1f       	adc	r22, r22
    1ece:	77 1f       	adc	r23, r23
    1ed0:	88 1f       	adc	r24, r24
    1ed2:	91 50       	subi	r25, 0x01	; 1
    1ed4:	50 40       	sbci	r21, 0x00	; 0
    1ed6:	a9 f7       	brne	.-22     	; 0x1ec2 <__mulsf3_pse+0x64>
    1ed8:	9e 3f       	cpi	r25, 0xFE	; 254
    1eda:	51 05       	cpc	r21, r1
    1edc:	80 f0       	brcs	.+32     	; 0x1efe <__mulsf3_pse+0xa0>
    1ede:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <__fp_inf>
    1ee2:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__fp_szero>
    1ee6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ee8:	e4 f3       	brlt	.-8      	; 0x1ee2 <__mulsf3_pse+0x84>
    1eea:	98 3e       	cpi	r25, 0xE8	; 232
    1eec:	d4 f3       	brlt	.-12     	; 0x1ee2 <__mulsf3_pse+0x84>
    1eee:	86 95       	lsr	r24
    1ef0:	77 95       	ror	r23
    1ef2:	67 95       	ror	r22
    1ef4:	b7 95       	ror	r27
    1ef6:	f7 95       	ror	r31
    1ef8:	e7 95       	ror	r30
    1efa:	9f 5f       	subi	r25, 0xFF	; 255
    1efc:	c1 f7       	brne	.-16     	; 0x1eee <__mulsf3_pse+0x90>
    1efe:	fe 2b       	or	r31, r30
    1f00:	88 0f       	add	r24, r24
    1f02:	91 1d       	adc	r25, r1
    1f04:	96 95       	lsr	r25
    1f06:	87 95       	ror	r24
    1f08:	97 f9       	bld	r25, 7
    1f0a:	08 95       	ret

00001f0c <__divmodhi4>:
    1f0c:	97 fb       	bst	r25, 7
    1f0e:	07 2e       	mov	r0, r23
    1f10:	16 f4       	brtc	.+4      	; 0x1f16 <__divmodhi4+0xa>
    1f12:	00 94       	com	r0
    1f14:	07 d0       	rcall	.+14     	; 0x1f24 <__divmodhi4_neg1>
    1f16:	77 fd       	sbrc	r23, 7
    1f18:	09 d0       	rcall	.+18     	; 0x1f2c <__divmodhi4_neg2>
    1f1a:	0e 94 05 10 	call	0x200a	; 0x200a <__udivmodhi4>
    1f1e:	07 fc       	sbrc	r0, 7
    1f20:	05 d0       	rcall	.+10     	; 0x1f2c <__divmodhi4_neg2>
    1f22:	3e f4       	brtc	.+14     	; 0x1f32 <__divmodhi4_exit>

00001f24 <__divmodhi4_neg1>:
    1f24:	90 95       	com	r25
    1f26:	81 95       	neg	r24
    1f28:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2a:	08 95       	ret

00001f2c <__divmodhi4_neg2>:
    1f2c:	70 95       	com	r23
    1f2e:	61 95       	neg	r22
    1f30:	7f 4f       	sbci	r23, 0xFF	; 255

00001f32 <__divmodhi4_exit>:
    1f32:	08 95       	ret

00001f34 <__udivmodsi4>:
    1f34:	a1 e2       	ldi	r26, 0x21	; 33
    1f36:	1a 2e       	mov	r1, r26
    1f38:	aa 1b       	sub	r26, r26
    1f3a:	bb 1b       	sub	r27, r27
    1f3c:	fd 01       	movw	r30, r26
    1f3e:	0d c0       	rjmp	.+26     	; 0x1f5a <__udivmodsi4_ep>

00001f40 <__udivmodsi4_loop>:
    1f40:	aa 1f       	adc	r26, r26
    1f42:	bb 1f       	adc	r27, r27
    1f44:	ee 1f       	adc	r30, r30
    1f46:	ff 1f       	adc	r31, r31
    1f48:	a2 17       	cp	r26, r18
    1f4a:	b3 07       	cpc	r27, r19
    1f4c:	e4 07       	cpc	r30, r20
    1f4e:	f5 07       	cpc	r31, r21
    1f50:	20 f0       	brcs	.+8      	; 0x1f5a <__udivmodsi4_ep>
    1f52:	a2 1b       	sub	r26, r18
    1f54:	b3 0b       	sbc	r27, r19
    1f56:	e4 0b       	sbc	r30, r20
    1f58:	f5 0b       	sbc	r31, r21

00001f5a <__udivmodsi4_ep>:
    1f5a:	66 1f       	adc	r22, r22
    1f5c:	77 1f       	adc	r23, r23
    1f5e:	88 1f       	adc	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	1a 94       	dec	r1
    1f64:	69 f7       	brne	.-38     	; 0x1f40 <__udivmodsi4_loop>
    1f66:	60 95       	com	r22
    1f68:	70 95       	com	r23
    1f6a:	80 95       	com	r24
    1f6c:	90 95       	com	r25
    1f6e:	9b 01       	movw	r18, r22
    1f70:	ac 01       	movw	r20, r24
    1f72:	bd 01       	movw	r22, r26
    1f74:	cf 01       	movw	r24, r30
    1f76:	08 95       	ret

00001f78 <__tablejump2__>:
    1f78:	ee 0f       	add	r30, r30
    1f7a:	ff 1f       	adc	r31, r31
    1f7c:	05 90       	lpm	r0, Z+
    1f7e:	f4 91       	lpm	r31, Z
    1f80:	e0 2d       	mov	r30, r0
    1f82:	09 94       	ijmp

00001f84 <__umulhisi3>:
    1f84:	a2 9f       	mul	r26, r18
    1f86:	b0 01       	movw	r22, r0
    1f88:	b3 9f       	mul	r27, r19
    1f8a:	c0 01       	movw	r24, r0
    1f8c:	a3 9f       	mul	r26, r19
    1f8e:	70 0d       	add	r23, r0
    1f90:	81 1d       	adc	r24, r1
    1f92:	11 24       	eor	r1, r1
    1f94:	91 1d       	adc	r25, r1
    1f96:	b2 9f       	mul	r27, r18
    1f98:	70 0d       	add	r23, r0
    1f9a:	81 1d       	adc	r24, r1
    1f9c:	11 24       	eor	r1, r1
    1f9e:	91 1d       	adc	r25, r1
    1fa0:	08 95       	ret

00001fa2 <__muluhisi3>:
    1fa2:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__umulhisi3>
    1fa6:	a5 9f       	mul	r26, r21
    1fa8:	90 0d       	add	r25, r0
    1faa:	b4 9f       	mul	r27, r20
    1fac:	90 0d       	add	r25, r0
    1fae:	a4 9f       	mul	r26, r20
    1fb0:	80 0d       	add	r24, r0
    1fb2:	91 1d       	adc	r25, r1
    1fb4:	11 24       	eor	r1, r1
    1fb6:	08 95       	ret

00001fb8 <__mulshisi3>:
    1fb8:	b7 ff       	sbrs	r27, 7
    1fba:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__muluhisi3>

00001fbe <__mulohisi3>:
    1fbe:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__muluhisi3>
    1fc2:	82 1b       	sub	r24, r18
    1fc4:	93 0b       	sbc	r25, r19
    1fc6:	08 95       	ret

00001fc8 <__adddi3_s8>:
    1fc8:	00 24       	eor	r0, r0
    1fca:	a7 fd       	sbrc	r26, 7
    1fcc:	00 94       	com	r0
    1fce:	2a 0f       	add	r18, r26
    1fd0:	30 1d       	adc	r19, r0
    1fd2:	40 1d       	adc	r20, r0
    1fd4:	50 1d       	adc	r21, r0
    1fd6:	60 1d       	adc	r22, r0
    1fd8:	70 1d       	adc	r23, r0
    1fda:	80 1d       	adc	r24, r0
    1fdc:	90 1d       	adc	r25, r0
    1fde:	08 95       	ret

00001fe0 <__cmpdi2>:
    1fe0:	2a 15       	cp	r18, r10
    1fe2:	3b 05       	cpc	r19, r11
    1fe4:	4c 05       	cpc	r20, r12
    1fe6:	5d 05       	cpc	r21, r13
    1fe8:	6e 05       	cpc	r22, r14
    1fea:	7f 05       	cpc	r23, r15
    1fec:	80 07       	cpc	r24, r16
    1fee:	91 07       	cpc	r25, r17
    1ff0:	08 95       	ret

00001ff2 <__cmpdi2_s8>:
    1ff2:	00 24       	eor	r0, r0
    1ff4:	a7 fd       	sbrc	r26, 7
    1ff6:	00 94       	com	r0
    1ff8:	2a 17       	cp	r18, r26
    1ffa:	30 05       	cpc	r19, r0
    1ffc:	40 05       	cpc	r20, r0
    1ffe:	50 05       	cpc	r21, r0
    2000:	60 05       	cpc	r22, r0
    2002:	70 05       	cpc	r23, r0
    2004:	80 05       	cpc	r24, r0
    2006:	90 05       	cpc	r25, r0
    2008:	08 95       	ret

0000200a <__udivmodhi4>:
    200a:	aa 1b       	sub	r26, r26
    200c:	bb 1b       	sub	r27, r27
    200e:	51 e1       	ldi	r21, 0x11	; 17
    2010:	07 c0       	rjmp	.+14     	; 0x2020 <__udivmodhi4_ep>

00002012 <__udivmodhi4_loop>:
    2012:	aa 1f       	adc	r26, r26
    2014:	bb 1f       	adc	r27, r27
    2016:	a6 17       	cp	r26, r22
    2018:	b7 07       	cpc	r27, r23
    201a:	10 f0       	brcs	.+4      	; 0x2020 <__udivmodhi4_ep>
    201c:	a6 1b       	sub	r26, r22
    201e:	b7 0b       	sbc	r27, r23

00002020 <__udivmodhi4_ep>:
    2020:	88 1f       	adc	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	5a 95       	dec	r21
    2026:	a9 f7       	brne	.-22     	; 0x2012 <__udivmodhi4_loop>
    2028:	80 95       	com	r24
    202a:	90 95       	com	r25
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	08 95       	ret

00002032 <_exit>:
    2032:	f8 94       	cli

00002034 <__stop_program>:
    2034:	ff cf       	rjmp	.-2      	; 0x2034 <__stop_program>
