
I2C_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000266  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000925  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064b  00000000  00000000  00000cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b4  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000559  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000395  00000000  00000000  00001df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000218a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

#include "MCAL/I2C Module/I2C.h"


int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x6>
  88:	1f 92       	push	r1
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_data[3]={0};
  8e:	19 82       	std	Y+1, r1	; 0x01
  90:	1a 82       	std	Y+2, r1	; 0x02
  92:	1b 82       	std	Y+3, r1	; 0x03
	DIO_PORTA_DIR = 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	8a bb       	out	0x1a, r24	; 26
	DIO_PORTB_DIR = 0xFF;
  98:	87 bb       	out	0x17, r24	; 23
	DIO_PORTD_DIR = 0xFF;
  9a:	81 bb       	out	0x11, r24	; 17
	I2C_SlaveInit(0x10);
  9c:	80 e1       	ldi	r24, 0x10	; 16
  9e:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_SlaveInit>
    /* Replace with your application code */
    while (1)
    {
	    switch(I2C_SlaveCheck())
  a2:	0e 94 79 00 	call	0xf2	; 0xf2 <I2C_SlaveCheck>
  a6:	8c 30       	cpi	r24, 0x0C	; 12
  a8:	19 f0       	breq	.+6      	; 0xb0 <main+0x2e>
  aa:	8d 30       	cpi	r24, 0x0D	; 13
  ac:	31 f0       	breq	.+12     	; 0xba <main+0x38>
  ae:	0b c0       	rjmp	.+22     	; 0xc6 <main+0x44>
	    {
			case I2C_STATUS_SLAVE_READ:	
				I2C_SlaveReceive(u8_data);
  b0:	ce 01       	movw	r24, r28
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	0e 94 ed 00 	call	0x1da	; 0x1da <I2C_SlaveReceive>
				break;
  b8:	06 c0       	rjmp	.+12     	; 0xc6 <main+0x44>
			case I2C_STATUS_SLAVE_WRITE:
				I2C_SlaveSend(u8_data,3);
  ba:	63 e0       	ldi	r22, 0x03	; 3
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	ce 01       	movw	r24, r28
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	0e 94 09 01 	call	0x212	; 0x212 <I2C_SlaveSend>
				break;
			default:
				break;
		}
		DIO_PORTA_DATA = u8_data[0];
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTB_DATA = u8_data[1];
  ca:	8a 81       	ldd	r24, Y+2	; 0x02
  cc:	88 bb       	out	0x18, r24	; 24
		DIO_PORTD_DATA = u8_data[2];
  ce:	8b 81       	ldd	r24, Y+3	; 0x03
  d0:	82 bb       	out	0x12, r24	; 18
    }
  d2:	e7 cf       	rjmp	.-50     	; 0xa2 <main+0x20>

000000d4 <I2C_SlaveInit>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is already initialized */
	if (I2C_STATUS_INIT == genuI2C_Status)
  d4:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d8:	97 30       	cpi	r25, 0x07	; 7
  da:	49 f0       	breq	.+18     	; 0xee <I2C_SlaveInit+0x1a>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Set own slave address of the device */
	I2C_TWAR_REG = u8_OwnSlaveAddress << 1;
  dc:	88 0f       	add	r24, r24
  de:	82 b9       	out	0x02, r24	; 2
	I2C_ENABLE_FLAG_ACK;
  e0:	84 ec       	ldi	r24, 0xC4	; 196
  e2:	86 bf       	out	0x36, r24	; 54
	/* Set the I2C Module State to Initialized*/
	genuI2C_Status = I2C_STATUS_INIT;
  e4:	87 e0       	ldi	r24, 0x07	; 7
  e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return I2C_STATUS_ERROR_OK;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is already initialized */
	if (I2C_STATUS_INIT == genuI2C_Status)
	{
		return I2C_STATUS_ALREADY_INIT;
  ee:	88 e0       	ldi	r24, 0x08	; 8
	I2C_TWAR_REG = u8_OwnSlaveAddress << 1;
	I2C_ENABLE_FLAG_ACK;
	/* Set the I2C Module State to Initialized*/
	genuI2C_Status = I2C_STATUS_INIT;
	return I2C_STATUS_ERROR_OK;
}
  f0:	08 95       	ret

000000f2 <I2C_SlaveCheck>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
  f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f6:	87 30       	cpi	r24, 0x07	; 7
  f8:	99 f4       	brne	.+38     	; 0x120 <I2C_SlaveCheck+0x2e>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_status;
	
	while(!(I2C_TWCR_REG & (1<<I2C_TWCR_TWINT)));
  fa:	06 b6       	in	r0, 0x36	; 54
  fc:	07 fe       	sbrs	r0, 7
  fe:	fd cf       	rjmp	.-6      	; 0xfa <I2C_SlaveCheck+0x8>
	u8_status = I2C_readSTATUS();
 100:	81 b1       	in	r24, 0x01	; 1
 102:	88 7f       	andi	r24, 0xF8	; 248
	
	if((u8_status==I2C_SLV_OWN_ADDRESS_W) || (u8_status==I2C_SLV_ACK_RETURNED_W))
 104:	80 36       	cpi	r24, 0x60	; 96
 106:	71 f0       	breq	.+28     	; 0x124 <I2C_SlaveCheck+0x32>
 108:	88 36       	cpi	r24, 0x68	; 104
 10a:	71 f0       	breq	.+28     	; 0x128 <I2C_SlaveCheck+0x36>
	return I2C_STATUS_SLAVE_READ;
	if((u8_status == I2C_SLV_OWN_ADDRESS_R) || (u8_status== I2C_SLV_ACK_RETURNED_R))
 10c:	88 3a       	cpi	r24, 0xA8	; 168
 10e:	71 f0       	breq	.+28     	; 0x12c <I2C_SlaveCheck+0x3a>
 110:	80 3b       	cpi	r24, 0xB0	; 176
 112:	71 f0       	breq	.+28     	; 0x130 <I2C_SlaveCheck+0x3e>
	return I2C_STATUS_SLAVE_WRITE;
	if((u8_status == I2C_SLV_GNRL_CALL) || (u8_status== I2C_SLV_GNRL_CALL_ARB_LST))
 114:	80 37       	cpi	r24, 0x70	; 112
 116:	71 f0       	breq	.+28     	; 0x134 <I2C_SlaveCheck+0x42>
 118:	88 37       	cpi	r24, 0x78	; 120
 11a:	71 f4       	brne	.+28     	; 0x138 <I2C_SlaveCheck+0x46>
	return I2C_STATUS_SLAVE_GNRL_CALL;
 11c:	8e e0       	ldi	r24, 0x0E	; 14
 11e:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	08 95       	ret
	
	while(!(I2C_TWCR_REG & (1<<I2C_TWCR_TWINT)));
	u8_status = I2C_readSTATUS();
	
	if((u8_status==I2C_SLV_OWN_ADDRESS_W) || (u8_status==I2C_SLV_ACK_RETURNED_W))
	return I2C_STATUS_SLAVE_READ;
 124:	8c e0       	ldi	r24, 0x0C	; 12
 126:	08 95       	ret
 128:	8c e0       	ldi	r24, 0x0C	; 12
 12a:	08 95       	ret
	if((u8_status == I2C_SLV_OWN_ADDRESS_R) || (u8_status== I2C_SLV_ACK_RETURNED_R))
	return I2C_STATUS_SLAVE_WRITE;
 12c:	8d e0       	ldi	r24, 0x0D	; 13
 12e:	08 95       	ret
 130:	8d e0       	ldi	r24, 0x0D	; 13
 132:	08 95       	ret
	if((u8_status == I2C_SLV_GNRL_CALL) || (u8_status== I2C_SLV_GNRL_CALL_ARB_LST))
	return I2C_STATUS_SLAVE_GNRL_CALL;
 134:	8e e0       	ldi	r24, 0x0E	; 14
 136:	08 95       	ret
	
	return I2C_STATUS_SLAVE_DEAF;
 138:	8f e0       	ldi	r24, 0x0F	; 15
}
 13a:	08 95       	ret

0000013c <I2C_SlaveSendByte>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
 13c:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 140:	97 30       	cpi	r25, 0x07	; 7
 142:	e1 f4       	brne	.+56     	; 0x17c <I2C_SlaveSendByte+0x40>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_status;
	
	I2C_TWDR_REG = u8_data;
 144:	83 b9       	out	0x03, r24	; 3
	I2C_ENABLE_FLAG_ACK; 
 146:	84 ec       	ldi	r24, 0xC4	; 196
 148:	86 bf       	out	0x36, r24	; 54
	while(!(I2C_TWCR_REG & (1<<I2C_TWCR_TWINT)));
 14a:	06 b6       	in	r0, 0x36	; 54
 14c:	07 fe       	sbrs	r0, 7
 14e:	fd cf       	rjmp	.-6      	; 0x14a <I2C_SlaveSendByte+0xe>
	
	u8_status = I2C_readSTATUS();
 150:	81 b1       	in	r24, 0x01	; 1
 152:	88 7f       	andi	r24, 0xF8	; 248
	if(u8_status == I2C_SLV_STOP_REP_START)	
 154:	80 3a       	cpi	r24, 0xA0	; 160
 156:	29 f4       	brne	.+10     	; 0x162 <I2C_SlaveSendByte+0x26>
	{
		I2C_TWCR_REG |= (1<<I2C_TWCR_TWINT);
 158:	86 b7       	in	r24, 0x36	; 54
 15a:	80 68       	ori	r24, 0x80	; 128
 15c:	86 bf       	out	0x36, r24	; 54
		return I2C_STATUS_SLAVE_STOP;
 15e:	89 e0       	ldi	r24, 0x09	; 9
 160:	08 95       	ret
	}
	if(u8_status==I2C_SLV_ACK_BY_MASTER)
 162:	88 3b       	cpi	r24, 0xB8	; 184
 164:	69 f0       	breq	.+26     	; 0x180 <I2C_SlaveSendByte+0x44>
		return I2C_STATUS_SLAVE_ACK;
	if(u8_status==I2C_SLV_NACK_BY_MASTER)
 166:	80 3c       	cpi	r24, 0xC0	; 192
 168:	29 f4       	brne	.+10     	; 0x174 <I2C_SlaveSendByte+0x38>
	{
		I2C_TWCR_REG |= (1<<I2C_TWCR_TWINT);
 16a:	86 b7       	in	r24, 0x36	; 54
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	86 bf       	out	0x36, r24	; 54
		return I2C_STATUS_SLAVE_NACK;
 170:	8b e0       	ldi	r24, 0x0B	; 11
 172:	08 95       	ret
	}
	if(u8_status==I2C_SLV_LAST_DATA_ACK)
 174:	88 3c       	cpi	r24, 0xC8	; 200
 176:	31 f4       	brne	.+12     	; 0x184 <I2C_SlaveSendByte+0x48>
		return I2C_STATUS_SLAVE_NACK;	
 178:	8b e0       	ldi	r24, 0x0B	; 11
 17a:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
 17c:	86 e0       	ldi	r24, 0x06	; 6
 17e:	08 95       	ret
	{
		I2C_TWCR_REG |= (1<<I2C_TWCR_TWINT);
		return I2C_STATUS_SLAVE_STOP;
	}
	if(u8_status==I2C_SLV_ACK_BY_MASTER)
		return I2C_STATUS_SLAVE_ACK;
 180:	8a e0       	ldi	r24, 0x0A	; 10
 182:	08 95       	ret
		I2C_TWCR_REG |= (1<<I2C_TWCR_TWINT);
		return I2C_STATUS_SLAVE_NACK;
	}
	if(u8_status==I2C_SLV_LAST_DATA_ACK)
		return I2C_STATUS_SLAVE_NACK;	
	return I2C_STATUS_ERROR_NOK;
 184:	80 e0       	ldi	r24, 0x00	; 0
}
 186:	08 95       	ret

00000188 <I2C_SlaveReceiveByte>:
* Parameters (out): pu8_data - Pointer to Variable to hold the data received by the Master
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to receive byte from the master.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_SlaveReceiveByte(uint8_t *pu8_data)
{
 188:	fc 01       	movw	r30, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
 18a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 18e:	97 30       	cpi	r25, 0x07	; 7
 190:	01 f5       	brne	.+64     	; 0x1d2 <I2C_SlaveReceiveByte+0x4a>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_status;
	
	I2C_ENABLE_FLAG_ACK	;
 192:	84 ec       	ldi	r24, 0xC4	; 196
 194:	86 bf       	out	0x36, r24	; 54
	while(!(I2C_TWCR_REG & (1<<I2C_TWCR_TWINT)));
 196:	06 b6       	in	r0, 0x36	; 54
 198:	07 fe       	sbrs	r0, 7
 19a:	fd cf       	rjmp	.-6      	; 0x196 <I2C_SlaveReceiveByte+0xe>
	
	u8_status = I2C_readSTATUS();
 19c:	81 b1       	in	r24, 0x01	; 1
 19e:	88 7f       	andi	r24, 0xF8	; 248
	if((u8_status == I2C_SLV_ACK_DATA_RX) || (u8_status == I2C_SLV_ACK_GENERAL_CALL))
 1a0:	80 38       	cpi	r24, 0x80	; 128
 1a2:	11 f0       	breq	.+4      	; 0x1a8 <I2C_SlaveReceiveByte+0x20>
 1a4:	88 39       	cpi	r24, 0x98	; 152
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <I2C_SlaveReceiveByte+0x28>
	{
		*pu8_data = I2C_TWDR_REG;
 1a8:	83 b1       	in	r24, 0x03	; 3
 1aa:	80 83       	st	Z, r24
		return I2C_STATUS_SLAVE_ACK;
 1ac:	8a e0       	ldi	r24, 0x0A	; 10
 1ae:	08 95       	ret
	}else if((u8_status == I2C_SLV_NACK_DATA_RX) || (u8_status == I2C_SLV_NACK_GENERAL_CALL))
 1b0:	88 38       	cpi	r24, 0x88	; 136
 1b2:	11 f0       	breq	.+4      	; 0x1b8 <I2C_SlaveReceiveByte+0x30>
 1b4:	88 39       	cpi	r24, 0x98	; 152
 1b6:	21 f4       	brne	.+8      	; 0x1c0 <I2C_SlaveReceiveByte+0x38>
	{
		*pu8_data = I2C_TWDR_REG;
 1b8:	83 b1       	in	r24, 0x03	; 3
 1ba:	80 83       	st	Z, r24
		return I2C_STATUS_SLAVE_NACK;	
 1bc:	8b e0       	ldi	r24, 0x0B	; 11
 1be:	08 95       	ret
	}else if(u8_status == I2C_SLV_STOP_REP_START)		
 1c0:	80 3a       	cpi	r24, 0xA0	; 160
 1c2:	49 f4       	brne	.+18     	; 0x1d6 <I2C_SlaveReceiveByte+0x4e>
	{
		I2C_TWCR_REG |= (1<<I2C_TWCR_TWINT);
 1c4:	86 b7       	in	r24, 0x36	; 54
 1c6:	80 68       	ori	r24, 0x80	; 128
 1c8:	86 bf       	out	0x36, r24	; 54
		DIO_PORTB_DATA = 1<<0;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	88 bb       	out	0x18, r24	; 24
		return I2C_STATUS_SLAVE_STOP;
 1ce:	89 e0       	ldi	r24, 0x09	; 9
 1d0:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	08 95       	ret
	{
		I2C_TWCR_REG |= (1<<I2C_TWCR_TWINT);
		DIO_PORTB_DATA = 1<<0;
		return I2C_STATUS_SLAVE_STOP;
	}
	return I2C_STATUS_ERROR_NOK;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
}
 1d8:	08 95       	ret

000001da <I2C_SlaveReceive>:
* Parameters (out): pu8_data - Pointer to Variable to hold the data received by the Master
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to receive multiple bytes from the master.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_SlaveReceive(uint8_t *pu8_data)
{
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	ec 01       	movw	r28, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Check if the I2C module is not initialized */
if (I2C_STATUS_INIT != genuI2C_Status)
 1e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e4:	87 30       	cpi	r24, 0x07	; 7
 1e6:	79 f4       	brne	.+30     	; 0x206 <I2C_SlaveReceive+0x2c>
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <I2C_SlaveReceive+0x12>
/**************************************************************************************/
	do
	{
		if (I2C_SlaveReceiveByte(pu8_data) == I2C_STATUS_SLAVE_STOP)
			return I2C_STATUS_ERROR_OK;
		if(*(pu8_data++) == '\0') return I2C_STATUS_ERROR_OK;
 1ea:	e9 01       	movw	r28, r18
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	do
	{
		if (I2C_SlaveReceiveByte(pu8_data) == I2C_STATUS_SLAVE_STOP)
 1ec:	ce 01       	movw	r24, r28
 1ee:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_SlaveReceiveByte>
 1f2:	89 30       	cpi	r24, 0x09	; 9
 1f4:	51 f0       	breq	.+20     	; 0x20a <I2C_SlaveReceive+0x30>
			return I2C_STATUS_ERROR_OK;
		if(*(pu8_data++) == '\0') return I2C_STATUS_ERROR_OK;
 1f6:	9e 01       	movw	r18, r28
 1f8:	2f 5f       	subi	r18, 0xFF	; 255
 1fa:	3f 4f       	sbci	r19, 0xFF	; 255
 1fc:	88 81       	ld	r24, Y
 1fe:	81 11       	cpse	r24, r1
 200:	f4 cf       	rjmp	.-24     	; 0x1ea <I2C_SlaveReceive+0x10>
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	03 c0       	rjmp	.+6      	; 0x20c <I2C_SlaveReceive+0x32>
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Check if the I2C module is not initialized */
if (I2C_STATUS_INIT != genuI2C_Status)
{
	return I2C_STATUS_NOT_INIT;
 206:	86 e0       	ldi	r24, 0x06	; 6
 208:	01 c0       	rjmp	.+2      	; 0x20c <I2C_SlaveReceive+0x32>
/*								Function Implementation								  */
/**************************************************************************************/
	do
	{
		if (I2C_SlaveReceiveByte(pu8_data) == I2C_STATUS_SLAVE_STOP)
			return I2C_STATUS_ERROR_OK;
 20a:	81 e0       	ldi	r24, 0x01	; 1
		if(*(pu8_data++) == '\0') return I2C_STATUS_ERROR_OK;
	}while (1);
	return I2C_STATUS_ERROR_NOK;
}
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <I2C_SlaveSend>:
* Parameters (out): None
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to send multiple bytes to the master.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_SlaveSend(uint8_t *pu8_data, uint16_t u16_dataLength)
{
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	ec 01       	movw	r28, r24
 21c:	8b 01       	movw	r16, r22
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
 21e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 222:	87 30       	cpi	r24, 0x07	; 7
 224:	a1 f4       	brne	.+40     	; 0x24e <I2C_SlaveSend+0x3c>
 226:	02 c0       	rjmp	.+4      	; 0x22c <I2C_SlaveSend+0x1a>
	do
	{
		if (I2C_SlaveSendByte(*pu8_data) != I2C_STATUS_SLAVE_ACK)
			return I2C_STATUS_ERROR_OK;
		if(*(pu8_data++) == '\0') return I2C_STATUS_ERROR_OK;
	}while (u16_dataLength--);
 228:	8c 01       	movw	r16, r24
/**************************************************************************************/
	do
	{
		if (I2C_SlaveSendByte(*pu8_data) != I2C_STATUS_SLAVE_ACK)
			return I2C_STATUS_ERROR_OK;
		if(*(pu8_data++) == '\0') return I2C_STATUS_ERROR_OK;
 22a:	e9 01       	movw	r28, r18
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	do
	{
		if (I2C_SlaveSendByte(*pu8_data) != I2C_STATUS_SLAVE_ACK)
 22c:	88 81       	ld	r24, Y
 22e:	0e 94 9e 00 	call	0x13c	; 0x13c <I2C_SlaveSendByte>
 232:	8a 30       	cpi	r24, 0x0A	; 10
 234:	71 f4       	brne	.+28     	; 0x252 <I2C_SlaveSend+0x40>
			return I2C_STATUS_ERROR_OK;
		if(*(pu8_data++) == '\0') return I2C_STATUS_ERROR_OK;
 236:	9e 01       	movw	r18, r28
 238:	2f 5f       	subi	r18, 0xFF	; 255
 23a:	3f 4f       	sbci	r19, 0xFF	; 255
 23c:	88 81       	ld	r24, Y
 23e:	88 23       	and	r24, r24
 240:	51 f0       	breq	.+20     	; 0x256 <I2C_SlaveSend+0x44>
	}while (u16_dataLength--);
 242:	c8 01       	movw	r24, r16
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	01 2b       	or	r16, r17
 248:	79 f7       	brne	.-34     	; 0x228 <I2C_SlaveSend+0x16>
	return I2C_STATUS_ERROR_NOK;
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	05 c0       	rjmp	.+10     	; 0x258 <I2C_SlaveSend+0x46>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
 24e:	86 e0       	ldi	r24, 0x06	; 6
 250:	03 c0       	rjmp	.+6      	; 0x258 <I2C_SlaveSend+0x46>
/*								Function Implementation								  */
/**************************************************************************************/
	do
	{
		if (I2C_SlaveSendByte(*pu8_data) != I2C_STATUS_SLAVE_ACK)
			return I2C_STATUS_ERROR_OK;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	01 c0       	rjmp	.+2      	; 0x258 <I2C_SlaveSend+0x46>
		if(*(pu8_data++) == '\0') return I2C_STATUS_ERROR_OK;
 256:	81 e0       	ldi	r24, 0x01	; 1
	}while (u16_dataLength--);
	return I2C_STATUS_ERROR_NOK;
}
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
