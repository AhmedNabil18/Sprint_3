
Card.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015e  00800060  000012fc  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012e  008001be  008001be  000014ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032cc  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001004  00000000  00000000  00004ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f2f  00000000  00000000  00005bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c18  00000000  00000000  00007adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014c7  00000000  00000000  000086f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000033f4  00000000  00000000  00009bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  0000cfaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__vector_1>
       8:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__vector_2>
       c:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__vector_12>
      34:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__vector_13>
      38:	0c 94 34 09 	jmp	0x1268	; 0x1268 <__vector_14>
      3c:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3e       	cpi	r26, 0xEC	; 236
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c1 04 	call	0x982	; 0x982 <main>
      8a:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ATM_REQ_ISR>:
const uint8_t cgu8_ATM_SPI_CARD_Busy[3] = "CB";
/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/*--*-*-*- FUNCTIONS IMPLEMENTATION -*-*-*-*-*-*/
void ATM_REQ_ISR(void)
{	
	if(cgu8_ATM_Req == ATM_REQUESTED)
      92:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <cgu8_ATM_Req>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	19 f4       	brne	.+6      	; 0xa0 <ATM_REQ_ISR+0xe>
		cgu8_ATM_Req = ATM_NOT_REQUESTED;
      9a:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <cgu8_ATM_Req>
      9e:	08 95       	ret
	else
	{/* ATM Request Data from Card */
		cgu8_ATM_Req = ATM_REQUESTED;
      a0:	81 e0       	ldi	r24, 0x01	; 1
      a2:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <cgu8_ATM_Req>
		if (gu8_CardMode == CARD_MODE_ADMIN)
      a6:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <gu8_CardMode>
      aa:	81 11       	cpse	r24, r1
      ac:	0c c0       	rjmp	.+24     	; 0xc6 <ATM_REQ_ISR+0x34>
		{	
			DIO_PORTA_DATA = 0xFF;
      ae:	8f ef       	ldi	r24, 0xFF	; 255
      b0:	8b bb       	out	0x1b, r24	; 27
			SPI_SS_ENABLE();
      b2:	88 b3       	in	r24, 0x18	; 24
      b4:	8f 7e       	andi	r24, 0xEF	; 239
      b6:	88 bb       	out	0x18, r24	; 24
			Spi_MasterSendByte('*');
      b8:	8a e2       	ldi	r24, 0x2A	; 42
      ba:	0e 94 a2 07 	call	0xf44	; 0xf44 <Spi_MasterSendByte>
			SPI_SS_DISABLE();
      be:	88 b3       	in	r24, 0x18	; 24
      c0:	80 61       	ori	r24, 0x10	; 16
      c2:	88 bb       	out	0x18, r24	; 24
      c4:	08 95       	ret
		}else
		{
			gu8_USER_Mode_State = USER_BUSY;
      c6:	81 e0       	ldi	r24, 0x01	; 1
      c8:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <gu8_USER_Mode_State>
      cc:	08 95       	ret

000000ce <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	cf 5f       	subi	r28, 0xFF	; 255
      dc:	d1 09       	sbc	r29, r1
      de:	0f b6       	in	r0, 0x3f	; 63
      e0:	f8 94       	cli
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	0f be       	out	0x3f, r0	; 63
      e6:	cd bf       	out	0x3d, r28	; 61
      e8:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
      ea:	ce 01       	movw	r24, r28
      ec:	01 96       	adiw	r24, 0x01	; 1
      ee:	2f ef       	ldi	r18, 0xFF	; 255
      f0:	fc 01       	movw	r30, r24
      f2:	11 92       	st	Z+, r1
      f4:	2a 95       	dec	r18
      f6:	e9 f7       	brne	.-6      	; 0xf2 <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
      f8:	0e 94 9e 04 	call	0x93c	; 0x93c <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
      fc:	85 30       	cpi	r24, 0x05	; 5
      fe:	39 f4       	brne	.+14     	; 0x10e <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
     100:	b8 01       	movw	r22, r16
     102:	ce 01       	movw	r24, r28
     104:	01 96       	adiw	r24, 0x01	; 1
     106:	0e 94 76 08 	call	0x10ec	; 0x10ec <stringCopy>
		return APP_STATUS_ERROR_OK;
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	05 c0       	rjmp	.+10     	; 0x118 <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     10e:	81 30       	cpi	r24, 0x01	; 1
     110:	11 f0       	breq	.+4      	; 0x116 <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	01 c0       	rjmp	.+2      	; 0x118 <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
     116:	86 e0       	ldi	r24, 0x06	; 6
}
     118:	c1 50       	subi	r28, 0x01	; 1
     11a:	df 4f       	sbci	r29, 0xFF	; 255
     11c:	0f b6       	in	r0, 0x3f	; 63
     11e:	f8 94       	cli
     120:	de bf       	out	0x3e, r29	; 62
     122:	0f be       	out	0x3f, r0	; 63
     124:	cd bf       	out	0x3d, r28	; 61
     126:	df 91       	pop	r29
     128:	cf 91       	pop	r28
     12a:	1f 91       	pop	r17
     12c:	0f 91       	pop	r16
     12e:	08 95       	ret

00000130 <AppADMIN_getCardName>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD Holder Name by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card holder's name.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardName(uint8_t* pu8_data)
{
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card Holder Name: ") != TERMINAL_STATUS_ERROR_OK)
     136:	85 e6       	ldi	r24, 0x65	; 101
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 83 04 	call	0x906	; 0x906 <Terminal_Out>
     13e:	81 30       	cpi	r24, 0x01	; 1
     140:	c1 f4       	brne	.+48     	; 0x172 <AppADMIN_getCardName+0x42>
		return APP_STATUS_ERROR_NOK;
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     142:	ce 01       	movw	r24, r28
     144:	0e 94 67 00 	call	0xce	; 0xce <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     148:	81 30       	cpi	r24, 0x01	; 1
     14a:	29 f0       	breq	.+10     	; 0x156 <AppADMIN_getCardName+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     14c:	11 f0       	breq	.+4      	; 0x152 <AppADMIN_getCardName+0x22>
     14e:	86 30       	cpi	r24, 0x06	; 6
     150:	91 f4       	brne	.+36     	; 0x176 <AppADMIN_getCardName+0x46>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     152:	86 30       	cpi	r24, 0x06	; 6
     154:	b1 f3       	breq	.-20     	; 0x142 <AppADMIN_getCardName+0x12>
		
		
		if (pu8_data[MAX_NAME_LENGTH] == '\0')
     156:	89 85       	ldd	r24, Y+9	; 0x09
     158:	88 23       	and	r24, r24
     15a:	79 f0       	breq	.+30     	; 0x17a <AppADMIN_getCardName+0x4a>
			break;
		EmptyString(pu8_data);
     15c:	ce 01       	movw	r24, r28
     15e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid Name, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
     162:	88 e7       	ldi	r24, 0x78	; 120
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	0e 94 83 04 	call	0x906	; 0x906 <Terminal_Out>
     16a:	81 30       	cpi	r24, 0x01	; 1
     16c:	21 f3       	breq	.-56     	; 0x136 <AppADMIN_getCardName+0x6>
			return APP_STATUS_ERROR_NOK;
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	05 c0       	rjmp	.+10     	; 0x17c <AppADMIN_getCardName+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card Holder Name: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	03 c0       	rjmp	.+6      	; 0x17c <AppADMIN_getCardName+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	01 c0       	rjmp	.+2      	; 0x17c <AppADMIN_getCardName+0x4c>
			break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid Name, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     17a:	81 e0       	ldi	r24, 0x01	; 1
}
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	08 95       	ret

00000182 <AppADMIN_getCardPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardPAN(uint8_t* pu8_data)
{
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card PAN: ") != TERMINAL_STATUS_ERROR_OK)
     188:	89 e9       	ldi	r24, 0x99	; 153
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 83 04 	call	0x906	; 0x906 <Terminal_Out>
     190:	81 30       	cpi	r24, 0x01	; 1
     192:	c1 f4       	brne	.+48     	; 0x1c4 <AppADMIN_getCardPAN+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     194:	ce 01       	movw	r24, r28
     196:	0e 94 67 00 	call	0xce	; 0xce <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     19a:	81 30       	cpi	r24, 0x01	; 1
     19c:	29 f0       	breq	.+10     	; 0x1a8 <AppADMIN_getCardPAN+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     19e:	11 f0       	breq	.+4      	; 0x1a4 <AppADMIN_getCardPAN+0x22>
     1a0:	86 30       	cpi	r24, 0x06	; 6
     1a2:	91 f4       	brne	.+36     	; 0x1c8 <AppADMIN_getCardPAN+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     1a4:	86 30       	cpi	r24, 0x06	; 6
     1a6:	b1 f3       	breq	.-20     	; 0x194 <AppADMIN_getCardPAN+0x12>
		
		if (pu8_data[9] == '\0')
     1a8:	89 85       	ldd	r24, Y+9	; 0x09
     1aa:	88 23       	and	r24, r24
     1ac:	79 f0       	breq	.+30     	; 0x1cc <AppADMIN_getCardPAN+0x4a>
		break;
		EmptyString(pu8_data);
     1ae:	ce 01       	movw	r24, r28
     1b0:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
     1b4:	84 ea       	ldi	r24, 0xA4	; 164
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 83 04 	call	0x906	; 0x906 <Terminal_Out>
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	21 f3       	breq	.-56     	; 0x188 <AppADMIN_getCardPAN+0x6>
		return APP_STATUS_ERROR_NOK;
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	05 c0       	rjmp	.+10     	; 0x1ce <AppADMIN_getCardPAN+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card PAN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	03 c0       	rjmp	.+6      	; 0x1ce <AppADMIN_getCardPAN+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <AppADMIN_getCardPAN+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     1cc:	81 e0       	ldi	r24, 0x01	; 1
}
     1ce:	df 91       	pop	r29
     1d0:	cf 91       	pop	r28
     1d2:	08 95       	ret

000001d4 <AppADMIN_getCardPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardPIN(uint8_t* pu8_data)
{
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	Terminal_enablePasswordMode();
     1da:	0e 94 b9 04 	call	0x972	; 0x972 <Terminal_enablePasswordMode>
	do
	{
		if(Terminal_Out((uint8_t*)"Card PIN: ") != TERMINAL_STATUS_ERROR_OK)
     1de:	84 ec       	ldi	r24, 0xC4	; 196
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 83 04 	call	0x906	; 0x906 <Terminal_Out>
     1e6:	81 30       	cpi	r24, 0x01	; 1
     1e8:	d9 f4       	brne	.+54     	; 0x220 <AppADMIN_getCardPIN+0x4c>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     1ea:	ce 01       	movw	r24, r28
     1ec:	0e 94 67 00 	call	0xce	; 0xce <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     1f0:	81 30       	cpi	r24, 0x01	; 1
     1f2:	29 f0       	breq	.+10     	; 0x1fe <AppADMIN_getCardPIN+0x2a>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     1f4:	11 f0       	breq	.+4      	; 0x1fa <AppADMIN_getCardPIN+0x26>
     1f6:	86 30       	cpi	r24, 0x06	; 6
     1f8:	a9 f4       	brne	.+42     	; 0x224 <AppADMIN_getCardPIN+0x50>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     1fa:	86 30       	cpi	r24, 0x06	; 6
     1fc:	b1 f3       	breq	.-20     	; 0x1ea <AppADMIN_getCardPIN+0x16>
		
		if (pu8_data[4] == '\0')
     1fe:	8c 81       	ldd	r24, Y+4	; 0x04
     200:	88 23       	and	r24, r24
     202:	51 f0       	breq	.+20     	; 0x218 <AppADMIN_getCardPIN+0x44>
			break;
		EmptyString(pu8_data);
     204:	ce 01       	movw	r24, r28
     206:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
     20a:	8f ec       	ldi	r24, 0xCF	; 207
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 83 04 	call	0x906	; 0x906 <Terminal_Out>
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	21 f3       	breq	.-56     	; 0x1de <AppADMIN_getCardPIN+0xa>
     216:	08 c0       	rjmp	.+16     	; 0x228 <AppADMIN_getCardPIN+0x54>
			return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
     218:	0e 94 bd 04 	call	0x97a	; 0x97a <Terminal_disablePasswordMode>
	return APP_STATUS_ERROR_OK;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	05 c0       	rjmp	.+10     	; 0x22a <AppADMIN_getCardPIN+0x56>
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"Card PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	03 c0       	rjmp	.+6      	; 0x22a <AppADMIN_getCardPIN+0x56>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	01 c0       	rjmp	.+2      	; 0x22a <AppADMIN_getCardPIN+0x56>
		
		if (pu8_data[4] == '\0')
			break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     228:	80 e0       	ldi	r24, 0x00	; 0
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_ERROR_OK;
}
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <AppADMIN_saveCardData>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the EEPROM
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveCardData(strCardData_t* pstr_CardData)
{
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	ec 01       	movw	r28, r24
	if(Eeprom_24_writePage(CARD_NAME_PAGE_NUM, (pstr_CardData->au8_cardHolderName)) != EEPROM_24_STATUS_ERROR_OK)
     236:	bc 01       	movw	r22, r24
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	0e 94 bb 03 	call	0x776	; 0x776 <Eeprom_24_writePage>
     23e:	81 30       	cpi	r24, 0x01	; 1
     240:	b9 f5       	brne	.+110    	; 0x2b0 <AppADMIN_saveCardData+0x80>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     242:	2a e0       	ldi	r18, 0x0A	; 10
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	40 e0       	ldi	r20, 0x00	; 0
     248:	50 e0       	ldi	r21, 0x00	; 0
     24a:	60 e0       	ldi	r22, 0x00	; 0
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 c4 04 	call	0x988	; 0x988 <Delay_ms>
	if(Eeprom_24_writePage(CARD_PAN_PAGE_NUM, (pstr_CardData->au8_primaryAccountNumber)) != EEPROM_24_STATUS_ERROR_OK)
     256:	be 01       	movw	r22, r28
     258:	66 5f       	subi	r22, 0xF6	; 246
     25a:	7f 4f       	sbci	r23, 0xFF	; 255
     25c:	83 e0       	ldi	r24, 0x03	; 3
     25e:	0e 94 bb 03 	call	0x776	; 0x776 <Eeprom_24_writePage>
     262:	81 30       	cpi	r24, 0x01	; 1
     264:	39 f5       	brne	.+78     	; 0x2b4 <AppADMIN_saveCardData+0x84>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     266:	2a e0       	ldi	r18, 0x0A	; 10
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	40 e0       	ldi	r20, 0x00	; 0
     26c:	50 e0       	ldi	r21, 0x00	; 0
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 c4 04 	call	0x988	; 0x988 <Delay_ms>
	if(Eeprom_24_writePage(CARD_PIN_PAGE_NUM, (pstr_CardData->au8_pinNum)) != EEPROM_24_STATUS_ERROR_OK)
     27a:	be 01       	movw	r22, r28
     27c:	6c 5e       	subi	r22, 0xEC	; 236
     27e:	7f 4f       	sbci	r23, 0xFF	; 255
     280:	84 e0       	ldi	r24, 0x04	; 4
     282:	0e 94 bb 03 	call	0x776	; 0x776 <Eeprom_24_writePage>
     286:	81 30       	cpi	r24, 0x01	; 1
     288:	b9 f4       	brne	.+46     	; 0x2b8 <AppADMIN_saveCardData+0x88>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     28a:	2a e0       	ldi	r18, 0x0A	; 10
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 c4 04 	call	0x988	; 0x988 <Delay_ms>
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, CARD_INITIALIZED) != EEPROM_24_STATUS_ERROR_OK)
     29e:	6a ea       	ldi	r22, 0xAA	; 170
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 3e 03 	call	0x67c	; 0x67c <Eeprom_24_writeByte>
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	41 f0       	breq	.+16     	; 0x2bc <AppADMIN_saveCardData+0x8c>
		return APP_STATUS_ERROR_NOK;
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	07 c0       	rjmp	.+14     	; 0x2be <AppADMIN_saveCardData+0x8e>
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveCardData(strCardData_t* pstr_CardData)
{
	if(Eeprom_24_writePage(CARD_NAME_PAGE_NUM, (pstr_CardData->au8_cardHolderName)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	05 c0       	rjmp	.+10     	; 0x2be <AppADMIN_saveCardData+0x8e>
	Delay_ms(10);
	if(Eeprom_24_writePage(CARD_PAN_PAGE_NUM, (pstr_CardData->au8_primaryAccountNumber)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	03 c0       	rjmp	.+6      	; 0x2be <AppADMIN_saveCardData+0x8e>
	Delay_ms(10);
	if(Eeprom_24_writePage(CARD_PIN_PAGE_NUM, (pstr_CardData->au8_pinNum)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	01 c0       	rjmp	.+2      	; 0x2be <AppADMIN_saveCardData+0x8e>
	Delay_ms(10);
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, CARD_INITIALIZED) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     2bc:	81 e0       	ldi	r24, 0x01	; 1
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <AppUSER_sendCardData>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to send the Card's Data to the ATM.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_sendCardData(strCardData_t* pstr_CardData)
{
     2c4:	ef 92       	push	r14
     2c6:	ff 92       	push	r15
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	6e 97       	sbiw	r28, 0x1e	; 30
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	cd bf       	out	0x3d, r28	; 61
     2e0:	7c 01       	movw	r14, r24
	if(Terminal_Out((uint8_t*)"Data is being sent to the ATM...\r") != TERMINAL_STATUS_ERROR_OK)
     2e2:	8f ee       	ldi	r24, 0xEF	; 239
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 83 04 	call	0x906	; 0x906 <Terminal_Out>
     2ea:	81 30       	cpi	r24, 0x01	; 1
     2ec:	f1 f5       	brne	.+124    	; 0x36a <AppUSER_sendCardData+0xa6>
		return APP_STATUS_ERROR_NOK;
		
	uint8_t au8_DataFrame[30] = {0};
     2ee:	8e 01       	movw	r16, r28
     2f0:	0f 5f       	subi	r16, 0xFF	; 255
     2f2:	1f 4f       	sbci	r17, 0xFF	; 255
     2f4:	8e e1       	ldi	r24, 0x1E	; 30
     2f6:	f8 01       	movw	r30, r16
     2f8:	11 92       	st	Z+, r1
     2fa:	8a 95       	dec	r24
     2fc:	e9 f7       	brne	.-6      	; 0x2f8 <AppUSER_sendCardData+0x34>
	stringConcatenate(au8_DataFrame, (uint8_t*)"#");
     2fe:	61 e1       	ldi	r22, 0x11	; 17
     300:	71 e0       	ldi	r23, 0x01	; 1
     302:	c8 01       	movw	r24, r16
     304:	0e 94 3f 08 	call	0x107e	; 0x107e <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_cardHolderName);
     308:	b7 01       	movw	r22, r14
     30a:	c8 01       	movw	r24, r16
     30c:	0e 94 3f 08 	call	0x107e	; 0x107e <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"-");
     310:	64 e1       	ldi	r22, 0x14	; 20
     312:	71 e0       	ldi	r23, 0x01	; 1
     314:	c8 01       	movw	r24, r16
     316:	0e 94 3f 08 	call	0x107e	; 0x107e <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_primaryAccountNumber);
     31a:	b7 01       	movw	r22, r14
     31c:	66 5f       	subi	r22, 0xF6	; 246
     31e:	7f 4f       	sbci	r23, 0xFF	; 255
     320:	c8 01       	movw	r24, r16
     322:	0e 94 3f 08 	call	0x107e	; 0x107e <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"-");
     326:	64 e1       	ldi	r22, 0x14	; 20
     328:	71 e0       	ldi	r23, 0x01	; 1
     32a:	c8 01       	movw	r24, r16
     32c:	0e 94 3f 08 	call	0x107e	; 0x107e <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_pinNum);
     330:	b7 01       	movw	r22, r14
     332:	6c 5e       	subi	r22, 0xEC	; 236
     334:	7f 4f       	sbci	r23, 0xFF	; 255
     336:	c8 01       	movw	r24, r16
     338:	0e 94 3f 08 	call	0x107e	; 0x107e <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"#-");
     33c:	63 e1       	ldi	r22, 0x13	; 19
     33e:	71 e0       	ldi	r23, 0x01	; 1
     340:	c8 01       	movw	r24, r16
     342:	0e 94 3f 08 	call	0x107e	; 0x107e <stringConcatenate>
	
	SPI_SS_ENABLE();
     346:	88 b3       	in	r24, 0x18	; 24
     348:	8f 7e       	andi	r24, 0xEF	; 239
     34a:	88 bb       	out	0x18, r24	; 24
	if(Spi_MasterSendPacket(au8_DataFrame, stringLength(au8_DataFrame)) != SPI_STATUS_ERROR_OK)
     34c:	c8 01       	movw	r24, r16
     34e:	0e 94 04 08 	call	0x1008	; 0x1008 <stringLength>
     352:	68 2f       	mov	r22, r24
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	c8 01       	movw	r24, r16
     358:	0e 94 b7 07 	call	0xf6e	; 0xf6e <Spi_MasterSendPacket>
     35c:	81 30       	cpi	r24, 0x01	; 1
     35e:	39 f4       	brne	.+14     	; 0x36e <AppUSER_sendCardData+0xaa>
		return APP_STATUS_ERROR_NOK;
	SPI_SS_DISABLE();
     360:	88 b3       	in	r24, 0x18	; 24
     362:	80 61       	ori	r24, 0x10	; 16
     364:	88 bb       	out	0x18, r24	; 24
	
	return APP_STATUS_ERROR_OK;
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	03 c0       	rjmp	.+6      	; 0x370 <AppUSER_sendCardData+0xac>
* Description: Function to send the Card's Data to the ATM.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_sendCardData(strCardData_t* pstr_CardData)
{
	if(Terminal_Out((uint8_t*)"Data is being sent to the ATM...\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	01 c0       	rjmp	.+2      	; 0x370 <AppUSER_sendCardData+0xac>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_pinNum);
	stringConcatenate(au8_DataFrame, (uint8_t*)"#-");
	
	SPI_SS_ENABLE();
	if(Spi_MasterSendPacket(au8_DataFrame, stringLength(au8_DataFrame)) != SPI_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     36e:	80 e0       	ldi	r24, 0x00	; 0
	SPI_SS_DISABLE();
	
	return APP_STATUS_ERROR_OK;
}
     370:	6e 96       	adiw	r28, 0x1e	; 30
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	f8 94       	cli
     376:	de bf       	out	0x3e, r29	; 62
     378:	0f be       	out	0x3f, r0	; 63
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	ff 90       	pop	r15
     386:	ef 90       	pop	r14
     388:	08 95       	ret

0000038a <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	a3 97       	sbiw	r28, 0x23	; 35
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
     39e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3a2:	84 30       	cpi	r24, 0x04	; 4
     3a4:	09 f0       	breq	.+2      	; 0x3a8 <App_update+0x1e>
     3a6:	ae c0       	rjmp	.+348    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
     3a8:	fe 01       	movw	r30, r28
     3aa:	31 96       	adiw	r30, 0x01	; 1
     3ac:	8a e0       	ldi	r24, 0x0A	; 10
     3ae:	df 01       	movw	r26, r30
     3b0:	1d 92       	st	X+, r1
     3b2:	8a 95       	dec	r24
     3b4:	e9 f7       	brne	.-6      	; 0x3b0 <App_update+0x26>
	if(gu8_CardMode == CARD_MODE_ADMIN)
     3b6:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <gu8_CardMode>
     3ba:	81 11       	cpse	r24, r1
     3bc:	4e c0       	rjmp	.+156    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
	{ /**************** PROGRAMMING MODE ****************/
			if(Terminal_Out((uint8_t*)"Programming Mode\rEnter the Following Data\r") != TERMINAL_STATUS_ERROR_OK)
     3be:	86 e1       	ldi	r24, 0x16	; 22
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	0e 94 83 04 	call	0x906	; 0x906 <Terminal_Out>
     3c6:	81 30       	cpi	r24, 0x01	; 1
     3c8:	09 f0       	breq	.+2      	; 0x3cc <App_update+0x42>
     3ca:	45 c0       	rjmp	.+138    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
				return APP_STATUS_ERROR_NOK;
			uint8_t au8_tempCardHolderName[10]={0};
     3cc:	2a e0       	ldi	r18, 0x0A	; 10
     3ce:	ce 01       	movw	r24, r28
     3d0:	45 96       	adiw	r24, 0x15	; 21
     3d2:	fc 01       	movw	r30, r24
     3d4:	32 2f       	mov	r19, r18
     3d6:	11 92       	st	Z+, r1
     3d8:	3a 95       	dec	r19
     3da:	e9 f7       	brne	.-6      	; 0x3d6 <App_update+0x4c>
			uint8_t au8_tempPAN[10]={0};
     3dc:	fe 01       	movw	r30, r28
     3de:	3b 96       	adiw	r30, 0x0b	; 11
     3e0:	df 01       	movw	r26, r30
     3e2:	1d 92       	st	X+, r1
     3e4:	2a 95       	dec	r18
     3e6:	e9 f7       	brne	.-6      	; 0x3e2 <App_update+0x58>
			uint8_t au8_tempPinNum[5]={0};
     3e8:	74 96       	adiw	r30, 0x14	; 20
     3ea:	25 e0       	ldi	r18, 0x05	; 5
     3ec:	df 01       	movw	r26, r30
     3ee:	1d 92       	st	X+, r1
     3f0:	2a 95       	dec	r18
     3f2:	e9 f7       	brne	.-6      	; 0x3ee <App_update+0x64>
		
			/* Get the Card Holder Name from the ADMIN Terminal */
			if(AppADMIN_getCardName(au8_tempCardHolderName) != APP_STATUS_ERROR_OK)
     3f4:	0e 94 98 00 	call	0x130	; 0x130 <AppADMIN_getCardName>
     3f8:	81 30       	cpi	r24, 0x01	; 1
     3fa:	69 f5       	brne	.+90     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
				return APP_STATUS_ERROR_NOK;
			/* Get the Card Primary Account Number from the ADMIN Terminal */
			if(AppADMIN_getCardPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     3fc:	ce 01       	movw	r24, r28
     3fe:	0b 96       	adiw	r24, 0x0b	; 11
     400:	0e 94 c1 00 	call	0x182	; 0x182 <AppADMIN_getCardPAN>
     404:	81 30       	cpi	r24, 0x01	; 1
     406:	39 f5       	brne	.+78     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			return APP_STATUS_ERROR_NOK;
		
			if(AppADMIN_getCardPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
     408:	ce 01       	movw	r24, r28
     40a:	4f 96       	adiw	r24, 0x1f	; 31
     40c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <AppADMIN_getCardPIN>
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	09 f5       	brne	.+66     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
				return APP_STATUS_ERROR_NOK;
		
			stringCopy(au8_tempCardHolderName, gstr_userCardData.au8_cardHolderName);
     414:	6e eb       	ldi	r22, 0xBE	; 190
     416:	71 e0       	ldi	r23, 0x01	; 1
     418:	ce 01       	movw	r24, r28
     41a:	45 96       	adiw	r24, 0x15	; 21
     41c:	0e 94 76 08 	call	0x10ec	; 0x10ec <stringCopy>
			stringCopy(au8_tempPAN, gstr_userCardData.au8_primaryAccountNumber);
     420:	68 ec       	ldi	r22, 0xC8	; 200
     422:	71 e0       	ldi	r23, 0x01	; 1
     424:	ce 01       	movw	r24, r28
     426:	0b 96       	adiw	r24, 0x0b	; 11
     428:	0e 94 76 08 	call	0x10ec	; 0x10ec <stringCopy>
			stringCopy(au8_tempPinNum, gstr_userCardData.au8_pinNum);
     42c:	62 ed       	ldi	r22, 0xD2	; 210
     42e:	71 e0       	ldi	r23, 0x01	; 1
     430:	ce 01       	movw	r24, r28
     432:	4f 96       	adiw	r24, 0x1f	; 31
     434:	0e 94 76 08 	call	0x10ec	; 0x10ec <stringCopy>
		
			if(AppADMIN_saveCardData(&gstr_userCardData) != APP_STATUS_ERROR_OK)
     438:	8e eb       	ldi	r24, 0xBE	; 190
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 18 01 	call	0x230	; 0x230 <AppADMIN_saveCardData>
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	49 f4       	brne	.+18     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
				return APP_STATUS_ERROR_NOK;
		
			gu8_CardMode = CARD_MODE_USER;
     444:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <gu8_CardMode>
			if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     448:	81 e4       	ldi	r24, 0x41	; 65
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	0e 94 83 04 	call	0x906	; 0x906 <Terminal_Out>
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	09 f4       	brne	.+2      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     454:	4b c0       	rjmp	.+150    	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
	if(gu8_CardMode == CARD_MODE_ADMIN)
	{ /**************** PROGRAMMING MODE ****************/
			if(Terminal_Out((uint8_t*)"Programming Mode\rEnter the Following Data\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	5c c0       	rjmp	.+184    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
				return APP_STATUS_ERROR_NOK;
	/****************************************************************/
	}else
	{/************* User Mode **************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
     45a:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <gu8_ADMIN_Request>
     45e:	81 30       	cpi	r24, 0x01	; 1
     460:	31 f4       	brne	.+12     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
     462:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <gu8_USER_Mode_State>
     466:	81 11       	cpse	r24, r1
     468:	02 c0       	rjmp	.+4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			{
				gu8_CardMode = CARD_MODE_ADMIN;
     46a:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <gu8_CardMode>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
     46e:	ce 01       	movw	r24, r28
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	0e 94 67 00 	call	0xce	; 0xce <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	c9 f4       	brne	.+50     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
     47a:	68 eb       	ldi	r22, 0xB8	; 184
     47c:	71 e0       	ldi	r23, 0x01	; 1
     47e:	ce 01       	movw	r24, r28
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	0e 94 10 08 	call	0x1020	; 0x1020 <stringCompare>
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	a9 f4       	brne	.+42     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
     48a:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <gu8_USER_Mode_State>
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	49 f4       	brne	.+18     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
     492:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <gu8_ADMIN_Request>
						if(Terminal_Out((uint8_t*)"CARD is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
     496:	8c e4       	ldi	r24, 0x4C	; 76
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0e 94 83 04 	call	0x906	; 0x906 <Terminal_Out>
     49e:	81 30       	cpi	r24, 0x01	; 1
     4a0:	99 f5       	brne	.+102    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
     4a2:	08 c0       	rjmp	.+16     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The Card is not used by ATM */
					{
						gu8_CardMode = CARD_MODE_ADMIN;
     4a4:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <gu8_CardMode>
						return APP_STATUS_ERROR_OK;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	33 c0       	rjmp	.+102    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	11 f0       	breq	.+4      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
     4b0:	86 30       	cpi	r24, 0x06	; 6
     4b2:	61 f5       	brne	.+88     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
				return APP_STATUS_ERROR_NOK;
			/****************************************************************/
			if (cgu8_ATM_Req == ATM_REQUESTED)
     4b4:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <cgu8_ATM_Req>
     4b8:	81 30       	cpi	r24, 0x01	; 1
     4ba:	c1 f4       	brne	.+48     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
			{
				AppUSER_sendCardData(&gstr_userCardData);
     4bc:	8e eb       	ldi	r24, 0xBE	; 190
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <AppUSER_sendCardData>
				
				Delay_ms(100);
     4c4:	24 e6       	ldi	r18, 0x64	; 100
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 c4 04 	call	0x988	; 0x988 <Delay_ms>
				
				if (gu8_ADMIN_Request == ADMIN_NOT_REQUESTED)
     4d8:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <gu8_ADMIN_Request>
     4dc:	81 11       	cpse	r24, r1
     4de:	06 c0       	rjmp	.+12     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
				{
					if(Terminal_Out((uint8_t*)"Data Successfully Sent\r") != TERMINAL_STATUS_ERROR_OK)
     4e0:	81 e9       	ldi	r24, 0x91	; 145
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	0e 94 83 04 	call	0x906	; 0x906 <Terminal_Out>
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	91 f4       	brne	.+36     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
				}
			}
	/****************************************************************/
	}
	
	Delay_ms(155);
     4ec:	2b e9       	ldi	r18, 0x9B	; 155
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	40 e0       	ldi	r20, 0x00	; 0
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 c4 04 	call	0x988	; 0x988 <Delay_ms>
	return APP_STATUS_ERROR_OK;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	07 c0       	rjmp	.+14     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
     504:	85 e0       	ldi	r24, 0x05	; 5
     506:	05 c0       	rjmp	.+10     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"CARD is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	03 c0       	rjmp	.+6      	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
						gu8_CardMode = CARD_MODE_ADMIN;
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	01 c0       	rjmp	.+2      	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
				Delay_ms(100);
				
				if (gu8_ADMIN_Request == ADMIN_NOT_REQUESTED)
				{
					if(Terminal_Out((uint8_t*)"Data Successfully Sent\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     510:	80 e0       	ldi	r24, 0x00	; 0
	/****************************************************************/
	}
	
	Delay_ms(155);
	return APP_STATUS_ERROR_OK;
}
     512:	a3 96       	adiw	r28, 0x23	; 35
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <AppMemory_getCardData>:
* Parameters (out): pstr_CardData - Structure of data to hold the data saved in EEPROM.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the Card's data from eeprom.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppMemory_getCardData(strCardData_t* pstr_CardData)
{
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	ec 01       	movw	r28, r24
	if(Eeprom_24_readPage(CARD_NAME_PAGE_NUM, (pstr_CardData->au8_cardHolderName)) != EEPROM_24_STATUS_ERROR_OK)
     52a:	bc 01       	movw	r22, r24
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <Eeprom_24_readPage>
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	31 f5       	brne	.+76     	; 0x582 <AppMemory_getCardData+0x5e>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     536:	2a e0       	ldi	r18, 0x0A	; 10
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	40 e0       	ldi	r20, 0x00	; 0
     53c:	50 e0       	ldi	r21, 0x00	; 0
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 c4 04 	call	0x988	; 0x988 <Delay_ms>
	if(Eeprom_24_readPage(CARD_PAN_PAGE_NUM, (pstr_CardData->au8_primaryAccountNumber)) != EEPROM_24_STATUS_ERROR_OK)
     54a:	be 01       	movw	r22, r28
     54c:	66 5f       	subi	r22, 0xF6	; 246
     54e:	7f 4f       	sbci	r23, 0xFF	; 255
     550:	83 e0       	ldi	r24, 0x03	; 3
     552:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <Eeprom_24_readPage>
     556:	81 30       	cpi	r24, 0x01	; 1
     558:	b1 f4       	brne	.+44     	; 0x586 <AppMemory_getCardData+0x62>
	return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     55a:	2a e0       	ldi	r18, 0x0A	; 10
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	40 e0       	ldi	r20, 0x00	; 0
     560:	50 e0       	ldi	r21, 0x00	; 0
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 c4 04 	call	0x988	; 0x988 <Delay_ms>
	if(Eeprom_24_readPage(CARD_PIN_PAGE_NUM, (pstr_CardData->au8_pinNum)) != EEPROM_24_STATUS_ERROR_OK)
     56e:	be 01       	movw	r22, r28
     570:	6c 5e       	subi	r22, 0xEC	; 236
     572:	7f 4f       	sbci	r23, 0xFF	; 255
     574:	84 e0       	ldi	r24, 0x04	; 4
     576:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <Eeprom_24_readPage>
     57a:	81 30       	cpi	r24, 0x01	; 1
     57c:	31 f0       	breq	.+12     	; 0x58a <AppMemory_getCardData+0x66>
	return APP_STATUS_ERROR_NOK;
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	05 c0       	rjmp	.+10     	; 0x58c <AppMemory_getCardData+0x68>
* Description: Function to get the Card's data from eeprom.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppMemory_getCardData(strCardData_t* pstr_CardData)
{
	if(Eeprom_24_readPage(CARD_NAME_PAGE_NUM, (pstr_CardData->au8_cardHolderName)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	03 c0       	rjmp	.+6      	; 0x58c <AppMemory_getCardData+0x68>
	Delay_ms(10);
	if(Eeprom_24_readPage(CARD_PAN_PAGE_NUM, (pstr_CardData->au8_primaryAccountNumber)) != EEPROM_24_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	01 c0       	rjmp	.+2      	; 0x58c <AppMemory_getCardData+0x68>
	Delay_ms(10);
	if(Eeprom_24_readPage(CARD_PIN_PAGE_NUM, (pstr_CardData->au8_pinNum)) != EEPROM_24_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <App_init>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_init(void)
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	1f 92       	push	r1
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
     59c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     5a0:	84 30       	cpi	r24, 0x04	; 4
     5a2:	e9 f1       	breq	.+122    	; 0x61e <App_init+0x8c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
     5a4:	0e 94 2f 03 	call	0x65e	; 0x65e <Eeprom_24_init>
     5a8:	81 30       	cpi	r24, 0x01	; 1
     5aa:	81 f5       	brne	.+96     	; 0x60c <App_init+0x7a>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
     5ac:	0e 94 6e 04 	call	0x8dc	; 0x8dc <Terminal_init>
     5b0:	81 30       	cpi	r24, 0x01	; 1
     5b2:	71 f5       	brne	.+92     	; 0x610 <App_init+0x7e>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
     5b4:	0e 94 74 07 	call	0xee8	; 0xee8 <Spi_init>
     5b8:	81 30       	cpi	r24, 0x01	; 1
     5ba:	61 f5       	brne	.+88     	; 0x614 <App_init+0x82>
		return APP_STATUS_ERROR_NOK;
	
	Ext_INT0_init(EXT_INT0_EDGE_FALL_RISE);
     5bc:	0e 94 54 05 	call	0xaa8	; 0xaa8 <Ext_INT0_init>
	INT0_setCallBack(ATM_REQ_ISR);
     5c0:	89 e4       	ldi	r24, 0x49	; 73
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 5b 05 	call	0xab6	; 0xab6 <INT0_setCallBack>
	/* Only for Testing */
// 	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Terminal_Out((uint8_t*)"CARD Terminal\r") != TERMINAL_STATUS_ERROR_OK)
     5c8:	89 ea       	ldi	r24, 0xA9	; 169
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	0e 94 83 04 	call	0x906	; 0x906 <Terminal_Out>
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	11 f5       	brne	.+68     	; 0x618 <App_init+0x86>
		return APP_STATUS_ERROR_NOK;
	uint8_t u8_initData = 0;
     5d4:	19 82       	std	Y+1, r1	; 0x01
	/* Check if the card was previously registered and has its data in the eeprom */
	if(Eeprom_24_readByte(CARD_INIT_ADDRESS, &u8_initData) != EEPROM_24_STATUS_ERROR_OK)
     5d6:	be 01       	movw	r22, r28
     5d8:	6f 5f       	subi	r22, 0xFF	; 255
     5da:	7f 4f       	sbci	r23, 0xFF	; 255
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Eeprom_24_readByte>
     5e4:	81 30       	cpi	r24, 0x01	; 1
     5e6:	d1 f4       	brne	.+52     	; 0x61c <App_init+0x8a>
		return APP_STATUS_ERROR_NOK;
		
	if(u8_initData != CARD_INITIALIZED)
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	8a 3a       	cpi	r24, 0xAA	; 170
     5ec:	19 f0       	breq	.+6      	; 0x5f4 <App_init+0x62>
	{
		gu8_CardMode = CARD_MODE_ADMIN;
     5ee:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <gu8_CardMode>
     5f2:	07 c0       	rjmp	.+14     	; 0x602 <App_init+0x70>
	}else
	{
		gu8_CardMode = CARD_MODE_USER;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <gu8_CardMode>
		AppMemory_getCardData(&gstr_userCardData);
     5fa:	8e eb       	ldi	r24, 0xBE	; 190
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	0e 94 92 02 	call	0x524	; 0x524 <AppMemory_getCardData>
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     602:	84 e0       	ldi	r24, 0x04	; 4
     604:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return APP_STATUS_ERROR_OK;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	09 c0       	rjmp	.+18     	; 0x61e <App_init+0x8c>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	07 c0       	rjmp	.+14     	; 0x61e <App_init+0x8c>
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	05 c0       	rjmp	.+10     	; 0x61e <App_init+0x8c>
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	03 c0       	rjmp	.+6      	; 0x61e <App_init+0x8c>
// 	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Terminal_Out((uint8_t*)"CARD Terminal\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	01 c0       	rjmp	.+2      	; 0x61e <App_init+0x8c>
	uint8_t u8_initData = 0;
	/* Check if the card was previously registered and has its data in the eeprom */
	if(Eeprom_24_readByte(CARD_INIT_ADDRESS, &u8_initData) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     61c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     61e:	0f 90       	pop	r0
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
     626:	0e 94 c9 02 	call	0x592	; 0x592 <App_init>
     62a:	81 30       	cpi	r24, 0x01	; 1
     62c:	39 f4       	brne	.+14     	; 0x63c <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
     62e:	8f b7       	in	r24, 0x3f	; 63
     630:	80 68       	ori	r24, 0x80	; 128
     632:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
     634:	0e 94 c5 01 	call	0x38a	; 0x38a <App_update>
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	e1 f3       	breq	.-8      	; 0x634 <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
			
	}
}
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	08 95       	ret

00000640 <EEPROM_getAddresses>:
* Description: Function to Calculate the slave address byte and the word address byte from the location
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
     640:	9a 01       	movw	r18, r20
     642:	22 27       	eor	r18, r18
     644:	37 70       	andi	r19, 0x07	; 7
     646:	22 0f       	add	r18, r18
     648:	23 2f       	mov	r18, r19
     64a:	22 1f       	adc	r18, r18
     64c:	33 0b       	sbc	r19, r19
     64e:	31 95       	neg	r19
     650:	20 65       	ori	r18, 0x50	; 80
     652:	fc 01       	movw	r30, r24
     654:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
     656:	fb 01       	movw	r30, r22
     658:	40 83       	st	Z, r20
	return EEPROM_24_STATUS_ERROR_OK;
}
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	08 95       	ret

0000065e <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
     65e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_eepromModuleState>
     662:	83 30       	cpi	r24, 0x03	; 3
     664:	51 f0       	breq	.+20     	; 0x67a <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
     666:	0e 94 d5 05 	call	0xbaa	; 0xbaa <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
     66a:	85 30       	cpi	r24, 0x05	; 5
     66c:	29 f0       	breq	.+10     	; 0x678 <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
     678:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
     67a:	08 95       	ret

0000067c <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	00 d0       	rcall	.+0      	; 0x684 <Eeprom_24_writeByte+0x8>
     684:	1f 92       	push	r1
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	ac 01       	movw	r20, r24
     68c:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     68e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     692:	93 30       	cpi	r25, 0x03	; 3
     694:	11 f5       	brne	.+68     	; 0x6da <Eeprom_24_writeByte+0x5e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     696:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
     698:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     69a:	be 01       	movw	r22, r28
     69c:	6e 5f       	subi	r22, 0xFE	; 254
     69e:	7f 4f       	sbci	r23, 0xFF	; 255
     6a0:	ce 01       	movw	r24, r28
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	0e 94 20 03 	call	0x640	; 0x640 <EEPROM_getAddresses>
     6a8:	18 2f       	mov	r17, r24
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	c1 f4       	brne	.+48     	; 0x6de <Eeprom_24_writeByte+0x62>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
     6ae:	21 e0       	ldi	r18, 0x01	; 1
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	ae 01       	movw	r20, r28
     6b4:	4d 5f       	subi	r20, 0xFD	; 253
     6b6:	5f 4f       	sbci	r21, 0xFF	; 255
     6b8:	6a 81       	ldd	r22, Y+2	; 0x02
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	0e 94 0e 07 	call	0xe1c	; 0xe1c <I2C_MasterSendToLocation>
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	79 f4       	brne	.+30     	; 0x6e2 <Eeprom_24_writeByte+0x66>
		return EEPROM_24_STATUS_ERROR_NOK;
	Delay_ms(5);
     6c4:	25 e0       	ldi	r18, 0x05	; 5
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 c4 04 	call	0x988	; 0x988 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
     6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <Eeprom_24_writeByte+0x68>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     6da:	12 e0       	ldi	r17, 0x02	; 2
     6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <Eeprom_24_writeByte+0x68>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     6de:	10 e0       	ldi	r17, 0x00	; 0
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <Eeprom_24_writeByte+0x68>
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     6e2:	10 e0       	ldi	r17, 0x00	; 0
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
     6e4:	81 2f       	mov	r24, r17
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	08 95       	ret

000006f4 <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
     6f4:	ef 92       	push	r14
     6f6:	ff 92       	push	r15
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	00 d0       	rcall	.+0      	; 0x700 <Eeprom_24_readByte+0xc>
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
     704:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     706:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     70a:	93 30       	cpi	r25, 0x03	; 3
     70c:	21 f5       	brne	.+72     	; 0x756 <Eeprom_24_readByte+0x62>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     70e:	61 15       	cp	r22, r1
     710:	71 05       	cpc	r23, r1
     712:	19 f1       	breq	.+70     	; 0x75a <Eeprom_24_readByte+0x66>
     714:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
     716:	19 82       	std	Y+1, r1	; 0x01
	uint8_t word_addr=0;
     718:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     71a:	be 01       	movw	r22, r28
     71c:	6e 5f       	subi	r22, 0xFE	; 254
     71e:	7f 4f       	sbci	r23, 0xFF	; 255
     720:	ce 01       	movw	r24, r28
     722:	01 96       	adiw	r24, 0x01	; 1
     724:	0e 94 20 03 	call	0x640	; 0x640 <EEPROM_getAddresses>
     728:	18 2f       	mov	r17, r24
     72a:	81 30       	cpi	r24, 0x01	; 1
     72c:	c1 f4       	brne	.+48     	; 0x75e <Eeprom_24_readByte+0x6a>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
     72e:	21 e0       	ldi	r18, 0x01	; 1
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	a7 01       	movw	r20, r14
     734:	6a 81       	ldd	r22, Y+2	; 0x02
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	0e 94 5d 07 	call	0xeba	; 0xeba <I2C_MasterReceiveFromLocation>
     73c:	81 30       	cpi	r24, 0x01	; 1
     73e:	89 f4       	brne	.+34     	; 0x762 <Eeprom_24_readByte+0x6e>
		return EEPROM_24_STATUS_ERROR_NOK;
	Delay_ms(5);
     740:	25 e0       	ldi	r18, 0x05	; 5
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	40 e0       	ldi	r20, 0x00	; 0
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 c4 04 	call	0x988	; 0x988 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
     754:	07 c0       	rjmp	.+14     	; 0x764 <Eeprom_24_readByte+0x70>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     756:	12 e0       	ldi	r17, 0x02	; 2
     758:	05 c0       	rjmp	.+10     	; 0x764 <Eeprom_24_readByte+0x70>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     75a:	14 e0       	ldi	r17, 0x04	; 4
     75c:	03 c0       	rjmp	.+6      	; 0x764 <Eeprom_24_readByte+0x70>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
	uint8_t word_addr=0;
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     75e:	10 e0       	ldi	r17, 0x00	; 0
     760:	01 c0       	rjmp	.+2      	; 0x764 <Eeprom_24_readByte+0x70>
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     762:	10 e0       	ldi	r17, 0x00	; 0
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
     764:	81 2f       	mov	r24, r17
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	08 95       	ret

00000776 <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
     776:	ef 92       	push	r14
     778:	ff 92       	push	r15
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	00 d0       	rcall	.+0      	; 0x782 <Eeprom_24_writePage+0xc>
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     786:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     78a:	93 30       	cpi	r25, 0x03	; 3
     78c:	f9 f4       	brne	.+62     	; 0x7cc <Eeprom_24_writePage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     78e:	61 15       	cp	r22, r1
     790:	71 05       	cpc	r23, r1
     792:	f1 f0       	breq	.+60     	; 0x7d0 <Eeprom_24_writePage+0x5a>
     794:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
     796:	90 e1       	ldi	r25, 0x10	; 16
     798:	89 9f       	mul	r24, r25
     79a:	a0 01       	movw	r20, r0
     79c:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
     79e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
     7a0:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
     7a2:	be 01       	movw	r22, r28
     7a4:	6e 5f       	subi	r22, 0xFE	; 254
     7a6:	7f 4f       	sbci	r23, 0xFF	; 255
     7a8:	ce 01       	movw	r24, r28
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	0e 94 20 03 	call	0x640	; 0x640 <EEPROM_getAddresses>
     7b0:	18 2f       	mov	r17, r24
     7b2:	81 30       	cpi	r24, 0x01	; 1
     7b4:	79 f4       	brne	.+30     	; 0x7d4 <Eeprom_24_writePage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
     7b6:	20 e1       	ldi	r18, 0x10	; 16
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	a7 01       	movw	r20, r14
     7bc:	6a 81       	ldd	r22, Y+2	; 0x02
     7be:	89 81       	ldd	r24, Y+1	; 0x01
     7c0:	0e 94 0e 07 	call	0xe1c	; 0xe1c <I2C_MasterSendToLocation>
     7c4:	81 30       	cpi	r24, 0x01	; 1
     7c6:	39 f0       	breq	.+14     	; 0x7d6 <Eeprom_24_writePage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
     7c8:	10 e0       	ldi	r17, 0x00	; 0
     7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <Eeprom_24_writePage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     7cc:	12 e0       	ldi	r17, 0x02	; 2
     7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <Eeprom_24_writePage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     7d0:	14 e0       	ldi	r17, 0x04	; 4
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <Eeprom_24_writePage+0x60>
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     7d4:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
     7d6:	81 2f       	mov	r24, r17
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	08 95       	ret

000007e8 <Eeprom_24_readPage>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory page.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read data inside a specific page in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPage(uint8_t u8_page, uint8_t *pu8_data)
{
     7e8:	ef 92       	push	r14
     7ea:	ff 92       	push	r15
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	00 d0       	rcall	.+0      	; 0x7f4 <Eeprom_24_readPage+0xc>
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     7f8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     7fc:	93 30       	cpi	r25, 0x03	; 3
     7fe:	f9 f4       	brne	.+62     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     800:	61 15       	cp	r22, r1
     802:	71 05       	cpc	r23, r1
     804:	f1 f0       	breq	.+60     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     806:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
     808:	90 e1       	ldi	r25, 0x10	; 16
     80a:	89 9f       	mul	r24, r25
     80c:	a0 01       	movw	r20, r0
     80e:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
     810:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
     812:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
     814:	be 01       	movw	r22, r28
     816:	6e 5f       	subi	r22, 0xFE	; 254
     818:	7f 4f       	sbci	r23, 0xFF	; 255
     81a:	ce 01       	movw	r24, r28
     81c:	01 96       	adiw	r24, 0x01	; 1
     81e:	0e 94 20 03 	call	0x640	; 0x640 <EEPROM_getAddresses>
     822:	18 2f       	mov	r17, r24
     824:	81 30       	cpi	r24, 0x01	; 1
     826:	79 f4       	brne	.+30     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
     828:	20 e1       	ldi	r18, 0x10	; 16
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	a7 01       	movw	r20, r14
     82e:	6a 81       	ldd	r22, Y+2	; 0x02
     830:	89 81       	ldd	r24, Y+1	; 0x01
     832:	0e 94 5d 07 	call	0xeba	; 0xeba <I2C_MasterReceiveFromLocation>
     836:	81 30       	cpi	r24, 0x01	; 1
     838:	39 f0       	breq	.+14     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		return EEPROM_24_STATUS_ERROR_NOK;
     83a:	10 e0       	ldi	r17, 0x00	; 0
     83c:	05 c0       	rjmp	.+10     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     83e:	12 e0       	ldi	r17, 0x02	; 2
     840:	03 c0       	rjmp	.+6      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     842:	14 e0       	ldi	r17, 0x04	; 4
     844:	01 c0       	rjmp	.+2      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     846:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
     848:	81 2f       	mov	r24, r17
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	ff 90       	pop	r15
     856:	ef 90       	pop	r14
     858:	08 95       	ret

0000085a <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
     85e:	c0 91 dc 01 	lds	r28, 0x01DC	; 0x8001dc <gu8_counter>
     862:	d0 e0       	ldi	r29, 0x00	; 0
     864:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Uart_DataRegister>
     868:	c3 52       	subi	r28, 0x23	; 35
     86a:	de 4f       	sbci	r29, 0xFE	; 254
     86c:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
     86e:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <gu8_counter>
     872:	e9 2f       	mov	r30, r25
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	e3 52       	subi	r30, 0x23	; 35
     878:	fe 4f       	sbci	r31, 0xFE	; 254
     87a:	80 81       	ld	r24, Z
     87c:	8d 30       	cpi	r24, 0x0D	; 13
     87e:	71 f4       	brne	.+28     	; 0x89c <__stack+0x3d>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
     880:	0e 94 9d 08 	call	0x113a	; 0x113a <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
     884:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <gu8_counter>
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	e3 52       	subi	r30, 0x23	; 35
     88c:	fe 4f       	sbci	r31, 0xFE	; 254
     88e:	10 82       	st	Z, r1
		gu8_counter = 0;
     890:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <gu8_counter>
		gu8_flag = 1;
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <gu8_flag>
     89a:	1d c0       	rjmp	.+58     	; 0x8d6 <__stack+0x77>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
     89c:	88 30       	cpi	r24, 0x08	; 8
     89e:	51 f4       	brne	.+20     	; 0x8b4 <__stack+0x55>
     8a0:	99 23       	and	r25, r25
     8a2:	41 f0       	breq	.+16     	; 0x8b4 <__stack+0x55>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
     8a4:	0e 94 9d 08 	call	0x113a	; 0x113a <Uart_sendByte>
		gu8_counter--;
     8a8:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <gu8_counter>
     8ac:	81 50       	subi	r24, 0x01	; 1
     8ae:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <gu8_counter>
     8b2:	11 c0       	rjmp	.+34     	; 0x8d6 <__stack+0x77>
	}
	else if(gau8_data[gu8_counter] != '\b')
     8b4:	88 30       	cpi	r24, 0x08	; 8
     8b6:	79 f0       	breq	.+30     	; 0x8d6 <__stack+0x77>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
     8b8:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <gu8_visibility>
     8bc:	91 30       	cpi	r25, 0x01	; 1
     8be:	21 f4       	brne	.+8      	; 0x8c8 <__stack+0x69>
		{
			Uart_sendByte('*');	
     8c0:	8a e2       	ldi	r24, 0x2A	; 42
     8c2:	0e 94 9d 08 	call	0x113a	; 0x113a <Uart_sendByte>
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
     8c8:	0e 94 9d 08 	call	0x113a	; 0x113a <Uart_sendByte>
		}
		gu8_counter++;
     8cc:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <gu8_counter>
     8d0:	8f 5f       	subi	r24, 0xFF	; 255
     8d2:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <gu8_counter>
	}
}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
     8dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
     8e0:	83 30       	cpi	r24, 0x03	; 3
     8e2:	81 f0       	breq	.+32     	; 0x904 <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
     8e4:	0e 94 87 08 	call	0x110e	; 0x110e <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	11 f0       	breq	.+4      	; 0x8f0 <Terminal_init+0x14>
     8ec:	87 30       	cpi	r24, 0x07	; 7
     8ee:	49 f4       	brne	.+18     	; 0x902 <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
     8f0:	8d e2       	ldi	r24, 0x2D	; 45
     8f2:	94 e0       	ldi	r25, 0x04	; 4
     8f4:	0e 94 cf 08 	call	0x119e	; 0x119e <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
     8f8:	83 e0       	ldi	r24, 0x03	; 3
     8fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
     902:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
     904:	08 95       	ret

00000906 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
     90a:	00 97       	sbiw	r24, 0x00	; 0
     90c:	81 f0       	breq	.+32     	; 0x92e <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
     90e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <genu_TerminalModuleState>
     912:	22 30       	cpi	r18, 0x02	; 2
     914:	79 f0       	breq	.+30     	; 0x934 <Terminal_Out+0x2e>
     916:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
     918:	0e 94 04 08 	call	0x1008	; 0x1008 <stringLength>
     91c:	68 2f       	mov	r22, r24
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	ce 01       	movw	r24, r28
     922:	0e 94 a8 08 	call	0x1150	; 0x1150 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
     926:	81 30       	cpi	r24, 0x01	; 1
     928:	21 f0       	breq	.+8      	; 0x932 <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	03 c0       	rjmp	.+6      	; 0x934 <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
     92e:	24 e0       	ldi	r18, 0x04	; 4
     930:	01 c0       	rjmp	.+2      	; 0x934 <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
     932:	21 e0       	ldi	r18, 0x01	; 1
}
     934:	82 2f       	mov	r24, r18
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

0000093c <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
     93c:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
     93e:	89 2b       	or	r24, r25
     940:	a1 f0       	breq	.+40     	; 0x96a <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
     942:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
     946:	82 30       	cpi	r24, 0x02	; 2
     948:	99 f0       	breq	.+38     	; 0x970 <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
     94a:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <gu8_flag>
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	71 f4       	brne	.+28     	; 0x96e <Terminal_In+0x32>
	{
		gu8_flag = 0;
     952:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
     956:	8d ed       	ldi	r24, 0xDD	; 221
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 76 08 	call	0x10ec	; 0x10ec <stringCopy>
		EmptyString(gau8_data);
     95e:	8d ed       	ldi	r24, 0xDD	; 221
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
     966:	85 e0       	ldi	r24, 0x05	; 5
     968:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
     96a:	84 e0       	ldi	r24, 0x04	; 4
     96c:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
     96e:	81 e0       	ldi	r24, 0x01	; 1
}
     970:	08 95       	ret

00000972 <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
     978:	08 95       	ret

0000097a <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
     97a:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	08 95       	ret

00000982 <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
     982:	0e 94 13 03 	call	0x626	; 0x626 <App_start>
     986:	ff cf       	rjmp	.-2      	; 0x986 <main+0x4>

00000988 <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
     988:	2f 92       	push	r2
     98a:	3f 92       	push	r3
     98c:	4f 92       	push	r4
     98e:	5f 92       	push	r5
     990:	6f 92       	push	r6
     992:	7f 92       	push	r7
     994:	8f 92       	push	r8
     996:	9f 92       	push	r9
     998:	af 92       	push	r10
     99a:	bf 92       	push	r11
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	00 d0       	rcall	.+0      	; 0x9ae <Delay_ms+0x26>
     9ae:	00 d0       	rcall	.+0      	; 0x9b0 <Delay_ms+0x28>
     9b0:	1f 92       	push	r1
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	22 2e       	mov	r2, r18
     9b8:	33 2e       	mov	r3, r19
     9ba:	44 2e       	mov	r4, r20
     9bc:	55 2e       	mov	r5, r21
     9be:	66 2e       	mov	r6, r22
     9c0:	79 83       	std	Y+1, r23	; 0x01
     9c2:	8a 83       	std	Y+2, r24	; 0x02
     9c4:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
     9c6:	91 2c       	mov	r9, r1
     9c8:	1d 82       	std	Y+5, r1	; 0x05
     9ca:	1c 82       	std	Y+4, r1	; 0x04
     9cc:	b0 e0       	ldi	r27, 0x00	; 0
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	e0 e0       	ldi	r30, 0x00	; 0
     9d2:	71 2c       	mov	r7, r1
     9d4:	81 2c       	mov	r8, r1
     9d6:	3d c0       	rjmp	.+122    	; 0xa52 <Delay_ms+0xca>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
     9d8:	2c 2d       	mov	r18, r12
     9da:	3d 2d       	mov	r19, r13
     9dc:	4e 2d       	mov	r20, r14
     9de:	5f 2d       	mov	r21, r15
     9e0:	60 2f       	mov	r22, r16
     9e2:	71 2f       	mov	r23, r17
     9e4:	8a 2d       	mov	r24, r10
     9e6:	9b 2d       	mov	r25, r11
     9e8:	a1 e0       	ldi	r26, 0x01	; 1
     9ea:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__adddi3_s8>
     9ee:	c2 2e       	mov	r12, r18
     9f0:	d3 2e       	mov	r13, r19
     9f2:	e4 2e       	mov	r14, r20
     9f4:	f5 2e       	mov	r15, r21
     9f6:	06 2f       	mov	r16, r22
     9f8:	17 2f       	mov	r17, r23
     9fa:	a8 2e       	mov	r10, r24
     9fc:	b9 2e       	mov	r11, r25
     9fe:	08 c0       	rjmp	.+16     	; 0xa10 <Delay_ms+0x88>
     a00:	c1 2c       	mov	r12, r1
     a02:	d1 2c       	mov	r13, r1
     a04:	e1 2c       	mov	r14, r1
     a06:	f1 2c       	mov	r15, r1
     a08:	00 e0       	ldi	r16, 0x00	; 0
     a0a:	10 e0       	ldi	r17, 0x00	; 0
     a0c:	a1 2c       	mov	r10, r1
     a0e:	b1 2c       	mov	r11, r1
     a10:	2c 2d       	mov	r18, r12
     a12:	3d 2d       	mov	r19, r13
     a14:	4e 2d       	mov	r20, r14
     a16:	5f 2d       	mov	r21, r15
     a18:	60 2f       	mov	r22, r16
     a1a:	71 2f       	mov	r23, r17
     a1c:	8a 2d       	mov	r24, r10
     a1e:	9b 2d       	mov	r25, r11
     a20:	ac e0       	ldi	r26, 0x0C	; 12
     a22:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__cmpdi2_s8>
     a26:	c1 f2       	breq	.-80     	; 0x9d8 <Delay_ms+0x50>
     a28:	b8 f2       	brcs	.-82     	; 0x9d8 <Delay_ms+0x50>
     a2a:	8c 81       	ldd	r24, Y+4	; 0x04

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
     a2c:	29 2d       	mov	r18, r9
     a2e:	3d 81       	ldd	r19, Y+5	; 0x05
     a30:	48 2f       	mov	r20, r24
     a32:	5b 2f       	mov	r21, r27
     a34:	6f 2f       	mov	r22, r31
     a36:	7e 2f       	mov	r23, r30
     a38:	87 2d       	mov	r24, r7
     a3a:	98 2d       	mov	r25, r8
     a3c:	a1 e0       	ldi	r26, 0x01	; 1
     a3e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__adddi3_s8>
     a42:	92 2e       	mov	r9, r18
     a44:	3d 83       	std	Y+5, r19	; 0x05
     a46:	4c 83       	std	Y+4, r20	; 0x04
     a48:	b5 2f       	mov	r27, r21
     a4a:	f6 2f       	mov	r31, r22
     a4c:	e7 2f       	mov	r30, r23
     a4e:	78 2e       	mov	r7, r24
     a50:	89 2e       	mov	r8, r25
     a52:	29 2d       	mov	r18, r9
     a54:	3d 81       	ldd	r19, Y+5	; 0x05
     a56:	4c 81       	ldd	r20, Y+4	; 0x04
     a58:	5b 2f       	mov	r21, r27
     a5a:	6f 2f       	mov	r22, r31
     a5c:	7e 2f       	mov	r23, r30
     a5e:	87 2d       	mov	r24, r7
     a60:	98 2d       	mov	r25, r8
     a62:	a2 2c       	mov	r10, r2
     a64:	b3 2c       	mov	r11, r3
     a66:	c4 2c       	mov	r12, r4
     a68:	d5 2c       	mov	r13, r5
     a6a:	e6 2c       	mov	r14, r6
     a6c:	f9 80       	ldd	r15, Y+1	; 0x01
     a6e:	0a 81       	ldd	r16, Y+2	; 0x02
     a70:	1b 81       	ldd	r17, Y+3	; 0x03
     a72:	0e 94 67 09 	call	0x12ce	; 0x12ce <__cmpdi2>
     a76:	20 f2       	brcs	.-120    	; 0xa00 <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	ff 90       	pop	r15
     a8c:	ef 90       	pop	r14
     a8e:	df 90       	pop	r13
     a90:	cf 90       	pop	r12
     a92:	bf 90       	pop	r11
     a94:	af 90       	pop	r10
     a96:	9f 90       	pop	r9
     a98:	8f 90       	pop	r8
     a9a:	7f 90       	pop	r7
     a9c:	6f 90       	pop	r6
     a9e:	5f 90       	pop	r5
     aa0:	4f 90       	pop	r4
     aa2:	3f 90       	pop	r3
     aa4:	2f 90       	pop	r2
     aa6:	08 95       	ret

00000aa8 <Ext_INT0_init>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
     aa8:	9b b7       	in	r25, 0x3b	; 59
     aaa:	90 64       	ori	r25, 0x40	; 64
     aac:	9b bf       	out	0x3b, r25	; 59
     aae:	95 b7       	in	r25, 0x35	; 53
     ab0:	89 2b       	or	r24, r25
     ab2:	85 bf       	out	0x35, r24	; 53
     ab4:	08 95       	ret

00000ab6 <INT0_setCallBack>:
     ab6:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <INT0_CallBackPtr+0x1>
     aba:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <INT0_CallBackPtr>
     abe:	08 95       	ret

00000ac0 <__vector_1>:
     ac0:	1f 92       	push	r1
     ac2:	0f 92       	push	r0
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	0f 92       	push	r0
     ac8:	11 24       	eor	r1, r1
     aca:	2f 93       	push	r18
     acc:	3f 93       	push	r19
     ace:	4f 93       	push	r20
     ad0:	5f 93       	push	r21
     ad2:	6f 93       	push	r22
     ad4:	7f 93       	push	r23
     ad6:	8f 93       	push	r24
     ad8:	9f 93       	push	r25
     ada:	af 93       	push	r26
     adc:	bf 93       	push	r27
     ade:	ef 93       	push	r30
     ae0:	ff 93       	push	r31
     ae2:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <INT0_CallBackPtr>
     ae6:	f0 91 e2 02 	lds	r31, 0x02E2	; 0x8002e2 <INT0_CallBackPtr+0x1>
     aea:	09 95       	icall
     aec:	ff 91       	pop	r31
     aee:	ef 91       	pop	r30
     af0:	bf 91       	pop	r27
     af2:	af 91       	pop	r26
     af4:	9f 91       	pop	r25
     af6:	8f 91       	pop	r24
     af8:	7f 91       	pop	r23
     afa:	6f 91       	pop	r22
     afc:	5f 91       	pop	r21
     afe:	4f 91       	pop	r20
     b00:	3f 91       	pop	r19
     b02:	2f 91       	pop	r18
     b04:	0f 90       	pop	r0
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	0f 90       	pop	r0
     b0a:	1f 90       	pop	r1
     b0c:	18 95       	reti

00000b0e <__vector_2>:
     b0e:	1f 92       	push	r1
     b10:	0f 92       	push	r0
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	0f 92       	push	r0
     b16:	11 24       	eor	r1, r1
     b18:	2f 93       	push	r18
     b1a:	3f 93       	push	r19
     b1c:	4f 93       	push	r20
     b1e:	5f 93       	push	r21
     b20:	6f 93       	push	r22
     b22:	7f 93       	push	r23
     b24:	8f 93       	push	r24
     b26:	9f 93       	push	r25
     b28:	af 93       	push	r26
     b2a:	bf 93       	push	r27
     b2c:	ef 93       	push	r30
     b2e:	ff 93       	push	r31
     b30:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <INT1_CallBackPtr>
     b34:	f0 91 e0 02 	lds	r31, 0x02E0	; 0x8002e0 <INT1_CallBackPtr+0x1>
     b38:	09 95       	icall
     b3a:	ff 91       	pop	r31
     b3c:	ef 91       	pop	r30
     b3e:	bf 91       	pop	r27
     b40:	af 91       	pop	r26
     b42:	9f 91       	pop	r25
     b44:	8f 91       	pop	r24
     b46:	7f 91       	pop	r23
     b48:	6f 91       	pop	r22
     b4a:	5f 91       	pop	r21
     b4c:	4f 91       	pop	r20
     b4e:	3f 91       	pop	r19
     b50:	2f 91       	pop	r18
     b52:	0f 90       	pop	r0
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	0f 90       	pop	r0
     b58:	1f 90       	pop	r1
     b5a:	18 95       	reti

00000b5c <__vector_3>:
}
ISR(INT2_IRQ)
{
     b5c:	1f 92       	push	r1
     b5e:	0f 92       	push	r0
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	0f 92       	push	r0
     b64:	11 24       	eor	r1, r1
     b66:	2f 93       	push	r18
     b68:	3f 93       	push	r19
     b6a:	4f 93       	push	r20
     b6c:	5f 93       	push	r21
     b6e:	6f 93       	push	r22
     b70:	7f 93       	push	r23
     b72:	8f 93       	push	r24
     b74:	9f 93       	push	r25
     b76:	af 93       	push	r26
     b78:	bf 93       	push	r27
     b7a:	ef 93       	push	r30
     b7c:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
     b7e:	e0 91 dd 02 	lds	r30, 0x02DD	; 0x8002dd <INT2_CallBackPtr>
     b82:	f0 91 de 02 	lds	r31, 0x02DE	; 0x8002de <INT2_CallBackPtr+0x1>
     b86:	09 95       	icall
}
     b88:	ff 91       	pop	r31
     b8a:	ef 91       	pop	r30
     b8c:	bf 91       	pop	r27
     b8e:	af 91       	pop	r26
     b90:	9f 91       	pop	r25
     b92:	8f 91       	pop	r24
     b94:	7f 91       	pop	r23
     b96:	6f 91       	pop	r22
     b98:	5f 91       	pop	r21
     b9a:	4f 91       	pop	r20
     b9c:	3f 91       	pop	r19
     b9e:	2f 91       	pop	r18
     ba0:	0f 90       	pop	r0
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	0f 90       	pop	r0
     ba6:	1f 90       	pop	r1
     ba8:	18 95       	reti

00000baa <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
     baa:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     bae:	86 30       	cpi	r24, 0x06	; 6
     bb0:	41 f0       	breq	.+16     	; 0xbc2 <I2C_MasterInit+0x18>
     bb2:	11 b8       	out	0x01, r1	; 1
     bb4:	8a ef       	ldi	r24, 0xFA	; 250
     bb6:	80 b9       	out	0x00, r24	; 0
     bb8:	86 e0       	ldi	r24, 0x06	; 6
     bba:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <genuI2C_Status>
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	08 95       	ret
     bc2:	87 e0       	ldi	r24, 0x07	; 7
     bc4:	08 95       	ret

00000bc6 <I2C_MasterSendSTART>:
     bc6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     bca:	86 30       	cpi	r24, 0x06	; 6
     bcc:	59 f4       	brne	.+22     	; 0xbe4 <I2C_MasterSendSTART+0x1e>
     bce:	84 ea       	ldi	r24, 0xA4	; 164
     bd0:	86 bf       	out	0x36, r24	; 54
     bd2:	06 b6       	in	r0, 0x36	; 54
     bd4:	07 fe       	sbrs	r0, 7
     bd6:	fd cf       	rjmp	.-6      	; 0xbd2 <I2C_MasterSendSTART+0xc>
     bd8:	81 b1       	in	r24, 0x01	; 1
     bda:	88 7f       	andi	r24, 0xF8	; 248
     bdc:	88 30       	cpi	r24, 0x08	; 8
     bde:	21 f0       	breq	.+8      	; 0xbe8 <I2C_MasterSendSTART+0x22>
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	08 95       	ret
     be4:	85 e0       	ldi	r24, 0x05	; 5
     be6:	08 95       	ret
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	08 95       	ret

00000bec <I2C_MasterSendSlaveAddress>:
     bec:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
     bf0:	96 30       	cpi	r25, 0x06	; 6
     bf2:	29 f5       	brne	.+74     	; 0xc3e <I2C_MasterSendSlaveAddress+0x52>
     bf4:	62 30       	cpi	r22, 0x02	; 2
     bf6:	28 f5       	brcc	.+74     	; 0xc42 <I2C_MasterSendSlaveAddress+0x56>
     bf8:	88 23       	and	r24, r24
     bfa:	2c f1       	brlt	.+74     	; 0xc46 <I2C_MasterSendSlaveAddress+0x5a>
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	68 2b       	or	r22, r24
     c04:	63 b9       	out	0x03, r22	; 3
     c06:	84 e8       	ldi	r24, 0x84	; 132
     c08:	86 bf       	out	0x36, r24	; 54
     c0a:	06 b6       	in	r0, 0x36	; 54
     c0c:	07 fe       	sbrs	r0, 7
     c0e:	fd cf       	rjmp	.-6      	; 0xc0a <I2C_MasterSendSlaveAddress+0x1e>
     c10:	81 b1       	in	r24, 0x01	; 1
     c12:	88 7f       	andi	r24, 0xF8	; 248
     c14:	88 33       	cpi	r24, 0x38	; 56
     c16:	59 f0       	breq	.+22     	; 0xc2e <I2C_MasterSendSlaveAddress+0x42>
     c18:	28 f4       	brcc	.+10     	; 0xc24 <I2C_MasterSendSlaveAddress+0x38>
     c1a:	88 31       	cpi	r24, 0x18	; 24
     c1c:	b1 f0       	breq	.+44     	; 0xc4a <I2C_MasterSendSlaveAddress+0x5e>
     c1e:	80 32       	cpi	r24, 0x20	; 32
     c20:	41 f0       	breq	.+16     	; 0xc32 <I2C_MasterSendSlaveAddress+0x46>
     c22:	0b c0       	rjmp	.+22     	; 0xc3a <I2C_MasterSendSlaveAddress+0x4e>
     c24:	80 34       	cpi	r24, 0x40	; 64
     c26:	89 f0       	breq	.+34     	; 0xc4a <I2C_MasterSendSlaveAddress+0x5e>
     c28:	88 34       	cpi	r24, 0x48	; 72
     c2a:	29 f0       	breq	.+10     	; 0xc36 <I2C_MasterSendSlaveAddress+0x4a>
     c2c:	06 c0       	rjmp	.+12     	; 0xc3a <I2C_MasterSendSlaveAddress+0x4e>
     c2e:	88 e3       	ldi	r24, 0x38	; 56
     c30:	08 95       	ret
     c32:	80 e2       	ldi	r24, 0x20	; 32
     c34:	08 95       	ret
     c36:	88 e4       	ldi	r24, 0x48	; 72
     c38:	08 95       	ret
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	08 95       	ret
     c3e:	85 e0       	ldi	r24, 0x05	; 5
     c40:	08 95       	ret
     c42:	82 e0       	ldi	r24, 0x02	; 2
     c44:	08 95       	ret
     c46:	83 e0       	ldi	r24, 0x03	; 3
     c48:	08 95       	ret
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	08 95       	ret

00000c4e <I2C_MasterSendRepSTART>:
     c4e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     c52:	86 30       	cpi	r24, 0x06	; 6
     c54:	59 f4       	brne	.+22     	; 0xc6c <I2C_MasterSendRepSTART+0x1e>
     c56:	84 ea       	ldi	r24, 0xA4	; 164
     c58:	86 bf       	out	0x36, r24	; 54
     c5a:	06 b6       	in	r0, 0x36	; 54
     c5c:	07 fe       	sbrs	r0, 7
     c5e:	fd cf       	rjmp	.-6      	; 0xc5a <I2C_MasterSendRepSTART+0xc>
     c60:	81 b1       	in	r24, 0x01	; 1
     c62:	88 7f       	andi	r24, 0xF8	; 248
     c64:	80 31       	cpi	r24, 0x10	; 16
     c66:	21 f0       	breq	.+8      	; 0xc70 <I2C_MasterSendRepSTART+0x22>
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	08 95       	ret
     c6c:	85 e0       	ldi	r24, 0x05	; 5
     c6e:	08 95       	ret
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	08 95       	ret

00000c74 <I2C_MasterSendSTOP>:
     c74:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     c78:	86 30       	cpi	r24, 0x06	; 6
     c7a:	39 f4       	brne	.+14     	; 0xc8a <I2C_MasterSendSTOP+0x16>
     c7c:	84 e9       	ldi	r24, 0x94	; 148
     c7e:	86 bf       	out	0x36, r24	; 54
     c80:	06 b6       	in	r0, 0x36	; 54
     c82:	04 fc       	sbrc	r0, 4
     c84:	fd cf       	rjmp	.-6      	; 0xc80 <I2C_MasterSendSTOP+0xc>
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	08 95       	ret
     c8a:	85 e0       	ldi	r24, 0x05	; 5
     c8c:	08 95       	ret

00000c8e <I2C_MasterSendByte>:
     c8e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
     c92:	96 30       	cpi	r25, 0x06	; 6
     c94:	69 f4       	brne	.+26     	; 0xcb0 <I2C_MasterSendByte+0x22>
     c96:	83 b9       	out	0x03, r24	; 3
     c98:	84 e8       	ldi	r24, 0x84	; 132
     c9a:	86 bf       	out	0x36, r24	; 54
     c9c:	06 b6       	in	r0, 0x36	; 54
     c9e:	07 fe       	sbrs	r0, 7
     ca0:	fd cf       	rjmp	.-6      	; 0xc9c <I2C_MasterSendByte+0xe>
     ca2:	81 b1       	in	r24, 0x01	; 1
     ca4:	88 7f       	andi	r24, 0xF8	; 248
     ca6:	88 32       	cpi	r24, 0x28	; 40
     ca8:	29 f0       	breq	.+10     	; 0xcb4 <I2C_MasterSendByte+0x26>
     caa:	80 33       	cpi	r24, 0x30	; 48
     cac:	29 f4       	brne	.+10     	; 0xcb8 <I2C_MasterSendByte+0x2a>
     cae:	08 95       	ret
     cb0:	85 e0       	ldi	r24, 0x05	; 5
     cb2:	08 95       	ret
     cb4:	88 e2       	ldi	r24, 0x28	; 40
     cb6:	08 95       	ret
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	08 95       	ret

00000cbc <I2C_MasterReceiveByte_ACK>:
     cbc:	fc 01       	movw	r30, r24
     cbe:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
     cc2:	96 30       	cpi	r25, 0x06	; 6
     cc4:	79 f4       	brne	.+30     	; 0xce4 <I2C_MasterReceiveByte_ACK+0x28>
     cc6:	30 97       	sbiw	r30, 0x00	; 0
     cc8:	79 f0       	breq	.+30     	; 0xce8 <I2C_MasterReceiveByte_ACK+0x2c>
     cca:	84 ec       	ldi	r24, 0xC4	; 196
     ccc:	86 bf       	out	0x36, r24	; 54
     cce:	06 b6       	in	r0, 0x36	; 54
     cd0:	07 fe       	sbrs	r0, 7
     cd2:	fd cf       	rjmp	.-6      	; 0xcce <I2C_MasterReceiveByte_ACK+0x12>
     cd4:	81 b1       	in	r24, 0x01	; 1
     cd6:	88 7f       	andi	r24, 0xF8	; 248
     cd8:	80 35       	cpi	r24, 0x50	; 80
     cda:	41 f4       	brne	.+16     	; 0xcec <I2C_MasterReceiveByte_ACK+0x30>
     cdc:	83 b1       	in	r24, 0x03	; 3
     cde:	80 83       	st	Z, r24
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	08 95       	ret
     ce4:	85 e0       	ldi	r24, 0x05	; 5
     ce6:	08 95       	ret
     ce8:	84 e0       	ldi	r24, 0x04	; 4
     cea:	08 95       	ret
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	08 95       	ret

00000cf0 <I2C_MasterReceiveByte_NACK>:
     cf0:	fc 01       	movw	r30, r24
     cf2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
     cf6:	96 30       	cpi	r25, 0x06	; 6
     cf8:	79 f4       	brne	.+30     	; 0xd18 <I2C_MasterReceiveByte_NACK+0x28>
     cfa:	30 97       	sbiw	r30, 0x00	; 0
     cfc:	79 f0       	breq	.+30     	; 0xd1c <I2C_MasterReceiveByte_NACK+0x2c>
     cfe:	84 e8       	ldi	r24, 0x84	; 132
     d00:	86 bf       	out	0x36, r24	; 54
     d02:	06 b6       	in	r0, 0x36	; 54
     d04:	07 fe       	sbrs	r0, 7
     d06:	fd cf       	rjmp	.-6      	; 0xd02 <I2C_MasterReceiveByte_NACK+0x12>
     d08:	81 b1       	in	r24, 0x01	; 1
     d0a:	88 7f       	andi	r24, 0xF8	; 248
     d0c:	88 35       	cpi	r24, 0x58	; 88
     d0e:	41 f4       	brne	.+16     	; 0xd20 <I2C_MasterReceiveByte_NACK+0x30>
     d10:	83 b1       	in	r24, 0x03	; 3
     d12:	80 83       	st	Z, r24
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	08 95       	ret
     d18:	85 e0       	ldi	r24, 0x05	; 5
     d1a:	08 95       	ret
     d1c:	84 e0       	ldi	r24, 0x04	; 4
     d1e:	08 95       	ret
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	08 95       	ret

00000d24 <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
     d24:	7f 92       	push	r7
     d26:	8f 92       	push	r8
     d28:	9f 92       	push	r9
     d2a:	af 92       	push	r10
     d2c:	bf 92       	push	r11
     d2e:	cf 92       	push	r12
     d30:	df 92       	push	r13
     d32:	ef 92       	push	r14
     d34:	ff 92       	push	r15
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	78 2e       	mov	r7, r24
     d40:	eb 01       	movw	r28, r22
     d42:	7a 01       	movw	r14, r20
     d44:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
     d46:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     d4a:	86 30       	cpi	r24, 0x06	; 6
     d4c:	09 f0       	breq	.+2      	; 0xd50 <I2C_MasterReceiveGeneral+0x2c>
     d4e:	47 c0       	rjmp	.+142    	; 0xdde <I2C_MasterReceiveGeneral+0xba>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
     d50:	20 97       	sbiw	r28, 0x00	; 0
     d52:	09 f4       	brne	.+2      	; 0xd56 <I2C_MasterReceiveGeneral+0x32>
     d54:	46 c0       	rjmp	.+140    	; 0xde2 <I2C_MasterReceiveGeneral+0xbe>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
     d56:	23 2b       	or	r18, r19
     d58:	09 f4       	brne	.+2      	; 0xd5c <I2C_MasterReceiveGeneral+0x38>
     d5a:	45 c0       	rjmp	.+138    	; 0xde6 <I2C_MasterReceiveGeneral+0xc2>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
     d5c:	77 20       	and	r7, r7
     d5e:	0c f4       	brge	.+2      	; 0xd62 <I2C_MasterReceiveGeneral+0x3e>
     d60:	44 c0       	rjmp	.+136    	; 0xdea <I2C_MasterReceiveGeneral+0xc6>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
     d62:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <I2C_MasterSendSTART>
     d66:	88 23       	and	r24, r24
     d68:	09 f4       	brne	.+2      	; 0xd6c <I2C_MasterReceiveGeneral+0x48>
     d6a:	4a c0       	rjmp	.+148    	; 0xe00 <I2C_MasterReceiveGeneral+0xdc>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	87 2d       	mov	r24, r7
     d70:	0e 94 f6 05 	call	0xbec	; 0xbec <I2C_MasterSendSlaveAddress>
     d74:	81 30       	cpi	r24, 0x01	; 1
     d76:	d9 f5       	brne	.+118    	; 0xdee <I2C_MasterReceiveGeneral+0xca>
     d78:	0b c0       	rjmp	.+22     	; 0xd90 <I2C_MasterReceiveGeneral+0x6c>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
     d7a:	4e 01       	movw	r8, r28
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	88 1a       	sub	r8, r24
     d80:	98 0a       	sbc	r9, r24
     d82:	88 81       	ld	r24, Y
     d84:	0e 94 47 06 	call	0xc8e	; 0xc8e <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
     d88:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
     d8a:	88 23       	and	r24, r24
     d8c:	c9 f1       	breq	.+114    	; 0xe00 <I2C_MasterReceiveGeneral+0xdc>
     d8e:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
     d90:	57 01       	movw	r10, r14
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	a8 1a       	sub	r10, r24
     d96:	b1 08       	sbc	r11, r1
     d98:	ef 28       	or	r14, r15
     d9a:	79 f7       	brne	.-34     	; 0xd7a <I2C_MasterReceiveGeneral+0x56>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
     d9c:	0e 94 27 06 	call	0xc4e	; 0xc4e <I2C_MasterSendRepSTART>
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	39 f5       	brne	.+78     	; 0xdf2 <I2C_MasterReceiveGeneral+0xce>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
     da4:	61 e0       	ldi	r22, 0x01	; 1
     da6:	87 2d       	mov	r24, r7
     da8:	0e 94 f6 05 	call	0xbec	; 0xbec <I2C_MasterSendSlaveAddress>
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	19 f5       	brne	.+70     	; 0xdf6 <I2C_MasterReceiveGeneral+0xd2>
     db0:	08 c0       	rjmp	.+16     	; 0xdc2 <I2C_MasterReceiveGeneral+0x9e>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
     db2:	e6 01       	movw	r28, r12
     db4:	21 96       	adiw	r28, 0x01	; 1
     db6:	c6 01       	movw	r24, r12
     db8:	0e 94 5e 06 	call	0xcbc	; 0xcbc <I2C_MasterReceiveByte_ACK>
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	e9 f4       	brne	.+58     	; 0xdfa <I2C_MasterReceiveGeneral+0xd6>
     dc0:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
     dc2:	01 50       	subi	r16, 0x01	; 1
     dc4:	11 09       	sbc	r17, r1
     dc6:	a9 f7       	brne	.-22     	; 0xdb2 <I2C_MasterReceiveGeneral+0x8e>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
     dc8:	c6 01       	movw	r24, r12
     dca:	0e 94 78 06 	call	0xcf0	; 0xcf0 <I2C_MasterReceiveByte_NACK>
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	b1 f4       	brne	.+44     	; 0xdfe <I2C_MasterReceiveGeneral+0xda>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
     dd2:	0e 94 3a 06 	call	0xc74	; 0xc74 <I2C_MasterSendSTOP>
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	99 f0       	breq	.+38     	; 0xe00 <I2C_MasterReceiveGeneral+0xdc>
		return I2C_STATUS_ERROR_NOK;
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	11 c0       	rjmp	.+34     	; 0xe00 <I2C_MasterReceiveGeneral+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
     dde:	85 e0       	ldi	r24, 0x05	; 5
     de0:	0f c0       	rjmp	.+30     	; 0xe00 <I2C_MasterReceiveGeneral+0xdc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
     de2:	84 e0       	ldi	r24, 0x04	; 4
     de4:	0d c0       	rjmp	.+26     	; 0xe00 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	0b c0       	rjmp	.+22     	; 0xe00 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
     dea:	83 e0       	ldi	r24, 0x03	; 3
     dec:	09 c0       	rjmp	.+18     	; 0xe00 <I2C_MasterReceiveGeneral+0xdc>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	07 c0       	rjmp	.+14     	; 0xe00 <I2C_MasterReceiveGeneral+0xdc>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	05 c0       	rjmp	.+10     	; 0xe00 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	03 c0       	rjmp	.+6      	; 0xe00 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	01 c0       	rjmp	.+2      	; 0xe00 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
     dfe:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	df 90       	pop	r13
     e0e:	cf 90       	pop	r12
     e10:	bf 90       	pop	r11
     e12:	af 90       	pop	r10
     e14:	9f 90       	pop	r9
     e16:	8f 90       	pop	r8
     e18:	7f 90       	pop	r7
     e1a:	08 95       	ret

00000e1c <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
     e1c:	bf 92       	push	r11
     e1e:	cf 92       	push	r12
     e20:	df 92       	push	r13
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	18 2f       	mov	r17, r24
     e30:	06 2f       	mov	r16, r22
     e32:	ea 01       	movw	r28, r20
     e34:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
     e36:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     e3a:	86 30       	cpi	r24, 0x06	; 6
     e3c:	59 f5       	brne	.+86     	; 0xe94 <I2C_MasterSendToLocation+0x78>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     e3e:	20 97       	sbiw	r28, 0x00	; 0
     e40:	59 f1       	breq	.+86     	; 0xe98 <I2C_MasterSendToLocation+0x7c>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
     e42:	11 23       	and	r17, r17
     e44:	5c f1       	brlt	.+86     	; 0xe9c <I2C_MasterSendToLocation+0x80>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
     e46:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <I2C_MasterSendSTART>
     e4a:	88 23       	and	r24, r24
     e4c:	61 f1       	breq	.+88     	; 0xea6 <I2C_MasterSendToLocation+0x8a>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	81 2f       	mov	r24, r17
     e52:	0e 94 f6 05 	call	0xbec	; 0xbec <I2C_MasterSendSlaveAddress>
     e56:	b8 2e       	mov	r11, r24
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	b8 12       	cpse	r11, r24
     e5c:	21 c0       	rjmp	.+66     	; 0xea0 <I2C_MasterSendToLocation+0x84>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
     e5e:	80 2f       	mov	r24, r16
     e60:	0e 94 47 06 	call	0xc8e	; 0xc8e <I2C_MasterSendByte>
     e64:	81 11       	cpse	r24, r1
     e66:	0c c0       	rjmp	.+24     	; 0xe80 <I2C_MasterSendToLocation+0x64>
     e68:	1e c0       	rjmp	.+60     	; 0xea6 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
     e6a:	6e 01       	movw	r12, r28
     e6c:	8f ef       	ldi	r24, 0xFF	; 255
     e6e:	c8 1a       	sub	r12, r24
     e70:	d8 0a       	sbc	r13, r24
     e72:	88 81       	ld	r24, Y
     e74:	0e 94 47 06 	call	0xc8e	; 0xc8e <I2C_MasterSendByte>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
     e78:	78 01       	movw	r14, r16
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
     e7a:	88 23       	and	r24, r24
     e7c:	a1 f0       	breq	.+40     	; 0xea6 <I2C_MasterSendToLocation+0x8a>
     e7e:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
     e80:	87 01       	movw	r16, r14
     e82:	01 50       	subi	r16, 0x01	; 1
     e84:	11 09       	sbc	r17, r1
     e86:	ef 28       	or	r14, r15
     e88:	81 f7       	brne	.-32     	; 0xe6a <I2C_MasterSendToLocation+0x4e>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
     e8a:	0e 94 3a 06 	call	0xc74	; 0xc74 <I2C_MasterSendSTOP>
     e8e:	81 11       	cpse	r24, r1
     e90:	09 c0       	rjmp	.+18     	; 0xea4 <I2C_MasterSendToLocation+0x88>
     e92:	09 c0       	rjmp	.+18     	; 0xea6 <I2C_MasterSendToLocation+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
     e94:	85 e0       	ldi	r24, 0x05	; 5
     e96:	07 c0       	rjmp	.+14     	; 0xea6 <I2C_MasterSendToLocation+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
     e98:	84 e0       	ldi	r24, 0x04	; 4
     e9a:	05 c0       	rjmp	.+10     	; 0xea6 <I2C_MasterSendToLocation+0x8a>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
     e9c:	83 e0       	ldi	r24, 0x03	; 3
     e9e:	03 c0       	rjmp	.+6      	; 0xea6 <I2C_MasterSendToLocation+0x8a>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
     ea4:	8b 2d       	mov	r24, r11
}
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	ff 90       	pop	r15
     eb0:	ef 90       	pop	r14
     eb2:	df 90       	pop	r13
     eb4:	cf 90       	pop	r12
     eb6:	bf 90       	pop	r11
     eb8:	08 95       	ret

00000eba <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	1f 92       	push	r1
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
     eca:	89 01       	movw	r16, r18
     ecc:	9a 01       	movw	r18, r20
     ece:	41 e0       	ldi	r20, 0x01	; 1
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	be 01       	movw	r22, r28
     ed4:	6f 5f       	subi	r22, 0xFF	; 255
     ed6:	7f 4f       	sbci	r23, 0xFF	; 255
     ed8:	0e 94 92 06 	call	0xd24	; 0xd24 <I2C_MasterReceiveGeneral>
}
     edc:	0f 90       	pop	r0
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	08 95       	ret

00000ee8 <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
     ee8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genuSpi_Status>
     eec:	87 30       	cpi	r24, 0x07	; 7
     eee:	41 f1       	breq	.+80     	; 0xf40 <Spi_init+0x58>
     ef0:	87 b3       	in	r24, 0x17	; 23
     ef2:	80 6b       	ori	r24, 0xB0	; 176
     ef4:	87 bb       	out	0x17, r24	; 23
     ef6:	87 b3       	in	r24, 0x17	; 23
     ef8:	8f 7b       	andi	r24, 0xBF	; 191
     efa:	87 bb       	out	0x17, r24	; 23
     efc:	88 b3       	in	r24, 0x18	; 24
     efe:	80 61       	ori	r24, 0x10	; 16
     f00:	88 bb       	out	0x18, r24	; 24
     f02:	8d b1       	in	r24, 0x0d	; 13
     f04:	80 61       	ori	r24, 0x10	; 16
     f06:	8d b9       	out	0x0d, r24	; 13
     f08:	8d b1       	in	r24, 0x0d	; 13
     f0a:	8f 7d       	andi	r24, 0xDF	; 223
     f0c:	8d b9       	out	0x0d, r24	; 13
     f0e:	8d b1       	in	r24, 0x0d	; 13
     f10:	87 7f       	andi	r24, 0xF7	; 247
     f12:	8d b9       	out	0x0d, r24	; 13
     f14:	8d b1       	in	r24, 0x0d	; 13
     f16:	8b 7f       	andi	r24, 0xFB	; 251
     f18:	8d b9       	out	0x0d, r24	; 13
     f1a:	8e b1       	in	r24, 0x0e	; 14
     f1c:	81 60       	ori	r24, 0x01	; 1
     f1e:	8e b9       	out	0x0e, r24	; 14
     f20:	8d b1       	in	r24, 0x0d	; 13
     f22:	8e 7f       	andi	r24, 0xFE	; 254
     f24:	8d b9       	out	0x0d, r24	; 13
     f26:	8d b1       	in	r24, 0x0d	; 13
     f28:	8d 7f       	andi	r24, 0xFD	; 253
     f2a:	8d b9       	out	0x0d, r24	; 13
     f2c:	8d b1       	in	r24, 0x0d	; 13
     f2e:	8d b9       	out	0x0d, r24	; 13
     f30:	8d b1       	in	r24, 0x0d	; 13
     f32:	80 64       	ori	r24, 0x40	; 64
     f34:	8d b9       	out	0x0d, r24	; 13
     f36:	87 e0       	ldi	r24, 0x07	; 7
     f38:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <genuSpi_Status>
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	08 95       	ret
     f40:	88 e0       	ldi	r24, 0x08	; 8
     f42:	08 95       	ret

00000f44 <Spi_MasterSendByte>:
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	1f 92       	push	r1
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genuSpi_Status>
     f52:	97 30       	cpi	r25, 0x07	; 7
     f54:	39 f4       	brne	.+14     	; 0xf64 <Spi_MasterSendByte+0x20>
     f56:	8f b9       	out	0x0f, r24	; 15
     f58:	77 9b       	sbis	0x0e, 7	; 14
     f5a:	fe cf       	rjmp	.-4      	; 0xf58 <Spi_MasterSendByte+0x14>
     f5c:	8f b1       	in	r24, 0x0f	; 15
     f5e:	89 83       	std	Y+1, r24	; 0x01
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <Spi_MasterSendByte+0x22>
     f64:	86 e0       	ldi	r24, 0x06	; 6
     f66:	0f 90       	pop	r0
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	08 95       	ret

00000f6e <Spi_MasterSendPacket>:
     f6e:	ef 92       	push	r14
     f70:	ff 92       	push	r15
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <genuSpi_Status>
     f7c:	27 30       	cpi	r18, 0x07	; 7
     f7e:	a1 f4       	brne	.+40     	; 0xfa8 <Spi_MasterSendPacket+0x3a>
     f80:	8b 01       	movw	r16, r22
     f82:	7c 01       	movw	r14, r24
     f84:	c0 e0       	ldi	r28, 0x00	; 0
     f86:	09 c0       	rjmp	.+18     	; 0xf9a <Spi_MasterSendPacket+0x2c>
     f88:	f7 01       	movw	r30, r14
     f8a:	e2 0f       	add	r30, r18
     f8c:	f3 1f       	adc	r31, r19
     f8e:	80 81       	ld	r24, Z
     f90:	0e 94 a2 07 	call	0xf44	; 0xf44 <Spi_MasterSendByte>
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	51 f4       	brne	.+20     	; 0xfac <Spi_MasterSendPacket+0x3e>
     f98:	cf 5f       	subi	r28, 0xFF	; 255
     f9a:	2c 2f       	mov	r18, r28
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	20 17       	cp	r18, r16
     fa0:	31 07       	cpc	r19, r17
     fa2:	90 f3       	brcs	.-28     	; 0xf88 <Spi_MasterSendPacket+0x1a>
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	03 c0       	rjmp	.+6      	; 0xfae <Spi_MasterSendPacket+0x40>
     fa8:	86 e0       	ldi	r24, 0x06	; 6
     faa:	01 c0       	rjmp	.+2      	; 0xfae <Spi_MasterSendPacket+0x40>
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	ff 90       	pop	r15
     fb6:	ef 90       	pop	r14
     fb8:	08 95       	ret

00000fba <__vector_12>:


     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	0f 92       	push	r0
     fc2:	11 24       	eor	r1, r1
     fc4:	2f 93       	push	r18
     fc6:	3f 93       	push	r19
     fc8:	4f 93       	push	r20
     fca:	5f 93       	push	r21
     fcc:	6f 93       	push	r22
     fce:	7f 93       	push	r23
     fd0:	8f 93       	push	r24
     fd2:	9f 93       	push	r25
     fd4:	af 93       	push	r26
     fd6:	bf 93       	push	r27
     fd8:	ef 93       	push	r30
     fda:	ff 93       	push	r31
     fdc:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <SPI_STC_CallBackPtr>
     fe0:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <SPI_STC_CallBackPtr+0x1>
     fe4:	09 95       	icall
     fe6:	ff 91       	pop	r31
     fe8:	ef 91       	pop	r30
     fea:	bf 91       	pop	r27
     fec:	af 91       	pop	r26
     fee:	9f 91       	pop	r25
     ff0:	8f 91       	pop	r24
     ff2:	7f 91       	pop	r23
     ff4:	6f 91       	pop	r22
     ff6:	5f 91       	pop	r21
     ff8:	4f 91       	pop	r20
     ffa:	3f 91       	pop	r19
     ffc:	2f 91       	pop	r18
     ffe:	0f 90       	pop	r0
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	0f 90       	pop	r0
    1004:	1f 90       	pop	r1
    1006:	18 95       	reti

00001008 <stringLength>:
        else if(string1[u8_loopIndex] < string2[u8_loopIndex])
            return 2;
        u8_loopIndex++;
    }
    return 3;
}
    1008:	ac 01       	movw	r20, r24
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	01 c0       	rjmp	.+2      	; 0x1010 <stringLength+0x8>
    100e:	8f 5f       	subi	r24, 0xFF	; 255
    1010:	fa 01       	movw	r30, r20
    1012:	e8 0f       	add	r30, r24
    1014:	f1 1d       	adc	r31, r1
    1016:	20 81       	ld	r18, Z
    1018:	21 11       	cpse	r18, r1
    101a:	f9 cf       	rjmp	.-14     	; 0x100e <stringLength+0x6>
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	08 95       	ret

00001020 <stringCompare>:
    1020:	ff 92       	push	r15
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	ec 01       	movw	r28, r24
    102c:	8b 01       	movw	r16, r22
    102e:	0e 94 04 08 	call	0x1008	; 0x1008 <stringLength>
    1032:	f8 2e       	mov	r15, r24
    1034:	c8 01       	movw	r24, r16
    1036:	0e 94 04 08 	call	0x1008	; 0x1008 <stringLength>
    103a:	8f 15       	cp	r24, r15
    103c:	a8 f0       	brcs	.+42     	; 0x1068 <stringCompare+0x48>
    103e:	f8 16       	cp	r15, r24
    1040:	a8 f0       	brcs	.+42     	; 0x106c <stringCompare+0x4c>
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	07 c0       	rjmp	.+14     	; 0x1054 <stringCompare+0x34>
    1046:	f8 01       	movw	r30, r16
    1048:	e8 0f       	add	r30, r24
    104a:	f9 1f       	adc	r31, r25
    104c:	80 81       	ld	r24, Z
    104e:	28 13       	cpse	r18, r24
    1050:	0f c0       	rjmp	.+30     	; 0x1070 <stringCompare+0x50>
    1052:	3f 5f       	subi	r19, 0xFF	; 255
    1054:	83 2f       	mov	r24, r19
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	fe 01       	movw	r30, r28
    105a:	e8 0f       	add	r30, r24
    105c:	f9 1f       	adc	r31, r25
    105e:	20 81       	ld	r18, Z
    1060:	21 11       	cpse	r18, r1
    1062:	f1 cf       	rjmp	.-30     	; 0x1046 <stringCompare+0x26>
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	05 c0       	rjmp	.+10     	; 0x1072 <stringCompare+0x52>
    1068:	82 e0       	ldi	r24, 0x02	; 2
    106a:	03 c0       	rjmp	.+6      	; 0x1072 <stringCompare+0x52>
    106c:	83 e0       	ldi	r24, 0x03	; 3
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <stringCompare+0x52>
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	ff 90       	pop	r15
    107c:	08 95       	ret

0000107e <stringConcatenate>:
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	ec 01       	movw	r28, r24
    108a:	8b 01       	movw	r16, r22
    108c:	cb 01       	movw	r24, r22
    108e:	0e 94 04 08 	call	0x1008	; 0x1008 <stringLength>
    1092:	f8 2e       	mov	r15, r24
    1094:	ce 01       	movw	r24, r28
    1096:	0e 94 04 08 	call	0x1008	; 0x1008 <stringLength>
    109a:	81 50       	subi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0b c0       	rjmp	.+22     	; 0x10b6 <stringConcatenate+0x38>
    10a0:	28 0f       	add	r18, r24
    10a2:	31 1d       	adc	r19, r1
    10a4:	fe 01       	movw	r30, r28
    10a6:	e2 0f       	add	r30, r18
    10a8:	f3 1f       	adc	r31, r19
    10aa:	d8 01       	movw	r26, r16
    10ac:	a9 0f       	add	r26, r25
    10ae:	b1 1d       	adc	r27, r1
    10b0:	2c 91       	ld	r18, X
    10b2:	20 83       	st	Z, r18
    10b4:	9f 5f       	subi	r25, 0xFF	; 255
    10b6:	29 2f       	mov	r18, r25
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	4f 2d       	mov	r20, r15
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	41 50       	subi	r20, 0x01	; 1
    10c0:	51 09       	sbc	r21, r1
    10c2:	42 17       	cp	r20, r18
    10c4:	53 07       	cpc	r21, r19
    10c6:	64 f7       	brge	.-40     	; 0x10a0 <stringConcatenate+0x22>
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	08 95       	ret

000010d4 <EmptyString>:

void EmptyString(uint8_t *string)
{
    10d4:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
    10d6:	90 e0       	ldi	r25, 0x00	; 0
	while(string[u8_loopIndex] != '\0')
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <EmptyString+0xa>
		string[u8_loopIndex++] = '\0';
    10da:	9f 5f       	subi	r25, 0xFF	; 255
    10dc:	10 82       	st	Z, r1
}

void EmptyString(uint8_t *string)
{
	uint8_t u8_loopIndex=0;
	while(string[u8_loopIndex] != '\0')
    10de:	fa 01       	movw	r30, r20
    10e0:	e9 0f       	add	r30, r25
    10e2:	f1 1d       	adc	r31, r1
    10e4:	20 81       	ld	r18, Z
    10e6:	21 11       	cpse	r18, r1
    10e8:	f8 cf       	rjmp	.-16     	; 0x10da <EmptyString+0x6>
		string[u8_loopIndex++] = '\0';
}
    10ea:	08 95       	ret

000010ec <stringCopy>:

void stringCopy(uint8_t* source, uint8_t* destination)
{
    10ec:	dc 01       	movw	r26, r24
    uint8_t u8_loopIndex=0;
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    while(source[u8_loopIndex] != '\0')
    10f0:	05 c0       	rjmp	.+10     	; 0x10fc <stringCopy+0x10>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
    10f2:	fb 01       	movw	r30, r22
    10f4:	e2 0f       	add	r30, r18
    10f6:	f3 1f       	adc	r31, r19
    10f8:	40 83       	st	Z, r20
	    u8_loopIndex++;
    10fa:	9f 5f       	subi	r25, 0xFF	; 255
}

void stringCopy(uint8_t* source, uint8_t* destination)
{
    uint8_t u8_loopIndex=0;
    while(source[u8_loopIndex] != '\0')
    10fc:	29 2f       	mov	r18, r25
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	fd 01       	movw	r30, r26
    1102:	e2 0f       	add	r30, r18
    1104:	f3 1f       	adc	r31, r19
    1106:	40 81       	ld	r20, Z
    1108:	41 11       	cpse	r20, r1
    110a:	f3 cf       	rjmp	.-26     	; 0x10f2 <stringCopy+0x6>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
	    u8_loopIndex++;
    }
}
    110c:	08 95       	ret

0000110e <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    110e:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <u8_Uart_Status>
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	81 f0       	breq	.+32     	; 0x1136 <Uart_init+0x28>
    1116:	10 bc       	out	0x20, r1	; 32
    1118:	8c e0       	ldi	r24, 0x0C	; 12
    111a:	89 b9       	out	0x09, r24	; 9
    111c:	82 e0       	ldi	r24, 0x02	; 2
    111e:	8b b9       	out	0x0b, r24	; 11
    1120:	88 e1       	ldi	r24, 0x18	; 24
    1122:	8a b9       	out	0x0a, r24	; 10
    1124:	80 e8       	ldi	r24, 0x80	; 128
    1126:	80 bd       	out	0x20, r24	; 32
    1128:	80 b5       	in	r24, 0x20	; 32
    112a:	86 68       	ori	r24, 0x86	; 134
    112c:	80 bd       	out	0x20, r24	; 32
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <u8_Uart_Status>
    1134:	08 95       	ret
    1136:	87 e0       	ldi	r24, 0x07	; 7
    1138:	08 95       	ret

0000113a <Uart_sendByte>:
    113a:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <u8_Uart_Status>
    113e:	99 23       	and	r25, r25
    1140:	29 f0       	breq	.+10     	; 0x114c <Uart_sendByte+0x12>
    1142:	5d 9b       	sbis	0x0b, 5	; 11
    1144:	fe cf       	rjmp	.-4      	; 0x1142 <Uart_sendByte+0x8>
    1146:	8c b9       	out	0x0c, r24	; 12
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	08 95       	ret
    114c:	86 e0       	ldi	r24, 0x06	; 6
    114e:	08 95       	ret

00001150 <Uart_sendPacket>:
    1150:	ef 92       	push	r14
    1152:	ff 92       	push	r15
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <u8_Uart_Status>
    1160:	22 23       	and	r18, r18
    1162:	99 f0       	breq	.+38     	; 0x118a <Uart_sendPacket+0x3a>
    1164:	8b 01       	movw	r16, r22
    1166:	7c 01       	movw	r14, r24
    1168:	c0 e0       	ldi	r28, 0x00	; 0
    116a:	d0 e0       	ldi	r29, 0x00	; 0
    116c:	09 c0       	rjmp	.+18     	; 0x1180 <Uart_sendPacket+0x30>
    116e:	f7 01       	movw	r30, r14
    1170:	ec 0f       	add	r30, r28
    1172:	fd 1f       	adc	r31, r29
    1174:	80 81       	ld	r24, Z
    1176:	0e 94 9d 08 	call	0x113a	; 0x113a <Uart_sendByte>
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	41 f4       	brne	.+16     	; 0x118e <Uart_sendPacket+0x3e>
    117e:	21 96       	adiw	r28, 0x01	; 1
    1180:	c0 17       	cp	r28, r16
    1182:	d1 07       	cpc	r29, r17
    1184:	a0 f3       	brcs	.-24     	; 0x116e <Uart_sendPacket+0x1e>
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	03 c0       	rjmp	.+6      	; 0x1190 <Uart_sendPacket+0x40>
    118a:	86 e0       	ldi	r24, 0x06	; 6
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <Uart_sendPacket+0x40>
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	ef 90       	pop	r14
    119c:	08 95       	ret

0000119e <Uart_EnableNotification_RXC>:
    119e:	9c 01       	movw	r18, r24
    11a0:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <u8_Uart_Status>
    11a4:	99 23       	and	r25, r25
    11a6:	61 f0       	breq	.+24     	; 0x11c0 <Uart_EnableNotification_RXC+0x22>
    11a8:	21 15       	cp	r18, r1
    11aa:	31 05       	cpc	r19, r1
    11ac:	59 f0       	breq	.+22     	; 0x11c4 <Uart_EnableNotification_RXC+0x26>
    11ae:	8a b1       	in	r24, 0x0a	; 10
    11b0:	80 68       	ori	r24, 0x80	; 128
    11b2:	8a b9       	out	0x0a, r24	; 10
    11b4:	30 93 e9 02 	sts	0x02E9, r19	; 0x8002e9 <Uart_RXC_CallBackPtr+0x1>
    11b8:	20 93 e8 02 	sts	0x02E8, r18	; 0x8002e8 <Uart_RXC_CallBackPtr>
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	08 95       	ret
    11c0:	86 e0       	ldi	r24, 0x06	; 6
    11c2:	08 95       	ret
    11c4:	85 e0       	ldi	r24, 0x05	; 5
    11c6:	08 95       	ret

000011c8 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    11c8:	8c b1       	in	r24, 0x0c	; 12
}
    11ca:	08 95       	ret

000011cc <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    11cc:	1f 92       	push	r1
    11ce:	0f 92       	push	r0
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	0f 92       	push	r0
    11d4:	11 24       	eor	r1, r1
    11d6:	2f 93       	push	r18
    11d8:	3f 93       	push	r19
    11da:	4f 93       	push	r20
    11dc:	5f 93       	push	r21
    11de:	6f 93       	push	r22
    11e0:	7f 93       	push	r23
    11e2:	8f 93       	push	r24
    11e4:	9f 93       	push	r25
    11e6:	af 93       	push	r26
    11e8:	bf 93       	push	r27
    11ea:	ef 93       	push	r30
    11ec:	ff 93       	push	r31
    11ee:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <Uart_TXC_CallBackPtr>
    11f2:	f0 91 eb 02 	lds	r31, 0x02EB	; 0x8002eb <Uart_TXC_CallBackPtr+0x1>
    11f6:	09 95       	icall
    11f8:	ff 91       	pop	r31
    11fa:	ef 91       	pop	r30
    11fc:	bf 91       	pop	r27
    11fe:	af 91       	pop	r26
    1200:	9f 91       	pop	r25
    1202:	8f 91       	pop	r24
    1204:	7f 91       	pop	r23
    1206:	6f 91       	pop	r22
    1208:	5f 91       	pop	r21
    120a:	4f 91       	pop	r20
    120c:	3f 91       	pop	r19
    120e:	2f 91       	pop	r18
    1210:	0f 90       	pop	r0
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	0f 90       	pop	r0
    1216:	1f 90       	pop	r1
    1218:	18 95       	reti

0000121a <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    121a:	1f 92       	push	r1
    121c:	0f 92       	push	r0
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	0f 92       	push	r0
    1222:	11 24       	eor	r1, r1
    1224:	2f 93       	push	r18
    1226:	3f 93       	push	r19
    1228:	4f 93       	push	r20
    122a:	5f 93       	push	r21
    122c:	6f 93       	push	r22
    122e:	7f 93       	push	r23
    1230:	8f 93       	push	r24
    1232:	9f 93       	push	r25
    1234:	af 93       	push	r26
    1236:	bf 93       	push	r27
    1238:	ef 93       	push	r30
    123a:	ff 93       	push	r31
    123c:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <Uart_RXC_CallBackPtr>
    1240:	f0 91 e9 02 	lds	r31, 0x02E9	; 0x8002e9 <Uart_RXC_CallBackPtr+0x1>
    1244:	09 95       	icall
    1246:	ff 91       	pop	r31
    1248:	ef 91       	pop	r30
    124a:	bf 91       	pop	r27
    124c:	af 91       	pop	r26
    124e:	9f 91       	pop	r25
    1250:	8f 91       	pop	r24
    1252:	7f 91       	pop	r23
    1254:	6f 91       	pop	r22
    1256:	5f 91       	pop	r21
    1258:	4f 91       	pop	r20
    125a:	3f 91       	pop	r19
    125c:	2f 91       	pop	r18
    125e:	0f 90       	pop	r0
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	0f 90       	pop	r0
    1264:	1f 90       	pop	r1
    1266:	18 95       	reti

00001268 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    1268:	1f 92       	push	r1
    126a:	0f 92       	push	r0
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	0f 92       	push	r0
    1270:	11 24       	eor	r1, r1
    1272:	2f 93       	push	r18
    1274:	3f 93       	push	r19
    1276:	4f 93       	push	r20
    1278:	5f 93       	push	r21
    127a:	6f 93       	push	r22
    127c:	7f 93       	push	r23
    127e:	8f 93       	push	r24
    1280:	9f 93       	push	r25
    1282:	af 93       	push	r26
    1284:	bf 93       	push	r27
    1286:	ef 93       	push	r30
    1288:	ff 93       	push	r31
    128a:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <Uart_UDRE_CallBackPtr>
    128e:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <Uart_UDRE_CallBackPtr+0x1>
    1292:	09 95       	icall
    1294:	ff 91       	pop	r31
    1296:	ef 91       	pop	r30
    1298:	bf 91       	pop	r27
    129a:	af 91       	pop	r26
    129c:	9f 91       	pop	r25
    129e:	8f 91       	pop	r24
    12a0:	7f 91       	pop	r23
    12a2:	6f 91       	pop	r22
    12a4:	5f 91       	pop	r21
    12a6:	4f 91       	pop	r20
    12a8:	3f 91       	pop	r19
    12aa:	2f 91       	pop	r18
    12ac:	0f 90       	pop	r0
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	0f 90       	pop	r0
    12b2:	1f 90       	pop	r1
    12b4:	18 95       	reti

000012b6 <__adddi3_s8>:
    12b6:	00 24       	eor	r0, r0
    12b8:	a7 fd       	sbrc	r26, 7
    12ba:	00 94       	com	r0
    12bc:	2a 0f       	add	r18, r26
    12be:	30 1d       	adc	r19, r0
    12c0:	40 1d       	adc	r20, r0
    12c2:	50 1d       	adc	r21, r0
    12c4:	60 1d       	adc	r22, r0
    12c6:	70 1d       	adc	r23, r0
    12c8:	80 1d       	adc	r24, r0
    12ca:	90 1d       	adc	r25, r0
    12cc:	08 95       	ret

000012ce <__cmpdi2>:
    12ce:	2a 15       	cp	r18, r10
    12d0:	3b 05       	cpc	r19, r11
    12d2:	4c 05       	cpc	r20, r12
    12d4:	5d 05       	cpc	r21, r13
    12d6:	6e 05       	cpc	r22, r14
    12d8:	7f 05       	cpc	r23, r15
    12da:	80 07       	cpc	r24, r16
    12dc:	91 07       	cpc	r25, r17
    12de:	08 95       	ret

000012e0 <__cmpdi2_s8>:
    12e0:	00 24       	eor	r0, r0
    12e2:	a7 fd       	sbrc	r26, 7
    12e4:	00 94       	com	r0
    12e6:	2a 17       	cp	r18, r26
    12e8:	30 05       	cpc	r19, r0
    12ea:	40 05       	cpc	r20, r0
    12ec:	50 05       	cpc	r21, r0
    12ee:	60 05       	cpc	r22, r0
    12f0:	70 05       	cpc	r23, r0
    12f2:	80 05       	cpc	r24, r0
    12f4:	90 05       	cpc	r25, r0
    12f6:	08 95       	ret

000012f8 <_exit>:
    12f8:	f8 94       	cli

000012fa <__stop_program>:
    12fa:	ff cf       	rjmp	.-2      	; 0x12fa <__stop_program>
