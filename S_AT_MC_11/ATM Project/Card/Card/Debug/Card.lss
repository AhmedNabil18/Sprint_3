
Card.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c0  00800060  000016f4  00001788  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012e  00800220  00800220  00001948  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001978  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000360e  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001039  00000000  00000000  0000535a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021d4  00000000  00000000  00006393  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d04  00000000  00000000  00008568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000153e  00000000  00000000  0000926c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b53  00000000  00000000  0000a7aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  0000e2fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 65 07 	jmp	0xeca	; 0xeca <__vector_1>
       8:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__vector_2>
       c:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__vector_12>
      34:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__vector_13>
      38:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__vector_14>
      3c:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 32       	cpi	r26, 0x20	; 32
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	a0 e2       	ldi	r26, 0x20	; 32
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 34       	cpi	r26, 0x4E	; 78
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bd 06 	call	0xd7a	; 0xd7a <main>
      8a:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ATM_REQ_ISR>:
/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/*--*-*-*- FUNCTIONS IMPLEMENTATION -*-*-*-*-*-*/
#if REQUEST_MODE == INTERRUPT_REQUEST
void ATM_REQ_ISR(void)
{	
	if((gu8_USER_Mode_State == USER_IDLE) && (cgu8_ATM_Req == ATM_NOT_REQUESTED))
      92:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <gu8_USER_Mode_State>
      96:	81 11       	cpse	r24, r1
      98:	1c c0       	rjmp	.+56     	; 0xd2 <ATM_REQ_ISR+0x40>
      9a:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <cgu8_ATM_Req>
      9e:	91 11       	cpse	r25, r1
      a0:	18 c0       	rjmp	.+48     	; 0xd2 <ATM_REQ_ISR+0x40>
	{
		/* ATM Request Data from Card */
		if (gu8_CardMode == CARD_MODE_USER)
      a2:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <gu8_CardMode>
      a6:	81 30       	cpi	r24, 0x01	; 1
      a8:	19 f4       	brne	.+6      	; 0xb0 <ATM_REQ_ISR+0x1e>
		{
			cgu8_ATM_Req = ATM_REQUESTED;
      aa:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <cgu8_ATM_Req>
      ae:	08 95       	ret
		}else if(gu8_CardMode == CARD_MODE_ADMIN) // Card is in ADMIN Mode 
      b0:	81 11       	cpse	r24, r1
      b2:	17 c0       	rjmp	.+46     	; 0xe2 <ATM_REQ_ISR+0x50>
		{	//Send "**" to the atm to indicate that Card is in Admin mode
			SPI_SS_ENABLE();
      b4:	88 b3       	in	r24, 0x18	; 24
      b6:	8f 7e       	andi	r24, 0xEF	; 239
      b8:	88 bb       	out	0x18, r24	; 24
			Spi_MasterSendPacket((uint8_t*)"**",3);
      ba:	63 e0       	ldi	r22, 0x03	; 3
      bc:	70 e0       	ldi	r23, 0x00	; 0
      be:	85 e6       	ldi	r24, 0x65	; 101
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 bb 09 	call	0x1376	; 0x1376 <Spi_MasterSendPacket>
			SPI_SS_DISABLE();
      c6:	88 b3       	in	r24, 0x18	; 24
      c8:	80 61       	ori	r24, 0x10	; 16
      ca:	88 bb       	out	0x18, r24	; 24
			cgu8_ATM_Req = ATM_NOT_REQUESTED;
      cc:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <cgu8_ATM_Req>
      d0:	08 95       	ret
		}
	}
	else if((gu8_USER_Mode_State == USER_BUSY) && (cgu8_ATM_Req == ATM_NOT_REQUESTED))
      d2:	81 30       	cpi	r24, 0x01	; 1
      d4:	31 f4       	brne	.+12     	; 0xe2 <ATM_REQ_ISR+0x50>
      d6:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <cgu8_ATM_Req>
      da:	81 11       	cpse	r24, r1
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <ATM_REQ_ISR+0x50>
	{	/* ATM CARD OUT*/
		gu8_USER_Mode_State = USER_IDLE;
      de:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <gu8_USER_Mode_State>
      e2:	08 95       	ret

000000e4 <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
      e4:	0f 93       	push	r16
      e6:	1f 93       	push	r17
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
      f0:	cf 5f       	subi	r28, 0xFF	; 255
      f2:	d1 09       	sbc	r29, r1
      f4:	0f b6       	in	r0, 0x3f	; 63
      f6:	f8 94       	cli
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	0f be       	out	0x3f, r0	; 63
      fc:	cd bf       	out	0x3d, r28	; 61
      fe:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     100:	ce 01       	movw	r24, r28
     102:	01 96       	adiw	r24, 0x01	; 1
     104:	2f ef       	ldi	r18, 0xFF	; 255
     106:	fc 01       	movw	r30, r24
     108:	11 92       	st	Z+, r1
     10a:	2a 95       	dec	r18
     10c:	e9 f7       	brne	.-6      	; 0x108 <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
     10e:	0e 94 9a 06 	call	0xd34	; 0xd34 <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
     112:	85 30       	cpi	r24, 0x05	; 5
     114:	39 f4       	brne	.+14     	; 0x124 <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
     116:	b8 01       	movw	r22, r16
     118:	ce 01       	movw	r24, r28
     11a:	01 96       	adiw	r24, 0x01	; 1
     11c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <stringCopy>
		return APP_STATUS_ERROR_OK;
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	05 c0       	rjmp	.+10     	; 0x12e <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	11 f0       	breq	.+4      	; 0x12c <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	01 c0       	rjmp	.+2      	; 0x12e <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
     12c:	86 e0       	ldi	r24, 0x06	; 6
}
     12e:	c1 50       	subi	r28, 0x01	; 1
     130:	df 4f       	sbci	r29, 0xFF	; 255
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	f8 94       	cli
     136:	de bf       	out	0x3e, r29	; 62
     138:	0f be       	out	0x3f, r0	; 63
     13a:	cd bf       	out	0x3d, r28	; 61
     13c:	df 91       	pop	r29
     13e:	cf 91       	pop	r28
     140:	1f 91       	pop	r17
     142:	0f 91       	pop	r16
     144:	08 95       	ret

00000146 <AppADMIN_getCardName>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD Holder Name by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card holder's name.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardName(uint8_t* pu8_data)
{
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card Holder Name: ") != TERMINAL_STATUS_ERROR_OK)
     14c:	88 e6       	ldi	r24, 0x68	; 104
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Terminal_Out>
     154:	81 30       	cpi	r24, 0x01	; 1
     156:	c9 f4       	brne	.+50     	; 0x18a <AppADMIN_getCardName+0x44>
		return APP_STATUS_ERROR_NOK;
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     158:	ce 01       	movw	r24, r28
     15a:	0e 94 72 00 	call	0xe4	; 0xe4 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     15e:	81 30       	cpi	r24, 0x01	; 1
     160:	29 f0       	breq	.+10     	; 0x16c <AppADMIN_getCardName+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     162:	11 f0       	breq	.+4      	; 0x168 <AppADMIN_getCardName+0x22>
     164:	86 30       	cpi	r24, 0x06	; 6
     166:	99 f4       	brne	.+38     	; 0x18e <AppADMIN_getCardName+0x48>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     168:	86 30       	cpi	r24, 0x06	; 6
     16a:	b1 f3       	breq	.-20     	; 0x158 <AppADMIN_getCardName+0x12>
		
		if(stringLength(pu8_data) != MAX_NAME_LENGTH+1) 
     16c:	ce 01       	movw	r24, r28
     16e:	0e 94 08 0a 	call	0x1410	; 0x1410 <stringLength>
     172:	8a 30       	cpi	r24, 0x0A	; 10
     174:	71 f0       	breq	.+28     	; 0x192 <AppADMIN_getCardName+0x4c>
		{
			if(Terminal_Out((uint8_t*)"\nInvalid Name, Name should be 9 characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     176:	8b e7       	ldi	r24, 0x7B	; 123
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Terminal_Out>
     17e:	81 30       	cpi	r24, 0x01	; 1
     180:	51 f4       	brne	.+20     	; 0x196 <AppADMIN_getCardName+0x50>
				return APP_STATUS_ERROR_NOK;
		}else{break;}
			
		EmptyString(pu8_data);
     182:	ce 01       	movw	r24, r28
     184:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <EmptyString>
	} while (1);
     188:	e1 cf       	rjmp	.-62     	; 0x14c <AppADMIN_getCardName+0x6>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card Holder Name: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	05 c0       	rjmp	.+10     	; 0x198 <AppADMIN_getCardName+0x52>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	03 c0       	rjmp	.+6      	; 0x198 <AppADMIN_getCardName+0x52>
				return APP_STATUS_ERROR_NOK;
		}else{break;}
			
		EmptyString(pu8_data);
	} while (1);
	return APP_STATUS_ERROR_OK;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	01 c0       	rjmp	.+2      	; 0x198 <AppADMIN_getCardName+0x52>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringLength(pu8_data) != MAX_NAME_LENGTH+1) 
		{
			if(Terminal_Out((uint8_t*)"\nInvalid Name, Name should be 9 characters\r\n") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     196:	80 e0       	ldi	r24, 0x00	; 0
		}else{break;}
			
		EmptyString(pu8_data);
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	08 95       	ret

0000019e <AppADMIN_getCardPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardPAN(uint8_t* pu8_data)
{
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nCard PAN: ") != TERMINAL_STATUS_ERROR_OK)
     1a6:	88 ea       	ldi	r24, 0xA8	; 168
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Terminal_Out>
     1ae:	81 30       	cpi	r24, 0x01	; 1
     1b0:	99 f5       	brne	.+102    	; 0x218 <AppADMIN_getCardPAN+0x7a>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     1b2:	ce 01       	movw	r24, r28
     1b4:	0e 94 72 00 	call	0xe4	; 0xe4 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	29 f0       	breq	.+10     	; 0x1c6 <AppADMIN_getCardPAN+0x28>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     1bc:	11 f0       	breq	.+4      	; 0x1c2 <AppADMIN_getCardPAN+0x24>
     1be:	86 30       	cpi	r24, 0x06	; 6
     1c0:	69 f5       	brne	.+90     	; 0x21c <AppADMIN_getCardPAN+0x7e>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     1c2:	86 30       	cpi	r24, 0x06	; 6
     1c4:	b1 f3       	breq	.-20     	; 0x1b2 <AppADMIN_getCardPAN+0x14>
		if(stringLength(pu8_data) != MAX_PAN_LENGTH+1)
     1c6:	ce 01       	movw	r24, r28
     1c8:	0e 94 08 0a 	call	0x1410	; 0x1410 <stringLength>
     1cc:	8a 30       	cpi	r24, 0x0A	; 10
     1ce:	e9 f0       	breq	.+58     	; 0x20a <AppADMIN_getCardPAN+0x6c>
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)	
     1d0:	84 eb       	ldi	r24, 0xB4	; 180
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Terminal_Out>
     1d8:	81 30       	cpi	r24, 0x01	; 1
     1da:	11 f5       	brne	.+68     	; 0x220 <AppADMIN_getCardPAN+0x82>
				return APP_STATUS_ERROR_NOK;
			EmptyString(pu8_data);
     1dc:	ce 01       	movw	r24, r28
     1de:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <EmptyString>
			continue;
     1e2:	e1 cf       	rjmp	.-62     	; 0x1a6 <AppADMIN_getCardPAN+0x8>
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
     1e4:	fe 01       	movw	r30, r28
     1e6:	e1 0f       	add	r30, r17
     1e8:	f1 1d       	adc	r31, r1
     1ea:	80 81       	ld	r24, Z
     1ec:	80 53       	subi	r24, 0x30	; 48
     1ee:	8a 30       	cpi	r24, 0x0A	; 10
     1f0:	50 f0       	brcs	.+20     	; 0x206 <AppADMIN_getCardPAN+0x68>
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     1f2:	84 eb       	ldi	r24, 0xB4	; 180
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Terminal_Out>
     1fa:	81 30       	cpi	r24, 0x01	; 1
     1fc:	99 f4       	brne	.+38     	; 0x224 <AppADMIN_getCardPAN+0x86>
					return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
     1fe:	ce 01       	movw	r24, r28
     200:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <EmptyString>
				break;
     204:	05 c0       	rjmp	.+10     	; 0x210 <AppADMIN_getCardPAN+0x72>
			EmptyString(pu8_data);
			continue;
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
     206:	1f 5f       	subi	r17, 0xFF	; 255
     208:	01 c0       	rjmp	.+2      	; 0x20c <AppADMIN_getCardPAN+0x6e>
     20a:	10 e0       	ldi	r17, 0x00	; 0
     20c:	19 30       	cpi	r17, 0x09	; 9
     20e:	50 f3       	brcs	.-44     	; 0x1e4 <AppADMIN_getCardPAN+0x46>
					return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
				break;
			}
		}
		if (u8_index == MAX_PAN_LENGTH)
     210:	19 30       	cpi	r17, 0x09	; 9
     212:	49 f6       	brne	.-110    	; 0x1a6 <AppADMIN_getCardPAN+0x8>
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	07 c0       	rjmp	.+14     	; 0x226 <AppADMIN_getCardPAN+0x88>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nCard PAN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	05 c0       	rjmp	.+10     	; 0x226 <AppADMIN_getCardPAN+0x88>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	03 c0       	rjmp	.+6      	; 0x226 <AppADMIN_getCardPAN+0x88>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		if(stringLength(pu8_data) != MAX_PAN_LENGTH+1)
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)	
				return APP_STATUS_ERROR_NOK;
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	01 c0       	rjmp	.+2      	; 0x226 <AppADMIN_getCardPAN+0x88>
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     224:	80 e0       	ldi	r24, 0x00	; 0
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	1f 91       	pop	r17
     22c:	08 95       	ret

0000022e <AppADMIN_getCardPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardPIN(uint8_t* pu8_data)
{
     22e:	1f 93       	push	r17
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	Terminal_enablePasswordMode();
     236:	0e 94 b5 06 	call	0xd6a	; 0xd6a <Terminal_enablePasswordMode>
	do
	{
		if(Terminal_Out((uint8_t*)"\nCard PIN: ") != TERMINAL_STATUS_ERROR_OK)
     23a:	87 ee       	ldi	r24, 0xE7	; 231
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Terminal_Out>
     242:	81 30       	cpi	r24, 0x01	; 1
     244:	a9 f5       	brne	.+106    	; 0x2b0 <AppADMIN_getCardPIN+0x82>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     246:	ce 01       	movw	r24, r28
     248:	0e 94 72 00 	call	0xe4	; 0xe4 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     24c:	81 30       	cpi	r24, 0x01	; 1
     24e:	29 f0       	breq	.+10     	; 0x25a <AppADMIN_getCardPIN+0x2c>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     250:	11 f0       	breq	.+4      	; 0x256 <AppADMIN_getCardPIN+0x28>
     252:	86 30       	cpi	r24, 0x06	; 6
     254:	79 f5       	brne	.+94     	; 0x2b4 <AppADMIN_getCardPIN+0x86>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     256:	86 30       	cpi	r24, 0x06	; 6
     258:	b1 f3       	breq	.-20     	; 0x246 <AppADMIN_getCardPIN+0x18>
		
		
		if(stringLength(pu8_data) != MAX_PIN_LENGTH+1)
     25a:	ce 01       	movw	r24, r28
     25c:	0e 94 08 0a 	call	0x1410	; 0x1410 <stringLength>
     260:	85 30       	cpi	r24, 0x05	; 5
     262:	e9 f0       	breq	.+58     	; 0x29e <AppADMIN_getCardPIN+0x70>
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PIN, PIN should be 4 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     264:	83 ef       	ldi	r24, 0xF3	; 243
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Terminal_Out>
     26c:	81 30       	cpi	r24, 0x01	; 1
     26e:	21 f5       	brne	.+72     	; 0x2b8 <AppADMIN_getCardPIN+0x8a>
			return APP_STATUS_ERROR_NOK;
			EmptyString(pu8_data);
     270:	ce 01       	movw	r24, r28
     272:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <EmptyString>
			continue;
     276:	e1 cf       	rjmp	.-62     	; 0x23a <AppADMIN_getCardPIN+0xc>
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PIN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
     278:	fe 01       	movw	r30, r28
     27a:	e1 0f       	add	r30, r17
     27c:	f1 1d       	adc	r31, r1
     27e:	80 81       	ld	r24, Z
     280:	80 53       	subi	r24, 0x30	; 48
     282:	8a 30       	cpi	r24, 0x0A	; 10
     284:	50 f0       	brcs	.+20     	; 0x29a <AppADMIN_getCardPIN+0x6c>
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PIN, PIN should be 4 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     286:	83 ef       	ldi	r24, 0xF3	; 243
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Terminal_Out>
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	a9 f4       	brne	.+42     	; 0x2bc <AppADMIN_getCardPIN+0x8e>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
     292:	ce 01       	movw	r24, r28
     294:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <EmptyString>
				break;
     298:	05 c0       	rjmp	.+10     	; 0x2a4 <AppADMIN_getCardPIN+0x76>
			EmptyString(pu8_data);
			continue;
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PIN_LENGTH; u8_index++)
     29a:	1f 5f       	subi	r17, 0xFF	; 255
     29c:	01 c0       	rjmp	.+2      	; 0x2a0 <AppADMIN_getCardPIN+0x72>
     29e:	10 e0       	ldi	r17, 0x00	; 0
     2a0:	14 30       	cpi	r17, 0x04	; 4
     2a2:	50 f3       	brcs	.-44     	; 0x278 <AppADMIN_getCardPIN+0x4a>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
				break;
			}
		}
		if (u8_index == MAX_PIN_LENGTH)
     2a4:	14 30       	cpi	r17, 0x04	; 4
     2a6:	49 f6       	brne	.-110    	; 0x23a <AppADMIN_getCardPIN+0xc>
		{
			break;
		}
	} while (1);
	Terminal_disablePasswordMode();
     2a8:	0e 94 b9 06 	call	0xd72	; 0xd72 <Terminal_disablePasswordMode>
	return APP_STATUS_ERROR_OK;
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	07 c0       	rjmp	.+14     	; 0x2be <AppADMIN_getCardPIN+0x90>
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"\nCard PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	05 c0       	rjmp	.+10     	; 0x2be <AppADMIN_getCardPIN+0x90>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	03 c0       	rjmp	.+6      	; 0x2be <AppADMIN_getCardPIN+0x90>
		
		
		if(stringLength(pu8_data) != MAX_PIN_LENGTH+1)
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PIN, PIN should be 4 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	01 c0       	rjmp	.+2      	; 0x2be <AppADMIN_getCardPIN+0x90>
		for(u8_index=0; u8_index<MAX_PIN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PIN, PIN should be 4 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     2bc:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_ERROR_OK;
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	08 95       	ret

000002c6 <AppADMIN_saveCardData>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the EEPROM
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveCardData(strCardData_t* pstr_CardData)
{
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	ec 01       	movw	r28, r24
	if(Eeprom_24_writePacket(CARD_NAME_PAGE_ADDR, (pstr_CardData->au8_cardHolderName), MAX_NAME_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     2cc:	4a e0       	ldi	r20, 0x0A	; 10
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	bc 01       	movw	r22, r24
     2d2:	80 e2       	ldi	r24, 0x20	; 32
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 96 04 	call	0x92c	; 0x92c <Eeprom_24_writePacket>
     2da:	81 30       	cpi	r24, 0x01	; 1
     2dc:	e9 f5       	brne	.+122    	; 0x358 <AppADMIN_saveCardData+0x92>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     2de:	2a e0       	ldi	r18, 0x0A	; 10
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	40 e0       	ldi	r20, 0x00	; 0
     2e4:	50 e0       	ldi	r21, 0x00	; 0
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 c0 06 	call	0xd80	; 0xd80 <Delay_ms>
	if(Eeprom_24_writePacket(CARD_PAN_PAGE_ADDR, (pstr_CardData->au8_primaryAccountNumber), MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     2f2:	4a e0       	ldi	r20, 0x0A	; 10
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	be 01       	movw	r22, r28
     2f8:	66 5f       	subi	r22, 0xF6	; 246
     2fa:	7f 4f       	sbci	r23, 0xFF	; 255
     2fc:	80 e3       	ldi	r24, 0x30	; 48
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 96 04 	call	0x92c	; 0x92c <Eeprom_24_writePacket>
     304:	81 30       	cpi	r24, 0x01	; 1
     306:	51 f5       	brne	.+84     	; 0x35c <AppADMIN_saveCardData+0x96>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     308:	2a e0       	ldi	r18, 0x0A	; 10
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 c0 06 	call	0xd80	; 0xd80 <Delay_ms>
	if(Eeprom_24_writePacket(CARD_PIN_PAGE_ADDR, (pstr_CardData->au8_pinNum), MAX_PIN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     31c:	be 01       	movw	r22, r28
     31e:	6c 5e       	subi	r22, 0xEC	; 236
     320:	7f 4f       	sbci	r23, 0xFF	; 255
     322:	45 e0       	ldi	r20, 0x05	; 5
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	80 e4       	ldi	r24, 0x40	; 64
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 96 04 	call	0x92c	; 0x92c <Eeprom_24_writePacket>
     32e:	81 30       	cpi	r24, 0x01	; 1
     330:	b9 f4       	brne	.+46     	; 0x360 <AppADMIN_saveCardData+0x9a>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     332:	2a e0       	ldi	r18, 0x0A	; 10
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	40 e0       	ldi	r20, 0x00	; 0
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 c0 06 	call	0xd80	; 0xd80 <Delay_ms>
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, CARD_INITIALIZED) != EEPROM_24_STATUS_ERROR_OK)
     346:	6a ea       	ldi	r22, 0xAA	; 170
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 a7 03 	call	0x74e	; 0x74e <Eeprom_24_writeByte>
     350:	81 30       	cpi	r24, 0x01	; 1
     352:	41 f0       	breq	.+16     	; 0x364 <AppADMIN_saveCardData+0x9e>
		return APP_STATUS_ERROR_NOK;
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	07 c0       	rjmp	.+14     	; 0x366 <AppADMIN_saveCardData+0xa0>
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveCardData(strCardData_t* pstr_CardData)
{
	if(Eeprom_24_writePacket(CARD_NAME_PAGE_ADDR, (pstr_CardData->au8_cardHolderName), MAX_NAME_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	05 c0       	rjmp	.+10     	; 0x366 <AppADMIN_saveCardData+0xa0>
	Delay_ms(10);
	if(Eeprom_24_writePacket(CARD_PAN_PAGE_ADDR, (pstr_CardData->au8_primaryAccountNumber), MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	03 c0       	rjmp	.+6      	; 0x366 <AppADMIN_saveCardData+0xa0>
	Delay_ms(10);
	if(Eeprom_24_writePacket(CARD_PIN_PAGE_ADDR, (pstr_CardData->au8_pinNum), MAX_PIN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	01 c0       	rjmp	.+2      	; 0x366 <AppADMIN_saveCardData+0xa0>
	Delay_ms(10);
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, CARD_INITIALIZED) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     364:	81 e0       	ldi	r24, 0x01	; 1
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <AppUSER_sendCardData>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to send the Card's Data to the ATM.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_sendCardData(strCardData_t* pstr_CardData)
{
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	6e 97       	sbiw	r28, 0x1e	; 30
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	7c 01       	movw	r14, r24
	if(Terminal_Out((uint8_t*)"Data is being sent to the ATM...\r\n") != TERMINAL_STATUS_ERROR_OK)
     38a:	86 e2       	ldi	r24, 0x26	; 38
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Terminal_Out>
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	f1 f5       	brne	.+124    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		return APP_STATUS_ERROR_NOK;
		
	uint8_t au8_DataFrame[30] = {0};
     396:	8e 01       	movw	r16, r28
     398:	0f 5f       	subi	r16, 0xFF	; 255
     39a:	1f 4f       	sbci	r17, 0xFF	; 255
     39c:	8e e1       	ldi	r24, 0x1E	; 30
     39e:	f8 01       	movw	r30, r16
     3a0:	11 92       	st	Z+, r1
     3a2:	8a 95       	dec	r24
     3a4:	e9 f7       	brne	.-6      	; 0x3a0 <AppUSER_sendCardData+0x34>
	stringConcatenate(au8_DataFrame, (uint8_t*)"#");
     3a6:	69 e4       	ldi	r22, 0x49	; 73
     3a8:	71 e0       	ldi	r23, 0x01	; 1
     3aa:	c8 01       	movw	r24, r16
     3ac:	0e 94 47 0a 	call	0x148e	; 0x148e <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_cardHolderName);
     3b0:	b7 01       	movw	r22, r14
     3b2:	c8 01       	movw	r24, r16
     3b4:	0e 94 47 0a 	call	0x148e	; 0x148e <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"-");
     3b8:	6c e4       	ldi	r22, 0x4C	; 76
     3ba:	71 e0       	ldi	r23, 0x01	; 1
     3bc:	c8 01       	movw	r24, r16
     3be:	0e 94 47 0a 	call	0x148e	; 0x148e <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_primaryAccountNumber);
     3c2:	b7 01       	movw	r22, r14
     3c4:	66 5f       	subi	r22, 0xF6	; 246
     3c6:	7f 4f       	sbci	r23, 0xFF	; 255
     3c8:	c8 01       	movw	r24, r16
     3ca:	0e 94 47 0a 	call	0x148e	; 0x148e <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"-");
     3ce:	6c e4       	ldi	r22, 0x4C	; 76
     3d0:	71 e0       	ldi	r23, 0x01	; 1
     3d2:	c8 01       	movw	r24, r16
     3d4:	0e 94 47 0a 	call	0x148e	; 0x148e <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_pinNum);
     3d8:	b7 01       	movw	r22, r14
     3da:	6c 5e       	subi	r22, 0xEC	; 236
     3dc:	7f 4f       	sbci	r23, 0xFF	; 255
     3de:	c8 01       	movw	r24, r16
     3e0:	0e 94 47 0a 	call	0x148e	; 0x148e <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"#-");
     3e4:	6b e4       	ldi	r22, 0x4B	; 75
     3e6:	71 e0       	ldi	r23, 0x01	; 1
     3e8:	c8 01       	movw	r24, r16
     3ea:	0e 94 47 0a 	call	0x148e	; 0x148e <stringConcatenate>
	
	SPI_SS_ENABLE();
     3ee:	88 b3       	in	r24, 0x18	; 24
     3f0:	8f 7e       	andi	r24, 0xEF	; 239
     3f2:	88 bb       	out	0x18, r24	; 24
	if(Spi_MasterSendPacket(au8_DataFrame, stringLength(au8_DataFrame)) != SPI_STATUS_ERROR_OK)
     3f4:	c8 01       	movw	r24, r16
     3f6:	0e 94 08 0a 	call	0x1410	; 0x1410 <stringLength>
     3fa:	68 2f       	mov	r22, r24
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	c8 01       	movw	r24, r16
     400:	0e 94 bb 09 	call	0x1376	; 0x1376 <Spi_MasterSendPacket>
     404:	81 30       	cpi	r24, 0x01	; 1
     406:	39 f4       	brne	.+14     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		return APP_STATUS_ERROR_NOK;
	SPI_SS_DISABLE();
     408:	88 b3       	in	r24, 0x18	; 24
     40a:	80 61       	ori	r24, 0x10	; 16
     40c:	88 bb       	out	0x18, r24	; 24
	
	return APP_STATUS_ERROR_OK;
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	03 c0       	rjmp	.+6      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
* Description: Function to send the Card's Data to the ATM.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_sendCardData(strCardData_t* pstr_CardData)
{
	if(Terminal_Out((uint8_t*)"Data is being sent to the ATM...\r\n") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	01 c0       	rjmp	.+2      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_pinNum);
	stringConcatenate(au8_DataFrame, (uint8_t*)"#-");
	
	SPI_SS_ENABLE();
	if(Spi_MasterSendPacket(au8_DataFrame, stringLength(au8_DataFrame)) != SPI_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     416:	80 e0       	ldi	r24, 0x00	; 0
	SPI_SS_DISABLE();
	
	return APP_STATUS_ERROR_OK;
}
     418:	6e 96       	adiw	r28, 0x1e	; 30
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	de bf       	out	0x3e, r29	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	cd bf       	out	0x3d, r28	; 61
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	08 95       	ret

00000432 <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	a3 97       	sbiw	r28, 0x23	; 35
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
     446:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     44a:	84 30       	cpi	r24, 0x04	; 4
     44c:	09 f0       	breq	.+2      	; 0x450 <App_update+0x1e>
     44e:	a4 c0       	rjmp	.+328    	; 0x598 <App_update+0x166>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
     450:	fe 01       	movw	r30, r28
     452:	31 96       	adiw	r30, 0x01	; 1
     454:	8a e0       	ldi	r24, 0x0A	; 10
     456:	df 01       	movw	r26, r30
     458:	1d 92       	st	X+, r1
     45a:	8a 95       	dec	r24
     45c:	e9 f7       	brne	.-6      	; 0x458 <App_update+0x26>
	if(gu8_CardMode == CARD_MODE_ADMIN)
     45e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <gu8_CardMode>
     462:	81 11       	cpse	r24, r1
     464:	4e c0       	rjmp	.+156    	; 0x502 <App_update+0xd0>
	{ /**************** PROGRAMMING MODE ****************/
			if(Terminal_Out((uint8_t*)"Programming Mode\r\nEnter the Following Data\r\n") != TERMINAL_STATUS_ERROR_OK)
     466:	8e e4       	ldi	r24, 0x4E	; 78
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Terminal_Out>
     46e:	81 30       	cpi	r24, 0x01	; 1
     470:	09 f0       	breq	.+2      	; 0x474 <App_update+0x42>
     472:	45 c0       	rjmp	.+138    	; 0x4fe <App_update+0xcc>
				return APP_STATUS_ERROR_NOK;
			uint8_t au8_tempCardHolderName[10]={0};
     474:	2a e0       	ldi	r18, 0x0A	; 10
     476:	ce 01       	movw	r24, r28
     478:	45 96       	adiw	r24, 0x15	; 21
     47a:	fc 01       	movw	r30, r24
     47c:	32 2f       	mov	r19, r18
     47e:	11 92       	st	Z+, r1
     480:	3a 95       	dec	r19
     482:	e9 f7       	brne	.-6      	; 0x47e <App_update+0x4c>
			uint8_t au8_tempPAN[10]={0};
     484:	fe 01       	movw	r30, r28
     486:	3b 96       	adiw	r30, 0x0b	; 11
     488:	df 01       	movw	r26, r30
     48a:	1d 92       	st	X+, r1
     48c:	2a 95       	dec	r18
     48e:	e9 f7       	brne	.-6      	; 0x48a <App_update+0x58>
			uint8_t au8_tempPinNum[5]={0};
     490:	74 96       	adiw	r30, 0x14	; 20
     492:	25 e0       	ldi	r18, 0x05	; 5
     494:	df 01       	movw	r26, r30
     496:	1d 92       	st	X+, r1
     498:	2a 95       	dec	r18
     49a:	e9 f7       	brne	.-6      	; 0x496 <App_update+0x64>
		
			/* Get the Card Holder Name from the ADMIN Terminal */
			if(AppADMIN_getCardName(au8_tempCardHolderName) != APP_STATUS_ERROR_OK)
     49c:	0e 94 a3 00 	call	0x146	; 0x146 <AppADMIN_getCardName>
     4a0:	81 30       	cpi	r24, 0x01	; 1
     4a2:	69 f5       	brne	.+90     	; 0x4fe <App_update+0xcc>
				return APP_STATUS_ERROR_NOK;
			/* Get the Card Primary Account Number from the ADMIN Terminal */
			if(AppADMIN_getCardPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     4a4:	ce 01       	movw	r24, r28
     4a6:	0b 96       	adiw	r24, 0x0b	; 11
     4a8:	0e 94 cf 00 	call	0x19e	; 0x19e <AppADMIN_getCardPAN>
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	39 f5       	brne	.+78     	; 0x4fe <App_update+0xcc>
			return APP_STATUS_ERROR_NOK;
		
			if(AppADMIN_getCardPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
     4b0:	ce 01       	movw	r24, r28
     4b2:	4f 96       	adiw	r24, 0x1f	; 31
     4b4:	0e 94 17 01 	call	0x22e	; 0x22e <AppADMIN_getCardPIN>
     4b8:	81 30       	cpi	r24, 0x01	; 1
     4ba:	09 f5       	brne	.+66     	; 0x4fe <App_update+0xcc>
				return APP_STATUS_ERROR_NOK;
		
			stringCopy(au8_tempCardHolderName, gstr_userCardData.au8_cardHolderName);
     4bc:	60 e2       	ldi	r22, 0x20	; 32
     4be:	72 e0       	ldi	r23, 0x02	; 2
     4c0:	ce 01       	movw	r24, r28
     4c2:	45 96       	adiw	r24, 0x15	; 21
     4c4:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <stringCopy>
			stringCopy(au8_tempPAN, gstr_userCardData.au8_primaryAccountNumber);
     4c8:	6a e2       	ldi	r22, 0x2A	; 42
     4ca:	72 e0       	ldi	r23, 0x02	; 2
     4cc:	ce 01       	movw	r24, r28
     4ce:	0b 96       	adiw	r24, 0x0b	; 11
     4d0:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <stringCopy>
			stringCopy(au8_tempPinNum, gstr_userCardData.au8_pinNum);
     4d4:	64 e3       	ldi	r22, 0x34	; 52
     4d6:	72 e0       	ldi	r23, 0x02	; 2
     4d8:	ce 01       	movw	r24, r28
     4da:	4f 96       	adiw	r24, 0x1f	; 31
     4dc:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <stringCopy>
		
			if(AppADMIN_saveCardData(&gstr_userCardData) != APP_STATUS_ERROR_OK)
     4e0:	80 e2       	ldi	r24, 0x20	; 32
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <AppADMIN_saveCardData>
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	49 f4       	brne	.+18     	; 0x4fe <App_update+0xcc>
				return APP_STATUS_ERROR_NOK;
		
			gu8_CardMode = CARD_MODE_USER;
     4ec:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <gu8_CardMode>
			if(Terminal_Out((uint8_t*)"\nUSER Mode\r\n") != TERMINAL_STATUS_ERROR_OK)
     4f0:	8b e7       	ldi	r24, 0x7B	; 123
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Terminal_Out>
     4f8:	81 30       	cpi	r24, 0x01	; 1
     4fa:	09 f4       	brne	.+2      	; 0x4fe <App_update+0xcc>
     4fc:	41 c0       	rjmp	.+130    	; 0x580 <App_update+0x14e>
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
	if(gu8_CardMode == CARD_MODE_ADMIN)
	{ /**************** PROGRAMMING MODE ****************/
			if(Terminal_Out((uint8_t*)"Programming Mode\r\nEnter the Following Data\r\n") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	52 c0       	rjmp	.+164    	; 0x5a6 <App_update+0x174>
				return APP_STATUS_ERROR_NOK;
	/****************************************************************/
	}else
	{/************* User Mode **************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
     502:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <gu8_ADMIN_Request>
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	31 f4       	brne	.+12     	; 0x516 <App_update+0xe4>
     50a:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <gu8_USER_Mode_State>
     50e:	81 11       	cpse	r24, r1
     510:	02 c0       	rjmp	.+4      	; 0x516 <App_update+0xe4>
			{
				gu8_CardMode = CARD_MODE_ADMIN;
     512:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <gu8_CardMode>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
     516:	ce 01       	movw	r24, r28
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	0e 94 72 00 	call	0xe4	; 0xe4 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     51e:	81 30       	cpi	r24, 0x01	; 1
     520:	c9 f4       	brne	.+50     	; 0x554 <App_update+0x122>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
     522:	69 e1       	ldi	r22, 0x19	; 25
     524:	72 e0       	ldi	r23, 0x02	; 2
     526:	ce 01       	movw	r24, r28
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	0e 94 14 0a 	call	0x1428	; 0x1428 <stringCompare>
     52e:	81 30       	cpi	r24, 0x01	; 1
     530:	a9 f4       	brne	.+42     	; 0x55c <App_update+0x12a>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
     532:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <gu8_USER_Mode_State>
     536:	81 30       	cpi	r24, 0x01	; 1
     538:	49 f4       	brne	.+18     	; 0x54c <App_update+0x11a>
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
     53a:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <gu8_ADMIN_Request>
						if(Terminal_Out((uint8_t*)"CARD is Busy Now, Programming Mode will start after current Process\r\n") != TERMINAL_STATUS_ERROR_OK)
     53e:	88 e8       	ldi	r24, 0x88	; 136
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Terminal_Out>
     546:	81 30       	cpi	r24, 0x01	; 1
     548:	49 f5       	brne	.+82     	; 0x59c <App_update+0x16a>
     54a:	08 c0       	rjmp	.+16     	; 0x55c <App_update+0x12a>
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The Card is not used by ATM */
					{
						gu8_CardMode = CARD_MODE_ADMIN;
     54c:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <gu8_CardMode>
						return APP_STATUS_ERROR_OK;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	29 c0       	rjmp	.+82     	; 0x5a6 <App_update+0x174>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     554:	81 30       	cpi	r24, 0x01	; 1
     556:	11 f0       	breq	.+4      	; 0x55c <App_update+0x12a>
     558:	86 30       	cpi	r24, 0x06	; 6
     55a:	11 f5       	brne	.+68     	; 0x5a0 <App_update+0x16e>
				return APP_STATUS_ERROR_NOK;
			/****************************************************************/
			/************************* ATM Request **************************/
			if (cgu8_ATM_Req == ATM_REQUESTED)
     55c:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <cgu8_ATM_Req>
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	71 f4       	brne	.+28     	; 0x580 <App_update+0x14e>
			{
				gu8_USER_Mode_State = USER_BUSY;
     564:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <gu8_USER_Mode_State>
				AppUSER_sendCardData(&gstr_userCardData);
     568:	80 e2       	ldi	r24, 0x20	; 32
     56a:	92 e0       	ldi	r25, 0x02	; 2
     56c:	0e 94 b6 01 	call	0x36c	; 0x36c <AppUSER_sendCardData>
				
				if(Terminal_Out((uint8_t*)"Data Successfully Sent\r\n") != TERMINAL_STATUS_ERROR_OK)
     570:	8e ec       	ldi	r24, 0xCE	; 206
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Terminal_Out>
     578:	81 30       	cpi	r24, 0x01	; 1
     57a:	a1 f4       	brne	.+40     	; 0x5a4 <App_update+0x172>
					return APP_STATUS_ERROR_NOK;
				cgu8_ATM_Req = ATM_NOT_REQUESTED;
     57c:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <cgu8_ATM_Req>
			}
			
	/****************************************************************/
	}
	
	Delay_ms(100);
     580:	24 e6       	ldi	r18, 0x64	; 100
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	40 e0       	ldi	r20, 0x00	; 0
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 c0 06 	call	0xd80	; 0xd80 <Delay_ms>
	return APP_STATUS_ERROR_OK;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	07 c0       	rjmp	.+14     	; 0x5a6 <App_update+0x174>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
     598:	85 e0       	ldi	r24, 0x05	; 5
     59a:	05 c0       	rjmp	.+10     	; 0x5a6 <App_update+0x174>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"CARD is Busy Now, Programming Mode will start after current Process\r\n") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	03 c0       	rjmp	.+6      	; 0x5a6 <App_update+0x174>
						gu8_CardMode = CARD_MODE_ADMIN;
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <App_update+0x174>
			{
				gu8_USER_Mode_State = USER_BUSY;
				AppUSER_sendCardData(&gstr_userCardData);
				
				if(Terminal_Out((uint8_t*)"Data Successfully Sent\r\n") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     5a4:	80 e0       	ldi	r24, 0x00	; 0
	/****************************************************************/
	}
	
	Delay_ms(100);
	return APP_STATUS_ERROR_OK;
}
     5a6:	a3 96       	adiw	r28, 0x23	; 35
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <AppMemory_getCardData>:
* Parameters (out): pstr_CardData - Structure of data to hold the data saved in EEPROM.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the Card's data from eeprom.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppMemory_getCardData(strCardData_t* pstr_CardData)
{
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	ec 01       	movw	r28, r24
	if(Eeprom_24_readPacket(CARD_NAME_PAGE_ADDR, (pstr_CardData->au8_cardHolderName),MAX_NAME_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     5be:	4a e0       	ldi	r20, 0x0A	; 10
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	bc 01       	movw	r22, r24
     5c4:	80 e2       	ldi	r24, 0x20	; 32
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 6f 05 	call	0xade	; 0xade <Eeprom_24_readPacket>
     5cc:	81 30       	cpi	r24, 0x01	; 1
     5ce:	61 f5       	brne	.+88     	; 0x628 <AppMemory_getCardData+0x70>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     5d0:	2a e0       	ldi	r18, 0x0A	; 10
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 c0 06 	call	0xd80	; 0xd80 <Delay_ms>
	if(Eeprom_24_readPacket(CARD_PAN_PAGE_ADDR, (pstr_CardData->au8_primaryAccountNumber),MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     5e4:	4a e0       	ldi	r20, 0x0A	; 10
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	be 01       	movw	r22, r28
     5ea:	66 5f       	subi	r22, 0xF6	; 246
     5ec:	7f 4f       	sbci	r23, 0xFF	; 255
     5ee:	80 e3       	ldi	r24, 0x30	; 48
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 6f 05 	call	0xade	; 0xade <Eeprom_24_readPacket>
     5f6:	81 30       	cpi	r24, 0x01	; 1
     5f8:	c9 f4       	brne	.+50     	; 0x62c <AppMemory_getCardData+0x74>
	return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     5fa:	2a e0       	ldi	r18, 0x0A	; 10
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 c0 06 	call	0xd80	; 0xd80 <Delay_ms>
	if(Eeprom_24_readPacket(CARD_PIN_PAGE_ADDR, (pstr_CardData->au8_pinNum),MAX_PIN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     60e:	be 01       	movw	r22, r28
     610:	6c 5e       	subi	r22, 0xEC	; 236
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	45 e0       	ldi	r20, 0x05	; 5
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	80 e4       	ldi	r24, 0x40	; 64
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 6f 05 	call	0xade	; 0xade <Eeprom_24_readPacket>
     620:	81 30       	cpi	r24, 0x01	; 1
     622:	31 f0       	breq	.+12     	; 0x630 <AppMemory_getCardData+0x78>
	return APP_STATUS_ERROR_NOK;
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	05 c0       	rjmp	.+10     	; 0x632 <AppMemory_getCardData+0x7a>
* Description: Function to get the Card's data from eeprom.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppMemory_getCardData(strCardData_t* pstr_CardData)
{
	if(Eeprom_24_readPacket(CARD_NAME_PAGE_ADDR, (pstr_CardData->au8_cardHolderName),MAX_NAME_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	03 c0       	rjmp	.+6      	; 0x632 <AppMemory_getCardData+0x7a>
	Delay_ms(10);
	if(Eeprom_24_readPacket(CARD_PAN_PAGE_ADDR, (pstr_CardData->au8_primaryAccountNumber),MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	01 c0       	rjmp	.+2      	; 0x632 <AppMemory_getCardData+0x7a>
	Delay_ms(10);
	if(Eeprom_24_readPacket(CARD_PIN_PAGE_ADDR, (pstr_CardData->au8_pinNum),MAX_PIN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <App_init>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_init(void)
{
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	1f 92       	push	r1
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
     642:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     646:	84 30       	cpi	r24, 0x04	; 4
     648:	09 f4       	brne	.+2      	; 0x64c <App_init+0x14>
     64a:	41 c0       	rjmp	.+130    	; 0x6ce <App_init+0x96>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
     64c:	0e 94 98 03 	call	0x730	; 0x730 <Eeprom_24_init>
     650:	81 30       	cpi	r24, 0x01	; 1
     652:	a1 f5       	brne	.+104    	; 0x6bc <App_init+0x84>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
     654:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Terminal_init>
     658:	81 30       	cpi	r24, 0x01	; 1
     65a:	91 f5       	brne	.+100    	; 0x6c0 <App_init+0x88>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
     65c:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <Spi_init>
     660:	81 30       	cpi	r24, 0x01	; 1
     662:	81 f5       	brne	.+96     	; 0x6c4 <App_init+0x8c>
		return APP_STATUS_ERROR_NOK;
	DIO_PORTD_DIR &= ~(1<<2);
     664:	81 b3       	in	r24, 0x11	; 17
     666:	8b 7f       	andi	r24, 0xFB	; 251
     668:	81 bb       	out	0x11, r24	; 17
	DIO_PORTD_DATA |= 1<<2;
     66a:	82 b3       	in	r24, 0x12	; 18
     66c:	84 60       	ori	r24, 0x04	; 4
     66e:	82 bb       	out	0x12, r24	; 18
	/* Only for Testing */
// 	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Terminal_Out((uint8_t*)"CARD Terminal Window\r\n") != TERMINAL_STATUS_ERROR_OK)
     670:	87 ee       	ldi	r24, 0xE7	; 231
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Terminal_Out>
     678:	81 30       	cpi	r24, 0x01	; 1
     67a:	31 f5       	brne	.+76     	; 0x6c8 <App_init+0x90>
		return APP_STATUS_ERROR_NOK;
	uint8_t u8_initData = 0;
     67c:	19 82       	std	Y+1, r1	; 0x01
	/* Check if the card was previously registered and has its data in the eeprom */
	if(Eeprom_24_readByte(CARD_INIT_ADDRESS, &u8_initData) != EEPROM_24_STATUS_ERROR_OK)
     67e:	be 01       	movw	r22, r28
     680:	6f 5f       	subi	r22, 0xFF	; 255
     682:	7f 4f       	sbci	r23, 0xFF	; 255
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <Eeprom_24_readByte>
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	f1 f4       	brne	.+60     	; 0x6cc <App_init+0x94>
	{
		return APP_STATUS_ERROR_NOK;
	}
		
	if(u8_initData != CARD_INITIALIZED)
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	8a 3a       	cpi	r24, 0xAA	; 170
     694:	19 f0       	breq	.+6      	; 0x69c <App_init+0x64>
	{
		gu8_CardMode = CARD_MODE_ADMIN;
     696:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <gu8_CardMode>
     69a:	0b c0       	rjmp	.+22     	; 0x6b2 <App_init+0x7a>
	}else
	{
		gu8_CardMode = CARD_MODE_USER;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <gu8_CardMode>
		Terminal_Out((uint8_t*)"You are now in User Mode\r\n");
     6a2:	8e ef       	ldi	r24, 0xFE	; 254
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Terminal_Out>
		AppMemory_getCardData(&gstr_userCardData);
     6aa:	80 e2       	ldi	r24, 0x20	; 32
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <AppMemory_getCardData>
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     6b2:	84 e0       	ldi	r24, 0x04	; 4
     6b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return APP_STATUS_ERROR_OK;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	09 c0       	rjmp	.+18     	; 0x6ce <App_init+0x96>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	07 c0       	rjmp	.+14     	; 0x6ce <App_init+0x96>
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	05 c0       	rjmp	.+10     	; 0x6ce <App_init+0x96>
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	03 c0       	rjmp	.+6      	; 0x6ce <App_init+0x96>
// 	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Terminal_Out((uint8_t*)"CARD Terminal Window\r\n") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	01 c0       	rjmp	.+2      	; 0x6ce <App_init+0x96>
	uint8_t u8_initData = 0;
	/* Check if the card was previously registered and has its data in the eeprom */
	if(Eeprom_24_readByte(CARD_INIT_ADDRESS, &u8_initData) != EEPROM_24_STATUS_ERROR_OK)
	{
		return APP_STATUS_ERROR_NOK;
     6cc:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     6ce:	0f 90       	pop	r0
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
     6d6:	0e 94 1c 03 	call	0x638	; 0x638 <App_init>
     6da:	81 30       	cpi	r24, 0x01	; 1
     6dc:	c1 f4       	brne	.+48     	; 0x70e <App_start+0x38>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(1000);
     6de:	28 ee       	ldi	r18, 0xE8	; 232
     6e0:	33 e0       	ldi	r19, 0x03	; 3
     6e2:	40 e0       	ldi	r20, 0x00	; 0
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 c0 06 	call	0xd80	; 0xd80 <Delay_ms>
#if REQUEST_MODE == INTERRUPT_REQUEST
 	Ext_INT0_init(EXT_INT0_EDGE_FALL_RISE);
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <Ext_INT0_init>
 	INT0_setCallBack(ATM_REQ_ISR);
     6f8:	89 e4       	ldi	r24, 0x49	; 73
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 60 07 	call	0xec0	; 0xec0 <INT0_setCallBack>
#elif REQUEST_MODE == POLLING_REQUEST
	DIO_PORTD_DIR &= ~(1<<2);
	DIO_PORTD_DATA |= 1<<2;
#endif
	EnableGlbl_Interrupt();
     700:	8f b7       	in	r24, 0x3f	; 63
     702:	80 68       	ori	r24, 0x80	; 128
     704:	8f bf       	out	0x3f, r24	; 63
	
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
     706:	0e 94 19 02 	call	0x432	; 0x432 <App_update>
     70a:	81 30       	cpi	r24, 0x01	; 1
     70c:	e1 f3       	breq	.-8      	; 0x706 <App_start+0x30>
			return APP_STATUS_ERROR_NOK;
	}
}
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	08 95       	ret

00000712 <EEPROM_getAddresses>:
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
#if EEPROM_24_MODEL	== AT24C16B
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
     712:	9a 01       	movw	r18, r20
     714:	22 27       	eor	r18, r18
     716:	37 70       	andi	r19, 0x07	; 7
     718:	22 0f       	add	r18, r18
     71a:	23 2f       	mov	r18, r19
     71c:	22 1f       	adc	r18, r18
     71e:	33 0b       	sbc	r19, r19
     720:	31 95       	neg	r19
     722:	20 65       	ori	r18, 0x50	; 80
     724:	fc 01       	movw	r30, r24
     726:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
     728:	fb 01       	movw	r30, r22
     72a:	40 83       	st	Z, r20
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS;
	pu8_wordAddress[0] = (uint8_t)(u16_location >> 8);
	pu8_wordAddress[1] = (uint8_t)u16_location;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	08 95       	ret

00000730 <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
     730:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_eepromModuleState>
     734:	83 30       	cpi	r24, 0x03	; 3
     736:	51 f0       	breq	.+20     	; 0x74c <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
     738:	0e 94 da 07 	call	0xfb4	; 0xfb4 <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
     73c:	85 30       	cpi	r24, 0x05	; 5
     73e:	29 f0       	breq	.+10     	; 0x74a <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
     74a:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
     74c:	08 95       	ret

0000074e <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	00 d0       	rcall	.+0      	; 0x756 <Eeprom_24_writeByte+0x8>
     756:	1f 92       	push	r1
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
     75c:	ac 01       	movw	r20, r24
     75e:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     760:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     764:	93 30       	cpi	r25, 0x03	; 3
     766:	11 f5       	brne	.+68     	; 0x7ac <Eeprom_24_writeByte+0x5e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     768:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
     76a:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     76c:	be 01       	movw	r22, r28
     76e:	6e 5f       	subi	r22, 0xFE	; 254
     770:	7f 4f       	sbci	r23, 0xFF	; 255
     772:	ce 01       	movw	r24, r28
     774:	01 96       	adiw	r24, 0x01	; 1
     776:	0e 94 89 03 	call	0x712	; 0x712 <EEPROM_getAddresses>
     77a:	18 2f       	mov	r17, r24
     77c:	81 30       	cpi	r24, 0x01	; 1
     77e:	c1 f4       	brne	.+48     	; 0x7b0 <Eeprom_24_writeByte+0x62>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
     780:	21 e0       	ldi	r18, 0x01	; 1
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	ae 01       	movw	r20, r28
     786:	4d 5f       	subi	r20, 0xFD	; 253
     788:	5f 4f       	sbci	r21, 0xFF	; 255
     78a:	6a 81       	ldd	r22, Y+2	; 0x02
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	0e 94 14 09 	call	0x1228	; 0x1228 <I2C_MasterSendToLocation>
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	79 f4       	brne	.+30     	; 0x7b4 <Eeprom_24_writeByte+0x66>
 
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
     796:	2f e0       	ldi	r18, 0x0F	; 15
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 c0 06 	call	0xd80	; 0xd80 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
     7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <Eeprom_24_writeByte+0x68>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     7ac:	12 e0       	ldi	r17, 0x02	; 2
     7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <Eeprom_24_writeByte+0x68>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     7b0:	10 e0       	ldi	r17, 0x00	; 0
     7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <Eeprom_24_writeByte+0x68>
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     7b4:	10 e0       	ldi	r17, 0x00	; 0
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
	return EEPROM_24_STATUS_ERROR_OK;
}
     7b6:	81 2f       	mov	r24, r17
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	08 95       	ret

000007c6 <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <Eeprom_24_readByte+0xc>
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     7d8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     7dc:	93 30       	cpi	r25, 0x03	; 3
     7de:	21 f5       	brne	.+72     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     7e0:	61 15       	cp	r22, r1
     7e2:	71 05       	cpc	r23, r1
     7e4:	19 f1       	breq	.+70     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     7e6:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     7e8:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
     7ea:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     7ec:	be 01       	movw	r22, r28
     7ee:	6e 5f       	subi	r22, 0xFE	; 254
     7f0:	7f 4f       	sbci	r23, 0xFF	; 255
     7f2:	ce 01       	movw	r24, r28
     7f4:	01 96       	adiw	r24, 0x01	; 1
     7f6:	0e 94 89 03 	call	0x712	; 0x712 <EEPROM_getAddresses>
     7fa:	18 2f       	mov	r17, r24
     7fc:	81 30       	cpi	r24, 0x01	; 1
     7fe:	c1 f4       	brne	.+48     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
     800:	21 e0       	ldi	r18, 0x01	; 1
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	a7 01       	movw	r20, r14
     806:	6a 81       	ldd	r22, Y+2	; 0x02
     808:	89 81       	ldd	r24, Y+1	; 0x01
     80a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <I2C_MasterReceiveFromLocation>
     80e:	81 30       	cpi	r24, 0x01	; 1
     810:	89 f4       	brne	.+34     	; 0x834 <__DATA_REGION_LENGTH__+0x34>

	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
	
#endif
	Delay_ms(5);
     812:	25 e0       	ldi	r18, 0x05	; 5
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	50 e0       	ldi	r21, 0x00	; 0
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 c0 06 	call	0xd80	; 0xd80 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
     826:	07 c0       	rjmp	.+14     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     828:	12 e0       	ldi	r17, 0x02	; 2
     82a:	05 c0       	rjmp	.+10     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     82c:	14 e0       	ldi	r17, 0x04	; 4
     82e:	03 c0       	rjmp	.+6      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     830:	10 e0       	ldi	r17, 0x00	; 0
     832:	01 c0       	rjmp	.+2      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     834:	10 e0       	ldi	r17, 0x00	; 0
		return EEPROM_24_STATUS_ERROR_NOK;
	
#endif
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
     836:	81 2f       	mov	r24, r17
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	08 95       	ret

00000848 <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
     848:	ef 92       	push	r14
     84a:	ff 92       	push	r15
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	00 d0       	rcall	.+0      	; 0x854 <Eeprom_24_writePage+0xc>
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     858:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     85c:	93 30       	cpi	r25, 0x03	; 3
     85e:	f9 f4       	brne	.+62     	; 0x89e <__stack+0x3f>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     860:	61 15       	cp	r22, r1
     862:	71 05       	cpc	r23, r1
     864:	f1 f0       	breq	.+60     	; 0x8a2 <__stack+0x43>
     866:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
     868:	90 e1       	ldi	r25, 0x10	; 16
     86a:	89 9f       	mul	r24, r25
     86c:	a0 01       	movw	r20, r0
     86e:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
     870:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
     872:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
     874:	be 01       	movw	r22, r28
     876:	6e 5f       	subi	r22, 0xFE	; 254
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	ce 01       	movw	r24, r28
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	0e 94 89 03 	call	0x712	; 0x712 <EEPROM_getAddresses>
     882:	18 2f       	mov	r17, r24
     884:	81 30       	cpi	r24, 0x01	; 1
     886:	79 f4       	brne	.+30     	; 0x8a6 <__stack+0x47>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
     888:	20 e1       	ldi	r18, 0x10	; 16
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	a7 01       	movw	r20, r14
     88e:	6a 81       	ldd	r22, Y+2	; 0x02
     890:	89 81       	ldd	r24, Y+1	; 0x01
     892:	0e 94 14 09 	call	0x1228	; 0x1228 <I2C_MasterSendToLocation>
     896:	81 30       	cpi	r24, 0x01	; 1
     898:	39 f0       	breq	.+14     	; 0x8a8 <__stack+0x49>
		return EEPROM_24_STATUS_ERROR_NOK;
     89a:	10 e0       	ldi	r17, 0x00	; 0
     89c:	05 c0       	rjmp	.+10     	; 0x8a8 <__stack+0x49>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     89e:	12 e0       	ldi	r17, 0x02	; 2
     8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <__stack+0x49>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     8a2:	14 e0       	ldi	r17, 0x04	; 4
     8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <__stack+0x49>
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     8a6:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
     8a8:	81 2f       	mov	r24, r17
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	ff 90       	pop	r15
     8b6:	ef 90       	pop	r14
     8b8:	08 95       	ret

000008ba <Eeprom_24_readPage>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory page.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read data inside a specific page in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPage(uint8_t u8_page, uint8_t *pu8_data)
{
     8ba:	ef 92       	push	r14
     8bc:	ff 92       	push	r15
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <Eeprom_24_readPage+0xc>
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     8ca:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     8ce:	93 30       	cpi	r25, 0x03	; 3
     8d0:	f9 f4       	brne	.+62     	; 0x910 <Eeprom_24_readPage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     8d2:	61 15       	cp	r22, r1
     8d4:	71 05       	cpc	r23, r1
     8d6:	f1 f0       	breq	.+60     	; 0x914 <Eeprom_24_readPage+0x5a>
     8d8:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
     8da:	90 e1       	ldi	r25, 0x10	; 16
     8dc:	89 9f       	mul	r24, r25
     8de:	a0 01       	movw	r20, r0
     8e0:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
     8e2:	19 82       	std	Y+1, r1	; 0x01

#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
     8e4:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
     8e6:	be 01       	movw	r22, r28
     8e8:	6e 5f       	subi	r22, 0xFE	; 254
     8ea:	7f 4f       	sbci	r23, 0xFF	; 255
     8ec:	ce 01       	movw	r24, r28
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	0e 94 89 03 	call	0x712	; 0x712 <EEPROM_getAddresses>
     8f4:	18 2f       	mov	r17, r24
     8f6:	81 30       	cpi	r24, 0x01	; 1
     8f8:	79 f4       	brne	.+30     	; 0x918 <Eeprom_24_readPage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
     8fa:	20 e1       	ldi	r18, 0x10	; 16
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	a7 01       	movw	r20, r14
     900:	6a 81       	ldd	r22, Y+2	; 0x02
     902:	89 81       	ldd	r24, Y+1	; 0x01
     904:	0e 94 63 09 	call	0x12c6	; 0x12c6 <I2C_MasterReceiveFromLocation>
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	39 f0       	breq	.+14     	; 0x91a <Eeprom_24_readPage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
     90c:	10 e0       	ldi	r17, 0x00	; 0
     90e:	05 c0       	rjmp	.+10     	; 0x91a <Eeprom_24_readPage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     910:	12 e0       	ldi	r17, 0x02	; 2
     912:	03 c0       	rjmp	.+6      	; 0x91a <Eeprom_24_readPage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     914:	14 e0       	ldi	r17, 0x04	; 4
     916:	01 c0       	rjmp	.+2      	; 0x91a <Eeprom_24_readPage+0x60>
	uint8_t u8_slaveAddr=0;

#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     918:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
     91a:	81 2f       	mov	r24, r17
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	ff 90       	pop	r15
     928:	ef 90       	pop	r14
     92a:	08 95       	ret

0000092c <Eeprom_24_writePacket>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Multiple data bytes to a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
     92c:	6f 92       	push	r6
     92e:	7f 92       	push	r7
     930:	8f 92       	push	r8
     932:	9f 92       	push	r9
     934:	af 92       	push	r10
     936:	bf 92       	push	r11
     938:	cf 92       	push	r12
     93a:	df 92       	push	r13
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	00 d0       	rcall	.+0      	; 0x94a <Eeprom_24_writePacket+0x1e>
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	5c 01       	movw	r10, r24
     950:	6b 01       	movw	r12, r22
     952:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     954:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_eepromModuleState>
     958:	83 30       	cpi	r24, 0x03	; 3
     95a:	09 f0       	breq	.+2      	; 0x95e <Eeprom_24_writePacket+0x32>
     95c:	a1 c0       	rjmp	.+322    	; 0xaa0 <Eeprom_24_writePacket+0x174>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     95e:	67 2b       	or	r22, r23
     960:	09 f4       	brne	.+2      	; 0x964 <Eeprom_24_writePacket+0x38>
     962:	a0 c0       	rjmp	.+320    	; 0xaa4 <Eeprom_24_writePacket+0x178>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     964:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
     966:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     968:	a5 01       	movw	r20, r10
     96a:	be 01       	movw	r22, r28
     96c:	6e 5f       	subi	r22, 0xFE	; 254
     96e:	7f 4f       	sbci	r23, 0xFF	; 255
     970:	ce 01       	movw	r24, r28
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	0e 94 89 03 	call	0x712	; 0x712 <EEPROM_getAddresses>
     978:	18 2f       	mov	r17, r24
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	09 f0       	breq	.+2      	; 0x980 <Eeprom_24_writePacket+0x54>
     97e:	94 c0       	rjmp	.+296    	; 0xaa8 <Eeprom_24_writePacket+0x17c>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;
     980:	45 01       	movw	r8, r10
     982:	80 ef       	ldi	r24, 0xF0	; 240
     984:	88 22       	and	r8, r24
     986:	87 e0       	ldi	r24, 0x07	; 7
     988:	98 22       	and	r9, r24
     98a:	96 94       	lsr	r9
     98c:	87 94       	ror	r8
     98e:	96 94       	lsr	r9
     990:	87 94       	ror	r8
     992:	96 94       	lsr	r9
     994:	87 94       	ror	r8
     996:	96 94       	lsr	r9
     998:	87 94       	ror	r8
     99a:	68 2c       	mov	r6, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
     99c:	8a 2d       	mov	r24, r10
     99e:	8f 70       	andi	r24, 0x0F	; 15
	if(u8_byteOffset != 0)
     9a0:	51 f1       	breq	.+84     	; 0x9f6 <Eeprom_24_writePacket+0xca>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
     9a2:	90 e1       	ldi	r25, 0x10	; 16
     9a4:	a9 2e       	mov	r10, r25
     9a6:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
     9a8:	b1 2c       	mov	r11, r1
     9aa:	ea 14       	cp	r14, r10
     9ac:	fb 04       	cpc	r15, r11
     9ae:	58 f4       	brcc	.+22     	; 0x9c6 <Eeprom_24_writePacket+0x9a>
		{
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
     9b0:	97 01       	movw	r18, r14
     9b2:	a6 01       	movw	r20, r12
     9b4:	6a 81       	ldd	r22, Y+2	; 0x02
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	0e 94 14 09 	call	0x1228	; 0x1228 <I2C_MasterSendToLocation>
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	09 f4       	brne	.+2      	; 0x9c2 <Eeprom_24_writePacket+0x96>
     9c0:	7c c0       	rjmp	.+248    	; 0xaba <Eeprom_24_writePacket+0x18e>
				return EEPROM_24_STATUS_ERROR_NOK;
     9c2:	10 e0       	ldi	r17, 0x00	; 0
     9c4:	7a c0       	rjmp	.+244    	; 0xaba <Eeprom_24_writePacket+0x18e>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
     9c6:	95 01       	movw	r18, r10
     9c8:	a6 01       	movw	r20, r12
     9ca:	6a 81       	ldd	r22, Y+2	; 0x02
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	0e 94 14 09 	call	0x1228	; 0x1228 <I2C_MasterSendToLocation>
     9d2:	81 30       	cpi	r24, 0x01	; 1
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <Eeprom_24_writePacket+0xac>
     9d6:	6a c0       	rjmp	.+212    	; 0xaac <Eeprom_24_writePacket+0x180>
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
     9d8:	ea 18       	sub	r14, r10
     9da:	fb 08       	sbc	r15, r11
		i=1;
		Delay_ms(15);
     9dc:	2f e0       	ldi	r18, 0x0F	; 15
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	40 e0       	ldi	r20, 0x00	; 0
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 c0 06 	call	0xd80	; 0xd80 <Delay_ms>
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
     9f0:	77 24       	eor	r7, r7
     9f2:	73 94       	inc	r7
     9f4:	03 c0       	rjmp	.+6      	; 0x9fc <Eeprom_24_writePacket+0xd0>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
     9f6:	71 2c       	mov	r7, r1

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
     9f8:	a1 2c       	mov	r10, r1
     9fa:	b1 2c       	mov	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
     9fc:	c7 01       	movw	r24, r14
     9fe:	92 95       	swap	r25
     a00:	82 95       	swap	r24
     a02:	8f 70       	andi	r24, 0x0F	; 15
     a04:	89 27       	eor	r24, r25
     a06:	9f 70       	andi	r25, 0x0F	; 15
     a08:	89 27       	eor	r24, r25
     a0a:	08 2f       	mov	r16, r24
	while (pages_num > 0)
     a0c:	1c c0       	rjmp	.+56     	; 0xa46 <Eeprom_24_writePacket+0x11a>
	{
		pages_num--;
     a0e:	01 50       	subi	r16, 0x01	; 1
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
     a10:	b6 01       	movw	r22, r12
     a12:	6a 0d       	add	r22, r10
     a14:	7b 1d       	adc	r23, r11
     a16:	87 2d       	mov	r24, r7
     a18:	86 0d       	add	r24, r6
     a1a:	0e 94 24 04 	call	0x848	; 0x848 <Eeprom_24_writePage>
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	09 f0       	breq	.+2      	; 0xa24 <Eeprom_24_writePacket+0xf8>
     a22:	46 c0       	rjmp	.+140    	; 0xab0 <Eeprom_24_writePacket+0x184>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
     a24:	73 94       	inc	r7
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
     a26:	80 e1       	ldi	r24, 0x10	; 16
     a28:	e8 1a       	sub	r14, r24
     a2a:	f1 08       	sbc	r15, r1
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
     a2c:	80 e1       	ldi	r24, 0x10	; 16
     a2e:	a8 0e       	add	r10, r24
     a30:	b1 1c       	adc	r11, r1
		Delay_ms(15);
     a32:	2f e0       	ldi	r18, 0x0F	; 15
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	40 e0       	ldi	r20, 0x00	; 0
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 c0 06 	call	0xd80	; 0xd80 <Delay_ms>
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
     a46:	10 16       	cp	r1, r16
     a48:	14 f3       	brlt	.-60     	; 0xa0e <Eeprom_24_writePacket+0xe2>
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
		Delay_ms(15);
	}
	
	if (u16_dataLen > 0)
     a4a:	e1 14       	cp	r14, r1
     a4c:	f1 04       	cpc	r15, r1
     a4e:	a9 f1       	breq	.+106    	; 0xaba <Eeprom_24_writePacket+0x18e>
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
     a50:	a4 01       	movw	r20, r8
     a52:	47 0d       	add	r20, r7
     a54:	51 1d       	adc	r21, r1
     a56:	42 95       	swap	r20
     a58:	52 95       	swap	r21
     a5a:	50 7f       	andi	r21, 0xF0	; 240
     a5c:	54 27       	eor	r21, r20
     a5e:	40 7f       	andi	r20, 0xF0	; 240
     a60:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
     a62:	be 01       	movw	r22, r28
     a64:	6e 5f       	subi	r22, 0xFE	; 254
     a66:	7f 4f       	sbci	r23, 0xFF	; 255
     a68:	ce 01       	movw	r24, r28
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	0e 94 89 03 	call	0x712	; 0x712 <EEPROM_getAddresses>
     a70:	18 2f       	mov	r17, r24
     a72:	81 30       	cpi	r24, 0x01	; 1
     a74:	f9 f4       	brne	.+62     	; 0xab4 <Eeprom_24_writePacket+0x188>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
     a76:	a6 01       	movw	r20, r12
     a78:	4a 0d       	add	r20, r10
     a7a:	5b 1d       	adc	r21, r11
     a7c:	97 01       	movw	r18, r14
     a7e:	6a 81       	ldd	r22, Y+2	; 0x02
     a80:	89 81       	ldd	r24, Y+1	; 0x01
     a82:	0e 94 14 09 	call	0x1228	; 0x1228 <I2C_MasterSendToLocation>
     a86:	81 30       	cpi	r24, 0x01	; 1
     a88:	b9 f4       	brne	.+46     	; 0xab8 <Eeprom_24_writePacket+0x18c>
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
     a8a:	2f e0       	ldi	r18, 0x0F	; 15
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 c0 06 	call	0xd80	; 0xd80 <Delay_ms>
     a9e:	0d c0       	rjmp	.+26     	; 0xaba <Eeprom_24_writePacket+0x18e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     aa0:	12 e0       	ldi	r17, 0x02	; 2
     aa2:	0b c0       	rjmp	.+22     	; 0xaba <Eeprom_24_writePacket+0x18e>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     aa4:	14 e0       	ldi	r17, 0x04	; 4
     aa6:	09 c0       	rjmp	.+18     	; 0xaba <Eeprom_24_writePacket+0x18e>
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     aa8:	10 e0       	ldi	r17, 0x00	; 0
     aaa:	07 c0       	rjmp	.+14     	; 0xaba <Eeprom_24_writePacket+0x18e>
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     aac:	10 e0       	ldi	r17, 0x00	; 0
     aae:	05 c0       	rjmp	.+10     	; 0xaba <Eeprom_24_writePacket+0x18e>
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
	{
		pages_num--;
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     ab0:	10 e0       	ldi	r17, 0x00	; 0
     ab2:	03 c0       	rjmp	.+6      	; 0xaba <Eeprom_24_writePacket+0x18e>
	
	if (u16_dataLen > 0)
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     ab4:	10 e0       	ldi	r17, 0x00	; 0
     ab6:	01 c0       	rjmp	.+2      	; 0xaba <Eeprom_24_writePacket+0x18e>
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     ab8:	10 e0       	ldi	r17, 0x00	; 0
		Delay_ms(15);
	}

#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
     aba:	81 2f       	mov	r24, r17
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	1f 91       	pop	r17
     ac6:	0f 91       	pop	r16
     ac8:	ff 90       	pop	r15
     aca:	ef 90       	pop	r14
     acc:	df 90       	pop	r13
     ace:	cf 90       	pop	r12
     ad0:	bf 90       	pop	r11
     ad2:	af 90       	pop	r10
     ad4:	9f 90       	pop	r9
     ad6:	8f 90       	pop	r8
     ad8:	7f 90       	pop	r7
     ada:	6f 90       	pop	r6
     adc:	08 95       	ret

00000ade <Eeprom_24_readPacket>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read Multiple data bytes from a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
     ade:	6f 92       	push	r6
     ae0:	7f 92       	push	r7
     ae2:	8f 92       	push	r8
     ae4:	9f 92       	push	r9
     ae6:	af 92       	push	r10
     ae8:	bf 92       	push	r11
     aea:	cf 92       	push	r12
     aec:	df 92       	push	r13
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	00 d0       	rcall	.+0      	; 0xafc <Eeprom_24_readPacket+0x1e>
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	5c 01       	movw	r10, r24
     b02:	6b 01       	movw	r12, r22
     b04:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     b06:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_eepromModuleState>
     b0a:	83 30       	cpi	r24, 0x03	; 3
     b0c:	09 f0       	breq	.+2      	; 0xb10 <Eeprom_24_readPacket+0x32>
     b0e:	84 c0       	rjmp	.+264    	; 0xc18 <Eeprom_24_readPacket+0x13a>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     b10:	67 2b       	or	r22, r23
     b12:	09 f4       	brne	.+2      	; 0xb16 <Eeprom_24_readPacket+0x38>
     b14:	83 c0       	rjmp	.+262    	; 0xc1c <Eeprom_24_readPacket+0x13e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     b16:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u16dataIndex=0;
	uint8_t i=0;

#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;	
     b18:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     b1a:	a5 01       	movw	r20, r10
     b1c:	be 01       	movw	r22, r28
     b1e:	6e 5f       	subi	r22, 0xFE	; 254
     b20:	7f 4f       	sbci	r23, 0xFF	; 255
     b22:	ce 01       	movw	r24, r28
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	0e 94 89 03 	call	0x712	; 0x712 <EEPROM_getAddresses>
     b2a:	18 2f       	mov	r17, r24
     b2c:	81 30       	cpi	r24, 0x01	; 1
     b2e:	09 f0       	breq	.+2      	; 0xb32 <Eeprom_24_readPacket+0x54>
     b30:	77 c0       	rjmp	.+238    	; 0xc20 <Eeprom_24_readPacket+0x142>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;		//The first page to write in
     b32:	45 01       	movw	r8, r10
     b34:	80 ef       	ldi	r24, 0xF0	; 240
     b36:	88 22       	and	r8, r24
     b38:	87 e0       	ldi	r24, 0x07	; 7
     b3a:	98 22       	and	r9, r24
     b3c:	96 94       	lsr	r9
     b3e:	87 94       	ror	r8
     b40:	96 94       	lsr	r9
     b42:	87 94       	ror	r8
     b44:	96 94       	lsr	r9
     b46:	87 94       	ror	r8
     b48:	96 94       	lsr	r9
     b4a:	87 94       	ror	r8
     b4c:	78 2c       	mov	r7, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
     b4e:	8a 2d       	mov	r24, r10
     b50:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
     b52:	f9 f0       	breq	.+62     	; 0xb92 <Eeprom_24_readPacket+0xb4>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
     b54:	90 e1       	ldi	r25, 0x10	; 16
     b56:	a9 2e       	mov	r10, r25
     b58:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
     b5a:	b1 2c       	mov	r11, r1
     b5c:	ea 14       	cp	r14, r10
     b5e:	fb 04       	cpc	r15, r11
     b60:	58 f4       	brcc	.+22     	; 0xb78 <Eeprom_24_readPacket+0x9a>
		{
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
     b62:	97 01       	movw	r18, r14
     b64:	a6 01       	movw	r20, r12
     b66:	6a 81       	ldd	r22, Y+2	; 0x02
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <I2C_MasterReceiveFromLocation>
     b6e:	81 30       	cpi	r24, 0x01	; 1
     b70:	09 f4       	brne	.+2      	; 0xb74 <Eeprom_24_readPacket+0x96>
     b72:	5d c0       	rjmp	.+186    	; 0xc2e <Eeprom_24_readPacket+0x150>
				return EEPROM_24_STATUS_ERROR_NOK;
     b74:	10 e0       	ldi	r17, 0x00	; 0
     b76:	5b c0       	rjmp	.+182    	; 0xc2e <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
     b78:	95 01       	movw	r18, r10
     b7a:	a6 01       	movw	r20, r12
     b7c:	6a 81       	ldd	r22, Y+2	; 0x02
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	0e 94 63 09 	call	0x12c6	; 0x12c6 <I2C_MasterReceiveFromLocation>
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	09 f0       	breq	.+2      	; 0xb8a <Eeprom_24_readPacket+0xac>
     b88:	4d c0       	rjmp	.+154    	; 0xc24 <Eeprom_24_readPacket+0x146>
			return EEPROM_24_STATUS_ERROR_NOK;
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
     b8a:	ea 18       	sub	r14, r10
     b8c:	fb 08       	sbc	r15, r11
		i=1;
     b8e:	01 e0       	ldi	r16, 0x01	; 1
     b90:	03 c0       	rjmp	.+6      	; 0xb98 <Eeprom_24_readPacket+0xba>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
     b92:	00 e0       	ldi	r16, 0x00	; 0

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
     b94:	a1 2c       	mov	r10, r1
     b96:	b1 2c       	mov	r11, r1
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
     b98:	c7 01       	movw	r24, r14
     b9a:	92 95       	swap	r25
     b9c:	82 95       	swap	r24
     b9e:	8f 70       	andi	r24, 0x0F	; 15
     ba0:	89 27       	eor	r24, r25
     ba2:	9f 70       	andi	r25, 0x0F	; 15
     ba4:	89 27       	eor	r24, r25
	while (pages_num--)
     ba6:	11 c0       	rjmp	.+34     	; 0xbca <Eeprom_24_readPacket+0xec>
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
     ba8:	b6 01       	movw	r22, r12
     baa:	6a 0d       	add	r22, r10
     bac:	7b 1d       	adc	r23, r11
     bae:	80 2f       	mov	r24, r16
     bb0:	87 0d       	add	r24, r7
     bb2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <Eeprom_24_readPage>
     bb6:	81 30       	cpi	r24, 0x01	; 1
     bb8:	b9 f5       	brne	.+110    	; 0xc28 <Eeprom_24_readPacket+0x14a>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
     bba:	0f 5f       	subi	r16, 0xFF	; 255
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	e8 1a       	sub	r14, r24
     bc0:	f1 08       	sbc	r15, r1
		u16dataIndex += EEPROM_24_PAGE_BYTES;
     bc2:	80 e1       	ldi	r24, 0x10	; 16
     bc4:	a8 0e       	add	r10, r24
     bc6:	b1 1c       	adc	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
     bc8:	86 2d       	mov	r24, r6
     bca:	66 24       	eor	r6, r6
     bcc:	6a 94       	dec	r6
     bce:	68 0e       	add	r6, r24
     bd0:	81 11       	cpse	r24, r1
     bd2:	ea cf       	rjmp	.-44     	; 0xba8 <Eeprom_24_readPacket+0xca>
		i++;
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u16dataIndex += EEPROM_24_PAGE_BYTES;
	}

	if (u16_dataLen > 0)
     bd4:	e1 14       	cp	r14, r1
     bd6:	f1 04       	cpc	r15, r1
     bd8:	51 f1       	breq	.+84     	; 0xc2e <Eeprom_24_readPacket+0x150>
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
     bda:	a4 01       	movw	r20, r8
     bdc:	40 0f       	add	r20, r16
     bde:	51 1d       	adc	r21, r1
     be0:	42 95       	swap	r20
     be2:	52 95       	swap	r21
     be4:	50 7f       	andi	r21, 0xF0	; 240
     be6:	54 27       	eor	r21, r20
     be8:	40 7f       	andi	r20, 0xF0	; 240
     bea:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
     bec:	be 01       	movw	r22, r28
     bee:	6e 5f       	subi	r22, 0xFE	; 254
     bf0:	7f 4f       	sbci	r23, 0xFF	; 255
     bf2:	ce 01       	movw	r24, r28
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	0e 94 89 03 	call	0x712	; 0x712 <EEPROM_getAddresses>
     bfa:	18 2f       	mov	r17, r24
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	b1 f4       	brne	.+44     	; 0xc2c <Eeprom_24_readPacket+0x14e>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
     c00:	a6 01       	movw	r20, r12
     c02:	4a 0d       	add	r20, r10
     c04:	5b 1d       	adc	r21, r11
     c06:	97 01       	movw	r18, r14
     c08:	6a 81       	ldd	r22, Y+2	; 0x02
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	0e 94 63 09 	call	0x12c6	; 0x12c6 <I2C_MasterReceiveFromLocation>
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	69 f0       	breq	.+26     	; 0xc2e <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_NOK;
     c14:	10 e0       	ldi	r17, 0x00	; 0
     c16:	0b c0       	rjmp	.+22     	; 0xc2e <Eeprom_24_readPacket+0x150>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     c18:	12 e0       	ldi	r17, 0x02	; 2
     c1a:	09 c0       	rjmp	.+18     	; 0xc2e <Eeprom_24_readPacket+0x150>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     c1c:	14 e0       	ldi	r17, 0x04	; 4
     c1e:	07 c0       	rjmp	.+14     	; 0xc2e <Eeprom_24_readPacket+0x150>
	uint8_t i=0;

#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     c20:	10 e0       	ldi	r17, 0x00	; 0
     c22:	05 c0       	rjmp	.+10     	; 0xc2e <Eeprom_24_readPacket+0x150>
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     c24:	10 e0       	ldi	r17, 0x00	; 0
     c26:	03 c0       	rjmp	.+6      	; 0xc2e <Eeprom_24_readPacket+0x150>
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     c28:	10 e0       	ldi	r17, 0x00	; 0
     c2a:	01 c0       	rjmp	.+2      	; 0xc2e <Eeprom_24_readPacket+0x150>

	if (u16_dataLen > 0)
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     c2c:	10 e0       	ldi	r17, 0x00	; 0
		if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
     c2e:	81 2f       	mov	r24, r17
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	df 90       	pop	r13
     c42:	cf 90       	pop	r12
     c44:	bf 90       	pop	r11
     c46:	af 90       	pop	r10
     c48:	9f 90       	pop	r9
     c4a:	8f 90       	pop	r8
     c4c:	7f 90       	pop	r7
     c4e:	6f 90       	pop	r6
     c50:	08 95       	ret

00000c52 <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
     c56:	c0 91 3e 02 	lds	r28, 0x023E	; 0x80023e <gu8_counter>
     c5a:	d0 e0       	ldi	r29, 0x00	; 0
     c5c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <Uart_DataRegister>
     c60:	c1 5c       	subi	r28, 0xC1	; 193
     c62:	dd 4f       	sbci	r29, 0xFD	; 253
     c64:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
     c66:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <gu8_counter>
     c6a:	e9 2f       	mov	r30, r25
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	e1 5c       	subi	r30, 0xC1	; 193
     c70:	fd 4f       	sbci	r31, 0xFD	; 253
     c72:	80 81       	ld	r24, Z
     c74:	8d 30       	cpi	r24, 0x0D	; 13
     c76:	71 f4       	brne	.+28     	; 0xc94 <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
     c78:	0e 94 a5 0a 	call	0x154a	; 0x154a <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
     c7c:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <gu8_counter>
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	e1 5c       	subi	r30, 0xC1	; 193
     c84:	fd 4f       	sbci	r31, 0xFD	; 253
     c86:	10 82       	st	Z, r1
		gu8_counter = 0;
     c88:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <gu8_counter>
		gu8_flag = 1;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <gu8_flag>
     c92:	1d c0       	rjmp	.+58     	; 0xcce <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
     c94:	88 30       	cpi	r24, 0x08	; 8
     c96:	51 f4       	brne	.+20     	; 0xcac <Uart_RXC_ISR+0x5a>
     c98:	99 23       	and	r25, r25
     c9a:	41 f0       	breq	.+16     	; 0xcac <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
     c9c:	0e 94 a5 0a 	call	0x154a	; 0x154a <Uart_sendByte>
		gu8_counter--;
     ca0:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <gu8_counter>
     ca4:	81 50       	subi	r24, 0x01	; 1
     ca6:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <gu8_counter>
     caa:	11 c0       	rjmp	.+34     	; 0xcce <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
     cac:	88 30       	cpi	r24, 0x08	; 8
     cae:	79 f0       	breq	.+30     	; 0xcce <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
     cb0:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <gu8_visibility>
     cb4:	91 30       	cpi	r25, 0x01	; 1
     cb6:	21 f4       	brne	.+8      	; 0xcc0 <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
     cb8:	8a e2       	ldi	r24, 0x2A	; 42
     cba:	0e 94 a5 0a 	call	0x154a	; 0x154a <Uart_sendByte>
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
     cc0:	0e 94 a5 0a 	call	0x154a	; 0x154a <Uart_sendByte>
		}
		gu8_counter++;
     cc4:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <gu8_counter>
     cc8:	8f 5f       	subi	r24, 0xFF	; 255
     cca:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <gu8_counter>
	}
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
     cd4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
     cd8:	83 30       	cpi	r24, 0x03	; 3
     cda:	81 f0       	breq	.+32     	; 0xcfc <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
     cdc:	0e 94 8f 0a 	call	0x151e	; 0x151e <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	11 f0       	breq	.+4      	; 0xce8 <Terminal_init+0x14>
     ce4:	87 30       	cpi	r24, 0x07	; 7
     ce6:	49 f4       	brne	.+18     	; 0xcfa <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
     ce8:	89 e2       	ldi	r24, 0x29	; 41
     cea:	96 e0       	ldi	r25, 0x06	; 6
     cec:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
     cf0:	83 e0       	ldi	r24, 0x03	; 3
     cf2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
     cfa:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
     cfc:	08 95       	ret

00000cfe <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
     d02:	00 97       	sbiw	r24, 0x00	; 0
     d04:	81 f0       	breq	.+32     	; 0xd26 <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
     d06:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <genu_TerminalModuleState>
     d0a:	22 30       	cpi	r18, 0x02	; 2
     d0c:	79 f0       	breq	.+30     	; 0xd2c <Terminal_Out+0x2e>
     d0e:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
     d10:	0e 94 08 0a 	call	0x1410	; 0x1410 <stringLength>
     d14:	68 2f       	mov	r22, r24
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	ce 01       	movw	r24, r28
     d1a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	21 f0       	breq	.+8      	; 0xd2a <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	03 c0       	rjmp	.+6      	; 0xd2c <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
     d26:	24 e0       	ldi	r18, 0x04	; 4
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
     d2a:	21 e0       	ldi	r18, 0x01	; 1
}
     d2c:	82 2f       	mov	r24, r18
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret

00000d34 <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
     d34:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
     d36:	89 2b       	or	r24, r25
     d38:	a1 f0       	breq	.+40     	; 0xd62 <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
     d3a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
     d3e:	82 30       	cpi	r24, 0x02	; 2
     d40:	99 f0       	breq	.+38     	; 0xd68 <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
     d42:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <gu8_flag>
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	71 f4       	brne	.+28     	; 0xd66 <Terminal_In+0x32>
	{
		gu8_flag = 0;
     d4a:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
     d4e:	8f e3       	ldi	r24, 0x3F	; 63
     d50:	92 e0       	ldi	r25, 0x02	; 2
     d52:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <stringCopy>
		EmptyString(gau8_data);
     d56:	8f e3       	ldi	r24, 0x3F	; 63
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
     d5e:	85 e0       	ldi	r24, 0x05	; 5
     d60:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
     d62:	84 e0       	ldi	r24, 0x04	; 4
     d64:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
     d66:	81 e0       	ldi	r24, 0x01	; 1
}
     d68:	08 95       	ret

00000d6a <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
     d70:	08 95       	ret

00000d72 <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
     d72:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	08 95       	ret

00000d7a <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
     d7a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <App_start>
     d7e:	ff cf       	rjmp	.-2      	; 0xd7e <main+0x4>

00000d80 <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
     d80:	2f 92       	push	r2
     d82:	3f 92       	push	r3
     d84:	4f 92       	push	r4
     d86:	5f 92       	push	r5
     d88:	6f 92       	push	r6
     d8a:	7f 92       	push	r7
     d8c:	8f 92       	push	r8
     d8e:	9f 92       	push	r9
     d90:	af 92       	push	r10
     d92:	bf 92       	push	r11
     d94:	cf 92       	push	r12
     d96:	df 92       	push	r13
     d98:	ef 92       	push	r14
     d9a:	ff 92       	push	r15
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	00 d0       	rcall	.+0      	; 0xda6 <Delay_ms+0x26>
     da6:	00 d0       	rcall	.+0      	; 0xda8 <Delay_ms+0x28>
     da8:	00 d0       	rcall	.+0      	; 0xdaa <Delay_ms+0x2a>
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	22 2e       	mov	r2, r18
     db0:	33 2e       	mov	r3, r19
     db2:	44 2e       	mov	r4, r20
     db4:	55 2e       	mov	r5, r21
     db6:	66 2e       	mov	r6, r22
     db8:	79 83       	std	Y+1, r23	; 0x01
     dba:	8a 83       	std	Y+2, r24	; 0x02
     dbc:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
     dbe:	91 2c       	mov	r9, r1
     dc0:	1d 82       	std	Y+5, r1	; 0x05
     dc2:	1c 82       	std	Y+4, r1	; 0x04
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	e0 e0       	ldi	r30, 0x00	; 0
     dca:	71 2c       	mov	r7, r1
     dcc:	81 2c       	mov	r8, r1
     dce:	44 c0       	rjmp	.+136    	; 0xe58 <Delay_ms+0xd8>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
     dd0:	2d 2d       	mov	r18, r13
     dd2:	3e 2d       	mov	r19, r14
     dd4:	4f 2d       	mov	r20, r15
     dd6:	50 2f       	mov	r21, r16
     dd8:	61 2f       	mov	r22, r17
     dda:	7a 2f       	mov	r23, r26
     ddc:	8b 2d       	mov	r24, r11
     dde:	9c 2d       	mov	r25, r12
     de0:	a1 e0       	ldi	r26, 0x01	; 1
     de2:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__adddi3_s8>
     de6:	d2 2e       	mov	r13, r18
     de8:	e3 2e       	mov	r14, r19
     dea:	f4 2e       	mov	r15, r20
     dec:	05 2f       	mov	r16, r21
     dee:	16 2f       	mov	r17, r22
     df0:	a7 2f       	mov	r26, r23
     df2:	b8 2e       	mov	r11, r24
     df4:	c9 2e       	mov	r12, r25
     df6:	0a c0       	rjmp	.+20     	; 0xe0c <Delay_ms+0x8c>
     df8:	d1 2c       	mov	r13, r1
     dfa:	e1 2c       	mov	r14, r1
     dfc:	f1 2c       	mov	r15, r1
     dfe:	00 e0       	ldi	r16, 0x00	; 0
     e00:	10 e0       	ldi	r17, 0x00	; 0
     e02:	a0 e0       	ldi	r26, 0x00	; 0
     e04:	b1 2c       	mov	r11, r1
     e06:	c1 2c       	mov	r12, r1
     e08:	ad 80       	ldd	r10, Y+5	; 0x05
     e0a:	ee 83       	std	Y+6, r30	; 0x06
     e0c:	2d 2d       	mov	r18, r13
     e0e:	3e 2d       	mov	r19, r14
     e10:	4f 2d       	mov	r20, r15
     e12:	50 2f       	mov	r21, r16
     e14:	61 2f       	mov	r22, r17
     e16:	7a 2f       	mov	r23, r26
     e18:	8b 2d       	mov	r24, r11
     e1a:	9c 2d       	mov	r25, r12
     e1c:	2b 38       	cpi	r18, 0x8B	; 139
     e1e:	31 05       	cpc	r19, r1
     e20:	41 05       	cpc	r20, r1
     e22:	51 05       	cpc	r21, r1
     e24:	61 05       	cpc	r22, r1
     e26:	71 05       	cpc	r23, r1
     e28:	81 05       	cpc	r24, r1
     e2a:	91 05       	cpc	r25, r1
     e2c:	89 f2       	breq	.-94     	; 0xdd0 <Delay_ms+0x50>
     e2e:	80 f2       	brcs	.-96     	; 0xdd0 <Delay_ms+0x50>
     e30:	ee 81       	ldd	r30, Y+6	; 0x06

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
     e32:	29 2d       	mov	r18, r9
     e34:	3a 2d       	mov	r19, r10
     e36:	4c 81       	ldd	r20, Y+4	; 0x04
     e38:	5b 2f       	mov	r21, r27
     e3a:	6f 2f       	mov	r22, r31
     e3c:	7e 2f       	mov	r23, r30
     e3e:	87 2d       	mov	r24, r7
     e40:	98 2d       	mov	r25, r8
     e42:	a1 e0       	ldi	r26, 0x01	; 1
     e44:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__adddi3_s8>
     e48:	92 2e       	mov	r9, r18
     e4a:	3d 83       	std	Y+5, r19	; 0x05
     e4c:	4c 83       	std	Y+4, r20	; 0x04
     e4e:	b5 2f       	mov	r27, r21
     e50:	f6 2f       	mov	r31, r22
     e52:	e7 2f       	mov	r30, r23
     e54:	78 2e       	mov	r7, r24
     e56:	89 2e       	mov	r8, r25
     e58:	29 2d       	mov	r18, r9
     e5a:	3d 81       	ldd	r19, Y+5	; 0x05
     e5c:	4c 81       	ldd	r20, Y+4	; 0x04
     e5e:	5b 2f       	mov	r21, r27
     e60:	6f 2f       	mov	r22, r31
     e62:	7e 2f       	mov	r23, r30
     e64:	87 2d       	mov	r24, r7
     e66:	98 2d       	mov	r25, r8
     e68:	a2 2c       	mov	r10, r2
     e6a:	b3 2c       	mov	r11, r3
     e6c:	c4 2c       	mov	r12, r4
     e6e:	d5 2c       	mov	r13, r5
     e70:	e6 2c       	mov	r14, r6
     e72:	f9 80       	ldd	r15, Y+1	; 0x01
     e74:	0a 81       	ldd	r16, Y+2	; 0x02
     e76:	1b 81       	ldd	r17, Y+3	; 0x03
     e78:	0e 94 6f 0b 	call	0x16de	; 0x16de <__cmpdi2>
     e7c:	08 f4       	brcc	.+2      	; 0xe80 <Delay_ms+0x100>
     e7e:	bc cf       	rjmp	.-136    	; 0xdf8 <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
     e80:	26 96       	adiw	r28, 0x06	; 6
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	ff 90       	pop	r15
     e96:	ef 90       	pop	r14
     e98:	df 90       	pop	r13
     e9a:	cf 90       	pop	r12
     e9c:	bf 90       	pop	r11
     e9e:	af 90       	pop	r10
     ea0:	9f 90       	pop	r9
     ea2:	8f 90       	pop	r8
     ea4:	7f 90       	pop	r7
     ea6:	6f 90       	pop	r6
     ea8:	5f 90       	pop	r5
     eaa:	4f 90       	pop	r4
     eac:	3f 90       	pop	r3
     eae:	2f 90       	pop	r2
     eb0:	08 95       	ret

00000eb2 <Ext_INT0_init>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
     eb2:	9b b7       	in	r25, 0x3b	; 59
     eb4:	90 64       	ori	r25, 0x40	; 64
     eb6:	9b bf       	out	0x3b, r25	; 59
     eb8:	95 b7       	in	r25, 0x35	; 53
     eba:	89 2b       	or	r24, r25
     ebc:	85 bf       	out	0x35, r24	; 53
     ebe:	08 95       	ret

00000ec0 <INT0_setCallBack>:
     ec0:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <INT0_CallBackPtr+0x1>
     ec4:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <INT0_CallBackPtr>
     ec8:	08 95       	ret

00000eca <__vector_1>:
     eca:	1f 92       	push	r1
     ecc:	0f 92       	push	r0
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	0f 92       	push	r0
     ed2:	11 24       	eor	r1, r1
     ed4:	2f 93       	push	r18
     ed6:	3f 93       	push	r19
     ed8:	4f 93       	push	r20
     eda:	5f 93       	push	r21
     edc:	6f 93       	push	r22
     ede:	7f 93       	push	r23
     ee0:	8f 93       	push	r24
     ee2:	9f 93       	push	r25
     ee4:	af 93       	push	r26
     ee6:	bf 93       	push	r27
     ee8:	ef 93       	push	r30
     eea:	ff 93       	push	r31
     eec:	e0 91 43 03 	lds	r30, 0x0343	; 0x800343 <INT0_CallBackPtr>
     ef0:	f0 91 44 03 	lds	r31, 0x0344	; 0x800344 <INT0_CallBackPtr+0x1>
     ef4:	09 95       	icall
     ef6:	ff 91       	pop	r31
     ef8:	ef 91       	pop	r30
     efa:	bf 91       	pop	r27
     efc:	af 91       	pop	r26
     efe:	9f 91       	pop	r25
     f00:	8f 91       	pop	r24
     f02:	7f 91       	pop	r23
     f04:	6f 91       	pop	r22
     f06:	5f 91       	pop	r21
     f08:	4f 91       	pop	r20
     f0a:	3f 91       	pop	r19
     f0c:	2f 91       	pop	r18
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti

00000f18 <__vector_2>:
     f18:	1f 92       	push	r1
     f1a:	0f 92       	push	r0
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	0f 92       	push	r0
     f20:	11 24       	eor	r1, r1
     f22:	2f 93       	push	r18
     f24:	3f 93       	push	r19
     f26:	4f 93       	push	r20
     f28:	5f 93       	push	r21
     f2a:	6f 93       	push	r22
     f2c:	7f 93       	push	r23
     f2e:	8f 93       	push	r24
     f30:	9f 93       	push	r25
     f32:	af 93       	push	r26
     f34:	bf 93       	push	r27
     f36:	ef 93       	push	r30
     f38:	ff 93       	push	r31
     f3a:	e0 91 41 03 	lds	r30, 0x0341	; 0x800341 <INT1_CallBackPtr>
     f3e:	f0 91 42 03 	lds	r31, 0x0342	; 0x800342 <INT1_CallBackPtr+0x1>
     f42:	09 95       	icall
     f44:	ff 91       	pop	r31
     f46:	ef 91       	pop	r30
     f48:	bf 91       	pop	r27
     f4a:	af 91       	pop	r26
     f4c:	9f 91       	pop	r25
     f4e:	8f 91       	pop	r24
     f50:	7f 91       	pop	r23
     f52:	6f 91       	pop	r22
     f54:	5f 91       	pop	r21
     f56:	4f 91       	pop	r20
     f58:	3f 91       	pop	r19
     f5a:	2f 91       	pop	r18
     f5c:	0f 90       	pop	r0
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	0f 90       	pop	r0
     f62:	1f 90       	pop	r1
     f64:	18 95       	reti

00000f66 <__vector_3>:
}
ISR(INT2_IRQ)
{
     f66:	1f 92       	push	r1
     f68:	0f 92       	push	r0
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	0f 92       	push	r0
     f6e:	11 24       	eor	r1, r1
     f70:	2f 93       	push	r18
     f72:	3f 93       	push	r19
     f74:	4f 93       	push	r20
     f76:	5f 93       	push	r21
     f78:	6f 93       	push	r22
     f7a:	7f 93       	push	r23
     f7c:	8f 93       	push	r24
     f7e:	9f 93       	push	r25
     f80:	af 93       	push	r26
     f82:	bf 93       	push	r27
     f84:	ef 93       	push	r30
     f86:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
     f88:	e0 91 3f 03 	lds	r30, 0x033F	; 0x80033f <INT2_CallBackPtr>
     f8c:	f0 91 40 03 	lds	r31, 0x0340	; 0x800340 <INT2_CallBackPtr+0x1>
     f90:	09 95       	icall
}
     f92:	ff 91       	pop	r31
     f94:	ef 91       	pop	r30
     f96:	bf 91       	pop	r27
     f98:	af 91       	pop	r26
     f9a:	9f 91       	pop	r25
     f9c:	8f 91       	pop	r24
     f9e:	7f 91       	pop	r23
     fa0:	6f 91       	pop	r22
     fa2:	5f 91       	pop	r21
     fa4:	4f 91       	pop	r20
     fa6:	3f 91       	pop	r19
     fa8:	2f 91       	pop	r18
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	0f 90       	pop	r0
     fb0:	1f 90       	pop	r1
     fb2:	18 95       	reti

00000fb4 <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
     fb4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     fb8:	86 30       	cpi	r24, 0x06	; 6
     fba:	49 f0       	breq	.+18     	; 0xfce <I2C_MasterInit+0x1a>
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	81 b9       	out	0x01, r24	; 1
     fc0:	89 e0       	ldi	r24, 0x09	; 9
     fc2:	80 b9       	out	0x00, r24	; 0
     fc4:	86 e0       	ldi	r24, 0x06	; 6
     fc6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <genuI2C_Status>
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	08 95       	ret
     fce:	87 e0       	ldi	r24, 0x07	; 7
     fd0:	08 95       	ret

00000fd2 <I2C_MasterSendSTART>:
     fd2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     fd6:	86 30       	cpi	r24, 0x06	; 6
     fd8:	59 f4       	brne	.+22     	; 0xff0 <I2C_MasterSendSTART+0x1e>
     fda:	84 ea       	ldi	r24, 0xA4	; 164
     fdc:	86 bf       	out	0x36, r24	; 54
     fde:	06 b6       	in	r0, 0x36	; 54
     fe0:	07 fe       	sbrs	r0, 7
     fe2:	fd cf       	rjmp	.-6      	; 0xfde <I2C_MasterSendSTART+0xc>
     fe4:	81 b1       	in	r24, 0x01	; 1
     fe6:	88 7f       	andi	r24, 0xF8	; 248
     fe8:	88 30       	cpi	r24, 0x08	; 8
     fea:	21 f0       	breq	.+8      	; 0xff4 <I2C_MasterSendSTART+0x22>
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	08 95       	ret
     ff0:	85 e0       	ldi	r24, 0x05	; 5
     ff2:	08 95       	ret
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	08 95       	ret

00000ff8 <I2C_MasterSendSlaveAddress>:
     ff8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
     ffc:	96 30       	cpi	r25, 0x06	; 6
     ffe:	29 f5       	brne	.+74     	; 0x104a <I2C_MasterSendSlaveAddress+0x52>
    1000:	62 30       	cpi	r22, 0x02	; 2
    1002:	28 f5       	brcc	.+74     	; 0x104e <I2C_MasterSendSlaveAddress+0x56>
    1004:	88 23       	and	r24, r24
    1006:	2c f1       	brlt	.+74     	; 0x1052 <I2C_MasterSendSlaveAddress+0x5a>
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	68 2b       	or	r22, r24
    1010:	63 b9       	out	0x03, r22	; 3
    1012:	84 e8       	ldi	r24, 0x84	; 132
    1014:	86 bf       	out	0x36, r24	; 54
    1016:	06 b6       	in	r0, 0x36	; 54
    1018:	07 fe       	sbrs	r0, 7
    101a:	fd cf       	rjmp	.-6      	; 0x1016 <I2C_MasterSendSlaveAddress+0x1e>
    101c:	81 b1       	in	r24, 0x01	; 1
    101e:	88 7f       	andi	r24, 0xF8	; 248
    1020:	88 33       	cpi	r24, 0x38	; 56
    1022:	59 f0       	breq	.+22     	; 0x103a <I2C_MasterSendSlaveAddress+0x42>
    1024:	28 f4       	brcc	.+10     	; 0x1030 <I2C_MasterSendSlaveAddress+0x38>
    1026:	88 31       	cpi	r24, 0x18	; 24
    1028:	b1 f0       	breq	.+44     	; 0x1056 <I2C_MasterSendSlaveAddress+0x5e>
    102a:	80 32       	cpi	r24, 0x20	; 32
    102c:	41 f0       	breq	.+16     	; 0x103e <I2C_MasterSendSlaveAddress+0x46>
    102e:	0b c0       	rjmp	.+22     	; 0x1046 <I2C_MasterSendSlaveAddress+0x4e>
    1030:	80 34       	cpi	r24, 0x40	; 64
    1032:	89 f0       	breq	.+34     	; 0x1056 <I2C_MasterSendSlaveAddress+0x5e>
    1034:	88 34       	cpi	r24, 0x48	; 72
    1036:	29 f0       	breq	.+10     	; 0x1042 <I2C_MasterSendSlaveAddress+0x4a>
    1038:	06 c0       	rjmp	.+12     	; 0x1046 <I2C_MasterSendSlaveAddress+0x4e>
    103a:	88 e3       	ldi	r24, 0x38	; 56
    103c:	08 95       	ret
    103e:	80 e2       	ldi	r24, 0x20	; 32
    1040:	08 95       	ret
    1042:	88 e4       	ldi	r24, 0x48	; 72
    1044:	08 95       	ret
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	08 95       	ret
    104a:	85 e0       	ldi	r24, 0x05	; 5
    104c:	08 95       	ret
    104e:	82 e0       	ldi	r24, 0x02	; 2
    1050:	08 95       	ret
    1052:	83 e0       	ldi	r24, 0x03	; 3
    1054:	08 95       	ret
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	08 95       	ret

0000105a <I2C_MasterSendRepSTART>:
    105a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
    105e:	86 30       	cpi	r24, 0x06	; 6
    1060:	59 f4       	brne	.+22     	; 0x1078 <I2C_MasterSendRepSTART+0x1e>
    1062:	84 ea       	ldi	r24, 0xA4	; 164
    1064:	86 bf       	out	0x36, r24	; 54
    1066:	06 b6       	in	r0, 0x36	; 54
    1068:	07 fe       	sbrs	r0, 7
    106a:	fd cf       	rjmp	.-6      	; 0x1066 <I2C_MasterSendRepSTART+0xc>
    106c:	81 b1       	in	r24, 0x01	; 1
    106e:	88 7f       	andi	r24, 0xF8	; 248
    1070:	80 31       	cpi	r24, 0x10	; 16
    1072:	21 f0       	breq	.+8      	; 0x107c <I2C_MasterSendRepSTART+0x22>
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	08 95       	ret
    1078:	85 e0       	ldi	r24, 0x05	; 5
    107a:	08 95       	ret
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	08 95       	ret

00001080 <I2C_MasterSendSTOP>:
    1080:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
    1084:	86 30       	cpi	r24, 0x06	; 6
    1086:	39 f4       	brne	.+14     	; 0x1096 <I2C_MasterSendSTOP+0x16>
    1088:	84 e9       	ldi	r24, 0x94	; 148
    108a:	86 bf       	out	0x36, r24	; 54
    108c:	06 b6       	in	r0, 0x36	; 54
    108e:	04 fc       	sbrc	r0, 4
    1090:	fd cf       	rjmp	.-6      	; 0x108c <I2C_MasterSendSTOP+0xc>
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	08 95       	ret
    1096:	85 e0       	ldi	r24, 0x05	; 5
    1098:	08 95       	ret

0000109a <I2C_MasterSendByte>:
    109a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
    109e:	96 30       	cpi	r25, 0x06	; 6
    10a0:	69 f4       	brne	.+26     	; 0x10bc <I2C_MasterSendByte+0x22>
    10a2:	83 b9       	out	0x03, r24	; 3
    10a4:	84 e8       	ldi	r24, 0x84	; 132
    10a6:	86 bf       	out	0x36, r24	; 54
    10a8:	06 b6       	in	r0, 0x36	; 54
    10aa:	07 fe       	sbrs	r0, 7
    10ac:	fd cf       	rjmp	.-6      	; 0x10a8 <I2C_MasterSendByte+0xe>
    10ae:	81 b1       	in	r24, 0x01	; 1
    10b0:	88 7f       	andi	r24, 0xF8	; 248
    10b2:	88 32       	cpi	r24, 0x28	; 40
    10b4:	29 f0       	breq	.+10     	; 0x10c0 <I2C_MasterSendByte+0x26>
    10b6:	80 33       	cpi	r24, 0x30	; 48
    10b8:	29 f4       	brne	.+10     	; 0x10c4 <I2C_MasterSendByte+0x2a>
    10ba:	08 95       	ret
    10bc:	85 e0       	ldi	r24, 0x05	; 5
    10be:	08 95       	ret
    10c0:	88 e2       	ldi	r24, 0x28	; 40
    10c2:	08 95       	ret
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	08 95       	ret

000010c8 <I2C_MasterReceiveByte_ACK>:
    10c8:	fc 01       	movw	r30, r24
    10ca:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
    10ce:	96 30       	cpi	r25, 0x06	; 6
    10d0:	79 f4       	brne	.+30     	; 0x10f0 <I2C_MasterReceiveByte_ACK+0x28>
    10d2:	30 97       	sbiw	r30, 0x00	; 0
    10d4:	79 f0       	breq	.+30     	; 0x10f4 <I2C_MasterReceiveByte_ACK+0x2c>
    10d6:	84 ec       	ldi	r24, 0xC4	; 196
    10d8:	86 bf       	out	0x36, r24	; 54
    10da:	06 b6       	in	r0, 0x36	; 54
    10dc:	07 fe       	sbrs	r0, 7
    10de:	fd cf       	rjmp	.-6      	; 0x10da <I2C_MasterReceiveByte_ACK+0x12>
    10e0:	81 b1       	in	r24, 0x01	; 1
    10e2:	88 7f       	andi	r24, 0xF8	; 248
    10e4:	80 35       	cpi	r24, 0x50	; 80
    10e6:	41 f4       	brne	.+16     	; 0x10f8 <I2C_MasterReceiveByte_ACK+0x30>
    10e8:	83 b1       	in	r24, 0x03	; 3
    10ea:	80 83       	st	Z, r24
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	08 95       	ret
    10f0:	85 e0       	ldi	r24, 0x05	; 5
    10f2:	08 95       	ret
    10f4:	84 e0       	ldi	r24, 0x04	; 4
    10f6:	08 95       	ret
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	08 95       	ret

000010fc <I2C_MasterReceiveByte_NACK>:
    10fc:	fc 01       	movw	r30, r24
    10fe:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
    1102:	96 30       	cpi	r25, 0x06	; 6
    1104:	79 f4       	brne	.+30     	; 0x1124 <I2C_MasterReceiveByte_NACK+0x28>
    1106:	30 97       	sbiw	r30, 0x00	; 0
    1108:	79 f0       	breq	.+30     	; 0x1128 <I2C_MasterReceiveByte_NACK+0x2c>
    110a:	84 e8       	ldi	r24, 0x84	; 132
    110c:	86 bf       	out	0x36, r24	; 54
    110e:	06 b6       	in	r0, 0x36	; 54
    1110:	07 fe       	sbrs	r0, 7
    1112:	fd cf       	rjmp	.-6      	; 0x110e <I2C_MasterReceiveByte_NACK+0x12>
    1114:	81 b1       	in	r24, 0x01	; 1
    1116:	88 7f       	andi	r24, 0xF8	; 248
    1118:	88 35       	cpi	r24, 0x58	; 88
    111a:	41 f4       	brne	.+16     	; 0x112c <I2C_MasterReceiveByte_NACK+0x30>
    111c:	83 b1       	in	r24, 0x03	; 3
    111e:	80 83       	st	Z, r24
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	08 95       	ret
    1124:	85 e0       	ldi	r24, 0x05	; 5
    1126:	08 95       	ret
    1128:	84 e0       	ldi	r24, 0x04	; 4
    112a:	08 95       	ret
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	08 95       	ret

00001130 <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
    1130:	7f 92       	push	r7
    1132:	8f 92       	push	r8
    1134:	9f 92       	push	r9
    1136:	af 92       	push	r10
    1138:	bf 92       	push	r11
    113a:	cf 92       	push	r12
    113c:	df 92       	push	r13
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	78 2e       	mov	r7, r24
    114c:	eb 01       	movw	r28, r22
    114e:	7a 01       	movw	r14, r20
    1150:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    1152:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
    1156:	86 30       	cpi	r24, 0x06	; 6
    1158:	09 f0       	breq	.+2      	; 0x115c <I2C_MasterReceiveGeneral+0x2c>
    115a:	47 c0       	rjmp	.+142    	; 0x11ea <I2C_MasterReceiveGeneral+0xba>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
    115c:	20 97       	sbiw	r28, 0x00	; 0
    115e:	09 f4       	brne	.+2      	; 0x1162 <I2C_MasterReceiveGeneral+0x32>
    1160:	46 c0       	rjmp	.+140    	; 0x11ee <I2C_MasterReceiveGeneral+0xbe>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
    1162:	23 2b       	or	r18, r19
    1164:	09 f4       	brne	.+2      	; 0x1168 <I2C_MasterReceiveGeneral+0x38>
    1166:	45 c0       	rjmp	.+138    	; 0x11f2 <I2C_MasterReceiveGeneral+0xc2>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    1168:	77 20       	and	r7, r7
    116a:	0c f4       	brge	.+2      	; 0x116e <I2C_MasterReceiveGeneral+0x3e>
    116c:	44 c0       	rjmp	.+136    	; 0x11f6 <I2C_MasterReceiveGeneral+0xc6>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    116e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <I2C_MasterSendSTART>
    1172:	88 23       	and	r24, r24
    1174:	09 f4       	brne	.+2      	; 0x1178 <I2C_MasterReceiveGeneral+0x48>
    1176:	4a c0       	rjmp	.+148    	; 0x120c <I2C_MasterReceiveGeneral+0xdc>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	87 2d       	mov	r24, r7
    117c:	0e 94 fc 07 	call	0xff8	; 0xff8 <I2C_MasterSendSlaveAddress>
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	d9 f5       	brne	.+118    	; 0x11fa <I2C_MasterReceiveGeneral+0xca>
    1184:	0b c0       	rjmp	.+22     	; 0x119c <I2C_MasterReceiveGeneral+0x6c>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1186:	4e 01       	movw	r8, r28
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	88 1a       	sub	r8, r24
    118c:	98 0a       	sbc	r9, r24
    118e:	88 81       	ld	r24, Y
    1190:	0e 94 4d 08 	call	0x109a	; 0x109a <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    1194:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1196:	88 23       	and	r24, r24
    1198:	c9 f1       	breq	.+114    	; 0x120c <I2C_MasterReceiveGeneral+0xdc>
    119a:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    119c:	57 01       	movw	r10, r14
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	a8 1a       	sub	r10, r24
    11a2:	b1 08       	sbc	r11, r1
    11a4:	ef 28       	or	r14, r15
    11a6:	79 f7       	brne	.-34     	; 0x1186 <I2C_MasterReceiveGeneral+0x56>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
    11a8:	0e 94 2d 08 	call	0x105a	; 0x105a <I2C_MasterSendRepSTART>
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	39 f5       	brne	.+78     	; 0x11fe <I2C_MasterReceiveGeneral+0xce>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    11b0:	61 e0       	ldi	r22, 0x01	; 1
    11b2:	87 2d       	mov	r24, r7
    11b4:	0e 94 fc 07 	call	0xff8	; 0xff8 <I2C_MasterSendSlaveAddress>
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	19 f5       	brne	.+70     	; 0x1202 <I2C_MasterReceiveGeneral+0xd2>
    11bc:	08 c0       	rjmp	.+16     	; 0x11ce <I2C_MasterReceiveGeneral+0x9e>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
    11be:	e6 01       	movw	r28, r12
    11c0:	21 96       	adiw	r28, 0x01	; 1
    11c2:	c6 01       	movw	r24, r12
    11c4:	0e 94 64 08 	call	0x10c8	; 0x10c8 <I2C_MasterReceiveByte_ACK>
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	e9 f4       	brne	.+58     	; 0x1206 <I2C_MasterReceiveGeneral+0xd6>
    11cc:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
    11ce:	01 50       	subi	r16, 0x01	; 1
    11d0:	11 09       	sbc	r17, r1
    11d2:	a9 f7       	brne	.-22     	; 0x11be <I2C_MasterReceiveGeneral+0x8e>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
    11d4:	c6 01       	movw	r24, r12
    11d6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <I2C_MasterReceiveByte_NACK>
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	b1 f4       	brne	.+44     	; 0x120a <I2C_MasterReceiveGeneral+0xda>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
    11de:	0e 94 40 08 	call	0x1080	; 0x1080 <I2C_MasterSendSTOP>
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	99 f0       	breq	.+38     	; 0x120c <I2C_MasterReceiveGeneral+0xdc>
		return I2C_STATUS_ERROR_NOK;
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	11 c0       	rjmp	.+34     	; 0x120c <I2C_MasterReceiveGeneral+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    11ea:	85 e0       	ldi	r24, 0x05	; 5
    11ec:	0f c0       	rjmp	.+30     	; 0x120c <I2C_MasterReceiveGeneral+0xdc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    11ee:	84 e0       	ldi	r24, 0x04	; 4
    11f0:	0d c0       	rjmp	.+26     	; 0x120c <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    11f2:	84 e0       	ldi	r24, 0x04	; 4
    11f4:	0b c0       	rjmp	.+22     	; 0x120c <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    11f6:	83 e0       	ldi	r24, 0x03	; 3
    11f8:	09 c0       	rjmp	.+18     	; 0x120c <I2C_MasterReceiveGeneral+0xdc>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	07 c0       	rjmp	.+14     	; 0x120c <I2C_MasterReceiveGeneral+0xdc>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	05 c0       	rjmp	.+10     	; 0x120c <I2C_MasterReceiveGeneral+0xdc>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	03 c0       	rjmp	.+6      	; 0x120c <I2C_MasterReceiveGeneral+0xdc>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	01 c0       	rjmp	.+2      	; 0x120c <I2C_MasterReceiveGeneral+0xdc>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    120a:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	ef 90       	pop	r14
    1218:	df 90       	pop	r13
    121a:	cf 90       	pop	r12
    121c:	bf 90       	pop	r11
    121e:	af 90       	pop	r10
    1220:	9f 90       	pop	r9
    1222:	8f 90       	pop	r8
    1224:	7f 90       	pop	r7
    1226:	08 95       	ret

00001228 <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
    1228:	bf 92       	push	r11
    122a:	cf 92       	push	r12
    122c:	df 92       	push	r13
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	18 2f       	mov	r17, r24
    123c:	06 2f       	mov	r16, r22
    123e:	ea 01       	movw	r28, r20
    1240:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    1242:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
    1246:	86 30       	cpi	r24, 0x06	; 6
    1248:	59 f5       	brne	.+86     	; 0x12a0 <I2C_MasterSendToLocation+0x78>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    124a:	20 97       	sbiw	r28, 0x00	; 0
    124c:	59 f1       	breq	.+86     	; 0x12a4 <I2C_MasterSendToLocation+0x7c>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    124e:	11 23       	and	r17, r17
    1250:	5c f1       	brlt	.+86     	; 0x12a8 <I2C_MasterSendToLocation+0x80>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1252:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <I2C_MasterSendSTART>
    1256:	88 23       	and	r24, r24
    1258:	61 f1       	breq	.+88     	; 0x12b2 <I2C_MasterSendToLocation+0x8a>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	81 2f       	mov	r24, r17
    125e:	0e 94 fc 07 	call	0xff8	; 0xff8 <I2C_MasterSendSlaveAddress>
    1262:	b8 2e       	mov	r11, r24
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	b8 12       	cpse	r11, r24
    1268:	21 c0       	rjmp	.+66     	; 0x12ac <I2C_MasterSendToLocation+0x84>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    126a:	80 2f       	mov	r24, r16
    126c:	0e 94 4d 08 	call	0x109a	; 0x109a <I2C_MasterSendByte>
    1270:	81 11       	cpse	r24, r1
    1272:	0c c0       	rjmp	.+24     	; 0x128c <I2C_MasterSendToLocation+0x64>
    1274:	1e c0       	rjmp	.+60     	; 0x12b2 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1276:	6e 01       	movw	r12, r28
    1278:	8f ef       	ldi	r24, 0xFF	; 255
    127a:	c8 1a       	sub	r12, r24
    127c:	d8 0a       	sbc	r13, r24
    127e:	88 81       	ld	r24, Y
    1280:	0e 94 4d 08 	call	0x109a	; 0x109a <I2C_MasterSendByte>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    1284:	78 01       	movw	r14, r16
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1286:	88 23       	and	r24, r24
    1288:	a1 f0       	breq	.+40     	; 0x12b2 <I2C_MasterSendToLocation+0x8a>
    128a:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    128c:	87 01       	movw	r16, r14
    128e:	01 50       	subi	r16, 0x01	; 1
    1290:	11 09       	sbc	r17, r1
    1292:	ef 28       	or	r14, r15
    1294:	81 f7       	brne	.-32     	; 0x1276 <I2C_MasterSendToLocation+0x4e>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1296:	0e 94 40 08 	call	0x1080	; 0x1080 <I2C_MasterSendSTOP>
    129a:	81 11       	cpse	r24, r1
    129c:	09 c0       	rjmp	.+18     	; 0x12b0 <I2C_MasterSendToLocation+0x88>
    129e:	09 c0       	rjmp	.+18     	; 0x12b2 <I2C_MasterSendToLocation+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    12a0:	85 e0       	ldi	r24, 0x05	; 5
    12a2:	07 c0       	rjmp	.+14     	; 0x12b2 <I2C_MasterSendToLocation+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    12a4:	84 e0       	ldi	r24, 0x04	; 4
    12a6:	05 c0       	rjmp	.+10     	; 0x12b2 <I2C_MasterSendToLocation+0x8a>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    12a8:	83 e0       	ldi	r24, 0x03	; 3
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <I2C_MasterSendToLocation+0x8a>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
    12b0:	8b 2d       	mov	r24, r11
}
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	df 90       	pop	r13
    12c0:	cf 90       	pop	r12
    12c2:	bf 90       	pop	r11
    12c4:	08 95       	ret

000012c6 <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	1f 92       	push	r1
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
    12d6:	89 01       	movw	r16, r18
    12d8:	9a 01       	movw	r18, r20
    12da:	41 e0       	ldi	r20, 0x01	; 1
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    12de:	be 01       	movw	r22, r28
    12e0:	6f 5f       	subi	r22, 0xFF	; 255
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255
    12e4:	0e 94 98 08 	call	0x1130	; 0x1130 <I2C_MasterReceiveGeneral>
}
    12e8:	0f 90       	pop	r0
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	08 95       	ret

000012f4 <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
    12f4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genuSpi_Status>
    12f8:	87 30       	cpi	r24, 0x07	; 7
    12fa:	31 f1       	breq	.+76     	; 0x1348 <Spi_init+0x54>
    12fc:	87 b3       	in	r24, 0x17	; 23
    12fe:	80 6b       	ori	r24, 0xB0	; 176
    1300:	87 bb       	out	0x17, r24	; 23
    1302:	87 b3       	in	r24, 0x17	; 23
    1304:	8f 7b       	andi	r24, 0xBF	; 191
    1306:	87 bb       	out	0x17, r24	; 23
    1308:	88 b3       	in	r24, 0x18	; 24
    130a:	80 61       	ori	r24, 0x10	; 16
    130c:	88 bb       	out	0x18, r24	; 24
    130e:	8d b1       	in	r24, 0x0d	; 13
    1310:	80 61       	ori	r24, 0x10	; 16
    1312:	8d b9       	out	0x0d, r24	; 13
    1314:	8d b1       	in	r24, 0x0d	; 13
    1316:	8f 7d       	andi	r24, 0xDF	; 223
    1318:	8d b9       	out	0x0d, r24	; 13
    131a:	8d b1       	in	r24, 0x0d	; 13
    131c:	87 7f       	andi	r24, 0xF7	; 247
    131e:	8d b9       	out	0x0d, r24	; 13
    1320:	8d b1       	in	r24, 0x0d	; 13
    1322:	8b 7f       	andi	r24, 0xFB	; 251
    1324:	8d b9       	out	0x0d, r24	; 13
    1326:	8d b1       	in	r24, 0x0d	; 13
    1328:	8e 7f       	andi	r24, 0xFE	; 254
    132a:	8d b9       	out	0x0d, r24	; 13
    132c:	8d b1       	in	r24, 0x0d	; 13
    132e:	8d 7f       	andi	r24, 0xFD	; 253
    1330:	8d b9       	out	0x0d, r24	; 13
    1332:	8d b1       	in	r24, 0x0d	; 13
    1334:	81 60       	ori	r24, 0x01	; 1
    1336:	8d b9       	out	0x0d, r24	; 13
    1338:	8d b1       	in	r24, 0x0d	; 13
    133a:	80 64       	ori	r24, 0x40	; 64
    133c:	8d b9       	out	0x0d, r24	; 13
    133e:	87 e0       	ldi	r24, 0x07	; 7
    1340:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <genuSpi_Status>
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	08 95       	ret
    1348:	88 e0       	ldi	r24, 0x08	; 8
    134a:	08 95       	ret

0000134c <Spi_MasterSendByte>:
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	1f 92       	push	r1
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genuSpi_Status>
    135a:	97 30       	cpi	r25, 0x07	; 7
    135c:	39 f4       	brne	.+14     	; 0x136c <Spi_MasterSendByte+0x20>
    135e:	8f b9       	out	0x0f, r24	; 15
    1360:	77 9b       	sbis	0x0e, 7	; 14
    1362:	fe cf       	rjmp	.-4      	; 0x1360 <Spi_MasterSendByte+0x14>
    1364:	8f b1       	in	r24, 0x0f	; 15
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	01 c0       	rjmp	.+2      	; 0x136e <Spi_MasterSendByte+0x22>
    136c:	86 e0       	ldi	r24, 0x06	; 6
    136e:	0f 90       	pop	r0
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	08 95       	ret

00001376 <Spi_MasterSendPacket>:
    1376:	ef 92       	push	r14
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <genuSpi_Status>
    1384:	27 30       	cpi	r18, 0x07	; 7
    1386:	a1 f4       	brne	.+40     	; 0x13b0 <Spi_MasterSendPacket+0x3a>
    1388:	8b 01       	movw	r16, r22
    138a:	7c 01       	movw	r14, r24
    138c:	c0 e0       	ldi	r28, 0x00	; 0
    138e:	09 c0       	rjmp	.+18     	; 0x13a2 <Spi_MasterSendPacket+0x2c>
    1390:	f7 01       	movw	r30, r14
    1392:	e2 0f       	add	r30, r18
    1394:	f3 1f       	adc	r31, r19
    1396:	80 81       	ld	r24, Z
    1398:	0e 94 a6 09 	call	0x134c	; 0x134c <Spi_MasterSendByte>
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	51 f4       	brne	.+20     	; 0x13b4 <Spi_MasterSendPacket+0x3e>
    13a0:	cf 5f       	subi	r28, 0xFF	; 255
    13a2:	2c 2f       	mov	r18, r28
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	20 17       	cp	r18, r16
    13a8:	31 07       	cpc	r19, r17
    13aa:	90 f3       	brcs	.-28     	; 0x1390 <Spi_MasterSendPacket+0x1a>
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	03 c0       	rjmp	.+6      	; 0x13b6 <Spi_MasterSendPacket+0x40>
    13b0:	86 e0       	ldi	r24, 0x06	; 6
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <Spi_MasterSendPacket+0x40>
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	ff 90       	pop	r15
    13be:	ef 90       	pop	r14
    13c0:	08 95       	ret

000013c2 <__vector_12>:


    13c2:	1f 92       	push	r1
    13c4:	0f 92       	push	r0
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	0f 92       	push	r0
    13ca:	11 24       	eor	r1, r1
    13cc:	2f 93       	push	r18
    13ce:	3f 93       	push	r19
    13d0:	4f 93       	push	r20
    13d2:	5f 93       	push	r21
    13d4:	6f 93       	push	r22
    13d6:	7f 93       	push	r23
    13d8:	8f 93       	push	r24
    13da:	9f 93       	push	r25
    13dc:	af 93       	push	r26
    13de:	bf 93       	push	r27
    13e0:	ef 93       	push	r30
    13e2:	ff 93       	push	r31
    13e4:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <SPI_STC_CallBackPtr>
    13e8:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <SPI_STC_CallBackPtr+0x1>
    13ec:	09 95       	icall
    13ee:	ff 91       	pop	r31
    13f0:	ef 91       	pop	r30
    13f2:	bf 91       	pop	r27
    13f4:	af 91       	pop	r26
    13f6:	9f 91       	pop	r25
    13f8:	8f 91       	pop	r24
    13fa:	7f 91       	pop	r23
    13fc:	6f 91       	pop	r22
    13fe:	5f 91       	pop	r21
    1400:	4f 91       	pop	r20
    1402:	3f 91       	pop	r19
    1404:	2f 91       	pop	r18
    1406:	0f 90       	pop	r0
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	0f 90       	pop	r0
    140c:	1f 90       	pop	r1
    140e:	18 95       	reti

00001410 <stringLength>:
        else if(string1[u8_loopIndex] < string2[u8_loopIndex])
            return 2;
        u8_loopIndex++;
    }
    return 3;
}
    1410:	ac 01       	movw	r20, r24
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	01 c0       	rjmp	.+2      	; 0x1418 <stringLength+0x8>
    1416:	8f 5f       	subi	r24, 0xFF	; 255
    1418:	fa 01       	movw	r30, r20
    141a:	e8 0f       	add	r30, r24
    141c:	f1 1d       	adc	r31, r1
    141e:	20 81       	ld	r18, Z
    1420:	21 11       	cpse	r18, r1
    1422:	f9 cf       	rjmp	.-14     	; 0x1416 <stringLength+0x6>
    1424:	8f 5f       	subi	r24, 0xFF	; 255
    1426:	08 95       	ret

00001428 <stringCompare>:
    1428:	ff 92       	push	r15
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	8c 01       	movw	r16, r24
    1434:	eb 01       	movw	r28, r22
    1436:	0e 94 08 0a 	call	0x1410	; 0x1410 <stringLength>
    143a:	f8 2e       	mov	r15, r24
    143c:	ce 01       	movw	r24, r28
    143e:	0e 94 08 0a 	call	0x1410	; 0x1410 <stringLength>
    1442:	8f 15       	cp	r24, r15
    1444:	b8 f0       	brcs	.+46     	; 0x1474 <stringCompare+0x4c>
    1446:	f8 16       	cp	r15, r24
    1448:	b8 f0       	brcs	.+46     	; 0x1478 <stringCompare+0x50>
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	09 c0       	rjmp	.+18     	; 0x1460 <stringCompare+0x38>
    144e:	fe 01       	movw	r30, r28
    1450:	e8 0f       	add	r30, r24
    1452:	f9 1f       	adc	r31, r25
    1454:	80 81       	ld	r24, Z
    1456:	82 17       	cp	r24, r18
    1458:	88 f0       	brcs	.+34     	; 0x147c <stringCompare+0x54>
    145a:	28 17       	cp	r18, r24
    145c:	88 f0       	brcs	.+34     	; 0x1480 <stringCompare+0x58>
    145e:	3f 5f       	subi	r19, 0xFF	; 255
    1460:	83 2f       	mov	r24, r19
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	f8 01       	movw	r30, r16
    1466:	e8 0f       	add	r30, r24
    1468:	f9 1f       	adc	r31, r25
    146a:	20 81       	ld	r18, Z
    146c:	21 11       	cpse	r18, r1
    146e:	ef cf       	rjmp	.-34     	; 0x144e <stringCompare+0x26>
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	07 c0       	rjmp	.+14     	; 0x1482 <stringCompare+0x5a>
    1474:	82 e0       	ldi	r24, 0x02	; 2
    1476:	05 c0       	rjmp	.+10     	; 0x1482 <stringCompare+0x5a>
    1478:	83 e0       	ldi	r24, 0x03	; 3
    147a:	03 c0       	rjmp	.+6      	; 0x1482 <stringCompare+0x5a>
    147c:	82 e0       	ldi	r24, 0x02	; 2
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <stringCompare+0x5a>
    1480:	83 e0       	ldi	r24, 0x03	; 3
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	1f 91       	pop	r17
    1488:	0f 91       	pop	r16
    148a:	ff 90       	pop	r15
    148c:	08 95       	ret

0000148e <stringConcatenate>:
    148e:	ff 92       	push	r15
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	ec 01       	movw	r28, r24
    149a:	8b 01       	movw	r16, r22
    149c:	cb 01       	movw	r24, r22
    149e:	0e 94 08 0a 	call	0x1410	; 0x1410 <stringLength>
    14a2:	f8 2e       	mov	r15, r24
    14a4:	ce 01       	movw	r24, r28
    14a6:	0e 94 08 0a 	call	0x1410	; 0x1410 <stringLength>
    14aa:	81 50       	subi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0b c0       	rjmp	.+22     	; 0x14c6 <stringConcatenate+0x38>
    14b0:	28 0f       	add	r18, r24
    14b2:	31 1d       	adc	r19, r1
    14b4:	fe 01       	movw	r30, r28
    14b6:	e2 0f       	add	r30, r18
    14b8:	f3 1f       	adc	r31, r19
    14ba:	d8 01       	movw	r26, r16
    14bc:	a9 0f       	add	r26, r25
    14be:	b1 1d       	adc	r27, r1
    14c0:	2c 91       	ld	r18, X
    14c2:	20 83       	st	Z, r18
    14c4:	9f 5f       	subi	r25, 0xFF	; 255
    14c6:	29 2f       	mov	r18, r25
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	4f 2d       	mov	r20, r15
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	41 50       	subi	r20, 0x01	; 1
    14d0:	51 09       	sbc	r21, r1
    14d2:	42 17       	cp	r20, r18
    14d4:	53 07       	cpc	r21, r19
    14d6:	64 f7       	brge	.-40     	; 0x14b0 <stringConcatenate+0x22>
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	ff 90       	pop	r15
    14e2:	08 95       	ret

000014e4 <EmptyString>:

void EmptyString(uint8_t *string)
{
    14e4:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
    14e6:	90 e0       	ldi	r25, 0x00	; 0
	while(string[u8_loopIndex] != '\0')
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <EmptyString+0xa>
		string[u8_loopIndex++] = '\0';
    14ea:	9f 5f       	subi	r25, 0xFF	; 255
    14ec:	10 82       	st	Z, r1
}

void EmptyString(uint8_t *string)
{
	uint8_t u8_loopIndex=0;
	while(string[u8_loopIndex] != '\0')
    14ee:	fa 01       	movw	r30, r20
    14f0:	e9 0f       	add	r30, r25
    14f2:	f1 1d       	adc	r31, r1
    14f4:	20 81       	ld	r18, Z
    14f6:	21 11       	cpse	r18, r1
    14f8:	f8 cf       	rjmp	.-16     	; 0x14ea <EmptyString+0x6>
		string[u8_loopIndex++] = '\0';
}
    14fa:	08 95       	ret

000014fc <stringCopy>:

void stringCopy(uint8_t* source, uint8_t* destination)
{
    14fc:	dc 01       	movw	r26, r24
    uint8_t u8_loopIndex=0;
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    while(source[u8_loopIndex] != '\0')
    1500:	05 c0       	rjmp	.+10     	; 0x150c <stringCopy+0x10>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
    1502:	fb 01       	movw	r30, r22
    1504:	e2 0f       	add	r30, r18
    1506:	f3 1f       	adc	r31, r19
    1508:	40 83       	st	Z, r20
	    u8_loopIndex++;
    150a:	9f 5f       	subi	r25, 0xFF	; 255
}

void stringCopy(uint8_t* source, uint8_t* destination)
{
    uint8_t u8_loopIndex=0;
    while(source[u8_loopIndex] != '\0')
    150c:	29 2f       	mov	r18, r25
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	fd 01       	movw	r30, r26
    1512:	e2 0f       	add	r30, r18
    1514:	f3 1f       	adc	r31, r19
    1516:	40 81       	ld	r20, Z
    1518:	41 11       	cpse	r20, r1
    151a:	f3 cf       	rjmp	.-26     	; 0x1502 <stringCopy+0x6>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
	    u8_loopIndex++;
    }
}
    151c:	08 95       	ret

0000151e <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    151e:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <u8_Uart_Status>
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	81 f0       	breq	.+32     	; 0x1546 <Uart_init+0x28>
    1526:	10 bc       	out	0x20, r1	; 32
    1528:	87 e6       	ldi	r24, 0x67	; 103
    152a:	89 b9       	out	0x09, r24	; 9
    152c:	82 e0       	ldi	r24, 0x02	; 2
    152e:	8b b9       	out	0x0b, r24	; 11
    1530:	88 e1       	ldi	r24, 0x18	; 24
    1532:	8a b9       	out	0x0a, r24	; 10
    1534:	80 e8       	ldi	r24, 0x80	; 128
    1536:	80 bd       	out	0x20, r24	; 32
    1538:	80 b5       	in	r24, 0x20	; 32
    153a:	86 68       	ori	r24, 0x86	; 134
    153c:	80 bd       	out	0x20, r24	; 32
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <u8_Uart_Status>
    1544:	08 95       	ret
    1546:	87 e0       	ldi	r24, 0x07	; 7
    1548:	08 95       	ret

0000154a <Uart_sendByte>:
    154a:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <u8_Uart_Status>
    154e:	99 23       	and	r25, r25
    1550:	29 f0       	breq	.+10     	; 0x155c <Uart_sendByte+0x12>
    1552:	5d 9b       	sbis	0x0b, 5	; 11
    1554:	fe cf       	rjmp	.-4      	; 0x1552 <Uart_sendByte+0x8>
    1556:	8c b9       	out	0x0c, r24	; 12
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	08 95       	ret
    155c:	86 e0       	ldi	r24, 0x06	; 6
    155e:	08 95       	ret

00001560 <Uart_sendPacket>:
    1560:	ef 92       	push	r14
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	20 91 47 03 	lds	r18, 0x0347	; 0x800347 <u8_Uart_Status>
    1570:	22 23       	and	r18, r18
    1572:	99 f0       	breq	.+38     	; 0x159a <Uart_sendPacket+0x3a>
    1574:	8b 01       	movw	r16, r22
    1576:	7c 01       	movw	r14, r24
    1578:	c0 e0       	ldi	r28, 0x00	; 0
    157a:	d0 e0       	ldi	r29, 0x00	; 0
    157c:	09 c0       	rjmp	.+18     	; 0x1590 <Uart_sendPacket+0x30>
    157e:	f7 01       	movw	r30, r14
    1580:	ec 0f       	add	r30, r28
    1582:	fd 1f       	adc	r31, r29
    1584:	80 81       	ld	r24, Z
    1586:	0e 94 a5 0a 	call	0x154a	; 0x154a <Uart_sendByte>
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	41 f4       	brne	.+16     	; 0x159e <Uart_sendPacket+0x3e>
    158e:	21 96       	adiw	r28, 0x01	; 1
    1590:	c0 17       	cp	r28, r16
    1592:	d1 07       	cpc	r29, r17
    1594:	a0 f3       	brcs	.-24     	; 0x157e <Uart_sendPacket+0x1e>
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <Uart_sendPacket+0x40>
    159a:	86 e0       	ldi	r24, 0x06	; 6
    159c:	01 c0       	rjmp	.+2      	; 0x15a0 <Uart_sendPacket+0x40>
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	1f 91       	pop	r17
    15a6:	0f 91       	pop	r16
    15a8:	ff 90       	pop	r15
    15aa:	ef 90       	pop	r14
    15ac:	08 95       	ret

000015ae <Uart_EnableNotification_RXC>:
    15ae:	9c 01       	movw	r18, r24
    15b0:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <u8_Uart_Status>
    15b4:	99 23       	and	r25, r25
    15b6:	61 f0       	breq	.+24     	; 0x15d0 <Uart_EnableNotification_RXC+0x22>
    15b8:	21 15       	cp	r18, r1
    15ba:	31 05       	cpc	r19, r1
    15bc:	59 f0       	breq	.+22     	; 0x15d4 <Uart_EnableNotification_RXC+0x26>
    15be:	8a b1       	in	r24, 0x0a	; 10
    15c0:	80 68       	ori	r24, 0x80	; 128
    15c2:	8a b9       	out	0x0a, r24	; 10
    15c4:	30 93 4b 03 	sts	0x034B, r19	; 0x80034b <Uart_RXC_CallBackPtr+0x1>
    15c8:	20 93 4a 03 	sts	0x034A, r18	; 0x80034a <Uart_RXC_CallBackPtr>
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	08 95       	ret
    15d0:	86 e0       	ldi	r24, 0x06	; 6
    15d2:	08 95       	ret
    15d4:	85 e0       	ldi	r24, 0x05	; 5
    15d6:	08 95       	ret

000015d8 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    15d8:	8c b1       	in	r24, 0x0c	; 12
}
    15da:	08 95       	ret

000015dc <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    15dc:	1f 92       	push	r1
    15de:	0f 92       	push	r0
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	0f 92       	push	r0
    15e4:	11 24       	eor	r1, r1
    15e6:	2f 93       	push	r18
    15e8:	3f 93       	push	r19
    15ea:	4f 93       	push	r20
    15ec:	5f 93       	push	r21
    15ee:	6f 93       	push	r22
    15f0:	7f 93       	push	r23
    15f2:	8f 93       	push	r24
    15f4:	9f 93       	push	r25
    15f6:	af 93       	push	r26
    15f8:	bf 93       	push	r27
    15fa:	ef 93       	push	r30
    15fc:	ff 93       	push	r31
    15fe:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <Uart_TXC_CallBackPtr>
    1602:	f0 91 4d 03 	lds	r31, 0x034D	; 0x80034d <Uart_TXC_CallBackPtr+0x1>
    1606:	09 95       	icall
    1608:	ff 91       	pop	r31
    160a:	ef 91       	pop	r30
    160c:	bf 91       	pop	r27
    160e:	af 91       	pop	r26
    1610:	9f 91       	pop	r25
    1612:	8f 91       	pop	r24
    1614:	7f 91       	pop	r23
    1616:	6f 91       	pop	r22
    1618:	5f 91       	pop	r21
    161a:	4f 91       	pop	r20
    161c:	3f 91       	pop	r19
    161e:	2f 91       	pop	r18
    1620:	0f 90       	pop	r0
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	0f 90       	pop	r0
    1626:	1f 90       	pop	r1
    1628:	18 95       	reti

0000162a <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    162a:	1f 92       	push	r1
    162c:	0f 92       	push	r0
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	0f 92       	push	r0
    1632:	11 24       	eor	r1, r1
    1634:	2f 93       	push	r18
    1636:	3f 93       	push	r19
    1638:	4f 93       	push	r20
    163a:	5f 93       	push	r21
    163c:	6f 93       	push	r22
    163e:	7f 93       	push	r23
    1640:	8f 93       	push	r24
    1642:	9f 93       	push	r25
    1644:	af 93       	push	r26
    1646:	bf 93       	push	r27
    1648:	ef 93       	push	r30
    164a:	ff 93       	push	r31
    164c:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <Uart_RXC_CallBackPtr>
    1650:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <Uart_RXC_CallBackPtr+0x1>
    1654:	09 95       	icall
    1656:	ff 91       	pop	r31
    1658:	ef 91       	pop	r30
    165a:	bf 91       	pop	r27
    165c:	af 91       	pop	r26
    165e:	9f 91       	pop	r25
    1660:	8f 91       	pop	r24
    1662:	7f 91       	pop	r23
    1664:	6f 91       	pop	r22
    1666:	5f 91       	pop	r21
    1668:	4f 91       	pop	r20
    166a:	3f 91       	pop	r19
    166c:	2f 91       	pop	r18
    166e:	0f 90       	pop	r0
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	0f 90       	pop	r0
    1674:	1f 90       	pop	r1
    1676:	18 95       	reti

00001678 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    1678:	1f 92       	push	r1
    167a:	0f 92       	push	r0
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	0f 92       	push	r0
    1680:	11 24       	eor	r1, r1
    1682:	2f 93       	push	r18
    1684:	3f 93       	push	r19
    1686:	4f 93       	push	r20
    1688:	5f 93       	push	r21
    168a:	6f 93       	push	r22
    168c:	7f 93       	push	r23
    168e:	8f 93       	push	r24
    1690:	9f 93       	push	r25
    1692:	af 93       	push	r26
    1694:	bf 93       	push	r27
    1696:	ef 93       	push	r30
    1698:	ff 93       	push	r31
    169a:	e0 91 48 03 	lds	r30, 0x0348	; 0x800348 <Uart_UDRE_CallBackPtr>
    169e:	f0 91 49 03 	lds	r31, 0x0349	; 0x800349 <Uart_UDRE_CallBackPtr+0x1>
    16a2:	09 95       	icall
    16a4:	ff 91       	pop	r31
    16a6:	ef 91       	pop	r30
    16a8:	bf 91       	pop	r27
    16aa:	af 91       	pop	r26
    16ac:	9f 91       	pop	r25
    16ae:	8f 91       	pop	r24
    16b0:	7f 91       	pop	r23
    16b2:	6f 91       	pop	r22
    16b4:	5f 91       	pop	r21
    16b6:	4f 91       	pop	r20
    16b8:	3f 91       	pop	r19
    16ba:	2f 91       	pop	r18
    16bc:	0f 90       	pop	r0
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	0f 90       	pop	r0
    16c2:	1f 90       	pop	r1
    16c4:	18 95       	reti

000016c6 <__adddi3_s8>:
    16c6:	00 24       	eor	r0, r0
    16c8:	a7 fd       	sbrc	r26, 7
    16ca:	00 94       	com	r0
    16cc:	2a 0f       	add	r18, r26
    16ce:	30 1d       	adc	r19, r0
    16d0:	40 1d       	adc	r20, r0
    16d2:	50 1d       	adc	r21, r0
    16d4:	60 1d       	adc	r22, r0
    16d6:	70 1d       	adc	r23, r0
    16d8:	80 1d       	adc	r24, r0
    16da:	90 1d       	adc	r25, r0
    16dc:	08 95       	ret

000016de <__cmpdi2>:
    16de:	2a 15       	cp	r18, r10
    16e0:	3b 05       	cpc	r19, r11
    16e2:	4c 05       	cpc	r20, r12
    16e4:	5d 05       	cpc	r21, r13
    16e6:	6e 05       	cpc	r22, r14
    16e8:	7f 05       	cpc	r23, r15
    16ea:	80 07       	cpc	r24, r16
    16ec:	91 07       	cpc	r25, r17
    16ee:	08 95       	ret

000016f0 <_exit>:
    16f0:	f8 94       	cli

000016f2 <__stop_program>:
    16f2:	ff cf       	rjmp	.-2      	; 0x16f2 <__stop_program>
