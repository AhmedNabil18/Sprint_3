
Card.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d2  00800060  00000e38  00000ecc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000125  00800132  00800132  00000f9e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b44  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f17  00000000  00000000  00003e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b5a  00000000  00000000  00004d67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a10  00000000  00000000  000068c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012fb  00000000  00000000  000072d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ea1  00000000  00000000  000085cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000b470  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__vector_12>
  34:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__vector_13>
  38:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__vector_14>
  3c:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 33       	cpi	r26, 0x32	; 50
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a2 e3       	ldi	r26, 0x32	; 50
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 35       	cpi	r26, 0x57	; 87
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 66 03 	call	0x6cc	; 0x6cc <main>
  8a:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_init(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
  9c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a0:	84 30       	cpi	r24, 0x04	; 4
  a2:	09 f4       	brne	.+2      	; 0xa6 <App_init+0x14>
  a4:	48 c0       	rjmp	.+144    	; 0x136 <App_init+0xa4>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
  a6:	0e 94 22 02 	call	0x444	; 0x444 <Eeprom_24_init>
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	c9 f5       	brne	.+114    	; 0x120 <App_init+0x8e>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
  ae:	0e 94 12 03 	call	0x624	; 0x624 <Terminal_init>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	b9 f5       	brne	.+110    	; 0x124 <App_init+0x92>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
  b6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <Spi_init>
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	a9 f5       	brne	.+106    	; 0x128 <App_init+0x96>
		return APP_STATUS_ERROR_NOK;
	/**************************/
	/* Only for Testing */
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
  be:	6f ef       	ldi	r22, 0xFF	; 255
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 31 02 	call	0x462	; 0x462 <Eeprom_24_writeByte>
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	81 f5       	brne	.+96     	; 0x12c <App_init+0x9a>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
  cc:	2a e0       	ldi	r18, 0x0A	; 10
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 69 03 	call	0x6d2	; 0x6d2 <Delay_ms>
	/**************************/
	if(Terminal_Out((uint8_t*)"CARD Terminal\r") != TERMINAL_STATUS_ERROR_OK)
  e0:	85 e6       	ldi	r24, 0x65	; 101
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 27 03 	call	0x64e	; 0x64e <Terminal_Out>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	11 f5       	brne	.+68     	; 0x130 <App_init+0x9e>
		return APP_STATUS_ERROR_NOK;
	uint8_t u8_initData = 0;
  ec:	19 82       	std	Y+1, r1	; 0x01
	/* Check if the card was previously registered and has its data in the eeprom */
	if(Eeprom_24_readByte(CARD_INIT_ADDRESS, &u8_initData) != EEPROM_24_STATUS_ERROR_OK)
  ee:	be 01       	movw	r22, r28
  f0:	6f 5f       	subi	r22, 0xFF	; 255
  f2:	7f 4f       	sbci	r23, 0xFF	; 255
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <Eeprom_24_readByte>
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	d1 f4       	brne	.+52     	; 0x134 <App_init+0xa2>
		return APP_STATUS_ERROR_NOK;
		
	if(u8_initData != CARD_INITIALIZED)
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	8a 3a       	cpi	r24, 0xAA	; 170
 104:	19 f0       	breq	.+6      	; 0x10c <App_init+0x7a>
	{
		gu8_CardMode = CARD_MODE_ADMIN;
 106:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <gu8_CardMode>
 10a:	03 c0       	rjmp	.+6      	; 0x112 <App_init+0x80>
	}else
	{
		gu8_CardMode = CARD_MODE_USER;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <gu8_CardMode>
	}
	
	DIO_PORTA_DIR=0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	8a bb       	out	0x1a, r24	; 26
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return APP_STATUS_ERROR_OK;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0b c0       	rjmp	.+22     	; 0x136 <App_init+0xa4>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	09 c0       	rjmp	.+18     	; 0x136 <App_init+0xa4>
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	07 c0       	rjmp	.+14     	; 0x136 <App_init+0xa4>
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	05 c0       	rjmp	.+10     	; 0x136 <App_init+0xa4>
	/**************************/
	/* Only for Testing */
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	03 c0       	rjmp	.+6      	; 0x136 <App_init+0xa4>
	Delay_ms(10);
	/**************************/
	if(Terminal_Out((uint8_t*)"CARD Terminal\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	01 c0       	rjmp	.+2      	; 0x136 <App_init+0xa4>
	uint8_t u8_initData = 0;
	/* Check if the card was previously registered and has its data in the eeprom */
	if(Eeprom_24_readByte(CARD_INIT_ADDRESS, &u8_initData) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
 134:	80 e0       	ldi	r24, 0x00	; 0
	
	DIO_PORTA_DIR=0xFF;
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
 136:	0f 90       	pop	r0
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	cf 5f       	subi	r28, 0xFF	; 255
 14c:	d1 09       	sbc	r29, r1
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	f8 94       	cli
 152:	de bf       	out	0x3e, r29	; 62
 154:	0f be       	out	0x3f, r0	; 63
 156:	cd bf       	out	0x3d, r28	; 61
 158:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	fc 01       	movw	r30, r24
 162:	11 92       	st	Z+, r1
 164:	2a 95       	dec	r18
 166:	e9 f7       	brne	.-6      	; 0x162 <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
 168:	0e 94 42 03 	call	0x684	; 0x684 <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
 16c:	85 30       	cpi	r24, 0x05	; 5
 16e:	39 f4       	brne	.+14     	; 0x17e <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
 170:	b8 01       	movw	r22, r16
 172:	ce 01       	movw	r24, r28
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	0e 94 14 06 	call	0xc28	; 0xc28 <stringCopy>
		return APP_STATUS_ERROR_OK;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	05 c0       	rjmp	.+10     	; 0x188 <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	11 f0       	breq	.+4      	; 0x186 <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	01 c0       	rjmp	.+2      	; 0x188 <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
 186:	86 e0       	ldi	r24, 0x06	; 6
}
 188:	c1 50       	subi	r28, 0x01	; 1
 18a:	df 4f       	sbci	r29, 0xFF	; 255
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	08 95       	ret

000001a0 <AppADMIN_getCardName>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD Holder Name by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card holder's name.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardName(uint8_t* pu8_data)
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card Holder Name: ") != TERMINAL_STATUS_ERROR_OK)
 1a6:	84 e7       	ldi	r24, 0x74	; 116
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 27 03 	call	0x64e	; 0x64e <Terminal_Out>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	a9 f4       	brne	.+42     	; 0x1dc <AppADMIN_getCardName+0x3c>
		return APP_STATUS_ERROR_NOK;
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
 1b2:	ce 01       	movw	r24, r28
 1b4:	0e 94 9f 00 	call	0x13e	; 0x13e <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	29 f0       	breq	.+10     	; 0x1c6 <AppADMIN_getCardName+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
 1bc:	11 f0       	breq	.+4      	; 0x1c2 <AppADMIN_getCardName+0x22>
 1be:	86 30       	cpi	r24, 0x06	; 6
 1c0:	79 f4       	brne	.+30     	; 0x1e0 <AppADMIN_getCardName+0x40>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
 1c2:	86 30       	cpi	r24, 0x06	; 6
 1c4:	b1 f3       	breq	.-20     	; 0x1b2 <AppADMIN_getCardName+0x12>
		
		
		if (pu8_data[MAX_NAME_LENGTH] == '\0')
 1c6:	89 85       	ldd	r24, Y+9	; 0x09
 1c8:	88 23       	and	r24, r24
 1ca:	61 f0       	breq	.+24     	; 0x1e4 <AppADMIN_getCardName+0x44>
		break;
		if(Terminal_Out((uint8_t*)"Invalid Name, Only 9 characters") != TERMINAL_STATUS_ERROR_OK)
 1cc:	87 e8       	ldi	r24, 0x87	; 135
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 27 03 	call	0x64e	; 0x64e <Terminal_Out>
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	39 f3       	breq	.-50     	; 0x1a6 <AppADMIN_getCardName+0x6>
			return APP_STATUS_ERROR_NOK;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <AppADMIN_getCardName+0x46>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card Holder Name: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <AppADMIN_getCardName+0x46>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <AppADMIN_getCardName+0x46>
		if (pu8_data[MAX_NAME_LENGTH] == '\0')
		break;
		if(Terminal_Out((uint8_t*)"Invalid Name, Only 9 characters") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <AppADMIN_getCardPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardPAN(uint8_t* pu8_data)
{
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card PAN: ") != TERMINAL_STATUS_ERROR_OK)
 1f2:	87 ea       	ldi	r24, 0xA7	; 167
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 27 03 	call	0x64e	; 0x64e <Terminal_Out>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	a9 f4       	brne	.+42     	; 0x228 <AppADMIN_getCardPAN+0x3c>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
 1fe:	ce 01       	movw	r24, r28
 200:	0e 94 9f 00 	call	0x13e	; 0x13e <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	29 f0       	breq	.+10     	; 0x212 <AppADMIN_getCardPAN+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
 208:	11 f0       	breq	.+4      	; 0x20e <AppADMIN_getCardPAN+0x22>
 20a:	86 30       	cpi	r24, 0x06	; 6
 20c:	79 f4       	brne	.+30     	; 0x22c <AppADMIN_getCardPAN+0x40>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
 20e:	86 30       	cpi	r24, 0x06	; 6
 210:	b1 f3       	breq	.-20     	; 0x1fe <AppADMIN_getCardPAN+0x12>
		
		if (pu8_data[9] == '\0')
 212:	89 85       	ldd	r24, Y+9	; 0x09
 214:	88 23       	and	r24, r24
 216:	61 f0       	breq	.+24     	; 0x230 <AppADMIN_getCardPAN+0x44>
		break;
		if(Terminal_Out((uint8_t*)"Invalid PAN, Only 9 characters") != TERMINAL_STATUS_ERROR_OK)
 218:	82 eb       	ldi	r24, 0xB2	; 178
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 27 03 	call	0x64e	; 0x64e <Terminal_Out>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	39 f3       	breq	.-50     	; 0x1f2 <AppADMIN_getCardPAN+0x6>
		return APP_STATUS_ERROR_NOK;
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	05 c0       	rjmp	.+10     	; 0x232 <AppADMIN_getCardPAN+0x46>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card PAN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	03 c0       	rjmp	.+6      	; 0x232 <AppADMIN_getCardPAN+0x46>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	01 c0       	rjmp	.+2      	; 0x232 <AppADMIN_getCardPAN+0x46>
		if (pu8_data[9] == '\0')
		break;
		if(Terminal_Out((uint8_t*)"Invalid PAN, Only 9 characters") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
 230:	81 e0       	ldi	r24, 0x01	; 1
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <AppADMIN_getCardPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardPIN(uint8_t* pu8_data)
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	Terminal_enablePasswordMode();
 23e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Terminal_enablePasswordMode>
	do
	{
		if(Terminal_Out((uint8_t*)"Card PIN: ") != TERMINAL_STATUS_ERROR_OK)
 242:	81 ed       	ldi	r24, 0xD1	; 209
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 27 03 	call	0x64e	; 0x64e <Terminal_Out>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	c1 f4       	brne	.+48     	; 0x27e <AppADMIN_getCardPIN+0x46>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
 24e:	ce 01       	movw	r24, r28
 250:	0e 94 9f 00 	call	0x13e	; 0x13e <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	29 f0       	breq	.+10     	; 0x262 <AppADMIN_getCardPIN+0x2a>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
 258:	11 f0       	breq	.+4      	; 0x25e <AppADMIN_getCardPIN+0x26>
 25a:	86 30       	cpi	r24, 0x06	; 6
 25c:	91 f4       	brne	.+36     	; 0x282 <AppADMIN_getCardPIN+0x4a>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
 25e:	86 30       	cpi	r24, 0x06	; 6
 260:	b1 f3       	breq	.-20     	; 0x24e <AppADMIN_getCardPIN+0x16>
		
		if (pu8_data[4] == '\0')
 262:	8c 81       	ldd	r24, Y+4	; 0x04
 264:	88 23       	and	r24, r24
 266:	39 f0       	breq	.+14     	; 0x276 <AppADMIN_getCardPIN+0x3e>
		break;
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters") != TERMINAL_STATUS_ERROR_OK)
 268:	8c ed       	ldi	r24, 0xDC	; 220
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 27 03 	call	0x64e	; 0x64e <Terminal_Out>
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	39 f3       	breq	.-50     	; 0x242 <AppADMIN_getCardPIN+0xa>
 274:	08 c0       	rjmp	.+16     	; 0x286 <AppADMIN_getCardPIN+0x4e>
		return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
 276:	0e 94 62 03 	call	0x6c4	; 0x6c4 <Terminal_disablePasswordMode>
	return APP_STATUS_ERROR_OK;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	05 c0       	rjmp	.+10     	; 0x288 <AppADMIN_getCardPIN+0x50>
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"Card PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	03 c0       	rjmp	.+6      	; 0x288 <AppADMIN_getCardPIN+0x50>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	01 c0       	rjmp	.+2      	; 0x288 <AppADMIN_getCardPIN+0x50>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if (pu8_data[4] == '\0')
		break;
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
 286:	80 e0       	ldi	r24, 0x00	; 0
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_ERROR_OK;
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <AppADMIN_saveCardData>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the EEPROM
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveCardData(strCardData_t* pstr_CardData)
{
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	ec 01       	movw	r28, r24
	if(Eeprom_24_writePage(CARD_NAME_PAGE_NUM, (pstr_CardData->au8_cardHolderName)) != EEPROM_24_STATUS_ERROR_OK)
 294:	bc 01       	movw	r22, r24
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	0e 94 98 02 	call	0x530	; 0x530 <Eeprom_24_writePage>
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	b9 f5       	brne	.+110    	; 0x30e <AppADMIN_saveCardData+0x80>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
 2a0:	2a e0       	ldi	r18, 0x0A	; 10
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 69 03 	call	0x6d2	; 0x6d2 <Delay_ms>
	if(Eeprom_24_writePage(CARD_PAN_PAGE_NUM, (pstr_CardData->au8_primaryAccountNumber)) != EEPROM_24_STATUS_ERROR_OK)
 2b4:	be 01       	movw	r22, r28
 2b6:	66 5f       	subi	r22, 0xF6	; 246
 2b8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	0e 94 98 02 	call	0x530	; 0x530 <Eeprom_24_writePage>
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	39 f5       	brne	.+78     	; 0x312 <AppADMIN_saveCardData+0x84>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
 2c4:	2a e0       	ldi	r18, 0x0A	; 10
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 69 03 	call	0x6d2	; 0x6d2 <Delay_ms>
	if(Eeprom_24_writePage(CARD_PIN_PAGE_NUM, (pstr_CardData->au8_pinNum)) != EEPROM_24_STATUS_ERROR_OK)
 2d8:	be 01       	movw	r22, r28
 2da:	6c 5e       	subi	r22, 0xEC	; 236
 2dc:	7f 4f       	sbci	r23, 0xFF	; 255
 2de:	84 e0       	ldi	r24, 0x04	; 4
 2e0:	0e 94 98 02 	call	0x530	; 0x530 <Eeprom_24_writePage>
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	b9 f4       	brne	.+46     	; 0x316 <AppADMIN_saveCardData+0x88>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
 2e8:	2a e0       	ldi	r18, 0x0A	; 10
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 69 03 	call	0x6d2	; 0x6d2 <Delay_ms>
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, CARD_INITIALIZED) != EEPROM_24_STATUS_ERROR_OK)
 2fc:	6a ea       	ldi	r22, 0xAA	; 170
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 31 02 	call	0x462	; 0x462 <Eeprom_24_writeByte>
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	41 f0       	breq	.+16     	; 0x31a <AppADMIN_saveCardData+0x8c>
		return APP_STATUS_ERROR_NOK;
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	07 c0       	rjmp	.+14     	; 0x31c <AppADMIN_saveCardData+0x8e>
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveCardData(strCardData_t* pstr_CardData)
{
	if(Eeprom_24_writePage(CARD_NAME_PAGE_NUM, (pstr_CardData->au8_cardHolderName)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	05 c0       	rjmp	.+10     	; 0x31c <AppADMIN_saveCardData+0x8e>
	Delay_ms(10);
	if(Eeprom_24_writePage(CARD_PAN_PAGE_NUM, (pstr_CardData->au8_primaryAccountNumber)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	03 c0       	rjmp	.+6      	; 0x31c <AppADMIN_saveCardData+0x8e>
	Delay_ms(10);
	if(Eeprom_24_writePage(CARD_PIN_PAGE_NUM, (pstr_CardData->au8_pinNum)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	01 c0       	rjmp	.+2      	; 0x31c <AppADMIN_saveCardData+0x8e>
	Delay_ms(10);
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, CARD_INITIALIZED) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	69 97       	sbiw	r28, 0x19	; 25
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
 336:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 33a:	84 30       	cpi	r24, 0x04	; 4
 33c:	09 f0       	breq	.+2      	; 0x340 <App_update+0x1e>
 33e:	5c c0       	rjmp	.+184    	; 0x3f8 <App_update+0xd6>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(gu8_CardMode == CARD_MODE_ADMIN)
 340:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <gu8_CardMode>
 344:	81 11       	cpse	r24, r1
 346:	4c c0       	rjmp	.+152    	; 0x3e0 <App_update+0xbe>
	{ /* PROGRAMMING MODE */
		if(Terminal_Out((uint8_t*)"Programming Mode\rEnter the Following Data\r") != TERMINAL_STATUS_ERROR_OK)
 348:	8b ef       	ldi	r24, 0xFB	; 251
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 27 03 	call	0x64e	; 0x64e <Terminal_Out>
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	09 f0       	breq	.+2      	; 0x356 <App_update+0x34>
 354:	43 c0       	rjmp	.+134    	; 0x3dc <App_update+0xba>
			return APP_STATUS_ERROR_NOK;
		uint8_t au8_tempCardHolderName[10]={0};
 356:	2a e0       	ldi	r18, 0x0A	; 10
 358:	ce 01       	movw	r24, r28
 35a:	0b 96       	adiw	r24, 0x0b	; 11
 35c:	dc 01       	movw	r26, r24
 35e:	e2 2f       	mov	r30, r18
 360:	1d 92       	st	X+, r1
 362:	ea 95       	dec	r30
 364:	e9 f7       	brne	.-6      	; 0x360 <App_update+0x3e>
		uint8_t au8_tempPAN[10]={0};
 366:	fe 01       	movw	r30, r28
 368:	31 96       	adiw	r30, 0x01	; 1
 36a:	df 01       	movw	r26, r30
 36c:	1d 92       	st	X+, r1
 36e:	2a 95       	dec	r18
 370:	e9 f7       	brne	.-6      	; 0x36c <App_update+0x4a>
		uint8_t au8_tempPinNum[5]={0};
 372:	74 96       	adiw	r30, 0x14	; 20
 374:	25 e0       	ldi	r18, 0x05	; 5
 376:	df 01       	movw	r26, r30
 378:	1d 92       	st	X+, r1
 37a:	2a 95       	dec	r18
 37c:	e9 f7       	brne	.-6      	; 0x378 <App_update+0x56>
		
		if(AppADMIN_getCardName(au8_tempCardHolderName) != APP_STATUS_ERROR_OK)
 37e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <AppADMIN_getCardName>
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	59 f5       	brne	.+86     	; 0x3dc <App_update+0xba>
			return APP_STATUS_ERROR_NOK;
		
		if(AppADMIN_getCardPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
 386:	ce 01       	movw	r24, r28
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <AppADMIN_getCardPAN>
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	29 f5       	brne	.+74     	; 0x3dc <App_update+0xba>
		return APP_STATUS_ERROR_NOK;
		
		if(AppADMIN_getCardPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
 392:	ce 01       	movw	r24, r28
 394:	45 96       	adiw	r24, 0x15	; 21
 396:	0e 94 1c 01 	call	0x238	; 0x238 <AppADMIN_getCardPIN>
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	f9 f4       	brne	.+62     	; 0x3dc <App_update+0xba>
			return APP_STATUS_ERROR_NOK;
		
		stringCopy(au8_tempCardHolderName, gstr_userCardData.au8_cardHolderName);
 39e:	62 e3       	ldi	r22, 0x32	; 50
 3a0:	71 e0       	ldi	r23, 0x01	; 1
 3a2:	ce 01       	movw	r24, r28
 3a4:	0b 96       	adiw	r24, 0x0b	; 11
 3a6:	0e 94 14 06 	call	0xc28	; 0xc28 <stringCopy>
		stringCopy(au8_tempPAN, gstr_userCardData.au8_primaryAccountNumber);
 3aa:	6c e3       	ldi	r22, 0x3C	; 60
 3ac:	71 e0       	ldi	r23, 0x01	; 1
 3ae:	ce 01       	movw	r24, r28
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	0e 94 14 06 	call	0xc28	; 0xc28 <stringCopy>
		stringCopy(au8_tempPinNum, gstr_userCardData.au8_pinNum);
 3b6:	66 e4       	ldi	r22, 0x46	; 70
 3b8:	71 e0       	ldi	r23, 0x01	; 1
 3ba:	ce 01       	movw	r24, r28
 3bc:	45 96       	adiw	r24, 0x15	; 21
 3be:	0e 94 14 06 	call	0xc28	; 0xc28 <stringCopy>
		
		AppADMIN_saveCardData(&gstr_userCardData);
 3c2:	82 e3       	ldi	r24, 0x32	; 50
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 47 01 	call	0x28e	; 0x28e <AppADMIN_saveCardData>
// 		if(Eeprom_24_writePage(CARD_PIN_PAGE_NUM, (gstr_userCardData.au8_pinNum)) != EEPROM_24_STATUS_ERROR_OK)
// 			return APP_STATUS_ERROR_NOK;
// 		Delay_ms(10);
// 		if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, CARD_INITIALIZED) != EEPROM_24_STATUS_ERROR_OK)
// 			return APP_STATUS_ERROR_NOK;	
		gu8_CardMode = CARD_MODE_USER;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <gu8_CardMode>
		if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
 3d0:	86 e2       	ldi	r24, 0x26	; 38
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	0e 94 27 03 	call	0x64e	; 0x64e <Terminal_Out>
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	11 f0       	breq	.+4      	; 0x3e0 <App_update+0xbe>
/*								Function Implementation								  */
/**************************************************************************************/
	if(gu8_CardMode == CARD_MODE_ADMIN)
	{ /* PROGRAMMING MODE */
		if(Terminal_Out((uint8_t*)"Programming Mode\rEnter the Following Data\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0d c0       	rjmp	.+26     	; 0x3fa <App_update+0xd8>
	}else
	{
		
	}
	
	Delay_ms(155);
 3e0:	2b e9       	ldi	r18, 0x9B	; 155
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	50 e0       	ldi	r21, 0x00	; 0
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 69 03 	call	0x6d2	; 0x6d2 <Delay_ms>
	return APP_STATUS_ERROR_OK;
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	01 c0       	rjmp	.+2      	; 0x3fa <App_update+0xd8>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
 3f8:	85 e0       	ldi	r24, 0x05	; 5
		
	}
	
	Delay_ms(155);
	return APP_STATUS_ERROR_OK;
}
 3fa:	69 96       	adiw	r28, 0x19	; 25
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	f8 94       	cli
 400:	de bf       	out	0x3e, r29	; 62
 402:	0f be       	out	0x3f, r0	; 63
 404:	cd bf       	out	0x3d, r28	; 61
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
 40c:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	39 f4       	brne	.+14     	; 0x422 <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
 414:	8f b7       	in	r24, 0x3f	; 63
 416:	80 68       	ori	r24, 0x80	; 128
 418:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
 41a:	0e 94 91 01 	call	0x322	; 0x322 <App_update>
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	e1 f3       	breq	.-8      	; 0x41a <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
			
	}
}
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	08 95       	ret

00000426 <EEPROM_getAddresses>:
* Description: Function to Calculate the slave address byte and the word address byte from the location
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
 426:	9a 01       	movw	r18, r20
 428:	22 27       	eor	r18, r18
 42a:	37 70       	andi	r19, 0x07	; 7
 42c:	22 0f       	add	r18, r18
 42e:	23 2f       	mov	r18, r19
 430:	22 1f       	adc	r18, r18
 432:	33 0b       	sbc	r19, r19
 434:	31 95       	neg	r19
 436:	20 65       	ori	r18, 0x50	; 80
 438:	fc 01       	movw	r30, r24
 43a:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
 43c:	fb 01       	movw	r30, r22
 43e:	40 83       	st	Z, r20
	return EEPROM_24_STATUS_ERROR_OK;
}
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	08 95       	ret

00000444 <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
 444:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_eepromModuleState>
 448:	83 30       	cpi	r24, 0x03	; 3
 44a:	51 f0       	breq	.+20     	; 0x460 <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
 44c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
 450:	85 30       	cpi	r24, 0x05	; 5
 452:	29 f0       	breq	.+10     	; 0x45e <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
 454:	83 e0       	ldi	r24, 0x03	; 3
 456:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
 45e:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
 460:	08 95       	ret

00000462 <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	00 d0       	rcall	.+0      	; 0x46a <Eeprom_24_writeByte+0x8>
 46a:	1f 92       	push	r1
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
 470:	ac 01       	movw	r20, r24
 472:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
 474:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
 478:	93 30       	cpi	r25, 0x03	; 3
 47a:	c9 f4       	brne	.+50     	; 0x4ae <Eeprom_24_writeByte+0x4c>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
 47c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
 47e:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
 480:	be 01       	movw	r22, r28
 482:	6e 5f       	subi	r22, 0xFE	; 254
 484:	7f 4f       	sbci	r23, 0xFF	; 255
 486:	ce 01       	movw	r24, r28
 488:	01 96       	adiw	r24, 0x01	; 1
 48a:	0e 94 13 02 	call	0x426	; 0x426 <EEPROM_getAddresses>
 48e:	18 2f       	mov	r17, r24
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	79 f4       	brne	.+30     	; 0x4b2 <Eeprom_24_writeByte+0x50>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
 494:	21 e0       	ldi	r18, 0x01	; 1
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	ae 01       	movw	r20, r28
 49a:	4d 5f       	subi	r20, 0xFD	; 253
 49c:	5f 4f       	sbci	r21, 0xFF	; 255
 49e:	6a 81       	ldd	r22, Y+2	; 0x02
 4a0:	89 81       	ldd	r24, Y+1	; 0x01
 4a2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <I2C_MasterSendToLocation>
 4a6:	81 30       	cpi	r24, 0x01	; 1
 4a8:	29 f0       	breq	.+10     	; 0x4b4 <Eeprom_24_writeByte+0x52>
		return EEPROM_24_STATUS_ERROR_NOK;
 4aa:	10 e0       	ldi	r17, 0x00	; 0
 4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <Eeprom_24_writeByte+0x52>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
 4ae:	12 e0       	ldi	r17, 0x02	; 2
 4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <Eeprom_24_writeByte+0x52>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
 4b2:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
 4b4:	81 2f       	mov	r24, r17
 4b6:	0f 90       	pop	r0
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	1f 91       	pop	r17
 4c2:	08 95       	ret

000004c4 <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
 4c4:	ef 92       	push	r14
 4c6:	ff 92       	push	r15
 4c8:	1f 93       	push	r17
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	00 d0       	rcall	.+0      	; 0x4d0 <Eeprom_24_readByte+0xc>
 4d0:	cd b7       	in	r28, 0x3d	; 61
 4d2:	de b7       	in	r29, 0x3e	; 62
 4d4:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
 4d6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
 4da:	93 30       	cpi	r25, 0x03	; 3
 4dc:	d9 f4       	brne	.+54     	; 0x514 <Eeprom_24_readByte+0x50>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
 4de:	61 15       	cp	r22, r1
 4e0:	71 05       	cpc	r23, r1
 4e2:	d1 f0       	breq	.+52     	; 0x518 <Eeprom_24_readByte+0x54>
 4e4:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
 4e6:	19 82       	std	Y+1, r1	; 0x01
	uint8_t word_addr=0;
 4e8:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
 4ea:	be 01       	movw	r22, r28
 4ec:	6e 5f       	subi	r22, 0xFE	; 254
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	ce 01       	movw	r24, r28
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	0e 94 13 02 	call	0x426	; 0x426 <EEPROM_getAddresses>
 4f8:	18 2f       	mov	r17, r24
 4fa:	81 30       	cpi	r24, 0x01	; 1
 4fc:	79 f4       	brne	.+30     	; 0x51c <Eeprom_24_readByte+0x58>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
 4fe:	21 e0       	ldi	r18, 0x01	; 1
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	a7 01       	movw	r20, r14
 504:	6a 81       	ldd	r22, Y+2	; 0x02
 506:	89 81       	ldd	r24, Y+1	; 0x01
 508:	0e 94 90 05 	call	0xb20	; 0xb20 <I2C_MasterReceiveFromLocation>
 50c:	81 30       	cpi	r24, 0x01	; 1
 50e:	39 f0       	breq	.+14     	; 0x51e <Eeprom_24_readByte+0x5a>
		return EEPROM_24_STATUS_ERROR_NOK;
 510:	10 e0       	ldi	r17, 0x00	; 0
 512:	05 c0       	rjmp	.+10     	; 0x51e <Eeprom_24_readByte+0x5a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
 514:	12 e0       	ldi	r17, 0x02	; 2
 516:	03 c0       	rjmp	.+6      	; 0x51e <Eeprom_24_readByte+0x5a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
 518:	14 e0       	ldi	r17, 0x04	; 4
 51a:	01 c0       	rjmp	.+2      	; 0x51e <Eeprom_24_readByte+0x5a>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
	uint8_t word_addr=0;
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
 51c:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
 51e:	81 2f       	mov	r24, r17
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	ff 90       	pop	r15
 52c:	ef 90       	pop	r14
 52e:	08 95       	ret

00000530 <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
 530:	ef 92       	push	r14
 532:	ff 92       	push	r15
 534:	1f 93       	push	r17
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	00 d0       	rcall	.+0      	; 0x53c <Eeprom_24_writePage+0xc>
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
 540:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
 544:	93 30       	cpi	r25, 0x03	; 3
 546:	f9 f4       	brne	.+62     	; 0x586 <Eeprom_24_writePage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
 548:	61 15       	cp	r22, r1
 54a:	71 05       	cpc	r23, r1
 54c:	f1 f0       	breq	.+60     	; 0x58a <Eeprom_24_writePage+0x5a>
 54e:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
 550:	90 e1       	ldi	r25, 0x10	; 16
 552:	89 9f       	mul	r24, r25
 554:	a0 01       	movw	r20, r0
 556:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
 558:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
 55a:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
 55c:	be 01       	movw	r22, r28
 55e:	6e 5f       	subi	r22, 0xFE	; 254
 560:	7f 4f       	sbci	r23, 0xFF	; 255
 562:	ce 01       	movw	r24, r28
 564:	01 96       	adiw	r24, 0x01	; 1
 566:	0e 94 13 02 	call	0x426	; 0x426 <EEPROM_getAddresses>
 56a:	18 2f       	mov	r17, r24
 56c:	81 30       	cpi	r24, 0x01	; 1
 56e:	79 f4       	brne	.+30     	; 0x58e <Eeprom_24_writePage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
 570:	20 e1       	ldi	r18, 0x10	; 16
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	a7 01       	movw	r20, r14
 576:	6a 81       	ldd	r22, Y+2	; 0x02
 578:	89 81       	ldd	r24, Y+1	; 0x01
 57a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <I2C_MasterSendToLocation>
 57e:	81 30       	cpi	r24, 0x01	; 1
 580:	39 f0       	breq	.+14     	; 0x590 <Eeprom_24_writePage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
 582:	10 e0       	ldi	r17, 0x00	; 0
 584:	05 c0       	rjmp	.+10     	; 0x590 <Eeprom_24_writePage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
 586:	12 e0       	ldi	r17, 0x02	; 2
 588:	03 c0       	rjmp	.+6      	; 0x590 <Eeprom_24_writePage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
 58a:	14 e0       	ldi	r17, 0x04	; 4
 58c:	01 c0       	rjmp	.+2      	; 0x590 <Eeprom_24_writePage+0x60>
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
 58e:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
 590:	81 2f       	mov	r24, r17
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	ff 90       	pop	r15
 59e:	ef 90       	pop	r14
 5a0:	08 95       	ret

000005a2 <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
 5a6:	c0 91 4d 01 	lds	r28, 0x014D	; 0x80014d <gu8_counter>
 5aa:	d0 e0       	ldi	r29, 0x00	; 0
 5ac:	0e 94 82 06 	call	0xd04	; 0xd04 <Uart_DataRegister>
 5b0:	c2 5b       	subi	r28, 0xB2	; 178
 5b2:	de 4f       	sbci	r29, 0xFE	; 254
 5b4:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
 5b6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <gu8_counter>
 5ba:	e9 2f       	mov	r30, r25
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	e2 5b       	subi	r30, 0xB2	; 178
 5c0:	fe 4f       	sbci	r31, 0xFE	; 254
 5c2:	80 81       	ld	r24, Z
 5c4:	8d 30       	cpi	r24, 0x0D	; 13
 5c6:	71 f4       	brne	.+28     	; 0x5e4 <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
 5c8:	0e 94 3b 06 	call	0xc76	; 0xc76 <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
 5cc:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <gu8_counter>
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	e2 5b       	subi	r30, 0xB2	; 178
 5d4:	fe 4f       	sbci	r31, 0xFE	; 254
 5d6:	10 82       	st	Z, r1
		gu8_counter = 0;
 5d8:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <gu8_counter>
		gu8_flag = 1;
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <gu8_flag>
 5e2:	1d c0       	rjmp	.+58     	; 0x61e <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
 5e4:	88 30       	cpi	r24, 0x08	; 8
 5e6:	51 f4       	brne	.+20     	; 0x5fc <Uart_RXC_ISR+0x5a>
 5e8:	99 23       	and	r25, r25
 5ea:	41 f0       	breq	.+16     	; 0x5fc <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
 5ec:	0e 94 3b 06 	call	0xc76	; 0xc76 <Uart_sendByte>
		gu8_counter--;
 5f0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <gu8_counter>
 5f4:	81 50       	subi	r24, 0x01	; 1
 5f6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <gu8_counter>
 5fa:	11 c0       	rjmp	.+34     	; 0x61e <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
 5fc:	88 30       	cpi	r24, 0x08	; 8
 5fe:	79 f0       	breq	.+30     	; 0x61e <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
 600:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <gu8_visibility>
 604:	91 30       	cpi	r25, 0x01	; 1
 606:	21 f4       	brne	.+8      	; 0x610 <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
 608:	8a e2       	ldi	r24, 0x2A	; 42
 60a:	0e 94 3b 06 	call	0xc76	; 0xc76 <Uart_sendByte>
 60e:	02 c0       	rjmp	.+4      	; 0x614 <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
 610:	0e 94 3b 06 	call	0xc76	; 0xc76 <Uart_sendByte>
		}
		gu8_counter++;
 614:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <gu8_counter>
 618:	8f 5f       	subi	r24, 0xFF	; 255
 61a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <gu8_counter>
	}
}
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	08 95       	ret

00000624 <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
 624:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
 628:	83 30       	cpi	r24, 0x03	; 3
 62a:	81 f0       	breq	.+32     	; 0x64c <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
 62c:	0e 94 25 06 	call	0xc4a	; 0xc4a <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
 630:	81 30       	cpi	r24, 0x01	; 1
 632:	11 f0       	breq	.+4      	; 0x638 <Terminal_init+0x14>
 634:	87 30       	cpi	r24, 0x07	; 7
 636:	49 f4       	brne	.+18     	; 0x64a <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
 638:	81 ed       	ldi	r24, 0xD1	; 209
 63a:	92 e0       	ldi	r25, 0x02	; 2
 63c:	0e 94 6d 06 	call	0xcda	; 0xcda <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
 640:	83 e0       	ldi	r24, 0x03	; 3
 642:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
 64a:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
 64c:	08 95       	ret

0000064e <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
 652:	00 97       	sbiw	r24, 0x00	; 0
 654:	81 f0       	breq	.+32     	; 0x676 <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
 656:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <genu_TerminalModuleState>
 65a:	22 30       	cpi	r18, 0x02	; 2
 65c:	79 f0       	breq	.+30     	; 0x67c <Terminal_Out+0x2e>
 65e:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
 660:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <stringLength>
 664:	68 2f       	mov	r22, r24
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	ce 01       	movw	r24, r28
 66a:	0e 94 46 06 	call	0xc8c	; 0xc8c <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
 66e:	81 30       	cpi	r24, 0x01	; 1
 670:	21 f0       	breq	.+8      	; 0x67a <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
 672:	20 e0       	ldi	r18, 0x00	; 0
 674:	03 c0       	rjmp	.+6      	; 0x67c <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
 676:	24 e0       	ldi	r18, 0x04	; 4
 678:	01 c0       	rjmp	.+2      	; 0x67c <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
 67a:	21 e0       	ldi	r18, 0x01	; 1
}
 67c:	82 2f       	mov	r24, r18
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	08 95       	ret

00000684 <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
 684:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
 686:	89 2b       	or	r24, r25
 688:	a9 f0       	breq	.+42     	; 0x6b4 <Terminal_In+0x30>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
 68a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
 68e:	82 30       	cpi	r24, 0x02	; 2
 690:	a1 f0       	breq	.+40     	; 0x6ba <Terminal_In+0x36>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
 692:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <gu8_flag>
 696:	81 30       	cpi	r24, 0x01	; 1
 698:	79 f4       	brne	.+30     	; 0x6b8 <Terminal_In+0x34>
	{
		DIO_PORTA_DATA = 0x00;
 69a:	1b ba       	out	0x1b, r1	; 27
		gu8_flag = 0;
 69c:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
 6a0:	8e e4       	ldi	r24, 0x4E	; 78
 6a2:	91 e0       	ldi	r25, 0x01	; 1
 6a4:	0e 94 14 06 	call	0xc28	; 0xc28 <stringCopy>
		EmptyString(gau8_data);
 6a8:	8e e4       	ldi	r24, 0x4E	; 78
 6aa:	91 e0       	ldi	r25, 0x01	; 1
 6ac:	0e 94 08 06 	call	0xc10	; 0xc10 <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
 6b0:	85 e0       	ldi	r24, 0x05	; 5
 6b2:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
 6b4:	84 e0       	ldi	r24, 0x04	; 4
 6b6:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
}
 6ba:	08 95       	ret

000006bc <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
 6c2:	08 95       	ret

000006c4 <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
 6c4:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	08 95       	ret

000006cc <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
 6cc:	0e 94 06 02 	call	0x40c	; 0x40c <App_start>
 6d0:	ff cf       	rjmp	.-2      	; 0x6d0 <main+0x4>

000006d2 <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
 6d2:	2f 92       	push	r2
 6d4:	3f 92       	push	r3
 6d6:	4f 92       	push	r4
 6d8:	5f 92       	push	r5
 6da:	6f 92       	push	r6
 6dc:	7f 92       	push	r7
 6de:	8f 92       	push	r8
 6e0:	9f 92       	push	r9
 6e2:	af 92       	push	r10
 6e4:	bf 92       	push	r11
 6e6:	cf 92       	push	r12
 6e8:	df 92       	push	r13
 6ea:	ef 92       	push	r14
 6ec:	ff 92       	push	r15
 6ee:	0f 93       	push	r16
 6f0:	1f 93       	push	r17
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	00 d0       	rcall	.+0      	; 0x6f8 <Delay_ms+0x26>
 6f8:	00 d0       	rcall	.+0      	; 0x6fa <Delay_ms+0x28>
 6fa:	1f 92       	push	r1
 6fc:	cd b7       	in	r28, 0x3d	; 61
 6fe:	de b7       	in	r29, 0x3e	; 62
 700:	22 2e       	mov	r2, r18
 702:	33 2e       	mov	r3, r19
 704:	44 2e       	mov	r4, r20
 706:	55 2e       	mov	r5, r21
 708:	66 2e       	mov	r6, r22
 70a:	79 83       	std	Y+1, r23	; 0x01
 70c:	8a 83       	std	Y+2, r24	; 0x02
 70e:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
 710:	91 2c       	mov	r9, r1
 712:	1d 82       	std	Y+5, r1	; 0x05
 714:	1c 82       	std	Y+4, r1	; 0x04
 716:	b0 e0       	ldi	r27, 0x00	; 0
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	e0 e0       	ldi	r30, 0x00	; 0
 71c:	71 2c       	mov	r7, r1
 71e:	81 2c       	mov	r8, r1
 720:	3d c0       	rjmp	.+122    	; 0x79c <Delay_ms+0xca>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
 722:	2c 2d       	mov	r18, r12
 724:	3d 2d       	mov	r19, r13
 726:	4e 2d       	mov	r20, r14
 728:	5f 2d       	mov	r21, r15
 72a:	60 2f       	mov	r22, r16
 72c:	71 2f       	mov	r23, r17
 72e:	8a 2d       	mov	r24, r10
 730:	9b 2d       	mov	r25, r11
 732:	a1 e0       	ldi	r26, 0x01	; 1
 734:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__adddi3_s8>
 738:	c2 2e       	mov	r12, r18
 73a:	d3 2e       	mov	r13, r19
 73c:	e4 2e       	mov	r14, r20
 73e:	f5 2e       	mov	r15, r21
 740:	06 2f       	mov	r16, r22
 742:	17 2f       	mov	r17, r23
 744:	a8 2e       	mov	r10, r24
 746:	b9 2e       	mov	r11, r25
 748:	08 c0       	rjmp	.+16     	; 0x75a <Delay_ms+0x88>
 74a:	c1 2c       	mov	r12, r1
 74c:	d1 2c       	mov	r13, r1
 74e:	e1 2c       	mov	r14, r1
 750:	f1 2c       	mov	r15, r1
 752:	00 e0       	ldi	r16, 0x00	; 0
 754:	10 e0       	ldi	r17, 0x00	; 0
 756:	a1 2c       	mov	r10, r1
 758:	b1 2c       	mov	r11, r1
 75a:	2c 2d       	mov	r18, r12
 75c:	3d 2d       	mov	r19, r13
 75e:	4e 2d       	mov	r20, r14
 760:	5f 2d       	mov	r21, r15
 762:	60 2f       	mov	r22, r16
 764:	71 2f       	mov	r23, r17
 766:	8a 2d       	mov	r24, r10
 768:	9b 2d       	mov	r25, r11
 76a:	ac e0       	ldi	r26, 0x0C	; 12
 76c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__cmpdi2_s8>
 770:	c1 f2       	breq	.-80     	; 0x722 <Delay_ms+0x50>
 772:	b8 f2       	brcs	.-82     	; 0x722 <Delay_ms+0x50>
 774:	8c 81       	ldd	r24, Y+4	; 0x04

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
 776:	29 2d       	mov	r18, r9
 778:	3d 81       	ldd	r19, Y+5	; 0x05
 77a:	48 2f       	mov	r20, r24
 77c:	5b 2f       	mov	r21, r27
 77e:	6f 2f       	mov	r22, r31
 780:	7e 2f       	mov	r23, r30
 782:	87 2d       	mov	r24, r7
 784:	98 2d       	mov	r25, r8
 786:	a1 e0       	ldi	r26, 0x01	; 1
 788:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__adddi3_s8>
 78c:	92 2e       	mov	r9, r18
 78e:	3d 83       	std	Y+5, r19	; 0x05
 790:	4c 83       	std	Y+4, r20	; 0x04
 792:	b5 2f       	mov	r27, r21
 794:	f6 2f       	mov	r31, r22
 796:	e7 2f       	mov	r30, r23
 798:	78 2e       	mov	r7, r24
 79a:	89 2e       	mov	r8, r25
 79c:	29 2d       	mov	r18, r9
 79e:	3d 81       	ldd	r19, Y+5	; 0x05
 7a0:	4c 81       	ldd	r20, Y+4	; 0x04
 7a2:	5b 2f       	mov	r21, r27
 7a4:	6f 2f       	mov	r22, r31
 7a6:	7e 2f       	mov	r23, r30
 7a8:	87 2d       	mov	r24, r7
 7aa:	98 2d       	mov	r25, r8
 7ac:	a2 2c       	mov	r10, r2
 7ae:	b3 2c       	mov	r11, r3
 7b0:	c4 2c       	mov	r12, r4
 7b2:	d5 2c       	mov	r13, r5
 7b4:	e6 2c       	mov	r14, r6
 7b6:	f9 80       	ldd	r15, Y+1	; 0x01
 7b8:	0a 81       	ldd	r16, Y+2	; 0x02
 7ba:	1b 81       	ldd	r17, Y+3	; 0x03
 7bc:	0e 94 05 07 	call	0xe0a	; 0xe0a <__cmpdi2>
 7c0:	20 f2       	brcs	.-120    	; 0x74a <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
 7c2:	0f 90       	pop	r0
 7c4:	0f 90       	pop	r0
 7c6:	0f 90       	pop	r0
 7c8:	0f 90       	pop	r0
 7ca:	0f 90       	pop	r0
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	1f 91       	pop	r17
 7d2:	0f 91       	pop	r16
 7d4:	ff 90       	pop	r15
 7d6:	ef 90       	pop	r14
 7d8:	df 90       	pop	r13
 7da:	cf 90       	pop	r12
 7dc:	bf 90       	pop	r11
 7de:	af 90       	pop	r10
 7e0:	9f 90       	pop	r9
 7e2:	8f 90       	pop	r8
 7e4:	7f 90       	pop	r7
 7e6:	6f 90       	pop	r6
 7e8:	5f 90       	pop	r5
 7ea:	4f 90       	pop	r4
 7ec:	3f 90       	pop	r3
 7ee:	2f 90       	pop	r2
 7f0:	08 95       	ret

000007f2 <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
 7f2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 7f6:	86 30       	cpi	r24, 0x06	; 6
 7f8:	41 f0       	breq	.+16     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7fa:	11 b8       	out	0x01, r1	; 1
 7fc:	8a ef       	ldi	r24, 0xFA	; 250
 7fe:	80 b9       	out	0x00, r24	; 0
 800:	86 e0       	ldi	r24, 0x06	; 6
 802:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <genuI2C_Status>
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	08 95       	ret
 80a:	87 e0       	ldi	r24, 0x07	; 7
 80c:	08 95       	ret

0000080e <I2C_MasterSendSTART>:
 80e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 812:	86 30       	cpi	r24, 0x06	; 6
 814:	59 f4       	brne	.+22     	; 0x82c <I2C_MasterSendSTART+0x1e>
 816:	84 ea       	ldi	r24, 0xA4	; 164
 818:	86 bf       	out	0x36, r24	; 54
 81a:	06 b6       	in	r0, 0x36	; 54
 81c:	07 fe       	sbrs	r0, 7
 81e:	fd cf       	rjmp	.-6      	; 0x81a <I2C_MasterSendSTART+0xc>
 820:	81 b1       	in	r24, 0x01	; 1
 822:	88 7f       	andi	r24, 0xF8	; 248
 824:	88 30       	cpi	r24, 0x08	; 8
 826:	21 f0       	breq	.+8      	; 0x830 <I2C_MasterSendSTART+0x22>
 828:	80 e0       	ldi	r24, 0x00	; 0
 82a:	08 95       	ret
 82c:	85 e0       	ldi	r24, 0x05	; 5
 82e:	08 95       	ret
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	08 95       	ret

00000834 <I2C_MasterSendSlaveAddress>:
 834:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
 838:	96 30       	cpi	r25, 0x06	; 6
 83a:	29 f5       	brne	.+74     	; 0x886 <__stack+0x27>
 83c:	62 30       	cpi	r22, 0x02	; 2
 83e:	28 f5       	brcc	.+74     	; 0x88a <__stack+0x2b>
 840:	88 23       	and	r24, r24
 842:	2c f1       	brlt	.+74     	; 0x88e <__stack+0x2f>
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	88 0f       	add	r24, r24
 848:	99 1f       	adc	r25, r25
 84a:	68 2b       	or	r22, r24
 84c:	63 b9       	out	0x03, r22	; 3
 84e:	84 e8       	ldi	r24, 0x84	; 132
 850:	86 bf       	out	0x36, r24	; 54
 852:	06 b6       	in	r0, 0x36	; 54
 854:	07 fe       	sbrs	r0, 7
 856:	fd cf       	rjmp	.-6      	; 0x852 <I2C_MasterSendSlaveAddress+0x1e>
 858:	81 b1       	in	r24, 0x01	; 1
 85a:	88 7f       	andi	r24, 0xF8	; 248
 85c:	88 33       	cpi	r24, 0x38	; 56
 85e:	59 f0       	breq	.+22     	; 0x876 <__stack+0x17>
 860:	28 f4       	brcc	.+10     	; 0x86c <__stack+0xd>
 862:	88 31       	cpi	r24, 0x18	; 24
 864:	b1 f0       	breq	.+44     	; 0x892 <__stack+0x33>
 866:	80 32       	cpi	r24, 0x20	; 32
 868:	41 f0       	breq	.+16     	; 0x87a <__stack+0x1b>
 86a:	0b c0       	rjmp	.+22     	; 0x882 <__stack+0x23>
 86c:	80 34       	cpi	r24, 0x40	; 64
 86e:	89 f0       	breq	.+34     	; 0x892 <__stack+0x33>
 870:	88 34       	cpi	r24, 0x48	; 72
 872:	29 f0       	breq	.+10     	; 0x87e <__stack+0x1f>
 874:	06 c0       	rjmp	.+12     	; 0x882 <__stack+0x23>
 876:	88 e3       	ldi	r24, 0x38	; 56
 878:	08 95       	ret
 87a:	80 e2       	ldi	r24, 0x20	; 32
 87c:	08 95       	ret
 87e:	88 e4       	ldi	r24, 0x48	; 72
 880:	08 95       	ret
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	08 95       	ret
 886:	85 e0       	ldi	r24, 0x05	; 5
 888:	08 95       	ret
 88a:	82 e0       	ldi	r24, 0x02	; 2
 88c:	08 95       	ret
 88e:	83 e0       	ldi	r24, 0x03	; 3
 890:	08 95       	ret
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	08 95       	ret

00000896 <I2C_MasterSendRepSTART>:
 896:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 89a:	86 30       	cpi	r24, 0x06	; 6
 89c:	59 f4       	brne	.+22     	; 0x8b4 <I2C_MasterSendRepSTART+0x1e>
 89e:	84 ea       	ldi	r24, 0xA4	; 164
 8a0:	86 bf       	out	0x36, r24	; 54
 8a2:	06 b6       	in	r0, 0x36	; 54
 8a4:	07 fe       	sbrs	r0, 7
 8a6:	fd cf       	rjmp	.-6      	; 0x8a2 <I2C_MasterSendRepSTART+0xc>
 8a8:	81 b1       	in	r24, 0x01	; 1
 8aa:	88 7f       	andi	r24, 0xF8	; 248
 8ac:	80 31       	cpi	r24, 0x10	; 16
 8ae:	21 f0       	breq	.+8      	; 0x8b8 <I2C_MasterSendRepSTART+0x22>
 8b0:	80 e0       	ldi	r24, 0x00	; 0
 8b2:	08 95       	ret
 8b4:	85 e0       	ldi	r24, 0x05	; 5
 8b6:	08 95       	ret
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	08 95       	ret

000008bc <I2C_MasterSendSTOP>:
 8bc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 8c0:	86 30       	cpi	r24, 0x06	; 6
 8c2:	39 f4       	brne	.+14     	; 0x8d2 <I2C_MasterSendSTOP+0x16>
 8c4:	84 e9       	ldi	r24, 0x94	; 148
 8c6:	86 bf       	out	0x36, r24	; 54
 8c8:	06 b6       	in	r0, 0x36	; 54
 8ca:	04 fc       	sbrc	r0, 4
 8cc:	fd cf       	rjmp	.-6      	; 0x8c8 <I2C_MasterSendSTOP+0xc>
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	08 95       	ret
 8d2:	85 e0       	ldi	r24, 0x05	; 5
 8d4:	08 95       	ret

000008d6 <I2C_MasterSendByte>:
 8d6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
 8da:	96 30       	cpi	r25, 0x06	; 6
 8dc:	69 f4       	brne	.+26     	; 0x8f8 <I2C_MasterSendByte+0x22>
 8de:	83 b9       	out	0x03, r24	; 3
 8e0:	84 e8       	ldi	r24, 0x84	; 132
 8e2:	86 bf       	out	0x36, r24	; 54
 8e4:	06 b6       	in	r0, 0x36	; 54
 8e6:	07 fe       	sbrs	r0, 7
 8e8:	fd cf       	rjmp	.-6      	; 0x8e4 <I2C_MasterSendByte+0xe>
 8ea:	81 b1       	in	r24, 0x01	; 1
 8ec:	88 7f       	andi	r24, 0xF8	; 248
 8ee:	88 32       	cpi	r24, 0x28	; 40
 8f0:	29 f0       	breq	.+10     	; 0x8fc <I2C_MasterSendByte+0x26>
 8f2:	80 33       	cpi	r24, 0x30	; 48
 8f4:	29 f4       	brne	.+10     	; 0x900 <I2C_MasterSendByte+0x2a>
 8f6:	08 95       	ret
 8f8:	85 e0       	ldi	r24, 0x05	; 5
 8fa:	08 95       	ret
 8fc:	88 e2       	ldi	r24, 0x28	; 40
 8fe:	08 95       	ret
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	08 95       	ret

00000904 <I2C_MasterReceiveByte_ACK>:
 904:	fc 01       	movw	r30, r24
 906:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
 90a:	96 30       	cpi	r25, 0x06	; 6
 90c:	79 f4       	brne	.+30     	; 0x92c <I2C_MasterReceiveByte_ACK+0x28>
 90e:	30 97       	sbiw	r30, 0x00	; 0
 910:	79 f0       	breq	.+30     	; 0x930 <I2C_MasterReceiveByte_ACK+0x2c>
 912:	84 ec       	ldi	r24, 0xC4	; 196
 914:	86 bf       	out	0x36, r24	; 54
 916:	06 b6       	in	r0, 0x36	; 54
 918:	07 fe       	sbrs	r0, 7
 91a:	fd cf       	rjmp	.-6      	; 0x916 <I2C_MasterReceiveByte_ACK+0x12>
 91c:	81 b1       	in	r24, 0x01	; 1
 91e:	88 7f       	andi	r24, 0xF8	; 248
 920:	80 35       	cpi	r24, 0x50	; 80
 922:	41 f4       	brne	.+16     	; 0x934 <I2C_MasterReceiveByte_ACK+0x30>
 924:	83 b1       	in	r24, 0x03	; 3
 926:	80 83       	st	Z, r24
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	08 95       	ret
 92c:	85 e0       	ldi	r24, 0x05	; 5
 92e:	08 95       	ret
 930:	84 e0       	ldi	r24, 0x04	; 4
 932:	08 95       	ret
 934:	80 e0       	ldi	r24, 0x00	; 0
 936:	08 95       	ret

00000938 <I2C_MasterReceiveByte_NACK>:
 938:	fc 01       	movw	r30, r24
 93a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
 93e:	96 30       	cpi	r25, 0x06	; 6
 940:	79 f4       	brne	.+30     	; 0x960 <I2C_MasterReceiveByte_NACK+0x28>
 942:	30 97       	sbiw	r30, 0x00	; 0
 944:	79 f0       	breq	.+30     	; 0x964 <I2C_MasterReceiveByte_NACK+0x2c>
 946:	84 e8       	ldi	r24, 0x84	; 132
 948:	86 bf       	out	0x36, r24	; 54
 94a:	06 b6       	in	r0, 0x36	; 54
 94c:	07 fe       	sbrs	r0, 7
 94e:	fd cf       	rjmp	.-6      	; 0x94a <I2C_MasterReceiveByte_NACK+0x12>
 950:	81 b1       	in	r24, 0x01	; 1
 952:	88 7f       	andi	r24, 0xF8	; 248
 954:	88 35       	cpi	r24, 0x58	; 88
 956:	41 f4       	brne	.+16     	; 0x968 <I2C_MasterReceiveByte_NACK+0x30>
 958:	83 b1       	in	r24, 0x03	; 3
 95a:	80 83       	st	Z, r24
 95c:	81 e0       	ldi	r24, 0x01	; 1
 95e:	08 95       	ret
 960:	85 e0       	ldi	r24, 0x05	; 5
 962:	08 95       	ret
 964:	84 e0       	ldi	r24, 0x04	; 4
 966:	08 95       	ret
 968:	80 e0       	ldi	r24, 0x00	; 0
 96a:	08 95       	ret

0000096c <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
 96c:	7f 92       	push	r7
 96e:	8f 92       	push	r8
 970:	9f 92       	push	r9
 972:	af 92       	push	r10
 974:	bf 92       	push	r11
 976:	cf 92       	push	r12
 978:	df 92       	push	r13
 97a:	ef 92       	push	r14
 97c:	ff 92       	push	r15
 97e:	0f 93       	push	r16
 980:	1f 93       	push	r17
 982:	cf 93       	push	r28
 984:	df 93       	push	r29
 986:	78 2e       	mov	r7, r24
 988:	eb 01       	movw	r28, r22
 98a:	7a 01       	movw	r14, r20
 98c:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
 98e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 992:	86 30       	cpi	r24, 0x06	; 6
 994:	09 f0       	breq	.+2      	; 0x998 <I2C_MasterReceiveGeneral+0x2c>
 996:	53 c0       	rjmp	.+166    	; 0xa3e <I2C_MasterReceiveGeneral+0xd2>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
 998:	20 97       	sbiw	r28, 0x00	; 0
 99a:	09 f4       	brne	.+2      	; 0x99e <I2C_MasterReceiveGeneral+0x32>
 99c:	52 c0       	rjmp	.+164    	; 0xa42 <I2C_MasterReceiveGeneral+0xd6>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
 99e:	23 2b       	or	r18, r19
 9a0:	09 f4       	brne	.+2      	; 0x9a4 <I2C_MasterReceiveGeneral+0x38>
 9a2:	51 c0       	rjmp	.+162    	; 0xa46 <I2C_MasterReceiveGeneral+0xda>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
 9a4:	77 20       	and	r7, r7
 9a6:	0c f4       	brge	.+2      	; 0x9aa <I2C_MasterReceiveGeneral+0x3e>
 9a8:	50 c0       	rjmp	.+160    	; 0xa4a <I2C_MasterReceiveGeneral+0xde>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 9aa:	0e 94 07 04 	call	0x80e	; 0x80e <I2C_MasterSendSTART>
 9ae:	88 23       	and	r24, r24
 9b0:	09 f4       	brne	.+2      	; 0x9b4 <I2C_MasterReceiveGeneral+0x48>
 9b2:	56 c0       	rjmp	.+172    	; 0xa60 <I2C_MasterReceiveGeneral+0xf4>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 9b4:	60 e0       	ldi	r22, 0x00	; 0
 9b6:	87 2d       	mov	r24, r7
 9b8:	0e 94 1a 04 	call	0x834	; 0x834 <I2C_MasterSendSlaveAddress>
 9bc:	81 30       	cpi	r24, 0x01	; 1
 9be:	09 f0       	breq	.+2      	; 0x9c2 <I2C_MasterReceiveGeneral+0x56>
 9c0:	46 c0       	rjmp	.+140    	; 0xa4e <I2C_MasterReceiveGeneral+0xe2>
 9c2:	0c c0       	rjmp	.+24     	; 0x9dc <I2C_MasterReceiveGeneral+0x70>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 9c4:	4e 01       	movw	r8, r28
 9c6:	8f ef       	ldi	r24, 0xFF	; 255
 9c8:	88 1a       	sub	r8, r24
 9ca:	98 0a       	sbc	r9, r24
 9cc:	88 81       	ld	r24, Y
 9ce:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
 9d2:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 9d4:	88 23       	and	r24, r24
 9d6:	09 f4       	brne	.+2      	; 0x9da <I2C_MasterReceiveGeneral+0x6e>
 9d8:	43 c0       	rjmp	.+134    	; 0xa60 <I2C_MasterReceiveGeneral+0xf4>
 9da:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
 9dc:	57 01       	movw	r10, r14
 9de:	e1 e0       	ldi	r30, 0x01	; 1
 9e0:	ae 1a       	sub	r10, r30
 9e2:	b1 08       	sbc	r11, r1
 9e4:	ef 28       	or	r14, r15
 9e6:	71 f7       	brne	.-36     	; 0x9c4 <I2C_MasterReceiveGeneral+0x58>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
 9e8:	0e 94 4b 04 	call	0x896	; 0x896 <I2C_MasterSendRepSTART>
 9ec:	81 30       	cpi	r24, 0x01	; 1
 9ee:	89 f5       	brne	.+98     	; 0xa52 <I2C_MasterReceiveGeneral+0xe6>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 9f0:	61 e0       	ldi	r22, 0x01	; 1
 9f2:	87 2d       	mov	r24, r7
 9f4:	0e 94 1a 04 	call	0x834	; 0x834 <I2C_MasterSendSlaveAddress>
 9f8:	81 30       	cpi	r24, 0x01	; 1
 9fa:	69 f5       	brne	.+90     	; 0xa56 <I2C_MasterReceiveGeneral+0xea>
 9fc:	12 c0       	rjmp	.+36     	; 0xa22 <I2C_MasterReceiveGeneral+0xb6>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
	{
		if(I2C_MasterReceiveByte_ACK(pu8_destination) != I2C_STATUS_ERROR_OK)
 9fe:	c6 01       	movw	r24, r12
 a00:	0e 94 82 04 	call	0x904	; 0x904 <I2C_MasterReceiveByte_ACK>
 a04:	81 30       	cpi	r24, 0x01	; 1
 a06:	49 f5       	brne	.+82     	; 0xa5a <I2C_MasterReceiveGeneral+0xee>
			return I2C_STATUS_ERROR_NOK;
		if(*pu8_destination == '\0')
 a08:	f6 01       	movw	r30, r12
 a0a:	80 81       	ld	r24, Z
 a0c:	81 11       	cpse	r24, r1
 a0e:	06 c0       	rjmp	.+12     	; 0xa1c <I2C_MasterReceiveGeneral+0xb0>
		{
			if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
 a10:	0e 94 5e 04 	call	0x8bc	; 0x8bc <I2C_MasterSendSTOP>
 a14:	81 30       	cpi	r24, 0x01	; 1
 a16:	21 f1       	breq	.+72     	; 0xa60 <I2C_MasterReceiveGeneral+0xf4>
				return I2C_STATUS_ERROR_NOK;
 a18:	80 e0       	ldi	r24, 0x00	; 0
 a1a:	22 c0       	rjmp	.+68     	; 0xa60 <I2C_MasterReceiveGeneral+0xf4>
			return I2C_STATUS_ERROR_OK;
		}
		pu8_destination++;
 a1c:	ff ef       	ldi	r31, 0xFF	; 255
 a1e:	cf 1a       	sub	r12, r31
 a20:	df 0a       	sbc	r13, r31
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
 a22:	01 50       	subi	r16, 0x01	; 1
 a24:	11 09       	sbc	r17, r1
 a26:	59 f7       	brne	.-42     	; 0x9fe <I2C_MasterReceiveGeneral+0x92>
		}
		pu8_destination++;
	}
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
 a28:	c6 01       	movw	r24, r12
 a2a:	0e 94 9c 04 	call	0x938	; 0x938 <I2C_MasterReceiveByte_NACK>
 a2e:	81 30       	cpi	r24, 0x01	; 1
 a30:	b1 f4       	brne	.+44     	; 0xa5e <I2C_MasterReceiveGeneral+0xf2>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
 a32:	0e 94 5e 04 	call	0x8bc	; 0x8bc <I2C_MasterSendSTOP>
 a36:	81 30       	cpi	r24, 0x01	; 1
 a38:	99 f0       	breq	.+38     	; 0xa60 <I2C_MasterReceiveGeneral+0xf4>
		return I2C_STATUS_ERROR_NOK;
 a3a:	80 e0       	ldi	r24, 0x00	; 0
 a3c:	11 c0       	rjmp	.+34     	; 0xa60 <I2C_MasterReceiveGeneral+0xf4>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
 a3e:	85 e0       	ldi	r24, 0x05	; 5
 a40:	0f c0       	rjmp	.+30     	; 0xa60 <I2C_MasterReceiveGeneral+0xf4>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
 a42:	84 e0       	ldi	r24, 0x04	; 4
 a44:	0d c0       	rjmp	.+26     	; 0xa60 <I2C_MasterReceiveGeneral+0xf4>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
 a46:	84 e0       	ldi	r24, 0x04	; 4
 a48:	0b c0       	rjmp	.+22     	; 0xa60 <I2C_MasterReceiveGeneral+0xf4>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
 a4a:	83 e0       	ldi	r24, 0x03	; 3
 a4c:	09 c0       	rjmp	.+18     	; 0xa60 <I2C_MasterReceiveGeneral+0xf4>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 a4e:	80 e0       	ldi	r24, 0x00	; 0
 a50:	07 c0       	rjmp	.+14     	; 0xa60 <I2C_MasterReceiveGeneral+0xf4>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
 a52:	80 e0       	ldi	r24, 0x00	; 0
 a54:	05 c0       	rjmp	.+10     	; 0xa60 <I2C_MasterReceiveGeneral+0xf4>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 a56:	80 e0       	ldi	r24, 0x00	; 0
 a58:	03 c0       	rjmp	.+6      	; 0xa60 <I2C_MasterReceiveGeneral+0xf4>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
	{
		if(I2C_MasterReceiveByte_ACK(pu8_destination) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
 a5a:	80 e0       	ldi	r24, 0x00	; 0
 a5c:	01 c0       	rjmp	.+2      	; 0xa60 <I2C_MasterReceiveGeneral+0xf4>
		pu8_destination++;
	}
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
 a5e:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
 a60:	df 91       	pop	r29
 a62:	cf 91       	pop	r28
 a64:	1f 91       	pop	r17
 a66:	0f 91       	pop	r16
 a68:	ff 90       	pop	r15
 a6a:	ef 90       	pop	r14
 a6c:	df 90       	pop	r13
 a6e:	cf 90       	pop	r12
 a70:	bf 90       	pop	r11
 a72:	af 90       	pop	r10
 a74:	9f 90       	pop	r9
 a76:	8f 90       	pop	r8
 a78:	7f 90       	pop	r7
 a7a:	08 95       	ret

00000a7c <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
 a7c:	bf 92       	push	r11
 a7e:	cf 92       	push	r12
 a80:	df 92       	push	r13
 a82:	ef 92       	push	r14
 a84:	ff 92       	push	r15
 a86:	0f 93       	push	r16
 a88:	1f 93       	push	r17
 a8a:	cf 93       	push	r28
 a8c:	df 93       	push	r29
 a8e:	18 2f       	mov	r17, r24
 a90:	06 2f       	mov	r16, r22
 a92:	ea 01       	movw	r28, r20
 a94:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
 a96:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
 a9a:	86 30       	cpi	r24, 0x06	; 6
 a9c:	71 f5       	brne	.+92     	; 0xafa <I2C_MasterSendToLocation+0x7e>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
 a9e:	20 97       	sbiw	r28, 0x00	; 0
 aa0:	71 f1       	breq	.+92     	; 0xafe <I2C_MasterSendToLocation+0x82>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
 aa2:	11 23       	and	r17, r17
 aa4:	74 f1       	brlt	.+92     	; 0xb02 <I2C_MasterSendToLocation+0x86>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 aa6:	0e 94 07 04 	call	0x80e	; 0x80e <I2C_MasterSendSTART>
 aaa:	88 23       	and	r24, r24
 aac:	79 f1       	breq	.+94     	; 0xb0c <I2C_MasterSendToLocation+0x90>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 aae:	60 e0       	ldi	r22, 0x00	; 0
 ab0:	81 2f       	mov	r24, r17
 ab2:	0e 94 1a 04 	call	0x834	; 0x834 <I2C_MasterSendSlaveAddress>
 ab6:	b8 2e       	mov	r11, r24
 ab8:	81 e0       	ldi	r24, 0x01	; 1
 aba:	b8 12       	cpse	r11, r24
 abc:	24 c0       	rjmp	.+72     	; 0xb06 <I2C_MasterSendToLocation+0x8a>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 abe:	80 2f       	mov	r24, r16
 ac0:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <I2C_MasterSendByte>
 ac4:	81 11       	cpse	r24, r1
 ac6:	0f c0       	rjmp	.+30     	; 0xae6 <I2C_MasterSendToLocation+0x6a>
 ac8:	21 c0       	rjmp	.+66     	; 0xb0c <I2C_MasterSendToLocation+0x90>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
	{		
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 aca:	6e 01       	movw	r12, r28
 acc:	8f ef       	ldi	r24, 0xFF	; 255
 ace:	c8 1a       	sub	r12, r24
 ad0:	d8 0a       	sbc	r13, r24
 ad2:	88 81       	ld	r24, Y
 ad4:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <I2C_MasterSendByte>
 ad8:	88 23       	and	r24, r24
 ada:	c1 f0       	breq	.+48     	; 0xb0c <I2C_MasterSendToLocation+0x90>
		if(*pu8_data == '\0') break;
 adc:	89 81       	ldd	r24, Y+1	; 0x01
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
 ade:	78 01       	movw	r14, r16
	{		
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
		if(*pu8_data == '\0') break;
 ae0:	88 23       	and	r24, r24
 ae2:	31 f0       	breq	.+12     	; 0xaf0 <I2C_MasterSendToLocation+0x74>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
	{		
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 ae4:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
 ae6:	87 01       	movw	r16, r14
 ae8:	01 50       	subi	r16, 0x01	; 1
 aea:	11 09       	sbc	r17, r1
 aec:	ef 28       	or	r14, r15
 aee:	69 f7       	brne	.-38     	; 0xaca <I2C_MasterSendToLocation+0x4e>
	{		
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
		if(*pu8_data == '\0') break;
	}
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
 af0:	0e 94 5e 04 	call	0x8bc	; 0x8bc <I2C_MasterSendSTOP>
 af4:	81 11       	cpse	r24, r1
 af6:	09 c0       	rjmp	.+18     	; 0xb0a <I2C_MasterSendToLocation+0x8e>
 af8:	09 c0       	rjmp	.+18     	; 0xb0c <I2C_MasterSendToLocation+0x90>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
 afa:	85 e0       	ldi	r24, 0x05	; 5
 afc:	07 c0       	rjmp	.+14     	; 0xb0c <I2C_MasterSendToLocation+0x90>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
 afe:	84 e0       	ldi	r24, 0x04	; 4
 b00:	05 c0       	rjmp	.+10     	; 0xb0c <I2C_MasterSendToLocation+0x90>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
 b02:	83 e0       	ldi	r24, 0x03	; 3
 b04:	03 c0       	rjmp	.+6      	; 0xb0c <I2C_MasterSendToLocation+0x90>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
 b06:	80 e0       	ldi	r24, 0x00	; 0
 b08:	01 c0       	rjmp	.+2      	; 0xb0c <I2C_MasterSendToLocation+0x90>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
		if(*pu8_data == '\0') break;
	}
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
 b0a:	8b 2d       	mov	r24, r11
}
 b0c:	df 91       	pop	r29
 b0e:	cf 91       	pop	r28
 b10:	1f 91       	pop	r17
 b12:	0f 91       	pop	r16
 b14:	ff 90       	pop	r15
 b16:	ef 90       	pop	r14
 b18:	df 90       	pop	r13
 b1a:	cf 90       	pop	r12
 b1c:	bf 90       	pop	r11
 b1e:	08 95       	ret

00000b20 <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
 b20:	0f 93       	push	r16
 b22:	1f 93       	push	r17
 b24:	cf 93       	push	r28
 b26:	df 93       	push	r29
 b28:	1f 92       	push	r1
 b2a:	cd b7       	in	r28, 0x3d	; 61
 b2c:	de b7       	in	r29, 0x3e	; 62
 b2e:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
 b30:	89 01       	movw	r16, r18
 b32:	9a 01       	movw	r18, r20
 b34:	41 e0       	ldi	r20, 0x01	; 1
 b36:	50 e0       	ldi	r21, 0x00	; 0
 b38:	be 01       	movw	r22, r28
 b3a:	6f 5f       	subi	r22, 0xFF	; 255
 b3c:	7f 4f       	sbci	r23, 0xFF	; 255
 b3e:	0e 94 b6 04 	call	0x96c	; 0x96c <I2C_MasterReceiveGeneral>
}
 b42:	0f 90       	pop	r0
 b44:	df 91       	pop	r29
 b46:	cf 91       	pop	r28
 b48:	1f 91       	pop	r17
 b4a:	0f 91       	pop	r16
 b4c:	08 95       	ret

00000b4e <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
 b4e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genuSpi_Status>
 b52:	87 30       	cpi	r24, 0x07	; 7
 b54:	41 f1       	breq	.+80     	; 0xba6 <Spi_init+0x58>
 b56:	87 b3       	in	r24, 0x17	; 23
 b58:	80 6b       	ori	r24, 0xB0	; 176
 b5a:	87 bb       	out	0x17, r24	; 23
 b5c:	87 b3       	in	r24, 0x17	; 23
 b5e:	8f 7b       	andi	r24, 0xBF	; 191
 b60:	87 bb       	out	0x17, r24	; 23
 b62:	88 b3       	in	r24, 0x18	; 24
 b64:	80 61       	ori	r24, 0x10	; 16
 b66:	88 bb       	out	0x18, r24	; 24
 b68:	8d b1       	in	r24, 0x0d	; 13
 b6a:	80 61       	ori	r24, 0x10	; 16
 b6c:	8d b9       	out	0x0d, r24	; 13
 b6e:	8d b1       	in	r24, 0x0d	; 13
 b70:	8f 7d       	andi	r24, 0xDF	; 223
 b72:	8d b9       	out	0x0d, r24	; 13
 b74:	8d b1       	in	r24, 0x0d	; 13
 b76:	87 7f       	andi	r24, 0xF7	; 247
 b78:	8d b9       	out	0x0d, r24	; 13
 b7a:	8d b1       	in	r24, 0x0d	; 13
 b7c:	8b 7f       	andi	r24, 0xFB	; 251
 b7e:	8d b9       	out	0x0d, r24	; 13
 b80:	8e b1       	in	r24, 0x0e	; 14
 b82:	81 60       	ori	r24, 0x01	; 1
 b84:	8e b9       	out	0x0e, r24	; 14
 b86:	8d b1       	in	r24, 0x0d	; 13
 b88:	8e 7f       	andi	r24, 0xFE	; 254
 b8a:	8d b9       	out	0x0d, r24	; 13
 b8c:	8d b1       	in	r24, 0x0d	; 13
 b8e:	8d 7f       	andi	r24, 0xFD	; 253
 b90:	8d b9       	out	0x0d, r24	; 13
 b92:	8d b1       	in	r24, 0x0d	; 13
 b94:	8d b9       	out	0x0d, r24	; 13
 b96:	8d b1       	in	r24, 0x0d	; 13
 b98:	80 64       	ori	r24, 0x40	; 64
 b9a:	8d b9       	out	0x0d, r24	; 13
 b9c:	87 e0       	ldi	r24, 0x07	; 7
 b9e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <genuSpi_Status>
 ba2:	81 e0       	ldi	r24, 0x01	; 1
 ba4:	08 95       	ret
 ba6:	88 e0       	ldi	r24, 0x08	; 8
 ba8:	08 95       	ret

00000baa <__vector_12>:


 baa:	1f 92       	push	r1
 bac:	0f 92       	push	r0
 bae:	0f b6       	in	r0, 0x3f	; 63
 bb0:	0f 92       	push	r0
 bb2:	11 24       	eor	r1, r1
 bb4:	2f 93       	push	r18
 bb6:	3f 93       	push	r19
 bb8:	4f 93       	push	r20
 bba:	5f 93       	push	r21
 bbc:	6f 93       	push	r22
 bbe:	7f 93       	push	r23
 bc0:	8f 93       	push	r24
 bc2:	9f 93       	push	r25
 bc4:	af 93       	push	r26
 bc6:	bf 93       	push	r27
 bc8:	ef 93       	push	r30
 bca:	ff 93       	push	r31
 bcc:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <SPI_STC_CallBackPtr>
 bd0:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <SPI_STC_CallBackPtr+0x1>
 bd4:	09 95       	icall
 bd6:	ff 91       	pop	r31
 bd8:	ef 91       	pop	r30
 bda:	bf 91       	pop	r27
 bdc:	af 91       	pop	r26
 bde:	9f 91       	pop	r25
 be0:	8f 91       	pop	r24
 be2:	7f 91       	pop	r23
 be4:	6f 91       	pop	r22
 be6:	5f 91       	pop	r21
 be8:	4f 91       	pop	r20
 bea:	3f 91       	pop	r19
 bec:	2f 91       	pop	r18
 bee:	0f 90       	pop	r0
 bf0:	0f be       	out	0x3f, r0	; 63
 bf2:	0f 90       	pop	r0
 bf4:	1f 90       	pop	r1
 bf6:	18 95       	reti

00000bf8 <stringLength>:
        else if(string1[u8_loopIndex] < string2[u8_loopIndex])
            return 2;
        u8_loopIndex++;
    }
    return 3;
}
 bf8:	ac 01       	movw	r20, r24
 bfa:	80 e0       	ldi	r24, 0x00	; 0
 bfc:	01 c0       	rjmp	.+2      	; 0xc00 <stringLength+0x8>
 bfe:	8f 5f       	subi	r24, 0xFF	; 255
 c00:	fa 01       	movw	r30, r20
 c02:	e8 0f       	add	r30, r24
 c04:	f1 1d       	adc	r31, r1
 c06:	20 81       	ld	r18, Z
 c08:	21 11       	cpse	r18, r1
 c0a:	f9 cf       	rjmp	.-14     	; 0xbfe <stringLength+0x6>
 c0c:	8f 5f       	subi	r24, 0xFF	; 255
 c0e:	08 95       	ret

00000c10 <EmptyString>:

void EmptyString(uint8_t *string)
{
 c10:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
 c12:	90 e0       	ldi	r25, 0x00	; 0
	while(string[u8_loopIndex] != '\0')
 c14:	02 c0       	rjmp	.+4      	; 0xc1a <EmptyString+0xa>
		string[u8_loopIndex++] = '\0';
 c16:	9f 5f       	subi	r25, 0xFF	; 255
 c18:	10 82       	st	Z, r1
}

void EmptyString(uint8_t *string)
{
	uint8_t u8_loopIndex=0;
	while(string[u8_loopIndex] != '\0')
 c1a:	fa 01       	movw	r30, r20
 c1c:	e9 0f       	add	r30, r25
 c1e:	f1 1d       	adc	r31, r1
 c20:	20 81       	ld	r18, Z
 c22:	21 11       	cpse	r18, r1
 c24:	f8 cf       	rjmp	.-16     	; 0xc16 <EmptyString+0x6>
		string[u8_loopIndex++] = '\0';
}
 c26:	08 95       	ret

00000c28 <stringCopy>:

void stringCopy(uint8_t* source, uint8_t* destination)
{
 c28:	dc 01       	movw	r26, r24
    uint8_t u8_loopIndex=0;
 c2a:	90 e0       	ldi	r25, 0x00	; 0
    while(source[u8_loopIndex] != '\0')
 c2c:	05 c0       	rjmp	.+10     	; 0xc38 <stringCopy+0x10>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
 c2e:	fb 01       	movw	r30, r22
 c30:	e2 0f       	add	r30, r18
 c32:	f3 1f       	adc	r31, r19
 c34:	40 83       	st	Z, r20
	    u8_loopIndex++;
 c36:	9f 5f       	subi	r25, 0xFF	; 255
}

void stringCopy(uint8_t* source, uint8_t* destination)
{
    uint8_t u8_loopIndex=0;
    while(source[u8_loopIndex] != '\0')
 c38:	29 2f       	mov	r18, r25
 c3a:	30 e0       	ldi	r19, 0x00	; 0
 c3c:	fd 01       	movw	r30, r26
 c3e:	e2 0f       	add	r30, r18
 c40:	f3 1f       	adc	r31, r19
 c42:	40 81       	ld	r20, Z
 c44:	41 11       	cpse	r20, r1
 c46:	f3 cf       	rjmp	.-26     	; 0xc2e <stringCopy+0x6>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
	    u8_loopIndex++;
    }
}
 c48:	08 95       	ret

00000c4a <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
 c4a:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <u8_Uart_Status>
 c4e:	81 30       	cpi	r24, 0x01	; 1
 c50:	81 f0       	breq	.+32     	; 0xc72 <Uart_init+0x28>
 c52:	10 bc       	out	0x20, r1	; 32
 c54:	8c e0       	ldi	r24, 0x0C	; 12
 c56:	89 b9       	out	0x09, r24	; 9
 c58:	82 e0       	ldi	r24, 0x02	; 2
 c5a:	8b b9       	out	0x0b, r24	; 11
 c5c:	88 e1       	ldi	r24, 0x18	; 24
 c5e:	8a b9       	out	0x0a, r24	; 10
 c60:	80 e8       	ldi	r24, 0x80	; 128
 c62:	80 bd       	out	0x20, r24	; 32
 c64:	80 b5       	in	r24, 0x20	; 32
 c66:	86 68       	ori	r24, 0x86	; 134
 c68:	80 bd       	out	0x20, r24	; 32
 c6a:	81 e0       	ldi	r24, 0x01	; 1
 c6c:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <u8_Uart_Status>
 c70:	08 95       	ret
 c72:	87 e0       	ldi	r24, 0x07	; 7
 c74:	08 95       	ret

00000c76 <Uart_sendByte>:
 c76:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <u8_Uart_Status>
 c7a:	99 23       	and	r25, r25
 c7c:	29 f0       	breq	.+10     	; 0xc88 <Uart_sendByte+0x12>
 c7e:	5d 9b       	sbis	0x0b, 5	; 11
 c80:	fe cf       	rjmp	.-4      	; 0xc7e <Uart_sendByte+0x8>
 c82:	8c b9       	out	0x0c, r24	; 12
 c84:	81 e0       	ldi	r24, 0x01	; 1
 c86:	08 95       	ret
 c88:	86 e0       	ldi	r24, 0x06	; 6
 c8a:	08 95       	ret

00000c8c <Uart_sendPacket>:
 c8c:	ef 92       	push	r14
 c8e:	ff 92       	push	r15
 c90:	0f 93       	push	r16
 c92:	1f 93       	push	r17
 c94:	cf 93       	push	r28
 c96:	df 93       	push	r29
 c98:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <u8_Uart_Status>
 c9c:	22 23       	and	r18, r18
 c9e:	99 f0       	breq	.+38     	; 0xcc6 <Uart_sendPacket+0x3a>
 ca0:	8b 01       	movw	r16, r22
 ca2:	7c 01       	movw	r14, r24
 ca4:	c0 e0       	ldi	r28, 0x00	; 0
 ca6:	d0 e0       	ldi	r29, 0x00	; 0
 ca8:	09 c0       	rjmp	.+18     	; 0xcbc <Uart_sendPacket+0x30>
 caa:	f7 01       	movw	r30, r14
 cac:	ec 0f       	add	r30, r28
 cae:	fd 1f       	adc	r31, r29
 cb0:	80 81       	ld	r24, Z
 cb2:	0e 94 3b 06 	call	0xc76	; 0xc76 <Uart_sendByte>
 cb6:	81 30       	cpi	r24, 0x01	; 1
 cb8:	41 f4       	brne	.+16     	; 0xcca <Uart_sendPacket+0x3e>
 cba:	21 96       	adiw	r28, 0x01	; 1
 cbc:	c0 17       	cp	r28, r16
 cbe:	d1 07       	cpc	r29, r17
 cc0:	a0 f3       	brcs	.-24     	; 0xcaa <Uart_sendPacket+0x1e>
 cc2:	81 e0       	ldi	r24, 0x01	; 1
 cc4:	03 c0       	rjmp	.+6      	; 0xccc <Uart_sendPacket+0x40>
 cc6:	86 e0       	ldi	r24, 0x06	; 6
 cc8:	01 c0       	rjmp	.+2      	; 0xccc <Uart_sendPacket+0x40>
 cca:	80 e0       	ldi	r24, 0x00	; 0
 ccc:	df 91       	pop	r29
 cce:	cf 91       	pop	r28
 cd0:	1f 91       	pop	r17
 cd2:	0f 91       	pop	r16
 cd4:	ff 90       	pop	r15
 cd6:	ef 90       	pop	r14
 cd8:	08 95       	ret

00000cda <Uart_EnableNotification_RXC>:
 cda:	9c 01       	movw	r18, r24
 cdc:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <u8_Uart_Status>
 ce0:	99 23       	and	r25, r25
 ce2:	61 f0       	breq	.+24     	; 0xcfc <Uart_EnableNotification_RXC+0x22>
 ce4:	21 15       	cp	r18, r1
 ce6:	31 05       	cpc	r19, r1
 ce8:	59 f0       	breq	.+22     	; 0xd00 <Uart_EnableNotification_RXC+0x26>
 cea:	8a b1       	in	r24, 0x0a	; 10
 cec:	80 68       	ori	r24, 0x80	; 128
 cee:	8a b9       	out	0x0a, r24	; 10
 cf0:	30 93 54 02 	sts	0x0254, r19	; 0x800254 <Uart_RXC_CallBackPtr+0x1>
 cf4:	20 93 53 02 	sts	0x0253, r18	; 0x800253 <Uart_RXC_CallBackPtr>
 cf8:	81 e0       	ldi	r24, 0x01	; 1
 cfa:	08 95       	ret
 cfc:	86 e0       	ldi	r24, 0x06	; 6
 cfe:	08 95       	ret
 d00:	85 e0       	ldi	r24, 0x05	; 5
 d02:	08 95       	ret

00000d04 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
 d04:	8c b1       	in	r24, 0x0c	; 12
}
 d06:	08 95       	ret

00000d08 <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
 d08:	1f 92       	push	r1
 d0a:	0f 92       	push	r0
 d0c:	0f b6       	in	r0, 0x3f	; 63
 d0e:	0f 92       	push	r0
 d10:	11 24       	eor	r1, r1
 d12:	2f 93       	push	r18
 d14:	3f 93       	push	r19
 d16:	4f 93       	push	r20
 d18:	5f 93       	push	r21
 d1a:	6f 93       	push	r22
 d1c:	7f 93       	push	r23
 d1e:	8f 93       	push	r24
 d20:	9f 93       	push	r25
 d22:	af 93       	push	r26
 d24:	bf 93       	push	r27
 d26:	ef 93       	push	r30
 d28:	ff 93       	push	r31
 d2a:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <Uart_TXC_CallBackPtr>
 d2e:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <Uart_TXC_CallBackPtr+0x1>
 d32:	09 95       	icall
 d34:	ff 91       	pop	r31
 d36:	ef 91       	pop	r30
 d38:	bf 91       	pop	r27
 d3a:	af 91       	pop	r26
 d3c:	9f 91       	pop	r25
 d3e:	8f 91       	pop	r24
 d40:	7f 91       	pop	r23
 d42:	6f 91       	pop	r22
 d44:	5f 91       	pop	r21
 d46:	4f 91       	pop	r20
 d48:	3f 91       	pop	r19
 d4a:	2f 91       	pop	r18
 d4c:	0f 90       	pop	r0
 d4e:	0f be       	out	0x3f, r0	; 63
 d50:	0f 90       	pop	r0
 d52:	1f 90       	pop	r1
 d54:	18 95       	reti

00000d56 <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
 d56:	1f 92       	push	r1
 d58:	0f 92       	push	r0
 d5a:	0f b6       	in	r0, 0x3f	; 63
 d5c:	0f 92       	push	r0
 d5e:	11 24       	eor	r1, r1
 d60:	2f 93       	push	r18
 d62:	3f 93       	push	r19
 d64:	4f 93       	push	r20
 d66:	5f 93       	push	r21
 d68:	6f 93       	push	r22
 d6a:	7f 93       	push	r23
 d6c:	8f 93       	push	r24
 d6e:	9f 93       	push	r25
 d70:	af 93       	push	r26
 d72:	bf 93       	push	r27
 d74:	ef 93       	push	r30
 d76:	ff 93       	push	r31
 d78:	e0 91 53 02 	lds	r30, 0x0253	; 0x800253 <Uart_RXC_CallBackPtr>
 d7c:	f0 91 54 02 	lds	r31, 0x0254	; 0x800254 <Uart_RXC_CallBackPtr+0x1>
 d80:	09 95       	icall
 d82:	ff 91       	pop	r31
 d84:	ef 91       	pop	r30
 d86:	bf 91       	pop	r27
 d88:	af 91       	pop	r26
 d8a:	9f 91       	pop	r25
 d8c:	8f 91       	pop	r24
 d8e:	7f 91       	pop	r23
 d90:	6f 91       	pop	r22
 d92:	5f 91       	pop	r21
 d94:	4f 91       	pop	r20
 d96:	3f 91       	pop	r19
 d98:	2f 91       	pop	r18
 d9a:	0f 90       	pop	r0
 d9c:	0f be       	out	0x3f, r0	; 63
 d9e:	0f 90       	pop	r0
 da0:	1f 90       	pop	r1
 da2:	18 95       	reti

00000da4 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
 da4:	1f 92       	push	r1
 da6:	0f 92       	push	r0
 da8:	0f b6       	in	r0, 0x3f	; 63
 daa:	0f 92       	push	r0
 dac:	11 24       	eor	r1, r1
 dae:	2f 93       	push	r18
 db0:	3f 93       	push	r19
 db2:	4f 93       	push	r20
 db4:	5f 93       	push	r21
 db6:	6f 93       	push	r22
 db8:	7f 93       	push	r23
 dba:	8f 93       	push	r24
 dbc:	9f 93       	push	r25
 dbe:	af 93       	push	r26
 dc0:	bf 93       	push	r27
 dc2:	ef 93       	push	r30
 dc4:	ff 93       	push	r31
 dc6:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <Uart_UDRE_CallBackPtr>
 dca:	f0 91 52 02 	lds	r31, 0x0252	; 0x800252 <Uart_UDRE_CallBackPtr+0x1>
 dce:	09 95       	icall
 dd0:	ff 91       	pop	r31
 dd2:	ef 91       	pop	r30
 dd4:	bf 91       	pop	r27
 dd6:	af 91       	pop	r26
 dd8:	9f 91       	pop	r25
 dda:	8f 91       	pop	r24
 ddc:	7f 91       	pop	r23
 dde:	6f 91       	pop	r22
 de0:	5f 91       	pop	r21
 de2:	4f 91       	pop	r20
 de4:	3f 91       	pop	r19
 de6:	2f 91       	pop	r18
 de8:	0f 90       	pop	r0
 dea:	0f be       	out	0x3f, r0	; 63
 dec:	0f 90       	pop	r0
 dee:	1f 90       	pop	r1
 df0:	18 95       	reti

00000df2 <__adddi3_s8>:
 df2:	00 24       	eor	r0, r0
 df4:	a7 fd       	sbrc	r26, 7
 df6:	00 94       	com	r0
 df8:	2a 0f       	add	r18, r26
 dfa:	30 1d       	adc	r19, r0
 dfc:	40 1d       	adc	r20, r0
 dfe:	50 1d       	adc	r21, r0
 e00:	60 1d       	adc	r22, r0
 e02:	70 1d       	adc	r23, r0
 e04:	80 1d       	adc	r24, r0
 e06:	90 1d       	adc	r25, r0
 e08:	08 95       	ret

00000e0a <__cmpdi2>:
 e0a:	2a 15       	cp	r18, r10
 e0c:	3b 05       	cpc	r19, r11
 e0e:	4c 05       	cpc	r20, r12
 e10:	5d 05       	cpc	r21, r13
 e12:	6e 05       	cpc	r22, r14
 e14:	7f 05       	cpc	r23, r15
 e16:	80 07       	cpc	r24, r16
 e18:	91 07       	cpc	r25, r17
 e1a:	08 95       	ret

00000e1c <__cmpdi2_s8>:
 e1c:	00 24       	eor	r0, r0
 e1e:	a7 fd       	sbrc	r26, 7
 e20:	00 94       	com	r0
 e22:	2a 17       	cp	r18, r26
 e24:	30 05       	cpc	r19, r0
 e26:	40 05       	cpc	r20, r0
 e28:	50 05       	cpc	r21, r0
 e2a:	60 05       	cpc	r22, r0
 e2c:	70 05       	cpc	r23, r0
 e2e:	80 05       	cpc	r24, r0
 e30:	90 05       	cpc	r25, r0
 e32:	08 95       	ret

00000e34 <_exit>:
 e34:	f8 94       	cli

00000e36 <__stop_program>:
 e36:	ff cf       	rjmp	.-2      	; 0xe36 <__stop_program>
