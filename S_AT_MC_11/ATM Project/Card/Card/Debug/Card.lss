
Card.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000164e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016e  00800060  0000164e  000016e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012e  008001ce  008001ce  00001850  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001880  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000335a  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001004  00000000  00000000  00004f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f41  00000000  00000000  00005f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c18  00000000  00000000  00007edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014c7  00000000  00000000  00008af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000033ff  00000000  00000000  00009fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  0000d3ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__vector_1>
       8:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__vector_2>
       c:	0c 94 57 07 	jmp	0xeae	; 0xeae <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 86 09 	jmp	0x130c	; 0x130c <__vector_12>
      34:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__vector_13>
      38:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_14>
      3c:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ae ec       	ldi	r26, 0xCE	; 206
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3f       	cpi	r26, 0xFC	; 252
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <main>
      8a:	0c 94 25 0b 	jmp	0x164a	; 0x164a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ATM_REQ_ISR>:
const uint8_t cgu8_ATM_SPI_CARD_Busy[3] = "CB";
/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/*--*-*-*- FUNCTIONS IMPLEMENTATION -*-*-*-*-*-*/
void ATM_REQ_ISR(void)
{	
	if(cgu8_ATM_Req == ATM_REQUESTED)
      92:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <cgu8_ATM_Req>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	19 f4       	brne	.+6      	; 0xa0 <ATM_REQ_ISR+0xe>
	cgu8_ATM_Req = ATM_NOT_REQUESTED;
      9a:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <cgu8_ATM_Req>
      9e:	08 95       	ret
	else
	{/* ATM Request Data from Card */
		cgu8_ATM_Req = ATM_REQUESTED;
      a0:	81 e0       	ldi	r24, 0x01	; 1
      a2:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <cgu8_ATM_Req>
		if (gu8_CardMode == CARD_MODE_ADMIN)
      a6:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <gu8_CardMode>
      aa:	81 11       	cpse	r24, r1
      ac:	0a c0       	rjmp	.+20     	; 0xc2 <ATM_REQ_ISR+0x30>
		{
			SPI_SS_ENABLE();
      ae:	88 b3       	in	r24, 0x18	; 24
      b0:	8f 7e       	andi	r24, 0xEF	; 239
      b2:	88 bb       	out	0x18, r24	; 24
			Spi_MasterSendByte('*');
      b4:	8a e2       	ldi	r24, 0x2A	; 42
      b6:	0e 94 4b 09 	call	0x1296	; 0x1296 <Spi_MasterSendByte>
			SPI_SS_DISABLE();
      ba:	88 b3       	in	r24, 0x18	; 24
      bc:	80 61       	ori	r24, 0x10	; 16
      be:	88 bb       	out	0x18, r24	; 24
      c0:	08 95       	ret
		}else
		{
			gu8_USER_Mode_State = USER_BUSY;
      c2:	81 e0       	ldi	r24, 0x01	; 1
      c4:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <gu8_USER_Mode_State>
      c8:	08 95       	ret

000000ca <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
      ca:	0f 93       	push	r16
      cc:	1f 93       	push	r17
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
      d6:	cf 5f       	subi	r28, 0xFF	; 255
      d8:	d1 09       	sbc	r29, r1
      da:	0f b6       	in	r0, 0x3f	; 63
      dc:	f8 94       	cli
      de:	de bf       	out	0x3e, r29	; 62
      e0:	0f be       	out	0x3f, r0	; 63
      e2:	cd bf       	out	0x3d, r28	; 61
      e4:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
      e6:	ce 01       	movw	r24, r28
      e8:	01 96       	adiw	r24, 0x01	; 1
      ea:	2f ef       	ldi	r18, 0xFF	; 255
      ec:	fc 01       	movw	r30, r24
      ee:	11 92       	st	Z+, r1
      f0:	2a 95       	dec	r18
      f2:	e9 f7       	brne	.-6      	; 0xee <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
      f4:	0e 94 47 06 	call	0xc8e	; 0xc8e <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
      f8:	85 30       	cpi	r24, 0x05	; 5
      fa:	39 f4       	brne	.+14     	; 0x10a <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
      fc:	b8 01       	movw	r22, r16
      fe:	ce 01       	movw	r24, r28
     100:	01 96       	adiw	r24, 0x01	; 1
     102:	0e 94 1f 0a 	call	0x143e	; 0x143e <stringCopy>
		return APP_STATUS_ERROR_OK;
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	05 c0       	rjmp	.+10     	; 0x114 <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     10a:	81 30       	cpi	r24, 0x01	; 1
     10c:	11 f0       	breq	.+4      	; 0x112 <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	01 c0       	rjmp	.+2      	; 0x114 <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
     112:	86 e0       	ldi	r24, 0x06	; 6
}
     114:	c1 50       	subi	r28, 0x01	; 1
     116:	df 4f       	sbci	r29, 0xFF	; 255
     118:	0f b6       	in	r0, 0x3f	; 63
     11a:	f8 94       	cli
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	0f be       	out	0x3f, r0	; 63
     120:	cd bf       	out	0x3d, r28	; 61
     122:	df 91       	pop	r29
     124:	cf 91       	pop	r28
     126:	1f 91       	pop	r17
     128:	0f 91       	pop	r16
     12a:	08 95       	ret

0000012c <AppADMIN_getCardName>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD Holder Name by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card holder's name.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardName(uint8_t* pu8_data)
{
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card Holder Name: ") != TERMINAL_STATUS_ERROR_OK)
     132:	85 e6       	ldi	r24, 0x65	; 101
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 2c 06 	call	0xc58	; 0xc58 <Terminal_Out>
     13a:	81 30       	cpi	r24, 0x01	; 1
     13c:	c1 f4       	brne	.+48     	; 0x16e <AppADMIN_getCardName+0x42>
		return APP_STATUS_ERROR_NOK;
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     13e:	ce 01       	movw	r24, r28
     140:	0e 94 65 00 	call	0xca	; 0xca <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     144:	81 30       	cpi	r24, 0x01	; 1
     146:	29 f0       	breq	.+10     	; 0x152 <AppADMIN_getCardName+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     148:	11 f0       	breq	.+4      	; 0x14e <AppADMIN_getCardName+0x22>
     14a:	86 30       	cpi	r24, 0x06	; 6
     14c:	91 f4       	brne	.+36     	; 0x172 <AppADMIN_getCardName+0x46>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     14e:	86 30       	cpi	r24, 0x06	; 6
     150:	b1 f3       	breq	.-20     	; 0x13e <AppADMIN_getCardName+0x12>
		
		
		if (pu8_data[MAX_NAME_LENGTH] == '\0')
     152:	89 85       	ldd	r24, Y+9	; 0x09
     154:	88 23       	and	r24, r24
     156:	79 f0       	breq	.+30     	; 0x176 <AppADMIN_getCardName+0x4a>
			break;
		EmptyString(pu8_data);
     158:	ce 01       	movw	r24, r28
     15a:	0e 94 13 0a 	call	0x1426	; 0x1426 <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid Name, Only 9 characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     15e:	88 e7       	ldi	r24, 0x78	; 120
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 2c 06 	call	0xc58	; 0xc58 <Terminal_Out>
     166:	81 30       	cpi	r24, 0x01	; 1
     168:	21 f3       	breq	.-56     	; 0x132 <AppADMIN_getCardName+0x6>
			return APP_STATUS_ERROR_NOK;
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	05 c0       	rjmp	.+10     	; 0x178 <AppADMIN_getCardName+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card Holder Name: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	03 c0       	rjmp	.+6      	; 0x178 <AppADMIN_getCardName+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	01 c0       	rjmp	.+2      	; 0x178 <AppADMIN_getCardName+0x4c>
			break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid Name, Only 9 characters\r\n") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     176:	81 e0       	ldi	r24, 0x01	; 1
}
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <AppADMIN_getCardPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardPAN(uint8_t* pu8_data)
{
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nCard PAN: ") != TERMINAL_STATUS_ERROR_OK)
     184:	8b e9       	ldi	r24, 0x9B	; 155
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 2c 06 	call	0xc58	; 0xc58 <Terminal_Out>
     18c:	81 30       	cpi	r24, 0x01	; 1
     18e:	c1 f4       	brne	.+48     	; 0x1c0 <AppADMIN_getCardPAN+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     190:	ce 01       	movw	r24, r28
     192:	0e 94 65 00 	call	0xca	; 0xca <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     196:	81 30       	cpi	r24, 0x01	; 1
     198:	29 f0       	breq	.+10     	; 0x1a4 <AppADMIN_getCardPAN+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     19a:	11 f0       	breq	.+4      	; 0x1a0 <AppADMIN_getCardPAN+0x22>
     19c:	86 30       	cpi	r24, 0x06	; 6
     19e:	91 f4       	brne	.+36     	; 0x1c4 <AppADMIN_getCardPAN+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     1a0:	86 30       	cpi	r24, 0x06	; 6
     1a2:	b1 f3       	breq	.-20     	; 0x190 <AppADMIN_getCardPAN+0x12>
		
		if (pu8_data[9] == '\0')
     1a4:	89 85       	ldd	r24, Y+9	; 0x09
     1a6:	88 23       	and	r24, r24
     1a8:	79 f0       	breq	.+30     	; 0x1c8 <AppADMIN_getCardPAN+0x4a>
		break;
		EmptyString(pu8_data);
     1aa:	ce 01       	movw	r24, r28
     1ac:	0e 94 13 0a 	call	0x1426	; 0x1426 <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid PAN, Only 9 characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     1b0:	87 ea       	ldi	r24, 0xA7	; 167
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 2c 06 	call	0xc58	; 0xc58 <Terminal_Out>
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	21 f3       	breq	.-56     	; 0x184 <AppADMIN_getCardPAN+0x6>
		return APP_STATUS_ERROR_NOK;
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	05 c0       	rjmp	.+10     	; 0x1ca <AppADMIN_getCardPAN+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nCard PAN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	03 c0       	rjmp	.+6      	; 0x1ca <AppADMIN_getCardPAN+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <AppADMIN_getCardPAN+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid PAN, Only 9 characters\r\n") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
}
     1ca:	df 91       	pop	r29
     1cc:	cf 91       	pop	r28
     1ce:	08 95       	ret

000001d0 <AppADMIN_getCardPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardPIN(uint8_t* pu8_data)
{
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	Terminal_enablePasswordMode();
     1d6:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Terminal_enablePasswordMode>
	do
	{
		if(Terminal_Out((uint8_t*)"\nCard PIN: ") != TERMINAL_STATUS_ERROR_OK)
     1da:	89 ec       	ldi	r24, 0xC9	; 201
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 2c 06 	call	0xc58	; 0xc58 <Terminal_Out>
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	d9 f4       	brne	.+54     	; 0x21c <AppADMIN_getCardPIN+0x4c>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     1e6:	ce 01       	movw	r24, r28
     1e8:	0e 94 65 00 	call	0xca	; 0xca <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     1ec:	81 30       	cpi	r24, 0x01	; 1
     1ee:	29 f0       	breq	.+10     	; 0x1fa <AppADMIN_getCardPIN+0x2a>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     1f0:	11 f0       	breq	.+4      	; 0x1f6 <AppADMIN_getCardPIN+0x26>
     1f2:	86 30       	cpi	r24, 0x06	; 6
     1f4:	a9 f4       	brne	.+42     	; 0x220 <AppADMIN_getCardPIN+0x50>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     1f6:	86 30       	cpi	r24, 0x06	; 6
     1f8:	b1 f3       	breq	.-20     	; 0x1e6 <AppADMIN_getCardPIN+0x16>
		
		if (pu8_data[4] == '\0')
     1fa:	8c 81       	ldd	r24, Y+4	; 0x04
     1fc:	88 23       	and	r24, r24
     1fe:	51 f0       	breq	.+20     	; 0x214 <AppADMIN_getCardPIN+0x44>
			break;
		EmptyString(pu8_data);
     200:	ce 01       	movw	r24, r28
     202:	0e 94 13 0a 	call	0x1426	; 0x1426 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     206:	85 ed       	ldi	r24, 0xD5	; 213
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 2c 06 	call	0xc58	; 0xc58 <Terminal_Out>
     20e:	81 30       	cpi	r24, 0x01	; 1
     210:	21 f3       	breq	.-56     	; 0x1da <AppADMIN_getCardPIN+0xa>
     212:	08 c0       	rjmp	.+16     	; 0x224 <AppADMIN_getCardPIN+0x54>
			return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
     214:	0e 94 66 06 	call	0xccc	; 0xccc <Terminal_disablePasswordMode>
	return APP_STATUS_ERROR_OK;
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	05 c0       	rjmp	.+10     	; 0x226 <AppADMIN_getCardPIN+0x56>
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"\nCard PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	03 c0       	rjmp	.+6      	; 0x226 <AppADMIN_getCardPIN+0x56>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	01 c0       	rjmp	.+2      	; 0x226 <AppADMIN_getCardPIN+0x56>
		
		if (pu8_data[4] == '\0')
			break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters\r\n") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     224:	80 e0       	ldi	r24, 0x00	; 0
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_ERROR_OK;
}
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <AppADMIN_saveCardData>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the EEPROM
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveCardData(strCardData_t* pstr_CardData)
{
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	ec 01       	movw	r28, r24
	if(Eeprom_24_writePacket(CARD_NAME_PAGE_ADDR, (pstr_CardData->au8_cardHolderName), MAX_NAME_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     232:	4a e0       	ldi	r20, 0x0A	; 10
     234:	50 e0       	ldi	r21, 0x00	; 0
     236:	bc 01       	movw	r22, r24
     238:	80 e2       	ldi	r24, 0x20	; 32
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0e 94 43 04 	call	0x886	; 0x886 <Eeprom_24_writePacket>
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	e9 f5       	brne	.+122    	; 0x2be <AppADMIN_saveCardData+0x92>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     244:	2a e0       	ldi	r18, 0x0A	; 10
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 6d 06 	call	0xcda	; 0xcda <Delay_ms>
	if(Eeprom_24_writePacket(CARD_PAN_PAGE_ADDR, (pstr_CardData->au8_primaryAccountNumber), MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     258:	4a e0       	ldi	r20, 0x0A	; 10
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	be 01       	movw	r22, r28
     25e:	66 5f       	subi	r22, 0xF6	; 246
     260:	7f 4f       	sbci	r23, 0xFF	; 255
     262:	80 e3       	ldi	r24, 0x30	; 48
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 43 04 	call	0x886	; 0x886 <Eeprom_24_writePacket>
     26a:	81 30       	cpi	r24, 0x01	; 1
     26c:	51 f5       	brne	.+84     	; 0x2c2 <AppADMIN_saveCardData+0x96>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     26e:	2a e0       	ldi	r18, 0x0A	; 10
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	60 e0       	ldi	r22, 0x00	; 0
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 6d 06 	call	0xcda	; 0xcda <Delay_ms>
	if(Eeprom_24_writePacket(CARD_PIN_PAGE_ADDR, (pstr_CardData->au8_pinNum), MAX_PIN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     282:	be 01       	movw	r22, r28
     284:	6c 5e       	subi	r22, 0xEC	; 236
     286:	7f 4f       	sbci	r23, 0xFF	; 255
     288:	45 e0       	ldi	r20, 0x05	; 5
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	80 e4       	ldi	r24, 0x40	; 64
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 43 04 	call	0x886	; 0x886 <Eeprom_24_writePacket>
     294:	81 30       	cpi	r24, 0x01	; 1
     296:	b9 f4       	brne	.+46     	; 0x2c6 <AppADMIN_saveCardData+0x9a>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     298:	2a e0       	ldi	r18, 0x0A	; 10
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 6d 06 	call	0xcda	; 0xcda <Delay_ms>
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, CARD_INITIALIZED) != EEPROM_24_STATUS_ERROR_OK)
     2ac:	6a ea       	ldi	r22, 0xAA	; 170
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Eeprom_24_writeByte>
     2b6:	81 30       	cpi	r24, 0x01	; 1
     2b8:	41 f0       	breq	.+16     	; 0x2ca <AppADMIN_saveCardData+0x9e>
		return APP_STATUS_ERROR_NOK;
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	07 c0       	rjmp	.+14     	; 0x2cc <AppADMIN_saveCardData+0xa0>
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveCardData(strCardData_t* pstr_CardData)
{
	if(Eeprom_24_writePacket(CARD_NAME_PAGE_ADDR, (pstr_CardData->au8_cardHolderName), MAX_NAME_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	05 c0       	rjmp	.+10     	; 0x2cc <AppADMIN_saveCardData+0xa0>
	Delay_ms(10);
	if(Eeprom_24_writePacket(CARD_PAN_PAGE_ADDR, (pstr_CardData->au8_primaryAccountNumber), MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <AppADMIN_saveCardData+0xa0>
	Delay_ms(10);
	if(Eeprom_24_writePacket(CARD_PIN_PAGE_ADDR, (pstr_CardData->au8_pinNum), MAX_PIN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <AppADMIN_saveCardData+0xa0>
	Delay_ms(10);
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, CARD_INITIALIZED) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     2ca:	81 e0       	ldi	r24, 0x01	; 1
}
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <AppUSER_sendCardData>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to send the Card's Data to the ATM.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_sendCardData(strCardData_t* pstr_CardData)
{
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
     2e2:	6e 97       	sbiw	r28, 0x1e	; 30
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	cd bf       	out	0x3d, r28	; 61
     2ee:	7c 01       	movw	r14, r24
	if(Terminal_Out((uint8_t*)"Data is being sent to the ATM...\r\n") != TERMINAL_STATUS_ERROR_OK)
     2f0:	86 ef       	ldi	r24, 0xF6	; 246
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 2c 06 	call	0xc58	; 0xc58 <Terminal_Out>
     2f8:	81 30       	cpi	r24, 0x01	; 1
     2fa:	f1 f5       	brne	.+124    	; 0x378 <AppUSER_sendCardData+0xa6>
		return APP_STATUS_ERROR_NOK;
		
	uint8_t au8_DataFrame[30] = {0};
     2fc:	8e 01       	movw	r16, r28
     2fe:	0f 5f       	subi	r16, 0xFF	; 255
     300:	1f 4f       	sbci	r17, 0xFF	; 255
     302:	8e e1       	ldi	r24, 0x1E	; 30
     304:	f8 01       	movw	r30, r16
     306:	11 92       	st	Z+, r1
     308:	8a 95       	dec	r24
     30a:	e9 f7       	brne	.-6      	; 0x306 <AppUSER_sendCardData+0x34>
	stringConcatenate(au8_DataFrame, (uint8_t*)"#");
     30c:	69 e1       	ldi	r22, 0x19	; 25
     30e:	71 e0       	ldi	r23, 0x01	; 1
     310:	c8 01       	movw	r24, r16
     312:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_cardHolderName);
     316:	b7 01       	movw	r22, r14
     318:	c8 01       	movw	r24, r16
     31a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"-");
     31e:	6c e1       	ldi	r22, 0x1C	; 28
     320:	71 e0       	ldi	r23, 0x01	; 1
     322:	c8 01       	movw	r24, r16
     324:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_primaryAccountNumber);
     328:	b7 01       	movw	r22, r14
     32a:	66 5f       	subi	r22, 0xF6	; 246
     32c:	7f 4f       	sbci	r23, 0xFF	; 255
     32e:	c8 01       	movw	r24, r16
     330:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"-");
     334:	6c e1       	ldi	r22, 0x1C	; 28
     336:	71 e0       	ldi	r23, 0x01	; 1
     338:	c8 01       	movw	r24, r16
     33a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_pinNum);
     33e:	b7 01       	movw	r22, r14
     340:	6c 5e       	subi	r22, 0xEC	; 236
     342:	7f 4f       	sbci	r23, 0xFF	; 255
     344:	c8 01       	movw	r24, r16
     346:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"#-");
     34a:	6b e1       	ldi	r22, 0x1B	; 27
     34c:	71 e0       	ldi	r23, 0x01	; 1
     34e:	c8 01       	movw	r24, r16
     350:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <stringConcatenate>
	
	SPI_SS_ENABLE();
     354:	88 b3       	in	r24, 0x18	; 24
     356:	8f 7e       	andi	r24, 0xEF	; 239
     358:	88 bb       	out	0x18, r24	; 24
	if(Spi_MasterSendPacket(au8_DataFrame, stringLength(au8_DataFrame)) != SPI_STATUS_ERROR_OK)
     35a:	c8 01       	movw	r24, r16
     35c:	0e 94 ad 09 	call	0x135a	; 0x135a <stringLength>
     360:	68 2f       	mov	r22, r24
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	c8 01       	movw	r24, r16
     366:	0e 94 60 09 	call	0x12c0	; 0x12c0 <Spi_MasterSendPacket>
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	39 f4       	brne	.+14     	; 0x37c <AppUSER_sendCardData+0xaa>
		return APP_STATUS_ERROR_NOK;
	SPI_SS_DISABLE();
     36e:	88 b3       	in	r24, 0x18	; 24
     370:	80 61       	ori	r24, 0x10	; 16
     372:	88 bb       	out	0x18, r24	; 24
	
	return APP_STATUS_ERROR_OK;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	03 c0       	rjmp	.+6      	; 0x37e <AppUSER_sendCardData+0xac>
* Description: Function to send the Card's Data to the ATM.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_sendCardData(strCardData_t* pstr_CardData)
{
	if(Terminal_Out((uint8_t*)"Data is being sent to the ATM...\r\n") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	01 c0       	rjmp	.+2      	; 0x37e <AppUSER_sendCardData+0xac>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_pinNum);
	stringConcatenate(au8_DataFrame, (uint8_t*)"#-");
	
	SPI_SS_ENABLE();
	if(Spi_MasterSendPacket(au8_DataFrame, stringLength(au8_DataFrame)) != SPI_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     37c:	80 e0       	ldi	r24, 0x00	; 0
	SPI_SS_DISABLE();
	
	return APP_STATUS_ERROR_OK;
}
     37e:	6e 96       	adiw	r28, 0x1e	; 30
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	de bf       	out	0x3e, r29	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	1f 91       	pop	r17
     390:	0f 91       	pop	r16
     392:	ff 90       	pop	r15
     394:	ef 90       	pop	r14
     396:	08 95       	ret

00000398 <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
     3a0:	a3 97       	sbiw	r28, 0x23	; 35
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
     3ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3b0:	84 30       	cpi	r24, 0x04	; 4
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <App_update+0x1e>
     3b4:	b0 c0       	rjmp	.+352    	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
     3b6:	fe 01       	movw	r30, r28
     3b8:	31 96       	adiw	r30, 0x01	; 1
     3ba:	8a e0       	ldi	r24, 0x0A	; 10
     3bc:	df 01       	movw	r26, r30
     3be:	1d 92       	st	X+, r1
     3c0:	8a 95       	dec	r24
     3c2:	e9 f7       	brne	.-6      	; 0x3be <App_update+0x26>
	if(gu8_CardMode == CARD_MODE_ADMIN)
     3c4:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <gu8_CardMode>
     3c8:	81 11       	cpse	r24, r1
     3ca:	4e c0       	rjmp	.+156    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
	{ /**************** PROGRAMMING MODE ****************/
			if(Terminal_Out((uint8_t*)"Programming Mode\r\nEnter the Following Data\r\n") != TERMINAL_STATUS_ERROR_OK)
     3cc:	8e e1       	ldi	r24, 0x1E	; 30
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	0e 94 2c 06 	call	0xc58	; 0xc58 <Terminal_Out>
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	09 f0       	breq	.+2      	; 0x3da <App_update+0x42>
     3d8:	45 c0       	rjmp	.+138    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				return APP_STATUS_ERROR_NOK;
			uint8_t au8_tempCardHolderName[10]={0};
     3da:	2a e0       	ldi	r18, 0x0A	; 10
     3dc:	ce 01       	movw	r24, r28
     3de:	45 96       	adiw	r24, 0x15	; 21
     3e0:	fc 01       	movw	r30, r24
     3e2:	32 2f       	mov	r19, r18
     3e4:	11 92       	st	Z+, r1
     3e6:	3a 95       	dec	r19
     3e8:	e9 f7       	brne	.-6      	; 0x3e4 <App_update+0x4c>
			uint8_t au8_tempPAN[10]={0};
     3ea:	fe 01       	movw	r30, r28
     3ec:	3b 96       	adiw	r30, 0x0b	; 11
     3ee:	df 01       	movw	r26, r30
     3f0:	1d 92       	st	X+, r1
     3f2:	2a 95       	dec	r18
     3f4:	e9 f7       	brne	.-6      	; 0x3f0 <App_update+0x58>
			uint8_t au8_tempPinNum[5]={0};
     3f6:	74 96       	adiw	r30, 0x14	; 20
     3f8:	25 e0       	ldi	r18, 0x05	; 5
     3fa:	df 01       	movw	r26, r30
     3fc:	1d 92       	st	X+, r1
     3fe:	2a 95       	dec	r18
     400:	e9 f7       	brne	.-6      	; 0x3fc <App_update+0x64>
		
			/* Get the Card Holder Name from the ADMIN Terminal */
			if(AppADMIN_getCardName(au8_tempCardHolderName) != APP_STATUS_ERROR_OK)
     402:	0e 94 96 00 	call	0x12c	; 0x12c <AppADMIN_getCardName>
     406:	81 30       	cpi	r24, 0x01	; 1
     408:	69 f5       	brne	.+90     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				return APP_STATUS_ERROR_NOK;
			/* Get the Card Primary Account Number from the ADMIN Terminal */
			if(AppADMIN_getCardPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     40a:	ce 01       	movw	r24, r28
     40c:	0b 96       	adiw	r24, 0x0b	; 11
     40e:	0e 94 bf 00 	call	0x17e	; 0x17e <AppADMIN_getCardPAN>
     412:	81 30       	cpi	r24, 0x01	; 1
     414:	39 f5       	brne	.+78     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
			return APP_STATUS_ERROR_NOK;
		
			if(AppADMIN_getCardPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
     416:	ce 01       	movw	r24, r28
     418:	4f 96       	adiw	r24, 0x1f	; 31
     41a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <AppADMIN_getCardPIN>
     41e:	81 30       	cpi	r24, 0x01	; 1
     420:	09 f5       	brne	.+66     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				return APP_STATUS_ERROR_NOK;
		
			stringCopy(au8_tempCardHolderName, gstr_userCardData.au8_cardHolderName);
     422:	6e ec       	ldi	r22, 0xCE	; 206
     424:	71 e0       	ldi	r23, 0x01	; 1
     426:	ce 01       	movw	r24, r28
     428:	45 96       	adiw	r24, 0x15	; 21
     42a:	0e 94 1f 0a 	call	0x143e	; 0x143e <stringCopy>
			stringCopy(au8_tempPAN, gstr_userCardData.au8_primaryAccountNumber);
     42e:	68 ed       	ldi	r22, 0xD8	; 216
     430:	71 e0       	ldi	r23, 0x01	; 1
     432:	ce 01       	movw	r24, r28
     434:	0b 96       	adiw	r24, 0x0b	; 11
     436:	0e 94 1f 0a 	call	0x143e	; 0x143e <stringCopy>
			stringCopy(au8_tempPinNum, gstr_userCardData.au8_pinNum);
     43a:	62 ee       	ldi	r22, 0xE2	; 226
     43c:	71 e0       	ldi	r23, 0x01	; 1
     43e:	ce 01       	movw	r24, r28
     440:	4f 96       	adiw	r24, 0x1f	; 31
     442:	0e 94 1f 0a 	call	0x143e	; 0x143e <stringCopy>
		
			if(AppADMIN_saveCardData(&gstr_userCardData) != APP_STATUS_ERROR_OK)
     446:	8e ec       	ldi	r24, 0xCE	; 206
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 16 01 	call	0x22c	; 0x22c <AppADMIN_saveCardData>
     44e:	81 30       	cpi	r24, 0x01	; 1
     450:	49 f4       	brne	.+18     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				return APP_STATUS_ERROR_NOK;
		
			gu8_CardMode = CARD_MODE_USER;
     452:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <gu8_CardMode>
			if(Terminal_Out((uint8_t*)"\nUSER Mode\r\n") != TERMINAL_STATUS_ERROR_OK)
     456:	8b e4       	ldi	r24, 0x4B	; 75
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	0e 94 2c 06 	call	0xc58	; 0xc58 <Terminal_Out>
     45e:	81 30       	cpi	r24, 0x01	; 1
     460:	09 f4       	brne	.+2      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     462:	4d c0       	rjmp	.+154    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
	if(gu8_CardMode == CARD_MODE_ADMIN)
	{ /**************** PROGRAMMING MODE ****************/
			if(Terminal_Out((uint8_t*)"Programming Mode\r\nEnter the Following Data\r\n") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	5e c0       	rjmp	.+188    	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
				return APP_STATUS_ERROR_NOK;
	/****************************************************************/
	}else
	{/************* User Mode **************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
     468:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <gu8_ADMIN_Request>
     46c:	81 30       	cpi	r24, 0x01	; 1
     46e:	31 f4       	brne	.+12     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     470:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <gu8_USER_Mode_State>
     474:	81 11       	cpse	r24, r1
     476:	02 c0       	rjmp	.+4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
			{
				gu8_CardMode = CARD_MODE_ADMIN;
     478:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <gu8_CardMode>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
     47c:	ce 01       	movw	r24, r28
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	0e 94 65 00 	call	0xca	; 0xca <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     484:	81 30       	cpi	r24, 0x01	; 1
     486:	c9 f4       	brne	.+50     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
     488:	67 ec       	ldi	r22, 0xC7	; 199
     48a:	71 e0       	ldi	r23, 0x01	; 1
     48c:	ce 01       	movw	r24, r28
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	0e 94 b9 09 	call	0x1372	; 0x1372 <stringCompare>
     494:	81 30       	cpi	r24, 0x01	; 1
     496:	a9 f4       	brne	.+42     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
     498:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <gu8_USER_Mode_State>
     49c:	81 30       	cpi	r24, 0x01	; 1
     49e:	49 f4       	brne	.+18     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
     4a0:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <gu8_ADMIN_Request>
						if(Terminal_Out((uint8_t*)"CARD is Busy Now, Programming Mode will start after current Process\r\n") != TERMINAL_STATUS_ERROR_OK)
     4a4:	88 e5       	ldi	r24, 0x58	; 88
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	0e 94 2c 06 	call	0xc58	; 0xc58 <Terminal_Out>
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	a9 f5       	brne	.+106    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     4b0:	08 c0       	rjmp	.+16     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The Card is not used by ATM */
					{
						gu8_CardMode = CARD_MODE_ADMIN;
     4b2:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <gu8_CardMode>
						return APP_STATUS_ERROR_OK;
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	35 c0       	rjmp	.+106    	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     4ba:	81 30       	cpi	r24, 0x01	; 1
     4bc:	11 f0       	breq	.+4      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
     4be:	86 30       	cpi	r24, 0x06	; 6
     4c0:	71 f5       	brne	.+92     	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
				return APP_STATUS_ERROR_NOK;
			/****************************************************************/
			if (cgu8_ATM_Req == ATM_REQUESTED)
     4c2:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <cgu8_ATM_Req>
     4c6:	81 30       	cpi	r24, 0x01	; 1
     4c8:	d1 f4       	brne	.+52     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
			{
				DIO_PORTA_DATA = 0xFF;
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	8b bb       	out	0x1b, r24	; 27
				AppUSER_sendCardData(&gstr_userCardData);
     4ce:	8e ec       	ldi	r24, 0xCE	; 206
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <AppUSER_sendCardData>
				
				Delay_ms(1000);
     4d6:	28 ee       	ldi	r18, 0xE8	; 232
     4d8:	33 e0       	ldi	r19, 0x03	; 3
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 6d 06 	call	0xcda	; 0xcda <Delay_ms>
				
				if (gu8_ADMIN_Request == ADMIN_NOT_REQUESTED)
     4ea:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <gu8_ADMIN_Request>
     4ee:	81 11       	cpse	r24, r1
     4f0:	06 c0       	rjmp	.+12     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
				{
					if(Terminal_Out((uint8_t*)"Data Successfully Sent\r\n") != TERMINAL_STATUS_ERROR_OK)
     4f2:	8e e9       	ldi	r24, 0x9E	; 158
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	0e 94 2c 06 	call	0xc58	; 0xc58 <Terminal_Out>
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	91 f4       	brne	.+36     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
				}
			}
	/****************************************************************/
	}
	
	Delay_ms(155);
     4fe:	2b e9       	ldi	r18, 0x9B	; 155
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	40 e0       	ldi	r20, 0x00	; 0
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 6d 06 	call	0xcda	; 0xcda <Delay_ms>
	return APP_STATUS_ERROR_OK;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	07 c0       	rjmp	.+14     	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
     516:	85 e0       	ldi	r24, 0x05	; 5
     518:	05 c0       	rjmp	.+10     	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"CARD is Busy Now, Programming Mode will start after current Process\r\n") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	03 c0       	rjmp	.+6      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
						gu8_CardMode = CARD_MODE_ADMIN;
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	01 c0       	rjmp	.+2      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
				Delay_ms(1000);
				
				if (gu8_ADMIN_Request == ADMIN_NOT_REQUESTED)
				{
					if(Terminal_Out((uint8_t*)"Data Successfully Sent\r\n") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     522:	80 e0       	ldi	r24, 0x00	; 0
	/****************************************************************/
	}
	
	Delay_ms(155);
	return APP_STATUS_ERROR_OK;
}
     524:	a3 96       	adiw	r28, 0x23	; 35
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	cd bf       	out	0x3d, r28	; 61
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <AppMemory_getCardData>:
* Parameters (out): pstr_CardData - Structure of data to hold the data saved in EEPROM.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the Card's data from eeprom.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppMemory_getCardData(strCardData_t* pstr_CardData)
{
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	ec 01       	movw	r28, r24
	if(Eeprom_24_readPacket(CARD_NAME_PAGE_ADDR, (pstr_CardData->au8_cardHolderName),MAX_NAME_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     53c:	4a e0       	ldi	r20, 0x0A	; 10
     53e:	50 e0       	ldi	r21, 0x00	; 0
     540:	bc 01       	movw	r22, r24
     542:	80 e2       	ldi	r24, 0x20	; 32
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 1c 05 	call	0xa38	; 0xa38 <Eeprom_24_readPacket>
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	61 f5       	brne	.+88     	; 0x5a6 <AppMemory_getCardData+0x70>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     54e:	2a e0       	ldi	r18, 0x0A	; 10
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 6d 06 	call	0xcda	; 0xcda <Delay_ms>
	if(Eeprom_24_readPacket(CARD_PAN_PAGE_ADDR, (pstr_CardData->au8_primaryAccountNumber),MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     562:	4a e0       	ldi	r20, 0x0A	; 10
     564:	50 e0       	ldi	r21, 0x00	; 0
     566:	be 01       	movw	r22, r28
     568:	66 5f       	subi	r22, 0xF6	; 246
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	80 e3       	ldi	r24, 0x30	; 48
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 1c 05 	call	0xa38	; 0xa38 <Eeprom_24_readPacket>
     574:	81 30       	cpi	r24, 0x01	; 1
     576:	c9 f4       	brne	.+50     	; 0x5aa <AppMemory_getCardData+0x74>
	return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     578:	2a e0       	ldi	r18, 0x0A	; 10
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 6d 06 	call	0xcda	; 0xcda <Delay_ms>
	if(Eeprom_24_readPacket(CARD_PIN_PAGE_ADDR, (pstr_CardData->au8_pinNum),MAX_PIN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     58c:	be 01       	movw	r22, r28
     58e:	6c 5e       	subi	r22, 0xEC	; 236
     590:	7f 4f       	sbci	r23, 0xFF	; 255
     592:	45 e0       	ldi	r20, 0x05	; 5
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	80 e4       	ldi	r24, 0x40	; 64
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 1c 05 	call	0xa38	; 0xa38 <Eeprom_24_readPacket>
     59e:	81 30       	cpi	r24, 0x01	; 1
     5a0:	31 f0       	breq	.+12     	; 0x5ae <AppMemory_getCardData+0x78>
	return APP_STATUS_ERROR_NOK;
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	05 c0       	rjmp	.+10     	; 0x5b0 <AppMemory_getCardData+0x7a>
* Description: Function to get the Card's data from eeprom.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppMemory_getCardData(strCardData_t* pstr_CardData)
{
	if(Eeprom_24_readPacket(CARD_NAME_PAGE_ADDR, (pstr_CardData->au8_cardHolderName),MAX_NAME_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <AppMemory_getCardData+0x7a>
	Delay_ms(10);
	if(Eeprom_24_readPacket(CARD_PAN_PAGE_ADDR, (pstr_CardData->au8_primaryAccountNumber),MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <AppMemory_getCardData+0x7a>
	Delay_ms(10);
	if(Eeprom_24_readPacket(CARD_PIN_PAGE_ADDR, (pstr_CardData->au8_pinNum),MAX_PIN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <App_init>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_init(void)
{
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	1f 92       	push	r1
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
     5c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     5c4:	84 30       	cpi	r24, 0x04	; 4
     5c6:	d1 f1       	breq	.+116    	; 0x63c <App_init+0x86>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
     5c8:	0e 94 45 03 	call	0x68a	; 0x68a <Eeprom_24_init>
     5cc:	81 30       	cpi	r24, 0x01	; 1
     5ce:	69 f5       	brne	.+90     	; 0x62a <App_init+0x74>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
     5d0:	0e 94 17 06 	call	0xc2e	; 0xc2e <Terminal_init>
     5d4:	81 30       	cpi	r24, 0x01	; 1
     5d6:	59 f5       	brne	.+86     	; 0x62e <App_init+0x78>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
     5d8:	0e 94 1d 09 	call	0x123a	; 0x123a <Spi_init>
     5dc:	81 30       	cpi	r24, 0x01	; 1
     5de:	49 f5       	brne	.+82     	; 0x632 <App_init+0x7c>
	/* Only for Testing */
// 	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Terminal_Out((uint8_t*)"CARD Terminal\r\n") != TERMINAL_STATUS_ERROR_OK)
     5e0:	87 eb       	ldi	r24, 0xB7	; 183
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	0e 94 2c 06 	call	0xc58	; 0xc58 <Terminal_Out>
     5e8:	81 30       	cpi	r24, 0x01	; 1
     5ea:	29 f5       	brne	.+74     	; 0x636 <App_init+0x80>
		return APP_STATUS_ERROR_NOK;
	uint8_t u8_initData = 0;
     5ec:	19 82       	std	Y+1, r1	; 0x01
	/* Check if the card was previously registered and has its data in the eeprom */
	if(Eeprom_24_readByte(CARD_INIT_ADDRESS, &u8_initData) != EEPROM_24_STATUS_ERROR_OK)
     5ee:	be 01       	movw	r22, r28
     5f0:	6f 5f       	subi	r22, 0xFF	; 255
     5f2:	7f 4f       	sbci	r23, 0xFF	; 255
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 90 03 	call	0x720	; 0x720 <Eeprom_24_readByte>
     5fc:	81 30       	cpi	r24, 0x01	; 1
     5fe:	e9 f4       	brne	.+58     	; 0x63a <App_init+0x84>
		return APP_STATUS_ERROR_NOK;
	DIO_PORTD_DATA |= 1<<2;
     600:	82 b3       	in	r24, 0x12	; 18
     602:	84 60       	ori	r24, 0x04	; 4
     604:	82 bb       	out	0x12, r24	; 18
	if(u8_initData != CARD_INITIALIZED)
     606:	89 81       	ldd	r24, Y+1	; 0x01
     608:	8a 3a       	cpi	r24, 0xAA	; 170
     60a:	19 f0       	breq	.+6      	; 0x612 <App_init+0x5c>
	{
		gu8_CardMode = CARD_MODE_ADMIN;
     60c:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <gu8_CardMode>
     610:	07 c0       	rjmp	.+14     	; 0x620 <App_init+0x6a>
	}else
	{
		gu8_CardMode = CARD_MODE_USER;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <gu8_CardMode>
		AppMemory_getCardData(&gstr_userCardData);
     618:	8e ec       	ldi	r24, 0xCE	; 206
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	0e 94 9b 02 	call	0x536	; 0x536 <AppMemory_getCardData>
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     620:	84 e0       	ldi	r24, 0x04	; 4
     622:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return APP_STATUS_ERROR_OK;
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	09 c0       	rjmp	.+18     	; 0x63c <App_init+0x86>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	07 c0       	rjmp	.+14     	; 0x63c <App_init+0x86>
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	05 c0       	rjmp	.+10     	; 0x63c <App_init+0x86>
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	03 c0       	rjmp	.+6      	; 0x63c <App_init+0x86>
// 	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Terminal_Out((uint8_t*)"CARD Terminal\r\n") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	01 c0       	rjmp	.+2      	; 0x63c <App_init+0x86>
	uint8_t u8_initData = 0;
	/* Check if the card was previously registered and has its data in the eeprom */
	if(Eeprom_24_readByte(CARD_INIT_ADDRESS, &u8_initData) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     63a:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     63c:	0f 90       	pop	r0
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
     644:	0e 94 db 02 	call	0x5b6	; 0x5b6 <App_init>
     648:	81 30       	cpi	r24, 0x01	; 1
     64a:	71 f4       	brne	.+28     	; 0x668 <App_start+0x24>
		return APP_STATUS_ERROR_NOK;
	Ext_INT0_init(EXT_INT0_EDGE_FALL);
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	0e 94 fd 06 	call	0xdfa	; 0xdfa <Ext_INT0_init>
	INT0_setCallBack(ATM_REQ_ISR);
     652:	89 e4       	ldi	r24, 0x49	; 73
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 04 07 	call	0xe08	; 0xe08 <INT0_setCallBack>
	EnableGlbl_Interrupt();
     65a:	8f b7       	in	r24, 0x3f	; 63
     65c:	80 68       	ori	r24, 0x80	; 128
     65e:	8f bf       	out	0x3f, r24	; 63
	
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
     660:	0e 94 cc 01 	call	0x398	; 0x398 <App_update>
     664:	81 30       	cpi	r24, 0x01	; 1
     666:	e1 f3       	breq	.-8      	; 0x660 <App_start+0x1c>
			return APP_STATUS_ERROR_NOK;
			
	}
}
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	08 95       	ret

0000066c <EEPROM_getAddresses>:
* Description: Function to Calculate the slave address byte and the word address byte from the location
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
     66c:	9a 01       	movw	r18, r20
     66e:	22 27       	eor	r18, r18
     670:	37 70       	andi	r19, 0x07	; 7
     672:	22 0f       	add	r18, r18
     674:	23 2f       	mov	r18, r19
     676:	22 1f       	adc	r18, r18
     678:	33 0b       	sbc	r19, r19
     67a:	31 95       	neg	r19
     67c:	20 65       	ori	r18, 0x50	; 80
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
     682:	fb 01       	movw	r30, r22
     684:	40 83       	st	Z, r20
	return EEPROM_24_STATUS_ERROR_OK;
}
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	08 95       	ret

0000068a <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
     68a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_eepromModuleState>
     68e:	83 30       	cpi	r24, 0x03	; 3
     690:	51 f0       	breq	.+20     	; 0x6a6 <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
     692:	0e 94 7e 07 	call	0xefc	; 0xefc <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
     696:	85 30       	cpi	r24, 0x05	; 5
     698:	29 f0       	breq	.+10     	; 0x6a4 <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
     69a:	83 e0       	ldi	r24, 0x03	; 3
     69c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
     6a4:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
     6a6:	08 95       	ret

000006a8 <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	00 d0       	rcall	.+0      	; 0x6b0 <Eeprom_24_writeByte+0x8>
     6b0:	1f 92       	push	r1
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	ac 01       	movw	r20, r24
     6b8:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     6ba:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     6be:	93 30       	cpi	r25, 0x03	; 3
     6c0:	11 f5       	brne	.+68     	; 0x706 <Eeprom_24_writeByte+0x5e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     6c2:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
     6c4:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     6c6:	be 01       	movw	r22, r28
     6c8:	6e 5f       	subi	r22, 0xFE	; 254
     6ca:	7f 4f       	sbci	r23, 0xFF	; 255
     6cc:	ce 01       	movw	r24, r28
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	0e 94 36 03 	call	0x66c	; 0x66c <EEPROM_getAddresses>
     6d4:	18 2f       	mov	r17, r24
     6d6:	81 30       	cpi	r24, 0x01	; 1
     6d8:	c1 f4       	brne	.+48     	; 0x70a <Eeprom_24_writeByte+0x62>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
     6da:	21 e0       	ldi	r18, 0x01	; 1
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	ae 01       	movw	r20, r28
     6e0:	4d 5f       	subi	r20, 0xFD	; 253
     6e2:	5f 4f       	sbci	r21, 0xFF	; 255
     6e4:	6a 81       	ldd	r22, Y+2	; 0x02
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	0e 94 b7 08 	call	0x116e	; 0x116e <I2C_MasterSendToLocation>
     6ec:	81 30       	cpi	r24, 0x01	; 1
     6ee:	79 f4       	brne	.+30     	; 0x70e <Eeprom_24_writeByte+0x66>
		return EEPROM_24_STATUS_ERROR_NOK;
	Delay_ms(15);
     6f0:	2f e0       	ldi	r18, 0x0F	; 15
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	50 e0       	ldi	r21, 0x00	; 0
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 6d 06 	call	0xcda	; 0xcda <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
     704:	05 c0       	rjmp	.+10     	; 0x710 <Eeprom_24_writeByte+0x68>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     706:	12 e0       	ldi	r17, 0x02	; 2
     708:	03 c0       	rjmp	.+6      	; 0x710 <Eeprom_24_writeByte+0x68>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     70a:	10 e0       	ldi	r17, 0x00	; 0
     70c:	01 c0       	rjmp	.+2      	; 0x710 <Eeprom_24_writeByte+0x68>
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     70e:	10 e0       	ldi	r17, 0x00	; 0
	Delay_ms(15);
	return EEPROM_24_STATUS_ERROR_OK;
}
     710:	81 2f       	mov	r24, r17
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	08 95       	ret

00000720 <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
     720:	ef 92       	push	r14
     722:	ff 92       	push	r15
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	00 d0       	rcall	.+0      	; 0x72c <Eeprom_24_readByte+0xc>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     732:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     736:	93 30       	cpi	r25, 0x03	; 3
     738:	21 f5       	brne	.+72     	; 0x782 <Eeprom_24_readByte+0x62>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     73a:	61 15       	cp	r22, r1
     73c:	71 05       	cpc	r23, r1
     73e:	19 f1       	breq	.+70     	; 0x786 <Eeprom_24_readByte+0x66>
     740:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
     742:	19 82       	std	Y+1, r1	; 0x01
	uint8_t word_addr=0;
     744:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     746:	be 01       	movw	r22, r28
     748:	6e 5f       	subi	r22, 0xFE	; 254
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	ce 01       	movw	r24, r28
     74e:	01 96       	adiw	r24, 0x01	; 1
     750:	0e 94 36 03 	call	0x66c	; 0x66c <EEPROM_getAddresses>
     754:	18 2f       	mov	r17, r24
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	c1 f4       	brne	.+48     	; 0x78a <Eeprom_24_readByte+0x6a>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
     75a:	21 e0       	ldi	r18, 0x01	; 1
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	a7 01       	movw	r20, r14
     760:	6a 81       	ldd	r22, Y+2	; 0x02
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	0e 94 06 09 	call	0x120c	; 0x120c <I2C_MasterReceiveFromLocation>
     768:	81 30       	cpi	r24, 0x01	; 1
     76a:	89 f4       	brne	.+34     	; 0x78e <Eeprom_24_readByte+0x6e>
		return EEPROM_24_STATUS_ERROR_NOK;
	Delay_ms(5);
     76c:	25 e0       	ldi	r18, 0x05	; 5
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	40 e0       	ldi	r20, 0x00	; 0
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 6d 06 	call	0xcda	; 0xcda <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
     780:	07 c0       	rjmp	.+14     	; 0x790 <Eeprom_24_readByte+0x70>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     782:	12 e0       	ldi	r17, 0x02	; 2
     784:	05 c0       	rjmp	.+10     	; 0x790 <Eeprom_24_readByte+0x70>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     786:	14 e0       	ldi	r17, 0x04	; 4
     788:	03 c0       	rjmp	.+6      	; 0x790 <Eeprom_24_readByte+0x70>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
	uint8_t word_addr=0;
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     78a:	10 e0       	ldi	r17, 0x00	; 0
     78c:	01 c0       	rjmp	.+2      	; 0x790 <Eeprom_24_readByte+0x70>
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     78e:	10 e0       	ldi	r17, 0x00	; 0
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
     790:	81 2f       	mov	r24, r17
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	ff 90       	pop	r15
     79e:	ef 90       	pop	r14
     7a0:	08 95       	ret

000007a2 <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
     7a2:	ef 92       	push	r14
     7a4:	ff 92       	push	r15
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <Eeprom_24_writePage+0xc>
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     7b2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     7b6:	93 30       	cpi	r25, 0x03	; 3
     7b8:	f9 f4       	brne	.+62     	; 0x7f8 <Eeprom_24_writePage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     7ba:	61 15       	cp	r22, r1
     7bc:	71 05       	cpc	r23, r1
     7be:	f1 f0       	breq	.+60     	; 0x7fc <Eeprom_24_writePage+0x5a>
     7c0:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
     7c2:	90 e1       	ldi	r25, 0x10	; 16
     7c4:	89 9f       	mul	r24, r25
     7c6:	a0 01       	movw	r20, r0
     7c8:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
     7ca:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
     7cc:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
     7ce:	be 01       	movw	r22, r28
     7d0:	6e 5f       	subi	r22, 0xFE	; 254
     7d2:	7f 4f       	sbci	r23, 0xFF	; 255
     7d4:	ce 01       	movw	r24, r28
     7d6:	01 96       	adiw	r24, 0x01	; 1
     7d8:	0e 94 36 03 	call	0x66c	; 0x66c <EEPROM_getAddresses>
     7dc:	18 2f       	mov	r17, r24
     7de:	81 30       	cpi	r24, 0x01	; 1
     7e0:	79 f4       	brne	.+30     	; 0x800 <__DATA_REGION_LENGTH__>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
     7e2:	20 e1       	ldi	r18, 0x10	; 16
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	a7 01       	movw	r20, r14
     7e8:	6a 81       	ldd	r22, Y+2	; 0x02
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	0e 94 b7 08 	call	0x116e	; 0x116e <I2C_MasterSendToLocation>
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	39 f0       	breq	.+14     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		return EEPROM_24_STATUS_ERROR_NOK;
     7f4:	10 e0       	ldi	r17, 0x00	; 0
     7f6:	05 c0       	rjmp	.+10     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     7f8:	12 e0       	ldi	r17, 0x02	; 2
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     7fc:	14 e0       	ldi	r17, 0x04	; 4
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     800:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
     802:	81 2f       	mov	r24, r17
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	ff 90       	pop	r15
     810:	ef 90       	pop	r14
     812:	08 95       	ret

00000814 <Eeprom_24_readPage>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory page.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read data inside a specific page in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPage(uint8_t u8_page, uint8_t *pu8_data)
{
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	00 d0       	rcall	.+0      	; 0x820 <Eeprom_24_readPage+0xc>
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     824:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     828:	93 30       	cpi	r25, 0x03	; 3
     82a:	f9 f4       	brne	.+62     	; 0x86a <__stack+0xb>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     82c:	61 15       	cp	r22, r1
     82e:	71 05       	cpc	r23, r1
     830:	f1 f0       	breq	.+60     	; 0x86e <__stack+0xf>
     832:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
     834:	90 e1       	ldi	r25, 0x10	; 16
     836:	89 9f       	mul	r24, r25
     838:	a0 01       	movw	r20, r0
     83a:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
     83c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
     83e:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
     840:	be 01       	movw	r22, r28
     842:	6e 5f       	subi	r22, 0xFE	; 254
     844:	7f 4f       	sbci	r23, 0xFF	; 255
     846:	ce 01       	movw	r24, r28
     848:	01 96       	adiw	r24, 0x01	; 1
     84a:	0e 94 36 03 	call	0x66c	; 0x66c <EEPROM_getAddresses>
     84e:	18 2f       	mov	r17, r24
     850:	81 30       	cpi	r24, 0x01	; 1
     852:	79 f4       	brne	.+30     	; 0x872 <__stack+0x13>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
     854:	20 e1       	ldi	r18, 0x10	; 16
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	a7 01       	movw	r20, r14
     85a:	6a 81       	ldd	r22, Y+2	; 0x02
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	0e 94 06 09 	call	0x120c	; 0x120c <I2C_MasterReceiveFromLocation>
     862:	81 30       	cpi	r24, 0x01	; 1
     864:	39 f0       	breq	.+14     	; 0x874 <__stack+0x15>
		return EEPROM_24_STATUS_ERROR_NOK;
     866:	10 e0       	ldi	r17, 0x00	; 0
     868:	05 c0       	rjmp	.+10     	; 0x874 <__stack+0x15>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     86a:	12 e0       	ldi	r17, 0x02	; 2
     86c:	03 c0       	rjmp	.+6      	; 0x874 <__stack+0x15>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     86e:	14 e0       	ldi	r17, 0x04	; 4
     870:	01 c0       	rjmp	.+2      	; 0x874 <__stack+0x15>
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     872:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
     874:	81 2f       	mov	r24, r17
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	08 95       	ret

00000886 <Eeprom_24_writePacket>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Multiple data bytes to a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
     886:	6f 92       	push	r6
     888:	7f 92       	push	r7
     88a:	8f 92       	push	r8
     88c:	9f 92       	push	r9
     88e:	af 92       	push	r10
     890:	bf 92       	push	r11
     892:	cf 92       	push	r12
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <Eeprom_24_writePacket+0x1e>
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	5c 01       	movw	r10, r24
     8aa:	6b 01       	movw	r12, r22
     8ac:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     8ae:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_eepromModuleState>
     8b2:	83 30       	cpi	r24, 0x03	; 3
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <Eeprom_24_writePacket+0x32>
     8b6:	a1 c0       	rjmp	.+322    	; 0x9fa <Eeprom_24_writePacket+0x174>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     8b8:	67 2b       	or	r22, r23
     8ba:	09 f4       	brne	.+2      	; 0x8be <Eeprom_24_writePacket+0x38>
     8bc:	a0 c0       	rjmp	.+320    	; 0x9fe <Eeprom_24_writePacket+0x178>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     8be:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
     8c0:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     8c2:	a5 01       	movw	r20, r10
     8c4:	be 01       	movw	r22, r28
     8c6:	6e 5f       	subi	r22, 0xFE	; 254
     8c8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ca:	ce 01       	movw	r24, r28
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	0e 94 36 03 	call	0x66c	; 0x66c <EEPROM_getAddresses>
     8d2:	18 2f       	mov	r17, r24
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	09 f0       	breq	.+2      	; 0x8da <Eeprom_24_writePacket+0x54>
     8d8:	94 c0       	rjmp	.+296    	; 0xa02 <Eeprom_24_writePacket+0x17c>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;
     8da:	45 01       	movw	r8, r10
     8dc:	80 ef       	ldi	r24, 0xF0	; 240
     8de:	88 22       	and	r8, r24
     8e0:	87 e0       	ldi	r24, 0x07	; 7
     8e2:	98 22       	and	r9, r24
     8e4:	96 94       	lsr	r9
     8e6:	87 94       	ror	r8
     8e8:	96 94       	lsr	r9
     8ea:	87 94       	ror	r8
     8ec:	96 94       	lsr	r9
     8ee:	87 94       	ror	r8
     8f0:	96 94       	lsr	r9
     8f2:	87 94       	ror	r8
     8f4:	68 2c       	mov	r6, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
     8f6:	8a 2d       	mov	r24, r10
     8f8:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
     8fa:	51 f1       	breq	.+84     	; 0x950 <Eeprom_24_writePacket+0xca>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
     8fc:	90 e1       	ldi	r25, 0x10	; 16
     8fe:	a9 2e       	mov	r10, r25
     900:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
     902:	b1 2c       	mov	r11, r1
     904:	ea 14       	cp	r14, r10
     906:	fb 04       	cpc	r15, r11
     908:	58 f4       	brcc	.+22     	; 0x920 <Eeprom_24_writePacket+0x9a>
		{
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
     90a:	97 01       	movw	r18, r14
     90c:	a6 01       	movw	r20, r12
     90e:	6a 81       	ldd	r22, Y+2	; 0x02
     910:	89 81       	ldd	r24, Y+1	; 0x01
     912:	0e 94 b7 08 	call	0x116e	; 0x116e <I2C_MasterSendToLocation>
     916:	81 30       	cpi	r24, 0x01	; 1
     918:	09 f4       	brne	.+2      	; 0x91c <Eeprom_24_writePacket+0x96>
     91a:	7c c0       	rjmp	.+248    	; 0xa14 <Eeprom_24_writePacket+0x18e>
				return EEPROM_24_STATUS_ERROR_NOK;
     91c:	10 e0       	ldi	r17, 0x00	; 0
     91e:	7a c0       	rjmp	.+244    	; 0xa14 <Eeprom_24_writePacket+0x18e>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
     920:	95 01       	movw	r18, r10
     922:	a6 01       	movw	r20, r12
     924:	6a 81       	ldd	r22, Y+2	; 0x02
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	0e 94 b7 08 	call	0x116e	; 0x116e <I2C_MasterSendToLocation>
     92c:	81 30       	cpi	r24, 0x01	; 1
     92e:	09 f0       	breq	.+2      	; 0x932 <Eeprom_24_writePacket+0xac>
     930:	6a c0       	rjmp	.+212    	; 0xa06 <Eeprom_24_writePacket+0x180>
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
     932:	ea 18       	sub	r14, r10
     934:	fb 08       	sbc	r15, r11
		i=1;
		Delay_ms(15);
     936:	2f e0       	ldi	r18, 0x0F	; 15
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 6d 06 	call	0xcda	; 0xcda <Delay_ms>
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
     94a:	77 24       	eor	r7, r7
     94c:	73 94       	inc	r7
     94e:	03 c0       	rjmp	.+6      	; 0x956 <Eeprom_24_writePacket+0xd0>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
     950:	71 2c       	mov	r7, r1
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
     952:	a1 2c       	mov	r10, r1
     954:	b1 2c       	mov	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
     956:	c7 01       	movw	r24, r14
     958:	92 95       	swap	r25
     95a:	82 95       	swap	r24
     95c:	8f 70       	andi	r24, 0x0F	; 15
     95e:	89 27       	eor	r24, r25
     960:	9f 70       	andi	r25, 0x0F	; 15
     962:	89 27       	eor	r24, r25
     964:	08 2f       	mov	r16, r24
	while (pages_num > 0)
     966:	1c c0       	rjmp	.+56     	; 0x9a0 <Eeprom_24_writePacket+0x11a>
	{
		pages_num--;
     968:	01 50       	subi	r16, 0x01	; 1
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
     96a:	b6 01       	movw	r22, r12
     96c:	6a 0d       	add	r22, r10
     96e:	7b 1d       	adc	r23, r11
     970:	87 2d       	mov	r24, r7
     972:	86 0d       	add	r24, r6
     974:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <Eeprom_24_writePage>
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	09 f0       	breq	.+2      	; 0x97e <Eeprom_24_writePacket+0xf8>
     97c:	46 c0       	rjmp	.+140    	; 0xa0a <Eeprom_24_writePacket+0x184>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
     97e:	73 94       	inc	r7
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
     980:	80 e1       	ldi	r24, 0x10	; 16
     982:	e8 1a       	sub	r14, r24
     984:	f1 08       	sbc	r15, r1
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
     986:	80 e1       	ldi	r24, 0x10	; 16
     988:	a8 0e       	add	r10, r24
     98a:	b1 1c       	adc	r11, r1
		Delay_ms(15);
     98c:	2f e0       	ldi	r18, 0x0F	; 15
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	50 e0       	ldi	r21, 0x00	; 0
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 6d 06 	call	0xcda	; 0xcda <Delay_ms>
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
     9a0:	10 16       	cp	r1, r16
     9a2:	14 f3       	brlt	.-60     	; 0x968 <Eeprom_24_writePacket+0xe2>
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
		Delay_ms(15);
	}
	
	if (u16_dataLen > 0)
     9a4:	e1 14       	cp	r14, r1
     9a6:	f1 04       	cpc	r15, r1
     9a8:	a9 f1       	breq	.+106    	; 0xa14 <Eeprom_24_writePacket+0x18e>
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
     9aa:	a4 01       	movw	r20, r8
     9ac:	47 0d       	add	r20, r7
     9ae:	51 1d       	adc	r21, r1
     9b0:	42 95       	swap	r20
     9b2:	52 95       	swap	r21
     9b4:	50 7f       	andi	r21, 0xF0	; 240
     9b6:	54 27       	eor	r21, r20
     9b8:	40 7f       	andi	r20, 0xF0	; 240
     9ba:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
     9bc:	be 01       	movw	r22, r28
     9be:	6e 5f       	subi	r22, 0xFE	; 254
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	ce 01       	movw	r24, r28
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	0e 94 36 03 	call	0x66c	; 0x66c <EEPROM_getAddresses>
     9ca:	18 2f       	mov	r17, r24
     9cc:	81 30       	cpi	r24, 0x01	; 1
     9ce:	f9 f4       	brne	.+62     	; 0xa0e <Eeprom_24_writePacket+0x188>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
     9d0:	a6 01       	movw	r20, r12
     9d2:	4a 0d       	add	r20, r10
     9d4:	5b 1d       	adc	r21, r11
     9d6:	97 01       	movw	r18, r14
     9d8:	6a 81       	ldd	r22, Y+2	; 0x02
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	0e 94 b7 08 	call	0x116e	; 0x116e <I2C_MasterSendToLocation>
     9e0:	81 30       	cpi	r24, 0x01	; 1
     9e2:	b9 f4       	brne	.+46     	; 0xa12 <Eeprom_24_writePacket+0x18c>
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
     9e4:	2f e0       	ldi	r18, 0x0F	; 15
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	40 e0       	ldi	r20, 0x00	; 0
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	0e 94 6d 06 	call	0xcda	; 0xcda <Delay_ms>
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <Eeprom_24_writePacket+0x18e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     9fa:	12 e0       	ldi	r17, 0x02	; 2
     9fc:	0b c0       	rjmp	.+22     	; 0xa14 <Eeprom_24_writePacket+0x18e>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     9fe:	14 e0       	ldi	r17, 0x04	; 4
     a00:	09 c0       	rjmp	.+18     	; 0xa14 <Eeprom_24_writePacket+0x18e>
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     a02:	10 e0       	ldi	r17, 0x00	; 0
     a04:	07 c0       	rjmp	.+14     	; 0xa14 <Eeprom_24_writePacket+0x18e>
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     a06:	10 e0       	ldi	r17, 0x00	; 0
     a08:	05 c0       	rjmp	.+10     	; 0xa14 <Eeprom_24_writePacket+0x18e>
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
	{
		pages_num--;
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     a0a:	10 e0       	ldi	r17, 0x00	; 0
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <Eeprom_24_writePacket+0x18e>
	
	if (u16_dataLen > 0)
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     a0e:	10 e0       	ldi	r17, 0x00	; 0
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <Eeprom_24_writePacket+0x18e>
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     a12:	10 e0       	ldi	r17, 0x00	; 0
		Delay_ms(15);
	}
	return EEPROM_24_STATUS_ERROR_OK;
}
     a14:	81 2f       	mov	r24, r17
     a16:	0f 90       	pop	r0
     a18:	0f 90       	pop	r0
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	1f 91       	pop	r17
     a20:	0f 91       	pop	r16
     a22:	ff 90       	pop	r15
     a24:	ef 90       	pop	r14
     a26:	df 90       	pop	r13
     a28:	cf 90       	pop	r12
     a2a:	bf 90       	pop	r11
     a2c:	af 90       	pop	r10
     a2e:	9f 90       	pop	r9
     a30:	8f 90       	pop	r8
     a32:	7f 90       	pop	r7
     a34:	6f 90       	pop	r6
     a36:	08 95       	ret

00000a38 <Eeprom_24_readPacket>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read Multiple data bytes from a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
     a38:	6f 92       	push	r6
     a3a:	7f 92       	push	r7
     a3c:	8f 92       	push	r8
     a3e:	9f 92       	push	r9
     a40:	af 92       	push	r10
     a42:	bf 92       	push	r11
     a44:	cf 92       	push	r12
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	00 d0       	rcall	.+0      	; 0xa56 <Eeprom_24_readPacket+0x1e>
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	5c 01       	movw	r10, r24
     a5c:	6b 01       	movw	r12, r22
     a5e:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     a60:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_eepromModuleState>
     a64:	83 30       	cpi	r24, 0x03	; 3
     a66:	09 f0       	breq	.+2      	; 0xa6a <Eeprom_24_readPacket+0x32>
     a68:	84 c0       	rjmp	.+264    	; 0xb72 <Eeprom_24_readPacket+0x13a>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     a6a:	67 2b       	or	r22, r23
     a6c:	09 f4       	brne	.+2      	; 0xa70 <Eeprom_24_readPacket+0x38>
     a6e:	83 c0       	rjmp	.+262    	; 0xb76 <Eeprom_24_readPacket+0x13e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     a70:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
     a72:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t u16dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     a74:	a5 01       	movw	r20, r10
     a76:	be 01       	movw	r22, r28
     a78:	6e 5f       	subi	r22, 0xFE	; 254
     a7a:	7f 4f       	sbci	r23, 0xFF	; 255
     a7c:	ce 01       	movw	r24, r28
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	0e 94 36 03 	call	0x66c	; 0x66c <EEPROM_getAddresses>
     a84:	18 2f       	mov	r17, r24
     a86:	81 30       	cpi	r24, 0x01	; 1
     a88:	09 f0       	breq	.+2      	; 0xa8c <Eeprom_24_readPacket+0x54>
     a8a:	77 c0       	rjmp	.+238    	; 0xb7a <Eeprom_24_readPacket+0x142>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;		//The first page to write in
     a8c:	45 01       	movw	r8, r10
     a8e:	80 ef       	ldi	r24, 0xF0	; 240
     a90:	88 22       	and	r8, r24
     a92:	87 e0       	ldi	r24, 0x07	; 7
     a94:	98 22       	and	r9, r24
     a96:	96 94       	lsr	r9
     a98:	87 94       	ror	r8
     a9a:	96 94       	lsr	r9
     a9c:	87 94       	ror	r8
     a9e:	96 94       	lsr	r9
     aa0:	87 94       	ror	r8
     aa2:	96 94       	lsr	r9
     aa4:	87 94       	ror	r8
     aa6:	78 2c       	mov	r7, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
     aa8:	8a 2d       	mov	r24, r10
     aaa:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
     aac:	f9 f0       	breq	.+62     	; 0xaec <Eeprom_24_readPacket+0xb4>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
     aae:	90 e1       	ldi	r25, 0x10	; 16
     ab0:	a9 2e       	mov	r10, r25
     ab2:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
     ab4:	b1 2c       	mov	r11, r1
     ab6:	ea 14       	cp	r14, r10
     ab8:	fb 04       	cpc	r15, r11
     aba:	58 f4       	brcc	.+22     	; 0xad2 <Eeprom_24_readPacket+0x9a>
		{
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
     abc:	95 01       	movw	r18, r10
     abe:	a6 01       	movw	r20, r12
     ac0:	6a 81       	ldd	r22, Y+2	; 0x02
     ac2:	89 81       	ldd	r24, Y+1	; 0x01
     ac4:	0e 94 06 09 	call	0x120c	; 0x120c <I2C_MasterReceiveFromLocation>
     ac8:	81 30       	cpi	r24, 0x01	; 1
     aca:	09 f4       	brne	.+2      	; 0xace <Eeprom_24_readPacket+0x96>
     acc:	5d c0       	rjmp	.+186    	; 0xb88 <Eeprom_24_readPacket+0x150>
				return EEPROM_24_STATUS_ERROR_NOK;
     ace:	10 e0       	ldi	r17, 0x00	; 0
     ad0:	5b c0       	rjmp	.+182    	; 0xb88 <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
     ad2:	95 01       	movw	r18, r10
     ad4:	a6 01       	movw	r20, r12
     ad6:	6a 81       	ldd	r22, Y+2	; 0x02
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	0e 94 06 09 	call	0x120c	; 0x120c <I2C_MasterReceiveFromLocation>
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	09 f0       	breq	.+2      	; 0xae4 <Eeprom_24_readPacket+0xac>
     ae2:	4d c0       	rjmp	.+154    	; 0xb7e <Eeprom_24_readPacket+0x146>
			return EEPROM_24_STATUS_ERROR_NOK;
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
     ae4:	ea 18       	sub	r14, r10
     ae6:	fb 08       	sbc	r15, r11
		i=1;
     ae8:	01 e0       	ldi	r16, 0x01	; 1
     aea:	03 c0       	rjmp	.+6      	; 0xaf2 <Eeprom_24_readPacket+0xba>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
     aec:	00 e0       	ldi	r16, 0x00	; 0
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
     aee:	a1 2c       	mov	r10, r1
     af0:	b1 2c       	mov	r11, r1
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
     af2:	c7 01       	movw	r24, r14
     af4:	92 95       	swap	r25
     af6:	82 95       	swap	r24
     af8:	8f 70       	andi	r24, 0x0F	; 15
     afa:	89 27       	eor	r24, r25
     afc:	9f 70       	andi	r25, 0x0F	; 15
     afe:	89 27       	eor	r24, r25
	while (pages_num--)
     b00:	11 c0       	rjmp	.+34     	; 0xb24 <Eeprom_24_readPacket+0xec>
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
     b02:	b6 01       	movw	r22, r12
     b04:	6a 0d       	add	r22, r10
     b06:	7b 1d       	adc	r23, r11
     b08:	80 2f       	mov	r24, r16
     b0a:	87 0d       	add	r24, r7
     b0c:	0e 94 0a 04 	call	0x814	; 0x814 <Eeprom_24_readPage>
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	b9 f5       	brne	.+110    	; 0xb82 <Eeprom_24_readPacket+0x14a>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
     b14:	0f 5f       	subi	r16, 0xFF	; 255
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
     b16:	80 e1       	ldi	r24, 0x10	; 16
     b18:	e8 1a       	sub	r14, r24
     b1a:	f1 08       	sbc	r15, r1
		u16dataIndex += EEPROM_24_PAGE_BYTES;
     b1c:	80 e1       	ldi	r24, 0x10	; 16
     b1e:	a8 0e       	add	r10, r24
     b20:	b1 1c       	adc	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
     b22:	86 2d       	mov	r24, r6
     b24:	66 24       	eor	r6, r6
     b26:	6a 94       	dec	r6
     b28:	68 0e       	add	r6, r24
     b2a:	81 11       	cpse	r24, r1
     b2c:	ea cf       	rjmp	.-44     	; 0xb02 <Eeprom_24_readPacket+0xca>
		i++;
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u16dataIndex += EEPROM_24_PAGE_BYTES;
	}

	if (u16_dataLen > 0)
     b2e:	e1 14       	cp	r14, r1
     b30:	f1 04       	cpc	r15, r1
     b32:	51 f1       	breq	.+84     	; 0xb88 <Eeprom_24_readPacket+0x150>
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
     b34:	a4 01       	movw	r20, r8
     b36:	40 0f       	add	r20, r16
     b38:	51 1d       	adc	r21, r1
     b3a:	42 95       	swap	r20
     b3c:	52 95       	swap	r21
     b3e:	50 7f       	andi	r21, 0xF0	; 240
     b40:	54 27       	eor	r21, r20
     b42:	40 7f       	andi	r20, 0xF0	; 240
     b44:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
     b46:	be 01       	movw	r22, r28
     b48:	6e 5f       	subi	r22, 0xFE	; 254
     b4a:	7f 4f       	sbci	r23, 0xFF	; 255
     b4c:	ce 01       	movw	r24, r28
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	0e 94 36 03 	call	0x66c	; 0x66c <EEPROM_getAddresses>
     b54:	18 2f       	mov	r17, r24
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	b1 f4       	brne	.+44     	; 0xb86 <Eeprom_24_readPacket+0x14e>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
     b5a:	a6 01       	movw	r20, r12
     b5c:	4a 0d       	add	r20, r10
     b5e:	5b 1d       	adc	r21, r11
     b60:	97 01       	movw	r18, r14
     b62:	6a 81       	ldd	r22, Y+2	; 0x02
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	0e 94 06 09 	call	0x120c	; 0x120c <I2C_MasterReceiveFromLocation>
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	69 f0       	breq	.+26     	; 0xb88 <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_NOK;
     b6e:	10 e0       	ldi	r17, 0x00	; 0
     b70:	0b c0       	rjmp	.+22     	; 0xb88 <Eeprom_24_readPacket+0x150>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     b72:	12 e0       	ldi	r17, 0x02	; 2
     b74:	09 c0       	rjmp	.+18     	; 0xb88 <Eeprom_24_readPacket+0x150>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     b76:	14 e0       	ldi	r17, 0x04	; 4
     b78:	07 c0       	rjmp	.+14     	; 0xb88 <Eeprom_24_readPacket+0x150>
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     b7a:	10 e0       	ldi	r17, 0x00	; 0
     b7c:	05 c0       	rjmp	.+10     	; 0xb88 <Eeprom_24_readPacket+0x150>
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     b7e:	10 e0       	ldi	r17, 0x00	; 0
     b80:	03 c0       	rjmp	.+6      	; 0xb88 <Eeprom_24_readPacket+0x150>
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     b82:	10 e0       	ldi	r17, 0x00	; 0
     b84:	01 c0       	rjmp	.+2      	; 0xb88 <Eeprom_24_readPacket+0x150>

	if (u16_dataLen > 0)
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     b86:	10 e0       	ldi	r17, 0x00	; 0
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
	return EEPROM_24_STATUS_ERROR_OK;
     b88:	81 2f       	mov	r24, r17
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	9f 90       	pop	r9
     ba4:	8f 90       	pop	r8
     ba6:	7f 90       	pop	r7
     ba8:	6f 90       	pop	r6
     baa:	08 95       	ret

00000bac <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
     bb0:	c0 91 ec 01 	lds	r28, 0x01EC	; 0x8001ec <gu8_counter>
     bb4:	d0 e0       	ldi	r29, 0x00	; 0
     bb6:	0e 94 8d 0a 	call	0x151a	; 0x151a <Uart_DataRegister>
     bba:	c3 51       	subi	r28, 0x13	; 19
     bbc:	de 4f       	sbci	r29, 0xFE	; 254
     bbe:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
     bc0:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <gu8_counter>
     bc4:	e9 2f       	mov	r30, r25
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	e3 51       	subi	r30, 0x13	; 19
     bca:	fe 4f       	sbci	r31, 0xFE	; 254
     bcc:	80 81       	ld	r24, Z
     bce:	8d 30       	cpi	r24, 0x0D	; 13
     bd0:	71 f4       	brne	.+28     	; 0xbee <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
     bd2:	0e 94 46 0a 	call	0x148c	; 0x148c <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
     bd6:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <gu8_counter>
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	e3 51       	subi	r30, 0x13	; 19
     bde:	fe 4f       	sbci	r31, 0xFE	; 254
     be0:	10 82       	st	Z, r1
		gu8_counter = 0;
     be2:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <gu8_counter>
		gu8_flag = 1;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <gu8_flag>
     bec:	1d c0       	rjmp	.+58     	; 0xc28 <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
     bee:	88 30       	cpi	r24, 0x08	; 8
     bf0:	51 f4       	brne	.+20     	; 0xc06 <Uart_RXC_ISR+0x5a>
     bf2:	99 23       	and	r25, r25
     bf4:	41 f0       	breq	.+16     	; 0xc06 <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
     bf6:	0e 94 46 0a 	call	0x148c	; 0x148c <Uart_sendByte>
		gu8_counter--;
     bfa:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <gu8_counter>
     bfe:	81 50       	subi	r24, 0x01	; 1
     c00:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <gu8_counter>
     c04:	11 c0       	rjmp	.+34     	; 0xc28 <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
     c06:	88 30       	cpi	r24, 0x08	; 8
     c08:	79 f0       	breq	.+30     	; 0xc28 <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
     c0a:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <gu8_visibility>
     c0e:	91 30       	cpi	r25, 0x01	; 1
     c10:	21 f4       	brne	.+8      	; 0xc1a <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
     c12:	8a e2       	ldi	r24, 0x2A	; 42
     c14:	0e 94 46 0a 	call	0x148c	; 0x148c <Uart_sendByte>
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
     c1a:	0e 94 46 0a 	call	0x148c	; 0x148c <Uart_sendByte>
		}
		gu8_counter++;
     c1e:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <gu8_counter>
     c22:	8f 5f       	subi	r24, 0xFF	; 255
     c24:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <gu8_counter>
	}
}
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
     c2e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
     c32:	83 30       	cpi	r24, 0x03	; 3
     c34:	81 f0       	breq	.+32     	; 0xc56 <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
     c36:	0e 94 30 0a 	call	0x1460	; 0x1460 <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	11 f0       	breq	.+4      	; 0xc42 <Terminal_init+0x14>
     c3e:	87 30       	cpi	r24, 0x07	; 7
     c40:	49 f4       	brne	.+18     	; 0xc54 <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
     c42:	86 ed       	ldi	r24, 0xD6	; 214
     c44:	95 e0       	ldi	r25, 0x05	; 5
     c46:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
     c4a:	83 e0       	ldi	r24, 0x03	; 3
     c4c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
     c54:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
     c56:	08 95       	ret

00000c58 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	81 f0       	breq	.+32     	; 0xc80 <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
     c60:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <genu_TerminalModuleState>
     c64:	22 30       	cpi	r18, 0x02	; 2
     c66:	79 f0       	breq	.+30     	; 0xc86 <Terminal_Out+0x2e>
     c68:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
     c6a:	0e 94 ad 09 	call	0x135a	; 0x135a <stringLength>
     c6e:	68 2f       	mov	r22, r24
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	ce 01       	movw	r24, r28
     c74:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	21 f0       	breq	.+8      	; 0xc84 <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	03 c0       	rjmp	.+6      	; 0xc86 <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
     c80:	24 e0       	ldi	r18, 0x04	; 4
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
     c84:	21 e0       	ldi	r18, 0x01	; 1
}
     c86:	82 2f       	mov	r24, r18
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
     c8e:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
     c90:	89 2b       	or	r24, r25
     c92:	a1 f0       	breq	.+40     	; 0xcbc <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
     c94:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	99 f0       	breq	.+38     	; 0xcc2 <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
     c9c:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <gu8_flag>
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	71 f4       	brne	.+28     	; 0xcc0 <Terminal_In+0x32>
	{
		gu8_flag = 0;
     ca4:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
     ca8:	8d ee       	ldi	r24, 0xED	; 237
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	0e 94 1f 0a 	call	0x143e	; 0x143e <stringCopy>
		EmptyString(gau8_data);
     cb0:	8d ee       	ldi	r24, 0xED	; 237
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	0e 94 13 0a 	call	0x1426	; 0x1426 <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
     cb8:	85 e0       	ldi	r24, 0x05	; 5
     cba:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
     cbc:	84 e0       	ldi	r24, 0x04	; 4
     cbe:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
     cc0:	81 e0       	ldi	r24, 0x01	; 1
}
     cc2:	08 95       	ret

00000cc4 <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
     cca:	08 95       	ret

00000ccc <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
     ccc:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	08 95       	ret

00000cd4 <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
     cd4:	0e 94 22 03 	call	0x644	; 0x644 <App_start>
     cd8:	ff cf       	rjmp	.-2      	; 0xcd8 <main+0x4>

00000cda <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
     cda:	2f 92       	push	r2
     cdc:	3f 92       	push	r3
     cde:	4f 92       	push	r4
     ce0:	5f 92       	push	r5
     ce2:	6f 92       	push	r6
     ce4:	7f 92       	push	r7
     ce6:	8f 92       	push	r8
     ce8:	9f 92       	push	r9
     cea:	af 92       	push	r10
     cec:	bf 92       	push	r11
     cee:	cf 92       	push	r12
     cf0:	df 92       	push	r13
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <Delay_ms+0x26>
     d00:	00 d0       	rcall	.+0      	; 0xd02 <Delay_ms+0x28>
     d02:	1f 92       	push	r1
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	22 2e       	mov	r2, r18
     d0a:	33 2e       	mov	r3, r19
     d0c:	44 2e       	mov	r4, r20
     d0e:	55 2e       	mov	r5, r21
     d10:	66 2e       	mov	r6, r22
     d12:	79 83       	std	Y+1, r23	; 0x01
     d14:	8a 83       	std	Y+2, r24	; 0x02
     d16:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
     d18:	91 2c       	mov	r9, r1
     d1a:	1d 82       	std	Y+5, r1	; 0x05
     d1c:	1c 82       	std	Y+4, r1	; 0x04
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	e0 e0       	ldi	r30, 0x00	; 0
     d24:	71 2c       	mov	r7, r1
     d26:	81 2c       	mov	r8, r1
     d28:	3d c0       	rjmp	.+122    	; 0xda4 <Delay_ms+0xca>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
     d2a:	2c 2d       	mov	r18, r12
     d2c:	3d 2d       	mov	r19, r13
     d2e:	4e 2d       	mov	r20, r14
     d30:	5f 2d       	mov	r21, r15
     d32:	60 2f       	mov	r22, r16
     d34:	71 2f       	mov	r23, r17
     d36:	8a 2d       	mov	r24, r10
     d38:	9b 2d       	mov	r25, r11
     d3a:	a1 e0       	ldi	r26, 0x01	; 1
     d3c:	0e 94 04 0b 	call	0x1608	; 0x1608 <__adddi3_s8>
     d40:	c2 2e       	mov	r12, r18
     d42:	d3 2e       	mov	r13, r19
     d44:	e4 2e       	mov	r14, r20
     d46:	f5 2e       	mov	r15, r21
     d48:	06 2f       	mov	r16, r22
     d4a:	17 2f       	mov	r17, r23
     d4c:	a8 2e       	mov	r10, r24
     d4e:	b9 2e       	mov	r11, r25
     d50:	08 c0       	rjmp	.+16     	; 0xd62 <Delay_ms+0x88>
     d52:	c1 2c       	mov	r12, r1
     d54:	d1 2c       	mov	r13, r1
     d56:	e1 2c       	mov	r14, r1
     d58:	f1 2c       	mov	r15, r1
     d5a:	00 e0       	ldi	r16, 0x00	; 0
     d5c:	10 e0       	ldi	r17, 0x00	; 0
     d5e:	a1 2c       	mov	r10, r1
     d60:	b1 2c       	mov	r11, r1
     d62:	2c 2d       	mov	r18, r12
     d64:	3d 2d       	mov	r19, r13
     d66:	4e 2d       	mov	r20, r14
     d68:	5f 2d       	mov	r21, r15
     d6a:	60 2f       	mov	r22, r16
     d6c:	71 2f       	mov	r23, r17
     d6e:	8a 2d       	mov	r24, r10
     d70:	9b 2d       	mov	r25, r11
     d72:	ac e0       	ldi	r26, 0x0C	; 12
     d74:	0e 94 19 0b 	call	0x1632	; 0x1632 <__cmpdi2_s8>
     d78:	c1 f2       	breq	.-80     	; 0xd2a <Delay_ms+0x50>
     d7a:	b8 f2       	brcs	.-82     	; 0xd2a <Delay_ms+0x50>
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
     d7e:	29 2d       	mov	r18, r9
     d80:	3d 81       	ldd	r19, Y+5	; 0x05
     d82:	48 2f       	mov	r20, r24
     d84:	5b 2f       	mov	r21, r27
     d86:	6f 2f       	mov	r22, r31
     d88:	7e 2f       	mov	r23, r30
     d8a:	87 2d       	mov	r24, r7
     d8c:	98 2d       	mov	r25, r8
     d8e:	a1 e0       	ldi	r26, 0x01	; 1
     d90:	0e 94 04 0b 	call	0x1608	; 0x1608 <__adddi3_s8>
     d94:	92 2e       	mov	r9, r18
     d96:	3d 83       	std	Y+5, r19	; 0x05
     d98:	4c 83       	std	Y+4, r20	; 0x04
     d9a:	b5 2f       	mov	r27, r21
     d9c:	f6 2f       	mov	r31, r22
     d9e:	e7 2f       	mov	r30, r23
     da0:	78 2e       	mov	r7, r24
     da2:	89 2e       	mov	r8, r25
     da4:	29 2d       	mov	r18, r9
     da6:	3d 81       	ldd	r19, Y+5	; 0x05
     da8:	4c 81       	ldd	r20, Y+4	; 0x04
     daa:	5b 2f       	mov	r21, r27
     dac:	6f 2f       	mov	r22, r31
     dae:	7e 2f       	mov	r23, r30
     db0:	87 2d       	mov	r24, r7
     db2:	98 2d       	mov	r25, r8
     db4:	a2 2c       	mov	r10, r2
     db6:	b3 2c       	mov	r11, r3
     db8:	c4 2c       	mov	r12, r4
     dba:	d5 2c       	mov	r13, r5
     dbc:	e6 2c       	mov	r14, r6
     dbe:	f9 80       	ldd	r15, Y+1	; 0x01
     dc0:	0a 81       	ldd	r16, Y+2	; 0x02
     dc2:	1b 81       	ldd	r17, Y+3	; 0x03
     dc4:	0e 94 10 0b 	call	0x1620	; 0x1620 <__cmpdi2>
     dc8:	20 f2       	brcs	.-120    	; 0xd52 <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	df 90       	pop	r13
     de2:	cf 90       	pop	r12
     de4:	bf 90       	pop	r11
     de6:	af 90       	pop	r10
     de8:	9f 90       	pop	r9
     dea:	8f 90       	pop	r8
     dec:	7f 90       	pop	r7
     dee:	6f 90       	pop	r6
     df0:	5f 90       	pop	r5
     df2:	4f 90       	pop	r4
     df4:	3f 90       	pop	r3
     df6:	2f 90       	pop	r2
     df8:	08 95       	ret

00000dfa <Ext_INT0_init>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
     dfa:	9b b7       	in	r25, 0x3b	; 59
     dfc:	90 64       	ori	r25, 0x40	; 64
     dfe:	9b bf       	out	0x3b, r25	; 59
     e00:	95 b7       	in	r25, 0x35	; 53
     e02:	89 2b       	or	r24, r25
     e04:	85 bf       	out	0x35, r24	; 53
     e06:	08 95       	ret

00000e08 <INT0_setCallBack>:
     e08:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <INT0_CallBackPtr+0x1>
     e0c:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <INT0_CallBackPtr>
     e10:	08 95       	ret

00000e12 <__vector_1>:
     e12:	1f 92       	push	r1
     e14:	0f 92       	push	r0
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	0f 92       	push	r0
     e1a:	11 24       	eor	r1, r1
     e1c:	2f 93       	push	r18
     e1e:	3f 93       	push	r19
     e20:	4f 93       	push	r20
     e22:	5f 93       	push	r21
     e24:	6f 93       	push	r22
     e26:	7f 93       	push	r23
     e28:	8f 93       	push	r24
     e2a:	9f 93       	push	r25
     e2c:	af 93       	push	r26
     e2e:	bf 93       	push	r27
     e30:	ef 93       	push	r30
     e32:	ff 93       	push	r31
     e34:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <INT0_CallBackPtr>
     e38:	f0 91 f2 02 	lds	r31, 0x02F2	; 0x8002f2 <INT0_CallBackPtr+0x1>
     e3c:	09 95       	icall
     e3e:	ff 91       	pop	r31
     e40:	ef 91       	pop	r30
     e42:	bf 91       	pop	r27
     e44:	af 91       	pop	r26
     e46:	9f 91       	pop	r25
     e48:	8f 91       	pop	r24
     e4a:	7f 91       	pop	r23
     e4c:	6f 91       	pop	r22
     e4e:	5f 91       	pop	r21
     e50:	4f 91       	pop	r20
     e52:	3f 91       	pop	r19
     e54:	2f 91       	pop	r18
     e56:	0f 90       	pop	r0
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	0f 90       	pop	r0
     e5c:	1f 90       	pop	r1
     e5e:	18 95       	reti

00000e60 <__vector_2>:
     e60:	1f 92       	push	r1
     e62:	0f 92       	push	r0
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	0f 92       	push	r0
     e68:	11 24       	eor	r1, r1
     e6a:	2f 93       	push	r18
     e6c:	3f 93       	push	r19
     e6e:	4f 93       	push	r20
     e70:	5f 93       	push	r21
     e72:	6f 93       	push	r22
     e74:	7f 93       	push	r23
     e76:	8f 93       	push	r24
     e78:	9f 93       	push	r25
     e7a:	af 93       	push	r26
     e7c:	bf 93       	push	r27
     e7e:	ef 93       	push	r30
     e80:	ff 93       	push	r31
     e82:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <INT1_CallBackPtr>
     e86:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <INT1_CallBackPtr+0x1>
     e8a:	09 95       	icall
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	bf 91       	pop	r27
     e92:	af 91       	pop	r26
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	7f 91       	pop	r23
     e9a:	6f 91       	pop	r22
     e9c:	5f 91       	pop	r21
     e9e:	4f 91       	pop	r20
     ea0:	3f 91       	pop	r19
     ea2:	2f 91       	pop	r18
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <__vector_3>:
}
ISR(INT2_IRQ)
{
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	2f 93       	push	r18
     eba:	3f 93       	push	r19
     ebc:	4f 93       	push	r20
     ebe:	5f 93       	push	r21
     ec0:	6f 93       	push	r22
     ec2:	7f 93       	push	r23
     ec4:	8f 93       	push	r24
     ec6:	9f 93       	push	r25
     ec8:	af 93       	push	r26
     eca:	bf 93       	push	r27
     ecc:	ef 93       	push	r30
     ece:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
     ed0:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <INT2_CallBackPtr>
     ed4:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <INT2_CallBackPtr+0x1>
     ed8:	09 95       	icall
}
     eda:	ff 91       	pop	r31
     edc:	ef 91       	pop	r30
     ede:	bf 91       	pop	r27
     ee0:	af 91       	pop	r26
     ee2:	9f 91       	pop	r25
     ee4:	8f 91       	pop	r24
     ee6:	7f 91       	pop	r23
     ee8:	6f 91       	pop	r22
     eea:	5f 91       	pop	r21
     eec:	4f 91       	pop	r20
     eee:	3f 91       	pop	r19
     ef0:	2f 91       	pop	r18
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
     efc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     f00:	86 30       	cpi	r24, 0x06	; 6
     f02:	41 f0       	breq	.+16     	; 0xf14 <I2C_MasterInit+0x18>
     f04:	11 b8       	out	0x01, r1	; 1
     f06:	8a ef       	ldi	r24, 0xFA	; 250
     f08:	80 b9       	out	0x00, r24	; 0
     f0a:	86 e0       	ldi	r24, 0x06	; 6
     f0c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <genuI2C_Status>
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	08 95       	ret
     f14:	87 e0       	ldi	r24, 0x07	; 7
     f16:	08 95       	ret

00000f18 <I2C_MasterSendSTART>:
     f18:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     f1c:	86 30       	cpi	r24, 0x06	; 6
     f1e:	59 f4       	brne	.+22     	; 0xf36 <I2C_MasterSendSTART+0x1e>
     f20:	84 ea       	ldi	r24, 0xA4	; 164
     f22:	86 bf       	out	0x36, r24	; 54
     f24:	06 b6       	in	r0, 0x36	; 54
     f26:	07 fe       	sbrs	r0, 7
     f28:	fd cf       	rjmp	.-6      	; 0xf24 <I2C_MasterSendSTART+0xc>
     f2a:	81 b1       	in	r24, 0x01	; 1
     f2c:	88 7f       	andi	r24, 0xF8	; 248
     f2e:	88 30       	cpi	r24, 0x08	; 8
     f30:	21 f0       	breq	.+8      	; 0xf3a <I2C_MasterSendSTART+0x22>
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	08 95       	ret
     f36:	85 e0       	ldi	r24, 0x05	; 5
     f38:	08 95       	ret
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	08 95       	ret

00000f3e <I2C_MasterSendSlaveAddress>:
     f3e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
     f42:	96 30       	cpi	r25, 0x06	; 6
     f44:	29 f5       	brne	.+74     	; 0xf90 <I2C_MasterSendSlaveAddress+0x52>
     f46:	62 30       	cpi	r22, 0x02	; 2
     f48:	28 f5       	brcc	.+74     	; 0xf94 <I2C_MasterSendSlaveAddress+0x56>
     f4a:	88 23       	and	r24, r24
     f4c:	2c f1       	brlt	.+74     	; 0xf98 <I2C_MasterSendSlaveAddress+0x5a>
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	68 2b       	or	r22, r24
     f56:	63 b9       	out	0x03, r22	; 3
     f58:	84 e8       	ldi	r24, 0x84	; 132
     f5a:	86 bf       	out	0x36, r24	; 54
     f5c:	06 b6       	in	r0, 0x36	; 54
     f5e:	07 fe       	sbrs	r0, 7
     f60:	fd cf       	rjmp	.-6      	; 0xf5c <I2C_MasterSendSlaveAddress+0x1e>
     f62:	81 b1       	in	r24, 0x01	; 1
     f64:	88 7f       	andi	r24, 0xF8	; 248
     f66:	88 33       	cpi	r24, 0x38	; 56
     f68:	59 f0       	breq	.+22     	; 0xf80 <I2C_MasterSendSlaveAddress+0x42>
     f6a:	28 f4       	brcc	.+10     	; 0xf76 <I2C_MasterSendSlaveAddress+0x38>
     f6c:	88 31       	cpi	r24, 0x18	; 24
     f6e:	b1 f0       	breq	.+44     	; 0xf9c <I2C_MasterSendSlaveAddress+0x5e>
     f70:	80 32       	cpi	r24, 0x20	; 32
     f72:	41 f0       	breq	.+16     	; 0xf84 <I2C_MasterSendSlaveAddress+0x46>
     f74:	0b c0       	rjmp	.+22     	; 0xf8c <I2C_MasterSendSlaveAddress+0x4e>
     f76:	80 34       	cpi	r24, 0x40	; 64
     f78:	89 f0       	breq	.+34     	; 0xf9c <I2C_MasterSendSlaveAddress+0x5e>
     f7a:	88 34       	cpi	r24, 0x48	; 72
     f7c:	29 f0       	breq	.+10     	; 0xf88 <I2C_MasterSendSlaveAddress+0x4a>
     f7e:	06 c0       	rjmp	.+12     	; 0xf8c <I2C_MasterSendSlaveAddress+0x4e>
     f80:	88 e3       	ldi	r24, 0x38	; 56
     f82:	08 95       	ret
     f84:	80 e2       	ldi	r24, 0x20	; 32
     f86:	08 95       	ret
     f88:	88 e4       	ldi	r24, 0x48	; 72
     f8a:	08 95       	ret
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	08 95       	ret
     f90:	85 e0       	ldi	r24, 0x05	; 5
     f92:	08 95       	ret
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	08 95       	ret
     f98:	83 e0       	ldi	r24, 0x03	; 3
     f9a:	08 95       	ret
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	08 95       	ret

00000fa0 <I2C_MasterSendRepSTART>:
     fa0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     fa4:	86 30       	cpi	r24, 0x06	; 6
     fa6:	59 f4       	brne	.+22     	; 0xfbe <I2C_MasterSendRepSTART+0x1e>
     fa8:	84 ea       	ldi	r24, 0xA4	; 164
     faa:	86 bf       	out	0x36, r24	; 54
     fac:	06 b6       	in	r0, 0x36	; 54
     fae:	07 fe       	sbrs	r0, 7
     fb0:	fd cf       	rjmp	.-6      	; 0xfac <I2C_MasterSendRepSTART+0xc>
     fb2:	81 b1       	in	r24, 0x01	; 1
     fb4:	88 7f       	andi	r24, 0xF8	; 248
     fb6:	80 31       	cpi	r24, 0x10	; 16
     fb8:	21 f0       	breq	.+8      	; 0xfc2 <I2C_MasterSendRepSTART+0x22>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	08 95       	ret
     fbe:	85 e0       	ldi	r24, 0x05	; 5
     fc0:	08 95       	ret
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	08 95       	ret

00000fc6 <I2C_MasterSendSTOP>:
     fc6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     fca:	86 30       	cpi	r24, 0x06	; 6
     fcc:	39 f4       	brne	.+14     	; 0xfdc <I2C_MasterSendSTOP+0x16>
     fce:	84 e9       	ldi	r24, 0x94	; 148
     fd0:	86 bf       	out	0x36, r24	; 54
     fd2:	06 b6       	in	r0, 0x36	; 54
     fd4:	04 fc       	sbrc	r0, 4
     fd6:	fd cf       	rjmp	.-6      	; 0xfd2 <I2C_MasterSendSTOP+0xc>
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	08 95       	ret
     fdc:	85 e0       	ldi	r24, 0x05	; 5
     fde:	08 95       	ret

00000fe0 <I2C_MasterSendByte>:
     fe0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
     fe4:	96 30       	cpi	r25, 0x06	; 6
     fe6:	69 f4       	brne	.+26     	; 0x1002 <I2C_MasterSendByte+0x22>
     fe8:	83 b9       	out	0x03, r24	; 3
     fea:	84 e8       	ldi	r24, 0x84	; 132
     fec:	86 bf       	out	0x36, r24	; 54
     fee:	06 b6       	in	r0, 0x36	; 54
     ff0:	07 fe       	sbrs	r0, 7
     ff2:	fd cf       	rjmp	.-6      	; 0xfee <I2C_MasterSendByte+0xe>
     ff4:	81 b1       	in	r24, 0x01	; 1
     ff6:	88 7f       	andi	r24, 0xF8	; 248
     ff8:	88 32       	cpi	r24, 0x28	; 40
     ffa:	29 f0       	breq	.+10     	; 0x1006 <I2C_MasterSendByte+0x26>
     ffc:	80 33       	cpi	r24, 0x30	; 48
     ffe:	29 f4       	brne	.+10     	; 0x100a <I2C_MasterSendByte+0x2a>
    1000:	08 95       	ret
    1002:	85 e0       	ldi	r24, 0x05	; 5
    1004:	08 95       	ret
    1006:	88 e2       	ldi	r24, 0x28	; 40
    1008:	08 95       	ret
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	08 95       	ret

0000100e <I2C_MasterReceiveByte_ACK>:
    100e:	fc 01       	movw	r30, r24
    1010:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
    1014:	96 30       	cpi	r25, 0x06	; 6
    1016:	79 f4       	brne	.+30     	; 0x1036 <I2C_MasterReceiveByte_ACK+0x28>
    1018:	30 97       	sbiw	r30, 0x00	; 0
    101a:	79 f0       	breq	.+30     	; 0x103a <I2C_MasterReceiveByte_ACK+0x2c>
    101c:	84 ec       	ldi	r24, 0xC4	; 196
    101e:	86 bf       	out	0x36, r24	; 54
    1020:	06 b6       	in	r0, 0x36	; 54
    1022:	07 fe       	sbrs	r0, 7
    1024:	fd cf       	rjmp	.-6      	; 0x1020 <I2C_MasterReceiveByte_ACK+0x12>
    1026:	81 b1       	in	r24, 0x01	; 1
    1028:	88 7f       	andi	r24, 0xF8	; 248
    102a:	80 35       	cpi	r24, 0x50	; 80
    102c:	41 f4       	brne	.+16     	; 0x103e <I2C_MasterReceiveByte_ACK+0x30>
    102e:	83 b1       	in	r24, 0x03	; 3
    1030:	80 83       	st	Z, r24
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	08 95       	ret
    1036:	85 e0       	ldi	r24, 0x05	; 5
    1038:	08 95       	ret
    103a:	84 e0       	ldi	r24, 0x04	; 4
    103c:	08 95       	ret
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	08 95       	ret

00001042 <I2C_MasterReceiveByte_NACK>:
    1042:	fc 01       	movw	r30, r24
    1044:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
    1048:	96 30       	cpi	r25, 0x06	; 6
    104a:	79 f4       	brne	.+30     	; 0x106a <I2C_MasterReceiveByte_NACK+0x28>
    104c:	30 97       	sbiw	r30, 0x00	; 0
    104e:	79 f0       	breq	.+30     	; 0x106e <I2C_MasterReceiveByte_NACK+0x2c>
    1050:	84 e8       	ldi	r24, 0x84	; 132
    1052:	86 bf       	out	0x36, r24	; 54
    1054:	06 b6       	in	r0, 0x36	; 54
    1056:	07 fe       	sbrs	r0, 7
    1058:	fd cf       	rjmp	.-6      	; 0x1054 <I2C_MasterReceiveByte_NACK+0x12>
    105a:	81 b1       	in	r24, 0x01	; 1
    105c:	88 7f       	andi	r24, 0xF8	; 248
    105e:	88 35       	cpi	r24, 0x58	; 88
    1060:	41 f4       	brne	.+16     	; 0x1072 <I2C_MasterReceiveByte_NACK+0x30>
    1062:	83 b1       	in	r24, 0x03	; 3
    1064:	80 83       	st	Z, r24
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	08 95       	ret
    106a:	85 e0       	ldi	r24, 0x05	; 5
    106c:	08 95       	ret
    106e:	84 e0       	ldi	r24, 0x04	; 4
    1070:	08 95       	ret
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	08 95       	ret

00001076 <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
    1076:	7f 92       	push	r7
    1078:	8f 92       	push	r8
    107a:	9f 92       	push	r9
    107c:	af 92       	push	r10
    107e:	bf 92       	push	r11
    1080:	cf 92       	push	r12
    1082:	df 92       	push	r13
    1084:	ef 92       	push	r14
    1086:	ff 92       	push	r15
    1088:	0f 93       	push	r16
    108a:	1f 93       	push	r17
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	78 2e       	mov	r7, r24
    1092:	eb 01       	movw	r28, r22
    1094:	7a 01       	movw	r14, r20
    1096:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    1098:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
    109c:	86 30       	cpi	r24, 0x06	; 6
    109e:	09 f0       	breq	.+2      	; 0x10a2 <I2C_MasterReceiveGeneral+0x2c>
    10a0:	47 c0       	rjmp	.+142    	; 0x1130 <I2C_MasterReceiveGeneral+0xba>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
    10a2:	20 97       	sbiw	r28, 0x00	; 0
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <I2C_MasterReceiveGeneral+0x32>
    10a6:	46 c0       	rjmp	.+140    	; 0x1134 <I2C_MasterReceiveGeneral+0xbe>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
    10a8:	23 2b       	or	r18, r19
    10aa:	09 f4       	brne	.+2      	; 0x10ae <I2C_MasterReceiveGeneral+0x38>
    10ac:	45 c0       	rjmp	.+138    	; 0x1138 <I2C_MasterReceiveGeneral+0xc2>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    10ae:	77 20       	and	r7, r7
    10b0:	0c f4       	brge	.+2      	; 0x10b4 <I2C_MasterReceiveGeneral+0x3e>
    10b2:	44 c0       	rjmp	.+136    	; 0x113c <I2C_MasterReceiveGeneral+0xc6>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    10b4:	0e 94 8c 07 	call	0xf18	; 0xf18 <I2C_MasterSendSTART>
    10b8:	88 23       	and	r24, r24
    10ba:	09 f4       	brne	.+2      	; 0x10be <I2C_MasterReceiveGeneral+0x48>
    10bc:	4a c0       	rjmp	.+148    	; 0x1152 <I2C_MasterReceiveGeneral+0xdc>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	87 2d       	mov	r24, r7
    10c2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <I2C_MasterSendSlaveAddress>
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	d9 f5       	brne	.+118    	; 0x1140 <I2C_MasterReceiveGeneral+0xca>
    10ca:	0b c0       	rjmp	.+22     	; 0x10e2 <I2C_MasterReceiveGeneral+0x6c>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    10cc:	4e 01       	movw	r8, r28
    10ce:	8f ef       	ldi	r24, 0xFF	; 255
    10d0:	88 1a       	sub	r8, r24
    10d2:	98 0a       	sbc	r9, r24
    10d4:	88 81       	ld	r24, Y
    10d6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    10da:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    10dc:	88 23       	and	r24, r24
    10de:	c9 f1       	breq	.+114    	; 0x1152 <I2C_MasterReceiveGeneral+0xdc>
    10e0:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    10e2:	57 01       	movw	r10, r14
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	a8 1a       	sub	r10, r24
    10e8:	b1 08       	sbc	r11, r1
    10ea:	ef 28       	or	r14, r15
    10ec:	79 f7       	brne	.-34     	; 0x10cc <I2C_MasterReceiveGeneral+0x56>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
    10ee:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <I2C_MasterSendRepSTART>
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	39 f5       	brne	.+78     	; 0x1144 <I2C_MasterReceiveGeneral+0xce>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    10f6:	61 e0       	ldi	r22, 0x01	; 1
    10f8:	87 2d       	mov	r24, r7
    10fa:	0e 94 9f 07 	call	0xf3e	; 0xf3e <I2C_MasterSendSlaveAddress>
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	19 f5       	brne	.+70     	; 0x1148 <I2C_MasterReceiveGeneral+0xd2>
    1102:	08 c0       	rjmp	.+16     	; 0x1114 <I2C_MasterReceiveGeneral+0x9e>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
    1104:	e6 01       	movw	r28, r12
    1106:	21 96       	adiw	r28, 0x01	; 1
    1108:	c6 01       	movw	r24, r12
    110a:	0e 94 07 08 	call	0x100e	; 0x100e <I2C_MasterReceiveByte_ACK>
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	e9 f4       	brne	.+58     	; 0x114c <I2C_MasterReceiveGeneral+0xd6>
    1112:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
    1114:	01 50       	subi	r16, 0x01	; 1
    1116:	11 09       	sbc	r17, r1
    1118:	a9 f7       	brne	.-22     	; 0x1104 <I2C_MasterReceiveGeneral+0x8e>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
    111a:	c6 01       	movw	r24, r12
    111c:	0e 94 21 08 	call	0x1042	; 0x1042 <I2C_MasterReceiveByte_NACK>
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	b1 f4       	brne	.+44     	; 0x1150 <I2C_MasterReceiveGeneral+0xda>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
    1124:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <I2C_MasterSendSTOP>
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	99 f0       	breq	.+38     	; 0x1152 <I2C_MasterReceiveGeneral+0xdc>
		return I2C_STATUS_ERROR_NOK;
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	11 c0       	rjmp	.+34     	; 0x1152 <I2C_MasterReceiveGeneral+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    1130:	85 e0       	ldi	r24, 0x05	; 5
    1132:	0f c0       	rjmp	.+30     	; 0x1152 <I2C_MasterReceiveGeneral+0xdc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    1134:	84 e0       	ldi	r24, 0x04	; 4
    1136:	0d c0       	rjmp	.+26     	; 0x1152 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    1138:	84 e0       	ldi	r24, 0x04	; 4
    113a:	0b c0       	rjmp	.+22     	; 0x1152 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    113c:	83 e0       	ldi	r24, 0x03	; 3
    113e:	09 c0       	rjmp	.+18     	; 0x1152 <I2C_MasterReceiveGeneral+0xdc>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	07 c0       	rjmp	.+14     	; 0x1152 <I2C_MasterReceiveGeneral+0xdc>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	05 c0       	rjmp	.+10     	; 0x1152 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    1150:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	df 90       	pop	r13
    1160:	cf 90       	pop	r12
    1162:	bf 90       	pop	r11
    1164:	af 90       	pop	r10
    1166:	9f 90       	pop	r9
    1168:	8f 90       	pop	r8
    116a:	7f 90       	pop	r7
    116c:	08 95       	ret

0000116e <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
    116e:	bf 92       	push	r11
    1170:	cf 92       	push	r12
    1172:	df 92       	push	r13
    1174:	ef 92       	push	r14
    1176:	ff 92       	push	r15
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	18 2f       	mov	r17, r24
    1182:	06 2f       	mov	r16, r22
    1184:	ea 01       	movw	r28, r20
    1186:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    1188:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
    118c:	86 30       	cpi	r24, 0x06	; 6
    118e:	59 f5       	brne	.+86     	; 0x11e6 <I2C_MasterSendToLocation+0x78>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1190:	20 97       	sbiw	r28, 0x00	; 0
    1192:	59 f1       	breq	.+86     	; 0x11ea <I2C_MasterSendToLocation+0x7c>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    1194:	11 23       	and	r17, r17
    1196:	5c f1       	brlt	.+86     	; 0x11ee <I2C_MasterSendToLocation+0x80>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1198:	0e 94 8c 07 	call	0xf18	; 0xf18 <I2C_MasterSendSTART>
    119c:	88 23       	and	r24, r24
    119e:	61 f1       	breq	.+88     	; 0x11f8 <I2C_MasterSendToLocation+0x8a>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	81 2f       	mov	r24, r17
    11a4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <I2C_MasterSendSlaveAddress>
    11a8:	b8 2e       	mov	r11, r24
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	b8 12       	cpse	r11, r24
    11ae:	21 c0       	rjmp	.+66     	; 0x11f2 <I2C_MasterSendToLocation+0x84>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    11b0:	80 2f       	mov	r24, r16
    11b2:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <I2C_MasterSendByte>
    11b6:	81 11       	cpse	r24, r1
    11b8:	0c c0       	rjmp	.+24     	; 0x11d2 <I2C_MasterSendToLocation+0x64>
    11ba:	1e c0       	rjmp	.+60     	; 0x11f8 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    11bc:	6e 01       	movw	r12, r28
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	c8 1a       	sub	r12, r24
    11c2:	d8 0a       	sbc	r13, r24
    11c4:	88 81       	ld	r24, Y
    11c6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <I2C_MasterSendByte>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    11ca:	78 01       	movw	r14, r16
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    11cc:	88 23       	and	r24, r24
    11ce:	a1 f0       	breq	.+40     	; 0x11f8 <I2C_MasterSendToLocation+0x8a>
    11d0:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    11d2:	87 01       	movw	r16, r14
    11d4:	01 50       	subi	r16, 0x01	; 1
    11d6:	11 09       	sbc	r17, r1
    11d8:	ef 28       	or	r14, r15
    11da:	81 f7       	brne	.-32     	; 0x11bc <I2C_MasterSendToLocation+0x4e>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    11dc:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <I2C_MasterSendSTOP>
    11e0:	81 11       	cpse	r24, r1
    11e2:	09 c0       	rjmp	.+18     	; 0x11f6 <I2C_MasterSendToLocation+0x88>
    11e4:	09 c0       	rjmp	.+18     	; 0x11f8 <I2C_MasterSendToLocation+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    11e6:	85 e0       	ldi	r24, 0x05	; 5
    11e8:	07 c0       	rjmp	.+14     	; 0x11f8 <I2C_MasterSendToLocation+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    11ea:	84 e0       	ldi	r24, 0x04	; 4
    11ec:	05 c0       	rjmp	.+10     	; 0x11f8 <I2C_MasterSendToLocation+0x8a>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    11ee:	83 e0       	ldi	r24, 0x03	; 3
    11f0:	03 c0       	rjmp	.+6      	; 0x11f8 <I2C_MasterSendToLocation+0x8a>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	01 c0       	rjmp	.+2      	; 0x11f8 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
    11f6:	8b 2d       	mov	r24, r11
}
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	ff 90       	pop	r15
    1202:	ef 90       	pop	r14
    1204:	df 90       	pop	r13
    1206:	cf 90       	pop	r12
    1208:	bf 90       	pop	r11
    120a:	08 95       	ret

0000120c <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	1f 92       	push	r1
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
    121c:	89 01       	movw	r16, r18
    121e:	9a 01       	movw	r18, r20
    1220:	41 e0       	ldi	r20, 0x01	; 1
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	be 01       	movw	r22, r28
    1226:	6f 5f       	subi	r22, 0xFF	; 255
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	0e 94 3b 08 	call	0x1076	; 0x1076 <I2C_MasterReceiveGeneral>
}
    122e:	0f 90       	pop	r0
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	08 95       	ret

0000123a <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
    123a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genuSpi_Status>
    123e:	87 30       	cpi	r24, 0x07	; 7
    1240:	41 f1       	breq	.+80     	; 0x1292 <Spi_init+0x58>
    1242:	87 b3       	in	r24, 0x17	; 23
    1244:	80 6b       	ori	r24, 0xB0	; 176
    1246:	87 bb       	out	0x17, r24	; 23
    1248:	87 b3       	in	r24, 0x17	; 23
    124a:	8f 7b       	andi	r24, 0xBF	; 191
    124c:	87 bb       	out	0x17, r24	; 23
    124e:	88 b3       	in	r24, 0x18	; 24
    1250:	80 61       	ori	r24, 0x10	; 16
    1252:	88 bb       	out	0x18, r24	; 24
    1254:	8d b1       	in	r24, 0x0d	; 13
    1256:	80 61       	ori	r24, 0x10	; 16
    1258:	8d b9       	out	0x0d, r24	; 13
    125a:	8d b1       	in	r24, 0x0d	; 13
    125c:	8f 7d       	andi	r24, 0xDF	; 223
    125e:	8d b9       	out	0x0d, r24	; 13
    1260:	8d b1       	in	r24, 0x0d	; 13
    1262:	87 7f       	andi	r24, 0xF7	; 247
    1264:	8d b9       	out	0x0d, r24	; 13
    1266:	8d b1       	in	r24, 0x0d	; 13
    1268:	8b 7f       	andi	r24, 0xFB	; 251
    126a:	8d b9       	out	0x0d, r24	; 13
    126c:	8e b1       	in	r24, 0x0e	; 14
    126e:	81 60       	ori	r24, 0x01	; 1
    1270:	8e b9       	out	0x0e, r24	; 14
    1272:	8d b1       	in	r24, 0x0d	; 13
    1274:	8e 7f       	andi	r24, 0xFE	; 254
    1276:	8d b9       	out	0x0d, r24	; 13
    1278:	8d b1       	in	r24, 0x0d	; 13
    127a:	8d 7f       	andi	r24, 0xFD	; 253
    127c:	8d b9       	out	0x0d, r24	; 13
    127e:	8d b1       	in	r24, 0x0d	; 13
    1280:	8d b9       	out	0x0d, r24	; 13
    1282:	8d b1       	in	r24, 0x0d	; 13
    1284:	80 64       	ori	r24, 0x40	; 64
    1286:	8d b9       	out	0x0d, r24	; 13
    1288:	87 e0       	ldi	r24, 0x07	; 7
    128a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <genuSpi_Status>
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	08 95       	ret
    1292:	88 e0       	ldi	r24, 0x08	; 8
    1294:	08 95       	ret

00001296 <Spi_MasterSendByte>:
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	1f 92       	push	r1
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genuSpi_Status>
    12a4:	97 30       	cpi	r25, 0x07	; 7
    12a6:	39 f4       	brne	.+14     	; 0x12b6 <Spi_MasterSendByte+0x20>
    12a8:	8f b9       	out	0x0f, r24	; 15
    12aa:	77 9b       	sbis	0x0e, 7	; 14
    12ac:	fe cf       	rjmp	.-4      	; 0x12aa <Spi_MasterSendByte+0x14>
    12ae:	8f b1       	in	r24, 0x0f	; 15
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <Spi_MasterSendByte+0x22>
    12b6:	86 e0       	ldi	r24, 0x06	; 6
    12b8:	0f 90       	pop	r0
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <Spi_MasterSendPacket>:
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <genuSpi_Status>
    12ce:	27 30       	cpi	r18, 0x07	; 7
    12d0:	a1 f4       	brne	.+40     	; 0x12fa <Spi_MasterSendPacket+0x3a>
    12d2:	8b 01       	movw	r16, r22
    12d4:	7c 01       	movw	r14, r24
    12d6:	c0 e0       	ldi	r28, 0x00	; 0
    12d8:	09 c0       	rjmp	.+18     	; 0x12ec <Spi_MasterSendPacket+0x2c>
    12da:	f7 01       	movw	r30, r14
    12dc:	e2 0f       	add	r30, r18
    12de:	f3 1f       	adc	r31, r19
    12e0:	80 81       	ld	r24, Z
    12e2:	0e 94 4b 09 	call	0x1296	; 0x1296 <Spi_MasterSendByte>
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	51 f4       	brne	.+20     	; 0x12fe <Spi_MasterSendPacket+0x3e>
    12ea:	cf 5f       	subi	r28, 0xFF	; 255
    12ec:	2c 2f       	mov	r18, r28
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	20 17       	cp	r18, r16
    12f2:	31 07       	cpc	r19, r17
    12f4:	90 f3       	brcs	.-28     	; 0x12da <Spi_MasterSendPacket+0x1a>
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	03 c0       	rjmp	.+6      	; 0x1300 <Spi_MasterSendPacket+0x40>
    12fa:	86 e0       	ldi	r24, 0x06	; 6
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <Spi_MasterSendPacket+0x40>
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	ff 90       	pop	r15
    1308:	ef 90       	pop	r14
    130a:	08 95       	ret

0000130c <__vector_12>:


    130c:	1f 92       	push	r1
    130e:	0f 92       	push	r0
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	0f 92       	push	r0
    1314:	11 24       	eor	r1, r1
    1316:	2f 93       	push	r18
    1318:	3f 93       	push	r19
    131a:	4f 93       	push	r20
    131c:	5f 93       	push	r21
    131e:	6f 93       	push	r22
    1320:	7f 93       	push	r23
    1322:	8f 93       	push	r24
    1324:	9f 93       	push	r25
    1326:	af 93       	push	r26
    1328:	bf 93       	push	r27
    132a:	ef 93       	push	r30
    132c:	ff 93       	push	r31
    132e:	e0 91 f3 02 	lds	r30, 0x02F3	; 0x8002f3 <SPI_STC_CallBackPtr>
    1332:	f0 91 f4 02 	lds	r31, 0x02F4	; 0x8002f4 <SPI_STC_CallBackPtr+0x1>
    1336:	09 95       	icall
    1338:	ff 91       	pop	r31
    133a:	ef 91       	pop	r30
    133c:	bf 91       	pop	r27
    133e:	af 91       	pop	r26
    1340:	9f 91       	pop	r25
    1342:	8f 91       	pop	r24
    1344:	7f 91       	pop	r23
    1346:	6f 91       	pop	r22
    1348:	5f 91       	pop	r21
    134a:	4f 91       	pop	r20
    134c:	3f 91       	pop	r19
    134e:	2f 91       	pop	r18
    1350:	0f 90       	pop	r0
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	0f 90       	pop	r0
    1356:	1f 90       	pop	r1
    1358:	18 95       	reti

0000135a <stringLength>:
        else if(string1[u8_loopIndex] < string2[u8_loopIndex])
            return 2;
        u8_loopIndex++;
    }
    return 3;
}
    135a:	ac 01       	movw	r20, r24
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <stringLength+0x8>
    1360:	8f 5f       	subi	r24, 0xFF	; 255
    1362:	fa 01       	movw	r30, r20
    1364:	e8 0f       	add	r30, r24
    1366:	f1 1d       	adc	r31, r1
    1368:	20 81       	ld	r18, Z
    136a:	21 11       	cpse	r18, r1
    136c:	f9 cf       	rjmp	.-14     	; 0x1360 <stringLength+0x6>
    136e:	8f 5f       	subi	r24, 0xFF	; 255
    1370:	08 95       	ret

00001372 <stringCompare>:
    1372:	ff 92       	push	r15
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	ec 01       	movw	r28, r24
    137e:	8b 01       	movw	r16, r22
    1380:	0e 94 ad 09 	call	0x135a	; 0x135a <stringLength>
    1384:	f8 2e       	mov	r15, r24
    1386:	c8 01       	movw	r24, r16
    1388:	0e 94 ad 09 	call	0x135a	; 0x135a <stringLength>
    138c:	8f 15       	cp	r24, r15
    138e:	a8 f0       	brcs	.+42     	; 0x13ba <stringCompare+0x48>
    1390:	f8 16       	cp	r15, r24
    1392:	a8 f0       	brcs	.+42     	; 0x13be <stringCompare+0x4c>
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	07 c0       	rjmp	.+14     	; 0x13a6 <stringCompare+0x34>
    1398:	f8 01       	movw	r30, r16
    139a:	e8 0f       	add	r30, r24
    139c:	f9 1f       	adc	r31, r25
    139e:	80 81       	ld	r24, Z
    13a0:	28 13       	cpse	r18, r24
    13a2:	0f c0       	rjmp	.+30     	; 0x13c2 <stringCompare+0x50>
    13a4:	3f 5f       	subi	r19, 0xFF	; 255
    13a6:	83 2f       	mov	r24, r19
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	fe 01       	movw	r30, r28
    13ac:	e8 0f       	add	r30, r24
    13ae:	f9 1f       	adc	r31, r25
    13b0:	20 81       	ld	r18, Z
    13b2:	21 11       	cpse	r18, r1
    13b4:	f1 cf       	rjmp	.-30     	; 0x1398 <stringCompare+0x26>
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	05 c0       	rjmp	.+10     	; 0x13c4 <stringCompare+0x52>
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	03 c0       	rjmp	.+6      	; 0x13c4 <stringCompare+0x52>
    13be:	83 e0       	ldi	r24, 0x03	; 3
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <stringCompare+0x52>
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	0f 91       	pop	r16
    13cc:	ff 90       	pop	r15
    13ce:	08 95       	ret

000013d0 <stringConcatenate>:
    13d0:	ff 92       	push	r15
    13d2:	0f 93       	push	r16
    13d4:	1f 93       	push	r17
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	ec 01       	movw	r28, r24
    13dc:	8b 01       	movw	r16, r22
    13de:	cb 01       	movw	r24, r22
    13e0:	0e 94 ad 09 	call	0x135a	; 0x135a <stringLength>
    13e4:	f8 2e       	mov	r15, r24
    13e6:	ce 01       	movw	r24, r28
    13e8:	0e 94 ad 09 	call	0x135a	; 0x135a <stringLength>
    13ec:	81 50       	subi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0b c0       	rjmp	.+22     	; 0x1408 <stringConcatenate+0x38>
    13f2:	28 0f       	add	r18, r24
    13f4:	31 1d       	adc	r19, r1
    13f6:	fe 01       	movw	r30, r28
    13f8:	e2 0f       	add	r30, r18
    13fa:	f3 1f       	adc	r31, r19
    13fc:	d8 01       	movw	r26, r16
    13fe:	a9 0f       	add	r26, r25
    1400:	b1 1d       	adc	r27, r1
    1402:	2c 91       	ld	r18, X
    1404:	20 83       	st	Z, r18
    1406:	9f 5f       	subi	r25, 0xFF	; 255
    1408:	29 2f       	mov	r18, r25
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	4f 2d       	mov	r20, r15
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	41 50       	subi	r20, 0x01	; 1
    1412:	51 09       	sbc	r21, r1
    1414:	42 17       	cp	r20, r18
    1416:	53 07       	cpc	r21, r19
    1418:	64 f7       	brge	.-40     	; 0x13f2 <stringConcatenate+0x22>
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	0f 91       	pop	r16
    1422:	ff 90       	pop	r15
    1424:	08 95       	ret

00001426 <EmptyString>:

void EmptyString(uint8_t *string)
{
    1426:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
    1428:	90 e0       	ldi	r25, 0x00	; 0
	while(string[u8_loopIndex] != '\0')
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <EmptyString+0xa>
		string[u8_loopIndex++] = '\0';
    142c:	9f 5f       	subi	r25, 0xFF	; 255
    142e:	10 82       	st	Z, r1
}

void EmptyString(uint8_t *string)
{
	uint8_t u8_loopIndex=0;
	while(string[u8_loopIndex] != '\0')
    1430:	fa 01       	movw	r30, r20
    1432:	e9 0f       	add	r30, r25
    1434:	f1 1d       	adc	r31, r1
    1436:	20 81       	ld	r18, Z
    1438:	21 11       	cpse	r18, r1
    143a:	f8 cf       	rjmp	.-16     	; 0x142c <EmptyString+0x6>
		string[u8_loopIndex++] = '\0';
}
    143c:	08 95       	ret

0000143e <stringCopy>:

void stringCopy(uint8_t* source, uint8_t* destination)
{
    143e:	dc 01       	movw	r26, r24
    uint8_t u8_loopIndex=0;
    1440:	90 e0       	ldi	r25, 0x00	; 0
    while(source[u8_loopIndex] != '\0')
    1442:	05 c0       	rjmp	.+10     	; 0x144e <stringCopy+0x10>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
    1444:	fb 01       	movw	r30, r22
    1446:	e2 0f       	add	r30, r18
    1448:	f3 1f       	adc	r31, r19
    144a:	40 83       	st	Z, r20
	    u8_loopIndex++;
    144c:	9f 5f       	subi	r25, 0xFF	; 255
}

void stringCopy(uint8_t* source, uint8_t* destination)
{
    uint8_t u8_loopIndex=0;
    while(source[u8_loopIndex] != '\0')
    144e:	29 2f       	mov	r18, r25
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	fd 01       	movw	r30, r26
    1454:	e2 0f       	add	r30, r18
    1456:	f3 1f       	adc	r31, r19
    1458:	40 81       	ld	r20, Z
    145a:	41 11       	cpse	r20, r1
    145c:	f3 cf       	rjmp	.-26     	; 0x1444 <stringCopy+0x6>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
	    u8_loopIndex++;
    }
}
    145e:	08 95       	ret

00001460 <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    1460:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <u8_Uart_Status>
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	81 f0       	breq	.+32     	; 0x1488 <Uart_init+0x28>
    1468:	10 bc       	out	0x20, r1	; 32
    146a:	8c e0       	ldi	r24, 0x0C	; 12
    146c:	89 b9       	out	0x09, r24	; 9
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	8b b9       	out	0x0b, r24	; 11
    1472:	88 e1       	ldi	r24, 0x18	; 24
    1474:	8a b9       	out	0x0a, r24	; 10
    1476:	80 e8       	ldi	r24, 0x80	; 128
    1478:	80 bd       	out	0x20, r24	; 32
    147a:	80 b5       	in	r24, 0x20	; 32
    147c:	86 68       	ori	r24, 0x86	; 134
    147e:	80 bd       	out	0x20, r24	; 32
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <u8_Uart_Status>
    1486:	08 95       	ret
    1488:	87 e0       	ldi	r24, 0x07	; 7
    148a:	08 95       	ret

0000148c <Uart_sendByte>:
    148c:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <u8_Uart_Status>
    1490:	99 23       	and	r25, r25
    1492:	29 f0       	breq	.+10     	; 0x149e <Uart_sendByte+0x12>
    1494:	5d 9b       	sbis	0x0b, 5	; 11
    1496:	fe cf       	rjmp	.-4      	; 0x1494 <Uart_sendByte+0x8>
    1498:	8c b9       	out	0x0c, r24	; 12
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	08 95       	ret
    149e:	86 e0       	ldi	r24, 0x06	; 6
    14a0:	08 95       	ret

000014a2 <Uart_sendPacket>:
    14a2:	ef 92       	push	r14
    14a4:	ff 92       	push	r15
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	20 91 f5 02 	lds	r18, 0x02F5	; 0x8002f5 <u8_Uart_Status>
    14b2:	22 23       	and	r18, r18
    14b4:	99 f0       	breq	.+38     	; 0x14dc <Uart_sendPacket+0x3a>
    14b6:	8b 01       	movw	r16, r22
    14b8:	7c 01       	movw	r14, r24
    14ba:	c0 e0       	ldi	r28, 0x00	; 0
    14bc:	d0 e0       	ldi	r29, 0x00	; 0
    14be:	09 c0       	rjmp	.+18     	; 0x14d2 <Uart_sendPacket+0x30>
    14c0:	f7 01       	movw	r30, r14
    14c2:	ec 0f       	add	r30, r28
    14c4:	fd 1f       	adc	r31, r29
    14c6:	80 81       	ld	r24, Z
    14c8:	0e 94 46 0a 	call	0x148c	; 0x148c <Uart_sendByte>
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	41 f4       	brne	.+16     	; 0x14e0 <Uart_sendPacket+0x3e>
    14d0:	21 96       	adiw	r28, 0x01	; 1
    14d2:	c0 17       	cp	r28, r16
    14d4:	d1 07       	cpc	r29, r17
    14d6:	a0 f3       	brcs	.-24     	; 0x14c0 <Uart_sendPacket+0x1e>
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	03 c0       	rjmp	.+6      	; 0x14e2 <Uart_sendPacket+0x40>
    14dc:	86 e0       	ldi	r24, 0x06	; 6
    14de:	01 c0       	rjmp	.+2      	; 0x14e2 <Uart_sendPacket+0x40>
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	ff 90       	pop	r15
    14ec:	ef 90       	pop	r14
    14ee:	08 95       	ret

000014f0 <Uart_EnableNotification_RXC>:
    14f0:	9c 01       	movw	r18, r24
    14f2:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <u8_Uart_Status>
    14f6:	99 23       	and	r25, r25
    14f8:	61 f0       	breq	.+24     	; 0x1512 <Uart_EnableNotification_RXC+0x22>
    14fa:	21 15       	cp	r18, r1
    14fc:	31 05       	cpc	r19, r1
    14fe:	59 f0       	breq	.+22     	; 0x1516 <Uart_EnableNotification_RXC+0x26>
    1500:	8a b1       	in	r24, 0x0a	; 10
    1502:	80 68       	ori	r24, 0x80	; 128
    1504:	8a b9       	out	0x0a, r24	; 10
    1506:	30 93 f9 02 	sts	0x02F9, r19	; 0x8002f9 <Uart_RXC_CallBackPtr+0x1>
    150a:	20 93 f8 02 	sts	0x02F8, r18	; 0x8002f8 <Uart_RXC_CallBackPtr>
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	08 95       	ret
    1512:	86 e0       	ldi	r24, 0x06	; 6
    1514:	08 95       	ret
    1516:	85 e0       	ldi	r24, 0x05	; 5
    1518:	08 95       	ret

0000151a <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    151a:	8c b1       	in	r24, 0x0c	; 12
}
    151c:	08 95       	ret

0000151e <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    151e:	1f 92       	push	r1
    1520:	0f 92       	push	r0
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	0f 92       	push	r0
    1526:	11 24       	eor	r1, r1
    1528:	2f 93       	push	r18
    152a:	3f 93       	push	r19
    152c:	4f 93       	push	r20
    152e:	5f 93       	push	r21
    1530:	6f 93       	push	r22
    1532:	7f 93       	push	r23
    1534:	8f 93       	push	r24
    1536:	9f 93       	push	r25
    1538:	af 93       	push	r26
    153a:	bf 93       	push	r27
    153c:	ef 93       	push	r30
    153e:	ff 93       	push	r31
    1540:	e0 91 fa 02 	lds	r30, 0x02FA	; 0x8002fa <Uart_TXC_CallBackPtr>
    1544:	f0 91 fb 02 	lds	r31, 0x02FB	; 0x8002fb <Uart_TXC_CallBackPtr+0x1>
    1548:	09 95       	icall
    154a:	ff 91       	pop	r31
    154c:	ef 91       	pop	r30
    154e:	bf 91       	pop	r27
    1550:	af 91       	pop	r26
    1552:	9f 91       	pop	r25
    1554:	8f 91       	pop	r24
    1556:	7f 91       	pop	r23
    1558:	6f 91       	pop	r22
    155a:	5f 91       	pop	r21
    155c:	4f 91       	pop	r20
    155e:	3f 91       	pop	r19
    1560:	2f 91       	pop	r18
    1562:	0f 90       	pop	r0
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	0f 90       	pop	r0
    1568:	1f 90       	pop	r1
    156a:	18 95       	reti

0000156c <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    156c:	1f 92       	push	r1
    156e:	0f 92       	push	r0
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	0f 92       	push	r0
    1574:	11 24       	eor	r1, r1
    1576:	2f 93       	push	r18
    1578:	3f 93       	push	r19
    157a:	4f 93       	push	r20
    157c:	5f 93       	push	r21
    157e:	6f 93       	push	r22
    1580:	7f 93       	push	r23
    1582:	8f 93       	push	r24
    1584:	9f 93       	push	r25
    1586:	af 93       	push	r26
    1588:	bf 93       	push	r27
    158a:	ef 93       	push	r30
    158c:	ff 93       	push	r31
    158e:	e0 91 f8 02 	lds	r30, 0x02F8	; 0x8002f8 <Uart_RXC_CallBackPtr>
    1592:	f0 91 f9 02 	lds	r31, 0x02F9	; 0x8002f9 <Uart_RXC_CallBackPtr+0x1>
    1596:	09 95       	icall
    1598:	ff 91       	pop	r31
    159a:	ef 91       	pop	r30
    159c:	bf 91       	pop	r27
    159e:	af 91       	pop	r26
    15a0:	9f 91       	pop	r25
    15a2:	8f 91       	pop	r24
    15a4:	7f 91       	pop	r23
    15a6:	6f 91       	pop	r22
    15a8:	5f 91       	pop	r21
    15aa:	4f 91       	pop	r20
    15ac:	3f 91       	pop	r19
    15ae:	2f 91       	pop	r18
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	0f 90       	pop	r0
    15b6:	1f 90       	pop	r1
    15b8:	18 95       	reti

000015ba <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    15ba:	1f 92       	push	r1
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	0f 92       	push	r0
    15c2:	11 24       	eor	r1, r1
    15c4:	2f 93       	push	r18
    15c6:	3f 93       	push	r19
    15c8:	4f 93       	push	r20
    15ca:	5f 93       	push	r21
    15cc:	6f 93       	push	r22
    15ce:	7f 93       	push	r23
    15d0:	8f 93       	push	r24
    15d2:	9f 93       	push	r25
    15d4:	af 93       	push	r26
    15d6:	bf 93       	push	r27
    15d8:	ef 93       	push	r30
    15da:	ff 93       	push	r31
    15dc:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <Uart_UDRE_CallBackPtr>
    15e0:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <Uart_UDRE_CallBackPtr+0x1>
    15e4:	09 95       	icall
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	bf 91       	pop	r27
    15ec:	af 91       	pop	r26
    15ee:	9f 91       	pop	r25
    15f0:	8f 91       	pop	r24
    15f2:	7f 91       	pop	r23
    15f4:	6f 91       	pop	r22
    15f6:	5f 91       	pop	r21
    15f8:	4f 91       	pop	r20
    15fa:	3f 91       	pop	r19
    15fc:	2f 91       	pop	r18
    15fe:	0f 90       	pop	r0
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	0f 90       	pop	r0
    1604:	1f 90       	pop	r1
    1606:	18 95       	reti

00001608 <__adddi3_s8>:
    1608:	00 24       	eor	r0, r0
    160a:	a7 fd       	sbrc	r26, 7
    160c:	00 94       	com	r0
    160e:	2a 0f       	add	r18, r26
    1610:	30 1d       	adc	r19, r0
    1612:	40 1d       	adc	r20, r0
    1614:	50 1d       	adc	r21, r0
    1616:	60 1d       	adc	r22, r0
    1618:	70 1d       	adc	r23, r0
    161a:	80 1d       	adc	r24, r0
    161c:	90 1d       	adc	r25, r0
    161e:	08 95       	ret

00001620 <__cmpdi2>:
    1620:	2a 15       	cp	r18, r10
    1622:	3b 05       	cpc	r19, r11
    1624:	4c 05       	cpc	r20, r12
    1626:	5d 05       	cpc	r21, r13
    1628:	6e 05       	cpc	r22, r14
    162a:	7f 05       	cpc	r23, r15
    162c:	80 07       	cpc	r24, r16
    162e:	91 07       	cpc	r25, r17
    1630:	08 95       	ret

00001632 <__cmpdi2_s8>:
    1632:	00 24       	eor	r0, r0
    1634:	a7 fd       	sbrc	r26, 7
    1636:	00 94       	com	r0
    1638:	2a 17       	cp	r18, r26
    163a:	30 05       	cpc	r19, r0
    163c:	40 05       	cpc	r20, r0
    163e:	50 05       	cpc	r21, r0
    1640:	60 05       	cpc	r22, r0
    1642:	70 05       	cpc	r23, r0
    1644:	80 05       	cpc	r24, r0
    1646:	90 05       	cpc	r25, r0
    1648:	08 95       	ret

0000164a <_exit>:
    164a:	f8 94       	cli

0000164c <__stop_program>:
    164c:	ff cf       	rjmp	.-2      	; 0x164c <__stop_program>
