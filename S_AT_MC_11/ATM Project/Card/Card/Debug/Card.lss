
Card.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c0  00800060  000017f2  00001886  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012e  00800220  00800220  00001a46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000371c  00000000  00000000  00001e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000104b  00000000  00000000  00005568  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002204  00000000  00000000  000065b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d28  00000000  00000000  000087b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000153f  00000000  00000000  000094e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b93  00000000  00000000  0000aa1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  0000e5b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__vector_1>
       8:	0c 94 0e 08 	jmp	0x101c	; 0x101c <__vector_2>
       c:	0c 94 35 08 	jmp	0x106a	; 0x106a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__vector_12>
      34:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__vector_13>
      38:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__vector_14>
      3c:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 32       	cpi	r26, 0x20	; 32
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	a0 e2       	ldi	r26, 0x20	; 32
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 34       	cpi	r26, 0x4E	; 78
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3f 07 	call	0xe7e	; 0xe7e <main>
      8a:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ATM_REQ_ISR>:
/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/*--*-*-*- FUNCTIONS IMPLEMENTATION -*-*-*-*-*-*/
#if REQUEST_MODE == INTERRUPT_REQUEST
void ATM_REQ_ISR(void)
{	
	if((gu8_USER_Mode_State == USER_IDLE) && (cgu8_ATM_Req == ATM_NOT_REQUESTED))
      92:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <gu8_USER_Mode_State>
      96:	81 11       	cpse	r24, r1
      98:	1c c0       	rjmp	.+56     	; 0xd2 <ATM_REQ_ISR+0x40>
      9a:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <cgu8_ATM_Req>
      9e:	91 11       	cpse	r25, r1
      a0:	18 c0       	rjmp	.+48     	; 0xd2 <ATM_REQ_ISR+0x40>
	{
		/* ATM Request Data from Card */
		if (gu8_CardMode == CARD_MODE_USER)
      a2:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <gu8_CardMode>
      a6:	81 30       	cpi	r24, 0x01	; 1
      a8:	19 f4       	brne	.+6      	; 0xb0 <ATM_REQ_ISR+0x1e>
		{
			cgu8_ATM_Req = ATM_REQUESTED;
      aa:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <cgu8_ATM_Req>
      ae:	08 95       	ret
		}else if(gu8_CardMode == CARD_MODE_ADMIN) // Card is in ADMIN Mode 
      b0:	81 11       	cpse	r24, r1
      b2:	17 c0       	rjmp	.+46     	; 0xe2 <ATM_REQ_ISR+0x50>
		{	//Send "**" to the atm to indicate that Card is in Admin mode
			SPI_SS_ENABLE();
      b4:	88 b3       	in	r24, 0x18	; 24
      b6:	8f 7e       	andi	r24, 0xEF	; 239
      b8:	88 bb       	out	0x18, r24	; 24
			Spi_MasterSendPacket((uint8_t*)"**",3);
      ba:	63 e0       	ldi	r22, 0x03	; 3
      bc:	70 e0       	ldi	r23, 0x00	; 0
      be:	85 e6       	ldi	r24, 0x65	; 101
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 3a 0a 	call	0x1474	; 0x1474 <Spi_MasterSendPacket>
			SPI_SS_DISABLE();
      c6:	88 b3       	in	r24, 0x18	; 24
      c8:	80 61       	ori	r24, 0x10	; 16
      ca:	88 bb       	out	0x18, r24	; 24
			cgu8_ATM_Req = ATM_NOT_REQUESTED;
      cc:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <cgu8_ATM_Req>
      d0:	08 95       	ret
		}
	}
	else if((gu8_USER_Mode_State == USER_BUSY) && (cgu8_ATM_Req == ATM_NOT_REQUESTED))
      d2:	81 30       	cpi	r24, 0x01	; 1
      d4:	31 f4       	brne	.+12     	; 0xe2 <ATM_REQ_ISR+0x50>
      d6:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <cgu8_ATM_Req>
      da:	81 11       	cpse	r24, r1
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <ATM_REQ_ISR+0x50>
	{	/* ATM CARD OUT*/
		gu8_USER_Mode_State = USER_IDLE;
      de:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <gu8_USER_Mode_State>
      e2:	08 95       	ret

000000e4 <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
      e4:	0f 93       	push	r16
      e6:	1f 93       	push	r17
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
      f0:	cf 5f       	subi	r28, 0xFF	; 255
      f2:	d1 09       	sbc	r29, r1
      f4:	0f b6       	in	r0, 0x3f	; 63
      f6:	f8 94       	cli
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	0f be       	out	0x3f, r0	; 63
      fc:	cd bf       	out	0x3d, r28	; 61
      fe:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     100:	ce 01       	movw	r24, r28
     102:	01 96       	adiw	r24, 0x01	; 1
     104:	2f ef       	ldi	r18, 0xFF	; 255
     106:	fc 01       	movw	r30, r24
     108:	11 92       	st	Z+, r1
     10a:	2a 95       	dec	r18
     10c:	e9 f7       	brne	.-6      	; 0x108 <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
     10e:	0e 94 1c 07 	call	0xe38	; 0xe38 <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
     112:	85 30       	cpi	r24, 0x05	; 5
     114:	39 f4       	brne	.+14     	; 0x124 <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
     116:	b8 01       	movw	r22, r16
     118:	ce 01       	movw	r24, r28
     11a:	01 96       	adiw	r24, 0x01	; 1
     11c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <stringCopy>
		return APP_STATUS_ERROR_OK;
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	05 c0       	rjmp	.+10     	; 0x12e <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	11 f0       	breq	.+4      	; 0x12c <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	01 c0       	rjmp	.+2      	; 0x12e <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
     12c:	86 e0       	ldi	r24, 0x06	; 6
}
     12e:	c1 50       	subi	r28, 0x01	; 1
     130:	df 4f       	sbci	r29, 0xFF	; 255
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	f8 94       	cli
     136:	de bf       	out	0x3e, r29	; 62
     138:	0f be       	out	0x3f, r0	; 63
     13a:	cd bf       	out	0x3d, r28	; 61
     13c:	df 91       	pop	r29
     13e:	cf 91       	pop	r28
     140:	1f 91       	pop	r17
     142:	0f 91       	pop	r16
     144:	08 95       	ret

00000146 <AppADMIN_getCardName>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD Holder Name by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card holder's name.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardName(uint8_t* pu8_data)
{
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card Holder Name: ") != TERMINAL_STATUS_ERROR_OK)
     14c:	88 e6       	ldi	r24, 0x68	; 104
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	0e 94 01 07 	call	0xe02	; 0xe02 <Terminal_Out>
     154:	81 30       	cpi	r24, 0x01	; 1
     156:	c9 f4       	brne	.+50     	; 0x18a <AppADMIN_getCardName+0x44>
		return APP_STATUS_ERROR_NOK;
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     158:	ce 01       	movw	r24, r28
     15a:	0e 94 72 00 	call	0xe4	; 0xe4 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     15e:	81 30       	cpi	r24, 0x01	; 1
     160:	29 f0       	breq	.+10     	; 0x16c <AppADMIN_getCardName+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     162:	11 f0       	breq	.+4      	; 0x168 <AppADMIN_getCardName+0x22>
     164:	86 30       	cpi	r24, 0x06	; 6
     166:	99 f4       	brne	.+38     	; 0x18e <AppADMIN_getCardName+0x48>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     168:	86 30       	cpi	r24, 0x06	; 6
     16a:	b1 f3       	breq	.-20     	; 0x158 <AppADMIN_getCardName+0x12>
		
		if(stringLength(pu8_data) != MAX_NAME_LENGTH+1) 
     16c:	ce 01       	movw	r24, r28
     16e:	0e 94 87 0a 	call	0x150e	; 0x150e <stringLength>
     172:	8a 30       	cpi	r24, 0x0A	; 10
     174:	71 f0       	breq	.+28     	; 0x192 <AppADMIN_getCardName+0x4c>
		{
			if(Terminal_Out((uint8_t*)"\nInvalid Name, Name should be 9 characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     176:	8b e7       	ldi	r24, 0x7B	; 123
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 01 07 	call	0xe02	; 0xe02 <Terminal_Out>
     17e:	81 30       	cpi	r24, 0x01	; 1
     180:	51 f4       	brne	.+20     	; 0x196 <AppADMIN_getCardName+0x50>
				return APP_STATUS_ERROR_NOK;
		}else{break;}
			
		EmptyString(pu8_data);
     182:	ce 01       	movw	r24, r28
     184:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <EmptyString>
	} while (1);
     188:	e1 cf       	rjmp	.-62     	; 0x14c <AppADMIN_getCardName+0x6>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card Holder Name: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	05 c0       	rjmp	.+10     	; 0x198 <AppADMIN_getCardName+0x52>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	03 c0       	rjmp	.+6      	; 0x198 <AppADMIN_getCardName+0x52>
				return APP_STATUS_ERROR_NOK;
		}else{break;}
			
		EmptyString(pu8_data);
	} while (1);
	return APP_STATUS_ERROR_OK;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	01 c0       	rjmp	.+2      	; 0x198 <AppADMIN_getCardName+0x52>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringLength(pu8_data) != MAX_NAME_LENGTH+1) 
		{
			if(Terminal_Out((uint8_t*)"\nInvalid Name, Name should be 9 characters\r\n") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     196:	80 e0       	ldi	r24, 0x00	; 0
		}else{break;}
			
		EmptyString(pu8_data);
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	08 95       	ret

0000019e <AppADMIN_getCardPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardPAN(uint8_t* pu8_data)
{
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nCard PAN: ") != TERMINAL_STATUS_ERROR_OK)
     1a6:	88 ea       	ldi	r24, 0xA8	; 168
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 01 07 	call	0xe02	; 0xe02 <Terminal_Out>
     1ae:	81 30       	cpi	r24, 0x01	; 1
     1b0:	99 f5       	brne	.+102    	; 0x218 <AppADMIN_getCardPAN+0x7a>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     1b2:	ce 01       	movw	r24, r28
     1b4:	0e 94 72 00 	call	0xe4	; 0xe4 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	29 f0       	breq	.+10     	; 0x1c6 <AppADMIN_getCardPAN+0x28>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     1bc:	11 f0       	breq	.+4      	; 0x1c2 <AppADMIN_getCardPAN+0x24>
     1be:	86 30       	cpi	r24, 0x06	; 6
     1c0:	69 f5       	brne	.+90     	; 0x21c <AppADMIN_getCardPAN+0x7e>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     1c2:	86 30       	cpi	r24, 0x06	; 6
     1c4:	b1 f3       	breq	.-20     	; 0x1b2 <AppADMIN_getCardPAN+0x14>
		if(stringLength(pu8_data) != MAX_PAN_LENGTH+1)
     1c6:	ce 01       	movw	r24, r28
     1c8:	0e 94 87 0a 	call	0x150e	; 0x150e <stringLength>
     1cc:	8a 30       	cpi	r24, 0x0A	; 10
     1ce:	e9 f0       	breq	.+58     	; 0x20a <AppADMIN_getCardPAN+0x6c>
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)	
     1d0:	84 eb       	ldi	r24, 0xB4	; 180
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 01 07 	call	0xe02	; 0xe02 <Terminal_Out>
     1d8:	81 30       	cpi	r24, 0x01	; 1
     1da:	11 f5       	brne	.+68     	; 0x220 <AppADMIN_getCardPAN+0x82>
				return APP_STATUS_ERROR_NOK;
			EmptyString(pu8_data);
     1dc:	ce 01       	movw	r24, r28
     1de:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <EmptyString>
			continue;
     1e2:	e1 cf       	rjmp	.-62     	; 0x1a6 <AppADMIN_getCardPAN+0x8>
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
     1e4:	fe 01       	movw	r30, r28
     1e6:	e1 0f       	add	r30, r17
     1e8:	f1 1d       	adc	r31, r1
     1ea:	80 81       	ld	r24, Z
     1ec:	80 53       	subi	r24, 0x30	; 48
     1ee:	8a 30       	cpi	r24, 0x0A	; 10
     1f0:	50 f0       	brcs	.+20     	; 0x206 <AppADMIN_getCardPAN+0x68>
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     1f2:	84 eb       	ldi	r24, 0xB4	; 180
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 01 07 	call	0xe02	; 0xe02 <Terminal_Out>
     1fa:	81 30       	cpi	r24, 0x01	; 1
     1fc:	99 f4       	brne	.+38     	; 0x224 <AppADMIN_getCardPAN+0x86>
					return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
     1fe:	ce 01       	movw	r24, r28
     200:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <EmptyString>
				break;
     204:	05 c0       	rjmp	.+10     	; 0x210 <AppADMIN_getCardPAN+0x72>
			EmptyString(pu8_data);
			continue;
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
     206:	1f 5f       	subi	r17, 0xFF	; 255
     208:	01 c0       	rjmp	.+2      	; 0x20c <AppADMIN_getCardPAN+0x6e>
     20a:	10 e0       	ldi	r17, 0x00	; 0
     20c:	19 30       	cpi	r17, 0x09	; 9
     20e:	50 f3       	brcs	.-44     	; 0x1e4 <AppADMIN_getCardPAN+0x46>
					return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
				break;
			}
		}
		if (u8_index == MAX_PAN_LENGTH)
     210:	19 30       	cpi	r17, 0x09	; 9
     212:	49 f6       	brne	.-110    	; 0x1a6 <AppADMIN_getCardPAN+0x8>
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	07 c0       	rjmp	.+14     	; 0x226 <AppADMIN_getCardPAN+0x88>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nCard PAN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	05 c0       	rjmp	.+10     	; 0x226 <AppADMIN_getCardPAN+0x88>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	03 c0       	rjmp	.+6      	; 0x226 <AppADMIN_getCardPAN+0x88>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		if(stringLength(pu8_data) != MAX_PAN_LENGTH+1)
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)	
				return APP_STATUS_ERROR_NOK;
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	01 c0       	rjmp	.+2      	; 0x226 <AppADMIN_getCardPAN+0x88>
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     224:	80 e0       	ldi	r24, 0x00	; 0
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	1f 91       	pop	r17
     22c:	08 95       	ret

0000022e <AppADMIN_getCardPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardPIN(uint8_t* pu8_data)
{
     22e:	1f 93       	push	r17
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	Terminal_enablePasswordMode();
     236:	0e 94 37 07 	call	0xe6e	; 0xe6e <Terminal_enablePasswordMode>
	do
	{
		if(Terminal_Out((uint8_t*)"\nCard PIN: ") != TERMINAL_STATUS_ERROR_OK)
     23a:	87 ee       	ldi	r24, 0xE7	; 231
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 01 07 	call	0xe02	; 0xe02 <Terminal_Out>
     242:	81 30       	cpi	r24, 0x01	; 1
     244:	a9 f5       	brne	.+106    	; 0x2b0 <AppADMIN_getCardPIN+0x82>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     246:	ce 01       	movw	r24, r28
     248:	0e 94 72 00 	call	0xe4	; 0xe4 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     24c:	81 30       	cpi	r24, 0x01	; 1
     24e:	29 f0       	breq	.+10     	; 0x25a <AppADMIN_getCardPIN+0x2c>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     250:	11 f0       	breq	.+4      	; 0x256 <AppADMIN_getCardPIN+0x28>
     252:	86 30       	cpi	r24, 0x06	; 6
     254:	79 f5       	brne	.+94     	; 0x2b4 <AppADMIN_getCardPIN+0x86>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     256:	86 30       	cpi	r24, 0x06	; 6
     258:	b1 f3       	breq	.-20     	; 0x246 <AppADMIN_getCardPIN+0x18>
		
		
		if(stringLength(pu8_data) != MAX_PIN_LENGTH+1)
     25a:	ce 01       	movw	r24, r28
     25c:	0e 94 87 0a 	call	0x150e	; 0x150e <stringLength>
     260:	85 30       	cpi	r24, 0x05	; 5
     262:	e9 f0       	breq	.+58     	; 0x29e <AppADMIN_getCardPIN+0x70>
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PIN, PIN should be 4 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     264:	83 ef       	ldi	r24, 0xF3	; 243
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 01 07 	call	0xe02	; 0xe02 <Terminal_Out>
     26c:	81 30       	cpi	r24, 0x01	; 1
     26e:	21 f5       	brne	.+72     	; 0x2b8 <AppADMIN_getCardPIN+0x8a>
			return APP_STATUS_ERROR_NOK;
			EmptyString(pu8_data);
     270:	ce 01       	movw	r24, r28
     272:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <EmptyString>
			continue;
     276:	e1 cf       	rjmp	.-62     	; 0x23a <AppADMIN_getCardPIN+0xc>
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PIN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
     278:	fe 01       	movw	r30, r28
     27a:	e1 0f       	add	r30, r17
     27c:	f1 1d       	adc	r31, r1
     27e:	80 81       	ld	r24, Z
     280:	80 53       	subi	r24, 0x30	; 48
     282:	8a 30       	cpi	r24, 0x0A	; 10
     284:	50 f0       	brcs	.+20     	; 0x29a <AppADMIN_getCardPIN+0x6c>
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PIN, PIN should be 4 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     286:	83 ef       	ldi	r24, 0xF3	; 243
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 01 07 	call	0xe02	; 0xe02 <Terminal_Out>
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	a9 f4       	brne	.+42     	; 0x2bc <AppADMIN_getCardPIN+0x8e>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
     292:	ce 01       	movw	r24, r28
     294:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <EmptyString>
				break;
     298:	05 c0       	rjmp	.+10     	; 0x2a4 <AppADMIN_getCardPIN+0x76>
			EmptyString(pu8_data);
			continue;
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PIN_LENGTH; u8_index++)
     29a:	1f 5f       	subi	r17, 0xFF	; 255
     29c:	01 c0       	rjmp	.+2      	; 0x2a0 <AppADMIN_getCardPIN+0x72>
     29e:	10 e0       	ldi	r17, 0x00	; 0
     2a0:	14 30       	cpi	r17, 0x04	; 4
     2a2:	50 f3       	brcs	.-44     	; 0x278 <AppADMIN_getCardPIN+0x4a>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
				break;
			}
		}
		if (u8_index == MAX_PIN_LENGTH)
     2a4:	14 30       	cpi	r17, 0x04	; 4
     2a6:	49 f6       	brne	.-110    	; 0x23a <AppADMIN_getCardPIN+0xc>
		{
			break;
		}
	} while (1);
	Terminal_disablePasswordMode();
     2a8:	0e 94 3b 07 	call	0xe76	; 0xe76 <Terminal_disablePasswordMode>
	return APP_STATUS_ERROR_OK;
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	07 c0       	rjmp	.+14     	; 0x2be <AppADMIN_getCardPIN+0x90>
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"\nCard PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	05 c0       	rjmp	.+10     	; 0x2be <AppADMIN_getCardPIN+0x90>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	03 c0       	rjmp	.+6      	; 0x2be <AppADMIN_getCardPIN+0x90>
		
		
		if(stringLength(pu8_data) != MAX_PIN_LENGTH+1)
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PIN, PIN should be 4 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	01 c0       	rjmp	.+2      	; 0x2be <AppADMIN_getCardPIN+0x90>
		for(u8_index=0; u8_index<MAX_PIN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PIN, PIN should be 4 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     2bc:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_ERROR_OK;
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	08 95       	ret

000002c6 <AppADMIN_saveCardData>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the EEPROM
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveCardData(strCardData_t* pstr_CardData)
{
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	ec 01       	movw	r28, r24
	if(Eeprom_24_writePacket(CARD_NAME_PAGE_ADDR, (pstr_CardData->au8_cardHolderName), MAX_NAME_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     2cc:	4a e0       	ldi	r20, 0x0A	; 10
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	bc 01       	movw	r22, r24
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <Eeprom_24_writePacket>
     2da:	81 30       	cpi	r24, 0x01	; 1
     2dc:	e9 f5       	brne	.+122    	; 0x358 <AppADMIN_saveCardData+0x92>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     2de:	2a e0       	ldi	r18, 0x0A	; 10
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	40 e0       	ldi	r20, 0x00	; 0
     2e4:	50 e0       	ldi	r21, 0x00	; 0
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 42 07 	call	0xe84	; 0xe84 <Delay_ms>
	if(Eeprom_24_writePacket(CARD_PAN_PAGE_ADDR, (pstr_CardData->au8_primaryAccountNumber), MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     2f2:	4a e0       	ldi	r20, 0x0A	; 10
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	be 01       	movw	r22, r28
     2f8:	66 5f       	subi	r22, 0xF6	; 246
     2fa:	7f 4f       	sbci	r23, 0xFF	; 255
     2fc:	8b e0       	ldi	r24, 0x0B	; 11
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <Eeprom_24_writePacket>
     304:	81 30       	cpi	r24, 0x01	; 1
     306:	51 f5       	brne	.+84     	; 0x35c <AppADMIN_saveCardData+0x96>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     308:	2a e0       	ldi	r18, 0x0A	; 10
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 42 07 	call	0xe84	; 0xe84 <Delay_ms>
	if(Eeprom_24_writePacket(CARD_PIN_PAGE_ADDR, (pstr_CardData->au8_pinNum), MAX_PIN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     31c:	be 01       	movw	r22, r28
     31e:	6c 5e       	subi	r22, 0xEC	; 236
     320:	7f 4f       	sbci	r23, 0xFF	; 255
     322:	45 e0       	ldi	r20, 0x05	; 5
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	85 e1       	ldi	r24, 0x15	; 21
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <Eeprom_24_writePacket>
     32e:	81 30       	cpi	r24, 0x01	; 1
     330:	b9 f4       	brne	.+46     	; 0x360 <AppADMIN_saveCardData+0x9a>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     332:	2a e0       	ldi	r18, 0x0A	; 10
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	40 e0       	ldi	r20, 0x00	; 0
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 42 07 	call	0xe84	; 0xe84 <Delay_ms>
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, CARD_INITIALIZED) != EEPROM_24_STATUS_ERROR_OK)
     346:	6a ea       	ldi	r22, 0xAA	; 170
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 b8 03 	call	0x770	; 0x770 <Eeprom_24_writeByte>
     350:	81 30       	cpi	r24, 0x01	; 1
     352:	41 f0       	breq	.+16     	; 0x364 <AppADMIN_saveCardData+0x9e>
		return APP_STATUS_ERROR_NOK;
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	07 c0       	rjmp	.+14     	; 0x366 <AppADMIN_saveCardData+0xa0>
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveCardData(strCardData_t* pstr_CardData)
{
	if(Eeprom_24_writePacket(CARD_NAME_PAGE_ADDR, (pstr_CardData->au8_cardHolderName), MAX_NAME_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	05 c0       	rjmp	.+10     	; 0x366 <AppADMIN_saveCardData+0xa0>
	Delay_ms(10);
	if(Eeprom_24_writePacket(CARD_PAN_PAGE_ADDR, (pstr_CardData->au8_primaryAccountNumber), MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	03 c0       	rjmp	.+6      	; 0x366 <AppADMIN_saveCardData+0xa0>
	Delay_ms(10);
	if(Eeprom_24_writePacket(CARD_PIN_PAGE_ADDR, (pstr_CardData->au8_pinNum), MAX_PIN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	01 c0       	rjmp	.+2      	; 0x366 <AppADMIN_saveCardData+0xa0>
	Delay_ms(10);
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, CARD_INITIALIZED) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     364:	81 e0       	ldi	r24, 0x01	; 1
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <AppUSER_sendCardData>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to send the Card's Data to the ATM.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_sendCardData(strCardData_t* pstr_CardData)
{
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	6e 97       	sbiw	r28, 0x1e	; 30
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	7c 01       	movw	r14, r24
	if(Terminal_Out((uint8_t*)"Data is being sent to the ATM...\r\n") != TERMINAL_STATUS_ERROR_OK)
     38a:	86 e2       	ldi	r24, 0x26	; 38
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	0e 94 01 07 	call	0xe02	; 0xe02 <Terminal_Out>
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	f1 f5       	brne	.+124    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		return APP_STATUS_ERROR_NOK;
		
	uint8_t au8_DataFrame[30] = {0};
     396:	8e 01       	movw	r16, r28
     398:	0f 5f       	subi	r16, 0xFF	; 255
     39a:	1f 4f       	sbci	r17, 0xFF	; 255
     39c:	8e e1       	ldi	r24, 0x1E	; 30
     39e:	f8 01       	movw	r30, r16
     3a0:	11 92       	st	Z+, r1
     3a2:	8a 95       	dec	r24
     3a4:	e9 f7       	brne	.-6      	; 0x3a0 <AppUSER_sendCardData+0x34>
	stringConcatenate(au8_DataFrame, (uint8_t*)"#");
     3a6:	69 e4       	ldi	r22, 0x49	; 73
     3a8:	71 e0       	ldi	r23, 0x01	; 1
     3aa:	c8 01       	movw	r24, r16
     3ac:	0e 94 c6 0a 	call	0x158c	; 0x158c <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_cardHolderName);
     3b0:	b7 01       	movw	r22, r14
     3b2:	c8 01       	movw	r24, r16
     3b4:	0e 94 c6 0a 	call	0x158c	; 0x158c <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"-");
     3b8:	6c e4       	ldi	r22, 0x4C	; 76
     3ba:	71 e0       	ldi	r23, 0x01	; 1
     3bc:	c8 01       	movw	r24, r16
     3be:	0e 94 c6 0a 	call	0x158c	; 0x158c <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_primaryAccountNumber);
     3c2:	b7 01       	movw	r22, r14
     3c4:	66 5f       	subi	r22, 0xF6	; 246
     3c6:	7f 4f       	sbci	r23, 0xFF	; 255
     3c8:	c8 01       	movw	r24, r16
     3ca:	0e 94 c6 0a 	call	0x158c	; 0x158c <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"-");
     3ce:	6c e4       	ldi	r22, 0x4C	; 76
     3d0:	71 e0       	ldi	r23, 0x01	; 1
     3d2:	c8 01       	movw	r24, r16
     3d4:	0e 94 c6 0a 	call	0x158c	; 0x158c <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_pinNum);
     3d8:	b7 01       	movw	r22, r14
     3da:	6c 5e       	subi	r22, 0xEC	; 236
     3dc:	7f 4f       	sbci	r23, 0xFF	; 255
     3de:	c8 01       	movw	r24, r16
     3e0:	0e 94 c6 0a 	call	0x158c	; 0x158c <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"#-");
     3e4:	6b e4       	ldi	r22, 0x4B	; 75
     3e6:	71 e0       	ldi	r23, 0x01	; 1
     3e8:	c8 01       	movw	r24, r16
     3ea:	0e 94 c6 0a 	call	0x158c	; 0x158c <stringConcatenate>
	
	SPI_SS_ENABLE();
     3ee:	88 b3       	in	r24, 0x18	; 24
     3f0:	8f 7e       	andi	r24, 0xEF	; 239
     3f2:	88 bb       	out	0x18, r24	; 24
	if(Spi_MasterSendPacket(au8_DataFrame, stringLength(au8_DataFrame)) != SPI_STATUS_ERROR_OK)
     3f4:	c8 01       	movw	r24, r16
     3f6:	0e 94 87 0a 	call	0x150e	; 0x150e <stringLength>
     3fa:	68 2f       	mov	r22, r24
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	c8 01       	movw	r24, r16
     400:	0e 94 3a 0a 	call	0x1474	; 0x1474 <Spi_MasterSendPacket>
     404:	81 30       	cpi	r24, 0x01	; 1
     406:	39 f4       	brne	.+14     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		return APP_STATUS_ERROR_NOK;
	SPI_SS_DISABLE();
     408:	88 b3       	in	r24, 0x18	; 24
     40a:	80 61       	ori	r24, 0x10	; 16
     40c:	88 bb       	out	0x18, r24	; 24
	
	return APP_STATUS_ERROR_OK;
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	03 c0       	rjmp	.+6      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
* Description: Function to send the Card's Data to the ATM.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_sendCardData(strCardData_t* pstr_CardData)
{
	if(Terminal_Out((uint8_t*)"Data is being sent to the ATM...\r\n") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	01 c0       	rjmp	.+2      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_pinNum);
	stringConcatenate(au8_DataFrame, (uint8_t*)"#-");
	
	SPI_SS_ENABLE();
	if(Spi_MasterSendPacket(au8_DataFrame, stringLength(au8_DataFrame)) != SPI_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     416:	80 e0       	ldi	r24, 0x00	; 0
	SPI_SS_DISABLE();
	
	return APP_STATUS_ERROR_OK;
}
     418:	6e 96       	adiw	r28, 0x1e	; 30
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	de bf       	out	0x3e, r29	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	cd bf       	out	0x3d, r28	; 61
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	08 95       	ret

00000432 <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	a3 97       	sbiw	r28, 0x23	; 35
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
     446:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     44a:	84 30       	cpi	r24, 0x04	; 4
     44c:	09 f0       	breq	.+2      	; 0x450 <App_update+0x1e>
     44e:	a6 c0       	rjmp	.+332    	; 0x59c <App_update+0x16a>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
     450:	fe 01       	movw	r30, r28
     452:	31 96       	adiw	r30, 0x01	; 1
     454:	8a e0       	ldi	r24, 0x0A	; 10
     456:	df 01       	movw	r26, r30
     458:	1d 92       	st	X+, r1
     45a:	8a 95       	dec	r24
     45c:	e9 f7       	brne	.-6      	; 0x458 <App_update+0x26>
	if(gu8_CardMode == CARD_MODE_ADMIN)
     45e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <gu8_CardMode>
     462:	81 11       	cpse	r24, r1
     464:	50 c0       	rjmp	.+160    	; 0x506 <App_update+0xd4>
	{ /**************** PROGRAMMING MODE ****************/
			if(Terminal_Out((uint8_t*)"Programming Mode\r\nEnter the Following Data\r\n") != TERMINAL_STATUS_ERROR_OK)
     466:	8e e4       	ldi	r24, 0x4E	; 78
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 01 07 	call	0xe02	; 0xe02 <Terminal_Out>
     46e:	81 30       	cpi	r24, 0x01	; 1
     470:	09 f0       	breq	.+2      	; 0x474 <App_update+0x42>
     472:	47 c0       	rjmp	.+142    	; 0x502 <App_update+0xd0>
				return APP_STATUS_ERROR_NOK;
			uint8_t au8_tempCardHolderName[10]={0};
     474:	2a e0       	ldi	r18, 0x0A	; 10
     476:	ce 01       	movw	r24, r28
     478:	45 96       	adiw	r24, 0x15	; 21
     47a:	fc 01       	movw	r30, r24
     47c:	32 2f       	mov	r19, r18
     47e:	11 92       	st	Z+, r1
     480:	3a 95       	dec	r19
     482:	e9 f7       	brne	.-6      	; 0x47e <App_update+0x4c>
			uint8_t au8_tempPAN[10]={0};
     484:	fe 01       	movw	r30, r28
     486:	3b 96       	adiw	r30, 0x0b	; 11
     488:	df 01       	movw	r26, r30
     48a:	1d 92       	st	X+, r1
     48c:	2a 95       	dec	r18
     48e:	e9 f7       	brne	.-6      	; 0x48a <App_update+0x58>
			uint8_t au8_tempPinNum[5]={0};
     490:	74 96       	adiw	r30, 0x14	; 20
     492:	25 e0       	ldi	r18, 0x05	; 5
     494:	df 01       	movw	r26, r30
     496:	1d 92       	st	X+, r1
     498:	2a 95       	dec	r18
     49a:	e9 f7       	brne	.-6      	; 0x496 <App_update+0x64>
		
			/* Get the Card Holder Name from the ADMIN Terminal */
			if(AppADMIN_getCardName(au8_tempCardHolderName) != APP_STATUS_ERROR_OK)
     49c:	0e 94 a3 00 	call	0x146	; 0x146 <AppADMIN_getCardName>
     4a0:	81 30       	cpi	r24, 0x01	; 1
     4a2:	79 f5       	brne	.+94     	; 0x502 <App_update+0xd0>
				return APP_STATUS_ERROR_NOK;
			/* Get the Card Primary Account Number from the ADMIN Terminal */
			if(AppADMIN_getCardPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     4a4:	ce 01       	movw	r24, r28
     4a6:	0b 96       	adiw	r24, 0x0b	; 11
     4a8:	0e 94 cf 00 	call	0x19e	; 0x19e <AppADMIN_getCardPAN>
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	49 f5       	brne	.+82     	; 0x502 <App_update+0xd0>
			return APP_STATUS_ERROR_NOK;
		
			if(AppADMIN_getCardPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
     4b0:	ce 01       	movw	r24, r28
     4b2:	4f 96       	adiw	r24, 0x1f	; 31
     4b4:	0e 94 17 01 	call	0x22e	; 0x22e <AppADMIN_getCardPIN>
     4b8:	81 30       	cpi	r24, 0x01	; 1
     4ba:	19 f5       	brne	.+70     	; 0x502 <App_update+0xd0>
				return APP_STATUS_ERROR_NOK;
		
			stringCopy(au8_tempCardHolderName, gstr_userCardData.au8_cardHolderName);
     4bc:	60 e2       	ldi	r22, 0x20	; 32
     4be:	72 e0       	ldi	r23, 0x02	; 2
     4c0:	ce 01       	movw	r24, r28
     4c2:	45 96       	adiw	r24, 0x15	; 21
     4c4:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <stringCopy>
			stringCopy(au8_tempPAN, gstr_userCardData.au8_primaryAccountNumber);
     4c8:	6a e2       	ldi	r22, 0x2A	; 42
     4ca:	72 e0       	ldi	r23, 0x02	; 2
     4cc:	ce 01       	movw	r24, r28
     4ce:	0b 96       	adiw	r24, 0x0b	; 11
     4d0:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <stringCopy>
			stringCopy(au8_tempPinNum, gstr_userCardData.au8_pinNum);
     4d4:	64 e3       	ldi	r22, 0x34	; 52
     4d6:	72 e0       	ldi	r23, 0x02	; 2
     4d8:	ce 01       	movw	r24, r28
     4da:	4f 96       	adiw	r24, 0x1f	; 31
     4dc:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <stringCopy>
		
			if(AppADMIN_saveCardData(&gstr_userCardData) != APP_STATUS_ERROR_OK)
     4e0:	80 e2       	ldi	r24, 0x20	; 32
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <AppADMIN_saveCardData>
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	59 f4       	brne	.+22     	; 0x502 <App_update+0xd0>
				return APP_STATUS_ERROR_NOK;
		
			gu8_ADMIN_Request = ADMIN_NOT_REQUESTED;
     4ec:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <gu8_ADMIN_Request>
			gu8_CardMode = CARD_MODE_USER;
     4f0:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <gu8_CardMode>
			if(Terminal_Out((uint8_t*)"\nUSER Mode\r\n") != TERMINAL_STATUS_ERROR_OK)
     4f4:	8b e7       	ldi	r24, 0x7B	; 123
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 01 07 	call	0xe02	; 0xe02 <Terminal_Out>
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	09 f4       	brne	.+2      	; 0x502 <App_update+0xd0>
     500:	41 c0       	rjmp	.+130    	; 0x584 <App_update+0x152>
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
	if(gu8_CardMode == CARD_MODE_ADMIN)
	{ /**************** PROGRAMMING MODE ****************/
			if(Terminal_Out((uint8_t*)"Programming Mode\r\nEnter the Following Data\r\n") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	52 c0       	rjmp	.+164    	; 0x5aa <App_update+0x178>
				return APP_STATUS_ERROR_NOK;
	/****************************************************************/
	}else
	{/************* User Mode **************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
     506:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <gu8_ADMIN_Request>
     50a:	81 30       	cpi	r24, 0x01	; 1
     50c:	31 f4       	brne	.+12     	; 0x51a <App_update+0xe8>
     50e:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <gu8_USER_Mode_State>
     512:	81 11       	cpse	r24, r1
     514:	02 c0       	rjmp	.+4      	; 0x51a <App_update+0xe8>
			{
				gu8_CardMode = CARD_MODE_ADMIN;
     516:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <gu8_CardMode>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
     51a:	ce 01       	movw	r24, r28
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	0e 94 72 00 	call	0xe4	; 0xe4 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     522:	81 30       	cpi	r24, 0x01	; 1
     524:	c9 f4       	brne	.+50     	; 0x558 <App_update+0x126>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
     526:	69 e1       	ldi	r22, 0x19	; 25
     528:	72 e0       	ldi	r23, 0x02	; 2
     52a:	ce 01       	movw	r24, r28
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	0e 94 93 0a 	call	0x1526	; 0x1526 <stringCompare>
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	a9 f4       	brne	.+42     	; 0x560 <App_update+0x12e>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
     536:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <gu8_USER_Mode_State>
     53a:	81 30       	cpi	r24, 0x01	; 1
     53c:	49 f4       	brne	.+18     	; 0x550 <App_update+0x11e>
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
     53e:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <gu8_ADMIN_Request>
						if(Terminal_Out((uint8_t*)"CARD is Busy Now, Programming Mode will start after current Process\r\n") != TERMINAL_STATUS_ERROR_OK)
     542:	88 e8       	ldi	r24, 0x88	; 136
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 01 07 	call	0xe02	; 0xe02 <Terminal_Out>
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	49 f5       	brne	.+82     	; 0x5a0 <App_update+0x16e>
     54e:	08 c0       	rjmp	.+16     	; 0x560 <App_update+0x12e>
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The Card is not used by ATM */
					{
						gu8_CardMode = CARD_MODE_ADMIN;
     550:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <gu8_CardMode>
						return APP_STATUS_ERROR_OK;
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	29 c0       	rjmp	.+82     	; 0x5aa <App_update+0x178>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     558:	81 30       	cpi	r24, 0x01	; 1
     55a:	11 f0       	breq	.+4      	; 0x560 <App_update+0x12e>
     55c:	86 30       	cpi	r24, 0x06	; 6
     55e:	11 f5       	brne	.+68     	; 0x5a4 <App_update+0x172>
				return APP_STATUS_ERROR_NOK;
			/****************************************************************/
			/************************* ATM Request **************************/
			if (cgu8_ATM_Req == ATM_REQUESTED)
     560:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <cgu8_ATM_Req>
     564:	81 30       	cpi	r24, 0x01	; 1
     566:	71 f4       	brne	.+28     	; 0x584 <App_update+0x152>
			{
				gu8_USER_Mode_State = USER_BUSY;
     568:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <gu8_USER_Mode_State>
				AppUSER_sendCardData(&gstr_userCardData);
     56c:	80 e2       	ldi	r24, 0x20	; 32
     56e:	92 e0       	ldi	r25, 0x02	; 2
     570:	0e 94 b6 01 	call	0x36c	; 0x36c <AppUSER_sendCardData>
				
				if(Terminal_Out((uint8_t*)"Data Successfully Sent\r\n") != TERMINAL_STATUS_ERROR_OK)
     574:	8e ec       	ldi	r24, 0xCE	; 206
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 01 07 	call	0xe02	; 0xe02 <Terminal_Out>
     57c:	81 30       	cpi	r24, 0x01	; 1
     57e:	a1 f4       	brne	.+40     	; 0x5a8 <App_update+0x176>
					return APP_STATUS_ERROR_NOK;
				cgu8_ATM_Req = ATM_NOT_REQUESTED;
     580:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <cgu8_ATM_Req>
			}
			
	/****************************************************************/
	}
	
	Delay_ms(100);
     584:	24 e6       	ldi	r18, 0x64	; 100
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	40 e0       	ldi	r20, 0x00	; 0
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 42 07 	call	0xe84	; 0xe84 <Delay_ms>
	return APP_STATUS_ERROR_OK;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	07 c0       	rjmp	.+14     	; 0x5aa <App_update+0x178>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
     59c:	85 e0       	ldi	r24, 0x05	; 5
     59e:	05 c0       	rjmp	.+10     	; 0x5aa <App_update+0x178>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"CARD is Busy Now, Programming Mode will start after current Process\r\n") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	03 c0       	rjmp	.+6      	; 0x5aa <App_update+0x178>
						gu8_CardMode = CARD_MODE_ADMIN;
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <App_update+0x178>
			{
				gu8_USER_Mode_State = USER_BUSY;
				AppUSER_sendCardData(&gstr_userCardData);
				
				if(Terminal_Out((uint8_t*)"Data Successfully Sent\r\n") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     5a8:	80 e0       	ldi	r24, 0x00	; 0
	/****************************************************************/
	}
	
	Delay_ms(100);
	return APP_STATUS_ERROR_OK;
}
     5aa:	a3 96       	adiw	r28, 0x23	; 35
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <AppMemory_getCardData>:
* Parameters (out): pstr_CardData - Structure of data to hold the data saved in EEPROM.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the Card's data from eeprom.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppMemory_getCardData(strCardData_t* pstr_CardData)
{
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	ec 01       	movw	r28, r24
	if(Eeprom_24_readPacket(CARD_NAME_PAGE_ADDR, (pstr_CardData->au8_cardHolderName),MAX_NAME_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     5c2:	4a e0       	ldi	r20, 0x0A	; 10
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	bc 01       	movw	r22, r24
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 d4 05 	call	0xba8	; 0xba8 <Eeprom_24_readPacket>
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	61 f5       	brne	.+88     	; 0x62c <AppMemory_getCardData+0x70>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     5d4:	2a e0       	ldi	r18, 0x0A	; 10
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	40 e0       	ldi	r20, 0x00	; 0
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 42 07 	call	0xe84	; 0xe84 <Delay_ms>
	if(Eeprom_24_readPacket(CARD_PAN_PAGE_ADDR, (pstr_CardData->au8_primaryAccountNumber),MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     5e8:	4a e0       	ldi	r20, 0x0A	; 10
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	be 01       	movw	r22, r28
     5ee:	66 5f       	subi	r22, 0xF6	; 246
     5f0:	7f 4f       	sbci	r23, 0xFF	; 255
     5f2:	8b e0       	ldi	r24, 0x0B	; 11
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 d4 05 	call	0xba8	; 0xba8 <Eeprom_24_readPacket>
     5fa:	81 30       	cpi	r24, 0x01	; 1
     5fc:	c9 f4       	brne	.+50     	; 0x630 <AppMemory_getCardData+0x74>
	return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     5fe:	2a e0       	ldi	r18, 0x0A	; 10
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 42 07 	call	0xe84	; 0xe84 <Delay_ms>
	if(Eeprom_24_readPacket(CARD_PIN_PAGE_ADDR, (pstr_CardData->au8_pinNum),MAX_PIN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     612:	be 01       	movw	r22, r28
     614:	6c 5e       	subi	r22, 0xEC	; 236
     616:	7f 4f       	sbci	r23, 0xFF	; 255
     618:	45 e0       	ldi	r20, 0x05	; 5
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	85 e1       	ldi	r24, 0x15	; 21
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 d4 05 	call	0xba8	; 0xba8 <Eeprom_24_readPacket>
     624:	81 30       	cpi	r24, 0x01	; 1
     626:	31 f0       	breq	.+12     	; 0x634 <AppMemory_getCardData+0x78>
	return APP_STATUS_ERROR_NOK;
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	05 c0       	rjmp	.+10     	; 0x636 <AppMemory_getCardData+0x7a>
* Description: Function to get the Card's data from eeprom.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppMemory_getCardData(strCardData_t* pstr_CardData)
{
	if(Eeprom_24_readPacket(CARD_NAME_PAGE_ADDR, (pstr_CardData->au8_cardHolderName),MAX_NAME_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	03 c0       	rjmp	.+6      	; 0x636 <AppMemory_getCardData+0x7a>
	Delay_ms(10);
	if(Eeprom_24_readPacket(CARD_PAN_PAGE_ADDR, (pstr_CardData->au8_primaryAccountNumber),MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	01 c0       	rjmp	.+2      	; 0x636 <AppMemory_getCardData+0x7a>
	Delay_ms(10);
	if(Eeprom_24_readPacket(CARD_PIN_PAGE_ADDR, (pstr_CardData->au8_pinNum),MAX_PIN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <App_init>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_init(void)
{
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	1f 92       	push	r1
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
     646:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     64a:	84 30       	cpi	r24, 0x04	; 4
     64c:	09 f4       	brne	.+2      	; 0x650 <App_init+0x14>
     64e:	57 c0       	rjmp	.+174    	; 0x6fe <App_init+0xc2>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
     650:	0e 94 a9 03 	call	0x752	; 0x752 <Eeprom_24_init>
     654:	81 30       	cpi	r24, 0x01	; 1
     656:	09 f0       	breq	.+2      	; 0x65a <App_init+0x1e>
     658:	47 c0       	rjmp	.+142    	; 0x6e8 <App_init+0xac>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
     65a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <Terminal_init>
     65e:	81 30       	cpi	r24, 0x01	; 1
     660:	09 f0       	breq	.+2      	; 0x664 <App_init+0x28>
     662:	44 c0       	rjmp	.+136    	; 0x6ec <App_init+0xb0>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
     664:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <Spi_init>
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	09 f0       	breq	.+2      	; 0x66e <App_init+0x32>
     66c:	41 c0       	rjmp	.+130    	; 0x6f0 <App_init+0xb4>
		return APP_STATUS_ERROR_NOK;
	DIO_PORTD_DIR &= ~(1<<2);
     66e:	81 b3       	in	r24, 0x11	; 17
     670:	8b 7f       	andi	r24, 0xFB	; 251
     672:	81 bb       	out	0x11, r24	; 17
	DIO_PORTD_DATA |= 1<<2;
     674:	82 b3       	in	r24, 0x12	; 18
     676:	84 60       	ori	r24, 0x04	; 4
     678:	82 bb       	out	0x12, r24	; 18
	/**************************/
	/* Only for Testing */
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
     67a:	6f ef       	ldi	r22, 0xFF	; 255
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 b8 03 	call	0x770	; 0x770 <Eeprom_24_writeByte>
     684:	81 30       	cpi	r24, 0x01	; 1
     686:	b1 f5       	brne	.+108    	; 0x6f4 <App_init+0xb8>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     688:	2a e0       	ldi	r18, 0x0A	; 10
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	40 e0       	ldi	r20, 0x00	; 0
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 42 07 	call	0xe84	; 0xe84 <Delay_ms>
	/**************************/
	if(Terminal_Out((uint8_t*)"CARD Terminal Window\r\n") != TERMINAL_STATUS_ERROR_OK)
     69c:	87 ee       	ldi	r24, 0xE7	; 231
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	0e 94 01 07 	call	0xe02	; 0xe02 <Terminal_Out>
     6a4:	81 30       	cpi	r24, 0x01	; 1
     6a6:	41 f5       	brne	.+80     	; 0x6f8 <App_init+0xbc>
		return APP_STATUS_ERROR_NOK;
	uint8_t u8_initData = 0;
     6a8:	19 82       	std	Y+1, r1	; 0x01
	/* Check if the card was previously registered and has its data in the eeprom */
	if(Eeprom_24_readByte(CARD_INIT_ADDRESS, &u8_initData) != EEPROM_24_STATUS_ERROR_OK)
     6aa:	be 01       	movw	r22, r28
     6ac:	6f 5f       	subi	r22, 0xFF	; 255
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 01 04 	call	0x802	; 0x802 <Eeprom_24_readByte>
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	01 f5       	brne	.+64     	; 0x6fc <App_init+0xc0>
	{
		return APP_STATUS_ERROR_NOK;
	}
		
	if(u8_initData != CARD_INITIALIZED)
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	8a 3a       	cpi	r24, 0xAA	; 170
     6c0:	19 f0       	breq	.+6      	; 0x6c8 <App_init+0x8c>
	{
		gu8_CardMode = CARD_MODE_ADMIN;
     6c2:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <gu8_CardMode>
     6c6:	0b c0       	rjmp	.+22     	; 0x6de <App_init+0xa2>
	}else
	{
		gu8_CardMode = CARD_MODE_USER;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <gu8_CardMode>
		Terminal_Out((uint8_t*)"You are now in User Mode\r\n");
     6ce:	8e ef       	ldi	r24, 0xFE	; 254
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	0e 94 01 07 	call	0xe02	; 0xe02 <Terminal_Out>
		AppMemory_getCardData(&gstr_userCardData);
     6d6:	80 e2       	ldi	r24, 0x20	; 32
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	0e 94 de 02 	call	0x5bc	; 0x5bc <AppMemory_getCardData>
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     6de:	84 e0       	ldi	r24, 0x04	; 4
     6e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return APP_STATUS_ERROR_OK;
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	0b c0       	rjmp	.+22     	; 0x6fe <App_init+0xc2>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	09 c0       	rjmp	.+18     	; 0x6fe <App_init+0xc2>
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	07 c0       	rjmp	.+14     	; 0x6fe <App_init+0xc2>
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	05 c0       	rjmp	.+10     	; 0x6fe <App_init+0xc2>
	DIO_PORTD_DIR &= ~(1<<2);
	DIO_PORTD_DATA |= 1<<2;
	/**************************/
	/* Only for Testing */
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	03 c0       	rjmp	.+6      	; 0x6fe <App_init+0xc2>
	Delay_ms(10);
	/**************************/
	if(Terminal_Out((uint8_t*)"CARD Terminal Window\r\n") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	01 c0       	rjmp	.+2      	; 0x6fe <App_init+0xc2>
	uint8_t u8_initData = 0;
	/* Check if the card was previously registered and has its data in the eeprom */
	if(Eeprom_24_readByte(CARD_INIT_ADDRESS, &u8_initData) != EEPROM_24_STATUS_ERROR_OK)
	{
		return APP_STATUS_ERROR_NOK;
     6fc:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     6fe:	0f 90       	pop	r0
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
     706:	0e 94 1e 03 	call	0x63c	; 0x63c <App_init>
     70a:	81 30       	cpi	r24, 0x01	; 1
     70c:	c1 f4       	brne	.+48     	; 0x73e <App_start+0x38>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(1000);
     70e:	28 ee       	ldi	r18, 0xE8	; 232
     710:	33 e0       	ldi	r19, 0x03	; 3
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 42 07 	call	0xe84	; 0xe84 <Delay_ms>
#if REQUEST_MODE == INTERRUPT_REQUEST
 	Ext_INT0_init(EXT_INT0_EDGE_FALL_RISE);
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Ext_INT0_init>
 	INT0_setCallBack(ATM_REQ_ISR);
     728:	89 e4       	ldi	r24, 0x49	; 73
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <INT0_setCallBack>
#elif REQUEST_MODE == POLLING_REQUEST
	DIO_PORTD_DIR &= ~(1<<2);
	DIO_PORTD_DATA |= 1<<2;
#endif
	EnableGlbl_Interrupt();
     730:	8f b7       	in	r24, 0x3f	; 63
     732:	80 68       	ori	r24, 0x80	; 128
     734:	8f bf       	out	0x3f, r24	; 63
	
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
     736:	0e 94 19 02 	call	0x432	; 0x432 <App_update>
     73a:	81 30       	cpi	r24, 0x01	; 1
     73c:	e1 f3       	breq	.-8      	; 0x736 <App_start+0x30>
			return APP_STATUS_ERROR_NOK;
	}
}
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	08 95       	ret

00000742 <EEPROM_getAddresses>:
{
#if EEPROM_24_MODEL	== AT24C16B
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
	*pu8_wordAddress = u16_location & 0xFF;
#elif EEPROM_24_MODEL == AT24C256B
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS;
     742:	20 e5       	ldi	r18, 0x50	; 80
     744:	fc 01       	movw	r30, r24
     746:	20 83       	st	Z, r18
	pu8_wordAddress[0] = (uint8_t)(u16_location >> 8);
     748:	fb 01       	movw	r30, r22
     74a:	50 83       	st	Z, r21
	pu8_wordAddress[1] = (uint8_t)u16_location;
     74c:	41 83       	std	Z+1, r20	; 0x01
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	08 95       	ret

00000752 <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
     752:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_eepromModuleState>
     756:	83 30       	cpi	r24, 0x03	; 3
     758:	51 f0       	breq	.+20     	; 0x76e <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
     75a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
     75e:	85 30       	cpi	r24, 0x05	; 5
     760:	29 f0       	breq	.+10     	; 0x76c <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
     76c:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
     76e:	08 95       	ret

00000770 <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
     770:	ff 92       	push	r15
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	00 d0       	rcall	.+0      	; 0x77c <Eeprom_24_writeByte+0xc>
     77c:	00 d0       	rcall	.+0      	; 0x77e <Eeprom_24_writeByte+0xe>
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	ac 01       	movw	r20, r24
     784:	6c 83       	std	Y+4, r22	; 0x04
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     786:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     78a:	93 30       	cpi	r25, 0x03	; 3
     78c:	41 f5       	brne	.+80     	; 0x7de <Eeprom_24_writeByte+0x6e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     78e:	19 82       	std	Y+1, r1	; 0x01
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#elif EEPROM_24_MODEL == AT24C256B
 	uint8_t u8_wordAddr[2]= {0};
     790:	1b 82       	std	Y+3, r1	; 0x03
     792:	1a 82       	std	Y+2, r1	; 0x02
 	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     794:	be 01       	movw	r22, r28
     796:	6e 5f       	subi	r22, 0xFE	; 254
     798:	7f 4f       	sbci	r23, 0xFF	; 255
     79a:	ce 01       	movw	r24, r28
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	0e 94 a1 03 	call	0x742	; 0x742 <EEPROM_getAddresses>
     7a2:	f8 2e       	mov	r15, r24
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	f8 12       	cpse	r15, r24
     7a8:	1e c0       	rjmp	.+60     	; 0x7e6 <Eeprom_24_writeByte+0x76>
		return EEPROM_24_STATUS_ERROR_NOK;
 
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
     7aa:	01 e0       	ldi	r16, 0x01	; 1
     7ac:	10 e0       	ldi	r17, 0x00	; 0
     7ae:	9e 01       	movw	r18, r28
     7b0:	2c 5f       	subi	r18, 0xFC	; 252
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	42 e0       	ldi	r20, 0x02	; 2
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	be 01       	movw	r22, r28
     7ba:	6e 5f       	subi	r22, 0xFE	; 254
     7bc:	7f 4f       	sbci	r23, 0xFF	; 255
     7be:	89 81       	ldd	r24, Y+1	; 0x01
     7c0:	0e 94 1a 09 	call	0x1234	; 0x1234 <I2C_MasterSendGeneral>
     7c4:	81 30       	cpi	r24, 0x01	; 1
     7c6:	89 f4       	brne	.+34     	; 0x7ea <Eeprom_24_writeByte+0x7a>
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
     7c8:	2f e0       	ldi	r18, 0x0F	; 15
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	40 e0       	ldi	r20, 0x00	; 0
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 42 07 	call	0xe84	; 0xe84 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
     7dc:	07 c0       	rjmp	.+14     	; 0x7ec <Eeprom_24_writeByte+0x7c>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     7de:	68 94       	set
     7e0:	ff 24       	eor	r15, r15
     7e2:	f1 f8       	bld	r15, 1
     7e4:	03 c0       	rjmp	.+6      	; 0x7ec <Eeprom_24_writeByte+0x7c>
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#elif EEPROM_24_MODEL == AT24C256B
 	uint8_t u8_wordAddr[2]= {0};
 	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     7e6:	f1 2c       	mov	r15, r1
     7e8:	01 c0       	rjmp	.+2      	; 0x7ec <Eeprom_24_writeByte+0x7c>
 
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     7ea:	f1 2c       	mov	r15, r1

#endif
	Delay_ms(15);
	return EEPROM_24_STATUS_ERROR_OK;
}
     7ec:	8f 2d       	mov	r24, r15
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
     800:	08 95       	ret

00000802 <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ff 92       	push	r15
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	00 d0       	rcall	.+0      	; 0x812 <Eeprom_24_readByte+0x10>
     812:	1f 92       	push	r1
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     81a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     81e:	93 30       	cpi	r25, 0x03	; 3
     820:	51 f5       	brne	.+84     	; 0x876 <__stack+0x17>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     822:	61 15       	cp	r22, r1
     824:	71 05       	cpc	r23, r1
     826:	59 f1       	breq	.+86     	; 0x87e <__stack+0x1f>
     828:	6b 01       	movw	r12, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     82a:	19 82       	std	Y+1, r1	; 0x01
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]= {0};
     82c:	1b 82       	std	Y+3, r1	; 0x03
     82e:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     830:	be 01       	movw	r22, r28
     832:	6e 5f       	subi	r22, 0xFE	; 254
     834:	7f 4f       	sbci	r23, 0xFF	; 255
     836:	ce 01       	movw	r24, r28
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	0e 94 a1 03 	call	0x742	; 0x742 <EEPROM_getAddresses>
     83e:	f8 2e       	mov	r15, r24
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	f8 12       	cpse	r15, r24
     844:	20 c0       	rjmp	.+64     	; 0x886 <__stack+0x27>
		return EEPROM_24_STATUS_ERROR_NOK;

	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
     846:	01 e0       	ldi	r16, 0x01	; 1
     848:	10 e0       	ldi	r17, 0x00	; 0
     84a:	96 01       	movw	r18, r12
     84c:	42 e0       	ldi	r20, 0x02	; 2
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	be 01       	movw	r22, r28
     852:	6e 5f       	subi	r22, 0xFE	; 254
     854:	7f 4f       	sbci	r23, 0xFF	; 255
     856:	89 81       	ldd	r24, Y+1	; 0x01
     858:	0e 94 7d 09 	call	0x12fa	; 0x12fa <I2C_MasterReceiveGeneral>
     85c:	81 30       	cpi	r24, 0x01	; 1
     85e:	a9 f4       	brne	.+42     	; 0x88a <__stack+0x2b>
		return EEPROM_24_STATUS_ERROR_NOK;
	
#endif
	Delay_ms(5);
     860:	25 e0       	ldi	r18, 0x05	; 5
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 42 07 	call	0xe84	; 0xe84 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
     874:	0b c0       	rjmp	.+22     	; 0x88c <__stack+0x2d>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     876:	68 94       	set
     878:	ff 24       	eor	r15, r15
     87a:	f1 f8       	bld	r15, 1
     87c:	07 c0       	rjmp	.+14     	; 0x88c <__stack+0x2d>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     87e:	68 94       	set
     880:	ff 24       	eor	r15, r15
     882:	f2 f8       	bld	r15, 2
     884:	03 c0       	rjmp	.+6      	; 0x88c <__stack+0x2d>
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]= {0};
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     886:	f1 2c       	mov	r15, r1
     888:	01 c0       	rjmp	.+2      	; 0x88c <__stack+0x2d>

	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     88a:	f1 2c       	mov	r15, r1
	
#endif
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
     88c:	8f 2d       	mov	r24, r15
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	df 90       	pop	r13
     8a0:	cf 90       	pop	r12
     8a2:	08 95       	ret

000008a4 <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
     8a4:	cf 92       	push	r12
     8a6:	df 92       	push	r13
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	00 d0       	rcall	.+0      	; 0x8b4 <Eeprom_24_writePage+0x10>
     8b4:	1f 92       	push	r1
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     8ba:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     8be:	93 30       	cpi	r25, 0x03	; 3
     8c0:	29 f5       	brne	.+74     	; 0x90c <Eeprom_24_writePage+0x68>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     8c2:	61 15       	cp	r22, r1
     8c4:	71 05       	cpc	r23, r1
     8c6:	31 f1       	breq	.+76     	; 0x914 <Eeprom_24_writePage+0x70>
     8c8:	6b 01       	movw	r12, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
     8ca:	90 e4       	ldi	r25, 0x40	; 64
     8cc:	89 9f       	mul	r24, r25
     8ce:	a0 01       	movw	r20, r0
     8d0:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
     8d2:	19 82       	std	Y+1, r1	; 0x01
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]={0};
     8d4:	1b 82       	std	Y+3, r1	; 0x03
     8d6:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
     8d8:	be 01       	movw	r22, r28
     8da:	6e 5f       	subi	r22, 0xFE	; 254
     8dc:	7f 4f       	sbci	r23, 0xFF	; 255
     8de:	ce 01       	movw	r24, r28
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	0e 94 a1 03 	call	0x742	; 0x742 <EEPROM_getAddresses>
     8e6:	f8 2e       	mov	r15, r24
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	f8 12       	cpse	r15, r24
     8ec:	17 c0       	rjmp	.+46     	; 0x91c <Eeprom_24_writePage+0x78>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
     8ee:	00 e4       	ldi	r16, 0x40	; 64
     8f0:	10 e0       	ldi	r17, 0x00	; 0
     8f2:	96 01       	movw	r18, r12
     8f4:	42 e0       	ldi	r20, 0x02	; 2
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	be 01       	movw	r22, r28
     8fa:	6e 5f       	subi	r22, 0xFE	; 254
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	0e 94 1a 09 	call	0x1234	; 0x1234 <I2C_MasterSendGeneral>
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	59 f0       	breq	.+22     	; 0x91e <Eeprom_24_writePage+0x7a>
		return EEPROM_24_STATUS_ERROR_NOK;
     908:	f1 2c       	mov	r15, r1
     90a:	09 c0       	rjmp	.+18     	; 0x91e <Eeprom_24_writePage+0x7a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     90c:	68 94       	set
     90e:	ff 24       	eor	r15, r15
     910:	f1 f8       	bld	r15, 1
     912:	05 c0       	rjmp	.+10     	; 0x91e <Eeprom_24_writePage+0x7a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     914:	68 94       	set
     916:	ff 24       	eor	r15, r15
     918:	f2 f8       	bld	r15, 2
     91a:	01 c0       	rjmp	.+2      	; 0x91e <Eeprom_24_writePage+0x7a>
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]={0};
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     91c:	f1 2c       	mov	r15, r1
	
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
     91e:	8f 2d       	mov	r24, r15
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	df 90       	pop	r13
     932:	cf 90       	pop	r12
     934:	08 95       	ret

00000936 <Eeprom_24_readPage>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory page.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read data inside a specific page in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPage(uint8_t u8_page, uint8_t *pu8_data)
{
     936:	cf 92       	push	r12
     938:	df 92       	push	r13
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	00 d0       	rcall	.+0      	; 0x946 <Eeprom_24_readPage+0x10>
     946:	1f 92       	push	r1
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     94c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     950:	93 30       	cpi	r25, 0x03	; 3
     952:	29 f5       	brne	.+74     	; 0x99e <Eeprom_24_readPage+0x68>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     954:	61 15       	cp	r22, r1
     956:	71 05       	cpc	r23, r1
     958:	31 f1       	breq	.+76     	; 0x9a6 <Eeprom_24_readPage+0x70>
     95a:	6b 01       	movw	r12, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
     95c:	90 e4       	ldi	r25, 0x40	; 64
     95e:	89 9f       	mul	r24, r25
     960:	a0 01       	movw	r20, r0
     962:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
     964:	19 82       	std	Y+1, r1	; 0x01
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]={0};
     966:	1b 82       	std	Y+3, r1	; 0x03
     968:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
     96a:	be 01       	movw	r22, r28
     96c:	6e 5f       	subi	r22, 0xFE	; 254
     96e:	7f 4f       	sbci	r23, 0xFF	; 255
     970:	ce 01       	movw	r24, r28
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	0e 94 a1 03 	call	0x742	; 0x742 <EEPROM_getAddresses>
     978:	f8 2e       	mov	r15, r24
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	f8 12       	cpse	r15, r24
     97e:	17 c0       	rjmp	.+46     	; 0x9ae <Eeprom_24_readPage+0x78>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
     980:	00 e4       	ldi	r16, 0x40	; 64
     982:	10 e0       	ldi	r17, 0x00	; 0
     984:	96 01       	movw	r18, r12
     986:	42 e0       	ldi	r20, 0x02	; 2
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	be 01       	movw	r22, r28
     98c:	6e 5f       	subi	r22, 0xFE	; 254
     98e:	7f 4f       	sbci	r23, 0xFF	; 255
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	0e 94 7d 09 	call	0x12fa	; 0x12fa <I2C_MasterReceiveGeneral>
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	59 f0       	breq	.+22     	; 0x9b0 <Eeprom_24_readPage+0x7a>
		return EEPROM_24_STATUS_ERROR_NOK;
     99a:	f1 2c       	mov	r15, r1
     99c:	09 c0       	rjmp	.+18     	; 0x9b0 <Eeprom_24_readPage+0x7a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     99e:	68 94       	set
     9a0:	ff 24       	eor	r15, r15
     9a2:	f1 f8       	bld	r15, 1
     9a4:	05 c0       	rjmp	.+10     	; 0x9b0 <Eeprom_24_readPage+0x7a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     9a6:	68 94       	set
     9a8:	ff 24       	eor	r15, r15
     9aa:	f2 f8       	bld	r15, 2
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <Eeprom_24_readPage+0x7a>
		return EEPROM_24_STATUS_ERROR_NOK;

#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]={0};
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     9ae:	f1 2c       	mov	r15, r1
	
	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
     9b0:	8f 2d       	mov	r24, r15
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	df 90       	pop	r13
     9c4:	cf 90       	pop	r12
     9c6:	08 95       	ret

000009c8 <Eeprom_24_writePacket>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Multiple data bytes to a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
     9c8:	6f 92       	push	r6
     9ca:	7f 92       	push	r7
     9cc:	8f 92       	push	r8
     9ce:	9f 92       	push	r9
     9d0:	af 92       	push	r10
     9d2:	bf 92       	push	r11
     9d4:	cf 92       	push	r12
     9d6:	df 92       	push	r13
     9d8:	ff 92       	push	r15
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	00 d0       	rcall	.+0      	; 0x9e4 <Eeprom_24_writePacket+0x1c>
     9e4:	1f 92       	push	r1
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	8c 01       	movw	r16, r24
     9ec:	5b 01       	movw	r10, r22
     9ee:	6a 01       	movw	r12, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     9f0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_eepromModuleState>
     9f4:	83 30       	cpi	r24, 0x03	; 3
     9f6:	09 f0       	breq	.+2      	; 0x9fa <Eeprom_24_writePacket+0x32>
     9f8:	b4 c0       	rjmp	.+360    	; 0xb62 <Eeprom_24_writePacket+0x19a>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     9fa:	67 2b       	or	r22, r23
     9fc:	09 f4       	brne	.+2      	; 0xa00 <Eeprom_24_writePacket+0x38>
     9fe:	b5 c0       	rjmp	.+362    	; 0xb6a <Eeprom_24_writePacket+0x1a2>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     a00:	19 82       	std	Y+1, r1	; 0x01
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
	}
	
#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]= {0};
     a02:	1b 82       	std	Y+3, r1	; 0x03
     a04:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     a06:	a8 01       	movw	r20, r16
     a08:	be 01       	movw	r22, r28
     a0a:	6e 5f       	subi	r22, 0xFE	; 254
     a0c:	7f 4f       	sbci	r23, 0xFF	; 255
     a0e:	ce 01       	movw	r24, r28
     a10:	01 96       	adiw	r24, 0x01	; 1
     a12:	0e 94 a1 03 	call	0x742	; 0x742 <EEPROM_getAddresses>
     a16:	f8 2e       	mov	r15, r24
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	f8 12       	cpse	r15, r24
     a1c:	aa c0       	rjmp	.+340    	; 0xb72 <Eeprom_24_writePacket+0x1aa>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint16_t u16_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;
     a1e:	48 01       	movw	r8, r16
     a20:	80 ec       	ldi	r24, 0xC0	; 192
     a22:	88 22       	and	r8, r24
     a24:	e8 94       	clt
     a26:	97 f8       	bld	r9, 7
     a28:	00 24       	eor	r0, r0
     a2a:	88 0c       	add	r8, r8
     a2c:	99 1c       	adc	r9, r9
     a2e:	00 1c       	adc	r0, r0
     a30:	88 0c       	add	r8, r8
     a32:	99 1c       	adc	r9, r9
     a34:	00 1c       	adc	r0, r0
     a36:	89 2c       	mov	r8, r9
     a38:	90 2c       	mov	r9, r0
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
     a3a:	0f 73       	andi	r16, 0x3F	; 63
	if(u8_byteOffset != 0)
     a3c:	89 f1       	breq	.+98     	; 0xaa0 <Eeprom_24_writePacket+0xd8>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
     a3e:	80 e4       	ldi	r24, 0x40	; 64
     a40:	68 2e       	mov	r6, r24
     a42:	60 1a       	sub	r6, r16
		if (u16_dataLen < length)
     a44:	71 2c       	mov	r7, r1
     a46:	c6 14       	cp	r12, r6
     a48:	d7 04       	cpc	r13, r7
     a4a:	78 f4       	brcc	.+30     	; 0xa6a <Eeprom_24_writePacket+0xa2>
		{
			if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
     a4c:	86 01       	movw	r16, r12
     a4e:	95 01       	movw	r18, r10
     a50:	42 e0       	ldi	r20, 0x02	; 2
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	be 01       	movw	r22, r28
     a56:	6e 5f       	subi	r22, 0xFE	; 254
     a58:	7f 4f       	sbci	r23, 0xFF	; 255
     a5a:	89 81       	ldd	r24, Y+1	; 0x01
     a5c:	0e 94 1a 09 	call	0x1234	; 0x1234 <I2C_MasterSendGeneral>
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	09 f4       	brne	.+2      	; 0xa66 <Eeprom_24_writePacket+0x9e>
     a64:	8f c0       	rjmp	.+286    	; 0xb84 <Eeprom_24_writePacket+0x1bc>
				return EEPROM_24_STATUS_ERROR_NOK;
     a66:	f1 2c       	mov	r15, r1
     a68:	8d c0       	rjmp	.+282    	; 0xb84 <Eeprom_24_writePacket+0x1bc>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, length) != I2C_STATUS_ERROR_OK)
     a6a:	83 01       	movw	r16, r6
     a6c:	95 01       	movw	r18, r10
     a6e:	42 e0       	ldi	r20, 0x02	; 2
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	be 01       	movw	r22, r28
     a74:	6e 5f       	subi	r22, 0xFE	; 254
     a76:	7f 4f       	sbci	r23, 0xFF	; 255
     a78:	89 81       	ldd	r24, Y+1	; 0x01
     a7a:	0e 94 1a 09 	call	0x1234	; 0x1234 <I2C_MasterSendGeneral>
     a7e:	81 30       	cpi	r24, 0x01	; 1
     a80:	09 f0       	breq	.+2      	; 0xa84 <Eeprom_24_writePacket+0xbc>
     a82:	79 c0       	rjmp	.+242    	; 0xb76 <Eeprom_24_writePacket+0x1ae>
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
     a84:	c6 18       	sub	r12, r6
     a86:	d7 08       	sbc	r13, r7
		i=1;
		Delay_ms(15);
     a88:	2f e0       	ldi	r18, 0x0F	; 15
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 42 07 	call	0xe84	; 0xe84 <Delay_ms>
		}
		if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
     a9c:	01 e0       	ldi	r16, 0x01	; 1
     a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <Eeprom_24_writePacket+0xde>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
     aa0:	00 e0       	ldi	r16, 0x00	; 0

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
     aa2:	61 2c       	mov	r6, r1
     aa4:	71 2c       	mov	r7, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
     aa6:	c6 01       	movw	r24, r12
     aa8:	00 24       	eor	r0, r0
     aaa:	88 0f       	add	r24, r24
     aac:	99 1f       	adc	r25, r25
     aae:	00 1c       	adc	r0, r0
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	00 1c       	adc	r0, r0
     ab6:	89 2f       	mov	r24, r25
     ab8:	90 2d       	mov	r25, r0
     aba:	18 2f       	mov	r17, r24
	while (pages_num > 0)
     abc:	1c c0       	rjmp	.+56     	; 0xaf6 <Eeprom_24_writePacket+0x12e>
	{
		pages_num--;
     abe:	11 50       	subi	r17, 0x01	; 1
		if(Eeprom_24_writePage(u16_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
     ac0:	b5 01       	movw	r22, r10
     ac2:	66 0d       	add	r22, r6
     ac4:	77 1d       	adc	r23, r7
     ac6:	80 2f       	mov	r24, r16
     ac8:	88 0d       	add	r24, r8
     aca:	0e 94 52 04 	call	0x8a4	; 0x8a4 <Eeprom_24_writePage>
     ace:	81 30       	cpi	r24, 0x01	; 1
     ad0:	09 f0       	breq	.+2      	; 0xad4 <Eeprom_24_writePacket+0x10c>
     ad2:	53 c0       	rjmp	.+166    	; 0xb7a <Eeprom_24_writePacket+0x1b2>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
     ad4:	0f 5f       	subi	r16, 0xFF	; 255
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
     ad6:	80 e4       	ldi	r24, 0x40	; 64
     ad8:	c8 1a       	sub	r12, r24
     ada:	d1 08       	sbc	r13, r1
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
     adc:	80 e4       	ldi	r24, 0x40	; 64
     ade:	68 0e       	add	r6, r24
     ae0:	71 1c       	adc	r7, r1
		Delay_ms(15);
     ae2:	2f e0       	ldi	r18, 0x0F	; 15
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	40 e0       	ldi	r20, 0x00	; 0
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 42 07 	call	0xe84	; 0xe84 <Delay_ms>
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
     af6:	11 16       	cp	r1, r17
     af8:	14 f3       	brlt	.-60     	; 0xabe <Eeprom_24_writePacket+0xf6>
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
		Delay_ms(15);
	}
	
	if (u16_dataLen > 0)
     afa:	c1 14       	cp	r12, r1
     afc:	d1 04       	cpc	r13, r1
     afe:	09 f4       	brne	.+2      	; 0xb02 <Eeprom_24_writePacket+0x13a>
     b00:	41 c0       	rjmp	.+130    	; 0xb84 <Eeprom_24_writePacket+0x1bc>
	{
		uint16_t u16_newLocation = (u16_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
     b02:	a4 01       	movw	r20, r8
     b04:	40 0f       	add	r20, r16
     b06:	51 1d       	adc	r21, r1
     b08:	00 24       	eor	r0, r0
     b0a:	56 95       	lsr	r21
     b0c:	47 95       	ror	r20
     b0e:	07 94       	ror	r0
     b10:	56 95       	lsr	r21
     b12:	47 95       	ror	r20
     b14:	07 94       	ror	r0
     b16:	54 2f       	mov	r21, r20
     b18:	40 2d       	mov	r20, r0
		if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
     b1a:	be 01       	movw	r22, r28
     b1c:	6e 5f       	subi	r22, 0xFE	; 254
     b1e:	7f 4f       	sbci	r23, 0xFF	; 255
     b20:	ce 01       	movw	r24, r28
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	0e 94 a1 03 	call	0x742	; 0x742 <EEPROM_getAddresses>
     b28:	f8 2e       	mov	r15, r24
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	f8 12       	cpse	r15, r24
     b2e:	27 c0       	rjmp	.+78     	; 0xb7e <Eeprom_24_writePacket+0x1b6>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
     b30:	95 01       	movw	r18, r10
     b32:	26 0d       	add	r18, r6
     b34:	37 1d       	adc	r19, r7
     b36:	86 01       	movw	r16, r12
     b38:	42 e0       	ldi	r20, 0x02	; 2
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	be 01       	movw	r22, r28
     b3e:	6e 5f       	subi	r22, 0xFE	; 254
     b40:	7f 4f       	sbci	r23, 0xFF	; 255
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	0e 94 1a 09 	call	0x1234	; 0x1234 <I2C_MasterSendGeneral>
     b48:	81 30       	cpi	r24, 0x01	; 1
     b4a:	d9 f4       	brne	.+54     	; 0xb82 <Eeprom_24_writePacket+0x1ba>
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
     b4c:	2f e0       	ldi	r18, 0x0F	; 15
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	50 e0       	ldi	r21, 0x00	; 0
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 42 07 	call	0xe84	; 0xe84 <Delay_ms>
     b60:	11 c0       	rjmp	.+34     	; 0xb84 <Eeprom_24_writePacket+0x1bc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     b62:	68 94       	set
     b64:	ff 24       	eor	r15, r15
     b66:	f1 f8       	bld	r15, 1
     b68:	0d c0       	rjmp	.+26     	; 0xb84 <Eeprom_24_writePacket+0x1bc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     b6a:	68 94       	set
     b6c:	ff 24       	eor	r15, r15
     b6e:	f2 f8       	bld	r15, 2
     b70:	09 c0       	rjmp	.+18     	; 0xb84 <Eeprom_24_writePacket+0x1bc>
	}
	
#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]= {0};
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     b72:	f1 2c       	mov	r15, r1
     b74:	07 c0       	rjmp	.+14     	; 0xb84 <Eeprom_24_writePacket+0x1bc>
			if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     b76:	f1 2c       	mov	r15, r1
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <Eeprom_24_writePacket+0x1bc>
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
	{
		pages_num--;
		if(Eeprom_24_writePage(u16_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     b7a:	f1 2c       	mov	r15, r1
     b7c:	03 c0       	rjmp	.+6      	; 0xb84 <Eeprom_24_writePacket+0x1bc>
	
	if (u16_dataLen > 0)
	{
		uint16_t u16_newLocation = (u16_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     b7e:	f1 2c       	mov	r15, r1
     b80:	01 c0       	rjmp	.+2      	; 0xb84 <Eeprom_24_writePacket+0x1bc>
		if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     b82:	f1 2c       	mov	r15, r1
		Delay_ms(15);
	}

#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
     b84:	8f 2d       	mov	r24, r15
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	df 90       	pop	r13
     b98:	cf 90       	pop	r12
     b9a:	bf 90       	pop	r11
     b9c:	af 90       	pop	r10
     b9e:	9f 90       	pop	r9
     ba0:	8f 90       	pop	r8
     ba2:	7f 90       	pop	r7
     ba4:	6f 90       	pop	r6
     ba6:	08 95       	ret

00000ba8 <Eeprom_24_readPacket>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read Multiple data bytes from a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
     ba8:	6f 92       	push	r6
     baa:	7f 92       	push	r7
     bac:	8f 92       	push	r8
     bae:	9f 92       	push	r9
     bb0:	af 92       	push	r10
     bb2:	bf 92       	push	r11
     bb4:	cf 92       	push	r12
     bb6:	df 92       	push	r13
     bb8:	ff 92       	push	r15
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <Eeprom_24_readPacket+0x1c>
     bc4:	1f 92       	push	r1
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	8c 01       	movw	r16, r24
     bcc:	5b 01       	movw	r10, r22
     bce:	6a 01       	movw	r12, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     bd0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_eepromModuleState>
     bd4:	83 30       	cpi	r24, 0x03	; 3
     bd6:	09 f0       	breq	.+2      	; 0xbda <Eeprom_24_readPacket+0x32>
     bd8:	9d c0       	rjmp	.+314    	; 0xd14 <Eeprom_24_readPacket+0x16c>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     bda:	67 2b       	or	r22, r23
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <Eeprom_24_readPacket+0x38>
     bde:	9e c0       	rjmp	.+316    	; 0xd1c <Eeprom_24_readPacket+0x174>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     be0:	19 82       	std	Y+1, r1	; 0x01
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]={0};
     be2:	1b 82       	std	Y+3, r1	; 0x03
     be4:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     be6:	a8 01       	movw	r20, r16
     be8:	be 01       	movw	r22, r28
     bea:	6e 5f       	subi	r22, 0xFE	; 254
     bec:	7f 4f       	sbci	r23, 0xFF	; 255
     bee:	ce 01       	movw	r24, r28
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	0e 94 a1 03 	call	0x742	; 0x742 <EEPROM_getAddresses>
     bf6:	f8 2e       	mov	r15, r24
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	f8 12       	cpse	r15, r24
     bfc:	93 c0       	rjmp	.+294    	; 0xd24 <Eeprom_24_readPacket+0x17c>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint16_t u16_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;		//The first page to write in
     bfe:	48 01       	movw	r8, r16
     c00:	80 ec       	ldi	r24, 0xC0	; 192
     c02:	88 22       	and	r8, r24
     c04:	e8 94       	clt
     c06:	97 f8       	bld	r9, 7
     c08:	00 24       	eor	r0, r0
     c0a:	88 0c       	add	r8, r8
     c0c:	99 1c       	adc	r9, r9
     c0e:	00 1c       	adc	r0, r0
     c10:	88 0c       	add	r8, r8
     c12:	99 1c       	adc	r9, r9
     c14:	00 1c       	adc	r0, r0
     c16:	89 2c       	mov	r8, r9
     c18:	90 2c       	mov	r9, r0
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
     c1a:	0f 73       	andi	r16, 0x3F	; 63
	
	if(u8_byteOffset != 0)
     c1c:	69 f1       	breq	.+90     	; 0xc78 <Eeprom_24_readPacket+0xd0>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
     c1e:	80 e4       	ldi	r24, 0x40	; 64
     c20:	68 2e       	mov	r6, r24
     c22:	60 1a       	sub	r6, r16
		if (u16_dataLen < length)
     c24:	71 2c       	mov	r7, r1
     c26:	c6 14       	cp	r12, r6
     c28:	d7 04       	cpc	r13, r7
     c2a:	a8 f4       	brcc	.+42     	; 0xc56 <Eeprom_24_readPacket+0xae>
		{
			DIO_PORTB_DIR |= 1<<6;
     c2c:	87 b3       	in	r24, 0x17	; 23
     c2e:	80 64       	ori	r24, 0x40	; 64
     c30:	87 bb       	out	0x17, r24	; 23
			DIO_PORTB_DATA |= 1<<6;
     c32:	88 b3       	in	r24, 0x18	; 24
     c34:	80 64       	ori	r24, 0x40	; 64
     c36:	88 bb       	out	0x18, r24	; 24
			if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
     c38:	86 01       	movw	r16, r12
     c3a:	95 01       	movw	r18, r10
     c3c:	42 e0       	ldi	r20, 0x02	; 2
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	be 01       	movw	r22, r28
     c42:	6e 5f       	subi	r22, 0xFE	; 254
     c44:	7f 4f       	sbci	r23, 0xFF	; 255
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	0e 94 7d 09 	call	0x12fa	; 0x12fa <I2C_MasterReceiveGeneral>
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	09 f4       	brne	.+2      	; 0xc52 <Eeprom_24_readPacket+0xaa>
     c50:	70 c0       	rjmp	.+224    	; 0xd32 <Eeprom_24_readPacket+0x18a>
				return EEPROM_24_STATUS_ERROR_NOK;
     c52:	f1 2c       	mov	r15, r1
     c54:	6e c0       	rjmp	.+220    	; 0xd32 <Eeprom_24_readPacket+0x18a>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, length) != I2C_STATUS_ERROR_OK)
     c56:	83 01       	movw	r16, r6
     c58:	95 01       	movw	r18, r10
     c5a:	42 e0       	ldi	r20, 0x02	; 2
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	be 01       	movw	r22, r28
     c60:	6e 5f       	subi	r22, 0xFE	; 254
     c62:	7f 4f       	sbci	r23, 0xFF	; 255
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	0e 94 7d 09 	call	0x12fa	; 0x12fa <I2C_MasterReceiveGeneral>
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	09 f0       	breq	.+2      	; 0xc70 <Eeprom_24_readPacket+0xc8>
     c6e:	5c c0       	rjmp	.+184    	; 0xd28 <Eeprom_24_readPacket+0x180>
			return EEPROM_24_STATUS_ERROR_NOK;
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
     c70:	c6 18       	sub	r12, r6
     c72:	d7 08       	sbc	r13, r7
		i=1;
     c74:	11 e0       	ldi	r17, 0x01	; 1
     c76:	03 c0       	rjmp	.+6      	; 0xc7e <Eeprom_24_readPacket+0xd6>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
     c78:	10 e0       	ldi	r17, 0x00	; 0

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
     c7a:	61 2c       	mov	r6, r1
     c7c:	71 2c       	mov	r7, r1
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
     c7e:	c6 01       	movw	r24, r12
     c80:	00 24       	eor	r0, r0
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	00 1c       	adc	r0, r0
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	00 1c       	adc	r0, r0
     c8e:	89 2f       	mov	r24, r25
     c90:	90 2d       	mov	r25, r0
	while (pages_num--)
     c92:	12 c0       	rjmp	.+36     	; 0xcb8 <Eeprom_24_readPacket+0x110>
	{
		if(Eeprom_24_readPage(u16_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
     c94:	b5 01       	movw	r22, r10
     c96:	66 0d       	add	r22, r6
     c98:	77 1d       	adc	r23, r7
     c9a:	81 2f       	mov	r24, r17
     c9c:	88 0d       	add	r24, r8
     c9e:	0e 94 9b 04 	call	0x936	; 0x936 <Eeprom_24_readPage>
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	09 f0       	breq	.+2      	; 0xca8 <Eeprom_24_readPacket+0x100>
     ca6:	42 c0       	rjmp	.+132    	; 0xd2c <Eeprom_24_readPacket+0x184>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
     ca8:	1f 5f       	subi	r17, 0xFF	; 255
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
     caa:	80 e4       	ldi	r24, 0x40	; 64
     cac:	c8 1a       	sub	r12, r24
     cae:	d1 08       	sbc	r13, r1
		u16dataIndex += EEPROM_24_PAGE_BYTES;
     cb0:	80 e4       	ldi	r24, 0x40	; 64
     cb2:	68 0e       	add	r6, r24
     cb4:	71 1c       	adc	r7, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
     cb6:	80 2f       	mov	r24, r16
     cb8:	0f ef       	ldi	r16, 0xFF	; 255
     cba:	08 0f       	add	r16, r24
     cbc:	81 11       	cpse	r24, r1
     cbe:	ea cf       	rjmp	.-44     	; 0xc94 <Eeprom_24_readPacket+0xec>
		i++;
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u16dataIndex += EEPROM_24_PAGE_BYTES;
	}

	if (u16_dataLen > 0)
     cc0:	c1 14       	cp	r12, r1
     cc2:	d1 04       	cpc	r13, r1
     cc4:	b1 f1       	breq	.+108    	; 0xd32 <Eeprom_24_readPacket+0x18a>
	{
		uint16_t new_location = (u16_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
     cc6:	a4 01       	movw	r20, r8
     cc8:	41 0f       	add	r20, r17
     cca:	51 1d       	adc	r21, r1
     ccc:	00 24       	eor	r0, r0
     cce:	56 95       	lsr	r21
     cd0:	47 95       	ror	r20
     cd2:	07 94       	ror	r0
     cd4:	56 95       	lsr	r21
     cd6:	47 95       	ror	r20
     cd8:	07 94       	ror	r0
     cda:	54 2f       	mov	r21, r20
     cdc:	40 2d       	mov	r20, r0
		if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
     cde:	be 01       	movw	r22, r28
     ce0:	6e 5f       	subi	r22, 0xFE	; 254
     ce2:	7f 4f       	sbci	r23, 0xFF	; 255
     ce4:	ce 01       	movw	r24, r28
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	0e 94 a1 03 	call	0x742	; 0x742 <EEPROM_getAddresses>
     cec:	f8 2e       	mov	r15, r24
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	f8 12       	cpse	r15, r24
     cf2:	1e c0       	rjmp	.+60     	; 0xd30 <Eeprom_24_readPacket+0x188>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
     cf4:	95 01       	movw	r18, r10
     cf6:	26 0d       	add	r18, r6
     cf8:	37 1d       	adc	r19, r7
     cfa:	86 01       	movw	r16, r12
     cfc:	42 e0       	ldi	r20, 0x02	; 2
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	be 01       	movw	r22, r28
     d02:	6e 5f       	subi	r22, 0xFE	; 254
     d04:	7f 4f       	sbci	r23, 0xFF	; 255
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	0e 94 7d 09 	call	0x12fa	; 0x12fa <I2C_MasterReceiveGeneral>
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	89 f0       	breq	.+34     	; 0xd32 <Eeprom_24_readPacket+0x18a>
			return EEPROM_24_STATUS_ERROR_NOK;
     d10:	f1 2c       	mov	r15, r1
     d12:	0f c0       	rjmp	.+30     	; 0xd32 <Eeprom_24_readPacket+0x18a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     d14:	68 94       	set
     d16:	ff 24       	eor	r15, r15
     d18:	f1 f8       	bld	r15, 1
     d1a:	0b c0       	rjmp	.+22     	; 0xd32 <Eeprom_24_readPacket+0x18a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     d1c:	68 94       	set
     d1e:	ff 24       	eor	r15, r15
     d20:	f2 f8       	bld	r15, 2
     d22:	07 c0       	rjmp	.+14     	; 0xd32 <Eeprom_24_readPacket+0x18a>
			return EEPROM_24_STATUS_ERROR_NOK;
	}
#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]={0};
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     d24:	f1 2c       	mov	r15, r1
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <Eeprom_24_readPacket+0x18a>
			if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     d28:	f1 2c       	mov	r15, r1
     d2a:	03 c0       	rjmp	.+6      	; 0xd32 <Eeprom_24_readPacket+0x18a>
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
	{
		if(Eeprom_24_readPage(u16_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     d2c:	f1 2c       	mov	r15, r1
     d2e:	01 c0       	rjmp	.+2      	; 0xd32 <Eeprom_24_readPacket+0x18a>

	if (u16_dataLen > 0)
	{
		uint16_t new_location = (u16_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     d30:	f1 2c       	mov	r15, r1
		if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
     d32:	8f 2d       	mov	r24, r15
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	ff 90       	pop	r15
     d44:	df 90       	pop	r13
     d46:	cf 90       	pop	r12
     d48:	bf 90       	pop	r11
     d4a:	af 90       	pop	r10
     d4c:	9f 90       	pop	r9
     d4e:	8f 90       	pop	r8
     d50:	7f 90       	pop	r7
     d52:	6f 90       	pop	r6
     d54:	08 95       	ret

00000d56 <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
     d5a:	c0 91 3e 02 	lds	r28, 0x023E	; 0x80023e <gu8_counter>
     d5e:	d0 e0       	ldi	r29, 0x00	; 0
     d60:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <Uart_DataRegister>
     d64:	c1 5c       	subi	r28, 0xC1	; 193
     d66:	dd 4f       	sbci	r29, 0xFD	; 253
     d68:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
     d6a:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <gu8_counter>
     d6e:	e9 2f       	mov	r30, r25
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	e1 5c       	subi	r30, 0xC1	; 193
     d74:	fd 4f       	sbci	r31, 0xFD	; 253
     d76:	80 81       	ld	r24, Z
     d78:	8d 30       	cpi	r24, 0x0D	; 13
     d7a:	71 f4       	brne	.+28     	; 0xd98 <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
     d7c:	0e 94 24 0b 	call	0x1648	; 0x1648 <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
     d80:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <gu8_counter>
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	e1 5c       	subi	r30, 0xC1	; 193
     d88:	fd 4f       	sbci	r31, 0xFD	; 253
     d8a:	10 82       	st	Z, r1
		gu8_counter = 0;
     d8c:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <gu8_counter>
		gu8_flag = 1;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <gu8_flag>
     d96:	1d c0       	rjmp	.+58     	; 0xdd2 <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
     d98:	88 30       	cpi	r24, 0x08	; 8
     d9a:	51 f4       	brne	.+20     	; 0xdb0 <Uart_RXC_ISR+0x5a>
     d9c:	99 23       	and	r25, r25
     d9e:	41 f0       	breq	.+16     	; 0xdb0 <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
     da0:	0e 94 24 0b 	call	0x1648	; 0x1648 <Uart_sendByte>
		gu8_counter--;
     da4:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <gu8_counter>
     da8:	81 50       	subi	r24, 0x01	; 1
     daa:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <gu8_counter>
     dae:	11 c0       	rjmp	.+34     	; 0xdd2 <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
     db0:	88 30       	cpi	r24, 0x08	; 8
     db2:	79 f0       	breq	.+30     	; 0xdd2 <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
     db4:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <gu8_visibility>
     db8:	91 30       	cpi	r25, 0x01	; 1
     dba:	21 f4       	brne	.+8      	; 0xdc4 <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
     dbc:	8a e2       	ldi	r24, 0x2A	; 42
     dbe:	0e 94 24 0b 	call	0x1648	; 0x1648 <Uart_sendByte>
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
     dc4:	0e 94 24 0b 	call	0x1648	; 0x1648 <Uart_sendByte>
		}
		gu8_counter++;
     dc8:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <gu8_counter>
     dcc:	8f 5f       	subi	r24, 0xFF	; 255
     dce:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <gu8_counter>
	}
}
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	08 95       	ret

00000dd8 <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
     dd8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
     ddc:	83 30       	cpi	r24, 0x03	; 3
     dde:	81 f0       	breq	.+32     	; 0xe00 <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
     de0:	0e 94 0e 0b 	call	0x161c	; 0x161c <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	11 f0       	breq	.+4      	; 0xdec <Terminal_init+0x14>
     de8:	87 30       	cpi	r24, 0x07	; 7
     dea:	49 f4       	brne	.+18     	; 0xdfe <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
     dec:	8b ea       	ldi	r24, 0xAB	; 171
     dee:	96 e0       	ldi	r25, 0x06	; 6
     df0:	0e 94 56 0b 	call	0x16ac	; 0x16ac <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
     df4:	83 e0       	ldi	r24, 0x03	; 3
     df6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
     dfe:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
     e00:	08 95       	ret

00000e02 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	81 f0       	breq	.+32     	; 0xe2a <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
     e0a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <genu_TerminalModuleState>
     e0e:	22 30       	cpi	r18, 0x02	; 2
     e10:	79 f0       	breq	.+30     	; 0xe30 <Terminal_Out+0x2e>
     e12:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
     e14:	0e 94 87 0a 	call	0x150e	; 0x150e <stringLength>
     e18:	68 2f       	mov	r22, r24
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	ce 01       	movw	r24, r28
     e1e:	0e 94 2f 0b 	call	0x165e	; 0x165e <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	21 f0       	breq	.+8      	; 0xe2e <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	03 c0       	rjmp	.+6      	; 0xe30 <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
     e2a:	24 e0       	ldi	r18, 0x04	; 4
     e2c:	01 c0       	rjmp	.+2      	; 0xe30 <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
     e2e:	21 e0       	ldi	r18, 0x01	; 1
}
     e30:	82 2f       	mov	r24, r18
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	08 95       	ret

00000e38 <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
     e38:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
     e3a:	89 2b       	or	r24, r25
     e3c:	a1 f0       	breq	.+40     	; 0xe66 <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
     e3e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
     e42:	82 30       	cpi	r24, 0x02	; 2
     e44:	99 f0       	breq	.+38     	; 0xe6c <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
     e46:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <gu8_flag>
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	71 f4       	brne	.+28     	; 0xe6a <Terminal_In+0x32>
	{
		gu8_flag = 0;
     e4e:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
     e52:	8f e3       	ldi	r24, 0x3F	; 63
     e54:	92 e0       	ldi	r25, 0x02	; 2
     e56:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <stringCopy>
		EmptyString(gau8_data);
     e5a:	8f e3       	ldi	r24, 0x3F	; 63
     e5c:	92 e0       	ldi	r25, 0x02	; 2
     e5e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
     e62:	85 e0       	ldi	r24, 0x05	; 5
     e64:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
     e66:	84 e0       	ldi	r24, 0x04	; 4
     e68:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
}
     e6c:	08 95       	ret

00000e6e <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
     e74:	08 95       	ret

00000e76 <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
     e76:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	08 95       	ret

00000e7e <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
     e7e:	0e 94 83 03 	call	0x706	; 0x706 <App_start>
     e82:	ff cf       	rjmp	.-2      	; 0xe82 <main+0x4>

00000e84 <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
     e84:	2f 92       	push	r2
     e86:	3f 92       	push	r3
     e88:	4f 92       	push	r4
     e8a:	5f 92       	push	r5
     e8c:	6f 92       	push	r6
     e8e:	7f 92       	push	r7
     e90:	8f 92       	push	r8
     e92:	9f 92       	push	r9
     e94:	af 92       	push	r10
     e96:	bf 92       	push	r11
     e98:	cf 92       	push	r12
     e9a:	df 92       	push	r13
     e9c:	ef 92       	push	r14
     e9e:	ff 92       	push	r15
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <Delay_ms+0x26>
     eaa:	00 d0       	rcall	.+0      	; 0xeac <Delay_ms+0x28>
     eac:	00 d0       	rcall	.+0      	; 0xeae <Delay_ms+0x2a>
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	22 2e       	mov	r2, r18
     eb4:	33 2e       	mov	r3, r19
     eb6:	44 2e       	mov	r4, r20
     eb8:	55 2e       	mov	r5, r21
     eba:	66 2e       	mov	r6, r22
     ebc:	79 83       	std	Y+1, r23	; 0x01
     ebe:	8a 83       	std	Y+2, r24	; 0x02
     ec0:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
     ec2:	91 2c       	mov	r9, r1
     ec4:	1d 82       	std	Y+5, r1	; 0x05
     ec6:	1c 82       	std	Y+4, r1	; 0x04
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	e0 e0       	ldi	r30, 0x00	; 0
     ece:	71 2c       	mov	r7, r1
     ed0:	81 2c       	mov	r8, r1
     ed2:	44 c0       	rjmp	.+136    	; 0xf5c <Delay_ms+0xd8>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
     ed4:	2d 2d       	mov	r18, r13
     ed6:	3e 2d       	mov	r19, r14
     ed8:	4f 2d       	mov	r20, r15
     eda:	50 2f       	mov	r21, r16
     edc:	61 2f       	mov	r22, r17
     ede:	7a 2f       	mov	r23, r26
     ee0:	8b 2d       	mov	r24, r11
     ee2:	9c 2d       	mov	r25, r12
     ee4:	a1 e0       	ldi	r26, 0x01	; 1
     ee6:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__adddi3_s8>
     eea:	d2 2e       	mov	r13, r18
     eec:	e3 2e       	mov	r14, r19
     eee:	f4 2e       	mov	r15, r20
     ef0:	05 2f       	mov	r16, r21
     ef2:	16 2f       	mov	r17, r22
     ef4:	a7 2f       	mov	r26, r23
     ef6:	b8 2e       	mov	r11, r24
     ef8:	c9 2e       	mov	r12, r25
     efa:	0a c0       	rjmp	.+20     	; 0xf10 <Delay_ms+0x8c>
     efc:	d1 2c       	mov	r13, r1
     efe:	e1 2c       	mov	r14, r1
     f00:	f1 2c       	mov	r15, r1
     f02:	00 e0       	ldi	r16, 0x00	; 0
     f04:	10 e0       	ldi	r17, 0x00	; 0
     f06:	a0 e0       	ldi	r26, 0x00	; 0
     f08:	b1 2c       	mov	r11, r1
     f0a:	c1 2c       	mov	r12, r1
     f0c:	ad 80       	ldd	r10, Y+5	; 0x05
     f0e:	ee 83       	std	Y+6, r30	; 0x06
     f10:	2d 2d       	mov	r18, r13
     f12:	3e 2d       	mov	r19, r14
     f14:	4f 2d       	mov	r20, r15
     f16:	50 2f       	mov	r21, r16
     f18:	61 2f       	mov	r22, r17
     f1a:	7a 2f       	mov	r23, r26
     f1c:	8b 2d       	mov	r24, r11
     f1e:	9c 2d       	mov	r25, r12
     f20:	2b 38       	cpi	r18, 0x8B	; 139
     f22:	31 05       	cpc	r19, r1
     f24:	41 05       	cpc	r20, r1
     f26:	51 05       	cpc	r21, r1
     f28:	61 05       	cpc	r22, r1
     f2a:	71 05       	cpc	r23, r1
     f2c:	81 05       	cpc	r24, r1
     f2e:	91 05       	cpc	r25, r1
     f30:	89 f2       	breq	.-94     	; 0xed4 <Delay_ms+0x50>
     f32:	80 f2       	brcs	.-96     	; 0xed4 <Delay_ms+0x50>
     f34:	ee 81       	ldd	r30, Y+6	; 0x06

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
     f36:	29 2d       	mov	r18, r9
     f38:	3a 2d       	mov	r19, r10
     f3a:	4c 81       	ldd	r20, Y+4	; 0x04
     f3c:	5b 2f       	mov	r21, r27
     f3e:	6f 2f       	mov	r22, r31
     f40:	7e 2f       	mov	r23, r30
     f42:	87 2d       	mov	r24, r7
     f44:	98 2d       	mov	r25, r8
     f46:	a1 e0       	ldi	r26, 0x01	; 1
     f48:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__adddi3_s8>
     f4c:	92 2e       	mov	r9, r18
     f4e:	3d 83       	std	Y+5, r19	; 0x05
     f50:	4c 83       	std	Y+4, r20	; 0x04
     f52:	b5 2f       	mov	r27, r21
     f54:	f6 2f       	mov	r31, r22
     f56:	e7 2f       	mov	r30, r23
     f58:	78 2e       	mov	r7, r24
     f5a:	89 2e       	mov	r8, r25
     f5c:	29 2d       	mov	r18, r9
     f5e:	3d 81       	ldd	r19, Y+5	; 0x05
     f60:	4c 81       	ldd	r20, Y+4	; 0x04
     f62:	5b 2f       	mov	r21, r27
     f64:	6f 2f       	mov	r22, r31
     f66:	7e 2f       	mov	r23, r30
     f68:	87 2d       	mov	r24, r7
     f6a:	98 2d       	mov	r25, r8
     f6c:	a2 2c       	mov	r10, r2
     f6e:	b3 2c       	mov	r11, r3
     f70:	c4 2c       	mov	r12, r4
     f72:	d5 2c       	mov	r13, r5
     f74:	e6 2c       	mov	r14, r6
     f76:	f9 80       	ldd	r15, Y+1	; 0x01
     f78:	0a 81       	ldd	r16, Y+2	; 0x02
     f7a:	1b 81       	ldd	r17, Y+3	; 0x03
     f7c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__cmpdi2>
     f80:	08 f4       	brcc	.+2      	; 0xf84 <Delay_ms+0x100>
     f82:	bc cf       	rjmp	.-136    	; 0xefc <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
     f84:	26 96       	adiw	r28, 0x06	; 6
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	ff 90       	pop	r15
     f9a:	ef 90       	pop	r14
     f9c:	df 90       	pop	r13
     f9e:	cf 90       	pop	r12
     fa0:	bf 90       	pop	r11
     fa2:	af 90       	pop	r10
     fa4:	9f 90       	pop	r9
     fa6:	8f 90       	pop	r8
     fa8:	7f 90       	pop	r7
     faa:	6f 90       	pop	r6
     fac:	5f 90       	pop	r5
     fae:	4f 90       	pop	r4
     fb0:	3f 90       	pop	r3
     fb2:	2f 90       	pop	r2
     fb4:	08 95       	ret

00000fb6 <Ext_INT0_init>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
     fb6:	9b b7       	in	r25, 0x3b	; 59
     fb8:	90 64       	ori	r25, 0x40	; 64
     fba:	9b bf       	out	0x3b, r25	; 59
     fbc:	95 b7       	in	r25, 0x35	; 53
     fbe:	89 2b       	or	r24, r25
     fc0:	85 bf       	out	0x35, r24	; 53
     fc2:	08 95       	ret

00000fc4 <INT0_setCallBack>:
     fc4:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <INT0_CallBackPtr+0x1>
     fc8:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <INT0_CallBackPtr>
     fcc:	08 95       	ret

00000fce <__vector_1>:
     fce:	1f 92       	push	r1
     fd0:	0f 92       	push	r0
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	0f 92       	push	r0
     fd6:	11 24       	eor	r1, r1
     fd8:	2f 93       	push	r18
     fda:	3f 93       	push	r19
     fdc:	4f 93       	push	r20
     fde:	5f 93       	push	r21
     fe0:	6f 93       	push	r22
     fe2:	7f 93       	push	r23
     fe4:	8f 93       	push	r24
     fe6:	9f 93       	push	r25
     fe8:	af 93       	push	r26
     fea:	bf 93       	push	r27
     fec:	ef 93       	push	r30
     fee:	ff 93       	push	r31
     ff0:	e0 91 43 03 	lds	r30, 0x0343	; 0x800343 <INT0_CallBackPtr>
     ff4:	f0 91 44 03 	lds	r31, 0x0344	; 0x800344 <INT0_CallBackPtr+0x1>
     ff8:	09 95       	icall
     ffa:	ff 91       	pop	r31
     ffc:	ef 91       	pop	r30
     ffe:	bf 91       	pop	r27
    1000:	af 91       	pop	r26
    1002:	9f 91       	pop	r25
    1004:	8f 91       	pop	r24
    1006:	7f 91       	pop	r23
    1008:	6f 91       	pop	r22
    100a:	5f 91       	pop	r21
    100c:	4f 91       	pop	r20
    100e:	3f 91       	pop	r19
    1010:	2f 91       	pop	r18
    1012:	0f 90       	pop	r0
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	0f 90       	pop	r0
    1018:	1f 90       	pop	r1
    101a:	18 95       	reti

0000101c <__vector_2>:
    101c:	1f 92       	push	r1
    101e:	0f 92       	push	r0
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	0f 92       	push	r0
    1024:	11 24       	eor	r1, r1
    1026:	2f 93       	push	r18
    1028:	3f 93       	push	r19
    102a:	4f 93       	push	r20
    102c:	5f 93       	push	r21
    102e:	6f 93       	push	r22
    1030:	7f 93       	push	r23
    1032:	8f 93       	push	r24
    1034:	9f 93       	push	r25
    1036:	af 93       	push	r26
    1038:	bf 93       	push	r27
    103a:	ef 93       	push	r30
    103c:	ff 93       	push	r31
    103e:	e0 91 41 03 	lds	r30, 0x0341	; 0x800341 <INT1_CallBackPtr>
    1042:	f0 91 42 03 	lds	r31, 0x0342	; 0x800342 <INT1_CallBackPtr+0x1>
    1046:	09 95       	icall
    1048:	ff 91       	pop	r31
    104a:	ef 91       	pop	r30
    104c:	bf 91       	pop	r27
    104e:	af 91       	pop	r26
    1050:	9f 91       	pop	r25
    1052:	8f 91       	pop	r24
    1054:	7f 91       	pop	r23
    1056:	6f 91       	pop	r22
    1058:	5f 91       	pop	r21
    105a:	4f 91       	pop	r20
    105c:	3f 91       	pop	r19
    105e:	2f 91       	pop	r18
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f 90       	pop	r0
    1066:	1f 90       	pop	r1
    1068:	18 95       	reti

0000106a <__vector_3>:
}
ISR(INT2_IRQ)
{
    106a:	1f 92       	push	r1
    106c:	0f 92       	push	r0
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	0f 92       	push	r0
    1072:	11 24       	eor	r1, r1
    1074:	2f 93       	push	r18
    1076:	3f 93       	push	r19
    1078:	4f 93       	push	r20
    107a:	5f 93       	push	r21
    107c:	6f 93       	push	r22
    107e:	7f 93       	push	r23
    1080:	8f 93       	push	r24
    1082:	9f 93       	push	r25
    1084:	af 93       	push	r26
    1086:	bf 93       	push	r27
    1088:	ef 93       	push	r30
    108a:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
    108c:	e0 91 3f 03 	lds	r30, 0x033F	; 0x80033f <INT2_CallBackPtr>
    1090:	f0 91 40 03 	lds	r31, 0x0340	; 0x800340 <INT2_CallBackPtr+0x1>
    1094:	09 95       	icall
}
    1096:	ff 91       	pop	r31
    1098:	ef 91       	pop	r30
    109a:	bf 91       	pop	r27
    109c:	af 91       	pop	r26
    109e:	9f 91       	pop	r25
    10a0:	8f 91       	pop	r24
    10a2:	7f 91       	pop	r23
    10a4:	6f 91       	pop	r22
    10a6:	5f 91       	pop	r21
    10a8:	4f 91       	pop	r20
    10aa:	3f 91       	pop	r19
    10ac:	2f 91       	pop	r18
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	1f 90       	pop	r1
    10b6:	18 95       	reti

000010b8 <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
    10b8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
    10bc:	86 30       	cpi	r24, 0x06	; 6
    10be:	49 f0       	breq	.+18     	; 0x10d2 <I2C_MasterInit+0x1a>
    10c0:	82 e0       	ldi	r24, 0x02	; 2
    10c2:	81 b9       	out	0x01, r24	; 1
    10c4:	89 e0       	ldi	r24, 0x09	; 9
    10c6:	80 b9       	out	0x00, r24	; 0
    10c8:	86 e0       	ldi	r24, 0x06	; 6
    10ca:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <genuI2C_Status>
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	08 95       	ret
    10d2:	87 e0       	ldi	r24, 0x07	; 7
    10d4:	08 95       	ret

000010d6 <I2C_MasterSendSTART>:
    10d6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
    10da:	86 30       	cpi	r24, 0x06	; 6
    10dc:	59 f4       	brne	.+22     	; 0x10f4 <I2C_MasterSendSTART+0x1e>
    10de:	84 ea       	ldi	r24, 0xA4	; 164
    10e0:	86 bf       	out	0x36, r24	; 54
    10e2:	06 b6       	in	r0, 0x36	; 54
    10e4:	07 fe       	sbrs	r0, 7
    10e6:	fd cf       	rjmp	.-6      	; 0x10e2 <I2C_MasterSendSTART+0xc>
    10e8:	81 b1       	in	r24, 0x01	; 1
    10ea:	88 7f       	andi	r24, 0xF8	; 248
    10ec:	88 30       	cpi	r24, 0x08	; 8
    10ee:	21 f0       	breq	.+8      	; 0x10f8 <I2C_MasterSendSTART+0x22>
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	08 95       	ret
    10f4:	85 e0       	ldi	r24, 0x05	; 5
    10f6:	08 95       	ret
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	08 95       	ret

000010fc <I2C_MasterSendSlaveAddress>:
    10fc:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
    1100:	96 30       	cpi	r25, 0x06	; 6
    1102:	29 f5       	brne	.+74     	; 0x114e <I2C_MasterSendSlaveAddress+0x52>
    1104:	62 30       	cpi	r22, 0x02	; 2
    1106:	28 f5       	brcc	.+74     	; 0x1152 <I2C_MasterSendSlaveAddress+0x56>
    1108:	88 23       	and	r24, r24
    110a:	2c f1       	brlt	.+74     	; 0x1156 <I2C_MasterSendSlaveAddress+0x5a>
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	68 2b       	or	r22, r24
    1114:	63 b9       	out	0x03, r22	; 3
    1116:	84 e8       	ldi	r24, 0x84	; 132
    1118:	86 bf       	out	0x36, r24	; 54
    111a:	06 b6       	in	r0, 0x36	; 54
    111c:	07 fe       	sbrs	r0, 7
    111e:	fd cf       	rjmp	.-6      	; 0x111a <I2C_MasterSendSlaveAddress+0x1e>
    1120:	81 b1       	in	r24, 0x01	; 1
    1122:	88 7f       	andi	r24, 0xF8	; 248
    1124:	88 33       	cpi	r24, 0x38	; 56
    1126:	59 f0       	breq	.+22     	; 0x113e <I2C_MasterSendSlaveAddress+0x42>
    1128:	28 f4       	brcc	.+10     	; 0x1134 <I2C_MasterSendSlaveAddress+0x38>
    112a:	88 31       	cpi	r24, 0x18	; 24
    112c:	b1 f0       	breq	.+44     	; 0x115a <I2C_MasterSendSlaveAddress+0x5e>
    112e:	80 32       	cpi	r24, 0x20	; 32
    1130:	41 f0       	breq	.+16     	; 0x1142 <I2C_MasterSendSlaveAddress+0x46>
    1132:	0b c0       	rjmp	.+22     	; 0x114a <I2C_MasterSendSlaveAddress+0x4e>
    1134:	80 34       	cpi	r24, 0x40	; 64
    1136:	89 f0       	breq	.+34     	; 0x115a <I2C_MasterSendSlaveAddress+0x5e>
    1138:	88 34       	cpi	r24, 0x48	; 72
    113a:	29 f0       	breq	.+10     	; 0x1146 <I2C_MasterSendSlaveAddress+0x4a>
    113c:	06 c0       	rjmp	.+12     	; 0x114a <I2C_MasterSendSlaveAddress+0x4e>
    113e:	88 e3       	ldi	r24, 0x38	; 56
    1140:	08 95       	ret
    1142:	80 e2       	ldi	r24, 0x20	; 32
    1144:	08 95       	ret
    1146:	88 e4       	ldi	r24, 0x48	; 72
    1148:	08 95       	ret
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret
    114e:	85 e0       	ldi	r24, 0x05	; 5
    1150:	08 95       	ret
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	08 95       	ret
    1156:	83 e0       	ldi	r24, 0x03	; 3
    1158:	08 95       	ret
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	08 95       	ret

0000115e <I2C_MasterSendRepSTART>:
    115e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
    1162:	86 30       	cpi	r24, 0x06	; 6
    1164:	59 f4       	brne	.+22     	; 0x117c <I2C_MasterSendRepSTART+0x1e>
    1166:	84 ea       	ldi	r24, 0xA4	; 164
    1168:	86 bf       	out	0x36, r24	; 54
    116a:	06 b6       	in	r0, 0x36	; 54
    116c:	07 fe       	sbrs	r0, 7
    116e:	fd cf       	rjmp	.-6      	; 0x116a <I2C_MasterSendRepSTART+0xc>
    1170:	81 b1       	in	r24, 0x01	; 1
    1172:	88 7f       	andi	r24, 0xF8	; 248
    1174:	80 31       	cpi	r24, 0x10	; 16
    1176:	21 f0       	breq	.+8      	; 0x1180 <I2C_MasterSendRepSTART+0x22>
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	08 95       	ret
    117c:	85 e0       	ldi	r24, 0x05	; 5
    117e:	08 95       	ret
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	08 95       	ret

00001184 <I2C_MasterSendSTOP>:
    1184:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
    1188:	86 30       	cpi	r24, 0x06	; 6
    118a:	39 f4       	brne	.+14     	; 0x119a <I2C_MasterSendSTOP+0x16>
    118c:	84 e9       	ldi	r24, 0x94	; 148
    118e:	86 bf       	out	0x36, r24	; 54
    1190:	06 b6       	in	r0, 0x36	; 54
    1192:	04 fc       	sbrc	r0, 4
    1194:	fd cf       	rjmp	.-6      	; 0x1190 <I2C_MasterSendSTOP+0xc>
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	08 95       	ret
    119a:	85 e0       	ldi	r24, 0x05	; 5
    119c:	08 95       	ret

0000119e <I2C_MasterSendByte>:
    119e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
    11a2:	96 30       	cpi	r25, 0x06	; 6
    11a4:	69 f4       	brne	.+26     	; 0x11c0 <I2C_MasterSendByte+0x22>
    11a6:	83 b9       	out	0x03, r24	; 3
    11a8:	84 e8       	ldi	r24, 0x84	; 132
    11aa:	86 bf       	out	0x36, r24	; 54
    11ac:	06 b6       	in	r0, 0x36	; 54
    11ae:	07 fe       	sbrs	r0, 7
    11b0:	fd cf       	rjmp	.-6      	; 0x11ac <I2C_MasterSendByte+0xe>
    11b2:	81 b1       	in	r24, 0x01	; 1
    11b4:	88 7f       	andi	r24, 0xF8	; 248
    11b6:	88 32       	cpi	r24, 0x28	; 40
    11b8:	29 f0       	breq	.+10     	; 0x11c4 <I2C_MasterSendByte+0x26>
    11ba:	80 33       	cpi	r24, 0x30	; 48
    11bc:	29 f4       	brne	.+10     	; 0x11c8 <I2C_MasterSendByte+0x2a>
    11be:	08 95       	ret
    11c0:	85 e0       	ldi	r24, 0x05	; 5
    11c2:	08 95       	ret
    11c4:	88 e2       	ldi	r24, 0x28	; 40
    11c6:	08 95       	ret
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	08 95       	ret

000011cc <I2C_MasterReceiveByte_ACK>:
    11cc:	fc 01       	movw	r30, r24
    11ce:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
    11d2:	96 30       	cpi	r25, 0x06	; 6
    11d4:	79 f4       	brne	.+30     	; 0x11f4 <I2C_MasterReceiveByte_ACK+0x28>
    11d6:	30 97       	sbiw	r30, 0x00	; 0
    11d8:	79 f0       	breq	.+30     	; 0x11f8 <I2C_MasterReceiveByte_ACK+0x2c>
    11da:	84 ec       	ldi	r24, 0xC4	; 196
    11dc:	86 bf       	out	0x36, r24	; 54
    11de:	06 b6       	in	r0, 0x36	; 54
    11e0:	07 fe       	sbrs	r0, 7
    11e2:	fd cf       	rjmp	.-6      	; 0x11de <I2C_MasterReceiveByte_ACK+0x12>
    11e4:	81 b1       	in	r24, 0x01	; 1
    11e6:	88 7f       	andi	r24, 0xF8	; 248
    11e8:	80 35       	cpi	r24, 0x50	; 80
    11ea:	41 f4       	brne	.+16     	; 0x11fc <I2C_MasterReceiveByte_ACK+0x30>
    11ec:	83 b1       	in	r24, 0x03	; 3
    11ee:	80 83       	st	Z, r24
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	08 95       	ret
    11f4:	85 e0       	ldi	r24, 0x05	; 5
    11f6:	08 95       	ret
    11f8:	84 e0       	ldi	r24, 0x04	; 4
    11fa:	08 95       	ret
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	08 95       	ret

00001200 <I2C_MasterReceiveByte_NACK>:
    1200:	fc 01       	movw	r30, r24
    1202:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
    1206:	96 30       	cpi	r25, 0x06	; 6
    1208:	79 f4       	brne	.+30     	; 0x1228 <I2C_MasterReceiveByte_NACK+0x28>
    120a:	30 97       	sbiw	r30, 0x00	; 0
    120c:	79 f0       	breq	.+30     	; 0x122c <I2C_MasterReceiveByte_NACK+0x2c>
    120e:	84 e8       	ldi	r24, 0x84	; 132
    1210:	86 bf       	out	0x36, r24	; 54
    1212:	06 b6       	in	r0, 0x36	; 54
    1214:	07 fe       	sbrs	r0, 7
    1216:	fd cf       	rjmp	.-6      	; 0x1212 <I2C_MasterReceiveByte_NACK+0x12>
    1218:	81 b1       	in	r24, 0x01	; 1
    121a:	88 7f       	andi	r24, 0xF8	; 248
    121c:	88 35       	cpi	r24, 0x58	; 88
    121e:	41 f4       	brne	.+16     	; 0x1230 <I2C_MasterReceiveByte_NACK+0x30>
    1220:	83 b1       	in	r24, 0x03	; 3
    1222:	80 83       	st	Z, r24
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	08 95       	ret
    1228:	85 e0       	ldi	r24, 0x05	; 5
    122a:	08 95       	ret
    122c:	84 e0       	ldi	r24, 0x04	; 4
    122e:	08 95       	ret
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	08 95       	ret

00001234 <I2C_MasterSendGeneral>:
    1234:	8f 92       	push	r8
    1236:	9f 92       	push	r9
    1238:	af 92       	push	r10
    123a:	bf 92       	push	r11
    123c:	cf 92       	push	r12
    123e:	df 92       	push	r13
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	b8 2e       	mov	r11, r24
    124e:	eb 01       	movw	r28, r22
    1250:	6a 01       	movw	r12, r20
    1252:	79 01       	movw	r14, r18
    1254:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
    1258:	86 30       	cpi	r24, 0x06	; 6
    125a:	c9 f5       	brne	.+114    	; 0x12ce <I2C_MasterSendGeneral+0x9a>
    125c:	20 97       	sbiw	r28, 0x00	; 0
    125e:	c9 f1       	breq	.+114    	; 0x12d2 <I2C_MasterSendGeneral+0x9e>
    1260:	23 2b       	or	r18, r19
    1262:	c9 f1       	breq	.+114    	; 0x12d6 <I2C_MasterSendGeneral+0xa2>
    1264:	bb 20       	and	r11, r11
    1266:	cc f1       	brlt	.+114    	; 0x12da <I2C_MasterSendGeneral+0xa6>
    1268:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <I2C_MasterSendSTART>
    126c:	88 23       	and	r24, r24
    126e:	c1 f1       	breq	.+112    	; 0x12e0 <I2C_MasterSendGeneral+0xac>
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	8b 2d       	mov	r24, r11
    1274:	0e 94 7e 08 	call	0x10fc	; 0x10fc <I2C_MasterSendSlaveAddress>
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	89 f5       	brne	.+98     	; 0x12de <I2C_MasterSendGeneral+0xaa>
    127c:	0b c0       	rjmp	.+22     	; 0x1294 <I2C_MasterSendGeneral+0x60>
    127e:	4e 01       	movw	r8, r28
    1280:	8f ef       	ldi	r24, 0xFF	; 255
    1282:	88 1a       	sub	r8, r24
    1284:	98 0a       	sbc	r9, r24
    1286:	88 81       	ld	r24, Y
    1288:	0e 94 cf 08 	call	0x119e	; 0x119e <I2C_MasterSendByte>
    128c:	65 01       	movw	r12, r10
    128e:	88 23       	and	r24, r24
    1290:	39 f1       	breq	.+78     	; 0x12e0 <I2C_MasterSendGeneral+0xac>
    1292:	e4 01       	movw	r28, r8
    1294:	56 01       	movw	r10, r12
    1296:	e1 e0       	ldi	r30, 0x01	; 1
    1298:	ae 1a       	sub	r10, r30
    129a:	b1 08       	sbc	r11, r1
    129c:	cd 28       	or	r12, r13
    129e:	79 f7       	brne	.-34     	; 0x127e <I2C_MasterSendGeneral+0x4a>
    12a0:	0c c0       	rjmp	.+24     	; 0x12ba <I2C_MasterSendGeneral+0x86>
    12a2:	67 01       	movw	r12, r14
    12a4:	ff ef       	ldi	r31, 0xFF	; 255
    12a6:	cf 1a       	sub	r12, r31
    12a8:	df 0a       	sbc	r13, r31
    12aa:	f7 01       	movw	r30, r14
    12ac:	80 81       	ld	r24, Z
    12ae:	0e 94 cf 08 	call	0x119e	; 0x119e <I2C_MasterSendByte>
    12b2:	8e 01       	movw	r16, r28
    12b4:	88 23       	and	r24, r24
    12b6:	a1 f0       	breq	.+40     	; 0x12e0 <I2C_MasterSendGeneral+0xac>
    12b8:	76 01       	movw	r14, r12
    12ba:	e8 01       	movw	r28, r16
    12bc:	21 97       	sbiw	r28, 0x01	; 1
    12be:	01 2b       	or	r16, r17
    12c0:	81 f7       	brne	.-32     	; 0x12a2 <I2C_MasterSendGeneral+0x6e>
    12c2:	0e 94 c2 08 	call	0x1184	; 0x1184 <I2C_MasterSendSTOP>
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	59 f0       	breq	.+22     	; 0x12e0 <I2C_MasterSendGeneral+0xac>
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	09 c0       	rjmp	.+18     	; 0x12e0 <I2C_MasterSendGeneral+0xac>
    12ce:	85 e0       	ldi	r24, 0x05	; 5
    12d0:	07 c0       	rjmp	.+14     	; 0x12e0 <I2C_MasterSendGeneral+0xac>
    12d2:	84 e0       	ldi	r24, 0x04	; 4
    12d4:	05 c0       	rjmp	.+10     	; 0x12e0 <I2C_MasterSendGeneral+0xac>
    12d6:	84 e0       	ldi	r24, 0x04	; 4
    12d8:	03 c0       	rjmp	.+6      	; 0x12e0 <I2C_MasterSendGeneral+0xac>
    12da:	83 e0       	ldi	r24, 0x03	; 3
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <I2C_MasterSendGeneral+0xac>
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	ff 90       	pop	r15
    12ea:	ef 90       	pop	r14
    12ec:	df 90       	pop	r13
    12ee:	cf 90       	pop	r12
    12f0:	bf 90       	pop	r11
    12f2:	af 90       	pop	r10
    12f4:	9f 90       	pop	r9
    12f6:	8f 90       	pop	r8
    12f8:	08 95       	ret

000012fa <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
    12fa:	7f 92       	push	r7
    12fc:	8f 92       	push	r8
    12fe:	9f 92       	push	r9
    1300:	af 92       	push	r10
    1302:	bf 92       	push	r11
    1304:	cf 92       	push	r12
    1306:	df 92       	push	r13
    1308:	ef 92       	push	r14
    130a:	ff 92       	push	r15
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	78 2e       	mov	r7, r24
    1316:	eb 01       	movw	r28, r22
    1318:	7a 01       	movw	r14, r20
    131a:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    131c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
    1320:	86 30       	cpi	r24, 0x06	; 6
    1322:	09 f0       	breq	.+2      	; 0x1326 <I2C_MasterReceiveGeneral+0x2c>
    1324:	47 c0       	rjmp	.+142    	; 0x13b4 <I2C_MasterReceiveGeneral+0xba>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
    1326:	20 97       	sbiw	r28, 0x00	; 0
    1328:	09 f4       	brne	.+2      	; 0x132c <I2C_MasterReceiveGeneral+0x32>
    132a:	46 c0       	rjmp	.+140    	; 0x13b8 <I2C_MasterReceiveGeneral+0xbe>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
    132c:	23 2b       	or	r18, r19
    132e:	09 f4       	brne	.+2      	; 0x1332 <I2C_MasterReceiveGeneral+0x38>
    1330:	45 c0       	rjmp	.+138    	; 0x13bc <I2C_MasterReceiveGeneral+0xc2>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    1332:	77 20       	and	r7, r7
    1334:	0c f4       	brge	.+2      	; 0x1338 <I2C_MasterReceiveGeneral+0x3e>
    1336:	44 c0       	rjmp	.+136    	; 0x13c0 <I2C_MasterReceiveGeneral+0xc6>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1338:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <I2C_MasterSendSTART>
    133c:	88 23       	and	r24, r24
    133e:	09 f4       	brne	.+2      	; 0x1342 <I2C_MasterReceiveGeneral+0x48>
    1340:	4a c0       	rjmp	.+148    	; 0x13d6 <I2C_MasterReceiveGeneral+0xdc>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	87 2d       	mov	r24, r7
    1346:	0e 94 7e 08 	call	0x10fc	; 0x10fc <I2C_MasterSendSlaveAddress>
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	d9 f5       	brne	.+118    	; 0x13c4 <I2C_MasterReceiveGeneral+0xca>
    134e:	0b c0       	rjmp	.+22     	; 0x1366 <I2C_MasterReceiveGeneral+0x6c>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1350:	4e 01       	movw	r8, r28
    1352:	8f ef       	ldi	r24, 0xFF	; 255
    1354:	88 1a       	sub	r8, r24
    1356:	98 0a       	sbc	r9, r24
    1358:	88 81       	ld	r24, Y
    135a:	0e 94 cf 08 	call	0x119e	; 0x119e <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    135e:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1360:	88 23       	and	r24, r24
    1362:	c9 f1       	breq	.+114    	; 0x13d6 <I2C_MasterReceiveGeneral+0xdc>
    1364:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    1366:	57 01       	movw	r10, r14
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	a8 1a       	sub	r10, r24
    136c:	b1 08       	sbc	r11, r1
    136e:	ef 28       	or	r14, r15
    1370:	79 f7       	brne	.-34     	; 0x1350 <I2C_MasterReceiveGeneral+0x56>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
    1372:	0e 94 af 08 	call	0x115e	; 0x115e <I2C_MasterSendRepSTART>
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	39 f5       	brne	.+78     	; 0x13c8 <I2C_MasterReceiveGeneral+0xce>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	87 2d       	mov	r24, r7
    137e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <I2C_MasterSendSlaveAddress>
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	19 f5       	brne	.+70     	; 0x13cc <I2C_MasterReceiveGeneral+0xd2>
    1386:	08 c0       	rjmp	.+16     	; 0x1398 <I2C_MasterReceiveGeneral+0x9e>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
    1388:	e6 01       	movw	r28, r12
    138a:	21 96       	adiw	r28, 0x01	; 1
    138c:	c6 01       	movw	r24, r12
    138e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <I2C_MasterReceiveByte_ACK>
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	e9 f4       	brne	.+58     	; 0x13d0 <I2C_MasterReceiveGeneral+0xd6>
    1396:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
    1398:	01 50       	subi	r16, 0x01	; 1
    139a:	11 09       	sbc	r17, r1
    139c:	a9 f7       	brne	.-22     	; 0x1388 <I2C_MasterReceiveGeneral+0x8e>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
    139e:	c6 01       	movw	r24, r12
    13a0:	0e 94 00 09 	call	0x1200	; 0x1200 <I2C_MasterReceiveByte_NACK>
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	b1 f4       	brne	.+44     	; 0x13d4 <I2C_MasterReceiveGeneral+0xda>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
    13a8:	0e 94 c2 08 	call	0x1184	; 0x1184 <I2C_MasterSendSTOP>
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	99 f0       	breq	.+38     	; 0x13d6 <I2C_MasterReceiveGeneral+0xdc>
		return I2C_STATUS_ERROR_NOK;
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	11 c0       	rjmp	.+34     	; 0x13d6 <I2C_MasterReceiveGeneral+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    13b4:	85 e0       	ldi	r24, 0x05	; 5
    13b6:	0f c0       	rjmp	.+30     	; 0x13d6 <I2C_MasterReceiveGeneral+0xdc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    13b8:	84 e0       	ldi	r24, 0x04	; 4
    13ba:	0d c0       	rjmp	.+26     	; 0x13d6 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    13bc:	84 e0       	ldi	r24, 0x04	; 4
    13be:	0b c0       	rjmp	.+22     	; 0x13d6 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    13c0:	83 e0       	ldi	r24, 0x03	; 3
    13c2:	09 c0       	rjmp	.+18     	; 0x13d6 <I2C_MasterReceiveGeneral+0xdc>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	07 c0       	rjmp	.+14     	; 0x13d6 <I2C_MasterReceiveGeneral+0xdc>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	05 c0       	rjmp	.+10     	; 0x13d6 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	03 c0       	rjmp	.+6      	; 0x13d6 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	01 c0       	rjmp	.+2      	; 0x13d6 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    13d4:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	ff 90       	pop	r15
    13e0:	ef 90       	pop	r14
    13e2:	df 90       	pop	r13
    13e4:	cf 90       	pop	r12
    13e6:	bf 90       	pop	r11
    13e8:	af 90       	pop	r10
    13ea:	9f 90       	pop	r9
    13ec:	8f 90       	pop	r8
    13ee:	7f 90       	pop	r7
    13f0:	08 95       	ret

000013f2 <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
    13f2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genuSpi_Status>
    13f6:	87 30       	cpi	r24, 0x07	; 7
    13f8:	31 f1       	breq	.+76     	; 0x1446 <Spi_init+0x54>
    13fa:	87 b3       	in	r24, 0x17	; 23
    13fc:	80 6b       	ori	r24, 0xB0	; 176
    13fe:	87 bb       	out	0x17, r24	; 23
    1400:	87 b3       	in	r24, 0x17	; 23
    1402:	8f 7b       	andi	r24, 0xBF	; 191
    1404:	87 bb       	out	0x17, r24	; 23
    1406:	88 b3       	in	r24, 0x18	; 24
    1408:	80 61       	ori	r24, 0x10	; 16
    140a:	88 bb       	out	0x18, r24	; 24
    140c:	8d b1       	in	r24, 0x0d	; 13
    140e:	80 61       	ori	r24, 0x10	; 16
    1410:	8d b9       	out	0x0d, r24	; 13
    1412:	8d b1       	in	r24, 0x0d	; 13
    1414:	8f 7d       	andi	r24, 0xDF	; 223
    1416:	8d b9       	out	0x0d, r24	; 13
    1418:	8d b1       	in	r24, 0x0d	; 13
    141a:	87 7f       	andi	r24, 0xF7	; 247
    141c:	8d b9       	out	0x0d, r24	; 13
    141e:	8d b1       	in	r24, 0x0d	; 13
    1420:	8b 7f       	andi	r24, 0xFB	; 251
    1422:	8d b9       	out	0x0d, r24	; 13
    1424:	8d b1       	in	r24, 0x0d	; 13
    1426:	8e 7f       	andi	r24, 0xFE	; 254
    1428:	8d b9       	out	0x0d, r24	; 13
    142a:	8d b1       	in	r24, 0x0d	; 13
    142c:	8d 7f       	andi	r24, 0xFD	; 253
    142e:	8d b9       	out	0x0d, r24	; 13
    1430:	8d b1       	in	r24, 0x0d	; 13
    1432:	81 60       	ori	r24, 0x01	; 1
    1434:	8d b9       	out	0x0d, r24	; 13
    1436:	8d b1       	in	r24, 0x0d	; 13
    1438:	80 64       	ori	r24, 0x40	; 64
    143a:	8d b9       	out	0x0d, r24	; 13
    143c:	87 e0       	ldi	r24, 0x07	; 7
    143e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <genuSpi_Status>
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	08 95       	ret
    1446:	88 e0       	ldi	r24, 0x08	; 8
    1448:	08 95       	ret

0000144a <Spi_MasterSendByte>:
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	1f 92       	push	r1
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genuSpi_Status>
    1458:	97 30       	cpi	r25, 0x07	; 7
    145a:	39 f4       	brne	.+14     	; 0x146a <Spi_MasterSendByte+0x20>
    145c:	8f b9       	out	0x0f, r24	; 15
    145e:	77 9b       	sbis	0x0e, 7	; 14
    1460:	fe cf       	rjmp	.-4      	; 0x145e <Spi_MasterSendByte+0x14>
    1462:	8f b1       	in	r24, 0x0f	; 15
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	01 c0       	rjmp	.+2      	; 0x146c <Spi_MasterSendByte+0x22>
    146a:	86 e0       	ldi	r24, 0x06	; 6
    146c:	0f 90       	pop	r0
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	08 95       	ret

00001474 <Spi_MasterSendPacket>:
    1474:	ef 92       	push	r14
    1476:	ff 92       	push	r15
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <genuSpi_Status>
    1482:	27 30       	cpi	r18, 0x07	; 7
    1484:	a1 f4       	brne	.+40     	; 0x14ae <Spi_MasterSendPacket+0x3a>
    1486:	8b 01       	movw	r16, r22
    1488:	7c 01       	movw	r14, r24
    148a:	c0 e0       	ldi	r28, 0x00	; 0
    148c:	09 c0       	rjmp	.+18     	; 0x14a0 <Spi_MasterSendPacket+0x2c>
    148e:	f7 01       	movw	r30, r14
    1490:	e2 0f       	add	r30, r18
    1492:	f3 1f       	adc	r31, r19
    1494:	80 81       	ld	r24, Z
    1496:	0e 94 25 0a 	call	0x144a	; 0x144a <Spi_MasterSendByte>
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	51 f4       	brne	.+20     	; 0x14b2 <Spi_MasterSendPacket+0x3e>
    149e:	cf 5f       	subi	r28, 0xFF	; 255
    14a0:	2c 2f       	mov	r18, r28
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	20 17       	cp	r18, r16
    14a6:	31 07       	cpc	r19, r17
    14a8:	90 f3       	brcs	.-28     	; 0x148e <Spi_MasterSendPacket+0x1a>
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	03 c0       	rjmp	.+6      	; 0x14b4 <Spi_MasterSendPacket+0x40>
    14ae:	86 e0       	ldi	r24, 0x06	; 6
    14b0:	01 c0       	rjmp	.+2      	; 0x14b4 <Spi_MasterSendPacket+0x40>
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	cf 91       	pop	r28
    14b6:	1f 91       	pop	r17
    14b8:	0f 91       	pop	r16
    14ba:	ff 90       	pop	r15
    14bc:	ef 90       	pop	r14
    14be:	08 95       	ret

000014c0 <__vector_12>:


    14c0:	1f 92       	push	r1
    14c2:	0f 92       	push	r0
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	0f 92       	push	r0
    14c8:	11 24       	eor	r1, r1
    14ca:	2f 93       	push	r18
    14cc:	3f 93       	push	r19
    14ce:	4f 93       	push	r20
    14d0:	5f 93       	push	r21
    14d2:	6f 93       	push	r22
    14d4:	7f 93       	push	r23
    14d6:	8f 93       	push	r24
    14d8:	9f 93       	push	r25
    14da:	af 93       	push	r26
    14dc:	bf 93       	push	r27
    14de:	ef 93       	push	r30
    14e0:	ff 93       	push	r31
    14e2:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <SPI_STC_CallBackPtr>
    14e6:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <SPI_STC_CallBackPtr+0x1>
    14ea:	09 95       	icall
    14ec:	ff 91       	pop	r31
    14ee:	ef 91       	pop	r30
    14f0:	bf 91       	pop	r27
    14f2:	af 91       	pop	r26
    14f4:	9f 91       	pop	r25
    14f6:	8f 91       	pop	r24
    14f8:	7f 91       	pop	r23
    14fa:	6f 91       	pop	r22
    14fc:	5f 91       	pop	r21
    14fe:	4f 91       	pop	r20
    1500:	3f 91       	pop	r19
    1502:	2f 91       	pop	r18
    1504:	0f 90       	pop	r0
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	0f 90       	pop	r0
    150a:	1f 90       	pop	r1
    150c:	18 95       	reti

0000150e <stringLength>:
        else if(string1[u8_loopIndex] < string2[u8_loopIndex])
            return 2;
        u8_loopIndex++;
    }
    return 3;
}
    150e:	ac 01       	movw	r20, r24
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <stringLength+0x8>
    1514:	8f 5f       	subi	r24, 0xFF	; 255
    1516:	fa 01       	movw	r30, r20
    1518:	e8 0f       	add	r30, r24
    151a:	f1 1d       	adc	r31, r1
    151c:	20 81       	ld	r18, Z
    151e:	21 11       	cpse	r18, r1
    1520:	f9 cf       	rjmp	.-14     	; 0x1514 <stringLength+0x6>
    1522:	8f 5f       	subi	r24, 0xFF	; 255
    1524:	08 95       	ret

00001526 <stringCompare>:
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	8c 01       	movw	r16, r24
    1532:	eb 01       	movw	r28, r22
    1534:	0e 94 87 0a 	call	0x150e	; 0x150e <stringLength>
    1538:	f8 2e       	mov	r15, r24
    153a:	ce 01       	movw	r24, r28
    153c:	0e 94 87 0a 	call	0x150e	; 0x150e <stringLength>
    1540:	8f 15       	cp	r24, r15
    1542:	b8 f0       	brcs	.+46     	; 0x1572 <stringCompare+0x4c>
    1544:	f8 16       	cp	r15, r24
    1546:	b8 f0       	brcs	.+46     	; 0x1576 <stringCompare+0x50>
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	09 c0       	rjmp	.+18     	; 0x155e <stringCompare+0x38>
    154c:	fe 01       	movw	r30, r28
    154e:	e8 0f       	add	r30, r24
    1550:	f9 1f       	adc	r31, r25
    1552:	80 81       	ld	r24, Z
    1554:	82 17       	cp	r24, r18
    1556:	88 f0       	brcs	.+34     	; 0x157a <stringCompare+0x54>
    1558:	28 17       	cp	r18, r24
    155a:	88 f0       	brcs	.+34     	; 0x157e <stringCompare+0x58>
    155c:	3f 5f       	subi	r19, 0xFF	; 255
    155e:	83 2f       	mov	r24, r19
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	f8 01       	movw	r30, r16
    1564:	e8 0f       	add	r30, r24
    1566:	f9 1f       	adc	r31, r25
    1568:	20 81       	ld	r18, Z
    156a:	21 11       	cpse	r18, r1
    156c:	ef cf       	rjmp	.-34     	; 0x154c <stringCompare+0x26>
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	07 c0       	rjmp	.+14     	; 0x1580 <stringCompare+0x5a>
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	05 c0       	rjmp	.+10     	; 0x1580 <stringCompare+0x5a>
    1576:	83 e0       	ldi	r24, 0x03	; 3
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <stringCompare+0x5a>
    157a:	82 e0       	ldi	r24, 0x02	; 2
    157c:	01 c0       	rjmp	.+2      	; 0x1580 <stringCompare+0x5a>
    157e:	83 e0       	ldi	r24, 0x03	; 3
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	ff 90       	pop	r15
    158a:	08 95       	ret

0000158c <stringConcatenate>:
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	ec 01       	movw	r28, r24
    1598:	8b 01       	movw	r16, r22
    159a:	cb 01       	movw	r24, r22
    159c:	0e 94 87 0a 	call	0x150e	; 0x150e <stringLength>
    15a0:	f8 2e       	mov	r15, r24
    15a2:	ce 01       	movw	r24, r28
    15a4:	0e 94 87 0a 	call	0x150e	; 0x150e <stringLength>
    15a8:	81 50       	subi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0b c0       	rjmp	.+22     	; 0x15c4 <stringConcatenate+0x38>
    15ae:	28 0f       	add	r18, r24
    15b0:	31 1d       	adc	r19, r1
    15b2:	fe 01       	movw	r30, r28
    15b4:	e2 0f       	add	r30, r18
    15b6:	f3 1f       	adc	r31, r19
    15b8:	d8 01       	movw	r26, r16
    15ba:	a9 0f       	add	r26, r25
    15bc:	b1 1d       	adc	r27, r1
    15be:	2c 91       	ld	r18, X
    15c0:	20 83       	st	Z, r18
    15c2:	9f 5f       	subi	r25, 0xFF	; 255
    15c4:	29 2f       	mov	r18, r25
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	4f 2d       	mov	r20, r15
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	41 50       	subi	r20, 0x01	; 1
    15ce:	51 09       	sbc	r21, r1
    15d0:	42 17       	cp	r20, r18
    15d2:	53 07       	cpc	r21, r19
    15d4:	64 f7       	brge	.-40     	; 0x15ae <stringConcatenate+0x22>
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	1f 91       	pop	r17
    15dc:	0f 91       	pop	r16
    15de:	ff 90       	pop	r15
    15e0:	08 95       	ret

000015e2 <EmptyString>:

void EmptyString(uint8_t *string)
{
    15e2:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
    15e4:	90 e0       	ldi	r25, 0x00	; 0
	while(string[u8_loopIndex] != '\0')
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <EmptyString+0xa>
		string[u8_loopIndex++] = '\0';
    15e8:	9f 5f       	subi	r25, 0xFF	; 255
    15ea:	10 82       	st	Z, r1
}

void EmptyString(uint8_t *string)
{
	uint8_t u8_loopIndex=0;
	while(string[u8_loopIndex] != '\0')
    15ec:	fa 01       	movw	r30, r20
    15ee:	e9 0f       	add	r30, r25
    15f0:	f1 1d       	adc	r31, r1
    15f2:	20 81       	ld	r18, Z
    15f4:	21 11       	cpse	r18, r1
    15f6:	f8 cf       	rjmp	.-16     	; 0x15e8 <EmptyString+0x6>
		string[u8_loopIndex++] = '\0';
}
    15f8:	08 95       	ret

000015fa <stringCopy>:

void stringCopy(uint8_t* source, uint8_t* destination)
{
    15fa:	dc 01       	movw	r26, r24
    uint8_t u8_loopIndex=0;
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    while(source[u8_loopIndex] != '\0')
    15fe:	05 c0       	rjmp	.+10     	; 0x160a <stringCopy+0x10>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
    1600:	fb 01       	movw	r30, r22
    1602:	e2 0f       	add	r30, r18
    1604:	f3 1f       	adc	r31, r19
    1606:	40 83       	st	Z, r20
	    u8_loopIndex++;
    1608:	9f 5f       	subi	r25, 0xFF	; 255
}

void stringCopy(uint8_t* source, uint8_t* destination)
{
    uint8_t u8_loopIndex=0;
    while(source[u8_loopIndex] != '\0')
    160a:	29 2f       	mov	r18, r25
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	fd 01       	movw	r30, r26
    1610:	e2 0f       	add	r30, r18
    1612:	f3 1f       	adc	r31, r19
    1614:	40 81       	ld	r20, Z
    1616:	41 11       	cpse	r20, r1
    1618:	f3 cf       	rjmp	.-26     	; 0x1600 <stringCopy+0x6>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
	    u8_loopIndex++;
    }
}
    161a:	08 95       	ret

0000161c <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    161c:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <u8_Uart_Status>
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	81 f0       	breq	.+32     	; 0x1644 <Uart_init+0x28>
    1624:	10 bc       	out	0x20, r1	; 32
    1626:	87 e6       	ldi	r24, 0x67	; 103
    1628:	89 b9       	out	0x09, r24	; 9
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	8b b9       	out	0x0b, r24	; 11
    162e:	88 e1       	ldi	r24, 0x18	; 24
    1630:	8a b9       	out	0x0a, r24	; 10
    1632:	80 e8       	ldi	r24, 0x80	; 128
    1634:	80 bd       	out	0x20, r24	; 32
    1636:	80 b5       	in	r24, 0x20	; 32
    1638:	86 68       	ori	r24, 0x86	; 134
    163a:	80 bd       	out	0x20, r24	; 32
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <u8_Uart_Status>
    1642:	08 95       	ret
    1644:	87 e0       	ldi	r24, 0x07	; 7
    1646:	08 95       	ret

00001648 <Uart_sendByte>:
    1648:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <u8_Uart_Status>
    164c:	99 23       	and	r25, r25
    164e:	29 f0       	breq	.+10     	; 0x165a <Uart_sendByte+0x12>
    1650:	5d 9b       	sbis	0x0b, 5	; 11
    1652:	fe cf       	rjmp	.-4      	; 0x1650 <Uart_sendByte+0x8>
    1654:	8c b9       	out	0x0c, r24	; 12
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	08 95       	ret
    165a:	86 e0       	ldi	r24, 0x06	; 6
    165c:	08 95       	ret

0000165e <Uart_sendPacket>:
    165e:	ef 92       	push	r14
    1660:	ff 92       	push	r15
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	20 91 47 03 	lds	r18, 0x0347	; 0x800347 <u8_Uart_Status>
    166e:	22 23       	and	r18, r18
    1670:	99 f0       	breq	.+38     	; 0x1698 <Uart_sendPacket+0x3a>
    1672:	8b 01       	movw	r16, r22
    1674:	7c 01       	movw	r14, r24
    1676:	c0 e0       	ldi	r28, 0x00	; 0
    1678:	d0 e0       	ldi	r29, 0x00	; 0
    167a:	09 c0       	rjmp	.+18     	; 0x168e <Uart_sendPacket+0x30>
    167c:	f7 01       	movw	r30, r14
    167e:	ec 0f       	add	r30, r28
    1680:	fd 1f       	adc	r31, r29
    1682:	80 81       	ld	r24, Z
    1684:	0e 94 24 0b 	call	0x1648	; 0x1648 <Uart_sendByte>
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	41 f4       	brne	.+16     	; 0x169c <Uart_sendPacket+0x3e>
    168c:	21 96       	adiw	r28, 0x01	; 1
    168e:	c0 17       	cp	r28, r16
    1690:	d1 07       	cpc	r29, r17
    1692:	a0 f3       	brcs	.-24     	; 0x167c <Uart_sendPacket+0x1e>
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	03 c0       	rjmp	.+6      	; 0x169e <Uart_sendPacket+0x40>
    1698:	86 e0       	ldi	r24, 0x06	; 6
    169a:	01 c0       	rjmp	.+2      	; 0x169e <Uart_sendPacket+0x40>
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	1f 91       	pop	r17
    16a4:	0f 91       	pop	r16
    16a6:	ff 90       	pop	r15
    16a8:	ef 90       	pop	r14
    16aa:	08 95       	ret

000016ac <Uart_EnableNotification_RXC>:
    16ac:	9c 01       	movw	r18, r24
    16ae:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <u8_Uart_Status>
    16b2:	99 23       	and	r25, r25
    16b4:	61 f0       	breq	.+24     	; 0x16ce <Uart_EnableNotification_RXC+0x22>
    16b6:	21 15       	cp	r18, r1
    16b8:	31 05       	cpc	r19, r1
    16ba:	59 f0       	breq	.+22     	; 0x16d2 <Uart_EnableNotification_RXC+0x26>
    16bc:	8a b1       	in	r24, 0x0a	; 10
    16be:	80 68       	ori	r24, 0x80	; 128
    16c0:	8a b9       	out	0x0a, r24	; 10
    16c2:	30 93 4b 03 	sts	0x034B, r19	; 0x80034b <Uart_RXC_CallBackPtr+0x1>
    16c6:	20 93 4a 03 	sts	0x034A, r18	; 0x80034a <Uart_RXC_CallBackPtr>
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	08 95       	ret
    16ce:	86 e0       	ldi	r24, 0x06	; 6
    16d0:	08 95       	ret
    16d2:	85 e0       	ldi	r24, 0x05	; 5
    16d4:	08 95       	ret

000016d6 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    16d6:	8c b1       	in	r24, 0x0c	; 12
}
    16d8:	08 95       	ret

000016da <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    16da:	1f 92       	push	r1
    16dc:	0f 92       	push	r0
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	0f 92       	push	r0
    16e2:	11 24       	eor	r1, r1
    16e4:	2f 93       	push	r18
    16e6:	3f 93       	push	r19
    16e8:	4f 93       	push	r20
    16ea:	5f 93       	push	r21
    16ec:	6f 93       	push	r22
    16ee:	7f 93       	push	r23
    16f0:	8f 93       	push	r24
    16f2:	9f 93       	push	r25
    16f4:	af 93       	push	r26
    16f6:	bf 93       	push	r27
    16f8:	ef 93       	push	r30
    16fa:	ff 93       	push	r31
    16fc:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <Uart_TXC_CallBackPtr>
    1700:	f0 91 4d 03 	lds	r31, 0x034D	; 0x80034d <Uart_TXC_CallBackPtr+0x1>
    1704:	09 95       	icall
    1706:	ff 91       	pop	r31
    1708:	ef 91       	pop	r30
    170a:	bf 91       	pop	r27
    170c:	af 91       	pop	r26
    170e:	9f 91       	pop	r25
    1710:	8f 91       	pop	r24
    1712:	7f 91       	pop	r23
    1714:	6f 91       	pop	r22
    1716:	5f 91       	pop	r21
    1718:	4f 91       	pop	r20
    171a:	3f 91       	pop	r19
    171c:	2f 91       	pop	r18
    171e:	0f 90       	pop	r0
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	0f 90       	pop	r0
    1724:	1f 90       	pop	r1
    1726:	18 95       	reti

00001728 <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    1728:	1f 92       	push	r1
    172a:	0f 92       	push	r0
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	0f 92       	push	r0
    1730:	11 24       	eor	r1, r1
    1732:	2f 93       	push	r18
    1734:	3f 93       	push	r19
    1736:	4f 93       	push	r20
    1738:	5f 93       	push	r21
    173a:	6f 93       	push	r22
    173c:	7f 93       	push	r23
    173e:	8f 93       	push	r24
    1740:	9f 93       	push	r25
    1742:	af 93       	push	r26
    1744:	bf 93       	push	r27
    1746:	ef 93       	push	r30
    1748:	ff 93       	push	r31
    174a:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <Uart_RXC_CallBackPtr>
    174e:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <Uart_RXC_CallBackPtr+0x1>
    1752:	09 95       	icall
    1754:	ff 91       	pop	r31
    1756:	ef 91       	pop	r30
    1758:	bf 91       	pop	r27
    175a:	af 91       	pop	r26
    175c:	9f 91       	pop	r25
    175e:	8f 91       	pop	r24
    1760:	7f 91       	pop	r23
    1762:	6f 91       	pop	r22
    1764:	5f 91       	pop	r21
    1766:	4f 91       	pop	r20
    1768:	3f 91       	pop	r19
    176a:	2f 91       	pop	r18
    176c:	0f 90       	pop	r0
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	0f 90       	pop	r0
    1772:	1f 90       	pop	r1
    1774:	18 95       	reti

00001776 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    1776:	1f 92       	push	r1
    1778:	0f 92       	push	r0
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	0f 92       	push	r0
    177e:	11 24       	eor	r1, r1
    1780:	2f 93       	push	r18
    1782:	3f 93       	push	r19
    1784:	4f 93       	push	r20
    1786:	5f 93       	push	r21
    1788:	6f 93       	push	r22
    178a:	7f 93       	push	r23
    178c:	8f 93       	push	r24
    178e:	9f 93       	push	r25
    1790:	af 93       	push	r26
    1792:	bf 93       	push	r27
    1794:	ef 93       	push	r30
    1796:	ff 93       	push	r31
    1798:	e0 91 48 03 	lds	r30, 0x0348	; 0x800348 <Uart_UDRE_CallBackPtr>
    179c:	f0 91 49 03 	lds	r31, 0x0349	; 0x800349 <Uart_UDRE_CallBackPtr+0x1>
    17a0:	09 95       	icall
    17a2:	ff 91       	pop	r31
    17a4:	ef 91       	pop	r30
    17a6:	bf 91       	pop	r27
    17a8:	af 91       	pop	r26
    17aa:	9f 91       	pop	r25
    17ac:	8f 91       	pop	r24
    17ae:	7f 91       	pop	r23
    17b0:	6f 91       	pop	r22
    17b2:	5f 91       	pop	r21
    17b4:	4f 91       	pop	r20
    17b6:	3f 91       	pop	r19
    17b8:	2f 91       	pop	r18
    17ba:	0f 90       	pop	r0
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	0f 90       	pop	r0
    17c0:	1f 90       	pop	r1
    17c2:	18 95       	reti

000017c4 <__adddi3_s8>:
    17c4:	00 24       	eor	r0, r0
    17c6:	a7 fd       	sbrc	r26, 7
    17c8:	00 94       	com	r0
    17ca:	2a 0f       	add	r18, r26
    17cc:	30 1d       	adc	r19, r0
    17ce:	40 1d       	adc	r20, r0
    17d0:	50 1d       	adc	r21, r0
    17d2:	60 1d       	adc	r22, r0
    17d4:	70 1d       	adc	r23, r0
    17d6:	80 1d       	adc	r24, r0
    17d8:	90 1d       	adc	r25, r0
    17da:	08 95       	ret

000017dc <__cmpdi2>:
    17dc:	2a 15       	cp	r18, r10
    17de:	3b 05       	cpc	r19, r11
    17e0:	4c 05       	cpc	r20, r12
    17e2:	5d 05       	cpc	r21, r13
    17e4:	6e 05       	cpc	r22, r14
    17e6:	7f 05       	cpc	r23, r15
    17e8:	80 07       	cpc	r24, r16
    17ea:	91 07       	cpc	r25, r17
    17ec:	08 95       	ret

000017ee <_exit>:
    17ee:	f8 94       	cli

000017f0 <__stop_program>:
    17f0:	ff cf       	rjmp	.-2      	; 0x17f0 <__stop_program>
