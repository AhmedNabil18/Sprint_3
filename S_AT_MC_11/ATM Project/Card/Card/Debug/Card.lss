
Card.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001246  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015e  00800060  00001246  000012da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012f  008001be  008001be  00001438  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001468  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031d3  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff5  00000000  00000000  000049ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e9e  00000000  00000000  000059e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bfc  00000000  00000000  00007884  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014ba  00000000  00000000  00008480  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000334a  00000000  00000000  0000993a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  0000cc84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__vector_1>
       8:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__vector_2>
       c:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__vector_12>
      34:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__vector_13>
      38:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__vector_14>
      3c:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3e       	cpi	r26, 0xED	; 237
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 57 04 	call	0x8ae	; 0x8ae <main>
      8a:	0c 94 21 09 	jmp	0x1242	; 0x1242 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ATM_REQ_ISR>:
void ATM_REQ_ISR(void)
{
	/**************************/
	/* Only for Testing */
	static uint8_t u8_state=0;
	u8_state = !u8_state;
      92:	81 e0       	ldi	r24, 0x01	; 1
      94:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <__data_end>
      98:	91 11       	cpse	r25, r1
      9a:	80 e0       	ldi	r24, 0x00	; 0
      9c:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <__data_end>
	/**************************/
	
	if(cgu8_ATM_Req == ATM_REQUESTED)
      a0:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <cgu8_ATM_Req>
      a4:	81 30       	cpi	r24, 0x01	; 1
      a6:	19 f4       	brne	.+6      	; 0xae <ATM_REQ_ISR+0x1c>
		cgu8_ATM_Req = ATM_NOT_REQUESTED;
      a8:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <cgu8_ATM_Req>
      ac:	08 95       	ret
	else
	{/* ATM Request Data from Card */
		cgu8_ATM_Req = ATM_REQUESTED;
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <cgu8_ATM_Req>
		if (gu8_CardMode == CARD_MODE_ADMIN)
      b4:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <gu8_CardMode>
      b8:	81 11       	cpse	r24, r1
      ba:	0b c0       	rjmp	.+22     	; 0xd2 <ATM_REQ_ISR+0x40>
		{	
			DIO_PORTA_DATA = 0xFF;
      bc:	8f ef       	ldi	r24, 0xFF	; 255
      be:	8b bb       	out	0x1b, r24	; 27
			SPI_SS_ENABLE();
      c0:	88 b3       	in	r24, 0x18	; 24
      c2:	8f 7e       	andi	r24, 0xEF	; 239
      c4:	88 bb       	out	0x18, r24	; 24
			Spi_MasterSendByte('*');
      c6:	8a e2       	ldi	r24, 0x2A	; 42
      c8:	0e 94 47 07 	call	0xe8e	; 0xe8e <Spi_MasterSendByte>
			SPI_SS_DISABLE();
      cc:	88 b3       	in	r24, 0x18	; 24
      ce:	80 61       	ori	r24, 0x10	; 16
      d0:	88 bb       	out	0x18, r24	; 24
      d2:	08 95       	ret

000000d4 <App_init>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_init(void)
{
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	1f 92       	push	r1
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
      de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      e2:	84 30       	cpi	r24, 0x04	; 4
      e4:	09 f4       	brne	.+2      	; 0xe8 <App_init+0x14>
      e6:	4f c0       	rjmp	.+158    	; 0x186 <App_init+0xb2>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
      e8:	0e 94 14 03 	call	0x628	; 0x628 <Eeprom_24_init>
      ec:	81 30       	cpi	r24, 0x01	; 1
      ee:	09 f0       	breq	.+2      	; 0xf2 <App_init+0x1e>
      f0:	3f c0       	rjmp	.+126    	; 0x170 <App_init+0x9c>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
      f2:	0e 94 04 04 	call	0x808	; 0x808 <Terminal_init>
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	e9 f5       	brne	.+122    	; 0x174 <App_init+0xa0>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
      fa:	0e 94 19 07 	call	0xe32	; 0xe32 <Spi_init>
      fe:	81 30       	cpi	r24, 0x01	; 1
     100:	d9 f5       	brne	.+118    	; 0x178 <App_init+0xa4>
		return APP_STATUS_ERROR_NOK;
	
	Ext_INT0_init(EXT_INT0_EDGE_FALL_RISE);
     102:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <Ext_INT0_init>
	INT0_setCallBack(ATM_REQ_ISR);
     106:	89 e4       	ldi	r24, 0x49	; 73
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <INT0_setCallBack>
	
	/**************************/
	/* Only for Testing */
	DIO_PORTA_DIR=0xFF;
     10e:	8f ef       	ldi	r24, 0xFF	; 255
     110:	8a bb       	out	0x1a, r24	; 26
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
     112:	6f ef       	ldi	r22, 0xFF	; 255
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 23 03 	call	0x646	; 0x646 <Eeprom_24_writeByte>
     11c:	81 30       	cpi	r24, 0x01	; 1
     11e:	71 f5       	brne	.+92     	; 0x17c <App_init+0xa8>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     120:	2a e0       	ldi	r18, 0x0A	; 10
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	40 e0       	ldi	r20, 0x00	; 0
     126:	50 e0       	ldi	r21, 0x00	; 0
     128:	60 e0       	ldi	r22, 0x00	; 0
     12a:	70 e0       	ldi	r23, 0x00	; 0
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Delay_ms>
	/**************************/
	if(Terminal_Out((uint8_t*)"CARD Terminal\r") != TERMINAL_STATUS_ERROR_OK)
     134:	85 e6       	ldi	r24, 0x65	; 101
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 19 04 	call	0x832	; 0x832 <Terminal_Out>
     13c:	81 30       	cpi	r24, 0x01	; 1
     13e:	01 f5       	brne	.+64     	; 0x180 <App_init+0xac>
		return APP_STATUS_ERROR_NOK;
	uint8_t u8_initData = 0;
     140:	19 82       	std	Y+1, r1	; 0x01
	/* Check if the card was previously registered and has its data in the eeprom */
	if(Eeprom_24_readByte(CARD_INIT_ADDRESS, &u8_initData) != EEPROM_24_STATUS_ERROR_OK)
     142:	be 01       	movw	r22, r28
     144:	6f 5f       	subi	r22, 0xFF	; 255
     146:	7f 4f       	sbci	r23, 0xFF	; 255
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Eeprom_24_readByte>
     150:	81 30       	cpi	r24, 0x01	; 1
     152:	c1 f4       	brne	.+48     	; 0x184 <App_init+0xb0>
		return APP_STATUS_ERROR_NOK;
		
	if(u8_initData != CARD_INITIALIZED)
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	8a 3a       	cpi	r24, 0xAA	; 170
     158:	19 f0       	breq	.+6      	; 0x160 <App_init+0x8c>
	{
		gu8_CardMode = CARD_MODE_ADMIN;
     15a:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <gu8_CardMode>
     15e:	03 c0       	rjmp	.+6      	; 0x166 <App_init+0x92>
	}else
	{
		gu8_CardMode = CARD_MODE_USER;
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <gu8_CardMode>
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     166:	84 e0       	ldi	r24, 0x04	; 4
     168:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return APP_STATUS_ERROR_OK;
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	0b c0       	rjmp	.+22     	; 0x186 <App_init+0xb2>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	09 c0       	rjmp	.+18     	; 0x186 <App_init+0xb2>
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	07 c0       	rjmp	.+14     	; 0x186 <App_init+0xb2>
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	05 c0       	rjmp	.+10     	; 0x186 <App_init+0xb2>
	
	/**************************/
	/* Only for Testing */
	DIO_PORTA_DIR=0xFF;
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	03 c0       	rjmp	.+6      	; 0x186 <App_init+0xb2>
	Delay_ms(10);
	/**************************/
	if(Terminal_Out((uint8_t*)"CARD Terminal\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	01 c0       	rjmp	.+2      	; 0x186 <App_init+0xb2>
	uint8_t u8_initData = 0;
	/* Check if the card was previously registered and has its data in the eeprom */
	if(Eeprom_24_readByte(CARD_INIT_ADDRESS, &u8_initData) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     184:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     186:	0f 90       	pop	r0
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	08 95       	ret

0000018e <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	cd b7       	in	r28, 0x3d	; 61
     198:	de b7       	in	r29, 0x3e	; 62
     19a:	cf 5f       	subi	r28, 0xFF	; 255
     19c:	d1 09       	sbc	r29, r1
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	cd bf       	out	0x3d, r28	; 61
     1a8:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     1aa:	ce 01       	movw	r24, r28
     1ac:	01 96       	adiw	r24, 0x01	; 1
     1ae:	2f ef       	ldi	r18, 0xFF	; 255
     1b0:	fc 01       	movw	r30, r24
     1b2:	11 92       	st	Z+, r1
     1b4:	2a 95       	dec	r18
     1b6:	e9 f7       	brne	.-6      	; 0x1b2 <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
     1b8:	0e 94 34 04 	call	0x868	; 0x868 <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
     1bc:	85 30       	cpi	r24, 0x05	; 5
     1be:	39 f4       	brne	.+14     	; 0x1ce <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
     1c0:	b8 01       	movw	r22, r16
     1c2:	ce 01       	movw	r24, r28
     1c4:	01 96       	adiw	r24, 0x01	; 1
     1c6:	0e 94 1b 08 	call	0x1036	; 0x1036 <stringCopy>
		return APP_STATUS_ERROR_OK;
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     1ce:	81 30       	cpi	r24, 0x01	; 1
     1d0:	11 f0       	breq	.+4      	; 0x1d6 <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
     1d6:	86 e0       	ldi	r24, 0x06	; 6
}
     1d8:	c1 50       	subi	r28, 0x01	; 1
     1da:	df 4f       	sbci	r29, 0xFF	; 255
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	cd bf       	out	0x3d, r28	; 61
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	1f 91       	pop	r17
     1ec:	0f 91       	pop	r16
     1ee:	08 95       	ret

000001f0 <AppADMIN_getCardName>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD Holder Name by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card holder's name.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardName(uint8_t* pu8_data)
{
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card Holder Name: ") != TERMINAL_STATUS_ERROR_OK)
     1f6:	84 e7       	ldi	r24, 0x74	; 116
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 19 04 	call	0x832	; 0x832 <Terminal_Out>
     1fe:	81 30       	cpi	r24, 0x01	; 1
     200:	c1 f4       	brne	.+48     	; 0x232 <AppADMIN_getCardName+0x42>
		return APP_STATUS_ERROR_NOK;
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     202:	ce 01       	movw	r24, r28
     204:	0e 94 c7 00 	call	0x18e	; 0x18e <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     208:	81 30       	cpi	r24, 0x01	; 1
     20a:	29 f0       	breq	.+10     	; 0x216 <AppADMIN_getCardName+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     20c:	11 f0       	breq	.+4      	; 0x212 <AppADMIN_getCardName+0x22>
     20e:	86 30       	cpi	r24, 0x06	; 6
     210:	91 f4       	brne	.+36     	; 0x236 <AppADMIN_getCardName+0x46>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     212:	86 30       	cpi	r24, 0x06	; 6
     214:	b1 f3       	breq	.-20     	; 0x202 <AppADMIN_getCardName+0x12>
		
		
		if (pu8_data[MAX_NAME_LENGTH] == '\0')
     216:	89 85       	ldd	r24, Y+9	; 0x09
     218:	88 23       	and	r24, r24
     21a:	79 f0       	breq	.+30     	; 0x23a <AppADMIN_getCardName+0x4a>
			break;
		EmptyString(pu8_data);
     21c:	ce 01       	movw	r24, r28
     21e:	0e 94 0f 08 	call	0x101e	; 0x101e <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid Name, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
     222:	87 e8       	ldi	r24, 0x87	; 135
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 19 04 	call	0x832	; 0x832 <Terminal_Out>
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	21 f3       	breq	.-56     	; 0x1f6 <AppADMIN_getCardName+0x6>
			return APP_STATUS_ERROR_NOK;
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	05 c0       	rjmp	.+10     	; 0x23c <AppADMIN_getCardName+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card Holder Name: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	03 c0       	rjmp	.+6      	; 0x23c <AppADMIN_getCardName+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	01 c0       	rjmp	.+2      	; 0x23c <AppADMIN_getCardName+0x4c>
			break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid Name, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     23a:	81 e0       	ldi	r24, 0x01	; 1
}
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	08 95       	ret

00000242 <AppADMIN_getCardPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardPAN(uint8_t* pu8_data)
{
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card PAN: ") != TERMINAL_STATUS_ERROR_OK)
     248:	88 ea       	ldi	r24, 0xA8	; 168
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 19 04 	call	0x832	; 0x832 <Terminal_Out>
     250:	81 30       	cpi	r24, 0x01	; 1
     252:	c1 f4       	brne	.+48     	; 0x284 <AppADMIN_getCardPAN+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     254:	ce 01       	movw	r24, r28
     256:	0e 94 c7 00 	call	0x18e	; 0x18e <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     25a:	81 30       	cpi	r24, 0x01	; 1
     25c:	29 f0       	breq	.+10     	; 0x268 <AppADMIN_getCardPAN+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     25e:	11 f0       	breq	.+4      	; 0x264 <AppADMIN_getCardPAN+0x22>
     260:	86 30       	cpi	r24, 0x06	; 6
     262:	91 f4       	brne	.+36     	; 0x288 <AppADMIN_getCardPAN+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     264:	86 30       	cpi	r24, 0x06	; 6
     266:	b1 f3       	breq	.-20     	; 0x254 <AppADMIN_getCardPAN+0x12>
		
		if (pu8_data[9] == '\0')
     268:	89 85       	ldd	r24, Y+9	; 0x09
     26a:	88 23       	and	r24, r24
     26c:	79 f0       	breq	.+30     	; 0x28c <AppADMIN_getCardPAN+0x4a>
		break;
		EmptyString(pu8_data);
     26e:	ce 01       	movw	r24, r28
     270:	0e 94 0f 08 	call	0x101e	; 0x101e <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
     274:	83 eb       	ldi	r24, 0xB3	; 179
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 19 04 	call	0x832	; 0x832 <Terminal_Out>
     27c:	81 30       	cpi	r24, 0x01	; 1
     27e:	21 f3       	breq	.-56     	; 0x248 <AppADMIN_getCardPAN+0x6>
		return APP_STATUS_ERROR_NOK;
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	05 c0       	rjmp	.+10     	; 0x28e <AppADMIN_getCardPAN+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card PAN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	03 c0       	rjmp	.+6      	; 0x28e <AppADMIN_getCardPAN+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	01 c0       	rjmp	.+2      	; 0x28e <AppADMIN_getCardPAN+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     28c:	81 e0       	ldi	r24, 0x01	; 1
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <AppADMIN_getCardPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardPIN(uint8_t* pu8_data)
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	Terminal_enablePasswordMode();
     29a:	0e 94 4f 04 	call	0x89e	; 0x89e <Terminal_enablePasswordMode>
	do
	{
		if(Terminal_Out((uint8_t*)"Card PIN: ") != TERMINAL_STATUS_ERROR_OK)
     29e:	83 ed       	ldi	r24, 0xD3	; 211
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 19 04 	call	0x832	; 0x832 <Terminal_Out>
     2a6:	81 30       	cpi	r24, 0x01	; 1
     2a8:	d9 f4       	brne	.+54     	; 0x2e0 <AppADMIN_getCardPIN+0x4c>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     2aa:	ce 01       	movw	r24, r28
     2ac:	0e 94 c7 00 	call	0x18e	; 0x18e <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	29 f0       	breq	.+10     	; 0x2be <AppADMIN_getCardPIN+0x2a>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     2b4:	11 f0       	breq	.+4      	; 0x2ba <AppADMIN_getCardPIN+0x26>
     2b6:	86 30       	cpi	r24, 0x06	; 6
     2b8:	a9 f4       	brne	.+42     	; 0x2e4 <AppADMIN_getCardPIN+0x50>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     2ba:	86 30       	cpi	r24, 0x06	; 6
     2bc:	b1 f3       	breq	.-20     	; 0x2aa <AppADMIN_getCardPIN+0x16>
		
		if (pu8_data[4] == '\0')
     2be:	8c 81       	ldd	r24, Y+4	; 0x04
     2c0:	88 23       	and	r24, r24
     2c2:	51 f0       	breq	.+20     	; 0x2d8 <AppADMIN_getCardPIN+0x44>
			break;
		EmptyString(pu8_data);
     2c4:	ce 01       	movw	r24, r28
     2c6:	0e 94 0f 08 	call	0x101e	; 0x101e <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
     2ca:	8e ed       	ldi	r24, 0xDE	; 222
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 19 04 	call	0x832	; 0x832 <Terminal_Out>
     2d2:	81 30       	cpi	r24, 0x01	; 1
     2d4:	21 f3       	breq	.-56     	; 0x29e <AppADMIN_getCardPIN+0xa>
     2d6:	08 c0       	rjmp	.+16     	; 0x2e8 <AppADMIN_getCardPIN+0x54>
			return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
     2d8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <Terminal_disablePasswordMode>
	return APP_STATUS_ERROR_OK;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	05 c0       	rjmp	.+10     	; 0x2ea <AppADMIN_getCardPIN+0x56>
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"Card PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	03 c0       	rjmp	.+6      	; 0x2ea <AppADMIN_getCardPIN+0x56>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	01 c0       	rjmp	.+2      	; 0x2ea <AppADMIN_getCardPIN+0x56>
		
		if (pu8_data[4] == '\0')
			break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     2e8:	80 e0       	ldi	r24, 0x00	; 0
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_ERROR_OK;
}
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <AppADMIN_saveCardData>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the EEPROM
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveCardData(strCardData_t* pstr_CardData)
{
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	ec 01       	movw	r28, r24
	if(Eeprom_24_writePage(CARD_NAME_PAGE_NUM, (pstr_CardData->au8_cardHolderName)) != EEPROM_24_STATUS_ERROR_OK)
     2f6:	bc 01       	movw	r22, r24
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	0e 94 8a 03 	call	0x714	; 0x714 <Eeprom_24_writePage>
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	b9 f5       	brne	.+110    	; 0x370 <AppADMIN_saveCardData+0x80>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     302:	2a e0       	ldi	r18, 0x0A	; 10
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Delay_ms>
	if(Eeprom_24_writePage(CARD_PAN_PAGE_NUM, (pstr_CardData->au8_primaryAccountNumber)) != EEPROM_24_STATUS_ERROR_OK)
     316:	be 01       	movw	r22, r28
     318:	66 5f       	subi	r22, 0xF6	; 246
     31a:	7f 4f       	sbci	r23, 0xFF	; 255
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	0e 94 8a 03 	call	0x714	; 0x714 <Eeprom_24_writePage>
     322:	81 30       	cpi	r24, 0x01	; 1
     324:	39 f5       	brne	.+78     	; 0x374 <AppADMIN_saveCardData+0x84>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     326:	2a e0       	ldi	r18, 0x0A	; 10
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	40 e0       	ldi	r20, 0x00	; 0
     32c:	50 e0       	ldi	r21, 0x00	; 0
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Delay_ms>
	if(Eeprom_24_writePage(CARD_PIN_PAGE_NUM, (pstr_CardData->au8_pinNum)) != EEPROM_24_STATUS_ERROR_OK)
     33a:	be 01       	movw	r22, r28
     33c:	6c 5e       	subi	r22, 0xEC	; 236
     33e:	7f 4f       	sbci	r23, 0xFF	; 255
     340:	84 e0       	ldi	r24, 0x04	; 4
     342:	0e 94 8a 03 	call	0x714	; 0x714 <Eeprom_24_writePage>
     346:	81 30       	cpi	r24, 0x01	; 1
     348:	b9 f4       	brne	.+46     	; 0x378 <AppADMIN_saveCardData+0x88>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     34a:	2a e0       	ldi	r18, 0x0A	; 10
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Delay_ms>
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, CARD_INITIALIZED) != EEPROM_24_STATUS_ERROR_OK)
     35e:	6a ea       	ldi	r22, 0xAA	; 170
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 23 03 	call	0x646	; 0x646 <Eeprom_24_writeByte>
     368:	81 30       	cpi	r24, 0x01	; 1
     36a:	41 f0       	breq	.+16     	; 0x37c <AppADMIN_saveCardData+0x8c>
		return APP_STATUS_ERROR_NOK;
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	07 c0       	rjmp	.+14     	; 0x37e <AppADMIN_saveCardData+0x8e>
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveCardData(strCardData_t* pstr_CardData)
{
	if(Eeprom_24_writePage(CARD_NAME_PAGE_NUM, (pstr_CardData->au8_cardHolderName)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	05 c0       	rjmp	.+10     	; 0x37e <AppADMIN_saveCardData+0x8e>
	Delay_ms(10);
	if(Eeprom_24_writePage(CARD_PAN_PAGE_NUM, (pstr_CardData->au8_primaryAccountNumber)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	03 c0       	rjmp	.+6      	; 0x37e <AppADMIN_saveCardData+0x8e>
	Delay_ms(10);
	if(Eeprom_24_writePage(CARD_PIN_PAGE_NUM, (pstr_CardData->au8_pinNum)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	01 c0       	rjmp	.+2      	; 0x37e <AppADMIN_saveCardData+0x8e>
	Delay_ms(10);
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, CARD_INITIALIZED) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     37c:	81 e0       	ldi	r24, 0x01	; 1
}
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <AppUSER_sendCardData>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the EEPROM
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_sendCardData(strCardData_t* pstr_CardData)
{
     384:	ef 92       	push	r14
     386:	ff 92       	push	r15
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	6e 97       	sbiw	r28, 0x1e	; 30
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	cd bf       	out	0x3d, r28	; 61
     3a0:	7c 01       	movw	r14, r24
	if(Terminal_Out((uint8_t*)"Data is being sent to the ATM...\r") != TERMINAL_STATUS_ERROR_OK)
     3a2:	8e ef       	ldi	r24, 0xFE	; 254
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	0e 94 19 04 	call	0x832	; 0x832 <Terminal_Out>
     3aa:	81 30       	cpi	r24, 0x01	; 1
     3ac:	f1 f5       	brne	.+124    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		return APP_STATUS_ERROR_NOK;
		
	uint8_t au8_DataFrame[30] = {0};
     3ae:	8e 01       	movw	r16, r28
     3b0:	0f 5f       	subi	r16, 0xFF	; 255
     3b2:	1f 4f       	sbci	r17, 0xFF	; 255
     3b4:	8e e1       	ldi	r24, 0x1E	; 30
     3b6:	f8 01       	movw	r30, r16
     3b8:	11 92       	st	Z+, r1
     3ba:	8a 95       	dec	r24
     3bc:	e9 f7       	brne	.-6      	; 0x3b8 <AppUSER_sendCardData+0x34>
	stringConcatenate(au8_DataFrame, (uint8_t*)"#");
     3be:	60 e2       	ldi	r22, 0x20	; 32
     3c0:	71 e0       	ldi	r23, 0x01	; 1
     3c2:	c8 01       	movw	r24, r16
     3c4:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_cardHolderName);
     3c8:	b7 01       	movw	r22, r14
     3ca:	c8 01       	movw	r24, r16
     3cc:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"-");
     3d0:	63 e2       	ldi	r22, 0x23	; 35
     3d2:	71 e0       	ldi	r23, 0x01	; 1
     3d4:	c8 01       	movw	r24, r16
     3d6:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_primaryAccountNumber);
     3da:	b7 01       	movw	r22, r14
     3dc:	66 5f       	subi	r22, 0xF6	; 246
     3de:	7f 4f       	sbci	r23, 0xFF	; 255
     3e0:	c8 01       	movw	r24, r16
     3e2:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"-");
     3e6:	63 e2       	ldi	r22, 0x23	; 35
     3e8:	71 e0       	ldi	r23, 0x01	; 1
     3ea:	c8 01       	movw	r24, r16
     3ec:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_pinNum);
     3f0:	b7 01       	movw	r22, r14
     3f2:	6c 5e       	subi	r22, 0xEC	; 236
     3f4:	7f 4f       	sbci	r23, 0xFF	; 255
     3f6:	c8 01       	movw	r24, r16
     3f8:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"#-");
     3fc:	62 e2       	ldi	r22, 0x22	; 34
     3fe:	71 e0       	ldi	r23, 0x01	; 1
     400:	c8 01       	movw	r24, r16
     402:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <stringConcatenate>
	
	SPI_SS_ENABLE();
     406:	88 b3       	in	r24, 0x18	; 24
     408:	8f 7e       	andi	r24, 0xEF	; 239
     40a:	88 bb       	out	0x18, r24	; 24
	if(Spi_MasterSendPacket(au8_DataFrame, stringLength(au8_DataFrame)) != SPI_STATUS_ERROR_OK)
     40c:	c8 01       	movw	r24, r16
     40e:	0e 94 a9 07 	call	0xf52	; 0xf52 <stringLength>
     412:	68 2f       	mov	r22, r24
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	c8 01       	movw	r24, r16
     418:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <Spi_MasterSendPacket>
     41c:	81 30       	cpi	r24, 0x01	; 1
     41e:	39 f4       	brne	.+14     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		return APP_STATUS_ERROR_NOK;
	SPI_SS_DISABLE();
     420:	88 b3       	in	r24, 0x18	; 24
     422:	80 61       	ori	r24, 0x10	; 16
     424:	88 bb       	out	0x18, r24	; 24
	
	return APP_STATUS_ERROR_OK;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	03 c0       	rjmp	.+6      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_sendCardData(strCardData_t* pstr_CardData)
{
	if(Terminal_Out((uint8_t*)"Data is being sent to the ATM...\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	01 c0       	rjmp	.+2      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_pinNum);
	stringConcatenate(au8_DataFrame, (uint8_t*)"#-");
	
	SPI_SS_ENABLE();
	if(Spi_MasterSendPacket(au8_DataFrame, stringLength(au8_DataFrame)) != SPI_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     42e:	80 e0       	ldi	r24, 0x00	; 0
	SPI_SS_DISABLE();
	Delay_ms(10);
	SPI_SS_ENABLE();
	Spi_MasterSendByte('-');
	SPI_SS_DISABLE();*/
     430:	6e 96       	adiw	r28, 0x1e	; 30
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	0f 91       	pop	r16
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	08 95       	ret

0000044a <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	a3 97       	sbiw	r28, 0x23	; 35
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
     45e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     462:	84 30       	cpi	r24, 0x04	; 4
     464:	09 f0       	breq	.+2      	; 0x468 <App_update+0x1e>
     466:	b4 c0       	rjmp	.+360    	; 0x5d0 <App_update+0x186>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
     468:	fe 01       	movw	r30, r28
     46a:	31 96       	adiw	r30, 0x01	; 1
     46c:	8a e0       	ldi	r24, 0x0A	; 10
     46e:	df 01       	movw	r26, r30
     470:	1d 92       	st	X+, r1
     472:	8a 95       	dec	r24
     474:	e9 f7       	brne	.-6      	; 0x470 <App_update+0x26>
	if(gu8_CardMode == CARD_MODE_ADMIN)
     476:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <gu8_CardMode>
     47a:	81 11       	cpse	r24, r1
     47c:	4e c0       	rjmp	.+156    	; 0x51a <App_update+0xd0>
	{ /**************** PROGRAMMING MODE ****************/
			if(Terminal_Out((uint8_t*)"Programming Mode\rEnter the Following Data\r") != TERMINAL_STATUS_ERROR_OK)
     47e:	85 e2       	ldi	r24, 0x25	; 37
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	0e 94 19 04 	call	0x832	; 0x832 <Terminal_Out>
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	09 f0       	breq	.+2      	; 0x48c <App_update+0x42>
     48a:	45 c0       	rjmp	.+138    	; 0x516 <App_update+0xcc>
				return APP_STATUS_ERROR_NOK;
			uint8_t au8_tempCardHolderName[10]={0};
     48c:	2a e0       	ldi	r18, 0x0A	; 10
     48e:	ce 01       	movw	r24, r28
     490:	45 96       	adiw	r24, 0x15	; 21
     492:	fc 01       	movw	r30, r24
     494:	32 2f       	mov	r19, r18
     496:	11 92       	st	Z+, r1
     498:	3a 95       	dec	r19
     49a:	e9 f7       	brne	.-6      	; 0x496 <App_update+0x4c>
			uint8_t au8_tempPAN[10]={0};
     49c:	fe 01       	movw	r30, r28
     49e:	3b 96       	adiw	r30, 0x0b	; 11
     4a0:	df 01       	movw	r26, r30
     4a2:	1d 92       	st	X+, r1
     4a4:	2a 95       	dec	r18
     4a6:	e9 f7       	brne	.-6      	; 0x4a2 <App_update+0x58>
			uint8_t au8_tempPinNum[5]={0};
     4a8:	74 96       	adiw	r30, 0x14	; 20
     4aa:	25 e0       	ldi	r18, 0x05	; 5
     4ac:	df 01       	movw	r26, r30
     4ae:	1d 92       	st	X+, r1
     4b0:	2a 95       	dec	r18
     4b2:	e9 f7       	brne	.-6      	; 0x4ae <App_update+0x64>
		
			/* Get the Card Holder Name from the ADMIN Terminal */
			if(AppADMIN_getCardName(au8_tempCardHolderName) != APP_STATUS_ERROR_OK)
     4b4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <AppADMIN_getCardName>
     4b8:	81 30       	cpi	r24, 0x01	; 1
     4ba:	69 f5       	brne	.+90     	; 0x516 <App_update+0xcc>
				return APP_STATUS_ERROR_NOK;
			/* Get the Card Primary Account Number from the ADMIN Terminal */
			if(AppADMIN_getCardPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     4bc:	ce 01       	movw	r24, r28
     4be:	0b 96       	adiw	r24, 0x0b	; 11
     4c0:	0e 94 21 01 	call	0x242	; 0x242 <AppADMIN_getCardPAN>
     4c4:	81 30       	cpi	r24, 0x01	; 1
     4c6:	39 f5       	brne	.+78     	; 0x516 <App_update+0xcc>
			return APP_STATUS_ERROR_NOK;
		
			if(AppADMIN_getCardPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
     4c8:	ce 01       	movw	r24, r28
     4ca:	4f 96       	adiw	r24, 0x1f	; 31
     4cc:	0e 94 4a 01 	call	0x294	; 0x294 <AppADMIN_getCardPIN>
     4d0:	81 30       	cpi	r24, 0x01	; 1
     4d2:	09 f5       	brne	.+66     	; 0x516 <App_update+0xcc>
				return APP_STATUS_ERROR_NOK;
		
			stringCopy(au8_tempCardHolderName, gstr_userCardData.au8_cardHolderName);
     4d4:	6f eb       	ldi	r22, 0xBF	; 191
     4d6:	71 e0       	ldi	r23, 0x01	; 1
     4d8:	ce 01       	movw	r24, r28
     4da:	45 96       	adiw	r24, 0x15	; 21
     4dc:	0e 94 1b 08 	call	0x1036	; 0x1036 <stringCopy>
			stringCopy(au8_tempPAN, gstr_userCardData.au8_primaryAccountNumber);
     4e0:	69 ec       	ldi	r22, 0xC9	; 201
     4e2:	71 e0       	ldi	r23, 0x01	; 1
     4e4:	ce 01       	movw	r24, r28
     4e6:	0b 96       	adiw	r24, 0x0b	; 11
     4e8:	0e 94 1b 08 	call	0x1036	; 0x1036 <stringCopy>
			stringCopy(au8_tempPinNum, gstr_userCardData.au8_pinNum);
     4ec:	63 ed       	ldi	r22, 0xD3	; 211
     4ee:	71 e0       	ldi	r23, 0x01	; 1
     4f0:	ce 01       	movw	r24, r28
     4f2:	4f 96       	adiw	r24, 0x1f	; 31
     4f4:	0e 94 1b 08 	call	0x1036	; 0x1036 <stringCopy>
		
			if(AppADMIN_saveCardData(&gstr_userCardData) != APP_STATUS_ERROR_OK)
     4f8:	8f eb       	ldi	r24, 0xBF	; 191
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <AppADMIN_saveCardData>
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	49 f4       	brne	.+18     	; 0x516 <App_update+0xcc>
				return APP_STATUS_ERROR_NOK;
		
			gu8_CardMode = CARD_MODE_USER;
     504:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <gu8_CardMode>
			if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     508:	80 e5       	ldi	r24, 0x50	; 80
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	0e 94 19 04 	call	0x832	; 0x832 <Terminal_Out>
     510:	81 30       	cpi	r24, 0x01	; 1
     512:	09 f4       	brne	.+2      	; 0x516 <App_update+0xcc>
     514:	51 c0       	rjmp	.+162    	; 0x5b8 <App_update+0x16e>
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
	if(gu8_CardMode == CARD_MODE_ADMIN)
	{ /**************** PROGRAMMING MODE ****************/
			if(Terminal_Out((uint8_t*)"Programming Mode\rEnter the Following Data\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	62 c0       	rjmp	.+196    	; 0x5de <App_update+0x194>
				return APP_STATUS_ERROR_NOK;
	/****************************************************************/
	}else
	{/************* User Mode **************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
     51a:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <gu8_ADMIN_Request>
     51e:	81 30       	cpi	r24, 0x01	; 1
     520:	31 f4       	brne	.+12     	; 0x52e <App_update+0xe4>
     522:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <gu8_USER_Mode_State>
     526:	81 11       	cpse	r24, r1
     528:	02 c0       	rjmp	.+4      	; 0x52e <App_update+0xe4>
			{
				gu8_CardMode = CARD_MODE_ADMIN;
     52a:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <gu8_CardMode>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
     52e:	ce 01       	movw	r24, r28
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	0e 94 c7 00 	call	0x18e	; 0x18e <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     536:	81 30       	cpi	r24, 0x01	; 1
     538:	c9 f4       	brne	.+50     	; 0x56c <App_update+0x122>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
     53a:	68 eb       	ldi	r22, 0xB8	; 184
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	ce 01       	movw	r24, r28
     540:	01 96       	adiw	r24, 0x01	; 1
     542:	0e 94 b5 07 	call	0xf6a	; 0xf6a <stringCompare>
     546:	81 30       	cpi	r24, 0x01	; 1
     548:	a9 f4       	brne	.+42     	; 0x574 <App_update+0x12a>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
     54a:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <gu8_USER_Mode_State>
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	49 f4       	brne	.+18     	; 0x564 <App_update+0x11a>
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
     552:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <gu8_ADMIN_Request>
						if(Terminal_Out((uint8_t*)"CARD is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
     556:	8b e5       	ldi	r24, 0x5B	; 91
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	0e 94 19 04 	call	0x832	; 0x832 <Terminal_Out>
     55e:	81 30       	cpi	r24, 0x01	; 1
     560:	c9 f5       	brne	.+114    	; 0x5d4 <App_update+0x18a>
     562:	08 c0       	rjmp	.+16     	; 0x574 <App_update+0x12a>
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The Card is not used by ATM */
					{
						gu8_CardMode = CARD_MODE_ADMIN;
     564:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <gu8_CardMode>
						return APP_STATUS_ERROR_OK;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	39 c0       	rjmp	.+114    	; 0x5de <App_update+0x194>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     56c:	81 30       	cpi	r24, 0x01	; 1
     56e:	11 f0       	breq	.+4      	; 0x574 <App_update+0x12a>
     570:	86 30       	cpi	r24, 0x06	; 6
     572:	91 f5       	brne	.+100    	; 0x5d8 <App_update+0x18e>
				return APP_STATUS_ERROR_NOK;
			/****************************************************************/
			if (cgu8_ATM_Req == ATM_REQUESTED)
     574:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <cgu8_ATM_Req>
     578:	81 30       	cpi	r24, 0x01	; 1
     57a:	d9 f4       	brne	.+54     	; 0x5b2 <App_update+0x168>
			{
				DIO_PORTA_DATA |= 1<<1;
     57c:	8b b3       	in	r24, 0x1b	; 27
     57e:	82 60       	ori	r24, 0x02	; 2
     580:	8b bb       	out	0x1b, r24	; 27
				AppUSER_sendCardData(&gstr_userCardData);
     582:	8f eb       	ldi	r24, 0xBF	; 191
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	0e 94 c2 01 	call	0x384	; 0x384 <AppUSER_sendCardData>
				
				Delay_ms(100);
     58a:	24 e6       	ldi	r18, 0x64	; 100
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Delay_ms>
				
				if (gu8_ADMIN_Request == ADMIN_NOT_REQUESTED)
     59e:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <gu8_ADMIN_Request>
     5a2:	81 11       	cpse	r24, r1
     5a4:	06 c0       	rjmp	.+12     	; 0x5b2 <App_update+0x168>
				{
					if(Terminal_Out((uint8_t*)"Data Successfully Sent\r") != TERMINAL_STATUS_ERROR_OK)
     5a6:	80 ea       	ldi	r24, 0xA0	; 160
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 19 04 	call	0x832	; 0x832 <Terminal_Out>
     5ae:	81 30       	cpi	r24, 0x01	; 1
     5b0:	a9 f4       	brne	.+42     	; 0x5dc <App_update+0x192>
				}
				
				
			}
			
			gu8_USER_Mode_State = USER_BUSY;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <gu8_USER_Mode_State>
	/****************************************************************/
	}
	
	Delay_ms(155);
     5b8:	2b e9       	ldi	r18, 0x9B	; 155
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Delay_ms>
	return APP_STATUS_ERROR_OK;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	07 c0       	rjmp	.+14     	; 0x5de <App_update+0x194>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
     5d0:	85 e0       	ldi	r24, 0x05	; 5
     5d2:	05 c0       	rjmp	.+10     	; 0x5de <App_update+0x194>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"CARD is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	03 c0       	rjmp	.+6      	; 0x5de <App_update+0x194>
						gu8_CardMode = CARD_MODE_ADMIN;
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	01 c0       	rjmp	.+2      	; 0x5de <App_update+0x194>
				Delay_ms(100);
				
				if (gu8_ADMIN_Request == ADMIN_NOT_REQUESTED)
				{
					if(Terminal_Out((uint8_t*)"Data Successfully Sent\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     5dc:	80 e0       	ldi	r24, 0x00	; 0
	/****************************************************************/
	}
	
	Delay_ms(155);
	return APP_STATUS_ERROR_OK;
}
     5de:	a3 96       	adiw	r28, 0x23	; 35
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	de bf       	out	0x3e, r29	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	cd bf       	out	0x3d, r28	; 61
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	08 95       	ret

000005f0 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
     5f0:	0e 94 6a 00 	call	0xd4	; 0xd4 <App_init>
     5f4:	81 30       	cpi	r24, 0x01	; 1
     5f6:	39 f4       	brne	.+14     	; 0x606 <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
     5f8:	8f b7       	in	r24, 0x3f	; 63
     5fa:	80 68       	ori	r24, 0x80	; 128
     5fc:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
     5fe:	0e 94 25 02 	call	0x44a	; 0x44a <App_update>
     602:	81 30       	cpi	r24, 0x01	; 1
     604:	e1 f3       	breq	.-8      	; 0x5fe <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
			
	}
}
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	08 95       	ret

0000060a <EEPROM_getAddresses>:
* Description: Function to Calculate the slave address byte and the word address byte from the location
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
     60a:	9a 01       	movw	r18, r20
     60c:	22 27       	eor	r18, r18
     60e:	37 70       	andi	r19, 0x07	; 7
     610:	22 0f       	add	r18, r18
     612:	23 2f       	mov	r18, r19
     614:	22 1f       	adc	r18, r18
     616:	33 0b       	sbc	r19, r19
     618:	31 95       	neg	r19
     61a:	20 65       	ori	r18, 0x50	; 80
     61c:	fc 01       	movw	r30, r24
     61e:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
     620:	fb 01       	movw	r30, r22
     622:	40 83       	st	Z, r20
	return EEPROM_24_STATUS_ERROR_OK;
}
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	08 95       	ret

00000628 <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
     628:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_eepromModuleState>
     62c:	83 30       	cpi	r24, 0x03	; 3
     62e:	51 f0       	breq	.+20     	; 0x644 <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
     630:	0e 94 6b 05 	call	0xad6	; 0xad6 <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
     634:	85 30       	cpi	r24, 0x05	; 5
     636:	29 f0       	breq	.+10     	; 0x642 <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
     638:	83 e0       	ldi	r24, 0x03	; 3
     63a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
     642:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
     644:	08 95       	ret

00000646 <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	00 d0       	rcall	.+0      	; 0x64e <Eeprom_24_writeByte+0x8>
     64e:	1f 92       	push	r1
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	ac 01       	movw	r20, r24
     656:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     658:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     65c:	93 30       	cpi	r25, 0x03	; 3
     65e:	c9 f4       	brne	.+50     	; 0x692 <Eeprom_24_writeByte+0x4c>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     660:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
     662:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     664:	be 01       	movw	r22, r28
     666:	6e 5f       	subi	r22, 0xFE	; 254
     668:	7f 4f       	sbci	r23, 0xFF	; 255
     66a:	ce 01       	movw	r24, r28
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	0e 94 05 03 	call	0x60a	; 0x60a <EEPROM_getAddresses>
     672:	18 2f       	mov	r17, r24
     674:	81 30       	cpi	r24, 0x01	; 1
     676:	79 f4       	brne	.+30     	; 0x696 <Eeprom_24_writeByte+0x50>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
     678:	21 e0       	ldi	r18, 0x01	; 1
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	ae 01       	movw	r20, r28
     67e:	4d 5f       	subi	r20, 0xFD	; 253
     680:	5f 4f       	sbci	r21, 0xFF	; 255
     682:	6a 81       	ldd	r22, Y+2	; 0x02
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	0e 94 b0 06 	call	0xd60	; 0xd60 <I2C_MasterSendToLocation>
     68a:	81 30       	cpi	r24, 0x01	; 1
     68c:	29 f0       	breq	.+10     	; 0x698 <Eeprom_24_writeByte+0x52>
		return EEPROM_24_STATUS_ERROR_NOK;
     68e:	10 e0       	ldi	r17, 0x00	; 0
     690:	03 c0       	rjmp	.+6      	; 0x698 <Eeprom_24_writeByte+0x52>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     692:	12 e0       	ldi	r17, 0x02	; 2
     694:	01 c0       	rjmp	.+2      	; 0x698 <Eeprom_24_writeByte+0x52>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     696:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
     698:	81 2f       	mov	r24, r17
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	08 95       	ret

000006a8 <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	00 d0       	rcall	.+0      	; 0x6b4 <Eeprom_24_readByte+0xc>
     6b4:	cd b7       	in	r28, 0x3d	; 61
     6b6:	de b7       	in	r29, 0x3e	; 62
     6b8:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     6ba:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     6be:	93 30       	cpi	r25, 0x03	; 3
     6c0:	d9 f4       	brne	.+54     	; 0x6f8 <Eeprom_24_readByte+0x50>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     6c2:	61 15       	cp	r22, r1
     6c4:	71 05       	cpc	r23, r1
     6c6:	d1 f0       	breq	.+52     	; 0x6fc <Eeprom_24_readByte+0x54>
     6c8:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
     6ca:	19 82       	std	Y+1, r1	; 0x01
	uint8_t word_addr=0;
     6cc:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     6ce:	be 01       	movw	r22, r28
     6d0:	6e 5f       	subi	r22, 0xFE	; 254
     6d2:	7f 4f       	sbci	r23, 0xFF	; 255
     6d4:	ce 01       	movw	r24, r28
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	0e 94 05 03 	call	0x60a	; 0x60a <EEPROM_getAddresses>
     6dc:	18 2f       	mov	r17, r24
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	79 f4       	brne	.+30     	; 0x700 <Eeprom_24_readByte+0x58>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
     6e2:	21 e0       	ldi	r18, 0x01	; 1
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	a7 01       	movw	r20, r14
     6e8:	6a 81       	ldd	r22, Y+2	; 0x02
     6ea:	89 81       	ldd	r24, Y+1	; 0x01
     6ec:	0e 94 02 07 	call	0xe04	; 0xe04 <I2C_MasterReceiveFromLocation>
     6f0:	81 30       	cpi	r24, 0x01	; 1
     6f2:	39 f0       	breq	.+14     	; 0x702 <Eeprom_24_readByte+0x5a>
		return EEPROM_24_STATUS_ERROR_NOK;
     6f4:	10 e0       	ldi	r17, 0x00	; 0
     6f6:	05 c0       	rjmp	.+10     	; 0x702 <Eeprom_24_readByte+0x5a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     6f8:	12 e0       	ldi	r17, 0x02	; 2
     6fa:	03 c0       	rjmp	.+6      	; 0x702 <Eeprom_24_readByte+0x5a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     6fc:	14 e0       	ldi	r17, 0x04	; 4
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <Eeprom_24_readByte+0x5a>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
	uint8_t word_addr=0;
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     700:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
     702:	81 2f       	mov	r24, r17
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	08 95       	ret

00000714 <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	00 d0       	rcall	.+0      	; 0x720 <Eeprom_24_writePage+0xc>
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     724:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     728:	93 30       	cpi	r25, 0x03	; 3
     72a:	f9 f4       	brne	.+62     	; 0x76a <Eeprom_24_writePage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     72c:	61 15       	cp	r22, r1
     72e:	71 05       	cpc	r23, r1
     730:	f1 f0       	breq	.+60     	; 0x76e <Eeprom_24_writePage+0x5a>
     732:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
     734:	90 e1       	ldi	r25, 0x10	; 16
     736:	89 9f       	mul	r24, r25
     738:	a0 01       	movw	r20, r0
     73a:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
     73c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
     73e:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
     740:	be 01       	movw	r22, r28
     742:	6e 5f       	subi	r22, 0xFE	; 254
     744:	7f 4f       	sbci	r23, 0xFF	; 255
     746:	ce 01       	movw	r24, r28
     748:	01 96       	adiw	r24, 0x01	; 1
     74a:	0e 94 05 03 	call	0x60a	; 0x60a <EEPROM_getAddresses>
     74e:	18 2f       	mov	r17, r24
     750:	81 30       	cpi	r24, 0x01	; 1
     752:	79 f4       	brne	.+30     	; 0x772 <Eeprom_24_writePage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
     754:	20 e1       	ldi	r18, 0x10	; 16
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	a7 01       	movw	r20, r14
     75a:	6a 81       	ldd	r22, Y+2	; 0x02
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	0e 94 b0 06 	call	0xd60	; 0xd60 <I2C_MasterSendToLocation>
     762:	81 30       	cpi	r24, 0x01	; 1
     764:	39 f0       	breq	.+14     	; 0x774 <Eeprom_24_writePage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
     766:	10 e0       	ldi	r17, 0x00	; 0
     768:	05 c0       	rjmp	.+10     	; 0x774 <Eeprom_24_writePage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     76a:	12 e0       	ldi	r17, 0x02	; 2
     76c:	03 c0       	rjmp	.+6      	; 0x774 <Eeprom_24_writePage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     76e:	14 e0       	ldi	r17, 0x04	; 4
     770:	01 c0       	rjmp	.+2      	; 0x774 <Eeprom_24_writePage+0x60>
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     772:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
     774:	81 2f       	mov	r24, r17
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	08 95       	ret

00000786 <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
     78a:	c0 91 dd 01 	lds	r28, 0x01DD	; 0x8001dd <gu8_counter>
     78e:	d0 e0       	ldi	r29, 0x00	; 0
     790:	0e 94 89 08 	call	0x1112	; 0x1112 <Uart_DataRegister>
     794:	c2 52       	subi	r28, 0x22	; 34
     796:	de 4f       	sbci	r29, 0xFE	; 254
     798:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
     79a:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <gu8_counter>
     79e:	e9 2f       	mov	r30, r25
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	e2 52       	subi	r30, 0x22	; 34
     7a4:	fe 4f       	sbci	r31, 0xFE	; 254
     7a6:	80 81       	ld	r24, Z
     7a8:	8d 30       	cpi	r24, 0x0D	; 13
     7aa:	71 f4       	brne	.+28     	; 0x7c8 <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
     7ac:	0e 94 42 08 	call	0x1084	; 0x1084 <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
     7b0:	e0 91 dd 01 	lds	r30, 0x01DD	; 0x8001dd <gu8_counter>
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	e2 52       	subi	r30, 0x22	; 34
     7b8:	fe 4f       	sbci	r31, 0xFE	; 254
     7ba:	10 82       	st	Z, r1
		gu8_counter = 0;
     7bc:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <gu8_counter>
		gu8_flag = 1;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <gu8_flag>
     7c6:	1d c0       	rjmp	.+58     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
     7c8:	88 30       	cpi	r24, 0x08	; 8
     7ca:	51 f4       	brne	.+20     	; 0x7e0 <Uart_RXC_ISR+0x5a>
     7cc:	99 23       	and	r25, r25
     7ce:	41 f0       	breq	.+16     	; 0x7e0 <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
     7d0:	0e 94 42 08 	call	0x1084	; 0x1084 <Uart_sendByte>
		gu8_counter--;
     7d4:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <gu8_counter>
     7d8:	81 50       	subi	r24, 0x01	; 1
     7da:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <gu8_counter>
     7de:	11 c0       	rjmp	.+34     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	}
	else if(gau8_data[gu8_counter] != '\b')
     7e0:	88 30       	cpi	r24, 0x08	; 8
     7e2:	79 f0       	breq	.+30     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
     7e4:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <gu8_visibility>
     7e8:	91 30       	cpi	r25, 0x01	; 1
     7ea:	21 f4       	brne	.+8      	; 0x7f4 <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
     7ec:	8a e2       	ldi	r24, 0x2A	; 42
     7ee:	0e 94 42 08 	call	0x1084	; 0x1084 <Uart_sendByte>
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
     7f4:	0e 94 42 08 	call	0x1084	; 0x1084 <Uart_sendByte>
		}
		gu8_counter++;
     7f8:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <gu8_counter>
     7fc:	8f 5f       	subi	r24, 0xFF	; 255
     7fe:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <gu8_counter>
	}
}
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
     808:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
     80c:	83 30       	cpi	r24, 0x03	; 3
     80e:	81 f0       	breq	.+32     	; 0x830 <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
     810:	0e 94 2c 08 	call	0x1058	; 0x1058 <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
     814:	81 30       	cpi	r24, 0x01	; 1
     816:	11 f0       	breq	.+4      	; 0x81c <Terminal_init+0x14>
     818:	87 30       	cpi	r24, 0x07	; 7
     81a:	49 f4       	brne	.+18     	; 0x82e <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
     81c:	83 ec       	ldi	r24, 0xC3	; 195
     81e:	93 e0       	ldi	r25, 0x03	; 3
     820:	0e 94 74 08 	call	0x10e8	; 0x10e8 <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
     824:	83 e0       	ldi	r24, 0x03	; 3
     826:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
     82e:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
     830:	08 95       	ret

00000832 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
     836:	00 97       	sbiw	r24, 0x00	; 0
     838:	81 f0       	breq	.+32     	; 0x85a <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
     83a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <genu_TerminalModuleState>
     83e:	22 30       	cpi	r18, 0x02	; 2
     840:	79 f0       	breq	.+30     	; 0x860 <__stack+0x1>
     842:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
     844:	0e 94 a9 07 	call	0xf52	; 0xf52 <stringLength>
     848:	68 2f       	mov	r22, r24
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	ce 01       	movw	r24, r28
     84e:	0e 94 4d 08 	call	0x109a	; 0x109a <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
     852:	81 30       	cpi	r24, 0x01	; 1
     854:	21 f0       	breq	.+8      	; 0x85e <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	03 c0       	rjmp	.+6      	; 0x860 <__stack+0x1>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
     85a:	24 e0       	ldi	r18, 0x04	; 4
     85c:	01 c0       	rjmp	.+2      	; 0x860 <__stack+0x1>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
     85e:	21 e0       	ldi	r18, 0x01	; 1
}
     860:	82 2f       	mov	r24, r18
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
     868:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
     86a:	89 2b       	or	r24, r25
     86c:	a1 f0       	breq	.+40     	; 0x896 <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
     86e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	99 f0       	breq	.+38     	; 0x89c <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
     876:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <gu8_flag>
     87a:	81 30       	cpi	r24, 0x01	; 1
     87c:	71 f4       	brne	.+28     	; 0x89a <Terminal_In+0x32>
	{
		gu8_flag = 0;
     87e:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
     882:	8e ed       	ldi	r24, 0xDE	; 222
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	0e 94 1b 08 	call	0x1036	; 0x1036 <stringCopy>
		EmptyString(gau8_data);
     88a:	8e ed       	ldi	r24, 0xDE	; 222
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 0f 08 	call	0x101e	; 0x101e <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
     892:	85 e0       	ldi	r24, 0x05	; 5
     894:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
     896:	84 e0       	ldi	r24, 0x04	; 4
     898:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
     89a:	81 e0       	ldi	r24, 0x01	; 1
}
     89c:	08 95       	ret

0000089e <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
     8a4:	08 95       	ret

000008a6 <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
     8a6:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	08 95       	ret

000008ae <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
     8ae:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <App_start>
     8b2:	ff cf       	rjmp	.-2      	; 0x8b2 <main+0x4>

000008b4 <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
     8b4:	2f 92       	push	r2
     8b6:	3f 92       	push	r3
     8b8:	4f 92       	push	r4
     8ba:	5f 92       	push	r5
     8bc:	6f 92       	push	r6
     8be:	7f 92       	push	r7
     8c0:	8f 92       	push	r8
     8c2:	9f 92       	push	r9
     8c4:	af 92       	push	r10
     8c6:	bf 92       	push	r11
     8c8:	cf 92       	push	r12
     8ca:	df 92       	push	r13
     8cc:	ef 92       	push	r14
     8ce:	ff 92       	push	r15
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	00 d0       	rcall	.+0      	; 0x8da <Delay_ms+0x26>
     8da:	00 d0       	rcall	.+0      	; 0x8dc <Delay_ms+0x28>
     8dc:	1f 92       	push	r1
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
     8e2:	22 2e       	mov	r2, r18
     8e4:	33 2e       	mov	r3, r19
     8e6:	44 2e       	mov	r4, r20
     8e8:	55 2e       	mov	r5, r21
     8ea:	66 2e       	mov	r6, r22
     8ec:	79 83       	std	Y+1, r23	; 0x01
     8ee:	8a 83       	std	Y+2, r24	; 0x02
     8f0:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
     8f2:	91 2c       	mov	r9, r1
     8f4:	1d 82       	std	Y+5, r1	; 0x05
     8f6:	1c 82       	std	Y+4, r1	; 0x04
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	e0 e0       	ldi	r30, 0x00	; 0
     8fe:	71 2c       	mov	r7, r1
     900:	81 2c       	mov	r8, r1
     902:	3d c0       	rjmp	.+122    	; 0x97e <Delay_ms+0xca>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
     904:	2c 2d       	mov	r18, r12
     906:	3d 2d       	mov	r19, r13
     908:	4e 2d       	mov	r20, r14
     90a:	5f 2d       	mov	r21, r15
     90c:	60 2f       	mov	r22, r16
     90e:	71 2f       	mov	r23, r17
     910:	8a 2d       	mov	r24, r10
     912:	9b 2d       	mov	r25, r11
     914:	a1 e0       	ldi	r26, 0x01	; 1
     916:	0e 94 00 09 	call	0x1200	; 0x1200 <__adddi3_s8>
     91a:	c2 2e       	mov	r12, r18
     91c:	d3 2e       	mov	r13, r19
     91e:	e4 2e       	mov	r14, r20
     920:	f5 2e       	mov	r15, r21
     922:	06 2f       	mov	r16, r22
     924:	17 2f       	mov	r17, r23
     926:	a8 2e       	mov	r10, r24
     928:	b9 2e       	mov	r11, r25
     92a:	08 c0       	rjmp	.+16     	; 0x93c <Delay_ms+0x88>
     92c:	c1 2c       	mov	r12, r1
     92e:	d1 2c       	mov	r13, r1
     930:	e1 2c       	mov	r14, r1
     932:	f1 2c       	mov	r15, r1
     934:	00 e0       	ldi	r16, 0x00	; 0
     936:	10 e0       	ldi	r17, 0x00	; 0
     938:	a1 2c       	mov	r10, r1
     93a:	b1 2c       	mov	r11, r1
     93c:	2c 2d       	mov	r18, r12
     93e:	3d 2d       	mov	r19, r13
     940:	4e 2d       	mov	r20, r14
     942:	5f 2d       	mov	r21, r15
     944:	60 2f       	mov	r22, r16
     946:	71 2f       	mov	r23, r17
     948:	8a 2d       	mov	r24, r10
     94a:	9b 2d       	mov	r25, r11
     94c:	ac e0       	ldi	r26, 0x0C	; 12
     94e:	0e 94 15 09 	call	0x122a	; 0x122a <__cmpdi2_s8>
     952:	c1 f2       	breq	.-80     	; 0x904 <Delay_ms+0x50>
     954:	b8 f2       	brcs	.-82     	; 0x904 <Delay_ms+0x50>
     956:	8c 81       	ldd	r24, Y+4	; 0x04

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
     958:	29 2d       	mov	r18, r9
     95a:	3d 81       	ldd	r19, Y+5	; 0x05
     95c:	48 2f       	mov	r20, r24
     95e:	5b 2f       	mov	r21, r27
     960:	6f 2f       	mov	r22, r31
     962:	7e 2f       	mov	r23, r30
     964:	87 2d       	mov	r24, r7
     966:	98 2d       	mov	r25, r8
     968:	a1 e0       	ldi	r26, 0x01	; 1
     96a:	0e 94 00 09 	call	0x1200	; 0x1200 <__adddi3_s8>
     96e:	92 2e       	mov	r9, r18
     970:	3d 83       	std	Y+5, r19	; 0x05
     972:	4c 83       	std	Y+4, r20	; 0x04
     974:	b5 2f       	mov	r27, r21
     976:	f6 2f       	mov	r31, r22
     978:	e7 2f       	mov	r30, r23
     97a:	78 2e       	mov	r7, r24
     97c:	89 2e       	mov	r8, r25
     97e:	29 2d       	mov	r18, r9
     980:	3d 81       	ldd	r19, Y+5	; 0x05
     982:	4c 81       	ldd	r20, Y+4	; 0x04
     984:	5b 2f       	mov	r21, r27
     986:	6f 2f       	mov	r22, r31
     988:	7e 2f       	mov	r23, r30
     98a:	87 2d       	mov	r24, r7
     98c:	98 2d       	mov	r25, r8
     98e:	a2 2c       	mov	r10, r2
     990:	b3 2c       	mov	r11, r3
     992:	c4 2c       	mov	r12, r4
     994:	d5 2c       	mov	r13, r5
     996:	e6 2c       	mov	r14, r6
     998:	f9 80       	ldd	r15, Y+1	; 0x01
     99a:	0a 81       	ldd	r16, Y+2	; 0x02
     99c:	1b 81       	ldd	r17, Y+3	; 0x03
     99e:	0e 94 0c 09 	call	0x1218	; 0x1218 <__cmpdi2>
     9a2:	20 f2       	brcs	.-120    	; 0x92c <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	7f 90       	pop	r7
     9c8:	6f 90       	pop	r6
     9ca:	5f 90       	pop	r5
     9cc:	4f 90       	pop	r4
     9ce:	3f 90       	pop	r3
     9d0:	2f 90       	pop	r2
     9d2:	08 95       	ret

000009d4 <Ext_INT0_init>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
     9d4:	9b b7       	in	r25, 0x3b	; 59
     9d6:	90 64       	ori	r25, 0x40	; 64
     9d8:	9b bf       	out	0x3b, r25	; 59
     9da:	95 b7       	in	r25, 0x35	; 53
     9dc:	89 2b       	or	r24, r25
     9de:	85 bf       	out	0x35, r24	; 53
     9e0:	08 95       	ret

000009e2 <INT0_setCallBack>:
     9e2:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <INT0_CallBackPtr+0x1>
     9e6:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <INT0_CallBackPtr>
     9ea:	08 95       	ret

000009ec <__vector_1>:
     9ec:	1f 92       	push	r1
     9ee:	0f 92       	push	r0
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	0f 92       	push	r0
     9f4:	11 24       	eor	r1, r1
     9f6:	2f 93       	push	r18
     9f8:	3f 93       	push	r19
     9fa:	4f 93       	push	r20
     9fc:	5f 93       	push	r21
     9fe:	6f 93       	push	r22
     a00:	7f 93       	push	r23
     a02:	8f 93       	push	r24
     a04:	9f 93       	push	r25
     a06:	af 93       	push	r26
     a08:	bf 93       	push	r27
     a0a:	ef 93       	push	r30
     a0c:	ff 93       	push	r31
     a0e:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <INT0_CallBackPtr>
     a12:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <INT0_CallBackPtr+0x1>
     a16:	09 95       	icall
     a18:	ff 91       	pop	r31
     a1a:	ef 91       	pop	r30
     a1c:	bf 91       	pop	r27
     a1e:	af 91       	pop	r26
     a20:	9f 91       	pop	r25
     a22:	8f 91       	pop	r24
     a24:	7f 91       	pop	r23
     a26:	6f 91       	pop	r22
     a28:	5f 91       	pop	r21
     a2a:	4f 91       	pop	r20
     a2c:	3f 91       	pop	r19
     a2e:	2f 91       	pop	r18
     a30:	0f 90       	pop	r0
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	0f 90       	pop	r0
     a36:	1f 90       	pop	r1
     a38:	18 95       	reti

00000a3a <__vector_2>:
     a3a:	1f 92       	push	r1
     a3c:	0f 92       	push	r0
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	0f 92       	push	r0
     a42:	11 24       	eor	r1, r1
     a44:	2f 93       	push	r18
     a46:	3f 93       	push	r19
     a48:	4f 93       	push	r20
     a4a:	5f 93       	push	r21
     a4c:	6f 93       	push	r22
     a4e:	7f 93       	push	r23
     a50:	8f 93       	push	r24
     a52:	9f 93       	push	r25
     a54:	af 93       	push	r26
     a56:	bf 93       	push	r27
     a58:	ef 93       	push	r30
     a5a:	ff 93       	push	r31
     a5c:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <INT1_CallBackPtr>
     a60:	f0 91 e1 02 	lds	r31, 0x02E1	; 0x8002e1 <INT1_CallBackPtr+0x1>
     a64:	09 95       	icall
     a66:	ff 91       	pop	r31
     a68:	ef 91       	pop	r30
     a6a:	bf 91       	pop	r27
     a6c:	af 91       	pop	r26
     a6e:	9f 91       	pop	r25
     a70:	8f 91       	pop	r24
     a72:	7f 91       	pop	r23
     a74:	6f 91       	pop	r22
     a76:	5f 91       	pop	r21
     a78:	4f 91       	pop	r20
     a7a:	3f 91       	pop	r19
     a7c:	2f 91       	pop	r18
     a7e:	0f 90       	pop	r0
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	0f 90       	pop	r0
     a84:	1f 90       	pop	r1
     a86:	18 95       	reti

00000a88 <__vector_3>:
}
ISR(INT2_IRQ)
{
     a88:	1f 92       	push	r1
     a8a:	0f 92       	push	r0
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	0f 92       	push	r0
     a90:	11 24       	eor	r1, r1
     a92:	2f 93       	push	r18
     a94:	3f 93       	push	r19
     a96:	4f 93       	push	r20
     a98:	5f 93       	push	r21
     a9a:	6f 93       	push	r22
     a9c:	7f 93       	push	r23
     a9e:	8f 93       	push	r24
     aa0:	9f 93       	push	r25
     aa2:	af 93       	push	r26
     aa4:	bf 93       	push	r27
     aa6:	ef 93       	push	r30
     aa8:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
     aaa:	e0 91 de 02 	lds	r30, 0x02DE	; 0x8002de <INT2_CallBackPtr>
     aae:	f0 91 df 02 	lds	r31, 0x02DF	; 0x8002df <INT2_CallBackPtr+0x1>
     ab2:	09 95       	icall
}
     ab4:	ff 91       	pop	r31
     ab6:	ef 91       	pop	r30
     ab8:	bf 91       	pop	r27
     aba:	af 91       	pop	r26
     abc:	9f 91       	pop	r25
     abe:	8f 91       	pop	r24
     ac0:	7f 91       	pop	r23
     ac2:	6f 91       	pop	r22
     ac4:	5f 91       	pop	r21
     ac6:	4f 91       	pop	r20
     ac8:	3f 91       	pop	r19
     aca:	2f 91       	pop	r18
     acc:	0f 90       	pop	r0
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	0f 90       	pop	r0
     ad2:	1f 90       	pop	r1
     ad4:	18 95       	reti

00000ad6 <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
     ad6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     ada:	86 30       	cpi	r24, 0x06	; 6
     adc:	41 f0       	breq	.+16     	; 0xaee <I2C_MasterInit+0x18>
     ade:	11 b8       	out	0x01, r1	; 1
     ae0:	8a ef       	ldi	r24, 0xFA	; 250
     ae2:	80 b9       	out	0x00, r24	; 0
     ae4:	86 e0       	ldi	r24, 0x06	; 6
     ae6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <genuI2C_Status>
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	08 95       	ret
     aee:	87 e0       	ldi	r24, 0x07	; 7
     af0:	08 95       	ret

00000af2 <I2C_MasterSendSTART>:
     af2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     af6:	86 30       	cpi	r24, 0x06	; 6
     af8:	59 f4       	brne	.+22     	; 0xb10 <I2C_MasterSendSTART+0x1e>
     afa:	84 ea       	ldi	r24, 0xA4	; 164
     afc:	86 bf       	out	0x36, r24	; 54
     afe:	06 b6       	in	r0, 0x36	; 54
     b00:	07 fe       	sbrs	r0, 7
     b02:	fd cf       	rjmp	.-6      	; 0xafe <I2C_MasterSendSTART+0xc>
     b04:	81 b1       	in	r24, 0x01	; 1
     b06:	88 7f       	andi	r24, 0xF8	; 248
     b08:	88 30       	cpi	r24, 0x08	; 8
     b0a:	21 f0       	breq	.+8      	; 0xb14 <I2C_MasterSendSTART+0x22>
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	08 95       	ret
     b10:	85 e0       	ldi	r24, 0x05	; 5
     b12:	08 95       	ret
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 95       	ret

00000b18 <I2C_MasterSendSlaveAddress>:
     b18:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
     b1c:	96 30       	cpi	r25, 0x06	; 6
     b1e:	29 f5       	brne	.+74     	; 0xb6a <I2C_MasterSendSlaveAddress+0x52>
     b20:	62 30       	cpi	r22, 0x02	; 2
     b22:	28 f5       	brcc	.+74     	; 0xb6e <I2C_MasterSendSlaveAddress+0x56>
     b24:	88 23       	and	r24, r24
     b26:	2c f1       	brlt	.+74     	; 0xb72 <I2C_MasterSendSlaveAddress+0x5a>
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	68 2b       	or	r22, r24
     b30:	63 b9       	out	0x03, r22	; 3
     b32:	84 e8       	ldi	r24, 0x84	; 132
     b34:	86 bf       	out	0x36, r24	; 54
     b36:	06 b6       	in	r0, 0x36	; 54
     b38:	07 fe       	sbrs	r0, 7
     b3a:	fd cf       	rjmp	.-6      	; 0xb36 <I2C_MasterSendSlaveAddress+0x1e>
     b3c:	81 b1       	in	r24, 0x01	; 1
     b3e:	88 7f       	andi	r24, 0xF8	; 248
     b40:	88 33       	cpi	r24, 0x38	; 56
     b42:	59 f0       	breq	.+22     	; 0xb5a <I2C_MasterSendSlaveAddress+0x42>
     b44:	28 f4       	brcc	.+10     	; 0xb50 <I2C_MasterSendSlaveAddress+0x38>
     b46:	88 31       	cpi	r24, 0x18	; 24
     b48:	b1 f0       	breq	.+44     	; 0xb76 <I2C_MasterSendSlaveAddress+0x5e>
     b4a:	80 32       	cpi	r24, 0x20	; 32
     b4c:	41 f0       	breq	.+16     	; 0xb5e <I2C_MasterSendSlaveAddress+0x46>
     b4e:	0b c0       	rjmp	.+22     	; 0xb66 <I2C_MasterSendSlaveAddress+0x4e>
     b50:	80 34       	cpi	r24, 0x40	; 64
     b52:	89 f0       	breq	.+34     	; 0xb76 <I2C_MasterSendSlaveAddress+0x5e>
     b54:	88 34       	cpi	r24, 0x48	; 72
     b56:	29 f0       	breq	.+10     	; 0xb62 <I2C_MasterSendSlaveAddress+0x4a>
     b58:	06 c0       	rjmp	.+12     	; 0xb66 <I2C_MasterSendSlaveAddress+0x4e>
     b5a:	88 e3       	ldi	r24, 0x38	; 56
     b5c:	08 95       	ret
     b5e:	80 e2       	ldi	r24, 0x20	; 32
     b60:	08 95       	ret
     b62:	88 e4       	ldi	r24, 0x48	; 72
     b64:	08 95       	ret
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	08 95       	ret
     b6a:	85 e0       	ldi	r24, 0x05	; 5
     b6c:	08 95       	ret
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	08 95       	ret
     b72:	83 e0       	ldi	r24, 0x03	; 3
     b74:	08 95       	ret
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	08 95       	ret

00000b7a <I2C_MasterSendRepSTART>:
     b7a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     b7e:	86 30       	cpi	r24, 0x06	; 6
     b80:	59 f4       	brne	.+22     	; 0xb98 <I2C_MasterSendRepSTART+0x1e>
     b82:	84 ea       	ldi	r24, 0xA4	; 164
     b84:	86 bf       	out	0x36, r24	; 54
     b86:	06 b6       	in	r0, 0x36	; 54
     b88:	07 fe       	sbrs	r0, 7
     b8a:	fd cf       	rjmp	.-6      	; 0xb86 <I2C_MasterSendRepSTART+0xc>
     b8c:	81 b1       	in	r24, 0x01	; 1
     b8e:	88 7f       	andi	r24, 0xF8	; 248
     b90:	80 31       	cpi	r24, 0x10	; 16
     b92:	21 f0       	breq	.+8      	; 0xb9c <I2C_MasterSendRepSTART+0x22>
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	08 95       	ret
     b98:	85 e0       	ldi	r24, 0x05	; 5
     b9a:	08 95       	ret
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	08 95       	ret

00000ba0 <I2C_MasterSendSTOP>:
     ba0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     ba4:	86 30       	cpi	r24, 0x06	; 6
     ba6:	39 f4       	brne	.+14     	; 0xbb6 <I2C_MasterSendSTOP+0x16>
     ba8:	84 e9       	ldi	r24, 0x94	; 148
     baa:	86 bf       	out	0x36, r24	; 54
     bac:	06 b6       	in	r0, 0x36	; 54
     bae:	04 fc       	sbrc	r0, 4
     bb0:	fd cf       	rjmp	.-6      	; 0xbac <I2C_MasterSendSTOP+0xc>
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	08 95       	ret
     bb6:	85 e0       	ldi	r24, 0x05	; 5
     bb8:	08 95       	ret

00000bba <I2C_MasterSendByte>:
     bba:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
     bbe:	96 30       	cpi	r25, 0x06	; 6
     bc0:	69 f4       	brne	.+26     	; 0xbdc <I2C_MasterSendByte+0x22>
     bc2:	83 b9       	out	0x03, r24	; 3
     bc4:	84 e8       	ldi	r24, 0x84	; 132
     bc6:	86 bf       	out	0x36, r24	; 54
     bc8:	06 b6       	in	r0, 0x36	; 54
     bca:	07 fe       	sbrs	r0, 7
     bcc:	fd cf       	rjmp	.-6      	; 0xbc8 <I2C_MasterSendByte+0xe>
     bce:	81 b1       	in	r24, 0x01	; 1
     bd0:	88 7f       	andi	r24, 0xF8	; 248
     bd2:	88 32       	cpi	r24, 0x28	; 40
     bd4:	29 f0       	breq	.+10     	; 0xbe0 <I2C_MasterSendByte+0x26>
     bd6:	80 33       	cpi	r24, 0x30	; 48
     bd8:	29 f4       	brne	.+10     	; 0xbe4 <I2C_MasterSendByte+0x2a>
     bda:	08 95       	ret
     bdc:	85 e0       	ldi	r24, 0x05	; 5
     bde:	08 95       	ret
     be0:	88 e2       	ldi	r24, 0x28	; 40
     be2:	08 95       	ret
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	08 95       	ret

00000be8 <I2C_MasterReceiveByte_ACK>:
     be8:	fc 01       	movw	r30, r24
     bea:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
     bee:	96 30       	cpi	r25, 0x06	; 6
     bf0:	79 f4       	brne	.+30     	; 0xc10 <I2C_MasterReceiveByte_ACK+0x28>
     bf2:	30 97       	sbiw	r30, 0x00	; 0
     bf4:	79 f0       	breq	.+30     	; 0xc14 <I2C_MasterReceiveByte_ACK+0x2c>
     bf6:	84 ec       	ldi	r24, 0xC4	; 196
     bf8:	86 bf       	out	0x36, r24	; 54
     bfa:	06 b6       	in	r0, 0x36	; 54
     bfc:	07 fe       	sbrs	r0, 7
     bfe:	fd cf       	rjmp	.-6      	; 0xbfa <I2C_MasterReceiveByte_ACK+0x12>
     c00:	81 b1       	in	r24, 0x01	; 1
     c02:	88 7f       	andi	r24, 0xF8	; 248
     c04:	80 35       	cpi	r24, 0x50	; 80
     c06:	41 f4       	brne	.+16     	; 0xc18 <I2C_MasterReceiveByte_ACK+0x30>
     c08:	83 b1       	in	r24, 0x03	; 3
     c0a:	80 83       	st	Z, r24
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	08 95       	ret
     c10:	85 e0       	ldi	r24, 0x05	; 5
     c12:	08 95       	ret
     c14:	84 e0       	ldi	r24, 0x04	; 4
     c16:	08 95       	ret
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	08 95       	ret

00000c1c <I2C_MasterReceiveByte_NACK>:
     c1c:	fc 01       	movw	r30, r24
     c1e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
     c22:	96 30       	cpi	r25, 0x06	; 6
     c24:	79 f4       	brne	.+30     	; 0xc44 <I2C_MasterReceiveByte_NACK+0x28>
     c26:	30 97       	sbiw	r30, 0x00	; 0
     c28:	79 f0       	breq	.+30     	; 0xc48 <I2C_MasterReceiveByte_NACK+0x2c>
     c2a:	84 e8       	ldi	r24, 0x84	; 132
     c2c:	86 bf       	out	0x36, r24	; 54
     c2e:	06 b6       	in	r0, 0x36	; 54
     c30:	07 fe       	sbrs	r0, 7
     c32:	fd cf       	rjmp	.-6      	; 0xc2e <I2C_MasterReceiveByte_NACK+0x12>
     c34:	81 b1       	in	r24, 0x01	; 1
     c36:	88 7f       	andi	r24, 0xF8	; 248
     c38:	88 35       	cpi	r24, 0x58	; 88
     c3a:	41 f4       	brne	.+16     	; 0xc4c <I2C_MasterReceiveByte_NACK+0x30>
     c3c:	83 b1       	in	r24, 0x03	; 3
     c3e:	80 83       	st	Z, r24
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	08 95       	ret
     c44:	85 e0       	ldi	r24, 0x05	; 5
     c46:	08 95       	ret
     c48:	84 e0       	ldi	r24, 0x04	; 4
     c4a:	08 95       	ret
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	08 95       	ret

00000c50 <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
     c50:	7f 92       	push	r7
     c52:	8f 92       	push	r8
     c54:	9f 92       	push	r9
     c56:	af 92       	push	r10
     c58:	bf 92       	push	r11
     c5a:	cf 92       	push	r12
     c5c:	df 92       	push	r13
     c5e:	ef 92       	push	r14
     c60:	ff 92       	push	r15
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	78 2e       	mov	r7, r24
     c6c:	eb 01       	movw	r28, r22
     c6e:	7a 01       	movw	r14, r20
     c70:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
     c72:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     c76:	86 30       	cpi	r24, 0x06	; 6
     c78:	09 f0       	breq	.+2      	; 0xc7c <I2C_MasterReceiveGeneral+0x2c>
     c7a:	53 c0       	rjmp	.+166    	; 0xd22 <I2C_MasterReceiveGeneral+0xd2>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
     c7c:	20 97       	sbiw	r28, 0x00	; 0
     c7e:	09 f4       	brne	.+2      	; 0xc82 <I2C_MasterReceiveGeneral+0x32>
     c80:	52 c0       	rjmp	.+164    	; 0xd26 <I2C_MasterReceiveGeneral+0xd6>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
     c82:	23 2b       	or	r18, r19
     c84:	09 f4       	brne	.+2      	; 0xc88 <I2C_MasterReceiveGeneral+0x38>
     c86:	51 c0       	rjmp	.+162    	; 0xd2a <I2C_MasterReceiveGeneral+0xda>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
     c88:	77 20       	and	r7, r7
     c8a:	0c f4       	brge	.+2      	; 0xc8e <I2C_MasterReceiveGeneral+0x3e>
     c8c:	50 c0       	rjmp	.+160    	; 0xd2e <I2C_MasterReceiveGeneral+0xde>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
     c8e:	0e 94 79 05 	call	0xaf2	; 0xaf2 <I2C_MasterSendSTART>
     c92:	88 23       	and	r24, r24
     c94:	09 f4       	brne	.+2      	; 0xc98 <I2C_MasterReceiveGeneral+0x48>
     c96:	56 c0       	rjmp	.+172    	; 0xd44 <I2C_MasterReceiveGeneral+0xf4>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	87 2d       	mov	r24, r7
     c9c:	0e 94 8c 05 	call	0xb18	; 0xb18 <I2C_MasterSendSlaveAddress>
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	09 f0       	breq	.+2      	; 0xca6 <I2C_MasterReceiveGeneral+0x56>
     ca4:	46 c0       	rjmp	.+140    	; 0xd32 <I2C_MasterReceiveGeneral+0xe2>
     ca6:	0c c0       	rjmp	.+24     	; 0xcc0 <I2C_MasterReceiveGeneral+0x70>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
     ca8:	4e 01       	movw	r8, r28
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	88 1a       	sub	r8, r24
     cae:	98 0a       	sbc	r9, r24
     cb0:	88 81       	ld	r24, Y
     cb2:	0e 94 dd 05 	call	0xbba	; 0xbba <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
     cb6:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
     cb8:	88 23       	and	r24, r24
     cba:	09 f4       	brne	.+2      	; 0xcbe <I2C_MasterReceiveGeneral+0x6e>
     cbc:	43 c0       	rjmp	.+134    	; 0xd44 <I2C_MasterReceiveGeneral+0xf4>
     cbe:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
     cc0:	57 01       	movw	r10, r14
     cc2:	e1 e0       	ldi	r30, 0x01	; 1
     cc4:	ae 1a       	sub	r10, r30
     cc6:	b1 08       	sbc	r11, r1
     cc8:	ef 28       	or	r14, r15
     cca:	71 f7       	brne	.-36     	; 0xca8 <I2C_MasterReceiveGeneral+0x58>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
     ccc:	0e 94 bd 05 	call	0xb7a	; 0xb7a <I2C_MasterSendRepSTART>
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	89 f5       	brne	.+98     	; 0xd36 <I2C_MasterReceiveGeneral+0xe6>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	87 2d       	mov	r24, r7
     cd8:	0e 94 8c 05 	call	0xb18	; 0xb18 <I2C_MasterSendSlaveAddress>
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	69 f5       	brne	.+90     	; 0xd3a <I2C_MasterReceiveGeneral+0xea>
     ce0:	12 c0       	rjmp	.+36     	; 0xd06 <I2C_MasterReceiveGeneral+0xb6>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
	{
		if(I2C_MasterReceiveByte_ACK(pu8_destination) != I2C_STATUS_ERROR_OK)
     ce2:	c6 01       	movw	r24, r12
     ce4:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <I2C_MasterReceiveByte_ACK>
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	49 f5       	brne	.+82     	; 0xd3e <I2C_MasterReceiveGeneral+0xee>
			return I2C_STATUS_ERROR_NOK;
		if(*pu8_destination == '\0')
     cec:	f6 01       	movw	r30, r12
     cee:	80 81       	ld	r24, Z
     cf0:	81 11       	cpse	r24, r1
     cf2:	06 c0       	rjmp	.+12     	; 0xd00 <I2C_MasterReceiveGeneral+0xb0>
		{
			if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
     cf4:	0e 94 d0 05 	call	0xba0	; 0xba0 <I2C_MasterSendSTOP>
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	21 f1       	breq	.+72     	; 0xd44 <I2C_MasterReceiveGeneral+0xf4>
				return I2C_STATUS_ERROR_NOK;
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	22 c0       	rjmp	.+68     	; 0xd44 <I2C_MasterReceiveGeneral+0xf4>
			return I2C_STATUS_ERROR_OK;
		}
		pu8_destination++;
     d00:	ff ef       	ldi	r31, 0xFF	; 255
     d02:	cf 1a       	sub	r12, r31
     d04:	df 0a       	sbc	r13, r31
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
     d06:	01 50       	subi	r16, 0x01	; 1
     d08:	11 09       	sbc	r17, r1
     d0a:	59 f7       	brne	.-42     	; 0xce2 <I2C_MasterReceiveGeneral+0x92>
		}
		pu8_destination++;
	}
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
     d0c:	c6 01       	movw	r24, r12
     d0e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <I2C_MasterReceiveByte_NACK>
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	b1 f4       	brne	.+44     	; 0xd42 <I2C_MasterReceiveGeneral+0xf2>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
     d16:	0e 94 d0 05 	call	0xba0	; 0xba0 <I2C_MasterSendSTOP>
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	99 f0       	breq	.+38     	; 0xd44 <I2C_MasterReceiveGeneral+0xf4>
		return I2C_STATUS_ERROR_NOK;
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	11 c0       	rjmp	.+34     	; 0xd44 <I2C_MasterReceiveGeneral+0xf4>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
     d22:	85 e0       	ldi	r24, 0x05	; 5
     d24:	0f c0       	rjmp	.+30     	; 0xd44 <I2C_MasterReceiveGeneral+0xf4>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
     d26:	84 e0       	ldi	r24, 0x04	; 4
     d28:	0d c0       	rjmp	.+26     	; 0xd44 <I2C_MasterReceiveGeneral+0xf4>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	0b c0       	rjmp	.+22     	; 0xd44 <I2C_MasterReceiveGeneral+0xf4>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
     d2e:	83 e0       	ldi	r24, 0x03	; 3
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <I2C_MasterReceiveGeneral+0xf4>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	07 c0       	rjmp	.+14     	; 0xd44 <I2C_MasterReceiveGeneral+0xf4>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <I2C_MasterReceiveGeneral+0xf4>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	03 c0       	rjmp	.+6      	; 0xd44 <I2C_MasterReceiveGeneral+0xf4>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
	{
		if(I2C_MasterReceiveByte_ACK(pu8_destination) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <I2C_MasterReceiveGeneral+0xf4>
		pu8_destination++;
	}
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
     d42:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	df 90       	pop	r13
     d52:	cf 90       	pop	r12
     d54:	bf 90       	pop	r11
     d56:	af 90       	pop	r10
     d58:	9f 90       	pop	r9
     d5a:	8f 90       	pop	r8
     d5c:	7f 90       	pop	r7
     d5e:	08 95       	ret

00000d60 <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
     d60:	bf 92       	push	r11
     d62:	cf 92       	push	r12
     d64:	df 92       	push	r13
     d66:	ef 92       	push	r14
     d68:	ff 92       	push	r15
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	18 2f       	mov	r17, r24
     d74:	06 2f       	mov	r16, r22
     d76:	ea 01       	movw	r28, r20
     d78:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
     d7a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     d7e:	86 30       	cpi	r24, 0x06	; 6
     d80:	71 f5       	brne	.+92     	; 0xdde <I2C_MasterSendToLocation+0x7e>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     d82:	20 97       	sbiw	r28, 0x00	; 0
     d84:	71 f1       	breq	.+92     	; 0xde2 <I2C_MasterSendToLocation+0x82>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
     d86:	11 23       	and	r17, r17
     d88:	74 f1       	brlt	.+92     	; 0xde6 <I2C_MasterSendToLocation+0x86>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
     d8a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <I2C_MasterSendSTART>
     d8e:	88 23       	and	r24, r24
     d90:	79 f1       	breq	.+94     	; 0xdf0 <I2C_MasterSendToLocation+0x90>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	81 2f       	mov	r24, r17
     d96:	0e 94 8c 05 	call	0xb18	; 0xb18 <I2C_MasterSendSlaveAddress>
     d9a:	b8 2e       	mov	r11, r24
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	b8 12       	cpse	r11, r24
     da0:	24 c0       	rjmp	.+72     	; 0xdea <I2C_MasterSendToLocation+0x8a>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
     da2:	80 2f       	mov	r24, r16
     da4:	0e 94 dd 05 	call	0xbba	; 0xbba <I2C_MasterSendByte>
     da8:	81 11       	cpse	r24, r1
     daa:	0f c0       	rjmp	.+30     	; 0xdca <I2C_MasterSendToLocation+0x6a>
     dac:	21 c0       	rjmp	.+66     	; 0xdf0 <I2C_MasterSendToLocation+0x90>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
	{		
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
     dae:	6e 01       	movw	r12, r28
     db0:	8f ef       	ldi	r24, 0xFF	; 255
     db2:	c8 1a       	sub	r12, r24
     db4:	d8 0a       	sbc	r13, r24
     db6:	88 81       	ld	r24, Y
     db8:	0e 94 dd 05 	call	0xbba	; 0xbba <I2C_MasterSendByte>
     dbc:	88 23       	and	r24, r24
     dbe:	c1 f0       	breq	.+48     	; 0xdf0 <I2C_MasterSendToLocation+0x90>
		if(*pu8_data == '\0') break;
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
     dc2:	78 01       	movw	r14, r16
	{		
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
		if(*pu8_data == '\0') break;
     dc4:	88 23       	and	r24, r24
     dc6:	31 f0       	breq	.+12     	; 0xdd4 <I2C_MasterSendToLocation+0x74>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
	{		
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
     dc8:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
     dca:	87 01       	movw	r16, r14
     dcc:	01 50       	subi	r16, 0x01	; 1
     dce:	11 09       	sbc	r17, r1
     dd0:	ef 28       	or	r14, r15
     dd2:	69 f7       	brne	.-38     	; 0xdae <I2C_MasterSendToLocation+0x4e>
	{		
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
		if(*pu8_data == '\0') break;
	}
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
     dd4:	0e 94 d0 05 	call	0xba0	; 0xba0 <I2C_MasterSendSTOP>
     dd8:	81 11       	cpse	r24, r1
     dda:	09 c0       	rjmp	.+18     	; 0xdee <I2C_MasterSendToLocation+0x8e>
     ddc:	09 c0       	rjmp	.+18     	; 0xdf0 <I2C_MasterSendToLocation+0x90>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
     dde:	85 e0       	ldi	r24, 0x05	; 5
     de0:	07 c0       	rjmp	.+14     	; 0xdf0 <I2C_MasterSendToLocation+0x90>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
     de2:	84 e0       	ldi	r24, 0x04	; 4
     de4:	05 c0       	rjmp	.+10     	; 0xdf0 <I2C_MasterSendToLocation+0x90>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	03 c0       	rjmp	.+6      	; 0xdf0 <I2C_MasterSendToLocation+0x90>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <I2C_MasterSendToLocation+0x90>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
		if(*pu8_data == '\0') break;
	}
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
     dee:	8b 2d       	mov	r24, r11
}
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	ff 90       	pop	r15
     dfa:	ef 90       	pop	r14
     dfc:	df 90       	pop	r13
     dfe:	cf 90       	pop	r12
     e00:	bf 90       	pop	r11
     e02:	08 95       	ret

00000e04 <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	1f 92       	push	r1
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
     e14:	89 01       	movw	r16, r18
     e16:	9a 01       	movw	r18, r20
     e18:	41 e0       	ldi	r20, 0x01	; 1
     e1a:	50 e0       	ldi	r21, 0x00	; 0
     e1c:	be 01       	movw	r22, r28
     e1e:	6f 5f       	subi	r22, 0xFF	; 255
     e20:	7f 4f       	sbci	r23, 0xFF	; 255
     e22:	0e 94 28 06 	call	0xc50	; 0xc50 <I2C_MasterReceiveGeneral>
}
     e26:	0f 90       	pop	r0
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	08 95       	ret

00000e32 <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
     e32:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genuSpi_Status>
     e36:	87 30       	cpi	r24, 0x07	; 7
     e38:	41 f1       	breq	.+80     	; 0xe8a <Spi_init+0x58>
     e3a:	87 b3       	in	r24, 0x17	; 23
     e3c:	80 6b       	ori	r24, 0xB0	; 176
     e3e:	87 bb       	out	0x17, r24	; 23
     e40:	87 b3       	in	r24, 0x17	; 23
     e42:	8f 7b       	andi	r24, 0xBF	; 191
     e44:	87 bb       	out	0x17, r24	; 23
     e46:	88 b3       	in	r24, 0x18	; 24
     e48:	80 61       	ori	r24, 0x10	; 16
     e4a:	88 bb       	out	0x18, r24	; 24
     e4c:	8d b1       	in	r24, 0x0d	; 13
     e4e:	80 61       	ori	r24, 0x10	; 16
     e50:	8d b9       	out	0x0d, r24	; 13
     e52:	8d b1       	in	r24, 0x0d	; 13
     e54:	8f 7d       	andi	r24, 0xDF	; 223
     e56:	8d b9       	out	0x0d, r24	; 13
     e58:	8d b1       	in	r24, 0x0d	; 13
     e5a:	87 7f       	andi	r24, 0xF7	; 247
     e5c:	8d b9       	out	0x0d, r24	; 13
     e5e:	8d b1       	in	r24, 0x0d	; 13
     e60:	8b 7f       	andi	r24, 0xFB	; 251
     e62:	8d b9       	out	0x0d, r24	; 13
     e64:	8e b1       	in	r24, 0x0e	; 14
     e66:	81 60       	ori	r24, 0x01	; 1
     e68:	8e b9       	out	0x0e, r24	; 14
     e6a:	8d b1       	in	r24, 0x0d	; 13
     e6c:	8e 7f       	andi	r24, 0xFE	; 254
     e6e:	8d b9       	out	0x0d, r24	; 13
     e70:	8d b1       	in	r24, 0x0d	; 13
     e72:	8d 7f       	andi	r24, 0xFD	; 253
     e74:	8d b9       	out	0x0d, r24	; 13
     e76:	8d b1       	in	r24, 0x0d	; 13
     e78:	8d b9       	out	0x0d, r24	; 13
     e7a:	8d b1       	in	r24, 0x0d	; 13
     e7c:	80 64       	ori	r24, 0x40	; 64
     e7e:	8d b9       	out	0x0d, r24	; 13
     e80:	87 e0       	ldi	r24, 0x07	; 7
     e82:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <genuSpi_Status>
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	08 95       	ret
     e8a:	88 e0       	ldi	r24, 0x08	; 8
     e8c:	08 95       	ret

00000e8e <Spi_MasterSendByte>:
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	1f 92       	push	r1
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genuSpi_Status>
     e9c:	97 30       	cpi	r25, 0x07	; 7
     e9e:	39 f4       	brne	.+14     	; 0xeae <Spi_MasterSendByte+0x20>
     ea0:	8f b9       	out	0x0f, r24	; 15
     ea2:	77 9b       	sbis	0x0e, 7	; 14
     ea4:	fe cf       	rjmp	.-4      	; 0xea2 <Spi_MasterSendByte+0x14>
     ea6:	8f b1       	in	r24, 0x0f	; 15
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <Spi_MasterSendByte+0x22>
     eae:	86 e0       	ldi	r24, 0x06	; 6
     eb0:	0f 90       	pop	r0
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	08 95       	ret

00000eb8 <Spi_MasterSendPacket>:
     eb8:	ef 92       	push	r14
     eba:	ff 92       	push	r15
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <genuSpi_Status>
     ec6:	27 30       	cpi	r18, 0x07	; 7
     ec8:	a1 f4       	brne	.+40     	; 0xef2 <Spi_MasterSendPacket+0x3a>
     eca:	8b 01       	movw	r16, r22
     ecc:	7c 01       	movw	r14, r24
     ece:	c0 e0       	ldi	r28, 0x00	; 0
     ed0:	09 c0       	rjmp	.+18     	; 0xee4 <Spi_MasterSendPacket+0x2c>
     ed2:	f7 01       	movw	r30, r14
     ed4:	e2 0f       	add	r30, r18
     ed6:	f3 1f       	adc	r31, r19
     ed8:	80 81       	ld	r24, Z
     eda:	0e 94 47 07 	call	0xe8e	; 0xe8e <Spi_MasterSendByte>
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	51 f4       	brne	.+20     	; 0xef6 <Spi_MasterSendPacket+0x3e>
     ee2:	cf 5f       	subi	r28, 0xFF	; 255
     ee4:	2c 2f       	mov	r18, r28
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	20 17       	cp	r18, r16
     eea:	31 07       	cpc	r19, r17
     eec:	90 f3       	brcs	.-28     	; 0xed2 <Spi_MasterSendPacket+0x1a>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <Spi_MasterSendPacket+0x40>
     ef2:	86 e0       	ldi	r24, 0x06	; 6
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <Spi_MasterSendPacket+0x40>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	08 95       	ret

00000f04 <__vector_12>:


     f04:	1f 92       	push	r1
     f06:	0f 92       	push	r0
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	0f 92       	push	r0
     f0c:	11 24       	eor	r1, r1
     f0e:	2f 93       	push	r18
     f10:	3f 93       	push	r19
     f12:	4f 93       	push	r20
     f14:	5f 93       	push	r21
     f16:	6f 93       	push	r22
     f18:	7f 93       	push	r23
     f1a:	8f 93       	push	r24
     f1c:	9f 93       	push	r25
     f1e:	af 93       	push	r26
     f20:	bf 93       	push	r27
     f22:	ef 93       	push	r30
     f24:	ff 93       	push	r31
     f26:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <SPI_STC_CallBackPtr>
     f2a:	f0 91 e5 02 	lds	r31, 0x02E5	; 0x8002e5 <SPI_STC_CallBackPtr+0x1>
     f2e:	09 95       	icall
     f30:	ff 91       	pop	r31
     f32:	ef 91       	pop	r30
     f34:	bf 91       	pop	r27
     f36:	af 91       	pop	r26
     f38:	9f 91       	pop	r25
     f3a:	8f 91       	pop	r24
     f3c:	7f 91       	pop	r23
     f3e:	6f 91       	pop	r22
     f40:	5f 91       	pop	r21
     f42:	4f 91       	pop	r20
     f44:	3f 91       	pop	r19
     f46:	2f 91       	pop	r18
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	0f 90       	pop	r0
     f4e:	1f 90       	pop	r1
     f50:	18 95       	reti

00000f52 <stringLength>:
        else if(string1[u8_loopIndex] < string2[u8_loopIndex])
            return 2;
        u8_loopIndex++;
    }
    return 3;
}
     f52:	ac 01       	movw	r20, r24
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	01 c0       	rjmp	.+2      	; 0xf5a <stringLength+0x8>
     f58:	8f 5f       	subi	r24, 0xFF	; 255
     f5a:	fa 01       	movw	r30, r20
     f5c:	e8 0f       	add	r30, r24
     f5e:	f1 1d       	adc	r31, r1
     f60:	20 81       	ld	r18, Z
     f62:	21 11       	cpse	r18, r1
     f64:	f9 cf       	rjmp	.-14     	; 0xf58 <stringLength+0x6>
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	08 95       	ret

00000f6a <stringCompare>:
     f6a:	ff 92       	push	r15
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	ec 01       	movw	r28, r24
     f76:	8b 01       	movw	r16, r22
     f78:	0e 94 a9 07 	call	0xf52	; 0xf52 <stringLength>
     f7c:	f8 2e       	mov	r15, r24
     f7e:	c8 01       	movw	r24, r16
     f80:	0e 94 a9 07 	call	0xf52	; 0xf52 <stringLength>
     f84:	8f 15       	cp	r24, r15
     f86:	a8 f0       	brcs	.+42     	; 0xfb2 <stringCompare+0x48>
     f88:	f8 16       	cp	r15, r24
     f8a:	a8 f0       	brcs	.+42     	; 0xfb6 <stringCompare+0x4c>
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	07 c0       	rjmp	.+14     	; 0xf9e <stringCompare+0x34>
     f90:	f8 01       	movw	r30, r16
     f92:	e8 0f       	add	r30, r24
     f94:	f9 1f       	adc	r31, r25
     f96:	80 81       	ld	r24, Z
     f98:	28 13       	cpse	r18, r24
     f9a:	0f c0       	rjmp	.+30     	; 0xfba <stringCompare+0x50>
     f9c:	3f 5f       	subi	r19, 0xFF	; 255
     f9e:	83 2f       	mov	r24, r19
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	fe 01       	movw	r30, r28
     fa4:	e8 0f       	add	r30, r24
     fa6:	f9 1f       	adc	r31, r25
     fa8:	20 81       	ld	r18, Z
     faa:	21 11       	cpse	r18, r1
     fac:	f1 cf       	rjmp	.-30     	; 0xf90 <stringCompare+0x26>
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	05 c0       	rjmp	.+10     	; 0xfbc <stringCompare+0x52>
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	03 c0       	rjmp	.+6      	; 0xfbc <stringCompare+0x52>
     fb6:	83 e0       	ldi	r24, 0x03	; 3
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <stringCompare+0x52>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	08 95       	ret

00000fc8 <stringConcatenate>:
     fc8:	ff 92       	push	r15
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	ec 01       	movw	r28, r24
     fd4:	8b 01       	movw	r16, r22
     fd6:	cb 01       	movw	r24, r22
     fd8:	0e 94 a9 07 	call	0xf52	; 0xf52 <stringLength>
     fdc:	f8 2e       	mov	r15, r24
     fde:	ce 01       	movw	r24, r28
     fe0:	0e 94 a9 07 	call	0xf52	; 0xf52 <stringLength>
     fe4:	81 50       	subi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0b c0       	rjmp	.+22     	; 0x1000 <stringConcatenate+0x38>
     fea:	28 0f       	add	r18, r24
     fec:	31 1d       	adc	r19, r1
     fee:	fe 01       	movw	r30, r28
     ff0:	e2 0f       	add	r30, r18
     ff2:	f3 1f       	adc	r31, r19
     ff4:	d8 01       	movw	r26, r16
     ff6:	a9 0f       	add	r26, r25
     ff8:	b1 1d       	adc	r27, r1
     ffa:	2c 91       	ld	r18, X
     ffc:	20 83       	st	Z, r18
     ffe:	9f 5f       	subi	r25, 0xFF	; 255
    1000:	29 2f       	mov	r18, r25
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	4f 2d       	mov	r20, r15
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	41 50       	subi	r20, 0x01	; 1
    100a:	51 09       	sbc	r21, r1
    100c:	42 17       	cp	r20, r18
    100e:	53 07       	cpc	r21, r19
    1010:	64 f7       	brge	.-40     	; 0xfea <stringConcatenate+0x22>
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	08 95       	ret

0000101e <EmptyString>:

void EmptyString(uint8_t *string)
{
    101e:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
    1020:	90 e0       	ldi	r25, 0x00	; 0
	while(string[u8_loopIndex] != '\0')
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <EmptyString+0xa>
		string[u8_loopIndex++] = '\0';
    1024:	9f 5f       	subi	r25, 0xFF	; 255
    1026:	10 82       	st	Z, r1
}

void EmptyString(uint8_t *string)
{
	uint8_t u8_loopIndex=0;
	while(string[u8_loopIndex] != '\0')
    1028:	fa 01       	movw	r30, r20
    102a:	e9 0f       	add	r30, r25
    102c:	f1 1d       	adc	r31, r1
    102e:	20 81       	ld	r18, Z
    1030:	21 11       	cpse	r18, r1
    1032:	f8 cf       	rjmp	.-16     	; 0x1024 <EmptyString+0x6>
		string[u8_loopIndex++] = '\0';
}
    1034:	08 95       	ret

00001036 <stringCopy>:

void stringCopy(uint8_t* source, uint8_t* destination)
{
    1036:	dc 01       	movw	r26, r24
    uint8_t u8_loopIndex=0;
    1038:	90 e0       	ldi	r25, 0x00	; 0
    while(source[u8_loopIndex] != '\0')
    103a:	05 c0       	rjmp	.+10     	; 0x1046 <stringCopy+0x10>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
    103c:	fb 01       	movw	r30, r22
    103e:	e2 0f       	add	r30, r18
    1040:	f3 1f       	adc	r31, r19
    1042:	40 83       	st	Z, r20
	    u8_loopIndex++;
    1044:	9f 5f       	subi	r25, 0xFF	; 255
}

void stringCopy(uint8_t* source, uint8_t* destination)
{
    uint8_t u8_loopIndex=0;
    while(source[u8_loopIndex] != '\0')
    1046:	29 2f       	mov	r18, r25
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	fd 01       	movw	r30, r26
    104c:	e2 0f       	add	r30, r18
    104e:	f3 1f       	adc	r31, r19
    1050:	40 81       	ld	r20, Z
    1052:	41 11       	cpse	r20, r1
    1054:	f3 cf       	rjmp	.-26     	; 0x103c <stringCopy+0x6>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
	    u8_loopIndex++;
    }
}
    1056:	08 95       	ret

00001058 <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    1058:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <u8_Uart_Status>
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	81 f0       	breq	.+32     	; 0x1080 <Uart_init+0x28>
    1060:	10 bc       	out	0x20, r1	; 32
    1062:	8c e0       	ldi	r24, 0x0C	; 12
    1064:	89 b9       	out	0x09, r24	; 9
    1066:	82 e0       	ldi	r24, 0x02	; 2
    1068:	8b b9       	out	0x0b, r24	; 11
    106a:	88 e1       	ldi	r24, 0x18	; 24
    106c:	8a b9       	out	0x0a, r24	; 10
    106e:	80 e8       	ldi	r24, 0x80	; 128
    1070:	80 bd       	out	0x20, r24	; 32
    1072:	80 b5       	in	r24, 0x20	; 32
    1074:	86 68       	ori	r24, 0x86	; 134
    1076:	80 bd       	out	0x20, r24	; 32
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <u8_Uart_Status>
    107e:	08 95       	ret
    1080:	87 e0       	ldi	r24, 0x07	; 7
    1082:	08 95       	ret

00001084 <Uart_sendByte>:
    1084:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <u8_Uart_Status>
    1088:	99 23       	and	r25, r25
    108a:	29 f0       	breq	.+10     	; 0x1096 <Uart_sendByte+0x12>
    108c:	5d 9b       	sbis	0x0b, 5	; 11
    108e:	fe cf       	rjmp	.-4      	; 0x108c <Uart_sendByte+0x8>
    1090:	8c b9       	out	0x0c, r24	; 12
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	08 95       	ret
    1096:	86 e0       	ldi	r24, 0x06	; 6
    1098:	08 95       	ret

0000109a <Uart_sendPacket>:
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <u8_Uart_Status>
    10aa:	22 23       	and	r18, r18
    10ac:	99 f0       	breq	.+38     	; 0x10d4 <Uart_sendPacket+0x3a>
    10ae:	8b 01       	movw	r16, r22
    10b0:	7c 01       	movw	r14, r24
    10b2:	c0 e0       	ldi	r28, 0x00	; 0
    10b4:	d0 e0       	ldi	r29, 0x00	; 0
    10b6:	09 c0       	rjmp	.+18     	; 0x10ca <Uart_sendPacket+0x30>
    10b8:	f7 01       	movw	r30, r14
    10ba:	ec 0f       	add	r30, r28
    10bc:	fd 1f       	adc	r31, r29
    10be:	80 81       	ld	r24, Z
    10c0:	0e 94 42 08 	call	0x1084	; 0x1084 <Uart_sendByte>
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	41 f4       	brne	.+16     	; 0x10d8 <Uart_sendPacket+0x3e>
    10c8:	21 96       	adiw	r28, 0x01	; 1
    10ca:	c0 17       	cp	r28, r16
    10cc:	d1 07       	cpc	r29, r17
    10ce:	a0 f3       	brcs	.-24     	; 0x10b8 <Uart_sendPacket+0x1e>
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <Uart_sendPacket+0x40>
    10d4:	86 e0       	ldi	r24, 0x06	; 6
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <Uart_sendPacket+0x40>
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	ff 90       	pop	r15
    10e4:	ef 90       	pop	r14
    10e6:	08 95       	ret

000010e8 <Uart_EnableNotification_RXC>:
    10e8:	9c 01       	movw	r18, r24
    10ea:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <u8_Uart_Status>
    10ee:	99 23       	and	r25, r25
    10f0:	61 f0       	breq	.+24     	; 0x110a <Uart_EnableNotification_RXC+0x22>
    10f2:	21 15       	cp	r18, r1
    10f4:	31 05       	cpc	r19, r1
    10f6:	59 f0       	breq	.+22     	; 0x110e <Uart_EnableNotification_RXC+0x26>
    10f8:	8a b1       	in	r24, 0x0a	; 10
    10fa:	80 68       	ori	r24, 0x80	; 128
    10fc:	8a b9       	out	0x0a, r24	; 10
    10fe:	30 93 ea 02 	sts	0x02EA, r19	; 0x8002ea <Uart_RXC_CallBackPtr+0x1>
    1102:	20 93 e9 02 	sts	0x02E9, r18	; 0x8002e9 <Uart_RXC_CallBackPtr>
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	08 95       	ret
    110a:	86 e0       	ldi	r24, 0x06	; 6
    110c:	08 95       	ret
    110e:	85 e0       	ldi	r24, 0x05	; 5
    1110:	08 95       	ret

00001112 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    1112:	8c b1       	in	r24, 0x0c	; 12
}
    1114:	08 95       	ret

00001116 <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    1116:	1f 92       	push	r1
    1118:	0f 92       	push	r0
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	0f 92       	push	r0
    111e:	11 24       	eor	r1, r1
    1120:	2f 93       	push	r18
    1122:	3f 93       	push	r19
    1124:	4f 93       	push	r20
    1126:	5f 93       	push	r21
    1128:	6f 93       	push	r22
    112a:	7f 93       	push	r23
    112c:	8f 93       	push	r24
    112e:	9f 93       	push	r25
    1130:	af 93       	push	r26
    1132:	bf 93       	push	r27
    1134:	ef 93       	push	r30
    1136:	ff 93       	push	r31
    1138:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <Uart_TXC_CallBackPtr>
    113c:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <Uart_TXC_CallBackPtr+0x1>
    1140:	09 95       	icall
    1142:	ff 91       	pop	r31
    1144:	ef 91       	pop	r30
    1146:	bf 91       	pop	r27
    1148:	af 91       	pop	r26
    114a:	9f 91       	pop	r25
    114c:	8f 91       	pop	r24
    114e:	7f 91       	pop	r23
    1150:	6f 91       	pop	r22
    1152:	5f 91       	pop	r21
    1154:	4f 91       	pop	r20
    1156:	3f 91       	pop	r19
    1158:	2f 91       	pop	r18
    115a:	0f 90       	pop	r0
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	0f 90       	pop	r0
    1160:	1f 90       	pop	r1
    1162:	18 95       	reti

00001164 <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    1164:	1f 92       	push	r1
    1166:	0f 92       	push	r0
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	0f 92       	push	r0
    116c:	11 24       	eor	r1, r1
    116e:	2f 93       	push	r18
    1170:	3f 93       	push	r19
    1172:	4f 93       	push	r20
    1174:	5f 93       	push	r21
    1176:	6f 93       	push	r22
    1178:	7f 93       	push	r23
    117a:	8f 93       	push	r24
    117c:	9f 93       	push	r25
    117e:	af 93       	push	r26
    1180:	bf 93       	push	r27
    1182:	ef 93       	push	r30
    1184:	ff 93       	push	r31
    1186:	e0 91 e9 02 	lds	r30, 0x02E9	; 0x8002e9 <Uart_RXC_CallBackPtr>
    118a:	f0 91 ea 02 	lds	r31, 0x02EA	; 0x8002ea <Uart_RXC_CallBackPtr+0x1>
    118e:	09 95       	icall
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    11b2:	1f 92       	push	r1
    11b4:	0f 92       	push	r0
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	0f 92       	push	r0
    11ba:	11 24       	eor	r1, r1
    11bc:	2f 93       	push	r18
    11be:	3f 93       	push	r19
    11c0:	4f 93       	push	r20
    11c2:	5f 93       	push	r21
    11c4:	6f 93       	push	r22
    11c6:	7f 93       	push	r23
    11c8:	8f 93       	push	r24
    11ca:	9f 93       	push	r25
    11cc:	af 93       	push	r26
    11ce:	bf 93       	push	r27
    11d0:	ef 93       	push	r30
    11d2:	ff 93       	push	r31
    11d4:	e0 91 e7 02 	lds	r30, 0x02E7	; 0x8002e7 <Uart_UDRE_CallBackPtr>
    11d8:	f0 91 e8 02 	lds	r31, 0x02E8	; 0x8002e8 <Uart_UDRE_CallBackPtr+0x1>
    11dc:	09 95       	icall
    11de:	ff 91       	pop	r31
    11e0:	ef 91       	pop	r30
    11e2:	bf 91       	pop	r27
    11e4:	af 91       	pop	r26
    11e6:	9f 91       	pop	r25
    11e8:	8f 91       	pop	r24
    11ea:	7f 91       	pop	r23
    11ec:	6f 91       	pop	r22
    11ee:	5f 91       	pop	r21
    11f0:	4f 91       	pop	r20
    11f2:	3f 91       	pop	r19
    11f4:	2f 91       	pop	r18
    11f6:	0f 90       	pop	r0
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	0f 90       	pop	r0
    11fc:	1f 90       	pop	r1
    11fe:	18 95       	reti

00001200 <__adddi3_s8>:
    1200:	00 24       	eor	r0, r0
    1202:	a7 fd       	sbrc	r26, 7
    1204:	00 94       	com	r0
    1206:	2a 0f       	add	r18, r26
    1208:	30 1d       	adc	r19, r0
    120a:	40 1d       	adc	r20, r0
    120c:	50 1d       	adc	r21, r0
    120e:	60 1d       	adc	r22, r0
    1210:	70 1d       	adc	r23, r0
    1212:	80 1d       	adc	r24, r0
    1214:	90 1d       	adc	r25, r0
    1216:	08 95       	ret

00001218 <__cmpdi2>:
    1218:	2a 15       	cp	r18, r10
    121a:	3b 05       	cpc	r19, r11
    121c:	4c 05       	cpc	r20, r12
    121e:	5d 05       	cpc	r21, r13
    1220:	6e 05       	cpc	r22, r14
    1222:	7f 05       	cpc	r23, r15
    1224:	80 07       	cpc	r24, r16
    1226:	91 07       	cpc	r25, r17
    1228:	08 95       	ret

0000122a <__cmpdi2_s8>:
    122a:	00 24       	eor	r0, r0
    122c:	a7 fd       	sbrc	r26, 7
    122e:	00 94       	com	r0
    1230:	2a 17       	cp	r18, r26
    1232:	30 05       	cpc	r19, r0
    1234:	40 05       	cpc	r20, r0
    1236:	50 05       	cpc	r21, r0
    1238:	60 05       	cpc	r22, r0
    123a:	70 05       	cpc	r23, r0
    123c:	80 05       	cpc	r24, r0
    123e:	90 05       	cpc	r25, r0
    1240:	08 95       	ret

00001242 <_exit>:
    1242:	f8 94       	cli

00001244 <__stop_program>:
    1244:	ff cf       	rjmp	.-2      	; 0x1244 <__stop_program>
