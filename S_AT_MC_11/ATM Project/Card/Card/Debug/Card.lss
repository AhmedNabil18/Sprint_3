
Card.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001710  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ca  00800060  00001710  000017a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012e  0080022a  0080022a  0000196e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000196e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003640  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001039  00000000  00000000  000053b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021c2  00000000  00000000  000063ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d04  00000000  00000000  000085b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000153e  00000000  00000000  000092b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b53  00000000  00000000  0000a7f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  0000e345  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__vector_1>
       8:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__vector_2>
       c:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__vector_12>
      34:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__vector_13>
      38:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__vector_14>
      3c:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 32       	cpi	r26, 0x2A	; 42
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	aa e2       	ldi	r26, 0x2A	; 42
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 35       	cpi	r26, 0x58	; 88
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cb 06 	call	0xd96	; 0xd96 <main>
      8a:	0c 94 86 0b 	jmp	0x170c	; 0x170c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ATM_REQ_ISR>:
/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/*--*-*-*- FUNCTIONS IMPLEMENTATION -*-*-*-*-*-*/
#if REQUEST_MODE == INTERRUPT_REQUEST
void ATM_REQ_ISR(void)
{	
	if(cgu8_ATM_Req == ATM_REQUESTED)
      92:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <cgu8_ATM_Req>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	29 f4       	brne	.+10     	; 0xa4 <ATM_REQ_ISR+0x12>
	{
		cgu8_ATM_Req = ATM_NOT_REQUESTED;
      9a:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <cgu8_ATM_Req>
		gu8_USER_Mode_State = USER_IDLE;
      9e:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <gu8_USER_Mode_State>
      a2:	08 95       	ret
	}
	else
	{/* ATM Request Data from Card */
		cgu8_ATM_Req = ATM_REQUESTED;
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <cgu8_ATM_Req>
		if (gu8_CardMode == CARD_MODE_ADMIN)
      aa:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <gu8_CardMode>
      ae:	81 11       	cpse	r24, r1
      b0:	19 c0       	rjmp	.+50     	; 0xe4 <ATM_REQ_ISR+0x52>
		{
			SPI_SS_ENABLE();
      b2:	88 b3       	in	r24, 0x18	; 24
      b4:	8f 7e       	andi	r24, 0xEF	; 239
      b6:	88 bb       	out	0x18, r24	; 24
			Spi_MasterSendPacket((uint8_t*)"**",3);
      b8:	63 e0       	ldi	r22, 0x03	; 3
      ba:	70 e0       	ldi	r23, 0x00	; 0
      bc:	85 e6       	ldi	r24, 0x65	; 101
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	0e 94 c9 09 	call	0x1392	; 0x1392 <Spi_MasterSendPacket>
			SPI_SS_DISABLE();
      c4:	88 b3       	in	r24, 0x18	; 24
      c6:	80 61       	ori	r24, 0x10	; 16
      c8:	88 bb       	out	0x18, r24	; 24
			Delay_ms(1000);
      ca:	28 ee       	ldi	r18, 0xE8	; 232
      cc:	33 e0       	ldi	r19, 0x03	; 3
      ce:	40 e0       	ldi	r20, 0x00	; 0
      d0:	50 e0       	ldi	r21, 0x00	; 0
      d2:	60 e0       	ldi	r22, 0x00	; 0
      d4:	70 e0       	ldi	r23, 0x00	; 0
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Delay_ms>
			cgu8_ATM_Req = ATM_NOT_REQUESTED;
      de:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <cgu8_ATM_Req>
      e2:	08 95       	ret
		}else
		{
			gu8_USER_Mode_State = USER_BUSY;
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <gu8_USER_Mode_State>
      ea:	08 95       	ret

000000ec <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	cd b7       	in	r28, 0x3d	; 61
      f6:	de b7       	in	r29, 0x3e	; 62
      f8:	cf 5f       	subi	r28, 0xFF	; 255
      fa:	d1 09       	sbc	r29, r1
      fc:	0f b6       	in	r0, 0x3f	; 63
      fe:	f8 94       	cli
     100:	de bf       	out	0x3e, r29	; 62
     102:	0f be       	out	0x3f, r0	; 63
     104:	cd bf       	out	0x3d, r28	; 61
     106:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     108:	ce 01       	movw	r24, r28
     10a:	01 96       	adiw	r24, 0x01	; 1
     10c:	2f ef       	ldi	r18, 0xFF	; 255
     10e:	fc 01       	movw	r30, r24
     110:	11 92       	st	Z+, r1
     112:	2a 95       	dec	r18
     114:	e9 f7       	brne	.-6      	; 0x110 <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
     116:	0e 94 a8 06 	call	0xd50	; 0xd50 <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
     11a:	85 30       	cpi	r24, 0x05	; 5
     11c:	39 f4       	brne	.+14     	; 0x12c <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
     11e:	b8 01       	movw	r22, r16
     120:	ce 01       	movw	r24, r28
     122:	01 96       	adiw	r24, 0x01	; 1
     124:	0e 94 8c 0a 	call	0x1518	; 0x1518 <stringCopy>
		return APP_STATUS_ERROR_OK;
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	05 c0       	rjmp	.+10     	; 0x136 <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     12c:	81 30       	cpi	r24, 0x01	; 1
     12e:	11 f0       	breq	.+4      	; 0x134 <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	01 c0       	rjmp	.+2      	; 0x136 <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
     134:	86 e0       	ldi	r24, 0x06	; 6
}
     136:	c1 50       	subi	r28, 0x01	; 1
     138:	df 4f       	sbci	r29, 0xFF	; 255
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	df 91       	pop	r29
     146:	cf 91       	pop	r28
     148:	1f 91       	pop	r17
     14a:	0f 91       	pop	r16
     14c:	08 95       	ret

0000014e <AppADMIN_getCardName>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD Holder Name by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card holder's name.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardName(uint8_t* pu8_data)
{
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card Holder Name: ") != TERMINAL_STATUS_ERROR_OK)
     154:	88 e6       	ldi	r24, 0x68	; 104
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Terminal_Out>
     15c:	81 30       	cpi	r24, 0x01	; 1
     15e:	c9 f4       	brne	.+50     	; 0x192 <AppADMIN_getCardName+0x44>
		return APP_STATUS_ERROR_NOK;
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     160:	ce 01       	movw	r24, r28
     162:	0e 94 76 00 	call	0xec	; 0xec <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     166:	81 30       	cpi	r24, 0x01	; 1
     168:	29 f0       	breq	.+10     	; 0x174 <AppADMIN_getCardName+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     16a:	11 f0       	breq	.+4      	; 0x170 <AppADMIN_getCardName+0x22>
     16c:	86 30       	cpi	r24, 0x06	; 6
     16e:	99 f4       	brne	.+38     	; 0x196 <AppADMIN_getCardName+0x48>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     170:	86 30       	cpi	r24, 0x06	; 6
     172:	b1 f3       	breq	.-20     	; 0x160 <AppADMIN_getCardName+0x12>
		
		if(stringLength(pu8_data) != MAX_NAME_LENGTH+1) 
     174:	ce 01       	movw	r24, r28
     176:	0e 94 16 0a 	call	0x142c	; 0x142c <stringLength>
     17a:	8a 30       	cpi	r24, 0x0A	; 10
     17c:	71 f0       	breq	.+28     	; 0x19a <AppADMIN_getCardName+0x4c>
		{
			if(Terminal_Out((uint8_t*)"\nInvalid Name, Name should be 9 characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     17e:	8b e7       	ldi	r24, 0x7B	; 123
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Terminal_Out>
     186:	81 30       	cpi	r24, 0x01	; 1
     188:	51 f4       	brne	.+20     	; 0x19e <AppADMIN_getCardName+0x50>
				return APP_STATUS_ERROR_NOK;
		}else{break;}
			
		EmptyString(pu8_data);
     18a:	ce 01       	movw	r24, r28
     18c:	0e 94 80 0a 	call	0x1500	; 0x1500 <EmptyString>
	} while (1);
     190:	e1 cf       	rjmp	.-62     	; 0x154 <AppADMIN_getCardName+0x6>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Card Holder Name: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	05 c0       	rjmp	.+10     	; 0x1a0 <AppADMIN_getCardName+0x52>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	03 c0       	rjmp	.+6      	; 0x1a0 <AppADMIN_getCardName+0x52>
				return APP_STATUS_ERROR_NOK;
		}else{break;}
			
		EmptyString(pu8_data);
	} while (1);
	return APP_STATUS_ERROR_OK;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	01 c0       	rjmp	.+2      	; 0x1a0 <AppADMIN_getCardName+0x52>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringLength(pu8_data) != MAX_NAME_LENGTH+1) 
		{
			if(Terminal_Out((uint8_t*)"\nInvalid Name, Name should be 9 characters\r\n") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     19e:	80 e0       	ldi	r24, 0x00	; 0
		}else{break;}
			
		EmptyString(pu8_data);
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	08 95       	ret

000001a6 <AppADMIN_getCardPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardPAN(uint8_t* pu8_data)
{
     1a6:	1f 93       	push	r17
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nCard PAN: ") != TERMINAL_STATUS_ERROR_OK)
     1ae:	88 ea       	ldi	r24, 0xA8	; 168
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Terminal_Out>
     1b6:	81 30       	cpi	r24, 0x01	; 1
     1b8:	99 f5       	brne	.+102    	; 0x220 <AppADMIN_getCardPAN+0x7a>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     1ba:	ce 01       	movw	r24, r28
     1bc:	0e 94 76 00 	call	0xec	; 0xec <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     1c0:	81 30       	cpi	r24, 0x01	; 1
     1c2:	29 f0       	breq	.+10     	; 0x1ce <AppADMIN_getCardPAN+0x28>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     1c4:	11 f0       	breq	.+4      	; 0x1ca <AppADMIN_getCardPAN+0x24>
     1c6:	86 30       	cpi	r24, 0x06	; 6
     1c8:	69 f5       	brne	.+90     	; 0x224 <AppADMIN_getCardPAN+0x7e>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     1ca:	86 30       	cpi	r24, 0x06	; 6
     1cc:	b1 f3       	breq	.-20     	; 0x1ba <AppADMIN_getCardPAN+0x14>
		
		if(stringLength(pu8_data) != MAX_PAN_LENGTH+1)
     1ce:	ce 01       	movw	r24, r28
     1d0:	0e 94 16 0a 	call	0x142c	; 0x142c <stringLength>
     1d4:	8a 30       	cpi	r24, 0x0A	; 10
     1d6:	e9 f0       	breq	.+58     	; 0x212 <AppADMIN_getCardPAN+0x6c>
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)	
     1d8:	84 eb       	ldi	r24, 0xB4	; 180
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Terminal_Out>
     1e0:	81 30       	cpi	r24, 0x01	; 1
     1e2:	11 f5       	brne	.+68     	; 0x228 <AppADMIN_getCardPAN+0x82>
				return APP_STATUS_ERROR_NOK;
			EmptyString(pu8_data);
     1e4:	ce 01       	movw	r24, r28
     1e6:	0e 94 80 0a 	call	0x1500	; 0x1500 <EmptyString>
			continue;
     1ea:	e1 cf       	rjmp	.-62     	; 0x1ae <AppADMIN_getCardPAN+0x8>
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
     1ec:	fe 01       	movw	r30, r28
     1ee:	e1 0f       	add	r30, r17
     1f0:	f1 1d       	adc	r31, r1
     1f2:	80 81       	ld	r24, Z
     1f4:	80 53       	subi	r24, 0x30	; 48
     1f6:	8a 30       	cpi	r24, 0x0A	; 10
     1f8:	50 f0       	brcs	.+20     	; 0x20e <AppADMIN_getCardPAN+0x68>
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     1fa:	84 eb       	ldi	r24, 0xB4	; 180
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Terminal_Out>
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	99 f4       	brne	.+38     	; 0x22c <AppADMIN_getCardPAN+0x86>
					return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
     206:	ce 01       	movw	r24, r28
     208:	0e 94 80 0a 	call	0x1500	; 0x1500 <EmptyString>
				break;
     20c:	05 c0       	rjmp	.+10     	; 0x218 <AppADMIN_getCardPAN+0x72>
			EmptyString(pu8_data);
			continue;
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
     20e:	1f 5f       	subi	r17, 0xFF	; 255
     210:	01 c0       	rjmp	.+2      	; 0x214 <AppADMIN_getCardPAN+0x6e>
     212:	10 e0       	ldi	r17, 0x00	; 0
     214:	19 30       	cpi	r17, 0x09	; 9
     216:	50 f3       	brcs	.-44     	; 0x1ec <AppADMIN_getCardPAN+0x46>
					return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
				break;
			}
		}
		if (u8_index == MAX_PAN_LENGTH)
     218:	19 30       	cpi	r17, 0x09	; 9
     21a:	49 f6       	brne	.-110    	; 0x1ae <AppADMIN_getCardPAN+0x8>
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	07 c0       	rjmp	.+14     	; 0x22e <AppADMIN_getCardPAN+0x88>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nCard PAN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	05 c0       	rjmp	.+10     	; 0x22e <AppADMIN_getCardPAN+0x88>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	03 c0       	rjmp	.+6      	; 0x22e <AppADMIN_getCardPAN+0x88>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringLength(pu8_data) != MAX_PAN_LENGTH+1)
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)	
				return APP_STATUS_ERROR_NOK;
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	01 c0       	rjmp	.+2      	; 0x22e <AppADMIN_getCardPAN+0x88>
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     22c:	80 e0       	ldi	r24, 0x00	; 0
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	1f 91       	pop	r17
     234:	08 95       	ret

00000236 <AppADMIN_getCardPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input CARD PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the card pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCardPIN(uint8_t* pu8_data)
{
     236:	1f 93       	push	r17
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	Terminal_enablePasswordMode();
     23e:	0e 94 c3 06 	call	0xd86	; 0xd86 <Terminal_enablePasswordMode>
	do
	{
		if(Terminal_Out((uint8_t*)"\nCard PIN: ") != TERMINAL_STATUS_ERROR_OK)
     242:	87 ee       	ldi	r24, 0xE7	; 231
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Terminal_Out>
     24a:	81 30       	cpi	r24, 0x01	; 1
     24c:	a9 f5       	brne	.+106    	; 0x2b8 <AppADMIN_getCardPIN+0x82>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     24e:	ce 01       	movw	r24, r28
     250:	0e 94 76 00 	call	0xec	; 0xec <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     254:	81 30       	cpi	r24, 0x01	; 1
     256:	29 f0       	breq	.+10     	; 0x262 <AppADMIN_getCardPIN+0x2c>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     258:	11 f0       	breq	.+4      	; 0x25e <AppADMIN_getCardPIN+0x28>
     25a:	86 30       	cpi	r24, 0x06	; 6
     25c:	79 f5       	brne	.+94     	; 0x2bc <AppADMIN_getCardPIN+0x86>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     25e:	86 30       	cpi	r24, 0x06	; 6
     260:	b1 f3       	breq	.-20     	; 0x24e <AppADMIN_getCardPIN+0x18>
		
		
		if(stringLength(pu8_data) != MAX_PIN_LENGTH+1)
     262:	ce 01       	movw	r24, r28
     264:	0e 94 16 0a 	call	0x142c	; 0x142c <stringLength>
     268:	85 30       	cpi	r24, 0x05	; 5
     26a:	e9 f0       	breq	.+58     	; 0x2a6 <AppADMIN_getCardPIN+0x70>
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PIN, PIN should be 4 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     26c:	83 ef       	ldi	r24, 0xF3	; 243
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Terminal_Out>
     274:	81 30       	cpi	r24, 0x01	; 1
     276:	21 f5       	brne	.+72     	; 0x2c0 <AppADMIN_getCardPIN+0x8a>
			return APP_STATUS_ERROR_NOK;
			EmptyString(pu8_data);
     278:	ce 01       	movw	r24, r28
     27a:	0e 94 80 0a 	call	0x1500	; 0x1500 <EmptyString>
			continue;
     27e:	e1 cf       	rjmp	.-62     	; 0x242 <AppADMIN_getCardPIN+0xc>
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PIN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
     280:	fe 01       	movw	r30, r28
     282:	e1 0f       	add	r30, r17
     284:	f1 1d       	adc	r31, r1
     286:	80 81       	ld	r24, Z
     288:	80 53       	subi	r24, 0x30	; 48
     28a:	8a 30       	cpi	r24, 0x0A	; 10
     28c:	50 f0       	brcs	.+20     	; 0x2a2 <AppADMIN_getCardPIN+0x6c>
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PIN, PIN should be 4 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     28e:	83 ef       	ldi	r24, 0xF3	; 243
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Terminal_Out>
     296:	81 30       	cpi	r24, 0x01	; 1
     298:	a9 f4       	brne	.+42     	; 0x2c4 <AppADMIN_getCardPIN+0x8e>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
     29a:	ce 01       	movw	r24, r28
     29c:	0e 94 80 0a 	call	0x1500	; 0x1500 <EmptyString>
				break;
     2a0:	05 c0       	rjmp	.+10     	; 0x2ac <AppADMIN_getCardPIN+0x76>
			EmptyString(pu8_data);
			continue;
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PIN_LENGTH; u8_index++)
     2a2:	1f 5f       	subi	r17, 0xFF	; 255
     2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <AppADMIN_getCardPIN+0x72>
     2a6:	10 e0       	ldi	r17, 0x00	; 0
     2a8:	14 30       	cpi	r17, 0x04	; 4
     2aa:	50 f3       	brcs	.-44     	; 0x280 <AppADMIN_getCardPIN+0x4a>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
				break;
			}
		}
		if (u8_index == MAX_PIN_LENGTH)
     2ac:	14 30       	cpi	r17, 0x04	; 4
     2ae:	49 f6       	brne	.-110    	; 0x242 <AppADMIN_getCardPIN+0xc>
		{
			break;
		}
	} while (1);
	Terminal_disablePasswordMode();
     2b0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Terminal_disablePasswordMode>
	return APP_STATUS_ERROR_OK;
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	07 c0       	rjmp	.+14     	; 0x2c6 <AppADMIN_getCardPIN+0x90>
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"\nCard PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <AppADMIN_getCardPIN+0x90>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	03 c0       	rjmp	.+6      	; 0x2c6 <AppADMIN_getCardPIN+0x90>
		
		
		if(stringLength(pu8_data) != MAX_PIN_LENGTH+1)
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PIN, PIN should be 4 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <AppADMIN_getCardPIN+0x90>
		for(u8_index=0; u8_index<MAX_PIN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PIN, PIN should be 4 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     2c4:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_ERROR_OK;
}
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	1f 91       	pop	r17
     2cc:	08 95       	ret

000002ce <AppADMIN_saveCardData>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the EEPROM
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveCardData(strCardData_t* pstr_CardData)
{
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	ec 01       	movw	r28, r24
	if(Eeprom_24_writePacket(CARD_NAME_PAGE_ADDR, (pstr_CardData->au8_cardHolderName), MAX_NAME_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     2d4:	4a e0       	ldi	r20, 0x0A	; 10
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	bc 01       	movw	r22, r24
     2da:	80 e2       	ldi	r24, 0x20	; 32
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 a4 04 	call	0x948	; 0x948 <Eeprom_24_writePacket>
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	e9 f5       	brne	.+122    	; 0x360 <AppADMIN_saveCardData+0x92>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     2e6:	2a e0       	ldi	r18, 0x0A	; 10
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Delay_ms>
	if(Eeprom_24_writePacket(CARD_PAN_PAGE_ADDR, (pstr_CardData->au8_primaryAccountNumber), MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     2fa:	4a e0       	ldi	r20, 0x0A	; 10
     2fc:	50 e0       	ldi	r21, 0x00	; 0
     2fe:	be 01       	movw	r22, r28
     300:	66 5f       	subi	r22, 0xF6	; 246
     302:	7f 4f       	sbci	r23, 0xFF	; 255
     304:	80 e3       	ldi	r24, 0x30	; 48
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 a4 04 	call	0x948	; 0x948 <Eeprom_24_writePacket>
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	51 f5       	brne	.+84     	; 0x364 <AppADMIN_saveCardData+0x96>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     310:	2a e0       	ldi	r18, 0x0A	; 10
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Delay_ms>
	if(Eeprom_24_writePacket(CARD_PIN_PAGE_ADDR, (pstr_CardData->au8_pinNum), MAX_PIN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     324:	be 01       	movw	r22, r28
     326:	6c 5e       	subi	r22, 0xEC	; 236
     328:	7f 4f       	sbci	r23, 0xFF	; 255
     32a:	45 e0       	ldi	r20, 0x05	; 5
     32c:	50 e0       	ldi	r21, 0x00	; 0
     32e:	80 e4       	ldi	r24, 0x40	; 64
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 a4 04 	call	0x948	; 0x948 <Eeprom_24_writePacket>
     336:	81 30       	cpi	r24, 0x01	; 1
     338:	b9 f4       	brne	.+46     	; 0x368 <AppADMIN_saveCardData+0x9a>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     33a:	2a e0       	ldi	r18, 0x0A	; 10
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Delay_ms>
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, CARD_INITIALIZED) != EEPROM_24_STATUS_ERROR_OK)
     34e:	6a ea       	ldi	r22, 0xAA	; 170
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 b5 03 	call	0x76a	; 0x76a <Eeprom_24_writeByte>
     358:	81 30       	cpi	r24, 0x01	; 1
     35a:	41 f0       	breq	.+16     	; 0x36c <AppADMIN_saveCardData+0x9e>
		return APP_STATUS_ERROR_NOK;
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	07 c0       	rjmp	.+14     	; 0x36e <AppADMIN_saveCardData+0xa0>
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveCardData(strCardData_t* pstr_CardData)
{
	if(Eeprom_24_writePacket(CARD_NAME_PAGE_ADDR, (pstr_CardData->au8_cardHolderName), MAX_NAME_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	05 c0       	rjmp	.+10     	; 0x36e <AppADMIN_saveCardData+0xa0>
	Delay_ms(10);
	if(Eeprom_24_writePacket(CARD_PAN_PAGE_ADDR, (pstr_CardData->au8_primaryAccountNumber), MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	03 c0       	rjmp	.+6      	; 0x36e <AppADMIN_saveCardData+0xa0>
	Delay_ms(10);
	if(Eeprom_24_writePacket(CARD_PIN_PAGE_ADDR, (pstr_CardData->au8_pinNum), MAX_PIN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	01 c0       	rjmp	.+2      	; 0x36e <AppADMIN_saveCardData+0xa0>
	Delay_ms(10);
	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, CARD_INITIALIZED) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     36c:	81 e0       	ldi	r24, 0x01	; 1
}
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <AppUSER_sendCardData>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to send the Card's Data to the ATM.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_sendCardData(strCardData_t* pstr_CardData)
{
     374:	ef 92       	push	r14
     376:	ff 92       	push	r15
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
     384:	6e 97       	sbiw	r28, 0x1e	; 30
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	f8 94       	cli
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	cd bf       	out	0x3d, r28	; 61
     390:	7c 01       	movw	r14, r24
	if(Terminal_Out((uint8_t*)"Data is being sent to the ATM...\r\n") != TERMINAL_STATUS_ERROR_OK)
     392:	86 e2       	ldi	r24, 0x26	; 38
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Terminal_Out>
     39a:	81 30       	cpi	r24, 0x01	; 1
     39c:	f1 f5       	brne	.+124    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		return APP_STATUS_ERROR_NOK;
		
	uint8_t au8_DataFrame[30] = {0};
     39e:	8e 01       	movw	r16, r28
     3a0:	0f 5f       	subi	r16, 0xFF	; 255
     3a2:	1f 4f       	sbci	r17, 0xFF	; 255
     3a4:	8e e1       	ldi	r24, 0x1E	; 30
     3a6:	f8 01       	movw	r30, r16
     3a8:	11 92       	st	Z+, r1
     3aa:	8a 95       	dec	r24
     3ac:	e9 f7       	brne	.-6      	; 0x3a8 <AppUSER_sendCardData+0x34>
	stringConcatenate(au8_DataFrame, (uint8_t*)"#");
     3ae:	69 e4       	ldi	r22, 0x49	; 73
     3b0:	71 e0       	ldi	r23, 0x01	; 1
     3b2:	c8 01       	movw	r24, r16
     3b4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_cardHolderName);
     3b8:	b7 01       	movw	r22, r14
     3ba:	c8 01       	movw	r24, r16
     3bc:	0e 94 55 0a 	call	0x14aa	; 0x14aa <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"-");
     3c0:	6c e4       	ldi	r22, 0x4C	; 76
     3c2:	71 e0       	ldi	r23, 0x01	; 1
     3c4:	c8 01       	movw	r24, r16
     3c6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_primaryAccountNumber);
     3ca:	b7 01       	movw	r22, r14
     3cc:	66 5f       	subi	r22, 0xF6	; 246
     3ce:	7f 4f       	sbci	r23, 0xFF	; 255
     3d0:	c8 01       	movw	r24, r16
     3d2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"-");
     3d6:	6c e4       	ldi	r22, 0x4C	; 76
     3d8:	71 e0       	ldi	r23, 0x01	; 1
     3da:	c8 01       	movw	r24, r16
     3dc:	0e 94 55 0a 	call	0x14aa	; 0x14aa <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_pinNum);
     3e0:	b7 01       	movw	r22, r14
     3e2:	6c 5e       	subi	r22, 0xEC	; 236
     3e4:	7f 4f       	sbci	r23, 0xFF	; 255
     3e6:	c8 01       	movw	r24, r16
     3e8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"#-");
     3ec:	6b e4       	ldi	r22, 0x4B	; 75
     3ee:	71 e0       	ldi	r23, 0x01	; 1
     3f0:	c8 01       	movw	r24, r16
     3f2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <stringConcatenate>
	
	SPI_SS_ENABLE();
     3f6:	88 b3       	in	r24, 0x18	; 24
     3f8:	8f 7e       	andi	r24, 0xEF	; 239
     3fa:	88 bb       	out	0x18, r24	; 24
	if(Spi_MasterSendPacket(au8_DataFrame, stringLength(au8_DataFrame)) != SPI_STATUS_ERROR_OK)
     3fc:	c8 01       	movw	r24, r16
     3fe:	0e 94 16 0a 	call	0x142c	; 0x142c <stringLength>
     402:	68 2f       	mov	r22, r24
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	c8 01       	movw	r24, r16
     408:	0e 94 c9 09 	call	0x1392	; 0x1392 <Spi_MasterSendPacket>
     40c:	81 30       	cpi	r24, 0x01	; 1
     40e:	39 f4       	brne	.+14     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		return APP_STATUS_ERROR_NOK;
	SPI_SS_DISABLE();
     410:	88 b3       	in	r24, 0x18	; 24
     412:	80 61       	ori	r24, 0x10	; 16
     414:	88 bb       	out	0x18, r24	; 24
	
	return APP_STATUS_ERROR_OK;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	03 c0       	rjmp	.+6      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
* Description: Function to send the Card's Data to the ATM.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_sendCardData(strCardData_t* pstr_CardData)
{
	if(Terminal_Out((uint8_t*)"Data is being sent to the ATM...\r\n") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	01 c0       	rjmp	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_pinNum);
	stringConcatenate(au8_DataFrame, (uint8_t*)"#-");
	
	SPI_SS_ENABLE();
	if(Spi_MasterSendPacket(au8_DataFrame, stringLength(au8_DataFrame)) != SPI_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     41e:	80 e0       	ldi	r24, 0x00	; 0
	SPI_SS_DISABLE();
	
	return APP_STATUS_ERROR_OK;
}
     420:	6e 96       	adiw	r28, 0x1e	; 30
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	f8 94       	cli
     426:	de bf       	out	0x3e, r29	; 62
     428:	0f be       	out	0x3f, r0	; 63
     42a:	cd bf       	out	0x3d, r28	; 61
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	ff 90       	pop	r15
     436:	ef 90       	pop	r14
     438:	08 95       	ret

0000043a <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	a3 97       	sbiw	r28, 0x23	; 35
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
     44e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     452:	84 30       	cpi	r24, 0x04	; 4
     454:	09 f0       	breq	.+2      	; 0x458 <App_update+0x1e>
     456:	ae c0       	rjmp	.+348    	; 0x5b4 <App_update+0x17a>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
     458:	fe 01       	movw	r30, r28
     45a:	31 96       	adiw	r30, 0x01	; 1
     45c:	8a e0       	ldi	r24, 0x0A	; 10
     45e:	df 01       	movw	r26, r30
     460:	1d 92       	st	X+, r1
     462:	8a 95       	dec	r24
     464:	e9 f7       	brne	.-6      	; 0x460 <App_update+0x26>
	if(gu8_CardMode == CARD_MODE_ADMIN)
     466:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <gu8_CardMode>
     46a:	81 11       	cpse	r24, r1
     46c:	4e c0       	rjmp	.+156    	; 0x50a <App_update+0xd0>
	{ /**************** PROGRAMMING MODE ****************/
			if(Terminal_Out((uint8_t*)"Programming Mode\r\nEnter the Following Data\r\n") != TERMINAL_STATUS_ERROR_OK)
     46e:	8e e4       	ldi	r24, 0x4E	; 78
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Terminal_Out>
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	09 f0       	breq	.+2      	; 0x47c <App_update+0x42>
     47a:	45 c0       	rjmp	.+138    	; 0x506 <App_update+0xcc>
				return APP_STATUS_ERROR_NOK;
			uint8_t au8_tempCardHolderName[10]={0};
     47c:	2a e0       	ldi	r18, 0x0A	; 10
     47e:	ce 01       	movw	r24, r28
     480:	45 96       	adiw	r24, 0x15	; 21
     482:	fc 01       	movw	r30, r24
     484:	32 2f       	mov	r19, r18
     486:	11 92       	st	Z+, r1
     488:	3a 95       	dec	r19
     48a:	e9 f7       	brne	.-6      	; 0x486 <App_update+0x4c>
			uint8_t au8_tempPAN[10]={0};
     48c:	fe 01       	movw	r30, r28
     48e:	3b 96       	adiw	r30, 0x0b	; 11
     490:	df 01       	movw	r26, r30
     492:	1d 92       	st	X+, r1
     494:	2a 95       	dec	r18
     496:	e9 f7       	brne	.-6      	; 0x492 <App_update+0x58>
			uint8_t au8_tempPinNum[5]={0};
     498:	74 96       	adiw	r30, 0x14	; 20
     49a:	25 e0       	ldi	r18, 0x05	; 5
     49c:	df 01       	movw	r26, r30
     49e:	1d 92       	st	X+, r1
     4a0:	2a 95       	dec	r18
     4a2:	e9 f7       	brne	.-6      	; 0x49e <App_update+0x64>
		
			/* Get the Card Holder Name from the ADMIN Terminal */
			if(AppADMIN_getCardName(au8_tempCardHolderName) != APP_STATUS_ERROR_OK)
     4a4:	0e 94 a7 00 	call	0x14e	; 0x14e <AppADMIN_getCardName>
     4a8:	81 30       	cpi	r24, 0x01	; 1
     4aa:	69 f5       	brne	.+90     	; 0x506 <App_update+0xcc>
				return APP_STATUS_ERROR_NOK;
			/* Get the Card Primary Account Number from the ADMIN Terminal */
			if(AppADMIN_getCardPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     4ac:	ce 01       	movw	r24, r28
     4ae:	0b 96       	adiw	r24, 0x0b	; 11
     4b0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <AppADMIN_getCardPAN>
     4b4:	81 30       	cpi	r24, 0x01	; 1
     4b6:	39 f5       	brne	.+78     	; 0x506 <App_update+0xcc>
			return APP_STATUS_ERROR_NOK;
		
			if(AppADMIN_getCardPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
     4b8:	ce 01       	movw	r24, r28
     4ba:	4f 96       	adiw	r24, 0x1f	; 31
     4bc:	0e 94 1b 01 	call	0x236	; 0x236 <AppADMIN_getCardPIN>
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	09 f5       	brne	.+66     	; 0x506 <App_update+0xcc>
				return APP_STATUS_ERROR_NOK;
		
			stringCopy(au8_tempCardHolderName, gstr_userCardData.au8_cardHolderName);
     4c4:	6a e2       	ldi	r22, 0x2A	; 42
     4c6:	72 e0       	ldi	r23, 0x02	; 2
     4c8:	ce 01       	movw	r24, r28
     4ca:	45 96       	adiw	r24, 0x15	; 21
     4cc:	0e 94 8c 0a 	call	0x1518	; 0x1518 <stringCopy>
			stringCopy(au8_tempPAN, gstr_userCardData.au8_primaryAccountNumber);
     4d0:	64 e3       	ldi	r22, 0x34	; 52
     4d2:	72 e0       	ldi	r23, 0x02	; 2
     4d4:	ce 01       	movw	r24, r28
     4d6:	0b 96       	adiw	r24, 0x0b	; 11
     4d8:	0e 94 8c 0a 	call	0x1518	; 0x1518 <stringCopy>
			stringCopy(au8_tempPinNum, gstr_userCardData.au8_pinNum);
     4dc:	6e e3       	ldi	r22, 0x3E	; 62
     4de:	72 e0       	ldi	r23, 0x02	; 2
     4e0:	ce 01       	movw	r24, r28
     4e2:	4f 96       	adiw	r24, 0x1f	; 31
     4e4:	0e 94 8c 0a 	call	0x1518	; 0x1518 <stringCopy>
		
			if(AppADMIN_saveCardData(&gstr_userCardData) != APP_STATUS_ERROR_OK)
     4e8:	8a e2       	ldi	r24, 0x2A	; 42
     4ea:	92 e0       	ldi	r25, 0x02	; 2
     4ec:	0e 94 67 01 	call	0x2ce	; 0x2ce <AppADMIN_saveCardData>
     4f0:	81 30       	cpi	r24, 0x01	; 1
     4f2:	49 f4       	brne	.+18     	; 0x506 <App_update+0xcc>
				return APP_STATUS_ERROR_NOK;
		
			gu8_CardMode = CARD_MODE_USER;
     4f4:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <gu8_CardMode>
			if(Terminal_Out((uint8_t*)"\nUSER Mode\r\n") != TERMINAL_STATUS_ERROR_OK)
     4f8:	8b e7       	ldi	r24, 0x7B	; 123
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Terminal_Out>
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	09 f4       	brne	.+2      	; 0x506 <App_update+0xcc>
     504:	4b c0       	rjmp	.+150    	; 0x59c <App_update+0x162>
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
	if(gu8_CardMode == CARD_MODE_ADMIN)
	{ /**************** PROGRAMMING MODE ****************/
			if(Terminal_Out((uint8_t*)"Programming Mode\r\nEnter the Following Data\r\n") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	5c c0       	rjmp	.+184    	; 0x5c2 <App_update+0x188>
				return APP_STATUS_ERROR_NOK;
	/****************************************************************/
	}else
	{/************* User Mode **************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
     50a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <gu8_ADMIN_Request>
     50e:	81 30       	cpi	r24, 0x01	; 1
     510:	31 f4       	brne	.+12     	; 0x51e <App_update+0xe4>
     512:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <gu8_USER_Mode_State>
     516:	81 11       	cpse	r24, r1
     518:	02 c0       	rjmp	.+4      	; 0x51e <App_update+0xe4>
			{
				gu8_CardMode = CARD_MODE_ADMIN;
     51a:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <gu8_CardMode>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
     51e:	ce 01       	movw	r24, r28
     520:	01 96       	adiw	r24, 0x01	; 1
     522:	0e 94 76 00 	call	0xec	; 0xec <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     526:	81 30       	cpi	r24, 0x01	; 1
     528:	c9 f4       	brne	.+50     	; 0x55c <App_update+0x122>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
     52a:	63 e2       	ldi	r22, 0x23	; 35
     52c:	72 e0       	ldi	r23, 0x02	; 2
     52e:	ce 01       	movw	r24, r28
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	0e 94 22 0a 	call	0x1444	; 0x1444 <stringCompare>
     536:	81 30       	cpi	r24, 0x01	; 1
     538:	a9 f4       	brne	.+42     	; 0x564 <App_update+0x12a>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
     53a:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <gu8_USER_Mode_State>
     53e:	81 30       	cpi	r24, 0x01	; 1
     540:	49 f4       	brne	.+18     	; 0x554 <App_update+0x11a>
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
     542:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <gu8_ADMIN_Request>
						if(Terminal_Out((uint8_t*)"CARD is Busy Now, Programming Mode will start after current Process\r\n") != TERMINAL_STATUS_ERROR_OK)
     546:	88 e8       	ldi	r24, 0x88	; 136
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Terminal_Out>
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	99 f5       	brne	.+102    	; 0x5b8 <App_update+0x17e>
     552:	08 c0       	rjmp	.+16     	; 0x564 <App_update+0x12a>
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The Card is not used by ATM */
					{
						gu8_CardMode = CARD_MODE_ADMIN;
     554:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <gu8_CardMode>
						return APP_STATUS_ERROR_OK;
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	33 c0       	rjmp	.+102    	; 0x5c2 <App_update+0x188>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     55c:	81 30       	cpi	r24, 0x01	; 1
     55e:	11 f0       	breq	.+4      	; 0x564 <App_update+0x12a>
     560:	86 30       	cpi	r24, 0x06	; 6
     562:	61 f5       	brne	.+88     	; 0x5bc <App_update+0x182>
			{
				cgu8_ATM_Req = ATM_NOT_REQUESTED;
			}
		#endif
			/***************************************************/
			if (cgu8_ATM_Req == ATM_REQUESTED)
     564:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <cgu8_ATM_Req>
     568:	81 30       	cpi	r24, 0x01	; 1
     56a:	c1 f4       	brne	.+48     	; 0x59c <App_update+0x162>
			{
				Terminal_Out((uint8_t*)"Sending\r\n");
     56c:	8e ec       	ldi	r24, 0xCE	; 206
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Terminal_Out>
				AppUSER_sendCardData(&gstr_userCardData);
     574:	8a e2       	ldi	r24, 0x2A	; 42
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	0e 94 ba 01 	call	0x374	; 0x374 <AppUSER_sendCardData>
				
				Delay_ms(1000);
     57c:	28 ee       	ldi	r18, 0xE8	; 232
     57e:	33 e0       	ldi	r19, 0x03	; 3
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Delay_ms>
				
				if(Terminal_Out((uint8_t*)"Data Successfully Sent\r\n") != TERMINAL_STATUS_ERROR_OK)
     590:	88 ed       	ldi	r24, 0xD8	; 216
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Terminal_Out>
     598:	81 30       	cpi	r24, 0x01	; 1
     59a:	91 f4       	brne	.+36     	; 0x5c0 <App_update+0x186>
			}
			
	/****************************************************************/
	}
	
	Delay_ms(100);
     59c:	24 e6       	ldi	r18, 0x64	; 100
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	40 e0       	ldi	r20, 0x00	; 0
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Delay_ms>
	return APP_STATUS_ERROR_OK;
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	07 c0       	rjmp	.+14     	; 0x5c2 <App_update+0x188>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
     5b4:	85 e0       	ldi	r24, 0x05	; 5
     5b6:	05 c0       	rjmp	.+10     	; 0x5c2 <App_update+0x188>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"CARD is Busy Now, Programming Mode will start after current Process\r\n") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	03 c0       	rjmp	.+6      	; 0x5c2 <App_update+0x188>
						gu8_CardMode = CARD_MODE_ADMIN;
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	01 c0       	rjmp	.+2      	; 0x5c2 <App_update+0x188>
				AppUSER_sendCardData(&gstr_userCardData);
				
				Delay_ms(1000);
				
				if(Terminal_Out((uint8_t*)"Data Successfully Sent\r\n") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     5c0:	80 e0       	ldi	r24, 0x00	; 0
	/****************************************************************/
	}
	
	Delay_ms(100);
	return APP_STATUS_ERROR_OK;
}
     5c2:	a3 96       	adiw	r28, 0x23	; 35
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	cd bf       	out	0x3d, r28	; 61
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <AppMemory_getCardData>:
* Parameters (out): pstr_CardData - Structure of data to hold the data saved in EEPROM.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the Card's data from eeprom.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppMemory_getCardData(strCardData_t* pstr_CardData)
{
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	ec 01       	movw	r28, r24
	if(Eeprom_24_readPacket(CARD_NAME_PAGE_ADDR, (pstr_CardData->au8_cardHolderName),MAX_NAME_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     5da:	4a e0       	ldi	r20, 0x0A	; 10
     5dc:	50 e0       	ldi	r21, 0x00	; 0
     5de:	bc 01       	movw	r22, r24
     5e0:	80 e2       	ldi	r24, 0x20	; 32
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 7d 05 	call	0xafa	; 0xafa <Eeprom_24_readPacket>
     5e8:	81 30       	cpi	r24, 0x01	; 1
     5ea:	61 f5       	brne	.+88     	; 0x644 <AppMemory_getCardData+0x70>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     5ec:	2a e0       	ldi	r18, 0x0A	; 10
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	40 e0       	ldi	r20, 0x00	; 0
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Delay_ms>
	if(Eeprom_24_readPacket(CARD_PAN_PAGE_ADDR, (pstr_CardData->au8_primaryAccountNumber),MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     600:	4a e0       	ldi	r20, 0x0A	; 10
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	be 01       	movw	r22, r28
     606:	66 5f       	subi	r22, 0xF6	; 246
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	80 e3       	ldi	r24, 0x30	; 48
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 7d 05 	call	0xafa	; 0xafa <Eeprom_24_readPacket>
     612:	81 30       	cpi	r24, 0x01	; 1
     614:	c9 f4       	brne	.+50     	; 0x648 <AppMemory_getCardData+0x74>
	return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     616:	2a e0       	ldi	r18, 0x0A	; 10
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	40 e0       	ldi	r20, 0x00	; 0
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Delay_ms>
	if(Eeprom_24_readPacket(CARD_PIN_PAGE_ADDR, (pstr_CardData->au8_pinNum),MAX_PIN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     62a:	be 01       	movw	r22, r28
     62c:	6c 5e       	subi	r22, 0xEC	; 236
     62e:	7f 4f       	sbci	r23, 0xFF	; 255
     630:	45 e0       	ldi	r20, 0x05	; 5
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	80 e4       	ldi	r24, 0x40	; 64
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 7d 05 	call	0xafa	; 0xafa <Eeprom_24_readPacket>
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	31 f0       	breq	.+12     	; 0x64c <AppMemory_getCardData+0x78>
	return APP_STATUS_ERROR_NOK;
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	05 c0       	rjmp	.+10     	; 0x64e <AppMemory_getCardData+0x7a>
* Description: Function to get the Card's data from eeprom.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppMemory_getCardData(strCardData_t* pstr_CardData)
{
	if(Eeprom_24_readPacket(CARD_NAME_PAGE_ADDR, (pstr_CardData->au8_cardHolderName),MAX_NAME_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	03 c0       	rjmp	.+6      	; 0x64e <AppMemory_getCardData+0x7a>
	Delay_ms(10);
	if(Eeprom_24_readPacket(CARD_PAN_PAGE_ADDR, (pstr_CardData->au8_primaryAccountNumber),MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	01 c0       	rjmp	.+2      	; 0x64e <AppMemory_getCardData+0x7a>
	Delay_ms(10);
	if(Eeprom_24_readPacket(CARD_PIN_PAGE_ADDR, (pstr_CardData->au8_pinNum),MAX_PIN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <App_init>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_init(void)
{
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	1f 92       	push	r1
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
     65e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     662:	84 30       	cpi	r24, 0x04	; 4
     664:	09 f4       	brne	.+2      	; 0x668 <App_init+0x14>
     666:	41 c0       	rjmp	.+130    	; 0x6ea <App_init+0x96>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
     668:	0e 94 a6 03 	call	0x74c	; 0x74c <Eeprom_24_init>
     66c:	81 30       	cpi	r24, 0x01	; 1
     66e:	a1 f5       	brne	.+104    	; 0x6d8 <App_init+0x84>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
     670:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Terminal_init>
     674:	81 30       	cpi	r24, 0x01	; 1
     676:	91 f5       	brne	.+100    	; 0x6dc <App_init+0x88>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
     678:	0e 94 88 09 	call	0x1310	; 0x1310 <Spi_init>
     67c:	81 30       	cpi	r24, 0x01	; 1
     67e:	81 f5       	brne	.+96     	; 0x6e0 <App_init+0x8c>
		return APP_STATUS_ERROR_NOK;
	DIO_PORTD_DIR &= ~(1<<2);
     680:	81 b3       	in	r24, 0x11	; 17
     682:	8b 7f       	andi	r24, 0xFB	; 251
     684:	81 bb       	out	0x11, r24	; 17
	DIO_PORTD_DATA |= 1<<2;
     686:	82 b3       	in	r24, 0x12	; 18
     688:	84 60       	ori	r24, 0x04	; 4
     68a:	82 bb       	out	0x12, r24	; 18
	/* Only for Testing */
// 	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Terminal_Out((uint8_t*)"CARD Terminal Window\r\n") != TERMINAL_STATUS_ERROR_OK)
     68c:	81 ef       	ldi	r24, 0xF1	; 241
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Terminal_Out>
     694:	81 30       	cpi	r24, 0x01	; 1
     696:	31 f5       	brne	.+76     	; 0x6e4 <App_init+0x90>
		return APP_STATUS_ERROR_NOK;
	uint8_t u8_initData = 0;
     698:	19 82       	std	Y+1, r1	; 0x01
	/* Check if the card was previously registered and has its data in the eeprom */
	if(Eeprom_24_readByte(CARD_INIT_ADDRESS, &u8_initData) != EEPROM_24_STATUS_ERROR_OK)
     69a:	be 01       	movw	r22, r28
     69c:	6f 5f       	subi	r22, 0xFF	; 255
     69e:	7f 4f       	sbci	r23, 0xFF	; 255
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Eeprom_24_readByte>
     6a8:	81 30       	cpi	r24, 0x01	; 1
     6aa:	f1 f4       	brne	.+60     	; 0x6e8 <App_init+0x94>
	{
		return APP_STATUS_ERROR_NOK;
	}
		
	if(u8_initData != CARD_INITIALIZED)
     6ac:	89 81       	ldd	r24, Y+1	; 0x01
     6ae:	8a 3a       	cpi	r24, 0xAA	; 170
     6b0:	19 f0       	breq	.+6      	; 0x6b8 <App_init+0x64>
	{
		gu8_CardMode = CARD_MODE_ADMIN;
     6b2:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <gu8_CardMode>
     6b6:	0b c0       	rjmp	.+22     	; 0x6ce <App_init+0x7a>
	}else
	{
		gu8_CardMode = CARD_MODE_USER;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <gu8_CardMode>
		Terminal_Out((uint8_t*)"You are now in User Mode\r\n");
     6be:	88 e0       	ldi	r24, 0x08	; 8
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Terminal_Out>
		AppMemory_getCardData(&gstr_userCardData);
     6c6:	8a e2       	ldi	r24, 0x2A	; 42
     6c8:	92 e0       	ldi	r25, 0x02	; 2
     6ca:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <AppMemory_getCardData>
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     6ce:	84 e0       	ldi	r24, 0x04	; 4
     6d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return APP_STATUS_ERROR_OK;
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	09 c0       	rjmp	.+18     	; 0x6ea <App_init+0x96>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	07 c0       	rjmp	.+14     	; 0x6ea <App_init+0x96>
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	05 c0       	rjmp	.+10     	; 0x6ea <App_init+0x96>
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	03 c0       	rjmp	.+6      	; 0x6ea <App_init+0x96>
// 	if(Eeprom_24_writeByte(CARD_INIT_ADDRESS, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Terminal_Out((uint8_t*)"CARD Terminal Window\r\n") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <App_init+0x96>
	uint8_t u8_initData = 0;
	/* Check if the card was previously registered and has its data in the eeprom */
	if(Eeprom_24_readByte(CARD_INIT_ADDRESS, &u8_initData) != EEPROM_24_STATUS_ERROR_OK)
	{
		return APP_STATUS_ERROR_NOK;
     6e8:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     6ea:	0f 90       	pop	r0
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
     6f2:	0e 94 2a 03 	call	0x654	; 0x654 <App_init>
     6f6:	81 30       	cpi	r24, 0x01	; 1
     6f8:	c1 f4       	brne	.+48     	; 0x72a <App_start+0x38>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(1000);
     6fa:	28 ee       	ldi	r18, 0xE8	; 232
     6fc:	33 e0       	ldi	r19, 0x03	; 3
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Delay_ms>
#if REQUEST_MODE == INTERRUPT_REQUEST
 	Ext_INT0_init(EXT_INT0_EDGE_FALL_RISE);
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	0e 94 67 07 	call	0xece	; 0xece <Ext_INT0_init>
 	INT0_setCallBack(ATM_REQ_ISR);
     714:	89 e4       	ldi	r24, 0x49	; 73
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 6e 07 	call	0xedc	; 0xedc <INT0_setCallBack>
#elif REQUEST_MODE == POLLING_REQUEST
	DIO_PORTD_DIR &= ~(1<<2);
	DIO_PORTD_DATA |= 1<<2;
#endif
	EnableGlbl_Interrupt();
     71c:	8f b7       	in	r24, 0x3f	; 63
     71e:	80 68       	ori	r24, 0x80	; 128
     720:	8f bf       	out	0x3f, r24	; 63
	
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
     722:	0e 94 1d 02 	call	0x43a	; 0x43a <App_update>
     726:	81 30       	cpi	r24, 0x01	; 1
     728:	e1 f3       	breq	.-8      	; 0x722 <App_start+0x30>
			return APP_STATUS_ERROR_NOK;
	}
}
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	08 95       	ret

0000072e <EEPROM_getAddresses>:
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
#if EEPROM_24_MODEL	== AT24C16B
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
     72e:	9a 01       	movw	r18, r20
     730:	22 27       	eor	r18, r18
     732:	37 70       	andi	r19, 0x07	; 7
     734:	22 0f       	add	r18, r18
     736:	23 2f       	mov	r18, r19
     738:	22 1f       	adc	r18, r18
     73a:	33 0b       	sbc	r19, r19
     73c:	31 95       	neg	r19
     73e:	20 65       	ori	r18, 0x50	; 80
     740:	fc 01       	movw	r30, r24
     742:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
     744:	fb 01       	movw	r30, r22
     746:	40 83       	st	Z, r20
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS;
	pu8_wordAddress[0] = (uint8_t)(u16_location >> 8);
	pu8_wordAddress[1] = (uint8_t)u16_location;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	08 95       	ret

0000074c <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
     74c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_eepromModuleState>
     750:	83 30       	cpi	r24, 0x03	; 3
     752:	51 f0       	breq	.+20     	; 0x768 <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
     754:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
     758:	85 30       	cpi	r24, 0x05	; 5
     75a:	29 f0       	breq	.+10     	; 0x766 <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
     75c:	83 e0       	ldi	r24, 0x03	; 3
     75e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
     766:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
     768:	08 95       	ret

0000076a <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	00 d0       	rcall	.+0      	; 0x772 <Eeprom_24_writeByte+0x8>
     772:	1f 92       	push	r1
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	ac 01       	movw	r20, r24
     77a:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     77c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     780:	93 30       	cpi	r25, 0x03	; 3
     782:	11 f5       	brne	.+68     	; 0x7c8 <Eeprom_24_writeByte+0x5e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     784:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
     786:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     788:	be 01       	movw	r22, r28
     78a:	6e 5f       	subi	r22, 0xFE	; 254
     78c:	7f 4f       	sbci	r23, 0xFF	; 255
     78e:	ce 01       	movw	r24, r28
     790:	01 96       	adiw	r24, 0x01	; 1
     792:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_getAddresses>
     796:	18 2f       	mov	r17, r24
     798:	81 30       	cpi	r24, 0x01	; 1
     79a:	c1 f4       	brne	.+48     	; 0x7cc <Eeprom_24_writeByte+0x62>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
     79c:	21 e0       	ldi	r18, 0x01	; 1
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	ae 01       	movw	r20, r28
     7a2:	4d 5f       	subi	r20, 0xFD	; 253
     7a4:	5f 4f       	sbci	r21, 0xFF	; 255
     7a6:	6a 81       	ldd	r22, Y+2	; 0x02
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	0e 94 22 09 	call	0x1244	; 0x1244 <I2C_MasterSendToLocation>
     7ae:	81 30       	cpi	r24, 0x01	; 1
     7b0:	79 f4       	brne	.+30     	; 0x7d0 <Eeprom_24_writeByte+0x66>
 
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
     7b2:	2f e0       	ldi	r18, 0x0F	; 15
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
     7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <Eeprom_24_writeByte+0x68>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     7c8:	12 e0       	ldi	r17, 0x02	; 2
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <Eeprom_24_writeByte+0x68>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     7cc:	10 e0       	ldi	r17, 0x00	; 0
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <Eeprom_24_writeByte+0x68>
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     7d0:	10 e0       	ldi	r17, 0x00	; 0
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
	return EEPROM_24_STATUS_ERROR_OK;
}
     7d2:	81 2f       	mov	r24, r17
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	08 95       	ret

000007e2 <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <Eeprom_24_readByte+0xc>
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     7f4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     7f8:	93 30       	cpi	r25, 0x03	; 3
     7fa:	21 f5       	brne	.+72     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     7fc:	61 15       	cp	r22, r1
     7fe:	71 05       	cpc	r23, r1
     800:	19 f1       	breq	.+70     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     802:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     804:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
     806:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     808:	be 01       	movw	r22, r28
     80a:	6e 5f       	subi	r22, 0xFE	; 254
     80c:	7f 4f       	sbci	r23, 0xFF	; 255
     80e:	ce 01       	movw	r24, r28
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_getAddresses>
     816:	18 2f       	mov	r17, r24
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	c1 f4       	brne	.+48     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	a7 01       	movw	r20, r14
     822:	6a 81       	ldd	r22, Y+2	; 0x02
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	0e 94 71 09 	call	0x12e2	; 0x12e2 <I2C_MasterReceiveFromLocation>
     82a:	81 30       	cpi	r24, 0x01	; 1
     82c:	89 f4       	brne	.+34     	; 0x850 <__DATA_REGION_LENGTH__+0x50>

	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
	
#endif
	Delay_ms(5);
     82e:	25 e0       	ldi	r18, 0x05	; 5
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	40 e0       	ldi	r20, 0x00	; 0
     834:	50 e0       	ldi	r21, 0x00	; 0
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
     842:	07 c0       	rjmp	.+14     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     844:	12 e0       	ldi	r17, 0x02	; 2
     846:	05 c0       	rjmp	.+10     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     848:	14 e0       	ldi	r17, 0x04	; 4
     84a:	03 c0       	rjmp	.+6      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     84c:	10 e0       	ldi	r17, 0x00	; 0
     84e:	01 c0       	rjmp	.+2      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     850:	10 e0       	ldi	r17, 0x00	; 0
		return EEPROM_24_STATUS_ERROR_NOK;
	
#endif
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
     852:	81 2f       	mov	r24, r17
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	08 95       	ret

00000864 <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
     864:	ef 92       	push	r14
     866:	ff 92       	push	r15
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	00 d0       	rcall	.+0      	; 0x870 <Eeprom_24_writePage+0xc>
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     874:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     878:	93 30       	cpi	r25, 0x03	; 3
     87a:	f9 f4       	brne	.+62     	; 0x8ba <Eeprom_24_writePage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     87c:	61 15       	cp	r22, r1
     87e:	71 05       	cpc	r23, r1
     880:	f1 f0       	breq	.+60     	; 0x8be <Eeprom_24_writePage+0x5a>
     882:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
     884:	90 e1       	ldi	r25, 0x10	; 16
     886:	89 9f       	mul	r24, r25
     888:	a0 01       	movw	r20, r0
     88a:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
     88c:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
     88e:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
     890:	be 01       	movw	r22, r28
     892:	6e 5f       	subi	r22, 0xFE	; 254
     894:	7f 4f       	sbci	r23, 0xFF	; 255
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_getAddresses>
     89e:	18 2f       	mov	r17, r24
     8a0:	81 30       	cpi	r24, 0x01	; 1
     8a2:	79 f4       	brne	.+30     	; 0x8c2 <Eeprom_24_writePage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
     8a4:	20 e1       	ldi	r18, 0x10	; 16
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	a7 01       	movw	r20, r14
     8aa:	6a 81       	ldd	r22, Y+2	; 0x02
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	0e 94 22 09 	call	0x1244	; 0x1244 <I2C_MasterSendToLocation>
     8b2:	81 30       	cpi	r24, 0x01	; 1
     8b4:	39 f0       	breq	.+14     	; 0x8c4 <Eeprom_24_writePage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
     8b6:	10 e0       	ldi	r17, 0x00	; 0
     8b8:	05 c0       	rjmp	.+10     	; 0x8c4 <Eeprom_24_writePage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     8ba:	12 e0       	ldi	r17, 0x02	; 2
     8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <Eeprom_24_writePage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     8be:	14 e0       	ldi	r17, 0x04	; 4
     8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <Eeprom_24_writePage+0x60>
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     8c2:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
     8c4:	81 2f       	mov	r24, r17
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	1f 91       	pop	r17
     8d0:	ff 90       	pop	r15
     8d2:	ef 90       	pop	r14
     8d4:	08 95       	ret

000008d6 <Eeprom_24_readPage>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory page.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read data inside a specific page in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPage(uint8_t u8_page, uint8_t *pu8_data)
{
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	00 d0       	rcall	.+0      	; 0x8e2 <Eeprom_24_readPage+0xc>
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     8e6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <genu_eepromModuleState>
     8ea:	93 30       	cpi	r25, 0x03	; 3
     8ec:	f9 f4       	brne	.+62     	; 0x92c <Eeprom_24_readPage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     8ee:	61 15       	cp	r22, r1
     8f0:	71 05       	cpc	r23, r1
     8f2:	f1 f0       	breq	.+60     	; 0x930 <Eeprom_24_readPage+0x5a>
     8f4:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
     8f6:	90 e1       	ldi	r25, 0x10	; 16
     8f8:	89 9f       	mul	r24, r25
     8fa:	a0 01       	movw	r20, r0
     8fc:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
     8fe:	19 82       	std	Y+1, r1	; 0x01

#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
     900:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
     902:	be 01       	movw	r22, r28
     904:	6e 5f       	subi	r22, 0xFE	; 254
     906:	7f 4f       	sbci	r23, 0xFF	; 255
     908:	ce 01       	movw	r24, r28
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_getAddresses>
     910:	18 2f       	mov	r17, r24
     912:	81 30       	cpi	r24, 0x01	; 1
     914:	79 f4       	brne	.+30     	; 0x934 <Eeprom_24_readPage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
     916:	20 e1       	ldi	r18, 0x10	; 16
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	a7 01       	movw	r20, r14
     91c:	6a 81       	ldd	r22, Y+2	; 0x02
     91e:	89 81       	ldd	r24, Y+1	; 0x01
     920:	0e 94 71 09 	call	0x12e2	; 0x12e2 <I2C_MasterReceiveFromLocation>
     924:	81 30       	cpi	r24, 0x01	; 1
     926:	39 f0       	breq	.+14     	; 0x936 <Eeprom_24_readPage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
     928:	10 e0       	ldi	r17, 0x00	; 0
     92a:	05 c0       	rjmp	.+10     	; 0x936 <Eeprom_24_readPage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     92c:	12 e0       	ldi	r17, 0x02	; 2
     92e:	03 c0       	rjmp	.+6      	; 0x936 <Eeprom_24_readPage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     930:	14 e0       	ldi	r17, 0x04	; 4
     932:	01 c0       	rjmp	.+2      	; 0x936 <Eeprom_24_readPage+0x60>
	uint8_t u8_slaveAddr=0;

#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     934:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
     936:	81 2f       	mov	r24, r17
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	ff 90       	pop	r15
     944:	ef 90       	pop	r14
     946:	08 95       	ret

00000948 <Eeprom_24_writePacket>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Multiple data bytes to a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
     948:	6f 92       	push	r6
     94a:	7f 92       	push	r7
     94c:	8f 92       	push	r8
     94e:	9f 92       	push	r9
     950:	af 92       	push	r10
     952:	bf 92       	push	r11
     954:	cf 92       	push	r12
     956:	df 92       	push	r13
     958:	ef 92       	push	r14
     95a:	ff 92       	push	r15
     95c:	0f 93       	push	r16
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	00 d0       	rcall	.+0      	; 0x966 <Eeprom_24_writePacket+0x1e>
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	5c 01       	movw	r10, r24
     96c:	6b 01       	movw	r12, r22
     96e:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     970:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_eepromModuleState>
     974:	83 30       	cpi	r24, 0x03	; 3
     976:	09 f0       	breq	.+2      	; 0x97a <Eeprom_24_writePacket+0x32>
     978:	a1 c0       	rjmp	.+322    	; 0xabc <Eeprom_24_writePacket+0x174>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     97a:	67 2b       	or	r22, r23
     97c:	09 f4       	brne	.+2      	; 0x980 <Eeprom_24_writePacket+0x38>
     97e:	a0 c0       	rjmp	.+320    	; 0xac0 <Eeprom_24_writePacket+0x178>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     980:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
     982:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     984:	a5 01       	movw	r20, r10
     986:	be 01       	movw	r22, r28
     988:	6e 5f       	subi	r22, 0xFE	; 254
     98a:	7f 4f       	sbci	r23, 0xFF	; 255
     98c:	ce 01       	movw	r24, r28
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_getAddresses>
     994:	18 2f       	mov	r17, r24
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	09 f0       	breq	.+2      	; 0x99c <Eeprom_24_writePacket+0x54>
     99a:	94 c0       	rjmp	.+296    	; 0xac4 <Eeprom_24_writePacket+0x17c>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;
     99c:	45 01       	movw	r8, r10
     99e:	80 ef       	ldi	r24, 0xF0	; 240
     9a0:	88 22       	and	r8, r24
     9a2:	87 e0       	ldi	r24, 0x07	; 7
     9a4:	98 22       	and	r9, r24
     9a6:	96 94       	lsr	r9
     9a8:	87 94       	ror	r8
     9aa:	96 94       	lsr	r9
     9ac:	87 94       	ror	r8
     9ae:	96 94       	lsr	r9
     9b0:	87 94       	ror	r8
     9b2:	96 94       	lsr	r9
     9b4:	87 94       	ror	r8
     9b6:	68 2c       	mov	r6, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
     9b8:	8a 2d       	mov	r24, r10
     9ba:	8f 70       	andi	r24, 0x0F	; 15
	if(u8_byteOffset != 0)
     9bc:	51 f1       	breq	.+84     	; 0xa12 <Eeprom_24_writePacket+0xca>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
     9be:	90 e1       	ldi	r25, 0x10	; 16
     9c0:	a9 2e       	mov	r10, r25
     9c2:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
     9c4:	b1 2c       	mov	r11, r1
     9c6:	ea 14       	cp	r14, r10
     9c8:	fb 04       	cpc	r15, r11
     9ca:	58 f4       	brcc	.+22     	; 0x9e2 <Eeprom_24_writePacket+0x9a>
		{
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
     9cc:	97 01       	movw	r18, r14
     9ce:	a6 01       	movw	r20, r12
     9d0:	6a 81       	ldd	r22, Y+2	; 0x02
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	0e 94 22 09 	call	0x1244	; 0x1244 <I2C_MasterSendToLocation>
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	09 f4       	brne	.+2      	; 0x9de <Eeprom_24_writePacket+0x96>
     9dc:	7c c0       	rjmp	.+248    	; 0xad6 <Eeprom_24_writePacket+0x18e>
				return EEPROM_24_STATUS_ERROR_NOK;
     9de:	10 e0       	ldi	r17, 0x00	; 0
     9e0:	7a c0       	rjmp	.+244    	; 0xad6 <Eeprom_24_writePacket+0x18e>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
     9e2:	95 01       	movw	r18, r10
     9e4:	a6 01       	movw	r20, r12
     9e6:	6a 81       	ldd	r22, Y+2	; 0x02
     9e8:	89 81       	ldd	r24, Y+1	; 0x01
     9ea:	0e 94 22 09 	call	0x1244	; 0x1244 <I2C_MasterSendToLocation>
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <Eeprom_24_writePacket+0xac>
     9f2:	6a c0       	rjmp	.+212    	; 0xac8 <Eeprom_24_writePacket+0x180>
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
     9f4:	ea 18       	sub	r14, r10
     9f6:	fb 08       	sbc	r15, r11
		i=1;
		Delay_ms(15);
     9f8:	2f e0       	ldi	r18, 0x0F	; 15
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Delay_ms>
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
     a0c:	77 24       	eor	r7, r7
     a0e:	73 94       	inc	r7
     a10:	03 c0       	rjmp	.+6      	; 0xa18 <Eeprom_24_writePacket+0xd0>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
     a12:	71 2c       	mov	r7, r1

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
     a14:	a1 2c       	mov	r10, r1
     a16:	b1 2c       	mov	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
     a18:	c7 01       	movw	r24, r14
     a1a:	92 95       	swap	r25
     a1c:	82 95       	swap	r24
     a1e:	8f 70       	andi	r24, 0x0F	; 15
     a20:	89 27       	eor	r24, r25
     a22:	9f 70       	andi	r25, 0x0F	; 15
     a24:	89 27       	eor	r24, r25
     a26:	08 2f       	mov	r16, r24
	while (pages_num > 0)
     a28:	1c c0       	rjmp	.+56     	; 0xa62 <Eeprom_24_writePacket+0x11a>
	{
		pages_num--;
     a2a:	01 50       	subi	r16, 0x01	; 1
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
     a2c:	b6 01       	movw	r22, r12
     a2e:	6a 0d       	add	r22, r10
     a30:	7b 1d       	adc	r23, r11
     a32:	87 2d       	mov	r24, r7
     a34:	86 0d       	add	r24, r6
     a36:	0e 94 32 04 	call	0x864	; 0x864 <Eeprom_24_writePage>
     a3a:	81 30       	cpi	r24, 0x01	; 1
     a3c:	09 f0       	breq	.+2      	; 0xa40 <Eeprom_24_writePacket+0xf8>
     a3e:	46 c0       	rjmp	.+140    	; 0xacc <Eeprom_24_writePacket+0x184>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
     a40:	73 94       	inc	r7
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
     a42:	80 e1       	ldi	r24, 0x10	; 16
     a44:	e8 1a       	sub	r14, r24
     a46:	f1 08       	sbc	r15, r1
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
     a48:	80 e1       	ldi	r24, 0x10	; 16
     a4a:	a8 0e       	add	r10, r24
     a4c:	b1 1c       	adc	r11, r1
		Delay_ms(15);
     a4e:	2f e0       	ldi	r18, 0x0F	; 15
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Delay_ms>
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
     a62:	10 16       	cp	r1, r16
     a64:	14 f3       	brlt	.-60     	; 0xa2a <Eeprom_24_writePacket+0xe2>
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
		Delay_ms(15);
	}
	
	if (u16_dataLen > 0)
     a66:	e1 14       	cp	r14, r1
     a68:	f1 04       	cpc	r15, r1
     a6a:	a9 f1       	breq	.+106    	; 0xad6 <Eeprom_24_writePacket+0x18e>
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
     a6c:	a4 01       	movw	r20, r8
     a6e:	47 0d       	add	r20, r7
     a70:	51 1d       	adc	r21, r1
     a72:	42 95       	swap	r20
     a74:	52 95       	swap	r21
     a76:	50 7f       	andi	r21, 0xF0	; 240
     a78:	54 27       	eor	r21, r20
     a7a:	40 7f       	andi	r20, 0xF0	; 240
     a7c:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
     a7e:	be 01       	movw	r22, r28
     a80:	6e 5f       	subi	r22, 0xFE	; 254
     a82:	7f 4f       	sbci	r23, 0xFF	; 255
     a84:	ce 01       	movw	r24, r28
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_getAddresses>
     a8c:	18 2f       	mov	r17, r24
     a8e:	81 30       	cpi	r24, 0x01	; 1
     a90:	f9 f4       	brne	.+62     	; 0xad0 <Eeprom_24_writePacket+0x188>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
     a92:	a6 01       	movw	r20, r12
     a94:	4a 0d       	add	r20, r10
     a96:	5b 1d       	adc	r21, r11
     a98:	97 01       	movw	r18, r14
     a9a:	6a 81       	ldd	r22, Y+2	; 0x02
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	0e 94 22 09 	call	0x1244	; 0x1244 <I2C_MasterSendToLocation>
     aa2:	81 30       	cpi	r24, 0x01	; 1
     aa4:	b9 f4       	brne	.+46     	; 0xad4 <Eeprom_24_writePacket+0x18c>
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
     aa6:	2f e0       	ldi	r18, 0x0F	; 15
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Delay_ms>
     aba:	0d c0       	rjmp	.+26     	; 0xad6 <Eeprom_24_writePacket+0x18e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     abc:	12 e0       	ldi	r17, 0x02	; 2
     abe:	0b c0       	rjmp	.+22     	; 0xad6 <Eeprom_24_writePacket+0x18e>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     ac0:	14 e0       	ldi	r17, 0x04	; 4
     ac2:	09 c0       	rjmp	.+18     	; 0xad6 <Eeprom_24_writePacket+0x18e>
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     ac4:	10 e0       	ldi	r17, 0x00	; 0
     ac6:	07 c0       	rjmp	.+14     	; 0xad6 <Eeprom_24_writePacket+0x18e>
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     ac8:	10 e0       	ldi	r17, 0x00	; 0
     aca:	05 c0       	rjmp	.+10     	; 0xad6 <Eeprom_24_writePacket+0x18e>
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
	{
		pages_num--;
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     acc:	10 e0       	ldi	r17, 0x00	; 0
     ace:	03 c0       	rjmp	.+6      	; 0xad6 <Eeprom_24_writePacket+0x18e>
	
	if (u16_dataLen > 0)
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     ad0:	10 e0       	ldi	r17, 0x00	; 0
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <Eeprom_24_writePacket+0x18e>
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     ad4:	10 e0       	ldi	r17, 0x00	; 0
		Delay_ms(15);
	}

#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
     ad6:	81 2f       	mov	r24, r17
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	bf 90       	pop	r11
     aee:	af 90       	pop	r10
     af0:	9f 90       	pop	r9
     af2:	8f 90       	pop	r8
     af4:	7f 90       	pop	r7
     af6:	6f 90       	pop	r6
     af8:	08 95       	ret

00000afa <Eeprom_24_readPacket>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read Multiple data bytes from a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
     afa:	6f 92       	push	r6
     afc:	7f 92       	push	r7
     afe:	8f 92       	push	r8
     b00:	9f 92       	push	r9
     b02:	af 92       	push	r10
     b04:	bf 92       	push	r11
     b06:	cf 92       	push	r12
     b08:	df 92       	push	r13
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	00 d0       	rcall	.+0      	; 0xb18 <Eeprom_24_readPacket+0x1e>
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
     b1c:	5c 01       	movw	r10, r24
     b1e:	6b 01       	movw	r12, r22
     b20:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     b22:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_eepromModuleState>
     b26:	83 30       	cpi	r24, 0x03	; 3
     b28:	09 f0       	breq	.+2      	; 0xb2c <Eeprom_24_readPacket+0x32>
     b2a:	84 c0       	rjmp	.+264    	; 0xc34 <Eeprom_24_readPacket+0x13a>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     b2c:	67 2b       	or	r22, r23
     b2e:	09 f4       	brne	.+2      	; 0xb32 <Eeprom_24_readPacket+0x38>
     b30:	83 c0       	rjmp	.+262    	; 0xc38 <Eeprom_24_readPacket+0x13e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     b32:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u16dataIndex=0;
	uint8_t i=0;

#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;	
     b34:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     b36:	a5 01       	movw	r20, r10
     b38:	be 01       	movw	r22, r28
     b3a:	6e 5f       	subi	r22, 0xFE	; 254
     b3c:	7f 4f       	sbci	r23, 0xFF	; 255
     b3e:	ce 01       	movw	r24, r28
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_getAddresses>
     b46:	18 2f       	mov	r17, r24
     b48:	81 30       	cpi	r24, 0x01	; 1
     b4a:	09 f0       	breq	.+2      	; 0xb4e <Eeprom_24_readPacket+0x54>
     b4c:	77 c0       	rjmp	.+238    	; 0xc3c <Eeprom_24_readPacket+0x142>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;		//The first page to write in
     b4e:	45 01       	movw	r8, r10
     b50:	80 ef       	ldi	r24, 0xF0	; 240
     b52:	88 22       	and	r8, r24
     b54:	87 e0       	ldi	r24, 0x07	; 7
     b56:	98 22       	and	r9, r24
     b58:	96 94       	lsr	r9
     b5a:	87 94       	ror	r8
     b5c:	96 94       	lsr	r9
     b5e:	87 94       	ror	r8
     b60:	96 94       	lsr	r9
     b62:	87 94       	ror	r8
     b64:	96 94       	lsr	r9
     b66:	87 94       	ror	r8
     b68:	78 2c       	mov	r7, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
     b6a:	8a 2d       	mov	r24, r10
     b6c:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
     b6e:	f9 f0       	breq	.+62     	; 0xbae <Eeprom_24_readPacket+0xb4>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
     b70:	90 e1       	ldi	r25, 0x10	; 16
     b72:	a9 2e       	mov	r10, r25
     b74:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
     b76:	b1 2c       	mov	r11, r1
     b78:	ea 14       	cp	r14, r10
     b7a:	fb 04       	cpc	r15, r11
     b7c:	58 f4       	brcc	.+22     	; 0xb94 <Eeprom_24_readPacket+0x9a>
		{
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
     b7e:	97 01       	movw	r18, r14
     b80:	a6 01       	movw	r20, r12
     b82:	6a 81       	ldd	r22, Y+2	; 0x02
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	0e 94 71 09 	call	0x12e2	; 0x12e2 <I2C_MasterReceiveFromLocation>
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <Eeprom_24_readPacket+0x96>
     b8e:	5d c0       	rjmp	.+186    	; 0xc4a <Eeprom_24_readPacket+0x150>
				return EEPROM_24_STATUS_ERROR_NOK;
     b90:	10 e0       	ldi	r17, 0x00	; 0
     b92:	5b c0       	rjmp	.+182    	; 0xc4a <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
     b94:	95 01       	movw	r18, r10
     b96:	a6 01       	movw	r20, r12
     b98:	6a 81       	ldd	r22, Y+2	; 0x02
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <I2C_MasterReceiveFromLocation>
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	09 f0       	breq	.+2      	; 0xba6 <Eeprom_24_readPacket+0xac>
     ba4:	4d c0       	rjmp	.+154    	; 0xc40 <Eeprom_24_readPacket+0x146>
			return EEPROM_24_STATUS_ERROR_NOK;
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
     ba6:	ea 18       	sub	r14, r10
     ba8:	fb 08       	sbc	r15, r11
		i=1;
     baa:	01 e0       	ldi	r16, 0x01	; 1
     bac:	03 c0       	rjmp	.+6      	; 0xbb4 <Eeprom_24_readPacket+0xba>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
     bae:	00 e0       	ldi	r16, 0x00	; 0

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
     bb0:	a1 2c       	mov	r10, r1
     bb2:	b1 2c       	mov	r11, r1
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
     bb4:	c7 01       	movw	r24, r14
     bb6:	92 95       	swap	r25
     bb8:	82 95       	swap	r24
     bba:	8f 70       	andi	r24, 0x0F	; 15
     bbc:	89 27       	eor	r24, r25
     bbe:	9f 70       	andi	r25, 0x0F	; 15
     bc0:	89 27       	eor	r24, r25
	while (pages_num--)
     bc2:	11 c0       	rjmp	.+34     	; 0xbe6 <Eeprom_24_readPacket+0xec>
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
     bc4:	b6 01       	movw	r22, r12
     bc6:	6a 0d       	add	r22, r10
     bc8:	7b 1d       	adc	r23, r11
     bca:	80 2f       	mov	r24, r16
     bcc:	87 0d       	add	r24, r7
     bce:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <Eeprom_24_readPage>
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	b9 f5       	brne	.+110    	; 0xc44 <Eeprom_24_readPacket+0x14a>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
     bd6:	0f 5f       	subi	r16, 0xFF	; 255
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
     bd8:	80 e1       	ldi	r24, 0x10	; 16
     bda:	e8 1a       	sub	r14, r24
     bdc:	f1 08       	sbc	r15, r1
		u16dataIndex += EEPROM_24_PAGE_BYTES;
     bde:	80 e1       	ldi	r24, 0x10	; 16
     be0:	a8 0e       	add	r10, r24
     be2:	b1 1c       	adc	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
     be4:	86 2d       	mov	r24, r6
     be6:	66 24       	eor	r6, r6
     be8:	6a 94       	dec	r6
     bea:	68 0e       	add	r6, r24
     bec:	81 11       	cpse	r24, r1
     bee:	ea cf       	rjmp	.-44     	; 0xbc4 <Eeprom_24_readPacket+0xca>
		i++;
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u16dataIndex += EEPROM_24_PAGE_BYTES;
	}

	if (u16_dataLen > 0)
     bf0:	e1 14       	cp	r14, r1
     bf2:	f1 04       	cpc	r15, r1
     bf4:	51 f1       	breq	.+84     	; 0xc4a <Eeprom_24_readPacket+0x150>
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
     bf6:	a4 01       	movw	r20, r8
     bf8:	40 0f       	add	r20, r16
     bfa:	51 1d       	adc	r21, r1
     bfc:	42 95       	swap	r20
     bfe:	52 95       	swap	r21
     c00:	50 7f       	andi	r21, 0xF0	; 240
     c02:	54 27       	eor	r21, r20
     c04:	40 7f       	andi	r20, 0xF0	; 240
     c06:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
     c08:	be 01       	movw	r22, r28
     c0a:	6e 5f       	subi	r22, 0xFE	; 254
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255
     c0e:	ce 01       	movw	r24, r28
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_getAddresses>
     c16:	18 2f       	mov	r17, r24
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	b1 f4       	brne	.+44     	; 0xc48 <Eeprom_24_readPacket+0x14e>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
     c1c:	a6 01       	movw	r20, r12
     c1e:	4a 0d       	add	r20, r10
     c20:	5b 1d       	adc	r21, r11
     c22:	97 01       	movw	r18, r14
     c24:	6a 81       	ldd	r22, Y+2	; 0x02
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	0e 94 71 09 	call	0x12e2	; 0x12e2 <I2C_MasterReceiveFromLocation>
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	69 f0       	breq	.+26     	; 0xc4a <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_NOK;
     c30:	10 e0       	ldi	r17, 0x00	; 0
     c32:	0b c0       	rjmp	.+22     	; 0xc4a <Eeprom_24_readPacket+0x150>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     c34:	12 e0       	ldi	r17, 0x02	; 2
     c36:	09 c0       	rjmp	.+18     	; 0xc4a <Eeprom_24_readPacket+0x150>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     c38:	14 e0       	ldi	r17, 0x04	; 4
     c3a:	07 c0       	rjmp	.+14     	; 0xc4a <Eeprom_24_readPacket+0x150>
	uint8_t i=0;

#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     c3c:	10 e0       	ldi	r17, 0x00	; 0
     c3e:	05 c0       	rjmp	.+10     	; 0xc4a <Eeprom_24_readPacket+0x150>
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     c40:	10 e0       	ldi	r17, 0x00	; 0
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <Eeprom_24_readPacket+0x150>
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     c44:	10 e0       	ldi	r17, 0x00	; 0
     c46:	01 c0       	rjmp	.+2      	; 0xc4a <Eeprom_24_readPacket+0x150>

	if (u16_dataLen > 0)
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     c48:	10 e0       	ldi	r17, 0x00	; 0
		if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
     c4a:	81 2f       	mov	r24, r17
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	df 90       	pop	r13
     c5e:	cf 90       	pop	r12
     c60:	bf 90       	pop	r11
     c62:	af 90       	pop	r10
     c64:	9f 90       	pop	r9
     c66:	8f 90       	pop	r8
     c68:	7f 90       	pop	r7
     c6a:	6f 90       	pop	r6
     c6c:	08 95       	ret

00000c6e <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
     c72:	c0 91 48 02 	lds	r28, 0x0248	; 0x800248 <gu8_counter>
     c76:	d0 e0       	ldi	r29, 0x00	; 0
     c78:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <Uart_DataRegister>
     c7c:	c7 5b       	subi	r28, 0xB7	; 183
     c7e:	dd 4f       	sbci	r29, 0xFD	; 253
     c80:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
     c82:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <gu8_counter>
     c86:	e9 2f       	mov	r30, r25
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	e7 5b       	subi	r30, 0xB7	; 183
     c8c:	fd 4f       	sbci	r31, 0xFD	; 253
     c8e:	80 81       	ld	r24, Z
     c90:	8d 30       	cpi	r24, 0x0D	; 13
     c92:	71 f4       	brne	.+28     	; 0xcb0 <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
     c94:	0e 94 b3 0a 	call	0x1566	; 0x1566 <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
     c98:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <gu8_counter>
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	e7 5b       	subi	r30, 0xB7	; 183
     ca0:	fd 4f       	sbci	r31, 0xFD	; 253
     ca2:	10 82       	st	Z, r1
		gu8_counter = 0;
     ca4:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <gu8_counter>
		gu8_flag = 1;
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <gu8_flag>
     cae:	1d c0       	rjmp	.+58     	; 0xcea <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
     cb0:	88 30       	cpi	r24, 0x08	; 8
     cb2:	51 f4       	brne	.+20     	; 0xcc8 <Uart_RXC_ISR+0x5a>
     cb4:	99 23       	and	r25, r25
     cb6:	41 f0       	breq	.+16     	; 0xcc8 <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
     cb8:	0e 94 b3 0a 	call	0x1566	; 0x1566 <Uart_sendByte>
		gu8_counter--;
     cbc:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <gu8_counter>
     cc0:	81 50       	subi	r24, 0x01	; 1
     cc2:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <gu8_counter>
     cc6:	11 c0       	rjmp	.+34     	; 0xcea <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
     cc8:	88 30       	cpi	r24, 0x08	; 8
     cca:	79 f0       	breq	.+30     	; 0xcea <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
     ccc:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <gu8_visibility>
     cd0:	91 30       	cpi	r25, 0x01	; 1
     cd2:	21 f4       	brne	.+8      	; 0xcdc <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
     cd4:	8a e2       	ldi	r24, 0x2A	; 42
     cd6:	0e 94 b3 0a 	call	0x1566	; 0x1566 <Uart_sendByte>
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
     cdc:	0e 94 b3 0a 	call	0x1566	; 0x1566 <Uart_sendByte>
		}
		gu8_counter++;
     ce0:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <gu8_counter>
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <gu8_counter>
	}
}
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	08 95       	ret

00000cf0 <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
     cf0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
     cf4:	83 30       	cpi	r24, 0x03	; 3
     cf6:	81 f0       	breq	.+32     	; 0xd18 <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
     cf8:	0e 94 9d 0a 	call	0x153a	; 0x153a <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	11 f0       	breq	.+4      	; 0xd04 <Terminal_init+0x14>
     d00:	87 30       	cpi	r24, 0x07	; 7
     d02:	49 f4       	brne	.+18     	; 0xd16 <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
     d04:	87 e3       	ldi	r24, 0x37	; 55
     d06:	96 e0       	ldi	r25, 0x06	; 6
     d08:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
     d0c:	83 e0       	ldi	r24, 0x03	; 3
     d0e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
     d16:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
     d18:	08 95       	ret

00000d1a <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	81 f0       	breq	.+32     	; 0xd42 <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
     d22:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <genu_TerminalModuleState>
     d26:	22 30       	cpi	r18, 0x02	; 2
     d28:	79 f0       	breq	.+30     	; 0xd48 <Terminal_Out+0x2e>
     d2a:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
     d2c:	0e 94 16 0a 	call	0x142c	; 0x142c <stringLength>
     d30:	68 2f       	mov	r22, r24
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	ce 01       	movw	r24, r28
     d36:	0e 94 be 0a 	call	0x157c	; 0x157c <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	21 f0       	breq	.+8      	; 0xd46 <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	03 c0       	rjmp	.+6      	; 0xd48 <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
     d42:	24 e0       	ldi	r18, 0x04	; 4
     d44:	01 c0       	rjmp	.+2      	; 0xd48 <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
     d46:	21 e0       	ldi	r18, 0x01	; 1
}
     d48:	82 2f       	mov	r24, r18
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	08 95       	ret

00000d50 <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
     d50:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
     d52:	89 2b       	or	r24, r25
     d54:	a1 f0       	breq	.+40     	; 0xd7e <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
     d56:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_TerminalModuleState>
     d5a:	82 30       	cpi	r24, 0x02	; 2
     d5c:	99 f0       	breq	.+38     	; 0xd84 <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
     d5e:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <gu8_flag>
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	71 f4       	brne	.+28     	; 0xd82 <Terminal_In+0x32>
	{
		gu8_flag = 0;
     d66:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
     d6a:	89 e4       	ldi	r24, 0x49	; 73
     d6c:	92 e0       	ldi	r25, 0x02	; 2
     d6e:	0e 94 8c 0a 	call	0x1518	; 0x1518 <stringCopy>
		EmptyString(gau8_data);
     d72:	89 e4       	ldi	r24, 0x49	; 73
     d74:	92 e0       	ldi	r25, 0x02	; 2
     d76:	0e 94 80 0a 	call	0x1500	; 0x1500 <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
     d7a:	85 e0       	ldi	r24, 0x05	; 5
     d7c:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
     d7e:	84 e0       	ldi	r24, 0x04	; 4
     d80:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
     d82:	81 e0       	ldi	r24, 0x01	; 1
}
     d84:	08 95       	ret

00000d86 <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
     d8c:	08 95       	ret

00000d8e <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
     d8e:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	08 95       	ret

00000d96 <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
     d96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <App_start>
     d9a:	ff cf       	rjmp	.-2      	; 0xd9a <main+0x4>

00000d9c <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
     d9c:	2f 92       	push	r2
     d9e:	3f 92       	push	r3
     da0:	4f 92       	push	r4
     da2:	5f 92       	push	r5
     da4:	6f 92       	push	r6
     da6:	7f 92       	push	r7
     da8:	8f 92       	push	r8
     daa:	9f 92       	push	r9
     dac:	af 92       	push	r10
     dae:	bf 92       	push	r11
     db0:	cf 92       	push	r12
     db2:	df 92       	push	r13
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <Delay_ms+0x26>
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <Delay_ms+0x28>
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <Delay_ms+0x2a>
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	22 2e       	mov	r2, r18
     dcc:	33 2e       	mov	r3, r19
     dce:	44 2e       	mov	r4, r20
     dd0:	55 2e       	mov	r5, r21
     dd2:	66 2e       	mov	r6, r22
     dd4:	79 83       	std	Y+1, r23	; 0x01
     dd6:	8a 83       	std	Y+2, r24	; 0x02
     dd8:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
     dda:	91 2c       	mov	r9, r1
     ddc:	1d 82       	std	Y+5, r1	; 0x05
     dde:	1c 82       	std	Y+4, r1	; 0x04
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	e0 e0       	ldi	r30, 0x00	; 0
     de6:	71 2c       	mov	r7, r1
     de8:	81 2c       	mov	r8, r1
     dea:	44 c0       	rjmp	.+136    	; 0xe74 <Delay_ms+0xd8>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
     dec:	2d 2d       	mov	r18, r13
     dee:	3e 2d       	mov	r19, r14
     df0:	4f 2d       	mov	r20, r15
     df2:	50 2f       	mov	r21, r16
     df4:	61 2f       	mov	r22, r17
     df6:	7a 2f       	mov	r23, r26
     df8:	8b 2d       	mov	r24, r11
     dfa:	9c 2d       	mov	r25, r12
     dfc:	a1 e0       	ldi	r26, 0x01	; 1
     dfe:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__adddi3_s8>
     e02:	d2 2e       	mov	r13, r18
     e04:	e3 2e       	mov	r14, r19
     e06:	f4 2e       	mov	r15, r20
     e08:	05 2f       	mov	r16, r21
     e0a:	16 2f       	mov	r17, r22
     e0c:	a7 2f       	mov	r26, r23
     e0e:	b8 2e       	mov	r11, r24
     e10:	c9 2e       	mov	r12, r25
     e12:	0a c0       	rjmp	.+20     	; 0xe28 <Delay_ms+0x8c>
     e14:	d1 2c       	mov	r13, r1
     e16:	e1 2c       	mov	r14, r1
     e18:	f1 2c       	mov	r15, r1
     e1a:	00 e0       	ldi	r16, 0x00	; 0
     e1c:	10 e0       	ldi	r17, 0x00	; 0
     e1e:	a0 e0       	ldi	r26, 0x00	; 0
     e20:	b1 2c       	mov	r11, r1
     e22:	c1 2c       	mov	r12, r1
     e24:	ad 80       	ldd	r10, Y+5	; 0x05
     e26:	ee 83       	std	Y+6, r30	; 0x06
     e28:	2d 2d       	mov	r18, r13
     e2a:	3e 2d       	mov	r19, r14
     e2c:	4f 2d       	mov	r20, r15
     e2e:	50 2f       	mov	r21, r16
     e30:	61 2f       	mov	r22, r17
     e32:	7a 2f       	mov	r23, r26
     e34:	8b 2d       	mov	r24, r11
     e36:	9c 2d       	mov	r25, r12
     e38:	2b 38       	cpi	r18, 0x8B	; 139
     e3a:	31 05       	cpc	r19, r1
     e3c:	41 05       	cpc	r20, r1
     e3e:	51 05       	cpc	r21, r1
     e40:	61 05       	cpc	r22, r1
     e42:	71 05       	cpc	r23, r1
     e44:	81 05       	cpc	r24, r1
     e46:	91 05       	cpc	r25, r1
     e48:	89 f2       	breq	.-94     	; 0xdec <Delay_ms+0x50>
     e4a:	80 f2       	brcs	.-96     	; 0xdec <Delay_ms+0x50>
     e4c:	ee 81       	ldd	r30, Y+6	; 0x06

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
     e4e:	29 2d       	mov	r18, r9
     e50:	3a 2d       	mov	r19, r10
     e52:	4c 81       	ldd	r20, Y+4	; 0x04
     e54:	5b 2f       	mov	r21, r27
     e56:	6f 2f       	mov	r22, r31
     e58:	7e 2f       	mov	r23, r30
     e5a:	87 2d       	mov	r24, r7
     e5c:	98 2d       	mov	r25, r8
     e5e:	a1 e0       	ldi	r26, 0x01	; 1
     e60:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__adddi3_s8>
     e64:	92 2e       	mov	r9, r18
     e66:	3d 83       	std	Y+5, r19	; 0x05
     e68:	4c 83       	std	Y+4, r20	; 0x04
     e6a:	b5 2f       	mov	r27, r21
     e6c:	f6 2f       	mov	r31, r22
     e6e:	e7 2f       	mov	r30, r23
     e70:	78 2e       	mov	r7, r24
     e72:	89 2e       	mov	r8, r25
     e74:	29 2d       	mov	r18, r9
     e76:	3d 81       	ldd	r19, Y+5	; 0x05
     e78:	4c 81       	ldd	r20, Y+4	; 0x04
     e7a:	5b 2f       	mov	r21, r27
     e7c:	6f 2f       	mov	r22, r31
     e7e:	7e 2f       	mov	r23, r30
     e80:	87 2d       	mov	r24, r7
     e82:	98 2d       	mov	r25, r8
     e84:	a2 2c       	mov	r10, r2
     e86:	b3 2c       	mov	r11, r3
     e88:	c4 2c       	mov	r12, r4
     e8a:	d5 2c       	mov	r13, r5
     e8c:	e6 2c       	mov	r14, r6
     e8e:	f9 80       	ldd	r15, Y+1	; 0x01
     e90:	0a 81       	ldd	r16, Y+2	; 0x02
     e92:	1b 81       	ldd	r17, Y+3	; 0x03
     e94:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__cmpdi2>
     e98:	08 f4       	brcc	.+2      	; 0xe9c <Delay_ms+0x100>
     e9a:	bc cf       	rjmp	.-136    	; 0xe14 <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
     e9c:	26 96       	adiw	r28, 0x06	; 6
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	ff 90       	pop	r15
     eb2:	ef 90       	pop	r14
     eb4:	df 90       	pop	r13
     eb6:	cf 90       	pop	r12
     eb8:	bf 90       	pop	r11
     eba:	af 90       	pop	r10
     ebc:	9f 90       	pop	r9
     ebe:	8f 90       	pop	r8
     ec0:	7f 90       	pop	r7
     ec2:	6f 90       	pop	r6
     ec4:	5f 90       	pop	r5
     ec6:	4f 90       	pop	r4
     ec8:	3f 90       	pop	r3
     eca:	2f 90       	pop	r2
     ecc:	08 95       	ret

00000ece <Ext_INT0_init>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
     ece:	9b b7       	in	r25, 0x3b	; 59
     ed0:	90 64       	ori	r25, 0x40	; 64
     ed2:	9b bf       	out	0x3b, r25	; 59
     ed4:	95 b7       	in	r25, 0x35	; 53
     ed6:	89 2b       	or	r24, r25
     ed8:	85 bf       	out	0x35, r24	; 53
     eda:	08 95       	ret

00000edc <INT0_setCallBack>:
     edc:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <INT0_CallBackPtr+0x1>
     ee0:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <INT0_CallBackPtr>
     ee4:	08 95       	ret

00000ee6 <__vector_1>:
     ee6:	1f 92       	push	r1
     ee8:	0f 92       	push	r0
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	0f 92       	push	r0
     eee:	11 24       	eor	r1, r1
     ef0:	2f 93       	push	r18
     ef2:	3f 93       	push	r19
     ef4:	4f 93       	push	r20
     ef6:	5f 93       	push	r21
     ef8:	6f 93       	push	r22
     efa:	7f 93       	push	r23
     efc:	8f 93       	push	r24
     efe:	9f 93       	push	r25
     f00:	af 93       	push	r26
     f02:	bf 93       	push	r27
     f04:	ef 93       	push	r30
     f06:	ff 93       	push	r31
     f08:	e0 91 4d 03 	lds	r30, 0x034D	; 0x80034d <INT0_CallBackPtr>
     f0c:	f0 91 4e 03 	lds	r31, 0x034E	; 0x80034e <INT0_CallBackPtr+0x1>
     f10:	09 95       	icall
     f12:	ff 91       	pop	r31
     f14:	ef 91       	pop	r30
     f16:	bf 91       	pop	r27
     f18:	af 91       	pop	r26
     f1a:	9f 91       	pop	r25
     f1c:	8f 91       	pop	r24
     f1e:	7f 91       	pop	r23
     f20:	6f 91       	pop	r22
     f22:	5f 91       	pop	r21
     f24:	4f 91       	pop	r20
     f26:	3f 91       	pop	r19
     f28:	2f 91       	pop	r18
     f2a:	0f 90       	pop	r0
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	0f 90       	pop	r0
     f30:	1f 90       	pop	r1
     f32:	18 95       	reti

00000f34 <__vector_2>:
     f34:	1f 92       	push	r1
     f36:	0f 92       	push	r0
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	0f 92       	push	r0
     f3c:	11 24       	eor	r1, r1
     f3e:	2f 93       	push	r18
     f40:	3f 93       	push	r19
     f42:	4f 93       	push	r20
     f44:	5f 93       	push	r21
     f46:	6f 93       	push	r22
     f48:	7f 93       	push	r23
     f4a:	8f 93       	push	r24
     f4c:	9f 93       	push	r25
     f4e:	af 93       	push	r26
     f50:	bf 93       	push	r27
     f52:	ef 93       	push	r30
     f54:	ff 93       	push	r31
     f56:	e0 91 4b 03 	lds	r30, 0x034B	; 0x80034b <INT1_CallBackPtr>
     f5a:	f0 91 4c 03 	lds	r31, 0x034C	; 0x80034c <INT1_CallBackPtr+0x1>
     f5e:	09 95       	icall
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	4f 91       	pop	r20
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <__vector_3>:
}
ISR(INT2_IRQ)
{
     f82:	1f 92       	push	r1
     f84:	0f 92       	push	r0
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	0f 92       	push	r0
     f8a:	11 24       	eor	r1, r1
     f8c:	2f 93       	push	r18
     f8e:	3f 93       	push	r19
     f90:	4f 93       	push	r20
     f92:	5f 93       	push	r21
     f94:	6f 93       	push	r22
     f96:	7f 93       	push	r23
     f98:	8f 93       	push	r24
     f9a:	9f 93       	push	r25
     f9c:	af 93       	push	r26
     f9e:	bf 93       	push	r27
     fa0:	ef 93       	push	r30
     fa2:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
     fa4:	e0 91 49 03 	lds	r30, 0x0349	; 0x800349 <INT2_CallBackPtr>
     fa8:	f0 91 4a 03 	lds	r31, 0x034A	; 0x80034a <INT2_CallBackPtr+0x1>
     fac:	09 95       	icall
}
     fae:	ff 91       	pop	r31
     fb0:	ef 91       	pop	r30
     fb2:	bf 91       	pop	r27
     fb4:	af 91       	pop	r26
     fb6:	9f 91       	pop	r25
     fb8:	8f 91       	pop	r24
     fba:	7f 91       	pop	r23
     fbc:	6f 91       	pop	r22
     fbe:	5f 91       	pop	r21
     fc0:	4f 91       	pop	r20
     fc2:	3f 91       	pop	r19
     fc4:	2f 91       	pop	r18
     fc6:	0f 90       	pop	r0
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	0f 90       	pop	r0
     fcc:	1f 90       	pop	r1
     fce:	18 95       	reti

00000fd0 <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
     fd0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     fd4:	86 30       	cpi	r24, 0x06	; 6
     fd6:	49 f0       	breq	.+18     	; 0xfea <I2C_MasterInit+0x1a>
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	81 b9       	out	0x01, r24	; 1
     fdc:	89 e0       	ldi	r24, 0x09	; 9
     fde:	80 b9       	out	0x00, r24	; 0
     fe0:	86 e0       	ldi	r24, 0x06	; 6
     fe2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <genuI2C_Status>
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	08 95       	ret
     fea:	87 e0       	ldi	r24, 0x07	; 7
     fec:	08 95       	ret

00000fee <I2C_MasterSendSTART>:
     fee:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
     ff2:	86 30       	cpi	r24, 0x06	; 6
     ff4:	59 f4       	brne	.+22     	; 0x100c <I2C_MasterSendSTART+0x1e>
     ff6:	84 ea       	ldi	r24, 0xA4	; 164
     ff8:	86 bf       	out	0x36, r24	; 54
     ffa:	06 b6       	in	r0, 0x36	; 54
     ffc:	07 fe       	sbrs	r0, 7
     ffe:	fd cf       	rjmp	.-6      	; 0xffa <I2C_MasterSendSTART+0xc>
    1000:	81 b1       	in	r24, 0x01	; 1
    1002:	88 7f       	andi	r24, 0xF8	; 248
    1004:	88 30       	cpi	r24, 0x08	; 8
    1006:	21 f0       	breq	.+8      	; 0x1010 <I2C_MasterSendSTART+0x22>
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	08 95       	ret
    100c:	85 e0       	ldi	r24, 0x05	; 5
    100e:	08 95       	ret
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	08 95       	ret

00001014 <I2C_MasterSendSlaveAddress>:
    1014:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
    1018:	96 30       	cpi	r25, 0x06	; 6
    101a:	29 f5       	brne	.+74     	; 0x1066 <I2C_MasterSendSlaveAddress+0x52>
    101c:	62 30       	cpi	r22, 0x02	; 2
    101e:	28 f5       	brcc	.+74     	; 0x106a <I2C_MasterSendSlaveAddress+0x56>
    1020:	88 23       	and	r24, r24
    1022:	2c f1       	brlt	.+74     	; 0x106e <I2C_MasterSendSlaveAddress+0x5a>
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	68 2b       	or	r22, r24
    102c:	63 b9       	out	0x03, r22	; 3
    102e:	84 e8       	ldi	r24, 0x84	; 132
    1030:	86 bf       	out	0x36, r24	; 54
    1032:	06 b6       	in	r0, 0x36	; 54
    1034:	07 fe       	sbrs	r0, 7
    1036:	fd cf       	rjmp	.-6      	; 0x1032 <I2C_MasterSendSlaveAddress+0x1e>
    1038:	81 b1       	in	r24, 0x01	; 1
    103a:	88 7f       	andi	r24, 0xF8	; 248
    103c:	88 33       	cpi	r24, 0x38	; 56
    103e:	59 f0       	breq	.+22     	; 0x1056 <I2C_MasterSendSlaveAddress+0x42>
    1040:	28 f4       	brcc	.+10     	; 0x104c <I2C_MasterSendSlaveAddress+0x38>
    1042:	88 31       	cpi	r24, 0x18	; 24
    1044:	b1 f0       	breq	.+44     	; 0x1072 <I2C_MasterSendSlaveAddress+0x5e>
    1046:	80 32       	cpi	r24, 0x20	; 32
    1048:	41 f0       	breq	.+16     	; 0x105a <I2C_MasterSendSlaveAddress+0x46>
    104a:	0b c0       	rjmp	.+22     	; 0x1062 <I2C_MasterSendSlaveAddress+0x4e>
    104c:	80 34       	cpi	r24, 0x40	; 64
    104e:	89 f0       	breq	.+34     	; 0x1072 <I2C_MasterSendSlaveAddress+0x5e>
    1050:	88 34       	cpi	r24, 0x48	; 72
    1052:	29 f0       	breq	.+10     	; 0x105e <I2C_MasterSendSlaveAddress+0x4a>
    1054:	06 c0       	rjmp	.+12     	; 0x1062 <I2C_MasterSendSlaveAddress+0x4e>
    1056:	88 e3       	ldi	r24, 0x38	; 56
    1058:	08 95       	ret
    105a:	80 e2       	ldi	r24, 0x20	; 32
    105c:	08 95       	ret
    105e:	88 e4       	ldi	r24, 0x48	; 72
    1060:	08 95       	ret
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	08 95       	ret
    1066:	85 e0       	ldi	r24, 0x05	; 5
    1068:	08 95       	ret
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	08 95       	ret
    106e:	83 e0       	ldi	r24, 0x03	; 3
    1070:	08 95       	ret
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	08 95       	ret

00001076 <I2C_MasterSendRepSTART>:
    1076:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
    107a:	86 30       	cpi	r24, 0x06	; 6
    107c:	59 f4       	brne	.+22     	; 0x1094 <I2C_MasterSendRepSTART+0x1e>
    107e:	84 ea       	ldi	r24, 0xA4	; 164
    1080:	86 bf       	out	0x36, r24	; 54
    1082:	06 b6       	in	r0, 0x36	; 54
    1084:	07 fe       	sbrs	r0, 7
    1086:	fd cf       	rjmp	.-6      	; 0x1082 <I2C_MasterSendRepSTART+0xc>
    1088:	81 b1       	in	r24, 0x01	; 1
    108a:	88 7f       	andi	r24, 0xF8	; 248
    108c:	80 31       	cpi	r24, 0x10	; 16
    108e:	21 f0       	breq	.+8      	; 0x1098 <I2C_MasterSendRepSTART+0x22>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	08 95       	ret
    1094:	85 e0       	ldi	r24, 0x05	; 5
    1096:	08 95       	ret
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	08 95       	ret

0000109c <I2C_MasterSendSTOP>:
    109c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
    10a0:	86 30       	cpi	r24, 0x06	; 6
    10a2:	39 f4       	brne	.+14     	; 0x10b2 <I2C_MasterSendSTOP+0x16>
    10a4:	84 e9       	ldi	r24, 0x94	; 148
    10a6:	86 bf       	out	0x36, r24	; 54
    10a8:	06 b6       	in	r0, 0x36	; 54
    10aa:	04 fc       	sbrc	r0, 4
    10ac:	fd cf       	rjmp	.-6      	; 0x10a8 <I2C_MasterSendSTOP+0xc>
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	08 95       	ret
    10b2:	85 e0       	ldi	r24, 0x05	; 5
    10b4:	08 95       	ret

000010b6 <I2C_MasterSendByte>:
    10b6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
    10ba:	96 30       	cpi	r25, 0x06	; 6
    10bc:	69 f4       	brne	.+26     	; 0x10d8 <I2C_MasterSendByte+0x22>
    10be:	83 b9       	out	0x03, r24	; 3
    10c0:	84 e8       	ldi	r24, 0x84	; 132
    10c2:	86 bf       	out	0x36, r24	; 54
    10c4:	06 b6       	in	r0, 0x36	; 54
    10c6:	07 fe       	sbrs	r0, 7
    10c8:	fd cf       	rjmp	.-6      	; 0x10c4 <I2C_MasterSendByte+0xe>
    10ca:	81 b1       	in	r24, 0x01	; 1
    10cc:	88 7f       	andi	r24, 0xF8	; 248
    10ce:	88 32       	cpi	r24, 0x28	; 40
    10d0:	29 f0       	breq	.+10     	; 0x10dc <I2C_MasterSendByte+0x26>
    10d2:	80 33       	cpi	r24, 0x30	; 48
    10d4:	29 f4       	brne	.+10     	; 0x10e0 <I2C_MasterSendByte+0x2a>
    10d6:	08 95       	ret
    10d8:	85 e0       	ldi	r24, 0x05	; 5
    10da:	08 95       	ret
    10dc:	88 e2       	ldi	r24, 0x28	; 40
    10de:	08 95       	ret
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	08 95       	ret

000010e4 <I2C_MasterReceiveByte_ACK>:
    10e4:	fc 01       	movw	r30, r24
    10e6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
    10ea:	96 30       	cpi	r25, 0x06	; 6
    10ec:	79 f4       	brne	.+30     	; 0x110c <I2C_MasterReceiveByte_ACK+0x28>
    10ee:	30 97       	sbiw	r30, 0x00	; 0
    10f0:	79 f0       	breq	.+30     	; 0x1110 <I2C_MasterReceiveByte_ACK+0x2c>
    10f2:	84 ec       	ldi	r24, 0xC4	; 196
    10f4:	86 bf       	out	0x36, r24	; 54
    10f6:	06 b6       	in	r0, 0x36	; 54
    10f8:	07 fe       	sbrs	r0, 7
    10fa:	fd cf       	rjmp	.-6      	; 0x10f6 <I2C_MasterReceiveByte_ACK+0x12>
    10fc:	81 b1       	in	r24, 0x01	; 1
    10fe:	88 7f       	andi	r24, 0xF8	; 248
    1100:	80 35       	cpi	r24, 0x50	; 80
    1102:	41 f4       	brne	.+16     	; 0x1114 <I2C_MasterReceiveByte_ACK+0x30>
    1104:	83 b1       	in	r24, 0x03	; 3
    1106:	80 83       	st	Z, r24
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	08 95       	ret
    110c:	85 e0       	ldi	r24, 0x05	; 5
    110e:	08 95       	ret
    1110:	84 e0       	ldi	r24, 0x04	; 4
    1112:	08 95       	ret
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	08 95       	ret

00001118 <I2C_MasterReceiveByte_NACK>:
    1118:	fc 01       	movw	r30, r24
    111a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <genuI2C_Status>
    111e:	96 30       	cpi	r25, 0x06	; 6
    1120:	79 f4       	brne	.+30     	; 0x1140 <I2C_MasterReceiveByte_NACK+0x28>
    1122:	30 97       	sbiw	r30, 0x00	; 0
    1124:	79 f0       	breq	.+30     	; 0x1144 <I2C_MasterReceiveByte_NACK+0x2c>
    1126:	84 e8       	ldi	r24, 0x84	; 132
    1128:	86 bf       	out	0x36, r24	; 54
    112a:	06 b6       	in	r0, 0x36	; 54
    112c:	07 fe       	sbrs	r0, 7
    112e:	fd cf       	rjmp	.-6      	; 0x112a <I2C_MasterReceiveByte_NACK+0x12>
    1130:	81 b1       	in	r24, 0x01	; 1
    1132:	88 7f       	andi	r24, 0xF8	; 248
    1134:	88 35       	cpi	r24, 0x58	; 88
    1136:	41 f4       	brne	.+16     	; 0x1148 <I2C_MasterReceiveByte_NACK+0x30>
    1138:	83 b1       	in	r24, 0x03	; 3
    113a:	80 83       	st	Z, r24
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	08 95       	ret
    1140:	85 e0       	ldi	r24, 0x05	; 5
    1142:	08 95       	ret
    1144:	84 e0       	ldi	r24, 0x04	; 4
    1146:	08 95       	ret
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	08 95       	ret

0000114c <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
    114c:	7f 92       	push	r7
    114e:	8f 92       	push	r8
    1150:	9f 92       	push	r9
    1152:	af 92       	push	r10
    1154:	bf 92       	push	r11
    1156:	cf 92       	push	r12
    1158:	df 92       	push	r13
    115a:	ef 92       	push	r14
    115c:	ff 92       	push	r15
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	78 2e       	mov	r7, r24
    1168:	eb 01       	movw	r28, r22
    116a:	7a 01       	movw	r14, r20
    116c:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    116e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
    1172:	86 30       	cpi	r24, 0x06	; 6
    1174:	09 f0       	breq	.+2      	; 0x1178 <I2C_MasterReceiveGeneral+0x2c>
    1176:	47 c0       	rjmp	.+142    	; 0x1206 <I2C_MasterReceiveGeneral+0xba>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
    1178:	20 97       	sbiw	r28, 0x00	; 0
    117a:	09 f4       	brne	.+2      	; 0x117e <I2C_MasterReceiveGeneral+0x32>
    117c:	46 c0       	rjmp	.+140    	; 0x120a <I2C_MasterReceiveGeneral+0xbe>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
    117e:	23 2b       	or	r18, r19
    1180:	09 f4       	brne	.+2      	; 0x1184 <I2C_MasterReceiveGeneral+0x38>
    1182:	45 c0       	rjmp	.+138    	; 0x120e <I2C_MasterReceiveGeneral+0xc2>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    1184:	77 20       	and	r7, r7
    1186:	0c f4       	brge	.+2      	; 0x118a <I2C_MasterReceiveGeneral+0x3e>
    1188:	44 c0       	rjmp	.+136    	; 0x1212 <I2C_MasterReceiveGeneral+0xc6>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    118a:	0e 94 f7 07 	call	0xfee	; 0xfee <I2C_MasterSendSTART>
    118e:	88 23       	and	r24, r24
    1190:	09 f4       	brne	.+2      	; 0x1194 <I2C_MasterReceiveGeneral+0x48>
    1192:	4a c0       	rjmp	.+148    	; 0x1228 <I2C_MasterReceiveGeneral+0xdc>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	87 2d       	mov	r24, r7
    1198:	0e 94 0a 08 	call	0x1014	; 0x1014 <I2C_MasterSendSlaveAddress>
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	d9 f5       	brne	.+118    	; 0x1216 <I2C_MasterReceiveGeneral+0xca>
    11a0:	0b c0       	rjmp	.+22     	; 0x11b8 <I2C_MasterReceiveGeneral+0x6c>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    11a2:	4e 01       	movw	r8, r28
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	88 1a       	sub	r8, r24
    11a8:	98 0a       	sbc	r9, r24
    11aa:	88 81       	ld	r24, Y
    11ac:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    11b0:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    11b2:	88 23       	and	r24, r24
    11b4:	c9 f1       	breq	.+114    	; 0x1228 <I2C_MasterReceiveGeneral+0xdc>
    11b6:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    11b8:	57 01       	movw	r10, r14
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	a8 1a       	sub	r10, r24
    11be:	b1 08       	sbc	r11, r1
    11c0:	ef 28       	or	r14, r15
    11c2:	79 f7       	brne	.-34     	; 0x11a2 <I2C_MasterReceiveGeneral+0x56>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
    11c4:	0e 94 3b 08 	call	0x1076	; 0x1076 <I2C_MasterSendRepSTART>
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	39 f5       	brne	.+78     	; 0x121a <I2C_MasterReceiveGeneral+0xce>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	87 2d       	mov	r24, r7
    11d0:	0e 94 0a 08 	call	0x1014	; 0x1014 <I2C_MasterSendSlaveAddress>
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	19 f5       	brne	.+70     	; 0x121e <I2C_MasterReceiveGeneral+0xd2>
    11d8:	08 c0       	rjmp	.+16     	; 0x11ea <I2C_MasterReceiveGeneral+0x9e>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
    11da:	e6 01       	movw	r28, r12
    11dc:	21 96       	adiw	r28, 0x01	; 1
    11de:	c6 01       	movw	r24, r12
    11e0:	0e 94 72 08 	call	0x10e4	; 0x10e4 <I2C_MasterReceiveByte_ACK>
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	e9 f4       	brne	.+58     	; 0x1222 <I2C_MasterReceiveGeneral+0xd6>
    11e8:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
    11ea:	01 50       	subi	r16, 0x01	; 1
    11ec:	11 09       	sbc	r17, r1
    11ee:	a9 f7       	brne	.-22     	; 0x11da <I2C_MasterReceiveGeneral+0x8e>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
    11f0:	c6 01       	movw	r24, r12
    11f2:	0e 94 8c 08 	call	0x1118	; 0x1118 <I2C_MasterReceiveByte_NACK>
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	b1 f4       	brne	.+44     	; 0x1226 <I2C_MasterReceiveGeneral+0xda>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
    11fa:	0e 94 4e 08 	call	0x109c	; 0x109c <I2C_MasterSendSTOP>
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	99 f0       	breq	.+38     	; 0x1228 <I2C_MasterReceiveGeneral+0xdc>
		return I2C_STATUS_ERROR_NOK;
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	11 c0       	rjmp	.+34     	; 0x1228 <I2C_MasterReceiveGeneral+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    1206:	85 e0       	ldi	r24, 0x05	; 5
    1208:	0f c0       	rjmp	.+30     	; 0x1228 <I2C_MasterReceiveGeneral+0xdc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    120a:	84 e0       	ldi	r24, 0x04	; 4
    120c:	0d c0       	rjmp	.+26     	; 0x1228 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    120e:	84 e0       	ldi	r24, 0x04	; 4
    1210:	0b c0       	rjmp	.+22     	; 0x1228 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    1212:	83 e0       	ldi	r24, 0x03	; 3
    1214:	09 c0       	rjmp	.+18     	; 0x1228 <I2C_MasterReceiveGeneral+0xdc>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	07 c0       	rjmp	.+14     	; 0x1228 <I2C_MasterReceiveGeneral+0xdc>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	05 c0       	rjmp	.+10     	; 0x1228 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	03 c0       	rjmp	.+6      	; 0x1228 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    1226:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	9f 90       	pop	r9
    123e:	8f 90       	pop	r8
    1240:	7f 90       	pop	r7
    1242:	08 95       	ret

00001244 <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
    1244:	bf 92       	push	r11
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	18 2f       	mov	r17, r24
    1258:	06 2f       	mov	r16, r22
    125a:	ea 01       	movw	r28, r20
    125c:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    125e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <genuI2C_Status>
    1262:	86 30       	cpi	r24, 0x06	; 6
    1264:	59 f5       	brne	.+86     	; 0x12bc <I2C_MasterSendToLocation+0x78>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1266:	20 97       	sbiw	r28, 0x00	; 0
    1268:	59 f1       	breq	.+86     	; 0x12c0 <I2C_MasterSendToLocation+0x7c>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    126a:	11 23       	and	r17, r17
    126c:	5c f1       	brlt	.+86     	; 0x12c4 <I2C_MasterSendToLocation+0x80>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    126e:	0e 94 f7 07 	call	0xfee	; 0xfee <I2C_MasterSendSTART>
    1272:	88 23       	and	r24, r24
    1274:	61 f1       	breq	.+88     	; 0x12ce <I2C_MasterSendToLocation+0x8a>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	81 2f       	mov	r24, r17
    127a:	0e 94 0a 08 	call	0x1014	; 0x1014 <I2C_MasterSendSlaveAddress>
    127e:	b8 2e       	mov	r11, r24
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	b8 12       	cpse	r11, r24
    1284:	21 c0       	rjmp	.+66     	; 0x12c8 <I2C_MasterSendToLocation+0x84>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1286:	80 2f       	mov	r24, r16
    1288:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <I2C_MasterSendByte>
    128c:	81 11       	cpse	r24, r1
    128e:	0c c0       	rjmp	.+24     	; 0x12a8 <I2C_MasterSendToLocation+0x64>
    1290:	1e c0       	rjmp	.+60     	; 0x12ce <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1292:	6e 01       	movw	r12, r28
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	c8 1a       	sub	r12, r24
    1298:	d8 0a       	sbc	r13, r24
    129a:	88 81       	ld	r24, Y
    129c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <I2C_MasterSendByte>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    12a0:	78 01       	movw	r14, r16
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    12a2:	88 23       	and	r24, r24
    12a4:	a1 f0       	breq	.+40     	; 0x12ce <I2C_MasterSendToLocation+0x8a>
    12a6:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    12a8:	87 01       	movw	r16, r14
    12aa:	01 50       	subi	r16, 0x01	; 1
    12ac:	11 09       	sbc	r17, r1
    12ae:	ef 28       	or	r14, r15
    12b0:	81 f7       	brne	.-32     	; 0x1292 <I2C_MasterSendToLocation+0x4e>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    12b2:	0e 94 4e 08 	call	0x109c	; 0x109c <I2C_MasterSendSTOP>
    12b6:	81 11       	cpse	r24, r1
    12b8:	09 c0       	rjmp	.+18     	; 0x12cc <I2C_MasterSendToLocation+0x88>
    12ba:	09 c0       	rjmp	.+18     	; 0x12ce <I2C_MasterSendToLocation+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    12bc:	85 e0       	ldi	r24, 0x05	; 5
    12be:	07 c0       	rjmp	.+14     	; 0x12ce <I2C_MasterSendToLocation+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    12c0:	84 e0       	ldi	r24, 0x04	; 4
    12c2:	05 c0       	rjmp	.+10     	; 0x12ce <I2C_MasterSendToLocation+0x8a>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    12c4:	83 e0       	ldi	r24, 0x03	; 3
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <I2C_MasterSendToLocation+0x8a>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
    12cc:	8b 2d       	mov	r24, r11
}
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	1f 91       	pop	r17
    12d4:	0f 91       	pop	r16
    12d6:	ff 90       	pop	r15
    12d8:	ef 90       	pop	r14
    12da:	df 90       	pop	r13
    12dc:	cf 90       	pop	r12
    12de:	bf 90       	pop	r11
    12e0:	08 95       	ret

000012e2 <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	1f 92       	push	r1
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
    12f2:	89 01       	movw	r16, r18
    12f4:	9a 01       	movw	r18, r20
    12f6:	41 e0       	ldi	r20, 0x01	; 1
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	be 01       	movw	r22, r28
    12fc:	6f 5f       	subi	r22, 0xFF	; 255
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1300:	0e 94 a6 08 	call	0x114c	; 0x114c <I2C_MasterReceiveGeneral>
}
    1304:	0f 90       	pop	r0
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	08 95       	ret

00001310 <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
    1310:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genuSpi_Status>
    1314:	87 30       	cpi	r24, 0x07	; 7
    1316:	31 f1       	breq	.+76     	; 0x1364 <Spi_init+0x54>
    1318:	87 b3       	in	r24, 0x17	; 23
    131a:	80 6b       	ori	r24, 0xB0	; 176
    131c:	87 bb       	out	0x17, r24	; 23
    131e:	87 b3       	in	r24, 0x17	; 23
    1320:	8f 7b       	andi	r24, 0xBF	; 191
    1322:	87 bb       	out	0x17, r24	; 23
    1324:	88 b3       	in	r24, 0x18	; 24
    1326:	80 61       	ori	r24, 0x10	; 16
    1328:	88 bb       	out	0x18, r24	; 24
    132a:	8d b1       	in	r24, 0x0d	; 13
    132c:	80 61       	ori	r24, 0x10	; 16
    132e:	8d b9       	out	0x0d, r24	; 13
    1330:	8d b1       	in	r24, 0x0d	; 13
    1332:	8f 7d       	andi	r24, 0xDF	; 223
    1334:	8d b9       	out	0x0d, r24	; 13
    1336:	8d b1       	in	r24, 0x0d	; 13
    1338:	87 7f       	andi	r24, 0xF7	; 247
    133a:	8d b9       	out	0x0d, r24	; 13
    133c:	8d b1       	in	r24, 0x0d	; 13
    133e:	8b 7f       	andi	r24, 0xFB	; 251
    1340:	8d b9       	out	0x0d, r24	; 13
    1342:	8d b1       	in	r24, 0x0d	; 13
    1344:	8e 7f       	andi	r24, 0xFE	; 254
    1346:	8d b9       	out	0x0d, r24	; 13
    1348:	8d b1       	in	r24, 0x0d	; 13
    134a:	8d 7f       	andi	r24, 0xFD	; 253
    134c:	8d b9       	out	0x0d, r24	; 13
    134e:	8d b1       	in	r24, 0x0d	; 13
    1350:	81 60       	ori	r24, 0x01	; 1
    1352:	8d b9       	out	0x0d, r24	; 13
    1354:	8d b1       	in	r24, 0x0d	; 13
    1356:	80 64       	ori	r24, 0x40	; 64
    1358:	8d b9       	out	0x0d, r24	; 13
    135a:	87 e0       	ldi	r24, 0x07	; 7
    135c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <genuSpi_Status>
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	08 95       	ret
    1364:	88 e0       	ldi	r24, 0x08	; 8
    1366:	08 95       	ret

00001368 <Spi_MasterSendByte>:
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	1f 92       	push	r1
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genuSpi_Status>
    1376:	97 30       	cpi	r25, 0x07	; 7
    1378:	39 f4       	brne	.+14     	; 0x1388 <Spi_MasterSendByte+0x20>
    137a:	8f b9       	out	0x0f, r24	; 15
    137c:	77 9b       	sbis	0x0e, 7	; 14
    137e:	fe cf       	rjmp	.-4      	; 0x137c <Spi_MasterSendByte+0x14>
    1380:	8f b1       	in	r24, 0x0f	; 15
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	01 c0       	rjmp	.+2      	; 0x138a <Spi_MasterSendByte+0x22>
    1388:	86 e0       	ldi	r24, 0x06	; 6
    138a:	0f 90       	pop	r0
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	08 95       	ret

00001392 <Spi_MasterSendPacket>:
    1392:	ef 92       	push	r14
    1394:	ff 92       	push	r15
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <genuSpi_Status>
    13a0:	27 30       	cpi	r18, 0x07	; 7
    13a2:	a1 f4       	brne	.+40     	; 0x13cc <Spi_MasterSendPacket+0x3a>
    13a4:	8b 01       	movw	r16, r22
    13a6:	7c 01       	movw	r14, r24
    13a8:	c0 e0       	ldi	r28, 0x00	; 0
    13aa:	09 c0       	rjmp	.+18     	; 0x13be <Spi_MasterSendPacket+0x2c>
    13ac:	f7 01       	movw	r30, r14
    13ae:	e2 0f       	add	r30, r18
    13b0:	f3 1f       	adc	r31, r19
    13b2:	80 81       	ld	r24, Z
    13b4:	0e 94 b4 09 	call	0x1368	; 0x1368 <Spi_MasterSendByte>
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	51 f4       	brne	.+20     	; 0x13d0 <Spi_MasterSendPacket+0x3e>
    13bc:	cf 5f       	subi	r28, 0xFF	; 255
    13be:	2c 2f       	mov	r18, r28
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	20 17       	cp	r18, r16
    13c4:	31 07       	cpc	r19, r17
    13c6:	90 f3       	brcs	.-28     	; 0x13ac <Spi_MasterSendPacket+0x1a>
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	03 c0       	rjmp	.+6      	; 0x13d2 <Spi_MasterSendPacket+0x40>
    13cc:	86 e0       	ldi	r24, 0x06	; 6
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <Spi_MasterSendPacket+0x40>
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	08 95       	ret

000013de <__vector_12>:


    13de:	1f 92       	push	r1
    13e0:	0f 92       	push	r0
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	0f 92       	push	r0
    13e6:	11 24       	eor	r1, r1
    13e8:	2f 93       	push	r18
    13ea:	3f 93       	push	r19
    13ec:	4f 93       	push	r20
    13ee:	5f 93       	push	r21
    13f0:	6f 93       	push	r22
    13f2:	7f 93       	push	r23
    13f4:	8f 93       	push	r24
    13f6:	9f 93       	push	r25
    13f8:	af 93       	push	r26
    13fa:	bf 93       	push	r27
    13fc:	ef 93       	push	r30
    13fe:	ff 93       	push	r31
    1400:	e0 91 4f 03 	lds	r30, 0x034F	; 0x80034f <SPI_STC_CallBackPtr>
    1404:	f0 91 50 03 	lds	r31, 0x0350	; 0x800350 <SPI_STC_CallBackPtr+0x1>
    1408:	09 95       	icall
    140a:	ff 91       	pop	r31
    140c:	ef 91       	pop	r30
    140e:	bf 91       	pop	r27
    1410:	af 91       	pop	r26
    1412:	9f 91       	pop	r25
    1414:	8f 91       	pop	r24
    1416:	7f 91       	pop	r23
    1418:	6f 91       	pop	r22
    141a:	5f 91       	pop	r21
    141c:	4f 91       	pop	r20
    141e:	3f 91       	pop	r19
    1420:	2f 91       	pop	r18
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	0f 90       	pop	r0
    1428:	1f 90       	pop	r1
    142a:	18 95       	reti

0000142c <stringLength>:
        else if(string1[u8_loopIndex] < string2[u8_loopIndex])
            return 2;
        u8_loopIndex++;
    }
    return 3;
}
    142c:	ac 01       	movw	r20, r24
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	01 c0       	rjmp	.+2      	; 0x1434 <stringLength+0x8>
    1432:	8f 5f       	subi	r24, 0xFF	; 255
    1434:	fa 01       	movw	r30, r20
    1436:	e8 0f       	add	r30, r24
    1438:	f1 1d       	adc	r31, r1
    143a:	20 81       	ld	r18, Z
    143c:	21 11       	cpse	r18, r1
    143e:	f9 cf       	rjmp	.-14     	; 0x1432 <stringLength+0x6>
    1440:	8f 5f       	subi	r24, 0xFF	; 255
    1442:	08 95       	ret

00001444 <stringCompare>:
    1444:	ff 92       	push	r15
    1446:	0f 93       	push	r16
    1448:	1f 93       	push	r17
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	8c 01       	movw	r16, r24
    1450:	eb 01       	movw	r28, r22
    1452:	0e 94 16 0a 	call	0x142c	; 0x142c <stringLength>
    1456:	f8 2e       	mov	r15, r24
    1458:	ce 01       	movw	r24, r28
    145a:	0e 94 16 0a 	call	0x142c	; 0x142c <stringLength>
    145e:	8f 15       	cp	r24, r15
    1460:	b8 f0       	brcs	.+46     	; 0x1490 <stringCompare+0x4c>
    1462:	f8 16       	cp	r15, r24
    1464:	b8 f0       	brcs	.+46     	; 0x1494 <stringCompare+0x50>
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	09 c0       	rjmp	.+18     	; 0x147c <stringCompare+0x38>
    146a:	fe 01       	movw	r30, r28
    146c:	e8 0f       	add	r30, r24
    146e:	f9 1f       	adc	r31, r25
    1470:	80 81       	ld	r24, Z
    1472:	82 17       	cp	r24, r18
    1474:	88 f0       	brcs	.+34     	; 0x1498 <stringCompare+0x54>
    1476:	28 17       	cp	r18, r24
    1478:	88 f0       	brcs	.+34     	; 0x149c <stringCompare+0x58>
    147a:	3f 5f       	subi	r19, 0xFF	; 255
    147c:	83 2f       	mov	r24, r19
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	f8 01       	movw	r30, r16
    1482:	e8 0f       	add	r30, r24
    1484:	f9 1f       	adc	r31, r25
    1486:	20 81       	ld	r18, Z
    1488:	21 11       	cpse	r18, r1
    148a:	ef cf       	rjmp	.-34     	; 0x146a <stringCompare+0x26>
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	07 c0       	rjmp	.+14     	; 0x149e <stringCompare+0x5a>
    1490:	82 e0       	ldi	r24, 0x02	; 2
    1492:	05 c0       	rjmp	.+10     	; 0x149e <stringCompare+0x5a>
    1494:	83 e0       	ldi	r24, 0x03	; 3
    1496:	03 c0       	rjmp	.+6      	; 0x149e <stringCompare+0x5a>
    1498:	82 e0       	ldi	r24, 0x02	; 2
    149a:	01 c0       	rjmp	.+2      	; 0x149e <stringCompare+0x5a>
    149c:	83 e0       	ldi	r24, 0x03	; 3
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	ff 90       	pop	r15
    14a8:	08 95       	ret

000014aa <stringConcatenate>:
    14aa:	ff 92       	push	r15
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	ec 01       	movw	r28, r24
    14b6:	8b 01       	movw	r16, r22
    14b8:	cb 01       	movw	r24, r22
    14ba:	0e 94 16 0a 	call	0x142c	; 0x142c <stringLength>
    14be:	f8 2e       	mov	r15, r24
    14c0:	ce 01       	movw	r24, r28
    14c2:	0e 94 16 0a 	call	0x142c	; 0x142c <stringLength>
    14c6:	81 50       	subi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0b c0       	rjmp	.+22     	; 0x14e2 <stringConcatenate+0x38>
    14cc:	28 0f       	add	r18, r24
    14ce:	31 1d       	adc	r19, r1
    14d0:	fe 01       	movw	r30, r28
    14d2:	e2 0f       	add	r30, r18
    14d4:	f3 1f       	adc	r31, r19
    14d6:	d8 01       	movw	r26, r16
    14d8:	a9 0f       	add	r26, r25
    14da:	b1 1d       	adc	r27, r1
    14dc:	2c 91       	ld	r18, X
    14de:	20 83       	st	Z, r18
    14e0:	9f 5f       	subi	r25, 0xFF	; 255
    14e2:	29 2f       	mov	r18, r25
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	4f 2d       	mov	r20, r15
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	41 50       	subi	r20, 0x01	; 1
    14ec:	51 09       	sbc	r21, r1
    14ee:	42 17       	cp	r20, r18
    14f0:	53 07       	cpc	r21, r19
    14f2:	64 f7       	brge	.-40     	; 0x14cc <stringConcatenate+0x22>
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
    14fa:	0f 91       	pop	r16
    14fc:	ff 90       	pop	r15
    14fe:	08 95       	ret

00001500 <EmptyString>:

void EmptyString(uint8_t *string)
{
    1500:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
    1502:	90 e0       	ldi	r25, 0x00	; 0
	while(string[u8_loopIndex] != '\0')
    1504:	02 c0       	rjmp	.+4      	; 0x150a <EmptyString+0xa>
		string[u8_loopIndex++] = '\0';
    1506:	9f 5f       	subi	r25, 0xFF	; 255
    1508:	10 82       	st	Z, r1
}

void EmptyString(uint8_t *string)
{
	uint8_t u8_loopIndex=0;
	while(string[u8_loopIndex] != '\0')
    150a:	fa 01       	movw	r30, r20
    150c:	e9 0f       	add	r30, r25
    150e:	f1 1d       	adc	r31, r1
    1510:	20 81       	ld	r18, Z
    1512:	21 11       	cpse	r18, r1
    1514:	f8 cf       	rjmp	.-16     	; 0x1506 <EmptyString+0x6>
		string[u8_loopIndex++] = '\0';
}
    1516:	08 95       	ret

00001518 <stringCopy>:

void stringCopy(uint8_t* source, uint8_t* destination)
{
    1518:	dc 01       	movw	r26, r24
    uint8_t u8_loopIndex=0;
    151a:	90 e0       	ldi	r25, 0x00	; 0
    while(source[u8_loopIndex] != '\0')
    151c:	05 c0       	rjmp	.+10     	; 0x1528 <stringCopy+0x10>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
    151e:	fb 01       	movw	r30, r22
    1520:	e2 0f       	add	r30, r18
    1522:	f3 1f       	adc	r31, r19
    1524:	40 83       	st	Z, r20
	    u8_loopIndex++;
    1526:	9f 5f       	subi	r25, 0xFF	; 255
}

void stringCopy(uint8_t* source, uint8_t* destination)
{
    uint8_t u8_loopIndex=0;
    while(source[u8_loopIndex] != '\0')
    1528:	29 2f       	mov	r18, r25
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	fd 01       	movw	r30, r26
    152e:	e2 0f       	add	r30, r18
    1530:	f3 1f       	adc	r31, r19
    1532:	40 81       	ld	r20, Z
    1534:	41 11       	cpse	r20, r1
    1536:	f3 cf       	rjmp	.-26     	; 0x151e <stringCopy+0x6>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
	    u8_loopIndex++;
    }
}
    1538:	08 95       	ret

0000153a <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    153a:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <u8_Uart_Status>
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	81 f0       	breq	.+32     	; 0x1562 <Uart_init+0x28>
    1542:	10 bc       	out	0x20, r1	; 32
    1544:	87 e6       	ldi	r24, 0x67	; 103
    1546:	89 b9       	out	0x09, r24	; 9
    1548:	82 e0       	ldi	r24, 0x02	; 2
    154a:	8b b9       	out	0x0b, r24	; 11
    154c:	88 e1       	ldi	r24, 0x18	; 24
    154e:	8a b9       	out	0x0a, r24	; 10
    1550:	80 e8       	ldi	r24, 0x80	; 128
    1552:	80 bd       	out	0x20, r24	; 32
    1554:	80 b5       	in	r24, 0x20	; 32
    1556:	86 68       	ori	r24, 0x86	; 134
    1558:	80 bd       	out	0x20, r24	; 32
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <u8_Uart_Status>
    1560:	08 95       	ret
    1562:	87 e0       	ldi	r24, 0x07	; 7
    1564:	08 95       	ret

00001566 <Uart_sendByte>:
    1566:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <u8_Uart_Status>
    156a:	99 23       	and	r25, r25
    156c:	29 f0       	breq	.+10     	; 0x1578 <Uart_sendByte+0x12>
    156e:	5d 9b       	sbis	0x0b, 5	; 11
    1570:	fe cf       	rjmp	.-4      	; 0x156e <Uart_sendByte+0x8>
    1572:	8c b9       	out	0x0c, r24	; 12
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	08 95       	ret
    1578:	86 e0       	ldi	r24, 0x06	; 6
    157a:	08 95       	ret

0000157c <Uart_sendPacket>:
    157c:	ef 92       	push	r14
    157e:	ff 92       	push	r15
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <u8_Uart_Status>
    158c:	22 23       	and	r18, r18
    158e:	99 f0       	breq	.+38     	; 0x15b6 <Uart_sendPacket+0x3a>
    1590:	8b 01       	movw	r16, r22
    1592:	7c 01       	movw	r14, r24
    1594:	c0 e0       	ldi	r28, 0x00	; 0
    1596:	d0 e0       	ldi	r29, 0x00	; 0
    1598:	09 c0       	rjmp	.+18     	; 0x15ac <Uart_sendPacket+0x30>
    159a:	f7 01       	movw	r30, r14
    159c:	ec 0f       	add	r30, r28
    159e:	fd 1f       	adc	r31, r29
    15a0:	80 81       	ld	r24, Z
    15a2:	0e 94 b3 0a 	call	0x1566	; 0x1566 <Uart_sendByte>
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	41 f4       	brne	.+16     	; 0x15ba <Uart_sendPacket+0x3e>
    15aa:	21 96       	adiw	r28, 0x01	; 1
    15ac:	c0 17       	cp	r28, r16
    15ae:	d1 07       	cpc	r29, r17
    15b0:	a0 f3       	brcs	.-24     	; 0x159a <Uart_sendPacket+0x1e>
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	03 c0       	rjmp	.+6      	; 0x15bc <Uart_sendPacket+0x40>
    15b6:	86 e0       	ldi	r24, 0x06	; 6
    15b8:	01 c0       	rjmp	.+2      	; 0x15bc <Uart_sendPacket+0x40>
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	ff 90       	pop	r15
    15c6:	ef 90       	pop	r14
    15c8:	08 95       	ret

000015ca <Uart_EnableNotification_RXC>:
    15ca:	9c 01       	movw	r18, r24
    15cc:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <u8_Uart_Status>
    15d0:	99 23       	and	r25, r25
    15d2:	61 f0       	breq	.+24     	; 0x15ec <Uart_EnableNotification_RXC+0x22>
    15d4:	21 15       	cp	r18, r1
    15d6:	31 05       	cpc	r19, r1
    15d8:	59 f0       	breq	.+22     	; 0x15f0 <Uart_EnableNotification_RXC+0x26>
    15da:	8a b1       	in	r24, 0x0a	; 10
    15dc:	80 68       	ori	r24, 0x80	; 128
    15de:	8a b9       	out	0x0a, r24	; 10
    15e0:	30 93 55 03 	sts	0x0355, r19	; 0x800355 <Uart_RXC_CallBackPtr+0x1>
    15e4:	20 93 54 03 	sts	0x0354, r18	; 0x800354 <Uart_RXC_CallBackPtr>
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	08 95       	ret
    15ec:	86 e0       	ldi	r24, 0x06	; 6
    15ee:	08 95       	ret
    15f0:	85 e0       	ldi	r24, 0x05	; 5
    15f2:	08 95       	ret

000015f4 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    15f4:	8c b1       	in	r24, 0x0c	; 12
}
    15f6:	08 95       	ret

000015f8 <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    15f8:	1f 92       	push	r1
    15fa:	0f 92       	push	r0
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	0f 92       	push	r0
    1600:	11 24       	eor	r1, r1
    1602:	2f 93       	push	r18
    1604:	3f 93       	push	r19
    1606:	4f 93       	push	r20
    1608:	5f 93       	push	r21
    160a:	6f 93       	push	r22
    160c:	7f 93       	push	r23
    160e:	8f 93       	push	r24
    1610:	9f 93       	push	r25
    1612:	af 93       	push	r26
    1614:	bf 93       	push	r27
    1616:	ef 93       	push	r30
    1618:	ff 93       	push	r31
    161a:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <Uart_TXC_CallBackPtr>
    161e:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <Uart_TXC_CallBackPtr+0x1>
    1622:	09 95       	icall
    1624:	ff 91       	pop	r31
    1626:	ef 91       	pop	r30
    1628:	bf 91       	pop	r27
    162a:	af 91       	pop	r26
    162c:	9f 91       	pop	r25
    162e:	8f 91       	pop	r24
    1630:	7f 91       	pop	r23
    1632:	6f 91       	pop	r22
    1634:	5f 91       	pop	r21
    1636:	4f 91       	pop	r20
    1638:	3f 91       	pop	r19
    163a:	2f 91       	pop	r18
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	0f 90       	pop	r0
    1642:	1f 90       	pop	r1
    1644:	18 95       	reti

00001646 <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    1646:	1f 92       	push	r1
    1648:	0f 92       	push	r0
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	0f 92       	push	r0
    164e:	11 24       	eor	r1, r1
    1650:	2f 93       	push	r18
    1652:	3f 93       	push	r19
    1654:	4f 93       	push	r20
    1656:	5f 93       	push	r21
    1658:	6f 93       	push	r22
    165a:	7f 93       	push	r23
    165c:	8f 93       	push	r24
    165e:	9f 93       	push	r25
    1660:	af 93       	push	r26
    1662:	bf 93       	push	r27
    1664:	ef 93       	push	r30
    1666:	ff 93       	push	r31
    1668:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <Uart_RXC_CallBackPtr>
    166c:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <Uart_RXC_CallBackPtr+0x1>
    1670:	09 95       	icall
    1672:	ff 91       	pop	r31
    1674:	ef 91       	pop	r30
    1676:	bf 91       	pop	r27
    1678:	af 91       	pop	r26
    167a:	9f 91       	pop	r25
    167c:	8f 91       	pop	r24
    167e:	7f 91       	pop	r23
    1680:	6f 91       	pop	r22
    1682:	5f 91       	pop	r21
    1684:	4f 91       	pop	r20
    1686:	3f 91       	pop	r19
    1688:	2f 91       	pop	r18
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	0f 90       	pop	r0
    1690:	1f 90       	pop	r1
    1692:	18 95       	reti

00001694 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    1694:	1f 92       	push	r1
    1696:	0f 92       	push	r0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	0f 92       	push	r0
    169c:	11 24       	eor	r1, r1
    169e:	2f 93       	push	r18
    16a0:	3f 93       	push	r19
    16a2:	4f 93       	push	r20
    16a4:	5f 93       	push	r21
    16a6:	6f 93       	push	r22
    16a8:	7f 93       	push	r23
    16aa:	8f 93       	push	r24
    16ac:	9f 93       	push	r25
    16ae:	af 93       	push	r26
    16b0:	bf 93       	push	r27
    16b2:	ef 93       	push	r30
    16b4:	ff 93       	push	r31
    16b6:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <Uart_UDRE_CallBackPtr>
    16ba:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <Uart_UDRE_CallBackPtr+0x1>
    16be:	09 95       	icall
    16c0:	ff 91       	pop	r31
    16c2:	ef 91       	pop	r30
    16c4:	bf 91       	pop	r27
    16c6:	af 91       	pop	r26
    16c8:	9f 91       	pop	r25
    16ca:	8f 91       	pop	r24
    16cc:	7f 91       	pop	r23
    16ce:	6f 91       	pop	r22
    16d0:	5f 91       	pop	r21
    16d2:	4f 91       	pop	r20
    16d4:	3f 91       	pop	r19
    16d6:	2f 91       	pop	r18
    16d8:	0f 90       	pop	r0
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	0f 90       	pop	r0
    16de:	1f 90       	pop	r1
    16e0:	18 95       	reti

000016e2 <__adddi3_s8>:
    16e2:	00 24       	eor	r0, r0
    16e4:	a7 fd       	sbrc	r26, 7
    16e6:	00 94       	com	r0
    16e8:	2a 0f       	add	r18, r26
    16ea:	30 1d       	adc	r19, r0
    16ec:	40 1d       	adc	r20, r0
    16ee:	50 1d       	adc	r21, r0
    16f0:	60 1d       	adc	r22, r0
    16f2:	70 1d       	adc	r23, r0
    16f4:	80 1d       	adc	r24, r0
    16f6:	90 1d       	adc	r25, r0
    16f8:	08 95       	ret

000016fa <__cmpdi2>:
    16fa:	2a 15       	cp	r18, r10
    16fc:	3b 05       	cpc	r19, r11
    16fe:	4c 05       	cpc	r20, r12
    1700:	5d 05       	cpc	r21, r13
    1702:	6e 05       	cpc	r22, r14
    1704:	7f 05       	cpc	r23, r15
    1706:	80 07       	cpc	r24, r16
    1708:	91 07       	cpc	r25, r17
    170a:	08 95       	ret

0000170c <_exit>:
    170c:	f8 94       	cli

0000170e <__stop_program>:
    170e:	ff cf       	rjmp	.-2      	; 0x170e <__stop_program>
