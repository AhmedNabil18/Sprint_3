
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000047e  00800060  00003e06  00003e9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000017b  008004de  008004de  00004318  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004318  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f0  00000000  00000000  00004384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007273  00000000  00000000  00004a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e86  00000000  00000000  0000bce7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000044b7  00000000  00000000  0000db6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001674  00000000  00000000  00012024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c30  00000000  00000000  00013698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005e7f  00000000  00000000  000162c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c0  00000000  00000000  0001c147  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <__vector_1>
       8:	0c 94 0d 13 	jmp	0x261a	; 0x261a <__vector_2>
       c:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__vector_3>
      10:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__vector_4>
      14:	0c 94 69 15 	jmp	0x2ad2	; 0x2ad2 <__vector_5>
      18:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <__vector_6>
      1c:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__vector_7>
      20:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__vector_8>
      24:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__vector_9>
      28:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <__vector_10>
      2c:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__vector_11>
      30:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__vector_12>
      34:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <__vector_13>
      38:	0c 94 34 1c 	jmp	0x3868	; 0x3868 <__vector_14>
      3c:	0c 94 e6 1b 	jmp	0x37cc	; 0x37cc <__vector_15>
      40:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__vector_16>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	99 1a       	sub	r9, r25
      56:	a5 1a       	sub	r10, r21
      58:	9c 1a       	sub	r9, r28
      5a:	9f 1a       	sub	r9, r31
      5c:	a2 1a       	sub	r10, r18
      5e:	99 1a       	sub	r9, r25
      60:	99 1a       	sub	r9, r25

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	14 e0       	ldi	r17, 0x04	; 4
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e6 e0       	ldi	r30, 0x06	; 6
      76:	fe e3       	ldi	r31, 0x3E	; 62
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	ae 3d       	cpi	r26, 0xDE	; 222
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	26 e0       	ldi	r18, 0x06	; 6
      86:	ae ed       	ldi	r26, 0xDE	; 222
      88:	b4 e0       	ldi	r27, 0x04	; 4
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a9 35       	cpi	r26, 0x59	; 89
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <main>
      98:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <AppADMIN_saveNewCustomerData>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save PAN and Balance of a new Customer in the EEPROM
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveNewCustomerData(void)
{
      a0:	cf 93       	push	r28
      a2:	df 93       	push	r29
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
      a4:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <gu8_registeredAccNum>
      a8:	29 2f       	mov	r18, r25
      aa:	30 e0       	ldi	r19, 0x00	; 0
      ac:	2f 5f       	subi	r18, 0xFF	; 255
      ae:	3f 4f       	sbci	r19, 0xFF	; 255
      b0:	d2 2f       	mov	r29, r18
      b2:	d2 95       	swap	r29
      b4:	dd 0f       	add	r29, r29
      b6:	d0 7e       	andi	r29, 0xE0	; 224
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
      b8:	92 95       	swap	r25
      ba:	99 0f       	add	r25, r25
      bc:	90 7e       	andi	r25, 0xE0	; 224
      be:	c0 e3       	ldi	r28, 0x30	; 48
      c0:	c9 0f       	add	r28, r25
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
      c2:	8b ef       	ldi	r24, 0xFB	; 251
      c4:	94 e0       	ldi	r25, 0x04	; 4
      c6:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <stringLength>
      ca:	48 2f       	mov	r20, r24
      cc:	50 e0       	ldi	r21, 0x00	; 0
      ce:	6b ef       	ldi	r22, 0xFB	; 251
      d0:	74 e0       	ldi	r23, 0x04	; 4
      d2:	8d 2f       	mov	r24, r29
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <Eeprom_24_writePacket>
      da:	81 30       	cpi	r24, 0x01	; 1
      dc:	d9 f4       	brne	.+54     	; 0x114 <AppADMIN_saveNewCustomerData+0x74>
		return APP_STATUS_ERROR_NOK;
	
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
      de:	85 e0       	ldi	r24, 0x05	; 5
      e0:	95 e0       	ldi	r25, 0x05	; 5
      e2:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <stringLength>
      e6:	48 2f       	mov	r20, r24
      e8:	50 e0       	ldi	r21, 0x00	; 0
      ea:	65 e0       	ldi	r22, 0x05	; 5
      ec:	75 e0       	ldi	r23, 0x05	; 5
      ee:	8c 2f       	mov	r24, r28
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	0e 94 e6 09 	call	0x13cc	; 0x13cc <Eeprom_24_writePacket>
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	79 f4       	brne	.+30     	; 0x118 <AppADMIN_saveNewCustomerData+0x78>
		return APP_STATUS_ERROR_NOK;
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
      fa:	60 91 f9 04 	lds	r22, 0x04F9	; 0x8004f9 <gu8_registeredAccNum>
      fe:	6f 5f       	subi	r22, 0xFF	; 255
     100:	60 93 f9 04 	sts	0x04F9, r22	; 0x8004f9 <gu8_registeredAccNum>
     104:	82 e0       	ldi	r24, 0x02	; 2
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 f7 08 	call	0x11ee	; 0x11ee <Eeprom_24_writeByte>
     10c:	81 30       	cpi	r24, 0x01	; 1
     10e:	31 f0       	breq	.+12     	; 0x11c <AppADMIN_saveNewCustomerData+0x7c>
		return APP_STATUS_ERROR_NOK;
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	05 c0       	rjmp	.+10     	; 0x11e <AppADMIN_saveNewCustomerData+0x7e>
{
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	03 c0       	rjmp	.+6      	; 0x11e <AppADMIN_saveNewCustomerData+0x7e>
	
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	01 c0       	rjmp	.+2      	; 0x11e <AppADMIN_saveNewCustomerData+0x7e>
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     11c:	81 e0       	ldi	r24, 0x01	; 1
}
     11e:	df 91       	pop	r29
     120:	cf 91       	pop	r28
     122:	08 95       	ret

00000124 <AppUSER_displayTemp>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to display the temperature.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_displayTemp(void)
{
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	1f 92       	push	r1
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_currentTemp=0;
     12e:	19 82       	std	Y+1, r1	; 0x01
	gu8_displayFlag = DISPLAY_TEMP;
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <gu8_displayFlag>
	Lcd_clear();
     136:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd_setCursor>
     142:	81 30       	cpi	r24, 0x01	; 1
     144:	f9 f4       	brne	.+62     	; 0x184 <AppUSER_displayTemp+0x60>
	return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
     146:	87 ed       	ldi	r24, 0xD7	; 215
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_printString>
     14e:	81 30       	cpi	r24, 0x01	; 1
     150:	d9 f4       	brne	.+54     	; 0x188 <AppUSER_displayTemp+0x64>
	return APP_STATUS_ERROR_NOK;
	if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
     152:	ce 01       	movw	r24, r28
     154:	01 96       	adiw	r24, 0x01	; 1
     156:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LM35_readTemp>
     15a:	81 30       	cpi	r24, 0x01	; 1
     15c:	59 f4       	brne	.+22     	; 0x174 <AppUSER_displayTemp+0x50>
	{
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     15e:	60 e0       	ldi	r22, 0x00	; 0
     160:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd_setCursor>
     164:	81 30       	cpi	r24, 0x01	; 1
     166:	91 f4       	brne	.+36     	; 0x18c <AppUSER_displayTemp+0x68>
		return APP_STATUS_ERROR_NOK;
		if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <Lcd_printDecimal>
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	71 f4       	brne	.+28     	; 0x190 <AppUSER_displayTemp+0x6c>
		return APP_STATUS_ERROR_NOK;
	}
	if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
     174:	88 ee       	ldi	r24, 0xE8	; 232
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_printString>
     17c:	81 30       	cpi	r24, 0x01	; 1
     17e:	51 f0       	breq	.+20     	; 0x194 <AppUSER_displayTemp+0x70>
	return APP_STATUS_ERROR_NOK;
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	09 c0       	rjmp	.+18     	; 0x196 <AppUSER_displayTemp+0x72>
{
	uint8_t u8_currentTemp=0;
	gu8_displayFlag = DISPLAY_TEMP;
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	07 c0       	rjmp	.+14     	; 0x196 <AppUSER_displayTemp+0x72>
	if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	05 c0       	rjmp	.+10     	; 0x196 <AppUSER_displayTemp+0x72>
	if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
	{
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	03 c0       	rjmp	.+6      	; 0x196 <AppUSER_displayTemp+0x72>
		if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	01 c0       	rjmp	.+2      	; 0x196 <AppUSER_displayTemp+0x72>
	}
	if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	return APP_STATUS_ERROR_OK;
     194:	81 e0       	ldi	r24, 0x01	; 1
}
     196:	0f 90       	pop	r0
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	08 95       	ret

0000019e <AppUSER_checkPan>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
     1a8:	2a 97       	sbiw	r28, 0x0a	; 10
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	f8 94       	cli
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	0f be       	out	0x3f, r0	; 63
     1b2:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
     1b4:	fe 01       	movw	r30, r28
     1b6:	31 96       	adiw	r30, 0x01	; 1
     1b8:	8a e0       	ldi	r24, 0x0A	; 10
     1ba:	df 01       	movw	r26, r30
     1bc:	1d 92       	st	X+, r1
     1be:	8a 95       	dec	r24
     1c0:	e9 f7       	brne	.-6      	; 0x1bc <AppUSER_checkPan+0x1e>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     1c2:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <gu8_clientIndex>
     1c6:	1c c0       	rjmp	.+56     	; 0x200 <AppUSER_checkPan+0x62>
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	01 96       	adiw	r24, 0x01	; 1
     1cc:	82 95       	swap	r24
     1ce:	88 0f       	add	r24, r24
     1d0:	80 7e       	andi	r24, 0xE0	; 224
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     1d2:	4a e0       	ldi	r20, 0x0A	; 10
     1d4:	50 e0       	ldi	r21, 0x00	; 0
     1d6:	be 01       	movw	r22, r28
     1d8:	6f 5f       	subi	r22, 0xFF	; 255
     1da:	7f 4f       	sbci	r23, 0xFF	; 255
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 bf 0a 	call	0x157e	; 0x157e <Eeprom_24_readPacket>
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	81 f5       	brne	.+96     	; 0x246 <AppUSER_checkPan+0xa8>
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
     1e6:	67 e1       	ldi	r22, 0x17	; 23
     1e8:	75 e0       	ldi	r23, 0x05	; 5
     1ea:	ce 01       	movw	r24, r28
     1ec:	01 96       	adiw	r24, 0x01	; 1
     1ee:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <stringCompare>
     1f2:	81 30       	cpi	r24, 0x01	; 1
     1f4:	69 f0       	breq	.+26     	; 0x210 <AppUSER_checkPan+0x72>
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     1f6:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <gu8_clientIndex>
     1fa:	8f 5f       	subi	r24, 0xFF	; 255
     1fc:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <gu8_clientIndex>
     200:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <gu8_clientIndex>
     204:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <gu8_registeredAccNum>
     208:	89 17       	cp	r24, r25
     20a:	f0 f2       	brcs	.-68     	; 0x1c8 <AppUSER_checkPan+0x2a>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	01 c0       	rjmp	.+2      	; 0x212 <AppUSER_checkPan+0x74>
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
		{
			u8_panFound = 1;
     210:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
	
	if(u8_panFound == 1)
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	d1 f4       	brne	.+52     	; 0x24a <AppUSER_checkPan+0xac>
	{
		uint8_t u8_clientBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     216:	10 91 eb 04 	lds	r17, 0x04EB	; 0x8004eb <gu8_clientIndex>
     21a:	12 95       	swap	r17
     21c:	11 0f       	add	r17, r17
     21e:	10 7e       	andi	r17, 0xE0	; 224
     220:	10 5d       	subi	r17, 0xD0	; 208
			
		stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
     222:	6b ef       	ldi	r22, 0xFB	; 251
     224:	74 e0       	ldi	r23, 0x04	; 4
     226:	ce 01       	movw	r24, r28
     228:	01 96       	adiw	r24, 0x01	; 1
     22a:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <stringCopy>
			
		if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     22e:	48 e0       	ldi	r20, 0x08	; 8
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	65 e0       	ldi	r22, 0x05	; 5
     234:	75 e0       	ldi	r23, 0x05	; 5
     236:	81 2f       	mov	r24, r17
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 bf 0a 	call	0x157e	; 0x157e <Eeprom_24_readPacket>
     23e:	81 30       	cpi	r24, 0x01	; 1
     240:	31 f0       	breq	.+12     	; 0x24e <AppUSER_checkPan+0xb0>
			return APP_STATUS_ERROR_NOK;
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	05 c0       	rjmp	.+10     	; 0x250 <AppUSER_checkPan+0xb2>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	03 c0       	rjmp	.+6      	; 0x250 <AppUSER_checkPan+0xb2>
			return APP_STATUS_ERROR_NOK;
			
		return APP_STATUS_PAN_FOUND;
	}

	return APP_STATUS_PAN_NOT_FOUND;
     24a:	8b e0       	ldi	r24, 0x0B	; 11
     24c:	01 c0       	rjmp	.+2      	; 0x250 <AppUSER_checkPan+0xb2>
		stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
			
		if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
			
		return APP_STATUS_PAN_FOUND;
     24e:	8a e0       	ldi	r24, 0x0A	; 10
	}

	return APP_STATUS_PAN_NOT_FOUND;
}
     250:	2a 96       	adiw	r28, 0x0a	; 10
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	f8 94       	cli
     256:	de bf       	out	0x3e, r29	; 62
     258:	0f be       	out	0x3f, r0	; 63
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	1f 91       	pop	r17
     262:	08 95       	ret

00000264 <AppUSER_ReportKeypad>:
* Parameters (out): pu8_key - Pointer to variable to hold the button pressed
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the value pressed in the keypad.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_ReportKeypad(uint8_t* pu8_key)
{
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	ec 01       	movw	r28, r24
	static uint8_t u8_index = 0;
	static uint8_t sau8_data[10]={0};
	enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&sau8_data[u8_index]);
     26a:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <u8_index.2258>
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	81 52       	subi	r24, 0x21	; 33
     272:	9b 4f       	sbci	r25, 0xFB	; 251
     274:	0e 94 8c 0b 	call	0x1718	; 0x1718 <Keypad_readKey>
		
	if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
     278:	86 30       	cpi	r24, 0x06	; 6
     27a:	09 f0       	breq	.+2      	; 0x27e <AppUSER_ReportKeypad+0x1a>
     27c:	74 c0       	rjmp	.+232    	; 0x366 <AppUSER_ReportKeypad+0x102>
	{
		if(sau8_data[u8_index] == '=')
     27e:	60 91 e9 04 	lds	r22, 0x04E9	; 0x8004e9 <u8_index.2258>
     282:	86 2f       	mov	r24, r22
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	fc 01       	movw	r30, r24
     288:	e1 52       	subi	r30, 0x21	; 33
     28a:	fb 4f       	sbci	r31, 0xFB	; 251
     28c:	20 81       	ld	r18, Z
     28e:	2d 33       	cpi	r18, 0x3D	; 61
     290:	09 f5       	brne	.+66     	; 0x2d4 <AppUSER_ReportKeypad+0x70>
		{
			sau8_data[u8_index] = '\0';
     292:	fc 01       	movw	r30, r24
     294:	e1 52       	subi	r30, 0x21	; 33
     296:	fb 4f       	sbci	r31, 0xFB	; 251
     298:	10 82       	st	Z, r1
			u8_index = 0;
     29a:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <u8_index.2258>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     29e:	66 e0       	ldi	r22, 0x06	; 6
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd_setCursor>
     2a6:	81 30       	cpi	r24, 0x01	; 1
     2a8:	09 f0       	breq	.+2      	; 0x2ac <AppUSER_ReportKeypad+0x48>
     2aa:	5f c0       	rjmp	.+190    	; 0x36a <AppUSER_ReportKeypad+0x106>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
     2ac:	87 ef       	ldi	r24, 0xF7	; 247
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_printString>
     2b4:	81 30       	cpi	r24, 0x01	; 1
     2b6:	09 f0       	breq	.+2      	; 0x2ba <AppUSER_ReportKeypad+0x56>
     2b8:	5a c0       	rjmp	.+180    	; 0x36e <AppUSER_ReportKeypad+0x10a>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     2ba:	66 e0       	ldi	r22, 0x06	; 6
     2bc:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd_setCursor>
     2c0:	81 30       	cpi	r24, 0x01	; 1
     2c2:	09 f0       	breq	.+2      	; 0x2c6 <AppUSER_ReportKeypad+0x62>
     2c4:	56 c0       	rjmp	.+172    	; 0x372 <AppUSER_ReportKeypad+0x10e>
			return APP_STATUS_ERROR_NOK;
			stringCopy(sau8_data, pu8_key);
     2c6:	be 01       	movw	r22, r28
     2c8:	8f ed       	ldi	r24, 0xDF	; 223
     2ca:	94 e0       	ldi	r25, 0x04	; 4
     2cc:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <stringCopy>
			return APP_STATUS_KPD_NUM;
     2d0:	87 e0       	ldi	r24, 0x07	; 7
     2d2:	5a c0       	rjmp	.+180    	; 0x388 <AppUSER_ReportKeypad+0x124>
		}else if(sau8_data[u8_index] == '-')
     2d4:	2d 32       	cpi	r18, 0x2D	; 45
     2d6:	b1 f4       	brne	.+44     	; 0x304 <AppUSER_ReportKeypad+0xa0>
		{
			u8_index--;
     2d8:	ef ef       	ldi	r30, 0xFF	; 255
     2da:	e6 0f       	add	r30, r22
     2dc:	e0 93 e9 04 	sts	0x04E9, r30	; 0x8004e9 <u8_index.2258>
			sau8_data[u8_index] = '\0';
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	e1 52       	subi	r30, 0x21	; 33
     2e4:	fb 4f       	sbci	r31, 0xFB	; 251
     2e6:	10 82       	st	Z, r1
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     2e8:	6b 5f       	subi	r22, 0xFB	; 251
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd_setCursor>
     2f0:	81 30       	cpi	r24, 0x01	; 1
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <AppUSER_ReportKeypad+0x92>
     2f4:	40 c0       	rjmp	.+128    	; 0x376 <AppUSER_ReportKeypad+0x112>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_printChar(' ') != LCD_STATUS_ERROR_OK)
     2f6:	80 e2       	ldi	r24, 0x20	; 32
     2f8:	0e 94 c5 0c 	call	0x198a	; 0x198a <Lcd_printChar>
     2fc:	81 30       	cpi	r24, 0x01	; 1
     2fe:	e9 f1       	breq	.+122    	; 0x37a <AppUSER_ReportKeypad+0x116>
			return APP_STATUS_ERROR_NOK;
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	42 c0       	rjmp	.+132    	; 0x388 <AppUSER_ReportKeypad+0x124>
		}else
		{
			if(u8_index!=10)
     304:	6a 30       	cpi	r22, 0x0A	; 10
     306:	49 f1       	breq	.+82     	; 0x35a <AppUSER_ReportKeypad+0xf6>
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     308:	6a 5f       	subi	r22, 0xFA	; 250
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd_setCursor>
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	a9 f5       	brne	.+106    	; 0x37e <AppUSER_ReportKeypad+0x11a>
					return APP_STATUS_ERROR_NOK;
				if(Kpd_enablePass == 0)
     314:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <Kpd_enablePass>
     318:	81 11       	cpse	r24, r1
     31a:	0b c0       	rjmp	.+22     	; 0x332 <AppUSER_ReportKeypad+0xce>
				{
					if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
     31c:	e0 91 e9 04 	lds	r30, 0x04E9	; 0x8004e9 <u8_index.2258>
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	e1 52       	subi	r30, 0x21	; 33
     324:	fb 4f       	sbci	r31, 0xFB	; 251
     326:	80 81       	ld	r24, Z
     328:	0e 94 c5 0c 	call	0x198a	; 0x198a <Lcd_printChar>
     32c:	81 30       	cpi	r24, 0x01	; 1
     32e:	49 f5       	brne	.+82     	; 0x382 <AppUSER_ReportKeypad+0x11e>
     330:	0d c0       	rjmp	.+26     	; 0x34c <AppUSER_ReportKeypad+0xe8>
						return APP_STATUS_ERROR_NOK;
				}
				else
				{
					if(u8_index < 4)
     332:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <u8_index.2258>
     336:	84 30       	cpi	r24, 0x04	; 4
     338:	30 f4       	brcc	.+12     	; 0x346 <AppUSER_ReportKeypad+0xe2>
					{
						if(Lcd_printChar('*') != LCD_STATUS_ERROR_OK)
     33a:	8a e2       	ldi	r24, 0x2A	; 42
     33c:	0e 94 c5 0c 	call	0x198a	; 0x198a <Lcd_printChar>
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	09 f5       	brne	.+66     	; 0x386 <AppUSER_ReportKeypad+0x122>
     344:	03 c0       	rjmp	.+6      	; 0x34c <AppUSER_ReportKeypad+0xe8>
							return APP_STATUS_ERROR_NOK;
					}else
					{
						u8_index--;
     346:	81 50       	subi	r24, 0x01	; 1
     348:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <u8_index.2258>
					}
				}
				u8_index++;
     34c:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <u8_index.2258>
     350:	8f 5f       	subi	r24, 0xFF	; 255
     352:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <u8_index.2258>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	17 c0       	rjmp	.+46     	; 0x388 <AppUSER_ReportKeypad+0x124>
					}
				}
				u8_index++;
			}else
			{
				sau8_data[u8_index] = '\0';
     35a:	fc 01       	movw	r30, r24
     35c:	e1 52       	subi	r30, 0x21	; 33
     35e:	fb 4f       	sbci	r31, 0xFB	; 251
     360:	10 82       	st	Z, r1
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	11 c0       	rjmp	.+34     	; 0x388 <AppUSER_ReportKeypad+0x124>
			}
				
		}
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	0f c0       	rjmp	.+30     	; 0x388 <AppUSER_ReportKeypad+0x124>
		if(sau8_data[u8_index] == '=')
		{
			sau8_data[u8_index] = '\0';
			u8_index = 0;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	0d c0       	rjmp	.+26     	; 0x388 <AppUSER_ReportKeypad+0x124>
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	0b c0       	rjmp	.+22     	; 0x388 <AppUSER_ReportKeypad+0x124>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	09 c0       	rjmp	.+18     	; 0x388 <AppUSER_ReportKeypad+0x124>
		}else if(sau8_data[u8_index] == '-')
		{
			u8_index--;
			sau8_data[u8_index] = '\0';
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	07 c0       	rjmp	.+14     	; 0x388 <AppUSER_ReportKeypad+0x124>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	05 c0       	rjmp	.+10     	; 0x388 <AppUSER_ReportKeypad+0x124>
		}else
		{
			if(u8_index!=10)
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	03 c0       	rjmp	.+6      	; 0x388 <AppUSER_ReportKeypad+0x124>
				if(Kpd_enablePass == 0)
				{
					if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	01 c0       	rjmp	.+2      	; 0x388 <AppUSER_ReportKeypad+0x124>
				else
				{
					if(u8_index < 4)
					{
						if(Lcd_printChar('*') != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
     386:	80 e0       	ldi	r24, 0x00	; 0
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
}
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <AppUSER_startTransaction>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startTransaction(void)
{
     38e:	4f 92       	push	r4
     390:	5f 92       	push	r5
     392:	6f 92       	push	r6
     394:	7f 92       	push	r7
     396:	8f 92       	push	r8
     398:	9f 92       	push	r9
     39a:	af 92       	push	r10
     39c:	bf 92       	push	r11
     39e:	cf 92       	push	r12
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	28 97       	sbiw	r28, 0x08	; 8
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_inputKPD[8] = {0};
     3bc:	fe 01       	movw	r30, r28
     3be:	31 96       	adiw	r30, 0x01	; 1
     3c0:	88 e0       	ldi	r24, 0x08	; 8
     3c2:	df 01       	movw	r26, r30
     3c4:	1d 92       	st	X+, r1
     3c6:	8a 95       	dec	r24
     3c8:	e9 f7       	brne	.-6      	; 0x3c4 <AppUSER_startTransaction+0x36>
	enuApp_Status_t KeypdaStatus = 0;
	float32_t f32_balance = stringToFloat(gstr_clientdata.au8_Balance);
     3ca:	85 e0       	ldi	r24, 0x05	; 5
     3cc:	95 e0       	ldi	r25, 0x05	; 5
     3ce:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <stringToFloat>
     3d2:	2b 01       	movw	r4, r22
     3d4:	3c 01       	movw	r6, r24
	float32_t f32_maxAmount = stringToFloat(gau8_maxAmount);
     3d6:	8c ee       	ldi	r24, 0xEC	; 236
     3d8:	94 e0       	ldi	r25, 0x04	; 4
     3da:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <stringToFloat>
     3de:	4b 01       	movw	r8, r22
     3e0:	5c 01       	movw	r10, r24
	float32_t f32_amount = 0;
	while(1)
	{
		EmptyString(au8_inputKPD);
     3e2:	ce 01       	movw	r24, r28
     3e4:	01 96       	adiw	r24, 0x01	; 1
     3e6:	0e 94 ef 17 	call	0x2fde	; 0x2fde <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     3ea:	ce 01       	movw	r24, r28
     3ec:	01 96       	adiw	r24, 0x01	; 1
     3ee:	0e 94 32 01 	call	0x264	; 0x264 <AppUSER_ReportKeypad>
		
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     3f2:	87 30       	cpi	r24, 0x07	; 7
     3f4:	09 f0       	breq	.+2      	; 0x3f8 <AppUSER_startTransaction+0x6a>
     3f6:	b6 c0       	rjmp	.+364    	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
		{
			
			f32_amount = stringToFloat(au8_inputKPD);
     3f8:	ce 01       	movw	r24, r28
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <stringToFloat>
     400:	6b 01       	movw	r12, r22
     402:	7c 01       	movw	r14, r24
			
			if(f32_maxAmount < f32_amount)
     404:	9b 01       	movw	r18, r22
     406:	ac 01       	movw	r20, r24
     408:	c5 01       	movw	r24, r10
     40a:	b4 01       	movw	r22, r8
     40c:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__cmpsf2>
     410:	88 23       	and	r24, r24
     412:	0c f5       	brge	.+66     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			{
				Lcd_printLCD((uint8_t*)"   Max Amount", (uint8_t*)"    Exceeded");
     414:	6a ef       	ldi	r22, 0xFA	; 250
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	87 e0       	ldi	r24, 0x07	; 7
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
				
				Delay_ms(500);
     420:	24 ef       	ldi	r18, 0xF4	; 244
     422:	31 e0       	ldi	r19, 0x01	; 1
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
				
				Lcd_clear();
     434:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd_setCursor>
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	09 f0       	breq	.+2      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     444:	9a c0       	rjmp	.+308    	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     446:	85 e1       	ldi	r24, 0x15	; 21
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_printString>
     44e:	81 30       	cpi	r24, 0x01	; 1
     450:	09 f4       	brne	.+2      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     452:	88 c0       	rjmp	.+272    	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
     454:	94 c0       	rjmp	.+296    	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
				return APP_STATUS_ERROR_NOK;
			}else
			{
			Lcd_printLCD((uint8_t*)"  Please Wait", (uint8_t*)" Processing....");
     456:	62 e2       	ldi	r22, 0x22	; 34
     458:	71 e0       	ldi	r23, 0x01	; 1
     45a:	82 e3       	ldi	r24, 0x32	; 50
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
				
			if(f32_balance < f32_amount)
     462:	a7 01       	movw	r20, r14
     464:	96 01       	movw	r18, r12
     466:	c3 01       	movw	r24, r6
     468:	b2 01       	movw	r22, r4
     46a:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__cmpsf2>
     46e:	88 23       	and	r24, r24
     470:	0c f5       	brge	.+66     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
			{
				Lcd_printLCD((uint8_t*)"  Insufficient", (uint8_t*)"      Fund");
     472:	60 e4       	ldi	r22, 0x40	; 64
     474:	71 e0       	ldi	r23, 0x01	; 1
     476:	8b e4       	ldi	r24, 0x4B	; 75
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
					
				Delay_ms(500);
     47e:	24 ef       	ldi	r18, 0xF4	; 244
     480:	31 e0       	ldi	r19, 0x01	; 1
     482:	40 e0       	ldi	r20, 0x00	; 0
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
					
				Lcd_clear();
     492:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd_setCursor>
     49e:	81 30       	cpi	r24, 0x01	; 1
     4a0:	09 f0       	breq	.+2      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     4a2:	6f c0       	rjmp	.+222    	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     4a4:	85 e1       	ldi	r24, 0x15	; 21
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_printString>
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
     4b0:	59 c0       	rjmp	.+178    	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
     4b2:	69 c0       	rjmp	.+210    	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
				return APP_STATUS_ERROR_NOK;
				}else/****************** Transaction Successfull ******************/
				{
					Lcd_printLCD((uint8_t*)"   Successful", (uint8_t*)"  Transaction");
     4b4:	6a e5       	ldi	r22, 0x5A	; 90
     4b6:	71 e0       	ldi	r23, 0x01	; 1
     4b8:	88 e6       	ldi	r24, 0x68	; 104
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
						
					Motor_run(MOTOR_CASH_ID, 100, MOTOR_DIR_CLK_WISE);
     4c0:	40 e0       	ldi	r20, 0x00	; 0
     4c2:	64 e6       	ldi	r22, 0x64	; 100
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <Motor_run>
					Delay_ms(1000);
     4ca:	28 ee       	ldi	r18, 0xE8	; 232
     4cc:	33 e0       	ldi	r19, 0x03	; 3
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
					Motor_stop(MOTOR_CASH_ID);
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Motor_stop>
					gu8_USER_Mode_State = USER_IDLE;
     4e4:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <gu8_USER_Mode_State>
						
					f32_balance -= f32_amount;
     4e8:	a7 01       	movw	r20, r14
     4ea:	96 01       	movw	r18, r12
     4ec:	c3 01       	movw	r24, r6
     4ee:	b2 01       	movw	r22, r4
     4f0:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__subsf3>
     4f4:	6b 01       	movw	r12, r22
     4f6:	7c 01       	movw	r14, r24
					EmptyString(gstr_clientdata.au8_Balance);
     4f8:	85 e0       	ldi	r24, 0x05	; 5
     4fa:	95 e0       	ldi	r25, 0x05	; 5
     4fc:	0e 94 ef 17 	call	0x2fde	; 0x2fde <EmptyString>
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
     500:	45 e0       	ldi	r20, 0x05	; 5
     502:	55 e0       	ldi	r21, 0x05	; 5
     504:	c7 01       	movw	r24, r14
     506:	b6 01       	movw	r22, r12
     508:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <floatToString>
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     50c:	10 91 eb 04 	lds	r17, 0x04EB	; 0x8004eb <gu8_clientIndex>
     510:	12 95       	swap	r17
     512:	11 0f       	add	r17, r17
     514:	10 7e       	andi	r17, 0xE0	; 224
     516:	10 5d       	subi	r17, 0xD0	; 208
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     518:	85 e0       	ldi	r24, 0x05	; 5
     51a:	95 e0       	ldi	r25, 0x05	; 5
     51c:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <stringLength>
					f32_balance -= f32_amount;
					EmptyString(gstr_clientdata.au8_Balance);
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
     520:	48 2f       	mov	r20, r24
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	65 e0       	ldi	r22, 0x05	; 5
     526:	75 e0       	ldi	r23, 0x05	; 5
     528:	81 2f       	mov	r24, r17
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <Eeprom_24_writePacket>
     530:	81 30       	cpi	r24, 0x01	; 1
     532:	59 f5       	brne	.+86     	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
						
					Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
     534:	65 e0       	ldi	r22, 0x05	; 5
     536:	75 e0       	ldi	r23, 0x05	; 5
     538:	86 e7       	ldi	r24, 0x76	; 118
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
					Delay_ms(1000);
     540:	28 ee       	ldi	r18, 0xE8	; 232
     542:	33 e0       	ldi	r19, 0x03	; 3
     544:	40 e0       	ldi	r20, 0x00	; 0
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     554:	65 e8       	ldi	r22, 0x85	; 133
     556:	71 e0       	ldi	r23, 0x01	; 1
     558:	84 e9       	ldi	r24, 0x94	; 148
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
						
					return APP_STATUS_ERROR_OK;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	14 c0       	rjmp	.+40     	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
				}
			}
		}
		Delay_ms(155);
     564:	2b e9       	ldi	r18, 0x9B	; 155
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e0       	ldi	r20, 0x00	; 0
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
	}
     578:	34 cf       	rjmp	.-408    	; 0x3e2 <AppUSER_startTransaction+0x54>
				
				Delay_ms(500);
				
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	07 c0       	rjmp	.+14     	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	05 c0       	rjmp	.+10     	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
					
				Delay_ms(500);
					
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	03 c0       	rjmp	.+6      	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	01 c0       	rjmp	.+2      	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     58a:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
		Delay_ms(155);
	}
}
     58c:	28 96       	adiw	r28, 0x08	; 8
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	1f 91       	pop	r17
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	df 90       	pop	r13
     5a4:	cf 90       	pop	r12
     5a6:	bf 90       	pop	r11
     5a8:	af 90       	pop	r10
     5aa:	9f 90       	pop	r9
     5ac:	8f 90       	pop	r8
     5ae:	7f 90       	pop	r7
     5b0:	6f 90       	pop	r6
     5b2:	5f 90       	pop	r5
     5b4:	4f 90       	pop	r4
     5b6:	08 95       	ret

000005b8 <AppUSER_checkPin>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the user's input pin if right or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPin(void)
{
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <AppUSER_checkPin+0x8>
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <AppUSER_checkPin+0xa>
     5c2:	1f 92       	push	r1
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_inputKPD[5] = {0};
     5c8:	fe 01       	movw	r30, r28
     5ca:	31 96       	adiw	r30, 0x01	; 1
     5cc:	85 e0       	ldi	r24, 0x05	; 5
     5ce:	df 01       	movw	r26, r30
     5d0:	1d 92       	st	X+, r1
     5d2:	8a 95       	dec	r24
     5d4:	e9 f7       	brne	.-6      	; 0x5d0 <AppUSER_checkPin+0x18>
	enuApp_Status_t KeypdaStatus = 0;
	Kpd_enablePass = 1;
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <Kpd_enablePass>
	uint8_t u8_loopCounter = 0;
     5dc:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		EmptyString(au8_inputKPD);
     5de:	ce 01       	movw	r24, r28
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	0e 94 ef 17 	call	0x2fde	; 0x2fde <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     5e6:	ce 01       	movw	r24, r28
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	0e 94 32 01 	call	0x264	; 0x264 <AppUSER_ReportKeypad>
			
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     5ee:	87 30       	cpi	r24, 0x07	; 7
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <AppUSER_checkPin+0x3c>
     5f2:	57 c0       	rjmp	.+174    	; 0x6a2 <AppUSER_checkPin+0xea>
		{
			u8_loopCounter++;
     5f4:	1f 5f       	subi	r17, 0xFF	; 255
			if(stringCompare(au8_inputKPD, gstr_userCardData.au8_pinNum) != 1)
     5f6:	61 e2       	ldi	r22, 0x21	; 33
     5f8:	75 e0       	ldi	r23, 0x05	; 5
     5fa:	ce 01       	movw	r24, r28
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <stringCompare>
     602:	81 30       	cpi	r24, 0x01	; 1
     604:	09 f4       	brne	.+2      	; 0x608 <AppUSER_checkPin+0x50>
     606:	43 c0       	rjmp	.+134    	; 0x68e <AppUSER_checkPin+0xd6>
			{
				if(u8_loopCounter == MAX_PIN_TRIAL)
     608:	13 30       	cpi	r17, 0x03	; 3
     60a:	11 f5       	brne	.+68     	; 0x650 <AppUSER_checkPin+0x98>
				{
					Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)" ");
     60c:	68 ef       	ldi	r22, 0xF8	; 248
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	82 ea       	ldi	r24, 0xA2	; 162
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
					Delay_ms(1000);
     618:	28 ee       	ldi	r18, 0xE8	; 232
     61a:	33 e0       	ldi	r19, 0x03	; 3
     61c:	40 e0       	ldi	r20, 0x00	; 0
     61e:	50 e0       	ldi	r21, 0x00	; 0
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
					Lcd_printLCD((uint8_t*)"Please Contact", (uint8_t*)"Customer Service");
     62c:	61 eb       	ldi	r22, 0xB1	; 177
     62e:	71 e0       	ldi	r23, 0x01	; 1
     630:	82 ec       	ldi	r24, 0xC2	; 194
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
					Delay_ms(1000);
     638:	28 ee       	ldi	r18, 0xE8	; 232
     63a:	33 e0       	ldi	r19, 0x03	; 3
     63c:	40 e0       	ldi	r20, 0x00	; 0
     63e:	50 e0       	ldi	r21, 0x00	; 0
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
					return APP_STATUS_PIN_NOT_CORRECT;
     64c:	89 e0       	ldi	r24, 0x09	; 9
     64e:	37 c0       	rjmp	.+110    	; 0x6be <AppUSER_checkPin+0x106>
				}
				Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)"   Try Again");
     650:	61 ed       	ldi	r22, 0xD1	; 209
     652:	71 e0       	ldi	r23, 0x01	; 1
     654:	82 ea       	ldi	r24, 0xA2	; 162
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
				Delay_ms(500);
     65c:	24 ef       	ldi	r18, 0xF4	; 244
     65e:	31 e0       	ldi	r19, 0x01	; 1
     660:	40 e0       	ldi	r20, 0x00	; 0
     662:	50 e0       	ldi	r21, 0x00	; 0
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
					
				Lcd_clear();
     670:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd_setCursor>
     67c:	81 30       	cpi	r24, 0x01	; 1
     67e:	e1 f4       	brne	.+56     	; 0x6b8 <AppUSER_checkPin+0x100>
					return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     680:	8e ed       	ldi	r24, 0xDE	; 222
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_printString>
     688:	81 30       	cpi	r24, 0x01	; 1
     68a:	59 f0       	breq	.+22     	; 0x6a2 <AppUSER_checkPin+0xea>
     68c:	17 c0       	rjmp	.+46     	; 0x6bc <AppUSER_checkPin+0x104>
					return APP_STATUS_ERROR_NOK;
			}else
			{
				Lcd_printLCD((uint8_t*)"  Please Wait", (uint8_t*)" Processing....");
     68e:	62 e2       	ldi	r22, 0x22	; 34
     690:	71 e0       	ldi	r23, 0x01	; 1
     692:	82 e3       	ldi	r24, 0x32	; 50
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
					Kpd_enablePass = 0;
     69a:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <Kpd_enablePass>
				return APP_STATUS_PIN_CORRECT;
     69e:	88 e0       	ldi	r24, 0x08	; 8
     6a0:	0e c0       	rjmp	.+28     	; 0x6be <AppUSER_checkPin+0x106>
			}
		}
		Delay_ms(155);
     6a2:	2b e9       	ldi	r18, 0x9B	; 155
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 e0       	ldi	r20, 0x00	; 0
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
	}
     6b6:	93 cf       	rjmp	.-218    	; 0x5de <AppUSER_checkPin+0x26>
				Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)"   Try Again");
				Delay_ms(500);
					
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <AppUSER_checkPin+0x106>
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		Delay_ms(155);
	}
	Kpd_enablePass = 0;
}
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	08 95       	ret

000006d0 <AppUSER_startProcess>:
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to start processing the card.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
     6d0:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd_setCursor>
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	09 f0       	breq	.+2      	; 0x6e2 <AppUSER_startProcess+0x12>
     6e0:	4c c0       	rjmp	.+152    	; 0x77a <AppUSER_startProcess+0xaa>
	return APP_STATUS_ERROR_NOK;
	enuApp_Status_t PAN_status = AppUSER_checkPan();
     6e2:	0e 94 cf 00 	call	0x19e	; 0x19e <AppUSER_checkPan>
	if(PAN_status == APP_STATUS_PAN_NOT_FOUND)
     6e6:	8b 30       	cpi	r24, 0x0B	; 11
     6e8:	41 f4       	brne	.+16     	; 0x6fa <AppUSER_startProcess+0x2a>
	{
		Lcd_printLCD((uint8_t*)"Your Card is not", (uint8_t*)"in the Database");
     6ea:	6d ee       	ldi	r22, 0xED	; 237
     6ec:	71 e0       	ldi	r23, 0x01	; 1
     6ee:	8d ef       	ldi	r24, 0xFD	; 253
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
		return APP_STATUS_PAN_NOT_FOUND;
     6f6:	8b e0       	ldi	r24, 0x0B	; 11
     6f8:	08 95       	ret
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     6fa:	8e ed       	ldi	r24, 0xDE	; 222
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_printString>
     702:	81 30       	cpi	r24, 0x01	; 1
     704:	e1 f5       	brne	.+120    	; 0x77e <AppUSER_startProcess+0xae>
		return APP_STATUS_ERROR_NOK;
	enuApp_Status_t PIN_status = AppUSER_checkPin();
     706:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <AppUSER_checkPin>
	if(PIN_status == APP_STATUS_PIN_NOT_CORRECT)
     70a:	89 30       	cpi	r24, 0x09	; 9
     70c:	d1 f1       	breq	.+116    	; 0x782 <AppUSER_startProcess+0xb2>
	{
		return APP_STATUS_PIN_NOT_CORRECT;
	}else if(PIN_status != APP_STATUS_PIN_CORRECT)
     70e:	88 30       	cpi	r24, 0x08	; 8
     710:	d1 f5       	brne	.+116    	; 0x786 <AppUSER_startProcess+0xb6>
		return APP_STATUS_ERROR_NOK;
	
	
	Lcd_printLCD((uint8_t*)"    Welcome", (uint8_t*)"    Customer");
     712:	6e e0       	ldi	r22, 0x0E	; 14
     714:	72 e0       	ldi	r23, 0x02	; 2
     716:	8b e1       	ldi	r24, 0x1B	; 27
     718:	92 e0       	ldi	r25, 0x02	; 2
     71a:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
	Delay_ms(2000);
     71e:	20 ed       	ldi	r18, 0xD0	; 208
     720:	37 e0       	ldi	r19, 0x07	; 7
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
	
	Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
     732:	65 e0       	ldi	r22, 0x05	; 5
     734:	75 e0       	ldi	r23, 0x05	; 5
     736:	86 e7       	ldi	r24, 0x76	; 118
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
	Delay_ms(2000);
     73e:	20 ed       	ldi	r18, 0xD0	; 208
     740:	37 e0       	ldi	r19, 0x07	; 7
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
	
	Lcd_clear();
     752:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd_setCursor>
     75e:	81 30       	cpi	r24, 0x01	; 1
     760:	a1 f4       	brne	.+40     	; 0x78a <AppUSER_startProcess+0xba>
		return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     762:	85 e1       	ldi	r24, 0x15	; 21
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_printString>
     76a:	81 30       	cpi	r24, 0x01	; 1
     76c:	81 f4       	brne	.+32     	; 0x78e <AppUSER_startProcess+0xbe>
		return APP_STATUS_ERROR_NOK;
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
     76e:	0e 94 c7 01 	call	0x38e	; 0x38e <AppUSER_startTransaction>
     772:	81 30       	cpi	r24, 0x01	; 1
     774:	69 f0       	breq	.+26     	; 0x790 <AppUSER_startProcess+0xc0>
		return APP_STATUS_ERROR_NOK;
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	08 95       	ret
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	08 95       	ret
		Lcd_printLCD((uint8_t*)"Your Card is not", (uint8_t*)"in the Database");
		return APP_STATUS_PAN_NOT_FOUND;
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	08 95       	ret
	enuApp_Status_t PIN_status = AppUSER_checkPin();
	if(PIN_status == APP_STATUS_PIN_NOT_CORRECT)
	{
		return APP_STATUS_PIN_NOT_CORRECT;
     782:	89 e0       	ldi	r24, 0x09	; 9
     784:	08 95       	ret
	}else if(PIN_status != APP_STATUS_PIN_CORRECT)
		return APP_STATUS_ERROR_NOK;
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	08 95       	ret
	Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
	Delay_ms(2000);
	
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	08 95       	ret
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     78e:	80 e0       	ldi	r24, 0x00	; 0
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     790:	08 95       	ret

00000792 <AppUSER_getCardData>:
* Parameters (out): pstr_CardData - Structure to save the card's data in.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the Card data Struct
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_getCardData(strCardData_t* pstr_CardData, uint8_t *pu8_dataString)
{
     792:	ac 01       	movw	r20, r24
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
     794:	20 e0       	ldi	r18, 0x00	; 0
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0a c0       	rjmp	.+20     	; 0x7ae <AppUSER_getCardData+0x1c>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     79a:	fb 01       	movw	r30, r22
     79c:	e9 0f       	add	r30, r25
     79e:	f1 1d       	adc	r31, r1
     7a0:	80 81       	ld	r24, Z
     7a2:	fa 01       	movw	r30, r20
     7a4:	e2 0f       	add	r30, r18
     7a6:	f1 1d       	adc	r31, r1
     7a8:	80 83       	st	Z, r24
		u8_dataIndex++;
     7aa:	2f 5f       	subi	r18, 0xFF	; 255
{
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     7ac:	9f 5f       	subi	r25, 0xFF	; 255
     7ae:	9a 30       	cpi	r25, 0x0A	; 10
     7b0:	a0 f3       	brcs	.-24     	; 0x79a <AppUSER_getCardData+0x8>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
     7b2:	fa 01       	movw	r30, r20
     7b4:	e2 0f       	add	r30, r18
     7b6:	f1 1d       	adc	r31, r1
     7b8:	10 82       	st	Z, r1
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
     7ba:	20 e0       	ldi	r18, 0x00	; 0
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     7bc:	9b e0       	ldi	r25, 0x0B	; 11
     7be:	0a c0       	rjmp	.+20     	; 0x7d4 <AppUSER_getCardData+0x42>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     7c0:	fb 01       	movw	r30, r22
     7c2:	e9 0f       	add	r30, r25
     7c4:	f1 1d       	adc	r31, r1
     7c6:	80 81       	ld	r24, Z
     7c8:	fa 01       	movw	r30, r20
     7ca:	e2 0f       	add	r30, r18
     7cc:	f1 1d       	adc	r31, r1
     7ce:	82 87       	std	Z+10, r24	; 0x0a
		u8_dataIndex++;
     7d0:	2f 5f       	subi	r18, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     7d2:	9f 5f       	subi	r25, 0xFF	; 255
     7d4:	94 31       	cpi	r25, 0x14	; 20
     7d6:	a0 f3       	brcs	.-24     	; 0x7c0 <AppUSER_getCardData+0x2e>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
     7d8:	fa 01       	movw	r30, r20
     7da:	e2 0f       	add	r30, r18
     7dc:	f1 1d       	adc	r31, r1
     7de:	12 86       	std	Z+10, r1	; 0x0a
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
     7e0:	90 e0       	ldi	r25, 0x00	; 0
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     7e2:	85 e1       	ldi	r24, 0x15	; 21
     7e4:	0a c0       	rjmp	.+20     	; 0x7fa <AppUSER_getCardData+0x68>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     7e6:	fb 01       	movw	r30, r22
     7e8:	e8 0f       	add	r30, r24
     7ea:	f1 1d       	adc	r31, r1
     7ec:	20 81       	ld	r18, Z
     7ee:	fa 01       	movw	r30, r20
     7f0:	e9 0f       	add	r30, r25
     7f2:	f1 1d       	adc	r31, r1
     7f4:	24 8b       	std	Z+20, r18	; 0x14
		u8_dataIndex++;
     7f6:	9f 5f       	subi	r25, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     7f8:	8f 5f       	subi	r24, 0xFF	; 255
     7fa:	89 31       	cpi	r24, 0x19	; 25
     7fc:	a0 f3       	brcs	.-24     	; 0x7e6 <AppUSER_getCardData+0x54>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_pinNum[u8_dataIndex] = '\0';
     7fe:	fa 01       	movw	r30, r20
     800:	e9 0f       	add	r30, r25
     802:	f1 1d       	adc	r31, r1
     804:	14 8a       	std	Z+20, r1	; 0x14
	return APP_STATUS_ERROR_OK;
}
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	08 95       	ret

0000080a <AppUSER_insertCard>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to run the Card Inserting Process.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_insertCard(void)
{
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	da 95       	dec	r29
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
	gu8_USER_Mode_State = USER_BUSY;
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <gu8_USER_Mode_State>
	uint8_t u8_buttonVal = PIN_LOW;
     826:	19 82       	std	Y+1, r1	; 0x01
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     828:	fe 01       	movw	r30, r28
     82a:	32 96       	adiw	r30, 0x02	; 2
     82c:	8f ef       	ldi	r24, 0xFF	; 255
     82e:	df 01       	movw	r26, r30
     830:	1d 92       	st	X+, r1
     832:	8a 95       	dec	r24
     834:	e9 f7       	brne	.-6      	; 0x830 <AppUSER_insertCard+0x26>
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
     836:	67 e2       	ldi	r22, 0x27	; 39
     838:	72 e0       	ldi	r23, 0x02	; 2
     83a:	86 e3       	ldi	r24, 0x36	; 54
     83c:	92 e0       	ldi	r25, 0x02	; 2
     83e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
	while(u8_buttonVal == PIN_LOW)
     842:	0f c0       	rjmp	.+30     	; 0x862 <__stack+0x3>
	{
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	0e 94 66 08 	call	0x10cc	; 0x10cc <Button_updateState>
     84a:	81 30       	cpi	r24, 0x01	; 1
     84c:	09 f0       	breq	.+2      	; 0x850 <AppUSER_insertCard+0x46>
     84e:	89 c0       	rjmp	.+274    	; 0x962 <__stack+0x103>
			return APP_STATUS_ERROR_NOK;
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
     850:	be 01       	movw	r22, r28
     852:	6f 5f       	subi	r22, 0xFF	; 255
     854:	7f 4f       	sbci	r23, 0xFF	; 255
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Button_getState>
     85c:	81 30       	cpi	r24, 0x01	; 1
     85e:	09 f0       	breq	.+2      	; 0x862 <__stack+0x3>
     860:	82 c0       	rjmp	.+260    	; 0x966 <__stack+0x107>
	gu8_USER_Mode_State = USER_BUSY;
	uint8_t u8_buttonVal = PIN_LOW;
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
	while(u8_buttonVal == PIN_LOW)
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	88 23       	and	r24, r24
     866:	71 f3       	breq	.-36     	; 0x844 <AppUSER_insertCard+0x3a>
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	}
	Lcd_printLCD((uint8_t*)"Button Pressed",(uint8_t*)"Receiving Data");
     868:	67 e4       	ldi	r22, 0x47	; 71
     86a:	72 e0       	ldi	r23, 0x02	; 2
     86c:	86 e5       	ldi	r24, 0x56	; 86
     86e:	92 e0       	ldi	r25, 0x02	; 2
     870:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	82 e1       	ldi	r24, 0x12	; 18
     878:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
	
	while (au8_inputString[0] != '#')
     87c:	41 c0       	rjmp	.+130    	; 0x900 <__stack+0xa1>
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
     87e:	6c e1       	ldi	r22, 0x1C	; 28
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	ce 01       	movw	r24, r28
     884:	02 96       	adiw	r24, 0x02	; 2
     886:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <Spi_SlaveReceivePacket>
     88a:	81 30       	cpi	r24, 0x01	; 1
     88c:	09 f0       	breq	.+2      	; 0x890 <__stack+0x31>
     88e:	6d c0       	rjmp	.+218    	; 0x96a <__stack+0x10b>
			return APP_STATUS_ERROR_NOK;
		if((au8_inputString[0] == '*') && (au8_inputString[1] == '*'))
     890:	8a 81       	ldd	r24, Y+2	; 0x02
     892:	8a 32       	cpi	r24, 0x2A	; 42
     894:	a9 f5       	brne	.+106    	; 0x900 <__stack+0xa1>
     896:	8b 81       	ldd	r24, Y+3	; 0x03
     898:	8a 32       	cpi	r24, 0x2A	; 42
     89a:	91 f5       	brne	.+100    	; 0x900 <__stack+0xa1>
		{
			Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     89c:	61 e0       	ldi	r22, 0x01	; 1
     89e:	82 e1       	ldi	r24, 0x12	; 18
     8a0:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
			Lcd_printLCD((uint8_t*)"Card is not",(uint8_t*)"Programmed");
     8a4:	65 e6       	ldi	r22, 0x65	; 101
     8a6:	72 e0       	ldi	r23, 0x02	; 2
     8a8:	82 e0       	ldi	r24, 0x02	; 2
     8aa:	92 e0       	ldi	r25, 0x02	; 2
     8ac:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
			Delay_ms(1000);
     8b0:	28 ee       	ldi	r18, 0xE8	; 232
     8b2:	33 e0       	ldi	r19, 0x03	; 3
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
			Lcd_printLCD((uint8_t*)"Please Contact",(uint8_t*)"Customer Service");
     8c4:	61 eb       	ldi	r22, 0xB1	; 177
     8c6:	71 e0       	ldi	r23, 0x01	; 1
     8c8:	82 ec       	ldi	r24, 0xC2	; 194
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
			Delay_ms(1000);
     8d0:	28 ee       	ldi	r18, 0xE8	; 232
     8d2:	33 e0       	ldi	r19, 0x03	; 3
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
			gu8_USER_Mode_State = USER_IDLE;
     8e4:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <gu8_USER_Mode_State>
			Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     8e8:	65 e8       	ldi	r22, 0x85	; 133
     8ea:	71 e0       	ldi	r23, 0x01	; 1
     8ec:	84 e9       	ldi	r24, 0x94	; 148
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
			EmptyString(au8_inputString);
     8f4:	ce 01       	movw	r24, r28
     8f6:	02 96       	adiw	r24, 0x02	; 2
     8f8:	0e 94 ef 17 	call	0x2fde	; 0x2fde <EmptyString>
			return APP_STATUS_ERROR_OK;
     8fc:	11 e0       	ldi	r17, 0x01	; 1
     8fe:	38 c0       	rjmp	.+112    	; 0x970 <__stack+0x111>
			return APP_STATUS_ERROR_NOK;
	}
	Lcd_printLCD((uint8_t*)"Button Pressed",(uint8_t*)"Receiving Data");
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
	
	while (au8_inputString[0] != '#')
     900:	8a 81       	ldd	r24, Y+2	; 0x02
     902:	83 32       	cpi	r24, 0x23	; 35
     904:	09 f0       	breq	.+2      	; 0x908 <__stack+0xa9>
     906:	bb cf       	rjmp	.-138    	; 0x87e <__stack+0x1f>
			return APP_STATUS_ERROR_OK;
		}
		
	}
	
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     908:	61 e0       	ldi	r22, 0x01	; 1
     90a:	82 e1       	ldi	r24, 0x12	; 18
     90c:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
	if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
     910:	be 01       	movw	r22, r28
     912:	6e 5f       	subi	r22, 0xFE	; 254
     914:	7f 4f       	sbci	r23, 0xFF	; 255
     916:	8d e0       	ldi	r24, 0x0D	; 13
     918:	95 e0       	ldi	r25, 0x05	; 5
     91a:	0e 94 c9 03 	call	0x792	; 0x792 <AppUSER_getCardData>
     91e:	18 2f       	mov	r17, r24
     920:	81 30       	cpi	r24, 0x01	; 1
     922:	29 f5       	brne	.+74     	; 0x96e <__stack+0x10f>
		return APP_STATUS_ERROR_NOK;
		
	enuApp_Status_t processState = AppUSER_startProcess(&gstr_userCardData);
     924:	8d e0       	ldi	r24, 0x0D	; 13
     926:	95 e0       	ldi	r25, 0x05	; 5
     928:	0e 94 68 03 	call	0x6d0	; 0x6d0 <AppUSER_startProcess>
	if((processState == APP_STATUS_PAN_NOT_FOUND) || (processState == APP_STATUS_PIN_NOT_CORRECT))
     92c:	8b 30       	cpi	r24, 0x0B	; 11
     92e:	11 f0       	breq	.+4      	; 0x934 <__stack+0xd5>
     930:	89 30       	cpi	r24, 0x09	; 9
     932:	99 f4       	brne	.+38     	; 0x95a <__stack+0xfb>
	{
		Delay_ms(1000);
     934:	28 ee       	ldi	r18, 0xE8	; 232
     936:	33 e0       	ldi	r19, 0x03	; 3
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
		gu8_USER_Mode_State = USER_IDLE;
     948:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <gu8_USER_Mode_State>
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     94c:	65 e8       	ldi	r22, 0x85	; 133
     94e:	71 e0       	ldi	r23, 0x01	; 1
     950:	84 e9       	ldi	r24, 0x94	; 148
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
     958:	0b c0       	rjmp	.+22     	; 0x970 <__stack+0x111>
	}else if (processState != APP_STATUS_ERROR_OK)
     95a:	81 30       	cpi	r24, 0x01	; 1
     95c:	49 f0       	breq	.+18     	; 0x970 <__stack+0x111>
		return APP_STATUS_ERROR_NOK;
     95e:	10 e0       	ldi	r17, 0x00	; 0
     960:	07 c0       	rjmp	.+14     	; 0x970 <__stack+0x111>
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
	while(u8_buttonVal == PIN_LOW)
	{
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     962:	10 e0       	ldi	r17, 0x00	; 0
     964:	05 c0       	rjmp	.+10     	; 0x970 <__stack+0x111>
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     966:	10 e0       	ldi	r17, 0x00	; 0
     968:	03 c0       	rjmp	.+6      	; 0x970 <__stack+0x111>
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
	
	while (au8_inputString[0] != '#')
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     96a:	10 e0       	ldi	r17, 0x00	; 0
     96c:	01 c0       	rjmp	.+2      	; 0x970 <__stack+0x111>
		
	}
	
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
	if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     96e:	10 e0       	ldi	r17, 0x00	; 0
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
	}else if (processState != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     970:	81 2f       	mov	r24, r17
     972:	d3 95       	inc	r29
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	f8 94       	cli
     978:	de bf       	out	0x3e, r29	; 62
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	cd bf       	out	0x3d, r28	; 61
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	08 95       	ret

00000986 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
     986:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enuCurrentAppStatus>
     98a:	84 30       	cpi	r24, 0x04	; 4
     98c:	09 f4       	brne	.+2      	; 0x990 <App_init+0xa>
     98e:	bd c0       	rjmp	.+378    	; 0xb0a <App_init+0x184>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(LCD_STATUS_ERROR_OK != Lcd_init())
     990:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <Lcd_init>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	09 f0       	breq	.+2      	; 0x99a <App_init+0x14>
     998:	97 c0       	rjmp	.+302    	; 0xac8 <App_init+0x142>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
     99a:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <Terminal_init>
     99e:	81 30       	cpi	r24, 0x01	; 1
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <App_init+0x1e>
     9a2:	94 c0       	rjmp	.+296    	; 0xacc <App_init+0x146>
		return APP_STATUS_ERROR_NOK;
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
     9a4:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <Eeprom_24_init>
     9a8:	81 30       	cpi	r24, 0x01	; 1
     9aa:	09 f0       	breq	.+2      	; 0x9ae <App_init+0x28>
     9ac:	91 c0       	rjmp	.+290    	; 0xad0 <App_init+0x14a>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
     9ae:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <Spi_init>
     9b2:	81 30       	cpi	r24, 0x01	; 1
     9b4:	09 f0       	breq	.+2      	; 0x9b8 <App_init+0x32>
     9b6:	8e c0       	rjmp	.+284    	; 0xad4 <App_init+0x14e>
		return APP_STATUS_ERROR_NOK;
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
     9b8:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <Keypad_init>
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	09 f0       	breq	.+2      	; 0x9c2 <App_init+0x3c>
     9c0:	8b c0       	rjmp	.+278    	; 0xad8 <App_init+0x152>
		return APP_STATUS_ERROR_NOK;
	if(LM35_STATUS_ERROR_OK != LM35_init())
     9c2:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LM35_init>
     9c6:	81 30       	cpi	r24, 0x01	; 1
     9c8:	09 f0       	breq	.+2      	; 0x9cc <App_init+0x46>
     9ca:	88 c0       	rjmp	.+272    	; 0xadc <App_init+0x156>
		return APP_STATUS_ERROR_NOK;
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
     9cc:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <Motor_init>
     9d0:	81 30       	cpi	r24, 0x01	; 1
     9d2:	09 f0       	breq	.+2      	; 0x9d6 <App_init+0x50>
     9d4:	85 c0       	rjmp	.+266    	; 0xae0 <App_init+0x15a>
		return APP_STATUS_ERROR_NOK;
	if(BTTN_STATUS_ERROR_OK != Button_init())
     9d6:	0e 94 41 08 	call	0x1082	; 0x1082 <Button_init>
     9da:	81 30       	cpi	r24, 0x01	; 1
     9dc:	09 f0       	breq	.+2      	; 0x9e0 <App_init+0x5a>
     9de:	82 c0       	rjmp	.+260    	; 0xae4 <App_init+0x15e>
	/* Only for Testing */
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
     9e0:	8f eb       	ldi	r24, 0xBF	; 191
     9e2:	94 e0       	ldi	r25, 0x04	; 4
     9e4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_printString>
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	09 f0       	breq	.+2      	; 0x9ee <App_init+0x68>
     9ec:	7d c0       	rjmp	.+250    	; 0xae8 <App_init+0x162>
		return APP_STATUS_ERROR_NOK;
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
     9ee:	81 eb       	ldi	r24, 0xB1	; 177
     9f0:	94 e0       	ldi	r25, 0x04	; 4
     9f2:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     9f6:	81 30       	cpi	r24, 0x01	; 1
     9f8:	09 f0       	breq	.+2      	; 0x9fc <App_init+0x76>
     9fa:	78 c0       	rjmp	.+240    	; 0xaec <App_init+0x166>
		return APP_STATUS_ERROR_NOK;
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
     9fc:	6a ef       	ldi	r22, 0xFA	; 250
     9fe:	74 e0       	ldi	r23, 0x04	; 4
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 33 09 	call	0x1266	; 0x1266 <Eeprom_24_readByte>
     a08:	81 30       	cpi	r24, 0x01	; 1
     a0a:	09 f0       	breq	.+2      	; 0xa0e <App_init+0x88>
     a0c:	71 c0       	rjmp	.+226    	; 0xaf0 <App_init+0x16a>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     a0e:	2a e0       	ldi	r18, 0x0A	; 10
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
	
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
     a22:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <gu8_initData>
     a26:	8a 3a       	cpi	r24, 0xAA	; 170
     a28:	f9 f0       	breq	.+62     	; 0xa68 <App_init+0xe2>
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
     a2a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
     a2e:	89 ec       	ldi	r24, 0xC9	; 201
     a30:	94 e0       	ldi	r25, 0x04	; 4
     a32:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <stringLength>
	
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
     a36:	48 2f       	mov	r20, r24
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	69 ec       	ldi	r22, 0xC9	; 201
     a3c:	74 e0       	ldi	r23, 0x04	; 4
     a3e:	8b e0       	ldi	r24, 0x0B	; 11
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 e6 09 	call	0x13cc	; 0x13cc <Eeprom_24_writePacket>
     a46:	81 30       	cpi	r24, 0x01	; 1
     a48:	09 f0       	breq	.+2      	; 0xa4c <App_init+0xc6>
     a4a:	54 c0       	rjmp	.+168    	; 0xaf4 <App_init+0x16e>
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		/* Lock the ATM For the User */
		Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
     a4c:	60 e7       	ldi	r22, 0x70	; 112
     a4e:	72 e0       	ldi	r23, 0x02	; 2
     a50:	81 e8       	ldi	r24, 0x81	; 129
     a52:	92 e0       	ldi	r25, 0x02	; 2
     a54:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
		
		if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     a58:	82 e9       	ldi	r24, 0x92	; 146
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	09 f0       	breq	.+2      	; 0xa66 <App_init+0xe0>
     a64:	49 c0       	rjmp	.+146    	; 0xaf8 <App_init+0x172>
     a66:	2b c0       	rjmp	.+86     	; 0xabe <App_init+0x138>
			return APP_STATUS_ERROR_NOK;
	}else
	{ /* Case it was previously registered == Contains data in the DB */
		gu8_ATMMode = ATM_MODE_USER;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
     a6e:	48 e0       	ldi	r20, 0x08	; 8
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	6c ee       	ldi	r22, 0xEC	; 236
     a74:	74 e0       	ldi	r23, 0x04	; 4
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 bf 0a 	call	0x157e	; 0x157e <Eeprom_24_readPacket>
     a7e:	81 30       	cpi	r24, 0x01	; 1
     a80:	e9 f5       	brne	.+122    	; 0xafc <App_init+0x176>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     a82:	69 ef       	ldi	r22, 0xF9	; 249
     a84:	74 e0       	ldi	r23, 0x04	; 4
     a86:	82 e0       	ldi	r24, 0x02	; 2
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 33 09 	call	0x1266	; 0x1266 <Eeprom_24_readByte>
     a8e:	81 30       	cpi	r24, 0x01	; 1
     a90:	b9 f5       	brne	.+110    	; 0xb00 <App_init+0x17a>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
     a92:	45 e0       	ldi	r20, 0x05	; 5
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	64 ef       	ldi	r22, 0xF4	; 244
     a98:	74 e0       	ldi	r23, 0x04	; 4
     a9a:	8b e0       	ldi	r24, 0x0B	; 11
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 bf 0a 	call	0x157e	; 0x157e <Eeprom_24_readPacket>
     aa2:	81 30       	cpi	r24, 0x01	; 1
     aa4:	79 f5       	brne	.+94     	; 0xb04 <App_init+0x17e>
			return APP_STATUS_ERROR_NOK;
		
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     aa6:	65 e8       	ldi	r22, 0x85	; 133
     aa8:	71 e0       	ldi	r23, 0x01	; 1
     aaa:	84 e9       	ldi	r24, 0x94	; 148
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
			
		if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     ab2:	85 ea       	ldi	r24, 0xA5	; 165
     ab4:	92 e0       	ldi	r25, 0x02	; 2
     ab6:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     aba:	81 30       	cpi	r24, 0x01	; 1
     abc:	29 f5       	brne	.+74     	; 0xb08 <App_init+0x182>
			return APP_STATUS_ERROR_NOK;
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     abe:	84 e0       	ldi	r24, 0x04	; 4
     ac0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enuCurrentAppStatus>
	return APP_STATUS_ERROR_OK;
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(LCD_STATUS_ERROR_OK != Lcd_init())
		return APP_STATUS_ERROR_NOK;
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	08 95       	ret
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	08 95       	ret
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	08 95       	ret
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	08 95       	ret
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
		return APP_STATUS_ERROR_NOK;
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	08 95       	ret
	if(LM35_STATUS_ERROR_OK != LM35_init())
		return APP_STATUS_ERROR_NOK;
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	08 95       	ret
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
		return APP_STATUS_ERROR_NOK;
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	08 95       	ret
	if(BTTN_STATUS_ERROR_OK != Button_init())
		return APP_STATUS_ERROR_NOK;
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	08 95       	ret
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	08 95       	ret
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 95       	ret
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	08 95       	ret
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	08 95       	ret
		/* Lock the ATM For the User */
		Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
		
		if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	08 95       	ret
	}else
	{ /* Case it was previously registered == Contains data in the DB */
		gu8_ATMMode = ATM_MODE_USER;
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	08 95       	ret
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	08 95       	ret
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	08 95       	ret
		
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
			
		if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b08:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     b0a:	08 95       	ret

00000b0c <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
     b18:	cf 5f       	subi	r28, 0xFF	; 255
     b1a:	d1 09       	sbc	r29, r1
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	cd bf       	out	0x3d, r28	; 61
     b26:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     b28:	ce 01       	movw	r24, r28
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	2f ef       	ldi	r18, 0xFF	; 255
     b2e:	fc 01       	movw	r30, r24
     b30:	11 92       	st	Z+, r1
     b32:	2a 95       	dec	r18
     b34:	e9 f7       	brne	.-6      	; 0xb30 <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
     b36:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
     b3a:	85 30       	cpi	r24, 0x05	; 5
     b3c:	39 f4       	brne	.+14     	; 0xb4c <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
     b3e:	b8 01       	movw	r22, r16
     b40:	ce 01       	movw	r24, r28
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <stringCopy>
		return APP_STATUS_ERROR_OK;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     b4c:	81 30       	cpi	r24, 0x01	; 1
     b4e:	11 f0       	breq	.+4      	; 0xb54 <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	01 c0       	rjmp	.+2      	; 0xb56 <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
     b54:	86 e0       	ldi	r24, 0x06	; 6
}
     b56:	c1 50       	subi	r28, 0x01	; 1
     b58:	df 4f       	sbci	r29, 0xFF	; 255
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	f8 94       	cli
     b5e:	de bf       	out	0x3e, r29	; 62
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	cd bf       	out	0x3d, r28	; 61
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	08 95       	ret

00000b6e <AppADMIN_getInput>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the ADMIN Input Choice.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getInput(uint8_t* pu8_data)
{
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nYour Input: ") != TERMINAL_STATUS_ERROR_OK)
     b74:	81 eb       	ldi	r24, 0xB1	; 177
     b76:	92 e0       	ldi	r25, 0x02	; 2
     b78:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	c1 f4       	brne	.+48     	; 0xbb0 <AppADMIN_getInput+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     b80:	ce 01       	movw	r24, r28
     b82:	0e 94 86 05 	call	0xb0c	; 0xb0c <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	29 f0       	breq	.+10     	; 0xb94 <AppADMIN_getInput+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     b8a:	11 f0       	breq	.+4      	; 0xb90 <AppADMIN_getInput+0x22>
     b8c:	86 30       	cpi	r24, 0x06	; 6
     b8e:	91 f4       	brne	.+36     	; 0xbb4 <AppADMIN_getInput+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     b90:	86 30       	cpi	r24, 0x06	; 6
     b92:	b1 f3       	breq	.-20     	; 0xb80 <AppADMIN_getInput+0x12>
		
		if (pu8_data[1] == '\0')
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	88 23       	and	r24, r24
     b98:	79 f0       	breq	.+30     	; 0xbb8 <AppADMIN_getInput+0x4a>
		break;
		EmptyString(pu8_data);
     b9a:	ce 01       	movw	r24, r28
     b9c:	0e 94 ef 17 	call	0x2fde	; 0x2fde <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
     ba0:	8f eb       	ldi	r24, 0xBF	; 191
     ba2:	92 e0       	ldi	r25, 0x02	; 2
     ba4:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     ba8:	81 30       	cpi	r24, 0x01	; 1
     baa:	21 f3       	breq	.-56     	; 0xb74 <AppADMIN_getInput+0x6>
		return APP_STATUS_ERROR_NOK;
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	05 c0       	rjmp	.+10     	; 0xbba <AppADMIN_getInput+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nYour Input: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <AppADMIN_getInput+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	01 c0       	rjmp	.+2      	; 0xbba <AppADMIN_getInput+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
}
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	08 95       	ret

00000bc0 <AppADMIN_getnewMaxAmount>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getnewMaxAmount(uint8_t* pu8_data)
{
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	8c 01       	movw	r16, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nMax Amount: ") != TERMINAL_STATUS_ERROR_OK)
     bc8:	89 ee       	ldi	r24, 0xE9	; 233
     bca:	92 e0       	ldi	r25, 0x02	; 2
     bcc:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     bd0:	81 30       	cpi	r24, 0x01	; 1
     bd2:	61 f5       	brne	.+88     	; 0xc2c <AppADMIN_getnewMaxAmount+0x6c>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     bd4:	c8 01       	movw	r24, r16
     bd6:	0e 94 86 05 	call	0xb0c	; 0xb0c <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	e9 f0       	breq	.+58     	; 0xc18 <AppADMIN_getnewMaxAmount+0x58>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     bde:	11 f0       	breq	.+4      	; 0xbe4 <AppADMIN_getnewMaxAmount+0x24>
     be0:	86 30       	cpi	r24, 0x06	; 6
     be2:	31 f5       	brne	.+76     	; 0xc30 <AppADMIN_getnewMaxAmount+0x70>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     be4:	86 30       	cpi	r24, 0x06	; 6
     be6:	b1 f3       	breq	.-20     	; 0xbd4 <AppADMIN_getnewMaxAmount+0x14>
     be8:	c0 e0       	ldi	r28, 0x00	; 0
     bea:	17 c0       	rjmp	.+46     	; 0xc1a <AppADMIN_getnewMaxAmount+0x5a>
		
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
		{
			if(((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0')) && (pu8_data[u8_index]!='.'))
     bec:	f8 01       	movw	r30, r16
     bee:	ec 0f       	add	r30, r28
     bf0:	f1 1d       	adc	r31, r1
     bf2:	80 81       	ld	r24, Z
     bf4:	90 ed       	ldi	r25, 0xD0	; 208
     bf6:	98 0f       	add	r25, r24
     bf8:	9a 30       	cpi	r25, 0x0A	; 10
     bfa:	60 f0       	brcs	.+24     	; 0xc14 <AppADMIN_getnewMaxAmount+0x54>
     bfc:	8e 32       	cpi	r24, 0x2E	; 46
     bfe:	51 f0       	breq	.+20     	; 0xc14 <AppADMIN_getnewMaxAmount+0x54>
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
     c00:	87 ef       	ldi	r24, 0xF7	; 247
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <AppADMIN_getnewMaxAmount+0x74>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
     c0c:	c8 01       	movw	r24, r16
     c0e:	0e 94 ef 17 	call	0x2fde	; 0x2fde <EmptyString>
				break;
     c12:	05 c0       	rjmp	.+10     	; 0xc1e <AppADMIN_getnewMaxAmount+0x5e>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
     c14:	cf 5f       	subi	r28, 0xFF	; 255
     c16:	01 c0       	rjmp	.+2      	; 0xc1a <AppADMIN_getnewMaxAmount+0x5a>
     c18:	c0 e0       	ldi	r28, 0x00	; 0
     c1a:	c7 30       	cpi	r28, 0x07	; 7
     c1c:	38 f3       	brcs	.-50     	; 0xbec <AppADMIN_getnewMaxAmount+0x2c>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
				break;
			}
		}
		if (u8_index == MAX_BAL_LENGTH)
     c1e:	c7 30       	cpi	r28, 0x07	; 7
     c20:	99 f6       	brne	.-90     	; 0xbc8 <AppADMIN_getnewMaxAmount+0x8>
		{
			EmptyString(pu8_data);
     c22:	c8 01       	movw	r24, r16
     c24:	0e 94 ef 17 	call	0x2fde	; 0x2fde <EmptyString>
// 		break;
// 		EmptyString(pu8_data);
// 		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	05 c0       	rjmp	.+10     	; 0xc36 <AppADMIN_getnewMaxAmount+0x76>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nMax Amount: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	03 c0       	rjmp	.+6      	; 0xc36 <AppADMIN_getnewMaxAmount+0x76>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <AppADMIN_getnewMaxAmount+0x76>
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
		{
			if(((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0')) && (pu8_data[u8_index]!='.'))
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     c34:	80 e0       	ldi	r24, 0x00	; 0
// 		EmptyString(pu8_data);
// 		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	08 95       	ret

00000c3e <AppADMIN_getCustomerPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerPAN(uint8_t* pu8_data)
{
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nPAN: ") != TERMINAL_STATUS_ERROR_OK)
     c44:	81 e3       	ldi	r24, 0x31	; 49
     c46:	93 e0       	ldi	r25, 0x03	; 3
     c48:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	c1 f4       	brne	.+48     	; 0xc80 <AppADMIN_getCustomerPAN+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     c50:	ce 01       	movw	r24, r28
     c52:	0e 94 86 05 	call	0xb0c	; 0xb0c <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	29 f0       	breq	.+10     	; 0xc64 <AppADMIN_getCustomerPAN+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     c5a:	11 f0       	breq	.+4      	; 0xc60 <AppADMIN_getCustomerPAN+0x22>
     c5c:	86 30       	cpi	r24, 0x06	; 6
     c5e:	91 f4       	brne	.+36     	; 0xc84 <AppADMIN_getCustomerPAN+0x46>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     c60:	86 30       	cpi	r24, 0x06	; 6
     c62:	b1 f3       	breq	.-20     	; 0xc50 <AppADMIN_getCustomerPAN+0x12>
		
		if (pu8_data[9] == '\0')
     c64:	89 85       	ldd	r24, Y+9	; 0x09
     c66:	88 23       	and	r24, r24
     c68:	79 f0       	breq	.+30     	; 0xc88 <AppADMIN_getCustomerPAN+0x4a>
			break;
		EmptyString(pu8_data);
     c6a:	ce 01       	movw	r24, r28
     c6c:	0e 94 ef 17 	call	0x2fde	; 0x2fde <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
     c70:	88 e3       	ldi	r24, 0x38	; 56
     c72:	93 e0       	ldi	r25, 0x03	; 3
     c74:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	21 f3       	breq	.-56     	; 0xc44 <AppADMIN_getCustomerPAN+0x6>
			return APP_STATUS_ERROR_NOK;
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <AppADMIN_getCustomerPAN+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nPAN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <AppADMIN_getCustomerPAN+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <AppADMIN_getCustomerPAN+0x4c>
			break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     c88:	81 e0       	ldi	r24, 0x01	; 1
}
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	08 95       	ret

00000c90 <AppADMIN_getCustomerBalance>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Balance by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the balance of the customer.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerBalance(uint8_t* pu8_data)
{
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nBalance: ") != TERMINAL_STATUS_ERROR_OK)
     c96:	89 e5       	ldi	r24, 0x59	; 89
     c98:	93 e0       	ldi	r25, 0x03	; 3
     c9a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	c1 f4       	brne	.+48     	; 0xcd2 <AppADMIN_getCustomerBalance+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     ca2:	ce 01       	movw	r24, r28
     ca4:	0e 94 86 05 	call	0xb0c	; 0xb0c <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	29 f0       	breq	.+10     	; 0xcb6 <AppADMIN_getCustomerBalance+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     cac:	11 f0       	breq	.+4      	; 0xcb2 <AppADMIN_getCustomerBalance+0x22>
     cae:	86 30       	cpi	r24, 0x06	; 6
     cb0:	91 f4       	brne	.+36     	; 0xcd6 <AppADMIN_getCustomerBalance+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     cb2:	86 30       	cpi	r24, 0x06	; 6
     cb4:	b1 f3       	breq	.-20     	; 0xca2 <AppADMIN_getCustomerBalance+0x12>
		
		if (pu8_data[7] == '\0')
     cb6:	8f 81       	ldd	r24, Y+7	; 0x07
     cb8:	88 23       	and	r24, r24
     cba:	79 f0       	breq	.+30     	; 0xcda <AppADMIN_getCustomerBalance+0x4a>
		break;
		EmptyString(pu8_data);
     cbc:	ce 01       	movw	r24, r28
     cbe:	0e 94 ef 17 	call	0x2fde	; 0x2fde <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Only 7 characters\r") != TERMINAL_STATUS_ERROR_OK)
     cc2:	84 e6       	ldi	r24, 0x64	; 100
     cc4:	93 e0       	ldi	r25, 0x03	; 3
     cc6:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	21 f3       	breq	.-56     	; 0xc96 <AppADMIN_getCustomerBalance+0x6>
		return APP_STATUS_ERROR_NOK;
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	05 c0       	rjmp	.+10     	; 0xcdc <AppADMIN_getCustomerBalance+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nBalance: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <AppADMIN_getCustomerBalance+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	01 c0       	rjmp	.+2      	; 0xcdc <AppADMIN_getCustomerBalance+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Only 7 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     cda:	81 e0       	ldi	r24, 0x01	; 1
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <AppADMIN_processNewCustomer>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to process adding a new customer in the data base.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_processNewCustomer(void)
{
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	62 97       	sbiw	r28, 0x12	; 18
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_tempPAN[10]={0};
     cf8:	ce 01       	movw	r24, r28
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	2a e0       	ldi	r18, 0x0A	; 10
     cfe:	dc 01       	movw	r26, r24
     d00:	1d 92       	st	X+, r1
     d02:	2a 95       	dec	r18
     d04:	e9 f7       	brne	.-6      	; 0xd00 <AppADMIN_processNewCustomer+0x1e>
	uint8_t au8_tempBalance[8]={0};
     d06:	fe 01       	movw	r30, r28
     d08:	3b 96       	adiw	r30, 0x0b	; 11
     d0a:	28 e0       	ldi	r18, 0x08	; 8
     d0c:	df 01       	movw	r26, r30
     d0e:	1d 92       	st	X+, r1
     d10:	2a 95       	dec	r18
     d12:	e9 f7       	brne	.-6      	; 0xd0e <AppADMIN_processNewCustomer+0x2c>
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     d14:	0e 94 1f 06 	call	0xc3e	; 0xc3e <AppADMIN_getCustomerPAN>
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	59 f5       	brne	.+86     	; 0xd72 <AppADMIN_processNewCustomer+0x90>
		return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
     d1c:	6b ef       	ldi	r22, 0xFB	; 251
     d1e:	74 e0       	ldi	r23, 0x04	; 4
     d20:	ce 01       	movw	r24, r28
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <stringCopy>
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
     d28:	ce 01       	movw	r24, r28
     d2a:	0b 96       	adiw	r24, 0x0b	; 11
     d2c:	0e 94 48 06 	call	0xc90	; 0xc90 <AppADMIN_getCustomerBalance>
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	09 f5       	brne	.+66     	; 0xd76 <AppADMIN_processNewCustomer+0x94>
		return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
     d34:	65 e0       	ldi	r22, 0x05	; 5
     d36:	75 e0       	ldi	r23, 0x05	; 5
     d38:	ce 01       	movw	r24, r28
     d3a:	0b 96       	adiw	r24, 0x0b	; 11
     d3c:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <stringCopy>
	
	if(AppADMIN_saveNewCustomerData() != APP_STATUS_ERROR_OK)
     d40:	0e 94 50 00 	call	0xa0	; 0xa0 <AppADMIN_saveNewCustomerData>
     d44:	18 2f       	mov	r17, r24
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	c1 f4       	brne	.+48     	; 0xd7a <AppADMIN_processNewCustomer+0x98>
		return APP_STATUS_ERROR_NOK;
	if(gu8_registeredAccNum == 1)
     d4a:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <gu8_registeredAccNum>
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	a9 f4       	brne	.+42     	; 0xd7c <AppADMIN_processNewCustomer+0x9a>
	{
		Terminal_Out((uint8_t*)"\nData Saved, Flag Raised\n");
     d52:	89 e8       	ldi	r24, 0x89	; 137
     d54:	93 e0       	ldi	r25, 0x03	; 3
     d56:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
		gu8_initData = ATM_DB_FLAG_SET_VAL;
     d5a:	8a ea       	ldi	r24, 0xAA	; 170
     d5c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <gu8_initData>
		if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
     d60:	6a ea       	ldi	r22, 0xAA	; 170
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 f7 08 	call	0x11ee	; 0x11ee <Eeprom_24_writeByte>
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	39 f0       	breq	.+14     	; 0xd7c <AppADMIN_processNewCustomer+0x9a>
			return APP_STATUS_ERROR_NOK;
     d6e:	10 e0       	ldi	r17, 0x00	; 0
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <AppADMIN_processNewCustomer+0x9a>
{
	uint8_t au8_tempPAN[10]={0};
	uint8_t au8_tempBalance[8]={0};
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     d72:	10 e0       	ldi	r17, 0x00	; 0
     d74:	03 c0       	rjmp	.+6      	; 0xd7c <AppADMIN_processNewCustomer+0x9a>
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     d76:	10 e0       	ldi	r17, 0x00	; 0
     d78:	01 c0       	rjmp	.+2      	; 0xd7c <AppADMIN_processNewCustomer+0x9a>
	stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
	
	if(AppADMIN_saveNewCustomerData() != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     d7a:	10 e0       	ldi	r17, 0x00	; 0
		gu8_initData = ATM_DB_FLAG_SET_VAL;
		if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	}
	return APP_STATUS_ERROR_OK;
}
     d7c:	81 2f       	mov	r24, r17
     d7e:	62 96       	adiw	r28, 0x12	; 18
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	08 95       	ret

00000d92 <AppADMIN_getAtmPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input ATM PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the atm pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getAtmPIN(uint8_t* pu8_data)
{
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	
	Terminal_enablePasswordMode();
     d98:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <Terminal_enablePasswordMode>
	do
	{
		if(Terminal_Out((uint8_t*)"\nATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
     d9c:	83 ea       	ldi	r24, 0xA3	; 163
     d9e:	93 e0       	ldi	r25, 0x03	; 3
     da0:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	69 f5       	brne	.+90     	; 0xe02 <AppADMIN_getAtmPIN+0x70>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     da8:	ce 01       	movw	r24, r28
     daa:	0e 94 86 05 	call	0xb0c	; 0xb0c <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	29 f0       	breq	.+10     	; 0xdbc <AppADMIN_getAtmPIN+0x2a>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     db2:	11 f0       	breq	.+4      	; 0xdb8 <AppADMIN_getAtmPIN+0x26>
     db4:	86 30       	cpi	r24, 0x06	; 6
     db6:	39 f5       	brne	.+78     	; 0xe06 <AppADMIN_getAtmPIN+0x74>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     db8:	86 30       	cpi	r24, 0x06	; 6
     dba:	b1 f3       	breq	.-20     	; 0xda8 <AppADMIN_getAtmPIN+0x16>
		
		if(stringCompare((uint8_t*)ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
     dbc:	be 01       	movw	r22, r28
     dbe:	89 ec       	ldi	r24, 0xC9	; 201
     dc0:	94 e0       	ldi	r25, 0x04	; 4
     dc2:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <stringCompare>
     dc6:	81 30       	cpi	r24, 0x01	; 1
     dc8:	39 f0       	breq	.+14     	; 0xdd8 <AppADMIN_getAtmPIN+0x46>
		{
			if(Terminal_Out((uint8_t*)"\nIncorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
     dca:	8e ea       	ldi	r24, 0xAE	; 174
     dcc:	93 e0       	ldi	r25, 0x03	; 3
     dce:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	41 f0       	breq	.+16     	; 0xde6 <AppADMIN_getAtmPIN+0x54>
     dd6:	19 c0       	rjmp	.+50     	; 0xe0a <AppADMIN_getAtmPIN+0x78>
			return APP_STATUS_ERROR_NOK;
		}else
		{
			if(Terminal_Out((uint8_t*)"\nLoading...\r") != TERMINAL_STATUS_ERROR_OK)
     dd8:	8e eb       	ldi	r24, 0xBE	; 190
     dda:	93 e0       	ldi	r25, 0x03	; 3
     ddc:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	a9 f4       	brne	.+42     	; 0xe0e <AppADMIN_getAtmPIN+0x7c>
     de4:	0a c0       	rjmp	.+20     	; 0xdfa <AppADMIN_getAtmPIN+0x68>
			return APP_STATUS_ERROR_NOK;
			break;
		}
		EmptyString(pu8_data);
     de6:	ce 01       	movw	r24, r28
     de8:	0e 94 ef 17 	call	0x2fde	; 0x2fde <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
     dec:	8b ec       	ldi	r24, 0xCB	; 203
     dee:	93 e0       	ldi	r25, 0x03	; 3
     df0:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	91 f2       	breq	.-92     	; 0xd9c <AppADMIN_getAtmPIN+0xa>
     df8:	0c c0       	rjmp	.+24     	; 0xe12 <AppADMIN_getAtmPIN+0x80>
		return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
     dfa:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <Terminal_disablePasswordMode>
	return APP_STATUS_ERROR_OK;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	09 c0       	rjmp	.+18     	; 0xe14 <AppADMIN_getAtmPIN+0x82>
	
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"\nATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	07 c0       	rjmp	.+14     	; 0xe14 <AppADMIN_getAtmPIN+0x82>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <AppADMIN_getAtmPIN+0x82>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringCompare((uint8_t*)ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
		{
			if(Terminal_Out((uint8_t*)"\nIncorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	03 c0       	rjmp	.+6      	; 0xe14 <AppADMIN_getAtmPIN+0x82>
		}else
		{
			if(Terminal_Out((uint8_t*)"\nLoading...\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <AppADMIN_getAtmPIN+0x82>
			break;
		}
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     e12:	80 e0       	ldi	r24, 0x00	; 0
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_ERROR_OK;
}
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	08 95       	ret

00000e1a <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	69 97       	sbiw	r28, 0x19	; 25
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
     e2e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enuCurrentAppStatus>
     e32:	84 30       	cpi	r24, 0x04	; 4
     e34:	09 f0       	breq	.+2      	; 0xe38 <App_update+0x1e>
     e36:	0e c1       	rjmp	.+540    	; 0x1054 <App_update+0x23a>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
     e38:	fe 01       	movw	r30, r28
     e3a:	31 96       	adiw	r30, 0x01	; 1
     e3c:	8a e0       	ldi	r24, 0x0A	; 10
     e3e:	df 01       	movw	r26, r30
     e40:	1d 92       	st	X+, r1
     e42:	8a 95       	dec	r24
     e44:	e9 f7       	brne	.-6      	; 0xe40 <App_update+0x26>
	static uint8_t u8_passFlag = 0;
	if(gu8_ATMMode == ATM_MODE_ADMIN)
     e46:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     e4a:	81 11       	cpse	r24, r1
     e4c:	82 c0       	rjmp	.+260    	; 0xf52 <App_update+0x138>
	{ /**************** PROGRAMMING MODE ****************/
			uint8_t au8_Input[2]={0};
     e4e:	19 8e       	std	Y+25, r1	; 0x19
     e50:	18 8e       	std	Y+24, r1	; 0x18
			uint8_t au8_tempPinNum[5]={0};
     e52:	72 96       	adiw	r30, 0x12	; 18
     e54:	85 e0       	ldi	r24, 0x05	; 5
     e56:	df 01       	movw	r26, r30
     e58:	1d 92       	st	X+, r1
     e5a:	8a 95       	dec	r24
     e5c:	e9 f7       	brne	.-6      	; 0xe58 <App_update+0x3e>
			uint8_t au8_tempMaxAmount[8]={0};
     e5e:	38 97       	sbiw	r30, 0x08	; 8
     e60:	88 e0       	ldi	r24, 0x08	; 8
     e62:	df 01       	movw	r26, r30
     e64:	1d 92       	st	X+, r1
     e66:	8a 95       	dec	r24
     e68:	e9 f7       	brne	.-6      	; 0xe64 <App_update+0x4a>
			
			if(u8_passFlag == 0)
     e6a:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <__data_end>
     e6e:	81 11       	cpse	r24, r1
     e70:	09 c0       	rjmp	.+18     	; 0xe84 <App_update+0x6a>
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
     e72:	ce 01       	movw	r24, r28
     e74:	43 96       	adiw	r24, 0x13	; 19
     e76:	0e 94 c9 06 	call	0xd92	; 0xd92 <AppADMIN_getAtmPIN>
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	09 f0       	breq	.+2      	; 0xe80 <App_update+0x66>
     e7e:	5d c0       	rjmp	.+186    	; 0xf3a <App_update+0x120>
					return APP_STATUS_ERROR_NOK;
				u8_passFlag = 1;
     e80:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <__data_end>
			}
			if(Terminal_Out((uint8_t*)"\n1.Add New Customer\n\r2.Update Max Amount\n\r3.Exit\r") != TERMINAL_STATUS_ERROR_OK)
     e84:	8c ee       	ldi	r24, 0xEC	; 236
     e86:	93 e0       	ldi	r25, 0x03	; 3
     e88:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	09 f0       	breq	.+2      	; 0xe92 <App_update+0x78>
     e90:	56 c0       	rjmp	.+172    	; 0xf3e <App_update+0x124>
				return APP_STATUS_ERROR_NOK;
// 			if(Terminal_Out((uint8_t*)"\n1.Add New Customer\n\r2.Update Existing Customer\n\r3.Update Max Amount\n\r4.Exit\r") != TERMINAL_STATUS_ERROR_OK)
//				return APP_STATUS_ERROR_NOK;
				
			AppADMIN_getInput(au8_Input);
     e92:	ce 01       	movw	r24, r28
     e94:	48 96       	adiw	r24, 0x18	; 24
     e96:	0e 94 b7 05 	call	0xb6e	; 0xb6e <AppADMIN_getInput>
			if(au8_Input[0] == '1')//--------- New Customer OPTION -----------//
     e9a:	88 8d       	ldd	r24, Y+24	; 0x18
     e9c:	81 33       	cpi	r24, 0x31	; 49
     e9e:	39 f4       	brne	.+14     	; 0xeae <App_update+0x94>
			{
				AppADMIN_processNewCustomer();
     ea0:	0e 94 71 06 	call	0xce2	; 0xce2 <AppADMIN_processNewCustomer>
				EmptyString(au8_Input);
     ea4:	ce 01       	movw	r24, r28
     ea6:	48 96       	adiw	r24, 0x18	; 24
     ea8:	0e 94 ef 17 	call	0x2fde	; 0x2fde <EmptyString>
     eac:	c7 c0       	rjmp	.+398    	; 0x103c <App_update+0x222>

// 			}else if(au8_Input[0] == '2')//--------- Update Existing Customer OPTION -----------//
// 			{
// 				AppADMIN_processExistingCustomer();
// 				EmptyString(au8_Input);
			}else if(au8_Input[0] == '2')//--------- Max Amount OPTION -----------//
     eae:	82 33       	cpi	r24, 0x32	; 50
     eb0:	d1 f4       	brne	.+52     	; 0xee6 <App_update+0xcc>
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
     eb2:	ce 01       	movw	r24, r28
     eb4:	0b 96       	adiw	r24, 0x0b	; 11
     eb6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <AppADMIN_getnewMaxAmount>
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
     eba:	ce 01       	movw	r24, r28
     ebc:	0b 96       	adiw	r24, 0x0b	; 11
     ebe:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <stringLength>
     ec2:	48 2f       	mov	r20, r24
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	be 01       	movw	r22, r28
     ec8:	65 5f       	subi	r22, 0xF5	; 245
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	83 e0       	ldi	r24, 0x03	; 3
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <Eeprom_24_writePacket>
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	a9 f5       	brne	.+106    	; 0xf42 <App_update+0x128>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempMaxAmount, gau8_maxAmount);	
     ed8:	6c ee       	ldi	r22, 0xEC	; 236
     eda:	74 e0       	ldi	r23, 0x04	; 4
     edc:	ce 01       	movw	r24, r28
     ede:	0b 96       	adiw	r24, 0x0b	; 11
     ee0:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <stringCopy>
     ee4:	ab c0       	rjmp	.+342    	; 0x103c <App_update+0x222>
			}else if(au8_Input[0] == '3')//--------- EXIT OPTION -----------//
     ee6:	83 33       	cpi	r24, 0x33	; 51
     ee8:	09 f5       	brne	.+66     	; 0xf2c <App_update+0x112>
			{
				if(gu8_initData == ATM_DB_FLAG_SET_VAL)
     eea:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <gu8_initData>
     eee:	8a 3a       	cpi	r24, 0xAA	; 170
     ef0:	a9 f4       	brne	.+42     	; 0xf1c <App_update+0x102>
				{
					u8_passFlag = 0;
     ef2:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <__data_end>
					gu8_ATMMode = ATM_MODE_USER;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					Lcd_clear();
     efc:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <Lcd_clear>
					if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     f00:	85 ea       	ldi	r24, 0xA5	; 165
     f02:	92 e0       	ldi	r25, 0x02	; 2
     f04:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	e9 f4       	brne	.+58     	; 0xf46 <App_update+0x12c>
						return APP_STATUS_ERROR_NOK;
					
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     f0c:	65 e8       	ldi	r22, 0x85	; 133
     f0e:	71 e0       	ldi	r23, 0x01	; 1
     f10:	84 e9       	ldi	r24, 0x94	; 148
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
					
					return APP_STATUS_ERROR_OK;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	9d c0       	rjmp	.+314    	; 0x1056 <App_update+0x23c>
				}else
				{
					if(Terminal_Out((uint8_t*)"\nData Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
     f1c:	8e e1       	ldi	r24, 0x1E	; 30
     f1e:	94 e0       	ldi	r25, 0x04	; 4
     f20:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	89 f0       	breq	.+34     	; 0xf4a <App_update+0x130>
						return APP_STATUS_ERROR_NOK;
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	95 c0       	rjmp	.+298    	; 0x1056 <App_update+0x23c>
					return APP_STATUS_ERROR_OK;
				}
			}else
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Input!") != TERMINAL_STATUS_ERROR_OK)
     f2c:	8c e5       	ldi	r24, 0x5C	; 92
     f2e:	94 e0       	ldi	r25, 0x04	; 4
     f30:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	59 f4       	brne	.+22     	; 0xf4e <App_update+0x134>
     f38:	81 c0       	rjmp	.+258    	; 0x103c <App_update+0x222>
			
			if(u8_passFlag == 0)
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	8c c0       	rjmp	.+280    	; 0x1056 <App_update+0x23c>
				u8_passFlag = 1;
			}
			if(Terminal_Out((uint8_t*)"\n1.Add New Customer\n\r2.Update Max Amount\n\r3.Exit\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	8a c0       	rjmp	.+276    	; 0x1056 <App_update+0x23c>
// 				EmptyString(au8_Input);
			}else if(au8_Input[0] == '2')//--------- Max Amount OPTION -----------//
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	88 c0       	rjmp	.+272    	; 0x1056 <App_update+0x23c>
				{
					u8_passFlag = 0;
					gu8_ATMMode = ATM_MODE_USER;
					Lcd_clear();
					if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	86 c0       	rjmp	.+268    	; 0x1056 <App_update+0x23c>
					return APP_STATUS_ERROR_OK;
				}else
				{
					if(Terminal_Out((uint8_t*)"\nData Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					return APP_STATUS_ERROR_OK;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	84 c0       	rjmp	.+264    	; 0x1056 <App_update+0x23c>
				}
			}else
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Input!") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	82 c0       	rjmp	.+260    	; 0x1056 <App_update+0x23c>
	{							/************* User Mode **************/
		/********************************************************************************************/
		/************************************ ADMIN ENTERED ****************************************/
		/********************************************************************************************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
     f52:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <gu8_ADMIN_Request>
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	31 f4       	brne	.+12     	; 0xf66 <App_update+0x14c>
     f5a:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <gu8_USER_Mode_State>
     f5e:	81 11       	cpse	r24, r1
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <App_update+0x14c>
			{
				gu8_ATMMode = ATM_MODE_ADMIN;
     f62:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
     f66:	ce 01       	movw	r24, r28
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	0e 94 86 05 	call	0xb0c	; 0xb0c <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	31 f5       	brne	.+76     	; 0xfbe <App_update+0x1a4>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
     f72:	6e ec       	ldi	r22, 0xCE	; 206
     f74:	74 e0       	ldi	r23, 0x04	; 4
     f76:	ce 01       	movw	r24, r28
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <stringCompare>
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	11 f5       	brne	.+68     	; 0xfc6 <App_update+0x1ac>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
     f82:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <gu8_USER_Mode_State>
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	51 f4       	brne	.+20     	; 0xf9e <App_update+0x184>
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
     f8a:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <gu8_ADMIN_Request>
						if(Terminal_Out((uint8_t*)"\nATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
     f8e:	8c e6       	ldi	r24, 0x6C	; 108
     f90:	94 e0       	ldi	r25, 0x04	; 4
     f92:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	09 f0       	breq	.+2      	; 0xf9c <App_update+0x182>
     f9a:	4a c0       	rjmp	.+148    	; 0x1030 <App_update+0x216>
     f9c:	14 c0       	rjmp	.+40     	; 0xfc6 <App_update+0x1ac>
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The ATM is not used by User */
					{
						gu8_ATMMode = ATM_MODE_ADMIN;
     f9e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
						
						Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
     fa2:	60 e7       	ldi	r22, 0x70	; 112
     fa4:	72 e0       	ldi	r23, 0x02	; 2
     fa6:	81 e8       	ldi	r24, 0x81	; 129
     fa8:	92 e0       	ldi	r25, 0x02	; 2
     faa:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
						
						if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     fae:	82 e9       	ldi	r24, 0x92	; 146
     fb0:	92 e0       	ldi	r25, 0x02	; 2
     fb2:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Terminal_Out>
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	e9 f1       	breq	.+122    	; 0x1034 <App_update+0x21a>
							return APP_STATUS_ERROR_NOK;
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	4c c0       	rjmp	.+152    	; 0x1056 <App_update+0x23c>
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	11 f0       	breq	.+4      	; 0xfc6 <App_update+0x1ac>
     fc2:	86 30       	cpi	r24, 0x06	; 6
     fc4:	c9 f5       	brne	.+114    	; 0x1038 <App_update+0x21e>
				return APP_STATUS_ERROR_NOK;
			/****************************************************************/
			/********************** Getting Input from User ************************/
			uint8_t au8_data=0;
     fc6:	1b 8a       	std	Y+19, r1	; 0x13
			enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&au8_data);
     fc8:	ce 01       	movw	r24, r28
     fca:	43 96       	adiw	r24, 0x13	; 19
     fcc:	0e 94 8c 0b 	call	0x1718	; 0x1718 <Keypad_readKey>
			if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
     fd0:	86 30       	cpi	r24, 0x06	; 6
     fd2:	b1 f4       	brne	.+44     	; 0x1000 <App_update+0x1e6>
			{
			/************************************ KEYPAD PRESSED ****************************************/
			/********* Insert Card Chosen ********/
				if(au8_data == '1') 
     fd4:	8b 89       	ldd	r24, Y+19	; 0x13
     fd6:	81 33       	cpi	r24, 0x31	; 49
     fd8:	19 f4       	brne	.+6      	; 0xfe0 <App_update+0x1c6>
				{
					AppUSER_insertCard();
     fda:	0e 94 05 04 	call	0x80a	; 0x80a <AppUSER_insertCard>
     fde:	2e c0       	rjmp	.+92     	; 0x103c <App_update+0x222>
			/******* Display Temp Chosen *******/
				}else if(au8_data == '2')
     fe0:	82 33       	cpi	r24, 0x32	; 50
     fe2:	19 f4       	brne	.+6      	; 0xfea <App_update+0x1d0>
				{
					AppUSER_displayTemp();
     fe4:	0e 94 92 00 	call	0x124	; 0x124 <AppUSER_displayTemp>
     fe8:	29 c0       	rjmp	.+82     	; 0x103c <App_update+0x222>
				}else if(au8_data == '-') 
     fea:	8d 32       	cpi	r24, 0x2D	; 45
     fec:	39 f5       	brne	.+78     	; 0x103c <App_update+0x222>
				{
					gu8_displayFlag = 0;
     fee:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <gu8_displayFlag>
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     ff2:	65 e8       	ldi	r22, 0x85	; 133
     ff4:	71 e0       	ldi	r23, 0x01	; 1
     ff6:	84 e9       	ldi	r24, 0x94	; 148
     ff8:	91 e0       	ldi	r25, 0x01	; 1
     ffa:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Lcd_printLCD>
     ffe:	1e c0       	rjmp	.+60     	; 0x103c <App_update+0x222>
				}
			}else if(gu8_displayFlag == DISPLAY_TEMP) /* If in temperature screen >> Update the temp value */
    1000:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <gu8_displayFlag>
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	d1 f4       	brne	.+52     	; 0x103c <App_update+0x222>
			{
				uint8_t u8_currentTemp=0;
    1008:	1b 86       	std	Y+11, r1	; 0x0b
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
    100a:	ce 01       	movw	r24, r28
    100c:	0b 96       	adiw	r24, 0x0b	; 11
    100e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LM35_readTemp>
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	99 f4       	brne	.+38     	; 0x103c <App_update+0x222>
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd_setCursor>
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	31 f4       	brne	.+12     	; 0x102c <App_update+0x212>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
    1020:	8b 85       	ldd	r24, Y+11	; 0x0b
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <Lcd_printDecimal>
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	41 f0       	breq	.+16     	; 0x103c <App_update+0x222>
			{
				uint8_t u8_currentTemp=0;
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	13 c0       	rjmp	.+38     	; 0x1056 <App_update+0x23c>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"\nATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	11 c0       	rjmp	.+34     	; 0x1056 <App_update+0x23c>
						
						Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
						
						if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
						return APP_STATUS_ERROR_OK;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	0f c0       	rjmp	.+30     	; 0x1056 <App_update+0x23c>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	0d c0       	rjmp	.+26     	; 0x1056 <App_update+0x23c>
					return APP_STATUS_ERROR_NOK;
				}
			}
	/****************************************************************/
	}
	Delay_ms(100);
    103c:	24 e6       	ldi	r18, 0x64	; 100
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	50 e0       	ldi	r21, 0x00	; 0
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
	return APP_STATUS_ERROR_OK;
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <App_update+0x23c>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
    1054:	85 e0       	ldi	r24, 0x05	; 5
			}
	/****************************************************************/
	}
	Delay_ms(100);
	return APP_STATUS_ERROR_OK;
}
    1056:	69 96       	adiw	r28, 0x19	; 25
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	08 95       	ret

00001068 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
    1068:	0e 94 c3 04 	call	0x986	; 0x986 <App_init>
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	39 f4       	brne	.+14     	; 0x107e <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
    1070:	8f b7       	in	r24, 0x3f	; 63
    1072:	80 68       	ori	r24, 0x80	; 128
    1074:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
    1076:	0e 94 0d 07 	call	0xe1a	; 0xe1a <App_update>
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	e1 f3       	breq	.-8      	; 0x1076 <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
	}
}
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	08 95       	ret

00001082 <Button_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button module is already initialized */
	if (genu_BttnModuleState == BTTN_STATUS_INIT)
    1082:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_BttnModuleState>
    1086:	85 30       	cpi	r24, 0x05	; 5
    1088:	71 f0       	breq	.+28     	; 0x10a6 <Button_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    108a:	85 e8       	ldi	r24, 0x85	; 133
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 82 10 	call	0x2104	; 0x2104 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	11 f0       	breq	.+4      	; 0x109a <Button_init+0x18>
    1096:	87 30       	cpi	r24, 0x07	; 7
    1098:	29 f4       	brne	.+10     	; 0x10a4 <Button_init+0x22>
		return BTTN_STATUS_ERROR_NOK;
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
    109a:	85 e0       	ldi	r24, 0x05	; 5
    109c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genu_BttnModuleState>
	return BTTN_STATUS_ERROR_OK;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return BTTN_STATUS_ERROR_NOK;
    10a4:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
	return BTTN_STATUS_ERROR_OK;
}
    10a6:	08 95       	ret

000010a8 <Button_getState>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
    10a8:	82 30       	cpi	r24, 0x02	; 2
    10aa:	60 f4       	brcc	.+24     	; 0x10c4 <Button_getState+0x1c>
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
    10ac:	61 15       	cp	r22, r1
    10ae:	71 05       	cpc	r23, r1
    10b0:	59 f0       	breq	.+22     	; 0x10c8 <Button_getState+0x20>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
    10b2:	e8 2f       	mov	r30, r24
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	e7 5d       	subi	r30, 0xD7	; 215
    10b8:	fa 4f       	sbci	r31, 0xFA	; 250
    10ba:	80 81       	ld	r24, Z
    10bc:	fb 01       	movw	r30, r22
    10be:	80 83       	st	Z, r24
	return BTTN_STATUS_ERROR_OK;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
	{
		return BTTN_STATUS_ERROR_NULL;
    10c8:	83 e0       	ldi	r24, 0x03	; 3
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
	return BTTN_STATUS_ERROR_OK;
}
    10ca:	08 95       	ret

000010cc <Button_updateState>:
* Parameters (out): None
* Return value: enuBttn_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to update the state of the button (Pressed or Released) by reading the Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuBttn_Status_t Button_updateState(uint8_t u8_bttnID)
{
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	1f 92       	push	r1
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
    10da:	82 30       	cpi	r24, 0x02	; 2
    10dc:	08 f0       	brcs	.+2      	; 0x10e0 <Button_updateState+0x14>
    10de:	58 c0       	rjmp	.+176    	; 0x1190 <Button_updateState+0xc4>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
    10e0:	19 82       	std	Y+1, r1	; 0x01
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
    10e2:	08 2f       	mov	r16, r24
    10e4:	10 e0       	ldi	r17, 0x00	; 0
    10e6:	f8 01       	movw	r30, r16
    10e8:	ed 59       	subi	r30, 0x9D	; 157
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	be 01       	movw	r22, r28
    10ee:	6f 5f       	subi	r22, 0xFF	; 255
    10f0:	7f 4f       	sbci	r23, 0xFF	; 255
    10f2:	80 81       	ld	r24, Z
    10f4:	0e 94 61 12 	call	0x24c2	; 0x24c2 <Dio_readPin>
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	09 f0       	breq	.+2      	; 0x10fe <Button_updateState+0x32>
    10fc:	4b c0       	rjmp	.+150    	; 0x1194 <Button_updateState+0xc8>
		return BTTN_STATUS_ERROR_NOK;
	if(u8_valueTemp == PIN_HIGH)
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	09 f5       	brne	.+66     	; 0x1146 <Button_updateState+0x7a>
    1104:	04 c0       	rjmp	.+8      	; 0x110e <Button_updateState+0x42>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	a1 1d       	adc	r26, r1
    110a:	b1 1d       	adc	r27, r1
    110c:	03 c0       	rjmp	.+6      	; 0x1114 <Button_updateState+0x48>
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	dc 01       	movw	r26, r24
    1114:	88 3b       	cpi	r24, 0xB8	; 184
    1116:	2b e0       	ldi	r18, 0x0B	; 11
    1118:	92 07       	cpc	r25, r18
    111a:	a1 05       	cpc	r26, r1
    111c:	b1 05       	cpc	r27, r1
    111e:	98 f3       	brcs	.-26     	; 0x1106 <Button_updateState+0x3a>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    1120:	be 01       	movw	r22, r28
    1122:	6f 5f       	subi	r22, 0xFF	; 255
    1124:	7f 4f       	sbci	r23, 0xFF	; 255
    1126:	f8 01       	movw	r30, r16
    1128:	ed 59       	subi	r30, 0x9D	; 157
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	80 81       	ld	r24, Z
    112e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <Dio_readPin>
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	89 f5       	brne	.+98     	; 0x1198 <Button_updateState+0xcc>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_HIGH)
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	81 f5       	brne	.+96     	; 0x119c <Button_updateState+0xd0>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
    113c:	f8 01       	movw	r30, r16
    113e:	e7 5d       	subi	r30, 0xD7	; 215
    1140:	fa 4f       	sbci	r31, 0xFA	; 250
    1142:	80 83       	st	Z, r24
    1144:	30 c0       	rjmp	.+96     	; 0x11a6 <Button_updateState+0xda>
	}else if (u8_valueTemp == PIN_LOW)
    1146:	88 23       	and	r24, r24
    1148:	31 f0       	breq	.+12     	; 0x1156 <Button_updateState+0x8a>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	2c c0       	rjmp	.+88     	; 0x11a6 <Button_updateState+0xda>
		if(u8_valueTemp == PIN_HIGH)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
	}else if (u8_valueTemp == PIN_LOW)
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	a1 1d       	adc	r26, r1
    1152:	b1 1d       	adc	r27, r1
    1154:	03 c0       	rjmp	.+6      	; 0x115c <Button_updateState+0x90>
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	dc 01       	movw	r26, r24
    115c:	88 3b       	cpi	r24, 0xB8	; 184
    115e:	2b e0       	ldi	r18, 0x0B	; 11
    1160:	92 07       	cpc	r25, r18
    1162:	a1 05       	cpc	r26, r1
    1164:	b1 05       	cpc	r27, r1
    1166:	98 f3       	brcs	.-26     	; 0x114e <Button_updateState+0x82>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    1168:	be 01       	movw	r22, r28
    116a:	6f 5f       	subi	r22, 0xFF	; 255
    116c:	7f 4f       	sbci	r23, 0xFF	; 255
    116e:	f8 01       	movw	r30, r16
    1170:	ed 59       	subi	r30, 0x9D	; 157
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	80 81       	ld	r24, Z
    1176:	0e 94 61 12 	call	0x24c2	; 0x24c2 <Dio_readPin>
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	89 f4       	brne	.+34     	; 0x11a0 <Button_updateState+0xd4>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	81 11       	cpse	r24, r1
    1182:	10 c0       	rjmp	.+32     	; 0x11a4 <Button_updateState+0xd8>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
    1184:	f8 01       	movw	r30, r16
    1186:	e7 5d       	subi	r30, 0xD7	; 215
    1188:	fa 4f       	sbci	r31, 0xFA	; 250
    118a:	10 82       	st	Z, r1
	}
	return BTTN_STATUS_ERROR_OK;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	0b c0       	rjmp	.+22     	; 0x11a6 <Button_updateState+0xda>
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
		return BTTN_STATUS_ERROR_ID_INVALID;
    1190:	82 e0       	ldi	r24, 0x02	; 2
    1192:	09 c0       	rjmp	.+18     	; 0x11a6 <Button_updateState+0xda>
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
		return BTTN_STATUS_ERROR_NOK;
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	07 c0       	rjmp	.+14     	; 0x11a6 <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	05 c0       	rjmp	.+10     	; 0x11a6 <Button_updateState+0xda>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	03 c0       	rjmp	.+6      	; 0x11a6 <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <Button_updateState+0xda>
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
}
    11a6:	0f 90       	pop	r0
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	08 95       	ret

000011b2 <EEPROM_getAddresses>:
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
#if EEPROM_24_MODEL	== AT24C16B
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
    11b2:	9a 01       	movw	r18, r20
    11b4:	22 27       	eor	r18, r18
    11b6:	37 70       	andi	r19, 0x07	; 7
    11b8:	22 0f       	add	r18, r18
    11ba:	23 2f       	mov	r18, r19
    11bc:	22 1f       	adc	r18, r18
    11be:	33 0b       	sbc	r19, r19
    11c0:	31 95       	neg	r19
    11c2:	20 65       	ori	r18, 0x50	; 80
    11c4:	fc 01       	movw	r30, r24
    11c6:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
    11c8:	fb 01       	movw	r30, r22
    11ca:	40 83       	st	Z, r20
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS;
	pu8_wordAddress[0] = (uint8_t)(u16_location >> 8);
	pu8_wordAddress[1] = (uint8_t)u16_location;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	08 95       	ret

000011d0 <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
    11d0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    11d4:	83 30       	cpi	r24, 0x03	; 3
    11d6:	51 f0       	breq	.+20     	; 0x11ec <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
    11d8:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
    11dc:	85 30       	cpi	r24, 0x05	; 5
    11de:	29 f0       	breq	.+10     	; 0x11ea <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
    11e0:	83 e0       	ldi	r24, 0x03	; 3
    11e2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
    11ea:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
    11ec:	08 95       	ret

000011ee <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <Eeprom_24_writeByte+0x8>
    11f6:	1f 92       	push	r1
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	ac 01       	movw	r20, r24
    11fe:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1200:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    1204:	93 30       	cpi	r25, 0x03	; 3
    1206:	11 f5       	brne	.+68     	; 0x124c <Eeprom_24_writeByte+0x5e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    1208:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    120a:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    120c:	be 01       	movw	r22, r28
    120e:	6e 5f       	subi	r22, 0xFE	; 254
    1210:	7f 4f       	sbci	r23, 0xFF	; 255
    1212:	ce 01       	movw	r24, r28
    1214:	01 96       	adiw	r24, 0x01	; 1
    1216:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <EEPROM_getAddresses>
    121a:	18 2f       	mov	r17, r24
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	c1 f4       	brne	.+48     	; 0x1250 <Eeprom_24_writeByte+0x62>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    1220:	21 e0       	ldi	r18, 0x01	; 1
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	ae 01       	movw	r20, r28
    1226:	4d 5f       	subi	r20, 0xFD	; 253
    1228:	5f 4f       	sbci	r21, 0xFF	; 255
    122a:	6a 81       	ldd	r22, Y+2	; 0x02
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <I2C_MasterSendToLocation>
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	79 f4       	brne	.+30     	; 0x1254 <Eeprom_24_writeByte+0x66>
 
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
    1236:	2f e0       	ldi	r18, 0x0F	; 15
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    124a:	05 c0       	rjmp	.+10     	; 0x1256 <Eeprom_24_writeByte+0x68>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    124c:	12 e0       	ldi	r17, 0x02	; 2
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <Eeprom_24_writeByte+0x68>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1250:	10 e0       	ldi	r17, 0x00	; 0
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <Eeprom_24_writeByte+0x68>
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1254:	10 e0       	ldi	r17, 0x00	; 0
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
	return EEPROM_24_STATUS_ERROR_OK;
}
    1256:	81 2f       	mov	r24, r17
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	08 95       	ret

00001266 <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	00 d0       	rcall	.+0      	; 0x1272 <Eeprom_24_readByte+0xc>
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1278:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    127c:	93 30       	cpi	r25, 0x03	; 3
    127e:	21 f5       	brne	.+72     	; 0x12c8 <Eeprom_24_readByte+0x62>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1280:	61 15       	cp	r22, r1
    1282:	71 05       	cpc	r23, r1
    1284:	19 f1       	breq	.+70     	; 0x12cc <Eeprom_24_readByte+0x66>
    1286:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    1288:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    128a:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    128c:	be 01       	movw	r22, r28
    128e:	6e 5f       	subi	r22, 0xFE	; 254
    1290:	7f 4f       	sbci	r23, 0xFF	; 255
    1292:	ce 01       	movw	r24, r28
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <EEPROM_getAddresses>
    129a:	18 2f       	mov	r17, r24
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	c1 f4       	brne	.+48     	; 0x12d0 <Eeprom_24_readByte+0x6a>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    12a0:	21 e0       	ldi	r18, 0x01	; 1
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	a7 01       	movw	r20, r14
    12a6:	6a 81       	ldd	r22, Y+2	; 0x02
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <I2C_MasterReceiveFromLocation>
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	89 f4       	brne	.+34     	; 0x12d4 <Eeprom_24_readByte+0x6e>

	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
	
#endif
	Delay_ms(5);
    12b2:	25 e0       	ldi	r18, 0x05	; 5
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	50 e0       	ldi	r21, 0x00	; 0
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    12c6:	07 c0       	rjmp	.+14     	; 0x12d6 <Eeprom_24_readByte+0x70>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    12c8:	12 e0       	ldi	r17, 0x02	; 2
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <Eeprom_24_readByte+0x70>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    12cc:	14 e0       	ldi	r17, 0x04	; 4
    12ce:	03 c0       	rjmp	.+6      	; 0x12d6 <Eeprom_24_readByte+0x70>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    12d0:	10 e0       	ldi	r17, 0x00	; 0
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <Eeprom_24_readByte+0x70>
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    12d4:	10 e0       	ldi	r17, 0x00	; 0
		return EEPROM_24_STATUS_ERROR_NOK;
	
#endif
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
    12d6:	81 2f       	mov	r24, r17
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	ff 90       	pop	r15
    12e4:	ef 90       	pop	r14
    12e6:	08 95       	ret

000012e8 <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
    12e8:	ef 92       	push	r14
    12ea:	ff 92       	push	r15
    12ec:	1f 93       	push	r17
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <Eeprom_24_writePage+0xc>
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    12f8:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    12fc:	93 30       	cpi	r25, 0x03	; 3
    12fe:	f9 f4       	brne	.+62     	; 0x133e <Eeprom_24_writePage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1300:	61 15       	cp	r22, r1
    1302:	71 05       	cpc	r23, r1
    1304:	f1 f0       	breq	.+60     	; 0x1342 <Eeprom_24_writePage+0x5a>
    1306:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
    1308:	90 e1       	ldi	r25, 0x10	; 16
    130a:	89 9f       	mul	r24, r25
    130c:	a0 01       	movw	r20, r0
    130e:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    1310:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
    1312:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    1314:	be 01       	movw	r22, r28
    1316:	6e 5f       	subi	r22, 0xFE	; 254
    1318:	7f 4f       	sbci	r23, 0xFF	; 255
    131a:	ce 01       	movw	r24, r28
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <EEPROM_getAddresses>
    1322:	18 2f       	mov	r17, r24
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	79 f4       	brne	.+30     	; 0x1346 <Eeprom_24_writePage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    1328:	20 e1       	ldi	r18, 0x10	; 16
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	a7 01       	movw	r20, r14
    132e:	6a 81       	ldd	r22, Y+2	; 0x02
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <I2C_MasterSendToLocation>
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	39 f0       	breq	.+14     	; 0x1348 <Eeprom_24_writePage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    133a:	10 e0       	ldi	r17, 0x00	; 0
    133c:	05 c0       	rjmp	.+10     	; 0x1348 <Eeprom_24_writePage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    133e:	12 e0       	ldi	r17, 0x02	; 2
    1340:	03 c0       	rjmp	.+6      	; 0x1348 <Eeprom_24_writePage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1342:	14 e0       	ldi	r17, 0x04	; 4
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <Eeprom_24_writePage+0x60>
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1346:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    1348:	81 2f       	mov	r24, r17
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	ff 90       	pop	r15
    1356:	ef 90       	pop	r14
    1358:	08 95       	ret

0000135a <Eeprom_24_readPage>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory page.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read data inside a specific page in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPage(uint8_t u8_page, uint8_t *pu8_data)
{
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	00 d0       	rcall	.+0      	; 0x1366 <Eeprom_24_readPage+0xc>
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    136a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    136e:	93 30       	cpi	r25, 0x03	; 3
    1370:	f9 f4       	brne	.+62     	; 0x13b0 <Eeprom_24_readPage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1372:	61 15       	cp	r22, r1
    1374:	71 05       	cpc	r23, r1
    1376:	f1 f0       	breq	.+60     	; 0x13b4 <Eeprom_24_readPage+0x5a>
    1378:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
    137a:	90 e1       	ldi	r25, 0x10	; 16
    137c:	89 9f       	mul	r24, r25
    137e:	a0 01       	movw	r20, r0
    1380:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    1382:	19 82       	std	Y+1, r1	; 0x01

#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
    1384:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    1386:	be 01       	movw	r22, r28
    1388:	6e 5f       	subi	r22, 0xFE	; 254
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	ce 01       	movw	r24, r28
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <EEPROM_getAddresses>
    1394:	18 2f       	mov	r17, r24
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	79 f4       	brne	.+30     	; 0x13b8 <Eeprom_24_readPage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    139a:	20 e1       	ldi	r18, 0x10	; 16
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	a7 01       	movw	r20, r14
    13a0:	6a 81       	ldd	r22, Y+2	; 0x02
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <I2C_MasterReceiveFromLocation>
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	39 f0       	breq	.+14     	; 0x13ba <Eeprom_24_readPage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    13ac:	10 e0       	ldi	r17, 0x00	; 0
    13ae:	05 c0       	rjmp	.+10     	; 0x13ba <Eeprom_24_readPage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    13b0:	12 e0       	ldi	r17, 0x02	; 2
    13b2:	03 c0       	rjmp	.+6      	; 0x13ba <Eeprom_24_readPage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    13b4:	14 e0       	ldi	r17, 0x04	; 4
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <Eeprom_24_readPage+0x60>
	uint8_t u8_slaveAddr=0;

#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    13b8:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    13ba:	81 2f       	mov	r24, r17
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	ff 90       	pop	r15
    13c8:	ef 90       	pop	r14
    13ca:	08 95       	ret

000013cc <Eeprom_24_writePacket>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Multiple data bytes to a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    13cc:	6f 92       	push	r6
    13ce:	7f 92       	push	r7
    13d0:	8f 92       	push	r8
    13d2:	9f 92       	push	r9
    13d4:	af 92       	push	r10
    13d6:	bf 92       	push	r11
    13d8:	cf 92       	push	r12
    13da:	df 92       	push	r13
    13dc:	ef 92       	push	r14
    13de:	ff 92       	push	r15
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <Eeprom_24_writePacket+0x1e>
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	5c 01       	movw	r10, r24
    13f0:	6b 01       	movw	r12, r22
    13f2:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    13f4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    13f8:	83 30       	cpi	r24, 0x03	; 3
    13fa:	09 f0       	breq	.+2      	; 0x13fe <Eeprom_24_writePacket+0x32>
    13fc:	a1 c0       	rjmp	.+322    	; 0x1540 <Eeprom_24_writePacket+0x174>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    13fe:	67 2b       	or	r22, r23
    1400:	09 f4       	brne	.+2      	; 0x1404 <Eeprom_24_writePacket+0x38>
    1402:	a0 c0       	rjmp	.+320    	; 0x1544 <Eeprom_24_writePacket+0x178>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    1404:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    1406:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    1408:	a5 01       	movw	r20, r10
    140a:	be 01       	movw	r22, r28
    140c:	6e 5f       	subi	r22, 0xFE	; 254
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	ce 01       	movw	r24, r28
    1412:	01 96       	adiw	r24, 0x01	; 1
    1414:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <EEPROM_getAddresses>
    1418:	18 2f       	mov	r17, r24
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	09 f0       	breq	.+2      	; 0x1420 <Eeprom_24_writePacket+0x54>
    141e:	94 c0       	rjmp	.+296    	; 0x1548 <Eeprom_24_writePacket+0x17c>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;
    1420:	45 01       	movw	r8, r10
    1422:	80 ef       	ldi	r24, 0xF0	; 240
    1424:	88 22       	and	r8, r24
    1426:	87 e0       	ldi	r24, 0x07	; 7
    1428:	98 22       	and	r9, r24
    142a:	96 94       	lsr	r9
    142c:	87 94       	ror	r8
    142e:	96 94       	lsr	r9
    1430:	87 94       	ror	r8
    1432:	96 94       	lsr	r9
    1434:	87 94       	ror	r8
    1436:	96 94       	lsr	r9
    1438:	87 94       	ror	r8
    143a:	68 2c       	mov	r6, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
    143c:	8a 2d       	mov	r24, r10
    143e:	8f 70       	andi	r24, 0x0F	; 15
	if(u8_byteOffset != 0)
    1440:	51 f1       	breq	.+84     	; 0x1496 <Eeprom_24_writePacket+0xca>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    1442:	90 e1       	ldi	r25, 0x10	; 16
    1444:	a9 2e       	mov	r10, r25
    1446:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    1448:	b1 2c       	mov	r11, r1
    144a:	ea 14       	cp	r14, r10
    144c:	fb 04       	cpc	r15, r11
    144e:	58 f4       	brcc	.+22     	; 0x1466 <Eeprom_24_writePacket+0x9a>
		{
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1450:	97 01       	movw	r18, r14
    1452:	a6 01       	movw	r20, r12
    1454:	6a 81       	ldd	r22, Y+2	; 0x02
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <I2C_MasterSendToLocation>
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	09 f4       	brne	.+2      	; 0x1462 <Eeprom_24_writePacket+0x96>
    1460:	7c c0       	rjmp	.+248    	; 0x155a <Eeprom_24_writePacket+0x18e>
				return EEPROM_24_STATUS_ERROR_NOK;
    1462:	10 e0       	ldi	r17, 0x00	; 0
    1464:	7a c0       	rjmp	.+244    	; 0x155a <Eeprom_24_writePacket+0x18e>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    1466:	95 01       	movw	r18, r10
    1468:	a6 01       	movw	r20, r12
    146a:	6a 81       	ldd	r22, Y+2	; 0x02
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <I2C_MasterSendToLocation>
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	09 f0       	breq	.+2      	; 0x1478 <Eeprom_24_writePacket+0xac>
    1476:	6a c0       	rjmp	.+212    	; 0x154c <Eeprom_24_writePacket+0x180>
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    1478:	ea 18       	sub	r14, r10
    147a:	fb 08       	sbc	r15, r11
		i=1;
		Delay_ms(15);
    147c:	2f e0       	ldi	r18, 0x0F	; 15
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e0       	ldi	r20, 0x00	; 0
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
    1490:	77 24       	eor	r7, r7
    1492:	73 94       	inc	r7
    1494:	03 c0       	rjmp	.+6      	; 0x149c <Eeprom_24_writePacket+0xd0>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
    1496:	71 2c       	mov	r7, r1

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
    1498:	a1 2c       	mov	r10, r1
    149a:	b1 2c       	mov	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
    149c:	c7 01       	movw	r24, r14
    149e:	92 95       	swap	r25
    14a0:	82 95       	swap	r24
    14a2:	8f 70       	andi	r24, 0x0F	; 15
    14a4:	89 27       	eor	r24, r25
    14a6:	9f 70       	andi	r25, 0x0F	; 15
    14a8:	89 27       	eor	r24, r25
    14aa:	08 2f       	mov	r16, r24
	while (pages_num > 0)
    14ac:	1c c0       	rjmp	.+56     	; 0x14e6 <Eeprom_24_writePacket+0x11a>
	{
		pages_num--;
    14ae:	01 50       	subi	r16, 0x01	; 1
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    14b0:	b6 01       	movw	r22, r12
    14b2:	6a 0d       	add	r22, r10
    14b4:	7b 1d       	adc	r23, r11
    14b6:	87 2d       	mov	r24, r7
    14b8:	86 0d       	add	r24, r6
    14ba:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Eeprom_24_writePage>
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <Eeprom_24_writePacket+0xf8>
    14c2:	46 c0       	rjmp	.+140    	; 0x1550 <Eeprom_24_writePacket+0x184>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    14c4:	73 94       	inc	r7
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
    14c6:	80 e1       	ldi	r24, 0x10	; 16
    14c8:	e8 1a       	sub	r14, r24
    14ca:	f1 08       	sbc	r15, r1
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
    14cc:	80 e1       	ldi	r24, 0x10	; 16
    14ce:	a8 0e       	add	r10, r24
    14d0:	b1 1c       	adc	r11, r1
		Delay_ms(15);
    14d2:	2f e0       	ldi	r18, 0x0F	; 15
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e0       	ldi	r20, 0x00	; 0
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
    14e6:	10 16       	cp	r1, r16
    14e8:	14 f3       	brlt	.-60     	; 0x14ae <Eeprom_24_writePacket+0xe2>
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
		Delay_ms(15);
	}
	
	if (u16_dataLen > 0)
    14ea:	e1 14       	cp	r14, r1
    14ec:	f1 04       	cpc	r15, r1
    14ee:	a9 f1       	breq	.+106    	; 0x155a <Eeprom_24_writePacket+0x18e>
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
    14f0:	a4 01       	movw	r20, r8
    14f2:	47 0d       	add	r20, r7
    14f4:	51 1d       	adc	r21, r1
    14f6:	42 95       	swap	r20
    14f8:	52 95       	swap	r21
    14fa:	50 7f       	andi	r21, 0xF0	; 240
    14fc:	54 27       	eor	r21, r20
    14fe:	40 7f       	andi	r20, 0xF0	; 240
    1500:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
    1502:	be 01       	movw	r22, r28
    1504:	6e 5f       	subi	r22, 0xFE	; 254
    1506:	7f 4f       	sbci	r23, 0xFF	; 255
    1508:	ce 01       	movw	r24, r28
    150a:	01 96       	adiw	r24, 0x01	; 1
    150c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <EEPROM_getAddresses>
    1510:	18 2f       	mov	r17, r24
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	f9 f4       	brne	.+62     	; 0x1554 <Eeprom_24_writePacket+0x188>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1516:	a6 01       	movw	r20, r12
    1518:	4a 0d       	add	r20, r10
    151a:	5b 1d       	adc	r21, r11
    151c:	97 01       	movw	r18, r14
    151e:	6a 81       	ldd	r22, Y+2	; 0x02
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <I2C_MasterSendToLocation>
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	b9 f4       	brne	.+46     	; 0x1558 <Eeprom_24_writePacket+0x18c>
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
    152a:	2f e0       	ldi	r18, 0x0F	; 15
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	40 e0       	ldi	r20, 0x00	; 0
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
    153e:	0d c0       	rjmp	.+26     	; 0x155a <Eeprom_24_writePacket+0x18e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1540:	12 e0       	ldi	r17, 0x02	; 2
    1542:	0b c0       	rjmp	.+22     	; 0x155a <Eeprom_24_writePacket+0x18e>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1544:	14 e0       	ldi	r17, 0x04	; 4
    1546:	09 c0       	rjmp	.+18     	; 0x155a <Eeprom_24_writePacket+0x18e>
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1548:	10 e0       	ldi	r17, 0x00	; 0
    154a:	07 c0       	rjmp	.+14     	; 0x155a <Eeprom_24_writePacket+0x18e>
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    154c:	10 e0       	ldi	r17, 0x00	; 0
    154e:	05 c0       	rjmp	.+10     	; 0x155a <Eeprom_24_writePacket+0x18e>
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
	{
		pages_num--;
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1550:	10 e0       	ldi	r17, 0x00	; 0
    1552:	03 c0       	rjmp	.+6      	; 0x155a <Eeprom_24_writePacket+0x18e>
	
	if (u16_dataLen > 0)
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1554:	10 e0       	ldi	r17, 0x00	; 0
    1556:	01 c0       	rjmp	.+2      	; 0x155a <Eeprom_24_writePacket+0x18e>
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1558:	10 e0       	ldi	r17, 0x00	; 0
		Delay_ms(15);
	}

#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    155a:	81 2f       	mov	r24, r17
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	ff 90       	pop	r15
    156a:	ef 90       	pop	r14
    156c:	df 90       	pop	r13
    156e:	cf 90       	pop	r12
    1570:	bf 90       	pop	r11
    1572:	af 90       	pop	r10
    1574:	9f 90       	pop	r9
    1576:	8f 90       	pop	r8
    1578:	7f 90       	pop	r7
    157a:	6f 90       	pop	r6
    157c:	08 95       	ret

0000157e <Eeprom_24_readPacket>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read Multiple data bytes from a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    157e:	6f 92       	push	r6
    1580:	7f 92       	push	r7
    1582:	8f 92       	push	r8
    1584:	9f 92       	push	r9
    1586:	af 92       	push	r10
    1588:	bf 92       	push	r11
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	00 d0       	rcall	.+0      	; 0x159c <Eeprom_24_readPacket+0x1e>
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	5c 01       	movw	r10, r24
    15a2:	6b 01       	movw	r12, r22
    15a4:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    15a6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    15aa:	83 30       	cpi	r24, 0x03	; 3
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <Eeprom_24_readPacket+0x32>
    15ae:	84 c0       	rjmp	.+264    	; 0x16b8 <Eeprom_24_readPacket+0x13a>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    15b0:	67 2b       	or	r22, r23
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <Eeprom_24_readPacket+0x38>
    15b4:	83 c0       	rjmp	.+262    	; 0x16bc <Eeprom_24_readPacket+0x13e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    15b6:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u16dataIndex=0;
	uint8_t i=0;

#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;	
    15b8:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    15ba:	a5 01       	movw	r20, r10
    15bc:	be 01       	movw	r22, r28
    15be:	6e 5f       	subi	r22, 0xFE	; 254
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	ce 01       	movw	r24, r28
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <EEPROM_getAddresses>
    15ca:	18 2f       	mov	r17, r24
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <Eeprom_24_readPacket+0x54>
    15d0:	77 c0       	rjmp	.+238    	; 0x16c0 <Eeprom_24_readPacket+0x142>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;		//The first page to write in
    15d2:	45 01       	movw	r8, r10
    15d4:	80 ef       	ldi	r24, 0xF0	; 240
    15d6:	88 22       	and	r8, r24
    15d8:	87 e0       	ldi	r24, 0x07	; 7
    15da:	98 22       	and	r9, r24
    15dc:	96 94       	lsr	r9
    15de:	87 94       	ror	r8
    15e0:	96 94       	lsr	r9
    15e2:	87 94       	ror	r8
    15e4:	96 94       	lsr	r9
    15e6:	87 94       	ror	r8
    15e8:	96 94       	lsr	r9
    15ea:	87 94       	ror	r8
    15ec:	78 2c       	mov	r7, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
    15ee:	8a 2d       	mov	r24, r10
    15f0:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
    15f2:	f9 f0       	breq	.+62     	; 0x1632 <Eeprom_24_readPacket+0xb4>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    15f4:	90 e1       	ldi	r25, 0x10	; 16
    15f6:	a9 2e       	mov	r10, r25
    15f8:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    15fa:	b1 2c       	mov	r11, r1
    15fc:	ea 14       	cp	r14, r10
    15fe:	fb 04       	cpc	r15, r11
    1600:	58 f4       	brcc	.+22     	; 0x1618 <Eeprom_24_readPacket+0x9a>
		{
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1602:	97 01       	movw	r18, r14
    1604:	a6 01       	movw	r20, r12
    1606:	6a 81       	ldd	r22, Y+2	; 0x02
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <I2C_MasterReceiveFromLocation>
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	09 f4       	brne	.+2      	; 0x1614 <Eeprom_24_readPacket+0x96>
    1612:	5d c0       	rjmp	.+186    	; 0x16ce <Eeprom_24_readPacket+0x150>
				return EEPROM_24_STATUS_ERROR_NOK;
    1614:	10 e0       	ldi	r17, 0x00	; 0
    1616:	5b c0       	rjmp	.+182    	; 0x16ce <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    1618:	95 01       	movw	r18, r10
    161a:	a6 01       	movw	r20, r12
    161c:	6a 81       	ldd	r22, Y+2	; 0x02
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <I2C_MasterReceiveFromLocation>
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	09 f0       	breq	.+2      	; 0x162a <Eeprom_24_readPacket+0xac>
    1628:	4d c0       	rjmp	.+154    	; 0x16c4 <Eeprom_24_readPacket+0x146>
			return EEPROM_24_STATUS_ERROR_NOK;
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    162a:	ea 18       	sub	r14, r10
    162c:	fb 08       	sbc	r15, r11
		i=1;
    162e:	01 e0       	ldi	r16, 0x01	; 1
    1630:	03 c0       	rjmp	.+6      	; 0x1638 <Eeprom_24_readPacket+0xba>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
    1632:	00 e0       	ldi	r16, 0x00	; 0

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
    1634:	a1 2c       	mov	r10, r1
    1636:	b1 2c       	mov	r11, r1
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
    1638:	c7 01       	movw	r24, r14
    163a:	92 95       	swap	r25
    163c:	82 95       	swap	r24
    163e:	8f 70       	andi	r24, 0x0F	; 15
    1640:	89 27       	eor	r24, r25
    1642:	9f 70       	andi	r25, 0x0F	; 15
    1644:	89 27       	eor	r24, r25
	while (pages_num--)
    1646:	11 c0       	rjmp	.+34     	; 0x166a <Eeprom_24_readPacket+0xec>
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    1648:	b6 01       	movw	r22, r12
    164a:	6a 0d       	add	r22, r10
    164c:	7b 1d       	adc	r23, r11
    164e:	80 2f       	mov	r24, r16
    1650:	87 0d       	add	r24, r7
    1652:	0e 94 ad 09 	call	0x135a	; 0x135a <Eeprom_24_readPage>
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	b9 f5       	brne	.+110    	; 0x16c8 <Eeprom_24_readPacket+0x14a>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    165a:	0f 5f       	subi	r16, 0xFF	; 255
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
    165c:	80 e1       	ldi	r24, 0x10	; 16
    165e:	e8 1a       	sub	r14, r24
    1660:	f1 08       	sbc	r15, r1
		u16dataIndex += EEPROM_24_PAGE_BYTES;
    1662:	80 e1       	ldi	r24, 0x10	; 16
    1664:	a8 0e       	add	r10, r24
    1666:	b1 1c       	adc	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
    1668:	86 2d       	mov	r24, r6
    166a:	66 24       	eor	r6, r6
    166c:	6a 94       	dec	r6
    166e:	68 0e       	add	r6, r24
    1670:	81 11       	cpse	r24, r1
    1672:	ea cf       	rjmp	.-44     	; 0x1648 <Eeprom_24_readPacket+0xca>
		i++;
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u16dataIndex += EEPROM_24_PAGE_BYTES;
	}

	if (u16_dataLen > 0)
    1674:	e1 14       	cp	r14, r1
    1676:	f1 04       	cpc	r15, r1
    1678:	51 f1       	breq	.+84     	; 0x16ce <Eeprom_24_readPacket+0x150>
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
    167a:	a4 01       	movw	r20, r8
    167c:	40 0f       	add	r20, r16
    167e:	51 1d       	adc	r21, r1
    1680:	42 95       	swap	r20
    1682:	52 95       	swap	r21
    1684:	50 7f       	andi	r21, 0xF0	; 240
    1686:	54 27       	eor	r21, r20
    1688:	40 7f       	andi	r20, 0xF0	; 240
    168a:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
    168c:	be 01       	movw	r22, r28
    168e:	6e 5f       	subi	r22, 0xFE	; 254
    1690:	7f 4f       	sbci	r23, 0xFF	; 255
    1692:	ce 01       	movw	r24, r28
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <EEPROM_getAddresses>
    169a:	18 2f       	mov	r17, r24
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	b1 f4       	brne	.+44     	; 0x16cc <Eeprom_24_readPacket+0x14e>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    16a0:	a6 01       	movw	r20, r12
    16a2:	4a 0d       	add	r20, r10
    16a4:	5b 1d       	adc	r21, r11
    16a6:	97 01       	movw	r18, r14
    16a8:	6a 81       	ldd	r22, Y+2	; 0x02
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <I2C_MasterReceiveFromLocation>
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	69 f0       	breq	.+26     	; 0x16ce <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_NOK;
    16b4:	10 e0       	ldi	r17, 0x00	; 0
    16b6:	0b c0       	rjmp	.+22     	; 0x16ce <Eeprom_24_readPacket+0x150>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    16b8:	12 e0       	ldi	r17, 0x02	; 2
    16ba:	09 c0       	rjmp	.+18     	; 0x16ce <Eeprom_24_readPacket+0x150>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    16bc:	14 e0       	ldi	r17, 0x04	; 4
    16be:	07 c0       	rjmp	.+14     	; 0x16ce <Eeprom_24_readPacket+0x150>
	uint8_t i=0;

#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    16c0:	10 e0       	ldi	r17, 0x00	; 0
    16c2:	05 c0       	rjmp	.+10     	; 0x16ce <Eeprom_24_readPacket+0x150>
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    16c4:	10 e0       	ldi	r17, 0x00	; 0
    16c6:	03 c0       	rjmp	.+6      	; 0x16ce <Eeprom_24_readPacket+0x150>
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    16c8:	10 e0       	ldi	r17, 0x00	; 0
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <Eeprom_24_readPacket+0x150>

	if (u16_dataLen > 0)
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    16cc:	10 e0       	ldi	r17, 0x00	; 0
		if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    16ce:	81 2f       	mov	r24, r17
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	ff 90       	pop	r15
    16de:	ef 90       	pop	r14
    16e0:	df 90       	pop	r13
    16e2:	cf 90       	pop	r12
    16e4:	bf 90       	pop	r11
    16e6:	af 90       	pop	r10
    16e8:	9f 90       	pop	r9
    16ea:	8f 90       	pop	r8
    16ec:	7f 90       	pop	r7
    16ee:	6f 90       	pop	r6
    16f0:	08 95       	ret

000016f2 <Keypad_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is already initialized */
	if (genu_KeypadModuleState == KEYPAD_STATUS_INIT)
    16f2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <genu_KeypadModuleState>
    16f6:	85 30       	cpi	r24, 0x05	; 5
    16f8:	71 f0       	breq	.+28     	; 0x1716 <Keypad_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    16fa:	85 e8       	ldi	r24, 0x85	; 133
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	0e 94 82 10 	call	0x2104	; 0x2104 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	11 f0       	breq	.+4      	; 0x170a <Keypad_init+0x18>
    1706:	87 30       	cpi	r24, 0x07	; 7
    1708:	29 f4       	brne	.+10     	; 0x1714 <Keypad_init+0x22>
		return KEYPAD_STATUS_ERROR_NOK;
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
    170a:	85 e0       	ldi	r24, 0x05	; 5
    170c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <genu_KeypadModuleState>
	return KEYPAD_STATUS_ERROR_OK;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return KEYPAD_STATUS_ERROR_NOK;
    1714:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
	return KEYPAD_STATUS_ERROR_OK;
}
    1716:	08 95       	ret

00001718 <Keypad_readKey>:
* Parameters (out): pu8_pressedKey - Pointer to a Char to hold the pressed key.
* Return value: enuKeypad_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current pressed Key.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuKeypad_Status_t Keypad_readKey(uint8_t * pu8_pressedKey)
{
    1718:	af 92       	push	r10
    171a:	bf 92       	push	r11
    171c:	cf 92       	push	r12
    171e:	df 92       	push	r13
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	1f 92       	push	r1
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	6c 01       	movw	r12, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
    1734:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <genu_KeypadModuleState>
    1738:	95 30       	cpi	r25, 0x05	; 5
    173a:	09 f0       	breq	.+2      	; 0x173e <Keypad_readKey+0x26>
    173c:	50 c0       	rjmp	.+160    	; 0x17de <Keypad_readKey+0xc6>
	{
		return KEYPAD_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
    173e:	c1 14       	cp	r12, r1
    1740:	d1 04       	cpc	r13, r1
    1742:	09 f4       	brne	.+2      	; 0x1746 <Keypad_readKey+0x2e>
    1744:	4e c0       	rjmp	.+156    	; 0x17e2 <Keypad_readKey+0xca>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	89 83       	std	Y+1, r24	; 0x01
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    174a:	00 e0       	ldi	r16, 0x00	; 0
    174c:	43 c0       	rjmp	.+134    	; 0x17d4 <Keypad_readKey+0xbc>
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
    174e:	a0 2e       	mov	r10, r16
    1750:	b1 2c       	mov	r11, r1
    1752:	f5 01       	movw	r30, r10
    1754:	e6 58       	subi	r30, 0x86	; 134
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	09 f0       	breq	.+2      	; 0x1766 <Keypad_readKey+0x4e>
    1764:	40 c0       	rjmp	.+128    	; 0x17e6 <Keypad_readKey+0xce>
    1766:	10 e0       	ldi	r17, 0x00	; 0
    1768:	29 c0       	rjmp	.+82     	; 0x17bc <Keypad_readKey+0xa4>
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
    176a:	e1 2e       	mov	r14, r17
    176c:	f1 2c       	mov	r15, r1
    176e:	f7 01       	movw	r30, r14
    1770:	ea 58       	subi	r30, 0x8A	; 138
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	be 01       	movw	r22, r28
    1776:	6f 5f       	subi	r22, 0xFF	; 255
    1778:	7f 4f       	sbci	r23, 0xFF	; 255
    177a:	80 81       	ld	r24, Z
    177c:	0e 94 61 12 	call	0x24c2	; 0x24c2 <Dio_readPin>
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	99 f5       	brne	.+102    	; 0x17ea <Keypad_readKey+0xd2>
				return KEYPAD_STATUS_ERROR_NOK;
			if(u8_pinValue == PIN_LOW)
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	81 11       	cpse	r24, r1
    1788:	18 c0       	rjmp	.+48     	; 0x17ba <Keypad_readKey+0xa2>
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    178a:	61 e0       	ldi	r22, 0x01	; 1
    178c:	f5 01       	movw	r30, r10
    178e:	e6 58       	subi	r30, 0x86	; 134
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	80 81       	ld	r24, Z
    1794:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	49 f5       	brne	.+82     	; 0x17ee <Keypad_readKey+0xd6>
					return KEYPAD_STATUS_ERROR_NOK;
				*pu8_pressedKey = gau8_ButtonSymbols[u8_RowIndex][u8_ColumnIndex];
    179c:	97 01       	movw	r18, r14
    179e:	22 0f       	add	r18, r18
    17a0:	33 1f       	adc	r19, r19
    17a2:	22 0f       	add	r18, r18
    17a4:	33 1f       	adc	r19, r19
    17a6:	2a 59       	subi	r18, 0x9A	; 154
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	f9 01       	movw	r30, r18
    17ac:	ea 0d       	add	r30, r10
    17ae:	fb 1d       	adc	r31, r11
    17b0:	80 81       	ld	r24, Z
    17b2:	f6 01       	movw	r30, r12
    17b4:	80 83       	st	Z, r24
				return KEYPAD_STATUS_PRESSED;
    17b6:	86 e0       	ldi	r24, 0x06	; 6
    17b8:	1d c0       	rjmp	.+58     	; 0x17f4 <Keypad_readKey+0xdc>
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
    17ba:	1f 5f       	subi	r17, 0xFF	; 255
    17bc:	14 30       	cpi	r17, 0x04	; 4
    17be:	a8 f2       	brcs	.-86     	; 0x176a <Keypad_readKey+0x52>
				return KEYPAD_STATUS_PRESSED;
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    17c0:	f5 01       	movw	r30, r10
    17c2:	e6 58       	subi	r30, 0x86	; 134
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	61 e0       	ldi	r22, 0x01	; 1
    17c8:	80 81       	ld	r24, Z
    17ca:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	81 f4       	brne	.+32     	; 0x17f2 <Keypad_readKey+0xda>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    17d2:	0f 5f       	subi	r16, 0xFF	; 255
    17d4:	04 30       	cpi	r16, 0x04	; 4
    17d6:	08 f4       	brcc	.+2      	; 0x17da <Keypad_readKey+0xc2>
    17d8:	ba cf       	rjmp	.-140    	; 0x174e <Keypad_readKey+0x36>
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    17da:	87 e0       	ldi	r24, 0x07	; 7
    17dc:	0b c0       	rjmp	.+22     	; 0x17f4 <Keypad_readKey+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
	{
		return KEYPAD_STATUS_NOT_INIT;
    17de:	84 e0       	ldi	r24, 0x04	; 4
    17e0:	09 c0       	rjmp	.+18     	; 0x17f4 <Keypad_readKey+0xdc>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
	{
		return KEYPAD_STATUS_ERROR_NULL;
    17e2:	83 e0       	ldi	r24, 0x03	; 3
    17e4:	07 c0       	rjmp	.+14     	; 0x17f4 <Keypad_readKey+0xdc>
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	05 c0       	rjmp	.+10     	; 0x17f4 <Keypad_readKey+0xdc>
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
				return KEYPAD_STATUS_ERROR_NOK;
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	03 c0       	rjmp	.+6      	; 0x17f4 <Keypad_readKey+0xdc>
			if(u8_pinValue == PIN_LOW)
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
					return KEYPAD_STATUS_ERROR_NOK;
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	01 c0       	rjmp	.+2      	; 0x17f4 <Keypad_readKey+0xdc>
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    17f2:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    17f4:	0f 90       	pop	r0
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	1f 91       	pop	r17
    17fc:	0f 91       	pop	r16
    17fe:	ff 90       	pop	r15
    1800:	ef 90       	pop	r14
    1802:	df 90       	pop	r13
    1804:	cf 90       	pop	r12
    1806:	bf 90       	pop	r11
    1808:	af 90       	pop	r10
    180a:	08 95       	ret

0000180c <Lcd_WriteData>:
{
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, BIN);
	Lcd_printString(au8_snum);
	return LCD_STATUS_ERROR_OK;
}
    180c:	cf 93       	push	r28
    180e:	c8 2f       	mov	r28, r24
    1810:	80 ff       	sbrs	r24, 0
    1812:	05 c0       	rjmp	.+10     	; 0x181e <Lcd_WriteData+0x12>
    1814:	61 e0       	ldi	r22, 0x01	; 1
    1816:	8a e0       	ldi	r24, 0x0A	; 10
    1818:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    181c:	04 c0       	rjmp	.+8      	; 0x1826 <Lcd_WriteData+0x1a>
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	8a e0       	ldi	r24, 0x0A	; 10
    1822:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    1826:	c1 ff       	sbrs	r28, 1
    1828:	05 c0       	rjmp	.+10     	; 0x1834 <Lcd_WriteData+0x28>
    182a:	61 e0       	ldi	r22, 0x01	; 1
    182c:	8b e0       	ldi	r24, 0x0B	; 11
    182e:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    1832:	04 c0       	rjmp	.+8      	; 0x183c <Lcd_WriteData+0x30>
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	8b e0       	ldi	r24, 0x0B	; 11
    1838:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    183c:	c2 ff       	sbrs	r28, 2
    183e:	05 c0       	rjmp	.+10     	; 0x184a <Lcd_WriteData+0x3e>
    1840:	61 e0       	ldi	r22, 0x01	; 1
    1842:	8c e0       	ldi	r24, 0x0C	; 12
    1844:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    1848:	04 c0       	rjmp	.+8      	; 0x1852 <Lcd_WriteData+0x46>
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	8c e0       	ldi	r24, 0x0C	; 12
    184e:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    1852:	c3 ff       	sbrs	r28, 3
    1854:	05 c0       	rjmp	.+10     	; 0x1860 <Lcd_WriteData+0x54>
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	8d e0       	ldi	r24, 0x0D	; 13
    185a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    185e:	04 c0       	rjmp	.+8      	; 0x1868 <Lcd_WriteData+0x5c>
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	8d e0       	ldi	r24, 0x0D	; 13
    1864:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    1868:	cf 91       	pop	r28
    186a:	08 95       	ret

0000186c <Lcd_EnableToggle>:
    186c:	61 e0       	ldi	r22, 0x01	; 1
    186e:	89 e0       	ldi	r24, 0x09	; 9
    1870:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    1874:	21 e0       	ldi	r18, 0x01	; 1
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e0       	ldi	r20, 0x00	; 0
    187a:	50 e0       	ldi	r21, 0x00	; 0
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	89 e0       	ldi	r24, 0x09	; 9
    188c:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    1890:	08 95       	ret

00001892 <Lcd_sendCommand>:
    1892:	cf 93       	push	r28
    1894:	c8 2f       	mov	r28, r24
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	87 e0       	ldi	r24, 0x07	; 7
    189a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    189e:	8c 2f       	mov	r24, r28
    18a0:	82 95       	swap	r24
    18a2:	8f 70       	andi	r24, 0x0F	; 15
    18a4:	0e 94 06 0c 	call	0x180c	; 0x180c <Lcd_WriteData>
    18a8:	0e 94 36 0c 	call	0x186c	; 0x186c <Lcd_EnableToggle>
    18ac:	21 e0       	ldi	r18, 0x01	; 1
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
    18c0:	8c 2f       	mov	r24, r28
    18c2:	8f 70       	andi	r24, 0x0F	; 15
    18c4:	0e 94 06 0c 	call	0x180c	; 0x180c <Lcd_WriteData>
    18c8:	0e 94 36 0c 	call	0x186c	; 0x186c <Lcd_EnableToggle>
    18cc:	22 e0       	ldi	r18, 0x02	; 2
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	cf 91       	pop	r28
    18e4:	08 95       	ret

000018e6 <Lcd_init>:
    18e6:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <genu_LcdModuleState>
    18ea:	86 30       	cpi	r24, 0x06	; 6
    18ec:	91 f1       	breq	.+100    	; 0x1952 <Lcd_init+0x6c>
    18ee:	85 e8       	ldi	r24, 0x85	; 133
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 94 82 10 	call	0x2104	; 0x2104 <Dio_init>
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	11 f0       	breq	.+4      	; 0x18fe <Lcd_init+0x18>
    18fa:	87 30       	cpi	r24, 0x07	; 7
    18fc:	49 f5       	brne	.+82     	; 0x1950 <Lcd_init+0x6a>
    18fe:	24 e1       	ldi	r18, 0x14	; 20
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
    1912:	60 e0       	ldi	r22, 0x00	; 0
    1914:	87 e0       	ldi	r24, 0x07	; 7
    1916:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    191a:	60 e0       	ldi	r22, 0x00	; 0
    191c:	89 e0       	ldi	r24, 0x09	; 9
    191e:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    1922:	83 e3       	ldi	r24, 0x33	; 51
    1924:	0e 94 49 0c 	call	0x1892	; 0x1892 <Lcd_sendCommand>
    1928:	82 e3       	ldi	r24, 0x32	; 50
    192a:	0e 94 49 0c 	call	0x1892	; 0x1892 <Lcd_sendCommand>
    192e:	88 e2       	ldi	r24, 0x28	; 40
    1930:	0e 94 49 0c 	call	0x1892	; 0x1892 <Lcd_sendCommand>
    1934:	8c e0       	ldi	r24, 0x0C	; 12
    1936:	0e 94 49 0c 	call	0x1892	; 0x1892 <Lcd_sendCommand>
    193a:	86 e0       	ldi	r24, 0x06	; 6
    193c:	0e 94 49 0c 	call	0x1892	; 0x1892 <Lcd_sendCommand>
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	0e 94 49 0c 	call	0x1892	; 0x1892 <Lcd_sendCommand>
    1946:	86 e0       	ldi	r24, 0x06	; 6
    1948:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <genu_LcdModuleState>
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	08 95       	ret
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	08 95       	ret

00001954 <Lcd_setCursor>:
    1954:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <genu_LcdModuleState>
    1958:	96 30       	cpi	r25, 0x06	; 6
    195a:	89 f4       	brne	.+34     	; 0x197e <Lcd_setCursor+0x2a>
    195c:	83 30       	cpi	r24, 0x03	; 3
    195e:	88 f4       	brcc	.+34     	; 0x1982 <Lcd_setCursor+0x2e>
    1960:	61 31       	cpi	r22, 0x11	; 17
    1962:	88 f4       	brcc	.+34     	; 0x1986 <Lcd_setCursor+0x32>
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	2e 5f       	subi	r18, 0xFE	; 254
    196a:	3f 4f       	sbci	r19, 0xFF	; 255
    196c:	86 2f       	mov	r24, r22
    196e:	90 e4       	ldi	r25, 0x40	; 64
    1970:	29 9f       	mul	r18, r25
    1972:	80 0d       	add	r24, r0
    1974:	11 24       	eor	r1, r1
    1976:	0e 94 49 0c 	call	0x1892	; 0x1892 <Lcd_sendCommand>
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	08 95       	ret
    197e:	85 e0       	ldi	r24, 0x05	; 5
    1980:	08 95       	ret
    1982:	83 e0       	ldi	r24, 0x03	; 3
    1984:	08 95       	ret
    1986:	82 e0       	ldi	r24, 0x02	; 2
    1988:	08 95       	ret

0000198a <Lcd_printChar>:
    198a:	cf 93       	push	r28
    198c:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <genu_LcdModuleState>
    1990:	96 30       	cpi	r25, 0x06	; 6
    1992:	41 f5       	brne	.+80     	; 0x19e4 <Lcd_printChar+0x5a>
    1994:	c8 2f       	mov	r28, r24
    1996:	61 e0       	ldi	r22, 0x01	; 1
    1998:	87 e0       	ldi	r24, 0x07	; 7
    199a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    199e:	8c 2f       	mov	r24, r28
    19a0:	82 95       	swap	r24
    19a2:	8f 70       	andi	r24, 0x0F	; 15
    19a4:	0e 94 06 0c 	call	0x180c	; 0x180c <Lcd_WriteData>
    19a8:	0e 94 36 0c 	call	0x186c	; 0x186c <Lcd_EnableToggle>
    19ac:	21 e0       	ldi	r18, 0x01	; 1
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e0       	ldi	r20, 0x00	; 0
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
    19c0:	8c 2f       	mov	r24, r28
    19c2:	8f 70       	andi	r24, 0x0F	; 15
    19c4:	0e 94 06 0c 	call	0x180c	; 0x180c <Lcd_WriteData>
    19c8:	0e 94 36 0c 	call	0x186c	; 0x186c <Lcd_EnableToggle>
    19cc:	22 e0       	ldi	r18, 0x02	; 2
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e0       	ldi	r20, 0x00	; 0
    19d2:	50 e0       	ldi	r21, 0x00	; 0
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Delay_ms>
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	01 c0       	rjmp	.+2      	; 0x19e6 <Lcd_printChar+0x5c>
    19e4:	85 e0       	ldi	r24, 0x05	; 5
    19e6:	cf 91       	pop	r28
    19e8:	08 95       	ret

000019ea <Lcd_printString>:
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	ec 01       	movw	r28, r24
    19f0:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <genu_LcdModuleState>
    19f4:	86 30       	cpi	r24, 0x06	; 6
    19f6:	49 f4       	brne	.+18     	; 0x1a0a <Lcd_printString+0x20>
    19f8:	03 c0       	rjmp	.+6      	; 0x1a00 <Lcd_printString+0x16>
    19fa:	21 96       	adiw	r28, 0x01	; 1
    19fc:	0e 94 c5 0c 	call	0x198a	; 0x198a <Lcd_printChar>
    1a00:	88 81       	ld	r24, Y
    1a02:	81 11       	cpse	r24, r1
    1a04:	fa cf       	rjmp	.-12     	; 0x19fa <Lcd_printString+0x10>
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	01 c0       	rjmp	.+2      	; 0x1a0c <Lcd_printString+0x22>
    1a0a:	85 e0       	ldi	r24, 0x05	; 5
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <Lcd_clear>:
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	0e 94 49 0c 	call	0x1892	; 0x1892 <Lcd_sendCommand>
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	08 95       	ret

00001a1c <Lcd_printLCD>:
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	ec 01       	movw	r28, r24
    1a26:	8b 01       	movw	r16, r22
    1a28:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <Lcd_clear>
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd_setCursor>
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	89 f4       	brne	.+34     	; 0x1a5a <Lcd_printLCD+0x3e>
    1a38:	ce 01       	movw	r24, r28
    1a3a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_printString>
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	71 f4       	brne	.+28     	; 0x1a5e <Lcd_printLCD+0x42>
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd_setCursor>
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	59 f4       	brne	.+22     	; 0x1a62 <Lcd_printLCD+0x46>
    1a4c:	c8 01       	movw	r24, r16
    1a4e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_printString>
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	39 f0       	breq	.+14     	; 0x1a64 <Lcd_printLCD+0x48>
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	05 c0       	rjmp	.+10     	; 0x1a64 <Lcd_printLCD+0x48>
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	03 c0       	rjmp	.+6      	; 0x1a64 <Lcd_printLCD+0x48>
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	01 c0       	rjmp	.+2      	; 0x1a64 <Lcd_printLCD+0x48>
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	08 95       	ret

00001a6e <Lcd_printDecimal>:
enuLcd_Status_t Lcd_printDecimal(uint16_t u16_num)
{
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	61 97       	sbiw	r28, 0x11	; 17
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, DEC);
    1a82:	41 e0       	ldi	r20, 0x01	; 1
    1a84:	be 01       	movw	r22, r28
    1a86:	6f 5f       	subi	r22, 0xFF	; 255
    1a88:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8a:	0e 94 0c 18 	call	0x3018	; 0x3018 <integerToString>
	Lcd_printString(au8_snum);
    1a8e:	ce 01       	movw	r24, r28
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_printString>
	return LCD_STATUS_ERROR_OK;
}
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	61 96       	adiw	r28, 0x11	; 17
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	08 95       	ret

00001aaa <LM35_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is already initialized */
	if (genu_LM35ModuleState == LM35_STATUS_INIT)
    1aaa:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <genu_LM35ModuleState>
    1aae:	85 30       	cpi	r24, 0x05	; 5
    1ab0:	51 f0       	breq	.+20     	; 0x1ac6 <LM35_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
    1ab2:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <Adc_init>
    1ab6:	81 30       	cpi	r24, 0x01	; 1
    1ab8:	29 f4       	brne	.+10     	; 0x1ac4 <LM35_init+0x1a>
		return LM35_STATUS_ERROR_NOK;
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
    1aba:	85 e0       	ldi	r24, 0x05	; 5
    1abc:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <genu_LM35ModuleState>
	return LM35_STATUS_ERROR_OK;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
		return LM35_STATUS_ERROR_NOK;
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
	return LM35_STATUS_ERROR_OK;
}
    1ac6:	08 95       	ret

00001ac8 <LM35_readTemp>:
* Parameters (out): pu8_Temp - Pointer to a Char to hold the temperature.
* Return value: enuLM35_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current temperature and return in celsius.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLM35_Status_t LM35_readTemp(uint8_t * pu8_Temp)
{
    1ac8:	0f 93       	push	r16
    1aca:	1f 93       	push	r17
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <LM35_readTemp+0xa>
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <LM35_readTemp+0xc>
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	9c 01       	movw	r18, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
    1ada:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <genu_LM35ModuleState>
    1ade:	95 30       	cpi	r25, 0x05	; 5
    1ae0:	f1 f4       	brne	.+60     	; 0x1b1e <LM35_readTemp+0x56>
	{
	return LM35_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
    1ae2:	21 15       	cp	r18, r1
    1ae4:	31 05       	cpc	r19, r1
    1ae6:	e9 f0       	breq	.+58     	; 0x1b22 <LM35_readTemp+0x5a>
    1ae8:	89 01       	movw	r16, r18
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
    1aea:	19 82       	std	Y+1, r1	; 0x01
    1aec:	1a 82       	std	Y+2, r1	; 0x02
    1aee:	1b 82       	std	Y+3, r1	; 0x03
    1af0:	1c 82       	std	Y+4, r1	; 0x04
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
    1af2:	be 01       	movw	r22, r28
    1af4:	6f 5f       	subi	r22, 0xFF	; 255
    1af6:	7f 4f       	sbci	r23, 0xFF	; 255
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <Adc_start>
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	91 f4       	brne	.+36     	; 0x1b26 <LM35_readTemp+0x5e>
		return LM35_STATUS_ERROR_NOK;
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
    1b02:	69 81       	ldd	r22, Y+1	; 0x01
    1b04:	7a 81       	ldd	r23, Y+2	; 0x02
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	2a e0       	ldi	r18, 0x0A	; 10
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e0       	ldi	r20, 0x00	; 0
    1b10:	50 e0       	ldi	r21, 0x00	; 0
    1b12:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__udivmodsi4>
    1b16:	f8 01       	movw	r30, r16
    1b18:	20 83       	st	Z, r18
	return LM35_STATUS_ERROR_OK;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	05 c0       	rjmp	.+10     	; 0x1b28 <LM35_readTemp+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
	{
	return LM35_STATUS_NOT_INIT;
    1b1e:	84 e0       	ldi	r24, 0x04	; 4
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <LM35_readTemp+0x60>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
	{
		return LM35_STATUS_ERROR_NULL;
    1b22:	83 e0       	ldi	r24, 0x03	; 3
    1b24:	01 c0       	rjmp	.+2      	; 0x1b28 <LM35_readTemp+0x60>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
		return LM35_STATUS_ERROR_NOK;
    1b26:	80 e0       	ldi	r24, 0x00	; 0
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
	return LM35_STATUS_ERROR_OK;
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	1f 91       	pop	r17
    1b36:	0f 91       	pop	r16
    1b38:	08 95       	ret

00001b3a <Motor_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
    1b3a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <gu8_MotorModuleStatus>
    1b3e:	86 30       	cpi	r24, 0x06	; 6
    1b40:	49 f0       	breq	.+18     	; 0x1b54 <Motor_init+0x1a>
/**************************************************************************************/
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
    1b42:	0e 94 ef 19 	call	0x33de	; 0x33de <SWPwm_Init>
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	39 f4       	brne	.+14     	; 0x1b58 <Motor_init+0x1e>
		return MOTOR_STATUS_ERROR_NOK;
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
    1b4a:	86 e0       	ldi	r24, 0x06	; 6
    1b4c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <gu8_MotorModuleStatus>
	return MOTOR_STATUS_ERROR_OK;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_INIT;
    1b54:	86 e0       	ldi	r24, 0x06	; 6
    1b56:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
		return MOTOR_STATUS_ERROR_NOK;
    1b58:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
	return MOTOR_STATUS_ERROR_OK;
}
    1b5a:	08 95       	ret

00001b5c <Motor_stop>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the motor.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to stop motor */
enuMotor_Status_t Motor_stop(uint8_t u8_motorID)
{
    1b5c:	df 92       	push	r13
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    1b6a:	81 11       	cpse	r24, r1
    1b6c:	5d c0       	rjmp	.+186    	; 0x1c28 <Motor_stop+0xcc>
    1b6e:	d8 2e       	mov	r13, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Stop the Motor by driving the pins to LOW */
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    1b70:	08 2f       	mov	r16, r24
    1b72:	10 e0       	ldi	r17, 0x00	; 0
    1b74:	78 01       	movw	r14, r16
    1b76:	ee 0c       	add	r14, r14
    1b78:	ff 1c       	adc	r15, r15
    1b7a:	ee 0c       	add	r14, r14
    1b7c:	ff 1c       	adc	r15, r15
    1b7e:	c7 01       	movw	r24, r14
    1b80:	80 0f       	add	r24, r16
    1b82:	91 1f       	adc	r25, r17
    1b84:	ec 01       	movw	r28, r24
    1b86:	cc 52       	subi	r28, 0x2C	; 44
    1b88:	db 4f       	sbci	r29, 0xFB	; 251
    1b8a:	60 e0       	ldi	r22, 0x00	; 0
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1b92:	60 e0       	ldi	r22, 0x00	; 0
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1b9a:	e0 e0       	ldi	r30, 0x00	; 0
    1b9c:	1c c0       	rjmp	.+56     	; 0x1bd6 <Motor_stop+0x7a>
	{
		if(u8_loopIndex == u8_motorID) /* Skip the current motor */
    1b9e:	ed 15       	cp	r30, r13
    1ba0:	c9 f0       	breq	.+50     	; 0x1bd4 <Motor_stop+0x78>
		{
			continue;
		}
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
    1ba2:	d8 01       	movw	r26, r16
    1ba4:	aa 0f       	add	r26, r26
    1ba6:	bb 1f       	adc	r27, r27
    1ba8:	aa 0f       	add	r26, r26
    1baa:	bb 1f       	adc	r27, r27
    1bac:	a0 0f       	add	r26, r16
    1bae:	b1 1f       	adc	r27, r17
    1bb0:	ac 52       	subi	r26, 0x2C	; 44
    1bb2:	bb 4f       	sbci	r27, 0xFB	; 251
    1bb4:	2c 91       	ld	r18, X
    1bb6:	8e 2f       	mov	r24, r30
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	dc 01       	movw	r26, r24
    1bbc:	aa 0f       	add	r26, r26
    1bbe:	bb 1f       	adc	r27, r27
    1bc0:	aa 0f       	add	r26, r26
    1bc2:	bb 1f       	adc	r27, r27
    1bc4:	8a 0f       	add	r24, r26
    1bc6:	9b 1f       	adc	r25, r27
    1bc8:	dc 01       	movw	r26, r24
    1bca:	ac 52       	subi	r26, 0x2C	; 44
    1bcc:	bb 4f       	sbci	r27, 0xFB	; 251
    1bce:	8c 91       	ld	r24, X
    1bd0:	28 17       	cp	r18, r24
    1bd2:	19 f0       	breq	.+6      	; 0x1bda <Motor_stop+0x7e>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1bd4:	ef 5f       	subi	r30, 0xFF	; 255
    1bd6:	ee 23       	and	r30, r30
    1bd8:	11 f3       	breq	.-60     	; 0x1b9e <Motor_stop+0x42>
			break;
		}
	}
	
	
	if(u8_loopIndex == MOTORS_USED_NUM)
    1bda:	e1 30       	cpi	r30, 0x01	; 1
    1bdc:	69 f4       	brne	.+26     	; 0x1bf8 <Motor_stop+0x9c>
	{ /* In case that there isn't any motor using the same PWM Channel --> Stop the PWM */
		SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1bde:	f8 01       	movw	r30, r16
    1be0:	ee 0f       	add	r30, r30
    1be2:	ff 1f       	adc	r31, r31
    1be4:	ee 0f       	add	r30, r30
    1be6:	ff 1f       	adc	r31, r31
    1be8:	e0 0f       	add	r30, r16
    1bea:	f1 1f       	adc	r31, r17
    1bec:	ec 52       	subi	r30, 0x2C	; 44
    1bee:	fb 4f       	sbci	r31, 0xFB	; 251
    1bf0:	80 81       	ld	r24, Z
    1bf2:	0e 94 3f 1b 	call	0x367e	; 0x367e <SWPwm_Stop>
    1bf6:	12 c0       	rjmp	.+36     	; 0x1c1c <Motor_stop+0xc0>
	}else
	{/* In case that there is another motor using the same PWM Channel */
		if (gau8_MotorsState[u8_loopIndex] == MOTOR_STOPPED) /* Check if the other motor is not running */
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	e6 5d       	subi	r30, 0xD6	; 214
    1bfc:	fa 4f       	sbci	r31, 0xFA	; 250
    1bfe:	80 81       	ld	r24, Z
    1c00:	81 11       	cpse	r24, r1
    1c02:	0c c0       	rjmp	.+24     	; 0x1c1c <Motor_stop+0xc0>
		{/* In case that the other motor is not running --> Stop the PWM */
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1c04:	f8 01       	movw	r30, r16
    1c06:	ee 0f       	add	r30, r30
    1c08:	ff 1f       	adc	r31, r31
    1c0a:	ee 0f       	add	r30, r30
    1c0c:	ff 1f       	adc	r31, r31
    1c0e:	e0 0f       	add	r30, r16
    1c10:	f1 1f       	adc	r31, r17
    1c12:	ec 52       	subi	r30, 0x2C	; 44
    1c14:	fb 4f       	sbci	r31, 0xFB	; 251
    1c16:	80 81       	ld	r24, Z
    1c18:	0e 94 3f 1b 	call	0x367e	; 0x367e <SWPwm_Stop>
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
    1c1c:	f8 01       	movw	r30, r16
    1c1e:	e6 5d       	subi	r30, 0xD6	; 214
    1c20:	fa 4f       	sbci	r31, 0xFA	; 250
    1c22:	10 82       	st	Z, r1
	return MOTOR_STATUS_ERROR_OK;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	01 c0       	rjmp	.+2      	; 0x1c2a <Motor_stop+0xce>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    1c28:	82 e0       	ldi	r24, 0x02	; 2
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
	return MOTOR_STATUS_ERROR_OK;
    1c2a:	df 91       	pop	r29
    1c2c:	cf 91       	pop	r28
    1c2e:	1f 91       	pop	r17
    1c30:	0f 91       	pop	r16
    1c32:	ff 90       	pop	r15
    1c34:	ef 90       	pop	r14
    1c36:	df 90       	pop	r13
    1c38:	08 95       	ret

00001c3a <Motor_run>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Move the motor in the given direction.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to move the motor forward with given speed in % */
enuMotor_Status_t Motor_run(uint8_t u8_motorID, uint8_t u8_speed, uint8_t u8_direction)
{
    1c3a:	ff 92       	push	r15
    1c3c:	0f 93       	push	r16
    1c3e:	1f 93       	push	r17
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
    1c44:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <gu8_MotorModuleStatus>
    1c48:	96 30       	cpi	r25, 0x06	; 6
    1c4a:	09 f0       	breq	.+2      	; 0x1c4e <Motor_run+0x14>
    1c4c:	57 c0       	rjmp	.+174    	; 0x1cfc <Motor_run+0xc2>
	{
		return MOTOR_STATUS_UNINIT;
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    1c4e:	81 11       	cpse	r24, r1
    1c50:	57 c0       	rjmp	.+174    	; 0x1d00 <Motor_run+0xc6>
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
    1c52:	65 36       	cpi	r22, 0x65	; 101
    1c54:	08 f0       	brcs	.+2      	; 0x1c58 <Motor_run+0x1e>
    1c56:	56 c0       	rjmp	.+172    	; 0x1d04 <Motor_run+0xca>
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
    1c58:	42 30       	cpi	r20, 0x02	; 2
    1c5a:	08 f0       	brcs	.+2      	; 0x1c5e <Motor_run+0x24>
    1c5c:	55 c0       	rjmp	.+170    	; 0x1d08 <Motor_run+0xce>
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
    1c5e:	08 2f       	mov	r16, r24
    1c60:	10 e0       	ldi	r17, 0x00	; 0
    1c62:	f8 01       	movw	r30, r16
    1c64:	e6 5d       	subi	r30, 0xD6	; 214
    1c66:	fa 4f       	sbci	r31, 0xFA	; 250
    1c68:	90 81       	ld	r25, Z
    1c6a:	91 30       	cpi	r25, 0x01	; 1
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <Motor_run+0x36>
    1c6e:	4e c0       	rjmp	.+156    	; 0x1d0c <Motor_run+0xd2>
    1c70:	f6 2e       	mov	r15, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_speed == 0) 
    1c72:	61 11       	cpse	r22, r1
    1c74:	04 c0       	rjmp	.+8      	; 0x1c7e <Motor_run+0x44>
	{
		Motor_stop(u8_motorID);
    1c76:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Motor_stop>
		return MOTOR_STATUS_ERROR_OK;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	48 c0       	rjmp	.+144    	; 0x1d0e <Motor_run+0xd4>
	}
	if(u8_direction == MOTOR_DIR_CLK_WISE) /* Activate the Motor in the Clock Wise Direction */
    1c7e:	41 11       	cpse	r20, r1
    1c80:	12 c0       	rjmp	.+36     	; 0x1ca6 <Motor_run+0x6c>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_HIGH);
    1c82:	25 e0       	ldi	r18, 0x05	; 5
    1c84:	20 9f       	mul	r18, r16
    1c86:	c0 01       	movw	r24, r0
    1c88:	21 9f       	mul	r18, r17
    1c8a:	90 0d       	add	r25, r0
    1c8c:	11 24       	eor	r1, r1
    1c8e:	ec 01       	movw	r28, r24
    1c90:	cc 52       	subi	r28, 0x2C	; 44
    1c92:	db 4f       	sbci	r29, 0xFB	; 251
    1c94:	61 e0       	ldi	r22, 0x01	; 1
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1c9c:	60 e0       	ldi	r22, 0x00	; 0
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    1ca4:	13 c0       	rjmp	.+38     	; 0x1ccc <Motor_run+0x92>
	}else if(u8_direction == MOTOR_DIR_ANTI_CLK_WISE) /* Activate the Motor in the Anti Clock Wise Direction */
    1ca6:	41 30       	cpi	r20, 0x01	; 1
    1ca8:	89 f4       	brne	.+34     	; 0x1ccc <Motor_run+0x92>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    1caa:	25 e0       	ldi	r18, 0x05	; 5
    1cac:	20 9f       	mul	r18, r16
    1cae:	c0 01       	movw	r24, r0
    1cb0:	21 9f       	mul	r18, r17
    1cb2:	90 0d       	add	r25, r0
    1cb4:	11 24       	eor	r1, r1
    1cb6:	ec 01       	movw	r28, r24
    1cb8:	cc 52       	subi	r28, 0x2C	; 44
    1cba:	db 4f       	sbci	r29, 0xFB	; 251
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_HIGH);
    1cc4:	61 e0       	ldi	r22, 0x01	; 1
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
	}
	
	/* Change the state of the Motor to Running */
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
    1ccc:	f8 01       	movw	r30, r16
    1cce:	e6 5d       	subi	r30, 0xD6	; 214
    1cd0:	fa 4f       	sbci	r31, 0xFA	; 250
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	80 83       	st	Z, r24
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
    1cd6:	f8 01       	movw	r30, r16
    1cd8:	ee 0f       	add	r30, r30
    1cda:	ff 1f       	adc	r31, r31
    1cdc:	ee 0f       	add	r30, r30
    1cde:	ff 1f       	adc	r31, r31
    1ce0:	e0 0f       	add	r30, r16
    1ce2:	f1 1f       	adc	r31, r17
    1ce4:	ec 52       	subi	r30, 0x2C	; 44
    1ce6:	fb 4f       	sbci	r31, 0xFB	; 251
    1ce8:	43 81       	ldd	r20, Z+3	; 0x03
    1cea:	54 81       	ldd	r21, Z+4	; 0x04
    1cec:	60 e0       	ldi	r22, 0x00	; 0
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	2f 2d       	mov	r18, r15
    1cf2:	80 81       	ld	r24, Z
    1cf4:	0e 94 0b 1a 	call	0x3416	; 0x3416 <SWPwm_Start>
	
	return MOTOR_STATUS_ERROR_OK;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	09 c0       	rjmp	.+18     	; 0x1d0e <Motor_run+0xd4>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_UNINIT;
    1cfc:	87 e0       	ldi	r24, 0x07	; 7
    1cfe:	07 c0       	rjmp	.+14     	; 0x1d0e <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    1d00:	82 e0       	ldi	r24, 0x02	; 2
    1d02:	05 c0       	rjmp	.+10     	; 0x1d0e <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
    1d04:	83 e0       	ldi	r24, 0x03	; 3
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
    1d08:	84 e0       	ldi	r24, 0x04	; 4
    1d0a:	01 c0       	rjmp	.+2      	; 0x1d0e <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
	{
		return MOTOR_STATUS_ERROR_RUNNING;
    1d0c:	85 e0       	ldi	r24, 0x05	; 5
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
	
	return MOTOR_STATUS_ERROR_OK;
}
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	ff 90       	pop	r15
    1d18:	08 95       	ret

00001d1a <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
    1d1a:	cf 93       	push	r28
    1d1c:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
    1d1e:	c0 91 2c 05 	lds	r28, 0x052C	; 0x80052c <gu8_counter>
    1d22:	d0 e0       	ldi	r29, 0x00	; 0
    1d24:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <Uart_DataRegister>
    1d28:	c3 5d       	subi	r28, 0xD3	; 211
    1d2a:	da 4f       	sbci	r29, 0xFA	; 250
    1d2c:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
    1d2e:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <gu8_counter>
    1d32:	e9 2f       	mov	r30, r25
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	e3 5d       	subi	r30, 0xD3	; 211
    1d38:	fa 4f       	sbci	r31, 0xFA	; 250
    1d3a:	80 81       	ld	r24, Z
    1d3c:	8d 30       	cpi	r24, 0x0D	; 13
    1d3e:	71 f4       	brne	.+28     	; 0x1d5c <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    1d40:	0e 94 9d 1b 	call	0x373a	; 0x373a <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
    1d44:	e0 91 2c 05 	lds	r30, 0x052C	; 0x80052c <gu8_counter>
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	e3 5d       	subi	r30, 0xD3	; 211
    1d4c:	fa 4f       	sbci	r31, 0xFA	; 250
    1d4e:	10 82       	st	Z, r1
		gu8_counter = 0;
    1d50:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <gu8_counter>
		gu8_flag = 1;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <gu8_flag>
    1d5a:	1d c0       	rjmp	.+58     	; 0x1d96 <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
    1d5c:	88 30       	cpi	r24, 0x08	; 8
    1d5e:	51 f4       	brne	.+20     	; 0x1d74 <Uart_RXC_ISR+0x5a>
    1d60:	99 23       	and	r25, r25
    1d62:	41 f0       	breq	.+16     	; 0x1d74 <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    1d64:	0e 94 9d 1b 	call	0x373a	; 0x373a <Uart_sendByte>
		gu8_counter--;
    1d68:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <gu8_counter>
    1d6c:	81 50       	subi	r24, 0x01	; 1
    1d6e:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <gu8_counter>
    1d72:	11 c0       	rjmp	.+34     	; 0x1d96 <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
    1d74:	88 30       	cpi	r24, 0x08	; 8
    1d76:	79 f0       	breq	.+30     	; 0x1d96 <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
    1d78:	90 91 2c 06 	lds	r25, 0x062C	; 0x80062c <gu8_visibility>
    1d7c:	91 30       	cpi	r25, 0x01	; 1
    1d7e:	21 f4       	brne	.+8      	; 0x1d88 <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
    1d80:	8a e2       	ldi	r24, 0x2A	; 42
    1d82:	0e 94 9d 1b 	call	0x373a	; 0x373a <Uart_sendByte>
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
    1d88:	0e 94 9d 1b 	call	0x373a	; 0x373a <Uart_sendByte>
		}
		gu8_counter++;
    1d8c:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <gu8_counter>
    1d90:	8f 5f       	subi	r24, 0xFF	; 255
    1d92:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <gu8_counter>
	}
}
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	08 95       	ret

00001d9c <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
    1d9c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <genu_TerminalModuleState>
    1da0:	83 30       	cpi	r24, 0x03	; 3
    1da2:	81 f0       	breq	.+32     	; 0x1dc4 <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
    1da4:	0e 94 87 1b 	call	0x370e	; 0x370e <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	11 f0       	breq	.+4      	; 0x1db0 <Terminal_init+0x14>
    1dac:	87 30       	cpi	r24, 0x07	; 7
    1dae:	49 f4       	brne	.+18     	; 0x1dc2 <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
    1db0:	8d e8       	ldi	r24, 0x8D	; 141
    1db2:	9e e0       	ldi	r25, 0x0E	; 14
    1db4:	0e 94 cf 1b 	call	0x379e	; 0x379e <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
    1db8:	83 e0       	ldi	r24, 0x03	; 3
    1dba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
    1dc4:	08 95       	ret

00001dc6 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	81 f0       	breq	.+32     	; 0x1dee <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    1dce:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <genu_TerminalModuleState>
    1dd2:	22 30       	cpi	r18, 0x02	; 2
    1dd4:	79 f0       	breq	.+30     	; 0x1df4 <Terminal_Out+0x2e>
    1dd6:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
    1dd8:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <stringLength>
    1ddc:	68 2f       	mov	r22, r24
    1dde:	70 e0       	ldi	r23, 0x00	; 0
    1de0:	ce 01       	movw	r24, r28
    1de2:	0e 94 a8 1b 	call	0x3750	; 0x3750 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
    1de6:	81 30       	cpi	r24, 0x01	; 1
    1de8:	21 f0       	breq	.+8      	; 0x1df2 <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	03 c0       	rjmp	.+6      	; 0x1df4 <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    1dee:	24 e0       	ldi	r18, 0x04	; 4
    1df0:	01 c0       	rjmp	.+2      	; 0x1df4 <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
    1df2:	21 e0       	ldi	r18, 0x01	; 1
}
    1df4:	82 2f       	mov	r24, r18
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	08 95       	ret

00001dfc <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
    1dfc:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
    1dfe:	89 2b       	or	r24, r25
    1e00:	a1 f0       	breq	.+40     	; 0x1e2a <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    1e02:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <genu_TerminalModuleState>
    1e06:	82 30       	cpi	r24, 0x02	; 2
    1e08:	99 f0       	breq	.+38     	; 0x1e30 <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
    1e0a:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <gu8_flag>
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	71 f4       	brne	.+28     	; 0x1e2e <Terminal_In+0x32>
	{
		gu8_flag = 0;
    1e12:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
    1e16:	8d e2       	ldi	r24, 0x2D	; 45
    1e18:	95 e0       	ldi	r25, 0x05	; 5
    1e1a:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <stringCopy>
		EmptyString(gau8_data);
    1e1e:	8d e2       	ldi	r24, 0x2D	; 45
    1e20:	95 e0       	ldi	r25, 0x05	; 5
    1e22:	0e 94 ef 17 	call	0x2fde	; 0x2fde <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
    1e26:	85 e0       	ldi	r24, 0x05	; 5
    1e28:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    1e2a:	84 e0       	ldi	r24, 0x04	; 4
    1e2c:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
}
    1e30:	08 95       	ret

00001e32 <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	80 93 2c 06 	sts	0x062C, r24	; 0x80062c <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
    1e38:	08 95       	ret

00001e3a <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
    1e3a:	10 92 2c 06 	sts	0x062C, r1	; 0x80062c <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	08 95       	ret

00001e42 <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
    1e42:	0e 94 34 08 	call	0x1068	; 0x1068 <App_start>
    1e46:	ff cf       	rjmp	.-2      	; 0x1e46 <main+0x4>

00001e48 <Adc_init>:
		f32_Resolution = (1000*ADC_AREF_VALUE)/ADC_STEPS_NUM;
	}
	*pu32_data = u16_Result*f32_Resolution;
		
	return ADC_STATUS_ERROR_OK;
}
    1e48:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <genuAdc_Status>
    1e4c:	87 30       	cpi	r24, 0x07	; 7
    1e4e:	11 f1       	breq	.+68     	; 0x1e94 <Adc_init+0x4c>
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	13 c0       	rjmp	.+38     	; 0x1e7a <Adc_init+0x32>
    1e54:	3b b3       	in	r19, 0x1b	; 27
    1e56:	e2 2f       	mov	r30, r18
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	ee 0f       	add	r30, r30
    1e5c:	ff 1f       	adc	r31, r31
    1e5e:	ed 57       	subi	r30, 0x7D	; 125
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	00 80       	ld	r0, Z
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <Adc_init+0x26>
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	0a 94       	dec	r0
    1e70:	e2 f7       	brpl	.-8      	; 0x1e6a <Adc_init+0x22>
    1e72:	80 95       	com	r24
    1e74:	83 23       	and	r24, r19
    1e76:	8b bb       	out	0x1b, r24	; 27
    1e78:	2f 5f       	subi	r18, 0xFF	; 255
    1e7a:	22 23       	and	r18, r18
    1e7c:	59 f3       	breq	.-42     	; 0x1e54 <Adc_init+0xc>
    1e7e:	97 e0       	ldi	r25, 0x07	; 7
    1e80:	96 b9       	out	0x06, r25	; 6
    1e82:	86 b1       	in	r24, 0x06	; 6
    1e84:	8f 7d       	andi	r24, 0xDF	; 223
    1e86:	86 b9       	out	0x06, r24	; 6
    1e88:	86 b1       	in	r24, 0x06	; 6
    1e8a:	86 b9       	out	0x06, r24	; 6
    1e8c:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <genuAdc_Status>
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	08 95       	ret
    1e94:	88 e0       	ldi	r24, 0x08	; 8
    1e96:	08 95       	ret

00001e98 <Adc_start>:
    1e98:	cf 92       	push	r12
    1e9a:	df 92       	push	r13
    1e9c:	ef 92       	push	r14
    1e9e:	ff 92       	push	r15
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <genuAdc_Status>
    1ea8:	97 30       	cpi	r25, 0x07	; 7
    1eaa:	09 f0       	breq	.+2      	; 0x1eae <Adc_start+0x16>
    1eac:	61 c0       	rjmp	.+194    	; 0x1f70 <Adc_start+0xd8>
    1eae:	61 15       	cp	r22, r1
    1eb0:	71 05       	cpc	r23, r1
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <Adc_start+0x1e>
    1eb4:	5f c0       	rjmp	.+190    	; 0x1f74 <Adc_start+0xdc>
    1eb6:	37 b1       	in	r19, 0x07	; 7
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	fc 01       	movw	r30, r24
    1ebc:	ee 0f       	add	r30, r30
    1ebe:	ff 1f       	adc	r31, r31
    1ec0:	ed 57       	subi	r30, 0x7D	; 125
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	20 81       	ld	r18, Z
    1ec6:	23 2b       	or	r18, r19
    1ec8:	27 b9       	out	0x07, r18	; 7
    1eca:	47 b1       	in	r20, 0x07	; 7
    1ecc:	31 81       	ldd	r19, Z+1	; 0x01
    1ece:	50 e4       	ldi	r21, 0x40	; 64
    1ed0:	35 9f       	mul	r19, r21
    1ed2:	90 01       	movw	r18, r0
    1ed4:	11 24       	eor	r1, r1
    1ed6:	24 2b       	or	r18, r20
    1ed8:	27 b9       	out	0x07, r18	; 7
    1eda:	26 b1       	in	r18, 0x06	; 6
    1edc:	20 68       	ori	r18, 0x80	; 128
    1ede:	26 b9       	out	0x06, r18	; 6
    1ee0:	26 b1       	in	r18, 0x06	; 6
    1ee2:	20 64       	ori	r18, 0x40	; 64
    1ee4:	26 b9       	out	0x06, r18	; 6
    1ee6:	34 9b       	sbis	0x06, 4	; 6
    1ee8:	fe cf       	rjmp	.-4      	; 0x1ee6 <Adc_start+0x4e>
    1eea:	44 b1       	in	r20, 0x04	; 4
    1eec:	25 b1       	in	r18, 0x05	; 5
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	32 2f       	mov	r19, r18
    1ef2:	22 27       	eor	r18, r18
    1ef4:	24 2b       	or	r18, r20
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	fc 01       	movw	r30, r24
    1efc:	ed 57       	subi	r30, 0x7D	; 125
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	81 81       	ldd	r24, Z+1	; 0x01
    1f02:	83 30       	cpi	r24, 0x03	; 3
    1f04:	41 f0       	breq	.+16     	; 0x1f16 <Adc_start+0x7e>
    1f06:	81 30       	cpi	r24, 0x01	; 1
    1f08:	69 f0       	breq	.+26     	; 0x1f24 <Adc_start+0x8c>
    1f0a:	88 23       	and	r24, r24
    1f0c:	a1 f0       	breq	.+40     	; 0x1f36 <Adc_start+0x9e>
    1f0e:	c1 2c       	mov	r12, r1
    1f10:	d1 2c       	mov	r13, r1
    1f12:	76 01       	movw	r14, r12
    1f14:	18 c0       	rjmp	.+48     	; 0x1f46 <Adc_start+0xae>
    1f16:	c1 2c       	mov	r12, r1
    1f18:	d1 2c       	mov	r13, r1
    1f1a:	76 01       	movw	r14, r12
    1f1c:	68 94       	set
    1f1e:	e5 f8       	bld	r14, 5
    1f20:	f6 f8       	bld	r15, 6
    1f22:	11 c0       	rjmp	.+34     	; 0x1f46 <Adc_start+0xae>
    1f24:	0f 2e       	mov	r0, r31
    1f26:	c1 2c       	mov	r12, r1
    1f28:	f0 e4       	ldi	r31, 0x40	; 64
    1f2a:	df 2e       	mov	r13, r31
    1f2c:	fc e9       	ldi	r31, 0x9C	; 156
    1f2e:	ef 2e       	mov	r14, r31
    1f30:	fd 2c       	mov	r15, r13
    1f32:	f0 2d       	mov	r31, r0
    1f34:	08 c0       	rjmp	.+16     	; 0x1f46 <Adc_start+0xae>
    1f36:	0f 2e       	mov	r0, r31
    1f38:	c1 2c       	mov	r12, r1
    1f3a:	f0 e4       	ldi	r31, 0x40	; 64
    1f3c:	df 2e       	mov	r13, r31
    1f3e:	fc e9       	ldi	r31, 0x9C	; 156
    1f40:	ef 2e       	mov	r14, r31
    1f42:	fd 2c       	mov	r15, r13
    1f44:	f0 2d       	mov	r31, r0
    1f46:	eb 01       	movw	r28, r22
    1f48:	b9 01       	movw	r22, r18
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__floatunsisf>
    1f52:	a7 01       	movw	r20, r14
    1f54:	96 01       	movw	r18, r12
    1f56:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__mulsf3>
    1f5a:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <__fixunssfsi>
    1f5e:	68 83       	st	Y, r22
    1f60:	79 83       	std	Y+1, r23	; 0x01
    1f62:	8a 83       	std	Y+2, r24	; 0x02
    1f64:	9b 83       	std	Y+3, r25	; 0x03
    1f66:	86 b1       	in	r24, 0x06	; 6
    1f68:	80 61       	ori	r24, 0x10	; 16
    1f6a:	86 b9       	out	0x06, r24	; 6
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	03 c0       	rjmp	.+6      	; 0x1f76 <Adc_start+0xde>
    1f70:	86 e0       	ldi	r24, 0x06	; 6
    1f72:	01 c0       	rjmp	.+2      	; 0x1f76 <Adc_start+0xde>
    1f74:	85 e0       	ldi	r24, 0x05	; 5
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	ff 90       	pop	r15
    1f7c:	ef 90       	pop	r14
    1f7e:	df 90       	pop	r13
    1f80:	cf 90       	pop	r12
    1f82:	08 95       	ret

00001f84 <__vector_16>:

ISR(ADC_IRQ)
{
    1f84:	1f 92       	push	r1
    1f86:	0f 92       	push	r0
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	0f 92       	push	r0
    1f8c:	11 24       	eor	r1, r1
    1f8e:	2f 93       	push	r18
    1f90:	3f 93       	push	r19
    1f92:	4f 93       	push	r20
    1f94:	5f 93       	push	r21
    1f96:	6f 93       	push	r22
    1f98:	7f 93       	push	r23
    1f9a:	8f 93       	push	r24
    1f9c:	9f 93       	push	r25
    1f9e:	af 93       	push	r26
    1fa0:	bf 93       	push	r27
    1fa2:	ef 93       	push	r30
    1fa4:	ff 93       	push	r31
	(*ADC_CallBackPtr)();
    1fa6:	e0 91 2d 06 	lds	r30, 0x062D	; 0x80062d <ADC_CallBackPtr>
    1faa:	f0 91 2e 06 	lds	r31, 0x062E	; 0x80062e <ADC_CallBackPtr+0x1>
    1fae:	09 95       	icall
    1fb0:	ff 91       	pop	r31
    1fb2:	ef 91       	pop	r30
    1fb4:	bf 91       	pop	r27
    1fb6:	af 91       	pop	r26
    1fb8:	9f 91       	pop	r25
    1fba:	8f 91       	pop	r24
    1fbc:	7f 91       	pop	r23
    1fbe:	6f 91       	pop	r22
    1fc0:	5f 91       	pop	r21
    1fc2:	4f 91       	pop	r20
    1fc4:	3f 91       	pop	r19
    1fc6:	2f 91       	pop	r18
    1fc8:	0f 90       	pop	r0
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	0f 90       	pop	r0
    1fce:	1f 90       	pop	r1
    1fd0:	18 95       	reti

00001fd2 <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
    1fd2:	2f 92       	push	r2
    1fd4:	3f 92       	push	r3
    1fd6:	4f 92       	push	r4
    1fd8:	5f 92       	push	r5
    1fda:	6f 92       	push	r6
    1fdc:	7f 92       	push	r7
    1fde:	8f 92       	push	r8
    1fe0:	9f 92       	push	r9
    1fe2:	af 92       	push	r10
    1fe4:	bf 92       	push	r11
    1fe6:	cf 92       	push	r12
    1fe8:	df 92       	push	r13
    1fea:	ef 92       	push	r14
    1fec:	ff 92       	push	r15
    1fee:	0f 93       	push	r16
    1ff0:	1f 93       	push	r17
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <Delay_ms+0x26>
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <Delay_ms+0x28>
    1ffa:	00 d0       	rcall	.+0      	; 0x1ffc <Delay_ms+0x2a>
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	22 2e       	mov	r2, r18
    2002:	33 2e       	mov	r3, r19
    2004:	44 2e       	mov	r4, r20
    2006:	55 2e       	mov	r5, r21
    2008:	66 2e       	mov	r6, r22
    200a:	79 83       	std	Y+1, r23	; 0x01
    200c:	8a 83       	std	Y+2, r24	; 0x02
    200e:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    2010:	91 2c       	mov	r9, r1
    2012:	1d 82       	std	Y+5, r1	; 0x05
    2014:	1c 82       	std	Y+4, r1	; 0x04
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	e0 e0       	ldi	r30, 0x00	; 0
    201c:	71 2c       	mov	r7, r1
    201e:	81 2c       	mov	r8, r1
    2020:	44 c0       	rjmp	.+136    	; 0x20aa <Delay_ms+0xd8>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
    2022:	2d 2d       	mov	r18, r13
    2024:	3e 2d       	mov	r19, r14
    2026:	4f 2d       	mov	r20, r15
    2028:	50 2f       	mov	r21, r16
    202a:	61 2f       	mov	r22, r17
    202c:	7a 2f       	mov	r23, r26
    202e:	8b 2d       	mov	r24, r11
    2030:	9c 2d       	mov	r25, r12
    2032:	a1 e0       	ldi	r26, 0x01	; 1
    2034:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__adddi3_s8>
    2038:	d2 2e       	mov	r13, r18
    203a:	e3 2e       	mov	r14, r19
    203c:	f4 2e       	mov	r15, r20
    203e:	05 2f       	mov	r16, r21
    2040:	16 2f       	mov	r17, r22
    2042:	a7 2f       	mov	r26, r23
    2044:	b8 2e       	mov	r11, r24
    2046:	c9 2e       	mov	r12, r25
    2048:	0a c0       	rjmp	.+20     	; 0x205e <Delay_ms+0x8c>
    204a:	d1 2c       	mov	r13, r1
    204c:	e1 2c       	mov	r14, r1
    204e:	f1 2c       	mov	r15, r1
    2050:	00 e0       	ldi	r16, 0x00	; 0
    2052:	10 e0       	ldi	r17, 0x00	; 0
    2054:	a0 e0       	ldi	r26, 0x00	; 0
    2056:	b1 2c       	mov	r11, r1
    2058:	c1 2c       	mov	r12, r1
    205a:	ad 80       	ldd	r10, Y+5	; 0x05
    205c:	ee 83       	std	Y+6, r30	; 0x06
    205e:	2d 2d       	mov	r18, r13
    2060:	3e 2d       	mov	r19, r14
    2062:	4f 2d       	mov	r20, r15
    2064:	50 2f       	mov	r21, r16
    2066:	61 2f       	mov	r22, r17
    2068:	7a 2f       	mov	r23, r26
    206a:	8b 2d       	mov	r24, r11
    206c:	9c 2d       	mov	r25, r12
    206e:	2b 38       	cpi	r18, 0x8B	; 139
    2070:	31 05       	cpc	r19, r1
    2072:	41 05       	cpc	r20, r1
    2074:	51 05       	cpc	r21, r1
    2076:	61 05       	cpc	r22, r1
    2078:	71 05       	cpc	r23, r1
    207a:	81 05       	cpc	r24, r1
    207c:	91 05       	cpc	r25, r1
    207e:	89 f2       	breq	.-94     	; 0x2022 <Delay_ms+0x50>
    2080:	80 f2       	brcs	.-96     	; 0x2022 <Delay_ms+0x50>
    2082:	ee 81       	ldd	r30, Y+6	; 0x06

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    2084:	29 2d       	mov	r18, r9
    2086:	3a 2d       	mov	r19, r10
    2088:	4c 81       	ldd	r20, Y+4	; 0x04
    208a:	5b 2f       	mov	r21, r27
    208c:	6f 2f       	mov	r22, r31
    208e:	7e 2f       	mov	r23, r30
    2090:	87 2d       	mov	r24, r7
    2092:	98 2d       	mov	r25, r8
    2094:	a1 e0       	ldi	r26, 0x01	; 1
    2096:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__adddi3_s8>
    209a:	92 2e       	mov	r9, r18
    209c:	3d 83       	std	Y+5, r19	; 0x05
    209e:	4c 83       	std	Y+4, r20	; 0x04
    20a0:	b5 2f       	mov	r27, r21
    20a2:	f6 2f       	mov	r31, r22
    20a4:	e7 2f       	mov	r30, r23
    20a6:	78 2e       	mov	r7, r24
    20a8:	89 2e       	mov	r8, r25
    20aa:	29 2d       	mov	r18, r9
    20ac:	3d 81       	ldd	r19, Y+5	; 0x05
    20ae:	4c 81       	ldd	r20, Y+4	; 0x04
    20b0:	5b 2f       	mov	r21, r27
    20b2:	6f 2f       	mov	r22, r31
    20b4:	7e 2f       	mov	r23, r30
    20b6:	87 2d       	mov	r24, r7
    20b8:	98 2d       	mov	r25, r8
    20ba:	a2 2c       	mov	r10, r2
    20bc:	b3 2c       	mov	r11, r3
    20be:	c4 2c       	mov	r12, r4
    20c0:	d5 2c       	mov	r13, r5
    20c2:	e6 2c       	mov	r14, r6
    20c4:	f9 80       	ldd	r15, Y+1	; 0x01
    20c6:	0a 81       	ldd	r16, Y+2	; 0x02
    20c8:	1b 81       	ldd	r17, Y+3	; 0x03
    20ca:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__cmpdi2>
    20ce:	08 f4       	brcc	.+2      	; 0x20d2 <Delay_ms+0x100>
    20d0:	bc cf       	rjmp	.-136    	; 0x204a <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
    20d2:	26 96       	adiw	r28, 0x06	; 6
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	df 90       	pop	r13
    20ec:	cf 90       	pop	r12
    20ee:	bf 90       	pop	r11
    20f0:	af 90       	pop	r10
    20f2:	9f 90       	pop	r9
    20f4:	8f 90       	pop	r8
    20f6:	7f 90       	pop	r7
    20f8:	6f 90       	pop	r6
    20fa:	5f 90       	pop	r5
    20fc:	4f 90       	pop	r4
    20fe:	3f 90       	pop	r3
    2100:	2f 90       	pop	r2
    2102:	08 95       	ret

00002104 <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
    2104:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
    2106:	89 2b       	or	r24, r25
    2108:	09 f4       	brne	.+2      	; 0x210c <Dio_init+0x8>
    210a:	e4 c0       	rjmp	.+456    	; 0x22d4 <Dio_init+0x1d0>
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	d7 c0       	rjmp	.+430    	; 0x22be <Dio_init+0x1ba>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
    2110:	e9 2f       	mov	r30, r25
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	ee 0f       	add	r30, r30
    2116:	ff 1f       	adc	r31, r31
    2118:	ee 0f       	add	r30, r30
    211a:	ff 1f       	adc	r31, r31
    211c:	e4 0f       	add	r30, r20
    211e:	f5 1f       	adc	r31, r21
    2120:	31 81       	ldd	r19, Z+1	; 0x01
    2122:	38 30       	cpi	r19, 0x08	; 8
    2124:	08 f0       	brcs	.+2      	; 0x2128 <Dio_init+0x24>
    2126:	d8 c0       	rjmp	.+432    	; 0x22d8 <Dio_init+0x1d4>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
    2128:	20 81       	ld	r18, Z
    212a:	21 30       	cpi	r18, 0x01	; 1
    212c:	c1 f1       	breq	.+112    	; 0x219e <Dio_init+0x9a>
    212e:	38 f0       	brcs	.+14     	; 0x213e <Dio_init+0x3a>
    2130:	22 30       	cpi	r18, 0x02	; 2
    2132:	09 f4       	brne	.+2      	; 0x2136 <Dio_init+0x32>
    2134:	64 c0       	rjmp	.+200    	; 0x21fe <Dio_init+0xfa>
    2136:	23 30       	cpi	r18, 0x03	; 3
    2138:	09 f4       	brne	.+2      	; 0x213c <Dio_init+0x38>
    213a:	91 c0       	rjmp	.+290    	; 0x225e <Dio_init+0x15a>
    213c:	cf c0       	rjmp	.+414    	; 0x22dc <Dio_init+0x1d8>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    213e:	2a b3       	in	r18, 0x1a	; 26
    2140:	61 e0       	ldi	r22, 0x01	; 1
    2142:	70 e0       	ldi	r23, 0x00	; 0
    2144:	db 01       	movw	r26, r22
    2146:	02 c0       	rjmp	.+4      	; 0x214c <Dio_init+0x48>
    2148:	aa 0f       	add	r26, r26
    214a:	bb 1f       	adc	r27, r27
    214c:	3a 95       	dec	r19
    214e:	e2 f7       	brpl	.-8      	; 0x2148 <Dio_init+0x44>
    2150:	8a 2f       	mov	r24, r26
    2152:	80 95       	com	r24
    2154:	82 23       	and	r24, r18
    2156:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2158:	aa b3       	in	r26, 0x1a	; 26
    215a:	82 81       	ldd	r24, Z+2	; 0x02
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	01 80       	ldd	r0, Z+1	; 0x01
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <Dio_init+0x64>
    2164:	22 0f       	add	r18, r18
    2166:	33 1f       	adc	r19, r19
    2168:	0a 94       	dec	r0
    216a:	e2 f7       	brpl	.-8      	; 0x2164 <Dio_init+0x60>
    216c:	2a 2b       	or	r18, r26
    216e:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2170:	8b b3       	in	r24, 0x1b	; 27
    2172:	01 80       	ldd	r0, Z+1	; 0x01
    2174:	02 c0       	rjmp	.+4      	; 0x217a <Dio_init+0x76>
    2176:	66 0f       	add	r22, r22
    2178:	77 1f       	adc	r23, r23
    217a:	0a 94       	dec	r0
    217c:	e2 f7       	brpl	.-8      	; 0x2176 <Dio_init+0x72>
    217e:	60 95       	com	r22
    2180:	68 23       	and	r22, r24
    2182:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2184:	6b b3       	in	r22, 0x1b	; 27
    2186:	83 81       	ldd	r24, Z+3	; 0x03
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	01 80       	ldd	r0, Z+1	; 0x01
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <Dio_init+0x90>
    2190:	22 0f       	add	r18, r18
    2192:	33 1f       	adc	r19, r19
    2194:	0a 94       	dec	r0
    2196:	e2 f7       	brpl	.-8      	; 0x2190 <Dio_init+0x8c>
    2198:	26 2b       	or	r18, r22
    219a:	2b bb       	out	0x1b, r18	; 27
				break;
    219c:	8f c0       	rjmp	.+286    	; 0x22bc <Dio_init+0x1b8>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    219e:	27 b3       	in	r18, 0x17	; 23
    21a0:	61 e0       	ldi	r22, 0x01	; 1
    21a2:	70 e0       	ldi	r23, 0x00	; 0
    21a4:	db 01       	movw	r26, r22
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <Dio_init+0xa8>
    21a8:	aa 0f       	add	r26, r26
    21aa:	bb 1f       	adc	r27, r27
    21ac:	3a 95       	dec	r19
    21ae:	e2 f7       	brpl	.-8      	; 0x21a8 <Dio_init+0xa4>
    21b0:	8a 2f       	mov	r24, r26
    21b2:	80 95       	com	r24
    21b4:	82 23       	and	r24, r18
    21b6:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    21b8:	a7 b3       	in	r26, 0x17	; 23
    21ba:	82 81       	ldd	r24, Z+2	; 0x02
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	01 80       	ldd	r0, Z+1	; 0x01
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <Dio_init+0xc4>
    21c4:	22 0f       	add	r18, r18
    21c6:	33 1f       	adc	r19, r19
    21c8:	0a 94       	dec	r0
    21ca:	e2 f7       	brpl	.-8      	; 0x21c4 <Dio_init+0xc0>
    21cc:	2a 2b       	or	r18, r26
    21ce:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    21d0:	88 b3       	in	r24, 0x18	; 24
    21d2:	01 80       	ldd	r0, Z+1	; 0x01
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <Dio_init+0xd6>
    21d6:	66 0f       	add	r22, r22
    21d8:	77 1f       	adc	r23, r23
    21da:	0a 94       	dec	r0
    21dc:	e2 f7       	brpl	.-8      	; 0x21d6 <Dio_init+0xd2>
    21de:	60 95       	com	r22
    21e0:	68 23       	and	r22, r24
    21e2:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    21e4:	68 b3       	in	r22, 0x18	; 24
    21e6:	83 81       	ldd	r24, Z+3	; 0x03
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	01 80       	ldd	r0, Z+1	; 0x01
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <Dio_init+0xf0>
    21f0:	22 0f       	add	r18, r18
    21f2:	33 1f       	adc	r19, r19
    21f4:	0a 94       	dec	r0
    21f6:	e2 f7       	brpl	.-8      	; 0x21f0 <Dio_init+0xec>
    21f8:	26 2b       	or	r18, r22
    21fa:	28 bb       	out	0x18, r18	; 24
				break;
    21fc:	5f c0       	rjmp	.+190    	; 0x22bc <Dio_init+0x1b8>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    21fe:	24 b3       	in	r18, 0x14	; 20
    2200:	61 e0       	ldi	r22, 0x01	; 1
    2202:	70 e0       	ldi	r23, 0x00	; 0
    2204:	db 01       	movw	r26, r22
    2206:	02 c0       	rjmp	.+4      	; 0x220c <Dio_init+0x108>
    2208:	aa 0f       	add	r26, r26
    220a:	bb 1f       	adc	r27, r27
    220c:	3a 95       	dec	r19
    220e:	e2 f7       	brpl	.-8      	; 0x2208 <Dio_init+0x104>
    2210:	8a 2f       	mov	r24, r26
    2212:	80 95       	com	r24
    2214:	82 23       	and	r24, r18
    2216:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2218:	a4 b3       	in	r26, 0x14	; 20
    221a:	82 81       	ldd	r24, Z+2	; 0x02
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	01 80       	ldd	r0, Z+1	; 0x01
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <Dio_init+0x124>
    2224:	22 0f       	add	r18, r18
    2226:	33 1f       	adc	r19, r19
    2228:	0a 94       	dec	r0
    222a:	e2 f7       	brpl	.-8      	; 0x2224 <Dio_init+0x120>
    222c:	2a 2b       	or	r18, r26
    222e:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2230:	85 b3       	in	r24, 0x15	; 21
    2232:	01 80       	ldd	r0, Z+1	; 0x01
    2234:	02 c0       	rjmp	.+4      	; 0x223a <Dio_init+0x136>
    2236:	66 0f       	add	r22, r22
    2238:	77 1f       	adc	r23, r23
    223a:	0a 94       	dec	r0
    223c:	e2 f7       	brpl	.-8      	; 0x2236 <Dio_init+0x132>
    223e:	60 95       	com	r22
    2240:	68 23       	and	r22, r24
    2242:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2244:	65 b3       	in	r22, 0x15	; 21
    2246:	83 81       	ldd	r24, Z+3	; 0x03
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	01 80       	ldd	r0, Z+1	; 0x01
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <Dio_init+0x150>
    2250:	22 0f       	add	r18, r18
    2252:	33 1f       	adc	r19, r19
    2254:	0a 94       	dec	r0
    2256:	e2 f7       	brpl	.-8      	; 0x2250 <Dio_init+0x14c>
    2258:	26 2b       	or	r18, r22
    225a:	25 bb       	out	0x15, r18	; 21
				break;
    225c:	2f c0       	rjmp	.+94     	; 0x22bc <Dio_init+0x1b8>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    225e:	21 b3       	in	r18, 0x11	; 17
    2260:	61 e0       	ldi	r22, 0x01	; 1
    2262:	70 e0       	ldi	r23, 0x00	; 0
    2264:	db 01       	movw	r26, r22
    2266:	02 c0       	rjmp	.+4      	; 0x226c <Dio_init+0x168>
    2268:	aa 0f       	add	r26, r26
    226a:	bb 1f       	adc	r27, r27
    226c:	3a 95       	dec	r19
    226e:	e2 f7       	brpl	.-8      	; 0x2268 <Dio_init+0x164>
    2270:	8a 2f       	mov	r24, r26
    2272:	80 95       	com	r24
    2274:	82 23       	and	r24, r18
    2276:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2278:	a1 b3       	in	r26, 0x11	; 17
    227a:	82 81       	ldd	r24, Z+2	; 0x02
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	01 80       	ldd	r0, Z+1	; 0x01
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <Dio_init+0x184>
    2284:	22 0f       	add	r18, r18
    2286:	33 1f       	adc	r19, r19
    2288:	0a 94       	dec	r0
    228a:	e2 f7       	brpl	.-8      	; 0x2284 <Dio_init+0x180>
    228c:	2a 2b       	or	r18, r26
    228e:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2290:	82 b3       	in	r24, 0x12	; 18
    2292:	01 80       	ldd	r0, Z+1	; 0x01
    2294:	02 c0       	rjmp	.+4      	; 0x229a <Dio_init+0x196>
    2296:	66 0f       	add	r22, r22
    2298:	77 1f       	adc	r23, r23
    229a:	0a 94       	dec	r0
    229c:	e2 f7       	brpl	.-8      	; 0x2296 <Dio_init+0x192>
    229e:	60 95       	com	r22
    22a0:	68 23       	and	r22, r24
    22a2:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    22a4:	62 b3       	in	r22, 0x12	; 18
    22a6:	83 81       	ldd	r24, Z+3	; 0x03
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	01 80       	ldd	r0, Z+1	; 0x01
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <Dio_init+0x1b0>
    22b0:	22 0f       	add	r18, r18
    22b2:	33 1f       	adc	r19, r19
    22b4:	0a 94       	dec	r0
    22b6:	e2 f7       	brpl	.-8      	; 0x22b0 <Dio_init+0x1ac>
    22b8:	26 2b       	or	r18, r22
    22ba:	22 bb       	out	0x12, r18	; 18
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
    22bc:	9f 5f       	subi	r25, 0xFF	; 255
    22be:	94 31       	cpi	r25, 0x14	; 20
    22c0:	08 f4       	brcc	.+2      	; 0x22c4 <Dio_init+0x1c0>
    22c2:	26 cf       	rjmp	.-436    	; 0x2110 <Dio_init+0xc>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
    22c4:	50 93 31 06 	sts	0x0631, r21	; 0x800631 <pstrDio_pinsConfig+0x1>
    22c8:	40 93 30 06 	sts	0x0630, r20	; 0x800630 <pstrDio_pinsConfig>
	u8_Dio_Status = DIO_INITIALIZED;
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
    22d2:	08 95       	ret
{
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
    22d4:	85 e0       	ldi	r24, 0x05	; 5
    22d6:	08 95       	ret
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
    22d8:	83 e0       	ldi	r24, 0x03	; 3
    22da:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
    22dc:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
    22de:	08 95       	ret

000022e0 <Dio_writePin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    22e0:	85 31       	cpi	r24, 0x15	; 21
    22e2:	08 f0       	brcs	.+2      	; 0x22e6 <Dio_writePin+0x6>
    22e4:	90 c0       	rjmp	.+288    	; 0x2406 <Dio_writePin+0x126>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    22e6:	90 91 2f 06 	lds	r25, 0x062F	; 0x80062f <u8_Dio_Status>
    22ea:	99 23       	and	r25, r25
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <Dio_writePin+0x10>
    22ee:	8d c0       	rjmp	.+282    	; 0x240a <Dio_writePin+0x12a>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    22f0:	e8 2f       	mov	r30, r24
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	cf 01       	movw	r24, r30
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	88 0f       	add	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	e0 91 30 06 	lds	r30, 0x0630	; 0x800630 <pstrDio_pinsConfig>
    2302:	f0 91 31 06 	lds	r31, 0x0631	; 0x800631 <pstrDio_pinsConfig+0x1>
    2306:	e8 0f       	add	r30, r24
    2308:	f9 1f       	adc	r31, r25
    230a:	80 81       	ld	r24, Z
    230c:	81 30       	cpi	r24, 0x01	; 1
    230e:	21 f1       	breq	.+72     	; 0x2358 <Dio_writePin+0x78>
    2310:	30 f0       	brcs	.+12     	; 0x231e <Dio_writePin+0x3e>
    2312:	82 30       	cpi	r24, 0x02	; 2
    2314:	f1 f1       	breq	.+124    	; 0x2392 <Dio_writePin+0xb2>
    2316:	83 30       	cpi	r24, 0x03	; 3
    2318:	09 f4       	brne	.+2      	; 0x231c <Dio_writePin+0x3c>
    231a:	58 c0       	rjmp	.+176    	; 0x23cc <Dio_writePin+0xec>
    231c:	78 c0       	rjmp	.+240    	; 0x240e <Dio_writePin+0x12e>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
    231e:	61 30       	cpi	r22, 0x01	; 1
    2320:	69 f4       	brne	.+26     	; 0x233c <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2322:	2b b3       	in	r18, 0x1b	; 27
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	01 80       	ldd	r0, Z+1	; 0x01
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <Dio_writePin+0x50>
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	0a 94       	dec	r0
    2332:	e2 f7       	brpl	.-8      	; 0x232c <Dio_writePin+0x4c>
    2334:	82 2b       	or	r24, r18
    2336:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    233c:	2b b3       	in	r18, 0x1b	; 27
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	01 80       	ldd	r0, Z+1	; 0x01
    2344:	02 c0       	rjmp	.+4      	; 0x234a <Dio_writePin+0x6a>
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	0a 94       	dec	r0
    234c:	e2 f7       	brpl	.-8      	; 0x2346 <Dio_writePin+0x66>
    234e:	80 95       	com	r24
    2350:	82 23       	and	r24, r18
    2352:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
    2358:	61 30       	cpi	r22, 0x01	; 1
    235a:	69 f4       	brne	.+26     	; 0x2376 <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    235c:	28 b3       	in	r18, 0x18	; 24
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	01 80       	ldd	r0, Z+1	; 0x01
    2364:	02 c0       	rjmp	.+4      	; 0x236a <Dio_writePin+0x8a>
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	0a 94       	dec	r0
    236c:	e2 f7       	brpl	.-8      	; 0x2366 <Dio_writePin+0x86>
    236e:	82 2b       	or	r24, r18
    2370:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2376:	28 b3       	in	r18, 0x18	; 24
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	01 80       	ldd	r0, Z+1	; 0x01
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <Dio_writePin+0xa4>
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	0a 94       	dec	r0
    2386:	e2 f7       	brpl	.-8      	; 0x2380 <Dio_writePin+0xa0>
    2388:	80 95       	com	r24
    238a:	82 23       	and	r24, r18
    238c:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
    2392:	61 30       	cpi	r22, 0x01	; 1
    2394:	69 f4       	brne	.+26     	; 0x23b0 <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2396:	25 b3       	in	r18, 0x15	; 21
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	01 80       	ldd	r0, Z+1	; 0x01
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <Dio_writePin+0xc4>
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	0a 94       	dec	r0
    23a6:	e2 f7       	brpl	.-8      	; 0x23a0 <Dio_writePin+0xc0>
    23a8:	82 2b       	or	r24, r18
    23aa:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    23b0:	25 b3       	in	r18, 0x15	; 21
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	01 80       	ldd	r0, Z+1	; 0x01
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <Dio_writePin+0xde>
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	0a 94       	dec	r0
    23c0:	e2 f7       	brpl	.-8      	; 0x23ba <Dio_writePin+0xda>
    23c2:	80 95       	com	r24
    23c4:	82 23       	and	r24, r18
    23c6:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
    23cc:	61 30       	cpi	r22, 0x01	; 1
    23ce:	69 f4       	brne	.+26     	; 0x23ea <Dio_writePin+0x10a>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    23d0:	22 b3       	in	r18, 0x12	; 18
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	01 80       	ldd	r0, Z+1	; 0x01
    23d8:	02 c0       	rjmp	.+4      	; 0x23de <Dio_writePin+0xfe>
    23da:	88 0f       	add	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	0a 94       	dec	r0
    23e0:	e2 f7       	brpl	.-8      	; 0x23da <Dio_writePin+0xfa>
    23e2:	82 2b       	or	r24, r18
    23e4:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    23ea:	22 b3       	in	r18, 0x12	; 18
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	01 80       	ldd	r0, Z+1	; 0x01
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <Dio_writePin+0x118>
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	0a 94       	dec	r0
    23fa:	e2 f7       	brpl	.-8      	; 0x23f4 <Dio_writePin+0x114>
    23fc:	80 95       	com	r24
    23fe:	82 23       	and	r24, r18
    2400:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	08 95       	ret
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    2406:	82 e0       	ldi	r24, 0x02	; 2
    2408:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    240a:	86 e0       	ldi	r24, 0x06	; 6
    240c:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    240e:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
    2410:	08 95       	ret

00002412 <Dio_togglePin>:
* Description: Function to Toggle data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    2412:	85 31       	cpi	r24, 0x15	; 21
    2414:	08 f0       	brcs	.+2      	; 0x2418 <Dio_togglePin+0x6>
    2416:	4f c0       	rjmp	.+158    	; 0x24b6 <Dio_togglePin+0xa4>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    2418:	90 91 2f 06 	lds	r25, 0x062F	; 0x80062f <u8_Dio_Status>
    241c:	99 23       	and	r25, r25
    241e:	09 f4       	brne	.+2      	; 0x2422 <Dio_togglePin+0x10>
    2420:	4c c0       	rjmp	.+152    	; 0x24ba <Dio_togglePin+0xa8>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    2422:	e8 2f       	mov	r30, r24
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	cf 01       	movw	r24, r30
    2428:	88 0f       	add	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	e0 91 30 06 	lds	r30, 0x0630	; 0x800630 <pstrDio_pinsConfig>
    2434:	f0 91 31 06 	lds	r31, 0x0631	; 0x800631 <pstrDio_pinsConfig+0x1>
    2438:	e8 0f       	add	r30, r24
    243a:	f9 1f       	adc	r31, r25
    243c:	80 81       	ld	r24, Z
    243e:	81 30       	cpi	r24, 0x01	; 1
    2440:	99 f0       	breq	.+38     	; 0x2468 <Dio_togglePin+0x56>
    2442:	28 f0       	brcs	.+10     	; 0x244e <Dio_togglePin+0x3c>
    2444:	82 30       	cpi	r24, 0x02	; 2
    2446:	e9 f0       	breq	.+58     	; 0x2482 <Dio_togglePin+0x70>
    2448:	83 30       	cpi	r24, 0x03	; 3
    244a:	41 f1       	breq	.+80     	; 0x249c <Dio_togglePin+0x8a>
    244c:	38 c0       	rjmp	.+112    	; 0x24be <Dio_togglePin+0xac>
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    244e:	2b b3       	in	r18, 0x1b	; 27
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	01 80       	ldd	r0, Z+1	; 0x01
    2456:	02 c0       	rjmp	.+4      	; 0x245c <Dio_togglePin+0x4a>
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	0a 94       	dec	r0
    245e:	e2 f7       	brpl	.-8      	; 0x2458 <Dio_togglePin+0x46>
    2460:	82 27       	eor	r24, r18
    2462:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    2464:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    2466:	08 95       	ret
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2468:	28 b3       	in	r18, 0x18	; 24
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	01 80       	ldd	r0, Z+1	; 0x01
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <Dio_togglePin+0x64>
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	0a 94       	dec	r0
    2478:	e2 f7       	brpl	.-8      	; 0x2472 <Dio_togglePin+0x60>
    247a:	82 27       	eor	r24, r18
    247c:	88 bb       	out	0x18, r24	; 24
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    247e:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    2480:	08 95       	ret
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2482:	25 b3       	in	r18, 0x15	; 21
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	01 80       	ldd	r0, Z+1	; 0x01
    248a:	02 c0       	rjmp	.+4      	; 0x2490 <Dio_togglePin+0x7e>
    248c:	88 0f       	add	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	0a 94       	dec	r0
    2492:	e2 f7       	brpl	.-8      	; 0x248c <Dio_togglePin+0x7a>
    2494:	82 27       	eor	r24, r18
    2496:	85 bb       	out	0x15, r24	; 21
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    2498:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    249a:	08 95       	ret
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    249c:	22 b3       	in	r18, 0x12	; 18
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	01 80       	ldd	r0, Z+1	; 0x01
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <Dio_togglePin+0x98>
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	0a 94       	dec	r0
    24ac:	e2 f7       	brpl	.-8      	; 0x24a6 <Dio_togglePin+0x94>
    24ae:	82 27       	eor	r24, r18
    24b0:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    24b4:	08 95       	ret
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    24b6:	82 e0       	ldi	r24, 0x02	; 2
    24b8:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    24ba:	86 e0       	ldi	r24, 0x06	; 6
    24bc:	08 95       	ret
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    24be:	84 e0       	ldi	r24, 0x04	; 4
	}	
	return DIO_STATUS_ERROR_OK;
}
    24c0:	08 95       	ret

000024c2 <Dio_readPin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    24c2:	85 31       	cpi	r24, 0x15	; 21
    24c4:	08 f0       	brcs	.+2      	; 0x24c8 <Dio_readPin+0x6>
    24c6:	7c c0       	rjmp	.+248    	; 0x25c0 <Dio_readPin+0xfe>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    24c8:	90 91 2f 06 	lds	r25, 0x062F	; 0x80062f <u8_Dio_Status>
    24cc:	99 23       	and	r25, r25
    24ce:	09 f4       	brne	.+2      	; 0x24d2 <Dio_readPin+0x10>
    24d0:	79 c0       	rjmp	.+242    	; 0x25c4 <Dio_readPin+0x102>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    24d2:	e8 2f       	mov	r30, r24
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	cf 01       	movw	r24, r30
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	88 0f       	add	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	e0 91 30 06 	lds	r30, 0x0630	; 0x800630 <pstrDio_pinsConfig>
    24e4:	f0 91 31 06 	lds	r31, 0x0631	; 0x800631 <pstrDio_pinsConfig+0x1>
    24e8:	e8 0f       	add	r30, r24
    24ea:	f9 1f       	adc	r31, r25
    24ec:	80 81       	ld	r24, Z
    24ee:	81 30       	cpi	r24, 0x01	; 1
    24f0:	f9 f0       	breq	.+62     	; 0x2530 <Dio_readPin+0x6e>
    24f2:	30 f0       	brcs	.+12     	; 0x2500 <Dio_readPin+0x3e>
    24f4:	82 30       	cpi	r24, 0x02	; 2
    24f6:	a1 f1       	breq	.+104    	; 0x2560 <Dio_readPin+0x9e>
    24f8:	83 30       	cpi	r24, 0x03	; 3
    24fa:	09 f4       	brne	.+2      	; 0x24fe <Dio_readPin+0x3c>
    24fc:	49 c0       	rjmp	.+146    	; 0x2590 <Dio_readPin+0xce>
    24fe:	64 c0       	rjmp	.+200    	; 0x25c8 <Dio_readPin+0x106>
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2500:	49 b3       	in	r20, 0x19	; 25
    2502:	51 81       	ldd	r21, Z+1	; 0x01
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	9c 01       	movw	r18, r24
    250a:	05 2e       	mov	r0, r21
    250c:	02 c0       	rjmp	.+4      	; 0x2512 <Dio_readPin+0x50>
    250e:	22 0f       	add	r18, r18
    2510:	33 1f       	adc	r19, r19
    2512:	0a 94       	dec	r0
    2514:	e2 f7       	brpl	.-8      	; 0x250e <Dio_readPin+0x4c>
    2516:	84 2f       	mov	r24, r20
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	82 23       	and	r24, r18
    251c:	93 23       	and	r25, r19
    251e:	02 c0       	rjmp	.+4      	; 0x2524 <Dio_readPin+0x62>
    2520:	95 95       	asr	r25
    2522:	87 95       	ror	r24
    2524:	5a 95       	dec	r21
    2526:	e2 f7       	brpl	.-8      	; 0x2520 <Dio_readPin+0x5e>
    2528:	fb 01       	movw	r30, r22
    252a:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    252c:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    252e:	08 95       	ret
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2530:	46 b3       	in	r20, 0x16	; 22
    2532:	51 81       	ldd	r21, Z+1	; 0x01
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	9c 01       	movw	r18, r24
    253a:	05 2e       	mov	r0, r21
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <Dio_readPin+0x80>
    253e:	22 0f       	add	r18, r18
    2540:	33 1f       	adc	r19, r19
    2542:	0a 94       	dec	r0
    2544:	e2 f7       	brpl	.-8      	; 0x253e <Dio_readPin+0x7c>
    2546:	84 2f       	mov	r24, r20
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	82 23       	and	r24, r18
    254c:	93 23       	and	r25, r19
    254e:	02 c0       	rjmp	.+4      	; 0x2554 <Dio_readPin+0x92>
    2550:	95 95       	asr	r25
    2552:	87 95       	ror	r24
    2554:	5a 95       	dec	r21
    2556:	e2 f7       	brpl	.-8      	; 0x2550 <Dio_readPin+0x8e>
    2558:	fb 01       	movw	r30, r22
    255a:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    255c:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    255e:	08 95       	ret
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2560:	43 b3       	in	r20, 0x13	; 19
    2562:	51 81       	ldd	r21, Z+1	; 0x01
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9c 01       	movw	r18, r24
    256a:	05 2e       	mov	r0, r21
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <Dio_readPin+0xb0>
    256e:	22 0f       	add	r18, r18
    2570:	33 1f       	adc	r19, r19
    2572:	0a 94       	dec	r0
    2574:	e2 f7       	brpl	.-8      	; 0x256e <Dio_readPin+0xac>
    2576:	84 2f       	mov	r24, r20
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	82 23       	and	r24, r18
    257c:	93 23       	and	r25, r19
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <Dio_readPin+0xc2>
    2580:	95 95       	asr	r25
    2582:	87 95       	ror	r24
    2584:	5a 95       	dec	r21
    2586:	e2 f7       	brpl	.-8      	; 0x2580 <Dio_readPin+0xbe>
    2588:	fb 01       	movw	r30, r22
    258a:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    258c:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    258e:	08 95       	ret
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2590:	40 b3       	in	r20, 0x10	; 16
    2592:	51 81       	ldd	r21, Z+1	; 0x01
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	9c 01       	movw	r18, r24
    259a:	05 2e       	mov	r0, r21
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <Dio_readPin+0xe0>
    259e:	22 0f       	add	r18, r18
    25a0:	33 1f       	adc	r19, r19
    25a2:	0a 94       	dec	r0
    25a4:	e2 f7       	brpl	.-8      	; 0x259e <Dio_readPin+0xdc>
    25a6:	84 2f       	mov	r24, r20
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	82 23       	and	r24, r18
    25ac:	93 23       	and	r25, r19
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <Dio_readPin+0xf2>
    25b0:	95 95       	asr	r25
    25b2:	87 95       	ror	r24
    25b4:	5a 95       	dec	r21
    25b6:	e2 f7       	brpl	.-8      	; 0x25b0 <Dio_readPin+0xee>
    25b8:	fb 01       	movw	r30, r22
    25ba:	80 83       	st	Z, r24
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    25bc:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    25be:	08 95       	ret
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    25c0:	82 e0       	ldi	r24, 0x02	; 2
    25c2:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    25c4:	86 e0       	ldi	r24, 0x06	; 6
    25c6:	08 95       	ret
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    25c8:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
    25ca:	08 95       	ret

000025cc <__vector_1>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
    25cc:	1f 92       	push	r1
    25ce:	0f 92       	push	r0
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	0f 92       	push	r0
    25d4:	11 24       	eor	r1, r1
    25d6:	2f 93       	push	r18
    25d8:	3f 93       	push	r19
    25da:	4f 93       	push	r20
    25dc:	5f 93       	push	r21
    25de:	6f 93       	push	r22
    25e0:	7f 93       	push	r23
    25e2:	8f 93       	push	r24
    25e4:	9f 93       	push	r25
    25e6:	af 93       	push	r26
    25e8:	bf 93       	push	r27
    25ea:	ef 93       	push	r30
    25ec:	ff 93       	push	r31
    25ee:	e0 91 36 06 	lds	r30, 0x0636	; 0x800636 <INT0_CallBackPtr>
    25f2:	f0 91 37 06 	lds	r31, 0x0637	; 0x800637 <INT0_CallBackPtr+0x1>
    25f6:	09 95       	icall
    25f8:	ff 91       	pop	r31
    25fa:	ef 91       	pop	r30
    25fc:	bf 91       	pop	r27
    25fe:	af 91       	pop	r26
    2600:	9f 91       	pop	r25
    2602:	8f 91       	pop	r24
    2604:	7f 91       	pop	r23
    2606:	6f 91       	pop	r22
    2608:	5f 91       	pop	r21
    260a:	4f 91       	pop	r20
    260c:	3f 91       	pop	r19
    260e:	2f 91       	pop	r18
    2610:	0f 90       	pop	r0
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	0f 90       	pop	r0
    2616:	1f 90       	pop	r1
    2618:	18 95       	reti

0000261a <__vector_2>:
    261a:	1f 92       	push	r1
    261c:	0f 92       	push	r0
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	0f 92       	push	r0
    2622:	11 24       	eor	r1, r1
    2624:	2f 93       	push	r18
    2626:	3f 93       	push	r19
    2628:	4f 93       	push	r20
    262a:	5f 93       	push	r21
    262c:	6f 93       	push	r22
    262e:	7f 93       	push	r23
    2630:	8f 93       	push	r24
    2632:	9f 93       	push	r25
    2634:	af 93       	push	r26
    2636:	bf 93       	push	r27
    2638:	ef 93       	push	r30
    263a:	ff 93       	push	r31
    263c:	e0 91 34 06 	lds	r30, 0x0634	; 0x800634 <INT1_CallBackPtr>
    2640:	f0 91 35 06 	lds	r31, 0x0635	; 0x800635 <INT1_CallBackPtr+0x1>
    2644:	09 95       	icall
    2646:	ff 91       	pop	r31
    2648:	ef 91       	pop	r30
    264a:	bf 91       	pop	r27
    264c:	af 91       	pop	r26
    264e:	9f 91       	pop	r25
    2650:	8f 91       	pop	r24
    2652:	7f 91       	pop	r23
    2654:	6f 91       	pop	r22
    2656:	5f 91       	pop	r21
    2658:	4f 91       	pop	r20
    265a:	3f 91       	pop	r19
    265c:	2f 91       	pop	r18
    265e:	0f 90       	pop	r0
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	0f 90       	pop	r0
    2664:	1f 90       	pop	r1
    2666:	18 95       	reti

00002668 <__vector_3>:
}
ISR(INT2_IRQ)
{
    2668:	1f 92       	push	r1
    266a:	0f 92       	push	r0
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	0f 92       	push	r0
    2670:	11 24       	eor	r1, r1
    2672:	2f 93       	push	r18
    2674:	3f 93       	push	r19
    2676:	4f 93       	push	r20
    2678:	5f 93       	push	r21
    267a:	6f 93       	push	r22
    267c:	7f 93       	push	r23
    267e:	8f 93       	push	r24
    2680:	9f 93       	push	r25
    2682:	af 93       	push	r26
    2684:	bf 93       	push	r27
    2686:	ef 93       	push	r30
    2688:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
    268a:	e0 91 32 06 	lds	r30, 0x0632	; 0x800632 <INT2_CallBackPtr>
    268e:	f0 91 33 06 	lds	r31, 0x0633	; 0x800633 <INT2_CallBackPtr+0x1>
    2692:	09 95       	icall
}
    2694:	ff 91       	pop	r31
    2696:	ef 91       	pop	r30
    2698:	bf 91       	pop	r27
    269a:	af 91       	pop	r26
    269c:	9f 91       	pop	r25
    269e:	8f 91       	pop	r24
    26a0:	7f 91       	pop	r23
    26a2:	6f 91       	pop	r22
    26a4:	5f 91       	pop	r21
    26a6:	4f 91       	pop	r20
    26a8:	3f 91       	pop	r19
    26aa:	2f 91       	pop	r18
    26ac:	0f 90       	pop	r0
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	0f 90       	pop	r0
    26b2:	1f 90       	pop	r1
    26b4:	18 95       	reti

000026b6 <Gpt_ISRHandler>:
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_EXPIRED;
	return GPT_STATUS_ERROR_OK;
}
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	0e c0       	rjmp	.+28     	; 0x26d6 <Gpt_ISRHandler+0x20>
    26ba:	29 2f       	mov	r18, r25
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	f9 01       	movw	r30, r18
    26c0:	ee 0f       	add	r30, r30
    26c2:	ff 1f       	adc	r31, r31
    26c4:	2e 0f       	add	r18, r30
    26c6:	3f 1f       	adc	r19, r31
    26c8:	f9 01       	movw	r30, r18
    26ca:	e7 52       	subi	r30, 0x27	; 39
    26cc:	fb 4f       	sbci	r31, 0xFB	; 251
    26ce:	20 81       	ld	r18, Z
    26d0:	28 17       	cp	r18, r24
    26d2:	19 f0       	breq	.+6      	; 0x26da <Gpt_ISRHandler+0x24>
    26d4:	9f 5f       	subi	r25, 0xFF	; 255
    26d6:	99 23       	and	r25, r25
    26d8:	81 f3       	breq	.-32     	; 0x26ba <Gpt_ISRHandler+0x4>
    26da:	89 2f       	mov	r24, r25
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	fc 01       	movw	r30, r24
    26e0:	ee 0f       	add	r30, r30
    26e2:	ff 1f       	adc	r31, r31
    26e4:	ee 0f       	add	r30, r30
    26e6:	ff 1f       	adc	r31, r31
    26e8:	e7 5c       	subi	r30, 0xC7	; 199
    26ea:	f9 4f       	sbci	r31, 0xF9	; 249
    26ec:	40 81       	ld	r20, Z
    26ee:	51 81       	ldd	r21, Z+1	; 0x01
    26f0:	62 81       	ldd	r22, Z+2	; 0x02
    26f2:	73 81       	ldd	r23, Z+3	; 0x03
    26f4:	41 15       	cp	r20, r1
    26f6:	51 05       	cpc	r21, r1
    26f8:	61 05       	cpc	r22, r1
    26fa:	71 05       	cpc	r23, r1
    26fc:	81 f0       	breq	.+32     	; 0x271e <Gpt_ISRHandler+0x68>
    26fe:	88 0f       	add	r24, r24
    2700:	99 1f       	adc	r25, r25
    2702:	88 0f       	add	r24, r24
    2704:	99 1f       	adc	r25, r25
    2706:	fc 01       	movw	r30, r24
    2708:	e7 5c       	subi	r30, 0xC7	; 199
    270a:	f9 4f       	sbci	r31, 0xF9	; 249
    270c:	41 50       	subi	r20, 0x01	; 1
    270e:	51 09       	sbc	r21, r1
    2710:	61 09       	sbc	r22, r1
    2712:	71 09       	sbc	r23, r1
    2714:	40 83       	st	Z, r20
    2716:	51 83       	std	Z+1, r21	; 0x01
    2718:	62 83       	std	Z+2, r22	; 0x02
    271a:	73 83       	std	Z+3, r23	; 0x03
    271c:	08 95       	ret
    271e:	23 b7       	in	r18, 0x33	; 51
    2720:	2e 7f       	andi	r18, 0xFE	; 254
    2722:	23 bf       	out	0x33, r18	; 51
    2724:	23 b7       	in	r18, 0x33	; 51
    2726:	2d 7f       	andi	r18, 0xFD	; 253
    2728:	23 bf       	out	0x33, r18	; 51
    272a:	23 b7       	in	r18, 0x33	; 51
    272c:	2b 7f       	andi	r18, 0xFB	; 251
    272e:	23 bf       	out	0x33, r18	; 51
    2730:	29 b7       	in	r18, 0x39	; 57
    2732:	2e 7f       	andi	r18, 0xFE	; 254
    2734:	29 bf       	out	0x39, r18	; 57
    2736:	fc 01       	movw	r30, r24
    2738:	e3 5c       	subi	r30, 0xC3	; 195
    273a:	f9 4f       	sbci	r31, 0xF9	; 249
    273c:	24 e0       	ldi	r18, 0x04	; 4
    273e:	20 83       	st	Z, r18
    2740:	e0 91 3e 06 	lds	r30, 0x063E	; 0x80063e <Gpt_Timer0_CallBackPtr>
    2744:	f0 91 3f 06 	lds	r31, 0x063F	; 0x80063f <Gpt_Timer0_CallBackPtr+0x1>
    2748:	09 95       	icall
    274a:	08 95       	ret

0000274c <GptInit>:
    274c:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <genu_GPTModStatus>
    2750:	81 30       	cpi	r24, 0x01	; 1
    2752:	61 f1       	breq	.+88     	; 0x27ac <GptInit+0x60>
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	24 c0       	rjmp	.+72     	; 0x27a0 <GptInit+0x54>
    2758:	82 2f       	mov	r24, r18
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	fc 01       	movw	r30, r24
    275e:	ee 0f       	add	r30, r30
    2760:	ff 1f       	adc	r31, r31
    2762:	e8 0f       	add	r30, r24
    2764:	f9 1f       	adc	r31, r25
    2766:	e7 52       	subi	r30, 0x27	; 39
    2768:	fb 4f       	sbci	r31, 0xFB	; 251
    276a:	30 81       	ld	r19, Z
    276c:	33 23       	and	r19, r19
    276e:	19 f0       	breq	.+6      	; 0x2776 <GptInit+0x2a>
    2770:	33 30       	cpi	r19, 0x03	; 3
    2772:	f0 f4       	brcc	.+60     	; 0x27b0 <GptInit+0x64>
    2774:	0f c0       	rjmp	.+30     	; 0x2794 <GptInit+0x48>
    2776:	fc 01       	movw	r30, r24
    2778:	ee 0f       	add	r30, r30
    277a:	ff 1f       	adc	r31, r31
    277c:	e8 0f       	add	r30, r24
    277e:	f9 1f       	adc	r31, r25
    2780:	e7 52       	subi	r30, 0x27	; 39
    2782:	fb 4f       	sbci	r31, 0xFB	; 251
    2784:	32 81       	ldd	r19, Z+2	; 0x02
    2786:	31 11       	cpse	r19, r1
    2788:	05 c0       	rjmp	.+10     	; 0x2794 <GptInit+0x48>
    278a:	13 be       	out	0x33, r1	; 51
    278c:	39 b7       	in	r19, 0x39	; 57
    278e:	3c 7f       	andi	r19, 0xFC	; 252
    2790:	39 bf       	out	0x39, r19	; 57
    2792:	12 be       	out	0x32, r1	; 50
    2794:	fc 01       	movw	r30, r24
    2796:	e3 5c       	subi	r30, 0xC3	; 195
    2798:	f9 4f       	sbci	r31, 0xF9	; 249
    279a:	31 e0       	ldi	r19, 0x01	; 1
    279c:	30 83       	st	Z, r19
    279e:	2f 5f       	subi	r18, 0xFF	; 255
    27a0:	22 23       	and	r18, r18
    27a2:	d1 f2       	breq	.-76     	; 0x2758 <GptInit+0xc>
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <genu_GPTModStatus>
    27aa:	08 95       	ret
    27ac:	83 e0       	ldi	r24, 0x03	; 3
    27ae:	08 95       	ret
    27b0:	85 e0       	ldi	r24, 0x05	; 5
    27b2:	08 95       	ret

000027b4 <GptStart_aSync>:
* Return value: enuGpt_Status_t - Returns the status of the function (if there is any error)
* Description: Function to Start the Timer module counting from 0x00 until (u16_Ticks)
               and generate interrupt when OVF.
************************************************************************************/
enuGpt_Status_t GptStart_aSync(u8Gpt_Channel_t ChannelId, u32Gpt_Value_t u16_Ticks, pfGpt_CallBack_t CallBack)
{
    27b4:	0f 93       	push	r16
    27b6:	1f 93       	push	r17
    27b8:	cf 93       	push	r28
    27ba:	df 93       	push	r29
    27bc:	89 01       	movw	r16, r18
	
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    27be:	81 11       	cpse	r24, r1
    27c0:	4a c0       	rjmp	.+148    	; 0x2856 <GptStart_aSync+0xa2>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    27c2:	c8 2f       	mov	r28, r24
    27c4:	d0 e0       	ldi	r29, 0x00	; 0
    27c6:	fe 01       	movw	r30, r28
    27c8:	e3 5c       	subi	r30, 0xC3	; 195
    27ca:	f9 4f       	sbci	r31, 0xF9	; 249
    27cc:	80 81       	ld	r24, Z
    27ce:	88 23       	and	r24, r24
    27d0:	09 f4       	brne	.+2      	; 0x27d4 <GptStart_aSync+0x20>
    27d2:	43 c0       	rjmp	.+134    	; 0x285a <GptStart_aSync+0xa6>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
    27d4:	82 30       	cpi	r24, 0x02	; 2
    27d6:	09 f4       	brne	.+2      	; 0x27da <GptStart_aSync+0x26>
    27d8:	42 c0       	rjmp	.+132    	; 0x285e <GptStart_aSync+0xaa>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u16_remainderCount=0;
	
	enuChannelsState[ChannelId] = GPT_RUNNING;
    27da:	82 e0       	ldi	r24, 0x02	; 2
    27dc:	fe 01       	movw	r30, r28
    27de:	e3 5c       	subi	r30, 0xC3	; 195
    27e0:	f9 4f       	sbci	r31, 0xF9	; 249
    27e2:	80 83       	st	Z, r24
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    27e4:	fe 01       	movw	r30, r28
    27e6:	ee 0f       	add	r30, r30
    27e8:	ff 1f       	adc	r31, r31
    27ea:	ec 0f       	add	r30, r28
    27ec:	fd 1f       	adc	r31, r29
    27ee:	e7 52       	subi	r30, 0x27	; 39
    27f0:	fb 4f       	sbci	r31, 0xFB	; 251
    27f2:	80 81       	ld	r24, Z
    27f4:	88 23       	and	r24, r24
    27f6:	21 f0       	breq	.+8      	; 0x2800 <GptStart_aSync+0x4c>
    27f8:	83 30       	cpi	r24, 0x03	; 3
    27fa:	98 f1       	brcs	.+102    	; 0x2862 <GptStart_aSync+0xae>
		case GPT_TIMER_2: /* In case of Timer 2 */
			break;
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    27fc:	85 e0       	ldi	r24, 0x05	; 5
    27fe:	34 c0       	rjmp	.+104    	; 0x2868 <GptStart_aSync+0xb4>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Get Number of loops to overflow the timer counter */
			u32_Channels_ISR_Count[ChannelId] = u16_Ticks / GPT_MAX_VALUE_8BIT; //0xFF
    2800:	cb 01       	movw	r24, r22
    2802:	ba 01       	movw	r22, r20
    2804:	2f ef       	ldi	r18, 0xFF	; 255
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e0       	ldi	r20, 0x00	; 0
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__udivmodsi4>
    2810:	fe 01       	movw	r30, r28
    2812:	ee 0f       	add	r30, r30
    2814:	ff 1f       	adc	r31, r31
    2816:	ee 0f       	add	r30, r30
    2818:	ff 1f       	adc	r31, r31
    281a:	e7 5c       	subi	r30, 0xC7	; 199
    281c:	f9 4f       	sbci	r31, 0xF9	; 249
    281e:	20 83       	st	Z, r18
    2820:	31 83       	std	Z+1, r19	; 0x01
    2822:	42 83       	std	Z+2, r20	; 0x02
    2824:	53 83       	std	Z+3, r21	; 0x03
			/* Get Number of extra ticks (remainder) */
			u16_remainderCount = u16_Ticks % GPT_MAX_VALUE_8BIT;
    2826:	26 2f       	mov	r18, r22
    2828:	37 2f       	mov	r19, r23
			/* Set the interrupt enable */
			REG_SET_BIT(GPT_TIMSK_REG, GPT_TIMSK_TOIE0);
    282a:	89 b7       	in	r24, 0x39	; 57
    282c:	81 60       	ori	r24, 0x01	; 1
    282e:	89 bf       	out	0x39, r24	; 57
			/* Set the callback function pointer */
			Gpt_Timer0_CallBackPtr=CallBack;
    2830:	10 93 3f 06 	sts	0x063F, r17	; 0x80063f <Gpt_Timer0_CallBackPtr+0x1>
    2834:	00 93 3e 06 	sts	0x063E, r16	; 0x80063e <Gpt_Timer0_CallBackPtr>
			/* Start the clock with the given pre scaler */
			GPT_TCCR0_REG = (Timers_Configurations[ChannelId].enuClock_Src) << GPT_TCCR0_CS00;
    2838:	ce 01       	movw	r24, r28
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	c8 0f       	add	r28, r24
    2840:	d9 1f       	adc	r29, r25
    2842:	c7 52       	subi	r28, 0x27	; 39
    2844:	db 4f       	sbci	r29, 0xFB	; 251
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	83 bf       	out	0x33, r24	; 51
			/* Run the remainder ticks */
			/* Put the value of the 0xFF - remainderTicks to start count from it */
			if(u16_remainderCount != 0)
    284a:	23 2b       	or	r18, r19
    284c:	61 f0       	breq	.+24     	; 0x2866 <GptStart_aSync+0xb2>
			{
				GPT_TCNT0_REG = 256 - u16_remainderCount;
    284e:	61 95       	neg	r22
    2850:	62 bf       	out	0x32, r22	; 50
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	09 c0       	rjmp	.+18     	; 0x2868 <GptStart_aSync+0xb4>
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    2856:	86 e0       	ldi	r24, 0x06	; 6
    2858:	07 c0       	rjmp	.+14     	; 0x2868 <GptStart_aSync+0xb4>
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    285a:	82 e0       	ldi	r24, 0x02	; 2
    285c:	05 c0       	rjmp	.+10     	; 0x2868 <GptStart_aSync+0xb4>
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_BUSY;
    285e:	87 e0       	ldi	r24, 0x07	; 7
    2860:	03 c0       	rjmp	.+6      	; 0x2868 <GptStart_aSync+0xb4>
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	01 c0       	rjmp	.+2      	; 0x2868 <GptStart_aSync+0xb4>
    2866:	81 e0       	ldi	r24, 0x01	; 1
}
    2868:	df 91       	pop	r29
    286a:	cf 91       	pop	r28
    286c:	1f 91       	pop	r17
    286e:	0f 91       	pop	r16
    2870:	08 95       	ret

00002872 <GptStop>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    2872:	81 11       	cpse	r24, r1
    2874:	23 c0       	rjmp	.+70     	; 0x28bc <GptStop+0x4a>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	fc 01       	movw	r30, r24
    287a:	e3 5c       	subi	r30, 0xC3	; 195
    287c:	f9 4f       	sbci	r31, 0xF9	; 249
    287e:	20 81       	ld	r18, Z
    2880:	22 23       	and	r18, r18
    2882:	f1 f0       	breq	.+60     	; 0x28c0 <GptStop+0x4e>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
    2884:	22 30       	cpi	r18, 0x02	; 2
    2886:	f1 f4       	brne	.+60     	; 0x28c4 <GptStop+0x52>

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    2888:	fc 01       	movw	r30, r24
    288a:	ee 0f       	add	r30, r30
    288c:	ff 1f       	adc	r31, r31
    288e:	e8 0f       	add	r30, r24
    2890:	f9 1f       	adc	r31, r25
    2892:	e7 52       	subi	r30, 0x27	; 39
    2894:	fb 4f       	sbci	r31, 0xFB	; 251
    2896:	20 81       	ld	r18, Z
    2898:	22 23       	and	r18, r18
    289a:	19 f0       	breq	.+6      	; 0x28a2 <GptStop+0x30>
    289c:	23 30       	cpi	r18, 0x03	; 3
    289e:	a0 f4       	brcc	.+40     	; 0x28c8 <GptStop+0x56>
    28a0:	06 c0       	rjmp	.+12     	; 0x28ae <GptStop+0x3c>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Stop the clock from the timer */
			GPT_TCCR0_REG &= ~(7 << GPT_TCCR0_CS00);
    28a2:	23 b7       	in	r18, 0x33	; 51
    28a4:	28 7f       	andi	r18, 0xF8	; 248
    28a6:	23 bf       	out	0x33, r18	; 51
			GPT_TIMSK_REG &= ~(3 << GPT_TIMSK_TOIE0);
    28a8:	29 b7       	in	r18, 0x39	; 57
    28aa:	2c 7f       	andi	r18, 0xFC	; 252
    28ac:	29 bf       	out	0x39, r18	; 57
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
    28ae:	fc 01       	movw	r30, r24
    28b0:	e3 5c       	subi	r30, 0xC3	; 195
    28b2:	f9 4f       	sbci	r31, 0xF9	; 249
    28b4:	23 e0       	ldi	r18, 0x03	; 3
    28b6:	20 83       	st	Z, r18
	return GPT_STATUS_ERROR_OK;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    28bc:	86 e0       	ldi	r24, 0x06	; 6
    28be:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    28c0:	82 e0       	ldi	r24, 0x02	; 2
    28c2:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_STOPPED;
    28c4:	88 e0       	ldi	r24, 0x08	; 8
    28c6:	08 95       	ret
		case GPT_TIMER_2: /* In case of Timer 2 */
		break;
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    28c8:	85 e0       	ldi	r24, 0x05	; 5
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
    28ca:	08 95       	ret

000028cc <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    28cc:	1f 92       	push	r1
    28ce:	0f 92       	push	r0
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	0f 92       	push	r0
    28d4:	11 24       	eor	r1, r1
    28d6:	2f 93       	push	r18
    28d8:	3f 93       	push	r19
    28da:	4f 93       	push	r20
    28dc:	5f 93       	push	r21
    28de:	6f 93       	push	r22
    28e0:	7f 93       	push	r23
    28e2:	8f 93       	push	r24
    28e4:	9f 93       	push	r25
    28e6:	af 93       	push	r26
    28e8:	bf 93       	push	r27
    28ea:	ef 93       	push	r30
    28ec:	ff 93       	push	r31
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <Gpt_ISRHandler>
    28f4:	ff 91       	pop	r31
    28f6:	ef 91       	pop	r30
    28f8:	bf 91       	pop	r27
    28fa:	af 91       	pop	r26
    28fc:	9f 91       	pop	r25
    28fe:	8f 91       	pop	r24
    2900:	7f 91       	pop	r23
    2902:	6f 91       	pop	r22
    2904:	5f 91       	pop	r21
    2906:	4f 91       	pop	r20
    2908:	3f 91       	pop	r19
    290a:	2f 91       	pop	r18
    290c:	0f 90       	pop	r0
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	0f 90       	pop	r0
    2912:	1f 90       	pop	r1
    2914:	18 95       	reti

00002916 <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    2916:	1f 92       	push	r1
    2918:	0f 92       	push	r0
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	0f 92       	push	r0
    291e:	11 24       	eor	r1, r1
    2920:	2f 93       	push	r18
    2922:	3f 93       	push	r19
    2924:	4f 93       	push	r20
    2926:	5f 93       	push	r21
    2928:	6f 93       	push	r22
    292a:	7f 93       	push	r23
    292c:	8f 93       	push	r24
    292e:	9f 93       	push	r25
    2930:	af 93       	push	r26
    2932:	bf 93       	push	r27
    2934:	ef 93       	push	r30
    2936:	ff 93       	push	r31
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <Gpt_ISRHandler>
    293e:	ff 91       	pop	r31
    2940:	ef 91       	pop	r30
    2942:	bf 91       	pop	r27
    2944:	af 91       	pop	r26
    2946:	9f 91       	pop	r25
    2948:	8f 91       	pop	r24
    294a:	7f 91       	pop	r23
    294c:	6f 91       	pop	r22
    294e:	5f 91       	pop	r21
    2950:	4f 91       	pop	r20
    2952:	3f 91       	pop	r19
    2954:	2f 91       	pop	r18
    2956:	0f 90       	pop	r0
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	0f 90       	pop	r0
    295c:	1f 90       	pop	r1
    295e:	18 95       	reti

00002960 <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2960:	1f 92       	push	r1
    2962:	0f 92       	push	r0
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	0f 92       	push	r0
    2968:	11 24       	eor	r1, r1
    296a:	2f 93       	push	r18
    296c:	3f 93       	push	r19
    296e:	4f 93       	push	r20
    2970:	5f 93       	push	r21
    2972:	6f 93       	push	r22
    2974:	7f 93       	push	r23
    2976:	8f 93       	push	r24
    2978:	9f 93       	push	r25
    297a:	af 93       	push	r26
    297c:	bf 93       	push	r27
    297e:	ef 93       	push	r30
    2980:	ff 93       	push	r31
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <Gpt_ISRHandler>
    2988:	ff 91       	pop	r31
    298a:	ef 91       	pop	r30
    298c:	bf 91       	pop	r27
    298e:	af 91       	pop	r26
    2990:	9f 91       	pop	r25
    2992:	8f 91       	pop	r24
    2994:	7f 91       	pop	r23
    2996:	6f 91       	pop	r22
    2998:	5f 91       	pop	r21
    299a:	4f 91       	pop	r20
    299c:	3f 91       	pop	r19
    299e:	2f 91       	pop	r18
    29a0:	0f 90       	pop	r0
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	0f 90       	pop	r0
    29a6:	1f 90       	pop	r1
    29a8:	18 95       	reti

000029aa <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    29aa:	1f 92       	push	r1
    29ac:	0f 92       	push	r0
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	0f 92       	push	r0
    29b2:	11 24       	eor	r1, r1
    29b4:	2f 93       	push	r18
    29b6:	3f 93       	push	r19
    29b8:	4f 93       	push	r20
    29ba:	5f 93       	push	r21
    29bc:	6f 93       	push	r22
    29be:	7f 93       	push	r23
    29c0:	8f 93       	push	r24
    29c2:	9f 93       	push	r25
    29c4:	af 93       	push	r26
    29c6:	bf 93       	push	r27
    29c8:	ef 93       	push	r30
    29ca:	ff 93       	push	r31
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <Gpt_ISRHandler>
    29d2:	ff 91       	pop	r31
    29d4:	ef 91       	pop	r30
    29d6:	bf 91       	pop	r27
    29d8:	af 91       	pop	r26
    29da:	9f 91       	pop	r25
    29dc:	8f 91       	pop	r24
    29de:	7f 91       	pop	r23
    29e0:	6f 91       	pop	r22
    29e2:	5f 91       	pop	r21
    29e4:	4f 91       	pop	r20
    29e6:	3f 91       	pop	r19
    29e8:	2f 91       	pop	r18
    29ea:	0f 90       	pop	r0
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	0f 90       	pop	r0
    29f0:	1f 90       	pop	r1
    29f2:	18 95       	reti

000029f4 <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    29f4:	1f 92       	push	r1
    29f6:	0f 92       	push	r0
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	0f 92       	push	r0
    29fc:	11 24       	eor	r1, r1
    29fe:	2f 93       	push	r18
    2a00:	3f 93       	push	r19
    2a02:	4f 93       	push	r20
    2a04:	5f 93       	push	r21
    2a06:	6f 93       	push	r22
    2a08:	7f 93       	push	r23
    2a0a:	8f 93       	push	r24
    2a0c:	9f 93       	push	r25
    2a0e:	af 93       	push	r26
    2a10:	bf 93       	push	r27
    2a12:	ef 93       	push	r30
    2a14:	ff 93       	push	r31
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <Gpt_ISRHandler>
    2a1c:	ff 91       	pop	r31
    2a1e:	ef 91       	pop	r30
    2a20:	bf 91       	pop	r27
    2a22:	af 91       	pop	r26
    2a24:	9f 91       	pop	r25
    2a26:	8f 91       	pop	r24
    2a28:	7f 91       	pop	r23
    2a2a:	6f 91       	pop	r22
    2a2c:	5f 91       	pop	r21
    2a2e:	4f 91       	pop	r20
    2a30:	3f 91       	pop	r19
    2a32:	2f 91       	pop	r18
    2a34:	0f 90       	pop	r0
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	0f 90       	pop	r0
    2a3a:	1f 90       	pop	r1
    2a3c:	18 95       	reti

00002a3e <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2a3e:	1f 92       	push	r1
    2a40:	0f 92       	push	r0
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	0f 92       	push	r0
    2a46:	11 24       	eor	r1, r1
    2a48:	2f 93       	push	r18
    2a4a:	3f 93       	push	r19
    2a4c:	4f 93       	push	r20
    2a4e:	5f 93       	push	r21
    2a50:	6f 93       	push	r22
    2a52:	7f 93       	push	r23
    2a54:	8f 93       	push	r24
    2a56:	9f 93       	push	r25
    2a58:	af 93       	push	r26
    2a5a:	bf 93       	push	r27
    2a5c:	ef 93       	push	r30
    2a5e:	ff 93       	push	r31
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <Gpt_ISRHandler>
    2a66:	ff 91       	pop	r31
    2a68:	ef 91       	pop	r30
    2a6a:	bf 91       	pop	r27
    2a6c:	af 91       	pop	r26
    2a6e:	9f 91       	pop	r25
    2a70:	8f 91       	pop	r24
    2a72:	7f 91       	pop	r23
    2a74:	6f 91       	pop	r22
    2a76:	5f 91       	pop	r21
    2a78:	4f 91       	pop	r20
    2a7a:	3f 91       	pop	r19
    2a7c:	2f 91       	pop	r18
    2a7e:	0f 90       	pop	r0
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	0f 90       	pop	r0
    2a84:	1f 90       	pop	r1
    2a86:	18 95       	reti

00002a88 <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2a88:	1f 92       	push	r1
    2a8a:	0f 92       	push	r0
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	0f 92       	push	r0
    2a90:	11 24       	eor	r1, r1
    2a92:	2f 93       	push	r18
    2a94:	3f 93       	push	r19
    2a96:	4f 93       	push	r20
    2a98:	5f 93       	push	r21
    2a9a:	6f 93       	push	r22
    2a9c:	7f 93       	push	r23
    2a9e:	8f 93       	push	r24
    2aa0:	9f 93       	push	r25
    2aa2:	af 93       	push	r26
    2aa4:	bf 93       	push	r27
    2aa6:	ef 93       	push	r30
    2aa8:	ff 93       	push	r31
    2aaa:	82 e0       	ldi	r24, 0x02	; 2
    2aac:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <Gpt_ISRHandler>
    2ab0:	ff 91       	pop	r31
    2ab2:	ef 91       	pop	r30
    2ab4:	bf 91       	pop	r27
    2ab6:	af 91       	pop	r26
    2ab8:	9f 91       	pop	r25
    2aba:	8f 91       	pop	r24
    2abc:	7f 91       	pop	r23
    2abe:	6f 91       	pop	r22
    2ac0:	5f 91       	pop	r21
    2ac2:	4f 91       	pop	r20
    2ac4:	3f 91       	pop	r19
    2ac6:	2f 91       	pop	r18
    2ac8:	0f 90       	pop	r0
    2aca:	0f be       	out	0x3f, r0	; 63
    2acc:	0f 90       	pop	r0
    2ace:	1f 90       	pop	r1
    2ad0:	18 95       	reti

00002ad2 <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2ad2:	1f 92       	push	r1
    2ad4:	0f 92       	push	r0
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	0f 92       	push	r0
    2ada:	11 24       	eor	r1, r1
    2adc:	2f 93       	push	r18
    2ade:	3f 93       	push	r19
    2ae0:	4f 93       	push	r20
    2ae2:	5f 93       	push	r21
    2ae4:	6f 93       	push	r22
    2ae6:	7f 93       	push	r23
    2ae8:	8f 93       	push	r24
    2aea:	9f 93       	push	r25
    2aec:	af 93       	push	r26
    2aee:	bf 93       	push	r27
    2af0:	ef 93       	push	r30
    2af2:	ff 93       	push	r31
    2af4:	82 e0       	ldi	r24, 0x02	; 2
    2af6:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <Gpt_ISRHandler>
    2afa:	ff 91       	pop	r31
    2afc:	ef 91       	pop	r30
    2afe:	bf 91       	pop	r27
    2b00:	af 91       	pop	r26
    2b02:	9f 91       	pop	r25
    2b04:	8f 91       	pop	r24
    2b06:	7f 91       	pop	r23
    2b08:	6f 91       	pop	r22
    2b0a:	5f 91       	pop	r21
    2b0c:	4f 91       	pop	r20
    2b0e:	3f 91       	pop	r19
    2b10:	2f 91       	pop	r18
    2b12:	0f 90       	pop	r0
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	0f 90       	pop	r0
    2b18:	1f 90       	pop	r1
    2b1a:	18 95       	reti

00002b1c <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
    2b1c:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2b20:	86 30       	cpi	r24, 0x06	; 6
    2b22:	49 f0       	breq	.+18     	; 0x2b36 <I2C_MasterInit+0x1a>
    2b24:	82 e0       	ldi	r24, 0x02	; 2
    2b26:	81 b9       	out	0x01, r24	; 1
    2b28:	89 e0       	ldi	r24, 0x09	; 9
    2b2a:	80 b9       	out	0x00, r24	; 0
    2b2c:	86 e0       	ldi	r24, 0x06	; 6
    2b2e:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <genuI2C_Status>
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	08 95       	ret
    2b36:	87 e0       	ldi	r24, 0x07	; 7
    2b38:	08 95       	ret

00002b3a <I2C_MasterSendSTART>:
    2b3a:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2b3e:	86 30       	cpi	r24, 0x06	; 6
    2b40:	59 f4       	brne	.+22     	; 0x2b58 <I2C_MasterSendSTART+0x1e>
    2b42:	84 ea       	ldi	r24, 0xA4	; 164
    2b44:	86 bf       	out	0x36, r24	; 54
    2b46:	06 b6       	in	r0, 0x36	; 54
    2b48:	07 fe       	sbrs	r0, 7
    2b4a:	fd cf       	rjmp	.-6      	; 0x2b46 <I2C_MasterSendSTART+0xc>
    2b4c:	81 b1       	in	r24, 0x01	; 1
    2b4e:	88 7f       	andi	r24, 0xF8	; 248
    2b50:	88 30       	cpi	r24, 0x08	; 8
    2b52:	21 f0       	breq	.+8      	; 0x2b5c <I2C_MasterSendSTART+0x22>
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	08 95       	ret
    2b58:	85 e0       	ldi	r24, 0x05	; 5
    2b5a:	08 95       	ret
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	08 95       	ret

00002b60 <I2C_MasterSendSlaveAddress>:
    2b60:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2b64:	96 30       	cpi	r25, 0x06	; 6
    2b66:	29 f5       	brne	.+74     	; 0x2bb2 <I2C_MasterSendSlaveAddress+0x52>
    2b68:	62 30       	cpi	r22, 0x02	; 2
    2b6a:	28 f5       	brcc	.+74     	; 0x2bb6 <I2C_MasterSendSlaveAddress+0x56>
    2b6c:	88 23       	and	r24, r24
    2b6e:	2c f1       	brlt	.+74     	; 0x2bba <I2C_MasterSendSlaveAddress+0x5a>
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	88 0f       	add	r24, r24
    2b74:	99 1f       	adc	r25, r25
    2b76:	68 2b       	or	r22, r24
    2b78:	63 b9       	out	0x03, r22	; 3
    2b7a:	84 e8       	ldi	r24, 0x84	; 132
    2b7c:	86 bf       	out	0x36, r24	; 54
    2b7e:	06 b6       	in	r0, 0x36	; 54
    2b80:	07 fe       	sbrs	r0, 7
    2b82:	fd cf       	rjmp	.-6      	; 0x2b7e <I2C_MasterSendSlaveAddress+0x1e>
    2b84:	81 b1       	in	r24, 0x01	; 1
    2b86:	88 7f       	andi	r24, 0xF8	; 248
    2b88:	88 33       	cpi	r24, 0x38	; 56
    2b8a:	59 f0       	breq	.+22     	; 0x2ba2 <I2C_MasterSendSlaveAddress+0x42>
    2b8c:	28 f4       	brcc	.+10     	; 0x2b98 <I2C_MasterSendSlaveAddress+0x38>
    2b8e:	88 31       	cpi	r24, 0x18	; 24
    2b90:	b1 f0       	breq	.+44     	; 0x2bbe <I2C_MasterSendSlaveAddress+0x5e>
    2b92:	80 32       	cpi	r24, 0x20	; 32
    2b94:	41 f0       	breq	.+16     	; 0x2ba6 <I2C_MasterSendSlaveAddress+0x46>
    2b96:	0b c0       	rjmp	.+22     	; 0x2bae <I2C_MasterSendSlaveAddress+0x4e>
    2b98:	80 34       	cpi	r24, 0x40	; 64
    2b9a:	89 f0       	breq	.+34     	; 0x2bbe <I2C_MasterSendSlaveAddress+0x5e>
    2b9c:	88 34       	cpi	r24, 0x48	; 72
    2b9e:	29 f0       	breq	.+10     	; 0x2baa <I2C_MasterSendSlaveAddress+0x4a>
    2ba0:	06 c0       	rjmp	.+12     	; 0x2bae <I2C_MasterSendSlaveAddress+0x4e>
    2ba2:	88 e3       	ldi	r24, 0x38	; 56
    2ba4:	08 95       	ret
    2ba6:	80 e2       	ldi	r24, 0x20	; 32
    2ba8:	08 95       	ret
    2baa:	88 e4       	ldi	r24, 0x48	; 72
    2bac:	08 95       	ret
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	08 95       	ret
    2bb2:	85 e0       	ldi	r24, 0x05	; 5
    2bb4:	08 95       	ret
    2bb6:	82 e0       	ldi	r24, 0x02	; 2
    2bb8:	08 95       	ret
    2bba:	83 e0       	ldi	r24, 0x03	; 3
    2bbc:	08 95       	ret
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	08 95       	ret

00002bc2 <I2C_MasterSendRepSTART>:
    2bc2:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2bc6:	86 30       	cpi	r24, 0x06	; 6
    2bc8:	59 f4       	brne	.+22     	; 0x2be0 <I2C_MasterSendRepSTART+0x1e>
    2bca:	84 ea       	ldi	r24, 0xA4	; 164
    2bcc:	86 bf       	out	0x36, r24	; 54
    2bce:	06 b6       	in	r0, 0x36	; 54
    2bd0:	07 fe       	sbrs	r0, 7
    2bd2:	fd cf       	rjmp	.-6      	; 0x2bce <I2C_MasterSendRepSTART+0xc>
    2bd4:	81 b1       	in	r24, 0x01	; 1
    2bd6:	88 7f       	andi	r24, 0xF8	; 248
    2bd8:	80 31       	cpi	r24, 0x10	; 16
    2bda:	21 f0       	breq	.+8      	; 0x2be4 <I2C_MasterSendRepSTART+0x22>
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	08 95       	ret
    2be0:	85 e0       	ldi	r24, 0x05	; 5
    2be2:	08 95       	ret
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	08 95       	ret

00002be8 <I2C_MasterSendSTOP>:
    2be8:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2bec:	86 30       	cpi	r24, 0x06	; 6
    2bee:	39 f4       	brne	.+14     	; 0x2bfe <I2C_MasterSendSTOP+0x16>
    2bf0:	84 e9       	ldi	r24, 0x94	; 148
    2bf2:	86 bf       	out	0x36, r24	; 54
    2bf4:	06 b6       	in	r0, 0x36	; 54
    2bf6:	04 fc       	sbrc	r0, 4
    2bf8:	fd cf       	rjmp	.-6      	; 0x2bf4 <I2C_MasterSendSTOP+0xc>
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	08 95       	ret
    2bfe:	85 e0       	ldi	r24, 0x05	; 5
    2c00:	08 95       	ret

00002c02 <I2C_MasterSendByte>:
    2c02:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2c06:	96 30       	cpi	r25, 0x06	; 6
    2c08:	69 f4       	brne	.+26     	; 0x2c24 <I2C_MasterSendByte+0x22>
    2c0a:	83 b9       	out	0x03, r24	; 3
    2c0c:	84 e8       	ldi	r24, 0x84	; 132
    2c0e:	86 bf       	out	0x36, r24	; 54
    2c10:	06 b6       	in	r0, 0x36	; 54
    2c12:	07 fe       	sbrs	r0, 7
    2c14:	fd cf       	rjmp	.-6      	; 0x2c10 <I2C_MasterSendByte+0xe>
    2c16:	81 b1       	in	r24, 0x01	; 1
    2c18:	88 7f       	andi	r24, 0xF8	; 248
    2c1a:	88 32       	cpi	r24, 0x28	; 40
    2c1c:	29 f0       	breq	.+10     	; 0x2c28 <I2C_MasterSendByte+0x26>
    2c1e:	80 33       	cpi	r24, 0x30	; 48
    2c20:	29 f4       	brne	.+10     	; 0x2c2c <I2C_MasterSendByte+0x2a>
    2c22:	08 95       	ret
    2c24:	85 e0       	ldi	r24, 0x05	; 5
    2c26:	08 95       	ret
    2c28:	88 e2       	ldi	r24, 0x28	; 40
    2c2a:	08 95       	ret
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	08 95       	ret

00002c30 <I2C_MasterReceiveByte_ACK>:
    2c30:	fc 01       	movw	r30, r24
    2c32:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2c36:	96 30       	cpi	r25, 0x06	; 6
    2c38:	79 f4       	brne	.+30     	; 0x2c58 <I2C_MasterReceiveByte_ACK+0x28>
    2c3a:	30 97       	sbiw	r30, 0x00	; 0
    2c3c:	79 f0       	breq	.+30     	; 0x2c5c <I2C_MasterReceiveByte_ACK+0x2c>
    2c3e:	84 ec       	ldi	r24, 0xC4	; 196
    2c40:	86 bf       	out	0x36, r24	; 54
    2c42:	06 b6       	in	r0, 0x36	; 54
    2c44:	07 fe       	sbrs	r0, 7
    2c46:	fd cf       	rjmp	.-6      	; 0x2c42 <I2C_MasterReceiveByte_ACK+0x12>
    2c48:	81 b1       	in	r24, 0x01	; 1
    2c4a:	88 7f       	andi	r24, 0xF8	; 248
    2c4c:	80 35       	cpi	r24, 0x50	; 80
    2c4e:	41 f4       	brne	.+16     	; 0x2c60 <I2C_MasterReceiveByte_ACK+0x30>
    2c50:	83 b1       	in	r24, 0x03	; 3
    2c52:	80 83       	st	Z, r24
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	08 95       	ret
    2c58:	85 e0       	ldi	r24, 0x05	; 5
    2c5a:	08 95       	ret
    2c5c:	84 e0       	ldi	r24, 0x04	; 4
    2c5e:	08 95       	ret
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	08 95       	ret

00002c64 <I2C_MasterReceiveByte_NACK>:
    2c64:	fc 01       	movw	r30, r24
    2c66:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2c6a:	96 30       	cpi	r25, 0x06	; 6
    2c6c:	79 f4       	brne	.+30     	; 0x2c8c <I2C_MasterReceiveByte_NACK+0x28>
    2c6e:	30 97       	sbiw	r30, 0x00	; 0
    2c70:	79 f0       	breq	.+30     	; 0x2c90 <I2C_MasterReceiveByte_NACK+0x2c>
    2c72:	84 e8       	ldi	r24, 0x84	; 132
    2c74:	86 bf       	out	0x36, r24	; 54
    2c76:	06 b6       	in	r0, 0x36	; 54
    2c78:	07 fe       	sbrs	r0, 7
    2c7a:	fd cf       	rjmp	.-6      	; 0x2c76 <I2C_MasterReceiveByte_NACK+0x12>
    2c7c:	81 b1       	in	r24, 0x01	; 1
    2c7e:	88 7f       	andi	r24, 0xF8	; 248
    2c80:	88 35       	cpi	r24, 0x58	; 88
    2c82:	41 f4       	brne	.+16     	; 0x2c94 <I2C_MasterReceiveByte_NACK+0x30>
    2c84:	83 b1       	in	r24, 0x03	; 3
    2c86:	80 83       	st	Z, r24
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	08 95       	ret
    2c8c:	85 e0       	ldi	r24, 0x05	; 5
    2c8e:	08 95       	ret
    2c90:	84 e0       	ldi	r24, 0x04	; 4
    2c92:	08 95       	ret
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	08 95       	ret

00002c98 <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
    2c98:	7f 92       	push	r7
    2c9a:	8f 92       	push	r8
    2c9c:	9f 92       	push	r9
    2c9e:	af 92       	push	r10
    2ca0:	bf 92       	push	r11
    2ca2:	cf 92       	push	r12
    2ca4:	df 92       	push	r13
    2ca6:	ef 92       	push	r14
    2ca8:	ff 92       	push	r15
    2caa:	0f 93       	push	r16
    2cac:	1f 93       	push	r17
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	78 2e       	mov	r7, r24
    2cb4:	eb 01       	movw	r28, r22
    2cb6:	7a 01       	movw	r14, r20
    2cb8:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    2cba:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2cbe:	86 30       	cpi	r24, 0x06	; 6
    2cc0:	09 f0       	breq	.+2      	; 0x2cc4 <I2C_MasterReceiveGeneral+0x2c>
    2cc2:	47 c0       	rjmp	.+142    	; 0x2d52 <I2C_MasterReceiveGeneral+0xba>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
    2cc4:	20 97       	sbiw	r28, 0x00	; 0
    2cc6:	09 f4       	brne	.+2      	; 0x2cca <I2C_MasterReceiveGeneral+0x32>
    2cc8:	46 c0       	rjmp	.+140    	; 0x2d56 <I2C_MasterReceiveGeneral+0xbe>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
    2cca:	23 2b       	or	r18, r19
    2ccc:	09 f4       	brne	.+2      	; 0x2cd0 <I2C_MasterReceiveGeneral+0x38>
    2cce:	45 c0       	rjmp	.+138    	; 0x2d5a <I2C_MasterReceiveGeneral+0xc2>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    2cd0:	77 20       	and	r7, r7
    2cd2:	0c f4       	brge	.+2      	; 0x2cd6 <I2C_MasterReceiveGeneral+0x3e>
    2cd4:	44 c0       	rjmp	.+136    	; 0x2d5e <I2C_MasterReceiveGeneral+0xc6>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2cd6:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <I2C_MasterSendSTART>
    2cda:	88 23       	and	r24, r24
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <I2C_MasterReceiveGeneral+0x48>
    2cde:	4a c0       	rjmp	.+148    	; 0x2d74 <I2C_MasterReceiveGeneral+0xdc>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2ce0:	60 e0       	ldi	r22, 0x00	; 0
    2ce2:	87 2d       	mov	r24, r7
    2ce4:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <I2C_MasterSendSlaveAddress>
    2ce8:	81 30       	cpi	r24, 0x01	; 1
    2cea:	d9 f5       	brne	.+118    	; 0x2d62 <I2C_MasterReceiveGeneral+0xca>
    2cec:	0b c0       	rjmp	.+22     	; 0x2d04 <I2C_MasterReceiveGeneral+0x6c>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2cee:	4e 01       	movw	r8, r28
    2cf0:	8f ef       	ldi	r24, 0xFF	; 255
    2cf2:	88 1a       	sub	r8, r24
    2cf4:	98 0a       	sbc	r9, r24
    2cf6:	88 81       	ld	r24, Y
    2cf8:	0e 94 01 16 	call	0x2c02	; 0x2c02 <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    2cfc:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2cfe:	88 23       	and	r24, r24
    2d00:	c9 f1       	breq	.+114    	; 0x2d74 <I2C_MasterReceiveGeneral+0xdc>
    2d02:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    2d04:	57 01       	movw	r10, r14
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	a8 1a       	sub	r10, r24
    2d0a:	b1 08       	sbc	r11, r1
    2d0c:	ef 28       	or	r14, r15
    2d0e:	79 f7       	brne	.-34     	; 0x2cee <I2C_MasterReceiveGeneral+0x56>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
    2d10:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <I2C_MasterSendRepSTART>
    2d14:	81 30       	cpi	r24, 0x01	; 1
    2d16:	39 f5       	brne	.+78     	; 0x2d66 <I2C_MasterReceiveGeneral+0xce>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2d18:	61 e0       	ldi	r22, 0x01	; 1
    2d1a:	87 2d       	mov	r24, r7
    2d1c:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <I2C_MasterSendSlaveAddress>
    2d20:	81 30       	cpi	r24, 0x01	; 1
    2d22:	19 f5       	brne	.+70     	; 0x2d6a <I2C_MasterReceiveGeneral+0xd2>
    2d24:	08 c0       	rjmp	.+16     	; 0x2d36 <I2C_MasterReceiveGeneral+0x9e>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
    2d26:	e6 01       	movw	r28, r12
    2d28:	21 96       	adiw	r28, 0x01	; 1
    2d2a:	c6 01       	movw	r24, r12
    2d2c:	0e 94 18 16 	call	0x2c30	; 0x2c30 <I2C_MasterReceiveByte_ACK>
    2d30:	81 30       	cpi	r24, 0x01	; 1
    2d32:	e9 f4       	brne	.+58     	; 0x2d6e <I2C_MasterReceiveGeneral+0xd6>
    2d34:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
    2d36:	01 50       	subi	r16, 0x01	; 1
    2d38:	11 09       	sbc	r17, r1
    2d3a:	a9 f7       	brne	.-22     	; 0x2d26 <I2C_MasterReceiveGeneral+0x8e>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
    2d3c:	c6 01       	movw	r24, r12
    2d3e:	0e 94 32 16 	call	0x2c64	; 0x2c64 <I2C_MasterReceiveByte_NACK>
    2d42:	81 30       	cpi	r24, 0x01	; 1
    2d44:	b1 f4       	brne	.+44     	; 0x2d72 <I2C_MasterReceiveGeneral+0xda>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
    2d46:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <I2C_MasterSendSTOP>
    2d4a:	81 30       	cpi	r24, 0x01	; 1
    2d4c:	99 f0       	breq	.+38     	; 0x2d74 <I2C_MasterReceiveGeneral+0xdc>
		return I2C_STATUS_ERROR_NOK;
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	11 c0       	rjmp	.+34     	; 0x2d74 <I2C_MasterReceiveGeneral+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    2d52:	85 e0       	ldi	r24, 0x05	; 5
    2d54:	0f c0       	rjmp	.+30     	; 0x2d74 <I2C_MasterReceiveGeneral+0xdc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2d56:	84 e0       	ldi	r24, 0x04	; 4
    2d58:	0d c0       	rjmp	.+26     	; 0x2d74 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2d5a:	84 e0       	ldi	r24, 0x04	; 4
    2d5c:	0b c0       	rjmp	.+22     	; 0x2d74 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    2d5e:	83 e0       	ldi	r24, 0x03	; 3
    2d60:	09 c0       	rjmp	.+18     	; 0x2d74 <I2C_MasterReceiveGeneral+0xdc>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	07 c0       	rjmp	.+14     	; 0x2d74 <I2C_MasterReceiveGeneral+0xdc>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	05 c0       	rjmp	.+10     	; 0x2d74 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	03 c0       	rjmp	.+6      	; 0x2d74 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	01 c0       	rjmp	.+2      	; 0x2d74 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    2d72:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
    2d74:	df 91       	pop	r29
    2d76:	cf 91       	pop	r28
    2d78:	1f 91       	pop	r17
    2d7a:	0f 91       	pop	r16
    2d7c:	ff 90       	pop	r15
    2d7e:	ef 90       	pop	r14
    2d80:	df 90       	pop	r13
    2d82:	cf 90       	pop	r12
    2d84:	bf 90       	pop	r11
    2d86:	af 90       	pop	r10
    2d88:	9f 90       	pop	r9
    2d8a:	8f 90       	pop	r8
    2d8c:	7f 90       	pop	r7
    2d8e:	08 95       	ret

00002d90 <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
    2d90:	bf 92       	push	r11
    2d92:	cf 92       	push	r12
    2d94:	df 92       	push	r13
    2d96:	ef 92       	push	r14
    2d98:	ff 92       	push	r15
    2d9a:	0f 93       	push	r16
    2d9c:	1f 93       	push	r17
    2d9e:	cf 93       	push	r28
    2da0:	df 93       	push	r29
    2da2:	18 2f       	mov	r17, r24
    2da4:	06 2f       	mov	r16, r22
    2da6:	ea 01       	movw	r28, r20
    2da8:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    2daa:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2dae:	86 30       	cpi	r24, 0x06	; 6
    2db0:	59 f5       	brne	.+86     	; 0x2e08 <I2C_MasterSendToLocation+0x78>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    2db2:	20 97       	sbiw	r28, 0x00	; 0
    2db4:	59 f1       	breq	.+86     	; 0x2e0c <I2C_MasterSendToLocation+0x7c>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    2db6:	11 23       	and	r17, r17
    2db8:	5c f1       	brlt	.+86     	; 0x2e10 <I2C_MasterSendToLocation+0x80>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2dba:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <I2C_MasterSendSTART>
    2dbe:	88 23       	and	r24, r24
    2dc0:	61 f1       	breq	.+88     	; 0x2e1a <I2C_MasterSendToLocation+0x8a>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2dc2:	60 e0       	ldi	r22, 0x00	; 0
    2dc4:	81 2f       	mov	r24, r17
    2dc6:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <I2C_MasterSendSlaveAddress>
    2dca:	b8 2e       	mov	r11, r24
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	b8 12       	cpse	r11, r24
    2dd0:	21 c0       	rjmp	.+66     	; 0x2e14 <I2C_MasterSendToLocation+0x84>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2dd2:	80 2f       	mov	r24, r16
    2dd4:	0e 94 01 16 	call	0x2c02	; 0x2c02 <I2C_MasterSendByte>
    2dd8:	81 11       	cpse	r24, r1
    2dda:	0c c0       	rjmp	.+24     	; 0x2df4 <I2C_MasterSendToLocation+0x64>
    2ddc:	1e c0       	rjmp	.+60     	; 0x2e1a <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2dde:	6e 01       	movw	r12, r28
    2de0:	8f ef       	ldi	r24, 0xFF	; 255
    2de2:	c8 1a       	sub	r12, r24
    2de4:	d8 0a       	sbc	r13, r24
    2de6:	88 81       	ld	r24, Y
    2de8:	0e 94 01 16 	call	0x2c02	; 0x2c02 <I2C_MasterSendByte>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    2dec:	78 01       	movw	r14, r16
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2dee:	88 23       	and	r24, r24
    2df0:	a1 f0       	breq	.+40     	; 0x2e1a <I2C_MasterSendToLocation+0x8a>
    2df2:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    2df4:	87 01       	movw	r16, r14
    2df6:	01 50       	subi	r16, 0x01	; 1
    2df8:	11 09       	sbc	r17, r1
    2dfa:	ef 28       	or	r14, r15
    2dfc:	81 f7       	brne	.-32     	; 0x2dde <I2C_MasterSendToLocation+0x4e>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2dfe:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <I2C_MasterSendSTOP>
    2e02:	81 11       	cpse	r24, r1
    2e04:	09 c0       	rjmp	.+18     	; 0x2e18 <I2C_MasterSendToLocation+0x88>
    2e06:	09 c0       	rjmp	.+18     	; 0x2e1a <I2C_MasterSendToLocation+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    2e08:	85 e0       	ldi	r24, 0x05	; 5
    2e0a:	07 c0       	rjmp	.+14     	; 0x2e1a <I2C_MasterSendToLocation+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2e0c:	84 e0       	ldi	r24, 0x04	; 4
    2e0e:	05 c0       	rjmp	.+10     	; 0x2e1a <I2C_MasterSendToLocation+0x8a>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    2e10:	83 e0       	ldi	r24, 0x03	; 3
    2e12:	03 c0       	rjmp	.+6      	; 0x2e1a <I2C_MasterSendToLocation+0x8a>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	01 c0       	rjmp	.+2      	; 0x2e1a <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
    2e18:	8b 2d       	mov	r24, r11
}
    2e1a:	df 91       	pop	r29
    2e1c:	cf 91       	pop	r28
    2e1e:	1f 91       	pop	r17
    2e20:	0f 91       	pop	r16
    2e22:	ff 90       	pop	r15
    2e24:	ef 90       	pop	r14
    2e26:	df 90       	pop	r13
    2e28:	cf 90       	pop	r12
    2e2a:	bf 90       	pop	r11
    2e2c:	08 95       	ret

00002e2e <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
    2e2e:	0f 93       	push	r16
    2e30:	1f 93       	push	r17
    2e32:	cf 93       	push	r28
    2e34:	df 93       	push	r29
    2e36:	1f 92       	push	r1
    2e38:	cd b7       	in	r28, 0x3d	; 61
    2e3a:	de b7       	in	r29, 0x3e	; 62
    2e3c:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
    2e3e:	89 01       	movw	r16, r18
    2e40:	9a 01       	movw	r18, r20
    2e42:	41 e0       	ldi	r20, 0x01	; 1
    2e44:	50 e0       	ldi	r21, 0x00	; 0
    2e46:	be 01       	movw	r22, r28
    2e48:	6f 5f       	subi	r22, 0xFF	; 255
    2e4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e4c:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <I2C_MasterReceiveGeneral>
}
    2e50:	0f 90       	pop	r0
    2e52:	df 91       	pop	r29
    2e54:	cf 91       	pop	r28
    2e56:	1f 91       	pop	r17
    2e58:	0f 91       	pop	r16
    2e5a:	08 95       	ret

00002e5c <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
    2e5c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <genuSpi_Status>
    2e60:	87 30       	cpi	r24, 0x07	; 7
    2e62:	b9 f0       	breq	.+46     	; 0x2e92 <Spi_init+0x36>
    2e64:	87 b3       	in	r24, 0x17	; 23
    2e66:	80 64       	ori	r24, 0x40	; 64
    2e68:	87 bb       	out	0x17, r24	; 23
    2e6a:	87 b3       	in	r24, 0x17	; 23
    2e6c:	8f 7d       	andi	r24, 0xDF	; 223
    2e6e:	87 bb       	out	0x17, r24	; 23
    2e70:	87 b3       	in	r24, 0x17	; 23
    2e72:	8f 7e       	andi	r24, 0xEF	; 239
    2e74:	87 bb       	out	0x17, r24	; 23
    2e76:	87 b3       	in	r24, 0x17	; 23
    2e78:	8f 77       	andi	r24, 0x7F	; 127
    2e7a:	87 bb       	out	0x17, r24	; 23
    2e7c:	8d b1       	in	r24, 0x0d	; 13
    2e7e:	8f 7e       	andi	r24, 0xEF	; 239
    2e80:	8d b9       	out	0x0d, r24	; 13
    2e82:	8d b1       	in	r24, 0x0d	; 13
    2e84:	80 64       	ori	r24, 0x40	; 64
    2e86:	8d b9       	out	0x0d, r24	; 13
    2e88:	87 e0       	ldi	r24, 0x07	; 7
    2e8a:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <genuSpi_Status>
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	08 95       	ret
    2e92:	88 e0       	ldi	r24, 0x08	; 8
    2e94:	08 95       	ret

00002e96 <Spi_SlaveReceiveByte>:
    2e96:	fc 01       	movw	r30, r24
    2e98:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <genuSpi_Status>
    2e9c:	97 30       	cpi	r25, 0x07	; 7
    2e9e:	41 f4       	brne	.+16     	; 0x2eb0 <Spi_SlaveReceiveByte+0x1a>
    2ea0:	30 97       	sbiw	r30, 0x00	; 0
    2ea2:	41 f0       	breq	.+16     	; 0x2eb4 <Spi_SlaveReceiveByte+0x1e>
    2ea4:	77 9b       	sbis	0x0e, 7	; 14
    2ea6:	fe cf       	rjmp	.-4      	; 0x2ea4 <Spi_SlaveReceiveByte+0xe>
    2ea8:	8f b1       	in	r24, 0x0f	; 15
    2eaa:	80 83       	st	Z, r24
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	08 95       	ret
    2eb0:	86 e0       	ldi	r24, 0x06	; 6
    2eb2:	08 95       	ret
    2eb4:	85 e0       	ldi	r24, 0x05	; 5
    2eb6:	08 95       	ret

00002eb8 <Spi_SlaveReceivePacket>:
    2eb8:	cf 92       	push	r12
    2eba:	df 92       	push	r13
    2ebc:	ef 92       	push	r14
    2ebe:	ff 92       	push	r15
    2ec0:	1f 93       	push	r17
    2ec2:	cf 93       	push	r28
    2ec4:	df 93       	push	r29
    2ec6:	6c 01       	movw	r12, r24
    2ec8:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <genuSpi_Status>
    2ecc:	97 30       	cpi	r25, 0x07	; 7
    2ece:	b1 f4       	brne	.+44     	; 0x2efc <Spi_SlaveReceivePacket+0x44>
    2ed0:	7b 01       	movw	r14, r22
    2ed2:	10 e0       	ldi	r17, 0x00	; 0
    2ed4:	0c c0       	rjmp	.+24     	; 0x2eee <Spi_SlaveReceivePacket+0x36>
    2ed6:	e6 01       	movw	r28, r12
    2ed8:	c8 0f       	add	r28, r24
    2eda:	d9 1f       	adc	r29, r25
    2edc:	ce 01       	movw	r24, r28
    2ede:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <Spi_SlaveReceiveByte>
    2ee2:	81 30       	cpi	r24, 0x01	; 1
    2ee4:	69 f4       	brne	.+26     	; 0x2f00 <Spi_SlaveReceivePacket+0x48>
    2ee6:	98 81       	ld	r25, Y
    2ee8:	99 23       	and	r25, r25
    2eea:	59 f0       	breq	.+22     	; 0x2f02 <Spi_SlaveReceivePacket+0x4a>
    2eec:	1f 5f       	subi	r17, 0xFF	; 255
    2eee:	81 2f       	mov	r24, r17
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	8e 15       	cp	r24, r14
    2ef4:	9f 05       	cpc	r25, r15
    2ef6:	78 f3       	brcs	.-34     	; 0x2ed6 <Spi_SlaveReceivePacket+0x1e>
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	03 c0       	rjmp	.+6      	; 0x2f02 <Spi_SlaveReceivePacket+0x4a>
    2efc:	86 e0       	ldi	r24, 0x06	; 6
    2efe:	01 c0       	rjmp	.+2      	; 0x2f02 <Spi_SlaveReceivePacket+0x4a>
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	df 91       	pop	r29
    2f04:	cf 91       	pop	r28
    2f06:	1f 91       	pop	r17
    2f08:	ff 90       	pop	r15
    2f0a:	ef 90       	pop	r14
    2f0c:	df 90       	pop	r13
    2f0e:	cf 90       	pop	r12
    2f10:	08 95       	ret

00002f12 <__vector_12>:


    2f12:	1f 92       	push	r1
    2f14:	0f 92       	push	r0
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	0f 92       	push	r0
    2f1a:	11 24       	eor	r1, r1
    2f1c:	2f 93       	push	r18
    2f1e:	3f 93       	push	r19
    2f20:	4f 93       	push	r20
    2f22:	5f 93       	push	r21
    2f24:	6f 93       	push	r22
    2f26:	7f 93       	push	r23
    2f28:	8f 93       	push	r24
    2f2a:	9f 93       	push	r25
    2f2c:	af 93       	push	r26
    2f2e:	bf 93       	push	r27
    2f30:	ef 93       	push	r30
    2f32:	ff 93       	push	r31
    2f34:	e0 91 40 06 	lds	r30, 0x0640	; 0x800640 <SPI_STC_CallBackPtr>
    2f38:	f0 91 41 06 	lds	r31, 0x0641	; 0x800641 <SPI_STC_CallBackPtr+0x1>
    2f3c:	09 95       	icall
    2f3e:	ff 91       	pop	r31
    2f40:	ef 91       	pop	r30
    2f42:	bf 91       	pop	r27
    2f44:	af 91       	pop	r26
    2f46:	9f 91       	pop	r25
    2f48:	8f 91       	pop	r24
    2f4a:	7f 91       	pop	r23
    2f4c:	6f 91       	pop	r22
    2f4e:	5f 91       	pop	r21
    2f50:	4f 91       	pop	r20
    2f52:	3f 91       	pop	r19
    2f54:	2f 91       	pop	r18
    2f56:	0f 90       	pop	r0
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	0f 90       	pop	r0
    2f5c:	1f 90       	pop	r1
    2f5e:	18 95       	reti

00002f60 <stringLength>:
	for (s8_loopIndex=length-2; s8_loopIndex>=0; s8_loopIndex--)
	{
		*pu32_Num += (pu8_String[s8_loopIndex]-'0') *digit;
		digit*=10;
	}
}
    2f60:	ac 01       	movw	r20, r24
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	01 c0       	rjmp	.+2      	; 0x2f68 <stringLength+0x8>
    2f66:	8f 5f       	subi	r24, 0xFF	; 255
    2f68:	fa 01       	movw	r30, r20
    2f6a:	e8 0f       	add	r30, r24
    2f6c:	f1 1d       	adc	r31, r1
    2f6e:	20 81       	ld	r18, Z
    2f70:	21 11       	cpse	r18, r1
    2f72:	f9 cf       	rjmp	.-14     	; 0x2f66 <stringLength+0x6>
    2f74:	8f 5f       	subi	r24, 0xFF	; 255
    2f76:	08 95       	ret

00002f78 <stringCompare>:
    2f78:	ff 92       	push	r15
    2f7a:	0f 93       	push	r16
    2f7c:	1f 93       	push	r17
    2f7e:	cf 93       	push	r28
    2f80:	df 93       	push	r29
    2f82:	8c 01       	movw	r16, r24
    2f84:	eb 01       	movw	r28, r22
    2f86:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <stringLength>
    2f8a:	f8 2e       	mov	r15, r24
    2f8c:	ce 01       	movw	r24, r28
    2f8e:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <stringLength>
    2f92:	8f 15       	cp	r24, r15
    2f94:	b8 f0       	brcs	.+46     	; 0x2fc4 <stringCompare+0x4c>
    2f96:	f8 16       	cp	r15, r24
    2f98:	b8 f0       	brcs	.+46     	; 0x2fc8 <stringCompare+0x50>
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	09 c0       	rjmp	.+18     	; 0x2fb0 <stringCompare+0x38>
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	e8 0f       	add	r30, r24
    2fa2:	f9 1f       	adc	r31, r25
    2fa4:	80 81       	ld	r24, Z
    2fa6:	82 17       	cp	r24, r18
    2fa8:	88 f0       	brcs	.+34     	; 0x2fcc <stringCompare+0x54>
    2faa:	28 17       	cp	r18, r24
    2fac:	88 f0       	brcs	.+34     	; 0x2fd0 <stringCompare+0x58>
    2fae:	3f 5f       	subi	r19, 0xFF	; 255
    2fb0:	83 2f       	mov	r24, r19
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	f8 01       	movw	r30, r16
    2fb6:	e8 0f       	add	r30, r24
    2fb8:	f9 1f       	adc	r31, r25
    2fba:	20 81       	ld	r18, Z
    2fbc:	21 11       	cpse	r18, r1
    2fbe:	ef cf       	rjmp	.-34     	; 0x2f9e <stringCompare+0x26>
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	07 c0       	rjmp	.+14     	; 0x2fd2 <stringCompare+0x5a>
    2fc4:	82 e0       	ldi	r24, 0x02	; 2
    2fc6:	05 c0       	rjmp	.+10     	; 0x2fd2 <stringCompare+0x5a>
    2fc8:	83 e0       	ldi	r24, 0x03	; 3
    2fca:	03 c0       	rjmp	.+6      	; 0x2fd2 <stringCompare+0x5a>
    2fcc:	82 e0       	ldi	r24, 0x02	; 2
    2fce:	01 c0       	rjmp	.+2      	; 0x2fd2 <stringCompare+0x5a>
    2fd0:	83 e0       	ldi	r24, 0x03	; 3
    2fd2:	df 91       	pop	r29
    2fd4:	cf 91       	pop	r28
    2fd6:	1f 91       	pop	r17
    2fd8:	0f 91       	pop	r16
    2fda:	ff 90       	pop	r15
    2fdc:	08 95       	ret

00002fde <EmptyString>:
    2fde:	ac 01       	movw	r20, r24
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	02 c0       	rjmp	.+4      	; 0x2fe8 <EmptyString+0xa>
    2fe4:	9f 5f       	subi	r25, 0xFF	; 255
    2fe6:	10 82       	st	Z, r1
    2fe8:	fa 01       	movw	r30, r20
    2fea:	e9 0f       	add	r30, r25
    2fec:	f1 1d       	adc	r31, r1
    2fee:	20 81       	ld	r18, Z
    2ff0:	21 11       	cpse	r18, r1
    2ff2:	f8 cf       	rjmp	.-16     	; 0x2fe4 <EmptyString+0x6>
    2ff4:	08 95       	ret

00002ff6 <stringCopy>:
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	05 c0       	rjmp	.+10     	; 0x3006 <stringCopy+0x10>
    2ffc:	fb 01       	movw	r30, r22
    2ffe:	e2 0f       	add	r30, r18
    3000:	f3 1f       	adc	r31, r19
    3002:	40 83       	st	Z, r20
    3004:	9f 5f       	subi	r25, 0xFF	; 255
    3006:	29 2f       	mov	r18, r25
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	fd 01       	movw	r30, r26
    300c:	e2 0f       	add	r30, r18
    300e:	f3 1f       	adc	r31, r19
    3010:	40 81       	ld	r20, Z
    3012:	41 11       	cpse	r20, r1
    3014:	f3 cf       	rjmp	.-26     	; 0x2ffc <stringCopy+0x6>
    3016:	08 95       	ret

00003018 <integerToString>:
    3018:	0f 93       	push	r16
    301a:	1f 93       	push	r17
    301c:	cf 93       	push	r28
    301e:	df 93       	push	r29
    3020:	fc 01       	movw	r30, r24
    3022:	8b 01       	movw	r16, r22
    3024:	41 30       	cpi	r20, 0x01	; 1
    3026:	09 f0       	breq	.+2      	; 0x302a <integerToString+0x12>
    3028:	40 c0       	rjmp	.+128    	; 0x30aa <integerToString+0x92>
    302a:	c0 e0       	ldi	r28, 0x00	; 0
    302c:	d0 e0       	ldi	r29, 0x00	; 0
    302e:	6a e0       	ldi	r22, 0x0A	; 10
    3030:	70 e0       	ldi	r23, 0x00	; 0
    3032:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__divmodhi4>
    3036:	cb 01       	movw	r24, r22
    3038:	00 97       	sbiw	r24, 0x00	; 0
    303a:	11 f0       	breq	.+4      	; 0x3040 <integerToString+0x28>
    303c:	21 96       	adiw	r28, 0x01	; 1
    303e:	f7 cf       	rjmp	.-18     	; 0x302e <integerToString+0x16>
    3040:	de 01       	movw	r26, r28
    3042:	11 96       	adiw	r26, 0x01	; 1
    3044:	a0 0f       	add	r26, r16
    3046:	b1 1f       	adc	r27, r17
    3048:	1c 92       	st	X, r1
    304a:	2d c0       	rjmp	.+90     	; 0x30a6 <integerToString+0x8e>
    304c:	a8 01       	movw	r20, r16
    304e:	4c 0f       	add	r20, r28
    3050:	5d 1f       	adc	r21, r29
    3052:	9f 01       	movw	r18, r30
    3054:	ad ec       	ldi	r26, 0xCD	; 205
    3056:	bc ec       	ldi	r27, 0xCC	; 204
    3058:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__umulhisi3>
    305c:	96 95       	lsr	r25
    305e:	87 95       	ror	r24
    3060:	96 95       	lsr	r25
    3062:	87 95       	ror	r24
    3064:	96 95       	lsr	r25
    3066:	87 95       	ror	r24
    3068:	9c 01       	movw	r18, r24
    306a:	22 0f       	add	r18, r18
    306c:	33 1f       	adc	r19, r19
    306e:	88 0f       	add	r24, r24
    3070:	99 1f       	adc	r25, r25
    3072:	88 0f       	add	r24, r24
    3074:	99 1f       	adc	r25, r25
    3076:	88 0f       	add	r24, r24
    3078:	99 1f       	adc	r25, r25
    307a:	82 0f       	add	r24, r18
    307c:	93 1f       	adc	r25, r19
    307e:	9f 01       	movw	r18, r30
    3080:	28 1b       	sub	r18, r24
    3082:	39 0b       	sbc	r19, r25
    3084:	c9 01       	movw	r24, r18
    3086:	80 5d       	subi	r24, 0xD0	; 208
    3088:	da 01       	movw	r26, r20
    308a:	8c 93       	st	X, r24
    308c:	9f 01       	movw	r18, r30
    308e:	ad ec       	ldi	r26, 0xCD	; 205
    3090:	bc ec       	ldi	r27, 0xCC	; 204
    3092:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__umulhisi3>
    3096:	fc 01       	movw	r30, r24
    3098:	f6 95       	lsr	r31
    309a:	e7 95       	ror	r30
    309c:	f6 95       	lsr	r31
    309e:	e7 95       	ror	r30
    30a0:	f6 95       	lsr	r31
    30a2:	e7 95       	ror	r30
    30a4:	21 97       	sbiw	r28, 0x01	; 1
    30a6:	30 97       	sbiw	r30, 0x00	; 0
    30a8:	89 f6       	brne	.-94     	; 0x304c <integerToString+0x34>
    30aa:	df 91       	pop	r29
    30ac:	cf 91       	pop	r28
    30ae:	1f 91       	pop	r17
    30b0:	0f 91       	pop	r16
    30b2:	08 95       	ret

000030b4 <stringToFloat>:

float32_t stringToFloat(uint8_t* string)
{
    30b4:	8f 92       	push	r8
    30b6:	9f 92       	push	r9
    30b8:	af 92       	push	r10
    30ba:	bf 92       	push	r11
    30bc:	cf 92       	push	r12
    30be:	df 92       	push	r13
    30c0:	ef 92       	push	r14
    30c2:	ff 92       	push	r15
    30c4:	0f 93       	push	r16
    30c6:	1f 93       	push	r17
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29
    30cc:	ec 01       	movw	r28, r24
	uint8_t strLen = stringLength(string)-1;
    30ce:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <stringLength>
    30d2:	0f ef       	ldi	r16, 0xFF	; 255
    30d4:	08 0f       	add	r16, r24
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
    30d6:	c1 2c       	mov	r12, r1
    30d8:	d1 2c       	mov	r13, r1
    30da:	76 01       	movw	r14, r12
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    30dc:	10 e0       	ldi	r17, 0x00	; 0
    30de:	1e c0       	rjmp	.+60     	; 0x311c <stringToFloat+0x68>
	{
		if(string[u8_loopIndex] == '.')
    30e0:	fe 01       	movw	r30, r28
    30e2:	e1 0f       	add	r30, r17
    30e4:	f1 1d       	adc	r31, r1
    30e6:	60 81       	ld	r22, Z
    30e8:	6e 32       	cpi	r22, 0x2E	; 46
    30ea:	11 f4       	brne	.+4      	; 0x30f0 <stringToFloat+0x3c>
		{
			u8_loopIndex++;
    30ec:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    30ee:	18 c0       	rjmp	.+48     	; 0x3120 <stringToFloat+0x6c>
		}
		f32_num += string[u8_loopIndex] - '0';
    30f0:	70 e0       	ldi	r23, 0x00	; 0
    30f2:	60 53       	subi	r22, 0x30	; 48
    30f4:	71 09       	sbc	r23, r1
    30f6:	07 2e       	mov	r0, r23
    30f8:	00 0c       	add	r0, r0
    30fa:	88 0b       	sbc	r24, r24
    30fc:	99 0b       	sbc	r25, r25
    30fe:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__floatsisf>
    3102:	a7 01       	movw	r20, r14
    3104:	96 01       	movw	r18, r12
    3106:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__addsf3>
		f32_num *= 10;
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	40 e2       	ldi	r20, 0x20	; 32
    3110:	51 e4       	ldi	r21, 0x41	; 65
    3112:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__mulsf3>
    3116:	6b 01       	movw	r12, r22
    3118:	7c 01       	movw	r14, r24
{
	uint8_t strLen = stringLength(string)-1;
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    311a:	1f 5f       	subi	r17, 0xFF	; 255
    311c:	10 17       	cp	r17, r16
    311e:	00 f3       	brcs	.-64     	; 0x30e0 <stringToFloat+0x2c>
			break;
		}
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e2       	ldi	r20, 0x20	; 32
    3126:	51 e4       	ldi	r21, 0x41	; 65
    3128:	c7 01       	movw	r24, r14
    312a:	b6 01       	movw	r22, r12
    312c:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divsf3>
    3130:	4b 01       	movw	r8, r22
    3132:	5c 01       	movw	r10, r24
	f32_digit = 1;
    3134:	0f 2e       	mov	r0, r31
    3136:	c1 2c       	mov	r12, r1
    3138:	d1 2c       	mov	r13, r1
    313a:	f0 e8       	ldi	r31, 0x80	; 128
    313c:	ef 2e       	mov	r14, r31
    313e:	ff e3       	ldi	r31, 0x3F	; 63
    3140:	ff 2e       	mov	r15, r31
    3142:	f0 2d       	mov	r31, r0
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    3144:	24 c0       	rjmp	.+72     	; 0x318e <stringToFloat+0xda>
	{
		f32_digit/=10;
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e2       	ldi	r20, 0x20	; 32
    314c:	51 e4       	ldi	r21, 0x41	; 65
    314e:	c7 01       	movw	r24, r14
    3150:	b6 01       	movw	r22, r12
    3152:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divsf3>
    3156:	6b 01       	movw	r12, r22
    3158:	7c 01       	movw	r14, r24
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
    315a:	fe 01       	movw	r30, r28
    315c:	e1 0f       	add	r30, r17
    315e:	f1 1d       	adc	r31, r1
    3160:	60 81       	ld	r22, Z
    3162:	70 e0       	ldi	r23, 0x00	; 0
    3164:	60 53       	subi	r22, 0x30	; 48
    3166:	71 09       	sbc	r23, r1
    3168:	07 2e       	mov	r0, r23
    316a:	00 0c       	add	r0, r0
    316c:	88 0b       	sbc	r24, r24
    316e:	99 0b       	sbc	r25, r25
    3170:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__floatsisf>
    3174:	a7 01       	movw	r20, r14
    3176:	96 01       	movw	r18, r12
    3178:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__mulsf3>
    317c:	9b 01       	movw	r18, r22
    317e:	ac 01       	movw	r20, r24
    3180:	c5 01       	movw	r24, r10
    3182:	b4 01       	movw	r22, r8
    3184:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__addsf3>
    3188:	4b 01       	movw	r8, r22
    318a:	5c 01       	movw	r10, r24
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
	f32_digit = 1;
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    318c:	1f 5f       	subi	r17, 0xFF	; 255
    318e:	10 17       	cp	r17, r16
    3190:	d0 f2       	brcs	.-76     	; 0x3146 <stringToFloat+0x92>
	{
		f32_digit/=10;
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
	}
	return f32_num;
}
    3192:	c5 01       	movw	r24, r10
    3194:	b4 01       	movw	r22, r8
    3196:	df 91       	pop	r29
    3198:	cf 91       	pop	r28
    319a:	1f 91       	pop	r17
    319c:	0f 91       	pop	r16
    319e:	ff 90       	pop	r15
    31a0:	ef 90       	pop	r14
    31a2:	df 90       	pop	r13
    31a4:	cf 90       	pop	r12
    31a6:	bf 90       	pop	r11
    31a8:	af 90       	pop	r10
    31aa:	9f 90       	pop	r9
    31ac:	8f 90       	pop	r8
    31ae:	08 95       	ret

000031b0 <floatToString>:

void floatToString(float32_t f32_num, uint8_t* string)
{
    31b0:	8f 92       	push	r8
    31b2:	9f 92       	push	r9
    31b4:	af 92       	push	r10
    31b6:	bf 92       	push	r11
    31b8:	cf 92       	push	r12
    31ba:	df 92       	push	r13
    31bc:	ef 92       	push	r14
    31be:	ff 92       	push	r15
    31c0:	0f 93       	push	r16
    31c2:	1f 93       	push	r17
    31c4:	cf 93       	push	r28
    31c6:	df 93       	push	r29
    31c8:	4b 01       	movw	r8, r22
    31ca:	5c 01       	movw	r10, r24
    31cc:	8a 01       	movw	r16, r20
	uint32_t u32_num = (uint32_t)f32_num;
    31ce:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <__fixunssfsi>
    31d2:	c6 2e       	mov	r12, r22
    31d4:	d7 2e       	mov	r13, r23
    31d6:	e8 2e       	mov	r14, r24
    31d8:	f9 2e       	mov	r15, r25
    31da:	26 2f       	mov	r18, r22
    31dc:	37 2f       	mov	r19, r23
    31de:	48 2f       	mov	r20, r24
    31e0:	59 2f       	mov	r21, r25
	uint8_t u8_digitCount=0;
    31e2:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    31e4:	09 c0       	rjmp	.+18     	; 0x31f8 <floatToString+0x48>
	{
		u32_num/=10;
    31e6:	ca 01       	movw	r24, r20
    31e8:	b9 01       	movw	r22, r18
    31ea:	2a e0       	ldi	r18, 0x0A	; 10
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	40 e0       	ldi	r20, 0x00	; 0
    31f0:	50 e0       	ldi	r21, 0x00	; 0
    31f2:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__udivmodsi4>
		u8_digitCount++;
    31f6:	df 5f       	subi	r29, 0xFF	; 255
{
	uint32_t u32_num = (uint32_t)f32_num;
	uint8_t u8_digitCount=0;
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    31f8:	21 15       	cp	r18, r1
    31fa:	31 05       	cpc	r19, r1
    31fc:	41 05       	cpc	r20, r1
    31fe:	51 05       	cpc	r21, r1
    3200:	91 f7       	brne	.-28     	; 0x31e6 <floatToString+0x36>
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
    3202:	cf ef       	ldi	r28, 0xFF	; 255
    3204:	cd 0f       	add	r28, r29
	while(u32_num !=0)
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
    3206:	6c 2d       	mov	r22, r12
    3208:	7d 2d       	mov	r23, r13
    320a:	8e 2d       	mov	r24, r14
    320c:	9f 2d       	mov	r25, r15
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    320e:	14 c0       	rjmp	.+40     	; 0x3238 <floatToString+0x88>
	{
		temp = (u32_num % 10)+ '0';
    3210:	2a e0       	ldi	r18, 0x0A	; 10
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	40 e0       	ldi	r20, 0x00	; 0
    3216:	50 e0       	ldi	r21, 0x00	; 0
    3218:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__udivmodsi4>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	c0 96       	adiw	r24, 0x30	; 48
    3222:	a1 1d       	adc	r26, r1
    3224:	b1 1d       	adc	r27, r1
		string[u8_digitCount--] = temp;
    3226:	f8 01       	movw	r30, r16
    3228:	ec 0f       	add	r30, r28
    322a:	f1 1d       	adc	r31, r1
    322c:	80 83       	st	Z, r24
		u32_num /= 10;
    322e:	62 2f       	mov	r22, r18
    3230:	73 2f       	mov	r23, r19
    3232:	84 2f       	mov	r24, r20
    3234:	95 2f       	mov	r25, r21
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
	{
		temp = (u32_num % 10)+ '0';
		string[u8_digitCount--] = temp;
    3236:	c1 50       	subi	r28, 0x01	; 1
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    3238:	61 15       	cp	r22, r1
    323a:	71 05       	cpc	r23, r1
    323c:	81 05       	cpc	r24, r1
    323e:	91 05       	cpc	r25, r1
    3240:	39 f7       	brne	.-50     	; 0x3210 <floatToString+0x60>
		string[u8_digitCount--] = temp;
		u32_num /= 10;

	}
	u32_num = (uint32_t)f32_num;
	f32_num -= u32_num;
    3242:	6c 2d       	mov	r22, r12
    3244:	7d 2d       	mov	r23, r13
    3246:	8e 2d       	mov	r24, r14
    3248:	9f 2d       	mov	r25, r15
    324a:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__floatunsisf>
    324e:	9b 01       	movw	r18, r22
    3250:	ac 01       	movw	r20, r24
    3252:	c5 01       	movw	r24, r10
    3254:	b4 01       	movw	r22, r8
    3256:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__subsf3>
	u32_num = f32_num*10;
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	40 e2       	ldi	r20, 0x20	; 32
    3260:	51 e4       	ldi	r21, 0x41	; 65
    3262:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__mulsf3>
    3266:	6b 01       	movw	r12, r22
    3268:	7c 01       	movw	r14, r24
    326a:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <__fixunssfsi>
	string[u8_indexDot++] = '.';
    326e:	21 e0       	ldi	r18, 0x01	; 1
    3270:	2d 0f       	add	r18, r29
    3272:	f8 01       	movw	r30, r16
    3274:	ed 0f       	add	r30, r29
    3276:	f1 1d       	adc	r31, r1
    3278:	3e e2       	ldi	r19, 0x2E	; 46
    327a:	30 83       	st	Z, r19
	string[u8_indexDot++] = u32_num + '0';
    327c:	de 5f       	subi	r29, 0xFE	; 254
    327e:	f8 01       	movw	r30, r16
    3280:	e2 0f       	add	r30, r18
    3282:	f1 1d       	adc	r31, r1
    3284:	20 e3       	ldi	r18, 0x30	; 48
    3286:	26 0f       	add	r18, r22
    3288:	20 83       	st	Z, r18
	f32_num *=10;
	f32_num -= u32_num;
    328a:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__floatunsisf>
    328e:	9b 01       	movw	r18, r22
    3290:	ac 01       	movw	r20, r24
    3292:	c7 01       	movw	r24, r14
    3294:	b6 01       	movw	r22, r12
    3296:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__subsf3>
	u32_num = f32_num*10;
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	40 e2       	ldi	r20, 0x20	; 32
    32a0:	51 e4       	ldi	r21, 0x41	; 65
    32a2:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__mulsf3>
    32a6:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <__fixunssfsi>
	string[u8_indexDot] = u32_num + '0';
    32aa:	f8 01       	movw	r30, r16
    32ac:	ed 0f       	add	r30, r29
    32ae:	f1 1d       	adc	r31, r1
    32b0:	60 5d       	subi	r22, 0xD0	; 208
    32b2:	60 83       	st	Z, r22
    32b4:	df 91       	pop	r29
    32b6:	cf 91       	pop	r28
    32b8:	1f 91       	pop	r17
    32ba:	0f 91       	pop	r16
    32bc:	ff 90       	pop	r15
    32be:	ef 90       	pop	r14
    32c0:	df 90       	pop	r13
    32c2:	cf 90       	pop	r12
    32c4:	bf 90       	pop	r11
    32c6:	af 90       	pop	r10
    32c8:	9f 90       	pop	r9
    32ca:	8f 90       	pop	r8
    32cc:	08 95       	ret

000032ce <waveFunction>:
* Parameters (out): None
* Return value: None
* Description: Function to be called inside the timer's ISR.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
void waveFunction(void)
{
    32ce:	0f 93       	push	r16
    32d0:	1f 93       	push	r17
	/* Toggle the Pin of the PWM Channel */
	if(Dio_togglePin(SWPwm_Channels[gu8_currentPwmChannel].u8_DioChannelID) != DIO_STATUS_ERROR_OK)
    32d2:	e0 91 43 06 	lds	r30, 0x0643	; 0x800643 <gu8_currentPwmChannel>
    32d6:	f0 e0       	ldi	r31, 0x00	; 0
    32d8:	ee 0f       	add	r30, r30
    32da:	ff 1f       	adc	r31, r31
    32dc:	e4 52       	subi	r30, 0x24	; 36
    32de:	fb 4f       	sbci	r31, 0xFB	; 251
    32e0:	80 81       	ld	r24, Z
    32e2:	0e 94 09 12 	call	0x2412	; 0x2412 <Dio_togglePin>
    32e6:	81 30       	cpi	r24, 0x01	; 1
    32e8:	09 f0       	breq	.+2      	; 0x32ec <waveFunction+0x1e>
    32ea:	76 c0       	rjmp	.+236    	; 0x33d8 <waveFunction+0x10a>
		return;
	/* Check if the PWM Channel is still in Running State */
	if (gstr_ChannelsData[gu8_currentPwmChannel].enuChannelState == SWPWM_RUNNING)
    32ec:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <gu8_currentPwmChannel>
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	9c 01       	movw	r18, r24
    32f4:	22 0f       	add	r18, r18
    32f6:	33 1f       	adc	r19, r19
    32f8:	f9 01       	movw	r30, r18
    32fa:	ee 0f       	add	r30, r30
    32fc:	ff 1f       	adc	r31, r31
    32fe:	ee 0f       	add	r30, r30
    3300:	ff 1f       	adc	r31, r31
    3302:	ee 0f       	add	r30, r30
    3304:	ff 1f       	adc	r31, r31
    3306:	e2 1b       	sub	r30, r18
    3308:	f3 0b       	sbc	r31, r19
    330a:	ec 5b       	subi	r30, 0xBC	; 188
    330c:	f9 4f       	sbci	r31, 0xF9	; 249
    330e:	25 85       	ldd	r18, Z+13	; 0x0d
    3310:	22 30       	cpi	r18, 0x02	; 2
    3312:	09 f0       	breq	.+2      	; 0x3316 <waveFunction+0x48>
    3314:	61 c0       	rjmp	.+194    	; 0x33d8 <waveFunction+0x10a>
	{
		/* Start the Timer again with the new ticks assigned */
		if(GptStart_aSync(SWPwm_Channels[gu8_currentPwmChannel].u8_GptChannelID,\
    3316:	88 0f       	add	r24, r24
    3318:	99 1f       	adc	r25, r25
    331a:	fc 01       	movw	r30, r24
    331c:	ee 0f       	add	r30, r30
    331e:	ff 1f       	adc	r31, r31
    3320:	ee 0f       	add	r30, r30
    3322:	ff 1f       	adc	r31, r31
    3324:	ee 0f       	add	r30, r30
    3326:	ff 1f       	adc	r31, r31
    3328:	e8 1b       	sub	r30, r24
    332a:	f9 0b       	sbc	r31, r25
    332c:	ec 5b       	subi	r30, 0xBC	; 188
    332e:	f9 4f       	sbci	r31, 0xF9	; 249
    3330:	41 85       	ldd	r20, Z+9	; 0x09
    3332:	52 85       	ldd	r21, Z+10	; 0x0a
    3334:	63 85       	ldd	r22, Z+11	; 0x0b
    3336:	74 85       	ldd	r23, Z+12	; 0x0c
    3338:	fc 01       	movw	r30, r24
    333a:	e4 52       	subi	r30, 0x24	; 36
    333c:	fb 4f       	sbci	r31, 0xFB	; 251
    333e:	27 e6       	ldi	r18, 0x67	; 103
    3340:	39 e1       	ldi	r19, 0x19	; 25
    3342:	81 81       	ldd	r24, Z+1	; 0x01
    3344:	0e 94 da 13 	call	0x27b4	; 0x27b4 <GptStart_aSync>
    3348:	81 30       	cpi	r24, 0x01	; 1
    334a:	09 f0       	breq	.+2      	; 0x334e <waveFunction+0x80>
    334c:	45 c0       	rjmp	.+138    	; 0x33d8 <waveFunction+0x10a>
		                  gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks,\
						   waveFunction) != GPT_STATUS_ERROR_OK)	return;
		
		/* Replace the next ticks to be counted between ONTicks and OFFTicks*/
		if(gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks == gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks)
    334e:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <gu8_currentPwmChannel>
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	9c 01       	movw	r18, r24
    3356:	22 0f       	add	r18, r18
    3358:	33 1f       	adc	r19, r19
    335a:	f9 01       	movw	r30, r18
    335c:	ee 0f       	add	r30, r30
    335e:	ff 1f       	adc	r31, r31
    3360:	ee 0f       	add	r30, r30
    3362:	ff 1f       	adc	r31, r31
    3364:	ee 0f       	add	r30, r30
    3366:	ff 1f       	adc	r31, r31
    3368:	e2 1b       	sub	r30, r18
    336a:	f3 0b       	sbc	r31, r19
    336c:	ec 5b       	subi	r30, 0xBC	; 188
    336e:	f9 4f       	sbci	r31, 0xF9	; 249
    3370:	01 85       	ldd	r16, Z+9	; 0x09
    3372:	12 85       	ldd	r17, Z+10	; 0x0a
    3374:	23 85       	ldd	r18, Z+11	; 0x0b
    3376:	34 85       	ldd	r19, Z+12	; 0x0c
    3378:	45 81       	ldd	r20, Z+5	; 0x05
    337a:	56 81       	ldd	r21, Z+6	; 0x06
    337c:	67 81       	ldd	r22, Z+7	; 0x07
    337e:	70 85       	ldd	r23, Z+8	; 0x08
    3380:	04 17       	cp	r16, r20
    3382:	15 07       	cpc	r17, r21
    3384:	26 07       	cpc	r18, r22
    3386:	37 07       	cpc	r19, r23
    3388:	b1 f4       	brne	.+44     	; 0x33b6 <waveFunction+0xe8>
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_ONTicks;
    338a:	88 0f       	add	r24, r24
    338c:	99 1f       	adc	r25, r25
    338e:	fc 01       	movw	r30, r24
    3390:	ee 0f       	add	r30, r30
    3392:	ff 1f       	adc	r31, r31
    3394:	ee 0f       	add	r30, r30
    3396:	ff 1f       	adc	r31, r31
    3398:	ee 0f       	add	r30, r30
    339a:	ff 1f       	adc	r31, r31
    339c:	e8 1b       	sub	r30, r24
    339e:	f9 0b       	sbc	r31, r25
    33a0:	ec 5b       	subi	r30, 0xBC	; 188
    33a2:	f9 4f       	sbci	r31, 0xF9	; 249
    33a4:	81 81       	ldd	r24, Z+1	; 0x01
    33a6:	92 81       	ldd	r25, Z+2	; 0x02
    33a8:	a3 81       	ldd	r26, Z+3	; 0x03
    33aa:	b4 81       	ldd	r27, Z+4	; 0x04
    33ac:	81 87       	std	Z+9, r24	; 0x09
    33ae:	92 87       	std	Z+10, r25	; 0x0a
    33b0:	a3 87       	std	Z+11, r26	; 0x0b
    33b2:	b4 87       	std	Z+12, r27	; 0x0c
    33b4:	11 c0       	rjmp	.+34     	; 0x33d8 <waveFunction+0x10a>
		else
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks;
    33b6:	88 0f       	add	r24, r24
    33b8:	99 1f       	adc	r25, r25
    33ba:	fc 01       	movw	r30, r24
    33bc:	ee 0f       	add	r30, r30
    33be:	ff 1f       	adc	r31, r31
    33c0:	ee 0f       	add	r30, r30
    33c2:	ff 1f       	adc	r31, r31
    33c4:	ee 0f       	add	r30, r30
    33c6:	ff 1f       	adc	r31, r31
    33c8:	e8 1b       	sub	r30, r24
    33ca:	f9 0b       	sbc	r31, r25
    33cc:	ec 5b       	subi	r30, 0xBC	; 188
    33ce:	f9 4f       	sbci	r31, 0xF9	; 249
    33d0:	41 87       	std	Z+9, r20	; 0x09
    33d2:	52 87       	std	Z+10, r21	; 0x0a
    33d4:	63 87       	std	Z+11, r22	; 0x0b
    33d6:	74 87       	std	Z+12, r23	; 0x0c
	}
}
    33d8:	1f 91       	pop	r17
    33da:	0f 91       	pop	r16
    33dc:	08 95       	ret

000033de <SWPwm_Init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
    33de:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <genu_SWPwmModStatus>
    33e2:	81 30       	cpi	r24, 0x01	; 1
    33e4:	91 f0       	breq	.+36     	; 0x340a <SWPwm_Init+0x2c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
    33e6:	0e 94 a6 13 	call	0x274c	; 0x274c <GptInit>
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
    33ea:	81 30       	cpi	r24, 0x01	; 1
    33ec:	11 f0       	breq	.+4      	; 0x33f2 <SWPwm_Init+0x14>
    33ee:	83 30       	cpi	r24, 0x03	; 3
    33f0:	71 f4       	brne	.+28     	; 0x340e <SWPwm_Init+0x30>
		return SWPWM_STATUS_ERROR_NOK;
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    33f2:	85 e8       	ldi	r24, 0x85	; 133
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	0e 94 82 10 	call	0x2104	; 0x2104 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    33fa:	81 30       	cpi	r24, 0x01	; 1
    33fc:	11 f0       	breq	.+4      	; 0x3402 <SWPwm_Init+0x24>
    33fe:	87 30       	cpi	r24, 0x07	; 7
    3400:	41 f4       	brne	.+16     	; 0x3412 <SWPwm_Init+0x34>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <genu_SWPwmModStatus>
	return SWPWM_STATUS_ERROR_OK;
    3408:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_ERROR_NOK;
    340a:	80 e0       	ldi	r24, 0x00	; 0
    340c:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
		return SWPWM_STATUS_ERROR_NOK;
    340e:	80 e0       	ldi	r24, 0x00	; 0
    3410:	08 95       	ret
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return SWPWM_STATUS_ERROR_NOK;
    3412:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
	return SWPWM_STATUS_ERROR_OK;
}
    3414:	08 95       	ret

00003416 <SWPwm_Start>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Start(u8SWPwm_Channel_t u8_ChannelID, uint32_t u32_Freq, uint8_t u8_DutyCycle)
{
    3416:	4f 92       	push	r4
    3418:	5f 92       	push	r5
    341a:	6f 92       	push	r6
    341c:	7f 92       	push	r7
    341e:	8f 92       	push	r8
    3420:	9f 92       	push	r9
    3422:	af 92       	push	r10
    3424:	bf 92       	push	r11
    3426:	cf 92       	push	r12
    3428:	df 92       	push	r13
    342a:	ef 92       	push	r14
    342c:	ff 92       	push	r15
    342e:	0f 93       	push	r16
    3430:	1f 93       	push	r17
    3432:	cf 93       	push	r28
    3434:	df 93       	push	r29
    3436:	00 d0       	rcall	.+0      	; 0x3438 <SWPwm_Start+0x22>
    3438:	00 d0       	rcall	.+0      	; 0x343a <SWPwm_Start+0x24>
    343a:	00 d0       	rcall	.+0      	; 0x343c <SWPwm_Start+0x26>
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    3440:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <genu_SWPwmModStatus>
    3444:	91 30       	cpi	r25, 0x01	; 1
    3446:	09 f0       	breq	.+2      	; 0x344a <SWPwm_Start+0x34>
    3448:	f2 c0       	rjmp	.+484    	; 0x362e <SWPwm_Start+0x218>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    344a:	81 11       	cpse	r24, r1
    344c:	f2 c0       	rjmp	.+484    	; 0x3632 <SWPwm_Start+0x21c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
    344e:	25 36       	cpi	r18, 0x65	; 101
    3450:	08 f0       	brcs	.+2      	; 0x3454 <SWPwm_Start+0x3e>
    3452:	f1 c0       	rjmp	.+482    	; 0x3636 <SWPwm_Start+0x220>
	{
		return SWPWM_STATUS_DC_OUTRANGE;
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
    3454:	e8 2f       	mov	r30, r24
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	fe 83       	std	Y+6, r31	; 0x06
    345a:	ed 83       	std	Y+5, r30	; 0x05
    345c:	df 01       	movw	r26, r30
    345e:	aa 0f       	add	r26, r26
    3460:	bb 1f       	adc	r27, r27
    3462:	fd 01       	movw	r30, r26
    3464:	ee 0f       	add	r30, r30
    3466:	ff 1f       	adc	r31, r31
    3468:	ee 0f       	add	r30, r30
    346a:	ff 1f       	adc	r31, r31
    346c:	ee 0f       	add	r30, r30
    346e:	ff 1f       	adc	r31, r31
    3470:	ea 1b       	sub	r30, r26
    3472:	fb 0b       	sbc	r31, r27
    3474:	ec 5b       	subi	r30, 0xBC	; 188
    3476:	f9 4f       	sbci	r31, 0xF9	; 249
    3478:	95 85       	ldd	r25, Z+13	; 0x0d
    347a:	92 30       	cpi	r25, 0x02	; 2
    347c:	09 f4       	brne	.+2      	; 0x3480 <SWPwm_Start+0x6a>
    347e:	dd c0       	rjmp	.+442    	; 0x363a <SWPwm_Start+0x224>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
    3480:	22 23       	and	r18, r18
    3482:	09 f4       	brne	.+2      	; 0x3486 <SWPwm_Start+0x70>
    3484:	dc c0       	rjmp	.+440    	; 0x363e <SWPwm_Start+0x228>
    3486:	12 2f       	mov	r17, r18
    3488:	c8 2e       	mov	r12, r24
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
	}else if(u8_DutyCycle == 100)
    348a:	24 36       	cpi	r18, 0x64	; 100
    348c:	61 f4       	brne	.+24     	; 0x34a6 <SWPwm_Start+0x90>
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    348e:	fd 01       	movw	r30, r26
    3490:	e4 52       	subi	r30, 0x24	; 36
    3492:	fb 4f       	sbci	r31, 0xFB	; 251
    3494:	61 e0       	ldi	r22, 0x01	; 1
    3496:	80 81       	ld	r24, Z
    3498:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    349c:	81 30       	cpi	r24, 0x01	; 1
    349e:	09 f4       	brne	.+2      	; 0x34a2 <SWPwm_Start+0x8c>
    34a0:	d0 c0       	rjmp	.+416    	; 0x3642 <SWPwm_Start+0x22c>
			return SWPWM_STATUS_ERROR_NOK;
    34a2:	80 e0       	ldi	r24, 0x00	; 0
    34a4:	d5 c0       	rjmp	.+426    	; 0x3650 <SWPwm_Start+0x23a>
		return SWPWM_STATUS_ERROR_OK;
	}
	
	float32_t f32_wavePeriodTime = (float32_t)1 / u32_Freq;					/* The Periodic Time for the Generated Pulse in Seconds */
    34a6:	cb 01       	movw	r24, r22
    34a8:	ba 01       	movw	r22, r20
    34aa:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__floatunsisf>
    34ae:	9b 01       	movw	r18, r22
    34b0:	ac 01       	movw	r20, r24
    34b2:	60 e0       	ldi	r22, 0x00	; 0
    34b4:	70 e0       	ldi	r23, 0x00	; 0
    34b6:	80 e8       	ldi	r24, 0x80	; 128
    34b8:	9f e3       	ldi	r25, 0x3F	; 63
    34ba:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divsf3>
    34be:	4b 01       	movw	r8, r22
    34c0:	5c 01       	movw	r10, r24
	float32_t f32_waveONTime = (f32_wavePeriodTime*u8_DutyCycle) / 100;		/* The HIGH Level Time in Seconds */
    34c2:	61 2f       	mov	r22, r17
    34c4:	70 e0       	ldi	r23, 0x00	; 0
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__floatsisf>
    34ce:	a5 01       	movw	r20, r10
    34d0:	94 01       	movw	r18, r8
    34d2:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__mulsf3>
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	48 ec       	ldi	r20, 0xC8	; 200
    34dc:	52 e4       	ldi	r21, 0x42	; 66
    34de:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divsf3>
    34e2:	2b 01       	movw	r4, r22
    34e4:	3c 01       	movw	r6, r24
	float32_t f32_waveOFFTime = f32_wavePeriodTime - f32_waveONTime;		/* The LOW Level Time in Seconds */
    34e6:	9b 01       	movw	r18, r22
    34e8:	ac 01       	movw	r20, r24
    34ea:	c5 01       	movw	r24, r10
    34ec:	b4 01       	movw	r22, r8
    34ee:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__subsf3>
    34f2:	4b 01       	movw	r8, r22
    34f4:	5c 01       	movw	r10, r24
	float32_t f32_systemPeriodTime = 0.0;
	uint16_t  u16_prescalerValue = 0;
	
	/* Get the Prescaler Value of the used Timer Channel */
	switch(Timers_Configurations[SWPwm_Channels[u8_ChannelID].u8_GptChannelID].enuClock_Src)
    34f6:	ed 81       	ldd	r30, Y+5	; 0x05
    34f8:	fe 81       	ldd	r31, Y+6	; 0x06
    34fa:	ee 0f       	add	r30, r30
    34fc:	ff 1f       	adc	r31, r31
    34fe:	e4 52       	subi	r30, 0x24	; 36
    3500:	fb 4f       	sbci	r31, 0xFB	; 251
    3502:	d1 80       	ldd	r13, Z+1	; 0x01
    3504:	8d 2d       	mov	r24, r13
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	fc 01       	movw	r30, r24
    350a:	ee 0f       	add	r30, r30
    350c:	ff 1f       	adc	r31, r31
    350e:	8e 0f       	add	r24, r30
    3510:	9f 1f       	adc	r25, r31
    3512:	fc 01       	movw	r30, r24
    3514:	e7 52       	subi	r30, 0x27	; 39
    3516:	fb 4f       	sbci	r31, 0xFB	; 251
    3518:	e1 81       	ldd	r30, Z+1	; 0x01
    351a:	8e 2f       	mov	r24, r30
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	fc 01       	movw	r30, r24
    3520:	31 97       	sbiw	r30, 0x01	; 1
    3522:	e7 30       	cpi	r30, 0x07	; 7
    3524:	f1 05       	cpc	r31, r1
    3526:	08 f0       	brcs	.+2      	; 0x352a <SWPwm_Start+0x114>
    3528:	8e c0       	rjmp	.+284    	; 0x3646 <SWPwm_Start+0x230>
    352a:	e6 5d       	subi	r30, 0xD6	; 214
    352c:	ff 4f       	sbci	r31, 0xFF	; 255
    352e:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__tablejump2__>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
    3532:	61 e0       	ldi	r22, 0x01	; 1
    3534:	70 e0       	ldi	r23, 0x00	; 0
    3536:	0b c0       	rjmp	.+22     	; 0x354e <SWPwm_Start+0x138>
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
			break;
		case GPT_CLK_SRC_PRSCLR_64:
			u16_prescalerValue = 64;
    3538:	60 e4       	ldi	r22, 0x40	; 64
    353a:	70 e0       	ldi	r23, 0x00	; 0
			break;
    353c:	08 c0       	rjmp	.+16     	; 0x354e <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_256:
			u16_prescalerValue = 256;
    353e:	60 e0       	ldi	r22, 0x00	; 0
    3540:	71 e0       	ldi	r23, 0x01	; 1
			break;
    3542:	05 c0       	rjmp	.+10     	; 0x354e <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_1024:
			u16_prescalerValue = 1024;
    3544:	60 e0       	ldi	r22, 0x00	; 0
    3546:	74 e0       	ldi	r23, 0x04	; 4
			break;
    3548:	02 c0       	rjmp	.+4      	; 0x354e <SWPwm_Start+0x138>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
    354a:	68 e0       	ldi	r22, 0x08	; 8
    354c:	70 e0       	ldi	r23, 0x00	; 0
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
	}
	
	f32_systemPeriodTime = (float32_t)u16_prescalerValue/SYS_CLOCK_FREQUENCY;				/* The Controllers Periodic Time in seconds based on the System Clock Frequency */
    354e:	80 e0       	ldi	r24, 0x00	; 0
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__floatunsisf>
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	34 e2       	ldi	r19, 0x24	; 36
    355a:	44 e7       	ldi	r20, 0x74	; 116
    355c:	59 e4       	ldi	r21, 0x49	; 73
    355e:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divsf3>
    3562:	69 83       	std	Y+1, r22	; 0x01
    3564:	7a 83       	std	Y+2, r23	; 0x02
    3566:	8b 83       	std	Y+3, r24	; 0x03
    3568:	9c 83       	std	Y+4, r25	; 0x04
	gu8_currentPwmChannel = u8_ChannelID;
    356a:	c0 92 43 06 	sts	0x0643, r12	; 0x800643 <gu8_currentPwmChannel>
	gstr_ChannelsData[u8_ChannelID].u32_ONTicks = f32_waveONTime/f32_systemPeriodTime;		/* The HIGH Level Time in Ticks */
    356e:	9b 01       	movw	r18, r22
    3570:	ac 01       	movw	r20, r24
    3572:	c3 01       	movw	r24, r6
    3574:	b2 01       	movw	r22, r4
    3576:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divsf3>
    357a:	ed 80       	ldd	r14, Y+5	; 0x05
    357c:	fe 80       	ldd	r15, Y+6	; 0x06
    357e:	ee 0c       	add	r14, r14
    3580:	ff 1c       	adc	r15, r15
    3582:	87 01       	movw	r16, r14
    3584:	00 0f       	add	r16, r16
    3586:	11 1f       	adc	r17, r17
    3588:	00 0f       	add	r16, r16
    358a:	11 1f       	adc	r17, r17
    358c:	00 0f       	add	r16, r16
    358e:	11 1f       	adc	r17, r17
    3590:	0e 19       	sub	r16, r14
    3592:	1f 09       	sbc	r17, r15
    3594:	0c 5b       	subi	r16, 0xBC	; 188
    3596:	19 4f       	sbci	r17, 0xF9	; 249
    3598:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <__fixunssfsi>
    359c:	f8 01       	movw	r30, r16
    359e:	61 83       	std	Z+1, r22	; 0x01
    35a0:	72 83       	std	Z+2, r23	; 0x02
    35a2:	83 83       	std	Z+3, r24	; 0x03
    35a4:	94 83       	std	Z+4, r25	; 0x04
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
    35a6:	29 81       	ldd	r18, Y+1	; 0x01
    35a8:	3a 81       	ldd	r19, Y+2	; 0x02
    35aa:	4b 81       	ldd	r20, Y+3	; 0x03
    35ac:	5c 81       	ldd	r21, Y+4	; 0x04
    35ae:	c5 01       	movw	r24, r10
    35b0:	b4 01       	movw	r22, r8
    35b2:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divsf3>
    35b6:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <__fixunssfsi>
    35ba:	f8 01       	movw	r30, r16
    35bc:	65 83       	std	Z+5, r22	; 0x05
    35be:	76 83       	std	Z+6, r23	; 0x06
    35c0:	87 83       	std	Z+7, r24	; 0x07
    35c2:	90 87       	std	Z+8, r25	; 0x08
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;
    35c4:	c0 82       	st	Z, r12

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    35c6:	f7 01       	movw	r30, r14
    35c8:	e4 52       	subi	r30, 0x24	; 36
    35ca:	fb 4f       	sbci	r31, 0xFB	; 251
    35cc:	61 e0       	ldi	r22, 0x01	; 1
    35ce:	80 81       	ld	r24, Z
    35d0:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    35d4:	81 30       	cpi	r24, 0x01	; 1
    35d6:	c9 f5       	brne	.+114    	; 0x364a <SWPwm_Start+0x234>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
    35d8:	8e e0       	ldi	r24, 0x0E	; 14
    35da:	2d 81       	ldd	r18, Y+5	; 0x05
    35dc:	3e 81       	ldd	r19, Y+6	; 0x06
    35de:	82 9f       	mul	r24, r18
    35e0:	f0 01       	movw	r30, r0
    35e2:	83 9f       	mul	r24, r19
    35e4:	f0 0d       	add	r31, r0
    35e6:	11 24       	eor	r1, r1
    35e8:	ec 5b       	subi	r30, 0xBC	; 188
    35ea:	f9 4f       	sbci	r31, 0xF9	; 249
    35ec:	41 81       	ldd	r20, Z+1	; 0x01
    35ee:	52 81       	ldd	r21, Z+2	; 0x02
    35f0:	63 81       	ldd	r22, Z+3	; 0x03
    35f2:	74 81       	ldd	r23, Z+4	; 0x04
    35f4:	27 e6       	ldi	r18, 0x67	; 103
    35f6:	39 e1       	ldi	r19, 0x19	; 25
    35f8:	8d 2d       	mov	r24, r13
    35fa:	0e 94 da 13 	call	0x27b4	; 0x27b4 <GptStart_aSync>
    35fe:	81 30       	cpi	r24, 0x01	; 1
    3600:	31 f5       	brne	.+76     	; 0x364e <SWPwm_Start+0x238>
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
	
	/* Assign the Next Ticks to be counted by the Asynchronous Timer */
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
    3602:	8e e0       	ldi	r24, 0x0E	; 14
    3604:	2d 81       	ldd	r18, Y+5	; 0x05
    3606:	3e 81       	ldd	r19, Y+6	; 0x06
    3608:	82 9f       	mul	r24, r18
    360a:	f0 01       	movw	r30, r0
    360c:	83 9f       	mul	r24, r19
    360e:	f0 0d       	add	r31, r0
    3610:	11 24       	eor	r1, r1
    3612:	ec 5b       	subi	r30, 0xBC	; 188
    3614:	f9 4f       	sbci	r31, 0xF9	; 249
    3616:	85 81       	ldd	r24, Z+5	; 0x05
    3618:	96 81       	ldd	r25, Z+6	; 0x06
    361a:	a7 81       	ldd	r26, Z+7	; 0x07
    361c:	b0 85       	ldd	r27, Z+8	; 0x08
    361e:	81 87       	std	Z+9, r24	; 0x09
    3620:	92 87       	std	Z+10, r25	; 0x0a
    3622:	a3 87       	std	Z+11, r26	; 0x0b
    3624:	b4 87       	std	Z+12, r27	; 0x0c
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;
    3626:	82 e0       	ldi	r24, 0x02	; 2
    3628:	85 87       	std	Z+13, r24	; 0x0d

	return SWPWM_STATUS_ERROR_OK;
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	11 c0       	rjmp	.+34     	; 0x3650 <SWPwm_Start+0x23a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    362e:	82 e0       	ldi	r24, 0x02	; 2
    3630:	0f c0       	rjmp	.+30     	; 0x3650 <SWPwm_Start+0x23a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    3632:	83 e0       	ldi	r24, 0x03	; 3
    3634:	0d c0       	rjmp	.+26     	; 0x3650 <SWPwm_Start+0x23a>
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
	{
		return SWPWM_STATUS_DC_OUTRANGE;
    3636:	84 e0       	ldi	r24, 0x04	; 4
    3638:	0b c0       	rjmp	.+22     	; 0x3650 <SWPwm_Start+0x23a>
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    363a:	85 e0       	ldi	r24, 0x05	; 5
    363c:	09 c0       	rjmp	.+18     	; 0x3650 <SWPwm_Start+0x23a>
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	07 c0       	rjmp	.+14     	; 0x3650 <SWPwm_Start+0x23a>
	}else if(u8_DutyCycle == 100)
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return SWPWM_STATUS_ERROR_NOK;
		return SWPWM_STATUS_ERROR_OK;
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	05 c0       	rjmp	.+10     	; 0x3650 <SWPwm_Start+0x23a>
			break;
		case GPT_CLK_SRC_PRSCLR_EXT_RISE:
			u16_prescalerValue = 1;
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
    3646:	80 e0       	ldi	r24, 0x00	; 0
    3648:	03 c0       	rjmp	.+6      	; 0x3650 <SWPwm_Start+0x23a>
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    364a:	80 e0       	ldi	r24, 0x00	; 0
    364c:	01 c0       	rjmp	.+2      	; 0x3650 <SWPwm_Start+0x23a>
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
    364e:	80 e0       	ldi	r24, 0x00	; 0
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;

	return SWPWM_STATUS_ERROR_OK;
}
    3650:	26 96       	adiw	r28, 0x06	; 6
    3652:	0f b6       	in	r0, 0x3f	; 63
    3654:	f8 94       	cli
    3656:	de bf       	out	0x3e, r29	; 62
    3658:	0f be       	out	0x3f, r0	; 63
    365a:	cd bf       	out	0x3d, r28	; 61
    365c:	df 91       	pop	r29
    365e:	cf 91       	pop	r28
    3660:	1f 91       	pop	r17
    3662:	0f 91       	pop	r16
    3664:	ff 90       	pop	r15
    3666:	ef 90       	pop	r14
    3668:	df 90       	pop	r13
    366a:	cf 90       	pop	r12
    366c:	bf 90       	pop	r11
    366e:	af 90       	pop	r10
    3670:	9f 90       	pop	r9
    3672:	8f 90       	pop	r8
    3674:	7f 90       	pop	r7
    3676:	6f 90       	pop	r6
    3678:	5f 90       	pop	r5
    367a:	4f 90       	pop	r4
    367c:	08 95       	ret

0000367e <SWPwm_Stop>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Stop(u8SWPwm_Channel_t u8_ChannelID)
{
    367e:	cf 93       	push	r28
    3680:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    3682:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <genu_SWPwmModStatus>
    3686:	91 30       	cpi	r25, 0x01	; 1
    3688:	b1 f5       	brne	.+108    	; 0x36f6 <SWPwm_Stop+0x78>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    368a:	81 11       	cpse	r24, r1
    368c:	36 c0       	rjmp	.+108    	; 0x36fa <SWPwm_Stop+0x7c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
    368e:	c8 2f       	mov	r28, r24
    3690:	d0 e0       	ldi	r29, 0x00	; 0
    3692:	ce 01       	movw	r24, r28
    3694:	88 0f       	add	r24, r24
    3696:	99 1f       	adc	r25, r25
    3698:	fc 01       	movw	r30, r24
    369a:	ee 0f       	add	r30, r30
    369c:	ff 1f       	adc	r31, r31
    369e:	ee 0f       	add	r30, r30
    36a0:	ff 1f       	adc	r31, r31
    36a2:	ee 0f       	add	r30, r30
    36a4:	ff 1f       	adc	r31, r31
    36a6:	e8 1b       	sub	r30, r24
    36a8:	f9 0b       	sbc	r31, r25
    36aa:	ec 5b       	subi	r30, 0xBC	; 188
    36ac:	f9 4f       	sbci	r31, 0xF9	; 249
    36ae:	85 85       	ldd	r24, Z+13	; 0x0d
    36b0:	82 30       	cpi	r24, 0x02	; 2
    36b2:	29 f5       	brne	.+74     	; 0x36fe <SWPwm_Stop+0x80>
	
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
    36b4:	fe 01       	movw	r30, r28
    36b6:	ee 0f       	add	r30, r30
    36b8:	ff 1f       	adc	r31, r31
    36ba:	e4 52       	subi	r30, 0x24	; 36
    36bc:	fb 4f       	sbci	r31, 0xFB	; 251
    36be:	60 e0       	ldi	r22, 0x00	; 0
    36c0:	80 81       	ld	r24, Z
    36c2:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Dio_writePin>
    36c6:	81 30       	cpi	r24, 0x01	; 1
    36c8:	e1 f4       	brne	.+56     	; 0x3702 <SWPwm_Stop+0x84>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the State of the PWM Channel to STOPPED */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
    36ca:	8e e0       	ldi	r24, 0x0E	; 14
    36cc:	8c 9f       	mul	r24, r28
    36ce:	f0 01       	movw	r30, r0
    36d0:	8d 9f       	mul	r24, r29
    36d2:	f0 0d       	add	r31, r0
    36d4:	11 24       	eor	r1, r1
    36d6:	ec 5b       	subi	r30, 0xBC	; 188
    36d8:	f9 4f       	sbci	r31, 0xF9	; 249
    36da:	83 e0       	ldi	r24, 0x03	; 3
    36dc:	85 87       	std	Z+13, r24	; 0x0d
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
    36de:	fe 01       	movw	r30, r28
    36e0:	ee 0f       	add	r30, r30
    36e2:	ff 1f       	adc	r31, r31
    36e4:	e4 52       	subi	r30, 0x24	; 36
    36e6:	fb 4f       	sbci	r31, 0xFB	; 251
    36e8:	81 81       	ldd	r24, Z+1	; 0x01
    36ea:	0e 94 39 14 	call	0x2872	; 0x2872 <GptStop>
    36ee:	81 30       	cpi	r24, 0x01	; 1
    36f0:	51 f0       	breq	.+20     	; 0x3706 <SWPwm_Stop+0x88>
		return SWPWM_STATUS_ERROR_NOK;
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	09 c0       	rjmp	.+18     	; 0x3708 <SWPwm_Stop+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    36f6:	82 e0       	ldi	r24, 0x02	; 2
    36f8:	07 c0       	rjmp	.+14     	; 0x3708 <SWPwm_Stop+0x8a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    36fa:	83 e0       	ldi	r24, 0x03	; 3
    36fc:	05 c0       	rjmp	.+10     	; 0x3708 <SWPwm_Stop+0x8a>
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    36fe:	85 e0       	ldi	r24, 0x05	; 5
    3700:	03 c0       	rjmp	.+6      	; 0x3708 <SWPwm_Stop+0x8a>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	01 c0       	rjmp	.+2      	; 0x3708 <SWPwm_Stop+0x8a>
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
	
	return SWPWM_STATUS_ERROR_OK;
    3706:	81 e0       	ldi	r24, 0x01	; 1
}
    3708:	df 91       	pop	r29
    370a:	cf 91       	pop	r28
    370c:	08 95       	ret

0000370e <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    370e:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <u8_Uart_Status>
    3712:	81 30       	cpi	r24, 0x01	; 1
    3714:	81 f0       	breq	.+32     	; 0x3736 <Uart_init+0x28>
    3716:	10 bc       	out	0x20, r1	; 32
    3718:	87 e6       	ldi	r24, 0x67	; 103
    371a:	89 b9       	out	0x09, r24	; 9
    371c:	82 e0       	ldi	r24, 0x02	; 2
    371e:	8b b9       	out	0x0b, r24	; 11
    3720:	88 e1       	ldi	r24, 0x18	; 24
    3722:	8a b9       	out	0x0a, r24	; 10
    3724:	80 e8       	ldi	r24, 0x80	; 128
    3726:	80 bd       	out	0x20, r24	; 32
    3728:	80 b5       	in	r24, 0x20	; 32
    372a:	86 68       	ori	r24, 0x86	; 134
    372c:	80 bd       	out	0x20, r24	; 32
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	80 93 52 06 	sts	0x0652, r24	; 0x800652 <u8_Uart_Status>
    3734:	08 95       	ret
    3736:	87 e0       	ldi	r24, 0x07	; 7
    3738:	08 95       	ret

0000373a <Uart_sendByte>:
    373a:	90 91 52 06 	lds	r25, 0x0652	; 0x800652 <u8_Uart_Status>
    373e:	99 23       	and	r25, r25
    3740:	29 f0       	breq	.+10     	; 0x374c <Uart_sendByte+0x12>
    3742:	5d 9b       	sbis	0x0b, 5	; 11
    3744:	fe cf       	rjmp	.-4      	; 0x3742 <Uart_sendByte+0x8>
    3746:	8c b9       	out	0x0c, r24	; 12
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	08 95       	ret
    374c:	86 e0       	ldi	r24, 0x06	; 6
    374e:	08 95       	ret

00003750 <Uart_sendPacket>:
    3750:	ef 92       	push	r14
    3752:	ff 92       	push	r15
    3754:	0f 93       	push	r16
    3756:	1f 93       	push	r17
    3758:	cf 93       	push	r28
    375a:	df 93       	push	r29
    375c:	20 91 52 06 	lds	r18, 0x0652	; 0x800652 <u8_Uart_Status>
    3760:	22 23       	and	r18, r18
    3762:	99 f0       	breq	.+38     	; 0x378a <Uart_sendPacket+0x3a>
    3764:	8b 01       	movw	r16, r22
    3766:	7c 01       	movw	r14, r24
    3768:	c0 e0       	ldi	r28, 0x00	; 0
    376a:	d0 e0       	ldi	r29, 0x00	; 0
    376c:	09 c0       	rjmp	.+18     	; 0x3780 <Uart_sendPacket+0x30>
    376e:	f7 01       	movw	r30, r14
    3770:	ec 0f       	add	r30, r28
    3772:	fd 1f       	adc	r31, r29
    3774:	80 81       	ld	r24, Z
    3776:	0e 94 9d 1b 	call	0x373a	; 0x373a <Uart_sendByte>
    377a:	81 30       	cpi	r24, 0x01	; 1
    377c:	41 f4       	brne	.+16     	; 0x378e <Uart_sendPacket+0x3e>
    377e:	21 96       	adiw	r28, 0x01	; 1
    3780:	c0 17       	cp	r28, r16
    3782:	d1 07       	cpc	r29, r17
    3784:	a0 f3       	brcs	.-24     	; 0x376e <Uart_sendPacket+0x1e>
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	03 c0       	rjmp	.+6      	; 0x3790 <Uart_sendPacket+0x40>
    378a:	86 e0       	ldi	r24, 0x06	; 6
    378c:	01 c0       	rjmp	.+2      	; 0x3790 <Uart_sendPacket+0x40>
    378e:	80 e0       	ldi	r24, 0x00	; 0
    3790:	df 91       	pop	r29
    3792:	cf 91       	pop	r28
    3794:	1f 91       	pop	r17
    3796:	0f 91       	pop	r16
    3798:	ff 90       	pop	r15
    379a:	ef 90       	pop	r14
    379c:	08 95       	ret

0000379e <Uart_EnableNotification_RXC>:
    379e:	9c 01       	movw	r18, r24
    37a0:	90 91 52 06 	lds	r25, 0x0652	; 0x800652 <u8_Uart_Status>
    37a4:	99 23       	and	r25, r25
    37a6:	61 f0       	breq	.+24     	; 0x37c0 <Uart_EnableNotification_RXC+0x22>
    37a8:	21 15       	cp	r18, r1
    37aa:	31 05       	cpc	r19, r1
    37ac:	59 f0       	breq	.+22     	; 0x37c4 <Uart_EnableNotification_RXC+0x26>
    37ae:	8a b1       	in	r24, 0x0a	; 10
    37b0:	80 68       	ori	r24, 0x80	; 128
    37b2:	8a b9       	out	0x0a, r24	; 10
    37b4:	30 93 56 06 	sts	0x0656, r19	; 0x800656 <Uart_RXC_CallBackPtr+0x1>
    37b8:	20 93 55 06 	sts	0x0655, r18	; 0x800655 <Uart_RXC_CallBackPtr>
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	08 95       	ret
    37c0:	86 e0       	ldi	r24, 0x06	; 6
    37c2:	08 95       	ret
    37c4:	85 e0       	ldi	r24, 0x05	; 5
    37c6:	08 95       	ret

000037c8 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    37c8:	8c b1       	in	r24, 0x0c	; 12
}
    37ca:	08 95       	ret

000037cc <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    37cc:	1f 92       	push	r1
    37ce:	0f 92       	push	r0
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	0f 92       	push	r0
    37d4:	11 24       	eor	r1, r1
    37d6:	2f 93       	push	r18
    37d8:	3f 93       	push	r19
    37da:	4f 93       	push	r20
    37dc:	5f 93       	push	r21
    37de:	6f 93       	push	r22
    37e0:	7f 93       	push	r23
    37e2:	8f 93       	push	r24
    37e4:	9f 93       	push	r25
    37e6:	af 93       	push	r26
    37e8:	bf 93       	push	r27
    37ea:	ef 93       	push	r30
    37ec:	ff 93       	push	r31
    37ee:	e0 91 57 06 	lds	r30, 0x0657	; 0x800657 <Uart_TXC_CallBackPtr>
    37f2:	f0 91 58 06 	lds	r31, 0x0658	; 0x800658 <Uart_TXC_CallBackPtr+0x1>
    37f6:	09 95       	icall
    37f8:	ff 91       	pop	r31
    37fa:	ef 91       	pop	r30
    37fc:	bf 91       	pop	r27
    37fe:	af 91       	pop	r26
    3800:	9f 91       	pop	r25
    3802:	8f 91       	pop	r24
    3804:	7f 91       	pop	r23
    3806:	6f 91       	pop	r22
    3808:	5f 91       	pop	r21
    380a:	4f 91       	pop	r20
    380c:	3f 91       	pop	r19
    380e:	2f 91       	pop	r18
    3810:	0f 90       	pop	r0
    3812:	0f be       	out	0x3f, r0	; 63
    3814:	0f 90       	pop	r0
    3816:	1f 90       	pop	r1
    3818:	18 95       	reti

0000381a <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    381a:	1f 92       	push	r1
    381c:	0f 92       	push	r0
    381e:	0f b6       	in	r0, 0x3f	; 63
    3820:	0f 92       	push	r0
    3822:	11 24       	eor	r1, r1
    3824:	2f 93       	push	r18
    3826:	3f 93       	push	r19
    3828:	4f 93       	push	r20
    382a:	5f 93       	push	r21
    382c:	6f 93       	push	r22
    382e:	7f 93       	push	r23
    3830:	8f 93       	push	r24
    3832:	9f 93       	push	r25
    3834:	af 93       	push	r26
    3836:	bf 93       	push	r27
    3838:	ef 93       	push	r30
    383a:	ff 93       	push	r31
    383c:	e0 91 55 06 	lds	r30, 0x0655	; 0x800655 <Uart_RXC_CallBackPtr>
    3840:	f0 91 56 06 	lds	r31, 0x0656	; 0x800656 <Uart_RXC_CallBackPtr+0x1>
    3844:	09 95       	icall
    3846:	ff 91       	pop	r31
    3848:	ef 91       	pop	r30
    384a:	bf 91       	pop	r27
    384c:	af 91       	pop	r26
    384e:	9f 91       	pop	r25
    3850:	8f 91       	pop	r24
    3852:	7f 91       	pop	r23
    3854:	6f 91       	pop	r22
    3856:	5f 91       	pop	r21
    3858:	4f 91       	pop	r20
    385a:	3f 91       	pop	r19
    385c:	2f 91       	pop	r18
    385e:	0f 90       	pop	r0
    3860:	0f be       	out	0x3f, r0	; 63
    3862:	0f 90       	pop	r0
    3864:	1f 90       	pop	r1
    3866:	18 95       	reti

00003868 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    3868:	1f 92       	push	r1
    386a:	0f 92       	push	r0
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	0f 92       	push	r0
    3870:	11 24       	eor	r1, r1
    3872:	2f 93       	push	r18
    3874:	3f 93       	push	r19
    3876:	4f 93       	push	r20
    3878:	5f 93       	push	r21
    387a:	6f 93       	push	r22
    387c:	7f 93       	push	r23
    387e:	8f 93       	push	r24
    3880:	9f 93       	push	r25
    3882:	af 93       	push	r26
    3884:	bf 93       	push	r27
    3886:	ef 93       	push	r30
    3888:	ff 93       	push	r31
    388a:	e0 91 53 06 	lds	r30, 0x0653	; 0x800653 <Uart_UDRE_CallBackPtr>
    388e:	f0 91 54 06 	lds	r31, 0x0654	; 0x800654 <Uart_UDRE_CallBackPtr+0x1>
    3892:	09 95       	icall
    3894:	ff 91       	pop	r31
    3896:	ef 91       	pop	r30
    3898:	bf 91       	pop	r27
    389a:	af 91       	pop	r26
    389c:	9f 91       	pop	r25
    389e:	8f 91       	pop	r24
    38a0:	7f 91       	pop	r23
    38a2:	6f 91       	pop	r22
    38a4:	5f 91       	pop	r21
    38a6:	4f 91       	pop	r20
    38a8:	3f 91       	pop	r19
    38aa:	2f 91       	pop	r18
    38ac:	0f 90       	pop	r0
    38ae:	0f be       	out	0x3f, r0	; 63
    38b0:	0f 90       	pop	r0
    38b2:	1f 90       	pop	r1
    38b4:	18 95       	reti

000038b6 <__subsf3>:
    38b6:	50 58       	subi	r21, 0x80	; 128

000038b8 <__addsf3>:
    38b8:	bb 27       	eor	r27, r27
    38ba:	aa 27       	eor	r26, r26
    38bc:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__addsf3x>
    38c0:	0c 94 e6 1d 	jmp	0x3bcc	; 0x3bcc <__fp_round>
    38c4:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__fp_pscA>
    38c8:	38 f0       	brcs	.+14     	; 0x38d8 <__addsf3+0x20>
    38ca:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <__fp_pscB>
    38ce:	20 f0       	brcs	.+8      	; 0x38d8 <__addsf3+0x20>
    38d0:	39 f4       	brne	.+14     	; 0x38e0 <__addsf3+0x28>
    38d2:	9f 3f       	cpi	r25, 0xFF	; 255
    38d4:	19 f4       	brne	.+6      	; 0x38dc <__addsf3+0x24>
    38d6:	26 f4       	brtc	.+8      	; 0x38e0 <__addsf3+0x28>
    38d8:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <__fp_nan>
    38dc:	0e f4       	brtc	.+2      	; 0x38e0 <__addsf3+0x28>
    38de:	e0 95       	com	r30
    38e0:	e7 fb       	bst	r30, 7
    38e2:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__fp_inf>

000038e6 <__addsf3x>:
    38e6:	e9 2f       	mov	r30, r25
    38e8:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <__fp_split3>
    38ec:	58 f3       	brcs	.-42     	; 0x38c4 <__addsf3+0xc>
    38ee:	ba 17       	cp	r27, r26
    38f0:	62 07       	cpc	r22, r18
    38f2:	73 07       	cpc	r23, r19
    38f4:	84 07       	cpc	r24, r20
    38f6:	95 07       	cpc	r25, r21
    38f8:	20 f0       	brcs	.+8      	; 0x3902 <__addsf3x+0x1c>
    38fa:	79 f4       	brne	.+30     	; 0x391a <__addsf3x+0x34>
    38fc:	a6 f5       	brtc	.+104    	; 0x3966 <__addsf3x+0x80>
    38fe:	0c 94 19 1e 	jmp	0x3c32	; 0x3c32 <__fp_zero>
    3902:	0e f4       	brtc	.+2      	; 0x3906 <__addsf3x+0x20>
    3904:	e0 95       	com	r30
    3906:	0b 2e       	mov	r0, r27
    3908:	ba 2f       	mov	r27, r26
    390a:	a0 2d       	mov	r26, r0
    390c:	0b 01       	movw	r0, r22
    390e:	b9 01       	movw	r22, r18
    3910:	90 01       	movw	r18, r0
    3912:	0c 01       	movw	r0, r24
    3914:	ca 01       	movw	r24, r20
    3916:	a0 01       	movw	r20, r0
    3918:	11 24       	eor	r1, r1
    391a:	ff 27       	eor	r31, r31
    391c:	59 1b       	sub	r21, r25
    391e:	99 f0       	breq	.+38     	; 0x3946 <__addsf3x+0x60>
    3920:	59 3f       	cpi	r21, 0xF9	; 249
    3922:	50 f4       	brcc	.+20     	; 0x3938 <__addsf3x+0x52>
    3924:	50 3e       	cpi	r21, 0xE0	; 224
    3926:	68 f1       	brcs	.+90     	; 0x3982 <__addsf3x+0x9c>
    3928:	1a 16       	cp	r1, r26
    392a:	f0 40       	sbci	r31, 0x00	; 0
    392c:	a2 2f       	mov	r26, r18
    392e:	23 2f       	mov	r18, r19
    3930:	34 2f       	mov	r19, r20
    3932:	44 27       	eor	r20, r20
    3934:	58 5f       	subi	r21, 0xF8	; 248
    3936:	f3 cf       	rjmp	.-26     	; 0x391e <__addsf3x+0x38>
    3938:	46 95       	lsr	r20
    393a:	37 95       	ror	r19
    393c:	27 95       	ror	r18
    393e:	a7 95       	ror	r26
    3940:	f0 40       	sbci	r31, 0x00	; 0
    3942:	53 95       	inc	r21
    3944:	c9 f7       	brne	.-14     	; 0x3938 <__addsf3x+0x52>
    3946:	7e f4       	brtc	.+30     	; 0x3966 <__addsf3x+0x80>
    3948:	1f 16       	cp	r1, r31
    394a:	ba 0b       	sbc	r27, r26
    394c:	62 0b       	sbc	r22, r18
    394e:	73 0b       	sbc	r23, r19
    3950:	84 0b       	sbc	r24, r20
    3952:	ba f0       	brmi	.+46     	; 0x3982 <__addsf3x+0x9c>
    3954:	91 50       	subi	r25, 0x01	; 1
    3956:	a1 f0       	breq	.+40     	; 0x3980 <__addsf3x+0x9a>
    3958:	ff 0f       	add	r31, r31
    395a:	bb 1f       	adc	r27, r27
    395c:	66 1f       	adc	r22, r22
    395e:	77 1f       	adc	r23, r23
    3960:	88 1f       	adc	r24, r24
    3962:	c2 f7       	brpl	.-16     	; 0x3954 <__addsf3x+0x6e>
    3964:	0e c0       	rjmp	.+28     	; 0x3982 <__addsf3x+0x9c>
    3966:	ba 0f       	add	r27, r26
    3968:	62 1f       	adc	r22, r18
    396a:	73 1f       	adc	r23, r19
    396c:	84 1f       	adc	r24, r20
    396e:	48 f4       	brcc	.+18     	; 0x3982 <__addsf3x+0x9c>
    3970:	87 95       	ror	r24
    3972:	77 95       	ror	r23
    3974:	67 95       	ror	r22
    3976:	b7 95       	ror	r27
    3978:	f7 95       	ror	r31
    397a:	9e 3f       	cpi	r25, 0xFE	; 254
    397c:	08 f0       	brcs	.+2      	; 0x3980 <__addsf3x+0x9a>
    397e:	b0 cf       	rjmp	.-160    	; 0x38e0 <__addsf3+0x28>
    3980:	93 95       	inc	r25
    3982:	88 0f       	add	r24, r24
    3984:	08 f0       	brcs	.+2      	; 0x3988 <__addsf3x+0xa2>
    3986:	99 27       	eor	r25, r25
    3988:	ee 0f       	add	r30, r30
    398a:	97 95       	ror	r25
    398c:	87 95       	ror	r24
    398e:	08 95       	ret

00003990 <__cmpsf2>:
    3990:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <__fp_cmp>
    3994:	08 f4       	brcc	.+2      	; 0x3998 <__cmpsf2+0x8>
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	08 95       	ret

0000399a <__divsf3>:
    399a:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <__divsf3x>
    399e:	0c 94 e6 1d 	jmp	0x3bcc	; 0x3bcc <__fp_round>
    39a2:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <__fp_pscB>
    39a6:	58 f0       	brcs	.+22     	; 0x39be <__divsf3+0x24>
    39a8:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__fp_pscA>
    39ac:	40 f0       	brcs	.+16     	; 0x39be <__divsf3+0x24>
    39ae:	29 f4       	brne	.+10     	; 0x39ba <__divsf3+0x20>
    39b0:	5f 3f       	cpi	r21, 0xFF	; 255
    39b2:	29 f0       	breq	.+10     	; 0x39be <__divsf3+0x24>
    39b4:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__fp_inf>
    39b8:	51 11       	cpse	r21, r1
    39ba:	0c 94 1a 1e 	jmp	0x3c34	; 0x3c34 <__fp_szero>
    39be:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <__fp_nan>

000039c2 <__divsf3x>:
    39c2:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <__fp_split3>
    39c6:	68 f3       	brcs	.-38     	; 0x39a2 <__divsf3+0x8>

000039c8 <__divsf3_pse>:
    39c8:	99 23       	and	r25, r25
    39ca:	b1 f3       	breq	.-20     	; 0x39b8 <__divsf3+0x1e>
    39cc:	55 23       	and	r21, r21
    39ce:	91 f3       	breq	.-28     	; 0x39b4 <__divsf3+0x1a>
    39d0:	95 1b       	sub	r25, r21
    39d2:	55 0b       	sbc	r21, r21
    39d4:	bb 27       	eor	r27, r27
    39d6:	aa 27       	eor	r26, r26
    39d8:	62 17       	cp	r22, r18
    39da:	73 07       	cpc	r23, r19
    39dc:	84 07       	cpc	r24, r20
    39de:	38 f0       	brcs	.+14     	; 0x39ee <__divsf3_pse+0x26>
    39e0:	9f 5f       	subi	r25, 0xFF	; 255
    39e2:	5f 4f       	sbci	r21, 0xFF	; 255
    39e4:	22 0f       	add	r18, r18
    39e6:	33 1f       	adc	r19, r19
    39e8:	44 1f       	adc	r20, r20
    39ea:	aa 1f       	adc	r26, r26
    39ec:	a9 f3       	breq	.-22     	; 0x39d8 <__divsf3_pse+0x10>
    39ee:	35 d0       	rcall	.+106    	; 0x3a5a <__divsf3_pse+0x92>
    39f0:	0e 2e       	mov	r0, r30
    39f2:	3a f0       	brmi	.+14     	; 0x3a02 <__divsf3_pse+0x3a>
    39f4:	e0 e8       	ldi	r30, 0x80	; 128
    39f6:	32 d0       	rcall	.+100    	; 0x3a5c <__divsf3_pse+0x94>
    39f8:	91 50       	subi	r25, 0x01	; 1
    39fa:	50 40       	sbci	r21, 0x00	; 0
    39fc:	e6 95       	lsr	r30
    39fe:	00 1c       	adc	r0, r0
    3a00:	ca f7       	brpl	.-14     	; 0x39f4 <__divsf3_pse+0x2c>
    3a02:	2b d0       	rcall	.+86     	; 0x3a5a <__divsf3_pse+0x92>
    3a04:	fe 2f       	mov	r31, r30
    3a06:	29 d0       	rcall	.+82     	; 0x3a5a <__divsf3_pse+0x92>
    3a08:	66 0f       	add	r22, r22
    3a0a:	77 1f       	adc	r23, r23
    3a0c:	88 1f       	adc	r24, r24
    3a0e:	bb 1f       	adc	r27, r27
    3a10:	26 17       	cp	r18, r22
    3a12:	37 07       	cpc	r19, r23
    3a14:	48 07       	cpc	r20, r24
    3a16:	ab 07       	cpc	r26, r27
    3a18:	b0 e8       	ldi	r27, 0x80	; 128
    3a1a:	09 f0       	breq	.+2      	; 0x3a1e <__divsf3_pse+0x56>
    3a1c:	bb 0b       	sbc	r27, r27
    3a1e:	80 2d       	mov	r24, r0
    3a20:	bf 01       	movw	r22, r30
    3a22:	ff 27       	eor	r31, r31
    3a24:	93 58       	subi	r25, 0x83	; 131
    3a26:	5f 4f       	sbci	r21, 0xFF	; 255
    3a28:	3a f0       	brmi	.+14     	; 0x3a38 <__divsf3_pse+0x70>
    3a2a:	9e 3f       	cpi	r25, 0xFE	; 254
    3a2c:	51 05       	cpc	r21, r1
    3a2e:	78 f0       	brcs	.+30     	; 0x3a4e <__divsf3_pse+0x86>
    3a30:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__fp_inf>
    3a34:	0c 94 1a 1e 	jmp	0x3c34	; 0x3c34 <__fp_szero>
    3a38:	5f 3f       	cpi	r21, 0xFF	; 255
    3a3a:	e4 f3       	brlt	.-8      	; 0x3a34 <__divsf3_pse+0x6c>
    3a3c:	98 3e       	cpi	r25, 0xE8	; 232
    3a3e:	d4 f3       	brlt	.-12     	; 0x3a34 <__divsf3_pse+0x6c>
    3a40:	86 95       	lsr	r24
    3a42:	77 95       	ror	r23
    3a44:	67 95       	ror	r22
    3a46:	b7 95       	ror	r27
    3a48:	f7 95       	ror	r31
    3a4a:	9f 5f       	subi	r25, 0xFF	; 255
    3a4c:	c9 f7       	brne	.-14     	; 0x3a40 <__divsf3_pse+0x78>
    3a4e:	88 0f       	add	r24, r24
    3a50:	91 1d       	adc	r25, r1
    3a52:	96 95       	lsr	r25
    3a54:	87 95       	ror	r24
    3a56:	97 f9       	bld	r25, 7
    3a58:	08 95       	ret
    3a5a:	e1 e0       	ldi	r30, 0x01	; 1
    3a5c:	66 0f       	add	r22, r22
    3a5e:	77 1f       	adc	r23, r23
    3a60:	88 1f       	adc	r24, r24
    3a62:	bb 1f       	adc	r27, r27
    3a64:	62 17       	cp	r22, r18
    3a66:	73 07       	cpc	r23, r19
    3a68:	84 07       	cpc	r24, r20
    3a6a:	ba 07       	cpc	r27, r26
    3a6c:	20 f0       	brcs	.+8      	; 0x3a76 <__divsf3_pse+0xae>
    3a6e:	62 1b       	sub	r22, r18
    3a70:	73 0b       	sbc	r23, r19
    3a72:	84 0b       	sbc	r24, r20
    3a74:	ba 0b       	sbc	r27, r26
    3a76:	ee 1f       	adc	r30, r30
    3a78:	88 f7       	brcc	.-30     	; 0x3a5c <__divsf3_pse+0x94>
    3a7a:	e0 95       	com	r30
    3a7c:	08 95       	ret

00003a7e <__fixunssfsi>:
    3a7e:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <__fp_splitA>
    3a82:	88 f0       	brcs	.+34     	; 0x3aa6 <__fixunssfsi+0x28>
    3a84:	9f 57       	subi	r25, 0x7F	; 127
    3a86:	98 f0       	brcs	.+38     	; 0x3aae <__fixunssfsi+0x30>
    3a88:	b9 2f       	mov	r27, r25
    3a8a:	99 27       	eor	r25, r25
    3a8c:	b7 51       	subi	r27, 0x17	; 23
    3a8e:	b0 f0       	brcs	.+44     	; 0x3abc <__fixunssfsi+0x3e>
    3a90:	e1 f0       	breq	.+56     	; 0x3aca <__fixunssfsi+0x4c>
    3a92:	66 0f       	add	r22, r22
    3a94:	77 1f       	adc	r23, r23
    3a96:	88 1f       	adc	r24, r24
    3a98:	99 1f       	adc	r25, r25
    3a9a:	1a f0       	brmi	.+6      	; 0x3aa2 <__fixunssfsi+0x24>
    3a9c:	ba 95       	dec	r27
    3a9e:	c9 f7       	brne	.-14     	; 0x3a92 <__fixunssfsi+0x14>
    3aa0:	14 c0       	rjmp	.+40     	; 0x3aca <__fixunssfsi+0x4c>
    3aa2:	b1 30       	cpi	r27, 0x01	; 1
    3aa4:	91 f0       	breq	.+36     	; 0x3aca <__fixunssfsi+0x4c>
    3aa6:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <__fp_zero>
    3aaa:	b1 e0       	ldi	r27, 0x01	; 1
    3aac:	08 95       	ret
    3aae:	0c 94 19 1e 	jmp	0x3c32	; 0x3c32 <__fp_zero>
    3ab2:	67 2f       	mov	r22, r23
    3ab4:	78 2f       	mov	r23, r24
    3ab6:	88 27       	eor	r24, r24
    3ab8:	b8 5f       	subi	r27, 0xF8	; 248
    3aba:	39 f0       	breq	.+14     	; 0x3aca <__fixunssfsi+0x4c>
    3abc:	b9 3f       	cpi	r27, 0xF9	; 249
    3abe:	cc f3       	brlt	.-14     	; 0x3ab2 <__fixunssfsi+0x34>
    3ac0:	86 95       	lsr	r24
    3ac2:	77 95       	ror	r23
    3ac4:	67 95       	ror	r22
    3ac6:	b3 95       	inc	r27
    3ac8:	d9 f7       	brne	.-10     	; 0x3ac0 <__fixunssfsi+0x42>
    3aca:	3e f4       	brtc	.+14     	; 0x3ada <__fixunssfsi+0x5c>
    3acc:	90 95       	com	r25
    3ace:	80 95       	com	r24
    3ad0:	70 95       	com	r23
    3ad2:	61 95       	neg	r22
    3ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    3ada:	08 95       	ret

00003adc <__floatunsisf>:
    3adc:	e8 94       	clt
    3ade:	09 c0       	rjmp	.+18     	; 0x3af2 <__floatsisf+0x12>

00003ae0 <__floatsisf>:
    3ae0:	97 fb       	bst	r25, 7
    3ae2:	3e f4       	brtc	.+14     	; 0x3af2 <__floatsisf+0x12>
    3ae4:	90 95       	com	r25
    3ae6:	80 95       	com	r24
    3ae8:	70 95       	com	r23
    3aea:	61 95       	neg	r22
    3aec:	7f 4f       	sbci	r23, 0xFF	; 255
    3aee:	8f 4f       	sbci	r24, 0xFF	; 255
    3af0:	9f 4f       	sbci	r25, 0xFF	; 255
    3af2:	99 23       	and	r25, r25
    3af4:	a9 f0       	breq	.+42     	; 0x3b20 <__floatsisf+0x40>
    3af6:	f9 2f       	mov	r31, r25
    3af8:	96 e9       	ldi	r25, 0x96	; 150
    3afa:	bb 27       	eor	r27, r27
    3afc:	93 95       	inc	r25
    3afe:	f6 95       	lsr	r31
    3b00:	87 95       	ror	r24
    3b02:	77 95       	ror	r23
    3b04:	67 95       	ror	r22
    3b06:	b7 95       	ror	r27
    3b08:	f1 11       	cpse	r31, r1
    3b0a:	f8 cf       	rjmp	.-16     	; 0x3afc <__floatsisf+0x1c>
    3b0c:	fa f4       	brpl	.+62     	; 0x3b4c <__floatsisf+0x6c>
    3b0e:	bb 0f       	add	r27, r27
    3b10:	11 f4       	brne	.+4      	; 0x3b16 <__floatsisf+0x36>
    3b12:	60 ff       	sbrs	r22, 0
    3b14:	1b c0       	rjmp	.+54     	; 0x3b4c <__floatsisf+0x6c>
    3b16:	6f 5f       	subi	r22, 0xFF	; 255
    3b18:	7f 4f       	sbci	r23, 0xFF	; 255
    3b1a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b1e:	16 c0       	rjmp	.+44     	; 0x3b4c <__floatsisf+0x6c>
    3b20:	88 23       	and	r24, r24
    3b22:	11 f0       	breq	.+4      	; 0x3b28 <__floatsisf+0x48>
    3b24:	96 e9       	ldi	r25, 0x96	; 150
    3b26:	11 c0       	rjmp	.+34     	; 0x3b4a <__floatsisf+0x6a>
    3b28:	77 23       	and	r23, r23
    3b2a:	21 f0       	breq	.+8      	; 0x3b34 <__floatsisf+0x54>
    3b2c:	9e e8       	ldi	r25, 0x8E	; 142
    3b2e:	87 2f       	mov	r24, r23
    3b30:	76 2f       	mov	r23, r22
    3b32:	05 c0       	rjmp	.+10     	; 0x3b3e <__floatsisf+0x5e>
    3b34:	66 23       	and	r22, r22
    3b36:	71 f0       	breq	.+28     	; 0x3b54 <__floatsisf+0x74>
    3b38:	96 e8       	ldi	r25, 0x86	; 134
    3b3a:	86 2f       	mov	r24, r22
    3b3c:	70 e0       	ldi	r23, 0x00	; 0
    3b3e:	60 e0       	ldi	r22, 0x00	; 0
    3b40:	2a f0       	brmi	.+10     	; 0x3b4c <__floatsisf+0x6c>
    3b42:	9a 95       	dec	r25
    3b44:	66 0f       	add	r22, r22
    3b46:	77 1f       	adc	r23, r23
    3b48:	88 1f       	adc	r24, r24
    3b4a:	da f7       	brpl	.-10     	; 0x3b42 <__floatsisf+0x62>
    3b4c:	88 0f       	add	r24, r24
    3b4e:	96 95       	lsr	r25
    3b50:	87 95       	ror	r24
    3b52:	97 f9       	bld	r25, 7
    3b54:	08 95       	ret

00003b56 <__fp_cmp>:
    3b56:	99 0f       	add	r25, r25
    3b58:	00 08       	sbc	r0, r0
    3b5a:	55 0f       	add	r21, r21
    3b5c:	aa 0b       	sbc	r26, r26
    3b5e:	e0 e8       	ldi	r30, 0x80	; 128
    3b60:	fe ef       	ldi	r31, 0xFE	; 254
    3b62:	16 16       	cp	r1, r22
    3b64:	17 06       	cpc	r1, r23
    3b66:	e8 07       	cpc	r30, r24
    3b68:	f9 07       	cpc	r31, r25
    3b6a:	c0 f0       	brcs	.+48     	; 0x3b9c <__fp_cmp+0x46>
    3b6c:	12 16       	cp	r1, r18
    3b6e:	13 06       	cpc	r1, r19
    3b70:	e4 07       	cpc	r30, r20
    3b72:	f5 07       	cpc	r31, r21
    3b74:	98 f0       	brcs	.+38     	; 0x3b9c <__fp_cmp+0x46>
    3b76:	62 1b       	sub	r22, r18
    3b78:	73 0b       	sbc	r23, r19
    3b7a:	84 0b       	sbc	r24, r20
    3b7c:	95 0b       	sbc	r25, r21
    3b7e:	39 f4       	brne	.+14     	; 0x3b8e <__fp_cmp+0x38>
    3b80:	0a 26       	eor	r0, r26
    3b82:	61 f0       	breq	.+24     	; 0x3b9c <__fp_cmp+0x46>
    3b84:	23 2b       	or	r18, r19
    3b86:	24 2b       	or	r18, r20
    3b88:	25 2b       	or	r18, r21
    3b8a:	21 f4       	brne	.+8      	; 0x3b94 <__fp_cmp+0x3e>
    3b8c:	08 95       	ret
    3b8e:	0a 26       	eor	r0, r26
    3b90:	09 f4       	brne	.+2      	; 0x3b94 <__fp_cmp+0x3e>
    3b92:	a1 40       	sbci	r26, 0x01	; 1
    3b94:	a6 95       	lsr	r26
    3b96:	8f ef       	ldi	r24, 0xFF	; 255
    3b98:	81 1d       	adc	r24, r1
    3b9a:	81 1d       	adc	r24, r1
    3b9c:	08 95       	ret

00003b9e <__fp_inf>:
    3b9e:	97 f9       	bld	r25, 7
    3ba0:	9f 67       	ori	r25, 0x7F	; 127
    3ba2:	80 e8       	ldi	r24, 0x80	; 128
    3ba4:	70 e0       	ldi	r23, 0x00	; 0
    3ba6:	60 e0       	ldi	r22, 0x00	; 0
    3ba8:	08 95       	ret

00003baa <__fp_nan>:
    3baa:	9f ef       	ldi	r25, 0xFF	; 255
    3bac:	80 ec       	ldi	r24, 0xC0	; 192
    3bae:	08 95       	ret

00003bb0 <__fp_pscA>:
    3bb0:	00 24       	eor	r0, r0
    3bb2:	0a 94       	dec	r0
    3bb4:	16 16       	cp	r1, r22
    3bb6:	17 06       	cpc	r1, r23
    3bb8:	18 06       	cpc	r1, r24
    3bba:	09 06       	cpc	r0, r25
    3bbc:	08 95       	ret

00003bbe <__fp_pscB>:
    3bbe:	00 24       	eor	r0, r0
    3bc0:	0a 94       	dec	r0
    3bc2:	12 16       	cp	r1, r18
    3bc4:	13 06       	cpc	r1, r19
    3bc6:	14 06       	cpc	r1, r20
    3bc8:	05 06       	cpc	r0, r21
    3bca:	08 95       	ret

00003bcc <__fp_round>:
    3bcc:	09 2e       	mov	r0, r25
    3bce:	03 94       	inc	r0
    3bd0:	00 0c       	add	r0, r0
    3bd2:	11 f4       	brne	.+4      	; 0x3bd8 <__fp_round+0xc>
    3bd4:	88 23       	and	r24, r24
    3bd6:	52 f0       	brmi	.+20     	; 0x3bec <__fp_round+0x20>
    3bd8:	bb 0f       	add	r27, r27
    3bda:	40 f4       	brcc	.+16     	; 0x3bec <__fp_round+0x20>
    3bdc:	bf 2b       	or	r27, r31
    3bde:	11 f4       	brne	.+4      	; 0x3be4 <__fp_round+0x18>
    3be0:	60 ff       	sbrs	r22, 0
    3be2:	04 c0       	rjmp	.+8      	; 0x3bec <__fp_round+0x20>
    3be4:	6f 5f       	subi	r22, 0xFF	; 255
    3be6:	7f 4f       	sbci	r23, 0xFF	; 255
    3be8:	8f 4f       	sbci	r24, 0xFF	; 255
    3bea:	9f 4f       	sbci	r25, 0xFF	; 255
    3bec:	08 95       	ret

00003bee <__fp_split3>:
    3bee:	57 fd       	sbrc	r21, 7
    3bf0:	90 58       	subi	r25, 0x80	; 128
    3bf2:	44 0f       	add	r20, r20
    3bf4:	55 1f       	adc	r21, r21
    3bf6:	59 f0       	breq	.+22     	; 0x3c0e <__fp_splitA+0x10>
    3bf8:	5f 3f       	cpi	r21, 0xFF	; 255
    3bfa:	71 f0       	breq	.+28     	; 0x3c18 <__fp_splitA+0x1a>
    3bfc:	47 95       	ror	r20

00003bfe <__fp_splitA>:
    3bfe:	88 0f       	add	r24, r24
    3c00:	97 fb       	bst	r25, 7
    3c02:	99 1f       	adc	r25, r25
    3c04:	61 f0       	breq	.+24     	; 0x3c1e <__fp_splitA+0x20>
    3c06:	9f 3f       	cpi	r25, 0xFF	; 255
    3c08:	79 f0       	breq	.+30     	; 0x3c28 <__fp_splitA+0x2a>
    3c0a:	87 95       	ror	r24
    3c0c:	08 95       	ret
    3c0e:	12 16       	cp	r1, r18
    3c10:	13 06       	cpc	r1, r19
    3c12:	14 06       	cpc	r1, r20
    3c14:	55 1f       	adc	r21, r21
    3c16:	f2 cf       	rjmp	.-28     	; 0x3bfc <__fp_split3+0xe>
    3c18:	46 95       	lsr	r20
    3c1a:	f1 df       	rcall	.-30     	; 0x3bfe <__fp_splitA>
    3c1c:	08 c0       	rjmp	.+16     	; 0x3c2e <__fp_splitA+0x30>
    3c1e:	16 16       	cp	r1, r22
    3c20:	17 06       	cpc	r1, r23
    3c22:	18 06       	cpc	r1, r24
    3c24:	99 1f       	adc	r25, r25
    3c26:	f1 cf       	rjmp	.-30     	; 0x3c0a <__fp_splitA+0xc>
    3c28:	86 95       	lsr	r24
    3c2a:	71 05       	cpc	r23, r1
    3c2c:	61 05       	cpc	r22, r1
    3c2e:	08 94       	sec
    3c30:	08 95       	ret

00003c32 <__fp_zero>:
    3c32:	e8 94       	clt

00003c34 <__fp_szero>:
    3c34:	bb 27       	eor	r27, r27
    3c36:	66 27       	eor	r22, r22
    3c38:	77 27       	eor	r23, r23
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	97 f9       	bld	r25, 7
    3c3e:	08 95       	ret

00003c40 <__mulsf3>:
    3c40:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__mulsf3x>
    3c44:	0c 94 e6 1d 	jmp	0x3bcc	; 0x3bcc <__fp_round>
    3c48:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__fp_pscA>
    3c4c:	38 f0       	brcs	.+14     	; 0x3c5c <__mulsf3+0x1c>
    3c4e:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <__fp_pscB>
    3c52:	20 f0       	brcs	.+8      	; 0x3c5c <__mulsf3+0x1c>
    3c54:	95 23       	and	r25, r21
    3c56:	11 f0       	breq	.+4      	; 0x3c5c <__mulsf3+0x1c>
    3c58:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__fp_inf>
    3c5c:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <__fp_nan>
    3c60:	11 24       	eor	r1, r1
    3c62:	0c 94 1a 1e 	jmp	0x3c34	; 0x3c34 <__fp_szero>

00003c66 <__mulsf3x>:
    3c66:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <__fp_split3>
    3c6a:	70 f3       	brcs	.-36     	; 0x3c48 <__mulsf3+0x8>

00003c6c <__mulsf3_pse>:
    3c6c:	95 9f       	mul	r25, r21
    3c6e:	c1 f3       	breq	.-16     	; 0x3c60 <__mulsf3+0x20>
    3c70:	95 0f       	add	r25, r21
    3c72:	50 e0       	ldi	r21, 0x00	; 0
    3c74:	55 1f       	adc	r21, r21
    3c76:	62 9f       	mul	r22, r18
    3c78:	f0 01       	movw	r30, r0
    3c7a:	72 9f       	mul	r23, r18
    3c7c:	bb 27       	eor	r27, r27
    3c7e:	f0 0d       	add	r31, r0
    3c80:	b1 1d       	adc	r27, r1
    3c82:	63 9f       	mul	r22, r19
    3c84:	aa 27       	eor	r26, r26
    3c86:	f0 0d       	add	r31, r0
    3c88:	b1 1d       	adc	r27, r1
    3c8a:	aa 1f       	adc	r26, r26
    3c8c:	64 9f       	mul	r22, r20
    3c8e:	66 27       	eor	r22, r22
    3c90:	b0 0d       	add	r27, r0
    3c92:	a1 1d       	adc	r26, r1
    3c94:	66 1f       	adc	r22, r22
    3c96:	82 9f       	mul	r24, r18
    3c98:	22 27       	eor	r18, r18
    3c9a:	b0 0d       	add	r27, r0
    3c9c:	a1 1d       	adc	r26, r1
    3c9e:	62 1f       	adc	r22, r18
    3ca0:	73 9f       	mul	r23, r19
    3ca2:	b0 0d       	add	r27, r0
    3ca4:	a1 1d       	adc	r26, r1
    3ca6:	62 1f       	adc	r22, r18
    3ca8:	83 9f       	mul	r24, r19
    3caa:	a0 0d       	add	r26, r0
    3cac:	61 1d       	adc	r22, r1
    3cae:	22 1f       	adc	r18, r18
    3cb0:	74 9f       	mul	r23, r20
    3cb2:	33 27       	eor	r19, r19
    3cb4:	a0 0d       	add	r26, r0
    3cb6:	61 1d       	adc	r22, r1
    3cb8:	23 1f       	adc	r18, r19
    3cba:	84 9f       	mul	r24, r20
    3cbc:	60 0d       	add	r22, r0
    3cbe:	21 1d       	adc	r18, r1
    3cc0:	82 2f       	mov	r24, r18
    3cc2:	76 2f       	mov	r23, r22
    3cc4:	6a 2f       	mov	r22, r26
    3cc6:	11 24       	eor	r1, r1
    3cc8:	9f 57       	subi	r25, 0x7F	; 127
    3cca:	50 40       	sbci	r21, 0x00	; 0
    3ccc:	9a f0       	brmi	.+38     	; 0x3cf4 <__mulsf3_pse+0x88>
    3cce:	f1 f0       	breq	.+60     	; 0x3d0c <__mulsf3_pse+0xa0>
    3cd0:	88 23       	and	r24, r24
    3cd2:	4a f0       	brmi	.+18     	; 0x3ce6 <__mulsf3_pse+0x7a>
    3cd4:	ee 0f       	add	r30, r30
    3cd6:	ff 1f       	adc	r31, r31
    3cd8:	bb 1f       	adc	r27, r27
    3cda:	66 1f       	adc	r22, r22
    3cdc:	77 1f       	adc	r23, r23
    3cde:	88 1f       	adc	r24, r24
    3ce0:	91 50       	subi	r25, 0x01	; 1
    3ce2:	50 40       	sbci	r21, 0x00	; 0
    3ce4:	a9 f7       	brne	.-22     	; 0x3cd0 <__mulsf3_pse+0x64>
    3ce6:	9e 3f       	cpi	r25, 0xFE	; 254
    3ce8:	51 05       	cpc	r21, r1
    3cea:	80 f0       	brcs	.+32     	; 0x3d0c <__mulsf3_pse+0xa0>
    3cec:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__fp_inf>
    3cf0:	0c 94 1a 1e 	jmp	0x3c34	; 0x3c34 <__fp_szero>
    3cf4:	5f 3f       	cpi	r21, 0xFF	; 255
    3cf6:	e4 f3       	brlt	.-8      	; 0x3cf0 <__mulsf3_pse+0x84>
    3cf8:	98 3e       	cpi	r25, 0xE8	; 232
    3cfa:	d4 f3       	brlt	.-12     	; 0x3cf0 <__mulsf3_pse+0x84>
    3cfc:	86 95       	lsr	r24
    3cfe:	77 95       	ror	r23
    3d00:	67 95       	ror	r22
    3d02:	b7 95       	ror	r27
    3d04:	f7 95       	ror	r31
    3d06:	e7 95       	ror	r30
    3d08:	9f 5f       	subi	r25, 0xFF	; 255
    3d0a:	c1 f7       	brne	.-16     	; 0x3cfc <__mulsf3_pse+0x90>
    3d0c:	fe 2b       	or	r31, r30
    3d0e:	88 0f       	add	r24, r24
    3d10:	91 1d       	adc	r25, r1
    3d12:	96 95       	lsr	r25
    3d14:	87 95       	ror	r24
    3d16:	97 f9       	bld	r25, 7
    3d18:	08 95       	ret

00003d1a <__divmodhi4>:
    3d1a:	97 fb       	bst	r25, 7
    3d1c:	07 2e       	mov	r0, r23
    3d1e:	16 f4       	brtc	.+4      	; 0x3d24 <__divmodhi4+0xa>
    3d20:	00 94       	com	r0
    3d22:	07 d0       	rcall	.+14     	; 0x3d32 <__divmodhi4_neg1>
    3d24:	77 fd       	sbrc	r23, 7
    3d26:	09 d0       	rcall	.+18     	; 0x3d3a <__divmodhi4_neg2>
    3d28:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <__udivmodhi4>
    3d2c:	07 fc       	sbrc	r0, 7
    3d2e:	05 d0       	rcall	.+10     	; 0x3d3a <__divmodhi4_neg2>
    3d30:	3e f4       	brtc	.+14     	; 0x3d40 <__divmodhi4_exit>

00003d32 <__divmodhi4_neg1>:
    3d32:	90 95       	com	r25
    3d34:	81 95       	neg	r24
    3d36:	9f 4f       	sbci	r25, 0xFF	; 255
    3d38:	08 95       	ret

00003d3a <__divmodhi4_neg2>:
    3d3a:	70 95       	com	r23
    3d3c:	61 95       	neg	r22
    3d3e:	7f 4f       	sbci	r23, 0xFF	; 255

00003d40 <__divmodhi4_exit>:
    3d40:	08 95       	ret

00003d42 <__udivmodsi4>:
    3d42:	a1 e2       	ldi	r26, 0x21	; 33
    3d44:	1a 2e       	mov	r1, r26
    3d46:	aa 1b       	sub	r26, r26
    3d48:	bb 1b       	sub	r27, r27
    3d4a:	fd 01       	movw	r30, r26
    3d4c:	0d c0       	rjmp	.+26     	; 0x3d68 <__udivmodsi4_ep>

00003d4e <__udivmodsi4_loop>:
    3d4e:	aa 1f       	adc	r26, r26
    3d50:	bb 1f       	adc	r27, r27
    3d52:	ee 1f       	adc	r30, r30
    3d54:	ff 1f       	adc	r31, r31
    3d56:	a2 17       	cp	r26, r18
    3d58:	b3 07       	cpc	r27, r19
    3d5a:	e4 07       	cpc	r30, r20
    3d5c:	f5 07       	cpc	r31, r21
    3d5e:	20 f0       	brcs	.+8      	; 0x3d68 <__udivmodsi4_ep>
    3d60:	a2 1b       	sub	r26, r18
    3d62:	b3 0b       	sbc	r27, r19
    3d64:	e4 0b       	sbc	r30, r20
    3d66:	f5 0b       	sbc	r31, r21

00003d68 <__udivmodsi4_ep>:
    3d68:	66 1f       	adc	r22, r22
    3d6a:	77 1f       	adc	r23, r23
    3d6c:	88 1f       	adc	r24, r24
    3d6e:	99 1f       	adc	r25, r25
    3d70:	1a 94       	dec	r1
    3d72:	69 f7       	brne	.-38     	; 0x3d4e <__udivmodsi4_loop>
    3d74:	60 95       	com	r22
    3d76:	70 95       	com	r23
    3d78:	80 95       	com	r24
    3d7a:	90 95       	com	r25
    3d7c:	9b 01       	movw	r18, r22
    3d7e:	ac 01       	movw	r20, r24
    3d80:	bd 01       	movw	r22, r26
    3d82:	cf 01       	movw	r24, r30
    3d84:	08 95       	ret

00003d86 <__tablejump2__>:
    3d86:	ee 0f       	add	r30, r30
    3d88:	ff 1f       	adc	r31, r31
    3d8a:	05 90       	lpm	r0, Z+
    3d8c:	f4 91       	lpm	r31, Z
    3d8e:	e0 2d       	mov	r30, r0
    3d90:	09 94       	ijmp

00003d92 <__umulhisi3>:
    3d92:	a2 9f       	mul	r26, r18
    3d94:	b0 01       	movw	r22, r0
    3d96:	b3 9f       	mul	r27, r19
    3d98:	c0 01       	movw	r24, r0
    3d9a:	a3 9f       	mul	r26, r19
    3d9c:	70 0d       	add	r23, r0
    3d9e:	81 1d       	adc	r24, r1
    3da0:	11 24       	eor	r1, r1
    3da2:	91 1d       	adc	r25, r1
    3da4:	b2 9f       	mul	r27, r18
    3da6:	70 0d       	add	r23, r0
    3da8:	81 1d       	adc	r24, r1
    3daa:	11 24       	eor	r1, r1
    3dac:	91 1d       	adc	r25, r1
    3dae:	08 95       	ret

00003db0 <__adddi3_s8>:
    3db0:	00 24       	eor	r0, r0
    3db2:	a7 fd       	sbrc	r26, 7
    3db4:	00 94       	com	r0
    3db6:	2a 0f       	add	r18, r26
    3db8:	30 1d       	adc	r19, r0
    3dba:	40 1d       	adc	r20, r0
    3dbc:	50 1d       	adc	r21, r0
    3dbe:	60 1d       	adc	r22, r0
    3dc0:	70 1d       	adc	r23, r0
    3dc2:	80 1d       	adc	r24, r0
    3dc4:	90 1d       	adc	r25, r0
    3dc6:	08 95       	ret

00003dc8 <__cmpdi2>:
    3dc8:	2a 15       	cp	r18, r10
    3dca:	3b 05       	cpc	r19, r11
    3dcc:	4c 05       	cpc	r20, r12
    3dce:	5d 05       	cpc	r21, r13
    3dd0:	6e 05       	cpc	r22, r14
    3dd2:	7f 05       	cpc	r23, r15
    3dd4:	80 07       	cpc	r24, r16
    3dd6:	91 07       	cpc	r25, r17
    3dd8:	08 95       	ret

00003dda <__udivmodhi4>:
    3dda:	aa 1b       	sub	r26, r26
    3ddc:	bb 1b       	sub	r27, r27
    3dde:	51 e1       	ldi	r21, 0x11	; 17
    3de0:	07 c0       	rjmp	.+14     	; 0x3df0 <__udivmodhi4_ep>

00003de2 <__udivmodhi4_loop>:
    3de2:	aa 1f       	adc	r26, r26
    3de4:	bb 1f       	adc	r27, r27
    3de6:	a6 17       	cp	r26, r22
    3de8:	b7 07       	cpc	r27, r23
    3dea:	10 f0       	brcs	.+4      	; 0x3df0 <__udivmodhi4_ep>
    3dec:	a6 1b       	sub	r26, r22
    3dee:	b7 0b       	sbc	r27, r23

00003df0 <__udivmodhi4_ep>:
    3df0:	88 1f       	adc	r24, r24
    3df2:	99 1f       	adc	r25, r25
    3df4:	5a 95       	dec	r21
    3df6:	a9 f7       	brne	.-22     	; 0x3de2 <__udivmodhi4_loop>
    3df8:	80 95       	com	r24
    3dfa:	90 95       	com	r25
    3dfc:	bc 01       	movw	r22, r24
    3dfe:	cd 01       	movw	r24, r26
    3e00:	08 95       	ret

00003e02 <_exit>:
    3e02:	f8 94       	cli

00003e04 <__stop_program>:
    3e04:	ff cf       	rjmp	.-2      	; 0x3e04 <__stop_program>
