
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004024  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003c8  00800060  00004024  000040b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000017a  00800428  00800428  00004480  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004480  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000044b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006c8  00000000  00000000  000044ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000737b  00000000  00000000  00004bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e4c  00000000  00000000  0000bf2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004569  00000000  00000000  0000dd7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001588  00000000  00000000  000122e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002b74  00000000  00000000  0001386c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000059f4  00000000  00000000  000163e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005b0  00000000  00000000  0001bdd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <__vector_1>
       8:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__vector_2>
       c:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__vector_3>
      10:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__vector_4>
      14:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__vector_5>
      18:	0c 94 e0 15 	jmp	0x2bc0	; 0x2bc0 <__vector_6>
      1c:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__vector_7>
      20:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__vector_8>
      24:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__vector_9>
      28:	0c 94 96 15 	jmp	0x2b2c	; 0x2b2c <__vector_10>
      2c:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__vector_11>
      30:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__vector_12>
      34:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__vector_13>
      38:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <__vector_14>
      3c:	0c 94 e9 1c 	jmp	0x39d2	; 0x39d2 <__vector_15>
      40:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__vector_16>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	9c 1b       	sub	r25, r28
      56:	a8 1b       	sub	r26, r24
      58:	9f 1b       	sub	r25, r31
      5a:	a2 1b       	sub	r26, r18
      5c:	a5 1b       	sub	r26, r21
      5e:	9c 1b       	sub	r25, r28
      60:	9c 1b       	sub	r25, r28

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	14 e0       	ldi	r17, 0x04	; 4
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e4 e2       	ldi	r30, 0x24	; 36
      76:	f0 e4       	ldi	r31, 0x40	; 64
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a8 32       	cpi	r26, 0x28	; 40
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	25 e0       	ldi	r18, 0x05	; 5
      86:	a8 e2       	ldi	r26, 0x28	; 40
      88:	b4 e0       	ldi	r27, 0x04	; 4
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a2 3a       	cpi	r26, 0xA2	; 162
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 35 10 	call	0x206a	; 0x206a <main>
      98:	0c 94 10 20 	jmp	0x4020	; 0x4020 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
      a0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <enuCurrentAppStatus>
      a4:	84 30       	cpi	r24, 0x04	; 4
      a6:	09 f4       	brne	.+2      	; 0xaa <App_init+0xa>
      a8:	f8 c0       	rjmp	.+496    	; 0x29a <App_init+0x1fa>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
      aa:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <Eeprom_24_init>
      ae:	81 30       	cpi	r24, 0x01	; 1
      b0:	09 f0       	breq	.+2      	; 0xb4 <App_init+0x14>
      b2:	c2 c0       	rjmp	.+388    	; 0x238 <App_init+0x198>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
      b4:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <Terminal_init>
      b8:	81 30       	cpi	r24, 0x01	; 1
      ba:	09 f0       	breq	.+2      	; 0xbe <App_init+0x1e>
      bc:	bf c0       	rjmp	.+382    	; 0x23c <App_init+0x19c>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
      be:	0e 94 38 18 	call	0x3070	; 0x3070 <Spi_init>
      c2:	81 30       	cpi	r24, 0x01	; 1
      c4:	09 f0       	breq	.+2      	; 0xc8 <App_init+0x28>
      c6:	bc c0       	rjmp	.+376    	; 0x240 <App_init+0x1a0>
		return APP_STATUS_ERROR_NOK;
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
      c8:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <Keypad_init>
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	09 f0       	breq	.+2      	; 0xd2 <App_init+0x32>
      d0:	b9 c0       	rjmp	.+370    	; 0x244 <App_init+0x1a4>
		return APP_STATUS_ERROR_NOK;
	if(LCD_STATUS_ERROR_OK != Lcd_init())
      d2:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <Lcd_init>
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	09 f0       	breq	.+2      	; 0xdc <App_init+0x3c>
      da:	b6 c0       	rjmp	.+364    	; 0x248 <App_init+0x1a8>
		return APP_STATUS_ERROR_NOK;
	if(LM35_STATUS_ERROR_OK != LM35_init())
      dc:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <LM35_init>
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	09 f0       	breq	.+2      	; 0xe6 <App_init+0x46>
      e4:	b3 c0       	rjmp	.+358    	; 0x24c <App_init+0x1ac>
		return APP_STATUS_ERROR_NOK;
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
      e6:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <Motor_init>
      ea:	81 30       	cpi	r24, 0x01	; 1
      ec:	09 f0       	breq	.+2      	; 0xf0 <App_init+0x50>
      ee:	b0 c0       	rjmp	.+352    	; 0x250 <App_init+0x1b0>
		return APP_STATUS_ERROR_NOK;
	if(BTTN_STATUS_ERROR_OK != Button_init())
      f0:	0e 94 ad 09 	call	0x135a	; 0x135a <Button_init>
      f4:	81 30       	cpi	r24, 0x01	; 1
      f6:	09 f0       	breq	.+2      	; 0xfa <App_init+0x5a>
      f8:	ad c0       	rjmp	.+346    	; 0x254 <App_init+0x1b4>
// 	DIO_PORTC_DIR |= 1<<3;
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
      fa:	8d e0       	ldi	r24, 0x0D	; 13
      fc:	94 e0       	ldi	r25, 0x04	; 4
      fe:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	09 f0       	breq	.+2      	; 0x108 <App_init+0x68>
     106:	a8 c0       	rjmp	.+336    	; 0x258 <App_init+0x1b8>
		return APP_STATUS_ERROR_NOK;
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
     108:	8f ef       	ldi	r24, 0xFF	; 255
     10a:	93 e0       	ldi	r25, 0x03	; 3
     10c:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     110:	81 30       	cpi	r24, 0x01	; 1
     112:	09 f0       	breq	.+2      	; 0x116 <App_init+0x76>
     114:	a3 c0       	rjmp	.+326    	; 0x25c <App_init+0x1bc>
		return APP_STATUS_ERROR_NOK;
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
     116:	63 e4       	ldi	r22, 0x43	; 67
     118:	74 e0       	ldi	r23, 0x04	; 4
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 9f 0a 	call	0x153e	; 0x153e <Eeprom_24_readByte>
     122:	81 30       	cpi	r24, 0x01	; 1
     124:	09 f0       	breq	.+2      	; 0x128 <App_init+0x88>
     126:	9c c0       	rjmp	.+312    	; 0x260 <App_init+0x1c0>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     128:	2a e0       	ldi	r18, 0x0A	; 10
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	40 e0       	ldi	r20, 0x00	; 0
     12e:	50 e0       	ldi	r21, 0x00	; 0
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	70 e0       	ldi	r23, 0x00	; 0
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
     13c:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <gu8_initData>
     140:	8a 3a       	cpi	r24, 0xAA	; 170
     142:	a1 f1       	breq	.+104    	; 0x1ac <App_init+0x10c>
	{
		gu8_ATMMode = ATM_MODE_ADMIN;
     144:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <gu8_ATMMode>
		
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, ATM_DB_ATM_PIN_VAL,stringLength(ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
     148:	80 e6       	ldi	r24, 0x60	; 96
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 ba 18 	call	0x3174	; 0x3174 <stringLength>
     150:	48 2f       	mov	r20, r24
     152:	50 e0       	ldi	r21, 0x00	; 0
     154:	60 e6       	ldi	r22, 0x60	; 96
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	8b e0       	ldi	r24, 0x0B	; 11
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Eeprom_24_writePacket>
     160:	81 30       	cpi	r24, 0x01	; 1
     162:	09 f0       	breq	.+2      	; 0x166 <App_init+0xc6>
     164:	7f c0       	rjmp	.+254    	; 0x264 <App_init+0x1c4>
			return APP_STATUS_ERROR_NOK;
		
		if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
     166:	60 e0       	ldi	r22, 0x00	; 0
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     16e:	81 30       	cpi	r24, 0x01	; 1
     170:	09 f0       	breq	.+2      	; 0x174 <App_init+0xd4>
     172:	7a c0       	rjmp	.+244    	; 0x268 <App_init+0x1c8>
			return APP_STATUS_ERROR_OK;
		if(Lcd_printString((uint8_t*)"*******ATM******") != LCD_STATUS_ERROR_OK)
     174:	8c ed       	ldi	r24, 0xDC	; 220
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     17c:	81 30       	cpi	r24, 0x01	; 1
     17e:	09 f0       	breq	.+2      	; 0x182 <App_init+0xe2>
     180:	75 c0       	rjmp	.+234    	; 0x26c <App_init+0x1cc>
			return APP_STATUS_ERROR_NOK;
		if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     188:	81 30       	cpi	r24, 0x01	; 1
     18a:	09 f0       	breq	.+2      	; 0x18e <App_init+0xee>
     18c:	71 c0       	rjmp	.+226    	; 0x270 <App_init+0x1d0>
			return APP_STATUS_ERROR_OK;
		if(Lcd_printString((uint8_t*)"*****LOCKED*****") != LCD_STATUS_ERROR_OK)
     18e:	8d ee       	ldi	r24, 0xED	; 237
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     196:	81 30       	cpi	r24, 0x01	; 1
     198:	09 f0       	breq	.+2      	; 0x19c <App_init+0xfc>
     19a:	6c c0       	rjmp	.+216    	; 0x274 <App_init+0x1d4>
			return APP_STATUS_ERROR_NOK;
		
		if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     19c:	8e ef       	ldi	r24, 0xFE	; 254
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     1a4:	81 30       	cpi	r24, 0x01	; 1
     1a6:	09 f0       	breq	.+2      	; 0x1aa <App_init+0x10a>
     1a8:	67 c0       	rjmp	.+206    	; 0x278 <App_init+0x1d8>
     1aa:	41 c0       	rjmp	.+130    	; 0x22e <App_init+0x18e>
			return APP_STATUS_ERROR_NOK;
	}else
	{//gu8_ATMPin
		gu8_ATMMode = ATM_MODE_USER;
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu8_ATMMode>
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
     1b2:	48 e0       	ldi	r20, 0x08	; 8
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	65 e3       	ldi	r22, 0x35	; 53
     1b8:	74 e0       	ldi	r23, 0x04	; 4
     1ba:	83 e0       	ldi	r24, 0x03	; 3
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 2b 0c 	call	0x1856	; 0x1856 <Eeprom_24_readPacket>
     1c2:	81 30       	cpi	r24, 0x01	; 1
     1c4:	09 f0       	breq	.+2      	; 0x1c8 <App_init+0x128>
     1c6:	5a c0       	rjmp	.+180    	; 0x27c <App_init+0x1dc>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     1c8:	62 e4       	ldi	r22, 0x42	; 66
     1ca:	74 e0       	ldi	r23, 0x04	; 4
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 9f 0a 	call	0x153e	; 0x153e <Eeprom_24_readByte>
     1d4:	81 30       	cpi	r24, 0x01	; 1
     1d6:	09 f0       	breq	.+2      	; 0x1da <App_init+0x13a>
     1d8:	53 c0       	rjmp	.+166    	; 0x280 <App_init+0x1e0>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
     1da:	45 e0       	ldi	r20, 0x05	; 5
     1dc:	50 e0       	ldi	r21, 0x00	; 0
     1de:	6d e3       	ldi	r22, 0x3D	; 61
     1e0:	74 e0       	ldi	r23, 0x04	; 4
     1e2:	8b e0       	ldi	r24, 0x0B	; 11
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 2b 0c 	call	0x1856	; 0x1856 <Eeprom_24_readPacket>
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	09 f0       	breq	.+2      	; 0x1f0 <App_init+0x150>
     1ee:	4a c0       	rjmp	.+148    	; 0x284 <App_init+0x1e4>
			return APP_STATUS_ERROR_NOK;
		
		if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     1f8:	81 30       	cpi	r24, 0x01	; 1
     1fa:	09 f0       	breq	.+2      	; 0x1fe <App_init+0x15e>
     1fc:	45 c0       	rjmp	.+138    	; 0x288 <App_init+0x1e8>
			return APP_STATUS_ERROR_OK;
		if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
     1fe:	80 e1       	ldi	r24, 0x10	; 16
     200:	91 e0       	ldi	r25, 0x01	; 1
     202:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	09 f0       	breq	.+2      	; 0x20c <App_init+0x16c>
     20a:	40 c0       	rjmp	.+128    	; 0x28c <App_init+0x1ec>
			return APP_STATUS_ERROR_NOK;
		if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	e9 f5       	brne	.+122    	; 0x290 <App_init+0x1f0>
			return APP_STATUS_ERROR_OK;
		if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
     216:	8e e1       	ldi	r24, 0x1E	; 30
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     21e:	81 30       	cpi	r24, 0x01	; 1
     220:	c9 f5       	brne	.+114    	; 0x294 <App_init+0x1f4>
			return APP_STATUS_ERROR_NOK;
			
		if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     222:	8d e2       	ldi	r24, 0x2D	; 45
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	a9 f5       	brne	.+106    	; 0x298 <App_init+0x1f8>
			return APP_STATUS_ERROR_NOK;
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     22e:	84 e0       	ldi	r24, 0x04	; 4
     230:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <enuCurrentAppStatus>
	return APP_STATUS_ERROR_OK;
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	08 95       	ret
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	08 95       	ret
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	08 95       	ret
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
		return APP_STATUS_ERROR_NOK;
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	08 95       	ret
	if(LCD_STATUS_ERROR_OK != Lcd_init())
		return APP_STATUS_ERROR_NOK;
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	08 95       	ret
	if(LM35_STATUS_ERROR_OK != LM35_init())
		return APP_STATUS_ERROR_NOK;
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	08 95       	ret
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
		return APP_STATUS_ERROR_NOK;
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	08 95       	ret
	if(BTTN_STATUS_ERROR_OK != Button_init())
		return APP_STATUS_ERROR_NOK;
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	08 95       	ret
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	08 95       	ret
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	08 95       	ret
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
	{
		gu8_ATMMode = ATM_MODE_ADMIN;
		
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, ATM_DB_ATM_PIN_VAL,stringLength(ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	08 95       	ret
		
		if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_OK;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	08 95       	ret
		if(Lcd_printString((uint8_t*)"*******ATM******") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	08 95       	ret
		if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_OK;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	08 95       	ret
		if(Lcd_printString((uint8_t*)"*****LOCKED*****") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	08 95       	ret
		
		if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	08 95       	ret
	}else
	{//gu8_ATMPin
		gu8_ATMMode = ATM_MODE_USER;
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	08 95       	ret
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	08 95       	ret
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 95       	ret
		
		if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_OK;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	08 95       	ret
		if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	08 95       	ret
		if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_OK;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	08 95       	ret
		if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	08 95       	ret
			
		if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     298:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     29a:	08 95       	ret

0000029c <AppUSER_checkPan>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	2a 97       	sbiw	r28, 0x0a	; 10
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
     2b2:	fe 01       	movw	r30, r28
     2b4:	31 96       	adiw	r30, 0x01	; 1
     2b6:	8a e0       	ldi	r24, 0x0A	; 10
     2b8:	df 01       	movw	r26, r30
     2ba:	1d 92       	st	X+, r1
     2bc:	8a 95       	dec	r24
     2be:	e9 f7       	brne	.-6      	; 0x2ba <AppUSER_checkPan+0x1e>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     2c0:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <gu8_clientIndex>
     2c4:	1b c0       	rjmp	.+54     	; 0x2fc <AppUSER_checkPan+0x60>
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*16;
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	02 96       	adiw	r24, 0x02	; 2
     2ca:	82 95       	swap	r24
     2cc:	80 7f       	andi	r24, 0xF0	; 240
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     2ce:	4a e0       	ldi	r20, 0x0A	; 10
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	be 01       	movw	r22, r28
     2d4:	6f 5f       	subi	r22, 0xFF	; 255
     2d6:	7f 4f       	sbci	r23, 0xFF	; 255
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 2b 0c 	call	0x1856	; 0x1856 <Eeprom_24_readPacket>
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	89 f5       	brne	.+98     	; 0x344 <AppUSER_checkPan+0xa8>
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
     2e2:	60 e6       	ldi	r22, 0x60	; 96
     2e4:	74 e0       	ldi	r23, 0x04	; 4
     2e6:	ce 01       	movw	r24, r28
     2e8:	01 96       	adiw	r24, 0x01	; 1
     2ea:	0e 94 c6 18 	call	0x318c	; 0x318c <stringCompare>
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	69 f0       	breq	.+26     	; 0x30c <AppUSER_checkPan+0x70>
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     2f2:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <gu8_clientIndex>
     2f6:	8f 5f       	subi	r24, 0xFF	; 255
     2f8:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <gu8_clientIndex>
     2fc:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <gu8_clientIndex>
     300:	90 91 42 04 	lds	r25, 0x0442	; 0x800442 <gu8_registeredAccNum>
     304:	89 17       	cp	r24, r25
     306:	f8 f2       	brcs	.-66     	; 0x2c6 <AppUSER_checkPan+0x2a>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	01 c0       	rjmp	.+2      	; 0x30e <AppUSER_checkPan+0x72>
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*16;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
		{
			u8_panFound = 1;
     30c:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}	
	
	if(u8_panFound == 1)
     30e:	81 30       	cpi	r24, 0x01	; 1
     310:	d9 f4       	brne	.+54     	; 0x348 <AppUSER_checkPan+0xac>
	{
			uint8_t u8_clientBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*16;
     312:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <gu8_clientIndex>
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	03 96       	adiw	r24, 0x03	; 3
     31a:	18 2f       	mov	r17, r24
     31c:	12 95       	swap	r17
     31e:	10 7f       	andi	r17, 0xF0	; 240
		
			stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
     320:	64 e4       	ldi	r22, 0x44	; 68
     322:	74 e0       	ldi	r23, 0x04	; 4
     324:	ce 01       	movw	r24, r28
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	0e 94 05 19 	call	0x320a	; 0x320a <stringCopy>
		
			if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     32c:	49 e0       	ldi	r20, 0x09	; 9
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	6e e4       	ldi	r22, 0x4E	; 78
     332:	74 e0       	ldi	r23, 0x04	; 4
     334:	81 2f       	mov	r24, r17
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 2b 0c 	call	0x1856	; 0x1856 <Eeprom_24_readPacket>
     33c:	81 30       	cpi	r24, 0x01	; 1
     33e:	31 f0       	breq	.+12     	; 0x34c <AppUSER_checkPan+0xb0>
				return APP_STATUS_ERROR_NOK;
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	05 c0       	rjmp	.+10     	; 0x34e <AppUSER_checkPan+0xb2>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*16;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	03 c0       	rjmp	.+6      	; 0x34e <AppUSER_checkPan+0xb2>
				return APP_STATUS_ERROR_NOK;
			
			return APP_STATUS_PAN_FOUND;
	}

	return APP_STATUS_PAN_NOT_FOUND;
     348:	8a e0       	ldi	r24, 0x0A	; 10
     34a:	01 c0       	rjmp	.+2      	; 0x34e <AppUSER_checkPan+0xb2>
			stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
		
			if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
			
			return APP_STATUS_PAN_FOUND;
     34c:	89 e0       	ldi	r24, 0x09	; 9
	}

	return APP_STATUS_PAN_NOT_FOUND;
}
     34e:	2a 96       	adiw	r28, 0x0a	; 10
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	f8 94       	cli
     354:	de bf       	out	0x3e, r29	; 62
     356:	0f be       	out	0x3f, r0	; 63
     358:	cd bf       	out	0x3d, r28	; 61
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	08 95       	ret

00000362 <AppUSER_ReportKeypad>:
* Parameters (out): pu8_key - Pointer to variable to hold the button pressed
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the value pressed in the keypad.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_ReportKeypad(uint8_t* pu8_key)
{
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	ec 01       	movw	r28, r24
	static uint8_t u8_index = 0;
	static uint8_t sau8_data[10]={0};
	enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&sau8_data[u8_index]);
     368:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <u8_index.2200>
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	88 5d       	subi	r24, 0xD8	; 216
     370:	9b 4f       	sbci	r25, 0xFB	; 251
     372:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <Keypad_readKey>
	
	if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
     376:	86 30       	cpi	r24, 0x06	; 6
     378:	09 f0       	breq	.+2      	; 0x37c <AppUSER_ReportKeypad+0x1a>
     37a:	61 c0       	rjmp	.+194    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
	{
		if(sau8_data[u8_index] == '=')
     37c:	60 91 32 04 	lds	r22, 0x0432	; 0x800432 <u8_index.2200>
     380:	86 2f       	mov	r24, r22
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	fc 01       	movw	r30, r24
     386:	e8 5d       	subi	r30, 0xD8	; 216
     388:	fb 4f       	sbci	r31, 0xFB	; 251
     38a:	20 81       	ld	r18, Z
     38c:	2d 33       	cpi	r18, 0x3D	; 61
     38e:	09 f5       	brne	.+66     	; 0x3d2 <AppUSER_ReportKeypad+0x70>
		{
			sau8_data[u8_index] = '\0';
     390:	fc 01       	movw	r30, r24
     392:	e8 5d       	subi	r30, 0xD8	; 216
     394:	fb 4f       	sbci	r31, 0xFB	; 251
     396:	10 82       	st	Z, r1
			u8_index = 0;
     398:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <u8_index.2200>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     39c:	66 e0       	ldi	r22, 0x06	; 6
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     3a4:	81 30       	cpi	r24, 0x01	; 1
     3a6:	09 f0       	breq	.+2      	; 0x3aa <AppUSER_ReportKeypad+0x48>
     3a8:	4c c0       	rjmp	.+152    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
				return APP_STATUS_ERROR_NOK;
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
     3aa:	88 e3       	ldi	r24, 0x38	; 56
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <AppUSER_ReportKeypad+0x56>
     3b6:	47 c0       	rjmp	.+142    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
				return APP_STATUS_ERROR_NOK;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     3b8:	66 e0       	ldi	r22, 0x06	; 6
     3ba:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     3be:	81 30       	cpi	r24, 0x01	; 1
     3c0:	09 f0       	breq	.+2      	; 0x3c4 <AppUSER_ReportKeypad+0x62>
     3c2:	43 c0       	rjmp	.+134    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
				return APP_STATUS_ERROR_NOK;
			stringCopy(sau8_data, pu8_key);
     3c4:	be 01       	movw	r22, r28
     3c6:	88 e2       	ldi	r24, 0x28	; 40
     3c8:	94 e0       	ldi	r25, 0x04	; 4
     3ca:	0e 94 05 19 	call	0x320a	; 0x320a <stringCopy>
			return APP_STATUS_KPD_NUM;
     3ce:	87 e0       	ldi	r24, 0x07	; 7
     3d0:	45 c0       	rjmp	.+138    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		}else if(sau8_data[u8_index] == '-')
     3d2:	2d 32       	cpi	r18, 0x2D	; 45
     3d4:	a9 f4       	brne	.+42     	; 0x400 <__EEPROM_REGION_LENGTH__>
		{
			u8_index--;
     3d6:	ef ef       	ldi	r30, 0xFF	; 255
     3d8:	e6 0f       	add	r30, r22
     3da:	e0 93 32 04 	sts	0x0432, r30	; 0x800432 <u8_index.2200>
			sau8_data[u8_index] = '\0';
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	e8 5d       	subi	r30, 0xD8	; 216
     3e2:	fb 4f       	sbci	r31, 0xFB	; 251
     3e4:	10 82       	st	Z, r1
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     3e6:	6b 5f       	subi	r22, 0xFB	; 251
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     3ee:	81 30       	cpi	r24, 0x01	; 1
     3f0:	71 f5       	brne	.+92     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
				return APP_STATUS_ERROR_NOK;
			if(Lcd_printChar(' ') != LCD_STATUS_ERROR_OK)
     3f2:	80 e2       	ldi	r24, 0x20	; 32
     3f4:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Lcd_printChar>
     3f8:	81 30       	cpi	r24, 0x01	; 1
     3fa:	59 f1       	breq	.+86     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
				return APP_STATUS_ERROR_NOK;
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	2e c0       	rjmp	.+92     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		}else
		{
			if(u8_index!=10)
     400:	6a 30       	cpi	r22, 0x0A	; 10
     402:	b9 f0       	breq	.+46     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     404:	6a 5f       	subi	r22, 0xFA	; 250
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     40c:	81 30       	cpi	r24, 0x01	; 1
     40e:	19 f5       	brne	.+70     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
     410:	e0 91 32 04 	lds	r30, 0x0432	; 0x800432 <u8_index.2200>
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	e8 5d       	subi	r30, 0xD8	; 216
     418:	fb 4f       	sbci	r31, 0xFB	; 251
     41a:	80 81       	ld	r24, Z
     41c:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Lcd_printChar>
     420:	81 30       	cpi	r24, 0x01	; 1
     422:	d9 f4       	brne	.+54     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
				return APP_STATUS_ERROR_NOK;
				u8_index++;
     424:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <u8_index.2200>
     428:	8f 5f       	subi	r24, 0xFF	; 255
     42a:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <u8_index.2200>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
	
	return APP_STATUS_ERROR_OK;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	15 c0       	rjmp	.+42     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
				if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
				u8_index++;
			}else
			{
				sau8_data[u8_index] = '\0';
     432:	fc 01       	movw	r30, r24
     434:	e8 5d       	subi	r30, 0xD8	; 216
     436:	fb 4f       	sbci	r31, 0xFB	; 251
     438:	10 82       	st	Z, r1
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
	
	return APP_STATUS_ERROR_OK;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	0f c0       	rjmp	.+30     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
			}
			
		}
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	0d c0       	rjmp	.+26     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		if(sau8_data[u8_index] == '=')
		{
			sau8_data[u8_index] = '\0';
			u8_index = 0;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	0b c0       	rjmp	.+22     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	09 c0       	rjmp	.+18     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	07 c0       	rjmp	.+14     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		}else if(sau8_data[u8_index] == '-')
		{
			u8_index--;
			sau8_data[u8_index] = '\0';
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	05 c0       	rjmp	.+10     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
	
	return APP_STATUS_ERROR_OK;
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	03 c0       	rjmp	.+6      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		}else
		{
			if(u8_index!=10)
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	01 c0       	rjmp	.+2      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
				if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     45a:	80 e0       	ldi	r24, 0x00	; 0
	{
		return APP_STATUS_ERROR_OK;
	}
	
	return APP_STATUS_ERROR_OK;
}
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <AppUSER_startTransaction>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startTransaction(void)
{
     462:	4f 92       	push	r4
     464:	5f 92       	push	r5
     466:	6f 92       	push	r6
     468:	7f 92       	push	r7
     46a:	8f 92       	push	r8
     46c:	9f 92       	push	r9
     46e:	af 92       	push	r10
     470:	bf 92       	push	r11
     472:	cf 92       	push	r12
     474:	df 92       	push	r13
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	28 97       	sbiw	r28, 0x08	; 8
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_inputKPD[8] = {0};
     48e:	fe 01       	movw	r30, r28
     490:	31 96       	adiw	r30, 0x01	; 1
     492:	88 e0       	ldi	r24, 0x08	; 8
     494:	df 01       	movw	r26, r30
     496:	1d 92       	st	X+, r1
     498:	8a 95       	dec	r24
     49a:	e9 f7       	brne	.-6      	; 0x496 <AppUSER_startTransaction+0x34>
	enuApp_Status_t KeypdaStatus = 0;
	float32_t f32_balance = stringToFloat(gstr_clientdata.au8_Balance);
     49c:	8e e4       	ldi	r24, 0x4E	; 78
     49e:	94 e0       	ldi	r25, 0x04	; 4
     4a0:	0e 94 5d 19 	call	0x32ba	; 0x32ba <stringToFloat>
     4a4:	2b 01       	movw	r4, r22
     4a6:	3c 01       	movw	r6, r24
	float32_t f32_maxAmount = stringToFloat(gau8_maxAmount);
     4a8:	85 e3       	ldi	r24, 0x35	; 53
     4aa:	94 e0       	ldi	r25, 0x04	; 4
     4ac:	0e 94 5d 19 	call	0x32ba	; 0x32ba <stringToFloat>
     4b0:	4b 01       	movw	r8, r22
     4b2:	5c 01       	movw	r10, r24
	float32_t f32_amount = 0;
	while(1)
	{
		EmptyString(au8_inputKPD);
     4b4:	ce 01       	movw	r24, r28
     4b6:	01 96       	adiw	r24, 0x01	; 1
     4b8:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     4bc:	ce 01       	movw	r24, r28
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	0e 94 b1 01 	call	0x362	; 0x362 <AppUSER_ReportKeypad>
		
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     4c4:	87 30       	cpi	r24, 0x07	; 7
     4c6:	09 f0       	breq	.+2      	; 0x4ca <AppUSER_startTransaction+0x68>
     4c8:	3e c1       	rjmp	.+636    	; 0x746 <AppUSER_startTransaction+0x2e4>
		{
			
			f32_amount = stringToFloat(au8_inputKPD);
     4ca:	ce 01       	movw	r24, r28
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	0e 94 5d 19 	call	0x32ba	; 0x32ba <stringToFloat>
     4d2:	6b 01       	movw	r12, r22
     4d4:	7c 01       	movw	r14, r24
			
			if(f32_maxAmount < f32_amount)
     4d6:	9b 01       	movw	r18, r22
     4d8:	ac 01       	movw	r20, r24
     4da:	c5 01       	movw	r24, r10
     4dc:	b4 01       	movw	r22, r8
     4de:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <__cmpsf2>
     4e2:	88 23       	and	r24, r24
     4e4:	c4 f5       	brge	.+112    	; 0x556 <AppUSER_startTransaction+0xf4>
			{
				Lcd_clear();
     4e6:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     4f2:	81 30       	cpi	r24, 0x01	; 1
     4f4:	09 f0       	breq	.+2      	; 0x4f8 <AppUSER_startTransaction+0x96>
     4f6:	32 c1       	rjmp	.+612    	; 0x75c <AppUSER_startTransaction+0x2fa>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Max Amount") != LCD_STATUS_ERROR_OK)
     4f8:	8b e3       	ldi	r24, 0x3B	; 59
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	09 f0       	breq	.+2      	; 0x506 <AppUSER_startTransaction+0xa4>
     504:	2d c1       	rjmp	.+602    	; 0x760 <AppUSER_startTransaction+0x2fe>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     50c:	81 30       	cpi	r24, 0x01	; 1
     50e:	09 f0       	breq	.+2      	; 0x512 <AppUSER_startTransaction+0xb0>
     510:	29 c1       	rjmp	.+594    	; 0x764 <AppUSER_startTransaction+0x302>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Exceeded") != LCD_STATUS_ERROR_OK)
     512:	86 e4       	ldi	r24, 0x46	; 70
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     51a:	81 30       	cpi	r24, 0x01	; 1
     51c:	09 f0       	breq	.+2      	; 0x520 <AppUSER_startTransaction+0xbe>
     51e:	24 c1       	rjmp	.+584    	; 0x768 <AppUSER_startTransaction+0x306>
				return APP_STATUS_ERROR_NOK;
				Delay_ms(500);
     520:	24 ef       	ldi	r18, 0xF4	; 244
     522:	31 e0       	ldi	r19, 0x01	; 1
     524:	40 e0       	ldi	r20, 0x00	; 0
     526:	50 e0       	ldi	r21, 0x00	; 0
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
				Lcd_clear();
     534:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     540:	81 30       	cpi	r24, 0x01	; 1
     542:	09 f0       	breq	.+2      	; 0x546 <AppUSER_startTransaction+0xe4>
     544:	13 c1       	rjmp	.+550    	; 0x76c <AppUSER_startTransaction+0x30a>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     546:	8f e4       	ldi	r24, 0x4F	; 79
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	09 f4       	brne	.+2      	; 0x554 <AppUSER_startTransaction+0xf2>
     552:	f9 c0       	rjmp	.+498    	; 0x746 <AppUSER_startTransaction+0x2e4>
     554:	0d c1       	rjmp	.+538    	; 0x770 <AppUSER_startTransaction+0x30e>
				return APP_STATUS_ERROR_NOK;
			}else
			{
				Lcd_clear();
     556:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	09 f0       	breq	.+2      	; 0x568 <AppUSER_startTransaction+0x106>
     566:	06 c1       	rjmp	.+524    	; 0x774 <AppUSER_startTransaction+0x312>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Please Wait") != LCD_STATUS_ERROR_OK)
     568:	8c e5       	ldi	r24, 0x5C	; 92
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     570:	81 30       	cpi	r24, 0x01	; 1
     572:	09 f0       	breq	.+2      	; 0x576 <AppUSER_startTransaction+0x114>
     574:	01 c1       	rjmp	.+514    	; 0x778 <AppUSER_startTransaction+0x316>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     57c:	81 30       	cpi	r24, 0x01	; 1
     57e:	09 f0       	breq	.+2      	; 0x582 <AppUSER_startTransaction+0x120>
     580:	fd c0       	rjmp	.+506    	; 0x77c <AppUSER_startTransaction+0x31a>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Processing...") != LCD_STATUS_ERROR_OK)
     582:	88 e6       	ldi	r24, 0x68	; 104
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     58a:	81 30       	cpi	r24, 0x01	; 1
     58c:	09 f0       	breq	.+2      	; 0x590 <AppUSER_startTransaction+0x12e>
     58e:	f8 c0       	rjmp	.+496    	; 0x780 <AppUSER_startTransaction+0x31e>
				return APP_STATUS_ERROR_NOK;
				
				if(f32_balance < f32_amount)
     590:	a7 01       	movw	r20, r14
     592:	96 01       	movw	r18, r12
     594:	c3 01       	movw	r24, r6
     596:	b2 01       	movw	r22, r4
     598:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <__cmpsf2>
     59c:	88 23       	and	r24, r24
     59e:	c4 f5       	brge	.+112    	; 0x610 <AppUSER_startTransaction+0x1ae>
				{
					Lcd_clear();
     5a0:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     5ac:	81 30       	cpi	r24, 0x01	; 1
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <AppUSER_startTransaction+0x150>
     5b0:	e9 c0       	rjmp	.+466    	; 0x784 <AppUSER_startTransaction+0x322>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Insufficient") != LCD_STATUS_ERROR_OK)
     5b2:	86 e7       	ldi	r24, 0x76	; 118
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     5ba:	81 30       	cpi	r24, 0x01	; 1
     5bc:	09 f0       	breq	.+2      	; 0x5c0 <AppUSER_startTransaction+0x15e>
     5be:	e4 c0       	rjmp	.+456    	; 0x788 <AppUSER_startTransaction+0x326>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     5c6:	81 30       	cpi	r24, 0x01	; 1
     5c8:	09 f0       	breq	.+2      	; 0x5cc <AppUSER_startTransaction+0x16a>
     5ca:	e0 c0       	rjmp	.+448    	; 0x78c <AppUSER_startTransaction+0x32a>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Fund") != LCD_STATUS_ERROR_OK)
     5cc:	83 e8       	ldi	r24, 0x83	; 131
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     5d4:	81 30       	cpi	r24, 0x01	; 1
     5d6:	09 f0       	breq	.+2      	; 0x5da <AppUSER_startTransaction+0x178>
     5d8:	db c0       	rjmp	.+438    	; 0x790 <AppUSER_startTransaction+0x32e>
						return APP_STATUS_ERROR_NOK;
					Delay_ms(500);
     5da:	24 ef       	ldi	r18, 0xF4	; 244
     5dc:	31 e0       	ldi	r19, 0x01	; 1
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
					Lcd_clear();
     5ee:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     5fa:	81 30       	cpi	r24, 0x01	; 1
     5fc:	09 f0       	breq	.+2      	; 0x600 <AppUSER_startTransaction+0x19e>
     5fe:	ca c0       	rjmp	.+404    	; 0x794 <AppUSER_startTransaction+0x332>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     600:	8f e4       	ldi	r24, 0x4F	; 79
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     608:	81 30       	cpi	r24, 0x01	; 1
     60a:	09 f4       	brne	.+2      	; 0x60e <AppUSER_startTransaction+0x1ac>
     60c:	9c c0       	rjmp	.+312    	; 0x746 <AppUSER_startTransaction+0x2e4>
     60e:	c4 c0       	rjmp	.+392    	; 0x798 <AppUSER_startTransaction+0x336>
						return APP_STATUS_ERROR_NOK;
				}else/****************** Transaction Successfull ******************/
				{
					Lcd_clear();
     610:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     61c:	81 30       	cpi	r24, 0x01	; 1
     61e:	09 f0       	breq	.+2      	; 0x622 <AppUSER_startTransaction+0x1c0>
     620:	bd c0       	rjmp	.+378    	; 0x79c <AppUSER_startTransaction+0x33a>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Successful") != LCD_STATUS_ERROR_OK)
     622:	88 e8       	ldi	r24, 0x88	; 136
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     62a:	81 30       	cpi	r24, 0x01	; 1
     62c:	09 f0       	breq	.+2      	; 0x630 <AppUSER_startTransaction+0x1ce>
     62e:	b8 c0       	rjmp	.+368    	; 0x7a0 <AppUSER_startTransaction+0x33e>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     636:	81 30       	cpi	r24, 0x01	; 1
     638:	09 f0       	breq	.+2      	; 0x63c <AppUSER_startTransaction+0x1da>
     63a:	b4 c0       	rjmp	.+360    	; 0x7a4 <AppUSER_startTransaction+0x342>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Transaction") != LCD_STATUS_ERROR_OK)
     63c:	83 e9       	ldi	r24, 0x93	; 147
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     644:	81 30       	cpi	r24, 0x01	; 1
     646:	09 f0       	breq	.+2      	; 0x64a <AppUSER_startTransaction+0x1e8>
     648:	af c0       	rjmp	.+350    	; 0x7a8 <AppUSER_startTransaction+0x346>
					return APP_STATUS_ERROR_NOK;
					Motor_run(MOTOR_CASH_ID, 100, MOTOR_DIR_CLK_WISE);
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	64 e6       	ldi	r22, 0x64	; 100
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <Motor_run>
					Delay_ms(1000);
     654:	28 ee       	ldi	r18, 0xE8	; 232
     656:	33 e0       	ldi	r19, 0x03	; 3
     658:	40 e0       	ldi	r20, 0x00	; 0
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
					Motor_stop(MOTOR_CASH_ID);
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <Motor_stop>
					gu8_USER_Mode_State = USER_IDLE;
     66e:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <gu8_USER_Mode_State>
					Lcd_clear();
     672:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
					
					f32_balance -= f32_amount;
     676:	a7 01       	movw	r20, r14
     678:	96 01       	movw	r18, r12
     67a:	c3 01       	movw	r24, r6
     67c:	b2 01       	movw	r22, r4
     67e:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <__subsf3>
     682:	6b 01       	movw	r12, r22
     684:	7c 01       	movw	r14, r24
					EmptyString(gstr_clientdata.au8_Balance);
     686:	8e e4       	ldi	r24, 0x4E	; 78
     688:	94 e0       	ldi	r25, 0x04	; 4
     68a:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <EmptyString>
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
     68e:	4e e4       	ldi	r20, 0x4E	; 78
     690:	54 e0       	ldi	r21, 0x04	; 4
     692:	c7 01       	movw	r24, r14
     694:	b6 01       	movw	r22, r12
     696:	0e 94 db 19 	call	0x33b6	; 0x33b6 <floatToString>
					Terminal_Out(gstr_clientdata.au8_Balance);
     69a:	8e e4       	ldi	r24, 0x4E	; 78
     69c:	94 e0       	ldi	r25, 0x04	; 4
     69e:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*16 ;
     6a2:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <gu8_clientIndex>
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	03 96       	adiw	r24, 0x03	; 3
     6aa:	f8 2e       	mov	r15, r24
     6ac:	ff 0c       	add	r15, r15
     6ae:	ff 0c       	add	r15, r15
     6b0:	ff 0c       	add	r15, r15
     6b2:	ff 0c       	add	r15, r15
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     6b4:	8e e4       	ldi	r24, 0x4E	; 78
     6b6:	94 e0       	ldi	r25, 0x04	; 4
     6b8:	0e 94 ba 18 	call	0x3174	; 0x3174 <stringLength>
     6bc:	48 2f       	mov	r20, r24
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	6e e4       	ldi	r22, 0x4E	; 78
     6c2:	74 e0       	ldi	r23, 0x04	; 4
     6c4:	8f 2d       	mov	r24, r15
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Eeprom_24_writePacket>
     6cc:	81 30       	cpi	r24, 0x01	; 1
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <AppUSER_startTransaction+0x270>
     6d0:	6d c0       	rjmp	.+218    	; 0x7ac <AppUSER_startTransaction+0x34a>
						return APP_STATUS_ERROR_NOK;
					
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     6da:	81 30       	cpi	r24, 0x01	; 1
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <AppUSER_startTransaction+0x27e>
     6de:	68 c0       	rjmp	.+208    	; 0x7b0 <AppUSER_startTransaction+0x34e>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Your Balance") != LCD_STATUS_ERROR_OK)
     6e0:	85 ef       	ldi	r24, 0xF5	; 245
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     6e8:	81 30       	cpi	r24, 0x01	; 1
     6ea:	09 f0       	breq	.+2      	; 0x6ee <AppUSER_startTransaction+0x28c>
     6ec:	63 c0       	rjmp	.+198    	; 0x7b4 <AppUSER_startTransaction+0x352>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     6f4:	81 30       	cpi	r24, 0x01	; 1
     6f6:	09 f0       	breq	.+2      	; 0x6fa <AppUSER_startTransaction+0x298>
     6f8:	5f c0       	rjmp	.+190    	; 0x7b8 <AppUSER_startTransaction+0x356>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString(gstr_clientdata.au8_Balance) != LCD_STATUS_ERROR_OK)
     6fa:	8e e4       	ldi	r24, 0x4E	; 78
     6fc:	94 e0       	ldi	r25, 0x04	; 4
     6fe:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     702:	81 30       	cpi	r24, 0x01	; 1
     704:	09 f0       	breq	.+2      	; 0x708 <AppUSER_startTransaction+0x2a6>
     706:	5a c0       	rjmp	.+180    	; 0x7bc <AppUSER_startTransaction+0x35a>
						return APP_STATUS_ERROR_NOK;
					Lcd_clear();
     708:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     714:	81 30       	cpi	r24, 0x01	; 1
     716:	09 f0       	breq	.+2      	; 0x71a <AppUSER_startTransaction+0x2b8>
     718:	53 c0       	rjmp	.+166    	; 0x7c0 <AppUSER_startTransaction+0x35e>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
     71a:	80 e1       	ldi	r24, 0x10	; 16
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     722:	81 30       	cpi	r24, 0x01	; 1
     724:	09 f0       	breq	.+2      	; 0x728 <AppUSER_startTransaction+0x2c6>
     726:	4e c0       	rjmp	.+156    	; 0x7c4 <AppUSER_startTransaction+0x362>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     72e:	81 30       	cpi	r24, 0x01	; 1
     730:	09 f0       	breq	.+2      	; 0x734 <AppUSER_startTransaction+0x2d2>
     732:	4a c0       	rjmp	.+148    	; 0x7c8 <AppUSER_startTransaction+0x366>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
     734:	8e e1       	ldi	r24, 0x1E	; 30
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     73c:	81 30       	cpi	r24, 0x01	; 1
     73e:	09 f4       	brne	.+2      	; 0x742 <AppUSER_startTransaction+0x2e0>
     740:	45 c0       	rjmp	.+138    	; 0x7cc <AppUSER_startTransaction+0x36a>
						return APP_STATUS_ERROR_NOK;
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	44 c0       	rjmp	.+136    	; 0x7ce <AppUSER_startTransaction+0x36c>
					
					return APP_STATUS_ERROR_OK;
				}
			}
		}
		Delay_ms(155);
     746:	2b e9       	ldi	r18, 0x9B	; 155
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	40 e0       	ldi	r20, 0x00	; 0
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
	}
     75a:	ac ce       	rjmp	.-680    	; 0x4b4 <AppUSER_startTransaction+0x52>
			
			if(f32_maxAmount < f32_amount)
			{
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	37 c0       	rjmp	.+110    	; 0x7ce <AppUSER_startTransaction+0x36c>
				if(Lcd_printString((uint8_t*)"Max Amount") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	35 c0       	rjmp	.+106    	; 0x7ce <AppUSER_startTransaction+0x36c>
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	33 c0       	rjmp	.+102    	; 0x7ce <AppUSER_startTransaction+0x36c>
				if(Lcd_printString((uint8_t*)"Exceeded") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	31 c0       	rjmp	.+98     	; 0x7ce <AppUSER_startTransaction+0x36c>
				Delay_ms(500);
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	2f c0       	rjmp	.+94     	; 0x7ce <AppUSER_startTransaction+0x36c>
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	2d c0       	rjmp	.+90     	; 0x7ce <AppUSER_startTransaction+0x36c>
			}else
			{
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	2b c0       	rjmp	.+86     	; 0x7ce <AppUSER_startTransaction+0x36c>
				if(Lcd_printString((uint8_t*)"Please Wait") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	29 c0       	rjmp	.+82     	; 0x7ce <AppUSER_startTransaction+0x36c>
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	27 c0       	rjmp	.+78     	; 0x7ce <AppUSER_startTransaction+0x36c>
				if(Lcd_printString((uint8_t*)"Processing...") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	25 c0       	rjmp	.+74     	; 0x7ce <AppUSER_startTransaction+0x36c>
				
				if(f32_balance < f32_amount)
				{
					Lcd_clear();
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	23 c0       	rjmp	.+70     	; 0x7ce <AppUSER_startTransaction+0x36c>
					if(Lcd_printString((uint8_t*)"Insufficient") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	21 c0       	rjmp	.+66     	; 0x7ce <AppUSER_startTransaction+0x36c>
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	1f c0       	rjmp	.+62     	; 0x7ce <AppUSER_startTransaction+0x36c>
					if(Lcd_printString((uint8_t*)"Fund") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	1d c0       	rjmp	.+58     	; 0x7ce <AppUSER_startTransaction+0x36c>
					Delay_ms(500);
					Lcd_clear();
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	1b c0       	rjmp	.+54     	; 0x7ce <AppUSER_startTransaction+0x36c>
					if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	19 c0       	rjmp	.+50     	; 0x7ce <AppUSER_startTransaction+0x36c>
				}else/****************** Transaction Successfull ******************/
				{
					Lcd_clear();
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	17 c0       	rjmp	.+46     	; 0x7ce <AppUSER_startTransaction+0x36c>
					if(Lcd_printString((uint8_t*)"Successful") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	15 c0       	rjmp	.+42     	; 0x7ce <AppUSER_startTransaction+0x36c>
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	13 c0       	rjmp	.+38     	; 0x7ce <AppUSER_startTransaction+0x36c>
					if(Lcd_printString((uint8_t*)"Transaction") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	11 c0       	rjmp	.+34     	; 0x7ce <AppUSER_startTransaction+0x36c>
					EmptyString(gstr_clientdata.au8_Balance);
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
					Terminal_Out(gstr_clientdata.au8_Balance);
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*16 ;
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	0f c0       	rjmp	.+30     	; 0x7ce <AppUSER_startTransaction+0x36c>
					
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	0d c0       	rjmp	.+26     	; 0x7ce <AppUSER_startTransaction+0x36c>
					if(Lcd_printString((uint8_t*)"Your Balance") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	0b c0       	rjmp	.+22     	; 0x7ce <AppUSER_startTransaction+0x36c>
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	09 c0       	rjmp	.+18     	; 0x7ce <AppUSER_startTransaction+0x36c>
					if(Lcd_printString(gstr_clientdata.au8_Balance) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	07 c0       	rjmp	.+14     	; 0x7ce <AppUSER_startTransaction+0x36c>
					Lcd_clear();
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	05 c0       	rjmp	.+10     	; 0x7ce <AppUSER_startTransaction+0x36c>
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	03 c0       	rjmp	.+6      	; 0x7ce <AppUSER_startTransaction+0x36c>
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <AppUSER_startTransaction+0x36c>
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					
					return APP_STATUS_ERROR_OK;
     7cc:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
		}
		Delay_ms(155);
	}
}
     7ce:	28 96       	adiw	r28, 0x08	; 8
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	ff 90       	pop	r15
     7e0:	ef 90       	pop	r14
     7e2:	df 90       	pop	r13
     7e4:	cf 90       	pop	r12
     7e6:	bf 90       	pop	r11
     7e8:	af 90       	pop	r10
     7ea:	9f 90       	pop	r9
     7ec:	8f 90       	pop	r8
     7ee:	7f 90       	pop	r7
     7f0:	6f 90       	pop	r6
     7f2:	5f 90       	pop	r5
     7f4:	4f 90       	pop	r4
     7f6:	08 95       	ret

000007f8 <AppUSER_checkPin>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the user's input pin if right or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPin(void)
{
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <AppUSER_checkPin+0x6>
     7fe:	00 d0       	rcall	.+0      	; 0x800 <__DATA_REGION_LENGTH__>
     800:	1f 92       	push	r1
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_inputKPD[5] = {0};
     806:	fe 01       	movw	r30, r28
     808:	31 96       	adiw	r30, 0x01	; 1
     80a:	85 e0       	ldi	r24, 0x05	; 5
     80c:	df 01       	movw	r26, r30
     80e:	1d 92       	st	X+, r1
     810:	8a 95       	dec	r24
     812:	e9 f7       	brne	.-6      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
	enuApp_Status_t KeypdaStatus = 0;
	while(1)
	{
		EmptyString(au8_inputKPD);
     814:	ce 01       	movw	r24, r28
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	0e 94 b1 01 	call	0x362	; 0x362 <AppUSER_ReportKeypad>
		
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     824:	87 30       	cpi	r24, 0x07	; 7
     826:	09 f0       	breq	.+2      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     828:	59 c0       	rjmp	.+178    	; 0x8dc <__stack+0x7d>
		{
			if(stringCompare(au8_inputKPD, gstr_userCardData.au8_pinNum) != 1)
     82a:	6a e6       	ldi	r22, 0x6A	; 106
     82c:	74 e0       	ldi	r23, 0x04	; 4
     82e:	ce 01       	movw	r24, r28
     830:	01 96       	adiw	r24, 0x01	; 1
     832:	0e 94 c6 18 	call	0x318c	; 0x318c <stringCompare>
     836:	81 30       	cpi	r24, 0x01	; 1
     838:	b1 f1       	breq	.+108    	; 0x8a6 <__stack+0x47>
			{
				Lcd_clear();
     83a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     846:	81 30       	cpi	r24, 0x01	; 1
     848:	09 f0       	breq	.+2      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     84a:	53 c0       	rjmp	.+166    	; 0x8f2 <__stack+0x93>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Incorrect PIN") != LCD_STATUS_ERROR_OK)
     84c:	8f e9       	ldi	r24, 0x9F	; 159
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     854:	81 30       	cpi	r24, 0x01	; 1
     856:	09 f0       	breq	.+2      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     858:	4e c0       	rjmp	.+156    	; 0x8f6 <__stack+0x97>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     860:	81 30       	cpi	r24, 0x01	; 1
     862:	09 f0       	breq	.+2      	; 0x866 <__stack+0x7>
     864:	4a c0       	rjmp	.+148    	; 0x8fa <__stack+0x9b>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Try Again") != LCD_STATUS_ERROR_OK)
     866:	8d ea       	ldi	r24, 0xAD	; 173
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     86e:	81 30       	cpi	r24, 0x01	; 1
     870:	09 f0       	breq	.+2      	; 0x874 <__stack+0x15>
     872:	45 c0       	rjmp	.+138    	; 0x8fe <__stack+0x9f>
				return APP_STATUS_ERROR_NOK;
				Delay_ms(500);
     874:	24 ef       	ldi	r18, 0xF4	; 244
     876:	31 e0       	ldi	r19, 0x01	; 1
     878:	40 e0       	ldi	r20, 0x00	; 0
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
				Lcd_clear();
     888:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     894:	81 30       	cpi	r24, 0x01	; 1
     896:	a9 f5       	brne	.+106    	; 0x902 <__stack+0xa3>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     898:	87 eb       	ldi	r24, 0xB7	; 183
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     8a0:	81 30       	cpi	r24, 0x01	; 1
     8a2:	e1 f0       	breq	.+56     	; 0x8dc <__stack+0x7d>
     8a4:	30 c0       	rjmp	.+96     	; 0x906 <__stack+0xa7>
				return APP_STATUS_ERROR_NOK;
			}else
			{
				Lcd_clear();
     8a6:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     8b2:	81 30       	cpi	r24, 0x01	; 1
     8b4:	51 f5       	brne	.+84     	; 0x90a <__stack+0xab>
					return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Please Wait") != LCD_STATUS_ERROR_OK)
     8b6:	8c e5       	ldi	r24, 0x5C	; 92
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     8be:	81 30       	cpi	r24, 0x01	; 1
     8c0:	31 f5       	brne	.+76     	; 0x90e <__stack+0xaf>
					return APP_STATUS_ERROR_NOK;
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     8c8:	81 30       	cpi	r24, 0x01	; 1
     8ca:	19 f5       	brne	.+70     	; 0x912 <__stack+0xb3>
					return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Processing...") != LCD_STATUS_ERROR_OK)
     8cc:	88 e6       	ldi	r24, 0x68	; 104
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	f9 f0       	breq	.+62     	; 0x916 <__stack+0xb7>
					return APP_STATUS_ERROR_NOK;
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	1e c0       	rjmp	.+60     	; 0x918 <__stack+0xb9>
				
				return APP_STATUS_PIN_CORRECT;
			}
		}
		Delay_ms(155);
     8dc:	2b e9       	ldi	r18, 0x9B	; 155
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e0       	ldi	r20, 0x00	; 0
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
	}	
     8f0:	91 cf       	rjmp	.-222    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		{
			if(stringCompare(au8_inputKPD, gstr_userCardData.au8_pinNum) != 1)
			{
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	11 c0       	rjmp	.+34     	; 0x918 <__stack+0xb9>
				if(Lcd_printString((uint8_t*)"Incorrect PIN") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	0f c0       	rjmp	.+30     	; 0x918 <__stack+0xb9>
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	0d c0       	rjmp	.+26     	; 0x918 <__stack+0xb9>
				if(Lcd_printString((uint8_t*)"Try Again") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	0b c0       	rjmp	.+22     	; 0x918 <__stack+0xb9>
				Delay_ms(500);
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	09 c0       	rjmp	.+18     	; 0x918 <__stack+0xb9>
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	07 c0       	rjmp	.+14     	; 0x918 <__stack+0xb9>
			}else
			{
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	05 c0       	rjmp	.+10     	; 0x918 <__stack+0xb9>
				if(Lcd_printString((uint8_t*)"Please Wait") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	03 c0       	rjmp	.+6      	; 0x918 <__stack+0xb9>
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	01 c0       	rjmp	.+2      	; 0x918 <__stack+0xb9>
				if(Lcd_printString((uint8_t*)"Processing...") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
				
				return APP_STATUS_PIN_CORRECT;
     916:	88 e0       	ldi	r24, 0x08	; 8
			}
		}
		Delay_ms(155);
	}	
}
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <AppUSER_startProcess>:
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to start processing the card.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
     928:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	09 f0       	breq	.+2      	; 0x93a <AppUSER_startProcess+0x12>
     938:	8f c0       	rjmp	.+286    	; 0xa58 <AppUSER_startProcess+0x130>
		return APP_STATUS_ERROR_NOK;
	enuApp_Status_t PAN_status = AppUSER_checkPan();
     93a:	0e 94 4e 01 	call	0x29c	; 0x29c <AppUSER_checkPan>
	if(PAN_status == APP_STATUS_PAN_NOT_FOUND)
     93e:	8a 30       	cpi	r24, 0x0A	; 10
     940:	f9 f4       	brne	.+62     	; 0x980 <AppUSER_startProcess+0x58>
	{
		Lcd_clear();
     942:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
		if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	09 f0       	breq	.+2      	; 0x954 <AppUSER_startProcess+0x2c>
     952:	84 c0       	rjmp	.+264    	; 0xa5c <AppUSER_startProcess+0x134>
			return APP_STATUS_ERROR_NOK;
		if(Lcd_printString((uint8_t*)"Your Card is not") != LCD_STATUS_ERROR_OK)
     954:	86 ec       	ldi	r24, 0xC6	; 198
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     95c:	81 30       	cpi	r24, 0x01	; 1
     95e:	09 f0       	breq	.+2      	; 0x962 <AppUSER_startProcess+0x3a>
     960:	7f c0       	rjmp	.+254    	; 0xa60 <AppUSER_startProcess+0x138>
			return APP_STATUS_ERROR_NOK;
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	09 f0       	breq	.+2      	; 0x96e <AppUSER_startProcess+0x46>
     96c:	7b c0       	rjmp	.+246    	; 0xa64 <AppUSER_startProcess+0x13c>
			return APP_STATUS_ERROR_NOK;
		if(Lcd_printString((uint8_t*)"in the Database") != LCD_STATUS_ERROR_OK)
     96e:	87 ed       	ldi	r24, 0xD7	; 215
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     976:	81 30       	cpi	r24, 0x01	; 1
     978:	09 f4       	brne	.+2      	; 0x97c <AppUSER_startProcess+0x54>
     97a:	76 c0       	rjmp	.+236    	; 0xa68 <AppUSER_startProcess+0x140>
			return APP_STATUS_ERROR_NOK;
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	08 95       	ret
		return APP_STATUS_PAN_NOT_FOUND;
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     980:	87 eb       	ldi	r24, 0xB7	; 183
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     988:	81 30       	cpi	r24, 0x01	; 1
     98a:	09 f0       	breq	.+2      	; 0x98e <AppUSER_startProcess+0x66>
     98c:	6f c0       	rjmp	.+222    	; 0xa6c <AppUSER_startProcess+0x144>
		return APP_STATUS_ERROR_NOK;
	if(AppUSER_checkPin() != APP_STATUS_PIN_CORRECT)
     98e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <AppUSER_checkPin>
     992:	88 30       	cpi	r24, 0x08	; 8
     994:	09 f0       	breq	.+2      	; 0x998 <AppUSER_startProcess+0x70>
     996:	6c c0       	rjmp	.+216    	; 0xa70 <AppUSER_startProcess+0x148>
		return APP_STATUS_ERROR_NOK;
	Lcd_clear();
     998:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     9a4:	81 30       	cpi	r24, 0x01	; 1
     9a6:	09 f0       	breq	.+2      	; 0x9aa <AppUSER_startProcess+0x82>
     9a8:	65 c0       	rjmp	.+202    	; 0xa74 <AppUSER_startProcess+0x14c>
		return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"    Welcome") != LCD_STATUS_ERROR_OK)
     9aa:	87 ee       	ldi	r24, 0xE7	; 231
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     9b2:	81 30       	cpi	r24, 0x01	; 1
     9b4:	09 f0       	breq	.+2      	; 0x9b8 <AppUSER_startProcess+0x90>
     9b6:	60 c0       	rjmp	.+192    	; 0xa78 <AppUSER_startProcess+0x150>
		return APP_STATUS_ERROR_NOK;
	if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     9be:	81 30       	cpi	r24, 0x01	; 1
     9c0:	09 f0       	breq	.+2      	; 0x9c4 <AppUSER_startProcess+0x9c>
     9c2:	5c c0       	rjmp	.+184    	; 0xa7c <AppUSER_startProcess+0x154>
		return APP_STATUS_ERROR_OK;
	if(Lcd_printString(gstr_userCardData.au8_cardHolderName) != LCD_STATUS_ERROR_OK)
     9c4:	86 e5       	ldi	r24, 0x56	; 86
     9c6:	94 e0       	ldi	r25, 0x04	; 4
     9c8:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     9cc:	81 30       	cpi	r24, 0x01	; 1
     9ce:	09 f0       	breq	.+2      	; 0x9d2 <AppUSER_startProcess+0xaa>
     9d0:	57 c0       	rjmp	.+174    	; 0xa80 <AppUSER_startProcess+0x158>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(2000);
     9d2:	20 ed       	ldi	r18, 0xD0	; 208
     9d4:	37 e0       	ldi	r19, 0x07	; 7
     9d6:	40 e0       	ldi	r20, 0x00	; 0
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
	
	Lcd_clear();
     9e6:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <AppUSER_startProcess+0xd0>
     9f6:	46 c0       	rjmp	.+140    	; 0xa84 <AppUSER_startProcess+0x15c>
		return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"  Your Balance") != LCD_STATUS_ERROR_OK)
     9f8:	83 ef       	ldi	r24, 0xF3	; 243
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     a00:	81 30       	cpi	r24, 0x01	; 1
     a02:	09 f0       	breq	.+2      	; 0xa06 <AppUSER_startProcess+0xde>
     a04:	41 c0       	rjmp	.+130    	; 0xa88 <AppUSER_startProcess+0x160>
		return APP_STATUS_ERROR_NOK;
	if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	f1 f5       	brne	.+124    	; 0xa8c <AppUSER_startProcess+0x164>
		return APP_STATUS_ERROR_OK;
	if(Lcd_printString(gstr_clientdata.au8_Balance) != LCD_STATUS_ERROR_OK)
     a10:	8e e4       	ldi	r24, 0x4E	; 78
     a12:	94 e0       	ldi	r25, 0x04	; 4
     a14:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     a18:	81 30       	cpi	r24, 0x01	; 1
     a1a:	d1 f5       	brne	.+116    	; 0xa90 <AppUSER_startProcess+0x168>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(2000);
     a1c:	20 ed       	ldi	r18, 0xD0	; 208
     a1e:	37 e0       	ldi	r19, 0x07	; 7
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
	
	Lcd_clear();
     a30:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     a3c:	81 30       	cpi	r24, 0x01	; 1
     a3e:	51 f5       	brne	.+84     	; 0xa94 <AppUSER_startProcess+0x16c>
		return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     a40:	8f e4       	ldi	r24, 0x4F	; 79
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     a48:	81 30       	cpi	r24, 0x01	; 1
     a4a:	31 f5       	brne	.+76     	; 0xa98 <AppUSER_startProcess+0x170>
		return APP_STATUS_ERROR_NOK;
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
     a4c:	0e 94 31 02 	call	0x462	; 0x462 <AppUSER_startTransaction>
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	19 f1       	breq	.+70     	; 0xa9a <AppUSER_startProcess+0x172>
		return APP_STATUS_ERROR_NOK;
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	08 95       	ret
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	08 95       	ret
	enuApp_Status_t PAN_status = AppUSER_checkPan();
	if(PAN_status == APP_STATUS_PAN_NOT_FOUND)
	{
		Lcd_clear();
		if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	08 95       	ret
		if(Lcd_printString((uint8_t*)"Your Card is not") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	08 95       	ret
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	08 95       	ret
		if(Lcd_printString((uint8_t*)"in the Database") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		return APP_STATUS_PAN_NOT_FOUND;
     a68:	8a e0       	ldi	r24, 0x0A	; 10
     a6a:	08 95       	ret
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	08 95       	ret
	if(AppUSER_checkPin() != APP_STATUS_PIN_CORRECT)
		return APP_STATUS_ERROR_NOK;
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	08 95       	ret
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	08 95       	ret
	if(Lcd_printString((uint8_t*)"    Welcome") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	08 95       	ret
	if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_OK;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	08 95       	ret
	if(Lcd_printString(gstr_userCardData.au8_cardHolderName) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	08 95       	ret
	Delay_ms(2000);
	
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	08 95       	ret
	if(Lcd_printString((uint8_t*)"  Your Balance") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	08 95       	ret
	if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_OK;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	08 95       	ret
	if(Lcd_printString(gstr_clientdata.au8_Balance) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	08 95       	ret
	Delay_ms(2000);
	
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	08 95       	ret
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a98:	80 e0       	ldi	r24, 0x00	; 0
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     a9a:	08 95       	ret

00000a9c <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	cf 5f       	subi	r28, 0xFF	; 255
     aaa:	d1 09       	sbc	r29, r1
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     ab8:	ce 01       	movw	r24, r28
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	2f ef       	ldi	r18, 0xFF	; 255
     abe:	fc 01       	movw	r30, r24
     ac0:	11 92       	st	Z+, r1
     ac2:	2a 95       	dec	r18
     ac4:	e9 f7       	brne	.-6      	; 0xac0 <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
     ac6:	0e 94 12 10 	call	0x2024	; 0x2024 <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
     aca:	85 30       	cpi	r24, 0x05	; 5
     acc:	39 f4       	brne	.+14     	; 0xadc <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
     ace:	b8 01       	movw	r22, r16
     ad0:	ce 01       	movw	r24, r28
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	0e 94 05 19 	call	0x320a	; 0x320a <stringCopy>
		return APP_STATUS_ERROR_OK;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     adc:	81 30       	cpi	r24, 0x01	; 1
     ade:	11 f0       	breq	.+4      	; 0xae4 <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
     ae4:	86 e0       	ldi	r24, 0x06	; 6
}
     ae6:	c1 50       	subi	r28, 0x01	; 1
     ae8:	df 4f       	sbci	r29, 0xFF	; 255
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	08 95       	ret

00000afe <AppADMIN_getInput>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the ADMIN Input Choice.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getInput(uint8_t* pu8_data)
{
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Your Input: ") != TERMINAL_STATUS_ERROR_OK)
     b04:	82 e0       	ldi	r24, 0x02	; 2
     b06:	92 e0       	ldi	r25, 0x02	; 2
     b08:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     b0c:	81 30       	cpi	r24, 0x01	; 1
     b0e:	c1 f4       	brne	.+48     	; 0xb40 <AppADMIN_getInput+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     b10:	ce 01       	movw	r24, r28
     b12:	0e 94 4e 05 	call	0xa9c	; 0xa9c <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     b16:	81 30       	cpi	r24, 0x01	; 1
     b18:	29 f0       	breq	.+10     	; 0xb24 <AppADMIN_getInput+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     b1a:	11 f0       	breq	.+4      	; 0xb20 <AppADMIN_getInput+0x22>
     b1c:	86 30       	cpi	r24, 0x06	; 6
     b1e:	91 f4       	brne	.+36     	; 0xb44 <AppADMIN_getInput+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     b20:	86 30       	cpi	r24, 0x06	; 6
     b22:	b1 f3       	breq	.-20     	; 0xb10 <AppADMIN_getInput+0x12>
		
		if (pu8_data[1] == '\0')
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	88 23       	and	r24, r24
     b28:	79 f0       	breq	.+30     	; 0xb48 <AppADMIN_getInput+0x4a>
		break;
		EmptyString(pu8_data);
     b2a:	ce 01       	movw	r24, r28
     b2c:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
     b30:	8f e0       	ldi	r24, 0x0F	; 15
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	21 f3       	breq	.-56     	; 0xb04 <AppADMIN_getInput+0x6>
		return APP_STATUS_ERROR_NOK;
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	05 c0       	rjmp	.+10     	; 0xb4a <AppADMIN_getInput+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Your Input: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	03 c0       	rjmp	.+6      	; 0xb4a <AppADMIN_getInput+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	01 c0       	rjmp	.+2      	; 0xb4a <AppADMIN_getInput+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     b48:	81 e0       	ldi	r24, 0x01	; 1
}
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	08 95       	ret

00000b50 <AppADMIN_getnewMaxAmount>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getnewMaxAmount(uint8_t* pu8_data)
{
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Max Amount: ") != TERMINAL_STATUS_ERROR_OK)
     b56:	88 e3       	ldi	r24, 0x38	; 56
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     b5e:	81 30       	cpi	r24, 0x01	; 1
     b60:	d9 f4       	brne	.+54     	; 0xb98 <AppADMIN_getnewMaxAmount+0x48>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     b62:	ce 01       	movw	r24, r28
     b64:	0e 94 4e 05 	call	0xa9c	; 0xa9c <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	29 f0       	breq	.+10     	; 0xb76 <AppADMIN_getnewMaxAmount+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     b6c:	11 f0       	breq	.+4      	; 0xb72 <AppADMIN_getnewMaxAmount+0x22>
     b6e:	86 30       	cpi	r24, 0x06	; 6
     b70:	a9 f4       	brne	.+42     	; 0xb9c <AppADMIN_getnewMaxAmount+0x4c>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     b72:	86 30       	cpi	r24, 0x06	; 6
     b74:	b1 f3       	breq	.-20     	; 0xb62 <AppADMIN_getnewMaxAmount+0x12>
		
		if ((pu8_data[7] == '\0') && (pu8_data[4] == '.'))
     b76:	8f 81       	ldd	r24, Y+7	; 0x07
     b78:	81 11       	cpse	r24, r1
     b7a:	03 c0       	rjmp	.+6      	; 0xb82 <AppADMIN_getnewMaxAmount+0x32>
     b7c:	8c 81       	ldd	r24, Y+4	; 0x04
     b7e:	8e 32       	cpi	r24, 0x2E	; 46
     b80:	79 f0       	breq	.+30     	; 0xba0 <AppADMIN_getnewMaxAmount+0x50>
			break;
		EmptyString(pu8_data);
     b82:	ce 01       	movw	r24, r28
     b84:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
     b88:	85 e4       	ldi	r24, 0x45	; 69
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	09 f3       	breq	.-62     	; 0xb56 <AppADMIN_getnewMaxAmount+0x6>
			return APP_STATUS_ERROR_NOK;
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	05 c0       	rjmp	.+10     	; 0xba2 <AppADMIN_getnewMaxAmount+0x52>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Max Amount: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	03 c0       	rjmp	.+6      	; 0xba2 <AppADMIN_getnewMaxAmount+0x52>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	01 c0       	rjmp	.+2      	; 0xba2 <AppADMIN_getnewMaxAmount+0x52>
			break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     ba0:	81 e0       	ldi	r24, 0x01	; 1
}
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	08 95       	ret

00000ba8 <AppADMIN_getCustomerPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerPAN(uint8_t* pu8_data)
{
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"PAN: ") != TERMINAL_STATUS_ERROR_OK)
     bae:	85 e7       	ldi	r24, 0x75	; 117
     bb0:	92 e0       	ldi	r25, 0x02	; 2
     bb2:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     bb6:	81 30       	cpi	r24, 0x01	; 1
     bb8:	c1 f4       	brne	.+48     	; 0xbea <AppADMIN_getCustomerPAN+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     bba:	ce 01       	movw	r24, r28
     bbc:	0e 94 4e 05 	call	0xa9c	; 0xa9c <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	29 f0       	breq	.+10     	; 0xbce <AppADMIN_getCustomerPAN+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     bc4:	11 f0       	breq	.+4      	; 0xbca <AppADMIN_getCustomerPAN+0x22>
     bc6:	86 30       	cpi	r24, 0x06	; 6
     bc8:	91 f4       	brne	.+36     	; 0xbee <AppADMIN_getCustomerPAN+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     bca:	86 30       	cpi	r24, 0x06	; 6
     bcc:	b1 f3       	breq	.-20     	; 0xbba <AppADMIN_getCustomerPAN+0x12>
		
		if (pu8_data[9] == '\0')
     bce:	89 85       	ldd	r24, Y+9	; 0x09
     bd0:	88 23       	and	r24, r24
     bd2:	79 f0       	breq	.+30     	; 0xbf2 <AppADMIN_getCustomerPAN+0x4a>
		break;
		EmptyString(pu8_data);
     bd4:	ce 01       	movw	r24, r28
     bd6:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
     bda:	8b e7       	ldi	r24, 0x7B	; 123
     bdc:	92 e0       	ldi	r25, 0x02	; 2
     bde:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	21 f3       	breq	.-56     	; 0xbae <AppADMIN_getCustomerPAN+0x6>
		return APP_STATUS_ERROR_NOK;
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	05 c0       	rjmp	.+10     	; 0xbf4 <AppADMIN_getCustomerPAN+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"PAN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	03 c0       	rjmp	.+6      	; 0xbf4 <AppADMIN_getCustomerPAN+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <AppADMIN_getCustomerPAN+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
}
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <AppADMIN_getCustomerBalance>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Balance by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the balance of the customer.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerBalance(uint8_t* pu8_data)
{
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Balance: ") != TERMINAL_STATUS_ERROR_OK)
     c00:	8b e9       	ldi	r24, 0x9B	; 155
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	c1 f4       	brne	.+48     	; 0xc3c <AppADMIN_getCustomerBalance+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     c0c:	ce 01       	movw	r24, r28
     c0e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	29 f0       	breq	.+10     	; 0xc20 <AppADMIN_getCustomerBalance+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     c16:	11 f0       	breq	.+4      	; 0xc1c <AppADMIN_getCustomerBalance+0x22>
     c18:	86 30       	cpi	r24, 0x06	; 6
     c1a:	91 f4       	brne	.+36     	; 0xc40 <AppADMIN_getCustomerBalance+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     c1c:	86 30       	cpi	r24, 0x06	; 6
     c1e:	b1 f3       	breq	.-20     	; 0xc0c <AppADMIN_getCustomerBalance+0x12>
		
		if (pu8_data[7] == '\0')
     c20:	8f 81       	ldd	r24, Y+7	; 0x07
     c22:	88 23       	and	r24, r24
     c24:	79 f0       	breq	.+30     	; 0xc44 <AppADMIN_getCustomerBalance+0x4a>
		break;
		EmptyString(pu8_data);
     c26:	ce 01       	movw	r24, r28
     c28:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters\r") != TERMINAL_STATUS_ERROR_OK)
     c2c:	85 ea       	ldi	r24, 0xA5	; 165
     c2e:	92 e0       	ldi	r25, 0x02	; 2
     c30:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	21 f3       	breq	.-56     	; 0xc00 <AppADMIN_getCustomerBalance+0x6>
		return APP_STATUS_ERROR_NOK;
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	05 c0       	rjmp	.+10     	; 0xc46 <AppADMIN_getCustomerBalance+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Balance: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <AppADMIN_getCustomerBalance+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	01 c0       	rjmp	.+2      	; 0xc46 <AppADMIN_getCustomerBalance+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     c44:	81 e0       	ldi	r24, 0x01	; 1
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <AppADMIN_getAtmPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input ATM PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the atm pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getAtmPIN(uint8_t* pu8_data)
{
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	
	Terminal_enablePasswordMode();
     c52:	0e 94 2d 10 	call	0x205a	; 0x205a <Terminal_enablePasswordMode>
	do
	{
		if(Terminal_Out((uint8_t*)"ATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
     c56:	89 ec       	ldi	r24, 0xC9	; 201
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	69 f5       	brne	.+90     	; 0xcbc <AppADMIN_getAtmPIN+0x70>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     c62:	ce 01       	movw	r24, r28
     c64:	0e 94 4e 05 	call	0xa9c	; 0xa9c <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	29 f0       	breq	.+10     	; 0xc76 <AppADMIN_getAtmPIN+0x2a>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     c6c:	11 f0       	breq	.+4      	; 0xc72 <AppADMIN_getAtmPIN+0x26>
     c6e:	86 30       	cpi	r24, 0x06	; 6
     c70:	39 f5       	brne	.+78     	; 0xcc0 <AppADMIN_getAtmPIN+0x74>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     c72:	86 30       	cpi	r24, 0x06	; 6
     c74:	b1 f3       	breq	.-20     	; 0xc62 <AppADMIN_getAtmPIN+0x16>
		
		if(stringCompare(ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
     c76:	be 01       	movw	r22, r28
     c78:	80 e6       	ldi	r24, 0x60	; 96
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 c6 18 	call	0x318c	; 0x318c <stringCompare>
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	39 f0       	breq	.+14     	; 0xc92 <AppADMIN_getAtmPIN+0x46>
		{
			if(Terminal_Out((uint8_t*)"Incorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
     c84:	83 ed       	ldi	r24, 0xD3	; 211
     c86:	92 e0       	ldi	r25, 0x02	; 2
     c88:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	41 f0       	breq	.+16     	; 0xca0 <AppADMIN_getAtmPIN+0x54>
     c90:	19 c0       	rjmp	.+50     	; 0xcc4 <AppADMIN_getAtmPIN+0x78>
				return APP_STATUS_ERROR_NOK;
		}else
		{
			if(Terminal_Out((uint8_t*)"Loading...\r") != TERMINAL_STATUS_ERROR_OK)
     c92:	82 ee       	ldi	r24, 0xE2	; 226
     c94:	92 e0       	ldi	r25, 0x02	; 2
     c96:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	a9 f4       	brne	.+42     	; 0xcc8 <AppADMIN_getAtmPIN+0x7c>
     c9e:	0a c0       	rjmp	.+20     	; 0xcb4 <AppADMIN_getAtmPIN+0x68>
				return APP_STATUS_ERROR_NOK;
			break;
		}
		EmptyString(pu8_data);
     ca0:	ce 01       	movw	r24, r28
     ca2:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
     ca6:	8e ee       	ldi	r24, 0xEE	; 238
     ca8:	92 e0       	ldi	r25, 0x02	; 2
     caa:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	91 f2       	breq	.-92     	; 0xc56 <AppADMIN_getAtmPIN+0xa>
     cb2:	0c c0       	rjmp	.+24     	; 0xccc <AppADMIN_getAtmPIN+0x80>
			return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
     cb4:	0e 94 31 10 	call	0x2062	; 0x2062 <Terminal_disablePasswordMode>
	return APP_STATUS_ERROR_OK;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	09 c0       	rjmp	.+18     	; 0xcce <AppADMIN_getAtmPIN+0x82>
	
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"ATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	07 c0       	rjmp	.+14     	; 0xcce <AppADMIN_getAtmPIN+0x82>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <AppADMIN_getAtmPIN+0x82>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringCompare(ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
		{
			if(Terminal_Out((uint8_t*)"Incorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <AppADMIN_getAtmPIN+0x82>
		}else
		{
			if(Terminal_Out((uint8_t*)"Loading...\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	01 c0       	rjmp	.+2      	; 0xcce <AppADMIN_getAtmPIN+0x82>
			break;
		}
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     ccc:	80 e0       	ldi	r24, 0x00	; 0
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_ERROR_OK;
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <AppADMIN_saveNewCustomerData>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save PAN and Balance of a new Customer in the EEPROM
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveNewCustomerData(void)
{
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*16 ;
     cd8:	20 91 42 04 	lds	r18, 0x0442	; 0x800442 <gu8_registeredAccNum>
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	c9 01       	movw	r24, r18
     ce0:	02 96       	adiw	r24, 0x02	; 2
     ce2:	d8 2f       	mov	r29, r24
     ce4:	d2 95       	swap	r29
     ce6:	d0 7f       	andi	r29, 0xF0	; 240
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*16 ;
     ce8:	2d 5f       	subi	r18, 0xFD	; 253
     cea:	3f 4f       	sbci	r19, 0xFF	; 255
     cec:	c2 2f       	mov	r28, r18
     cee:	c2 95       	swap	r28
     cf0:	c0 7f       	andi	r28, 0xF0	; 240
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
     cf2:	84 e4       	ldi	r24, 0x44	; 68
     cf4:	94 e0       	ldi	r25, 0x04	; 4
     cf6:	0e 94 ba 18 	call	0x3174	; 0x3174 <stringLength>
     cfa:	48 2f       	mov	r20, r24
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	64 e4       	ldi	r22, 0x44	; 68
     d00:	74 e0       	ldi	r23, 0x04	; 4
     d02:	8d 2f       	mov	r24, r29
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Eeprom_24_writePacket>
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <AppADMIN_saveNewCustomerData+0x70>
		return APP_STATUS_ERROR_NOK;
		
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     d0e:	8e e4       	ldi	r24, 0x4E	; 78
     d10:	94 e0       	ldi	r25, 0x04	; 4
     d12:	0e 94 ba 18 	call	0x3174	; 0x3174 <stringLength>
     d16:	48 2f       	mov	r20, r24
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	6e e4       	ldi	r22, 0x4E	; 78
     d1c:	74 e0       	ldi	r23, 0x04	; 4
     d1e:	8c 2f       	mov	r24, r28
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Eeprom_24_writePacket>
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	79 f4       	brne	.+30     	; 0xd48 <AppADMIN_saveNewCustomerData+0x74>
		return APP_STATUS_ERROR_NOK;
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     d2a:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <gu8_registeredAccNum>
     d2e:	6f 5f       	subi	r22, 0xFF	; 255
     d30:	60 93 42 04 	sts	0x0442, r22	; 0x800442 <gu8_registeredAccNum>
     d34:	82 e0       	ldi	r24, 0x02	; 2
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <Eeprom_24_writeByte>
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	31 f0       	breq	.+12     	; 0xd4c <AppADMIN_saveNewCustomerData+0x78>
		return APP_STATUS_ERROR_NOK;
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	05 c0       	rjmp	.+10     	; 0xd4e <AppADMIN_saveNewCustomerData+0x7a>
{
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*16 ;
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*16 ;
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <AppADMIN_saveNewCustomerData+0x7a>
		
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <AppADMIN_saveNewCustomerData+0x7a>
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
}
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	08 95       	ret

00000d54 <AppUSER_getCardData>:
* Parameters (out): pstr_CardData - Structure to save the card's data in.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the Card data Struct
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_getCardData(strCardData_t* pstr_CardData, uint8_t *pu8_dataString)
{
     d54:	ac 01       	movw	r20, r24
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
     d56:	20 e0       	ldi	r18, 0x00	; 0
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	0a c0       	rjmp	.+20     	; 0xd70 <AppUSER_getCardData+0x1c>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     d5c:	fb 01       	movw	r30, r22
     d5e:	e9 0f       	add	r30, r25
     d60:	f1 1d       	adc	r31, r1
     d62:	80 81       	ld	r24, Z
     d64:	fa 01       	movw	r30, r20
     d66:	e2 0f       	add	r30, r18
     d68:	f1 1d       	adc	r31, r1
     d6a:	80 83       	st	Z, r24
		u8_dataIndex++;
     d6c:	2f 5f       	subi	r18, 0xFF	; 255
{
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     d6e:	9f 5f       	subi	r25, 0xFF	; 255
     d70:	9a 30       	cpi	r25, 0x0A	; 10
     d72:	a0 f3       	brcs	.-24     	; 0xd5c <AppUSER_getCardData+0x8>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
     d74:	fa 01       	movw	r30, r20
     d76:	e2 0f       	add	r30, r18
     d78:	f1 1d       	adc	r31, r1
     d7a:	10 82       	st	Z, r1
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
     d7c:	20 e0       	ldi	r18, 0x00	; 0
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     d7e:	9b e0       	ldi	r25, 0x0B	; 11
     d80:	0a c0       	rjmp	.+20     	; 0xd96 <AppUSER_getCardData+0x42>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     d82:	fb 01       	movw	r30, r22
     d84:	e9 0f       	add	r30, r25
     d86:	f1 1d       	adc	r31, r1
     d88:	80 81       	ld	r24, Z
     d8a:	fa 01       	movw	r30, r20
     d8c:	e2 0f       	add	r30, r18
     d8e:	f1 1d       	adc	r31, r1
     d90:	82 87       	std	Z+10, r24	; 0x0a
		u8_dataIndex++;
     d92:	2f 5f       	subi	r18, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     d94:	9f 5f       	subi	r25, 0xFF	; 255
     d96:	94 31       	cpi	r25, 0x14	; 20
     d98:	a0 f3       	brcs	.-24     	; 0xd82 <AppUSER_getCardData+0x2e>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
     d9a:	fa 01       	movw	r30, r20
     d9c:	e2 0f       	add	r30, r18
     d9e:	f1 1d       	adc	r31, r1
     da0:	12 86       	std	Z+10, r1	; 0x0a
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
     da2:	90 e0       	ldi	r25, 0x00	; 0
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     da4:	85 e1       	ldi	r24, 0x15	; 21
     da6:	0a c0       	rjmp	.+20     	; 0xdbc <AppUSER_getCardData+0x68>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     da8:	fb 01       	movw	r30, r22
     daa:	e8 0f       	add	r30, r24
     dac:	f1 1d       	adc	r31, r1
     dae:	20 81       	ld	r18, Z
     db0:	fa 01       	movw	r30, r20
     db2:	e9 0f       	add	r30, r25
     db4:	f1 1d       	adc	r31, r1
     db6:	24 8b       	std	Z+20, r18	; 0x14
		u8_dataIndex++;
     db8:	9f 5f       	subi	r25, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     dba:	8f 5f       	subi	r24, 0xFF	; 255
     dbc:	89 31       	cpi	r24, 0x19	; 25
     dbe:	a0 f3       	brcs	.-24     	; 0xda8 <AppUSER_getCardData+0x54>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_pinNum[u8_dataIndex] = '\0';
     dc0:	fa 01       	movw	r30, r20
     dc2:	e9 0f       	add	r30, r25
     dc4:	f1 1d       	adc	r31, r1
     dc6:	14 8a       	std	Z+20, r1	; 0x14
	return APP_STATUS_ERROR_OK;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	08 95       	ret

00000dcc <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
     dcc:	1f 93       	push	r17
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	c0 52       	subi	r28, 0x20	; 32
     dd8:	d1 40       	sbci	r29, 0x01	; 1
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
     de4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <enuCurrentAppStatus>
     de8:	84 30       	cpi	r24, 0x04	; 4
     dea:	09 f0       	breq	.+2      	; 0xdee <App_update+0x22>
     dec:	9c c2       	rjmp	.+1336   	; 0x1326 <App_update+0x55a>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
     dee:	fe 01       	movw	r30, r28
     df0:	31 96       	adiw	r30, 0x01	; 1
     df2:	8a e0       	ldi	r24, 0x0A	; 10
     df4:	df 01       	movw	r26, r30
     df6:	1d 92       	st	X+, r1
     df8:	8a 95       	dec	r24
     dfa:	e9 f7       	brne	.-6      	; 0xdf6 <App_update+0x2a>
	static uint8_t u8_passFlag = 0;
	if(gu8_ATMMode == ATM_MODE_ADMIN)
     dfc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gu8_ATMMode>
     e00:	81 11       	cpse	r24, r1
     e02:	e7 c0       	rjmp	.+462    	; 0xfd2 <App_update+0x206>
	{ /**************** PROGRAMMING MODE ****************/
			uint8_t au8_tempPAN[10]={0};
     e04:	3a 96       	adiw	r30, 0x0a	; 10
     e06:	8a e0       	ldi	r24, 0x0A	; 10
     e08:	df 01       	movw	r26, r30
     e0a:	1d 92       	st	X+, r1
     e0c:	8a 95       	dec	r24
     e0e:	e9 f7       	brne	.-6      	; 0xe0a <App_update+0x3e>
			uint8_t au8_tempBalance[8]={0};
     e10:	e9 5f       	subi	r30, 0xF9	; 249
     e12:	fe 4f       	sbci	r31, 0xFE	; 254
     e14:	88 e0       	ldi	r24, 0x08	; 8
     e16:	df 01       	movw	r26, r30
     e18:	98 2f       	mov	r25, r24
     e1a:	1d 92       	st	X+, r1
     e1c:	9a 95       	dec	r25
     e1e:	e9 f7       	brne	.-6      	; 0xe1a <App_update+0x4e>
			uint8_t au8_Input[2]={0};
     e20:	c1 5e       	subi	r28, 0xE1	; 225
     e22:	de 4f       	sbci	r29, 0xFE	; 254
     e24:	19 82       	std	Y+1, r1	; 0x01
     e26:	18 82       	st	Y, r1
     e28:	cf 51       	subi	r28, 0x1F	; 31
     e2a:	d1 40       	sbci	r29, 0x01	; 1
			uint8_t au8_tempPinNum[5]={0};
     e2c:	38 96       	adiw	r30, 0x08	; 8
     e2e:	95 e0       	ldi	r25, 0x05	; 5
     e30:	df 01       	movw	r26, r30
     e32:	1d 92       	st	X+, r1
     e34:	9a 95       	dec	r25
     e36:	e9 f7       	brne	.-6      	; 0xe32 <App_update+0x66>
			uint8_t au8_tempMaxAmount[8]={0};
     e38:	70 97       	sbiw	r30, 0x10	; 16
     e3a:	df 01       	movw	r26, r30
     e3c:	1d 92       	st	X+, r1
     e3e:	8a 95       	dec	r24
     e40:	e9 f7       	brne	.-6      	; 0xe3c <App_update+0x70>
			
			if(u8_passFlag == 0)
     e42:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <u8_passFlag.2148>
     e46:	81 11       	cpse	r24, r1
     e48:	0a c0       	rjmp	.+20     	; 0xe5e <App_update+0x92>
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
     e4a:	ce 01       	movw	r24, r28
     e4c:	86 5e       	subi	r24, 0xE6	; 230
     e4e:	9e 4f       	sbci	r25, 0xFE	; 254
     e50:	0e 94 26 06 	call	0xc4c	; 0xc4c <AppADMIN_getAtmPIN>
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	09 f0       	breq	.+2      	; 0xe5a <App_update+0x8e>
     e58:	a2 c0       	rjmp	.+324    	; 0xf9e <App_update+0x1d2>
					return APP_STATUS_ERROR_NOK;
				u8_passFlag = 1;
     e5a:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <u8_passFlag.2148>
			}
			
			if(Terminal_Out((uint8_t*)"1.Add New Customer\r2.Update Max Amount\r3.Exit\r") != TERMINAL_STATUS_ERROR_OK)
     e5e:	8e e0       	ldi	r24, 0x0E	; 14
     e60:	93 e0       	ldi	r25, 0x03	; 3
     e62:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	09 f0       	breq	.+2      	; 0xe6c <App_update+0xa0>
     e6a:	9b c0       	rjmp	.+310    	; 0xfa2 <App_update+0x1d6>
				return APP_STATUS_ERROR_NOK;
				
			AppADMIN_getInput(au8_Input);
     e6c:	ce 01       	movw	r24, r28
     e6e:	81 5e       	subi	r24, 0xE1	; 225
     e70:	9e 4f       	sbci	r25, 0xFE	; 254
     e72:	0e 94 7f 05 	call	0xafe	; 0xafe <AppADMIN_getInput>
			if(au8_Input[0] == '1')//--------- New Customer OPTION -----------//
     e76:	c1 5e       	subi	r28, 0xE1	; 225
     e78:	de 4f       	sbci	r29, 0xFE	; 254
     e7a:	88 81       	ld	r24, Y
     e7c:	cf 51       	subi	r28, 0x1F	; 31
     e7e:	d1 40       	sbci	r29, 0x01	; 1
     e80:	81 33       	cpi	r24, 0x31	; 49
     e82:	b9 f5       	brne	.+110    	; 0xef2 <App_update+0x126>
			{
				/* Get the Customer's Primary Account Number from the ADMIN Terminal */
				if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     e84:	ce 01       	movw	r24, r28
     e86:	0b 96       	adiw	r24, 0x0b	; 11
     e88:	0e 94 d4 05 	call	0xba8	; 0xba8 <AppADMIN_getCustomerPAN>
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	09 f0       	breq	.+2      	; 0xe92 <App_update+0xc6>
     e90:	8a c0       	rjmp	.+276    	; 0xfa6 <App_update+0x1da>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
     e92:	64 e4       	ldi	r22, 0x44	; 68
     e94:	74 e0       	ldi	r23, 0x04	; 4
     e96:	ce 01       	movw	r24, r28
     e98:	0b 96       	adiw	r24, 0x0b	; 11
     e9a:	0e 94 05 19 	call	0x320a	; 0x320a <stringCopy>
				
				/* Get the Customer's Balance from the ADMIN Terminal */
				if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
     e9e:	ce 01       	movw	r24, r28
     ea0:	8e 5e       	subi	r24, 0xEE	; 238
     ea2:	9e 4f       	sbci	r25, 0xFE	; 254
     ea4:	0e 94 fd 05 	call	0xbfa	; 0xbfa <AppADMIN_getCustomerBalance>
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	09 f0       	breq	.+2      	; 0xeae <App_update+0xe2>
     eac:	7e c0       	rjmp	.+252    	; 0xfaa <App_update+0x1de>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
     eae:	6e e4       	ldi	r22, 0x4E	; 78
     eb0:	74 e0       	ldi	r23, 0x04	; 4
     eb2:	ce 01       	movw	r24, r28
     eb4:	8e 5e       	subi	r24, 0xEE	; 238
     eb6:	9e 4f       	sbci	r25, 0xFE	; 254
     eb8:	0e 94 05 19 	call	0x320a	; 0x320a <stringCopy>
				
				if(AppADMIN_saveNewCustomerData() != APP_STATUS_ERROR_OK)
     ebc:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <AppADMIN_saveNewCustomerData>
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	09 f0       	breq	.+2      	; 0xec6 <App_update+0xfa>
     ec4:	74 c0       	rjmp	.+232    	; 0xfae <App_update+0x1e2>
					return APP_STATUS_ERROR_NOK;
				EmptyString(au8_Input);
     ec6:	ce 01       	movw	r24, r28
     ec8:	81 5e       	subi	r24, 0xE1	; 225
     eca:	9e 4f       	sbci	r25, 0xFE	; 254
     ecc:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <EmptyString>
				if(gu8_registeredAccNum == 1)
     ed0:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <gu8_registeredAccNum>
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	09 f0       	breq	.+2      	; 0xeda <App_update+0x10e>
     ed8:	60 c0       	rjmp	.+192    	; 0xf9a <App_update+0x1ce>
				{
					gu8_initData = ATM_DB_FLAG_SET_VAL;
     eda:	8a ea       	ldi	r24, 0xAA	; 170
     edc:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <gu8_initData>
					if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
     ee0:	6a ea       	ldi	r22, 0xAA	; 170
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <Eeprom_24_writeByte>
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	09 f0       	breq	.+2      	; 0xef0 <App_update+0x124>
     eee:	61 c0       	rjmp	.+194    	; 0xfb2 <App_update+0x1e6>
     ef0:	54 c0       	rjmp	.+168    	; 0xf9a <App_update+0x1ce>
					return APP_STATUS_ERROR_NOK;
				}

			}else if(au8_Input[0] == '2')//--------- Max Amount OPTION -----------//
     ef2:	82 33       	cpi	r24, 0x32	; 50
     ef4:	f1 f4       	brne	.+60     	; 0xf32 <App_update+0x166>
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
     ef6:	ce 01       	movw	r24, r28
     ef8:	86 5f       	subi	r24, 0xF6	; 246
     efa:	9e 4f       	sbci	r25, 0xFE	; 254
     efc:	0e 94 a8 05 	call	0xb50	; 0xb50 <AppADMIN_getnewMaxAmount>
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
     f00:	ce 01       	movw	r24, r28
     f02:	86 5f       	subi	r24, 0xF6	; 246
     f04:	9e 4f       	sbci	r25, 0xFE	; 254
     f06:	0e 94 ba 18 	call	0x3174	; 0x3174 <stringLength>
     f0a:	48 2f       	mov	r20, r24
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	be 01       	movw	r22, r28
     f10:	66 5f       	subi	r22, 0xF6	; 246
     f12:	7e 4f       	sbci	r23, 0xFE	; 254
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Eeprom_24_writePacket>
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	09 f0       	breq	.+2      	; 0xf22 <App_update+0x156>
     f20:	4a c0       	rjmp	.+148    	; 0xfb6 <App_update+0x1ea>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempMaxAmount, gau8_maxAmount);
     f22:	65 e3       	ldi	r22, 0x35	; 53
     f24:	74 e0       	ldi	r23, 0x04	; 4
     f26:	ce 01       	movw	r24, r28
     f28:	86 5f       	subi	r24, 0xF6	; 246
     f2a:	9e 4f       	sbci	r25, 0xFE	; 254
     f2c:	0e 94 05 19 	call	0x320a	; 0x320a <stringCopy>
     f30:	34 c0       	rjmp	.+104    	; 0xf9a <App_update+0x1ce>
					
			}else if(au8_Input[0] == '3')//--------- EXIT OPTION -----------//
     f32:	83 33       	cpi	r24, 0x33	; 51
     f34:	91 f5       	brne	.+100    	; 0xf9a <App_update+0x1ce>
			{
				if(gu8_initData == ATM_DB_FLAG_SET_VAL)
     f36:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <gu8_initData>
     f3a:	8a 3a       	cpi	r24, 0xAA	; 170
     f3c:	31 f5       	brne	.+76     	; 0xf8a <App_update+0x1be>
				{
					u8_passFlag = 0;
     f3e:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <u8_passFlag.2148>
					gu8_ATMMode = ATM_MODE_USER;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu8_ATMMode>
					Lcd_clear();
     f48:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
					if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     f4c:	8d e2       	ldi	r24, 0x2D	; 45
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	89 f5       	brne	.+98     	; 0xfba <App_update+0x1ee>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	69 f5       	brne	.+90     	; 0xfbe <App_update+0x1f2>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
     f64:	80 e1       	ldi	r24, 0x10	; 16
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	49 f5       	brne	.+82     	; 0xfc2 <App_update+0x1f6>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	31 f5       	brne	.+76     	; 0xfc6 <App_update+0x1fa>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
     f7a:	8e e1       	ldi	r24, 0x1E	; 30
     f7c:	91 e0       	ldi	r25, 0x01	; 1
     f7e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	11 f1       	breq	.+68     	; 0xfca <App_update+0x1fe>
						return APP_STATUS_ERROR_NOK;
     f86:	10 e0       	ldi	r17, 0x00	; 0
     f88:	cf c1       	rjmp	.+926    	; 0x1328 <App_update+0x55c>
					
					return APP_STATUS_ERROR_OK;
				}else
				{
					if(Terminal_Out((uint8_t*)"Data Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
     f8a:	8d e3       	ldi	r24, 0x3D	; 61
     f8c:	93 e0       	ldi	r25, 0x03	; 3
     f8e:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	e1 f0       	breq	.+56     	; 0xfce <App_update+0x202>
						return APP_STATUS_ERROR_NOK;
     f96:	10 e0       	ldi	r17, 0x00	; 0
     f98:	c7 c1       	rjmp	.+910    	; 0x1328 <App_update+0x55c>
				}
			}
	/****************************************************************/
	}
	
	return APP_STATUS_ERROR_OK;
     f9a:	11 e0       	ldi	r17, 0x01	; 1
     f9c:	c5 c1       	rjmp	.+906    	; 0x1328 <App_update+0x55c>
			
			if(u8_passFlag == 0)
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     f9e:	10 e0       	ldi	r17, 0x00	; 0
     fa0:	c3 c1       	rjmp	.+902    	; 0x1328 <App_update+0x55c>
				u8_passFlag = 1;
			}
			
			if(Terminal_Out((uint8_t*)"1.Add New Customer\r2.Update Max Amount\r3.Exit\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     fa2:	10 e0       	ldi	r17, 0x00	; 0
     fa4:	c1 c1       	rjmp	.+898    	; 0x1328 <App_update+0x55c>
			AppADMIN_getInput(au8_Input);
			if(au8_Input[0] == '1')//--------- New Customer OPTION -----------//
			{
				/* Get the Customer's Primary Account Number from the ADMIN Terminal */
				if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     fa6:	10 e0       	ldi	r17, 0x00	; 0
     fa8:	bf c1       	rjmp	.+894    	; 0x1328 <App_update+0x55c>
				stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
				
				/* Get the Customer's Balance from the ADMIN Terminal */
				if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     faa:	10 e0       	ldi	r17, 0x00	; 0
     fac:	bd c1       	rjmp	.+890    	; 0x1328 <App_update+0x55c>
				stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
				
				if(AppADMIN_saveNewCustomerData() != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     fae:	10 e0       	ldi	r17, 0x00	; 0
     fb0:	bb c1       	rjmp	.+886    	; 0x1328 <App_update+0x55c>
				EmptyString(au8_Input);
				if(gu8_registeredAccNum == 1)
				{
					gu8_initData = ATM_DB_FLAG_SET_VAL;
					if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     fb2:	10 e0       	ldi	r17, 0x00	; 0
     fb4:	b9 c1       	rjmp	.+882    	; 0x1328 <App_update+0x55c>

			}else if(au8_Input[0] == '2')//--------- Max Amount OPTION -----------//
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     fb6:	10 e0       	ldi	r17, 0x00	; 0
     fb8:	b7 c1       	rjmp	.+878    	; 0x1328 <App_update+0x55c>
				{
					u8_passFlag = 0;
					gu8_ATMMode = ATM_MODE_USER;
					Lcd_clear();
					if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     fba:	10 e0       	ldi	r17, 0x00	; 0
     fbc:	b5 c1       	rjmp	.+874    	; 0x1328 <App_update+0x55c>
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
     fbe:	11 e0       	ldi	r17, 0x01	; 1
     fc0:	b3 c1       	rjmp	.+870    	; 0x1328 <App_update+0x55c>
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     fc2:	10 e0       	ldi	r17, 0x00	; 0
     fc4:	b1 c1       	rjmp	.+866    	; 0x1328 <App_update+0x55c>
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
     fc6:	11 e0       	ldi	r17, 0x01	; 1
     fc8:	af c1       	rjmp	.+862    	; 0x1328 <App_update+0x55c>
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					
					return APP_STATUS_ERROR_OK;
     fca:	11 e0       	ldi	r17, 0x01	; 1
     fcc:	ad c1       	rjmp	.+858    	; 0x1328 <App_update+0x55c>
				}else
				{
					if(Terminal_Out((uint8_t*)"Data Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					return APP_STATUS_ERROR_OK;
     fce:	11 e0       	ldi	r17, 0x01	; 1
     fd0:	ab c1       	rjmp	.+854    	; 0x1328 <App_update+0x55c>
	{							/************* User Mode **************/
		/********************************************************************************************/
		/************************************ ADMIN ENTERED ****************************************/
		/********************************************************************************************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
     fd2:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <gu8_ADMIN_Request>
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	31 f4       	brne	.+12     	; 0xfe6 <App_update+0x21a>
     fda:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <gu8_USER_Mode_State>
     fde:	81 11       	cpse	r24, r1
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <App_update+0x21a>
			{
				gu8_ATMMode = ATM_MODE_ADMIN;
     fe2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <gu8_ATMMode>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
     fe6:	ce 01       	movw	r24, r28
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	0e 94 4e 05 	call	0xa9c	; 0xa9c <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	f1 f5       	brne	.+124    	; 0x106e <App_update+0x2a2>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
     ff2:	67 e1       	ldi	r22, 0x17	; 23
     ff4:	74 e0       	ldi	r23, 0x04	; 4
     ff6:	ce 01       	movw	r24, r28
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	0e 94 c6 18 	call	0x318c	; 0x318c <stringCompare>
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	d9 f5       	brne	.+118    	; 0x1078 <App_update+0x2ac>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
    1002:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <gu8_USER_Mode_State>
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	51 f4       	brne	.+20     	; 0x101e <App_update+0x252>
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
    100a:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <gu8_ADMIN_Request>
						if(Terminal_Out((uint8_t*)"ATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
    100e:	8a e7       	ldi	r24, 0x7A	; 122
    1010:	93 e0       	ldi	r25, 0x03	; 3
    1012:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	09 f0       	breq	.+2      	; 0x101c <App_update+0x250>
    101a:	6f c1       	rjmp	.+734    	; 0x12fa <App_update+0x52e>
    101c:	2d c0       	rjmp	.+90     	; 0x1078 <App_update+0x2ac>
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The ATM is not used by User */
					{
						gu8_ATMMode = ATM_MODE_ADMIN;
    101e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <gu8_ATMMode>
						Lcd_clear();
    1022:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
						if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	09 f0       	breq	.+2      	; 0x1034 <App_update+0x268>
    1032:	65 c1       	rjmp	.+714    	; 0x12fe <App_update+0x532>
							return APP_STATUS_ERROR_OK;
						if(Lcd_printString((uint8_t*)"*******ATM******") != LCD_STATUS_ERROR_OK)
    1034:	8c ed       	ldi	r24, 0xDC	; 220
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	09 f0       	breq	.+2      	; 0x1042 <App_update+0x276>
    1040:	60 c1       	rjmp	.+704    	; 0x1302 <App_update+0x536>
							return APP_STATUS_ERROR_NOK;
						if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	09 f0       	breq	.+2      	; 0x104e <App_update+0x282>
    104c:	5c c1       	rjmp	.+696    	; 0x1306 <App_update+0x53a>
							return APP_STATUS_ERROR_OK;
						if(Lcd_printString((uint8_t*)"*****LOCKED*****") != LCD_STATUS_ERROR_OK)
    104e:	8d ee       	ldi	r24, 0xED	; 237
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	09 f0       	breq	.+2      	; 0x105c <App_update+0x290>
    105a:	57 c1       	rjmp	.+686    	; 0x130a <App_update+0x53e>
							return APP_STATUS_ERROR_NOK;
						if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
    105c:	8e ef       	ldi	r24, 0xFE	; 254
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Terminal_Out>
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	09 f4       	brne	.+2      	; 0x106a <App_update+0x29e>
    1068:	52 c1       	rjmp	.+676    	; 0x130e <App_update+0x542>
							return APP_STATUS_ERROR_NOK;
    106a:	10 e0       	ldi	r17, 0x00	; 0
    106c:	5d c1       	rjmp	.+698    	; 0x1328 <App_update+0x55c>
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	19 f0       	breq	.+6      	; 0x1078 <App_update+0x2ac>
    1072:	86 30       	cpi	r24, 0x06	; 6
    1074:	09 f0       	breq	.+2      	; 0x1078 <App_update+0x2ac>
    1076:	4d c1       	rjmp	.+666    	; 0x1312 <App_update+0x546>
				return APP_STATUS_ERROR_NOK;
			/****************************************************************/
			/********************** Getting Input from User ************************/
			uint8_t au8_data=0;
    1078:	ce 5e       	subi	r28, 0xEE	; 238
    107a:	de 4f       	sbci	r29, 0xFE	; 254
    107c:	18 82       	st	Y, r1
    107e:	c2 51       	subi	r28, 0x12	; 18
    1080:	d1 40       	sbci	r29, 0x01	; 1
			enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&au8_data);
    1082:	ce 01       	movw	r24, r28
    1084:	8e 5e       	subi	r24, 0xEE	; 238
    1086:	9e 4f       	sbci	r25, 0xFE	; 254
    1088:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <Keypad_readKey>
			if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
    108c:	86 30       	cpi	r24, 0x06	; 6
    108e:	09 f0       	breq	.+2      	; 0x1092 <App_update+0x2c6>
    1090:	1a c1       	rjmp	.+564    	; 0x12c6 <App_update+0x4fa>
			{
			/********************************************************************************************/
			/************************************ KEYPAD PRESSED ****************************************/
			/********************************************************************************************/
				/********* Insert Card Chosen ********/
				if(au8_data == '1') 
    1092:	ce 5e       	subi	r28, 0xEE	; 238
    1094:	de 4f       	sbci	r29, 0xFE	; 254
    1096:	88 81       	ld	r24, Y
    1098:	c2 51       	subi	r28, 0x12	; 18
    109a:	d1 40       	sbci	r29, 0x01	; 1
    109c:	81 33       	cpi	r24, 0x31	; 49
    109e:	09 f0       	breq	.+2      	; 0x10a2 <App_update+0x2d6>
    10a0:	c7 c0       	rjmp	.+398    	; 0x1230 <App_update+0x464>
				{
					gu8_USER_Mode_State = USER_BUSY;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <gu8_USER_Mode_State>
					uint8_t u8_buttonVal = PIN_LOW;
    10a8:	c6 5f       	subi	r28, 0xF6	; 246
    10aa:	de 4f       	sbci	r29, 0xFE	; 254
    10ac:	18 82       	st	Y, r1
    10ae:	ca 50       	subi	r28, 0x0A	; 10
    10b0:	d1 40       	sbci	r29, 0x01	; 1
					uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
    10b2:	fe 01       	movw	r30, r28
    10b4:	3b 96       	adiw	r30, 0x0b	; 11
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	df 01       	movw	r26, r30
    10ba:	1d 92       	st	X+, r1
    10bc:	8a 95       	dec	r24
    10be:	e9 f7       	brne	.-6      	; 0x10ba <App_update+0x2ee>
					Lcd_clear();
    10c0:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <App_update+0x306>
    10d0:	97 c0       	rjmp	.+302    	; 0x1200 <App_update+0x434>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"Waiting for Card") != LCD_STATUS_ERROR_OK)
    10d2:	8e eb       	ldi	r24, 0xBE	; 190
    10d4:	93 e0       	ldi	r25, 0x03	; 3
    10d6:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <App_update+0x314>
    10de:	92 c0       	rjmp	.+292    	; 0x1204 <App_update+0x438>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
    10e6:	81 30       	cpi	r24, 0x01	; 1
    10e8:	09 f0       	breq	.+2      	; 0x10ec <App_update+0x320>
    10ea:	8e c0       	rjmp	.+284    	; 0x1208 <App_update+0x43c>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"Press Button ;)") != LCD_STATUS_ERROR_OK)
    10ec:	8f ec       	ldi	r24, 0xCF	; 207
    10ee:	93 e0       	ldi	r25, 0x03	; 3
    10f0:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	09 f0       	breq	.+2      	; 0x10fa <App_update+0x32e>
    10f8:	89 c0       	rjmp	.+274    	; 0x120c <App_update+0x440>
    10fa:	0f c0       	rjmp	.+30     	; 0x111a <App_update+0x34e>
						return APP_STATUS_ERROR_NOK;
					while(u8_buttonVal == PIN_LOW)
					{
						if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <Button_updateState>
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	09 f0       	breq	.+2      	; 0x1108 <App_update+0x33c>
    1106:	84 c0       	rjmp	.+264    	; 0x1210 <App_update+0x444>
							return APP_STATUS_ERROR_NOK;
						if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
    1108:	be 01       	movw	r22, r28
    110a:	66 5f       	subi	r22, 0xF6	; 246
    110c:	7e 4f       	sbci	r23, 0xFE	; 254
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	0e 94 c0 09 	call	0x1380	; 0x1380 <Button_getState>
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	09 f0       	breq	.+2      	; 0x111a <App_update+0x34e>
    1118:	7d c0       	rjmp	.+250    	; 0x1214 <App_update+0x448>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"Press Button ;)") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					while(u8_buttonVal == PIN_LOW)
    111a:	c6 5f       	subi	r28, 0xF6	; 246
    111c:	de 4f       	sbci	r29, 0xFE	; 254
    111e:	88 81       	ld	r24, Y
    1120:	ca 50       	subi	r28, 0x0A	; 10
    1122:	d1 40       	sbci	r29, 0x01	; 1
    1124:	88 23       	and	r24, r24
    1126:	51 f3       	breq	.-44     	; 0x10fc <App_update+0x330>
						if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
						if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
					}
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	82 e1       	ldi	r24, 0x12	; 18
    112c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
					Delay_ms(1);
    1130:	21 e0       	ldi	r18, 0x01	; 1
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e0       	ldi	r20, 0x00	; 0
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	82 e1       	ldi	r24, 0x12	; 18
    1148:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
					while (au8_inputString[0] != '#')
    114c:	09 c0       	rjmp	.+18     	; 0x1160 <App_update+0x394>
					{
						if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
    114e:	6c e1       	ldi	r22, 0x1C	; 28
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	ce 01       	movw	r24, r28
    1154:	0b 96       	adiw	r24, 0x0b	; 11
    1156:	0e 94 66 18 	call	0x30cc	; 0x30cc <Spi_SlaveReceivePacket>
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	09 f0       	breq	.+2      	; 0x1160 <App_update+0x394>
    115e:	5c c0       	rjmp	.+184    	; 0x1218 <App_update+0x44c>
							return APP_STATUS_ERROR_NOK;
					}
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
					Delay_ms(1);
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
					while (au8_inputString[0] != '#')
    1160:	8b 85       	ldd	r24, Y+11	; 0x0b
    1162:	83 32       	cpi	r24, 0x23	; 35
    1164:	a1 f7       	brne	.-24     	; 0x114e <App_update+0x382>
					{
						if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
					}
					
					if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
    1166:	be 01       	movw	r22, r28
    1168:	65 5f       	subi	r22, 0xF5	; 245
    116a:	7f 4f       	sbci	r23, 0xFF	; 255
    116c:	86 e5       	ldi	r24, 0x56	; 86
    116e:	94 e0       	ldi	r25, 0x04	; 4
    1170:	0e 94 aa 06 	call	0xd54	; 0xd54 <AppUSER_getCardData>
    1174:	18 2f       	mov	r17, r24
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	09 f0       	breq	.+2      	; 0x117c <App_update+0x3b0>
    117a:	50 c0       	rjmp	.+160    	; 0x121c <App_update+0x450>
						return APP_STATUS_ERROR_NOK;
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	82 e1       	ldi	r24, 0x12	; 18
    1180:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
					Delay_ms(1);
    1184:	21 e0       	ldi	r18, 0x01	; 1
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e0       	ldi	r20, 0x00	; 0
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	82 e1       	ldi	r24, 0x12	; 18
    119c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
					enuApp_Status_t processState = AppUSER_startProcess(&gstr_userCardData);
    11a0:	86 e5       	ldi	r24, 0x56	; 86
    11a2:	94 e0       	ldi	r25, 0x04	; 4
    11a4:	0e 94 94 04 	call	0x928	; 0x928 <AppUSER_startProcess>
					if(processState == APP_STATUS_PAN_NOT_FOUND)
    11a8:	8a 30       	cpi	r24, 0x0A	; 10
    11aa:	39 f5       	brne	.+78     	; 0x11fa <App_update+0x42e>
					{
						Delay_ms(1000);
    11ac:	28 ee       	ldi	r18, 0xE8	; 232
    11ae:	33 e0       	ldi	r19, 0x03	; 3
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
						gu8_USER_Mode_State = USER_IDLE;
    11c0:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <gu8_USER_Mode_State>
						Lcd_clear();
    11c4:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
						if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	31 f5       	brne	.+76     	; 0x1220 <App_update+0x454>
							return APP_STATUS_ERROR_NOK;
						if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
    11d4:	80 e1       	ldi	r24, 0x10	; 16
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	11 f5       	brne	.+68     	; 0x1224 <App_update+0x458>
							return APP_STATUS_ERROR_NOK;
						if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	09 f0       	breq	.+2      	; 0x11ec <App_update+0x420>
    11ea:	9e c0       	rjmp	.+316    	; 0x1328 <App_update+0x55c>
							return APP_STATUS_ERROR_OK;
						if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
    11ec:	8e e1       	ldi	r24, 0x1E	; 30
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	c1 f4       	brne	.+48     	; 0x1228 <App_update+0x45c>
    11f8:	7e c0       	rjmp	.+252    	; 0x12f6 <App_update+0x52a>
							return APP_STATUS_ERROR_NOK;
					}else if (processState != APP_STATUS_ERROR_OK)
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	b9 f4       	brne	.+46     	; 0x122c <App_update+0x460>
    11fe:	7b c0       	rjmp	.+246    	; 0x12f6 <App_update+0x52a>
					gu8_USER_Mode_State = USER_BUSY;
					uint8_t u8_buttonVal = PIN_LOW;
					uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
					Lcd_clear();
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
    1200:	11 e0       	ldi	r17, 0x01	; 1
    1202:	92 c0       	rjmp	.+292    	; 0x1328 <App_update+0x55c>
					if(Lcd_printString((uint8_t*)"Waiting for Card") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    1204:	10 e0       	ldi	r17, 0x00	; 0
    1206:	90 c0       	rjmp	.+288    	; 0x1328 <App_update+0x55c>
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
    1208:	11 e0       	ldi	r17, 0x01	; 1
    120a:	8e c0       	rjmp	.+284    	; 0x1328 <App_update+0x55c>
					if(Lcd_printString((uint8_t*)"Press Button ;)") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    120c:	10 e0       	ldi	r17, 0x00	; 0
    120e:	8c c0       	rjmp	.+280    	; 0x1328 <App_update+0x55c>
					while(u8_buttonVal == PIN_LOW)
					{
						if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1210:	10 e0       	ldi	r17, 0x00	; 0
    1212:	8a c0       	rjmp	.+276    	; 0x1328 <App_update+0x55c>
						if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1214:	10 e0       	ldi	r17, 0x00	; 0
    1216:	88 c0       	rjmp	.+272    	; 0x1328 <App_update+0x55c>
					Delay_ms(1);
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
					while (au8_inputString[0] != '#')
					{
						if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1218:	10 e0       	ldi	r17, 0x00	; 0
    121a:	86 c0       	rjmp	.+268    	; 0x1328 <App_update+0x55c>
					}
					
					if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    121c:	10 e0       	ldi	r17, 0x00	; 0
    121e:	84 c0       	rjmp	.+264    	; 0x1328 <App_update+0x55c>
					{
						Delay_ms(1000);
						gu8_USER_Mode_State = USER_IDLE;
						Lcd_clear();
						if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1220:	10 e0       	ldi	r17, 0x00	; 0
    1222:	82 c0       	rjmp	.+260    	; 0x1328 <App_update+0x55c>
						if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1224:	10 e0       	ldi	r17, 0x00	; 0
    1226:	80 c0       	rjmp	.+256    	; 0x1328 <App_update+0x55c>
						if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_OK;
						if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1228:	10 e0       	ldi	r17, 0x00	; 0
    122a:	7e c0       	rjmp	.+252    	; 0x1328 <App_update+0x55c>
					}else if (processState != APP_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    122c:	10 e0       	ldi	r17, 0x00	; 0
    122e:	7c c0       	rjmp	.+248    	; 0x1328 <App_update+0x55c>
			/********************************************************************************************/
			/********************************************************************************************/
			/********************************************************************************************/
			/******* Display Temp Chosen *******/
				}else if(au8_data == '2')
    1230:	82 33       	cpi	r24, 0x32	; 50
    1232:	59 f5       	brne	.+86     	; 0x128a <App_update+0x4be>
				{
					uint8_t u8_currentTemp=0;
    1234:	1b 86       	std	Y+11, r1	; 0x0b
					gu8_displayFlag = DISPLAY_TEMP;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <gu8_displayFlag>
					Lcd_clear();
    123c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	e9 f4       	brne	.+58     	; 0x1286 <App_update+0x4ba>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
    124c:	8f ed       	ldi	r24, 0xDF	; 223
    124e:	93 e0       	ldi	r25, 0x03	; 3
    1250:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	b9 f4       	brne	.+46     	; 0x1286 <App_update+0x4ba>
						return APP_STATUS_ERROR_NOK;
					if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
    1258:	ce 01       	movw	r24, r28
    125a:	0b 96       	adiw	r24, 0x0b	; 11
    125c:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <LM35_readTemp>
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	59 f4       	brne	.+22     	; 0x127a <App_update+0x4ae>
					{
						if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	61 f4       	brne	.+24     	; 0x1286 <App_update+0x4ba>
						return APP_STATUS_ERROR_NOK;
						if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
    126e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Lcd_printDecimal>
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	31 f4       	brne	.+12     	; 0x1286 <App_update+0x4ba>
						return APP_STATUS_ERROR_NOK;
					}
					if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
    127a:	80 ef       	ldi	r24, 0xF0	; 240
    127c:	93 e0       	ldi	r25, 0x03	; 3
    127e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	c1 f1       	breq	.+112    	; 0x12f6 <App_update+0x52a>
				{
					uint8_t u8_currentTemp=0;
					gu8_displayFlag = DISPLAY_TEMP;
					Lcd_clear();
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    1286:	10 e0       	ldi	r17, 0x00	; 0
    1288:	4f c0       	rjmp	.+158    	; 0x1328 <App_update+0x55c>
						if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					}
					if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
				}else if(au8_data == '-')
    128a:	8d 32       	cpi	r24, 0x2D	; 45
    128c:	a1 f5       	brne	.+104    	; 0x12f6 <App_update+0x52a>
				{
					gu8_displayFlag = 0;
    128e:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <gu8_displayFlag>
					Lcd_clear();
    1292:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Lcd_clear>
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	d1 f5       	brne	.+116    	; 0x1316 <App_update+0x54a>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
    12a2:	80 e1       	ldi	r24, 0x10	; 16
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	b1 f5       	brne	.+108    	; 0x131a <App_update+0x54e>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	99 f5       	brne	.+102    	; 0x131e <App_update+0x552>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
    12b8:	8e e1       	ldi	r24, 0x1E	; 30
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	79 f5       	brne	.+94     	; 0x1322 <App_update+0x556>
    12c4:	18 c0       	rjmp	.+48     	; 0x12f6 <App_update+0x52a>
						return APP_STATUS_ERROR_NOK;
				}
			}else if(gu8_displayFlag == DISPLAY_TEMP)
    12c6:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <gu8_displayFlag>
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	a1 f4       	brne	.+40     	; 0x12f6 <App_update+0x52a>
			{
				uint8_t u8_currentTemp=0;
    12ce:	1b 86       	std	Y+11, r1	; 0x0b
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
    12d0:	ce 01       	movw	r24, r28
    12d2:	0b 96       	adiw	r24, 0x0b	; 11
    12d4:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <LM35_readTemp>
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	69 f4       	brne	.+26     	; 0x12f6 <App_update+0x52a>
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd_setCursor>
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	31 f4       	brne	.+12     	; 0x12f2 <App_update+0x526>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
    12e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Lcd_printDecimal>
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	11 f0       	breq	.+4      	; 0x12f6 <App_update+0x52a>
			{
				uint8_t u8_currentTemp=0;
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    12f2:	10 e0       	ldi	r17, 0x00	; 0
    12f4:	19 c0       	rjmp	.+50     	; 0x1328 <App_update+0x55c>
				}
			}
	/****************************************************************/
	}
	
	return APP_STATUS_ERROR_OK;
    12f6:	11 e0       	ldi	r17, 0x01	; 1
    12f8:	17 c0       	rjmp	.+46     	; 0x1328 <App_update+0x55c>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"ATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    12fa:	10 e0       	ldi	r17, 0x00	; 0
    12fc:	15 c0       	rjmp	.+42     	; 0x1328 <App_update+0x55c>
					}else /* User Mode is Idle ==> The ATM is not used by User */
					{
						gu8_ATMMode = ATM_MODE_ADMIN;
						Lcd_clear();
						if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_OK;
    12fe:	11 e0       	ldi	r17, 0x01	; 1
    1300:	13 c0       	rjmp	.+38     	; 0x1328 <App_update+0x55c>
						if(Lcd_printString((uint8_t*)"*******ATM******") != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	11 c0       	rjmp	.+34     	; 0x1328 <App_update+0x55c>
						if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_OK;
    1306:	11 e0       	ldi	r17, 0x01	; 1
    1308:	0f c0       	rjmp	.+30     	; 0x1328 <App_update+0x55c>
						if(Lcd_printString((uint8_t*)"*****LOCKED*****") != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    130a:	10 e0       	ldi	r17, 0x00	; 0
    130c:	0d c0       	rjmp	.+26     	; 0x1328 <App_update+0x55c>
						if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
						return APP_STATUS_ERROR_OK;
    130e:	11 e0       	ldi	r17, 0x01	; 1
    1310:	0b c0       	rjmp	.+22     	; 0x1328 <App_update+0x55c>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
    1312:	10 e0       	ldi	r17, 0x00	; 0
    1314:	09 c0       	rjmp	.+18     	; 0x1328 <App_update+0x55c>
				}else if(au8_data == '-')
				{
					gu8_displayFlag = 0;
					Lcd_clear();
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
    1316:	11 e0       	ldi	r17, 0x01	; 1
    1318:	07 c0       	rjmp	.+14     	; 0x1328 <App_update+0x55c>
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    131a:	10 e0       	ldi	r17, 0x00	; 0
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <App_update+0x55c>
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
    131e:	11 e0       	ldi	r17, 0x01	; 1
    1320:	03 c0       	rjmp	.+6      	; 0x1328 <App_update+0x55c>
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    1322:	10 e0       	ldi	r17, 0x00	; 0
    1324:	01 c0       	rjmp	.+2      	; 0x1328 <App_update+0x55c>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
    1326:	15 e0       	ldi	r17, 0x05	; 5
			}
	/****************************************************************/
	}
	
	return APP_STATUS_ERROR_OK;
}
    1328:	81 2f       	mov	r24, r17
    132a:	c0 5e       	subi	r28, 0xE0	; 224
    132c:	de 4f       	sbci	r29, 0xFE	; 254
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	08 95       	ret

00001340 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
    1340:	0e 94 50 00 	call	0xa0	; 0xa0 <App_init>
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	39 f4       	brne	.+14     	; 0x1356 <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
    1348:	8f b7       	in	r24, 0x3f	; 63
    134a:	80 68       	ori	r24, 0x80	; 128
    134c:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
    134e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <App_update>
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	e1 f3       	breq	.-8      	; 0x134e <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
	}
}
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	08 95       	ret

0000135a <Button_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button module is already initialized */
	if (genu_BttnModuleState == BTTN_STATUS_INIT)
    135a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <genu_BttnModuleState>
    135e:	85 30       	cpi	r24, 0x05	; 5
    1360:	71 f0       	breq	.+28     	; 0x137e <Button_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    1362:	8a e8       	ldi	r24, 0x8A	; 138
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 8d 11 	call	0x231a	; 0x231a <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	11 f0       	breq	.+4      	; 0x1372 <Button_init+0x18>
    136e:	87 30       	cpi	r24, 0x07	; 7
    1370:	29 f4       	brne	.+10     	; 0x137c <Button_init+0x22>
		return BTTN_STATUS_ERROR_NOK;
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
    1372:	85 e0       	ldi	r24, 0x05	; 5
    1374:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <genu_BttnModuleState>
	return BTTN_STATUS_ERROR_OK;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return BTTN_STATUS_ERROR_NOK;
    137c:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
	return BTTN_STATUS_ERROR_OK;
}
    137e:	08 95       	ret

00001380 <Button_getState>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
    1380:	82 30       	cpi	r24, 0x02	; 2
    1382:	60 f4       	brcc	.+24     	; 0x139c <Button_getState+0x1c>
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
    1384:	61 15       	cp	r22, r1
    1386:	71 05       	cpc	r23, r1
    1388:	59 f0       	breq	.+22     	; 0x13a0 <Button_getState+0x20>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
    138a:	e8 2f       	mov	r30, r24
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	ee 58       	subi	r30, 0x8E	; 142
    1390:	fb 4f       	sbci	r31, 0xFB	; 251
    1392:	80 81       	ld	r24, Z
    1394:	fb 01       	movw	r30, r22
    1396:	80 83       	st	Z, r24
	return BTTN_STATUS_ERROR_OK;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
    139c:	82 e0       	ldi	r24, 0x02	; 2
    139e:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
	{
		return BTTN_STATUS_ERROR_NULL;
    13a0:	83 e0       	ldi	r24, 0x03	; 3
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
	return BTTN_STATUS_ERROR_OK;
}
    13a2:	08 95       	ret

000013a4 <Button_updateState>:
* Parameters (out): None
* Return value: enuBttn_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to update the state of the button (Pressed or Released) by reading the Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuBttn_Status_t Button_updateState(uint8_t u8_bttnID)
{
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	1f 92       	push	r1
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
    13b2:	82 30       	cpi	r24, 0x02	; 2
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <Button_updateState+0x14>
    13b6:	58 c0       	rjmp	.+176    	; 0x1468 <Button_updateState+0xc4>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
    13b8:	19 82       	std	Y+1, r1	; 0x01
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
    13ba:	08 2f       	mov	r16, r24
    13bc:	10 e0       	ldi	r17, 0x00	; 0
    13be:	f8 01       	movw	r30, r16
    13c0:	e8 59       	subi	r30, 0x98	; 152
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	be 01       	movw	r22, r28
    13c6:	6f 5f       	subi	r22, 0xFF	; 255
    13c8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ca:	80 81       	ld	r24, Z
    13cc:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <Dio_readPin>
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <Button_updateState+0x32>
    13d4:	4b c0       	rjmp	.+150    	; 0x146c <Button_updateState+0xc8>
		return BTTN_STATUS_ERROR_NOK;
	if(u8_valueTemp == PIN_HIGH)
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	09 f5       	brne	.+66     	; 0x141e <Button_updateState+0x7a>
    13dc:	04 c0       	rjmp	.+8      	; 0x13e6 <Button_updateState+0x42>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	a1 1d       	adc	r26, r1
    13e2:	b1 1d       	adc	r27, r1
    13e4:	03 c0       	rjmp	.+6      	; 0x13ec <Button_updateState+0x48>
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	dc 01       	movw	r26, r24
    13ec:	88 3b       	cpi	r24, 0xB8	; 184
    13ee:	2b e0       	ldi	r18, 0x0B	; 11
    13f0:	92 07       	cpc	r25, r18
    13f2:	a1 05       	cpc	r26, r1
    13f4:	b1 05       	cpc	r27, r1
    13f6:	98 f3       	brcs	.-26     	; 0x13de <Button_updateState+0x3a>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    13f8:	be 01       	movw	r22, r28
    13fa:	6f 5f       	subi	r22, 0xFF	; 255
    13fc:	7f 4f       	sbci	r23, 0xFF	; 255
    13fe:	f8 01       	movw	r30, r16
    1400:	e8 59       	subi	r30, 0x98	; 152
    1402:	ff 4f       	sbci	r31, 0xFF	; 255
    1404:	80 81       	ld	r24, Z
    1406:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <Dio_readPin>
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	89 f5       	brne	.+98     	; 0x1470 <Button_updateState+0xcc>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_HIGH)
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	81 f5       	brne	.+96     	; 0x1474 <Button_updateState+0xd0>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
    1414:	f8 01       	movw	r30, r16
    1416:	ee 58       	subi	r30, 0x8E	; 142
    1418:	fb 4f       	sbci	r31, 0xFB	; 251
    141a:	80 83       	st	Z, r24
    141c:	30 c0       	rjmp	.+96     	; 0x147e <Button_updateState+0xda>
	}else if (u8_valueTemp == PIN_LOW)
    141e:	88 23       	and	r24, r24
    1420:	31 f0       	breq	.+12     	; 0x142e <Button_updateState+0x8a>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	2c c0       	rjmp	.+88     	; 0x147e <Button_updateState+0xda>
		if(u8_valueTemp == PIN_HIGH)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
	}else if (u8_valueTemp == PIN_LOW)
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	a1 1d       	adc	r26, r1
    142a:	b1 1d       	adc	r27, r1
    142c:	03 c0       	rjmp	.+6      	; 0x1434 <Button_updateState+0x90>
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	dc 01       	movw	r26, r24
    1434:	88 3b       	cpi	r24, 0xB8	; 184
    1436:	2b e0       	ldi	r18, 0x0B	; 11
    1438:	92 07       	cpc	r25, r18
    143a:	a1 05       	cpc	r26, r1
    143c:	b1 05       	cpc	r27, r1
    143e:	98 f3       	brcs	.-26     	; 0x1426 <Button_updateState+0x82>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    1440:	be 01       	movw	r22, r28
    1442:	6f 5f       	subi	r22, 0xFF	; 255
    1444:	7f 4f       	sbci	r23, 0xFF	; 255
    1446:	f8 01       	movw	r30, r16
    1448:	e8 59       	subi	r30, 0x98	; 152
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	80 81       	ld	r24, Z
    144e:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <Dio_readPin>
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	89 f4       	brne	.+34     	; 0x1478 <Button_updateState+0xd4>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	81 11       	cpse	r24, r1
    145a:	10 c0       	rjmp	.+32     	; 0x147c <Button_updateState+0xd8>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
    145c:	f8 01       	movw	r30, r16
    145e:	ee 58       	subi	r30, 0x8E	; 142
    1460:	fb 4f       	sbci	r31, 0xFB	; 251
    1462:	10 82       	st	Z, r1
	}
	return BTTN_STATUS_ERROR_OK;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	0b c0       	rjmp	.+22     	; 0x147e <Button_updateState+0xda>
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
		return BTTN_STATUS_ERROR_ID_INVALID;
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	09 c0       	rjmp	.+18     	; 0x147e <Button_updateState+0xda>
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
		return BTTN_STATUS_ERROR_NOK;
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	07 c0       	rjmp	.+14     	; 0x147e <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	05 c0       	rjmp	.+10     	; 0x147e <Button_updateState+0xda>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	03 c0       	rjmp	.+6      	; 0x147e <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	01 c0       	rjmp	.+2      	; 0x147e <Button_updateState+0xda>
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    147c:	81 e0       	ldi	r24, 0x01	; 1
}
    147e:	0f 90       	pop	r0
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	08 95       	ret

0000148a <EEPROM_getAddresses>:
* Description: Function to Calculate the slave address byte and the word address byte from the location
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
    148a:	9a 01       	movw	r18, r20
    148c:	22 27       	eor	r18, r18
    148e:	37 70       	andi	r19, 0x07	; 7
    1490:	22 0f       	add	r18, r18
    1492:	23 2f       	mov	r18, r19
    1494:	22 1f       	adc	r18, r18
    1496:	33 0b       	sbc	r19, r19
    1498:	31 95       	neg	r19
    149a:	20 65       	ori	r18, 0x50	; 80
    149c:	fc 01       	movw	r30, r24
    149e:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
    14a0:	fb 01       	movw	r30, r22
    14a2:	40 83       	st	Z, r20
	return EEPROM_24_STATUS_ERROR_OK;
}
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	08 95       	ret

000014a8 <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
    14a8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <genu_eepromModuleState>
    14ac:	83 30       	cpi	r24, 0x03	; 3
    14ae:	51 f0       	breq	.+20     	; 0x14c4 <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
    14b0:	0e 94 99 16 	call	0x2d32	; 0x2d32 <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
    14b4:	85 30       	cpi	r24, 0x05	; 5
    14b6:	29 f0       	breq	.+10     	; 0x14c2 <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
    14b8:	83 e0       	ldi	r24, 0x03	; 3
    14ba:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
    14c2:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
    14c4:	08 95       	ret

000014c6 <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <Eeprom_24_writeByte+0x8>
    14ce:	1f 92       	push	r1
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	ac 01       	movw	r20, r24
    14d6:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    14d8:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <genu_eepromModuleState>
    14dc:	93 30       	cpi	r25, 0x03	; 3
    14de:	11 f5       	brne	.+68     	; 0x1524 <Eeprom_24_writeByte+0x5e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    14e0:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    14e2:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    14e4:	be 01       	movw	r22, r28
    14e6:	6e 5f       	subi	r22, 0xFE	; 254
    14e8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ea:	ce 01       	movw	r24, r28
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	0e 94 45 0a 	call	0x148a	; 0x148a <EEPROM_getAddresses>
    14f2:	18 2f       	mov	r17, r24
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	c1 f4       	brne	.+48     	; 0x1528 <Eeprom_24_writeByte+0x62>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    14f8:	21 e0       	ldi	r18, 0x01	; 1
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	ae 01       	movw	r20, r28
    14fe:	4d 5f       	subi	r20, 0xFD	; 253
    1500:	5f 4f       	sbci	r21, 0xFF	; 255
    1502:	6a 81       	ldd	r22, Y+2	; 0x02
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <I2C_MasterSendToLocation>
    150a:	81 30       	cpi	r24, 0x01	; 1
    150c:	79 f4       	brne	.+30     	; 0x152c <Eeprom_24_writeByte+0x66>
		return EEPROM_24_STATUS_ERROR_NOK;
	Delay_ms(15);
    150e:	2f e0       	ldi	r18, 0x0F	; 15
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e0       	ldi	r20, 0x00	; 0
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    1522:	05 c0       	rjmp	.+10     	; 0x152e <Eeprom_24_writeByte+0x68>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1524:	12 e0       	ldi	r17, 0x02	; 2
    1526:	03 c0       	rjmp	.+6      	; 0x152e <Eeprom_24_writeByte+0x68>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1528:	10 e0       	ldi	r17, 0x00	; 0
    152a:	01 c0       	rjmp	.+2      	; 0x152e <Eeprom_24_writeByte+0x68>
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    152c:	10 e0       	ldi	r17, 0x00	; 0
	Delay_ms(15);
	return EEPROM_24_STATUS_ERROR_OK;
}
    152e:	81 2f       	mov	r24, r17
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	08 95       	ret

0000153e <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
    153e:	ef 92       	push	r14
    1540:	ff 92       	push	r15
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	00 d0       	rcall	.+0      	; 0x154a <Eeprom_24_readByte+0xc>
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1550:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <genu_eepromModuleState>
    1554:	93 30       	cpi	r25, 0x03	; 3
    1556:	21 f5       	brne	.+72     	; 0x15a0 <Eeprom_24_readByte+0x62>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1558:	61 15       	cp	r22, r1
    155a:	71 05       	cpc	r23, r1
    155c:	19 f1       	breq	.+70     	; 0x15a4 <Eeprom_24_readByte+0x66>
    155e:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
    1560:	19 82       	std	Y+1, r1	; 0x01
	uint8_t word_addr=0;
    1562:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    1564:	be 01       	movw	r22, r28
    1566:	6e 5f       	subi	r22, 0xFE	; 254
    1568:	7f 4f       	sbci	r23, 0xFF	; 255
    156a:	ce 01       	movw	r24, r28
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	0e 94 45 0a 	call	0x148a	; 0x148a <EEPROM_getAddresses>
    1572:	18 2f       	mov	r17, r24
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	c1 f4       	brne	.+48     	; 0x15a8 <Eeprom_24_readByte+0x6a>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    1578:	21 e0       	ldi	r18, 0x01	; 1
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	a7 01       	movw	r20, r14
    157e:	6a 81       	ldd	r22, Y+2	; 0x02
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	0e 94 21 18 	call	0x3042	; 0x3042 <I2C_MasterReceiveFromLocation>
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	89 f4       	brne	.+34     	; 0x15ac <Eeprom_24_readByte+0x6e>
		return EEPROM_24_STATUS_ERROR_NOK;
	Delay_ms(5);
    158a:	25 e0       	ldi	r18, 0x05	; 5
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    159e:	07 c0       	rjmp	.+14     	; 0x15ae <Eeprom_24_readByte+0x70>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    15a0:	12 e0       	ldi	r17, 0x02	; 2
    15a2:	05 c0       	rjmp	.+10     	; 0x15ae <Eeprom_24_readByte+0x70>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    15a4:	14 e0       	ldi	r17, 0x04	; 4
    15a6:	03 c0       	rjmp	.+6      	; 0x15ae <Eeprom_24_readByte+0x70>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
	uint8_t word_addr=0;
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    15a8:	10 e0       	ldi	r17, 0x00	; 0
    15aa:	01 c0       	rjmp	.+2      	; 0x15ae <Eeprom_24_readByte+0x70>
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    15ac:	10 e0       	ldi	r17, 0x00	; 0
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
    15ae:	81 2f       	mov	r24, r17
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	ff 90       	pop	r15
    15bc:	ef 90       	pop	r14
    15be:	08 95       	ret

000015c0 <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
    15c0:	ef 92       	push	r14
    15c2:	ff 92       	push	r15
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <Eeprom_24_writePage+0xc>
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    15d0:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <genu_eepromModuleState>
    15d4:	93 30       	cpi	r25, 0x03	; 3
    15d6:	f9 f4       	brne	.+62     	; 0x1616 <Eeprom_24_writePage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    15d8:	61 15       	cp	r22, r1
    15da:	71 05       	cpc	r23, r1
    15dc:	f1 f0       	breq	.+60     	; 0x161a <Eeprom_24_writePage+0x5a>
    15de:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
    15e0:	90 e1       	ldi	r25, 0x10	; 16
    15e2:	89 9f       	mul	r24, r25
    15e4:	a0 01       	movw	r20, r0
    15e6:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    15e8:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    15ea:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    15ec:	be 01       	movw	r22, r28
    15ee:	6e 5f       	subi	r22, 0xFE	; 254
    15f0:	7f 4f       	sbci	r23, 0xFF	; 255
    15f2:	ce 01       	movw	r24, r28
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	0e 94 45 0a 	call	0x148a	; 0x148a <EEPROM_getAddresses>
    15fa:	18 2f       	mov	r17, r24
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	79 f4       	brne	.+30     	; 0x161e <Eeprom_24_writePage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    1600:	20 e1       	ldi	r18, 0x10	; 16
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	a7 01       	movw	r20, r14
    1606:	6a 81       	ldd	r22, Y+2	; 0x02
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <I2C_MasterSendToLocation>
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	39 f0       	breq	.+14     	; 0x1620 <Eeprom_24_writePage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    1612:	10 e0       	ldi	r17, 0x00	; 0
    1614:	05 c0       	rjmp	.+10     	; 0x1620 <Eeprom_24_writePage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1616:	12 e0       	ldi	r17, 0x02	; 2
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <Eeprom_24_writePage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    161a:	14 e0       	ldi	r17, 0x04	; 4
    161c:	01 c0       	rjmp	.+2      	; 0x1620 <Eeprom_24_writePage+0x60>
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    161e:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
    1620:	81 2f       	mov	r24, r17
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	ff 90       	pop	r15
    162e:	ef 90       	pop	r14
    1630:	08 95       	ret

00001632 <Eeprom_24_readPage>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory page.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read data inside a specific page in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPage(uint8_t u8_page, uint8_t *pu8_data)
{
    1632:	ef 92       	push	r14
    1634:	ff 92       	push	r15
    1636:	1f 93       	push	r17
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	00 d0       	rcall	.+0      	; 0x163e <Eeprom_24_readPage+0xc>
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1642:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <genu_eepromModuleState>
    1646:	93 30       	cpi	r25, 0x03	; 3
    1648:	f9 f4       	brne	.+62     	; 0x1688 <Eeprom_24_readPage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    164a:	61 15       	cp	r22, r1
    164c:	71 05       	cpc	r23, r1
    164e:	f1 f0       	breq	.+60     	; 0x168c <Eeprom_24_readPage+0x5a>
    1650:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
    1652:	90 e1       	ldi	r25, 0x10	; 16
    1654:	89 9f       	mul	r24, r25
    1656:	a0 01       	movw	r20, r0
    1658:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    165a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    165c:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    165e:	be 01       	movw	r22, r28
    1660:	6e 5f       	subi	r22, 0xFE	; 254
    1662:	7f 4f       	sbci	r23, 0xFF	; 255
    1664:	ce 01       	movw	r24, r28
    1666:	01 96       	adiw	r24, 0x01	; 1
    1668:	0e 94 45 0a 	call	0x148a	; 0x148a <EEPROM_getAddresses>
    166c:	18 2f       	mov	r17, r24
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	79 f4       	brne	.+30     	; 0x1690 <Eeprom_24_readPage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    1672:	20 e1       	ldi	r18, 0x10	; 16
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	a7 01       	movw	r20, r14
    1678:	6a 81       	ldd	r22, Y+2	; 0x02
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	0e 94 21 18 	call	0x3042	; 0x3042 <I2C_MasterReceiveFromLocation>
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	39 f0       	breq	.+14     	; 0x1692 <Eeprom_24_readPage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    1684:	10 e0       	ldi	r17, 0x00	; 0
    1686:	05 c0       	rjmp	.+10     	; 0x1692 <Eeprom_24_readPage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1688:	12 e0       	ldi	r17, 0x02	; 2
    168a:	03 c0       	rjmp	.+6      	; 0x1692 <Eeprom_24_readPage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    168c:	14 e0       	ldi	r17, 0x04	; 4
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <Eeprom_24_readPage+0x60>
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1690:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
    1692:	81 2f       	mov	r24, r17
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	08 95       	ret

000016a4 <Eeprom_24_writePacket>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Multiple data bytes to a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    16a4:	6f 92       	push	r6
    16a6:	7f 92       	push	r7
    16a8:	8f 92       	push	r8
    16aa:	9f 92       	push	r9
    16ac:	af 92       	push	r10
    16ae:	bf 92       	push	r11
    16b0:	cf 92       	push	r12
    16b2:	df 92       	push	r13
    16b4:	ef 92       	push	r14
    16b6:	ff 92       	push	r15
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <Eeprom_24_writePacket+0x1e>
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	5c 01       	movw	r10, r24
    16c8:	6b 01       	movw	r12, r22
    16ca:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    16cc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <genu_eepromModuleState>
    16d0:	83 30       	cpi	r24, 0x03	; 3
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <Eeprom_24_writePacket+0x32>
    16d4:	a1 c0       	rjmp	.+322    	; 0x1818 <Eeprom_24_writePacket+0x174>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    16d6:	67 2b       	or	r22, r23
    16d8:	09 f4       	brne	.+2      	; 0x16dc <Eeprom_24_writePacket+0x38>
    16da:	a0 c0       	rjmp	.+320    	; 0x181c <Eeprom_24_writePacket+0x178>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    16dc:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    16de:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    16e0:	a5 01       	movw	r20, r10
    16e2:	be 01       	movw	r22, r28
    16e4:	6e 5f       	subi	r22, 0xFE	; 254
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255
    16e8:	ce 01       	movw	r24, r28
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	0e 94 45 0a 	call	0x148a	; 0x148a <EEPROM_getAddresses>
    16f0:	18 2f       	mov	r17, r24
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <Eeprom_24_writePacket+0x54>
    16f6:	94 c0       	rjmp	.+296    	; 0x1820 <Eeprom_24_writePacket+0x17c>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & 0x7F0)>>4;
    16f8:	45 01       	movw	r8, r10
    16fa:	80 ef       	ldi	r24, 0xF0	; 240
    16fc:	88 22       	and	r8, r24
    16fe:	87 e0       	ldi	r24, 0x07	; 7
    1700:	98 22       	and	r9, r24
    1702:	96 94       	lsr	r9
    1704:	87 94       	ror	r8
    1706:	96 94       	lsr	r9
    1708:	87 94       	ror	r8
    170a:	96 94       	lsr	r9
    170c:	87 94       	ror	r8
    170e:	96 94       	lsr	r9
    1710:	87 94       	ror	r8
    1712:	68 2c       	mov	r6, r8
	uint8_t u8_byteOffset = u16_location & 0x00F;
    1714:	8a 2d       	mov	r24, r10
    1716:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
    1718:	51 f1       	breq	.+84     	; 0x176e <Eeprom_24_writePacket+0xca>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    171a:	90 e1       	ldi	r25, 0x10	; 16
    171c:	a9 2e       	mov	r10, r25
    171e:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    1720:	b1 2c       	mov	r11, r1
    1722:	ea 14       	cp	r14, r10
    1724:	fb 04       	cpc	r15, r11
    1726:	58 f4       	brcc	.+22     	; 0x173e <Eeprom_24_writePacket+0x9a>
		{
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1728:	97 01       	movw	r18, r14
    172a:	a6 01       	movw	r20, r12
    172c:	6a 81       	ldd	r22, Y+2	; 0x02
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <I2C_MasterSendToLocation>
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	09 f4       	brne	.+2      	; 0x173a <Eeprom_24_writePacket+0x96>
    1738:	7c c0       	rjmp	.+248    	; 0x1832 <Eeprom_24_writePacket+0x18e>
				return EEPROM_24_STATUS_ERROR_NOK;
    173a:	10 e0       	ldi	r17, 0x00	; 0
    173c:	7a c0       	rjmp	.+244    	; 0x1832 <Eeprom_24_writePacket+0x18e>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    173e:	95 01       	movw	r18, r10
    1740:	a6 01       	movw	r20, r12
    1742:	6a 81       	ldd	r22, Y+2	; 0x02
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <I2C_MasterSendToLocation>
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	09 f0       	breq	.+2      	; 0x1750 <Eeprom_24_writePacket+0xac>
    174e:	6a c0       	rjmp	.+212    	; 0x1824 <Eeprom_24_writePacket+0x180>
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    1750:	ea 18       	sub	r14, r10
    1752:	fb 08       	sbc	r15, r11
		i=1;
		Delay_ms(15);
    1754:	2f e0       	ldi	r18, 0x0F	; 15
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
    1768:	77 24       	eor	r7, r7
    176a:	73 94       	inc	r7
    176c:	03 c0       	rjmp	.+6      	; 0x1774 <Eeprom_24_writePacket+0xd0>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
    176e:	71 2c       	mov	r7, r1
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
    1770:	a1 2c       	mov	r10, r1
    1772:	b1 2c       	mov	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
    1774:	c7 01       	movw	r24, r14
    1776:	92 95       	swap	r25
    1778:	82 95       	swap	r24
    177a:	8f 70       	andi	r24, 0x0F	; 15
    177c:	89 27       	eor	r24, r25
    177e:	9f 70       	andi	r25, 0x0F	; 15
    1780:	89 27       	eor	r24, r25
    1782:	08 2f       	mov	r16, r24
	while (pages_num > 0)
    1784:	1c c0       	rjmp	.+56     	; 0x17be <Eeprom_24_writePacket+0x11a>
	{
		pages_num--;
    1786:	01 50       	subi	r16, 0x01	; 1
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    1788:	b6 01       	movw	r22, r12
    178a:	6a 0d       	add	r22, r10
    178c:	7b 1d       	adc	r23, r11
    178e:	87 2d       	mov	r24, r7
    1790:	86 0d       	add	r24, r6
    1792:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <Eeprom_24_writePage>
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	09 f0       	breq	.+2      	; 0x179c <Eeprom_24_writePacket+0xf8>
    179a:	46 c0       	rjmp	.+140    	; 0x1828 <Eeprom_24_writePacket+0x184>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    179c:	73 94       	inc	r7
		u16_dataLen -= 16;
    179e:	80 e1       	ldi	r24, 0x10	; 16
    17a0:	e8 1a       	sub	r14, r24
    17a2:	f1 08       	sbc	r15, r1
		u8_dataIndex += 16;
    17a4:	80 e1       	ldi	r24, 0x10	; 16
    17a6:	a8 0e       	add	r10, r24
    17a8:	b1 1c       	adc	r11, r1
		Delay_ms(15);
    17aa:	2f e0       	ldi	r18, 0x0F	; 15
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
    17be:	10 16       	cp	r1, r16
    17c0:	14 f3       	brlt	.-60     	; 0x1786 <Eeprom_24_writePacket+0xe2>
		u16_dataLen -= 16;
		u8_dataIndex += 16;
		Delay_ms(15);
	}
	
	if (u16_dataLen > 0)
    17c2:	e1 14       	cp	r14, r1
    17c4:	f1 04       	cpc	r15, r1
    17c6:	a9 f1       	breq	.+106    	; 0x1832 <Eeprom_24_writePacket+0x18e>
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << 4;
    17c8:	a4 01       	movw	r20, r8
    17ca:	47 0d       	add	r20, r7
    17cc:	51 1d       	adc	r21, r1
    17ce:	42 95       	swap	r20
    17d0:	52 95       	swap	r21
    17d2:	50 7f       	andi	r21, 0xF0	; 240
    17d4:	54 27       	eor	r21, r20
    17d6:	40 7f       	andi	r20, 0xF0	; 240
    17d8:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
    17da:	be 01       	movw	r22, r28
    17dc:	6e 5f       	subi	r22, 0xFE	; 254
    17de:	7f 4f       	sbci	r23, 0xFF	; 255
    17e0:	ce 01       	movw	r24, r28
    17e2:	01 96       	adiw	r24, 0x01	; 1
    17e4:	0e 94 45 0a 	call	0x148a	; 0x148a <EEPROM_getAddresses>
    17e8:	18 2f       	mov	r17, r24
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	f9 f4       	brne	.+62     	; 0x182c <Eeprom_24_writePacket+0x188>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    17ee:	a6 01       	movw	r20, r12
    17f0:	4a 0d       	add	r20, r10
    17f2:	5b 1d       	adc	r21, r11
    17f4:	97 01       	movw	r18, r14
    17f6:	6a 81       	ldd	r22, Y+2	; 0x02
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <I2C_MasterSendToLocation>
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	b9 f4       	brne	.+46     	; 0x1830 <Eeprom_24_writePacket+0x18c>
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
    1802:	2f e0       	ldi	r18, 0x0F	; 15
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
    1816:	0d c0       	rjmp	.+26     	; 0x1832 <Eeprom_24_writePacket+0x18e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1818:	12 e0       	ldi	r17, 0x02	; 2
    181a:	0b c0       	rjmp	.+22     	; 0x1832 <Eeprom_24_writePacket+0x18e>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    181c:	14 e0       	ldi	r17, 0x04	; 4
    181e:	09 c0       	rjmp	.+18     	; 0x1832 <Eeprom_24_writePacket+0x18e>
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1820:	10 e0       	ldi	r17, 0x00	; 0
    1822:	07 c0       	rjmp	.+14     	; 0x1832 <Eeprom_24_writePacket+0x18e>
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1824:	10 e0       	ldi	r17, 0x00	; 0
    1826:	05 c0       	rjmp	.+10     	; 0x1832 <Eeprom_24_writePacket+0x18e>
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
	{
		pages_num--;
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1828:	10 e0       	ldi	r17, 0x00	; 0
    182a:	03 c0       	rjmp	.+6      	; 0x1832 <Eeprom_24_writePacket+0x18e>
	
	if (u16_dataLen > 0)
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << 4;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    182c:	10 e0       	ldi	r17, 0x00	; 0
    182e:	01 c0       	rjmp	.+2      	; 0x1832 <Eeprom_24_writePacket+0x18e>
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1830:	10 e0       	ldi	r17, 0x00	; 0
		Delay_ms(15);
	}
	return EEPROM_24_STATUS_ERROR_OK;
}
    1832:	81 2f       	mov	r24, r17
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	ff 90       	pop	r15
    1842:	ef 90       	pop	r14
    1844:	df 90       	pop	r13
    1846:	cf 90       	pop	r12
    1848:	bf 90       	pop	r11
    184a:	af 90       	pop	r10
    184c:	9f 90       	pop	r9
    184e:	8f 90       	pop	r8
    1850:	7f 90       	pop	r7
    1852:	6f 90       	pop	r6
    1854:	08 95       	ret

00001856 <Eeprom_24_readPacket>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read Multiple data bytes from a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    1856:	6f 92       	push	r6
    1858:	7f 92       	push	r7
    185a:	8f 92       	push	r8
    185c:	9f 92       	push	r9
    185e:	af 92       	push	r10
    1860:	bf 92       	push	r11
    1862:	cf 92       	push	r12
    1864:	df 92       	push	r13
    1866:	ef 92       	push	r14
    1868:	ff 92       	push	r15
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	00 d0       	rcall	.+0      	; 0x1874 <Eeprom_24_readPacket+0x1e>
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	5c 01       	movw	r10, r24
    187a:	6b 01       	movw	r12, r22
    187c:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    187e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <genu_eepromModuleState>
    1882:	83 30       	cpi	r24, 0x03	; 3
    1884:	09 f0       	breq	.+2      	; 0x1888 <Eeprom_24_readPacket+0x32>
    1886:	84 c0       	rjmp	.+264    	; 0x1990 <Eeprom_24_readPacket+0x13a>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1888:	67 2b       	or	r22, r23
    188a:	09 f4       	brne	.+2      	; 0x188e <Eeprom_24_readPacket+0x38>
    188c:	83 c0       	rjmp	.+262    	; 0x1994 <Eeprom_24_readPacket+0x13e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    188e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    1890:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t u16dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    1892:	a5 01       	movw	r20, r10
    1894:	be 01       	movw	r22, r28
    1896:	6e 5f       	subi	r22, 0xFE	; 254
    1898:	7f 4f       	sbci	r23, 0xFF	; 255
    189a:	ce 01       	movw	r24, r28
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	0e 94 45 0a 	call	0x148a	; 0x148a <EEPROM_getAddresses>
    18a2:	18 2f       	mov	r17, r24
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	09 f0       	breq	.+2      	; 0x18aa <Eeprom_24_readPacket+0x54>
    18a8:	77 c0       	rjmp	.+238    	; 0x1998 <Eeprom_24_readPacket+0x142>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & 0x7F0)>>4;		//The first page to write in
    18aa:	45 01       	movw	r8, r10
    18ac:	80 ef       	ldi	r24, 0xF0	; 240
    18ae:	88 22       	and	r8, r24
    18b0:	87 e0       	ldi	r24, 0x07	; 7
    18b2:	98 22       	and	r9, r24
    18b4:	96 94       	lsr	r9
    18b6:	87 94       	ror	r8
    18b8:	96 94       	lsr	r9
    18ba:	87 94       	ror	r8
    18bc:	96 94       	lsr	r9
    18be:	87 94       	ror	r8
    18c0:	96 94       	lsr	r9
    18c2:	87 94       	ror	r8
    18c4:	78 2c       	mov	r7, r8
	uint8_t u8_byteOffset = u16_location & 0x00F;
    18c6:	8a 2d       	mov	r24, r10
    18c8:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
    18ca:	f9 f0       	breq	.+62     	; 0x190a <Eeprom_24_readPacket+0xb4>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    18cc:	90 e1       	ldi	r25, 0x10	; 16
    18ce:	a9 2e       	mov	r10, r25
    18d0:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    18d2:	b1 2c       	mov	r11, r1
    18d4:	ea 14       	cp	r14, r10
    18d6:	fb 04       	cpc	r15, r11
    18d8:	58 f4       	brcc	.+22     	; 0x18f0 <Eeprom_24_readPacket+0x9a>
		{
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    18da:	95 01       	movw	r18, r10
    18dc:	a6 01       	movw	r20, r12
    18de:	6a 81       	ldd	r22, Y+2	; 0x02
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	0e 94 21 18 	call	0x3042	; 0x3042 <I2C_MasterReceiveFromLocation>
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <Eeprom_24_readPacket+0x96>
    18ea:	5d c0       	rjmp	.+186    	; 0x19a6 <Eeprom_24_readPacket+0x150>
				return EEPROM_24_STATUS_ERROR_NOK;
    18ec:	10 e0       	ldi	r17, 0x00	; 0
    18ee:	5b c0       	rjmp	.+182    	; 0x19a6 <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    18f0:	95 01       	movw	r18, r10
    18f2:	a6 01       	movw	r20, r12
    18f4:	6a 81       	ldd	r22, Y+2	; 0x02
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	0e 94 21 18 	call	0x3042	; 0x3042 <I2C_MasterReceiveFromLocation>
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	09 f0       	breq	.+2      	; 0x1902 <Eeprom_24_readPacket+0xac>
    1900:	4d c0       	rjmp	.+154    	; 0x199c <Eeprom_24_readPacket+0x146>
			return EEPROM_24_STATUS_ERROR_NOK;
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    1902:	ea 18       	sub	r14, r10
    1904:	fb 08       	sbc	r15, r11
		i=1;
    1906:	01 e0       	ldi	r16, 0x01	; 1
    1908:	03 c0       	rjmp	.+6      	; 0x1910 <Eeprom_24_readPacket+0xba>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
    190a:	00 e0       	ldi	r16, 0x00	; 0
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
    190c:	a1 2c       	mov	r10, r1
    190e:	b1 2c       	mov	r11, r1
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
    1910:	c7 01       	movw	r24, r14
    1912:	92 95       	swap	r25
    1914:	82 95       	swap	r24
    1916:	8f 70       	andi	r24, 0x0F	; 15
    1918:	89 27       	eor	r24, r25
    191a:	9f 70       	andi	r25, 0x0F	; 15
    191c:	89 27       	eor	r24, r25
	while (pages_num--)
    191e:	11 c0       	rjmp	.+34     	; 0x1942 <Eeprom_24_readPacket+0xec>
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    1920:	b6 01       	movw	r22, r12
    1922:	6a 0d       	add	r22, r10
    1924:	7b 1d       	adc	r23, r11
    1926:	80 2f       	mov	r24, r16
    1928:	87 0d       	add	r24, r7
    192a:	0e 94 19 0b 	call	0x1632	; 0x1632 <Eeprom_24_readPage>
    192e:	81 30       	cpi	r24, 0x01	; 1
    1930:	b9 f5       	brne	.+110    	; 0x19a0 <Eeprom_24_readPacket+0x14a>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    1932:	0f 5f       	subi	r16, 0xFF	; 255
		u16_dataLen -= 16;
    1934:	80 e1       	ldi	r24, 0x10	; 16
    1936:	e8 1a       	sub	r14, r24
    1938:	f1 08       	sbc	r15, r1
		u16dataIndex += 16;
    193a:	80 e1       	ldi	r24, 0x10	; 16
    193c:	a8 0e       	add	r10, r24
    193e:	b1 1c       	adc	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
    1940:	86 2d       	mov	r24, r6
    1942:	66 24       	eor	r6, r6
    1944:	6a 94       	dec	r6
    1946:	68 0e       	add	r6, r24
    1948:	81 11       	cpse	r24, r1
    194a:	ea cf       	rjmp	.-44     	; 0x1920 <Eeprom_24_readPacket+0xca>
		i++;
		u16_dataLen -= 16;
		u16dataIndex += 16;
	}

	if (u16_dataLen > 0)
    194c:	e1 14       	cp	r14, r1
    194e:	f1 04       	cpc	r15, r1
    1950:	51 f1       	breq	.+84     	; 0x19a6 <Eeprom_24_readPacket+0x150>
	{
		uint16_t new_location = (u8_pageStart + i) << 4;
    1952:	a4 01       	movw	r20, r8
    1954:	40 0f       	add	r20, r16
    1956:	51 1d       	adc	r21, r1
    1958:	42 95       	swap	r20
    195a:	52 95       	swap	r21
    195c:	50 7f       	andi	r21, 0xF0	; 240
    195e:	54 27       	eor	r21, r20
    1960:	40 7f       	andi	r20, 0xF0	; 240
    1962:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
    1964:	be 01       	movw	r22, r28
    1966:	6e 5f       	subi	r22, 0xFE	; 254
    1968:	7f 4f       	sbci	r23, 0xFF	; 255
    196a:	ce 01       	movw	r24, r28
    196c:	01 96       	adiw	r24, 0x01	; 1
    196e:	0e 94 45 0a 	call	0x148a	; 0x148a <EEPROM_getAddresses>
    1972:	18 2f       	mov	r17, r24
    1974:	81 30       	cpi	r24, 0x01	; 1
    1976:	b1 f4       	brne	.+44     	; 0x19a4 <Eeprom_24_readPacket+0x14e>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1978:	a6 01       	movw	r20, r12
    197a:	4a 0d       	add	r20, r10
    197c:	5b 1d       	adc	r21, r11
    197e:	97 01       	movw	r18, r14
    1980:	6a 81       	ldd	r22, Y+2	; 0x02
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	0e 94 21 18 	call	0x3042	; 0x3042 <I2C_MasterReceiveFromLocation>
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	69 f0       	breq	.+26     	; 0x19a6 <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_NOK;
    198c:	10 e0       	ldi	r17, 0x00	; 0
    198e:	0b c0       	rjmp	.+22     	; 0x19a6 <Eeprom_24_readPacket+0x150>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1990:	12 e0       	ldi	r17, 0x02	; 2
    1992:	09 c0       	rjmp	.+18     	; 0x19a6 <Eeprom_24_readPacket+0x150>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1994:	14 e0       	ldi	r17, 0x04	; 4
    1996:	07 c0       	rjmp	.+14     	; 0x19a6 <Eeprom_24_readPacket+0x150>
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1998:	10 e0       	ldi	r17, 0x00	; 0
    199a:	05 c0       	rjmp	.+10     	; 0x19a6 <Eeprom_24_readPacket+0x150>
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    199c:	10 e0       	ldi	r17, 0x00	; 0
    199e:	03 c0       	rjmp	.+6      	; 0x19a6 <Eeprom_24_readPacket+0x150>
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    19a0:	10 e0       	ldi	r17, 0x00	; 0
    19a2:	01 c0       	rjmp	.+2      	; 0x19a6 <Eeprom_24_readPacket+0x150>

	if (u16_dataLen > 0)
	{
		uint16_t new_location = (u8_pageStart + i) << 4;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    19a4:	10 e0       	ldi	r17, 0x00	; 0
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
	return EEPROM_24_STATUS_ERROR_OK;
    19a6:	81 2f       	mov	r24, r17
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    19b4:	ff 90       	pop	r15
    19b6:	ef 90       	pop	r14
    19b8:	df 90       	pop	r13
    19ba:	cf 90       	pop	r12
    19bc:	bf 90       	pop	r11
    19be:	af 90       	pop	r10
    19c0:	9f 90       	pop	r9
    19c2:	8f 90       	pop	r8
    19c4:	7f 90       	pop	r7
    19c6:	6f 90       	pop	r6
    19c8:	08 95       	ret

000019ca <Keypad_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is already initialized */
	if (genu_KeypadModuleState == KEYPAD_STATUS_INIT)
    19ca:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <genu_KeypadModuleState>
    19ce:	85 30       	cpi	r24, 0x05	; 5
    19d0:	71 f0       	breq	.+28     	; 0x19ee <Keypad_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    19d2:	8a e8       	ldi	r24, 0x8A	; 138
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0e 94 8d 11 	call	0x231a	; 0x231a <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    19da:	81 30       	cpi	r24, 0x01	; 1
    19dc:	11 f0       	breq	.+4      	; 0x19e2 <Keypad_init+0x18>
    19de:	87 30       	cpi	r24, 0x07	; 7
    19e0:	29 f4       	brne	.+10     	; 0x19ec <Keypad_init+0x22>
		return KEYPAD_STATUS_ERROR_NOK;
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
    19e2:	85 e0       	ldi	r24, 0x05	; 5
    19e4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <genu_KeypadModuleState>
	return KEYPAD_STATUS_ERROR_OK;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return KEYPAD_STATUS_ERROR_NOK;
    19ec:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
	return KEYPAD_STATUS_ERROR_OK;
}
    19ee:	08 95       	ret

000019f0 <Keypad_readKey>:
* Parameters (out): pu8_pressedKey - Pointer to a Char to hold the pressed key.
* Return value: enuKeypad_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current pressed Key.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuKeypad_Status_t Keypad_readKey(uint8_t * pu8_pressedKey)
{
    19f0:	af 92       	push	r10
    19f2:	bf 92       	push	r11
    19f4:	cf 92       	push	r12
    19f6:	df 92       	push	r13
    19f8:	ef 92       	push	r14
    19fa:	ff 92       	push	r15
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	1f 92       	push	r1
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	6c 01       	movw	r12, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
    1a0c:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <genu_KeypadModuleState>
    1a10:	95 30       	cpi	r25, 0x05	; 5
    1a12:	09 f0       	breq	.+2      	; 0x1a16 <Keypad_readKey+0x26>
    1a14:	50 c0       	rjmp	.+160    	; 0x1ab6 <Keypad_readKey+0xc6>
	{
		return KEYPAD_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
    1a16:	c1 14       	cp	r12, r1
    1a18:	d1 04       	cpc	r13, r1
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <Keypad_readKey+0x2e>
    1a1c:	4e c0       	rjmp	.+156    	; 0x1aba <Keypad_readKey+0xca>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	89 83       	std	Y+1, r24	; 0x01
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    1a22:	00 e0       	ldi	r16, 0x00	; 0
    1a24:	43 c0       	rjmp	.+134    	; 0x1aac <Keypad_readKey+0xbc>
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
    1a26:	a0 2e       	mov	r10, r16
    1a28:	b1 2c       	mov	r11, r1
    1a2a:	f5 01       	movw	r30, r10
    1a2c:	e1 58       	subi	r30, 0x81	; 129
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	60 e0       	ldi	r22, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1a38:	81 30       	cpi	r24, 0x01	; 1
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <Keypad_readKey+0x4e>
    1a3c:	40 c0       	rjmp	.+128    	; 0x1abe <Keypad_readKey+0xce>
    1a3e:	10 e0       	ldi	r17, 0x00	; 0
    1a40:	29 c0       	rjmp	.+82     	; 0x1a94 <Keypad_readKey+0xa4>
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
    1a42:	e1 2e       	mov	r14, r17
    1a44:	f1 2c       	mov	r15, r1
    1a46:	f7 01       	movw	r30, r14
    1a48:	e5 58       	subi	r30, 0x85	; 133
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	be 01       	movw	r22, r28
    1a4e:	6f 5f       	subi	r22, 0xFF	; 255
    1a50:	7f 4f       	sbci	r23, 0xFF	; 255
    1a52:	80 81       	ld	r24, Z
    1a54:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <Dio_readPin>
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	99 f5       	brne	.+102    	; 0x1ac2 <Keypad_readKey+0xd2>
				return KEYPAD_STATUS_ERROR_NOK;
			if(u8_pinValue == PIN_LOW)
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	81 11       	cpse	r24, r1
    1a60:	18 c0       	rjmp	.+48     	; 0x1a92 <Keypad_readKey+0xa2>
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    1a62:	61 e0       	ldi	r22, 0x01	; 1
    1a64:	f5 01       	movw	r30, r10
    1a66:	e1 58       	subi	r30, 0x81	; 129
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 81       	ld	r24, Z
    1a6c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	49 f5       	brne	.+82     	; 0x1ac6 <Keypad_readKey+0xd6>
					return KEYPAD_STATUS_ERROR_NOK;
				*pu8_pressedKey = gau8_ButtonSymbols[u8_RowIndex][u8_ColumnIndex];
    1a74:	97 01       	movw	r18, r14
    1a76:	22 0f       	add	r18, r18
    1a78:	33 1f       	adc	r19, r19
    1a7a:	22 0f       	add	r18, r18
    1a7c:	33 1f       	adc	r19, r19
    1a7e:	25 59       	subi	r18, 0x95	; 149
    1a80:	3f 4f       	sbci	r19, 0xFF	; 255
    1a82:	f9 01       	movw	r30, r18
    1a84:	ea 0d       	add	r30, r10
    1a86:	fb 1d       	adc	r31, r11
    1a88:	80 81       	ld	r24, Z
    1a8a:	f6 01       	movw	r30, r12
    1a8c:	80 83       	st	Z, r24
				return KEYPAD_STATUS_PRESSED;
    1a8e:	86 e0       	ldi	r24, 0x06	; 6
    1a90:	1d c0       	rjmp	.+58     	; 0x1acc <Keypad_readKey+0xdc>
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
    1a92:	1f 5f       	subi	r17, 0xFF	; 255
    1a94:	14 30       	cpi	r17, 0x04	; 4
    1a96:	a8 f2       	brcs	.-86     	; 0x1a42 <Keypad_readKey+0x52>
				return KEYPAD_STATUS_PRESSED;
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    1a98:	f5 01       	movw	r30, r10
    1a9a:	e1 58       	subi	r30, 0x81	; 129
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	61 e0       	ldi	r22, 0x01	; 1
    1aa0:	80 81       	ld	r24, Z
    1aa2:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1aa6:	81 30       	cpi	r24, 0x01	; 1
    1aa8:	81 f4       	brne	.+32     	; 0x1aca <Keypad_readKey+0xda>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    1aaa:	0f 5f       	subi	r16, 0xFF	; 255
    1aac:	04 30       	cpi	r16, 0x04	; 4
    1aae:	08 f4       	brcc	.+2      	; 0x1ab2 <Keypad_readKey+0xc2>
    1ab0:	ba cf       	rjmp	.-140    	; 0x1a26 <Keypad_readKey+0x36>
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    1ab2:	87 e0       	ldi	r24, 0x07	; 7
    1ab4:	0b c0       	rjmp	.+22     	; 0x1acc <Keypad_readKey+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
	{
		return KEYPAD_STATUS_NOT_INIT;
    1ab6:	84 e0       	ldi	r24, 0x04	; 4
    1ab8:	09 c0       	rjmp	.+18     	; 0x1acc <Keypad_readKey+0xdc>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
	{
		return KEYPAD_STATUS_ERROR_NULL;
    1aba:	83 e0       	ldi	r24, 0x03	; 3
    1abc:	07 c0       	rjmp	.+14     	; 0x1acc <Keypad_readKey+0xdc>
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	05 c0       	rjmp	.+10     	; 0x1acc <Keypad_readKey+0xdc>
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
				return KEYPAD_STATUS_ERROR_NOK;
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	03 c0       	rjmp	.+6      	; 0x1acc <Keypad_readKey+0xdc>
			if(u8_pinValue == PIN_LOW)
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
					return KEYPAD_STATUS_ERROR_NOK;
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	01 c0       	rjmp	.+2      	; 0x1acc <Keypad_readKey+0xdc>
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    1aca:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    1acc:	0f 90       	pop	r0
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	1f 91       	pop	r17
    1ad4:	0f 91       	pop	r16
    1ad6:	ff 90       	pop	r15
    1ad8:	ef 90       	pop	r14
    1ada:	df 90       	pop	r13
    1adc:	cf 90       	pop	r12
    1ade:	bf 90       	pop	r11
    1ae0:	af 90       	pop	r10
    1ae2:	08 95       	ret

00001ae4 <Lcd_WriteData>:
{
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, BIN);
	Lcd_printString(au8_snum);
	return LCD_STATUS_ERROR_OK;
}
    1ae4:	cf 93       	push	r28
    1ae6:	c8 2f       	mov	r28, r24
    1ae8:	80 ff       	sbrs	r24, 0
    1aea:	05 c0       	rjmp	.+10     	; 0x1af6 <Lcd_WriteData+0x12>
    1aec:	61 e0       	ldi	r22, 0x01	; 1
    1aee:	8a e0       	ldi	r24, 0x0A	; 10
    1af0:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1af4:	04 c0       	rjmp	.+8      	; 0x1afe <Lcd_WriteData+0x1a>
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	8a e0       	ldi	r24, 0x0A	; 10
    1afa:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1afe:	c1 ff       	sbrs	r28, 1
    1b00:	05 c0       	rjmp	.+10     	; 0x1b0c <Lcd_WriteData+0x28>
    1b02:	61 e0       	ldi	r22, 0x01	; 1
    1b04:	8b e0       	ldi	r24, 0x0B	; 11
    1b06:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1b0a:	04 c0       	rjmp	.+8      	; 0x1b14 <Lcd_WriteData+0x30>
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	8b e0       	ldi	r24, 0x0B	; 11
    1b10:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1b14:	c2 ff       	sbrs	r28, 2
    1b16:	05 c0       	rjmp	.+10     	; 0x1b22 <Lcd_WriteData+0x3e>
    1b18:	61 e0       	ldi	r22, 0x01	; 1
    1b1a:	8c e0       	ldi	r24, 0x0C	; 12
    1b1c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1b20:	04 c0       	rjmp	.+8      	; 0x1b2a <Lcd_WriteData+0x46>
    1b22:	60 e0       	ldi	r22, 0x00	; 0
    1b24:	8c e0       	ldi	r24, 0x0C	; 12
    1b26:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1b2a:	c3 ff       	sbrs	r28, 3
    1b2c:	05 c0       	rjmp	.+10     	; 0x1b38 <Lcd_WriteData+0x54>
    1b2e:	61 e0       	ldi	r22, 0x01	; 1
    1b30:	8d e0       	ldi	r24, 0x0D	; 13
    1b32:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1b36:	04 c0       	rjmp	.+8      	; 0x1b40 <Lcd_WriteData+0x5c>
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	8d e0       	ldi	r24, 0x0D	; 13
    1b3c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1b40:	cf 91       	pop	r28
    1b42:	08 95       	ret

00001b44 <Lcd_EnableToggle>:
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	89 e0       	ldi	r24, 0x09	; 9
    1b48:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1b4c:	21 e0       	ldi	r18, 0x01	; 1
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	70 e0       	ldi	r23, 0x00	; 0
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Delay_ms>
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	89 e0       	ldi	r24, 0x09	; 9
    1b64:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1b68:	08 95       	ret

00001b6a <Lcd_sendCommand>:
    1b6a:	cf 93       	push	r28
    1b6c:	c8 2f       	mov	r28, r24
    1b6e:	60 e0       	ldi	r22, 0x00	; 0
    1b70:	87 e0       	ldi	r24, 0x07	; 7
    1b72:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1b76:	8c 2f       	mov	r24, r28
    1b78:	82 95       	swap	r24
    1b7a:	8f 70       	andi	r24, 0x0F	; 15
    1b7c:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <Lcd_WriteData>
    1b80:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <Lcd_EnableToggle>
    1b84:	8c 2f       	mov	r24, r28
    1b86:	8f 70       	andi	r24, 0x0F	; 15
    1b88:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <Lcd_WriteData>
    1b8c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <Lcd_EnableToggle>
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	cf 91       	pop	r28
    1b94:	08 95       	ret

00001b96 <Lcd_init>:
    1b96:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <genu_LcdModuleState>
    1b9a:	86 30       	cpi	r24, 0x06	; 6
    1b9c:	59 f1       	breq	.+86     	; 0x1bf4 <Lcd_init+0x5e>
    1b9e:	8a e8       	ldi	r24, 0x8A	; 138
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 8d 11 	call	0x231a	; 0x231a <Dio_init>
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	11 f0       	breq	.+4      	; 0x1bae <Lcd_init+0x18>
    1baa:	87 30       	cpi	r24, 0x07	; 7
    1bac:	11 f5       	brne	.+68     	; 0x1bf2 <Lcd_init+0x5c>
    1bae:	60 e0       	ldi	r22, 0x00	; 0
    1bb0:	87 e0       	ldi	r24, 0x07	; 7
    1bb2:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	89 e0       	ldi	r24, 0x09	; 9
    1bba:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1bbe:	83 e3       	ldi	r24, 0x33	; 51
    1bc0:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Lcd_sendCommand>
    1bc4:	82 e3       	ldi	r24, 0x32	; 50
    1bc6:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Lcd_sendCommand>
    1bca:	88 e2       	ldi	r24, 0x28	; 40
    1bcc:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Lcd_sendCommand>
    1bd0:	88 e0       	ldi	r24, 0x08	; 8
    1bd2:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Lcd_sendCommand>
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Lcd_sendCommand>
    1bdc:	86 e0       	ldi	r24, 0x06	; 6
    1bde:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Lcd_sendCommand>
    1be2:	8c e0       	ldi	r24, 0x0C	; 12
    1be4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Lcd_sendCommand>
    1be8:	86 e0       	ldi	r24, 0x06	; 6
    1bea:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <genu_LcdModuleState>
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	08 95       	ret
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	08 95       	ret

00001bf6 <Lcd_setCursor>:
    1bf6:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <genu_LcdModuleState>
    1bfa:	96 30       	cpi	r25, 0x06	; 6
    1bfc:	89 f4       	brne	.+34     	; 0x1c20 <Lcd_setCursor+0x2a>
    1bfe:	83 30       	cpi	r24, 0x03	; 3
    1c00:	88 f4       	brcc	.+34     	; 0x1c24 <Lcd_setCursor+0x2e>
    1c02:	61 31       	cpi	r22, 0x11	; 17
    1c04:	88 f4       	brcc	.+34     	; 0x1c28 <Lcd_setCursor+0x32>
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	2e 5f       	subi	r18, 0xFE	; 254
    1c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0e:	86 2f       	mov	r24, r22
    1c10:	90 e4       	ldi	r25, 0x40	; 64
    1c12:	29 9f       	mul	r18, r25
    1c14:	80 0d       	add	r24, r0
    1c16:	11 24       	eor	r1, r1
    1c18:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Lcd_sendCommand>
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	08 95       	ret
    1c20:	85 e0       	ldi	r24, 0x05	; 5
    1c22:	08 95       	ret
    1c24:	83 e0       	ldi	r24, 0x03	; 3
    1c26:	08 95       	ret
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	08 95       	ret

00001c2c <Lcd_printChar>:
    1c2c:	cf 93       	push	r28
    1c2e:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <genu_LcdModuleState>
    1c32:	96 30       	cpi	r25, 0x06	; 6
    1c34:	a1 f4       	brne	.+40     	; 0x1c5e <Lcd_printChar+0x32>
    1c36:	c8 2f       	mov	r28, r24
    1c38:	61 e0       	ldi	r22, 0x01	; 1
    1c3a:	87 e0       	ldi	r24, 0x07	; 7
    1c3c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1c40:	8c 2f       	mov	r24, r28
    1c42:	82 95       	swap	r24
    1c44:	8f 70       	andi	r24, 0x0F	; 15
    1c46:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <Lcd_WriteData>
    1c4a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <Lcd_EnableToggle>
    1c4e:	8c 2f       	mov	r24, r28
    1c50:	8f 70       	andi	r24, 0x0F	; 15
    1c52:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <Lcd_WriteData>
    1c56:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <Lcd_EnableToggle>
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	01 c0       	rjmp	.+2      	; 0x1c60 <Lcd_printChar+0x34>
    1c5e:	85 e0       	ldi	r24, 0x05	; 5
    1c60:	cf 91       	pop	r28
    1c62:	08 95       	ret

00001c64 <Lcd_printString>:
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	ec 01       	movw	r28, r24
    1c6a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <genu_LcdModuleState>
    1c6e:	86 30       	cpi	r24, 0x06	; 6
    1c70:	49 f4       	brne	.+18     	; 0x1c84 <Lcd_printString+0x20>
    1c72:	03 c0       	rjmp	.+6      	; 0x1c7a <Lcd_printString+0x16>
    1c74:	21 96       	adiw	r28, 0x01	; 1
    1c76:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Lcd_printChar>
    1c7a:	88 81       	ld	r24, Y
    1c7c:	81 11       	cpse	r24, r1
    1c7e:	fa cf       	rjmp	.-12     	; 0x1c74 <Lcd_printString+0x10>
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	01 c0       	rjmp	.+2      	; 0x1c86 <Lcd_printString+0x22>
    1c84:	85 e0       	ldi	r24, 0x05	; 5
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	08 95       	ret

00001c8c <Lcd_clear>:
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Lcd_sendCommand>
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	08 95       	ret

00001c96 <Lcd_printDecimal>:
enuLcd_Status_t Lcd_printDecimal(uint16_t u16_num)
{
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	61 97       	sbiw	r28, 0x11	; 17
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, DEC);
    1caa:	41 e0       	ldi	r20, 0x01	; 1
    1cac:	be 01       	movw	r22, r28
    1cae:	6f 5f       	subi	r22, 0xFF	; 255
    1cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb2:	0e 94 16 19 	call	0x322c	; 0x322c <integerToString>
	Lcd_printString(au8_snum);
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Lcd_printString>
	return LCD_STATUS_ERROR_OK;
}
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	61 96       	adiw	r28, 0x11	; 17
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	08 95       	ret

00001cd2 <LM35_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is already initialized */
	if (genu_LM35ModuleState == LM35_STATUS_INIT)
    1cd2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <genu_LM35ModuleState>
    1cd6:	85 30       	cpi	r24, 0x05	; 5
    1cd8:	51 f0       	breq	.+20     	; 0x1cee <LM35_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
    1cda:	0e 94 38 10 	call	0x2070	; 0x2070 <Adc_init>
    1cde:	81 30       	cpi	r24, 0x01	; 1
    1ce0:	29 f4       	brne	.+10     	; 0x1cec <LM35_init+0x1a>
		return LM35_STATUS_ERROR_NOK;
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
    1ce2:	85 e0       	ldi	r24, 0x05	; 5
    1ce4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <genu_LM35ModuleState>
	return LM35_STATUS_ERROR_OK;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
		return LM35_STATUS_ERROR_NOK;
    1cec:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
	return LM35_STATUS_ERROR_OK;
}
    1cee:	08 95       	ret

00001cf0 <LM35_readTemp>:
* Parameters (out): pu8_Temp - Pointer to a Char to hold the temperature.
* Return value: enuLM35_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current temperature and return in celsius.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLM35_Status_t LM35_readTemp(uint8_t * pu8_Temp)
{
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <LM35_readTemp+0xa>
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <LM35_readTemp+0xc>
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	9c 01       	movw	r18, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
    1d02:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <genu_LM35ModuleState>
    1d06:	95 30       	cpi	r25, 0x05	; 5
    1d08:	f1 f4       	brne	.+60     	; 0x1d46 <LM35_readTemp+0x56>
	{
	return LM35_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
    1d0a:	21 15       	cp	r18, r1
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	e9 f0       	breq	.+58     	; 0x1d4a <LM35_readTemp+0x5a>
    1d10:	89 01       	movw	r16, r18
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
    1d12:	19 82       	std	Y+1, r1	; 0x01
    1d14:	1a 82       	std	Y+2, r1	; 0x02
    1d16:	1b 82       	std	Y+3, r1	; 0x03
    1d18:	1c 82       	std	Y+4, r1	; 0x04
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
    1d1a:	be 01       	movw	r22, r28
    1d1c:	6f 5f       	subi	r22, 0xFF	; 255
    1d1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	0e 94 60 10 	call	0x20c0	; 0x20c0 <Adc_start>
    1d26:	81 30       	cpi	r24, 0x01	; 1
    1d28:	91 f4       	brne	.+36     	; 0x1d4e <LM35_readTemp+0x5e>
		return LM35_STATUS_ERROR_NOK;
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
    1d2a:	69 81       	ldd	r22, Y+1	; 0x01
    1d2c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	2a e0       	ldi	r18, 0x0A	; 10
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <__udivmodsi4>
    1d3e:	f8 01       	movw	r30, r16
    1d40:	20 83       	st	Z, r18
	return LM35_STATUS_ERROR_OK;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	05 c0       	rjmp	.+10     	; 0x1d50 <LM35_readTemp+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
	{
	return LM35_STATUS_NOT_INIT;
    1d46:	84 e0       	ldi	r24, 0x04	; 4
    1d48:	03 c0       	rjmp	.+6      	; 0x1d50 <LM35_readTemp+0x60>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
	{
		return LM35_STATUS_ERROR_NULL;
    1d4a:	83 e0       	ldi	r24, 0x03	; 3
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <LM35_readTemp+0x60>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
		return LM35_STATUS_ERROR_NOK;
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
	return LM35_STATUS_ERROR_OK;
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	08 95       	ret

00001d62 <Motor_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
    1d62:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <gu8_MotorModuleStatus>
    1d66:	86 30       	cpi	r24, 0x06	; 6
    1d68:	49 f0       	breq	.+18     	; 0x1d7c <Motor_init+0x1a>
/**************************************************************************************/
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
    1d6a:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <SWPwm_Init>
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	39 f4       	brne	.+14     	; 0x1d80 <Motor_init+0x1e>
		return MOTOR_STATUS_ERROR_NOK;
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
    1d72:	86 e0       	ldi	r24, 0x06	; 6
    1d74:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <gu8_MotorModuleStatus>
	return MOTOR_STATUS_ERROR_OK;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_INIT;
    1d7c:	86 e0       	ldi	r24, 0x06	; 6
    1d7e:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
		return MOTOR_STATUS_ERROR_NOK;
    1d80:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
	return MOTOR_STATUS_ERROR_OK;
}
    1d82:	08 95       	ret

00001d84 <Motor_stop>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the motor.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to stop motor */
enuMotor_Status_t Motor_stop(uint8_t u8_motorID)
{
    1d84:	df 92       	push	r13
    1d86:	ef 92       	push	r14
    1d88:	ff 92       	push	r15
    1d8a:	0f 93       	push	r16
    1d8c:	1f 93       	push	r17
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    1d92:	81 11       	cpse	r24, r1
    1d94:	5d c0       	rjmp	.+186    	; 0x1e50 <Motor_stop+0xcc>
    1d96:	d8 2e       	mov	r13, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Stop the Motor by driving the pins to LOW */
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    1d98:	08 2f       	mov	r16, r24
    1d9a:	10 e0       	ldi	r17, 0x00	; 0
    1d9c:	78 01       	movw	r14, r16
    1d9e:	ee 0c       	add	r14, r14
    1da0:	ff 1c       	adc	r15, r15
    1da2:	ee 0c       	add	r14, r14
    1da4:	ff 1c       	adc	r15, r15
    1da6:	c7 01       	movw	r24, r14
    1da8:	80 0f       	add	r24, r16
    1daa:	91 1f       	adc	r25, r17
    1dac:	ec 01       	movw	r28, r24
    1dae:	c3 5e       	subi	r28, 0xE3	; 227
    1db0:	db 4f       	sbci	r29, 0xFB	; 251
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1dba:	60 e0       	ldi	r22, 0x00	; 0
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1dc2:	e0 e0       	ldi	r30, 0x00	; 0
    1dc4:	1c c0       	rjmp	.+56     	; 0x1dfe <Motor_stop+0x7a>
	{
		if(u8_loopIndex == u8_motorID) /* Skip the current motor */
    1dc6:	ed 15       	cp	r30, r13
    1dc8:	c9 f0       	breq	.+50     	; 0x1dfc <Motor_stop+0x78>
		{
			continue;
		}
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
    1dca:	d8 01       	movw	r26, r16
    1dcc:	aa 0f       	add	r26, r26
    1dce:	bb 1f       	adc	r27, r27
    1dd0:	aa 0f       	add	r26, r26
    1dd2:	bb 1f       	adc	r27, r27
    1dd4:	a0 0f       	add	r26, r16
    1dd6:	b1 1f       	adc	r27, r17
    1dd8:	a3 5e       	subi	r26, 0xE3	; 227
    1dda:	bb 4f       	sbci	r27, 0xFB	; 251
    1ddc:	2c 91       	ld	r18, X
    1dde:	8e 2f       	mov	r24, r30
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	dc 01       	movw	r26, r24
    1de4:	aa 0f       	add	r26, r26
    1de6:	bb 1f       	adc	r27, r27
    1de8:	aa 0f       	add	r26, r26
    1dea:	bb 1f       	adc	r27, r27
    1dec:	8a 0f       	add	r24, r26
    1dee:	9b 1f       	adc	r25, r27
    1df0:	dc 01       	movw	r26, r24
    1df2:	a3 5e       	subi	r26, 0xE3	; 227
    1df4:	bb 4f       	sbci	r27, 0xFB	; 251
    1df6:	8c 91       	ld	r24, X
    1df8:	28 17       	cp	r18, r24
    1dfa:	19 f0       	breq	.+6      	; 0x1e02 <Motor_stop+0x7e>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1dfc:	ef 5f       	subi	r30, 0xFF	; 255
    1dfe:	ee 23       	and	r30, r30
    1e00:	11 f3       	breq	.-60     	; 0x1dc6 <Motor_stop+0x42>
			break;
		}
	}
	
	
	if(u8_loopIndex == MOTORS_USED_NUM)
    1e02:	e1 30       	cpi	r30, 0x01	; 1
    1e04:	69 f4       	brne	.+26     	; 0x1e20 <Motor_stop+0x9c>
	{ /* In case that there isn't any motor using the same PWM Channel --> Stop the PWM */
		SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1e06:	f8 01       	movw	r30, r16
    1e08:	ee 0f       	add	r30, r30
    1e0a:	ff 1f       	adc	r31, r31
    1e0c:	ee 0f       	add	r30, r30
    1e0e:	ff 1f       	adc	r31, r31
    1e10:	e0 0f       	add	r30, r16
    1e12:	f1 1f       	adc	r31, r17
    1e14:	e3 5e       	subi	r30, 0xE3	; 227
    1e16:	fb 4f       	sbci	r31, 0xFB	; 251
    1e18:	80 81       	ld	r24, Z
    1e1a:	0e 94 42 1c 	call	0x3884	; 0x3884 <SWPwm_Stop>
    1e1e:	12 c0       	rjmp	.+36     	; 0x1e44 <Motor_stop+0xc0>
	}else
	{/* In case that there is another motor using the same PWM Channel */
		if (gau8_MotorsState[u8_loopIndex] == MOTOR_STOPPED) /* Check if the other motor is not running */
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	ed 58       	subi	r30, 0x8D	; 141
    1e24:	fb 4f       	sbci	r31, 0xFB	; 251
    1e26:	80 81       	ld	r24, Z
    1e28:	81 11       	cpse	r24, r1
    1e2a:	0c c0       	rjmp	.+24     	; 0x1e44 <Motor_stop+0xc0>
		{/* In case that the other motor is not running --> Stop the PWM */
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1e2c:	f8 01       	movw	r30, r16
    1e2e:	ee 0f       	add	r30, r30
    1e30:	ff 1f       	adc	r31, r31
    1e32:	ee 0f       	add	r30, r30
    1e34:	ff 1f       	adc	r31, r31
    1e36:	e0 0f       	add	r30, r16
    1e38:	f1 1f       	adc	r31, r17
    1e3a:	e3 5e       	subi	r30, 0xE3	; 227
    1e3c:	fb 4f       	sbci	r31, 0xFB	; 251
    1e3e:	80 81       	ld	r24, Z
    1e40:	0e 94 42 1c 	call	0x3884	; 0x3884 <SWPwm_Stop>
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
    1e44:	f8 01       	movw	r30, r16
    1e46:	ed 58       	subi	r30, 0x8D	; 141
    1e48:	fb 4f       	sbci	r31, 0xFB	; 251
    1e4a:	10 82       	st	Z, r1
	return MOTOR_STATUS_ERROR_OK;
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	01 c0       	rjmp	.+2      	; 0x1e52 <Motor_stop+0xce>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    1e50:	82 e0       	ldi	r24, 0x02	; 2
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
	return MOTOR_STATUS_ERROR_OK;
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	ff 90       	pop	r15
    1e5c:	ef 90       	pop	r14
    1e5e:	df 90       	pop	r13
    1e60:	08 95       	ret

00001e62 <Motor_run>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Move the motor in the given direction.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to move the motor forward with given speed in % */
enuMotor_Status_t Motor_run(uint8_t u8_motorID, uint8_t u8_speed, uint8_t u8_direction)
{
    1e62:	ff 92       	push	r15
    1e64:	0f 93       	push	r16
    1e66:	1f 93       	push	r17
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
    1e6c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <gu8_MotorModuleStatus>
    1e70:	96 30       	cpi	r25, 0x06	; 6
    1e72:	09 f0       	breq	.+2      	; 0x1e76 <Motor_run+0x14>
    1e74:	57 c0       	rjmp	.+174    	; 0x1f24 <Motor_run+0xc2>
	{
		return MOTOR_STATUS_UNINIT;
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    1e76:	81 11       	cpse	r24, r1
    1e78:	57 c0       	rjmp	.+174    	; 0x1f28 <Motor_run+0xc6>
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
    1e7a:	65 36       	cpi	r22, 0x65	; 101
    1e7c:	08 f0       	brcs	.+2      	; 0x1e80 <Motor_run+0x1e>
    1e7e:	56 c0       	rjmp	.+172    	; 0x1f2c <Motor_run+0xca>
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
    1e80:	42 30       	cpi	r20, 0x02	; 2
    1e82:	08 f0       	brcs	.+2      	; 0x1e86 <Motor_run+0x24>
    1e84:	55 c0       	rjmp	.+170    	; 0x1f30 <Motor_run+0xce>
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
    1e86:	08 2f       	mov	r16, r24
    1e88:	10 e0       	ldi	r17, 0x00	; 0
    1e8a:	f8 01       	movw	r30, r16
    1e8c:	ed 58       	subi	r30, 0x8D	; 141
    1e8e:	fb 4f       	sbci	r31, 0xFB	; 251
    1e90:	90 81       	ld	r25, Z
    1e92:	91 30       	cpi	r25, 0x01	; 1
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <Motor_run+0x36>
    1e96:	4e c0       	rjmp	.+156    	; 0x1f34 <Motor_run+0xd2>
    1e98:	f6 2e       	mov	r15, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_speed == 0) 
    1e9a:	61 11       	cpse	r22, r1
    1e9c:	04 c0       	rjmp	.+8      	; 0x1ea6 <Motor_run+0x44>
	{
		Motor_stop(u8_motorID);
    1e9e:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <Motor_stop>
		return MOTOR_STATUS_ERROR_OK;
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	48 c0       	rjmp	.+144    	; 0x1f36 <Motor_run+0xd4>
	}
	if(u8_direction == MOTOR_DIR_CLK_WISE) /* Activate the Motor in the Clock Wise Direction */
    1ea6:	41 11       	cpse	r20, r1
    1ea8:	12 c0       	rjmp	.+36     	; 0x1ece <Motor_run+0x6c>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_HIGH);
    1eaa:	25 e0       	ldi	r18, 0x05	; 5
    1eac:	20 9f       	mul	r18, r16
    1eae:	c0 01       	movw	r24, r0
    1eb0:	21 9f       	mul	r18, r17
    1eb2:	90 0d       	add	r25, r0
    1eb4:	11 24       	eor	r1, r1
    1eb6:	ec 01       	movw	r28, r24
    1eb8:	c3 5e       	subi	r28, 0xE3	; 227
    1eba:	db 4f       	sbci	r29, 0xFB	; 251
    1ebc:	61 e0       	ldi	r22, 0x01	; 1
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    1ecc:	13 c0       	rjmp	.+38     	; 0x1ef4 <Motor_run+0x92>
	}else if(u8_direction == MOTOR_DIR_ANTI_CLK_WISE) /* Activate the Motor in the Anti Clock Wise Direction */
    1ece:	41 30       	cpi	r20, 0x01	; 1
    1ed0:	89 f4       	brne	.+34     	; 0x1ef4 <Motor_run+0x92>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    1ed2:	25 e0       	ldi	r18, 0x05	; 5
    1ed4:	20 9f       	mul	r18, r16
    1ed6:	c0 01       	movw	r24, r0
    1ed8:	21 9f       	mul	r18, r17
    1eda:	90 0d       	add	r25, r0
    1edc:	11 24       	eor	r1, r1
    1ede:	ec 01       	movw	r28, r24
    1ee0:	c3 5e       	subi	r28, 0xE3	; 227
    1ee2:	db 4f       	sbci	r29, 0xFB	; 251
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_HIGH);
    1eec:	61 e0       	ldi	r22, 0x01	; 1
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
	}
	
	/* Change the state of the Motor to Running */
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
    1ef4:	f8 01       	movw	r30, r16
    1ef6:	ed 58       	subi	r30, 0x8D	; 141
    1ef8:	fb 4f       	sbci	r31, 0xFB	; 251
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	80 83       	st	Z, r24
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
    1efe:	f8 01       	movw	r30, r16
    1f00:	ee 0f       	add	r30, r30
    1f02:	ff 1f       	adc	r31, r31
    1f04:	ee 0f       	add	r30, r30
    1f06:	ff 1f       	adc	r31, r31
    1f08:	e0 0f       	add	r30, r16
    1f0a:	f1 1f       	adc	r31, r17
    1f0c:	e3 5e       	subi	r30, 0xE3	; 227
    1f0e:	fb 4f       	sbci	r31, 0xFB	; 251
    1f10:	43 81       	ldd	r20, Z+3	; 0x03
    1f12:	54 81       	ldd	r21, Z+4	; 0x04
    1f14:	60 e0       	ldi	r22, 0x00	; 0
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	2f 2d       	mov	r18, r15
    1f1a:	80 81       	ld	r24, Z
    1f1c:	0e 94 0e 1b 	call	0x361c	; 0x361c <SWPwm_Start>
	
	return MOTOR_STATUS_ERROR_OK;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	09 c0       	rjmp	.+18     	; 0x1f36 <Motor_run+0xd4>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_UNINIT;
    1f24:	87 e0       	ldi	r24, 0x07	; 7
    1f26:	07 c0       	rjmp	.+14     	; 0x1f36 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	05 c0       	rjmp	.+10     	; 0x1f36 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
    1f2c:	83 e0       	ldi	r24, 0x03	; 3
    1f2e:	03 c0       	rjmp	.+6      	; 0x1f36 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
    1f30:	84 e0       	ldi	r24, 0x04	; 4
    1f32:	01 c0       	rjmp	.+2      	; 0x1f36 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
	{
		return MOTOR_STATUS_ERROR_RUNNING;
    1f34:	85 e0       	ldi	r24, 0x05	; 5
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
	
	return MOTOR_STATUS_ERROR_OK;
}
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	1f 91       	pop	r17
    1f3c:	0f 91       	pop	r16
    1f3e:	ff 90       	pop	r15
    1f40:	08 95       	ret

00001f42 <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
    1f46:	c0 91 75 04 	lds	r28, 0x0475	; 0x800475 <gu8_counter>
    1f4a:	d0 e0       	ldi	r29, 0x00	; 0
    1f4c:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <Uart_DataRegister>
    1f50:	ca 58       	subi	r28, 0x8A	; 138
    1f52:	db 4f       	sbci	r29, 0xFB	; 251
    1f54:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
    1f56:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <gu8_counter>
    1f5a:	e9 2f       	mov	r30, r25
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	ea 58       	subi	r30, 0x8A	; 138
    1f60:	fb 4f       	sbci	r31, 0xFB	; 251
    1f62:	80 81       	ld	r24, Z
    1f64:	8d 30       	cpi	r24, 0x0D	; 13
    1f66:	71 f4       	brne	.+28     	; 0x1f84 <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    1f68:	0e 94 a0 1c 	call	0x3940	; 0x3940 <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
    1f6c:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <gu8_counter>
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	ea 58       	subi	r30, 0x8A	; 138
    1f74:	fb 4f       	sbci	r31, 0xFB	; 251
    1f76:	10 82       	st	Z, r1
		gu8_counter = 0;
    1f78:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <gu8_counter>
		gu8_flag = 1;
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <gu8_flag>
    1f82:	1d c0       	rjmp	.+58     	; 0x1fbe <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
    1f84:	88 30       	cpi	r24, 0x08	; 8
    1f86:	51 f4       	brne	.+20     	; 0x1f9c <Uart_RXC_ISR+0x5a>
    1f88:	99 23       	and	r25, r25
    1f8a:	41 f0       	breq	.+16     	; 0x1f9c <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    1f8c:	0e 94 a0 1c 	call	0x3940	; 0x3940 <Uart_sendByte>
		gu8_counter--;
    1f90:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <gu8_counter>
    1f94:	81 50       	subi	r24, 0x01	; 1
    1f96:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <gu8_counter>
    1f9a:	11 c0       	rjmp	.+34     	; 0x1fbe <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
    1f9c:	88 30       	cpi	r24, 0x08	; 8
    1f9e:	79 f0       	breq	.+30     	; 0x1fbe <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
    1fa0:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <gu8_visibility>
    1fa4:	91 30       	cpi	r25, 0x01	; 1
    1fa6:	21 f4       	brne	.+8      	; 0x1fb0 <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
    1fa8:	8a e2       	ldi	r24, 0x2A	; 42
    1faa:	0e 94 a0 1c 	call	0x3940	; 0x3940 <Uart_sendByte>
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
    1fb0:	0e 94 a0 1c 	call	0x3940	; 0x3940 <Uart_sendByte>
		}
		gu8_counter++;
    1fb4:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <gu8_counter>
    1fb8:	8f 5f       	subi	r24, 0xFF	; 255
    1fba:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <gu8_counter>
	}
}
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	08 95       	ret

00001fc4 <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
    1fc4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <genu_TerminalModuleState>
    1fc8:	83 30       	cpi	r24, 0x03	; 3
    1fca:	81 f0       	breq	.+32     	; 0x1fec <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
    1fcc:	0e 94 8a 1c 	call	0x3914	; 0x3914 <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
    1fd0:	81 30       	cpi	r24, 0x01	; 1
    1fd2:	11 f0       	breq	.+4      	; 0x1fd8 <Terminal_init+0x14>
    1fd4:	87 30       	cpi	r24, 0x07	; 7
    1fd6:	49 f4       	brne	.+18     	; 0x1fea <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
    1fd8:	81 ea       	ldi	r24, 0xA1	; 161
    1fda:	9f e0       	ldi	r25, 0x0F	; 15
    1fdc:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
    1fe0:	83 e0       	ldi	r24, 0x03	; 3
    1fe2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
    1fea:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
    1fec:	08 95       	ret

00001fee <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	81 f0       	breq	.+32     	; 0x2016 <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    1ff6:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <genu_TerminalModuleState>
    1ffa:	22 30       	cpi	r18, 0x02	; 2
    1ffc:	79 f0       	breq	.+30     	; 0x201c <Terminal_Out+0x2e>
    1ffe:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
    2000:	0e 94 ba 18 	call	0x3174	; 0x3174 <stringLength>
    2004:	68 2f       	mov	r22, r24
    2006:	70 e0       	ldi	r23, 0x00	; 0
    2008:	ce 01       	movw	r24, r28
    200a:	0e 94 ab 1c 	call	0x3956	; 0x3956 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
    200e:	81 30       	cpi	r24, 0x01	; 1
    2010:	21 f0       	breq	.+8      	; 0x201a <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	03 c0       	rjmp	.+6      	; 0x201c <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    2016:	24 e0       	ldi	r18, 0x04	; 4
    2018:	01 c0       	rjmp	.+2      	; 0x201c <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
    201a:	21 e0       	ldi	r18, 0x01	; 1
}
    201c:	82 2f       	mov	r24, r18
    201e:	df 91       	pop	r29
    2020:	cf 91       	pop	r28
    2022:	08 95       	ret

00002024 <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
    2024:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
    2026:	89 2b       	or	r24, r25
    2028:	a1 f0       	breq	.+40     	; 0x2052 <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    202a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <genu_TerminalModuleState>
    202e:	82 30       	cpi	r24, 0x02	; 2
    2030:	99 f0       	breq	.+38     	; 0x2058 <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
    2032:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <gu8_flag>
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	71 f4       	brne	.+28     	; 0x2056 <Terminal_In+0x32>
	{
		gu8_flag = 0;
    203a:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
    203e:	86 e7       	ldi	r24, 0x76	; 118
    2040:	94 e0       	ldi	r25, 0x04	; 4
    2042:	0e 94 05 19 	call	0x320a	; 0x320a <stringCopy>
		EmptyString(gau8_data);
    2046:	86 e7       	ldi	r24, 0x76	; 118
    2048:	94 e0       	ldi	r25, 0x04	; 4
    204a:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
    204e:	85 e0       	ldi	r24, 0x05	; 5
    2050:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    2052:	84 e0       	ldi	r24, 0x04	; 4
    2054:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
    2056:	81 e0       	ldi	r24, 0x01	; 1
}
    2058:	08 95       	ret

0000205a <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
    2060:	08 95       	ret

00002062 <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
    2062:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	08 95       	ret

0000206a <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
    206a:	0e 94 a0 09 	call	0x1340	; 0x1340 <App_start>
    206e:	ff cf       	rjmp	.-2      	; 0x206e <main+0x4>

00002070 <Adc_init>:
		f32_Resolution = (1000*ADC_AREF_VALUE)/ADC_STEPS_NUM;
	}
	*pu32_data = u16_Result*f32_Resolution;
		
	return ADC_STATUS_ERROR_OK;
}
    2070:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <genuAdc_Status>
    2074:	87 30       	cpi	r24, 0x07	; 7
    2076:	11 f1       	breq	.+68     	; 0x20bc <Adc_init+0x4c>
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	13 c0       	rjmp	.+38     	; 0x20a2 <Adc_init+0x32>
    207c:	3b b3       	in	r19, 0x1b	; 27
    207e:	e2 2f       	mov	r30, r18
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	ee 0f       	add	r30, r30
    2084:	ff 1f       	adc	r31, r31
    2086:	e8 57       	subi	r30, 0x78	; 120
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	00 80       	ld	r0, Z
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <Adc_init+0x26>
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	0a 94       	dec	r0
    2098:	e2 f7       	brpl	.-8      	; 0x2092 <Adc_init+0x22>
    209a:	80 95       	com	r24
    209c:	83 23       	and	r24, r19
    209e:	8b bb       	out	0x1b, r24	; 27
    20a0:	2f 5f       	subi	r18, 0xFF	; 255
    20a2:	22 23       	and	r18, r18
    20a4:	59 f3       	breq	.-42     	; 0x207c <Adc_init+0xc>
    20a6:	97 e0       	ldi	r25, 0x07	; 7
    20a8:	96 b9       	out	0x06, r25	; 6
    20aa:	86 b1       	in	r24, 0x06	; 6
    20ac:	8f 7d       	andi	r24, 0xDF	; 223
    20ae:	86 b9       	out	0x06, r24	; 6
    20b0:	86 b1       	in	r24, 0x06	; 6
    20b2:	86 b9       	out	0x06, r24	; 6
    20b4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <genuAdc_Status>
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	08 95       	ret
    20bc:	88 e0       	ldi	r24, 0x08	; 8
    20be:	08 95       	ret

000020c0 <Adc_start>:
    20c0:	cf 92       	push	r12
    20c2:	df 92       	push	r13
    20c4:	ef 92       	push	r14
    20c6:	ff 92       	push	r15
    20c8:	cf 93       	push	r28
    20ca:	df 93       	push	r29
    20cc:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <genuAdc_Status>
    20d0:	97 30       	cpi	r25, 0x07	; 7
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <Adc_start+0x16>
    20d4:	61 c0       	rjmp	.+194    	; 0x2198 <Adc_start+0xd8>
    20d6:	61 15       	cp	r22, r1
    20d8:	71 05       	cpc	r23, r1
    20da:	09 f4       	brne	.+2      	; 0x20de <Adc_start+0x1e>
    20dc:	5f c0       	rjmp	.+190    	; 0x219c <Adc_start+0xdc>
    20de:	37 b1       	in	r19, 0x07	; 7
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	fc 01       	movw	r30, r24
    20e4:	ee 0f       	add	r30, r30
    20e6:	ff 1f       	adc	r31, r31
    20e8:	e8 57       	subi	r30, 0x78	; 120
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	20 81       	ld	r18, Z
    20ee:	23 2b       	or	r18, r19
    20f0:	27 b9       	out	0x07, r18	; 7
    20f2:	47 b1       	in	r20, 0x07	; 7
    20f4:	31 81       	ldd	r19, Z+1	; 0x01
    20f6:	50 e4       	ldi	r21, 0x40	; 64
    20f8:	35 9f       	mul	r19, r21
    20fa:	90 01       	movw	r18, r0
    20fc:	11 24       	eor	r1, r1
    20fe:	24 2b       	or	r18, r20
    2100:	27 b9       	out	0x07, r18	; 7
    2102:	26 b1       	in	r18, 0x06	; 6
    2104:	20 68       	ori	r18, 0x80	; 128
    2106:	26 b9       	out	0x06, r18	; 6
    2108:	26 b1       	in	r18, 0x06	; 6
    210a:	20 64       	ori	r18, 0x40	; 64
    210c:	26 b9       	out	0x06, r18	; 6
    210e:	34 9b       	sbis	0x06, 4	; 6
    2110:	fe cf       	rjmp	.-4      	; 0x210e <Adc_start+0x4e>
    2112:	44 b1       	in	r20, 0x04	; 4
    2114:	25 b1       	in	r18, 0x05	; 5
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	32 2f       	mov	r19, r18
    211a:	22 27       	eor	r18, r18
    211c:	24 2b       	or	r18, r20
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	fc 01       	movw	r30, r24
    2124:	e8 57       	subi	r30, 0x78	; 120
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	81 81       	ldd	r24, Z+1	; 0x01
    212a:	83 30       	cpi	r24, 0x03	; 3
    212c:	41 f0       	breq	.+16     	; 0x213e <Adc_start+0x7e>
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	69 f0       	breq	.+26     	; 0x214c <Adc_start+0x8c>
    2132:	88 23       	and	r24, r24
    2134:	a1 f0       	breq	.+40     	; 0x215e <Adc_start+0x9e>
    2136:	c1 2c       	mov	r12, r1
    2138:	d1 2c       	mov	r13, r1
    213a:	76 01       	movw	r14, r12
    213c:	18 c0       	rjmp	.+48     	; 0x216e <Adc_start+0xae>
    213e:	c1 2c       	mov	r12, r1
    2140:	d1 2c       	mov	r13, r1
    2142:	76 01       	movw	r14, r12
    2144:	68 94       	set
    2146:	e5 f8       	bld	r14, 5
    2148:	f6 f8       	bld	r15, 6
    214a:	11 c0       	rjmp	.+34     	; 0x216e <Adc_start+0xae>
    214c:	0f 2e       	mov	r0, r31
    214e:	c1 2c       	mov	r12, r1
    2150:	f0 e4       	ldi	r31, 0x40	; 64
    2152:	df 2e       	mov	r13, r31
    2154:	fc e9       	ldi	r31, 0x9C	; 156
    2156:	ef 2e       	mov	r14, r31
    2158:	fd 2c       	mov	r15, r13
    215a:	f0 2d       	mov	r31, r0
    215c:	08 c0       	rjmp	.+16     	; 0x216e <Adc_start+0xae>
    215e:	0f 2e       	mov	r0, r31
    2160:	c1 2c       	mov	r12, r1
    2162:	f0 e4       	ldi	r31, 0x40	; 64
    2164:	df 2e       	mov	r13, r31
    2166:	fc e9       	ldi	r31, 0x9C	; 156
    2168:	ef 2e       	mov	r14, r31
    216a:	fd 2c       	mov	r15, r13
    216c:	f0 2d       	mov	r31, r0
    216e:	eb 01       	movw	r28, r22
    2170:	b9 01       	movw	r22, r18
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <__floatunsisf>
    217a:	a7 01       	movw	r20, r14
    217c:	96 01       	movw	r18, r12
    217e:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <__mulsf3>
    2182:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__fixunssfsi>
    2186:	68 83       	st	Y, r22
    2188:	79 83       	std	Y+1, r23	; 0x01
    218a:	8a 83       	std	Y+2, r24	; 0x02
    218c:	9b 83       	std	Y+3, r25	; 0x03
    218e:	86 b1       	in	r24, 0x06	; 6
    2190:	80 61       	ori	r24, 0x10	; 16
    2192:	86 b9       	out	0x06, r24	; 6
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	03 c0       	rjmp	.+6      	; 0x219e <Adc_start+0xde>
    2198:	86 e0       	ldi	r24, 0x06	; 6
    219a:	01 c0       	rjmp	.+2      	; 0x219e <Adc_start+0xde>
    219c:	85 e0       	ldi	r24, 0x05	; 5
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	ff 90       	pop	r15
    21a4:	ef 90       	pop	r14
    21a6:	df 90       	pop	r13
    21a8:	cf 90       	pop	r12
    21aa:	08 95       	ret

000021ac <__vector_16>:

ISR(ADC_IRQ)
{
    21ac:	1f 92       	push	r1
    21ae:	0f 92       	push	r0
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	0f 92       	push	r0
    21b4:	11 24       	eor	r1, r1
    21b6:	2f 93       	push	r18
    21b8:	3f 93       	push	r19
    21ba:	4f 93       	push	r20
    21bc:	5f 93       	push	r21
    21be:	6f 93       	push	r22
    21c0:	7f 93       	push	r23
    21c2:	8f 93       	push	r24
    21c4:	9f 93       	push	r25
    21c6:	af 93       	push	r26
    21c8:	bf 93       	push	r27
    21ca:	ef 93       	push	r30
    21cc:	ff 93       	push	r31
	(*ADC_CallBackPtr)();
    21ce:	e0 91 76 05 	lds	r30, 0x0576	; 0x800576 <ADC_CallBackPtr>
    21d2:	f0 91 77 05 	lds	r31, 0x0577	; 0x800577 <ADC_CallBackPtr+0x1>
    21d6:	09 95       	icall
    21d8:	ff 91       	pop	r31
    21da:	ef 91       	pop	r30
    21dc:	bf 91       	pop	r27
    21de:	af 91       	pop	r26
    21e0:	9f 91       	pop	r25
    21e2:	8f 91       	pop	r24
    21e4:	7f 91       	pop	r23
    21e6:	6f 91       	pop	r22
    21e8:	5f 91       	pop	r21
    21ea:	4f 91       	pop	r20
    21ec:	3f 91       	pop	r19
    21ee:	2f 91       	pop	r18
    21f0:	0f 90       	pop	r0
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	0f 90       	pop	r0
    21f6:	1f 90       	pop	r1
    21f8:	18 95       	reti

000021fa <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
    21fa:	2f 92       	push	r2
    21fc:	3f 92       	push	r3
    21fe:	4f 92       	push	r4
    2200:	5f 92       	push	r5
    2202:	6f 92       	push	r6
    2204:	7f 92       	push	r7
    2206:	8f 92       	push	r8
    2208:	9f 92       	push	r9
    220a:	af 92       	push	r10
    220c:	bf 92       	push	r11
    220e:	cf 92       	push	r12
    2210:	df 92       	push	r13
    2212:	ef 92       	push	r14
    2214:	ff 92       	push	r15
    2216:	0f 93       	push	r16
    2218:	1f 93       	push	r17
    221a:	cf 93       	push	r28
    221c:	df 93       	push	r29
    221e:	00 d0       	rcall	.+0      	; 0x2220 <Delay_ms+0x26>
    2220:	00 d0       	rcall	.+0      	; 0x2222 <Delay_ms+0x28>
    2222:	1f 92       	push	r1
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	22 2e       	mov	r2, r18
    222a:	33 2e       	mov	r3, r19
    222c:	44 2e       	mov	r4, r20
    222e:	55 2e       	mov	r5, r21
    2230:	66 2e       	mov	r6, r22
    2232:	79 83       	std	Y+1, r23	; 0x01
    2234:	8a 83       	std	Y+2, r24	; 0x02
    2236:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    2238:	91 2c       	mov	r9, r1
    223a:	1d 82       	std	Y+5, r1	; 0x05
    223c:	1c 82       	std	Y+4, r1	; 0x04
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	e0 e0       	ldi	r30, 0x00	; 0
    2244:	71 2c       	mov	r7, r1
    2246:	81 2c       	mov	r8, r1
    2248:	3d c0       	rjmp	.+122    	; 0x22c4 <Delay_ms+0xca>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
    224a:	2c 2d       	mov	r18, r12
    224c:	3d 2d       	mov	r19, r13
    224e:	4e 2d       	mov	r20, r14
    2250:	5f 2d       	mov	r21, r15
    2252:	60 2f       	mov	r22, r16
    2254:	71 2f       	mov	r23, r17
    2256:	8a 2d       	mov	r24, r10
    2258:	9b 2d       	mov	r25, r11
    225a:	a1 e0       	ldi	r26, 0x01	; 1
    225c:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <__adddi3_s8>
    2260:	c2 2e       	mov	r12, r18
    2262:	d3 2e       	mov	r13, r19
    2264:	e4 2e       	mov	r14, r20
    2266:	f5 2e       	mov	r15, r21
    2268:	06 2f       	mov	r16, r22
    226a:	17 2f       	mov	r17, r23
    226c:	a8 2e       	mov	r10, r24
    226e:	b9 2e       	mov	r11, r25
    2270:	08 c0       	rjmp	.+16     	; 0x2282 <Delay_ms+0x88>
    2272:	c1 2c       	mov	r12, r1
    2274:	d1 2c       	mov	r13, r1
    2276:	e1 2c       	mov	r14, r1
    2278:	f1 2c       	mov	r15, r1
    227a:	00 e0       	ldi	r16, 0x00	; 0
    227c:	10 e0       	ldi	r17, 0x00	; 0
    227e:	a1 2c       	mov	r10, r1
    2280:	b1 2c       	mov	r11, r1
    2282:	2c 2d       	mov	r18, r12
    2284:	3d 2d       	mov	r19, r13
    2286:	4e 2d       	mov	r20, r14
    2288:	5f 2d       	mov	r21, r15
    228a:	60 2f       	mov	r22, r16
    228c:	71 2f       	mov	r23, r17
    228e:	8a 2d       	mov	r24, r10
    2290:	9b 2d       	mov	r25, r11
    2292:	ac e0       	ldi	r26, 0x0C	; 12
    2294:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__cmpdi2_s8>
    2298:	c1 f2       	breq	.-80     	; 0x224a <Delay_ms+0x50>
    229a:	b8 f2       	brcs	.-82     	; 0x224a <Delay_ms+0x50>
    229c:	8c 81       	ldd	r24, Y+4	; 0x04

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    229e:	29 2d       	mov	r18, r9
    22a0:	3d 81       	ldd	r19, Y+5	; 0x05
    22a2:	48 2f       	mov	r20, r24
    22a4:	5b 2f       	mov	r21, r27
    22a6:	6f 2f       	mov	r22, r31
    22a8:	7e 2f       	mov	r23, r30
    22aa:	87 2d       	mov	r24, r7
    22ac:	98 2d       	mov	r25, r8
    22ae:	a1 e0       	ldi	r26, 0x01	; 1
    22b0:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <__adddi3_s8>
    22b4:	92 2e       	mov	r9, r18
    22b6:	3d 83       	std	Y+5, r19	; 0x05
    22b8:	4c 83       	std	Y+4, r20	; 0x04
    22ba:	b5 2f       	mov	r27, r21
    22bc:	f6 2f       	mov	r31, r22
    22be:	e7 2f       	mov	r30, r23
    22c0:	78 2e       	mov	r7, r24
    22c2:	89 2e       	mov	r8, r25
    22c4:	29 2d       	mov	r18, r9
    22c6:	3d 81       	ldd	r19, Y+5	; 0x05
    22c8:	4c 81       	ldd	r20, Y+4	; 0x04
    22ca:	5b 2f       	mov	r21, r27
    22cc:	6f 2f       	mov	r22, r31
    22ce:	7e 2f       	mov	r23, r30
    22d0:	87 2d       	mov	r24, r7
    22d2:	98 2d       	mov	r25, r8
    22d4:	a2 2c       	mov	r10, r2
    22d6:	b3 2c       	mov	r11, r3
    22d8:	c4 2c       	mov	r12, r4
    22da:	d5 2c       	mov	r13, r5
    22dc:	e6 2c       	mov	r14, r6
    22de:	f9 80       	ldd	r15, Y+1	; 0x01
    22e0:	0a 81       	ldd	r16, Y+2	; 0x02
    22e2:	1b 81       	ldd	r17, Y+3	; 0x03
    22e4:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <__cmpdi2>
    22e8:	20 f2       	brcs	.-120    	; 0x2272 <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	df 91       	pop	r29
    22f6:	cf 91       	pop	r28
    22f8:	1f 91       	pop	r17
    22fa:	0f 91       	pop	r16
    22fc:	ff 90       	pop	r15
    22fe:	ef 90       	pop	r14
    2300:	df 90       	pop	r13
    2302:	cf 90       	pop	r12
    2304:	bf 90       	pop	r11
    2306:	af 90       	pop	r10
    2308:	9f 90       	pop	r9
    230a:	8f 90       	pop	r8
    230c:	7f 90       	pop	r7
    230e:	6f 90       	pop	r6
    2310:	5f 90       	pop	r5
    2312:	4f 90       	pop	r4
    2314:	3f 90       	pop	r3
    2316:	2f 90       	pop	r2
    2318:	08 95       	ret

0000231a <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
    231a:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
    231c:	89 2b       	or	r24, r25
    231e:	09 f4       	brne	.+2      	; 0x2322 <Dio_init+0x8>
    2320:	e4 c0       	rjmp	.+456    	; 0x24ea <Dio_init+0x1d0>
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	d7 c0       	rjmp	.+430    	; 0x24d4 <Dio_init+0x1ba>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
    2326:	e9 2f       	mov	r30, r25
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	ee 0f       	add	r30, r30
    2330:	ff 1f       	adc	r31, r31
    2332:	e4 0f       	add	r30, r20
    2334:	f5 1f       	adc	r31, r21
    2336:	31 81       	ldd	r19, Z+1	; 0x01
    2338:	38 30       	cpi	r19, 0x08	; 8
    233a:	08 f0       	brcs	.+2      	; 0x233e <Dio_init+0x24>
    233c:	d8 c0       	rjmp	.+432    	; 0x24ee <Dio_init+0x1d4>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
    233e:	20 81       	ld	r18, Z
    2340:	21 30       	cpi	r18, 0x01	; 1
    2342:	c1 f1       	breq	.+112    	; 0x23b4 <Dio_init+0x9a>
    2344:	38 f0       	brcs	.+14     	; 0x2354 <Dio_init+0x3a>
    2346:	22 30       	cpi	r18, 0x02	; 2
    2348:	09 f4       	brne	.+2      	; 0x234c <Dio_init+0x32>
    234a:	64 c0       	rjmp	.+200    	; 0x2414 <Dio_init+0xfa>
    234c:	23 30       	cpi	r18, 0x03	; 3
    234e:	09 f4       	brne	.+2      	; 0x2352 <Dio_init+0x38>
    2350:	91 c0       	rjmp	.+290    	; 0x2474 <Dio_init+0x15a>
    2352:	cf c0       	rjmp	.+414    	; 0x24f2 <Dio_init+0x1d8>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2354:	2a b3       	in	r18, 0x1a	; 26
    2356:	61 e0       	ldi	r22, 0x01	; 1
    2358:	70 e0       	ldi	r23, 0x00	; 0
    235a:	db 01       	movw	r26, r22
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <Dio_init+0x48>
    235e:	aa 0f       	add	r26, r26
    2360:	bb 1f       	adc	r27, r27
    2362:	3a 95       	dec	r19
    2364:	e2 f7       	brpl	.-8      	; 0x235e <Dio_init+0x44>
    2366:	8a 2f       	mov	r24, r26
    2368:	80 95       	com	r24
    236a:	82 23       	and	r24, r18
    236c:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    236e:	aa b3       	in	r26, 0x1a	; 26
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	28 2f       	mov	r18, r24
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	01 80       	ldd	r0, Z+1	; 0x01
    2378:	02 c0       	rjmp	.+4      	; 0x237e <Dio_init+0x64>
    237a:	22 0f       	add	r18, r18
    237c:	33 1f       	adc	r19, r19
    237e:	0a 94       	dec	r0
    2380:	e2 f7       	brpl	.-8      	; 0x237a <Dio_init+0x60>
    2382:	2a 2b       	or	r18, r26
    2384:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2386:	8b b3       	in	r24, 0x1b	; 27
    2388:	01 80       	ldd	r0, Z+1	; 0x01
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <Dio_init+0x76>
    238c:	66 0f       	add	r22, r22
    238e:	77 1f       	adc	r23, r23
    2390:	0a 94       	dec	r0
    2392:	e2 f7       	brpl	.-8      	; 0x238c <Dio_init+0x72>
    2394:	60 95       	com	r22
    2396:	68 23       	and	r22, r24
    2398:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    239a:	6b b3       	in	r22, 0x1b	; 27
    239c:	83 81       	ldd	r24, Z+3	; 0x03
    239e:	28 2f       	mov	r18, r24
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	01 80       	ldd	r0, Z+1	; 0x01
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <Dio_init+0x90>
    23a6:	22 0f       	add	r18, r18
    23a8:	33 1f       	adc	r19, r19
    23aa:	0a 94       	dec	r0
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <Dio_init+0x8c>
    23ae:	26 2b       	or	r18, r22
    23b0:	2b bb       	out	0x1b, r18	; 27
				break;
    23b2:	8f c0       	rjmp	.+286    	; 0x24d2 <Dio_init+0x1b8>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    23b4:	27 b3       	in	r18, 0x17	; 23
    23b6:	61 e0       	ldi	r22, 0x01	; 1
    23b8:	70 e0       	ldi	r23, 0x00	; 0
    23ba:	db 01       	movw	r26, r22
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <Dio_init+0xa8>
    23be:	aa 0f       	add	r26, r26
    23c0:	bb 1f       	adc	r27, r27
    23c2:	3a 95       	dec	r19
    23c4:	e2 f7       	brpl	.-8      	; 0x23be <Dio_init+0xa4>
    23c6:	8a 2f       	mov	r24, r26
    23c8:	80 95       	com	r24
    23ca:	82 23       	and	r24, r18
    23cc:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    23ce:	a7 b3       	in	r26, 0x17	; 23
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	01 80       	ldd	r0, Z+1	; 0x01
    23d8:	02 c0       	rjmp	.+4      	; 0x23de <Dio_init+0xc4>
    23da:	22 0f       	add	r18, r18
    23dc:	33 1f       	adc	r19, r19
    23de:	0a 94       	dec	r0
    23e0:	e2 f7       	brpl	.-8      	; 0x23da <Dio_init+0xc0>
    23e2:	2a 2b       	or	r18, r26
    23e4:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    23e6:	88 b3       	in	r24, 0x18	; 24
    23e8:	01 80       	ldd	r0, Z+1	; 0x01
    23ea:	02 c0       	rjmp	.+4      	; 0x23f0 <Dio_init+0xd6>
    23ec:	66 0f       	add	r22, r22
    23ee:	77 1f       	adc	r23, r23
    23f0:	0a 94       	dec	r0
    23f2:	e2 f7       	brpl	.-8      	; 0x23ec <Dio_init+0xd2>
    23f4:	60 95       	com	r22
    23f6:	68 23       	and	r22, r24
    23f8:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    23fa:	68 b3       	in	r22, 0x18	; 24
    23fc:	83 81       	ldd	r24, Z+3	; 0x03
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	01 80       	ldd	r0, Z+1	; 0x01
    2404:	02 c0       	rjmp	.+4      	; 0x240a <Dio_init+0xf0>
    2406:	22 0f       	add	r18, r18
    2408:	33 1f       	adc	r19, r19
    240a:	0a 94       	dec	r0
    240c:	e2 f7       	brpl	.-8      	; 0x2406 <Dio_init+0xec>
    240e:	26 2b       	or	r18, r22
    2410:	28 bb       	out	0x18, r18	; 24
				break;
    2412:	5f c0       	rjmp	.+190    	; 0x24d2 <Dio_init+0x1b8>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2414:	24 b3       	in	r18, 0x14	; 20
    2416:	61 e0       	ldi	r22, 0x01	; 1
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	db 01       	movw	r26, r22
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <Dio_init+0x108>
    241e:	aa 0f       	add	r26, r26
    2420:	bb 1f       	adc	r27, r27
    2422:	3a 95       	dec	r19
    2424:	e2 f7       	brpl	.-8      	; 0x241e <Dio_init+0x104>
    2426:	8a 2f       	mov	r24, r26
    2428:	80 95       	com	r24
    242a:	82 23       	and	r24, r18
    242c:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    242e:	a4 b3       	in	r26, 0x14	; 20
    2430:	82 81       	ldd	r24, Z+2	; 0x02
    2432:	28 2f       	mov	r18, r24
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	01 80       	ldd	r0, Z+1	; 0x01
    2438:	02 c0       	rjmp	.+4      	; 0x243e <Dio_init+0x124>
    243a:	22 0f       	add	r18, r18
    243c:	33 1f       	adc	r19, r19
    243e:	0a 94       	dec	r0
    2440:	e2 f7       	brpl	.-8      	; 0x243a <Dio_init+0x120>
    2442:	2a 2b       	or	r18, r26
    2444:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2446:	85 b3       	in	r24, 0x15	; 21
    2448:	01 80       	ldd	r0, Z+1	; 0x01
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <Dio_init+0x136>
    244c:	66 0f       	add	r22, r22
    244e:	77 1f       	adc	r23, r23
    2450:	0a 94       	dec	r0
    2452:	e2 f7       	brpl	.-8      	; 0x244c <Dio_init+0x132>
    2454:	60 95       	com	r22
    2456:	68 23       	and	r22, r24
    2458:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    245a:	65 b3       	in	r22, 0x15	; 21
    245c:	83 81       	ldd	r24, Z+3	; 0x03
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	01 80       	ldd	r0, Z+1	; 0x01
    2464:	02 c0       	rjmp	.+4      	; 0x246a <Dio_init+0x150>
    2466:	22 0f       	add	r18, r18
    2468:	33 1f       	adc	r19, r19
    246a:	0a 94       	dec	r0
    246c:	e2 f7       	brpl	.-8      	; 0x2466 <Dio_init+0x14c>
    246e:	26 2b       	or	r18, r22
    2470:	25 bb       	out	0x15, r18	; 21
				break;
    2472:	2f c0       	rjmp	.+94     	; 0x24d2 <Dio_init+0x1b8>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2474:	21 b3       	in	r18, 0x11	; 17
    2476:	61 e0       	ldi	r22, 0x01	; 1
    2478:	70 e0       	ldi	r23, 0x00	; 0
    247a:	db 01       	movw	r26, r22
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <Dio_init+0x168>
    247e:	aa 0f       	add	r26, r26
    2480:	bb 1f       	adc	r27, r27
    2482:	3a 95       	dec	r19
    2484:	e2 f7       	brpl	.-8      	; 0x247e <Dio_init+0x164>
    2486:	8a 2f       	mov	r24, r26
    2488:	80 95       	com	r24
    248a:	82 23       	and	r24, r18
    248c:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    248e:	a1 b3       	in	r26, 0x11	; 17
    2490:	82 81       	ldd	r24, Z+2	; 0x02
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	01 80       	ldd	r0, Z+1	; 0x01
    2498:	02 c0       	rjmp	.+4      	; 0x249e <Dio_init+0x184>
    249a:	22 0f       	add	r18, r18
    249c:	33 1f       	adc	r19, r19
    249e:	0a 94       	dec	r0
    24a0:	e2 f7       	brpl	.-8      	; 0x249a <Dio_init+0x180>
    24a2:	2a 2b       	or	r18, r26
    24a4:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    24a6:	82 b3       	in	r24, 0x12	; 18
    24a8:	01 80       	ldd	r0, Z+1	; 0x01
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <Dio_init+0x196>
    24ac:	66 0f       	add	r22, r22
    24ae:	77 1f       	adc	r23, r23
    24b0:	0a 94       	dec	r0
    24b2:	e2 f7       	brpl	.-8      	; 0x24ac <Dio_init+0x192>
    24b4:	60 95       	com	r22
    24b6:	68 23       	and	r22, r24
    24b8:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    24ba:	62 b3       	in	r22, 0x12	; 18
    24bc:	83 81       	ldd	r24, Z+3	; 0x03
    24be:	28 2f       	mov	r18, r24
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	01 80       	ldd	r0, Z+1	; 0x01
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <Dio_init+0x1b0>
    24c6:	22 0f       	add	r18, r18
    24c8:	33 1f       	adc	r19, r19
    24ca:	0a 94       	dec	r0
    24cc:	e2 f7       	brpl	.-8      	; 0x24c6 <Dio_init+0x1ac>
    24ce:	26 2b       	or	r18, r22
    24d0:	22 bb       	out	0x12, r18	; 18
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
    24d2:	9f 5f       	subi	r25, 0xFF	; 255
    24d4:	94 31       	cpi	r25, 0x14	; 20
    24d6:	08 f4       	brcc	.+2      	; 0x24da <Dio_init+0x1c0>
    24d8:	26 cf       	rjmp	.-436    	; 0x2326 <Dio_init+0xc>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
    24da:	50 93 7a 05 	sts	0x057A, r21	; 0x80057a <pstrDio_pinsConfig+0x1>
    24de:	40 93 79 05 	sts	0x0579, r20	; 0x800579 <pstrDio_pinsConfig>
	u8_Dio_Status = DIO_INITIALIZED;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
    24e8:	08 95       	ret
{
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
    24ea:	85 e0       	ldi	r24, 0x05	; 5
    24ec:	08 95       	ret
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
    24ee:	83 e0       	ldi	r24, 0x03	; 3
    24f0:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
    24f2:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
    24f4:	08 95       	ret

000024f6 <Dio_writePin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    24f6:	85 31       	cpi	r24, 0x15	; 21
    24f8:	08 f0       	brcs	.+2      	; 0x24fc <Dio_writePin+0x6>
    24fa:	90 c0       	rjmp	.+288    	; 0x261c <Dio_writePin+0x126>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    24fc:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <u8_Dio_Status>
    2500:	99 23       	and	r25, r25
    2502:	09 f4       	brne	.+2      	; 0x2506 <Dio_writePin+0x10>
    2504:	8d c0       	rjmp	.+282    	; 0x2620 <Dio_writePin+0x12a>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    2506:	e8 2f       	mov	r30, r24
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	cf 01       	movw	r24, r30
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	88 0f       	add	r24, r24
    2512:	99 1f       	adc	r25, r25
    2514:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pstrDio_pinsConfig>
    2518:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pstrDio_pinsConfig+0x1>
    251c:	e8 0f       	add	r30, r24
    251e:	f9 1f       	adc	r31, r25
    2520:	80 81       	ld	r24, Z
    2522:	81 30       	cpi	r24, 0x01	; 1
    2524:	21 f1       	breq	.+72     	; 0x256e <Dio_writePin+0x78>
    2526:	30 f0       	brcs	.+12     	; 0x2534 <Dio_writePin+0x3e>
    2528:	82 30       	cpi	r24, 0x02	; 2
    252a:	f1 f1       	breq	.+124    	; 0x25a8 <Dio_writePin+0xb2>
    252c:	83 30       	cpi	r24, 0x03	; 3
    252e:	09 f4       	brne	.+2      	; 0x2532 <Dio_writePin+0x3c>
    2530:	58 c0       	rjmp	.+176    	; 0x25e2 <Dio_writePin+0xec>
    2532:	78 c0       	rjmp	.+240    	; 0x2624 <Dio_writePin+0x12e>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
    2534:	61 30       	cpi	r22, 0x01	; 1
    2536:	69 f4       	brne	.+26     	; 0x2552 <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2538:	2b b3       	in	r18, 0x1b	; 27
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	01 80       	ldd	r0, Z+1	; 0x01
    2540:	02 c0       	rjmp	.+4      	; 0x2546 <Dio_writePin+0x50>
    2542:	88 0f       	add	r24, r24
    2544:	99 1f       	adc	r25, r25
    2546:	0a 94       	dec	r0
    2548:	e2 f7       	brpl	.-8      	; 0x2542 <Dio_writePin+0x4c>
    254a:	82 2b       	or	r24, r18
    254c:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2552:	2b b3       	in	r18, 0x1b	; 27
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	01 80       	ldd	r0, Z+1	; 0x01
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <Dio_writePin+0x6a>
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	0a 94       	dec	r0
    2562:	e2 f7       	brpl	.-8      	; 0x255c <Dio_writePin+0x66>
    2564:	80 95       	com	r24
    2566:	82 23       	and	r24, r18
    2568:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
    256e:	61 30       	cpi	r22, 0x01	; 1
    2570:	69 f4       	brne	.+26     	; 0x258c <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2572:	28 b3       	in	r18, 0x18	; 24
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	01 80       	ldd	r0, Z+1	; 0x01
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <Dio_writePin+0x8a>
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	0a 94       	dec	r0
    2582:	e2 f7       	brpl	.-8      	; 0x257c <Dio_writePin+0x86>
    2584:	82 2b       	or	r24, r18
    2586:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    258c:	28 b3       	in	r18, 0x18	; 24
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	01 80       	ldd	r0, Z+1	; 0x01
    2594:	02 c0       	rjmp	.+4      	; 0x259a <Dio_writePin+0xa4>
    2596:	88 0f       	add	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	0a 94       	dec	r0
    259c:	e2 f7       	brpl	.-8      	; 0x2596 <Dio_writePin+0xa0>
    259e:	80 95       	com	r24
    25a0:	82 23       	and	r24, r18
    25a2:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
    25a8:	61 30       	cpi	r22, 0x01	; 1
    25aa:	69 f4       	brne	.+26     	; 0x25c6 <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    25ac:	25 b3       	in	r18, 0x15	; 21
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	01 80       	ldd	r0, Z+1	; 0x01
    25b4:	02 c0       	rjmp	.+4      	; 0x25ba <Dio_writePin+0xc4>
    25b6:	88 0f       	add	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	0a 94       	dec	r0
    25bc:	e2 f7       	brpl	.-8      	; 0x25b6 <Dio_writePin+0xc0>
    25be:	82 2b       	or	r24, r18
    25c0:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    25c6:	25 b3       	in	r18, 0x15	; 21
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	01 80       	ldd	r0, Z+1	; 0x01
    25ce:	02 c0       	rjmp	.+4      	; 0x25d4 <Dio_writePin+0xde>
    25d0:	88 0f       	add	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	0a 94       	dec	r0
    25d6:	e2 f7       	brpl	.-8      	; 0x25d0 <Dio_writePin+0xda>
    25d8:	80 95       	com	r24
    25da:	82 23       	and	r24, r18
    25dc:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
    25e2:	61 30       	cpi	r22, 0x01	; 1
    25e4:	69 f4       	brne	.+26     	; 0x2600 <Dio_writePin+0x10a>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    25e6:	22 b3       	in	r18, 0x12	; 18
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	01 80       	ldd	r0, Z+1	; 0x01
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <Dio_writePin+0xfe>
    25f0:	88 0f       	add	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	0a 94       	dec	r0
    25f6:	e2 f7       	brpl	.-8      	; 0x25f0 <Dio_writePin+0xfa>
    25f8:	82 2b       	or	r24, r18
    25fa:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2600:	22 b3       	in	r18, 0x12	; 18
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	01 80       	ldd	r0, Z+1	; 0x01
    2608:	02 c0       	rjmp	.+4      	; 0x260e <Dio_writePin+0x118>
    260a:	88 0f       	add	r24, r24
    260c:	99 1f       	adc	r25, r25
    260e:	0a 94       	dec	r0
    2610:	e2 f7       	brpl	.-8      	; 0x260a <Dio_writePin+0x114>
    2612:	80 95       	com	r24
    2614:	82 23       	and	r24, r18
    2616:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	08 95       	ret
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    2620:	86 e0       	ldi	r24, 0x06	; 6
    2622:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    2624:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
    2626:	08 95       	ret

00002628 <Dio_togglePin>:
* Description: Function to Toggle data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    2628:	85 31       	cpi	r24, 0x15	; 21
    262a:	08 f0       	brcs	.+2      	; 0x262e <Dio_togglePin+0x6>
    262c:	4f c0       	rjmp	.+158    	; 0x26cc <Dio_togglePin+0xa4>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    262e:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <u8_Dio_Status>
    2632:	99 23       	and	r25, r25
    2634:	09 f4       	brne	.+2      	; 0x2638 <Dio_togglePin+0x10>
    2636:	4c c0       	rjmp	.+152    	; 0x26d0 <Dio_togglePin+0xa8>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    2638:	e8 2f       	mov	r30, r24
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	cf 01       	movw	r24, r30
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	88 0f       	add	r24, r24
    2644:	99 1f       	adc	r25, r25
    2646:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pstrDio_pinsConfig>
    264a:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pstrDio_pinsConfig+0x1>
    264e:	e8 0f       	add	r30, r24
    2650:	f9 1f       	adc	r31, r25
    2652:	80 81       	ld	r24, Z
    2654:	81 30       	cpi	r24, 0x01	; 1
    2656:	99 f0       	breq	.+38     	; 0x267e <Dio_togglePin+0x56>
    2658:	28 f0       	brcs	.+10     	; 0x2664 <Dio_togglePin+0x3c>
    265a:	82 30       	cpi	r24, 0x02	; 2
    265c:	e9 f0       	breq	.+58     	; 0x2698 <Dio_togglePin+0x70>
    265e:	83 30       	cpi	r24, 0x03	; 3
    2660:	41 f1       	breq	.+80     	; 0x26b2 <Dio_togglePin+0x8a>
    2662:	38 c0       	rjmp	.+112    	; 0x26d4 <Dio_togglePin+0xac>
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2664:	2b b3       	in	r18, 0x1b	; 27
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	01 80       	ldd	r0, Z+1	; 0x01
    266c:	02 c0       	rjmp	.+4      	; 0x2672 <Dio_togglePin+0x4a>
    266e:	88 0f       	add	r24, r24
    2670:	99 1f       	adc	r25, r25
    2672:	0a 94       	dec	r0
    2674:	e2 f7       	brpl	.-8      	; 0x266e <Dio_togglePin+0x46>
    2676:	82 27       	eor	r24, r18
    2678:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    267a:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    267c:	08 95       	ret
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    267e:	28 b3       	in	r18, 0x18	; 24
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	01 80       	ldd	r0, Z+1	; 0x01
    2686:	02 c0       	rjmp	.+4      	; 0x268c <Dio_togglePin+0x64>
    2688:	88 0f       	add	r24, r24
    268a:	99 1f       	adc	r25, r25
    268c:	0a 94       	dec	r0
    268e:	e2 f7       	brpl	.-8      	; 0x2688 <Dio_togglePin+0x60>
    2690:	82 27       	eor	r24, r18
    2692:	88 bb       	out	0x18, r24	; 24
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    2694:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    2696:	08 95       	ret
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2698:	25 b3       	in	r18, 0x15	; 21
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	01 80       	ldd	r0, Z+1	; 0x01
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <Dio_togglePin+0x7e>
    26a2:	88 0f       	add	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	0a 94       	dec	r0
    26a8:	e2 f7       	brpl	.-8      	; 0x26a2 <Dio_togglePin+0x7a>
    26aa:	82 27       	eor	r24, r18
    26ac:	85 bb       	out	0x15, r24	; 21
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    26ae:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    26b0:	08 95       	ret
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    26b2:	22 b3       	in	r18, 0x12	; 18
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	01 80       	ldd	r0, Z+1	; 0x01
    26ba:	02 c0       	rjmp	.+4      	; 0x26c0 <Dio_togglePin+0x98>
    26bc:	88 0f       	add	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	0a 94       	dec	r0
    26c2:	e2 f7       	brpl	.-8      	; 0x26bc <Dio_togglePin+0x94>
    26c4:	82 27       	eor	r24, r18
    26c6:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    26c8:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    26ca:	08 95       	ret
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    26cc:	82 e0       	ldi	r24, 0x02	; 2
    26ce:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    26d0:	86 e0       	ldi	r24, 0x06	; 6
    26d2:	08 95       	ret
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    26d4:	84 e0       	ldi	r24, 0x04	; 4
	}	
	return DIO_STATUS_ERROR_OK;
}
    26d6:	08 95       	ret

000026d8 <Dio_readPin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    26d8:	85 31       	cpi	r24, 0x15	; 21
    26da:	08 f0       	brcs	.+2      	; 0x26de <Dio_readPin+0x6>
    26dc:	7c c0       	rjmp	.+248    	; 0x27d6 <Dio_readPin+0xfe>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    26de:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <u8_Dio_Status>
    26e2:	99 23       	and	r25, r25
    26e4:	09 f4       	brne	.+2      	; 0x26e8 <Dio_readPin+0x10>
    26e6:	79 c0       	rjmp	.+242    	; 0x27da <Dio_readPin+0x102>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    26e8:	e8 2f       	mov	r30, r24
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	cf 01       	movw	r24, r30
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	88 0f       	add	r24, r24
    26f4:	99 1f       	adc	r25, r25
    26f6:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pstrDio_pinsConfig>
    26fa:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pstrDio_pinsConfig+0x1>
    26fe:	e8 0f       	add	r30, r24
    2700:	f9 1f       	adc	r31, r25
    2702:	80 81       	ld	r24, Z
    2704:	81 30       	cpi	r24, 0x01	; 1
    2706:	f9 f0       	breq	.+62     	; 0x2746 <Dio_readPin+0x6e>
    2708:	30 f0       	brcs	.+12     	; 0x2716 <Dio_readPin+0x3e>
    270a:	82 30       	cpi	r24, 0x02	; 2
    270c:	a1 f1       	breq	.+104    	; 0x2776 <Dio_readPin+0x9e>
    270e:	83 30       	cpi	r24, 0x03	; 3
    2710:	09 f4       	brne	.+2      	; 0x2714 <Dio_readPin+0x3c>
    2712:	49 c0       	rjmp	.+146    	; 0x27a6 <Dio_readPin+0xce>
    2714:	64 c0       	rjmp	.+200    	; 0x27de <Dio_readPin+0x106>
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2716:	49 b3       	in	r20, 0x19	; 25
    2718:	51 81       	ldd	r21, Z+1	; 0x01
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	9c 01       	movw	r18, r24
    2720:	05 2e       	mov	r0, r21
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <Dio_readPin+0x50>
    2724:	22 0f       	add	r18, r18
    2726:	33 1f       	adc	r19, r19
    2728:	0a 94       	dec	r0
    272a:	e2 f7       	brpl	.-8      	; 0x2724 <Dio_readPin+0x4c>
    272c:	84 2f       	mov	r24, r20
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	82 23       	and	r24, r18
    2732:	93 23       	and	r25, r19
    2734:	02 c0       	rjmp	.+4      	; 0x273a <Dio_readPin+0x62>
    2736:	95 95       	asr	r25
    2738:	87 95       	ror	r24
    273a:	5a 95       	dec	r21
    273c:	e2 f7       	brpl	.-8      	; 0x2736 <Dio_readPin+0x5e>
    273e:	fb 01       	movw	r30, r22
    2740:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2742:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2744:	08 95       	ret
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2746:	46 b3       	in	r20, 0x16	; 22
    2748:	51 81       	ldd	r21, Z+1	; 0x01
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	9c 01       	movw	r18, r24
    2750:	05 2e       	mov	r0, r21
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <Dio_readPin+0x80>
    2754:	22 0f       	add	r18, r18
    2756:	33 1f       	adc	r19, r19
    2758:	0a 94       	dec	r0
    275a:	e2 f7       	brpl	.-8      	; 0x2754 <Dio_readPin+0x7c>
    275c:	84 2f       	mov	r24, r20
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	82 23       	and	r24, r18
    2762:	93 23       	and	r25, r19
    2764:	02 c0       	rjmp	.+4      	; 0x276a <Dio_readPin+0x92>
    2766:	95 95       	asr	r25
    2768:	87 95       	ror	r24
    276a:	5a 95       	dec	r21
    276c:	e2 f7       	brpl	.-8      	; 0x2766 <Dio_readPin+0x8e>
    276e:	fb 01       	movw	r30, r22
    2770:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2772:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2774:	08 95       	ret
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2776:	43 b3       	in	r20, 0x13	; 19
    2778:	51 81       	ldd	r21, Z+1	; 0x01
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	9c 01       	movw	r18, r24
    2780:	05 2e       	mov	r0, r21
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <Dio_readPin+0xb0>
    2784:	22 0f       	add	r18, r18
    2786:	33 1f       	adc	r19, r19
    2788:	0a 94       	dec	r0
    278a:	e2 f7       	brpl	.-8      	; 0x2784 <Dio_readPin+0xac>
    278c:	84 2f       	mov	r24, r20
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	82 23       	and	r24, r18
    2792:	93 23       	and	r25, r19
    2794:	02 c0       	rjmp	.+4      	; 0x279a <Dio_readPin+0xc2>
    2796:	95 95       	asr	r25
    2798:	87 95       	ror	r24
    279a:	5a 95       	dec	r21
    279c:	e2 f7       	brpl	.-8      	; 0x2796 <Dio_readPin+0xbe>
    279e:	fb 01       	movw	r30, r22
    27a0:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    27a2:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    27a4:	08 95       	ret
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    27a6:	40 b3       	in	r20, 0x10	; 16
    27a8:	51 81       	ldd	r21, Z+1	; 0x01
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	9c 01       	movw	r18, r24
    27b0:	05 2e       	mov	r0, r21
    27b2:	02 c0       	rjmp	.+4      	; 0x27b8 <Dio_readPin+0xe0>
    27b4:	22 0f       	add	r18, r18
    27b6:	33 1f       	adc	r19, r19
    27b8:	0a 94       	dec	r0
    27ba:	e2 f7       	brpl	.-8      	; 0x27b4 <Dio_readPin+0xdc>
    27bc:	84 2f       	mov	r24, r20
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	82 23       	and	r24, r18
    27c2:	93 23       	and	r25, r19
    27c4:	02 c0       	rjmp	.+4      	; 0x27ca <Dio_readPin+0xf2>
    27c6:	95 95       	asr	r25
    27c8:	87 95       	ror	r24
    27ca:	5a 95       	dec	r21
    27cc:	e2 f7       	brpl	.-8      	; 0x27c6 <Dio_readPin+0xee>
    27ce:	fb 01       	movw	r30, r22
    27d0:	80 83       	st	Z, r24
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    27d2:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    27d4:	08 95       	ret
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    27d6:	82 e0       	ldi	r24, 0x02	; 2
    27d8:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    27da:	86 e0       	ldi	r24, 0x06	; 6
    27dc:	08 95       	ret
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    27de:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
    27e0:	08 95       	ret

000027e2 <__vector_1>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
    27e2:	1f 92       	push	r1
    27e4:	0f 92       	push	r0
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	0f 92       	push	r0
    27ea:	11 24       	eor	r1, r1
    27ec:	2f 93       	push	r18
    27ee:	3f 93       	push	r19
    27f0:	4f 93       	push	r20
    27f2:	5f 93       	push	r21
    27f4:	6f 93       	push	r22
    27f6:	7f 93       	push	r23
    27f8:	8f 93       	push	r24
    27fa:	9f 93       	push	r25
    27fc:	af 93       	push	r26
    27fe:	bf 93       	push	r27
    2800:	ef 93       	push	r30
    2802:	ff 93       	push	r31
    2804:	e0 91 7f 05 	lds	r30, 0x057F	; 0x80057f <INT0_CallBackPtr>
    2808:	f0 91 80 05 	lds	r31, 0x0580	; 0x800580 <INT0_CallBackPtr+0x1>
    280c:	09 95       	icall
    280e:	ff 91       	pop	r31
    2810:	ef 91       	pop	r30
    2812:	bf 91       	pop	r27
    2814:	af 91       	pop	r26
    2816:	9f 91       	pop	r25
    2818:	8f 91       	pop	r24
    281a:	7f 91       	pop	r23
    281c:	6f 91       	pop	r22
    281e:	5f 91       	pop	r21
    2820:	4f 91       	pop	r20
    2822:	3f 91       	pop	r19
    2824:	2f 91       	pop	r18
    2826:	0f 90       	pop	r0
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	0f 90       	pop	r0
    282c:	1f 90       	pop	r1
    282e:	18 95       	reti

00002830 <__vector_2>:
    2830:	1f 92       	push	r1
    2832:	0f 92       	push	r0
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	0f 92       	push	r0
    2838:	11 24       	eor	r1, r1
    283a:	2f 93       	push	r18
    283c:	3f 93       	push	r19
    283e:	4f 93       	push	r20
    2840:	5f 93       	push	r21
    2842:	6f 93       	push	r22
    2844:	7f 93       	push	r23
    2846:	8f 93       	push	r24
    2848:	9f 93       	push	r25
    284a:	af 93       	push	r26
    284c:	bf 93       	push	r27
    284e:	ef 93       	push	r30
    2850:	ff 93       	push	r31
    2852:	e0 91 7d 05 	lds	r30, 0x057D	; 0x80057d <INT1_CallBackPtr>
    2856:	f0 91 7e 05 	lds	r31, 0x057E	; 0x80057e <INT1_CallBackPtr+0x1>
    285a:	09 95       	icall
    285c:	ff 91       	pop	r31
    285e:	ef 91       	pop	r30
    2860:	bf 91       	pop	r27
    2862:	af 91       	pop	r26
    2864:	9f 91       	pop	r25
    2866:	8f 91       	pop	r24
    2868:	7f 91       	pop	r23
    286a:	6f 91       	pop	r22
    286c:	5f 91       	pop	r21
    286e:	4f 91       	pop	r20
    2870:	3f 91       	pop	r19
    2872:	2f 91       	pop	r18
    2874:	0f 90       	pop	r0
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	0f 90       	pop	r0
    287a:	1f 90       	pop	r1
    287c:	18 95       	reti

0000287e <__vector_3>:
}
ISR(INT2_IRQ)
{
    287e:	1f 92       	push	r1
    2880:	0f 92       	push	r0
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	0f 92       	push	r0
    2886:	11 24       	eor	r1, r1
    2888:	2f 93       	push	r18
    288a:	3f 93       	push	r19
    288c:	4f 93       	push	r20
    288e:	5f 93       	push	r21
    2890:	6f 93       	push	r22
    2892:	7f 93       	push	r23
    2894:	8f 93       	push	r24
    2896:	9f 93       	push	r25
    2898:	af 93       	push	r26
    289a:	bf 93       	push	r27
    289c:	ef 93       	push	r30
    289e:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
    28a0:	e0 91 7b 05 	lds	r30, 0x057B	; 0x80057b <INT2_CallBackPtr>
    28a4:	f0 91 7c 05 	lds	r31, 0x057C	; 0x80057c <INT2_CallBackPtr+0x1>
    28a8:	09 95       	icall
}
    28aa:	ff 91       	pop	r31
    28ac:	ef 91       	pop	r30
    28ae:	bf 91       	pop	r27
    28b0:	af 91       	pop	r26
    28b2:	9f 91       	pop	r25
    28b4:	8f 91       	pop	r24
    28b6:	7f 91       	pop	r23
    28b8:	6f 91       	pop	r22
    28ba:	5f 91       	pop	r21
    28bc:	4f 91       	pop	r20
    28be:	3f 91       	pop	r19
    28c0:	2f 91       	pop	r18
    28c2:	0f 90       	pop	r0
    28c4:	0f be       	out	0x3f, r0	; 63
    28c6:	0f 90       	pop	r0
    28c8:	1f 90       	pop	r1
    28ca:	18 95       	reti

000028cc <Gpt_ISRHandler>:
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_EXPIRED;
	return GPT_STATUS_ERROR_OK;
}
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	0e c0       	rjmp	.+28     	; 0x28ec <Gpt_ISRHandler+0x20>
    28d0:	29 2f       	mov	r18, r25
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	f9 01       	movw	r30, r18
    28d6:	ee 0f       	add	r30, r30
    28d8:	ff 1f       	adc	r31, r31
    28da:	2e 0f       	add	r18, r30
    28dc:	3f 1f       	adc	r19, r31
    28de:	f9 01       	movw	r30, r18
    28e0:	ee 5d       	subi	r30, 0xDE	; 222
    28e2:	fb 4f       	sbci	r31, 0xFB	; 251
    28e4:	20 81       	ld	r18, Z
    28e6:	28 17       	cp	r18, r24
    28e8:	19 f0       	breq	.+6      	; 0x28f0 <Gpt_ISRHandler+0x24>
    28ea:	9f 5f       	subi	r25, 0xFF	; 255
    28ec:	99 23       	and	r25, r25
    28ee:	81 f3       	breq	.-32     	; 0x28d0 <Gpt_ISRHandler+0x4>
    28f0:	89 2f       	mov	r24, r25
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	fc 01       	movw	r30, r24
    28f6:	ee 0f       	add	r30, r30
    28f8:	ff 1f       	adc	r31, r31
    28fa:	ee 0f       	add	r30, r30
    28fc:	ff 1f       	adc	r31, r31
    28fe:	ee 57       	subi	r30, 0x7E	; 126
    2900:	fa 4f       	sbci	r31, 0xFA	; 250
    2902:	40 81       	ld	r20, Z
    2904:	51 81       	ldd	r21, Z+1	; 0x01
    2906:	62 81       	ldd	r22, Z+2	; 0x02
    2908:	73 81       	ldd	r23, Z+3	; 0x03
    290a:	41 15       	cp	r20, r1
    290c:	51 05       	cpc	r21, r1
    290e:	61 05       	cpc	r22, r1
    2910:	71 05       	cpc	r23, r1
    2912:	81 f0       	breq	.+32     	; 0x2934 <Gpt_ISRHandler+0x68>
    2914:	88 0f       	add	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	88 0f       	add	r24, r24
    291a:	99 1f       	adc	r25, r25
    291c:	fc 01       	movw	r30, r24
    291e:	ee 57       	subi	r30, 0x7E	; 126
    2920:	fa 4f       	sbci	r31, 0xFA	; 250
    2922:	41 50       	subi	r20, 0x01	; 1
    2924:	51 09       	sbc	r21, r1
    2926:	61 09       	sbc	r22, r1
    2928:	71 09       	sbc	r23, r1
    292a:	40 83       	st	Z, r20
    292c:	51 83       	std	Z+1, r21	; 0x01
    292e:	62 83       	std	Z+2, r22	; 0x02
    2930:	73 83       	std	Z+3, r23	; 0x03
    2932:	08 95       	ret
    2934:	23 b7       	in	r18, 0x33	; 51
    2936:	2e 7f       	andi	r18, 0xFE	; 254
    2938:	23 bf       	out	0x33, r18	; 51
    293a:	23 b7       	in	r18, 0x33	; 51
    293c:	2d 7f       	andi	r18, 0xFD	; 253
    293e:	23 bf       	out	0x33, r18	; 51
    2940:	23 b7       	in	r18, 0x33	; 51
    2942:	2b 7f       	andi	r18, 0xFB	; 251
    2944:	23 bf       	out	0x33, r18	; 51
    2946:	29 b7       	in	r18, 0x39	; 57
    2948:	2e 7f       	andi	r18, 0xFE	; 254
    294a:	29 bf       	out	0x39, r18	; 57
    294c:	fc 01       	movw	r30, r24
    294e:	ea 57       	subi	r30, 0x7A	; 122
    2950:	fa 4f       	sbci	r31, 0xFA	; 250
    2952:	24 e0       	ldi	r18, 0x04	; 4
    2954:	20 83       	st	Z, r18
    2956:	e0 91 87 05 	lds	r30, 0x0587	; 0x800587 <Gpt_Timer0_CallBackPtr>
    295a:	f0 91 88 05 	lds	r31, 0x0588	; 0x800588 <Gpt_Timer0_CallBackPtr+0x1>
    295e:	09 95       	icall
    2960:	08 95       	ret

00002962 <GptInit>:
    2962:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <genu_GPTModStatus>
    2966:	81 30       	cpi	r24, 0x01	; 1
    2968:	61 f1       	breq	.+88     	; 0x29c2 <GptInit+0x60>
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	24 c0       	rjmp	.+72     	; 0x29b6 <GptInit+0x54>
    296e:	82 2f       	mov	r24, r18
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	fc 01       	movw	r30, r24
    2974:	ee 0f       	add	r30, r30
    2976:	ff 1f       	adc	r31, r31
    2978:	e8 0f       	add	r30, r24
    297a:	f9 1f       	adc	r31, r25
    297c:	ee 5d       	subi	r30, 0xDE	; 222
    297e:	fb 4f       	sbci	r31, 0xFB	; 251
    2980:	30 81       	ld	r19, Z
    2982:	33 23       	and	r19, r19
    2984:	19 f0       	breq	.+6      	; 0x298c <GptInit+0x2a>
    2986:	33 30       	cpi	r19, 0x03	; 3
    2988:	f0 f4       	brcc	.+60     	; 0x29c6 <GptInit+0x64>
    298a:	0f c0       	rjmp	.+30     	; 0x29aa <GptInit+0x48>
    298c:	fc 01       	movw	r30, r24
    298e:	ee 0f       	add	r30, r30
    2990:	ff 1f       	adc	r31, r31
    2992:	e8 0f       	add	r30, r24
    2994:	f9 1f       	adc	r31, r25
    2996:	ee 5d       	subi	r30, 0xDE	; 222
    2998:	fb 4f       	sbci	r31, 0xFB	; 251
    299a:	32 81       	ldd	r19, Z+2	; 0x02
    299c:	31 11       	cpse	r19, r1
    299e:	05 c0       	rjmp	.+10     	; 0x29aa <GptInit+0x48>
    29a0:	13 be       	out	0x33, r1	; 51
    29a2:	39 b7       	in	r19, 0x39	; 57
    29a4:	3c 7f       	andi	r19, 0xFC	; 252
    29a6:	39 bf       	out	0x39, r19	; 57
    29a8:	12 be       	out	0x32, r1	; 50
    29aa:	fc 01       	movw	r30, r24
    29ac:	ea 57       	subi	r30, 0x7A	; 122
    29ae:	fa 4f       	sbci	r31, 0xFA	; 250
    29b0:	31 e0       	ldi	r19, 0x01	; 1
    29b2:	30 83       	st	Z, r19
    29b4:	2f 5f       	subi	r18, 0xFF	; 255
    29b6:	22 23       	and	r18, r18
    29b8:	d1 f2       	breq	.-76     	; 0x296e <GptInit+0xc>
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <genu_GPTModStatus>
    29c0:	08 95       	ret
    29c2:	83 e0       	ldi	r24, 0x03	; 3
    29c4:	08 95       	ret
    29c6:	85 e0       	ldi	r24, 0x05	; 5
    29c8:	08 95       	ret

000029ca <GptStart_aSync>:
* Return value: enuGpt_Status_t - Returns the status of the function (if there is any error)
* Description: Function to Start the Timer module counting from 0x00 until (u16_Ticks)
               and generate interrupt when OVF.
************************************************************************************/
enuGpt_Status_t GptStart_aSync(u8Gpt_Channel_t ChannelId, u32Gpt_Value_t u16_Ticks, pfGpt_CallBack_t CallBack)
{
    29ca:	0f 93       	push	r16
    29cc:	1f 93       	push	r17
    29ce:	cf 93       	push	r28
    29d0:	df 93       	push	r29
    29d2:	89 01       	movw	r16, r18
	
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    29d4:	81 11       	cpse	r24, r1
    29d6:	4a c0       	rjmp	.+148    	; 0x2a6c <GptStart_aSync+0xa2>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    29d8:	c8 2f       	mov	r28, r24
    29da:	d0 e0       	ldi	r29, 0x00	; 0
    29dc:	fe 01       	movw	r30, r28
    29de:	ea 57       	subi	r30, 0x7A	; 122
    29e0:	fa 4f       	sbci	r31, 0xFA	; 250
    29e2:	80 81       	ld	r24, Z
    29e4:	88 23       	and	r24, r24
    29e6:	09 f4       	brne	.+2      	; 0x29ea <GptStart_aSync+0x20>
    29e8:	43 c0       	rjmp	.+134    	; 0x2a70 <GptStart_aSync+0xa6>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
    29ea:	82 30       	cpi	r24, 0x02	; 2
    29ec:	09 f4       	brne	.+2      	; 0x29f0 <GptStart_aSync+0x26>
    29ee:	42 c0       	rjmp	.+132    	; 0x2a74 <GptStart_aSync+0xaa>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u16_remainderCount=0;
	
	enuChannelsState[ChannelId] = GPT_RUNNING;
    29f0:	82 e0       	ldi	r24, 0x02	; 2
    29f2:	fe 01       	movw	r30, r28
    29f4:	ea 57       	subi	r30, 0x7A	; 122
    29f6:	fa 4f       	sbci	r31, 0xFA	; 250
    29f8:	80 83       	st	Z, r24
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    29fa:	fe 01       	movw	r30, r28
    29fc:	ee 0f       	add	r30, r30
    29fe:	ff 1f       	adc	r31, r31
    2a00:	ec 0f       	add	r30, r28
    2a02:	fd 1f       	adc	r31, r29
    2a04:	ee 5d       	subi	r30, 0xDE	; 222
    2a06:	fb 4f       	sbci	r31, 0xFB	; 251
    2a08:	80 81       	ld	r24, Z
    2a0a:	88 23       	and	r24, r24
    2a0c:	21 f0       	breq	.+8      	; 0x2a16 <GptStart_aSync+0x4c>
    2a0e:	83 30       	cpi	r24, 0x03	; 3
    2a10:	98 f1       	brcs	.+102    	; 0x2a78 <GptStart_aSync+0xae>
		case GPT_TIMER_2: /* In case of Timer 2 */
			break;
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    2a12:	85 e0       	ldi	r24, 0x05	; 5
    2a14:	34 c0       	rjmp	.+104    	; 0x2a7e <GptStart_aSync+0xb4>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Get Number of loops to overflow the timer counter */
			u32_Channels_ISR_Count[ChannelId] = u16_Ticks / GPT_MAX_VALUE_8BIT; //0xFF
    2a16:	cb 01       	movw	r24, r22
    2a18:	ba 01       	movw	r22, r20
    2a1a:	2f ef       	ldi	r18, 0xFF	; 255
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	40 e0       	ldi	r20, 0x00	; 0
    2a20:	50 e0       	ldi	r21, 0x00	; 0
    2a22:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <__udivmodsi4>
    2a26:	fe 01       	movw	r30, r28
    2a28:	ee 0f       	add	r30, r30
    2a2a:	ff 1f       	adc	r31, r31
    2a2c:	ee 0f       	add	r30, r30
    2a2e:	ff 1f       	adc	r31, r31
    2a30:	ee 57       	subi	r30, 0x7E	; 126
    2a32:	fa 4f       	sbci	r31, 0xFA	; 250
    2a34:	20 83       	st	Z, r18
    2a36:	31 83       	std	Z+1, r19	; 0x01
    2a38:	42 83       	std	Z+2, r20	; 0x02
    2a3a:	53 83       	std	Z+3, r21	; 0x03
			/* Get Number of extra ticks (remainder) */
			u16_remainderCount = u16_Ticks % GPT_MAX_VALUE_8BIT;
    2a3c:	26 2f       	mov	r18, r22
    2a3e:	37 2f       	mov	r19, r23
			/* Set the interrupt enable */
			REG_SET_BIT(GPT_TIMSK_REG, GPT_TIMSK_TOIE0);
    2a40:	89 b7       	in	r24, 0x39	; 57
    2a42:	81 60       	ori	r24, 0x01	; 1
    2a44:	89 bf       	out	0x39, r24	; 57
			/* Set the callback function pointer */
			Gpt_Timer0_CallBackPtr=CallBack;
    2a46:	10 93 88 05 	sts	0x0588, r17	; 0x800588 <Gpt_Timer0_CallBackPtr+0x1>
    2a4a:	00 93 87 05 	sts	0x0587, r16	; 0x800587 <Gpt_Timer0_CallBackPtr>
			/* Start the clock with the given pre scaler */
			GPT_TCCR0_REG = (Timers_Configurations[ChannelId].enuClock_Src) << GPT_TCCR0_CS00;
    2a4e:	ce 01       	movw	r24, r28
    2a50:	88 0f       	add	r24, r24
    2a52:	99 1f       	adc	r25, r25
    2a54:	c8 0f       	add	r28, r24
    2a56:	d9 1f       	adc	r29, r25
    2a58:	ce 5d       	subi	r28, 0xDE	; 222
    2a5a:	db 4f       	sbci	r29, 0xFB	; 251
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	83 bf       	out	0x33, r24	; 51
			/* Run the remainder ticks */
			/* Put the value of the 0xFF - remainderTicks to start count from it */
			if(u16_remainderCount != 0)
    2a60:	23 2b       	or	r18, r19
    2a62:	61 f0       	breq	.+24     	; 0x2a7c <GptStart_aSync+0xb2>
			{
				GPT_TCNT0_REG = 256 - u16_remainderCount;
    2a64:	61 95       	neg	r22
    2a66:	62 bf       	out	0x32, r22	; 50
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	09 c0       	rjmp	.+18     	; 0x2a7e <GptStart_aSync+0xb4>
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    2a6c:	86 e0       	ldi	r24, 0x06	; 6
    2a6e:	07 c0       	rjmp	.+14     	; 0x2a7e <GptStart_aSync+0xb4>
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    2a70:	82 e0       	ldi	r24, 0x02	; 2
    2a72:	05 c0       	rjmp	.+10     	; 0x2a7e <GptStart_aSync+0xb4>
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_BUSY;
    2a74:	87 e0       	ldi	r24, 0x07	; 7
    2a76:	03 c0       	rjmp	.+6      	; 0x2a7e <GptStart_aSync+0xb4>
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	01 c0       	rjmp	.+2      	; 0x2a7e <GptStart_aSync+0xb4>
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
}
    2a7e:	df 91       	pop	r29
    2a80:	cf 91       	pop	r28
    2a82:	1f 91       	pop	r17
    2a84:	0f 91       	pop	r16
    2a86:	08 95       	ret

00002a88 <GptStop>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    2a88:	81 11       	cpse	r24, r1
    2a8a:	23 c0       	rjmp	.+70     	; 0x2ad2 <GptStop+0x4a>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	fc 01       	movw	r30, r24
    2a90:	ea 57       	subi	r30, 0x7A	; 122
    2a92:	fa 4f       	sbci	r31, 0xFA	; 250
    2a94:	20 81       	ld	r18, Z
    2a96:	22 23       	and	r18, r18
    2a98:	f1 f0       	breq	.+60     	; 0x2ad6 <GptStop+0x4e>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
    2a9a:	22 30       	cpi	r18, 0x02	; 2
    2a9c:	f1 f4       	brne	.+60     	; 0x2ada <GptStop+0x52>

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	ee 0f       	add	r30, r30
    2aa2:	ff 1f       	adc	r31, r31
    2aa4:	e8 0f       	add	r30, r24
    2aa6:	f9 1f       	adc	r31, r25
    2aa8:	ee 5d       	subi	r30, 0xDE	; 222
    2aaa:	fb 4f       	sbci	r31, 0xFB	; 251
    2aac:	20 81       	ld	r18, Z
    2aae:	22 23       	and	r18, r18
    2ab0:	19 f0       	breq	.+6      	; 0x2ab8 <GptStop+0x30>
    2ab2:	23 30       	cpi	r18, 0x03	; 3
    2ab4:	a0 f4       	brcc	.+40     	; 0x2ade <GptStop+0x56>
    2ab6:	06 c0       	rjmp	.+12     	; 0x2ac4 <GptStop+0x3c>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Stop the clock from the timer */
			GPT_TCCR0_REG &= ~(7 << GPT_TCCR0_CS00);
    2ab8:	23 b7       	in	r18, 0x33	; 51
    2aba:	28 7f       	andi	r18, 0xF8	; 248
    2abc:	23 bf       	out	0x33, r18	; 51
			GPT_TIMSK_REG &= ~(3 << GPT_TIMSK_TOIE0);
    2abe:	29 b7       	in	r18, 0x39	; 57
    2ac0:	2c 7f       	andi	r18, 0xFC	; 252
    2ac2:	29 bf       	out	0x39, r18	; 57
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	ea 57       	subi	r30, 0x7A	; 122
    2ac8:	fa 4f       	sbci	r31, 0xFA	; 250
    2aca:	23 e0       	ldi	r18, 0x03	; 3
    2acc:	20 83       	st	Z, r18
	return GPT_STATUS_ERROR_OK;
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    2ad2:	86 e0       	ldi	r24, 0x06	; 6
    2ad4:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    2ad6:	82 e0       	ldi	r24, 0x02	; 2
    2ad8:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_STOPPED;
    2ada:	88 e0       	ldi	r24, 0x08	; 8
    2adc:	08 95       	ret
		case GPT_TIMER_2: /* In case of Timer 2 */
		break;
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    2ade:	85 e0       	ldi	r24, 0x05	; 5
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
    2ae0:	08 95       	ret

00002ae2 <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    2ae2:	1f 92       	push	r1
    2ae4:	0f 92       	push	r0
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	0f 92       	push	r0
    2aea:	11 24       	eor	r1, r1
    2aec:	2f 93       	push	r18
    2aee:	3f 93       	push	r19
    2af0:	4f 93       	push	r20
    2af2:	5f 93       	push	r21
    2af4:	6f 93       	push	r22
    2af6:	7f 93       	push	r23
    2af8:	8f 93       	push	r24
    2afa:	9f 93       	push	r25
    2afc:	af 93       	push	r26
    2afe:	bf 93       	push	r27
    2b00:	ef 93       	push	r30
    2b02:	ff 93       	push	r31
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	0e 94 66 14 	call	0x28cc	; 0x28cc <Gpt_ISRHandler>
    2b0a:	ff 91       	pop	r31
    2b0c:	ef 91       	pop	r30
    2b0e:	bf 91       	pop	r27
    2b10:	af 91       	pop	r26
    2b12:	9f 91       	pop	r25
    2b14:	8f 91       	pop	r24
    2b16:	7f 91       	pop	r23
    2b18:	6f 91       	pop	r22
    2b1a:	5f 91       	pop	r21
    2b1c:	4f 91       	pop	r20
    2b1e:	3f 91       	pop	r19
    2b20:	2f 91       	pop	r18
    2b22:	0f 90       	pop	r0
    2b24:	0f be       	out	0x3f, r0	; 63
    2b26:	0f 90       	pop	r0
    2b28:	1f 90       	pop	r1
    2b2a:	18 95       	reti

00002b2c <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    2b2c:	1f 92       	push	r1
    2b2e:	0f 92       	push	r0
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	0f 92       	push	r0
    2b34:	11 24       	eor	r1, r1
    2b36:	2f 93       	push	r18
    2b38:	3f 93       	push	r19
    2b3a:	4f 93       	push	r20
    2b3c:	5f 93       	push	r21
    2b3e:	6f 93       	push	r22
    2b40:	7f 93       	push	r23
    2b42:	8f 93       	push	r24
    2b44:	9f 93       	push	r25
    2b46:	af 93       	push	r26
    2b48:	bf 93       	push	r27
    2b4a:	ef 93       	push	r30
    2b4c:	ff 93       	push	r31
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	0e 94 66 14 	call	0x28cc	; 0x28cc <Gpt_ISRHandler>
    2b54:	ff 91       	pop	r31
    2b56:	ef 91       	pop	r30
    2b58:	bf 91       	pop	r27
    2b5a:	af 91       	pop	r26
    2b5c:	9f 91       	pop	r25
    2b5e:	8f 91       	pop	r24
    2b60:	7f 91       	pop	r23
    2b62:	6f 91       	pop	r22
    2b64:	5f 91       	pop	r21
    2b66:	4f 91       	pop	r20
    2b68:	3f 91       	pop	r19
    2b6a:	2f 91       	pop	r18
    2b6c:	0f 90       	pop	r0
    2b6e:	0f be       	out	0x3f, r0	; 63
    2b70:	0f 90       	pop	r0
    2b72:	1f 90       	pop	r1
    2b74:	18 95       	reti

00002b76 <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2b76:	1f 92       	push	r1
    2b78:	0f 92       	push	r0
    2b7a:	0f b6       	in	r0, 0x3f	; 63
    2b7c:	0f 92       	push	r0
    2b7e:	11 24       	eor	r1, r1
    2b80:	2f 93       	push	r18
    2b82:	3f 93       	push	r19
    2b84:	4f 93       	push	r20
    2b86:	5f 93       	push	r21
    2b88:	6f 93       	push	r22
    2b8a:	7f 93       	push	r23
    2b8c:	8f 93       	push	r24
    2b8e:	9f 93       	push	r25
    2b90:	af 93       	push	r26
    2b92:	bf 93       	push	r27
    2b94:	ef 93       	push	r30
    2b96:	ff 93       	push	r31
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	0e 94 66 14 	call	0x28cc	; 0x28cc <Gpt_ISRHandler>
    2b9e:	ff 91       	pop	r31
    2ba0:	ef 91       	pop	r30
    2ba2:	bf 91       	pop	r27
    2ba4:	af 91       	pop	r26
    2ba6:	9f 91       	pop	r25
    2ba8:	8f 91       	pop	r24
    2baa:	7f 91       	pop	r23
    2bac:	6f 91       	pop	r22
    2bae:	5f 91       	pop	r21
    2bb0:	4f 91       	pop	r20
    2bb2:	3f 91       	pop	r19
    2bb4:	2f 91       	pop	r18
    2bb6:	0f 90       	pop	r0
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	0f 90       	pop	r0
    2bbc:	1f 90       	pop	r1
    2bbe:	18 95       	reti

00002bc0 <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2bc0:	1f 92       	push	r1
    2bc2:	0f 92       	push	r0
    2bc4:	0f b6       	in	r0, 0x3f	; 63
    2bc6:	0f 92       	push	r0
    2bc8:	11 24       	eor	r1, r1
    2bca:	2f 93       	push	r18
    2bcc:	3f 93       	push	r19
    2bce:	4f 93       	push	r20
    2bd0:	5f 93       	push	r21
    2bd2:	6f 93       	push	r22
    2bd4:	7f 93       	push	r23
    2bd6:	8f 93       	push	r24
    2bd8:	9f 93       	push	r25
    2bda:	af 93       	push	r26
    2bdc:	bf 93       	push	r27
    2bde:	ef 93       	push	r30
    2be0:	ff 93       	push	r31
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	0e 94 66 14 	call	0x28cc	; 0x28cc <Gpt_ISRHandler>
    2be8:	ff 91       	pop	r31
    2bea:	ef 91       	pop	r30
    2bec:	bf 91       	pop	r27
    2bee:	af 91       	pop	r26
    2bf0:	9f 91       	pop	r25
    2bf2:	8f 91       	pop	r24
    2bf4:	7f 91       	pop	r23
    2bf6:	6f 91       	pop	r22
    2bf8:	5f 91       	pop	r21
    2bfa:	4f 91       	pop	r20
    2bfc:	3f 91       	pop	r19
    2bfe:	2f 91       	pop	r18
    2c00:	0f 90       	pop	r0
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	0f 90       	pop	r0
    2c06:	1f 90       	pop	r1
    2c08:	18 95       	reti

00002c0a <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2c0a:	1f 92       	push	r1
    2c0c:	0f 92       	push	r0
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	0f 92       	push	r0
    2c12:	11 24       	eor	r1, r1
    2c14:	2f 93       	push	r18
    2c16:	3f 93       	push	r19
    2c18:	4f 93       	push	r20
    2c1a:	5f 93       	push	r21
    2c1c:	6f 93       	push	r22
    2c1e:	7f 93       	push	r23
    2c20:	8f 93       	push	r24
    2c22:	9f 93       	push	r25
    2c24:	af 93       	push	r26
    2c26:	bf 93       	push	r27
    2c28:	ef 93       	push	r30
    2c2a:	ff 93       	push	r31
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	0e 94 66 14 	call	0x28cc	; 0x28cc <Gpt_ISRHandler>
    2c32:	ff 91       	pop	r31
    2c34:	ef 91       	pop	r30
    2c36:	bf 91       	pop	r27
    2c38:	af 91       	pop	r26
    2c3a:	9f 91       	pop	r25
    2c3c:	8f 91       	pop	r24
    2c3e:	7f 91       	pop	r23
    2c40:	6f 91       	pop	r22
    2c42:	5f 91       	pop	r21
    2c44:	4f 91       	pop	r20
    2c46:	3f 91       	pop	r19
    2c48:	2f 91       	pop	r18
    2c4a:	0f 90       	pop	r0
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	0f 90       	pop	r0
    2c50:	1f 90       	pop	r1
    2c52:	18 95       	reti

00002c54 <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2c54:	1f 92       	push	r1
    2c56:	0f 92       	push	r0
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	0f 92       	push	r0
    2c5c:	11 24       	eor	r1, r1
    2c5e:	2f 93       	push	r18
    2c60:	3f 93       	push	r19
    2c62:	4f 93       	push	r20
    2c64:	5f 93       	push	r21
    2c66:	6f 93       	push	r22
    2c68:	7f 93       	push	r23
    2c6a:	8f 93       	push	r24
    2c6c:	9f 93       	push	r25
    2c6e:	af 93       	push	r26
    2c70:	bf 93       	push	r27
    2c72:	ef 93       	push	r30
    2c74:	ff 93       	push	r31
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	0e 94 66 14 	call	0x28cc	; 0x28cc <Gpt_ISRHandler>
    2c7c:	ff 91       	pop	r31
    2c7e:	ef 91       	pop	r30
    2c80:	bf 91       	pop	r27
    2c82:	af 91       	pop	r26
    2c84:	9f 91       	pop	r25
    2c86:	8f 91       	pop	r24
    2c88:	7f 91       	pop	r23
    2c8a:	6f 91       	pop	r22
    2c8c:	5f 91       	pop	r21
    2c8e:	4f 91       	pop	r20
    2c90:	3f 91       	pop	r19
    2c92:	2f 91       	pop	r18
    2c94:	0f 90       	pop	r0
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	0f 90       	pop	r0
    2c9a:	1f 90       	pop	r1
    2c9c:	18 95       	reti

00002c9e <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2c9e:	1f 92       	push	r1
    2ca0:	0f 92       	push	r0
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	0f 92       	push	r0
    2ca6:	11 24       	eor	r1, r1
    2ca8:	2f 93       	push	r18
    2caa:	3f 93       	push	r19
    2cac:	4f 93       	push	r20
    2cae:	5f 93       	push	r21
    2cb0:	6f 93       	push	r22
    2cb2:	7f 93       	push	r23
    2cb4:	8f 93       	push	r24
    2cb6:	9f 93       	push	r25
    2cb8:	af 93       	push	r26
    2cba:	bf 93       	push	r27
    2cbc:	ef 93       	push	r30
    2cbe:	ff 93       	push	r31
    2cc0:	82 e0       	ldi	r24, 0x02	; 2
    2cc2:	0e 94 66 14 	call	0x28cc	; 0x28cc <Gpt_ISRHandler>
    2cc6:	ff 91       	pop	r31
    2cc8:	ef 91       	pop	r30
    2cca:	bf 91       	pop	r27
    2ccc:	af 91       	pop	r26
    2cce:	9f 91       	pop	r25
    2cd0:	8f 91       	pop	r24
    2cd2:	7f 91       	pop	r23
    2cd4:	6f 91       	pop	r22
    2cd6:	5f 91       	pop	r21
    2cd8:	4f 91       	pop	r20
    2cda:	3f 91       	pop	r19
    2cdc:	2f 91       	pop	r18
    2cde:	0f 90       	pop	r0
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	0f 90       	pop	r0
    2ce4:	1f 90       	pop	r1
    2ce6:	18 95       	reti

00002ce8 <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2ce8:	1f 92       	push	r1
    2cea:	0f 92       	push	r0
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	0f 92       	push	r0
    2cf0:	11 24       	eor	r1, r1
    2cf2:	2f 93       	push	r18
    2cf4:	3f 93       	push	r19
    2cf6:	4f 93       	push	r20
    2cf8:	5f 93       	push	r21
    2cfa:	6f 93       	push	r22
    2cfc:	7f 93       	push	r23
    2cfe:	8f 93       	push	r24
    2d00:	9f 93       	push	r25
    2d02:	af 93       	push	r26
    2d04:	bf 93       	push	r27
    2d06:	ef 93       	push	r30
    2d08:	ff 93       	push	r31
    2d0a:	82 e0       	ldi	r24, 0x02	; 2
    2d0c:	0e 94 66 14 	call	0x28cc	; 0x28cc <Gpt_ISRHandler>
    2d10:	ff 91       	pop	r31
    2d12:	ef 91       	pop	r30
    2d14:	bf 91       	pop	r27
    2d16:	af 91       	pop	r26
    2d18:	9f 91       	pop	r25
    2d1a:	8f 91       	pop	r24
    2d1c:	7f 91       	pop	r23
    2d1e:	6f 91       	pop	r22
    2d20:	5f 91       	pop	r21
    2d22:	4f 91       	pop	r20
    2d24:	3f 91       	pop	r19
    2d26:	2f 91       	pop	r18
    2d28:	0f 90       	pop	r0
    2d2a:	0f be       	out	0x3f, r0	; 63
    2d2c:	0f 90       	pop	r0
    2d2e:	1f 90       	pop	r1
    2d30:	18 95       	reti

00002d32 <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
    2d32:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2d36:	86 30       	cpi	r24, 0x06	; 6
    2d38:	41 f0       	breq	.+16     	; 0x2d4a <I2C_MasterInit+0x18>
    2d3a:	11 b8       	out	0x01, r1	; 1
    2d3c:	8a ef       	ldi	r24, 0xFA	; 250
    2d3e:	80 b9       	out	0x00, r24	; 0
    2d40:	86 e0       	ldi	r24, 0x06	; 6
    2d42:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <genuI2C_Status>
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	08 95       	ret
    2d4a:	87 e0       	ldi	r24, 0x07	; 7
    2d4c:	08 95       	ret

00002d4e <I2C_MasterSendSTART>:
    2d4e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2d52:	86 30       	cpi	r24, 0x06	; 6
    2d54:	59 f4       	brne	.+22     	; 0x2d6c <I2C_MasterSendSTART+0x1e>
    2d56:	84 ea       	ldi	r24, 0xA4	; 164
    2d58:	86 bf       	out	0x36, r24	; 54
    2d5a:	06 b6       	in	r0, 0x36	; 54
    2d5c:	07 fe       	sbrs	r0, 7
    2d5e:	fd cf       	rjmp	.-6      	; 0x2d5a <I2C_MasterSendSTART+0xc>
    2d60:	81 b1       	in	r24, 0x01	; 1
    2d62:	88 7f       	andi	r24, 0xF8	; 248
    2d64:	88 30       	cpi	r24, 0x08	; 8
    2d66:	21 f0       	breq	.+8      	; 0x2d70 <I2C_MasterSendSTART+0x22>
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	08 95       	ret
    2d6c:	85 e0       	ldi	r24, 0x05	; 5
    2d6e:	08 95       	ret
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	08 95       	ret

00002d74 <I2C_MasterSendSlaveAddress>:
    2d74:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <genuI2C_Status>
    2d78:	96 30       	cpi	r25, 0x06	; 6
    2d7a:	29 f5       	brne	.+74     	; 0x2dc6 <I2C_MasterSendSlaveAddress+0x52>
    2d7c:	62 30       	cpi	r22, 0x02	; 2
    2d7e:	28 f5       	brcc	.+74     	; 0x2dca <I2C_MasterSendSlaveAddress+0x56>
    2d80:	88 23       	and	r24, r24
    2d82:	2c f1       	brlt	.+74     	; 0x2dce <I2C_MasterSendSlaveAddress+0x5a>
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	88 0f       	add	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	68 2b       	or	r22, r24
    2d8c:	63 b9       	out	0x03, r22	; 3
    2d8e:	84 e8       	ldi	r24, 0x84	; 132
    2d90:	86 bf       	out	0x36, r24	; 54
    2d92:	06 b6       	in	r0, 0x36	; 54
    2d94:	07 fe       	sbrs	r0, 7
    2d96:	fd cf       	rjmp	.-6      	; 0x2d92 <I2C_MasterSendSlaveAddress+0x1e>
    2d98:	81 b1       	in	r24, 0x01	; 1
    2d9a:	88 7f       	andi	r24, 0xF8	; 248
    2d9c:	88 33       	cpi	r24, 0x38	; 56
    2d9e:	59 f0       	breq	.+22     	; 0x2db6 <I2C_MasterSendSlaveAddress+0x42>
    2da0:	28 f4       	brcc	.+10     	; 0x2dac <I2C_MasterSendSlaveAddress+0x38>
    2da2:	88 31       	cpi	r24, 0x18	; 24
    2da4:	b1 f0       	breq	.+44     	; 0x2dd2 <I2C_MasterSendSlaveAddress+0x5e>
    2da6:	80 32       	cpi	r24, 0x20	; 32
    2da8:	41 f0       	breq	.+16     	; 0x2dba <I2C_MasterSendSlaveAddress+0x46>
    2daa:	0b c0       	rjmp	.+22     	; 0x2dc2 <I2C_MasterSendSlaveAddress+0x4e>
    2dac:	80 34       	cpi	r24, 0x40	; 64
    2dae:	89 f0       	breq	.+34     	; 0x2dd2 <I2C_MasterSendSlaveAddress+0x5e>
    2db0:	88 34       	cpi	r24, 0x48	; 72
    2db2:	29 f0       	breq	.+10     	; 0x2dbe <I2C_MasterSendSlaveAddress+0x4a>
    2db4:	06 c0       	rjmp	.+12     	; 0x2dc2 <I2C_MasterSendSlaveAddress+0x4e>
    2db6:	88 e3       	ldi	r24, 0x38	; 56
    2db8:	08 95       	ret
    2dba:	80 e2       	ldi	r24, 0x20	; 32
    2dbc:	08 95       	ret
    2dbe:	88 e4       	ldi	r24, 0x48	; 72
    2dc0:	08 95       	ret
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	08 95       	ret
    2dc6:	85 e0       	ldi	r24, 0x05	; 5
    2dc8:	08 95       	ret
    2dca:	82 e0       	ldi	r24, 0x02	; 2
    2dcc:	08 95       	ret
    2dce:	83 e0       	ldi	r24, 0x03	; 3
    2dd0:	08 95       	ret
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	08 95       	ret

00002dd6 <I2C_MasterSendRepSTART>:
    2dd6:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2dda:	86 30       	cpi	r24, 0x06	; 6
    2ddc:	59 f4       	brne	.+22     	; 0x2df4 <I2C_MasterSendRepSTART+0x1e>
    2dde:	84 ea       	ldi	r24, 0xA4	; 164
    2de0:	86 bf       	out	0x36, r24	; 54
    2de2:	06 b6       	in	r0, 0x36	; 54
    2de4:	07 fe       	sbrs	r0, 7
    2de6:	fd cf       	rjmp	.-6      	; 0x2de2 <I2C_MasterSendRepSTART+0xc>
    2de8:	81 b1       	in	r24, 0x01	; 1
    2dea:	88 7f       	andi	r24, 0xF8	; 248
    2dec:	80 31       	cpi	r24, 0x10	; 16
    2dee:	21 f0       	breq	.+8      	; 0x2df8 <I2C_MasterSendRepSTART+0x22>
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	08 95       	ret
    2df4:	85 e0       	ldi	r24, 0x05	; 5
    2df6:	08 95       	ret
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	08 95       	ret

00002dfc <I2C_MasterSendSTOP>:
    2dfc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2e00:	86 30       	cpi	r24, 0x06	; 6
    2e02:	39 f4       	brne	.+14     	; 0x2e12 <I2C_MasterSendSTOP+0x16>
    2e04:	84 e9       	ldi	r24, 0x94	; 148
    2e06:	86 bf       	out	0x36, r24	; 54
    2e08:	06 b6       	in	r0, 0x36	; 54
    2e0a:	04 fc       	sbrc	r0, 4
    2e0c:	fd cf       	rjmp	.-6      	; 0x2e08 <I2C_MasterSendSTOP+0xc>
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	08 95       	ret
    2e12:	85 e0       	ldi	r24, 0x05	; 5
    2e14:	08 95       	ret

00002e16 <I2C_MasterSendByte>:
    2e16:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <genuI2C_Status>
    2e1a:	96 30       	cpi	r25, 0x06	; 6
    2e1c:	69 f4       	brne	.+26     	; 0x2e38 <I2C_MasterSendByte+0x22>
    2e1e:	83 b9       	out	0x03, r24	; 3
    2e20:	84 e8       	ldi	r24, 0x84	; 132
    2e22:	86 bf       	out	0x36, r24	; 54
    2e24:	06 b6       	in	r0, 0x36	; 54
    2e26:	07 fe       	sbrs	r0, 7
    2e28:	fd cf       	rjmp	.-6      	; 0x2e24 <I2C_MasterSendByte+0xe>
    2e2a:	81 b1       	in	r24, 0x01	; 1
    2e2c:	88 7f       	andi	r24, 0xF8	; 248
    2e2e:	88 32       	cpi	r24, 0x28	; 40
    2e30:	29 f0       	breq	.+10     	; 0x2e3c <I2C_MasterSendByte+0x26>
    2e32:	80 33       	cpi	r24, 0x30	; 48
    2e34:	29 f4       	brne	.+10     	; 0x2e40 <I2C_MasterSendByte+0x2a>
    2e36:	08 95       	ret
    2e38:	85 e0       	ldi	r24, 0x05	; 5
    2e3a:	08 95       	ret
    2e3c:	88 e2       	ldi	r24, 0x28	; 40
    2e3e:	08 95       	ret
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	08 95       	ret

00002e44 <I2C_MasterReceiveByte_ACK>:
    2e44:	fc 01       	movw	r30, r24
    2e46:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <genuI2C_Status>
    2e4a:	96 30       	cpi	r25, 0x06	; 6
    2e4c:	79 f4       	brne	.+30     	; 0x2e6c <I2C_MasterReceiveByte_ACK+0x28>
    2e4e:	30 97       	sbiw	r30, 0x00	; 0
    2e50:	79 f0       	breq	.+30     	; 0x2e70 <I2C_MasterReceiveByte_ACK+0x2c>
    2e52:	84 ec       	ldi	r24, 0xC4	; 196
    2e54:	86 bf       	out	0x36, r24	; 54
    2e56:	06 b6       	in	r0, 0x36	; 54
    2e58:	07 fe       	sbrs	r0, 7
    2e5a:	fd cf       	rjmp	.-6      	; 0x2e56 <I2C_MasterReceiveByte_ACK+0x12>
    2e5c:	81 b1       	in	r24, 0x01	; 1
    2e5e:	88 7f       	andi	r24, 0xF8	; 248
    2e60:	80 35       	cpi	r24, 0x50	; 80
    2e62:	41 f4       	brne	.+16     	; 0x2e74 <I2C_MasterReceiveByte_ACK+0x30>
    2e64:	83 b1       	in	r24, 0x03	; 3
    2e66:	80 83       	st	Z, r24
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	08 95       	ret
    2e6c:	85 e0       	ldi	r24, 0x05	; 5
    2e6e:	08 95       	ret
    2e70:	84 e0       	ldi	r24, 0x04	; 4
    2e72:	08 95       	ret
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	08 95       	ret

00002e78 <I2C_MasterReceiveByte_NACK>:
    2e78:	fc 01       	movw	r30, r24
    2e7a:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <genuI2C_Status>
    2e7e:	96 30       	cpi	r25, 0x06	; 6
    2e80:	79 f4       	brne	.+30     	; 0x2ea0 <I2C_MasterReceiveByte_NACK+0x28>
    2e82:	30 97       	sbiw	r30, 0x00	; 0
    2e84:	79 f0       	breq	.+30     	; 0x2ea4 <I2C_MasterReceiveByte_NACK+0x2c>
    2e86:	84 e8       	ldi	r24, 0x84	; 132
    2e88:	86 bf       	out	0x36, r24	; 54
    2e8a:	06 b6       	in	r0, 0x36	; 54
    2e8c:	07 fe       	sbrs	r0, 7
    2e8e:	fd cf       	rjmp	.-6      	; 0x2e8a <I2C_MasterReceiveByte_NACK+0x12>
    2e90:	81 b1       	in	r24, 0x01	; 1
    2e92:	88 7f       	andi	r24, 0xF8	; 248
    2e94:	88 35       	cpi	r24, 0x58	; 88
    2e96:	41 f4       	brne	.+16     	; 0x2ea8 <I2C_MasterReceiveByte_NACK+0x30>
    2e98:	83 b1       	in	r24, 0x03	; 3
    2e9a:	80 83       	st	Z, r24
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	08 95       	ret
    2ea0:	85 e0       	ldi	r24, 0x05	; 5
    2ea2:	08 95       	ret
    2ea4:	84 e0       	ldi	r24, 0x04	; 4
    2ea6:	08 95       	ret
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	08 95       	ret

00002eac <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
    2eac:	7f 92       	push	r7
    2eae:	8f 92       	push	r8
    2eb0:	9f 92       	push	r9
    2eb2:	af 92       	push	r10
    2eb4:	bf 92       	push	r11
    2eb6:	cf 92       	push	r12
    2eb8:	df 92       	push	r13
    2eba:	ef 92       	push	r14
    2ebc:	ff 92       	push	r15
    2ebe:	0f 93       	push	r16
    2ec0:	1f 93       	push	r17
    2ec2:	cf 93       	push	r28
    2ec4:	df 93       	push	r29
    2ec6:	78 2e       	mov	r7, r24
    2ec8:	eb 01       	movw	r28, r22
    2eca:	7a 01       	movw	r14, r20
    2ecc:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    2ece:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2ed2:	86 30       	cpi	r24, 0x06	; 6
    2ed4:	09 f0       	breq	.+2      	; 0x2ed8 <I2C_MasterReceiveGeneral+0x2c>
    2ed6:	47 c0       	rjmp	.+142    	; 0x2f66 <I2C_MasterReceiveGeneral+0xba>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
    2ed8:	20 97       	sbiw	r28, 0x00	; 0
    2eda:	09 f4       	brne	.+2      	; 0x2ede <I2C_MasterReceiveGeneral+0x32>
    2edc:	46 c0       	rjmp	.+140    	; 0x2f6a <I2C_MasterReceiveGeneral+0xbe>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
    2ede:	23 2b       	or	r18, r19
    2ee0:	09 f4       	brne	.+2      	; 0x2ee4 <I2C_MasterReceiveGeneral+0x38>
    2ee2:	45 c0       	rjmp	.+138    	; 0x2f6e <I2C_MasterReceiveGeneral+0xc2>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    2ee4:	77 20       	and	r7, r7
    2ee6:	0c f4       	brge	.+2      	; 0x2eea <I2C_MasterReceiveGeneral+0x3e>
    2ee8:	44 c0       	rjmp	.+136    	; 0x2f72 <I2C_MasterReceiveGeneral+0xc6>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2eea:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <I2C_MasterSendSTART>
    2eee:	88 23       	and	r24, r24
    2ef0:	09 f4       	brne	.+2      	; 0x2ef4 <I2C_MasterReceiveGeneral+0x48>
    2ef2:	4a c0       	rjmp	.+148    	; 0x2f88 <I2C_MasterReceiveGeneral+0xdc>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2ef4:	60 e0       	ldi	r22, 0x00	; 0
    2ef6:	87 2d       	mov	r24, r7
    2ef8:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <I2C_MasterSendSlaveAddress>
    2efc:	81 30       	cpi	r24, 0x01	; 1
    2efe:	d9 f5       	brne	.+118    	; 0x2f76 <I2C_MasterReceiveGeneral+0xca>
    2f00:	0b c0       	rjmp	.+22     	; 0x2f18 <I2C_MasterReceiveGeneral+0x6c>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2f02:	4e 01       	movw	r8, r28
    2f04:	8f ef       	ldi	r24, 0xFF	; 255
    2f06:	88 1a       	sub	r8, r24
    2f08:	98 0a       	sbc	r9, r24
    2f0a:	88 81       	ld	r24, Y
    2f0c:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    2f10:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2f12:	88 23       	and	r24, r24
    2f14:	c9 f1       	breq	.+114    	; 0x2f88 <I2C_MasterReceiveGeneral+0xdc>
    2f16:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    2f18:	57 01       	movw	r10, r14
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	a8 1a       	sub	r10, r24
    2f1e:	b1 08       	sbc	r11, r1
    2f20:	ef 28       	or	r14, r15
    2f22:	79 f7       	brne	.-34     	; 0x2f02 <I2C_MasterReceiveGeneral+0x56>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
    2f24:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <I2C_MasterSendRepSTART>
    2f28:	81 30       	cpi	r24, 0x01	; 1
    2f2a:	39 f5       	brne	.+78     	; 0x2f7a <I2C_MasterReceiveGeneral+0xce>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2f2c:	61 e0       	ldi	r22, 0x01	; 1
    2f2e:	87 2d       	mov	r24, r7
    2f30:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <I2C_MasterSendSlaveAddress>
    2f34:	81 30       	cpi	r24, 0x01	; 1
    2f36:	19 f5       	brne	.+70     	; 0x2f7e <I2C_MasterReceiveGeneral+0xd2>
    2f38:	08 c0       	rjmp	.+16     	; 0x2f4a <I2C_MasterReceiveGeneral+0x9e>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
    2f3a:	e6 01       	movw	r28, r12
    2f3c:	21 96       	adiw	r28, 0x01	; 1
    2f3e:	c6 01       	movw	r24, r12
    2f40:	0e 94 22 17 	call	0x2e44	; 0x2e44 <I2C_MasterReceiveByte_ACK>
    2f44:	81 30       	cpi	r24, 0x01	; 1
    2f46:	e9 f4       	brne	.+58     	; 0x2f82 <I2C_MasterReceiveGeneral+0xd6>
    2f48:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
    2f4a:	01 50       	subi	r16, 0x01	; 1
    2f4c:	11 09       	sbc	r17, r1
    2f4e:	a9 f7       	brne	.-22     	; 0x2f3a <I2C_MasterReceiveGeneral+0x8e>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
    2f50:	c6 01       	movw	r24, r12
    2f52:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <I2C_MasterReceiveByte_NACK>
    2f56:	81 30       	cpi	r24, 0x01	; 1
    2f58:	b1 f4       	brne	.+44     	; 0x2f86 <I2C_MasterReceiveGeneral+0xda>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
    2f5a:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <I2C_MasterSendSTOP>
    2f5e:	81 30       	cpi	r24, 0x01	; 1
    2f60:	99 f0       	breq	.+38     	; 0x2f88 <I2C_MasterReceiveGeneral+0xdc>
		return I2C_STATUS_ERROR_NOK;
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	11 c0       	rjmp	.+34     	; 0x2f88 <I2C_MasterReceiveGeneral+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    2f66:	85 e0       	ldi	r24, 0x05	; 5
    2f68:	0f c0       	rjmp	.+30     	; 0x2f88 <I2C_MasterReceiveGeneral+0xdc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2f6a:	84 e0       	ldi	r24, 0x04	; 4
    2f6c:	0d c0       	rjmp	.+26     	; 0x2f88 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2f6e:	84 e0       	ldi	r24, 0x04	; 4
    2f70:	0b c0       	rjmp	.+22     	; 0x2f88 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    2f72:	83 e0       	ldi	r24, 0x03	; 3
    2f74:	09 c0       	rjmp	.+18     	; 0x2f88 <I2C_MasterReceiveGeneral+0xdc>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2f76:	80 e0       	ldi	r24, 0x00	; 0
    2f78:	07 c0       	rjmp	.+14     	; 0x2f88 <I2C_MasterReceiveGeneral+0xdc>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	05 c0       	rjmp	.+10     	; 0x2f88 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	03 c0       	rjmp	.+6      	; 0x2f88 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	01 c0       	rjmp	.+2      	; 0x2f88 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    2f86:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
    2f88:	df 91       	pop	r29
    2f8a:	cf 91       	pop	r28
    2f8c:	1f 91       	pop	r17
    2f8e:	0f 91       	pop	r16
    2f90:	ff 90       	pop	r15
    2f92:	ef 90       	pop	r14
    2f94:	df 90       	pop	r13
    2f96:	cf 90       	pop	r12
    2f98:	bf 90       	pop	r11
    2f9a:	af 90       	pop	r10
    2f9c:	9f 90       	pop	r9
    2f9e:	8f 90       	pop	r8
    2fa0:	7f 90       	pop	r7
    2fa2:	08 95       	ret

00002fa4 <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
    2fa4:	bf 92       	push	r11
    2fa6:	cf 92       	push	r12
    2fa8:	df 92       	push	r13
    2faa:	ef 92       	push	r14
    2fac:	ff 92       	push	r15
    2fae:	0f 93       	push	r16
    2fb0:	1f 93       	push	r17
    2fb2:	cf 93       	push	r28
    2fb4:	df 93       	push	r29
    2fb6:	18 2f       	mov	r17, r24
    2fb8:	06 2f       	mov	r16, r22
    2fba:	ea 01       	movw	r28, r20
    2fbc:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    2fbe:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2fc2:	86 30       	cpi	r24, 0x06	; 6
    2fc4:	59 f5       	brne	.+86     	; 0x301c <I2C_MasterSendToLocation+0x78>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    2fc6:	20 97       	sbiw	r28, 0x00	; 0
    2fc8:	59 f1       	breq	.+86     	; 0x3020 <I2C_MasterSendToLocation+0x7c>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    2fca:	11 23       	and	r17, r17
    2fcc:	5c f1       	brlt	.+86     	; 0x3024 <I2C_MasterSendToLocation+0x80>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2fce:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <I2C_MasterSendSTART>
    2fd2:	88 23       	and	r24, r24
    2fd4:	61 f1       	breq	.+88     	; 0x302e <I2C_MasterSendToLocation+0x8a>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2fd6:	60 e0       	ldi	r22, 0x00	; 0
    2fd8:	81 2f       	mov	r24, r17
    2fda:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <I2C_MasterSendSlaveAddress>
    2fde:	b8 2e       	mov	r11, r24
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	b8 12       	cpse	r11, r24
    2fe4:	21 c0       	rjmp	.+66     	; 0x3028 <I2C_MasterSendToLocation+0x84>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2fe6:	80 2f       	mov	r24, r16
    2fe8:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <I2C_MasterSendByte>
    2fec:	81 11       	cpse	r24, r1
    2fee:	0c c0       	rjmp	.+24     	; 0x3008 <I2C_MasterSendToLocation+0x64>
    2ff0:	1e c0       	rjmp	.+60     	; 0x302e <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2ff2:	6e 01       	movw	r12, r28
    2ff4:	8f ef       	ldi	r24, 0xFF	; 255
    2ff6:	c8 1a       	sub	r12, r24
    2ff8:	d8 0a       	sbc	r13, r24
    2ffa:	88 81       	ld	r24, Y
    2ffc:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <I2C_MasterSendByte>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    3000:	78 01       	movw	r14, r16
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    3002:	88 23       	and	r24, r24
    3004:	a1 f0       	breq	.+40     	; 0x302e <I2C_MasterSendToLocation+0x8a>
    3006:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    3008:	87 01       	movw	r16, r14
    300a:	01 50       	subi	r16, 0x01	; 1
    300c:	11 09       	sbc	r17, r1
    300e:	ef 28       	or	r14, r15
    3010:	81 f7       	brne	.-32     	; 0x2ff2 <I2C_MasterSendToLocation+0x4e>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    3012:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <I2C_MasterSendSTOP>
    3016:	81 11       	cpse	r24, r1
    3018:	09 c0       	rjmp	.+18     	; 0x302c <I2C_MasterSendToLocation+0x88>
    301a:	09 c0       	rjmp	.+18     	; 0x302e <I2C_MasterSendToLocation+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    301c:	85 e0       	ldi	r24, 0x05	; 5
    301e:	07 c0       	rjmp	.+14     	; 0x302e <I2C_MasterSendToLocation+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    3020:	84 e0       	ldi	r24, 0x04	; 4
    3022:	05 c0       	rjmp	.+10     	; 0x302e <I2C_MasterSendToLocation+0x8a>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    3024:	83 e0       	ldi	r24, 0x03	; 3
    3026:	03 c0       	rjmp	.+6      	; 0x302e <I2C_MasterSendToLocation+0x8a>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	01 c0       	rjmp	.+2      	; 0x302e <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
    302c:	8b 2d       	mov	r24, r11
}
    302e:	df 91       	pop	r29
    3030:	cf 91       	pop	r28
    3032:	1f 91       	pop	r17
    3034:	0f 91       	pop	r16
    3036:	ff 90       	pop	r15
    3038:	ef 90       	pop	r14
    303a:	df 90       	pop	r13
    303c:	cf 90       	pop	r12
    303e:	bf 90       	pop	r11
    3040:	08 95       	ret

00003042 <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
    3042:	0f 93       	push	r16
    3044:	1f 93       	push	r17
    3046:	cf 93       	push	r28
    3048:	df 93       	push	r29
    304a:	1f 92       	push	r1
    304c:	cd b7       	in	r28, 0x3d	; 61
    304e:	de b7       	in	r29, 0x3e	; 62
    3050:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
    3052:	89 01       	movw	r16, r18
    3054:	9a 01       	movw	r18, r20
    3056:	41 e0       	ldi	r20, 0x01	; 1
    3058:	50 e0       	ldi	r21, 0x00	; 0
    305a:	be 01       	movw	r22, r28
    305c:	6f 5f       	subi	r22, 0xFF	; 255
    305e:	7f 4f       	sbci	r23, 0xFF	; 255
    3060:	0e 94 56 17 	call	0x2eac	; 0x2eac <I2C_MasterReceiveGeneral>
}
    3064:	0f 90       	pop	r0
    3066:	df 91       	pop	r29
    3068:	cf 91       	pop	r28
    306a:	1f 91       	pop	r17
    306c:	0f 91       	pop	r16
    306e:	08 95       	ret

00003070 <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
    3070:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <genuSpi_Status>
    3074:	87 30       	cpi	r24, 0x07	; 7
    3076:	b9 f0       	breq	.+46     	; 0x30a6 <Spi_init+0x36>
    3078:	87 b3       	in	r24, 0x17	; 23
    307a:	80 64       	ori	r24, 0x40	; 64
    307c:	87 bb       	out	0x17, r24	; 23
    307e:	87 b3       	in	r24, 0x17	; 23
    3080:	8f 7d       	andi	r24, 0xDF	; 223
    3082:	87 bb       	out	0x17, r24	; 23
    3084:	87 b3       	in	r24, 0x17	; 23
    3086:	8f 7e       	andi	r24, 0xEF	; 239
    3088:	87 bb       	out	0x17, r24	; 23
    308a:	87 b3       	in	r24, 0x17	; 23
    308c:	8f 77       	andi	r24, 0x7F	; 127
    308e:	87 bb       	out	0x17, r24	; 23
    3090:	8d b1       	in	r24, 0x0d	; 13
    3092:	8f 7e       	andi	r24, 0xEF	; 239
    3094:	8d b9       	out	0x0d, r24	; 13
    3096:	8d b1       	in	r24, 0x0d	; 13
    3098:	80 64       	ori	r24, 0x40	; 64
    309a:	8d b9       	out	0x0d, r24	; 13
    309c:	87 e0       	ldi	r24, 0x07	; 7
    309e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <genuSpi_Status>
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	08 95       	ret
    30a6:	88 e0       	ldi	r24, 0x08	; 8
    30a8:	08 95       	ret

000030aa <Spi_SlaveReceiveByte>:
    30aa:	fc 01       	movw	r30, r24
    30ac:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <genuSpi_Status>
    30b0:	97 30       	cpi	r25, 0x07	; 7
    30b2:	41 f4       	brne	.+16     	; 0x30c4 <Spi_SlaveReceiveByte+0x1a>
    30b4:	30 97       	sbiw	r30, 0x00	; 0
    30b6:	41 f0       	breq	.+16     	; 0x30c8 <Spi_SlaveReceiveByte+0x1e>
    30b8:	77 9b       	sbis	0x0e, 7	; 14
    30ba:	fe cf       	rjmp	.-4      	; 0x30b8 <Spi_SlaveReceiveByte+0xe>
    30bc:	8f b1       	in	r24, 0x0f	; 15
    30be:	80 83       	st	Z, r24
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	08 95       	ret
    30c4:	86 e0       	ldi	r24, 0x06	; 6
    30c6:	08 95       	ret
    30c8:	85 e0       	ldi	r24, 0x05	; 5
    30ca:	08 95       	ret

000030cc <Spi_SlaveReceivePacket>:
    30cc:	cf 92       	push	r12
    30ce:	df 92       	push	r13
    30d0:	ef 92       	push	r14
    30d2:	ff 92       	push	r15
    30d4:	1f 93       	push	r17
    30d6:	cf 93       	push	r28
    30d8:	df 93       	push	r29
    30da:	6c 01       	movw	r12, r24
    30dc:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <genuSpi_Status>
    30e0:	97 30       	cpi	r25, 0x07	; 7
    30e2:	b1 f4       	brne	.+44     	; 0x3110 <Spi_SlaveReceivePacket+0x44>
    30e4:	7b 01       	movw	r14, r22
    30e6:	10 e0       	ldi	r17, 0x00	; 0
    30e8:	0c c0       	rjmp	.+24     	; 0x3102 <Spi_SlaveReceivePacket+0x36>
    30ea:	e6 01       	movw	r28, r12
    30ec:	c8 0f       	add	r28, r24
    30ee:	d9 1f       	adc	r29, r25
    30f0:	ce 01       	movw	r24, r28
    30f2:	0e 94 55 18 	call	0x30aa	; 0x30aa <Spi_SlaveReceiveByte>
    30f6:	81 30       	cpi	r24, 0x01	; 1
    30f8:	69 f4       	brne	.+26     	; 0x3114 <Spi_SlaveReceivePacket+0x48>
    30fa:	98 81       	ld	r25, Y
    30fc:	99 23       	and	r25, r25
    30fe:	59 f0       	breq	.+22     	; 0x3116 <Spi_SlaveReceivePacket+0x4a>
    3100:	1f 5f       	subi	r17, 0xFF	; 255
    3102:	81 2f       	mov	r24, r17
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	8e 15       	cp	r24, r14
    3108:	9f 05       	cpc	r25, r15
    310a:	78 f3       	brcs	.-34     	; 0x30ea <Spi_SlaveReceivePacket+0x1e>
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	03 c0       	rjmp	.+6      	; 0x3116 <Spi_SlaveReceivePacket+0x4a>
    3110:	86 e0       	ldi	r24, 0x06	; 6
    3112:	01 c0       	rjmp	.+2      	; 0x3116 <Spi_SlaveReceivePacket+0x4a>
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	df 91       	pop	r29
    3118:	cf 91       	pop	r28
    311a:	1f 91       	pop	r17
    311c:	ff 90       	pop	r15
    311e:	ef 90       	pop	r14
    3120:	df 90       	pop	r13
    3122:	cf 90       	pop	r12
    3124:	08 95       	ret

00003126 <__vector_12>:


    3126:	1f 92       	push	r1
    3128:	0f 92       	push	r0
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	0f 92       	push	r0
    312e:	11 24       	eor	r1, r1
    3130:	2f 93       	push	r18
    3132:	3f 93       	push	r19
    3134:	4f 93       	push	r20
    3136:	5f 93       	push	r21
    3138:	6f 93       	push	r22
    313a:	7f 93       	push	r23
    313c:	8f 93       	push	r24
    313e:	9f 93       	push	r25
    3140:	af 93       	push	r26
    3142:	bf 93       	push	r27
    3144:	ef 93       	push	r30
    3146:	ff 93       	push	r31
    3148:	e0 91 89 05 	lds	r30, 0x0589	; 0x800589 <SPI_STC_CallBackPtr>
    314c:	f0 91 8a 05 	lds	r31, 0x058A	; 0x80058a <SPI_STC_CallBackPtr+0x1>
    3150:	09 95       	icall
    3152:	ff 91       	pop	r31
    3154:	ef 91       	pop	r30
    3156:	bf 91       	pop	r27
    3158:	af 91       	pop	r26
    315a:	9f 91       	pop	r25
    315c:	8f 91       	pop	r24
    315e:	7f 91       	pop	r23
    3160:	6f 91       	pop	r22
    3162:	5f 91       	pop	r21
    3164:	4f 91       	pop	r20
    3166:	3f 91       	pop	r19
    3168:	2f 91       	pop	r18
    316a:	0f 90       	pop	r0
    316c:	0f be       	out	0x3f, r0	; 63
    316e:	0f 90       	pop	r0
    3170:	1f 90       	pop	r1
    3172:	18 95       	reti

00003174 <stringLength>:
	for (s8_loopIndex=length-2; s8_loopIndex>=0; s8_loopIndex--)
	{
		*pu32_Num += (pu8_String[s8_loopIndex]-'0') *digit;
		digit*=10;
	}
}
    3174:	ac 01       	movw	r20, r24
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	01 c0       	rjmp	.+2      	; 0x317c <stringLength+0x8>
    317a:	8f 5f       	subi	r24, 0xFF	; 255
    317c:	fa 01       	movw	r30, r20
    317e:	e8 0f       	add	r30, r24
    3180:	f1 1d       	adc	r31, r1
    3182:	20 81       	ld	r18, Z
    3184:	21 11       	cpse	r18, r1
    3186:	f9 cf       	rjmp	.-14     	; 0x317a <stringLength+0x6>
    3188:	8f 5f       	subi	r24, 0xFF	; 255
    318a:	08 95       	ret

0000318c <stringCompare>:
    318c:	ff 92       	push	r15
    318e:	0f 93       	push	r16
    3190:	1f 93       	push	r17
    3192:	cf 93       	push	r28
    3194:	df 93       	push	r29
    3196:	8c 01       	movw	r16, r24
    3198:	eb 01       	movw	r28, r22
    319a:	0e 94 ba 18 	call	0x3174	; 0x3174 <stringLength>
    319e:	f8 2e       	mov	r15, r24
    31a0:	ce 01       	movw	r24, r28
    31a2:	0e 94 ba 18 	call	0x3174	; 0x3174 <stringLength>
    31a6:	8f 15       	cp	r24, r15
    31a8:	b8 f0       	brcs	.+46     	; 0x31d8 <stringCompare+0x4c>
    31aa:	f8 16       	cp	r15, r24
    31ac:	b8 f0       	brcs	.+46     	; 0x31dc <stringCompare+0x50>
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	09 c0       	rjmp	.+18     	; 0x31c4 <stringCompare+0x38>
    31b2:	fe 01       	movw	r30, r28
    31b4:	e8 0f       	add	r30, r24
    31b6:	f9 1f       	adc	r31, r25
    31b8:	80 81       	ld	r24, Z
    31ba:	82 17       	cp	r24, r18
    31bc:	88 f0       	brcs	.+34     	; 0x31e0 <stringCompare+0x54>
    31be:	28 17       	cp	r18, r24
    31c0:	88 f0       	brcs	.+34     	; 0x31e4 <stringCompare+0x58>
    31c2:	3f 5f       	subi	r19, 0xFF	; 255
    31c4:	83 2f       	mov	r24, r19
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	f8 01       	movw	r30, r16
    31ca:	e8 0f       	add	r30, r24
    31cc:	f9 1f       	adc	r31, r25
    31ce:	20 81       	ld	r18, Z
    31d0:	21 11       	cpse	r18, r1
    31d2:	ef cf       	rjmp	.-34     	; 0x31b2 <stringCompare+0x26>
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	07 c0       	rjmp	.+14     	; 0x31e6 <stringCompare+0x5a>
    31d8:	82 e0       	ldi	r24, 0x02	; 2
    31da:	05 c0       	rjmp	.+10     	; 0x31e6 <stringCompare+0x5a>
    31dc:	83 e0       	ldi	r24, 0x03	; 3
    31de:	03 c0       	rjmp	.+6      	; 0x31e6 <stringCompare+0x5a>
    31e0:	82 e0       	ldi	r24, 0x02	; 2
    31e2:	01 c0       	rjmp	.+2      	; 0x31e6 <stringCompare+0x5a>
    31e4:	83 e0       	ldi	r24, 0x03	; 3
    31e6:	df 91       	pop	r29
    31e8:	cf 91       	pop	r28
    31ea:	1f 91       	pop	r17
    31ec:	0f 91       	pop	r16
    31ee:	ff 90       	pop	r15
    31f0:	08 95       	ret

000031f2 <EmptyString>:
    31f2:	ac 01       	movw	r20, r24
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	02 c0       	rjmp	.+4      	; 0x31fc <EmptyString+0xa>
    31f8:	9f 5f       	subi	r25, 0xFF	; 255
    31fa:	10 82       	st	Z, r1
    31fc:	fa 01       	movw	r30, r20
    31fe:	e9 0f       	add	r30, r25
    3200:	f1 1d       	adc	r31, r1
    3202:	20 81       	ld	r18, Z
    3204:	21 11       	cpse	r18, r1
    3206:	f8 cf       	rjmp	.-16     	; 0x31f8 <EmptyString+0x6>
    3208:	08 95       	ret

0000320a <stringCopy>:
    320a:	dc 01       	movw	r26, r24
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	05 c0       	rjmp	.+10     	; 0x321a <stringCopy+0x10>
    3210:	fb 01       	movw	r30, r22
    3212:	e2 0f       	add	r30, r18
    3214:	f3 1f       	adc	r31, r19
    3216:	40 83       	st	Z, r20
    3218:	9f 5f       	subi	r25, 0xFF	; 255
    321a:	29 2f       	mov	r18, r25
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	fd 01       	movw	r30, r26
    3220:	e2 0f       	add	r30, r18
    3222:	f3 1f       	adc	r31, r19
    3224:	40 81       	ld	r20, Z
    3226:	41 11       	cpse	r20, r1
    3228:	f3 cf       	rjmp	.-26     	; 0x3210 <stringCopy+0x6>
    322a:	08 95       	ret

0000322c <integerToString>:
    322c:	0f 93       	push	r16
    322e:	1f 93       	push	r17
    3230:	cf 93       	push	r28
    3232:	df 93       	push	r29
    3234:	fc 01       	movw	r30, r24
    3236:	8b 01       	movw	r16, r22
    3238:	41 30       	cpi	r20, 0x01	; 1
    323a:	d1 f5       	brne	.+116    	; 0x32b0 <integerToString+0x84>
    323c:	c0 e0       	ldi	r28, 0x00	; 0
    323e:	d0 e0       	ldi	r29, 0x00	; 0
    3240:	6a e0       	ldi	r22, 0x0A	; 10
    3242:	70 e0       	ldi	r23, 0x00	; 0
    3244:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__divmodhi4>
    3248:	cb 01       	movw	r24, r22
    324a:	00 97       	sbiw	r24, 0x00	; 0
    324c:	79 f1       	breq	.+94     	; 0x32ac <integerToString+0x80>
    324e:	21 96       	adiw	r28, 0x01	; 1
    3250:	f7 cf       	rjmp	.-18     	; 0x3240 <integerToString+0x14>
    3252:	a8 01       	movw	r20, r16
    3254:	4c 0f       	add	r20, r28
    3256:	5d 1f       	adc	r21, r29
    3258:	9f 01       	movw	r18, r30
    325a:	ad ec       	ldi	r26, 0xCD	; 205
    325c:	bc ec       	ldi	r27, 0xCC	; 204
    325e:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <__umulhisi3>
    3262:	96 95       	lsr	r25
    3264:	87 95       	ror	r24
    3266:	96 95       	lsr	r25
    3268:	87 95       	ror	r24
    326a:	96 95       	lsr	r25
    326c:	87 95       	ror	r24
    326e:	9c 01       	movw	r18, r24
    3270:	22 0f       	add	r18, r18
    3272:	33 1f       	adc	r19, r19
    3274:	88 0f       	add	r24, r24
    3276:	99 1f       	adc	r25, r25
    3278:	88 0f       	add	r24, r24
    327a:	99 1f       	adc	r25, r25
    327c:	88 0f       	add	r24, r24
    327e:	99 1f       	adc	r25, r25
    3280:	82 0f       	add	r24, r18
    3282:	93 1f       	adc	r25, r19
    3284:	9f 01       	movw	r18, r30
    3286:	28 1b       	sub	r18, r24
    3288:	39 0b       	sbc	r19, r25
    328a:	c9 01       	movw	r24, r18
    328c:	80 5d       	subi	r24, 0xD0	; 208
    328e:	da 01       	movw	r26, r20
    3290:	8c 93       	st	X, r24
    3292:	9f 01       	movw	r18, r30
    3294:	ad ec       	ldi	r26, 0xCD	; 205
    3296:	bc ec       	ldi	r27, 0xCC	; 204
    3298:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <__umulhisi3>
    329c:	fc 01       	movw	r30, r24
    329e:	f6 95       	lsr	r31
    32a0:	e7 95       	ror	r30
    32a2:	f6 95       	lsr	r31
    32a4:	e7 95       	ror	r30
    32a6:	f6 95       	lsr	r31
    32a8:	e7 95       	ror	r30
    32aa:	21 97       	sbiw	r28, 0x01	; 1
    32ac:	30 97       	sbiw	r30, 0x00	; 0
    32ae:	89 f6       	brne	.-94     	; 0x3252 <integerToString+0x26>
    32b0:	df 91       	pop	r29
    32b2:	cf 91       	pop	r28
    32b4:	1f 91       	pop	r17
    32b6:	0f 91       	pop	r16
    32b8:	08 95       	ret

000032ba <stringToFloat>:

float32_t stringToFloat(uint8_t* string)
{
    32ba:	8f 92       	push	r8
    32bc:	9f 92       	push	r9
    32be:	af 92       	push	r10
    32c0:	bf 92       	push	r11
    32c2:	cf 92       	push	r12
    32c4:	df 92       	push	r13
    32c6:	ef 92       	push	r14
    32c8:	ff 92       	push	r15
    32ca:	0f 93       	push	r16
    32cc:	1f 93       	push	r17
    32ce:	cf 93       	push	r28
    32d0:	df 93       	push	r29
    32d2:	ec 01       	movw	r28, r24
	uint8_t strLen = stringLength(string)-1;
    32d4:	0e 94 ba 18 	call	0x3174	; 0x3174 <stringLength>
    32d8:	0f ef       	ldi	r16, 0xFF	; 255
    32da:	08 0f       	add	r16, r24
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
    32dc:	c1 2c       	mov	r12, r1
    32de:	d1 2c       	mov	r13, r1
    32e0:	76 01       	movw	r14, r12
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    32e2:	10 e0       	ldi	r17, 0x00	; 0
    32e4:	1e c0       	rjmp	.+60     	; 0x3322 <stringToFloat+0x68>
	{
		if(string[u8_loopIndex] == '.')
    32e6:	fe 01       	movw	r30, r28
    32e8:	e1 0f       	add	r30, r17
    32ea:	f1 1d       	adc	r31, r1
    32ec:	60 81       	ld	r22, Z
    32ee:	6e 32       	cpi	r22, 0x2E	; 46
    32f0:	11 f4       	brne	.+4      	; 0x32f6 <stringToFloat+0x3c>
		{
			u8_loopIndex++;
    32f2:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    32f4:	18 c0       	rjmp	.+48     	; 0x3326 <stringToFloat+0x6c>
		}
		f32_num += string[u8_loopIndex] - '0';
    32f6:	70 e0       	ldi	r23, 0x00	; 0
    32f8:	60 53       	subi	r22, 0x30	; 48
    32fa:	71 09       	sbc	r23, r1
    32fc:	07 2e       	mov	r0, r23
    32fe:	00 0c       	add	r0, r0
    3300:	88 0b       	sbc	r24, r24
    3302:	99 0b       	sbc	r25, r25
    3304:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <__floatsisf>
    3308:	a7 01       	movw	r20, r14
    330a:	96 01       	movw	r18, r12
    330c:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__addsf3>
		f32_num *= 10;
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	40 e2       	ldi	r20, 0x20	; 32
    3316:	51 e4       	ldi	r21, 0x41	; 65
    3318:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <__mulsf3>
    331c:	6b 01       	movw	r12, r22
    331e:	7c 01       	movw	r14, r24
{
	uint8_t strLen = stringLength(string)-1;
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    3320:	1f 5f       	subi	r17, 0xFF	; 255
    3322:	10 17       	cp	r17, r16
    3324:	00 f3       	brcs	.-64     	; 0x32e6 <stringToFloat+0x2c>
			break;
		}
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e2       	ldi	r20, 0x20	; 32
    332c:	51 e4       	ldi	r21, 0x41	; 65
    332e:	c7 01       	movw	r24, r14
    3330:	b6 01       	movw	r22, r12
    3332:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__divsf3>
    3336:	4b 01       	movw	r8, r22
    3338:	5c 01       	movw	r10, r24
	f32_digit = 1;
    333a:	0f 2e       	mov	r0, r31
    333c:	c1 2c       	mov	r12, r1
    333e:	d1 2c       	mov	r13, r1
    3340:	f0 e8       	ldi	r31, 0x80	; 128
    3342:	ef 2e       	mov	r14, r31
    3344:	ff e3       	ldi	r31, 0x3F	; 63
    3346:	ff 2e       	mov	r15, r31
    3348:	f0 2d       	mov	r31, r0
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    334a:	24 c0       	rjmp	.+72     	; 0x3394 <stringToFloat+0xda>
	{
		f32_digit/=10;
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	40 e2       	ldi	r20, 0x20	; 32
    3352:	51 e4       	ldi	r21, 0x41	; 65
    3354:	c7 01       	movw	r24, r14
    3356:	b6 01       	movw	r22, r12
    3358:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__divsf3>
    335c:	6b 01       	movw	r12, r22
    335e:	7c 01       	movw	r14, r24
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
    3360:	fe 01       	movw	r30, r28
    3362:	e1 0f       	add	r30, r17
    3364:	f1 1d       	adc	r31, r1
    3366:	60 81       	ld	r22, Z
    3368:	70 e0       	ldi	r23, 0x00	; 0
    336a:	60 53       	subi	r22, 0x30	; 48
    336c:	71 09       	sbc	r23, r1
    336e:	07 2e       	mov	r0, r23
    3370:	00 0c       	add	r0, r0
    3372:	88 0b       	sbc	r24, r24
    3374:	99 0b       	sbc	r25, r25
    3376:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <__floatsisf>
    337a:	a7 01       	movw	r20, r14
    337c:	96 01       	movw	r18, r12
    337e:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <__mulsf3>
    3382:	9b 01       	movw	r18, r22
    3384:	ac 01       	movw	r20, r24
    3386:	c5 01       	movw	r24, r10
    3388:	b4 01       	movw	r22, r8
    338a:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__addsf3>
    338e:	4b 01       	movw	r8, r22
    3390:	5c 01       	movw	r10, r24
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
	f32_digit = 1;
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    3392:	1f 5f       	subi	r17, 0xFF	; 255
    3394:	10 17       	cp	r17, r16
    3396:	d0 f2       	brcs	.-76     	; 0x334c <stringToFloat+0x92>
	{
		f32_digit/=10;
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
	}
	return f32_num;
}
    3398:	c5 01       	movw	r24, r10
    339a:	b4 01       	movw	r22, r8
    339c:	df 91       	pop	r29
    339e:	cf 91       	pop	r28
    33a0:	1f 91       	pop	r17
    33a2:	0f 91       	pop	r16
    33a4:	ff 90       	pop	r15
    33a6:	ef 90       	pop	r14
    33a8:	df 90       	pop	r13
    33aa:	cf 90       	pop	r12
    33ac:	bf 90       	pop	r11
    33ae:	af 90       	pop	r10
    33b0:	9f 90       	pop	r9
    33b2:	8f 90       	pop	r8
    33b4:	08 95       	ret

000033b6 <floatToString>:

void floatToString(float32_t f32_num, uint8_t* string)
{
    33b6:	8f 92       	push	r8
    33b8:	9f 92       	push	r9
    33ba:	af 92       	push	r10
    33bc:	bf 92       	push	r11
    33be:	cf 92       	push	r12
    33c0:	df 92       	push	r13
    33c2:	ef 92       	push	r14
    33c4:	ff 92       	push	r15
    33c6:	0f 93       	push	r16
    33c8:	1f 93       	push	r17
    33ca:	cf 93       	push	r28
    33cc:	df 93       	push	r29
    33ce:	4b 01       	movw	r8, r22
    33d0:	5c 01       	movw	r10, r24
    33d2:	8a 01       	movw	r16, r20
	uint32_t u32_num = (uint32_t)f32_num;
    33d4:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__fixunssfsi>
    33d8:	c6 2e       	mov	r12, r22
    33da:	d7 2e       	mov	r13, r23
    33dc:	e8 2e       	mov	r14, r24
    33de:	f9 2e       	mov	r15, r25
    33e0:	26 2f       	mov	r18, r22
    33e2:	37 2f       	mov	r19, r23
    33e4:	48 2f       	mov	r20, r24
    33e6:	59 2f       	mov	r21, r25
	uint8_t u8_digitCount=0;
    33e8:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    33ea:	09 c0       	rjmp	.+18     	; 0x33fe <floatToString+0x48>
	{
		u32_num/=10;
    33ec:	ca 01       	movw	r24, r20
    33ee:	b9 01       	movw	r22, r18
    33f0:	2a e0       	ldi	r18, 0x0A	; 10
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	40 e0       	ldi	r20, 0x00	; 0
    33f6:	50 e0       	ldi	r21, 0x00	; 0
    33f8:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <__udivmodsi4>
		u8_digitCount++;
    33fc:	df 5f       	subi	r29, 0xFF	; 255
{
	uint32_t u32_num = (uint32_t)f32_num;
	uint8_t u8_digitCount=0;
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    33fe:	21 15       	cp	r18, r1
    3400:	31 05       	cpc	r19, r1
    3402:	41 05       	cpc	r20, r1
    3404:	51 05       	cpc	r21, r1
    3406:	91 f7       	brne	.-28     	; 0x33ec <floatToString+0x36>
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
    3408:	cf ef       	ldi	r28, 0xFF	; 255
    340a:	cd 0f       	add	r28, r29
	while(u32_num !=0)
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
    340c:	6c 2d       	mov	r22, r12
    340e:	7d 2d       	mov	r23, r13
    3410:	8e 2d       	mov	r24, r14
    3412:	9f 2d       	mov	r25, r15
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    3414:	14 c0       	rjmp	.+40     	; 0x343e <floatToString+0x88>
	{
		temp = (u32_num % 10)+ '0';
    3416:	2a e0       	ldi	r18, 0x0A	; 10
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	40 e0       	ldi	r20, 0x00	; 0
    341c:	50 e0       	ldi	r21, 0x00	; 0
    341e:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <__udivmodsi4>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	c0 96       	adiw	r24, 0x30	; 48
    3428:	a1 1d       	adc	r26, r1
    342a:	b1 1d       	adc	r27, r1
		string[u8_digitCount--] = temp;
    342c:	f8 01       	movw	r30, r16
    342e:	ec 0f       	add	r30, r28
    3430:	f1 1d       	adc	r31, r1
    3432:	80 83       	st	Z, r24
		u32_num /= 10;
    3434:	62 2f       	mov	r22, r18
    3436:	73 2f       	mov	r23, r19
    3438:	84 2f       	mov	r24, r20
    343a:	95 2f       	mov	r25, r21
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
	{
		temp = (u32_num % 10)+ '0';
		string[u8_digitCount--] = temp;
    343c:	c1 50       	subi	r28, 0x01	; 1
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    343e:	61 15       	cp	r22, r1
    3440:	71 05       	cpc	r23, r1
    3442:	81 05       	cpc	r24, r1
    3444:	91 05       	cpc	r25, r1
    3446:	39 f7       	brne	.-50     	; 0x3416 <floatToString+0x60>
		string[u8_digitCount--] = temp;
		u32_num /= 10;

	}
	u32_num = (uint32_t)f32_num;
	f32_num -= u32_num;
    3448:	6c 2d       	mov	r22, r12
    344a:	7d 2d       	mov	r23, r13
    344c:	8e 2d       	mov	r24, r14
    344e:	9f 2d       	mov	r25, r15
    3450:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <__floatunsisf>
    3454:	9b 01       	movw	r18, r22
    3456:	ac 01       	movw	r20, r24
    3458:	c5 01       	movw	r24, r10
    345a:	b4 01       	movw	r22, r8
    345c:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <__subsf3>
	u32_num = f32_num*10;
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	40 e2       	ldi	r20, 0x20	; 32
    3466:	51 e4       	ldi	r21, 0x41	; 65
    3468:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <__mulsf3>
    346c:	6b 01       	movw	r12, r22
    346e:	7c 01       	movw	r14, r24
    3470:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__fixunssfsi>
	string[u8_indexDot++] = '.';
    3474:	21 e0       	ldi	r18, 0x01	; 1
    3476:	2d 0f       	add	r18, r29
    3478:	f8 01       	movw	r30, r16
    347a:	ed 0f       	add	r30, r29
    347c:	f1 1d       	adc	r31, r1
    347e:	3e e2       	ldi	r19, 0x2E	; 46
    3480:	30 83       	st	Z, r19
	string[u8_indexDot++] = u32_num + '0';
    3482:	de 5f       	subi	r29, 0xFE	; 254
    3484:	f8 01       	movw	r30, r16
    3486:	e2 0f       	add	r30, r18
    3488:	f1 1d       	adc	r31, r1
    348a:	20 e3       	ldi	r18, 0x30	; 48
    348c:	26 0f       	add	r18, r22
    348e:	20 83       	st	Z, r18
	f32_num *=10;
	f32_num -= u32_num;
    3490:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <__floatunsisf>
    3494:	9b 01       	movw	r18, r22
    3496:	ac 01       	movw	r20, r24
    3498:	c7 01       	movw	r24, r14
    349a:	b6 01       	movw	r22, r12
    349c:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <__subsf3>
	u32_num = f32_num*10;
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	40 e2       	ldi	r20, 0x20	; 32
    34a6:	51 e4       	ldi	r21, 0x41	; 65
    34a8:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <__mulsf3>
    34ac:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__fixunssfsi>
	string[u8_indexDot] = u32_num + '0';
    34b0:	f8 01       	movw	r30, r16
    34b2:	ed 0f       	add	r30, r29
    34b4:	f1 1d       	adc	r31, r1
    34b6:	60 5d       	subi	r22, 0xD0	; 208
    34b8:	60 83       	st	Z, r22
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	1f 91       	pop	r17
    34c0:	0f 91       	pop	r16
    34c2:	ff 90       	pop	r15
    34c4:	ef 90       	pop	r14
    34c6:	df 90       	pop	r13
    34c8:	cf 90       	pop	r12
    34ca:	bf 90       	pop	r11
    34cc:	af 90       	pop	r10
    34ce:	9f 90       	pop	r9
    34d0:	8f 90       	pop	r8
    34d2:	08 95       	ret

000034d4 <waveFunction>:
* Parameters (out): None
* Return value: None
* Description: Function to be called inside the timer's ISR.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
void waveFunction(void)
{
    34d4:	0f 93       	push	r16
    34d6:	1f 93       	push	r17
	/* Toggle the Pin of the PWM Channel */
	if(Dio_togglePin(SWPwm_Channels[gu8_currentPwmChannel].u8_DioChannelID) != DIO_STATUS_ERROR_OK)
    34d8:	e0 91 8c 05 	lds	r30, 0x058C	; 0x80058c <gu8_currentPwmChannel>
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	ee 0f       	add	r30, r30
    34e0:	ff 1f       	adc	r31, r31
    34e2:	eb 5d       	subi	r30, 0xDB	; 219
    34e4:	fb 4f       	sbci	r31, 0xFB	; 251
    34e6:	80 81       	ld	r24, Z
    34e8:	0e 94 14 13 	call	0x2628	; 0x2628 <Dio_togglePin>
    34ec:	81 30       	cpi	r24, 0x01	; 1
    34ee:	09 f0       	breq	.+2      	; 0x34f2 <waveFunction+0x1e>
    34f0:	76 c0       	rjmp	.+236    	; 0x35de <waveFunction+0x10a>
		return;
	/* Check if the PWM Channel is still in Running State */
	if (gstr_ChannelsData[gu8_currentPwmChannel].enuChannelState == SWPWM_RUNNING)
    34f2:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <gu8_currentPwmChannel>
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	9c 01       	movw	r18, r24
    34fa:	22 0f       	add	r18, r18
    34fc:	33 1f       	adc	r19, r19
    34fe:	f9 01       	movw	r30, r18
    3500:	ee 0f       	add	r30, r30
    3502:	ff 1f       	adc	r31, r31
    3504:	ee 0f       	add	r30, r30
    3506:	ff 1f       	adc	r31, r31
    3508:	ee 0f       	add	r30, r30
    350a:	ff 1f       	adc	r31, r31
    350c:	e2 1b       	sub	r30, r18
    350e:	f3 0b       	sbc	r31, r19
    3510:	e3 57       	subi	r30, 0x73	; 115
    3512:	fa 4f       	sbci	r31, 0xFA	; 250
    3514:	25 85       	ldd	r18, Z+13	; 0x0d
    3516:	22 30       	cpi	r18, 0x02	; 2
    3518:	09 f0       	breq	.+2      	; 0x351c <waveFunction+0x48>
    351a:	61 c0       	rjmp	.+194    	; 0x35de <waveFunction+0x10a>
	{
		/* Start the Timer again with the new ticks assigned */
		if(GptStart_aSync(SWPwm_Channels[gu8_currentPwmChannel].u8_GptChannelID,\
    351c:	88 0f       	add	r24, r24
    351e:	99 1f       	adc	r25, r25
    3520:	fc 01       	movw	r30, r24
    3522:	ee 0f       	add	r30, r30
    3524:	ff 1f       	adc	r31, r31
    3526:	ee 0f       	add	r30, r30
    3528:	ff 1f       	adc	r31, r31
    352a:	ee 0f       	add	r30, r30
    352c:	ff 1f       	adc	r31, r31
    352e:	e8 1b       	sub	r30, r24
    3530:	f9 0b       	sbc	r31, r25
    3532:	e3 57       	subi	r30, 0x73	; 115
    3534:	fa 4f       	sbci	r31, 0xFA	; 250
    3536:	41 85       	ldd	r20, Z+9	; 0x09
    3538:	52 85       	ldd	r21, Z+10	; 0x0a
    353a:	63 85       	ldd	r22, Z+11	; 0x0b
    353c:	74 85       	ldd	r23, Z+12	; 0x0c
    353e:	fc 01       	movw	r30, r24
    3540:	eb 5d       	subi	r30, 0xDB	; 219
    3542:	fb 4f       	sbci	r31, 0xFB	; 251
    3544:	2a e6       	ldi	r18, 0x6A	; 106
    3546:	3a e1       	ldi	r19, 0x1A	; 26
    3548:	81 81       	ldd	r24, Z+1	; 0x01
    354a:	0e 94 e5 14 	call	0x29ca	; 0x29ca <GptStart_aSync>
    354e:	81 30       	cpi	r24, 0x01	; 1
    3550:	09 f0       	breq	.+2      	; 0x3554 <waveFunction+0x80>
    3552:	45 c0       	rjmp	.+138    	; 0x35de <waveFunction+0x10a>
		                  gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks,\
						   waveFunction) != GPT_STATUS_ERROR_OK)	return;
		
		/* Replace the next ticks to be counted between ONTicks and OFFTicks*/
		if(gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks == gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks)
    3554:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <gu8_currentPwmChannel>
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	9c 01       	movw	r18, r24
    355c:	22 0f       	add	r18, r18
    355e:	33 1f       	adc	r19, r19
    3560:	f9 01       	movw	r30, r18
    3562:	ee 0f       	add	r30, r30
    3564:	ff 1f       	adc	r31, r31
    3566:	ee 0f       	add	r30, r30
    3568:	ff 1f       	adc	r31, r31
    356a:	ee 0f       	add	r30, r30
    356c:	ff 1f       	adc	r31, r31
    356e:	e2 1b       	sub	r30, r18
    3570:	f3 0b       	sbc	r31, r19
    3572:	e3 57       	subi	r30, 0x73	; 115
    3574:	fa 4f       	sbci	r31, 0xFA	; 250
    3576:	01 85       	ldd	r16, Z+9	; 0x09
    3578:	12 85       	ldd	r17, Z+10	; 0x0a
    357a:	23 85       	ldd	r18, Z+11	; 0x0b
    357c:	34 85       	ldd	r19, Z+12	; 0x0c
    357e:	45 81       	ldd	r20, Z+5	; 0x05
    3580:	56 81       	ldd	r21, Z+6	; 0x06
    3582:	67 81       	ldd	r22, Z+7	; 0x07
    3584:	70 85       	ldd	r23, Z+8	; 0x08
    3586:	04 17       	cp	r16, r20
    3588:	15 07       	cpc	r17, r21
    358a:	26 07       	cpc	r18, r22
    358c:	37 07       	cpc	r19, r23
    358e:	b1 f4       	brne	.+44     	; 0x35bc <waveFunction+0xe8>
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_ONTicks;
    3590:	88 0f       	add	r24, r24
    3592:	99 1f       	adc	r25, r25
    3594:	fc 01       	movw	r30, r24
    3596:	ee 0f       	add	r30, r30
    3598:	ff 1f       	adc	r31, r31
    359a:	ee 0f       	add	r30, r30
    359c:	ff 1f       	adc	r31, r31
    359e:	ee 0f       	add	r30, r30
    35a0:	ff 1f       	adc	r31, r31
    35a2:	e8 1b       	sub	r30, r24
    35a4:	f9 0b       	sbc	r31, r25
    35a6:	e3 57       	subi	r30, 0x73	; 115
    35a8:	fa 4f       	sbci	r31, 0xFA	; 250
    35aa:	81 81       	ldd	r24, Z+1	; 0x01
    35ac:	92 81       	ldd	r25, Z+2	; 0x02
    35ae:	a3 81       	ldd	r26, Z+3	; 0x03
    35b0:	b4 81       	ldd	r27, Z+4	; 0x04
    35b2:	81 87       	std	Z+9, r24	; 0x09
    35b4:	92 87       	std	Z+10, r25	; 0x0a
    35b6:	a3 87       	std	Z+11, r26	; 0x0b
    35b8:	b4 87       	std	Z+12, r27	; 0x0c
    35ba:	11 c0       	rjmp	.+34     	; 0x35de <waveFunction+0x10a>
		else
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks;
    35bc:	88 0f       	add	r24, r24
    35be:	99 1f       	adc	r25, r25
    35c0:	fc 01       	movw	r30, r24
    35c2:	ee 0f       	add	r30, r30
    35c4:	ff 1f       	adc	r31, r31
    35c6:	ee 0f       	add	r30, r30
    35c8:	ff 1f       	adc	r31, r31
    35ca:	ee 0f       	add	r30, r30
    35cc:	ff 1f       	adc	r31, r31
    35ce:	e8 1b       	sub	r30, r24
    35d0:	f9 0b       	sbc	r31, r25
    35d2:	e3 57       	subi	r30, 0x73	; 115
    35d4:	fa 4f       	sbci	r31, 0xFA	; 250
    35d6:	41 87       	std	Z+9, r20	; 0x09
    35d8:	52 87       	std	Z+10, r21	; 0x0a
    35da:	63 87       	std	Z+11, r22	; 0x0b
    35dc:	74 87       	std	Z+12, r23	; 0x0c
	}
}
    35de:	1f 91       	pop	r17
    35e0:	0f 91       	pop	r16
    35e2:	08 95       	ret

000035e4 <SWPwm_Init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
    35e4:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <genu_SWPwmModStatus>
    35e8:	81 30       	cpi	r24, 0x01	; 1
    35ea:	91 f0       	breq	.+36     	; 0x3610 <SWPwm_Init+0x2c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
    35ec:	0e 94 b1 14 	call	0x2962	; 0x2962 <GptInit>
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
    35f0:	81 30       	cpi	r24, 0x01	; 1
    35f2:	11 f0       	breq	.+4      	; 0x35f8 <SWPwm_Init+0x14>
    35f4:	83 30       	cpi	r24, 0x03	; 3
    35f6:	71 f4       	brne	.+28     	; 0x3614 <SWPwm_Init+0x30>
		return SWPWM_STATUS_ERROR_NOK;
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    35f8:	8a e8       	ldi	r24, 0x8A	; 138
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	0e 94 8d 11 	call	0x231a	; 0x231a <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    3600:	81 30       	cpi	r24, 0x01	; 1
    3602:	11 f0       	breq	.+4      	; 0x3608 <SWPwm_Init+0x24>
    3604:	87 30       	cpi	r24, 0x07	; 7
    3606:	41 f4       	brne	.+16     	; 0x3618 <SWPwm_Init+0x34>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <genu_SWPwmModStatus>
	return SWPWM_STATUS_ERROR_OK;
    360e:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_ERROR_NOK;
    3610:	80 e0       	ldi	r24, 0x00	; 0
    3612:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
		return SWPWM_STATUS_ERROR_NOK;
    3614:	80 e0       	ldi	r24, 0x00	; 0
    3616:	08 95       	ret
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return SWPWM_STATUS_ERROR_NOK;
    3618:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
	return SWPWM_STATUS_ERROR_OK;
}
    361a:	08 95       	ret

0000361c <SWPwm_Start>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Start(u8SWPwm_Channel_t u8_ChannelID, uint32_t u32_Freq, uint8_t u8_DutyCycle)
{
    361c:	4f 92       	push	r4
    361e:	5f 92       	push	r5
    3620:	6f 92       	push	r6
    3622:	7f 92       	push	r7
    3624:	8f 92       	push	r8
    3626:	9f 92       	push	r9
    3628:	af 92       	push	r10
    362a:	bf 92       	push	r11
    362c:	cf 92       	push	r12
    362e:	df 92       	push	r13
    3630:	ef 92       	push	r14
    3632:	ff 92       	push	r15
    3634:	0f 93       	push	r16
    3636:	1f 93       	push	r17
    3638:	cf 93       	push	r28
    363a:	df 93       	push	r29
    363c:	00 d0       	rcall	.+0      	; 0x363e <SWPwm_Start+0x22>
    363e:	00 d0       	rcall	.+0      	; 0x3640 <SWPwm_Start+0x24>
    3640:	00 d0       	rcall	.+0      	; 0x3642 <SWPwm_Start+0x26>
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    3646:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <genu_SWPwmModStatus>
    364a:	91 30       	cpi	r25, 0x01	; 1
    364c:	09 f0       	breq	.+2      	; 0x3650 <SWPwm_Start+0x34>
    364e:	f2 c0       	rjmp	.+484    	; 0x3834 <SWPwm_Start+0x218>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    3650:	81 11       	cpse	r24, r1
    3652:	f2 c0       	rjmp	.+484    	; 0x3838 <SWPwm_Start+0x21c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
    3654:	25 36       	cpi	r18, 0x65	; 101
    3656:	08 f0       	brcs	.+2      	; 0x365a <SWPwm_Start+0x3e>
    3658:	f1 c0       	rjmp	.+482    	; 0x383c <SWPwm_Start+0x220>
	{
		return SWPWM_STATUS_DC_OUTRANGE;
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
    365a:	e8 2f       	mov	r30, r24
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	fe 83       	std	Y+6, r31	; 0x06
    3660:	ed 83       	std	Y+5, r30	; 0x05
    3662:	df 01       	movw	r26, r30
    3664:	aa 0f       	add	r26, r26
    3666:	bb 1f       	adc	r27, r27
    3668:	fd 01       	movw	r30, r26
    366a:	ee 0f       	add	r30, r30
    366c:	ff 1f       	adc	r31, r31
    366e:	ee 0f       	add	r30, r30
    3670:	ff 1f       	adc	r31, r31
    3672:	ee 0f       	add	r30, r30
    3674:	ff 1f       	adc	r31, r31
    3676:	ea 1b       	sub	r30, r26
    3678:	fb 0b       	sbc	r31, r27
    367a:	e3 57       	subi	r30, 0x73	; 115
    367c:	fa 4f       	sbci	r31, 0xFA	; 250
    367e:	95 85       	ldd	r25, Z+13	; 0x0d
    3680:	92 30       	cpi	r25, 0x02	; 2
    3682:	09 f4       	brne	.+2      	; 0x3686 <SWPwm_Start+0x6a>
    3684:	dd c0       	rjmp	.+442    	; 0x3840 <SWPwm_Start+0x224>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
    3686:	22 23       	and	r18, r18
    3688:	09 f4       	brne	.+2      	; 0x368c <SWPwm_Start+0x70>
    368a:	dc c0       	rjmp	.+440    	; 0x3844 <SWPwm_Start+0x228>
    368c:	12 2f       	mov	r17, r18
    368e:	c8 2e       	mov	r12, r24
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
	}else if(u8_DutyCycle == 100)
    3690:	24 36       	cpi	r18, 0x64	; 100
    3692:	61 f4       	brne	.+24     	; 0x36ac <SWPwm_Start+0x90>
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    3694:	fd 01       	movw	r30, r26
    3696:	eb 5d       	subi	r30, 0xDB	; 219
    3698:	fb 4f       	sbci	r31, 0xFB	; 251
    369a:	61 e0       	ldi	r22, 0x01	; 1
    369c:	80 81       	ld	r24, Z
    369e:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    36a2:	81 30       	cpi	r24, 0x01	; 1
    36a4:	09 f4       	brne	.+2      	; 0x36a8 <SWPwm_Start+0x8c>
    36a6:	d0 c0       	rjmp	.+416    	; 0x3848 <SWPwm_Start+0x22c>
			return SWPWM_STATUS_ERROR_NOK;
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	d5 c0       	rjmp	.+426    	; 0x3856 <SWPwm_Start+0x23a>
		return SWPWM_STATUS_ERROR_OK;
	}
	
	float32_t f32_wavePeriodTime = (float32_t)1 / u32_Freq;					/* The Periodic Time for the Generated Pulse in Seconds */
    36ac:	cb 01       	movw	r24, r22
    36ae:	ba 01       	movw	r22, r20
    36b0:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <__floatunsisf>
    36b4:	9b 01       	movw	r18, r22
    36b6:	ac 01       	movw	r20, r24
    36b8:	60 e0       	ldi	r22, 0x00	; 0
    36ba:	70 e0       	ldi	r23, 0x00	; 0
    36bc:	80 e8       	ldi	r24, 0x80	; 128
    36be:	9f e3       	ldi	r25, 0x3F	; 63
    36c0:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__divsf3>
    36c4:	4b 01       	movw	r8, r22
    36c6:	5c 01       	movw	r10, r24
	float32_t f32_waveONTime = (f32_wavePeriodTime*u8_DutyCycle) / 100;		/* The HIGH Level Time in Seconds */
    36c8:	61 2f       	mov	r22, r17
    36ca:	70 e0       	ldi	r23, 0x00	; 0
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <__floatsisf>
    36d4:	a5 01       	movw	r20, r10
    36d6:	94 01       	movw	r18, r8
    36d8:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <__mulsf3>
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	48 ec       	ldi	r20, 0xC8	; 200
    36e2:	52 e4       	ldi	r21, 0x42	; 66
    36e4:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__divsf3>
    36e8:	2b 01       	movw	r4, r22
    36ea:	3c 01       	movw	r6, r24
	float32_t f32_waveOFFTime = f32_wavePeriodTime - f32_waveONTime;		/* The LOW Level Time in Seconds */
    36ec:	9b 01       	movw	r18, r22
    36ee:	ac 01       	movw	r20, r24
    36f0:	c5 01       	movw	r24, r10
    36f2:	b4 01       	movw	r22, r8
    36f4:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <__subsf3>
    36f8:	4b 01       	movw	r8, r22
    36fa:	5c 01       	movw	r10, r24
	float32_t f32_systemPeriodTime = 0.0;
	uint16_t  u16_prescalerValue = 0;
	
	/* Get the Prescaler Value of the used Timer Channel */
	switch(Timers_Configurations[SWPwm_Channels[u8_ChannelID].u8_GptChannelID].enuClock_Src)
    36fc:	ed 81       	ldd	r30, Y+5	; 0x05
    36fe:	fe 81       	ldd	r31, Y+6	; 0x06
    3700:	ee 0f       	add	r30, r30
    3702:	ff 1f       	adc	r31, r31
    3704:	eb 5d       	subi	r30, 0xDB	; 219
    3706:	fb 4f       	sbci	r31, 0xFB	; 251
    3708:	d1 80       	ldd	r13, Z+1	; 0x01
    370a:	8d 2d       	mov	r24, r13
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	fc 01       	movw	r30, r24
    3710:	ee 0f       	add	r30, r30
    3712:	ff 1f       	adc	r31, r31
    3714:	8e 0f       	add	r24, r30
    3716:	9f 1f       	adc	r25, r31
    3718:	fc 01       	movw	r30, r24
    371a:	ee 5d       	subi	r30, 0xDE	; 222
    371c:	fb 4f       	sbci	r31, 0xFB	; 251
    371e:	e1 81       	ldd	r30, Z+1	; 0x01
    3720:	8e 2f       	mov	r24, r30
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	fc 01       	movw	r30, r24
    3726:	31 97       	sbiw	r30, 0x01	; 1
    3728:	e7 30       	cpi	r30, 0x07	; 7
    372a:	f1 05       	cpc	r31, r1
    372c:	08 f0       	brcs	.+2      	; 0x3730 <SWPwm_Start+0x114>
    372e:	8e c0       	rjmp	.+284    	; 0x384c <SWPwm_Start+0x230>
    3730:	e6 5d       	subi	r30, 0xD6	; 214
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	0c 94 c6 1f 	jmp	0x3f8c	; 0x3f8c <__tablejump2__>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
    3738:	61 e0       	ldi	r22, 0x01	; 1
    373a:	70 e0       	ldi	r23, 0x00	; 0
    373c:	0b c0       	rjmp	.+22     	; 0x3754 <SWPwm_Start+0x138>
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
			break;
		case GPT_CLK_SRC_PRSCLR_64:
			u16_prescalerValue = 64;
    373e:	60 e4       	ldi	r22, 0x40	; 64
    3740:	70 e0       	ldi	r23, 0x00	; 0
			break;
    3742:	08 c0       	rjmp	.+16     	; 0x3754 <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_256:
			u16_prescalerValue = 256;
    3744:	60 e0       	ldi	r22, 0x00	; 0
    3746:	71 e0       	ldi	r23, 0x01	; 1
			break;
    3748:	05 c0       	rjmp	.+10     	; 0x3754 <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_1024:
			u16_prescalerValue = 1024;
    374a:	60 e0       	ldi	r22, 0x00	; 0
    374c:	74 e0       	ldi	r23, 0x04	; 4
			break;
    374e:	02 c0       	rjmp	.+4      	; 0x3754 <SWPwm_Start+0x138>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
    3750:	68 e0       	ldi	r22, 0x08	; 8
    3752:	70 e0       	ldi	r23, 0x00	; 0
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
	}
	
	f32_systemPeriodTime = (float32_t)u16_prescalerValue/SYS_CLOCK_FREQUENCY;				/* The Controllers Periodic Time in seconds based on the System Clock Frequency */
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <__floatunsisf>
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	34 e2       	ldi	r19, 0x24	; 36
    3760:	44 e7       	ldi	r20, 0x74	; 116
    3762:	59 e4       	ldi	r21, 0x49	; 73
    3764:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__divsf3>
    3768:	69 83       	std	Y+1, r22	; 0x01
    376a:	7a 83       	std	Y+2, r23	; 0x02
    376c:	8b 83       	std	Y+3, r24	; 0x03
    376e:	9c 83       	std	Y+4, r25	; 0x04
	gu8_currentPwmChannel = u8_ChannelID;
    3770:	c0 92 8c 05 	sts	0x058C, r12	; 0x80058c <gu8_currentPwmChannel>
	gstr_ChannelsData[u8_ChannelID].u32_ONTicks = f32_waveONTime/f32_systemPeriodTime;		/* The HIGH Level Time in Ticks */
    3774:	9b 01       	movw	r18, r22
    3776:	ac 01       	movw	r20, r24
    3778:	c3 01       	movw	r24, r6
    377a:	b2 01       	movw	r22, r4
    377c:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__divsf3>
    3780:	ed 80       	ldd	r14, Y+5	; 0x05
    3782:	fe 80       	ldd	r15, Y+6	; 0x06
    3784:	ee 0c       	add	r14, r14
    3786:	ff 1c       	adc	r15, r15
    3788:	87 01       	movw	r16, r14
    378a:	00 0f       	add	r16, r16
    378c:	11 1f       	adc	r17, r17
    378e:	00 0f       	add	r16, r16
    3790:	11 1f       	adc	r17, r17
    3792:	00 0f       	add	r16, r16
    3794:	11 1f       	adc	r17, r17
    3796:	0e 19       	sub	r16, r14
    3798:	1f 09       	sbc	r17, r15
    379a:	03 57       	subi	r16, 0x73	; 115
    379c:	1a 4f       	sbci	r17, 0xFA	; 250
    379e:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__fixunssfsi>
    37a2:	f8 01       	movw	r30, r16
    37a4:	61 83       	std	Z+1, r22	; 0x01
    37a6:	72 83       	std	Z+2, r23	; 0x02
    37a8:	83 83       	std	Z+3, r24	; 0x03
    37aa:	94 83       	std	Z+4, r25	; 0x04
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
    37ac:	29 81       	ldd	r18, Y+1	; 0x01
    37ae:	3a 81       	ldd	r19, Y+2	; 0x02
    37b0:	4b 81       	ldd	r20, Y+3	; 0x03
    37b2:	5c 81       	ldd	r21, Y+4	; 0x04
    37b4:	c5 01       	movw	r24, r10
    37b6:	b4 01       	movw	r22, r8
    37b8:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__divsf3>
    37bc:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__fixunssfsi>
    37c0:	f8 01       	movw	r30, r16
    37c2:	65 83       	std	Z+5, r22	; 0x05
    37c4:	76 83       	std	Z+6, r23	; 0x06
    37c6:	87 83       	std	Z+7, r24	; 0x07
    37c8:	90 87       	std	Z+8, r25	; 0x08
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;
    37ca:	c0 82       	st	Z, r12

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    37cc:	f7 01       	movw	r30, r14
    37ce:	eb 5d       	subi	r30, 0xDB	; 219
    37d0:	fb 4f       	sbci	r31, 0xFB	; 251
    37d2:	61 e0       	ldi	r22, 0x01	; 1
    37d4:	80 81       	ld	r24, Z
    37d6:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    37da:	81 30       	cpi	r24, 0x01	; 1
    37dc:	c9 f5       	brne	.+114    	; 0x3850 <SWPwm_Start+0x234>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
    37de:	8e e0       	ldi	r24, 0x0E	; 14
    37e0:	2d 81       	ldd	r18, Y+5	; 0x05
    37e2:	3e 81       	ldd	r19, Y+6	; 0x06
    37e4:	82 9f       	mul	r24, r18
    37e6:	f0 01       	movw	r30, r0
    37e8:	83 9f       	mul	r24, r19
    37ea:	f0 0d       	add	r31, r0
    37ec:	11 24       	eor	r1, r1
    37ee:	e3 57       	subi	r30, 0x73	; 115
    37f0:	fa 4f       	sbci	r31, 0xFA	; 250
    37f2:	41 81       	ldd	r20, Z+1	; 0x01
    37f4:	52 81       	ldd	r21, Z+2	; 0x02
    37f6:	63 81       	ldd	r22, Z+3	; 0x03
    37f8:	74 81       	ldd	r23, Z+4	; 0x04
    37fa:	2a e6       	ldi	r18, 0x6A	; 106
    37fc:	3a e1       	ldi	r19, 0x1A	; 26
    37fe:	8d 2d       	mov	r24, r13
    3800:	0e 94 e5 14 	call	0x29ca	; 0x29ca <GptStart_aSync>
    3804:	81 30       	cpi	r24, 0x01	; 1
    3806:	31 f5       	brne	.+76     	; 0x3854 <SWPwm_Start+0x238>
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
	
	/* Assign the Next Ticks to be counted by the Asynchronous Timer */
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
    3808:	8e e0       	ldi	r24, 0x0E	; 14
    380a:	2d 81       	ldd	r18, Y+5	; 0x05
    380c:	3e 81       	ldd	r19, Y+6	; 0x06
    380e:	82 9f       	mul	r24, r18
    3810:	f0 01       	movw	r30, r0
    3812:	83 9f       	mul	r24, r19
    3814:	f0 0d       	add	r31, r0
    3816:	11 24       	eor	r1, r1
    3818:	e3 57       	subi	r30, 0x73	; 115
    381a:	fa 4f       	sbci	r31, 0xFA	; 250
    381c:	85 81       	ldd	r24, Z+5	; 0x05
    381e:	96 81       	ldd	r25, Z+6	; 0x06
    3820:	a7 81       	ldd	r26, Z+7	; 0x07
    3822:	b0 85       	ldd	r27, Z+8	; 0x08
    3824:	81 87       	std	Z+9, r24	; 0x09
    3826:	92 87       	std	Z+10, r25	; 0x0a
    3828:	a3 87       	std	Z+11, r26	; 0x0b
    382a:	b4 87       	std	Z+12, r27	; 0x0c
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;
    382c:	82 e0       	ldi	r24, 0x02	; 2
    382e:	85 87       	std	Z+13, r24	; 0x0d

	return SWPWM_STATUS_ERROR_OK;
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	11 c0       	rjmp	.+34     	; 0x3856 <SWPwm_Start+0x23a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    3834:	82 e0       	ldi	r24, 0x02	; 2
    3836:	0f c0       	rjmp	.+30     	; 0x3856 <SWPwm_Start+0x23a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    3838:	83 e0       	ldi	r24, 0x03	; 3
    383a:	0d c0       	rjmp	.+26     	; 0x3856 <SWPwm_Start+0x23a>
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
	{
		return SWPWM_STATUS_DC_OUTRANGE;
    383c:	84 e0       	ldi	r24, 0x04	; 4
    383e:	0b c0       	rjmp	.+22     	; 0x3856 <SWPwm_Start+0x23a>
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    3840:	85 e0       	ldi	r24, 0x05	; 5
    3842:	09 c0       	rjmp	.+18     	; 0x3856 <SWPwm_Start+0x23a>
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
    3844:	81 e0       	ldi	r24, 0x01	; 1
    3846:	07 c0       	rjmp	.+14     	; 0x3856 <SWPwm_Start+0x23a>
	}else if(u8_DutyCycle == 100)
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return SWPWM_STATUS_ERROR_NOK;
		return SWPWM_STATUS_ERROR_OK;
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	05 c0       	rjmp	.+10     	; 0x3856 <SWPwm_Start+0x23a>
			break;
		case GPT_CLK_SRC_PRSCLR_EXT_RISE:
			u16_prescalerValue = 1;
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
    384c:	80 e0       	ldi	r24, 0x00	; 0
    384e:	03 c0       	rjmp	.+6      	; 0x3856 <SWPwm_Start+0x23a>
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	01 c0       	rjmp	.+2      	; 0x3856 <SWPwm_Start+0x23a>
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
    3854:	80 e0       	ldi	r24, 0x00	; 0
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;

	return SWPWM_STATUS_ERROR_OK;
}
    3856:	26 96       	adiw	r28, 0x06	; 6
    3858:	0f b6       	in	r0, 0x3f	; 63
    385a:	f8 94       	cli
    385c:	de bf       	out	0x3e, r29	; 62
    385e:	0f be       	out	0x3f, r0	; 63
    3860:	cd bf       	out	0x3d, r28	; 61
    3862:	df 91       	pop	r29
    3864:	cf 91       	pop	r28
    3866:	1f 91       	pop	r17
    3868:	0f 91       	pop	r16
    386a:	ff 90       	pop	r15
    386c:	ef 90       	pop	r14
    386e:	df 90       	pop	r13
    3870:	cf 90       	pop	r12
    3872:	bf 90       	pop	r11
    3874:	af 90       	pop	r10
    3876:	9f 90       	pop	r9
    3878:	8f 90       	pop	r8
    387a:	7f 90       	pop	r7
    387c:	6f 90       	pop	r6
    387e:	5f 90       	pop	r5
    3880:	4f 90       	pop	r4
    3882:	08 95       	ret

00003884 <SWPwm_Stop>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Stop(u8SWPwm_Channel_t u8_ChannelID)
{
    3884:	cf 93       	push	r28
    3886:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    3888:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <genu_SWPwmModStatus>
    388c:	91 30       	cpi	r25, 0x01	; 1
    388e:	b1 f5       	brne	.+108    	; 0x38fc <SWPwm_Stop+0x78>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    3890:	81 11       	cpse	r24, r1
    3892:	36 c0       	rjmp	.+108    	; 0x3900 <SWPwm_Stop+0x7c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
    3894:	c8 2f       	mov	r28, r24
    3896:	d0 e0       	ldi	r29, 0x00	; 0
    3898:	ce 01       	movw	r24, r28
    389a:	88 0f       	add	r24, r24
    389c:	99 1f       	adc	r25, r25
    389e:	fc 01       	movw	r30, r24
    38a0:	ee 0f       	add	r30, r30
    38a2:	ff 1f       	adc	r31, r31
    38a4:	ee 0f       	add	r30, r30
    38a6:	ff 1f       	adc	r31, r31
    38a8:	ee 0f       	add	r30, r30
    38aa:	ff 1f       	adc	r31, r31
    38ac:	e8 1b       	sub	r30, r24
    38ae:	f9 0b       	sbc	r31, r25
    38b0:	e3 57       	subi	r30, 0x73	; 115
    38b2:	fa 4f       	sbci	r31, 0xFA	; 250
    38b4:	85 85       	ldd	r24, Z+13	; 0x0d
    38b6:	82 30       	cpi	r24, 0x02	; 2
    38b8:	29 f5       	brne	.+74     	; 0x3904 <SWPwm_Stop+0x80>
	
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
    38ba:	fe 01       	movw	r30, r28
    38bc:	ee 0f       	add	r30, r30
    38be:	ff 1f       	adc	r31, r31
    38c0:	eb 5d       	subi	r30, 0xDB	; 219
    38c2:	fb 4f       	sbci	r31, 0xFB	; 251
    38c4:	60 e0       	ldi	r22, 0x00	; 0
    38c6:	80 81       	ld	r24, Z
    38c8:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_writePin>
    38cc:	81 30       	cpi	r24, 0x01	; 1
    38ce:	e1 f4       	brne	.+56     	; 0x3908 <SWPwm_Stop+0x84>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the State of the PWM Channel to STOPPED */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
    38d0:	8e e0       	ldi	r24, 0x0E	; 14
    38d2:	8c 9f       	mul	r24, r28
    38d4:	f0 01       	movw	r30, r0
    38d6:	8d 9f       	mul	r24, r29
    38d8:	f0 0d       	add	r31, r0
    38da:	11 24       	eor	r1, r1
    38dc:	e3 57       	subi	r30, 0x73	; 115
    38de:	fa 4f       	sbci	r31, 0xFA	; 250
    38e0:	83 e0       	ldi	r24, 0x03	; 3
    38e2:	85 87       	std	Z+13, r24	; 0x0d
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
    38e4:	fe 01       	movw	r30, r28
    38e6:	ee 0f       	add	r30, r30
    38e8:	ff 1f       	adc	r31, r31
    38ea:	eb 5d       	subi	r30, 0xDB	; 219
    38ec:	fb 4f       	sbci	r31, 0xFB	; 251
    38ee:	81 81       	ldd	r24, Z+1	; 0x01
    38f0:	0e 94 44 15 	call	0x2a88	; 0x2a88 <GptStop>
    38f4:	81 30       	cpi	r24, 0x01	; 1
    38f6:	51 f0       	breq	.+20     	; 0x390c <SWPwm_Stop+0x88>
		return SWPWM_STATUS_ERROR_NOK;
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	09 c0       	rjmp	.+18     	; 0x390e <SWPwm_Stop+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    38fc:	82 e0       	ldi	r24, 0x02	; 2
    38fe:	07 c0       	rjmp	.+14     	; 0x390e <SWPwm_Stop+0x8a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    3900:	83 e0       	ldi	r24, 0x03	; 3
    3902:	05 c0       	rjmp	.+10     	; 0x390e <SWPwm_Stop+0x8a>
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    3904:	85 e0       	ldi	r24, 0x05	; 5
    3906:	03 c0       	rjmp	.+6      	; 0x390e <SWPwm_Stop+0x8a>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    3908:	80 e0       	ldi	r24, 0x00	; 0
    390a:	01 c0       	rjmp	.+2      	; 0x390e <SWPwm_Stop+0x8a>
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
	
	return SWPWM_STATUS_ERROR_OK;
    390c:	81 e0       	ldi	r24, 0x01	; 1
}
    390e:	df 91       	pop	r29
    3910:	cf 91       	pop	r28
    3912:	08 95       	ret

00003914 <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    3914:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <u8_Uart_Status>
    3918:	81 30       	cpi	r24, 0x01	; 1
    391a:	81 f0       	breq	.+32     	; 0x393c <Uart_init+0x28>
    391c:	10 bc       	out	0x20, r1	; 32
    391e:	8c e0       	ldi	r24, 0x0C	; 12
    3920:	89 b9       	out	0x09, r24	; 9
    3922:	82 e0       	ldi	r24, 0x02	; 2
    3924:	8b b9       	out	0x0b, r24	; 11
    3926:	88 e1       	ldi	r24, 0x18	; 24
    3928:	8a b9       	out	0x0a, r24	; 10
    392a:	80 e8       	ldi	r24, 0x80	; 128
    392c:	80 bd       	out	0x20, r24	; 32
    392e:	80 b5       	in	r24, 0x20	; 32
    3930:	86 68       	ori	r24, 0x86	; 134
    3932:	80 bd       	out	0x20, r24	; 32
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <u8_Uart_Status>
    393a:	08 95       	ret
    393c:	87 e0       	ldi	r24, 0x07	; 7
    393e:	08 95       	ret

00003940 <Uart_sendByte>:
    3940:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <u8_Uart_Status>
    3944:	99 23       	and	r25, r25
    3946:	29 f0       	breq	.+10     	; 0x3952 <Uart_sendByte+0x12>
    3948:	5d 9b       	sbis	0x0b, 5	; 11
    394a:	fe cf       	rjmp	.-4      	; 0x3948 <Uart_sendByte+0x8>
    394c:	8c b9       	out	0x0c, r24	; 12
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	08 95       	ret
    3952:	86 e0       	ldi	r24, 0x06	; 6
    3954:	08 95       	ret

00003956 <Uart_sendPacket>:
    3956:	ef 92       	push	r14
    3958:	ff 92       	push	r15
    395a:	0f 93       	push	r16
    395c:	1f 93       	push	r17
    395e:	cf 93       	push	r28
    3960:	df 93       	push	r29
    3962:	20 91 9b 05 	lds	r18, 0x059B	; 0x80059b <u8_Uart_Status>
    3966:	22 23       	and	r18, r18
    3968:	99 f0       	breq	.+38     	; 0x3990 <Uart_sendPacket+0x3a>
    396a:	8b 01       	movw	r16, r22
    396c:	7c 01       	movw	r14, r24
    396e:	c0 e0       	ldi	r28, 0x00	; 0
    3970:	d0 e0       	ldi	r29, 0x00	; 0
    3972:	09 c0       	rjmp	.+18     	; 0x3986 <Uart_sendPacket+0x30>
    3974:	f7 01       	movw	r30, r14
    3976:	ec 0f       	add	r30, r28
    3978:	fd 1f       	adc	r31, r29
    397a:	80 81       	ld	r24, Z
    397c:	0e 94 a0 1c 	call	0x3940	; 0x3940 <Uart_sendByte>
    3980:	81 30       	cpi	r24, 0x01	; 1
    3982:	41 f4       	brne	.+16     	; 0x3994 <Uart_sendPacket+0x3e>
    3984:	21 96       	adiw	r28, 0x01	; 1
    3986:	c0 17       	cp	r28, r16
    3988:	d1 07       	cpc	r29, r17
    398a:	a0 f3       	brcs	.-24     	; 0x3974 <Uart_sendPacket+0x1e>
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	03 c0       	rjmp	.+6      	; 0x3996 <Uart_sendPacket+0x40>
    3990:	86 e0       	ldi	r24, 0x06	; 6
    3992:	01 c0       	rjmp	.+2      	; 0x3996 <Uart_sendPacket+0x40>
    3994:	80 e0       	ldi	r24, 0x00	; 0
    3996:	df 91       	pop	r29
    3998:	cf 91       	pop	r28
    399a:	1f 91       	pop	r17
    399c:	0f 91       	pop	r16
    399e:	ff 90       	pop	r15
    39a0:	ef 90       	pop	r14
    39a2:	08 95       	ret

000039a4 <Uart_EnableNotification_RXC>:
    39a4:	9c 01       	movw	r18, r24
    39a6:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <u8_Uart_Status>
    39aa:	99 23       	and	r25, r25
    39ac:	61 f0       	breq	.+24     	; 0x39c6 <Uart_EnableNotification_RXC+0x22>
    39ae:	21 15       	cp	r18, r1
    39b0:	31 05       	cpc	r19, r1
    39b2:	59 f0       	breq	.+22     	; 0x39ca <Uart_EnableNotification_RXC+0x26>
    39b4:	8a b1       	in	r24, 0x0a	; 10
    39b6:	80 68       	ori	r24, 0x80	; 128
    39b8:	8a b9       	out	0x0a, r24	; 10
    39ba:	30 93 9f 05 	sts	0x059F, r19	; 0x80059f <Uart_RXC_CallBackPtr+0x1>
    39be:	20 93 9e 05 	sts	0x059E, r18	; 0x80059e <Uart_RXC_CallBackPtr>
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	08 95       	ret
    39c6:	86 e0       	ldi	r24, 0x06	; 6
    39c8:	08 95       	ret
    39ca:	85 e0       	ldi	r24, 0x05	; 5
    39cc:	08 95       	ret

000039ce <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    39ce:	8c b1       	in	r24, 0x0c	; 12
}
    39d0:	08 95       	ret

000039d2 <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    39d2:	1f 92       	push	r1
    39d4:	0f 92       	push	r0
    39d6:	0f b6       	in	r0, 0x3f	; 63
    39d8:	0f 92       	push	r0
    39da:	11 24       	eor	r1, r1
    39dc:	2f 93       	push	r18
    39de:	3f 93       	push	r19
    39e0:	4f 93       	push	r20
    39e2:	5f 93       	push	r21
    39e4:	6f 93       	push	r22
    39e6:	7f 93       	push	r23
    39e8:	8f 93       	push	r24
    39ea:	9f 93       	push	r25
    39ec:	af 93       	push	r26
    39ee:	bf 93       	push	r27
    39f0:	ef 93       	push	r30
    39f2:	ff 93       	push	r31
    39f4:	e0 91 a0 05 	lds	r30, 0x05A0	; 0x8005a0 <Uart_TXC_CallBackPtr>
    39f8:	f0 91 a1 05 	lds	r31, 0x05A1	; 0x8005a1 <Uart_TXC_CallBackPtr+0x1>
    39fc:	09 95       	icall
    39fe:	ff 91       	pop	r31
    3a00:	ef 91       	pop	r30
    3a02:	bf 91       	pop	r27
    3a04:	af 91       	pop	r26
    3a06:	9f 91       	pop	r25
    3a08:	8f 91       	pop	r24
    3a0a:	7f 91       	pop	r23
    3a0c:	6f 91       	pop	r22
    3a0e:	5f 91       	pop	r21
    3a10:	4f 91       	pop	r20
    3a12:	3f 91       	pop	r19
    3a14:	2f 91       	pop	r18
    3a16:	0f 90       	pop	r0
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	0f 90       	pop	r0
    3a1c:	1f 90       	pop	r1
    3a1e:	18 95       	reti

00003a20 <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    3a20:	1f 92       	push	r1
    3a22:	0f 92       	push	r0
    3a24:	0f b6       	in	r0, 0x3f	; 63
    3a26:	0f 92       	push	r0
    3a28:	11 24       	eor	r1, r1
    3a2a:	2f 93       	push	r18
    3a2c:	3f 93       	push	r19
    3a2e:	4f 93       	push	r20
    3a30:	5f 93       	push	r21
    3a32:	6f 93       	push	r22
    3a34:	7f 93       	push	r23
    3a36:	8f 93       	push	r24
    3a38:	9f 93       	push	r25
    3a3a:	af 93       	push	r26
    3a3c:	bf 93       	push	r27
    3a3e:	ef 93       	push	r30
    3a40:	ff 93       	push	r31
    3a42:	e0 91 9e 05 	lds	r30, 0x059E	; 0x80059e <Uart_RXC_CallBackPtr>
    3a46:	f0 91 9f 05 	lds	r31, 0x059F	; 0x80059f <Uart_RXC_CallBackPtr+0x1>
    3a4a:	09 95       	icall
    3a4c:	ff 91       	pop	r31
    3a4e:	ef 91       	pop	r30
    3a50:	bf 91       	pop	r27
    3a52:	af 91       	pop	r26
    3a54:	9f 91       	pop	r25
    3a56:	8f 91       	pop	r24
    3a58:	7f 91       	pop	r23
    3a5a:	6f 91       	pop	r22
    3a5c:	5f 91       	pop	r21
    3a5e:	4f 91       	pop	r20
    3a60:	3f 91       	pop	r19
    3a62:	2f 91       	pop	r18
    3a64:	0f 90       	pop	r0
    3a66:	0f be       	out	0x3f, r0	; 63
    3a68:	0f 90       	pop	r0
    3a6a:	1f 90       	pop	r1
    3a6c:	18 95       	reti

00003a6e <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    3a6e:	1f 92       	push	r1
    3a70:	0f 92       	push	r0
    3a72:	0f b6       	in	r0, 0x3f	; 63
    3a74:	0f 92       	push	r0
    3a76:	11 24       	eor	r1, r1
    3a78:	2f 93       	push	r18
    3a7a:	3f 93       	push	r19
    3a7c:	4f 93       	push	r20
    3a7e:	5f 93       	push	r21
    3a80:	6f 93       	push	r22
    3a82:	7f 93       	push	r23
    3a84:	8f 93       	push	r24
    3a86:	9f 93       	push	r25
    3a88:	af 93       	push	r26
    3a8a:	bf 93       	push	r27
    3a8c:	ef 93       	push	r30
    3a8e:	ff 93       	push	r31
    3a90:	e0 91 9c 05 	lds	r30, 0x059C	; 0x80059c <Uart_UDRE_CallBackPtr>
    3a94:	f0 91 9d 05 	lds	r31, 0x059D	; 0x80059d <Uart_UDRE_CallBackPtr+0x1>
    3a98:	09 95       	icall
    3a9a:	ff 91       	pop	r31
    3a9c:	ef 91       	pop	r30
    3a9e:	bf 91       	pop	r27
    3aa0:	af 91       	pop	r26
    3aa2:	9f 91       	pop	r25
    3aa4:	8f 91       	pop	r24
    3aa6:	7f 91       	pop	r23
    3aa8:	6f 91       	pop	r22
    3aaa:	5f 91       	pop	r21
    3aac:	4f 91       	pop	r20
    3aae:	3f 91       	pop	r19
    3ab0:	2f 91       	pop	r18
    3ab2:	0f 90       	pop	r0
    3ab4:	0f be       	out	0x3f, r0	; 63
    3ab6:	0f 90       	pop	r0
    3ab8:	1f 90       	pop	r1
    3aba:	18 95       	reti

00003abc <__subsf3>:
    3abc:	50 58       	subi	r21, 0x80	; 128

00003abe <__addsf3>:
    3abe:	bb 27       	eor	r27, r27
    3ac0:	aa 27       	eor	r26, r26
    3ac2:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__addsf3x>
    3ac6:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__fp_round>
    3aca:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <__fp_pscA>
    3ace:	38 f0       	brcs	.+14     	; 0x3ade <__addsf3+0x20>
    3ad0:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__fp_pscB>
    3ad4:	20 f0       	brcs	.+8      	; 0x3ade <__addsf3+0x20>
    3ad6:	39 f4       	brne	.+14     	; 0x3ae6 <__addsf3+0x28>
    3ad8:	9f 3f       	cpi	r25, 0xFF	; 255
    3ada:	19 f4       	brne	.+6      	; 0x3ae2 <__addsf3+0x24>
    3adc:	26 f4       	brtc	.+8      	; 0x3ae6 <__addsf3+0x28>
    3ade:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <__fp_nan>
    3ae2:	0e f4       	brtc	.+2      	; 0x3ae6 <__addsf3+0x28>
    3ae4:	e0 95       	com	r30
    3ae6:	e7 fb       	bst	r30, 7
    3ae8:	0c 94 d2 1e 	jmp	0x3da4	; 0x3da4 <__fp_inf>

00003aec <__addsf3x>:
    3aec:	e9 2f       	mov	r30, r25
    3aee:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__fp_split3>
    3af2:	58 f3       	brcs	.-42     	; 0x3aca <__addsf3+0xc>
    3af4:	ba 17       	cp	r27, r26
    3af6:	62 07       	cpc	r22, r18
    3af8:	73 07       	cpc	r23, r19
    3afa:	84 07       	cpc	r24, r20
    3afc:	95 07       	cpc	r25, r21
    3afe:	20 f0       	brcs	.+8      	; 0x3b08 <__addsf3x+0x1c>
    3b00:	79 f4       	brne	.+30     	; 0x3b20 <__addsf3x+0x34>
    3b02:	a6 f5       	brtc	.+104    	; 0x3b6c <__addsf3x+0x80>
    3b04:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <__fp_zero>
    3b08:	0e f4       	brtc	.+2      	; 0x3b0c <__addsf3x+0x20>
    3b0a:	e0 95       	com	r30
    3b0c:	0b 2e       	mov	r0, r27
    3b0e:	ba 2f       	mov	r27, r26
    3b10:	a0 2d       	mov	r26, r0
    3b12:	0b 01       	movw	r0, r22
    3b14:	b9 01       	movw	r22, r18
    3b16:	90 01       	movw	r18, r0
    3b18:	0c 01       	movw	r0, r24
    3b1a:	ca 01       	movw	r24, r20
    3b1c:	a0 01       	movw	r20, r0
    3b1e:	11 24       	eor	r1, r1
    3b20:	ff 27       	eor	r31, r31
    3b22:	59 1b       	sub	r21, r25
    3b24:	99 f0       	breq	.+38     	; 0x3b4c <__addsf3x+0x60>
    3b26:	59 3f       	cpi	r21, 0xF9	; 249
    3b28:	50 f4       	brcc	.+20     	; 0x3b3e <__addsf3x+0x52>
    3b2a:	50 3e       	cpi	r21, 0xE0	; 224
    3b2c:	68 f1       	brcs	.+90     	; 0x3b88 <__addsf3x+0x9c>
    3b2e:	1a 16       	cp	r1, r26
    3b30:	f0 40       	sbci	r31, 0x00	; 0
    3b32:	a2 2f       	mov	r26, r18
    3b34:	23 2f       	mov	r18, r19
    3b36:	34 2f       	mov	r19, r20
    3b38:	44 27       	eor	r20, r20
    3b3a:	58 5f       	subi	r21, 0xF8	; 248
    3b3c:	f3 cf       	rjmp	.-26     	; 0x3b24 <__addsf3x+0x38>
    3b3e:	46 95       	lsr	r20
    3b40:	37 95       	ror	r19
    3b42:	27 95       	ror	r18
    3b44:	a7 95       	ror	r26
    3b46:	f0 40       	sbci	r31, 0x00	; 0
    3b48:	53 95       	inc	r21
    3b4a:	c9 f7       	brne	.-14     	; 0x3b3e <__addsf3x+0x52>
    3b4c:	7e f4       	brtc	.+30     	; 0x3b6c <__addsf3x+0x80>
    3b4e:	1f 16       	cp	r1, r31
    3b50:	ba 0b       	sbc	r27, r26
    3b52:	62 0b       	sbc	r22, r18
    3b54:	73 0b       	sbc	r23, r19
    3b56:	84 0b       	sbc	r24, r20
    3b58:	ba f0       	brmi	.+46     	; 0x3b88 <__addsf3x+0x9c>
    3b5a:	91 50       	subi	r25, 0x01	; 1
    3b5c:	a1 f0       	breq	.+40     	; 0x3b86 <__addsf3x+0x9a>
    3b5e:	ff 0f       	add	r31, r31
    3b60:	bb 1f       	adc	r27, r27
    3b62:	66 1f       	adc	r22, r22
    3b64:	77 1f       	adc	r23, r23
    3b66:	88 1f       	adc	r24, r24
    3b68:	c2 f7       	brpl	.-16     	; 0x3b5a <__addsf3x+0x6e>
    3b6a:	0e c0       	rjmp	.+28     	; 0x3b88 <__addsf3x+0x9c>
    3b6c:	ba 0f       	add	r27, r26
    3b6e:	62 1f       	adc	r22, r18
    3b70:	73 1f       	adc	r23, r19
    3b72:	84 1f       	adc	r24, r20
    3b74:	48 f4       	brcc	.+18     	; 0x3b88 <__addsf3x+0x9c>
    3b76:	87 95       	ror	r24
    3b78:	77 95       	ror	r23
    3b7a:	67 95       	ror	r22
    3b7c:	b7 95       	ror	r27
    3b7e:	f7 95       	ror	r31
    3b80:	9e 3f       	cpi	r25, 0xFE	; 254
    3b82:	08 f0       	brcs	.+2      	; 0x3b86 <__addsf3x+0x9a>
    3b84:	b0 cf       	rjmp	.-160    	; 0x3ae6 <__addsf3+0x28>
    3b86:	93 95       	inc	r25
    3b88:	88 0f       	add	r24, r24
    3b8a:	08 f0       	brcs	.+2      	; 0x3b8e <__addsf3x+0xa2>
    3b8c:	99 27       	eor	r25, r25
    3b8e:	ee 0f       	add	r30, r30
    3b90:	97 95       	ror	r25
    3b92:	87 95       	ror	r24
    3b94:	08 95       	ret

00003b96 <__cmpsf2>:
    3b96:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__fp_cmp>
    3b9a:	08 f4       	brcc	.+2      	; 0x3b9e <__cmpsf2+0x8>
    3b9c:	81 e0       	ldi	r24, 0x01	; 1
    3b9e:	08 95       	ret

00003ba0 <__divsf3>:
    3ba0:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <__divsf3x>
    3ba4:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__fp_round>
    3ba8:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__fp_pscB>
    3bac:	58 f0       	brcs	.+22     	; 0x3bc4 <__divsf3+0x24>
    3bae:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <__fp_pscA>
    3bb2:	40 f0       	brcs	.+16     	; 0x3bc4 <__divsf3+0x24>
    3bb4:	29 f4       	brne	.+10     	; 0x3bc0 <__divsf3+0x20>
    3bb6:	5f 3f       	cpi	r21, 0xFF	; 255
    3bb8:	29 f0       	breq	.+10     	; 0x3bc4 <__divsf3+0x24>
    3bba:	0c 94 d2 1e 	jmp	0x3da4	; 0x3da4 <__fp_inf>
    3bbe:	51 11       	cpse	r21, r1
    3bc0:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__fp_szero>
    3bc4:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <__fp_nan>

00003bc8 <__divsf3x>:
    3bc8:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__fp_split3>
    3bcc:	68 f3       	brcs	.-38     	; 0x3ba8 <__divsf3+0x8>

00003bce <__divsf3_pse>:
    3bce:	99 23       	and	r25, r25
    3bd0:	b1 f3       	breq	.-20     	; 0x3bbe <__divsf3+0x1e>
    3bd2:	55 23       	and	r21, r21
    3bd4:	91 f3       	breq	.-28     	; 0x3bba <__divsf3+0x1a>
    3bd6:	95 1b       	sub	r25, r21
    3bd8:	55 0b       	sbc	r21, r21
    3bda:	bb 27       	eor	r27, r27
    3bdc:	aa 27       	eor	r26, r26
    3bde:	62 17       	cp	r22, r18
    3be0:	73 07       	cpc	r23, r19
    3be2:	84 07       	cpc	r24, r20
    3be4:	38 f0       	brcs	.+14     	; 0x3bf4 <__divsf3_pse+0x26>
    3be6:	9f 5f       	subi	r25, 0xFF	; 255
    3be8:	5f 4f       	sbci	r21, 0xFF	; 255
    3bea:	22 0f       	add	r18, r18
    3bec:	33 1f       	adc	r19, r19
    3bee:	44 1f       	adc	r20, r20
    3bf0:	aa 1f       	adc	r26, r26
    3bf2:	a9 f3       	breq	.-22     	; 0x3bde <__divsf3_pse+0x10>
    3bf4:	35 d0       	rcall	.+106    	; 0x3c60 <__divsf3_pse+0x92>
    3bf6:	0e 2e       	mov	r0, r30
    3bf8:	3a f0       	brmi	.+14     	; 0x3c08 <__divsf3_pse+0x3a>
    3bfa:	e0 e8       	ldi	r30, 0x80	; 128
    3bfc:	32 d0       	rcall	.+100    	; 0x3c62 <__divsf3_pse+0x94>
    3bfe:	91 50       	subi	r25, 0x01	; 1
    3c00:	50 40       	sbci	r21, 0x00	; 0
    3c02:	e6 95       	lsr	r30
    3c04:	00 1c       	adc	r0, r0
    3c06:	ca f7       	brpl	.-14     	; 0x3bfa <__divsf3_pse+0x2c>
    3c08:	2b d0       	rcall	.+86     	; 0x3c60 <__divsf3_pse+0x92>
    3c0a:	fe 2f       	mov	r31, r30
    3c0c:	29 d0       	rcall	.+82     	; 0x3c60 <__divsf3_pse+0x92>
    3c0e:	66 0f       	add	r22, r22
    3c10:	77 1f       	adc	r23, r23
    3c12:	88 1f       	adc	r24, r24
    3c14:	bb 1f       	adc	r27, r27
    3c16:	26 17       	cp	r18, r22
    3c18:	37 07       	cpc	r19, r23
    3c1a:	48 07       	cpc	r20, r24
    3c1c:	ab 07       	cpc	r26, r27
    3c1e:	b0 e8       	ldi	r27, 0x80	; 128
    3c20:	09 f0       	breq	.+2      	; 0x3c24 <__divsf3_pse+0x56>
    3c22:	bb 0b       	sbc	r27, r27
    3c24:	80 2d       	mov	r24, r0
    3c26:	bf 01       	movw	r22, r30
    3c28:	ff 27       	eor	r31, r31
    3c2a:	93 58       	subi	r25, 0x83	; 131
    3c2c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c2e:	3a f0       	brmi	.+14     	; 0x3c3e <__divsf3_pse+0x70>
    3c30:	9e 3f       	cpi	r25, 0xFE	; 254
    3c32:	51 05       	cpc	r21, r1
    3c34:	78 f0       	brcs	.+30     	; 0x3c54 <__divsf3_pse+0x86>
    3c36:	0c 94 d2 1e 	jmp	0x3da4	; 0x3da4 <__fp_inf>
    3c3a:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__fp_szero>
    3c3e:	5f 3f       	cpi	r21, 0xFF	; 255
    3c40:	e4 f3       	brlt	.-8      	; 0x3c3a <__divsf3_pse+0x6c>
    3c42:	98 3e       	cpi	r25, 0xE8	; 232
    3c44:	d4 f3       	brlt	.-12     	; 0x3c3a <__divsf3_pse+0x6c>
    3c46:	86 95       	lsr	r24
    3c48:	77 95       	ror	r23
    3c4a:	67 95       	ror	r22
    3c4c:	b7 95       	ror	r27
    3c4e:	f7 95       	ror	r31
    3c50:	9f 5f       	subi	r25, 0xFF	; 255
    3c52:	c9 f7       	brne	.-14     	; 0x3c46 <__divsf3_pse+0x78>
    3c54:	88 0f       	add	r24, r24
    3c56:	91 1d       	adc	r25, r1
    3c58:	96 95       	lsr	r25
    3c5a:	87 95       	ror	r24
    3c5c:	97 f9       	bld	r25, 7
    3c5e:	08 95       	ret
    3c60:	e1 e0       	ldi	r30, 0x01	; 1
    3c62:	66 0f       	add	r22, r22
    3c64:	77 1f       	adc	r23, r23
    3c66:	88 1f       	adc	r24, r24
    3c68:	bb 1f       	adc	r27, r27
    3c6a:	62 17       	cp	r22, r18
    3c6c:	73 07       	cpc	r23, r19
    3c6e:	84 07       	cpc	r24, r20
    3c70:	ba 07       	cpc	r27, r26
    3c72:	20 f0       	brcs	.+8      	; 0x3c7c <__divsf3_pse+0xae>
    3c74:	62 1b       	sub	r22, r18
    3c76:	73 0b       	sbc	r23, r19
    3c78:	84 0b       	sbc	r24, r20
    3c7a:	ba 0b       	sbc	r27, r26
    3c7c:	ee 1f       	adc	r30, r30
    3c7e:	88 f7       	brcc	.-30     	; 0x3c62 <__divsf3_pse+0x94>
    3c80:	e0 95       	com	r30
    3c82:	08 95       	ret

00003c84 <__fixunssfsi>:
    3c84:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__fp_splitA>
    3c88:	88 f0       	brcs	.+34     	; 0x3cac <__fixunssfsi+0x28>
    3c8a:	9f 57       	subi	r25, 0x7F	; 127
    3c8c:	98 f0       	brcs	.+38     	; 0x3cb4 <__fixunssfsi+0x30>
    3c8e:	b9 2f       	mov	r27, r25
    3c90:	99 27       	eor	r25, r25
    3c92:	b7 51       	subi	r27, 0x17	; 23
    3c94:	b0 f0       	brcs	.+44     	; 0x3cc2 <__fixunssfsi+0x3e>
    3c96:	e1 f0       	breq	.+56     	; 0x3cd0 <__fixunssfsi+0x4c>
    3c98:	66 0f       	add	r22, r22
    3c9a:	77 1f       	adc	r23, r23
    3c9c:	88 1f       	adc	r24, r24
    3c9e:	99 1f       	adc	r25, r25
    3ca0:	1a f0       	brmi	.+6      	; 0x3ca8 <__fixunssfsi+0x24>
    3ca2:	ba 95       	dec	r27
    3ca4:	c9 f7       	brne	.-14     	; 0x3c98 <__fixunssfsi+0x14>
    3ca6:	14 c0       	rjmp	.+40     	; 0x3cd0 <__fixunssfsi+0x4c>
    3ca8:	b1 30       	cpi	r27, 0x01	; 1
    3caa:	91 f0       	breq	.+36     	; 0x3cd0 <__fixunssfsi+0x4c>
    3cac:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__fp_zero>
    3cb0:	b1 e0       	ldi	r27, 0x01	; 1
    3cb2:	08 95       	ret
    3cb4:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <__fp_zero>
    3cb8:	67 2f       	mov	r22, r23
    3cba:	78 2f       	mov	r23, r24
    3cbc:	88 27       	eor	r24, r24
    3cbe:	b8 5f       	subi	r27, 0xF8	; 248
    3cc0:	39 f0       	breq	.+14     	; 0x3cd0 <__fixunssfsi+0x4c>
    3cc2:	b9 3f       	cpi	r27, 0xF9	; 249
    3cc4:	cc f3       	brlt	.-14     	; 0x3cb8 <__fixunssfsi+0x34>
    3cc6:	86 95       	lsr	r24
    3cc8:	77 95       	ror	r23
    3cca:	67 95       	ror	r22
    3ccc:	b3 95       	inc	r27
    3cce:	d9 f7       	brne	.-10     	; 0x3cc6 <__fixunssfsi+0x42>
    3cd0:	3e f4       	brtc	.+14     	; 0x3ce0 <__fixunssfsi+0x5c>
    3cd2:	90 95       	com	r25
    3cd4:	80 95       	com	r24
    3cd6:	70 95       	com	r23
    3cd8:	61 95       	neg	r22
    3cda:	7f 4f       	sbci	r23, 0xFF	; 255
    3cdc:	8f 4f       	sbci	r24, 0xFF	; 255
    3cde:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce0:	08 95       	ret

00003ce2 <__floatunsisf>:
    3ce2:	e8 94       	clt
    3ce4:	09 c0       	rjmp	.+18     	; 0x3cf8 <__floatsisf+0x12>

00003ce6 <__floatsisf>:
    3ce6:	97 fb       	bst	r25, 7
    3ce8:	3e f4       	brtc	.+14     	; 0x3cf8 <__floatsisf+0x12>
    3cea:	90 95       	com	r25
    3cec:	80 95       	com	r24
    3cee:	70 95       	com	r23
    3cf0:	61 95       	neg	r22
    3cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    3cf4:	8f 4f       	sbci	r24, 0xFF	; 255
    3cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    3cf8:	99 23       	and	r25, r25
    3cfa:	a9 f0       	breq	.+42     	; 0x3d26 <__floatsisf+0x40>
    3cfc:	f9 2f       	mov	r31, r25
    3cfe:	96 e9       	ldi	r25, 0x96	; 150
    3d00:	bb 27       	eor	r27, r27
    3d02:	93 95       	inc	r25
    3d04:	f6 95       	lsr	r31
    3d06:	87 95       	ror	r24
    3d08:	77 95       	ror	r23
    3d0a:	67 95       	ror	r22
    3d0c:	b7 95       	ror	r27
    3d0e:	f1 11       	cpse	r31, r1
    3d10:	f8 cf       	rjmp	.-16     	; 0x3d02 <__floatsisf+0x1c>
    3d12:	fa f4       	brpl	.+62     	; 0x3d52 <__floatsisf+0x6c>
    3d14:	bb 0f       	add	r27, r27
    3d16:	11 f4       	brne	.+4      	; 0x3d1c <__floatsisf+0x36>
    3d18:	60 ff       	sbrs	r22, 0
    3d1a:	1b c0       	rjmp	.+54     	; 0x3d52 <__floatsisf+0x6c>
    3d1c:	6f 5f       	subi	r22, 0xFF	; 255
    3d1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d20:	8f 4f       	sbci	r24, 0xFF	; 255
    3d22:	9f 4f       	sbci	r25, 0xFF	; 255
    3d24:	16 c0       	rjmp	.+44     	; 0x3d52 <__floatsisf+0x6c>
    3d26:	88 23       	and	r24, r24
    3d28:	11 f0       	breq	.+4      	; 0x3d2e <__floatsisf+0x48>
    3d2a:	96 e9       	ldi	r25, 0x96	; 150
    3d2c:	11 c0       	rjmp	.+34     	; 0x3d50 <__floatsisf+0x6a>
    3d2e:	77 23       	and	r23, r23
    3d30:	21 f0       	breq	.+8      	; 0x3d3a <__floatsisf+0x54>
    3d32:	9e e8       	ldi	r25, 0x8E	; 142
    3d34:	87 2f       	mov	r24, r23
    3d36:	76 2f       	mov	r23, r22
    3d38:	05 c0       	rjmp	.+10     	; 0x3d44 <__floatsisf+0x5e>
    3d3a:	66 23       	and	r22, r22
    3d3c:	71 f0       	breq	.+28     	; 0x3d5a <__floatsisf+0x74>
    3d3e:	96 e8       	ldi	r25, 0x86	; 134
    3d40:	86 2f       	mov	r24, r22
    3d42:	70 e0       	ldi	r23, 0x00	; 0
    3d44:	60 e0       	ldi	r22, 0x00	; 0
    3d46:	2a f0       	brmi	.+10     	; 0x3d52 <__floatsisf+0x6c>
    3d48:	9a 95       	dec	r25
    3d4a:	66 0f       	add	r22, r22
    3d4c:	77 1f       	adc	r23, r23
    3d4e:	88 1f       	adc	r24, r24
    3d50:	da f7       	brpl	.-10     	; 0x3d48 <__floatsisf+0x62>
    3d52:	88 0f       	add	r24, r24
    3d54:	96 95       	lsr	r25
    3d56:	87 95       	ror	r24
    3d58:	97 f9       	bld	r25, 7
    3d5a:	08 95       	ret

00003d5c <__fp_cmp>:
    3d5c:	99 0f       	add	r25, r25
    3d5e:	00 08       	sbc	r0, r0
    3d60:	55 0f       	add	r21, r21
    3d62:	aa 0b       	sbc	r26, r26
    3d64:	e0 e8       	ldi	r30, 0x80	; 128
    3d66:	fe ef       	ldi	r31, 0xFE	; 254
    3d68:	16 16       	cp	r1, r22
    3d6a:	17 06       	cpc	r1, r23
    3d6c:	e8 07       	cpc	r30, r24
    3d6e:	f9 07       	cpc	r31, r25
    3d70:	c0 f0       	brcs	.+48     	; 0x3da2 <__fp_cmp+0x46>
    3d72:	12 16       	cp	r1, r18
    3d74:	13 06       	cpc	r1, r19
    3d76:	e4 07       	cpc	r30, r20
    3d78:	f5 07       	cpc	r31, r21
    3d7a:	98 f0       	brcs	.+38     	; 0x3da2 <__fp_cmp+0x46>
    3d7c:	62 1b       	sub	r22, r18
    3d7e:	73 0b       	sbc	r23, r19
    3d80:	84 0b       	sbc	r24, r20
    3d82:	95 0b       	sbc	r25, r21
    3d84:	39 f4       	brne	.+14     	; 0x3d94 <__fp_cmp+0x38>
    3d86:	0a 26       	eor	r0, r26
    3d88:	61 f0       	breq	.+24     	; 0x3da2 <__fp_cmp+0x46>
    3d8a:	23 2b       	or	r18, r19
    3d8c:	24 2b       	or	r18, r20
    3d8e:	25 2b       	or	r18, r21
    3d90:	21 f4       	brne	.+8      	; 0x3d9a <__fp_cmp+0x3e>
    3d92:	08 95       	ret
    3d94:	0a 26       	eor	r0, r26
    3d96:	09 f4       	brne	.+2      	; 0x3d9a <__fp_cmp+0x3e>
    3d98:	a1 40       	sbci	r26, 0x01	; 1
    3d9a:	a6 95       	lsr	r26
    3d9c:	8f ef       	ldi	r24, 0xFF	; 255
    3d9e:	81 1d       	adc	r24, r1
    3da0:	81 1d       	adc	r24, r1
    3da2:	08 95       	ret

00003da4 <__fp_inf>:
    3da4:	97 f9       	bld	r25, 7
    3da6:	9f 67       	ori	r25, 0x7F	; 127
    3da8:	80 e8       	ldi	r24, 0x80	; 128
    3daa:	70 e0       	ldi	r23, 0x00	; 0
    3dac:	60 e0       	ldi	r22, 0x00	; 0
    3dae:	08 95       	ret

00003db0 <__fp_nan>:
    3db0:	9f ef       	ldi	r25, 0xFF	; 255
    3db2:	80 ec       	ldi	r24, 0xC0	; 192
    3db4:	08 95       	ret

00003db6 <__fp_pscA>:
    3db6:	00 24       	eor	r0, r0
    3db8:	0a 94       	dec	r0
    3dba:	16 16       	cp	r1, r22
    3dbc:	17 06       	cpc	r1, r23
    3dbe:	18 06       	cpc	r1, r24
    3dc0:	09 06       	cpc	r0, r25
    3dc2:	08 95       	ret

00003dc4 <__fp_pscB>:
    3dc4:	00 24       	eor	r0, r0
    3dc6:	0a 94       	dec	r0
    3dc8:	12 16       	cp	r1, r18
    3dca:	13 06       	cpc	r1, r19
    3dcc:	14 06       	cpc	r1, r20
    3dce:	05 06       	cpc	r0, r21
    3dd0:	08 95       	ret

00003dd2 <__fp_round>:
    3dd2:	09 2e       	mov	r0, r25
    3dd4:	03 94       	inc	r0
    3dd6:	00 0c       	add	r0, r0
    3dd8:	11 f4       	brne	.+4      	; 0x3dde <__fp_round+0xc>
    3dda:	88 23       	and	r24, r24
    3ddc:	52 f0       	brmi	.+20     	; 0x3df2 <__fp_round+0x20>
    3dde:	bb 0f       	add	r27, r27
    3de0:	40 f4       	brcc	.+16     	; 0x3df2 <__fp_round+0x20>
    3de2:	bf 2b       	or	r27, r31
    3de4:	11 f4       	brne	.+4      	; 0x3dea <__fp_round+0x18>
    3de6:	60 ff       	sbrs	r22, 0
    3de8:	04 c0       	rjmp	.+8      	; 0x3df2 <__fp_round+0x20>
    3dea:	6f 5f       	subi	r22, 0xFF	; 255
    3dec:	7f 4f       	sbci	r23, 0xFF	; 255
    3dee:	8f 4f       	sbci	r24, 0xFF	; 255
    3df0:	9f 4f       	sbci	r25, 0xFF	; 255
    3df2:	08 95       	ret

00003df4 <__fp_split3>:
    3df4:	57 fd       	sbrc	r21, 7
    3df6:	90 58       	subi	r25, 0x80	; 128
    3df8:	44 0f       	add	r20, r20
    3dfa:	55 1f       	adc	r21, r21
    3dfc:	59 f0       	breq	.+22     	; 0x3e14 <__fp_splitA+0x10>
    3dfe:	5f 3f       	cpi	r21, 0xFF	; 255
    3e00:	71 f0       	breq	.+28     	; 0x3e1e <__fp_splitA+0x1a>
    3e02:	47 95       	ror	r20

00003e04 <__fp_splitA>:
    3e04:	88 0f       	add	r24, r24
    3e06:	97 fb       	bst	r25, 7
    3e08:	99 1f       	adc	r25, r25
    3e0a:	61 f0       	breq	.+24     	; 0x3e24 <__fp_splitA+0x20>
    3e0c:	9f 3f       	cpi	r25, 0xFF	; 255
    3e0e:	79 f0       	breq	.+30     	; 0x3e2e <__fp_splitA+0x2a>
    3e10:	87 95       	ror	r24
    3e12:	08 95       	ret
    3e14:	12 16       	cp	r1, r18
    3e16:	13 06       	cpc	r1, r19
    3e18:	14 06       	cpc	r1, r20
    3e1a:	55 1f       	adc	r21, r21
    3e1c:	f2 cf       	rjmp	.-28     	; 0x3e02 <__fp_split3+0xe>
    3e1e:	46 95       	lsr	r20
    3e20:	f1 df       	rcall	.-30     	; 0x3e04 <__fp_splitA>
    3e22:	08 c0       	rjmp	.+16     	; 0x3e34 <__fp_splitA+0x30>
    3e24:	16 16       	cp	r1, r22
    3e26:	17 06       	cpc	r1, r23
    3e28:	18 06       	cpc	r1, r24
    3e2a:	99 1f       	adc	r25, r25
    3e2c:	f1 cf       	rjmp	.-30     	; 0x3e10 <__fp_splitA+0xc>
    3e2e:	86 95       	lsr	r24
    3e30:	71 05       	cpc	r23, r1
    3e32:	61 05       	cpc	r22, r1
    3e34:	08 94       	sec
    3e36:	08 95       	ret

00003e38 <__fp_zero>:
    3e38:	e8 94       	clt

00003e3a <__fp_szero>:
    3e3a:	bb 27       	eor	r27, r27
    3e3c:	66 27       	eor	r22, r22
    3e3e:	77 27       	eor	r23, r23
    3e40:	cb 01       	movw	r24, r22
    3e42:	97 f9       	bld	r25, 7
    3e44:	08 95       	ret

00003e46 <__mulsf3>:
    3e46:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__mulsf3x>
    3e4a:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__fp_round>
    3e4e:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <__fp_pscA>
    3e52:	38 f0       	brcs	.+14     	; 0x3e62 <__mulsf3+0x1c>
    3e54:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__fp_pscB>
    3e58:	20 f0       	brcs	.+8      	; 0x3e62 <__mulsf3+0x1c>
    3e5a:	95 23       	and	r25, r21
    3e5c:	11 f0       	breq	.+4      	; 0x3e62 <__mulsf3+0x1c>
    3e5e:	0c 94 d2 1e 	jmp	0x3da4	; 0x3da4 <__fp_inf>
    3e62:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <__fp_nan>
    3e66:	11 24       	eor	r1, r1
    3e68:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__fp_szero>

00003e6c <__mulsf3x>:
    3e6c:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__fp_split3>
    3e70:	70 f3       	brcs	.-36     	; 0x3e4e <__mulsf3+0x8>

00003e72 <__mulsf3_pse>:
    3e72:	95 9f       	mul	r25, r21
    3e74:	c1 f3       	breq	.-16     	; 0x3e66 <__mulsf3+0x20>
    3e76:	95 0f       	add	r25, r21
    3e78:	50 e0       	ldi	r21, 0x00	; 0
    3e7a:	55 1f       	adc	r21, r21
    3e7c:	62 9f       	mul	r22, r18
    3e7e:	f0 01       	movw	r30, r0
    3e80:	72 9f       	mul	r23, r18
    3e82:	bb 27       	eor	r27, r27
    3e84:	f0 0d       	add	r31, r0
    3e86:	b1 1d       	adc	r27, r1
    3e88:	63 9f       	mul	r22, r19
    3e8a:	aa 27       	eor	r26, r26
    3e8c:	f0 0d       	add	r31, r0
    3e8e:	b1 1d       	adc	r27, r1
    3e90:	aa 1f       	adc	r26, r26
    3e92:	64 9f       	mul	r22, r20
    3e94:	66 27       	eor	r22, r22
    3e96:	b0 0d       	add	r27, r0
    3e98:	a1 1d       	adc	r26, r1
    3e9a:	66 1f       	adc	r22, r22
    3e9c:	82 9f       	mul	r24, r18
    3e9e:	22 27       	eor	r18, r18
    3ea0:	b0 0d       	add	r27, r0
    3ea2:	a1 1d       	adc	r26, r1
    3ea4:	62 1f       	adc	r22, r18
    3ea6:	73 9f       	mul	r23, r19
    3ea8:	b0 0d       	add	r27, r0
    3eaa:	a1 1d       	adc	r26, r1
    3eac:	62 1f       	adc	r22, r18
    3eae:	83 9f       	mul	r24, r19
    3eb0:	a0 0d       	add	r26, r0
    3eb2:	61 1d       	adc	r22, r1
    3eb4:	22 1f       	adc	r18, r18
    3eb6:	74 9f       	mul	r23, r20
    3eb8:	33 27       	eor	r19, r19
    3eba:	a0 0d       	add	r26, r0
    3ebc:	61 1d       	adc	r22, r1
    3ebe:	23 1f       	adc	r18, r19
    3ec0:	84 9f       	mul	r24, r20
    3ec2:	60 0d       	add	r22, r0
    3ec4:	21 1d       	adc	r18, r1
    3ec6:	82 2f       	mov	r24, r18
    3ec8:	76 2f       	mov	r23, r22
    3eca:	6a 2f       	mov	r22, r26
    3ecc:	11 24       	eor	r1, r1
    3ece:	9f 57       	subi	r25, 0x7F	; 127
    3ed0:	50 40       	sbci	r21, 0x00	; 0
    3ed2:	9a f0       	brmi	.+38     	; 0x3efa <__mulsf3_pse+0x88>
    3ed4:	f1 f0       	breq	.+60     	; 0x3f12 <__mulsf3_pse+0xa0>
    3ed6:	88 23       	and	r24, r24
    3ed8:	4a f0       	brmi	.+18     	; 0x3eec <__mulsf3_pse+0x7a>
    3eda:	ee 0f       	add	r30, r30
    3edc:	ff 1f       	adc	r31, r31
    3ede:	bb 1f       	adc	r27, r27
    3ee0:	66 1f       	adc	r22, r22
    3ee2:	77 1f       	adc	r23, r23
    3ee4:	88 1f       	adc	r24, r24
    3ee6:	91 50       	subi	r25, 0x01	; 1
    3ee8:	50 40       	sbci	r21, 0x00	; 0
    3eea:	a9 f7       	brne	.-22     	; 0x3ed6 <__mulsf3_pse+0x64>
    3eec:	9e 3f       	cpi	r25, 0xFE	; 254
    3eee:	51 05       	cpc	r21, r1
    3ef0:	80 f0       	brcs	.+32     	; 0x3f12 <__mulsf3_pse+0xa0>
    3ef2:	0c 94 d2 1e 	jmp	0x3da4	; 0x3da4 <__fp_inf>
    3ef6:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__fp_szero>
    3efa:	5f 3f       	cpi	r21, 0xFF	; 255
    3efc:	e4 f3       	brlt	.-8      	; 0x3ef6 <__mulsf3_pse+0x84>
    3efe:	98 3e       	cpi	r25, 0xE8	; 232
    3f00:	d4 f3       	brlt	.-12     	; 0x3ef6 <__mulsf3_pse+0x84>
    3f02:	86 95       	lsr	r24
    3f04:	77 95       	ror	r23
    3f06:	67 95       	ror	r22
    3f08:	b7 95       	ror	r27
    3f0a:	f7 95       	ror	r31
    3f0c:	e7 95       	ror	r30
    3f0e:	9f 5f       	subi	r25, 0xFF	; 255
    3f10:	c1 f7       	brne	.-16     	; 0x3f02 <__mulsf3_pse+0x90>
    3f12:	fe 2b       	or	r31, r30
    3f14:	88 0f       	add	r24, r24
    3f16:	91 1d       	adc	r25, r1
    3f18:	96 95       	lsr	r25
    3f1a:	87 95       	ror	r24
    3f1c:	97 f9       	bld	r25, 7
    3f1e:	08 95       	ret

00003f20 <__divmodhi4>:
    3f20:	97 fb       	bst	r25, 7
    3f22:	07 2e       	mov	r0, r23
    3f24:	16 f4       	brtc	.+4      	; 0x3f2a <__divmodhi4+0xa>
    3f26:	00 94       	com	r0
    3f28:	07 d0       	rcall	.+14     	; 0x3f38 <__divmodhi4_neg1>
    3f2a:	77 fd       	sbrc	r23, 7
    3f2c:	09 d0       	rcall	.+18     	; 0x3f40 <__divmodhi4_neg2>
    3f2e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__udivmodhi4>
    3f32:	07 fc       	sbrc	r0, 7
    3f34:	05 d0       	rcall	.+10     	; 0x3f40 <__divmodhi4_neg2>
    3f36:	3e f4       	brtc	.+14     	; 0x3f46 <__divmodhi4_exit>

00003f38 <__divmodhi4_neg1>:
    3f38:	90 95       	com	r25
    3f3a:	81 95       	neg	r24
    3f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f3e:	08 95       	ret

00003f40 <__divmodhi4_neg2>:
    3f40:	70 95       	com	r23
    3f42:	61 95       	neg	r22
    3f44:	7f 4f       	sbci	r23, 0xFF	; 255

00003f46 <__divmodhi4_exit>:
    3f46:	08 95       	ret

00003f48 <__udivmodsi4>:
    3f48:	a1 e2       	ldi	r26, 0x21	; 33
    3f4a:	1a 2e       	mov	r1, r26
    3f4c:	aa 1b       	sub	r26, r26
    3f4e:	bb 1b       	sub	r27, r27
    3f50:	fd 01       	movw	r30, r26
    3f52:	0d c0       	rjmp	.+26     	; 0x3f6e <__udivmodsi4_ep>

00003f54 <__udivmodsi4_loop>:
    3f54:	aa 1f       	adc	r26, r26
    3f56:	bb 1f       	adc	r27, r27
    3f58:	ee 1f       	adc	r30, r30
    3f5a:	ff 1f       	adc	r31, r31
    3f5c:	a2 17       	cp	r26, r18
    3f5e:	b3 07       	cpc	r27, r19
    3f60:	e4 07       	cpc	r30, r20
    3f62:	f5 07       	cpc	r31, r21
    3f64:	20 f0       	brcs	.+8      	; 0x3f6e <__udivmodsi4_ep>
    3f66:	a2 1b       	sub	r26, r18
    3f68:	b3 0b       	sbc	r27, r19
    3f6a:	e4 0b       	sbc	r30, r20
    3f6c:	f5 0b       	sbc	r31, r21

00003f6e <__udivmodsi4_ep>:
    3f6e:	66 1f       	adc	r22, r22
    3f70:	77 1f       	adc	r23, r23
    3f72:	88 1f       	adc	r24, r24
    3f74:	99 1f       	adc	r25, r25
    3f76:	1a 94       	dec	r1
    3f78:	69 f7       	brne	.-38     	; 0x3f54 <__udivmodsi4_loop>
    3f7a:	60 95       	com	r22
    3f7c:	70 95       	com	r23
    3f7e:	80 95       	com	r24
    3f80:	90 95       	com	r25
    3f82:	9b 01       	movw	r18, r22
    3f84:	ac 01       	movw	r20, r24
    3f86:	bd 01       	movw	r22, r26
    3f88:	cf 01       	movw	r24, r30
    3f8a:	08 95       	ret

00003f8c <__tablejump2__>:
    3f8c:	ee 0f       	add	r30, r30
    3f8e:	ff 1f       	adc	r31, r31
    3f90:	05 90       	lpm	r0, Z+
    3f92:	f4 91       	lpm	r31, Z
    3f94:	e0 2d       	mov	r30, r0
    3f96:	09 94       	ijmp

00003f98 <__umulhisi3>:
    3f98:	a2 9f       	mul	r26, r18
    3f9a:	b0 01       	movw	r22, r0
    3f9c:	b3 9f       	mul	r27, r19
    3f9e:	c0 01       	movw	r24, r0
    3fa0:	a3 9f       	mul	r26, r19
    3fa2:	70 0d       	add	r23, r0
    3fa4:	81 1d       	adc	r24, r1
    3fa6:	11 24       	eor	r1, r1
    3fa8:	91 1d       	adc	r25, r1
    3faa:	b2 9f       	mul	r27, r18
    3fac:	70 0d       	add	r23, r0
    3fae:	81 1d       	adc	r24, r1
    3fb0:	11 24       	eor	r1, r1
    3fb2:	91 1d       	adc	r25, r1
    3fb4:	08 95       	ret

00003fb6 <__adddi3_s8>:
    3fb6:	00 24       	eor	r0, r0
    3fb8:	a7 fd       	sbrc	r26, 7
    3fba:	00 94       	com	r0
    3fbc:	2a 0f       	add	r18, r26
    3fbe:	30 1d       	adc	r19, r0
    3fc0:	40 1d       	adc	r20, r0
    3fc2:	50 1d       	adc	r21, r0
    3fc4:	60 1d       	adc	r22, r0
    3fc6:	70 1d       	adc	r23, r0
    3fc8:	80 1d       	adc	r24, r0
    3fca:	90 1d       	adc	r25, r0
    3fcc:	08 95       	ret

00003fce <__cmpdi2>:
    3fce:	2a 15       	cp	r18, r10
    3fd0:	3b 05       	cpc	r19, r11
    3fd2:	4c 05       	cpc	r20, r12
    3fd4:	5d 05       	cpc	r21, r13
    3fd6:	6e 05       	cpc	r22, r14
    3fd8:	7f 05       	cpc	r23, r15
    3fda:	80 07       	cpc	r24, r16
    3fdc:	91 07       	cpc	r25, r17
    3fde:	08 95       	ret

00003fe0 <__cmpdi2_s8>:
    3fe0:	00 24       	eor	r0, r0
    3fe2:	a7 fd       	sbrc	r26, 7
    3fe4:	00 94       	com	r0
    3fe6:	2a 17       	cp	r18, r26
    3fe8:	30 05       	cpc	r19, r0
    3fea:	40 05       	cpc	r20, r0
    3fec:	50 05       	cpc	r21, r0
    3fee:	60 05       	cpc	r22, r0
    3ff0:	70 05       	cpc	r23, r0
    3ff2:	80 05       	cpc	r24, r0
    3ff4:	90 05       	cpc	r25, r0
    3ff6:	08 95       	ret

00003ff8 <__udivmodhi4>:
    3ff8:	aa 1b       	sub	r26, r26
    3ffa:	bb 1b       	sub	r27, r27
    3ffc:	51 e1       	ldi	r21, 0x11	; 17
    3ffe:	07 c0       	rjmp	.+14     	; 0x400e <__udivmodhi4_ep>

00004000 <__udivmodhi4_loop>:
    4000:	aa 1f       	adc	r26, r26
    4002:	bb 1f       	adc	r27, r27
    4004:	a6 17       	cp	r26, r22
    4006:	b7 07       	cpc	r27, r23
    4008:	10 f0       	brcs	.+4      	; 0x400e <__udivmodhi4_ep>
    400a:	a6 1b       	sub	r26, r22
    400c:	b7 0b       	sbc	r27, r23

0000400e <__udivmodhi4_ep>:
    400e:	88 1f       	adc	r24, r24
    4010:	99 1f       	adc	r25, r25
    4012:	5a 95       	dec	r21
    4014:	a9 f7       	brne	.-22     	; 0x4000 <__udivmodhi4_loop>
    4016:	80 95       	com	r24
    4018:	90 95       	com	r25
    401a:	bc 01       	movw	r22, r24
    401c:	cd 01       	movw	r24, r26
    401e:	08 95       	ret

00004020 <_exit>:
    4020:	f8 94       	cli

00004022 <__stop_program>:
    4022:	ff cf       	rjmp	.-2      	; 0x4022 <__stop_program>
