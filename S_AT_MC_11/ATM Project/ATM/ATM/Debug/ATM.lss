
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003dde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000492  00800060  00003dde  00003e72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000017b  008004f2  008004f2  00004304  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004304  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f0  00000000  00000000  00004370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007244  00000000  00000000  00004a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e7f  00000000  00000000  0000bca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000448f  00000000  00000000  0000db23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001668  00000000  00000000  00011fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c30  00000000  00000000  0001361c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005e31  00000000  00000000  0001624c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a8  00000000  00000000  0001c07d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__vector_1>
       8:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__vector_2>
       c:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__vector_3>
      10:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <__vector_4>
      14:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__vector_5>
      18:	0c 94 c1 14 	jmp	0x2982	; 0x2982 <__vector_6>
      1c:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__vector_7>
      20:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__vector_8>
      24:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <__vector_9>
      28:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__vector_10>
      2c:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <__vector_11>
      30:	0c 94 75 17 	jmp	0x2eea	; 0x2eea <__vector_12>
      34:	0c 94 f9 1b 	jmp	0x37f2	; 0x37f2 <__vector_13>
      38:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <__vector_14>
      3c:	0c 94 d2 1b 	jmp	0x37a4	; 0x37a4 <__vector_15>
      40:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__vector_16>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	85 1a       	sub	r8, r21
      56:	91 1a       	sub	r9, r17
      58:	88 1a       	sub	r8, r24
      5a:	8b 1a       	sub	r8, r27
      5c:	8e 1a       	sub	r8, r30
      5e:	85 1a       	sub	r8, r21
      60:	85 1a       	sub	r8, r21

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	14 e0       	ldi	r17, 0x04	; 4
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	ee ed       	ldi	r30, 0xDE	; 222
      76:	fd e3       	ldi	r31, 0x3D	; 61
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a2 3f       	cpi	r26, 0xF2	; 242
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	26 e0       	ldi	r18, 0x06	; 6
      86:	a2 ef       	ldi	r26, 0xF2	; 242
      88:	b4 e0       	ldi	r27, 0x04	; 4
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	ad 36       	cpi	r26, 0x6D	; 109
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <main>
      98:	0c 94 ed 1e 	jmp	0x3dda	; 0x3dda <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <AppADMIN_saveNewCustomerData>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save PAN and Balance of a new Customer in the EEPROM
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveNewCustomerData(void)
{
      a0:	cf 93       	push	r28
      a2:	df 93       	push	r29
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
      a4:	20 91 0d 05 	lds	r18, 0x050D	; 0x80050d <gu8_registeredAccNum>
      a8:	30 e0       	ldi	r19, 0x00	; 0
      aa:	c9 01       	movw	r24, r18
      ac:	02 96       	adiw	r24, 0x02	; 2
      ae:	d8 2f       	mov	r29, r24
      b0:	d2 95       	swap	r29
      b2:	d0 7f       	andi	r29, 0xF0	; 240
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
      b4:	2d 5f       	subi	r18, 0xFD	; 253
      b6:	3f 4f       	sbci	r19, 0xFF	; 255
      b8:	c2 2f       	mov	r28, r18
      ba:	c2 95       	swap	r28
      bc:	c0 7f       	andi	r28, 0xF0	; 240
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
      be:	8f e0       	ldi	r24, 0x0F	; 15
      c0:	95 e0       	ldi	r25, 0x05	; 5
      c2:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <stringLength>
      c6:	48 2f       	mov	r20, r24
      c8:	50 e0       	ldi	r21, 0x00	; 0
      ca:	6f e0       	ldi	r22, 0x0F	; 15
      cc:	75 e0       	ldi	r23, 0x05	; 5
      ce:	8d 2f       	mov	r24, r29
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <Eeprom_24_writePacket>
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	d9 f4       	brne	.+54     	; 0x110 <AppADMIN_saveNewCustomerData+0x70>
		return APP_STATUS_ERROR_NOK;
	
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
      da:	89 e1       	ldi	r24, 0x19	; 25
      dc:	95 e0       	ldi	r25, 0x05	; 5
      de:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <stringLength>
      e2:	48 2f       	mov	r20, r24
      e4:	50 e0       	ldi	r21, 0x00	; 0
      e6:	69 e1       	ldi	r22, 0x19	; 25
      e8:	75 e0       	ldi	r23, 0x05	; 5
      ea:	8c 2f       	mov	r24, r28
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <Eeprom_24_writePacket>
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	79 f4       	brne	.+30     	; 0x114 <AppADMIN_saveNewCustomerData+0x74>
		return APP_STATUS_ERROR_NOK;
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
      f6:	60 91 0d 05 	lds	r22, 0x050D	; 0x80050d <gu8_registeredAccNum>
      fa:	6f 5f       	subi	r22, 0xFF	; 255
      fc:	60 93 0d 05 	sts	0x050D, r22	; 0x80050d <gu8_registeredAccNum>
     100:	82 e0       	ldi	r24, 0x02	; 2
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <Eeprom_24_writeByte>
     108:	81 30       	cpi	r24, 0x01	; 1
     10a:	31 f0       	breq	.+12     	; 0x118 <AppADMIN_saveNewCustomerData+0x78>
		return APP_STATUS_ERROR_NOK;
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	05 c0       	rjmp	.+10     	; 0x11a <AppADMIN_saveNewCustomerData+0x7a>
{
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	03 c0       	rjmp	.+6      	; 0x11a <AppADMIN_saveNewCustomerData+0x7a>
	
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	01 c0       	rjmp	.+2      	; 0x11a <AppADMIN_saveNewCustomerData+0x7a>
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     118:	81 e0       	ldi	r24, 0x01	; 1
}
     11a:	df 91       	pop	r29
     11c:	cf 91       	pop	r28
     11e:	08 95       	ret

00000120 <AppUSER_displayTemp>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to display the temperature.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_displayTemp(void)
{
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	1f 92       	push	r1
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_currentTemp=0;
     12a:	19 82       	std	Y+1, r1	; 0x01
	gu8_displayFlag = DISPLAY_TEMP;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <gu8_displayFlag>
	Lcd_clear();
     132:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	0e 94 96 0c 	call	0x192c	; 0x192c <Lcd_setCursor>
     13e:	81 30       	cpi	r24, 0x01	; 1
     140:	f9 f4       	brne	.+62     	; 0x180 <AppUSER_displayTemp+0x60>
	return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
     142:	87 ed       	ldi	r24, 0xD7	; 215
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Lcd_printString>
     14a:	81 30       	cpi	r24, 0x01	; 1
     14c:	d9 f4       	brne	.+54     	; 0x184 <AppUSER_displayTemp+0x64>
	return APP_STATUS_ERROR_NOK;
	if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
     14e:	ce 01       	movw	r24, r28
     150:	01 96       	adiw	r24, 0x01	; 1
     152:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LM35_readTemp>
     156:	81 30       	cpi	r24, 0x01	; 1
     158:	59 f4       	brne	.+22     	; 0x170 <AppUSER_displayTemp+0x50>
	{
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     15a:	60 e0       	ldi	r22, 0x00	; 0
     15c:	0e 94 96 0c 	call	0x192c	; 0x192c <Lcd_setCursor>
     160:	81 30       	cpi	r24, 0x01	; 1
     162:	91 f4       	brne	.+36     	; 0x188 <AppUSER_displayTemp+0x68>
		return APP_STATUS_ERROR_NOK;
		if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
     164:	89 81       	ldd	r24, Y+1	; 0x01
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <Lcd_printDecimal>
     16c:	81 30       	cpi	r24, 0x01	; 1
     16e:	71 f4       	brne	.+28     	; 0x18c <AppUSER_displayTemp+0x6c>
		return APP_STATUS_ERROR_NOK;
	}
	if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
     170:	88 ee       	ldi	r24, 0xE8	; 232
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Lcd_printString>
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	51 f0       	breq	.+20     	; 0x190 <AppUSER_displayTemp+0x70>
	return APP_STATUS_ERROR_NOK;
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	09 c0       	rjmp	.+18     	; 0x192 <AppUSER_displayTemp+0x72>
{
	uint8_t u8_currentTemp=0;
	gu8_displayFlag = DISPLAY_TEMP;
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	07 c0       	rjmp	.+14     	; 0x192 <AppUSER_displayTemp+0x72>
	if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	05 c0       	rjmp	.+10     	; 0x192 <AppUSER_displayTemp+0x72>
	if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
	{
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	03 c0       	rjmp	.+6      	; 0x192 <AppUSER_displayTemp+0x72>
		if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	01 c0       	rjmp	.+2      	; 0x192 <AppUSER_displayTemp+0x72>
	}
	if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	return APP_STATUS_ERROR_OK;
     190:	81 e0       	ldi	r24, 0x01	; 1
}
     192:	0f 90       	pop	r0
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	08 95       	ret

0000019a <AppUSER_checkPan>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
     19a:	1f 93       	push	r17
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
     1a4:	2a 97       	sbiw	r28, 0x0a	; 10
     1a6:	0f b6       	in	r0, 0x3f	; 63
     1a8:	f8 94       	cli
     1aa:	de bf       	out	0x3e, r29	; 62
     1ac:	0f be       	out	0x3f, r0	; 63
     1ae:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
     1b0:	fe 01       	movw	r30, r28
     1b2:	31 96       	adiw	r30, 0x01	; 1
     1b4:	8a e0       	ldi	r24, 0x0A	; 10
     1b6:	df 01       	movw	r26, r30
     1b8:	1d 92       	st	X+, r1
     1ba:	8a 95       	dec	r24
     1bc:	e9 f7       	brne	.-6      	; 0x1b8 <AppUSER_checkPan+0x1e>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     1be:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <gu8_clientIndex>
     1c2:	1b c0       	rjmp	.+54     	; 0x1fa <AppUSER_checkPan+0x60>
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	02 96       	adiw	r24, 0x02	; 2
     1c8:	82 95       	swap	r24
     1ca:	80 7f       	andi	r24, 0xF0	; 240
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     1cc:	4a e0       	ldi	r20, 0x0A	; 10
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	be 01       	movw	r22, r28
     1d2:	6f 5f       	subi	r22, 0xFF	; 255
     1d4:	7f 4f       	sbci	r23, 0xFF	; 255
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 ab 0a 	call	0x1556	; 0x1556 <Eeprom_24_readPacket>
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	89 f5       	brne	.+98     	; 0x242 <AppUSER_checkPan+0xa8>
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
     1e0:	6b e2       	ldi	r22, 0x2B	; 43
     1e2:	75 e0       	ldi	r23, 0x05	; 5
     1e4:	ce 01       	movw	r24, r28
     1e6:	01 96       	adiw	r24, 0x01	; 1
     1e8:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <stringCompare>
     1ec:	81 30       	cpi	r24, 0x01	; 1
     1ee:	69 f0       	breq	.+26     	; 0x20a <AppUSER_checkPan+0x70>
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     1f0:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <gu8_clientIndex>
     1f4:	8f 5f       	subi	r24, 0xFF	; 255
     1f6:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <gu8_clientIndex>
     1fa:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <gu8_clientIndex>
     1fe:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <gu8_registeredAccNum>
     202:	89 17       	cp	r24, r25
     204:	f8 f2       	brcs	.-66     	; 0x1c4 <AppUSER_checkPan+0x2a>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	01 c0       	rjmp	.+2      	; 0x20c <AppUSER_checkPan+0x72>
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
		{
			u8_panFound = 1;
     20a:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
	
	if(u8_panFound == 1)
     20c:	81 30       	cpi	r24, 0x01	; 1
     20e:	d9 f4       	brne	.+54     	; 0x246 <AppUSER_checkPan+0xac>
	{
		uint8_t u8_clientBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     210:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <gu8_clientIndex>
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	03 96       	adiw	r24, 0x03	; 3
     218:	18 2f       	mov	r17, r24
     21a:	12 95       	swap	r17
     21c:	10 7f       	andi	r17, 0xF0	; 240
			
		stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
     21e:	6f e0       	ldi	r22, 0x0F	; 15
     220:	75 e0       	ldi	r23, 0x05	; 5
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	0e 94 e7 17 	call	0x2fce	; 0x2fce <stringCopy>
			
		if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     22a:	48 e0       	ldi	r20, 0x08	; 8
     22c:	50 e0       	ldi	r21, 0x00	; 0
     22e:	69 e1       	ldi	r22, 0x19	; 25
     230:	75 e0       	ldi	r23, 0x05	; 5
     232:	81 2f       	mov	r24, r17
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 ab 0a 	call	0x1556	; 0x1556 <Eeprom_24_readPacket>
     23a:	81 30       	cpi	r24, 0x01	; 1
     23c:	31 f0       	breq	.+12     	; 0x24a <AppUSER_checkPan+0xb0>
			return APP_STATUS_ERROR_NOK;
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	05 c0       	rjmp	.+10     	; 0x24c <AppUSER_checkPan+0xb2>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	03 c0       	rjmp	.+6      	; 0x24c <AppUSER_checkPan+0xb2>
			return APP_STATUS_ERROR_NOK;
			
		return APP_STATUS_PAN_FOUND;
	}

	return APP_STATUS_PAN_NOT_FOUND;
     246:	8b e0       	ldi	r24, 0x0B	; 11
     248:	01 c0       	rjmp	.+2      	; 0x24c <AppUSER_checkPan+0xb2>
		stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
			
		if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
			
		return APP_STATUS_PAN_FOUND;
     24a:	8a e0       	ldi	r24, 0x0A	; 10
	}

	return APP_STATUS_PAN_NOT_FOUND;
}
     24c:	2a 96       	adiw	r28, 0x0a	; 10
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	de bf       	out	0x3e, r29	; 62
     254:	0f be       	out	0x3f, r0	; 63
     256:	cd bf       	out	0x3d, r28	; 61
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	1f 91       	pop	r17
     25e:	08 95       	ret

00000260 <AppUSER_ReportKeypad>:
* Parameters (out): pu8_key - Pointer to variable to hold the button pressed
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the value pressed in the keypad.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_ReportKeypad(uint8_t* pu8_key)
{
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	ec 01       	movw	r28, r24
	static uint8_t u8_index = 0;
	static uint8_t sau8_data[10]={0};
	enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&sau8_data[u8_index]);
     266:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <u8_index.2254>
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	8d 50       	subi	r24, 0x0D	; 13
     26e:	9b 4f       	sbci	r25, 0xFB	; 251
     270:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Keypad_readKey>
		
	if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
     274:	86 30       	cpi	r24, 0x06	; 6
     276:	09 f0       	breq	.+2      	; 0x27a <AppUSER_ReportKeypad+0x1a>
     278:	74 c0       	rjmp	.+232    	; 0x362 <AppUSER_ReportKeypad+0x102>
	{
		if(sau8_data[u8_index] == '=')
     27a:	60 91 fd 04 	lds	r22, 0x04FD	; 0x8004fd <u8_index.2254>
     27e:	86 2f       	mov	r24, r22
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	fc 01       	movw	r30, r24
     284:	ed 50       	subi	r30, 0x0D	; 13
     286:	fb 4f       	sbci	r31, 0xFB	; 251
     288:	20 81       	ld	r18, Z
     28a:	2d 33       	cpi	r18, 0x3D	; 61
     28c:	09 f5       	brne	.+66     	; 0x2d0 <AppUSER_ReportKeypad+0x70>
		{
			sau8_data[u8_index] = '\0';
     28e:	fc 01       	movw	r30, r24
     290:	ed 50       	subi	r30, 0x0D	; 13
     292:	fb 4f       	sbci	r31, 0xFB	; 251
     294:	10 82       	st	Z, r1
			u8_index = 0;
     296:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <u8_index.2254>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     29a:	66 e0       	ldi	r22, 0x06	; 6
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	0e 94 96 0c 	call	0x192c	; 0x192c <Lcd_setCursor>
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <AppUSER_ReportKeypad+0x48>
     2a6:	5f c0       	rjmp	.+190    	; 0x366 <AppUSER_ReportKeypad+0x106>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
     2a8:	87 ef       	ldi	r24, 0xF7	; 247
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Lcd_printString>
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	09 f0       	breq	.+2      	; 0x2b6 <AppUSER_ReportKeypad+0x56>
     2b4:	5a c0       	rjmp	.+180    	; 0x36a <AppUSER_ReportKeypad+0x10a>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     2b6:	66 e0       	ldi	r22, 0x06	; 6
     2b8:	0e 94 96 0c 	call	0x192c	; 0x192c <Lcd_setCursor>
     2bc:	81 30       	cpi	r24, 0x01	; 1
     2be:	09 f0       	breq	.+2      	; 0x2c2 <AppUSER_ReportKeypad+0x62>
     2c0:	56 c0       	rjmp	.+172    	; 0x36e <AppUSER_ReportKeypad+0x10e>
			return APP_STATUS_ERROR_NOK;
			stringCopy(sau8_data, pu8_key);
     2c2:	be 01       	movw	r22, r28
     2c4:	83 ef       	ldi	r24, 0xF3	; 243
     2c6:	94 e0       	ldi	r25, 0x04	; 4
     2c8:	0e 94 e7 17 	call	0x2fce	; 0x2fce <stringCopy>
			return APP_STATUS_KPD_NUM;
     2cc:	87 e0       	ldi	r24, 0x07	; 7
     2ce:	5a c0       	rjmp	.+180    	; 0x384 <AppUSER_ReportKeypad+0x124>
		}else if(sau8_data[u8_index] == '-')
     2d0:	2d 32       	cpi	r18, 0x2D	; 45
     2d2:	b1 f4       	brne	.+44     	; 0x300 <AppUSER_ReportKeypad+0xa0>
		{
			u8_index--;
     2d4:	ef ef       	ldi	r30, 0xFF	; 255
     2d6:	e6 0f       	add	r30, r22
     2d8:	e0 93 fd 04 	sts	0x04FD, r30	; 0x8004fd <u8_index.2254>
			sau8_data[u8_index] = '\0';
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	ed 50       	subi	r30, 0x0D	; 13
     2e0:	fb 4f       	sbci	r31, 0xFB	; 251
     2e2:	10 82       	st	Z, r1
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     2e4:	6b 5f       	subi	r22, 0xFB	; 251
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	0e 94 96 0c 	call	0x192c	; 0x192c <Lcd_setCursor>
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <AppUSER_ReportKeypad+0x92>
     2f0:	40 c0       	rjmp	.+128    	; 0x372 <AppUSER_ReportKeypad+0x112>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_printChar(' ') != LCD_STATUS_ERROR_OK)
     2f2:	80 e2       	ldi	r24, 0x20	; 32
     2f4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Lcd_printChar>
     2f8:	81 30       	cpi	r24, 0x01	; 1
     2fa:	e9 f1       	breq	.+122    	; 0x376 <AppUSER_ReportKeypad+0x116>
			return APP_STATUS_ERROR_NOK;
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	42 c0       	rjmp	.+132    	; 0x384 <AppUSER_ReportKeypad+0x124>
		}else
		{
			if(u8_index!=10)
     300:	6a 30       	cpi	r22, 0x0A	; 10
     302:	49 f1       	breq	.+82     	; 0x356 <AppUSER_ReportKeypad+0xf6>
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     304:	6a 5f       	subi	r22, 0xFA	; 250
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	0e 94 96 0c 	call	0x192c	; 0x192c <Lcd_setCursor>
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	a9 f5       	brne	.+106    	; 0x37a <AppUSER_ReportKeypad+0x11a>
					return APP_STATUS_ERROR_NOK;
				if(Kpd_enablePass == 0)
     310:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <Kpd_enablePass>
     314:	81 11       	cpse	r24, r1
     316:	0b c0       	rjmp	.+22     	; 0x32e <AppUSER_ReportKeypad+0xce>
				{
					if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
     318:	e0 91 fd 04 	lds	r30, 0x04FD	; 0x8004fd <u8_index.2254>
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	ed 50       	subi	r30, 0x0D	; 13
     320:	fb 4f       	sbci	r31, 0xFB	; 251
     322:	80 81       	ld	r24, Z
     324:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Lcd_printChar>
     328:	81 30       	cpi	r24, 0x01	; 1
     32a:	49 f5       	brne	.+82     	; 0x37e <AppUSER_ReportKeypad+0x11e>
     32c:	0d c0       	rjmp	.+26     	; 0x348 <AppUSER_ReportKeypad+0xe8>
						return APP_STATUS_ERROR_NOK;
				}
				else
				{
					if(u8_index < 4)
     32e:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <u8_index.2254>
     332:	84 30       	cpi	r24, 0x04	; 4
     334:	30 f4       	brcc	.+12     	; 0x342 <AppUSER_ReportKeypad+0xe2>
					{
						if(Lcd_printChar('*') != LCD_STATUS_ERROR_OK)
     336:	8a e2       	ldi	r24, 0x2A	; 42
     338:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Lcd_printChar>
     33c:	81 30       	cpi	r24, 0x01	; 1
     33e:	09 f5       	brne	.+66     	; 0x382 <AppUSER_ReportKeypad+0x122>
     340:	03 c0       	rjmp	.+6      	; 0x348 <AppUSER_ReportKeypad+0xe8>
							return APP_STATUS_ERROR_NOK;
					}else
					{
						u8_index--;
     342:	81 50       	subi	r24, 0x01	; 1
     344:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <u8_index.2254>
					}
				}
				u8_index++;
     348:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <u8_index.2254>
     34c:	8f 5f       	subi	r24, 0xFF	; 255
     34e:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <u8_index.2254>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	17 c0       	rjmp	.+46     	; 0x384 <AppUSER_ReportKeypad+0x124>
					}
				}
				u8_index++;
			}else
			{
				sau8_data[u8_index] = '\0';
     356:	fc 01       	movw	r30, r24
     358:	ed 50       	subi	r30, 0x0D	; 13
     35a:	fb 4f       	sbci	r31, 0xFB	; 251
     35c:	10 82       	st	Z, r1
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	11 c0       	rjmp	.+34     	; 0x384 <AppUSER_ReportKeypad+0x124>
			}
				
		}
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	0f c0       	rjmp	.+30     	; 0x384 <AppUSER_ReportKeypad+0x124>
		if(sau8_data[u8_index] == '=')
		{
			sau8_data[u8_index] = '\0';
			u8_index = 0;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	0d c0       	rjmp	.+26     	; 0x384 <AppUSER_ReportKeypad+0x124>
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	0b c0       	rjmp	.+22     	; 0x384 <AppUSER_ReportKeypad+0x124>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	09 c0       	rjmp	.+18     	; 0x384 <AppUSER_ReportKeypad+0x124>
		}else if(sau8_data[u8_index] == '-')
		{
			u8_index--;
			sau8_data[u8_index] = '\0';
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	07 c0       	rjmp	.+14     	; 0x384 <AppUSER_ReportKeypad+0x124>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	05 c0       	rjmp	.+10     	; 0x384 <AppUSER_ReportKeypad+0x124>
		}else
		{
			if(u8_index!=10)
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	03 c0       	rjmp	.+6      	; 0x384 <AppUSER_ReportKeypad+0x124>
				if(Kpd_enablePass == 0)
				{
					if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	01 c0       	rjmp	.+2      	; 0x384 <AppUSER_ReportKeypad+0x124>
				else
				{
					if(u8_index < 4)
					{
						if(Lcd_printChar('*') != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
     382:	80 e0       	ldi	r24, 0x00	; 0
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
}
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <AppUSER_startTransaction>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startTransaction(void)
{
     38a:	4f 92       	push	r4
     38c:	5f 92       	push	r5
     38e:	6f 92       	push	r6
     390:	7f 92       	push	r7
     392:	8f 92       	push	r8
     394:	9f 92       	push	r9
     396:	af 92       	push	r10
     398:	bf 92       	push	r11
     39a:	cf 92       	push	r12
     39c:	df 92       	push	r13
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
     3aa:	28 97       	sbiw	r28, 0x08	; 8
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	f8 94       	cli
     3b0:	de bf       	out	0x3e, r29	; 62
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_inputKPD[8] = {0};
     3b6:	fe 01       	movw	r30, r28
     3b8:	31 96       	adiw	r30, 0x01	; 1
     3ba:	88 e0       	ldi	r24, 0x08	; 8
     3bc:	df 01       	movw	r26, r30
     3be:	1d 92       	st	X+, r1
     3c0:	8a 95       	dec	r24
     3c2:	e9 f7       	brne	.-6      	; 0x3be <AppUSER_startTransaction+0x34>
	enuApp_Status_t KeypdaStatus = 0;
	float32_t f32_balance = stringToFloat(gstr_clientdata.au8_Balance);
     3c4:	89 e1       	ldi	r24, 0x19	; 25
     3c6:	95 e0       	ldi	r25, 0x05	; 5
     3c8:	0e 94 46 18 	call	0x308c	; 0x308c <stringToFloat>
     3cc:	2b 01       	movw	r4, r22
     3ce:	3c 01       	movw	r6, r24
	float32_t f32_maxAmount = stringToFloat(gau8_maxAmount);
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	95 e0       	ldi	r25, 0x05	; 5
     3d4:	0e 94 46 18 	call	0x308c	; 0x308c <stringToFloat>
     3d8:	4b 01       	movw	r8, r22
     3da:	5c 01       	movw	r10, r24
	float32_t f32_amount = 0;
	while(1)
	{
		EmptyString(au8_inputKPD);
     3dc:	ce 01       	movw	r24, r28
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     3e4:	ce 01       	movw	r24, r28
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	0e 94 30 01 	call	0x260	; 0x260 <AppUSER_ReportKeypad>
		
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     3ec:	87 30       	cpi	r24, 0x07	; 7
     3ee:	09 f0       	breq	.+2      	; 0x3f2 <AppUSER_startTransaction+0x68>
     3f0:	b9 c0       	rjmp	.+370    	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
		{
			
			f32_amount = stringToFloat(au8_inputKPD);
     3f2:	ce 01       	movw	r24, r28
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	0e 94 46 18 	call	0x308c	; 0x308c <stringToFloat>
     3fa:	6b 01       	movw	r12, r22
     3fc:	7c 01       	movw	r14, r24
			
			if(f32_maxAmount < f32_amount)
     3fe:	9b 01       	movw	r18, r22
     400:	ac 01       	movw	r20, r24
     402:	c5 01       	movw	r24, r10
     404:	b4 01       	movw	r22, r8
     406:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__cmpsf2>
     40a:	88 23       	and	r24, r24
     40c:	0c f5       	brge	.+66     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
			{
				Lcd_printLCD((uint8_t*)"   Max Amount", (uint8_t*)"    Exceeded");
     40e:	6a ef       	ldi	r22, 0xFA	; 250
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	87 e0       	ldi	r24, 0x07	; 7
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
				
				Delay_ms(500);
     41a:	24 ef       	ldi	r18, 0xF4	; 244
     41c:	31 e0       	ldi	r19, 0x01	; 1
     41e:	40 e0       	ldi	r20, 0x00	; 0
     420:	50 e0       	ldi	r21, 0x00	; 0
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
				
				Lcd_clear();
     42e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 96 0c 	call	0x192c	; 0x192c <Lcd_setCursor>
     43a:	81 30       	cpi	r24, 0x01	; 1
     43c:	09 f0       	breq	.+2      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     43e:	9d c0       	rjmp	.+314    	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     440:	85 e1       	ldi	r24, 0x15	; 21
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Lcd_printString>
     448:	81 30       	cpi	r24, 0x01	; 1
     44a:	09 f4       	brne	.+2      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     44c:	8b c0       	rjmp	.+278    	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
     44e:	97 c0       	rjmp	.+302    	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
				return APP_STATUS_ERROR_NOK;
			}else
			{
			Lcd_printLCD((uint8_t*)"  Please Wait", (uint8_t*)" Processing....");
     450:	62 e2       	ldi	r22, 0x22	; 34
     452:	71 e0       	ldi	r23, 0x01	; 1
     454:	82 e3       	ldi	r24, 0x32	; 50
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
				
			if(f32_balance < f32_amount)
     45c:	a7 01       	movw	r20, r14
     45e:	96 01       	movw	r18, r12
     460:	c3 01       	movw	r24, r6
     462:	b2 01       	movw	r22, r4
     464:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__cmpsf2>
     468:	88 23       	and	r24, r24
     46a:	0c f5       	brge	.+66     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			{
				Lcd_printLCD((uint8_t*)"  Insufficient", (uint8_t*)"      Fund");
     46c:	60 e4       	ldi	r22, 0x40	; 64
     46e:	71 e0       	ldi	r23, 0x01	; 1
     470:	8b e4       	ldi	r24, 0x4B	; 75
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
					
				Delay_ms(500);
     478:	24 ef       	ldi	r18, 0xF4	; 244
     47a:	31 e0       	ldi	r19, 0x01	; 1
     47c:	40 e0       	ldi	r20, 0x00	; 0
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
					
				Lcd_clear();
     48c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	0e 94 96 0c 	call	0x192c	; 0x192c <Lcd_setCursor>
     498:	81 30       	cpi	r24, 0x01	; 1
     49a:	09 f0       	breq	.+2      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     49c:	72 c0       	rjmp	.+228    	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     49e:	85 e1       	ldi	r24, 0x15	; 21
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Lcd_printString>
     4a6:	81 30       	cpi	r24, 0x01	; 1
     4a8:	09 f4       	brne	.+2      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     4aa:	5c c0       	rjmp	.+184    	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
     4ac:	6c c0       	rjmp	.+216    	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
				return APP_STATUS_ERROR_NOK;
				}else/****************** Transaction Successfull ******************/
				{
					Lcd_printLCD((uint8_t*)"   Successful", (uint8_t*)"  Transaction");
     4ae:	6a e5       	ldi	r22, 0x5A	; 90
     4b0:	71 e0       	ldi	r23, 0x01	; 1
     4b2:	88 e6       	ldi	r24, 0x68	; 104
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
						
					Motor_run(MOTOR_CASH_ID, 100, MOTOR_DIR_CLK_WISE);
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	64 e6       	ldi	r22, 0x64	; 100
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <Motor_run>
					Delay_ms(1000);
     4c4:	28 ee       	ldi	r18, 0xE8	; 232
     4c6:	33 e0       	ldi	r19, 0x03	; 3
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
					Motor_stop(MOTOR_CASH_ID);
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <Motor_stop>
					gu8_USER_Mode_State = USER_IDLE;
     4de:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <gu8_USER_Mode_State>
						
					f32_balance -= f32_amount;
     4e2:	a7 01       	movw	r20, r14
     4e4:	96 01       	movw	r18, r12
     4e6:	c3 01       	movw	r24, r6
     4e8:	b2 01       	movw	r22, r4
     4ea:	0e 94 47 1c 	call	0x388e	; 0x388e <__subsf3>
     4ee:	6b 01       	movw	r12, r22
     4f0:	7c 01       	movw	r14, r24
					EmptyString(gstr_clientdata.au8_Balance);
     4f2:	89 e1       	ldi	r24, 0x19	; 25
     4f4:	95 e0       	ldi	r25, 0x05	; 5
     4f6:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <EmptyString>
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
     4fa:	49 e1       	ldi	r20, 0x19	; 25
     4fc:	55 e0       	ldi	r21, 0x05	; 5
     4fe:	c7 01       	movw	r24, r14
     500:	b6 01       	movw	r22, r12
     502:	0e 94 c4 18 	call	0x3188	; 0x3188 <floatToString>
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     506:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <gu8_clientIndex>
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	03 96       	adiw	r24, 0x03	; 3
     50e:	f8 2e       	mov	r15, r24
     510:	ff 0c       	add	r15, r15
     512:	ff 0c       	add	r15, r15
     514:	ff 0c       	add	r15, r15
     516:	ff 0c       	add	r15, r15
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     518:	89 e1       	ldi	r24, 0x19	; 25
     51a:	95 e0       	ldi	r25, 0x05	; 5
     51c:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <stringLength>
					f32_balance -= f32_amount;
					EmptyString(gstr_clientdata.au8_Balance);
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
     520:	48 2f       	mov	r20, r24
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	69 e1       	ldi	r22, 0x19	; 25
     526:	75 e0       	ldi	r23, 0x05	; 5
     528:	8f 2d       	mov	r24, r15
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <Eeprom_24_writePacket>
     530:	81 30       	cpi	r24, 0x01	; 1
     532:	59 f5       	brne	.+86     	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
						
					Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
     534:	69 e1       	ldi	r22, 0x19	; 25
     536:	75 e0       	ldi	r23, 0x05	; 5
     538:	86 e7       	ldi	r24, 0x76	; 118
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
					Delay_ms(1000);
     540:	28 ee       	ldi	r18, 0xE8	; 232
     542:	33 e0       	ldi	r19, 0x03	; 3
     544:	40 e0       	ldi	r20, 0x00	; 0
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     554:	65 e8       	ldi	r22, 0x85	; 133
     556:	71 e0       	ldi	r23, 0x01	; 1
     558:	84 e9       	ldi	r24, 0x94	; 148
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
						
					return APP_STATUS_ERROR_OK;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	14 c0       	rjmp	.+40     	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
				}
			}
		}
		Delay_ms(155);
     564:	2b e9       	ldi	r18, 0x9B	; 155
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e0       	ldi	r20, 0x00	; 0
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
	}
     578:	31 cf       	rjmp	.-414    	; 0x3dc <AppUSER_startTransaction+0x52>
				
				Delay_ms(500);
				
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	07 c0       	rjmp	.+14     	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	05 c0       	rjmp	.+10     	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
					
				Delay_ms(500);
					
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	03 c0       	rjmp	.+6      	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	01 c0       	rjmp	.+2      	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     58a:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
		Delay_ms(155);
	}
}
     58c:	28 96       	adiw	r28, 0x08	; 8
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	ff 90       	pop	r15
     59e:	ef 90       	pop	r14
     5a0:	df 90       	pop	r13
     5a2:	cf 90       	pop	r12
     5a4:	bf 90       	pop	r11
     5a6:	af 90       	pop	r10
     5a8:	9f 90       	pop	r9
     5aa:	8f 90       	pop	r8
     5ac:	7f 90       	pop	r7
     5ae:	6f 90       	pop	r6
     5b0:	5f 90       	pop	r5
     5b2:	4f 90       	pop	r4
     5b4:	08 95       	ret

000005b6 <AppUSER_checkPin>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the user's input pin if right or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPin(void)
{
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	00 d0       	rcall	.+0      	; 0x5be <AppUSER_checkPin+0x8>
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <AppUSER_checkPin+0xa>
     5c0:	1f 92       	push	r1
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_inputKPD[5] = {0};
     5c6:	fe 01       	movw	r30, r28
     5c8:	31 96       	adiw	r30, 0x01	; 1
     5ca:	85 e0       	ldi	r24, 0x05	; 5
     5cc:	df 01       	movw	r26, r30
     5ce:	1d 92       	st	X+, r1
     5d0:	8a 95       	dec	r24
     5d2:	e9 f7       	brne	.-6      	; 0x5ce <AppUSER_checkPin+0x18>
	enuApp_Status_t KeypdaStatus = 0;
	Kpd_enablePass = 1;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <Kpd_enablePass>
	uint8_t u8_loopCounter = 0;
     5da:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		EmptyString(au8_inputKPD);
     5dc:	ce 01       	movw	r24, r28
     5de:	01 96       	adiw	r24, 0x01	; 1
     5e0:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     5e4:	ce 01       	movw	r24, r28
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	0e 94 30 01 	call	0x260	; 0x260 <AppUSER_ReportKeypad>
			
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     5ec:	87 30       	cpi	r24, 0x07	; 7
     5ee:	09 f0       	breq	.+2      	; 0x5f2 <AppUSER_checkPin+0x3c>
     5f0:	57 c0       	rjmp	.+174    	; 0x6a0 <AppUSER_checkPin+0xea>
		{
			u8_loopCounter++;
     5f2:	1f 5f       	subi	r17, 0xFF	; 255
			if(stringCompare(au8_inputKPD, gstr_userCardData.au8_pinNum) != 1)
     5f4:	65 e3       	ldi	r22, 0x35	; 53
     5f6:	75 e0       	ldi	r23, 0x05	; 5
     5f8:	ce 01       	movw	r24, r28
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <stringCompare>
     600:	81 30       	cpi	r24, 0x01	; 1
     602:	09 f4       	brne	.+2      	; 0x606 <AppUSER_checkPin+0x50>
     604:	43 c0       	rjmp	.+134    	; 0x68c <AppUSER_checkPin+0xd6>
			{
				if(u8_loopCounter == MAX_PIN_TRIAL)
     606:	13 30       	cpi	r17, 0x03	; 3
     608:	11 f5       	brne	.+68     	; 0x64e <AppUSER_checkPin+0x98>
				{
					Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)" ");
     60a:	68 ef       	ldi	r22, 0xF8	; 248
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	82 ea       	ldi	r24, 0xA2	; 162
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
					Delay_ms(1000);
     616:	28 ee       	ldi	r18, 0xE8	; 232
     618:	33 e0       	ldi	r19, 0x03	; 3
     61a:	40 e0       	ldi	r20, 0x00	; 0
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
					Lcd_printLCD((uint8_t*)"Please Contact", (uint8_t*)"Customer Service");
     62a:	61 eb       	ldi	r22, 0xB1	; 177
     62c:	71 e0       	ldi	r23, 0x01	; 1
     62e:	82 ec       	ldi	r24, 0xC2	; 194
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
					Delay_ms(1000);
     636:	28 ee       	ldi	r18, 0xE8	; 232
     638:	33 e0       	ldi	r19, 0x03	; 3
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
					return APP_STATUS_PIN_NOT_CORRECT;
     64a:	89 e0       	ldi	r24, 0x09	; 9
     64c:	37 c0       	rjmp	.+110    	; 0x6bc <AppUSER_checkPin+0x106>
				}
				Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)"   Try Again");
     64e:	61 ed       	ldi	r22, 0xD1	; 209
     650:	71 e0       	ldi	r23, 0x01	; 1
     652:	82 ea       	ldi	r24, 0xA2	; 162
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
				Delay_ms(500);
     65a:	24 ef       	ldi	r18, 0xF4	; 244
     65c:	31 e0       	ldi	r19, 0x01	; 1
     65e:	40 e0       	ldi	r20, 0x00	; 0
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
					
				Lcd_clear();
     66e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	0e 94 96 0c 	call	0x192c	; 0x192c <Lcd_setCursor>
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	e1 f4       	brne	.+56     	; 0x6b6 <AppUSER_checkPin+0x100>
					return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     67e:	8e ed       	ldi	r24, 0xDE	; 222
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Lcd_printString>
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	59 f0       	breq	.+22     	; 0x6a0 <AppUSER_checkPin+0xea>
     68a:	17 c0       	rjmp	.+46     	; 0x6ba <AppUSER_checkPin+0x104>
					return APP_STATUS_ERROR_NOK;
			}else
			{
				Lcd_printLCD((uint8_t*)"  Please Wait", (uint8_t*)" Processing....");
     68c:	62 e2       	ldi	r22, 0x22	; 34
     68e:	71 e0       	ldi	r23, 0x01	; 1
     690:	82 e3       	ldi	r24, 0x32	; 50
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
					Kpd_enablePass = 0;
     698:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <Kpd_enablePass>
				return APP_STATUS_PIN_CORRECT;
     69c:	88 e0       	ldi	r24, 0x08	; 8
     69e:	0e c0       	rjmp	.+28     	; 0x6bc <AppUSER_checkPin+0x106>
			}
		}
		Delay_ms(155);
     6a0:	2b e9       	ldi	r18, 0x9B	; 155
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
	}
     6b4:	93 cf       	rjmp	.-218    	; 0x5dc <AppUSER_checkPin+0x26>
				Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)"   Try Again");
				Delay_ms(500);
					
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	01 c0       	rjmp	.+2      	; 0x6bc <AppUSER_checkPin+0x106>
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     6ba:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		Delay_ms(155);
	}
	Kpd_enablePass = 0;
}
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	08 95       	ret

000006ce <AppUSER_startProcess>:
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to start processing the card.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
     6ce:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	0e 94 96 0c 	call	0x192c	; 0x192c <Lcd_setCursor>
     6da:	81 30       	cpi	r24, 0x01	; 1
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <AppUSER_startProcess+0x12>
     6de:	4c c0       	rjmp	.+152    	; 0x778 <AppUSER_startProcess+0xaa>
	return APP_STATUS_ERROR_NOK;
	enuApp_Status_t PAN_status = AppUSER_checkPan();
     6e0:	0e 94 cd 00 	call	0x19a	; 0x19a <AppUSER_checkPan>
	if(PAN_status == APP_STATUS_PAN_NOT_FOUND)
     6e4:	8b 30       	cpi	r24, 0x0B	; 11
     6e6:	41 f4       	brne	.+16     	; 0x6f8 <AppUSER_startProcess+0x2a>
	{
		Lcd_printLCD((uint8_t*)"Your Card is not", (uint8_t*)"in the Database");
     6e8:	6d ee       	ldi	r22, 0xED	; 237
     6ea:	71 e0       	ldi	r23, 0x01	; 1
     6ec:	8d ef       	ldi	r24, 0xFD	; 253
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
		return APP_STATUS_PAN_NOT_FOUND;
     6f4:	8b e0       	ldi	r24, 0x0B	; 11
     6f6:	08 95       	ret
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     6f8:	8e ed       	ldi	r24, 0xDE	; 222
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Lcd_printString>
     700:	81 30       	cpi	r24, 0x01	; 1
     702:	e1 f5       	brne	.+120    	; 0x77c <AppUSER_startProcess+0xae>
		return APP_STATUS_ERROR_NOK;
	enuApp_Status_t PIN_status = AppUSER_checkPin();
     704:	0e 94 db 02 	call	0x5b6	; 0x5b6 <AppUSER_checkPin>
	if(PIN_status == APP_STATUS_PIN_NOT_CORRECT)
     708:	89 30       	cpi	r24, 0x09	; 9
     70a:	d1 f1       	breq	.+116    	; 0x780 <AppUSER_startProcess+0xb2>
	{
		return APP_STATUS_PIN_NOT_CORRECT;
	}else if(PIN_status != APP_STATUS_PIN_CORRECT)
     70c:	88 30       	cpi	r24, 0x08	; 8
     70e:	d1 f5       	brne	.+116    	; 0x784 <AppUSER_startProcess+0xb6>
		return APP_STATUS_ERROR_NOK;
	
	
	Lcd_printLCD((uint8_t*)"    Welcome", (uint8_t*)"    Customer");
     710:	6e e0       	ldi	r22, 0x0E	; 14
     712:	72 e0       	ldi	r23, 0x02	; 2
     714:	8b e1       	ldi	r24, 0x1B	; 27
     716:	92 e0       	ldi	r25, 0x02	; 2
     718:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
	Delay_ms(2000);
     71c:	20 ed       	ldi	r18, 0xD0	; 208
     71e:	37 e0       	ldi	r19, 0x07	; 7
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
	
	Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
     730:	69 e1       	ldi	r22, 0x19	; 25
     732:	75 e0       	ldi	r23, 0x05	; 5
     734:	86 e7       	ldi	r24, 0x76	; 118
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
	Delay_ms(2000);
     73c:	20 ed       	ldi	r18, 0xD0	; 208
     73e:	37 e0       	ldi	r19, 0x07	; 7
     740:	40 e0       	ldi	r20, 0x00	; 0
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
	
	Lcd_clear();
     750:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	0e 94 96 0c 	call	0x192c	; 0x192c <Lcd_setCursor>
     75c:	81 30       	cpi	r24, 0x01	; 1
     75e:	a1 f4       	brne	.+40     	; 0x788 <AppUSER_startProcess+0xba>
		return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     760:	85 e1       	ldi	r24, 0x15	; 21
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Lcd_printString>
     768:	81 30       	cpi	r24, 0x01	; 1
     76a:	81 f4       	brne	.+32     	; 0x78c <AppUSER_startProcess+0xbe>
		return APP_STATUS_ERROR_NOK;
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
     76c:	0e 94 c5 01 	call	0x38a	; 0x38a <AppUSER_startTransaction>
     770:	81 30       	cpi	r24, 0x01	; 1
     772:	69 f0       	breq	.+26     	; 0x78e <AppUSER_startProcess+0xc0>
		return APP_STATUS_ERROR_NOK;
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	08 95       	ret
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	08 95       	ret
		Lcd_printLCD((uint8_t*)"Your Card is not", (uint8_t*)"in the Database");
		return APP_STATUS_PAN_NOT_FOUND;
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	08 95       	ret
	enuApp_Status_t PIN_status = AppUSER_checkPin();
	if(PIN_status == APP_STATUS_PIN_NOT_CORRECT)
	{
		return APP_STATUS_PIN_NOT_CORRECT;
     780:	89 e0       	ldi	r24, 0x09	; 9
     782:	08 95       	ret
	}else if(PIN_status != APP_STATUS_PIN_CORRECT)
		return APP_STATUS_ERROR_NOK;
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	08 95       	ret
	Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
	Delay_ms(2000);
	
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	08 95       	ret
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     78c:	80 e0       	ldi	r24, 0x00	; 0
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     78e:	08 95       	ret

00000790 <AppUSER_getCardData>:
* Parameters (out): pstr_CardData - Structure to save the card's data in.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the Card data Struct
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_getCardData(strCardData_t* pstr_CardData, uint8_t *pu8_dataString)
{
     790:	ac 01       	movw	r20, r24
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
     792:	20 e0       	ldi	r18, 0x00	; 0
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	0a c0       	rjmp	.+20     	; 0x7ac <AppUSER_getCardData+0x1c>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     798:	fb 01       	movw	r30, r22
     79a:	e9 0f       	add	r30, r25
     79c:	f1 1d       	adc	r31, r1
     79e:	80 81       	ld	r24, Z
     7a0:	fa 01       	movw	r30, r20
     7a2:	e2 0f       	add	r30, r18
     7a4:	f1 1d       	adc	r31, r1
     7a6:	80 83       	st	Z, r24
		u8_dataIndex++;
     7a8:	2f 5f       	subi	r18, 0xFF	; 255
{
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     7aa:	9f 5f       	subi	r25, 0xFF	; 255
     7ac:	9a 30       	cpi	r25, 0x0A	; 10
     7ae:	a0 f3       	brcs	.-24     	; 0x798 <AppUSER_getCardData+0x8>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
     7b0:	fa 01       	movw	r30, r20
     7b2:	e2 0f       	add	r30, r18
     7b4:	f1 1d       	adc	r31, r1
     7b6:	10 82       	st	Z, r1
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
     7b8:	20 e0       	ldi	r18, 0x00	; 0
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     7ba:	9b e0       	ldi	r25, 0x0B	; 11
     7bc:	0a c0       	rjmp	.+20     	; 0x7d2 <AppUSER_getCardData+0x42>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     7be:	fb 01       	movw	r30, r22
     7c0:	e9 0f       	add	r30, r25
     7c2:	f1 1d       	adc	r31, r1
     7c4:	80 81       	ld	r24, Z
     7c6:	fa 01       	movw	r30, r20
     7c8:	e2 0f       	add	r30, r18
     7ca:	f1 1d       	adc	r31, r1
     7cc:	82 87       	std	Z+10, r24	; 0x0a
		u8_dataIndex++;
     7ce:	2f 5f       	subi	r18, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     7d0:	9f 5f       	subi	r25, 0xFF	; 255
     7d2:	94 31       	cpi	r25, 0x14	; 20
     7d4:	a0 f3       	brcs	.-24     	; 0x7be <AppUSER_getCardData+0x2e>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
     7d6:	fa 01       	movw	r30, r20
     7d8:	e2 0f       	add	r30, r18
     7da:	f1 1d       	adc	r31, r1
     7dc:	12 86       	std	Z+10, r1	; 0x0a
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
     7de:	90 e0       	ldi	r25, 0x00	; 0
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     7e0:	85 e1       	ldi	r24, 0x15	; 21
     7e2:	0a c0       	rjmp	.+20     	; 0x7f8 <AppUSER_getCardData+0x68>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     7e4:	fb 01       	movw	r30, r22
     7e6:	e8 0f       	add	r30, r24
     7e8:	f1 1d       	adc	r31, r1
     7ea:	20 81       	ld	r18, Z
     7ec:	fa 01       	movw	r30, r20
     7ee:	e9 0f       	add	r30, r25
     7f0:	f1 1d       	adc	r31, r1
     7f2:	24 8b       	std	Z+20, r18	; 0x14
		u8_dataIndex++;
     7f4:	9f 5f       	subi	r25, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     7f6:	8f 5f       	subi	r24, 0xFF	; 255
     7f8:	89 31       	cpi	r24, 0x19	; 25
     7fa:	a0 f3       	brcs	.-24     	; 0x7e4 <AppUSER_getCardData+0x54>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_pinNum[u8_dataIndex] = '\0';
     7fc:	fa 01       	movw	r30, r20
     7fe:	e9 0f       	add	r30, r25
     800:	f1 1d       	adc	r31, r1
     802:	14 8a       	std	Z+20, r1	; 0x14
	return APP_STATUS_ERROR_OK;
}
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	08 95       	ret

00000808 <AppUSER_insertCard>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to run the Card Inserting Process.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_insertCard(void)
{
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	da 95       	dec	r29
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61
	gu8_USER_Mode_State = USER_BUSY;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <gu8_USER_Mode_State>
	uint8_t u8_buttonVal = PIN_LOW;
     824:	19 82       	std	Y+1, r1	; 0x01
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     826:	fe 01       	movw	r30, r28
     828:	32 96       	adiw	r30, 0x02	; 2
     82a:	8f ef       	ldi	r24, 0xFF	; 255
     82c:	df 01       	movw	r26, r30
     82e:	1d 92       	st	X+, r1
     830:	8a 95       	dec	r24
     832:	e9 f7       	brne	.-6      	; 0x82e <AppUSER_insertCard+0x26>
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
     834:	67 e2       	ldi	r22, 0x27	; 39
     836:	72 e0       	ldi	r23, 0x02	; 2
     838:	86 e3       	ldi	r24, 0x36	; 54
     83a:	92 e0       	ldi	r25, 0x02	; 2
     83c:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
	while(u8_buttonVal == PIN_LOW)
     840:	0f c0       	rjmp	.+30     	; 0x860 <__stack+0x1>
	{
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	0e 94 52 08 	call	0x10a4	; 0x10a4 <Button_updateState>
     848:	81 30       	cpi	r24, 0x01	; 1
     84a:	09 f0       	breq	.+2      	; 0x84e <AppUSER_insertCard+0x46>
     84c:	89 c0       	rjmp	.+274    	; 0x960 <__stack+0x101>
			return APP_STATUS_ERROR_NOK;
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
     84e:	be 01       	movw	r22, r28
     850:	6f 5f       	subi	r22, 0xFF	; 255
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	0e 94 40 08 	call	0x1080	; 0x1080 <Button_getState>
     85a:	81 30       	cpi	r24, 0x01	; 1
     85c:	09 f0       	breq	.+2      	; 0x860 <__stack+0x1>
     85e:	82 c0       	rjmp	.+260    	; 0x964 <__stack+0x105>
	gu8_USER_Mode_State = USER_BUSY;
	uint8_t u8_buttonVal = PIN_LOW;
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
	while(u8_buttonVal == PIN_LOW)
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	88 23       	and	r24, r24
     864:	71 f3       	breq	.-36     	; 0x842 <AppUSER_insertCard+0x3a>
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	}
	Lcd_printLCD((uint8_t*)"Button Pressed",(uint8_t*)"Receiving Data");
     866:	67 e4       	ldi	r22, 0x47	; 71
     868:	72 e0       	ldi	r23, 0x02	; 2
     86a:	86 e5       	ldi	r24, 0x56	; 86
     86c:	92 e0       	ldi	r25, 0x02	; 2
     86e:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	82 e1       	ldi	r24, 0x12	; 18
     876:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
	
	while (au8_inputString[0] != '#')
     87a:	41 c0       	rjmp	.+130    	; 0x8fe <__stack+0x9f>
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
     87c:	6c e1       	ldi	r22, 0x1C	; 28
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	ce 01       	movw	r24, r28
     882:	02 96       	adiw	r24, 0x02	; 2
     884:	0e 94 48 17 	call	0x2e90	; 0x2e90 <Spi_SlaveReceivePacket>
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	09 f0       	breq	.+2      	; 0x88e <__stack+0x2f>
     88c:	6d c0       	rjmp	.+218    	; 0x968 <__stack+0x109>
			return APP_STATUS_ERROR_NOK;
		if((au8_inputString[0] == '*') && (au8_inputString[1] == '*'))
     88e:	8a 81       	ldd	r24, Y+2	; 0x02
     890:	8a 32       	cpi	r24, 0x2A	; 42
     892:	a9 f5       	brne	.+106    	; 0x8fe <__stack+0x9f>
     894:	8b 81       	ldd	r24, Y+3	; 0x03
     896:	8a 32       	cpi	r24, 0x2A	; 42
     898:	91 f5       	brne	.+100    	; 0x8fe <__stack+0x9f>
		{
			Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     89a:	61 e0       	ldi	r22, 0x01	; 1
     89c:	82 e1       	ldi	r24, 0x12	; 18
     89e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
			Lcd_printLCD((uint8_t*)"Card is not",(uint8_t*)"Programmed");
     8a2:	65 e6       	ldi	r22, 0x65	; 101
     8a4:	72 e0       	ldi	r23, 0x02	; 2
     8a6:	82 e0       	ldi	r24, 0x02	; 2
     8a8:	92 e0       	ldi	r25, 0x02	; 2
     8aa:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
			Delay_ms(1000);
     8ae:	28 ee       	ldi	r18, 0xE8	; 232
     8b0:	33 e0       	ldi	r19, 0x03	; 3
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
			Lcd_printLCD((uint8_t*)"Please Contact",(uint8_t*)"Customer Service");
     8c2:	61 eb       	ldi	r22, 0xB1	; 177
     8c4:	71 e0       	ldi	r23, 0x01	; 1
     8c6:	82 ec       	ldi	r24, 0xC2	; 194
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
			Delay_ms(1000);
     8ce:	28 ee       	ldi	r18, 0xE8	; 232
     8d0:	33 e0       	ldi	r19, 0x03	; 3
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
			gu8_USER_Mode_State = USER_IDLE;
     8e2:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <gu8_USER_Mode_State>
			Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     8e6:	65 e8       	ldi	r22, 0x85	; 133
     8e8:	71 e0       	ldi	r23, 0x01	; 1
     8ea:	84 e9       	ldi	r24, 0x94	; 148
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
			EmptyString(au8_inputString);
     8f2:	ce 01       	movw	r24, r28
     8f4:	02 96       	adiw	r24, 0x02	; 2
     8f6:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <EmptyString>
			return APP_STATUS_ERROR_OK;
     8fa:	11 e0       	ldi	r17, 0x01	; 1
     8fc:	38 c0       	rjmp	.+112    	; 0x96e <__stack+0x10f>
			return APP_STATUS_ERROR_NOK;
	}
	Lcd_printLCD((uint8_t*)"Button Pressed",(uint8_t*)"Receiving Data");
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
	
	while (au8_inputString[0] != '#')
     8fe:	8a 81       	ldd	r24, Y+2	; 0x02
     900:	83 32       	cpi	r24, 0x23	; 35
     902:	09 f0       	breq	.+2      	; 0x906 <__stack+0xa7>
     904:	bb cf       	rjmp	.-138    	; 0x87c <__stack+0x1d>
			return APP_STATUS_ERROR_OK;
		}
		
	}
	
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	82 e1       	ldi	r24, 0x12	; 18
     90a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
	if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
     90e:	be 01       	movw	r22, r28
     910:	6e 5f       	subi	r22, 0xFE	; 254
     912:	7f 4f       	sbci	r23, 0xFF	; 255
     914:	81 e2       	ldi	r24, 0x21	; 33
     916:	95 e0       	ldi	r25, 0x05	; 5
     918:	0e 94 c8 03 	call	0x790	; 0x790 <AppUSER_getCardData>
     91c:	18 2f       	mov	r17, r24
     91e:	81 30       	cpi	r24, 0x01	; 1
     920:	29 f5       	brne	.+74     	; 0x96c <__stack+0x10d>
		return APP_STATUS_ERROR_NOK;
		
	enuApp_Status_t processState = AppUSER_startProcess(&gstr_userCardData);
     922:	81 e2       	ldi	r24, 0x21	; 33
     924:	95 e0       	ldi	r25, 0x05	; 5
     926:	0e 94 67 03 	call	0x6ce	; 0x6ce <AppUSER_startProcess>
	if((processState == APP_STATUS_PAN_NOT_FOUND) || (processState == APP_STATUS_PIN_NOT_CORRECT))
     92a:	8b 30       	cpi	r24, 0x0B	; 11
     92c:	11 f0       	breq	.+4      	; 0x932 <__stack+0xd3>
     92e:	89 30       	cpi	r24, 0x09	; 9
     930:	99 f4       	brne	.+38     	; 0x958 <__stack+0xf9>
	{
		Delay_ms(1000);
     932:	28 ee       	ldi	r18, 0xE8	; 232
     934:	33 e0       	ldi	r19, 0x03	; 3
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
		gu8_USER_Mode_State = USER_IDLE;
     946:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <gu8_USER_Mode_State>
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     94a:	65 e8       	ldi	r22, 0x85	; 133
     94c:	71 e0       	ldi	r23, 0x01	; 1
     94e:	84 e9       	ldi	r24, 0x94	; 148
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
     956:	0b c0       	rjmp	.+22     	; 0x96e <__stack+0x10f>
	}else if (processState != APP_STATUS_ERROR_OK)
     958:	81 30       	cpi	r24, 0x01	; 1
     95a:	49 f0       	breq	.+18     	; 0x96e <__stack+0x10f>
		return APP_STATUS_ERROR_NOK;
     95c:	10 e0       	ldi	r17, 0x00	; 0
     95e:	07 c0       	rjmp	.+14     	; 0x96e <__stack+0x10f>
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
	while(u8_buttonVal == PIN_LOW)
	{
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     960:	10 e0       	ldi	r17, 0x00	; 0
     962:	05 c0       	rjmp	.+10     	; 0x96e <__stack+0x10f>
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     964:	10 e0       	ldi	r17, 0x00	; 0
     966:	03 c0       	rjmp	.+6      	; 0x96e <__stack+0x10f>
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
	
	while (au8_inputString[0] != '#')
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     968:	10 e0       	ldi	r17, 0x00	; 0
     96a:	01 c0       	rjmp	.+2      	; 0x96e <__stack+0x10f>
		
	}
	
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
	if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     96c:	10 e0       	ldi	r17, 0x00	; 0
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
	}else if (processState != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     96e:	81 2f       	mov	r24, r17
     970:	d3 95       	inc	r29
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	08 95       	ret

00000984 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
     984:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enuCurrentAppStatus>
     988:	84 30       	cpi	r24, 0x04	; 4
     98a:	09 f4       	brne	.+2      	; 0x98e <App_init+0xa>
     98c:	bd c0       	rjmp	.+378    	; 0xb08 <App_init+0x184>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(LCD_STATUS_ERROR_OK != Lcd_init())
     98e:	0e 94 5f 0c 	call	0x18be	; 0x18be <Lcd_init>
     992:	81 30       	cpi	r24, 0x01	; 1
     994:	09 f0       	breq	.+2      	; 0x998 <App_init+0x14>
     996:	97 c0       	rjmp	.+302    	; 0xac6 <App_init+0x142>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
     998:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <Terminal_init>
     99c:	81 30       	cpi	r24, 0x01	; 1
     99e:	09 f0       	breq	.+2      	; 0x9a2 <App_init+0x1e>
     9a0:	94 c0       	rjmp	.+296    	; 0xaca <App_init+0x146>
		return APP_STATUS_ERROR_NOK;
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
     9a2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Eeprom_24_init>
     9a6:	81 30       	cpi	r24, 0x01	; 1
     9a8:	09 f0       	breq	.+2      	; 0x9ac <App_init+0x28>
     9aa:	91 c0       	rjmp	.+290    	; 0xace <App_init+0x14a>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
     9ac:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <Spi_init>
     9b0:	81 30       	cpi	r24, 0x01	; 1
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <App_init+0x32>
     9b4:	8e c0       	rjmp	.+284    	; 0xad2 <App_init+0x14e>
		return APP_STATUS_ERROR_NOK;
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
     9b6:	0e 94 65 0b 	call	0x16ca	; 0x16ca <Keypad_init>
     9ba:	81 30       	cpi	r24, 0x01	; 1
     9bc:	09 f0       	breq	.+2      	; 0x9c0 <App_init+0x3c>
     9be:	8b c0       	rjmp	.+278    	; 0xad6 <App_init+0x152>
		return APP_STATUS_ERROR_NOK;
	if(LM35_STATUS_ERROR_OK != LM35_init())
     9c0:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LM35_init>
     9c4:	81 30       	cpi	r24, 0x01	; 1
     9c6:	09 f0       	breq	.+2      	; 0x9ca <App_init+0x46>
     9c8:	88 c0       	rjmp	.+272    	; 0xada <App_init+0x156>
		return APP_STATUS_ERROR_NOK;
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
     9ca:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <Motor_init>
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <App_init+0x50>
     9d2:	85 c0       	rjmp	.+266    	; 0xade <App_init+0x15a>
		return APP_STATUS_ERROR_NOK;
	if(BTTN_STATUS_ERROR_OK != Button_init())
     9d4:	0e 94 2d 08 	call	0x105a	; 0x105a <Button_init>
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	09 f0       	breq	.+2      	; 0x9de <App_init+0x5a>
     9dc:	82 c0       	rjmp	.+260    	; 0xae2 <App_init+0x15e>
	/* Only for Testing */
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
     9de:	82 ed       	ldi	r24, 0xD2	; 210
     9e0:	94 e0       	ldi	r25, 0x04	; 4
     9e2:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Lcd_printString>
     9e6:	81 30       	cpi	r24, 0x01	; 1
     9e8:	09 f0       	breq	.+2      	; 0x9ec <App_init+0x68>
     9ea:	7d c0       	rjmp	.+250    	; 0xae6 <App_init+0x162>
		return APP_STATUS_ERROR_NOK;
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
     9ec:	84 ec       	ldi	r24, 0xC4	; 196
     9ee:	94 e0       	ldi	r25, 0x04	; 4
     9f0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     9f4:	81 30       	cpi	r24, 0x01	; 1
     9f6:	09 f0       	breq	.+2      	; 0x9fa <App_init+0x76>
     9f8:	78 c0       	rjmp	.+240    	; 0xaea <App_init+0x166>
		return APP_STATUS_ERROR_NOK;
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
     9fa:	6e e0       	ldi	r22, 0x0E	; 14
     9fc:	75 e0       	ldi	r23, 0x05	; 5
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 1f 09 	call	0x123e	; 0x123e <Eeprom_24_readByte>
     a06:	81 30       	cpi	r24, 0x01	; 1
     a08:	09 f0       	breq	.+2      	; 0xa0c <App_init+0x88>
     a0a:	71 c0       	rjmp	.+226    	; 0xaee <App_init+0x16a>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     a0c:	2a e0       	ldi	r18, 0x0A	; 10
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
	
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
     a20:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <gu8_initData>
     a24:	8a 3a       	cpi	r24, 0xAA	; 170
     a26:	f9 f0       	breq	.+62     	; 0xa66 <App_init+0xe2>
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
     a28:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
     a2c:	8c ed       	ldi	r24, 0xDC	; 220
     a2e:	94 e0       	ldi	r25, 0x04	; 4
     a30:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <stringLength>
	
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
     a34:	48 2f       	mov	r20, r24
     a36:	50 e0       	ldi	r21, 0x00	; 0
     a38:	6c ed       	ldi	r22, 0xDC	; 220
     a3a:	74 e0       	ldi	r23, 0x04	; 4
     a3c:	8b e0       	ldi	r24, 0x0B	; 11
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <Eeprom_24_writePacket>
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	09 f0       	breq	.+2      	; 0xa4a <App_init+0xc6>
     a48:	54 c0       	rjmp	.+168    	; 0xaf2 <App_init+0x16e>
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		/* Lock the ATM For the User */
		Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
     a4a:	60 e7       	ldi	r22, 0x70	; 112
     a4c:	72 e0       	ldi	r23, 0x02	; 2
     a4e:	81 e8       	ldi	r24, 0x81	; 129
     a50:	92 e0       	ldi	r25, 0x02	; 2
     a52:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
		
		if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     a56:	82 e9       	ldi	r24, 0x92	; 146
     a58:	92 e0       	ldi	r25, 0x02	; 2
     a5a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     a5e:	81 30       	cpi	r24, 0x01	; 1
     a60:	09 f0       	breq	.+2      	; 0xa64 <App_init+0xe0>
     a62:	49 c0       	rjmp	.+146    	; 0xaf6 <App_init+0x172>
     a64:	2b c0       	rjmp	.+86     	; 0xabc <App_init+0x138>
			return APP_STATUS_ERROR_NOK;
	}else
	{ /* Case it was previously registered == Contains data in the DB */
		gu8_ATMMode = ATM_MODE_USER;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
     a6c:	48 e0       	ldi	r20, 0x08	; 8
     a6e:	50 e0       	ldi	r21, 0x00	; 0
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	75 e0       	ldi	r23, 0x05	; 5
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 ab 0a 	call	0x1556	; 0x1556 <Eeprom_24_readPacket>
     a7c:	81 30       	cpi	r24, 0x01	; 1
     a7e:	e9 f5       	brne	.+122    	; 0xafa <App_init+0x176>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     a80:	6d e0       	ldi	r22, 0x0D	; 13
     a82:	75 e0       	ldi	r23, 0x05	; 5
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 1f 09 	call	0x123e	; 0x123e <Eeprom_24_readByte>
     a8c:	81 30       	cpi	r24, 0x01	; 1
     a8e:	b9 f5       	brne	.+110    	; 0xafe <App_init+0x17a>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
     a90:	45 e0       	ldi	r20, 0x05	; 5
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	68 e0       	ldi	r22, 0x08	; 8
     a96:	75 e0       	ldi	r23, 0x05	; 5
     a98:	8b e0       	ldi	r24, 0x0B	; 11
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 ab 0a 	call	0x1556	; 0x1556 <Eeprom_24_readPacket>
     aa0:	81 30       	cpi	r24, 0x01	; 1
     aa2:	79 f5       	brne	.+94     	; 0xb02 <App_init+0x17e>
			return APP_STATUS_ERROR_NOK;
		
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     aa4:	65 e8       	ldi	r22, 0x85	; 133
     aa6:	71 e0       	ldi	r23, 0x01	; 1
     aa8:	84 e9       	ldi	r24, 0x94	; 148
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
			
		if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     ab0:	85 ea       	ldi	r24, 0xA5	; 165
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     ab8:	81 30       	cpi	r24, 0x01	; 1
     aba:	29 f5       	brne	.+74     	; 0xb06 <App_init+0x182>
			return APP_STATUS_ERROR_NOK;
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     abc:	84 e0       	ldi	r24, 0x04	; 4
     abe:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enuCurrentAppStatus>
	return APP_STATUS_ERROR_OK;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(LCD_STATUS_ERROR_OK != Lcd_init())
		return APP_STATUS_ERROR_NOK;
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	08 95       	ret
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	08 95       	ret
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	08 95       	ret
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	08 95       	ret
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
		return APP_STATUS_ERROR_NOK;
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	08 95       	ret
	if(LM35_STATUS_ERROR_OK != LM35_init())
		return APP_STATUS_ERROR_NOK;
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	08 95       	ret
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
		return APP_STATUS_ERROR_NOK;
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	08 95       	ret
	if(BTTN_STATUS_ERROR_OK != Button_init())
		return APP_STATUS_ERROR_NOK;
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	08 95       	ret
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	08 95       	ret
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	08 95       	ret
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	08 95       	ret
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	08 95       	ret
		/* Lock the ATM For the User */
		Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
		
		if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	08 95       	ret
	}else
	{ /* Case it was previously registered == Contains data in the DB */
		gu8_ATMMode = ATM_MODE_USER;
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	08 95       	ret
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	08 95       	ret
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	08 95       	ret
		
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
			
		if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b06:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     b08:	08 95       	ret

00000b0a <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
     b16:	cf 5f       	subi	r28, 0xFF	; 255
     b18:	d1 09       	sbc	r29, r1
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     b26:	ce 01       	movw	r24, r28
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	2f ef       	ldi	r18, 0xFF	; 255
     b2c:	fc 01       	movw	r30, r24
     b2e:	11 92       	st	Z+, r1
     b30:	2a 95       	dec	r18
     b32:	e9 f7       	brne	.-6      	; 0xb2e <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
     b34:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
     b38:	85 30       	cpi	r24, 0x05	; 5
     b3a:	39 f4       	brne	.+14     	; 0xb4a <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
     b3c:	b8 01       	movw	r22, r16
     b3e:	ce 01       	movw	r24, r28
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	0e 94 e7 17 	call	0x2fce	; 0x2fce <stringCopy>
		return APP_STATUS_ERROR_OK;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	05 c0       	rjmp	.+10     	; 0xb54 <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     b4a:	81 30       	cpi	r24, 0x01	; 1
     b4c:	11 f0       	breq	.+4      	; 0xb52 <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	01 c0       	rjmp	.+2      	; 0xb54 <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
     b52:	86 e0       	ldi	r24, 0x06	; 6
}
     b54:	c1 50       	subi	r28, 0x01	; 1
     b56:	df 4f       	sbci	r29, 0xFF	; 255
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	08 95       	ret

00000b6c <AppADMIN_getInput>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the ADMIN Input Choice.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getInput(uint8_t* pu8_data)
{
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nYour Input: ") != TERMINAL_STATUS_ERROR_OK)
     b72:	81 eb       	ldi	r24, 0xB1	; 177
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	c1 f4       	brne	.+48     	; 0xbae <AppADMIN_getInput+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     b7e:	ce 01       	movw	r24, r28
     b80:	0e 94 85 05 	call	0xb0a	; 0xb0a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	29 f0       	breq	.+10     	; 0xb92 <AppADMIN_getInput+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     b88:	11 f0       	breq	.+4      	; 0xb8e <AppADMIN_getInput+0x22>
     b8a:	86 30       	cpi	r24, 0x06	; 6
     b8c:	91 f4       	brne	.+36     	; 0xbb2 <AppADMIN_getInput+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     b8e:	86 30       	cpi	r24, 0x06	; 6
     b90:	b1 f3       	breq	.-20     	; 0xb7e <AppADMIN_getInput+0x12>
		
		if (pu8_data[1] == '\0')
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	88 23       	and	r24, r24
     b96:	79 f0       	breq	.+30     	; 0xbb6 <AppADMIN_getInput+0x4a>
		break;
		EmptyString(pu8_data);
     b98:	ce 01       	movw	r24, r28
     b9a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
     b9e:	8f eb       	ldi	r24, 0xBF	; 191
     ba0:	92 e0       	ldi	r25, 0x02	; 2
     ba2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     ba6:	81 30       	cpi	r24, 0x01	; 1
     ba8:	21 f3       	breq	.-56     	; 0xb72 <AppADMIN_getInput+0x6>
		return APP_STATUS_ERROR_NOK;
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	05 c0       	rjmp	.+10     	; 0xbb8 <AppADMIN_getInput+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nYour Input: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <AppADMIN_getInput+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <AppADMIN_getInput+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
}
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	08 95       	ret

00000bbe <AppADMIN_getnewMaxAmount>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getnewMaxAmount(uint8_t* pu8_data)
{
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nMax Amount: ") != TERMINAL_STATUS_ERROR_OK)
     bc4:	89 ee       	ldi	r24, 0xE9	; 233
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     bcc:	81 30       	cpi	r24, 0x01	; 1
     bce:	d9 f4       	brne	.+54     	; 0xc06 <AppADMIN_getnewMaxAmount+0x48>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     bd0:	ce 01       	movw	r24, r28
     bd2:	0e 94 85 05 	call	0xb0a	; 0xb0a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	29 f0       	breq	.+10     	; 0xbe4 <AppADMIN_getnewMaxAmount+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     bda:	11 f0       	breq	.+4      	; 0xbe0 <AppADMIN_getnewMaxAmount+0x22>
     bdc:	86 30       	cpi	r24, 0x06	; 6
     bde:	a9 f4       	brne	.+42     	; 0xc0a <AppADMIN_getnewMaxAmount+0x4c>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     be0:	86 30       	cpi	r24, 0x06	; 6
     be2:	b1 f3       	breq	.-20     	; 0xbd0 <AppADMIN_getnewMaxAmount+0x12>
		
		if ((pu8_data[7] == '\0') && (pu8_data[4] == '.'))
     be4:	8f 81       	ldd	r24, Y+7	; 0x07
     be6:	81 11       	cpse	r24, r1
     be8:	03 c0       	rjmp	.+6      	; 0xbf0 <AppADMIN_getnewMaxAmount+0x32>
     bea:	8c 81       	ldd	r24, Y+4	; 0x04
     bec:	8e 32       	cpi	r24, 0x2E	; 46
     bee:	79 f0       	breq	.+30     	; 0xc0e <AppADMIN_getnewMaxAmount+0x50>
		break;
		EmptyString(pu8_data);
     bf0:	ce 01       	movw	r24, r28
     bf2:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
     bf6:	87 ef       	ldi	r24, 0xF7	; 247
     bf8:	92 e0       	ldi	r25, 0x02	; 2
     bfa:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     bfe:	81 30       	cpi	r24, 0x01	; 1
     c00:	09 f3       	breq	.-62     	; 0xbc4 <AppADMIN_getnewMaxAmount+0x6>
		return APP_STATUS_ERROR_NOK;
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	05 c0       	rjmp	.+10     	; 0xc10 <AppADMIN_getnewMaxAmount+0x52>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nMax Amount: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	03 c0       	rjmp	.+6      	; 0xc10 <AppADMIN_getnewMaxAmount+0x52>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <AppADMIN_getnewMaxAmount+0x52>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     c0e:	81 e0       	ldi	r24, 0x01	; 1
}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <AppADMIN_getCustomerPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerPAN(uint8_t* pu8_data)
{
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nPAN: ") != TERMINAL_STATUS_ERROR_OK)
     c1c:	88 e2       	ldi	r24, 0x28	; 40
     c1e:	93 e0       	ldi	r25, 0x03	; 3
     c20:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     c24:	81 30       	cpi	r24, 0x01	; 1
     c26:	c1 f4       	brne	.+48     	; 0xc58 <AppADMIN_getCustomerPAN+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     c28:	ce 01       	movw	r24, r28
     c2a:	0e 94 85 05 	call	0xb0a	; 0xb0a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     c2e:	81 30       	cpi	r24, 0x01	; 1
     c30:	29 f0       	breq	.+10     	; 0xc3c <AppADMIN_getCustomerPAN+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     c32:	11 f0       	breq	.+4      	; 0xc38 <AppADMIN_getCustomerPAN+0x22>
     c34:	86 30       	cpi	r24, 0x06	; 6
     c36:	91 f4       	brne	.+36     	; 0xc5c <AppADMIN_getCustomerPAN+0x46>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     c38:	86 30       	cpi	r24, 0x06	; 6
     c3a:	b1 f3       	breq	.-20     	; 0xc28 <AppADMIN_getCustomerPAN+0x12>
		
		if (pu8_data[9] == '\0')
     c3c:	89 85       	ldd	r24, Y+9	; 0x09
     c3e:	88 23       	and	r24, r24
     c40:	79 f0       	breq	.+30     	; 0xc60 <AppADMIN_getCustomerPAN+0x4a>
			break;
		EmptyString(pu8_data);
     c42:	ce 01       	movw	r24, r28
     c44:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
     c48:	8f e2       	ldi	r24, 0x2F	; 47
     c4a:	93 e0       	ldi	r25, 0x03	; 3
     c4c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	21 f3       	breq	.-56     	; 0xc1c <AppADMIN_getCustomerPAN+0x6>
			return APP_STATUS_ERROR_NOK;
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	05 c0       	rjmp	.+10     	; 0xc62 <AppADMIN_getCustomerPAN+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nPAN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	03 c0       	rjmp	.+6      	; 0xc62 <AppADMIN_getCustomerPAN+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <AppADMIN_getCustomerPAN+0x4c>
			break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     c60:	81 e0       	ldi	r24, 0x01	; 1
}
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	08 95       	ret

00000c68 <AppADMIN_getCustomerBalance>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Balance by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the balance of the customer.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerBalance(uint8_t* pu8_data)
{
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nBalance: ") != TERMINAL_STATUS_ERROR_OK)
     c6e:	80 e5       	ldi	r24, 0x50	; 80
     c70:	93 e0       	ldi	r25, 0x03	; 3
     c72:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	c1 f4       	brne	.+48     	; 0xcaa <AppADMIN_getCustomerBalance+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     c7a:	ce 01       	movw	r24, r28
     c7c:	0e 94 85 05 	call	0xb0a	; 0xb0a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	29 f0       	breq	.+10     	; 0xc8e <AppADMIN_getCustomerBalance+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     c84:	11 f0       	breq	.+4      	; 0xc8a <AppADMIN_getCustomerBalance+0x22>
     c86:	86 30       	cpi	r24, 0x06	; 6
     c88:	91 f4       	brne	.+36     	; 0xcae <AppADMIN_getCustomerBalance+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     c8a:	86 30       	cpi	r24, 0x06	; 6
     c8c:	b1 f3       	breq	.-20     	; 0xc7a <AppADMIN_getCustomerBalance+0x12>
		
		if (pu8_data[7] == '\0')
     c8e:	8f 81       	ldd	r24, Y+7	; 0x07
     c90:	88 23       	and	r24, r24
     c92:	79 f0       	breq	.+30     	; 0xcb2 <AppADMIN_getCustomerBalance+0x4a>
		break;
		EmptyString(pu8_data);
     c94:	ce 01       	movw	r24, r28
     c96:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Only 7 characters\r") != TERMINAL_STATUS_ERROR_OK)
     c9a:	8b e5       	ldi	r24, 0x5B	; 91
     c9c:	93 e0       	ldi	r25, 0x03	; 3
     c9e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	21 f3       	breq	.-56     	; 0xc6e <AppADMIN_getCustomerBalance+0x6>
		return APP_STATUS_ERROR_NOK;
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <AppADMIN_getCustomerBalance+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nBalance: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <AppADMIN_getCustomerBalance+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <AppADMIN_getCustomerBalance+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Only 7 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <AppADMIN_processNewCustomer>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to process adding a new customer in the data base.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_processNewCustomer(void)
{
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	62 97       	sbiw	r28, 0x12	; 18
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_tempPAN[10]={0};
     cd0:	ce 01       	movw	r24, r28
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	2a e0       	ldi	r18, 0x0A	; 10
     cd6:	dc 01       	movw	r26, r24
     cd8:	1d 92       	st	X+, r1
     cda:	2a 95       	dec	r18
     cdc:	e9 f7       	brne	.-6      	; 0xcd8 <AppADMIN_processNewCustomer+0x1e>
	uint8_t au8_tempBalance[8]={0};
     cde:	fe 01       	movw	r30, r28
     ce0:	3b 96       	adiw	r30, 0x0b	; 11
     ce2:	28 e0       	ldi	r18, 0x08	; 8
     ce4:	df 01       	movw	r26, r30
     ce6:	1d 92       	st	X+, r1
     ce8:	2a 95       	dec	r18
     cea:	e9 f7       	brne	.-6      	; 0xce6 <AppADMIN_processNewCustomer+0x2c>
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     cec:	0e 94 0b 06 	call	0xc16	; 0xc16 <AppADMIN_getCustomerPAN>
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	59 f5       	brne	.+86     	; 0xd4a <AppADMIN_processNewCustomer+0x90>
		return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
     cf4:	6f e0       	ldi	r22, 0x0F	; 15
     cf6:	75 e0       	ldi	r23, 0x05	; 5
     cf8:	ce 01       	movw	r24, r28
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	0e 94 e7 17 	call	0x2fce	; 0x2fce <stringCopy>
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
     d00:	ce 01       	movw	r24, r28
     d02:	0b 96       	adiw	r24, 0x0b	; 11
     d04:	0e 94 34 06 	call	0xc68	; 0xc68 <AppADMIN_getCustomerBalance>
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	09 f5       	brne	.+66     	; 0xd4e <AppADMIN_processNewCustomer+0x94>
		return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
     d0c:	69 e1       	ldi	r22, 0x19	; 25
     d0e:	75 e0       	ldi	r23, 0x05	; 5
     d10:	ce 01       	movw	r24, r28
     d12:	0b 96       	adiw	r24, 0x0b	; 11
     d14:	0e 94 e7 17 	call	0x2fce	; 0x2fce <stringCopy>
	
	if(AppADMIN_saveNewCustomerData() != APP_STATUS_ERROR_OK)
     d18:	0e 94 50 00 	call	0xa0	; 0xa0 <AppADMIN_saveNewCustomerData>
     d1c:	18 2f       	mov	r17, r24
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	c1 f4       	brne	.+48     	; 0xd52 <AppADMIN_processNewCustomer+0x98>
		return APP_STATUS_ERROR_NOK;
	if(gu8_registeredAccNum == 1)
     d22:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <gu8_registeredAccNum>
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	a9 f4       	brne	.+42     	; 0xd54 <AppADMIN_processNewCustomer+0x9a>
	{
		Terminal_Out((uint8_t*)"\nData Saved, Flag Raised\n");
     d2a:	80 e8       	ldi	r24, 0x80	; 128
     d2c:	93 e0       	ldi	r25, 0x03	; 3
     d2e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
		gu8_initData = ATM_DB_FLAG_SET_VAL;
     d32:	8a ea       	ldi	r24, 0xAA	; 170
     d34:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <gu8_initData>
		if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
     d38:	6a ea       	ldi	r22, 0xAA	; 170
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <Eeprom_24_writeByte>
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	39 f0       	breq	.+14     	; 0xd54 <AppADMIN_processNewCustomer+0x9a>
			return APP_STATUS_ERROR_NOK;
     d46:	10 e0       	ldi	r17, 0x00	; 0
     d48:	05 c0       	rjmp	.+10     	; 0xd54 <AppADMIN_processNewCustomer+0x9a>
{
	uint8_t au8_tempPAN[10]={0};
	uint8_t au8_tempBalance[8]={0};
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     d4a:	10 e0       	ldi	r17, 0x00	; 0
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <AppADMIN_processNewCustomer+0x9a>
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     d4e:	10 e0       	ldi	r17, 0x00	; 0
     d50:	01 c0       	rjmp	.+2      	; 0xd54 <AppADMIN_processNewCustomer+0x9a>
	stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
	
	if(AppADMIN_saveNewCustomerData() != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     d52:	10 e0       	ldi	r17, 0x00	; 0
		gu8_initData = ATM_DB_FLAG_SET_VAL;
		if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	}
	return APP_STATUS_ERROR_OK;
}
     d54:	81 2f       	mov	r24, r17
     d56:	62 96       	adiw	r28, 0x12	; 18
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	08 95       	ret

00000d6a <AppADMIN_getAtmPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input ATM PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the atm pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getAtmPIN(uint8_t* pu8_data)
{
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	
	Terminal_enablePasswordMode();
     d70:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <Terminal_enablePasswordMode>
	do
	{
		if(Terminal_Out((uint8_t*)"\nATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
     d74:	8a e9       	ldi	r24, 0x9A	; 154
     d76:	93 e0       	ldi	r25, 0x03	; 3
     d78:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	69 f5       	brne	.+90     	; 0xdda <AppADMIN_getAtmPIN+0x70>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     d80:	ce 01       	movw	r24, r28
     d82:	0e 94 85 05 	call	0xb0a	; 0xb0a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	29 f0       	breq	.+10     	; 0xd94 <AppADMIN_getAtmPIN+0x2a>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     d8a:	11 f0       	breq	.+4      	; 0xd90 <AppADMIN_getAtmPIN+0x26>
     d8c:	86 30       	cpi	r24, 0x06	; 6
     d8e:	39 f5       	brne	.+78     	; 0xdde <AppADMIN_getAtmPIN+0x74>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     d90:	86 30       	cpi	r24, 0x06	; 6
     d92:	b1 f3       	breq	.-20     	; 0xd80 <AppADMIN_getAtmPIN+0x16>
		
		if(stringCompare((uint8_t*)ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
     d94:	be 01       	movw	r22, r28
     d96:	8c ed       	ldi	r24, 0xDC	; 220
     d98:	94 e0       	ldi	r25, 0x04	; 4
     d9a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <stringCompare>
     d9e:	81 30       	cpi	r24, 0x01	; 1
     da0:	39 f0       	breq	.+14     	; 0xdb0 <AppADMIN_getAtmPIN+0x46>
		{
			if(Terminal_Out((uint8_t*)"\nIncorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
     da2:	85 ea       	ldi	r24, 0xA5	; 165
     da4:	93 e0       	ldi	r25, 0x03	; 3
     da6:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	41 f0       	breq	.+16     	; 0xdbe <AppADMIN_getAtmPIN+0x54>
     dae:	19 c0       	rjmp	.+50     	; 0xde2 <AppADMIN_getAtmPIN+0x78>
			return APP_STATUS_ERROR_NOK;
		}else
		{
			if(Terminal_Out((uint8_t*)"\nLoading...\r") != TERMINAL_STATUS_ERROR_OK)
     db0:	85 eb       	ldi	r24, 0xB5	; 181
     db2:	93 e0       	ldi	r25, 0x03	; 3
     db4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	a9 f4       	brne	.+42     	; 0xde6 <AppADMIN_getAtmPIN+0x7c>
     dbc:	0a c0       	rjmp	.+20     	; 0xdd2 <AppADMIN_getAtmPIN+0x68>
			return APP_STATUS_ERROR_NOK;
			break;
		}
		EmptyString(pu8_data);
     dbe:	ce 01       	movw	r24, r28
     dc0:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
     dc4:	82 ec       	ldi	r24, 0xC2	; 194
     dc6:	93 e0       	ldi	r25, 0x03	; 3
     dc8:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	91 f2       	breq	.-92     	; 0xd74 <AppADMIN_getAtmPIN+0xa>
     dd0:	0c c0       	rjmp	.+24     	; 0xdea <AppADMIN_getAtmPIN+0x80>
		return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
     dd2:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <Terminal_disablePasswordMode>
	return APP_STATUS_ERROR_OK;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	09 c0       	rjmp	.+18     	; 0xdec <AppADMIN_getAtmPIN+0x82>
	
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"\nATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	07 c0       	rjmp	.+14     	; 0xdec <AppADMIN_getAtmPIN+0x82>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	05 c0       	rjmp	.+10     	; 0xdec <AppADMIN_getAtmPIN+0x82>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringCompare((uint8_t*)ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
		{
			if(Terminal_Out((uint8_t*)"\nIncorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	03 c0       	rjmp	.+6      	; 0xdec <AppADMIN_getAtmPIN+0x82>
		}else
		{
			if(Terminal_Out((uint8_t*)"\nLoading...\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	01 c0       	rjmp	.+2      	; 0xdec <AppADMIN_getAtmPIN+0x82>
			break;
		}
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     dea:	80 e0       	ldi	r24, 0x00	; 0
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_ERROR_OK;
}
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	08 95       	ret

00000df2 <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	69 97       	sbiw	r28, 0x19	; 25
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
     e06:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enuCurrentAppStatus>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	09 f0       	breq	.+2      	; 0xe10 <App_update+0x1e>
     e0e:	0e c1       	rjmp	.+540    	; 0x102c <App_update+0x23a>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
     e10:	fe 01       	movw	r30, r28
     e12:	31 96       	adiw	r30, 0x01	; 1
     e14:	8a e0       	ldi	r24, 0x0A	; 10
     e16:	df 01       	movw	r26, r30
     e18:	1d 92       	st	X+, r1
     e1a:	8a 95       	dec	r24
     e1c:	e9 f7       	brne	.-6      	; 0xe18 <App_update+0x26>
	static uint8_t u8_passFlag = 0;
	if(gu8_ATMMode == ATM_MODE_ADMIN)
     e1e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     e22:	81 11       	cpse	r24, r1
     e24:	82 c0       	rjmp	.+260    	; 0xf2a <App_update+0x138>
	{ /**************** PROGRAMMING MODE ****************/
			uint8_t au8_Input[2]={0};
     e26:	19 8e       	std	Y+25, r1	; 0x19
     e28:	18 8e       	std	Y+24, r1	; 0x18
			uint8_t au8_tempPinNum[5]={0};
     e2a:	72 96       	adiw	r30, 0x12	; 18
     e2c:	85 e0       	ldi	r24, 0x05	; 5
     e2e:	df 01       	movw	r26, r30
     e30:	1d 92       	st	X+, r1
     e32:	8a 95       	dec	r24
     e34:	e9 f7       	brne	.-6      	; 0xe30 <App_update+0x3e>
			uint8_t au8_tempMaxAmount[8]={0};
     e36:	38 97       	sbiw	r30, 0x08	; 8
     e38:	88 e0       	ldi	r24, 0x08	; 8
     e3a:	df 01       	movw	r26, r30
     e3c:	1d 92       	st	X+, r1
     e3e:	8a 95       	dec	r24
     e40:	e9 f7       	brne	.-6      	; 0xe3c <App_update+0x4a>
			
			if(u8_passFlag == 0)
     e42:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <__data_end>
     e46:	81 11       	cpse	r24, r1
     e48:	09 c0       	rjmp	.+18     	; 0xe5c <App_update+0x6a>
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
     e4a:	ce 01       	movw	r24, r28
     e4c:	43 96       	adiw	r24, 0x13	; 19
     e4e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <AppADMIN_getAtmPIN>
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	09 f0       	breq	.+2      	; 0xe58 <App_update+0x66>
     e56:	5d c0       	rjmp	.+186    	; 0xf12 <App_update+0x120>
					return APP_STATUS_ERROR_NOK;
				u8_passFlag = 1;
     e58:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <__data_end>
			}
			
			if(Terminal_Out((uint8_t*)"\n1.Add New Customer\n\r2.Update Existing Customer\n\r3.Update Max Amount\n\r4.Exit\r") != TERMINAL_STATUS_ERROR_OK)
     e5c:	83 ee       	ldi	r24, 0xE3	; 227
     e5e:	93 e0       	ldi	r25, 0x03	; 3
     e60:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	09 f0       	breq	.+2      	; 0xe6a <App_update+0x78>
     e68:	56 c0       	rjmp	.+172    	; 0xf16 <App_update+0x124>
				return APP_STATUS_ERROR_NOK;
				
			AppADMIN_getInput(au8_Input);
     e6a:	ce 01       	movw	r24, r28
     e6c:	48 96       	adiw	r24, 0x18	; 24
     e6e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <AppADMIN_getInput>
			if(au8_Input[0] == '1')//--------- New Customer OPTION -----------//
     e72:	88 8d       	ldd	r24, Y+24	; 0x18
     e74:	81 33       	cpi	r24, 0x31	; 49
     e76:	39 f4       	brne	.+14     	; 0xe86 <App_update+0x94>
			{
				AppADMIN_processNewCustomer();
     e78:	0e 94 5d 06 	call	0xcba	; 0xcba <AppADMIN_processNewCustomer>
				EmptyString(au8_Input);
     e7c:	ce 01       	movw	r24, r28
     e7e:	48 96       	adiw	r24, 0x18	; 24
     e80:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <EmptyString>
     e84:	c7 c0       	rjmp	.+398    	; 0x1014 <App_update+0x222>

// 			}else if(au8_Input[0] == '2')//--------- Update Existing Customer OPTION -----------//
// 			{
// 				AppADMIN_processExistingCustomer();
// 				EmptyString(au8_Input);
			}else if(au8_Input[0] == '2')//--------- Max Amount OPTION -----------//
     e86:	82 33       	cpi	r24, 0x32	; 50
     e88:	d1 f4       	brne	.+52     	; 0xebe <App_update+0xcc>
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
     e8a:	ce 01       	movw	r24, r28
     e8c:	0b 96       	adiw	r24, 0x0b	; 11
     e8e:	0e 94 df 05 	call	0xbbe	; 0xbbe <AppADMIN_getnewMaxAmount>
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
     e92:	ce 01       	movw	r24, r28
     e94:	0b 96       	adiw	r24, 0x0b	; 11
     e96:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <stringLength>
     e9a:	48 2f       	mov	r20, r24
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	be 01       	movw	r22, r28
     ea0:	65 5f       	subi	r22, 0xF5	; 245
     ea2:	7f 4f       	sbci	r23, 0xFF	; 255
     ea4:	83 e0       	ldi	r24, 0x03	; 3
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <Eeprom_24_writePacket>
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	a9 f5       	brne	.+106    	; 0xf1a <App_update+0x128>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempMaxAmount, gau8_maxAmount);	
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	75 e0       	ldi	r23, 0x05	; 5
     eb4:	ce 01       	movw	r24, r28
     eb6:	0b 96       	adiw	r24, 0x0b	; 11
     eb8:	0e 94 e7 17 	call	0x2fce	; 0x2fce <stringCopy>
     ebc:	ab c0       	rjmp	.+342    	; 0x1014 <App_update+0x222>
			}else if(au8_Input[0] == '3')//--------- EXIT OPTION -----------//
     ebe:	83 33       	cpi	r24, 0x33	; 51
     ec0:	09 f5       	brne	.+66     	; 0xf04 <App_update+0x112>
			{
				if(gu8_initData == ATM_DB_FLAG_SET_VAL)
     ec2:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <gu8_initData>
     ec6:	8a 3a       	cpi	r24, 0xAA	; 170
     ec8:	a9 f4       	brne	.+42     	; 0xef4 <App_update+0x102>
				{
					u8_passFlag = 0;
     eca:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <__data_end>
					gu8_ATMMode = ATM_MODE_USER;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					Lcd_clear();
     ed4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_clear>
					if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     ed8:	85 ea       	ldi	r24, 0xA5	; 165
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	e9 f4       	brne	.+58     	; 0xf1e <App_update+0x12c>
						return APP_STATUS_ERROR_NOK;
					
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     ee4:	65 e8       	ldi	r22, 0x85	; 133
     ee6:	71 e0       	ldi	r23, 0x01	; 1
     ee8:	84 e9       	ldi	r24, 0x94	; 148
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
					
					return APP_STATUS_ERROR_OK;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	9d c0       	rjmp	.+314    	; 0x102e <App_update+0x23c>
				}else
				{
					if(Terminal_Out((uint8_t*)"\nData Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
     ef4:	81 e3       	ldi	r24, 0x31	; 49
     ef6:	94 e0       	ldi	r25, 0x04	; 4
     ef8:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	89 f0       	breq	.+34     	; 0xf22 <App_update+0x130>
						return APP_STATUS_ERROR_NOK;
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	95 c0       	rjmp	.+298    	; 0x102e <App_update+0x23c>
					return APP_STATUS_ERROR_OK;
				}
			}else
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Input!") != TERMINAL_STATUS_ERROR_OK)
     f04:	8f e6       	ldi	r24, 0x6F	; 111
     f06:	94 e0       	ldi	r25, 0x04	; 4
     f08:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	59 f4       	brne	.+22     	; 0xf26 <App_update+0x134>
     f10:	81 c0       	rjmp	.+258    	; 0x1014 <App_update+0x222>
			
			if(u8_passFlag == 0)
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	8c c0       	rjmp	.+280    	; 0x102e <App_update+0x23c>
				u8_passFlag = 1;
			}
			
			if(Terminal_Out((uint8_t*)"\n1.Add New Customer\n\r2.Update Existing Customer\n\r3.Update Max Amount\n\r4.Exit\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	8a c0       	rjmp	.+276    	; 0x102e <App_update+0x23c>
// 				EmptyString(au8_Input);
			}else if(au8_Input[0] == '2')//--------- Max Amount OPTION -----------//
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	88 c0       	rjmp	.+272    	; 0x102e <App_update+0x23c>
				{
					u8_passFlag = 0;
					gu8_ATMMode = ATM_MODE_USER;
					Lcd_clear();
					if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	86 c0       	rjmp	.+268    	; 0x102e <App_update+0x23c>
					return APP_STATUS_ERROR_OK;
				}else
				{
					if(Terminal_Out((uint8_t*)"\nData Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					return APP_STATUS_ERROR_OK;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	84 c0       	rjmp	.+264    	; 0x102e <App_update+0x23c>
				}
			}else
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Input!") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	82 c0       	rjmp	.+260    	; 0x102e <App_update+0x23c>
	{							/************* User Mode **************/
		/********************************************************************************************/
		/************************************ ADMIN ENTERED ****************************************/
		/********************************************************************************************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
     f2a:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <gu8_ADMIN_Request>
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	31 f4       	brne	.+12     	; 0xf3e <App_update+0x14c>
     f32:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <gu8_USER_Mode_State>
     f36:	81 11       	cpse	r24, r1
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <App_update+0x14c>
			{
				gu8_ATMMode = ATM_MODE_ADMIN;
     f3a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
     f3e:	ce 01       	movw	r24, r28
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	0e 94 85 05 	call	0xb0a	; 0xb0a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	31 f5       	brne	.+76     	; 0xf96 <App_update+0x1a4>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
     f4a:	61 ee       	ldi	r22, 0xE1	; 225
     f4c:	74 e0       	ldi	r23, 0x04	; 4
     f4e:	ce 01       	movw	r24, r28
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <stringCompare>
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	11 f5       	brne	.+68     	; 0xf9e <App_update+0x1ac>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
     f5a:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <gu8_USER_Mode_State>
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	51 f4       	brne	.+20     	; 0xf76 <App_update+0x184>
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
     f62:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <gu8_ADMIN_Request>
						if(Terminal_Out((uint8_t*)"\nATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
     f66:	8f e7       	ldi	r24, 0x7F	; 127
     f68:	94 e0       	ldi	r25, 0x04	; 4
     f6a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	09 f0       	breq	.+2      	; 0xf74 <App_update+0x182>
     f72:	4a c0       	rjmp	.+148    	; 0x1008 <App_update+0x216>
     f74:	14 c0       	rjmp	.+40     	; 0xf9e <App_update+0x1ac>
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The ATM is not used by User */
					{
						gu8_ATMMode = ATM_MODE_ADMIN;
     f76:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
						
						Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
     f7a:	60 e7       	ldi	r22, 0x70	; 112
     f7c:	72 e0       	ldi	r23, 0x02	; 2
     f7e:	81 e8       	ldi	r24, 0x81	; 129
     f80:	92 e0       	ldi	r25, 0x02	; 2
     f82:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
						
						if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     f86:	82 e9       	ldi	r24, 0x92	; 146
     f88:	92 e0       	ldi	r25, 0x02	; 2
     f8a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Terminal_Out>
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	e9 f1       	breq	.+122    	; 0x100c <App_update+0x21a>
							return APP_STATUS_ERROR_NOK;
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	4c c0       	rjmp	.+152    	; 0x102e <App_update+0x23c>
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	11 f0       	breq	.+4      	; 0xf9e <App_update+0x1ac>
     f9a:	86 30       	cpi	r24, 0x06	; 6
     f9c:	c9 f5       	brne	.+114    	; 0x1010 <App_update+0x21e>
				return APP_STATUS_ERROR_NOK;
			/****************************************************************/
			/********************** Getting Input from User ************************/
			uint8_t au8_data=0;
     f9e:	1b 8a       	std	Y+19, r1	; 0x13
			enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&au8_data);
     fa0:	ce 01       	movw	r24, r28
     fa2:	43 96       	adiw	r24, 0x13	; 19
     fa4:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Keypad_readKey>
			if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
     fa8:	86 30       	cpi	r24, 0x06	; 6
     faa:	b1 f4       	brne	.+44     	; 0xfd8 <App_update+0x1e6>
			{
			/************************************ KEYPAD PRESSED ****************************************/
			/********* Insert Card Chosen ********/
				if(au8_data == '1') 
     fac:	8b 89       	ldd	r24, Y+19	; 0x13
     fae:	81 33       	cpi	r24, 0x31	; 49
     fb0:	19 f4       	brne	.+6      	; 0xfb8 <App_update+0x1c6>
				{
					AppUSER_insertCard();
     fb2:	0e 94 04 04 	call	0x808	; 0x808 <AppUSER_insertCard>
     fb6:	2e c0       	rjmp	.+92     	; 0x1014 <App_update+0x222>
			/******* Display Temp Chosen *******/
				}else if(au8_data == '2')
     fb8:	82 33       	cpi	r24, 0x32	; 50
     fba:	19 f4       	brne	.+6      	; 0xfc2 <App_update+0x1d0>
				{
					AppUSER_displayTemp();
     fbc:	0e 94 90 00 	call	0x120	; 0x120 <AppUSER_displayTemp>
     fc0:	29 c0       	rjmp	.+82     	; 0x1014 <App_update+0x222>
				}else if(au8_data == '-') 
     fc2:	8d 32       	cpi	r24, 0x2D	; 45
     fc4:	39 f5       	brne	.+78     	; 0x1014 <App_update+0x222>
				{
					gu8_displayFlag = 0;
     fc6:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <gu8_displayFlag>
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     fca:	65 e8       	ldi	r22, 0x85	; 133
     fcc:	71 e0       	ldi	r23, 0x01	; 1
     fce:	84 e9       	ldi	r24, 0x94	; 148
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Lcd_printLCD>
     fd6:	1e c0       	rjmp	.+60     	; 0x1014 <App_update+0x222>
				}
			}else if(gu8_displayFlag == DISPLAY_TEMP) /* If in temperature screen >> Update the temp value */
     fd8:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <gu8_displayFlag>
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	d1 f4       	brne	.+52     	; 0x1014 <App_update+0x222>
			{
				uint8_t u8_currentTemp=0;
     fe0:	1b 86       	std	Y+11, r1	; 0x0b
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
     fe2:	ce 01       	movw	r24, r28
     fe4:	0b 96       	adiw	r24, 0x0b	; 11
     fe6:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LM35_readTemp>
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	99 f4       	brne	.+38     	; 0x1014 <App_update+0x222>
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	0e 94 96 0c 	call	0x192c	; 0x192c <Lcd_setCursor>
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	31 f4       	brne	.+12     	; 0x1004 <App_update+0x212>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
     ff8:	8b 85       	ldd	r24, Y+11	; 0x0b
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <Lcd_printDecimal>
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	41 f0       	breq	.+16     	; 0x1014 <App_update+0x222>
			{
				uint8_t u8_currentTemp=0;
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	13 c0       	rjmp	.+38     	; 0x102e <App_update+0x23c>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"\nATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	11 c0       	rjmp	.+34     	; 0x102e <App_update+0x23c>
						
						Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
						
						if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
						return APP_STATUS_ERROR_OK;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	0f c0       	rjmp	.+30     	; 0x102e <App_update+0x23c>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	0d c0       	rjmp	.+26     	; 0x102e <App_update+0x23c>
					return APP_STATUS_ERROR_NOK;
				}
			}
	/****************************************************************/
	}
	Delay_ms(100);
    1014:	24 e6       	ldi	r18, 0x64	; 100
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
	return APP_STATUS_ERROR_OK;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	01 c0       	rjmp	.+2      	; 0x102e <App_update+0x23c>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
    102c:	85 e0       	ldi	r24, 0x05	; 5
			}
	/****************************************************************/
	}
	Delay_ms(100);
	return APP_STATUS_ERROR_OK;
}
    102e:	69 96       	adiw	r28, 0x19	; 25
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret

00001040 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
    1040:	0e 94 c2 04 	call	0x984	; 0x984 <App_init>
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	39 f4       	brne	.+14     	; 0x1056 <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
    1048:	8f b7       	in	r24, 0x3f	; 63
    104a:	80 68       	ori	r24, 0x80	; 128
    104c:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
    104e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <App_update>
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	e1 f3       	breq	.-8      	; 0x104e <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
	}
}
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	08 95       	ret

0000105a <Button_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button module is already initialized */
	if (genu_BttnModuleState == BTTN_STATUS_INIT)
    105a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_BttnModuleState>
    105e:	85 30       	cpi	r24, 0x05	; 5
    1060:	71 f0       	breq	.+28     	; 0x107e <Button_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    1062:	85 e8       	ldi	r24, 0x85	; 133
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 6e 10 	call	0x20dc	; 0x20dc <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	11 f0       	breq	.+4      	; 0x1072 <Button_init+0x18>
    106e:	87 30       	cpi	r24, 0x07	; 7
    1070:	29 f4       	brne	.+10     	; 0x107c <Button_init+0x22>
		return BTTN_STATUS_ERROR_NOK;
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
    1072:	85 e0       	ldi	r24, 0x05	; 5
    1074:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genu_BttnModuleState>
	return BTTN_STATUS_ERROR_OK;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return BTTN_STATUS_ERROR_NOK;
    107c:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
	return BTTN_STATUS_ERROR_OK;
}
    107e:	08 95       	ret

00001080 <Button_getState>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
    1080:	82 30       	cpi	r24, 0x02	; 2
    1082:	60 f4       	brcc	.+24     	; 0x109c <Button_getState+0x1c>
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
    1084:	61 15       	cp	r22, r1
    1086:	71 05       	cpc	r23, r1
    1088:	59 f0       	breq	.+22     	; 0x10a0 <Button_getState+0x20>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
    108a:	e8 2f       	mov	r30, r24
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	e3 5c       	subi	r30, 0xC3	; 195
    1090:	fa 4f       	sbci	r31, 0xFA	; 250
    1092:	80 81       	ld	r24, Z
    1094:	fb 01       	movw	r30, r22
    1096:	80 83       	st	Z, r24
	return BTTN_STATUS_ERROR_OK;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
    109c:	82 e0       	ldi	r24, 0x02	; 2
    109e:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
	{
		return BTTN_STATUS_ERROR_NULL;
    10a0:	83 e0       	ldi	r24, 0x03	; 3
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
	return BTTN_STATUS_ERROR_OK;
}
    10a2:	08 95       	ret

000010a4 <Button_updateState>:
* Parameters (out): None
* Return value: enuBttn_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to update the state of the button (Pressed or Released) by reading the Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuBttn_Status_t Button_updateState(uint8_t u8_bttnID)
{
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	1f 92       	push	r1
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
    10b2:	82 30       	cpi	r24, 0x02	; 2
    10b4:	08 f0       	brcs	.+2      	; 0x10b8 <Button_updateState+0x14>
    10b6:	58 c0       	rjmp	.+176    	; 0x1168 <Button_updateState+0xc4>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
    10b8:	19 82       	std	Y+1, r1	; 0x01
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
    10ba:	08 2f       	mov	r16, r24
    10bc:	10 e0       	ldi	r17, 0x00	; 0
    10be:	f8 01       	movw	r30, r16
    10c0:	ed 59       	subi	r30, 0x9D	; 157
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	be 01       	movw	r22, r28
    10c6:	6f 5f       	subi	r22, 0xFF	; 255
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	80 81       	ld	r24, Z
    10cc:	0e 94 4d 12 	call	0x249a	; 0x249a <Dio_readPin>
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <Button_updateState+0x32>
    10d4:	4b c0       	rjmp	.+150    	; 0x116c <Button_updateState+0xc8>
		return BTTN_STATUS_ERROR_NOK;
	if(u8_valueTemp == PIN_HIGH)
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	09 f5       	brne	.+66     	; 0x111e <Button_updateState+0x7a>
    10dc:	04 c0       	rjmp	.+8      	; 0x10e6 <Button_updateState+0x42>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    10de:	01 96       	adiw	r24, 0x01	; 1
    10e0:	a1 1d       	adc	r26, r1
    10e2:	b1 1d       	adc	r27, r1
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <Button_updateState+0x48>
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	dc 01       	movw	r26, r24
    10ec:	88 3b       	cpi	r24, 0xB8	; 184
    10ee:	2b e0       	ldi	r18, 0x0B	; 11
    10f0:	92 07       	cpc	r25, r18
    10f2:	a1 05       	cpc	r26, r1
    10f4:	b1 05       	cpc	r27, r1
    10f6:	98 f3       	brcs	.-26     	; 0x10de <Button_updateState+0x3a>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    10f8:	be 01       	movw	r22, r28
    10fa:	6f 5f       	subi	r22, 0xFF	; 255
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255
    10fe:	f8 01       	movw	r30, r16
    1100:	ed 59       	subi	r30, 0x9D	; 157
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	80 81       	ld	r24, Z
    1106:	0e 94 4d 12 	call	0x249a	; 0x249a <Dio_readPin>
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	89 f5       	brne	.+98     	; 0x1170 <Button_updateState+0xcc>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_HIGH)
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	81 f5       	brne	.+96     	; 0x1174 <Button_updateState+0xd0>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
    1114:	f8 01       	movw	r30, r16
    1116:	e3 5c       	subi	r30, 0xC3	; 195
    1118:	fa 4f       	sbci	r31, 0xFA	; 250
    111a:	80 83       	st	Z, r24
    111c:	30 c0       	rjmp	.+96     	; 0x117e <Button_updateState+0xda>
	}else if (u8_valueTemp == PIN_LOW)
    111e:	88 23       	and	r24, r24
    1120:	31 f0       	breq	.+12     	; 0x112e <Button_updateState+0x8a>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	2c c0       	rjmp	.+88     	; 0x117e <Button_updateState+0xda>
		if(u8_valueTemp == PIN_HIGH)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
	}else if (u8_valueTemp == PIN_LOW)
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	a1 1d       	adc	r26, r1
    112a:	b1 1d       	adc	r27, r1
    112c:	03 c0       	rjmp	.+6      	; 0x1134 <Button_updateState+0x90>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	dc 01       	movw	r26, r24
    1134:	88 3b       	cpi	r24, 0xB8	; 184
    1136:	2b e0       	ldi	r18, 0x0B	; 11
    1138:	92 07       	cpc	r25, r18
    113a:	a1 05       	cpc	r26, r1
    113c:	b1 05       	cpc	r27, r1
    113e:	98 f3       	brcs	.-26     	; 0x1126 <Button_updateState+0x82>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    1140:	be 01       	movw	r22, r28
    1142:	6f 5f       	subi	r22, 0xFF	; 255
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	f8 01       	movw	r30, r16
    1148:	ed 59       	subi	r30, 0x9D	; 157
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	80 81       	ld	r24, Z
    114e:	0e 94 4d 12 	call	0x249a	; 0x249a <Dio_readPin>
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	89 f4       	brne	.+34     	; 0x1178 <Button_updateState+0xd4>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	81 11       	cpse	r24, r1
    115a:	10 c0       	rjmp	.+32     	; 0x117c <Button_updateState+0xd8>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
    115c:	f8 01       	movw	r30, r16
    115e:	e3 5c       	subi	r30, 0xC3	; 195
    1160:	fa 4f       	sbci	r31, 0xFA	; 250
    1162:	10 82       	st	Z, r1
	}
	return BTTN_STATUS_ERROR_OK;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	0b c0       	rjmp	.+22     	; 0x117e <Button_updateState+0xda>
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
		return BTTN_STATUS_ERROR_ID_INVALID;
    1168:	82 e0       	ldi	r24, 0x02	; 2
    116a:	09 c0       	rjmp	.+18     	; 0x117e <Button_updateState+0xda>
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
		return BTTN_STATUS_ERROR_NOK;
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	07 c0       	rjmp	.+14     	; 0x117e <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	05 c0       	rjmp	.+10     	; 0x117e <Button_updateState+0xda>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	03 c0       	rjmp	.+6      	; 0x117e <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	01 c0       	rjmp	.+2      	; 0x117e <Button_updateState+0xda>
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    117c:	81 e0       	ldi	r24, 0x01	; 1
}
    117e:	0f 90       	pop	r0
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	08 95       	ret

0000118a <EEPROM_getAddresses>:
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
#if EEPROM_24_MODEL	== AT24C16B
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
    118a:	9a 01       	movw	r18, r20
    118c:	22 27       	eor	r18, r18
    118e:	37 70       	andi	r19, 0x07	; 7
    1190:	22 0f       	add	r18, r18
    1192:	23 2f       	mov	r18, r19
    1194:	22 1f       	adc	r18, r18
    1196:	33 0b       	sbc	r19, r19
    1198:	31 95       	neg	r19
    119a:	20 65       	ori	r18, 0x50	; 80
    119c:	fc 01       	movw	r30, r24
    119e:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
    11a0:	fb 01       	movw	r30, r22
    11a2:	40 83       	st	Z, r20
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS;
	pu8_wordAddress[0] = (uint8_t)(u16_location >> 8);
	pu8_wordAddress[1] = (uint8_t)u16_location;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	08 95       	ret

000011a8 <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
    11a8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    11ac:	83 30       	cpi	r24, 0x03	; 3
    11ae:	51 f0       	breq	.+20     	; 0x11c4 <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
    11b0:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
    11b4:	85 30       	cpi	r24, 0x05	; 5
    11b6:	29 f0       	breq	.+10     	; 0x11c2 <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
    11c2:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
    11c4:	08 95       	ret

000011c6 <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <Eeprom_24_writeByte+0x8>
    11ce:	1f 92       	push	r1
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	ac 01       	movw	r20, r24
    11d6:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    11d8:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    11dc:	93 30       	cpi	r25, 0x03	; 3
    11de:	11 f5       	brne	.+68     	; 0x1224 <Eeprom_24_writeByte+0x5e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    11e0:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    11e2:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    11e4:	be 01       	movw	r22, r28
    11e6:	6e 5f       	subi	r22, 0xFE	; 254
    11e8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ea:	ce 01       	movw	r24, r28
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	0e 94 c5 08 	call	0x118a	; 0x118a <EEPROM_getAddresses>
    11f2:	18 2f       	mov	r17, r24
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	c1 f4       	brne	.+48     	; 0x1228 <Eeprom_24_writeByte+0x62>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    11f8:	21 e0       	ldi	r18, 0x01	; 1
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	ae 01       	movw	r20, r28
    11fe:	4d 5f       	subi	r20, 0xFD	; 253
    1200:	5f 4f       	sbci	r21, 0xFF	; 255
    1202:	6a 81       	ldd	r22, Y+2	; 0x02
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <I2C_MasterSendToLocation>
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	79 f4       	brne	.+30     	; 0x122c <Eeprom_24_writeByte+0x66>
 
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
    120e:	2f e0       	ldi	r18, 0x0F	; 15
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    1222:	05 c0       	rjmp	.+10     	; 0x122e <Eeprom_24_writeByte+0x68>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1224:	12 e0       	ldi	r17, 0x02	; 2
    1226:	03 c0       	rjmp	.+6      	; 0x122e <Eeprom_24_writeByte+0x68>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1228:	10 e0       	ldi	r17, 0x00	; 0
    122a:	01 c0       	rjmp	.+2      	; 0x122e <Eeprom_24_writeByte+0x68>
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    122c:	10 e0       	ldi	r17, 0x00	; 0
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
	return EEPROM_24_STATUS_ERROR_OK;
}
    122e:	81 2f       	mov	r24, r17
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	08 95       	ret

0000123e <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
    123e:	ef 92       	push	r14
    1240:	ff 92       	push	r15
    1242:	1f 93       	push	r17
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	00 d0       	rcall	.+0      	; 0x124a <Eeprom_24_readByte+0xc>
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1250:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    1254:	93 30       	cpi	r25, 0x03	; 3
    1256:	21 f5       	brne	.+72     	; 0x12a0 <Eeprom_24_readByte+0x62>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1258:	61 15       	cp	r22, r1
    125a:	71 05       	cpc	r23, r1
    125c:	19 f1       	breq	.+70     	; 0x12a4 <Eeprom_24_readByte+0x66>
    125e:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    1260:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    1262:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    1264:	be 01       	movw	r22, r28
    1266:	6e 5f       	subi	r22, 0xFE	; 254
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
    126a:	ce 01       	movw	r24, r28
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	0e 94 c5 08 	call	0x118a	; 0x118a <EEPROM_getAddresses>
    1272:	18 2f       	mov	r17, r24
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	c1 f4       	brne	.+48     	; 0x12a8 <Eeprom_24_readByte+0x6a>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    1278:	21 e0       	ldi	r18, 0x01	; 1
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	a7 01       	movw	r20, r14
    127e:	6a 81       	ldd	r22, Y+2	; 0x02
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	0e 94 03 17 	call	0x2e06	; 0x2e06 <I2C_MasterReceiveFromLocation>
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	89 f4       	brne	.+34     	; 0x12ac <Eeprom_24_readByte+0x6e>

	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
	
#endif
	Delay_ms(5);
    128a:	25 e0       	ldi	r18, 0x05	; 5
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    129e:	07 c0       	rjmp	.+14     	; 0x12ae <Eeprom_24_readByte+0x70>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    12a0:	12 e0       	ldi	r17, 0x02	; 2
    12a2:	05 c0       	rjmp	.+10     	; 0x12ae <Eeprom_24_readByte+0x70>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    12a4:	14 e0       	ldi	r17, 0x04	; 4
    12a6:	03 c0       	rjmp	.+6      	; 0x12ae <Eeprom_24_readByte+0x70>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    12a8:	10 e0       	ldi	r17, 0x00	; 0
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <Eeprom_24_readByte+0x70>
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    12ac:	10 e0       	ldi	r17, 0x00	; 0
		return EEPROM_24_STATUS_ERROR_NOK;
	
#endif
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
    12ae:	81 2f       	mov	r24, r17
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	08 95       	ret

000012c0 <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <Eeprom_24_writePage+0xc>
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    12d0:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    12d4:	93 30       	cpi	r25, 0x03	; 3
    12d6:	f9 f4       	brne	.+62     	; 0x1316 <Eeprom_24_writePage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    12d8:	61 15       	cp	r22, r1
    12da:	71 05       	cpc	r23, r1
    12dc:	f1 f0       	breq	.+60     	; 0x131a <Eeprom_24_writePage+0x5a>
    12de:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
    12e0:	90 e1       	ldi	r25, 0x10	; 16
    12e2:	89 9f       	mul	r24, r25
    12e4:	a0 01       	movw	r20, r0
    12e6:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    12e8:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
    12ea:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    12ec:	be 01       	movw	r22, r28
    12ee:	6e 5f       	subi	r22, 0xFE	; 254
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	ce 01       	movw	r24, r28
    12f4:	01 96       	adiw	r24, 0x01	; 1
    12f6:	0e 94 c5 08 	call	0x118a	; 0x118a <EEPROM_getAddresses>
    12fa:	18 2f       	mov	r17, r24
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	79 f4       	brne	.+30     	; 0x131e <Eeprom_24_writePage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    1300:	20 e1       	ldi	r18, 0x10	; 16
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	a7 01       	movw	r20, r14
    1306:	6a 81       	ldd	r22, Y+2	; 0x02
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <I2C_MasterSendToLocation>
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	39 f0       	breq	.+14     	; 0x1320 <Eeprom_24_writePage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    1312:	10 e0       	ldi	r17, 0x00	; 0
    1314:	05 c0       	rjmp	.+10     	; 0x1320 <Eeprom_24_writePage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1316:	12 e0       	ldi	r17, 0x02	; 2
    1318:	03 c0       	rjmp	.+6      	; 0x1320 <Eeprom_24_writePage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    131a:	14 e0       	ldi	r17, 0x04	; 4
    131c:	01 c0       	rjmp	.+2      	; 0x1320 <Eeprom_24_writePage+0x60>
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    131e:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    1320:	81 2f       	mov	r24, r17
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	ff 90       	pop	r15
    132e:	ef 90       	pop	r14
    1330:	08 95       	ret

00001332 <Eeprom_24_readPage>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory page.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read data inside a specific page in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPage(uint8_t u8_page, uint8_t *pu8_data)
{
    1332:	ef 92       	push	r14
    1334:	ff 92       	push	r15
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	00 d0       	rcall	.+0      	; 0x133e <Eeprom_24_readPage+0xc>
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1342:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    1346:	93 30       	cpi	r25, 0x03	; 3
    1348:	f9 f4       	brne	.+62     	; 0x1388 <Eeprom_24_readPage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    134a:	61 15       	cp	r22, r1
    134c:	71 05       	cpc	r23, r1
    134e:	f1 f0       	breq	.+60     	; 0x138c <Eeprom_24_readPage+0x5a>
    1350:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
    1352:	90 e1       	ldi	r25, 0x10	; 16
    1354:	89 9f       	mul	r24, r25
    1356:	a0 01       	movw	r20, r0
    1358:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    135a:	19 82       	std	Y+1, r1	; 0x01

#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
    135c:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    135e:	be 01       	movw	r22, r28
    1360:	6e 5f       	subi	r22, 0xFE	; 254
    1362:	7f 4f       	sbci	r23, 0xFF	; 255
    1364:	ce 01       	movw	r24, r28
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	0e 94 c5 08 	call	0x118a	; 0x118a <EEPROM_getAddresses>
    136c:	18 2f       	mov	r17, r24
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	79 f4       	brne	.+30     	; 0x1390 <Eeprom_24_readPage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    1372:	20 e1       	ldi	r18, 0x10	; 16
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	a7 01       	movw	r20, r14
    1378:	6a 81       	ldd	r22, Y+2	; 0x02
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	0e 94 03 17 	call	0x2e06	; 0x2e06 <I2C_MasterReceiveFromLocation>
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	39 f0       	breq	.+14     	; 0x1392 <Eeprom_24_readPage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    1384:	10 e0       	ldi	r17, 0x00	; 0
    1386:	05 c0       	rjmp	.+10     	; 0x1392 <Eeprom_24_readPage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1388:	12 e0       	ldi	r17, 0x02	; 2
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <Eeprom_24_readPage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    138c:	14 e0       	ldi	r17, 0x04	; 4
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <Eeprom_24_readPage+0x60>
	uint8_t u8_slaveAddr=0;

#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1390:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    1392:	81 2f       	mov	r24, r17
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	08 95       	ret

000013a4 <Eeprom_24_writePacket>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Multiple data bytes to a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    13a4:	6f 92       	push	r6
    13a6:	7f 92       	push	r7
    13a8:	8f 92       	push	r8
    13aa:	9f 92       	push	r9
    13ac:	af 92       	push	r10
    13ae:	bf 92       	push	r11
    13b0:	cf 92       	push	r12
    13b2:	df 92       	push	r13
    13b4:	ef 92       	push	r14
    13b6:	ff 92       	push	r15
    13b8:	0f 93       	push	r16
    13ba:	1f 93       	push	r17
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <Eeprom_24_writePacket+0x1e>
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	5c 01       	movw	r10, r24
    13c8:	6b 01       	movw	r12, r22
    13ca:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    13cc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    13d0:	83 30       	cpi	r24, 0x03	; 3
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <Eeprom_24_writePacket+0x32>
    13d4:	a1 c0       	rjmp	.+322    	; 0x1518 <Eeprom_24_writePacket+0x174>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    13d6:	67 2b       	or	r22, r23
    13d8:	09 f4       	brne	.+2      	; 0x13dc <Eeprom_24_writePacket+0x38>
    13da:	a0 c0       	rjmp	.+320    	; 0x151c <Eeprom_24_writePacket+0x178>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    13dc:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    13de:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    13e0:	a5 01       	movw	r20, r10
    13e2:	be 01       	movw	r22, r28
    13e4:	6e 5f       	subi	r22, 0xFE	; 254
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	ce 01       	movw	r24, r28
    13ea:	01 96       	adiw	r24, 0x01	; 1
    13ec:	0e 94 c5 08 	call	0x118a	; 0x118a <EEPROM_getAddresses>
    13f0:	18 2f       	mov	r17, r24
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <Eeprom_24_writePacket+0x54>
    13f6:	94 c0       	rjmp	.+296    	; 0x1520 <Eeprom_24_writePacket+0x17c>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;
    13f8:	45 01       	movw	r8, r10
    13fa:	80 ef       	ldi	r24, 0xF0	; 240
    13fc:	88 22       	and	r8, r24
    13fe:	87 e0       	ldi	r24, 0x07	; 7
    1400:	98 22       	and	r9, r24
    1402:	96 94       	lsr	r9
    1404:	87 94       	ror	r8
    1406:	96 94       	lsr	r9
    1408:	87 94       	ror	r8
    140a:	96 94       	lsr	r9
    140c:	87 94       	ror	r8
    140e:	96 94       	lsr	r9
    1410:	87 94       	ror	r8
    1412:	68 2c       	mov	r6, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
    1414:	8a 2d       	mov	r24, r10
    1416:	8f 70       	andi	r24, 0x0F	; 15
	if(u8_byteOffset != 0)
    1418:	51 f1       	breq	.+84     	; 0x146e <Eeprom_24_writePacket+0xca>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    141a:	90 e1       	ldi	r25, 0x10	; 16
    141c:	a9 2e       	mov	r10, r25
    141e:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    1420:	b1 2c       	mov	r11, r1
    1422:	ea 14       	cp	r14, r10
    1424:	fb 04       	cpc	r15, r11
    1426:	58 f4       	brcc	.+22     	; 0x143e <Eeprom_24_writePacket+0x9a>
		{
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1428:	97 01       	movw	r18, r14
    142a:	a6 01       	movw	r20, r12
    142c:	6a 81       	ldd	r22, Y+2	; 0x02
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <I2C_MasterSendToLocation>
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	09 f4       	brne	.+2      	; 0x143a <Eeprom_24_writePacket+0x96>
    1438:	7c c0       	rjmp	.+248    	; 0x1532 <Eeprom_24_writePacket+0x18e>
				return EEPROM_24_STATUS_ERROR_NOK;
    143a:	10 e0       	ldi	r17, 0x00	; 0
    143c:	7a c0       	rjmp	.+244    	; 0x1532 <Eeprom_24_writePacket+0x18e>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    143e:	95 01       	movw	r18, r10
    1440:	a6 01       	movw	r20, r12
    1442:	6a 81       	ldd	r22, Y+2	; 0x02
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <I2C_MasterSendToLocation>
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	09 f0       	breq	.+2      	; 0x1450 <Eeprom_24_writePacket+0xac>
    144e:	6a c0       	rjmp	.+212    	; 0x1524 <Eeprom_24_writePacket+0x180>
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    1450:	ea 18       	sub	r14, r10
    1452:	fb 08       	sbc	r15, r11
		i=1;
		Delay_ms(15);
    1454:	2f e0       	ldi	r18, 0x0F	; 15
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
    1468:	77 24       	eor	r7, r7
    146a:	73 94       	inc	r7
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <Eeprom_24_writePacket+0xd0>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
    146e:	71 2c       	mov	r7, r1

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
    1470:	a1 2c       	mov	r10, r1
    1472:	b1 2c       	mov	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
    1474:	c7 01       	movw	r24, r14
    1476:	92 95       	swap	r25
    1478:	82 95       	swap	r24
    147a:	8f 70       	andi	r24, 0x0F	; 15
    147c:	89 27       	eor	r24, r25
    147e:	9f 70       	andi	r25, 0x0F	; 15
    1480:	89 27       	eor	r24, r25
    1482:	08 2f       	mov	r16, r24
	while (pages_num > 0)
    1484:	1c c0       	rjmp	.+56     	; 0x14be <Eeprom_24_writePacket+0x11a>
	{
		pages_num--;
    1486:	01 50       	subi	r16, 0x01	; 1
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    1488:	b6 01       	movw	r22, r12
    148a:	6a 0d       	add	r22, r10
    148c:	7b 1d       	adc	r23, r11
    148e:	87 2d       	mov	r24, r7
    1490:	86 0d       	add	r24, r6
    1492:	0e 94 60 09 	call	0x12c0	; 0x12c0 <Eeprom_24_writePage>
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	09 f0       	breq	.+2      	; 0x149c <Eeprom_24_writePacket+0xf8>
    149a:	46 c0       	rjmp	.+140    	; 0x1528 <Eeprom_24_writePacket+0x184>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    149c:	73 94       	inc	r7
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
    149e:	80 e1       	ldi	r24, 0x10	; 16
    14a0:	e8 1a       	sub	r14, r24
    14a2:	f1 08       	sbc	r15, r1
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
    14a4:	80 e1       	ldi	r24, 0x10	; 16
    14a6:	a8 0e       	add	r10, r24
    14a8:	b1 1c       	adc	r11, r1
		Delay_ms(15);
    14aa:	2f e0       	ldi	r18, 0x0F	; 15
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e0       	ldi	r20, 0x00	; 0
    14b0:	50 e0       	ldi	r21, 0x00	; 0
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
    14be:	10 16       	cp	r1, r16
    14c0:	14 f3       	brlt	.-60     	; 0x1486 <Eeprom_24_writePacket+0xe2>
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
		Delay_ms(15);
	}
	
	if (u16_dataLen > 0)
    14c2:	e1 14       	cp	r14, r1
    14c4:	f1 04       	cpc	r15, r1
    14c6:	a9 f1       	breq	.+106    	; 0x1532 <Eeprom_24_writePacket+0x18e>
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
    14c8:	a4 01       	movw	r20, r8
    14ca:	47 0d       	add	r20, r7
    14cc:	51 1d       	adc	r21, r1
    14ce:	42 95       	swap	r20
    14d0:	52 95       	swap	r21
    14d2:	50 7f       	andi	r21, 0xF0	; 240
    14d4:	54 27       	eor	r21, r20
    14d6:	40 7f       	andi	r20, 0xF0	; 240
    14d8:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
    14da:	be 01       	movw	r22, r28
    14dc:	6e 5f       	subi	r22, 0xFE	; 254
    14de:	7f 4f       	sbci	r23, 0xFF	; 255
    14e0:	ce 01       	movw	r24, r28
    14e2:	01 96       	adiw	r24, 0x01	; 1
    14e4:	0e 94 c5 08 	call	0x118a	; 0x118a <EEPROM_getAddresses>
    14e8:	18 2f       	mov	r17, r24
    14ea:	81 30       	cpi	r24, 0x01	; 1
    14ec:	f9 f4       	brne	.+62     	; 0x152c <Eeprom_24_writePacket+0x188>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    14ee:	a6 01       	movw	r20, r12
    14f0:	4a 0d       	add	r20, r10
    14f2:	5b 1d       	adc	r21, r11
    14f4:	97 01       	movw	r18, r14
    14f6:	6a 81       	ldd	r22, Y+2	; 0x02
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <I2C_MasterSendToLocation>
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	b9 f4       	brne	.+46     	; 0x1530 <Eeprom_24_writePacket+0x18c>
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
    1502:	2f e0       	ldi	r18, 0x0F	; 15
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e0       	ldi	r20, 0x00	; 0
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
    1516:	0d c0       	rjmp	.+26     	; 0x1532 <Eeprom_24_writePacket+0x18e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1518:	12 e0       	ldi	r17, 0x02	; 2
    151a:	0b c0       	rjmp	.+22     	; 0x1532 <Eeprom_24_writePacket+0x18e>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    151c:	14 e0       	ldi	r17, 0x04	; 4
    151e:	09 c0       	rjmp	.+18     	; 0x1532 <Eeprom_24_writePacket+0x18e>
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1520:	10 e0       	ldi	r17, 0x00	; 0
    1522:	07 c0       	rjmp	.+14     	; 0x1532 <Eeprom_24_writePacket+0x18e>
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1524:	10 e0       	ldi	r17, 0x00	; 0
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <Eeprom_24_writePacket+0x18e>
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
	{
		pages_num--;
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1528:	10 e0       	ldi	r17, 0x00	; 0
    152a:	03 c0       	rjmp	.+6      	; 0x1532 <Eeprom_24_writePacket+0x18e>
	
	if (u16_dataLen > 0)
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    152c:	10 e0       	ldi	r17, 0x00	; 0
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <Eeprom_24_writePacket+0x18e>
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1530:	10 e0       	ldi	r17, 0x00	; 0
		Delay_ms(15);
	}

#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    1532:	81 2f       	mov	r24, r17
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	ff 90       	pop	r15
    1542:	ef 90       	pop	r14
    1544:	df 90       	pop	r13
    1546:	cf 90       	pop	r12
    1548:	bf 90       	pop	r11
    154a:	af 90       	pop	r10
    154c:	9f 90       	pop	r9
    154e:	8f 90       	pop	r8
    1550:	7f 90       	pop	r7
    1552:	6f 90       	pop	r6
    1554:	08 95       	ret

00001556 <Eeprom_24_readPacket>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read Multiple data bytes from a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    1556:	6f 92       	push	r6
    1558:	7f 92       	push	r7
    155a:	8f 92       	push	r8
    155c:	9f 92       	push	r9
    155e:	af 92       	push	r10
    1560:	bf 92       	push	r11
    1562:	cf 92       	push	r12
    1564:	df 92       	push	r13
    1566:	ef 92       	push	r14
    1568:	ff 92       	push	r15
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	00 d0       	rcall	.+0      	; 0x1574 <Eeprom_24_readPacket+0x1e>
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	5c 01       	movw	r10, r24
    157a:	6b 01       	movw	r12, r22
    157c:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    157e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    1582:	83 30       	cpi	r24, 0x03	; 3
    1584:	09 f0       	breq	.+2      	; 0x1588 <Eeprom_24_readPacket+0x32>
    1586:	84 c0       	rjmp	.+264    	; 0x1690 <Eeprom_24_readPacket+0x13a>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1588:	67 2b       	or	r22, r23
    158a:	09 f4       	brne	.+2      	; 0x158e <Eeprom_24_readPacket+0x38>
    158c:	83 c0       	rjmp	.+262    	; 0x1694 <Eeprom_24_readPacket+0x13e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    158e:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u16dataIndex=0;
	uint8_t i=0;

#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;	
    1590:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    1592:	a5 01       	movw	r20, r10
    1594:	be 01       	movw	r22, r28
    1596:	6e 5f       	subi	r22, 0xFE	; 254
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	ce 01       	movw	r24, r28
    159c:	01 96       	adiw	r24, 0x01	; 1
    159e:	0e 94 c5 08 	call	0x118a	; 0x118a <EEPROM_getAddresses>
    15a2:	18 2f       	mov	r17, r24
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	09 f0       	breq	.+2      	; 0x15aa <Eeprom_24_readPacket+0x54>
    15a8:	77 c0       	rjmp	.+238    	; 0x1698 <Eeprom_24_readPacket+0x142>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;		//The first page to write in
    15aa:	45 01       	movw	r8, r10
    15ac:	80 ef       	ldi	r24, 0xF0	; 240
    15ae:	88 22       	and	r8, r24
    15b0:	87 e0       	ldi	r24, 0x07	; 7
    15b2:	98 22       	and	r9, r24
    15b4:	96 94       	lsr	r9
    15b6:	87 94       	ror	r8
    15b8:	96 94       	lsr	r9
    15ba:	87 94       	ror	r8
    15bc:	96 94       	lsr	r9
    15be:	87 94       	ror	r8
    15c0:	96 94       	lsr	r9
    15c2:	87 94       	ror	r8
    15c4:	78 2c       	mov	r7, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
    15c6:	8a 2d       	mov	r24, r10
    15c8:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
    15ca:	f9 f0       	breq	.+62     	; 0x160a <Eeprom_24_readPacket+0xb4>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    15cc:	90 e1       	ldi	r25, 0x10	; 16
    15ce:	a9 2e       	mov	r10, r25
    15d0:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    15d2:	b1 2c       	mov	r11, r1
    15d4:	ea 14       	cp	r14, r10
    15d6:	fb 04       	cpc	r15, r11
    15d8:	58 f4       	brcc	.+22     	; 0x15f0 <Eeprom_24_readPacket+0x9a>
		{
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
    15da:	97 01       	movw	r18, r14
    15dc:	a6 01       	movw	r20, r12
    15de:	6a 81       	ldd	r22, Y+2	; 0x02
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	0e 94 03 17 	call	0x2e06	; 0x2e06 <I2C_MasterReceiveFromLocation>
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	09 f4       	brne	.+2      	; 0x15ec <Eeprom_24_readPacket+0x96>
    15ea:	5d c0       	rjmp	.+186    	; 0x16a6 <Eeprom_24_readPacket+0x150>
				return EEPROM_24_STATUS_ERROR_NOK;
    15ec:	10 e0       	ldi	r17, 0x00	; 0
    15ee:	5b c0       	rjmp	.+182    	; 0x16a6 <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    15f0:	95 01       	movw	r18, r10
    15f2:	a6 01       	movw	r20, r12
    15f4:	6a 81       	ldd	r22, Y+2	; 0x02
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	0e 94 03 17 	call	0x2e06	; 0x2e06 <I2C_MasterReceiveFromLocation>
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	09 f0       	breq	.+2      	; 0x1602 <Eeprom_24_readPacket+0xac>
    1600:	4d c0       	rjmp	.+154    	; 0x169c <Eeprom_24_readPacket+0x146>
			return EEPROM_24_STATUS_ERROR_NOK;
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    1602:	ea 18       	sub	r14, r10
    1604:	fb 08       	sbc	r15, r11
		i=1;
    1606:	01 e0       	ldi	r16, 0x01	; 1
    1608:	03 c0       	rjmp	.+6      	; 0x1610 <Eeprom_24_readPacket+0xba>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
    160a:	00 e0       	ldi	r16, 0x00	; 0

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
    160c:	a1 2c       	mov	r10, r1
    160e:	b1 2c       	mov	r11, r1
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
    1610:	c7 01       	movw	r24, r14
    1612:	92 95       	swap	r25
    1614:	82 95       	swap	r24
    1616:	8f 70       	andi	r24, 0x0F	; 15
    1618:	89 27       	eor	r24, r25
    161a:	9f 70       	andi	r25, 0x0F	; 15
    161c:	89 27       	eor	r24, r25
	while (pages_num--)
    161e:	11 c0       	rjmp	.+34     	; 0x1642 <Eeprom_24_readPacket+0xec>
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    1620:	b6 01       	movw	r22, r12
    1622:	6a 0d       	add	r22, r10
    1624:	7b 1d       	adc	r23, r11
    1626:	80 2f       	mov	r24, r16
    1628:	87 0d       	add	r24, r7
    162a:	0e 94 99 09 	call	0x1332	; 0x1332 <Eeprom_24_readPage>
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	b9 f5       	brne	.+110    	; 0x16a0 <Eeprom_24_readPacket+0x14a>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    1632:	0f 5f       	subi	r16, 0xFF	; 255
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
    1634:	80 e1       	ldi	r24, 0x10	; 16
    1636:	e8 1a       	sub	r14, r24
    1638:	f1 08       	sbc	r15, r1
		u16dataIndex += EEPROM_24_PAGE_BYTES;
    163a:	80 e1       	ldi	r24, 0x10	; 16
    163c:	a8 0e       	add	r10, r24
    163e:	b1 1c       	adc	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
    1640:	86 2d       	mov	r24, r6
    1642:	66 24       	eor	r6, r6
    1644:	6a 94       	dec	r6
    1646:	68 0e       	add	r6, r24
    1648:	81 11       	cpse	r24, r1
    164a:	ea cf       	rjmp	.-44     	; 0x1620 <Eeprom_24_readPacket+0xca>
		i++;
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u16dataIndex += EEPROM_24_PAGE_BYTES;
	}

	if (u16_dataLen > 0)
    164c:	e1 14       	cp	r14, r1
    164e:	f1 04       	cpc	r15, r1
    1650:	51 f1       	breq	.+84     	; 0x16a6 <Eeprom_24_readPacket+0x150>
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
    1652:	a4 01       	movw	r20, r8
    1654:	40 0f       	add	r20, r16
    1656:	51 1d       	adc	r21, r1
    1658:	42 95       	swap	r20
    165a:	52 95       	swap	r21
    165c:	50 7f       	andi	r21, 0xF0	; 240
    165e:	54 27       	eor	r21, r20
    1660:	40 7f       	andi	r20, 0xF0	; 240
    1662:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
    1664:	be 01       	movw	r22, r28
    1666:	6e 5f       	subi	r22, 0xFE	; 254
    1668:	7f 4f       	sbci	r23, 0xFF	; 255
    166a:	ce 01       	movw	r24, r28
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	0e 94 c5 08 	call	0x118a	; 0x118a <EEPROM_getAddresses>
    1672:	18 2f       	mov	r17, r24
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	b1 f4       	brne	.+44     	; 0x16a4 <Eeprom_24_readPacket+0x14e>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1678:	a6 01       	movw	r20, r12
    167a:	4a 0d       	add	r20, r10
    167c:	5b 1d       	adc	r21, r11
    167e:	97 01       	movw	r18, r14
    1680:	6a 81       	ldd	r22, Y+2	; 0x02
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	0e 94 03 17 	call	0x2e06	; 0x2e06 <I2C_MasterReceiveFromLocation>
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	69 f0       	breq	.+26     	; 0x16a6 <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_NOK;
    168c:	10 e0       	ldi	r17, 0x00	; 0
    168e:	0b c0       	rjmp	.+22     	; 0x16a6 <Eeprom_24_readPacket+0x150>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1690:	12 e0       	ldi	r17, 0x02	; 2
    1692:	09 c0       	rjmp	.+18     	; 0x16a6 <Eeprom_24_readPacket+0x150>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1694:	14 e0       	ldi	r17, 0x04	; 4
    1696:	07 c0       	rjmp	.+14     	; 0x16a6 <Eeprom_24_readPacket+0x150>
	uint8_t i=0;

#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1698:	10 e0       	ldi	r17, 0x00	; 0
    169a:	05 c0       	rjmp	.+10     	; 0x16a6 <Eeprom_24_readPacket+0x150>
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    169c:	10 e0       	ldi	r17, 0x00	; 0
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <Eeprom_24_readPacket+0x150>
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    16a0:	10 e0       	ldi	r17, 0x00	; 0
    16a2:	01 c0       	rjmp	.+2      	; 0x16a6 <Eeprom_24_readPacket+0x150>

	if (u16_dataLen > 0)
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    16a4:	10 e0       	ldi	r17, 0x00	; 0
		if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    16a6:	81 2f       	mov	r24, r17
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	ff 90       	pop	r15
    16b6:	ef 90       	pop	r14
    16b8:	df 90       	pop	r13
    16ba:	cf 90       	pop	r12
    16bc:	bf 90       	pop	r11
    16be:	af 90       	pop	r10
    16c0:	9f 90       	pop	r9
    16c2:	8f 90       	pop	r8
    16c4:	7f 90       	pop	r7
    16c6:	6f 90       	pop	r6
    16c8:	08 95       	ret

000016ca <Keypad_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is already initialized */
	if (genu_KeypadModuleState == KEYPAD_STATUS_INIT)
    16ca:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <genu_KeypadModuleState>
    16ce:	85 30       	cpi	r24, 0x05	; 5
    16d0:	71 f0       	breq	.+28     	; 0x16ee <Keypad_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    16d2:	85 e8       	ldi	r24, 0x85	; 133
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 6e 10 	call	0x20dc	; 0x20dc <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	11 f0       	breq	.+4      	; 0x16e2 <Keypad_init+0x18>
    16de:	87 30       	cpi	r24, 0x07	; 7
    16e0:	29 f4       	brne	.+10     	; 0x16ec <Keypad_init+0x22>
		return KEYPAD_STATUS_ERROR_NOK;
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
    16e2:	85 e0       	ldi	r24, 0x05	; 5
    16e4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <genu_KeypadModuleState>
	return KEYPAD_STATUS_ERROR_OK;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return KEYPAD_STATUS_ERROR_NOK;
    16ec:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
	return KEYPAD_STATUS_ERROR_OK;
}
    16ee:	08 95       	ret

000016f0 <Keypad_readKey>:
* Parameters (out): pu8_pressedKey - Pointer to a Char to hold the pressed key.
* Return value: enuKeypad_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current pressed Key.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuKeypad_Status_t Keypad_readKey(uint8_t * pu8_pressedKey)
{
    16f0:	af 92       	push	r10
    16f2:	bf 92       	push	r11
    16f4:	cf 92       	push	r12
    16f6:	df 92       	push	r13
    16f8:	ef 92       	push	r14
    16fa:	ff 92       	push	r15
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	1f 92       	push	r1
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	6c 01       	movw	r12, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
    170c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <genu_KeypadModuleState>
    1710:	95 30       	cpi	r25, 0x05	; 5
    1712:	09 f0       	breq	.+2      	; 0x1716 <Keypad_readKey+0x26>
    1714:	50 c0       	rjmp	.+160    	; 0x17b6 <Keypad_readKey+0xc6>
	{
		return KEYPAD_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
    1716:	c1 14       	cp	r12, r1
    1718:	d1 04       	cpc	r13, r1
    171a:	09 f4       	brne	.+2      	; 0x171e <Keypad_readKey+0x2e>
    171c:	4e c0       	rjmp	.+156    	; 0x17ba <Keypad_readKey+0xca>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	89 83       	std	Y+1, r24	; 0x01
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    1722:	00 e0       	ldi	r16, 0x00	; 0
    1724:	43 c0       	rjmp	.+134    	; 0x17ac <Keypad_readKey+0xbc>
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
    1726:	a0 2e       	mov	r10, r16
    1728:	b1 2c       	mov	r11, r1
    172a:	f5 01       	movw	r30, r10
    172c:	e6 58       	subi	r30, 0x86	; 134
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	09 f0       	breq	.+2      	; 0x173e <Keypad_readKey+0x4e>
    173c:	40 c0       	rjmp	.+128    	; 0x17be <Keypad_readKey+0xce>
    173e:	10 e0       	ldi	r17, 0x00	; 0
    1740:	29 c0       	rjmp	.+82     	; 0x1794 <Keypad_readKey+0xa4>
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
    1742:	e1 2e       	mov	r14, r17
    1744:	f1 2c       	mov	r15, r1
    1746:	f7 01       	movw	r30, r14
    1748:	ea 58       	subi	r30, 0x8A	; 138
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	be 01       	movw	r22, r28
    174e:	6f 5f       	subi	r22, 0xFF	; 255
    1750:	7f 4f       	sbci	r23, 0xFF	; 255
    1752:	80 81       	ld	r24, Z
    1754:	0e 94 4d 12 	call	0x249a	; 0x249a <Dio_readPin>
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	99 f5       	brne	.+102    	; 0x17c2 <Keypad_readKey+0xd2>
				return KEYPAD_STATUS_ERROR_NOK;
			if(u8_pinValue == PIN_LOW)
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	81 11       	cpse	r24, r1
    1760:	18 c0       	rjmp	.+48     	; 0x1792 <Keypad_readKey+0xa2>
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    1762:	61 e0       	ldi	r22, 0x01	; 1
    1764:	f5 01       	movw	r30, r10
    1766:	e6 58       	subi	r30, 0x86	; 134
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	80 81       	ld	r24, Z
    176c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	49 f5       	brne	.+82     	; 0x17c6 <Keypad_readKey+0xd6>
					return KEYPAD_STATUS_ERROR_NOK;
				*pu8_pressedKey = gau8_ButtonSymbols[u8_RowIndex][u8_ColumnIndex];
    1774:	97 01       	movw	r18, r14
    1776:	22 0f       	add	r18, r18
    1778:	33 1f       	adc	r19, r19
    177a:	22 0f       	add	r18, r18
    177c:	33 1f       	adc	r19, r19
    177e:	2a 59       	subi	r18, 0x9A	; 154
    1780:	3f 4f       	sbci	r19, 0xFF	; 255
    1782:	f9 01       	movw	r30, r18
    1784:	ea 0d       	add	r30, r10
    1786:	fb 1d       	adc	r31, r11
    1788:	80 81       	ld	r24, Z
    178a:	f6 01       	movw	r30, r12
    178c:	80 83       	st	Z, r24
				return KEYPAD_STATUS_PRESSED;
    178e:	86 e0       	ldi	r24, 0x06	; 6
    1790:	1d c0       	rjmp	.+58     	; 0x17cc <Keypad_readKey+0xdc>
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
    1792:	1f 5f       	subi	r17, 0xFF	; 255
    1794:	14 30       	cpi	r17, 0x04	; 4
    1796:	a8 f2       	brcs	.-86     	; 0x1742 <Keypad_readKey+0x52>
				return KEYPAD_STATUS_PRESSED;
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    1798:	f5 01       	movw	r30, r10
    179a:	e6 58       	subi	r30, 0x86	; 134
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	61 e0       	ldi	r22, 0x01	; 1
    17a0:	80 81       	ld	r24, Z
    17a2:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	81 f4       	brne	.+32     	; 0x17ca <Keypad_readKey+0xda>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    17aa:	0f 5f       	subi	r16, 0xFF	; 255
    17ac:	04 30       	cpi	r16, 0x04	; 4
    17ae:	08 f4       	brcc	.+2      	; 0x17b2 <Keypad_readKey+0xc2>
    17b0:	ba cf       	rjmp	.-140    	; 0x1726 <Keypad_readKey+0x36>
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    17b2:	87 e0       	ldi	r24, 0x07	; 7
    17b4:	0b c0       	rjmp	.+22     	; 0x17cc <Keypad_readKey+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
	{
		return KEYPAD_STATUS_NOT_INIT;
    17b6:	84 e0       	ldi	r24, 0x04	; 4
    17b8:	09 c0       	rjmp	.+18     	; 0x17cc <Keypad_readKey+0xdc>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
	{
		return KEYPAD_STATUS_ERROR_NULL;
    17ba:	83 e0       	ldi	r24, 0x03	; 3
    17bc:	07 c0       	rjmp	.+14     	; 0x17cc <Keypad_readKey+0xdc>
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	05 c0       	rjmp	.+10     	; 0x17cc <Keypad_readKey+0xdc>
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
				return KEYPAD_STATUS_ERROR_NOK;
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	03 c0       	rjmp	.+6      	; 0x17cc <Keypad_readKey+0xdc>
			if(u8_pinValue == PIN_LOW)
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
					return KEYPAD_STATUS_ERROR_NOK;
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	01 c0       	rjmp	.+2      	; 0x17cc <Keypad_readKey+0xdc>
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    17ca:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    17cc:	0f 90       	pop	r0
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	ff 90       	pop	r15
    17d8:	ef 90       	pop	r14
    17da:	df 90       	pop	r13
    17dc:	cf 90       	pop	r12
    17de:	bf 90       	pop	r11
    17e0:	af 90       	pop	r10
    17e2:	08 95       	ret

000017e4 <Lcd_WriteData>:
{
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, BIN);
	Lcd_printString(au8_snum);
	return LCD_STATUS_ERROR_OK;
}
    17e4:	cf 93       	push	r28
    17e6:	c8 2f       	mov	r28, r24
    17e8:	80 ff       	sbrs	r24, 0
    17ea:	05 c0       	rjmp	.+10     	; 0x17f6 <Lcd_WriteData+0x12>
    17ec:	61 e0       	ldi	r22, 0x01	; 1
    17ee:	8a e0       	ldi	r24, 0x0A	; 10
    17f0:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    17f4:	04 c0       	rjmp	.+8      	; 0x17fe <Lcd_WriteData+0x1a>
    17f6:	60 e0       	ldi	r22, 0x00	; 0
    17f8:	8a e0       	ldi	r24, 0x0A	; 10
    17fa:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    17fe:	c1 ff       	sbrs	r28, 1
    1800:	05 c0       	rjmp	.+10     	; 0x180c <Lcd_WriteData+0x28>
    1802:	61 e0       	ldi	r22, 0x01	; 1
    1804:	8b e0       	ldi	r24, 0x0B	; 11
    1806:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    180a:	04 c0       	rjmp	.+8      	; 0x1814 <Lcd_WriteData+0x30>
    180c:	60 e0       	ldi	r22, 0x00	; 0
    180e:	8b e0       	ldi	r24, 0x0B	; 11
    1810:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    1814:	c2 ff       	sbrs	r28, 2
    1816:	05 c0       	rjmp	.+10     	; 0x1822 <Lcd_WriteData+0x3e>
    1818:	61 e0       	ldi	r22, 0x01	; 1
    181a:	8c e0       	ldi	r24, 0x0C	; 12
    181c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    1820:	04 c0       	rjmp	.+8      	; 0x182a <Lcd_WriteData+0x46>
    1822:	60 e0       	ldi	r22, 0x00	; 0
    1824:	8c e0       	ldi	r24, 0x0C	; 12
    1826:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    182a:	c3 ff       	sbrs	r28, 3
    182c:	05 c0       	rjmp	.+10     	; 0x1838 <Lcd_WriteData+0x54>
    182e:	61 e0       	ldi	r22, 0x01	; 1
    1830:	8d e0       	ldi	r24, 0x0D	; 13
    1832:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    1836:	04 c0       	rjmp	.+8      	; 0x1840 <Lcd_WriteData+0x5c>
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	8d e0       	ldi	r24, 0x0D	; 13
    183c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    1840:	cf 91       	pop	r28
    1842:	08 95       	ret

00001844 <Lcd_EnableToggle>:
    1844:	61 e0       	ldi	r22, 0x01	; 1
    1846:	89 e0       	ldi	r24, 0x09	; 9
    1848:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    184c:	21 e0       	ldi	r18, 0x01	; 1
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	60 e0       	ldi	r22, 0x00	; 0
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	89 e0       	ldi	r24, 0x09	; 9
    1864:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    1868:	08 95       	ret

0000186a <Lcd_sendCommand>:
    186a:	cf 93       	push	r28
    186c:	c8 2f       	mov	r28, r24
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	87 e0       	ldi	r24, 0x07	; 7
    1872:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    1876:	8c 2f       	mov	r24, r28
    1878:	82 95       	swap	r24
    187a:	8f 70       	andi	r24, 0x0F	; 15
    187c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <Lcd_WriteData>
    1880:	0e 94 22 0c 	call	0x1844	; 0x1844 <Lcd_EnableToggle>
    1884:	21 e0       	ldi	r18, 0x01	; 1
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
    1898:	8c 2f       	mov	r24, r28
    189a:	8f 70       	andi	r24, 0x0F	; 15
    189c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <Lcd_WriteData>
    18a0:	0e 94 22 0c 	call	0x1844	; 0x1844 <Lcd_EnableToggle>
    18a4:	22 e0       	ldi	r18, 0x02	; 2
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e0       	ldi	r20, 0x00	; 0
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	cf 91       	pop	r28
    18bc:	08 95       	ret

000018be <Lcd_init>:
    18be:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <genu_LcdModuleState>
    18c2:	86 30       	cpi	r24, 0x06	; 6
    18c4:	91 f1       	breq	.+100    	; 0x192a <Lcd_init+0x6c>
    18c6:	85 e8       	ldi	r24, 0x85	; 133
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 6e 10 	call	0x20dc	; 0x20dc <Dio_init>
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	11 f0       	breq	.+4      	; 0x18d6 <Lcd_init+0x18>
    18d2:	87 30       	cpi	r24, 0x07	; 7
    18d4:	49 f5       	brne	.+82     	; 0x1928 <Lcd_init+0x6a>
    18d6:	24 e1       	ldi	r18, 0x14	; 20
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
    18ea:	60 e0       	ldi	r22, 0x00	; 0
    18ec:	87 e0       	ldi	r24, 0x07	; 7
    18ee:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    18f2:	60 e0       	ldi	r22, 0x00	; 0
    18f4:	89 e0       	ldi	r24, 0x09	; 9
    18f6:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    18fa:	83 e3       	ldi	r24, 0x33	; 51
    18fc:	0e 94 35 0c 	call	0x186a	; 0x186a <Lcd_sendCommand>
    1900:	82 e3       	ldi	r24, 0x32	; 50
    1902:	0e 94 35 0c 	call	0x186a	; 0x186a <Lcd_sendCommand>
    1906:	88 e2       	ldi	r24, 0x28	; 40
    1908:	0e 94 35 0c 	call	0x186a	; 0x186a <Lcd_sendCommand>
    190c:	8c e0       	ldi	r24, 0x0C	; 12
    190e:	0e 94 35 0c 	call	0x186a	; 0x186a <Lcd_sendCommand>
    1912:	86 e0       	ldi	r24, 0x06	; 6
    1914:	0e 94 35 0c 	call	0x186a	; 0x186a <Lcd_sendCommand>
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	0e 94 35 0c 	call	0x186a	; 0x186a <Lcd_sendCommand>
    191e:	86 e0       	ldi	r24, 0x06	; 6
    1920:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <genu_LcdModuleState>
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	08 95       	ret
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	08 95       	ret

0000192c <Lcd_setCursor>:
    192c:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <genu_LcdModuleState>
    1930:	96 30       	cpi	r25, 0x06	; 6
    1932:	89 f4       	brne	.+34     	; 0x1956 <Lcd_setCursor+0x2a>
    1934:	83 30       	cpi	r24, 0x03	; 3
    1936:	88 f4       	brcc	.+34     	; 0x195a <Lcd_setCursor+0x2e>
    1938:	61 31       	cpi	r22, 0x11	; 17
    193a:	88 f4       	brcc	.+34     	; 0x195e <Lcd_setCursor+0x32>
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	2e 5f       	subi	r18, 0xFE	; 254
    1942:	3f 4f       	sbci	r19, 0xFF	; 255
    1944:	86 2f       	mov	r24, r22
    1946:	90 e4       	ldi	r25, 0x40	; 64
    1948:	29 9f       	mul	r18, r25
    194a:	80 0d       	add	r24, r0
    194c:	11 24       	eor	r1, r1
    194e:	0e 94 35 0c 	call	0x186a	; 0x186a <Lcd_sendCommand>
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	08 95       	ret
    1956:	85 e0       	ldi	r24, 0x05	; 5
    1958:	08 95       	ret
    195a:	83 e0       	ldi	r24, 0x03	; 3
    195c:	08 95       	ret
    195e:	82 e0       	ldi	r24, 0x02	; 2
    1960:	08 95       	ret

00001962 <Lcd_printChar>:
    1962:	cf 93       	push	r28
    1964:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <genu_LcdModuleState>
    1968:	96 30       	cpi	r25, 0x06	; 6
    196a:	41 f5       	brne	.+80     	; 0x19bc <Lcd_printChar+0x5a>
    196c:	c8 2f       	mov	r28, r24
    196e:	61 e0       	ldi	r22, 0x01	; 1
    1970:	87 e0       	ldi	r24, 0x07	; 7
    1972:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    1976:	8c 2f       	mov	r24, r28
    1978:	82 95       	swap	r24
    197a:	8f 70       	andi	r24, 0x0F	; 15
    197c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <Lcd_WriteData>
    1980:	0e 94 22 0c 	call	0x1844	; 0x1844 <Lcd_EnableToggle>
    1984:	21 e0       	ldi	r18, 0x01	; 1
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	60 e0       	ldi	r22, 0x00	; 0
    198e:	70 e0       	ldi	r23, 0x00	; 0
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
    1998:	8c 2f       	mov	r24, r28
    199a:	8f 70       	andi	r24, 0x0F	; 15
    199c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <Lcd_WriteData>
    19a0:	0e 94 22 0c 	call	0x1844	; 0x1844 <Lcd_EnableToggle>
    19a4:	22 e0       	ldi	r18, 0x02	; 2
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Delay_ms>
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	01 c0       	rjmp	.+2      	; 0x19be <Lcd_printChar+0x5c>
    19bc:	85 e0       	ldi	r24, 0x05	; 5
    19be:	cf 91       	pop	r28
    19c0:	08 95       	ret

000019c2 <Lcd_printString>:
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	ec 01       	movw	r28, r24
    19c8:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <genu_LcdModuleState>
    19cc:	86 30       	cpi	r24, 0x06	; 6
    19ce:	49 f4       	brne	.+18     	; 0x19e2 <Lcd_printString+0x20>
    19d0:	03 c0       	rjmp	.+6      	; 0x19d8 <Lcd_printString+0x16>
    19d2:	21 96       	adiw	r28, 0x01	; 1
    19d4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Lcd_printChar>
    19d8:	88 81       	ld	r24, Y
    19da:	81 11       	cpse	r24, r1
    19dc:	fa cf       	rjmp	.-12     	; 0x19d2 <Lcd_printString+0x10>
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	01 c0       	rjmp	.+2      	; 0x19e4 <Lcd_printString+0x22>
    19e2:	85 e0       	ldi	r24, 0x05	; 5
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	08 95       	ret

000019ea <Lcd_clear>:
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	0e 94 35 0c 	call	0x186a	; 0x186a <Lcd_sendCommand>
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	08 95       	ret

000019f4 <Lcd_printLCD>:
    19f4:	0f 93       	push	r16
    19f6:	1f 93       	push	r17
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	ec 01       	movw	r28, r24
    19fe:	8b 01       	movw	r16, r22
    1a00:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Lcd_clear>
    1a04:	60 e0       	ldi	r22, 0x00	; 0
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	0e 94 96 0c 	call	0x192c	; 0x192c <Lcd_setCursor>
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	89 f4       	brne	.+34     	; 0x1a32 <Lcd_printLCD+0x3e>
    1a10:	ce 01       	movw	r24, r28
    1a12:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Lcd_printString>
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	71 f4       	brne	.+28     	; 0x1a36 <Lcd_printLCD+0x42>
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	0e 94 96 0c 	call	0x192c	; 0x192c <Lcd_setCursor>
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	59 f4       	brne	.+22     	; 0x1a3a <Lcd_printLCD+0x46>
    1a24:	c8 01       	movw	r24, r16
    1a26:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Lcd_printString>
    1a2a:	81 30       	cpi	r24, 0x01	; 1
    1a2c:	39 f0       	breq	.+14     	; 0x1a3c <Lcd_printLCD+0x48>
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	05 c0       	rjmp	.+10     	; 0x1a3c <Lcd_printLCD+0x48>
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	03 c0       	rjmp	.+6      	; 0x1a3c <Lcd_printLCD+0x48>
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <Lcd_printLCD+0x48>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	08 95       	ret

00001a46 <Lcd_printDecimal>:
enuLcd_Status_t Lcd_printDecimal(uint16_t u16_num)
{
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	61 97       	sbiw	r28, 0x11	; 17
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, DEC);
    1a5a:	41 e0       	ldi	r20, 0x01	; 1
    1a5c:	be 01       	movw	r22, r28
    1a5e:	6f 5f       	subi	r22, 0xFF	; 255
    1a60:	7f 4f       	sbci	r23, 0xFF	; 255
    1a62:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <integerToString>
	Lcd_printString(au8_snum);
    1a66:	ce 01       	movw	r24, r28
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Lcd_printString>
	return LCD_STATUS_ERROR_OK;
}
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	61 96       	adiw	r28, 0x11	; 17
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	df 91       	pop	r29
    1a7e:	cf 91       	pop	r28
    1a80:	08 95       	ret

00001a82 <LM35_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is already initialized */
	if (genu_LM35ModuleState == LM35_STATUS_INIT)
    1a82:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <genu_LM35ModuleState>
    1a86:	85 30       	cpi	r24, 0x05	; 5
    1a88:	51 f0       	breq	.+20     	; 0x1a9e <LM35_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
    1a8a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <Adc_init>
    1a8e:	81 30       	cpi	r24, 0x01	; 1
    1a90:	29 f4       	brne	.+10     	; 0x1a9c <LM35_init+0x1a>
		return LM35_STATUS_ERROR_NOK;
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
    1a92:	85 e0       	ldi	r24, 0x05	; 5
    1a94:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <genu_LM35ModuleState>
	return LM35_STATUS_ERROR_OK;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
		return LM35_STATUS_ERROR_NOK;
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
	return LM35_STATUS_ERROR_OK;
}
    1a9e:	08 95       	ret

00001aa0 <LM35_readTemp>:
* Parameters (out): pu8_Temp - Pointer to a Char to hold the temperature.
* Return value: enuLM35_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current temperature and return in celsius.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLM35_Status_t LM35_readTemp(uint8_t * pu8_Temp)
{
    1aa0:	0f 93       	push	r16
    1aa2:	1f 93       	push	r17
    1aa4:	cf 93       	push	r28
    1aa6:	df 93       	push	r29
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <LM35_readTemp+0xa>
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <LM35_readTemp+0xc>
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	9c 01       	movw	r18, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
    1ab2:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <genu_LM35ModuleState>
    1ab6:	95 30       	cpi	r25, 0x05	; 5
    1ab8:	f1 f4       	brne	.+60     	; 0x1af6 <LM35_readTemp+0x56>
	{
	return LM35_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
    1aba:	21 15       	cp	r18, r1
    1abc:	31 05       	cpc	r19, r1
    1abe:	e9 f0       	breq	.+58     	; 0x1afa <LM35_readTemp+0x5a>
    1ac0:	89 01       	movw	r16, r18
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
    1ac2:	19 82       	std	Y+1, r1	; 0x01
    1ac4:	1a 82       	std	Y+2, r1	; 0x02
    1ac6:	1b 82       	std	Y+3, r1	; 0x03
    1ac8:	1c 82       	std	Y+4, r1	; 0x04
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
    1aca:	be 01       	movw	r22, r28
    1acc:	6f 5f       	subi	r22, 0xFF	; 255
    1ace:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <Adc_start>
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	91 f4       	brne	.+36     	; 0x1afe <LM35_readTemp+0x5e>
		return LM35_STATUS_ERROR_NOK;
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
    1ada:	69 81       	ldd	r22, Y+1	; 0x01
    1adc:	7a 81       	ldd	r23, Y+2	; 0x02
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	2a e0       	ldi	r18, 0x0A	; 10
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__udivmodsi4>
    1aee:	f8 01       	movw	r30, r16
    1af0:	20 83       	st	Z, r18
	return LM35_STATUS_ERROR_OK;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	05 c0       	rjmp	.+10     	; 0x1b00 <LM35_readTemp+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
	{
	return LM35_STATUS_NOT_INIT;
    1af6:	84 e0       	ldi	r24, 0x04	; 4
    1af8:	03 c0       	rjmp	.+6      	; 0x1b00 <LM35_readTemp+0x60>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
	{
		return LM35_STATUS_ERROR_NULL;
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	01 c0       	rjmp	.+2      	; 0x1b00 <LM35_readTemp+0x60>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
		return LM35_STATUS_ERROR_NOK;
    1afe:	80 e0       	ldi	r24, 0x00	; 0
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
	return LM35_STATUS_ERROR_OK;
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	1f 91       	pop	r17
    1b0e:	0f 91       	pop	r16
    1b10:	08 95       	ret

00001b12 <Motor_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
    1b12:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <gu8_MotorModuleStatus>
    1b16:	86 30       	cpi	r24, 0x06	; 6
    1b18:	49 f0       	breq	.+18     	; 0x1b2c <Motor_init+0x1a>
/**************************************************************************************/
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
    1b1a:	0e 94 db 19 	call	0x33b6	; 0x33b6 <SWPwm_Init>
    1b1e:	81 30       	cpi	r24, 0x01	; 1
    1b20:	39 f4       	brne	.+14     	; 0x1b30 <Motor_init+0x1e>
		return MOTOR_STATUS_ERROR_NOK;
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
    1b22:	86 e0       	ldi	r24, 0x06	; 6
    1b24:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <gu8_MotorModuleStatus>
	return MOTOR_STATUS_ERROR_OK;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_INIT;
    1b2c:	86 e0       	ldi	r24, 0x06	; 6
    1b2e:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
		return MOTOR_STATUS_ERROR_NOK;
    1b30:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
	return MOTOR_STATUS_ERROR_OK;
}
    1b32:	08 95       	ret

00001b34 <Motor_stop>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the motor.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to stop motor */
enuMotor_Status_t Motor_stop(uint8_t u8_motorID)
{
    1b34:	df 92       	push	r13
    1b36:	ef 92       	push	r14
    1b38:	ff 92       	push	r15
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    1b42:	81 11       	cpse	r24, r1
    1b44:	5d c0       	rjmp	.+186    	; 0x1c00 <Motor_stop+0xcc>
    1b46:	d8 2e       	mov	r13, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Stop the Motor by driving the pins to LOW */
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    1b48:	08 2f       	mov	r16, r24
    1b4a:	10 e0       	ldi	r17, 0x00	; 0
    1b4c:	78 01       	movw	r14, r16
    1b4e:	ee 0c       	add	r14, r14
    1b50:	ff 1c       	adc	r15, r15
    1b52:	ee 0c       	add	r14, r14
    1b54:	ff 1c       	adc	r15, r15
    1b56:	c7 01       	movw	r24, r14
    1b58:	80 0f       	add	r24, r16
    1b5a:	91 1f       	adc	r25, r17
    1b5c:	ec 01       	movw	r28, r24
    1b5e:	c9 51       	subi	r28, 0x19	; 25
    1b60:	db 4f       	sbci	r29, 0xFB	; 251
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1b72:	e0 e0       	ldi	r30, 0x00	; 0
    1b74:	1c c0       	rjmp	.+56     	; 0x1bae <Motor_stop+0x7a>
	{
		if(u8_loopIndex == u8_motorID) /* Skip the current motor */
    1b76:	ed 15       	cp	r30, r13
    1b78:	c9 f0       	breq	.+50     	; 0x1bac <Motor_stop+0x78>
		{
			continue;
		}
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
    1b7a:	d8 01       	movw	r26, r16
    1b7c:	aa 0f       	add	r26, r26
    1b7e:	bb 1f       	adc	r27, r27
    1b80:	aa 0f       	add	r26, r26
    1b82:	bb 1f       	adc	r27, r27
    1b84:	a0 0f       	add	r26, r16
    1b86:	b1 1f       	adc	r27, r17
    1b88:	a9 51       	subi	r26, 0x19	; 25
    1b8a:	bb 4f       	sbci	r27, 0xFB	; 251
    1b8c:	2c 91       	ld	r18, X
    1b8e:	8e 2f       	mov	r24, r30
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	dc 01       	movw	r26, r24
    1b94:	aa 0f       	add	r26, r26
    1b96:	bb 1f       	adc	r27, r27
    1b98:	aa 0f       	add	r26, r26
    1b9a:	bb 1f       	adc	r27, r27
    1b9c:	8a 0f       	add	r24, r26
    1b9e:	9b 1f       	adc	r25, r27
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	a9 51       	subi	r26, 0x19	; 25
    1ba4:	bb 4f       	sbci	r27, 0xFB	; 251
    1ba6:	8c 91       	ld	r24, X
    1ba8:	28 17       	cp	r18, r24
    1baa:	19 f0       	breq	.+6      	; 0x1bb2 <Motor_stop+0x7e>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1bac:	ef 5f       	subi	r30, 0xFF	; 255
    1bae:	ee 23       	and	r30, r30
    1bb0:	11 f3       	breq	.-60     	; 0x1b76 <Motor_stop+0x42>
			break;
		}
	}
	
	
	if(u8_loopIndex == MOTORS_USED_NUM)
    1bb2:	e1 30       	cpi	r30, 0x01	; 1
    1bb4:	69 f4       	brne	.+26     	; 0x1bd0 <Motor_stop+0x9c>
	{ /* In case that there isn't any motor using the same PWM Channel --> Stop the PWM */
		SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	ee 0f       	add	r30, r30
    1bba:	ff 1f       	adc	r31, r31
    1bbc:	ee 0f       	add	r30, r30
    1bbe:	ff 1f       	adc	r31, r31
    1bc0:	e0 0f       	add	r30, r16
    1bc2:	f1 1f       	adc	r31, r17
    1bc4:	e9 51       	subi	r30, 0x19	; 25
    1bc6:	fb 4f       	sbci	r31, 0xFB	; 251
    1bc8:	80 81       	ld	r24, Z
    1bca:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SWPwm_Stop>
    1bce:	12 c0       	rjmp	.+36     	; 0x1bf4 <Motor_stop+0xc0>
	}else
	{/* In case that there is another motor using the same PWM Channel */
		if (gau8_MotorsState[u8_loopIndex] == MOTOR_STOPPED) /* Check if the other motor is not running */
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	e2 5c       	subi	r30, 0xC2	; 194
    1bd4:	fa 4f       	sbci	r31, 0xFA	; 250
    1bd6:	80 81       	ld	r24, Z
    1bd8:	81 11       	cpse	r24, r1
    1bda:	0c c0       	rjmp	.+24     	; 0x1bf4 <Motor_stop+0xc0>
		{/* In case that the other motor is not running --> Stop the PWM */
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1bdc:	f8 01       	movw	r30, r16
    1bde:	ee 0f       	add	r30, r30
    1be0:	ff 1f       	adc	r31, r31
    1be2:	ee 0f       	add	r30, r30
    1be4:	ff 1f       	adc	r31, r31
    1be6:	e0 0f       	add	r30, r16
    1be8:	f1 1f       	adc	r31, r17
    1bea:	e9 51       	subi	r30, 0x19	; 25
    1bec:	fb 4f       	sbci	r31, 0xFB	; 251
    1bee:	80 81       	ld	r24, Z
    1bf0:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SWPwm_Stop>
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
    1bf4:	f8 01       	movw	r30, r16
    1bf6:	e2 5c       	subi	r30, 0xC2	; 194
    1bf8:	fa 4f       	sbci	r31, 0xFA	; 250
    1bfa:	10 82       	st	Z, r1
	return MOTOR_STATUS_ERROR_OK;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	01 c0       	rjmp	.+2      	; 0x1c02 <Motor_stop+0xce>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    1c00:	82 e0       	ldi	r24, 0x02	; 2
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
	return MOTOR_STATUS_ERROR_OK;
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	ff 90       	pop	r15
    1c0c:	ef 90       	pop	r14
    1c0e:	df 90       	pop	r13
    1c10:	08 95       	ret

00001c12 <Motor_run>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Move the motor in the given direction.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to move the motor forward with given speed in % */
enuMotor_Status_t Motor_run(uint8_t u8_motorID, uint8_t u8_speed, uint8_t u8_direction)
{
    1c12:	ff 92       	push	r15
    1c14:	0f 93       	push	r16
    1c16:	1f 93       	push	r17
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
    1c1c:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <gu8_MotorModuleStatus>
    1c20:	96 30       	cpi	r25, 0x06	; 6
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <Motor_run+0x14>
    1c24:	57 c0       	rjmp	.+174    	; 0x1cd4 <Motor_run+0xc2>
	{
		return MOTOR_STATUS_UNINIT;
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    1c26:	81 11       	cpse	r24, r1
    1c28:	57 c0       	rjmp	.+174    	; 0x1cd8 <Motor_run+0xc6>
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
    1c2a:	65 36       	cpi	r22, 0x65	; 101
    1c2c:	08 f0       	brcs	.+2      	; 0x1c30 <Motor_run+0x1e>
    1c2e:	56 c0       	rjmp	.+172    	; 0x1cdc <Motor_run+0xca>
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
    1c30:	42 30       	cpi	r20, 0x02	; 2
    1c32:	08 f0       	brcs	.+2      	; 0x1c36 <Motor_run+0x24>
    1c34:	55 c0       	rjmp	.+170    	; 0x1ce0 <Motor_run+0xce>
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
    1c36:	08 2f       	mov	r16, r24
    1c38:	10 e0       	ldi	r17, 0x00	; 0
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	e2 5c       	subi	r30, 0xC2	; 194
    1c3e:	fa 4f       	sbci	r31, 0xFA	; 250
    1c40:	90 81       	ld	r25, Z
    1c42:	91 30       	cpi	r25, 0x01	; 1
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <Motor_run+0x36>
    1c46:	4e c0       	rjmp	.+156    	; 0x1ce4 <Motor_run+0xd2>
    1c48:	f6 2e       	mov	r15, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_speed == 0) 
    1c4a:	61 11       	cpse	r22, r1
    1c4c:	04 c0       	rjmp	.+8      	; 0x1c56 <Motor_run+0x44>
	{
		Motor_stop(u8_motorID);
    1c4e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <Motor_stop>
		return MOTOR_STATUS_ERROR_OK;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	48 c0       	rjmp	.+144    	; 0x1ce6 <Motor_run+0xd4>
	}
	if(u8_direction == MOTOR_DIR_CLK_WISE) /* Activate the Motor in the Clock Wise Direction */
    1c56:	41 11       	cpse	r20, r1
    1c58:	12 c0       	rjmp	.+36     	; 0x1c7e <Motor_run+0x6c>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_HIGH);
    1c5a:	25 e0       	ldi	r18, 0x05	; 5
    1c5c:	20 9f       	mul	r18, r16
    1c5e:	c0 01       	movw	r24, r0
    1c60:	21 9f       	mul	r18, r17
    1c62:	90 0d       	add	r25, r0
    1c64:	11 24       	eor	r1, r1
    1c66:	ec 01       	movw	r28, r24
    1c68:	c9 51       	subi	r28, 0x19	; 25
    1c6a:	db 4f       	sbci	r29, 0xFB	; 251
    1c6c:	61 e0       	ldi	r22, 0x01	; 1
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    1c7c:	13 c0       	rjmp	.+38     	; 0x1ca4 <Motor_run+0x92>
	}else if(u8_direction == MOTOR_DIR_ANTI_CLK_WISE) /* Activate the Motor in the Anti Clock Wise Direction */
    1c7e:	41 30       	cpi	r20, 0x01	; 1
    1c80:	89 f4       	brne	.+34     	; 0x1ca4 <Motor_run+0x92>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    1c82:	25 e0       	ldi	r18, 0x05	; 5
    1c84:	20 9f       	mul	r18, r16
    1c86:	c0 01       	movw	r24, r0
    1c88:	21 9f       	mul	r18, r17
    1c8a:	90 0d       	add	r25, r0
    1c8c:	11 24       	eor	r1, r1
    1c8e:	ec 01       	movw	r28, r24
    1c90:	c9 51       	subi	r28, 0x19	; 25
    1c92:	db 4f       	sbci	r29, 0xFB	; 251
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_HIGH);
    1c9c:	61 e0       	ldi	r22, 0x01	; 1
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
	}
	
	/* Change the state of the Motor to Running */
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
    1ca4:	f8 01       	movw	r30, r16
    1ca6:	e2 5c       	subi	r30, 0xC2	; 194
    1ca8:	fa 4f       	sbci	r31, 0xFA	; 250
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	80 83       	st	Z, r24
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
    1cae:	f8 01       	movw	r30, r16
    1cb0:	ee 0f       	add	r30, r30
    1cb2:	ff 1f       	adc	r31, r31
    1cb4:	ee 0f       	add	r30, r30
    1cb6:	ff 1f       	adc	r31, r31
    1cb8:	e0 0f       	add	r30, r16
    1cba:	f1 1f       	adc	r31, r17
    1cbc:	e9 51       	subi	r30, 0x19	; 25
    1cbe:	fb 4f       	sbci	r31, 0xFB	; 251
    1cc0:	43 81       	ldd	r20, Z+3	; 0x03
    1cc2:	54 81       	ldd	r21, Z+4	; 0x04
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	70 e0       	ldi	r23, 0x00	; 0
    1cc8:	2f 2d       	mov	r18, r15
    1cca:	80 81       	ld	r24, Z
    1ccc:	0e 94 f7 19 	call	0x33ee	; 0x33ee <SWPwm_Start>
	
	return MOTOR_STATUS_ERROR_OK;
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	09 c0       	rjmp	.+18     	; 0x1ce6 <Motor_run+0xd4>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_UNINIT;
    1cd4:	87 e0       	ldi	r24, 0x07	; 7
    1cd6:	07 c0       	rjmp	.+14     	; 0x1ce6 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    1cd8:	82 e0       	ldi	r24, 0x02	; 2
    1cda:	05 c0       	rjmp	.+10     	; 0x1ce6 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
    1cdc:	83 e0       	ldi	r24, 0x03	; 3
    1cde:	03 c0       	rjmp	.+6      	; 0x1ce6 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
    1ce0:	84 e0       	ldi	r24, 0x04	; 4
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
	{
		return MOTOR_STATUS_ERROR_RUNNING;
    1ce4:	85 e0       	ldi	r24, 0x05	; 5
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
	
	return MOTOR_STATUS_ERROR_OK;
}
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	1f 91       	pop	r17
    1cec:	0f 91       	pop	r16
    1cee:	ff 90       	pop	r15
    1cf0:	08 95       	ret

00001cf2 <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
    1cf6:	c0 91 40 05 	lds	r28, 0x0540	; 0x800540 <gu8_counter>
    1cfa:	d0 e0       	ldi	r29, 0x00	; 0
    1cfc:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <Uart_DataRegister>
    1d00:	cf 5b       	subi	r28, 0xBF	; 191
    1d02:	da 4f       	sbci	r29, 0xFA	; 250
    1d04:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
    1d06:	90 91 40 05 	lds	r25, 0x0540	; 0x800540 <gu8_counter>
    1d0a:	e9 2f       	mov	r30, r25
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	ef 5b       	subi	r30, 0xBF	; 191
    1d10:	fa 4f       	sbci	r31, 0xFA	; 250
    1d12:	80 81       	ld	r24, Z
    1d14:	8d 30       	cpi	r24, 0x0D	; 13
    1d16:	71 f4       	brne	.+28     	; 0x1d34 <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    1d18:	0e 94 89 1b 	call	0x3712	; 0x3712 <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
    1d1c:	e0 91 40 05 	lds	r30, 0x0540	; 0x800540 <gu8_counter>
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	ef 5b       	subi	r30, 0xBF	; 191
    1d24:	fa 4f       	sbci	r31, 0xFA	; 250
    1d26:	10 82       	st	Z, r1
		gu8_counter = 0;
    1d28:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <gu8_counter>
		gu8_flag = 1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <gu8_flag>
    1d32:	1d c0       	rjmp	.+58     	; 0x1d6e <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
    1d34:	88 30       	cpi	r24, 0x08	; 8
    1d36:	51 f4       	brne	.+20     	; 0x1d4c <Uart_RXC_ISR+0x5a>
    1d38:	99 23       	and	r25, r25
    1d3a:	41 f0       	breq	.+16     	; 0x1d4c <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    1d3c:	0e 94 89 1b 	call	0x3712	; 0x3712 <Uart_sendByte>
		gu8_counter--;
    1d40:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <gu8_counter>
    1d44:	81 50       	subi	r24, 0x01	; 1
    1d46:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <gu8_counter>
    1d4a:	11 c0       	rjmp	.+34     	; 0x1d6e <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
    1d4c:	88 30       	cpi	r24, 0x08	; 8
    1d4e:	79 f0       	breq	.+30     	; 0x1d6e <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
    1d50:	90 91 40 06 	lds	r25, 0x0640	; 0x800640 <gu8_visibility>
    1d54:	91 30       	cpi	r25, 0x01	; 1
    1d56:	21 f4       	brne	.+8      	; 0x1d60 <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
    1d58:	8a e2       	ldi	r24, 0x2A	; 42
    1d5a:	0e 94 89 1b 	call	0x3712	; 0x3712 <Uart_sendByte>
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
    1d60:	0e 94 89 1b 	call	0x3712	; 0x3712 <Uart_sendByte>
		}
		gu8_counter++;
    1d64:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <gu8_counter>
    1d68:	8f 5f       	subi	r24, 0xFF	; 255
    1d6a:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <gu8_counter>
	}
}
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	08 95       	ret

00001d74 <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
    1d74:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <genu_TerminalModuleState>
    1d78:	83 30       	cpi	r24, 0x03	; 3
    1d7a:	81 f0       	breq	.+32     	; 0x1d9c <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
    1d7c:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
    1d80:	81 30       	cpi	r24, 0x01	; 1
    1d82:	11 f0       	breq	.+4      	; 0x1d88 <Terminal_init+0x14>
    1d84:	87 30       	cpi	r24, 0x07	; 7
    1d86:	49 f4       	brne	.+18     	; 0x1d9a <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
    1d88:	89 e7       	ldi	r24, 0x79	; 121
    1d8a:	9e e0       	ldi	r25, 0x0E	; 14
    1d8c:	0e 94 bb 1b 	call	0x3776	; 0x3776 <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
    1d90:	83 e0       	ldi	r24, 0x03	; 3
    1d92:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
    1d9c:	08 95       	ret

00001d9e <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	81 f0       	breq	.+32     	; 0x1dc6 <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    1da6:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <genu_TerminalModuleState>
    1daa:	22 30       	cpi	r18, 0x02	; 2
    1dac:	79 f0       	breq	.+30     	; 0x1dcc <Terminal_Out+0x2e>
    1dae:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
    1db0:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <stringLength>
    1db4:	68 2f       	mov	r22, r24
    1db6:	70 e0       	ldi	r23, 0x00	; 0
    1db8:	ce 01       	movw	r24, r28
    1dba:	0e 94 94 1b 	call	0x3728	; 0x3728 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	21 f0       	breq	.+8      	; 0x1dca <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	03 c0       	rjmp	.+6      	; 0x1dcc <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    1dc6:	24 e0       	ldi	r18, 0x04	; 4
    1dc8:	01 c0       	rjmp	.+2      	; 0x1dcc <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
    1dca:	21 e0       	ldi	r18, 0x01	; 1
}
    1dcc:	82 2f       	mov	r24, r18
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	08 95       	ret

00001dd4 <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
    1dd4:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
    1dd6:	89 2b       	or	r24, r25
    1dd8:	a1 f0       	breq	.+40     	; 0x1e02 <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    1dda:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <genu_TerminalModuleState>
    1dde:	82 30       	cpi	r24, 0x02	; 2
    1de0:	99 f0       	breq	.+38     	; 0x1e08 <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
    1de2:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <gu8_flag>
    1de6:	81 30       	cpi	r24, 0x01	; 1
    1de8:	71 f4       	brne	.+28     	; 0x1e06 <Terminal_In+0x32>
	{
		gu8_flag = 0;
    1dea:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
    1dee:	81 e4       	ldi	r24, 0x41	; 65
    1df0:	95 e0       	ldi	r25, 0x05	; 5
    1df2:	0e 94 e7 17 	call	0x2fce	; 0x2fce <stringCopy>
		EmptyString(gau8_data);
    1df6:	81 e4       	ldi	r24, 0x41	; 65
    1df8:	95 e0       	ldi	r25, 0x05	; 5
    1dfa:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
    1dfe:	85 e0       	ldi	r24, 0x05	; 5
    1e00:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    1e02:	84 e0       	ldi	r24, 0x04	; 4
    1e04:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
}
    1e08:	08 95       	ret

00001e0a <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
    1e10:	08 95       	ret

00001e12 <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
    1e12:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	08 95       	ret

00001e1a <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
    1e1a:	0e 94 20 08 	call	0x1040	; 0x1040 <App_start>
    1e1e:	ff cf       	rjmp	.-2      	; 0x1e1e <main+0x4>

00001e20 <Adc_init>:
		f32_Resolution = (1000*ADC_AREF_VALUE)/ADC_STEPS_NUM;
	}
	*pu32_data = u16_Result*f32_Resolution;
		
	return ADC_STATUS_ERROR_OK;
}
    1e20:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <genuAdc_Status>
    1e24:	87 30       	cpi	r24, 0x07	; 7
    1e26:	11 f1       	breq	.+68     	; 0x1e6c <Adc_init+0x4c>
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	13 c0       	rjmp	.+38     	; 0x1e52 <Adc_init+0x32>
    1e2c:	3b b3       	in	r19, 0x1b	; 27
    1e2e:	e2 2f       	mov	r30, r18
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	ee 0f       	add	r30, r30
    1e34:	ff 1f       	adc	r31, r31
    1e36:	ed 57       	subi	r30, 0x7D	; 125
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	00 80       	ld	r0, Z
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <Adc_init+0x26>
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	0a 94       	dec	r0
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <Adc_init+0x22>
    1e4a:	80 95       	com	r24
    1e4c:	83 23       	and	r24, r19
    1e4e:	8b bb       	out	0x1b, r24	; 27
    1e50:	2f 5f       	subi	r18, 0xFF	; 255
    1e52:	22 23       	and	r18, r18
    1e54:	59 f3       	breq	.-42     	; 0x1e2c <Adc_init+0xc>
    1e56:	97 e0       	ldi	r25, 0x07	; 7
    1e58:	96 b9       	out	0x06, r25	; 6
    1e5a:	86 b1       	in	r24, 0x06	; 6
    1e5c:	8f 7d       	andi	r24, 0xDF	; 223
    1e5e:	86 b9       	out	0x06, r24	; 6
    1e60:	86 b1       	in	r24, 0x06	; 6
    1e62:	86 b9       	out	0x06, r24	; 6
    1e64:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <genuAdc_Status>
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	08 95       	ret
    1e6c:	88 e0       	ldi	r24, 0x08	; 8
    1e6e:	08 95       	ret

00001e70 <Adc_start>:
    1e70:	cf 92       	push	r12
    1e72:	df 92       	push	r13
    1e74:	ef 92       	push	r14
    1e76:	ff 92       	push	r15
    1e78:	cf 93       	push	r28
    1e7a:	df 93       	push	r29
    1e7c:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <genuAdc_Status>
    1e80:	97 30       	cpi	r25, 0x07	; 7
    1e82:	09 f0       	breq	.+2      	; 0x1e86 <Adc_start+0x16>
    1e84:	61 c0       	rjmp	.+194    	; 0x1f48 <Adc_start+0xd8>
    1e86:	61 15       	cp	r22, r1
    1e88:	71 05       	cpc	r23, r1
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <Adc_start+0x1e>
    1e8c:	5f c0       	rjmp	.+190    	; 0x1f4c <Adc_start+0xdc>
    1e8e:	37 b1       	in	r19, 0x07	; 7
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	fc 01       	movw	r30, r24
    1e94:	ee 0f       	add	r30, r30
    1e96:	ff 1f       	adc	r31, r31
    1e98:	ed 57       	subi	r30, 0x7D	; 125
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	20 81       	ld	r18, Z
    1e9e:	23 2b       	or	r18, r19
    1ea0:	27 b9       	out	0x07, r18	; 7
    1ea2:	47 b1       	in	r20, 0x07	; 7
    1ea4:	31 81       	ldd	r19, Z+1	; 0x01
    1ea6:	50 e4       	ldi	r21, 0x40	; 64
    1ea8:	35 9f       	mul	r19, r21
    1eaa:	90 01       	movw	r18, r0
    1eac:	11 24       	eor	r1, r1
    1eae:	24 2b       	or	r18, r20
    1eb0:	27 b9       	out	0x07, r18	; 7
    1eb2:	26 b1       	in	r18, 0x06	; 6
    1eb4:	20 68       	ori	r18, 0x80	; 128
    1eb6:	26 b9       	out	0x06, r18	; 6
    1eb8:	26 b1       	in	r18, 0x06	; 6
    1eba:	20 64       	ori	r18, 0x40	; 64
    1ebc:	26 b9       	out	0x06, r18	; 6
    1ebe:	34 9b       	sbis	0x06, 4	; 6
    1ec0:	fe cf       	rjmp	.-4      	; 0x1ebe <Adc_start+0x4e>
    1ec2:	44 b1       	in	r20, 0x04	; 4
    1ec4:	25 b1       	in	r18, 0x05	; 5
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	32 2f       	mov	r19, r18
    1eca:	22 27       	eor	r18, r18
    1ecc:	24 2b       	or	r18, r20
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	ed 57       	subi	r30, 0x7D	; 125
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	81 81       	ldd	r24, Z+1	; 0x01
    1eda:	83 30       	cpi	r24, 0x03	; 3
    1edc:	41 f0       	breq	.+16     	; 0x1eee <Adc_start+0x7e>
    1ede:	81 30       	cpi	r24, 0x01	; 1
    1ee0:	69 f0       	breq	.+26     	; 0x1efc <Adc_start+0x8c>
    1ee2:	88 23       	and	r24, r24
    1ee4:	a1 f0       	breq	.+40     	; 0x1f0e <Adc_start+0x9e>
    1ee6:	c1 2c       	mov	r12, r1
    1ee8:	d1 2c       	mov	r13, r1
    1eea:	76 01       	movw	r14, r12
    1eec:	18 c0       	rjmp	.+48     	; 0x1f1e <Adc_start+0xae>
    1eee:	c1 2c       	mov	r12, r1
    1ef0:	d1 2c       	mov	r13, r1
    1ef2:	76 01       	movw	r14, r12
    1ef4:	68 94       	set
    1ef6:	e5 f8       	bld	r14, 5
    1ef8:	f6 f8       	bld	r15, 6
    1efa:	11 c0       	rjmp	.+34     	; 0x1f1e <Adc_start+0xae>
    1efc:	0f 2e       	mov	r0, r31
    1efe:	c1 2c       	mov	r12, r1
    1f00:	f0 e4       	ldi	r31, 0x40	; 64
    1f02:	df 2e       	mov	r13, r31
    1f04:	fc e9       	ldi	r31, 0x9C	; 156
    1f06:	ef 2e       	mov	r14, r31
    1f08:	fd 2c       	mov	r15, r13
    1f0a:	f0 2d       	mov	r31, r0
    1f0c:	08 c0       	rjmp	.+16     	; 0x1f1e <Adc_start+0xae>
    1f0e:	0f 2e       	mov	r0, r31
    1f10:	c1 2c       	mov	r12, r1
    1f12:	f0 e4       	ldi	r31, 0x40	; 64
    1f14:	df 2e       	mov	r13, r31
    1f16:	fc e9       	ldi	r31, 0x9C	; 156
    1f18:	ef 2e       	mov	r14, r31
    1f1a:	fd 2c       	mov	r15, r13
    1f1c:	f0 2d       	mov	r31, r0
    1f1e:	eb 01       	movw	r28, r22
    1f20:	b9 01       	movw	r22, r18
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <__floatunsisf>
    1f2a:	a7 01       	movw	r20, r14
    1f2c:	96 01       	movw	r18, r12
    1f2e:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__mulsf3>
    1f32:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__fixunssfsi>
    1f36:	68 83       	st	Y, r22
    1f38:	79 83       	std	Y+1, r23	; 0x01
    1f3a:	8a 83       	std	Y+2, r24	; 0x02
    1f3c:	9b 83       	std	Y+3, r25	; 0x03
    1f3e:	86 b1       	in	r24, 0x06	; 6
    1f40:	80 61       	ori	r24, 0x10	; 16
    1f42:	86 b9       	out	0x06, r24	; 6
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	03 c0       	rjmp	.+6      	; 0x1f4e <Adc_start+0xde>
    1f48:	86 e0       	ldi	r24, 0x06	; 6
    1f4a:	01 c0       	rjmp	.+2      	; 0x1f4e <Adc_start+0xde>
    1f4c:	85 e0       	ldi	r24, 0x05	; 5
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	ff 90       	pop	r15
    1f54:	ef 90       	pop	r14
    1f56:	df 90       	pop	r13
    1f58:	cf 90       	pop	r12
    1f5a:	08 95       	ret

00001f5c <__vector_16>:

ISR(ADC_IRQ)
{
    1f5c:	1f 92       	push	r1
    1f5e:	0f 92       	push	r0
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	0f 92       	push	r0
    1f64:	11 24       	eor	r1, r1
    1f66:	2f 93       	push	r18
    1f68:	3f 93       	push	r19
    1f6a:	4f 93       	push	r20
    1f6c:	5f 93       	push	r21
    1f6e:	6f 93       	push	r22
    1f70:	7f 93       	push	r23
    1f72:	8f 93       	push	r24
    1f74:	9f 93       	push	r25
    1f76:	af 93       	push	r26
    1f78:	bf 93       	push	r27
    1f7a:	ef 93       	push	r30
    1f7c:	ff 93       	push	r31
	(*ADC_CallBackPtr)();
    1f7e:	e0 91 41 06 	lds	r30, 0x0641	; 0x800641 <ADC_CallBackPtr>
    1f82:	f0 91 42 06 	lds	r31, 0x0642	; 0x800642 <ADC_CallBackPtr+0x1>
    1f86:	09 95       	icall
    1f88:	ff 91       	pop	r31
    1f8a:	ef 91       	pop	r30
    1f8c:	bf 91       	pop	r27
    1f8e:	af 91       	pop	r26
    1f90:	9f 91       	pop	r25
    1f92:	8f 91       	pop	r24
    1f94:	7f 91       	pop	r23
    1f96:	6f 91       	pop	r22
    1f98:	5f 91       	pop	r21
    1f9a:	4f 91       	pop	r20
    1f9c:	3f 91       	pop	r19
    1f9e:	2f 91       	pop	r18
    1fa0:	0f 90       	pop	r0
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	0f 90       	pop	r0
    1fa6:	1f 90       	pop	r1
    1fa8:	18 95       	reti

00001faa <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
    1faa:	2f 92       	push	r2
    1fac:	3f 92       	push	r3
    1fae:	4f 92       	push	r4
    1fb0:	5f 92       	push	r5
    1fb2:	6f 92       	push	r6
    1fb4:	7f 92       	push	r7
    1fb6:	8f 92       	push	r8
    1fb8:	9f 92       	push	r9
    1fba:	af 92       	push	r10
    1fbc:	bf 92       	push	r11
    1fbe:	cf 92       	push	r12
    1fc0:	df 92       	push	r13
    1fc2:	ef 92       	push	r14
    1fc4:	ff 92       	push	r15
    1fc6:	0f 93       	push	r16
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <Delay_ms+0x26>
    1fd0:	00 d0       	rcall	.+0      	; 0x1fd2 <Delay_ms+0x28>
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <Delay_ms+0x2a>
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	22 2e       	mov	r2, r18
    1fda:	33 2e       	mov	r3, r19
    1fdc:	44 2e       	mov	r4, r20
    1fde:	55 2e       	mov	r5, r21
    1fe0:	66 2e       	mov	r6, r22
    1fe2:	79 83       	std	Y+1, r23	; 0x01
    1fe4:	8a 83       	std	Y+2, r24	; 0x02
    1fe6:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    1fe8:	91 2c       	mov	r9, r1
    1fea:	1d 82       	std	Y+5, r1	; 0x05
    1fec:	1c 82       	std	Y+4, r1	; 0x04
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	e0 e0       	ldi	r30, 0x00	; 0
    1ff4:	71 2c       	mov	r7, r1
    1ff6:	81 2c       	mov	r8, r1
    1ff8:	44 c0       	rjmp	.+136    	; 0x2082 <Delay_ms+0xd8>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
    1ffa:	2d 2d       	mov	r18, r13
    1ffc:	3e 2d       	mov	r19, r14
    1ffe:	4f 2d       	mov	r20, r15
    2000:	50 2f       	mov	r21, r16
    2002:	61 2f       	mov	r22, r17
    2004:	7a 2f       	mov	r23, r26
    2006:	8b 2d       	mov	r24, r11
    2008:	9c 2d       	mov	r25, r12
    200a:	a1 e0       	ldi	r26, 0x01	; 1
    200c:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <__adddi3_s8>
    2010:	d2 2e       	mov	r13, r18
    2012:	e3 2e       	mov	r14, r19
    2014:	f4 2e       	mov	r15, r20
    2016:	05 2f       	mov	r16, r21
    2018:	16 2f       	mov	r17, r22
    201a:	a7 2f       	mov	r26, r23
    201c:	b8 2e       	mov	r11, r24
    201e:	c9 2e       	mov	r12, r25
    2020:	0a c0       	rjmp	.+20     	; 0x2036 <Delay_ms+0x8c>
    2022:	d1 2c       	mov	r13, r1
    2024:	e1 2c       	mov	r14, r1
    2026:	f1 2c       	mov	r15, r1
    2028:	00 e0       	ldi	r16, 0x00	; 0
    202a:	10 e0       	ldi	r17, 0x00	; 0
    202c:	a0 e0       	ldi	r26, 0x00	; 0
    202e:	b1 2c       	mov	r11, r1
    2030:	c1 2c       	mov	r12, r1
    2032:	ad 80       	ldd	r10, Y+5	; 0x05
    2034:	ee 83       	std	Y+6, r30	; 0x06
    2036:	2d 2d       	mov	r18, r13
    2038:	3e 2d       	mov	r19, r14
    203a:	4f 2d       	mov	r20, r15
    203c:	50 2f       	mov	r21, r16
    203e:	61 2f       	mov	r22, r17
    2040:	7a 2f       	mov	r23, r26
    2042:	8b 2d       	mov	r24, r11
    2044:	9c 2d       	mov	r25, r12
    2046:	2b 38       	cpi	r18, 0x8B	; 139
    2048:	31 05       	cpc	r19, r1
    204a:	41 05       	cpc	r20, r1
    204c:	51 05       	cpc	r21, r1
    204e:	61 05       	cpc	r22, r1
    2050:	71 05       	cpc	r23, r1
    2052:	81 05       	cpc	r24, r1
    2054:	91 05       	cpc	r25, r1
    2056:	89 f2       	breq	.-94     	; 0x1ffa <Delay_ms+0x50>
    2058:	80 f2       	brcs	.-96     	; 0x1ffa <Delay_ms+0x50>
    205a:	ee 81       	ldd	r30, Y+6	; 0x06

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    205c:	29 2d       	mov	r18, r9
    205e:	3a 2d       	mov	r19, r10
    2060:	4c 81       	ldd	r20, Y+4	; 0x04
    2062:	5b 2f       	mov	r21, r27
    2064:	6f 2f       	mov	r22, r31
    2066:	7e 2f       	mov	r23, r30
    2068:	87 2d       	mov	r24, r7
    206a:	98 2d       	mov	r25, r8
    206c:	a1 e0       	ldi	r26, 0x01	; 1
    206e:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <__adddi3_s8>
    2072:	92 2e       	mov	r9, r18
    2074:	3d 83       	std	Y+5, r19	; 0x05
    2076:	4c 83       	std	Y+4, r20	; 0x04
    2078:	b5 2f       	mov	r27, r21
    207a:	f6 2f       	mov	r31, r22
    207c:	e7 2f       	mov	r30, r23
    207e:	78 2e       	mov	r7, r24
    2080:	89 2e       	mov	r8, r25
    2082:	29 2d       	mov	r18, r9
    2084:	3d 81       	ldd	r19, Y+5	; 0x05
    2086:	4c 81       	ldd	r20, Y+4	; 0x04
    2088:	5b 2f       	mov	r21, r27
    208a:	6f 2f       	mov	r22, r31
    208c:	7e 2f       	mov	r23, r30
    208e:	87 2d       	mov	r24, r7
    2090:	98 2d       	mov	r25, r8
    2092:	a2 2c       	mov	r10, r2
    2094:	b3 2c       	mov	r11, r3
    2096:	c4 2c       	mov	r12, r4
    2098:	d5 2c       	mov	r13, r5
    209a:	e6 2c       	mov	r14, r6
    209c:	f9 80       	ldd	r15, Y+1	; 0x01
    209e:	0a 81       	ldd	r16, Y+2	; 0x02
    20a0:	1b 81       	ldd	r17, Y+3	; 0x03
    20a2:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <__cmpdi2>
    20a6:	08 f4       	brcc	.+2      	; 0x20aa <Delay_ms+0x100>
    20a8:	bc cf       	rjmp	.-136    	; 0x2022 <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
    20aa:	26 96       	adiw	r28, 0x06	; 6
    20ac:	0f b6       	in	r0, 0x3f	; 63
    20ae:	f8 94       	cli
    20b0:	de bf       	out	0x3e, r29	; 62
    20b2:	0f be       	out	0x3f, r0	; 63
    20b4:	cd bf       	out	0x3d, r28	; 61
    20b6:	df 91       	pop	r29
    20b8:	cf 91       	pop	r28
    20ba:	1f 91       	pop	r17
    20bc:	0f 91       	pop	r16
    20be:	ff 90       	pop	r15
    20c0:	ef 90       	pop	r14
    20c2:	df 90       	pop	r13
    20c4:	cf 90       	pop	r12
    20c6:	bf 90       	pop	r11
    20c8:	af 90       	pop	r10
    20ca:	9f 90       	pop	r9
    20cc:	8f 90       	pop	r8
    20ce:	7f 90       	pop	r7
    20d0:	6f 90       	pop	r6
    20d2:	5f 90       	pop	r5
    20d4:	4f 90       	pop	r4
    20d6:	3f 90       	pop	r3
    20d8:	2f 90       	pop	r2
    20da:	08 95       	ret

000020dc <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
    20dc:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
    20de:	89 2b       	or	r24, r25
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <Dio_init+0x8>
    20e2:	e4 c0       	rjmp	.+456    	; 0x22ac <Dio_init+0x1d0>
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	d7 c0       	rjmp	.+430    	; 0x2296 <Dio_init+0x1ba>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
    20e8:	e9 2f       	mov	r30, r25
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	ee 0f       	add	r30, r30
    20ee:	ff 1f       	adc	r31, r31
    20f0:	ee 0f       	add	r30, r30
    20f2:	ff 1f       	adc	r31, r31
    20f4:	e4 0f       	add	r30, r20
    20f6:	f5 1f       	adc	r31, r21
    20f8:	31 81       	ldd	r19, Z+1	; 0x01
    20fa:	38 30       	cpi	r19, 0x08	; 8
    20fc:	08 f0       	brcs	.+2      	; 0x2100 <Dio_init+0x24>
    20fe:	d8 c0       	rjmp	.+432    	; 0x22b0 <Dio_init+0x1d4>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
    2100:	20 81       	ld	r18, Z
    2102:	21 30       	cpi	r18, 0x01	; 1
    2104:	c1 f1       	breq	.+112    	; 0x2176 <Dio_init+0x9a>
    2106:	38 f0       	brcs	.+14     	; 0x2116 <Dio_init+0x3a>
    2108:	22 30       	cpi	r18, 0x02	; 2
    210a:	09 f4       	brne	.+2      	; 0x210e <Dio_init+0x32>
    210c:	64 c0       	rjmp	.+200    	; 0x21d6 <Dio_init+0xfa>
    210e:	23 30       	cpi	r18, 0x03	; 3
    2110:	09 f4       	brne	.+2      	; 0x2114 <Dio_init+0x38>
    2112:	91 c0       	rjmp	.+290    	; 0x2236 <Dio_init+0x15a>
    2114:	cf c0       	rjmp	.+414    	; 0x22b4 <Dio_init+0x1d8>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2116:	2a b3       	in	r18, 0x1a	; 26
    2118:	61 e0       	ldi	r22, 0x01	; 1
    211a:	70 e0       	ldi	r23, 0x00	; 0
    211c:	db 01       	movw	r26, r22
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <Dio_init+0x48>
    2120:	aa 0f       	add	r26, r26
    2122:	bb 1f       	adc	r27, r27
    2124:	3a 95       	dec	r19
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <Dio_init+0x44>
    2128:	8a 2f       	mov	r24, r26
    212a:	80 95       	com	r24
    212c:	82 23       	and	r24, r18
    212e:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2130:	aa b3       	in	r26, 0x1a	; 26
    2132:	82 81       	ldd	r24, Z+2	; 0x02
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	01 80       	ldd	r0, Z+1	; 0x01
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <Dio_init+0x64>
    213c:	22 0f       	add	r18, r18
    213e:	33 1f       	adc	r19, r19
    2140:	0a 94       	dec	r0
    2142:	e2 f7       	brpl	.-8      	; 0x213c <Dio_init+0x60>
    2144:	2a 2b       	or	r18, r26
    2146:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2148:	8b b3       	in	r24, 0x1b	; 27
    214a:	01 80       	ldd	r0, Z+1	; 0x01
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <Dio_init+0x76>
    214e:	66 0f       	add	r22, r22
    2150:	77 1f       	adc	r23, r23
    2152:	0a 94       	dec	r0
    2154:	e2 f7       	brpl	.-8      	; 0x214e <Dio_init+0x72>
    2156:	60 95       	com	r22
    2158:	68 23       	and	r22, r24
    215a:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    215c:	6b b3       	in	r22, 0x1b	; 27
    215e:	83 81       	ldd	r24, Z+3	; 0x03
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	01 80       	ldd	r0, Z+1	; 0x01
    2166:	02 c0       	rjmp	.+4      	; 0x216c <Dio_init+0x90>
    2168:	22 0f       	add	r18, r18
    216a:	33 1f       	adc	r19, r19
    216c:	0a 94       	dec	r0
    216e:	e2 f7       	brpl	.-8      	; 0x2168 <Dio_init+0x8c>
    2170:	26 2b       	or	r18, r22
    2172:	2b bb       	out	0x1b, r18	; 27
				break;
    2174:	8f c0       	rjmp	.+286    	; 0x2294 <Dio_init+0x1b8>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2176:	27 b3       	in	r18, 0x17	; 23
    2178:	61 e0       	ldi	r22, 0x01	; 1
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	db 01       	movw	r26, r22
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <Dio_init+0xa8>
    2180:	aa 0f       	add	r26, r26
    2182:	bb 1f       	adc	r27, r27
    2184:	3a 95       	dec	r19
    2186:	e2 f7       	brpl	.-8      	; 0x2180 <Dio_init+0xa4>
    2188:	8a 2f       	mov	r24, r26
    218a:	80 95       	com	r24
    218c:	82 23       	and	r24, r18
    218e:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2190:	a7 b3       	in	r26, 0x17	; 23
    2192:	82 81       	ldd	r24, Z+2	; 0x02
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	01 80       	ldd	r0, Z+1	; 0x01
    219a:	02 c0       	rjmp	.+4      	; 0x21a0 <Dio_init+0xc4>
    219c:	22 0f       	add	r18, r18
    219e:	33 1f       	adc	r19, r19
    21a0:	0a 94       	dec	r0
    21a2:	e2 f7       	brpl	.-8      	; 0x219c <Dio_init+0xc0>
    21a4:	2a 2b       	or	r18, r26
    21a6:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    21a8:	88 b3       	in	r24, 0x18	; 24
    21aa:	01 80       	ldd	r0, Z+1	; 0x01
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <Dio_init+0xd6>
    21ae:	66 0f       	add	r22, r22
    21b0:	77 1f       	adc	r23, r23
    21b2:	0a 94       	dec	r0
    21b4:	e2 f7       	brpl	.-8      	; 0x21ae <Dio_init+0xd2>
    21b6:	60 95       	com	r22
    21b8:	68 23       	and	r22, r24
    21ba:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    21bc:	68 b3       	in	r22, 0x18	; 24
    21be:	83 81       	ldd	r24, Z+3	; 0x03
    21c0:	28 2f       	mov	r18, r24
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	01 80       	ldd	r0, Z+1	; 0x01
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <Dio_init+0xf0>
    21c8:	22 0f       	add	r18, r18
    21ca:	33 1f       	adc	r19, r19
    21cc:	0a 94       	dec	r0
    21ce:	e2 f7       	brpl	.-8      	; 0x21c8 <Dio_init+0xec>
    21d0:	26 2b       	or	r18, r22
    21d2:	28 bb       	out	0x18, r18	; 24
				break;
    21d4:	5f c0       	rjmp	.+190    	; 0x2294 <Dio_init+0x1b8>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    21d6:	24 b3       	in	r18, 0x14	; 20
    21d8:	61 e0       	ldi	r22, 0x01	; 1
    21da:	70 e0       	ldi	r23, 0x00	; 0
    21dc:	db 01       	movw	r26, r22
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <Dio_init+0x108>
    21e0:	aa 0f       	add	r26, r26
    21e2:	bb 1f       	adc	r27, r27
    21e4:	3a 95       	dec	r19
    21e6:	e2 f7       	brpl	.-8      	; 0x21e0 <Dio_init+0x104>
    21e8:	8a 2f       	mov	r24, r26
    21ea:	80 95       	com	r24
    21ec:	82 23       	and	r24, r18
    21ee:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    21f0:	a4 b3       	in	r26, 0x14	; 20
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	28 2f       	mov	r18, r24
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	01 80       	ldd	r0, Z+1	; 0x01
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <Dio_init+0x124>
    21fc:	22 0f       	add	r18, r18
    21fe:	33 1f       	adc	r19, r19
    2200:	0a 94       	dec	r0
    2202:	e2 f7       	brpl	.-8      	; 0x21fc <Dio_init+0x120>
    2204:	2a 2b       	or	r18, r26
    2206:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2208:	85 b3       	in	r24, 0x15	; 21
    220a:	01 80       	ldd	r0, Z+1	; 0x01
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <Dio_init+0x136>
    220e:	66 0f       	add	r22, r22
    2210:	77 1f       	adc	r23, r23
    2212:	0a 94       	dec	r0
    2214:	e2 f7       	brpl	.-8      	; 0x220e <Dio_init+0x132>
    2216:	60 95       	com	r22
    2218:	68 23       	and	r22, r24
    221a:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    221c:	65 b3       	in	r22, 0x15	; 21
    221e:	83 81       	ldd	r24, Z+3	; 0x03
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	01 80       	ldd	r0, Z+1	; 0x01
    2226:	02 c0       	rjmp	.+4      	; 0x222c <Dio_init+0x150>
    2228:	22 0f       	add	r18, r18
    222a:	33 1f       	adc	r19, r19
    222c:	0a 94       	dec	r0
    222e:	e2 f7       	brpl	.-8      	; 0x2228 <Dio_init+0x14c>
    2230:	26 2b       	or	r18, r22
    2232:	25 bb       	out	0x15, r18	; 21
				break;
    2234:	2f c0       	rjmp	.+94     	; 0x2294 <Dio_init+0x1b8>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2236:	21 b3       	in	r18, 0x11	; 17
    2238:	61 e0       	ldi	r22, 0x01	; 1
    223a:	70 e0       	ldi	r23, 0x00	; 0
    223c:	db 01       	movw	r26, r22
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <Dio_init+0x168>
    2240:	aa 0f       	add	r26, r26
    2242:	bb 1f       	adc	r27, r27
    2244:	3a 95       	dec	r19
    2246:	e2 f7       	brpl	.-8      	; 0x2240 <Dio_init+0x164>
    2248:	8a 2f       	mov	r24, r26
    224a:	80 95       	com	r24
    224c:	82 23       	and	r24, r18
    224e:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2250:	a1 b3       	in	r26, 0x11	; 17
    2252:	82 81       	ldd	r24, Z+2	; 0x02
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	01 80       	ldd	r0, Z+1	; 0x01
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <Dio_init+0x184>
    225c:	22 0f       	add	r18, r18
    225e:	33 1f       	adc	r19, r19
    2260:	0a 94       	dec	r0
    2262:	e2 f7       	brpl	.-8      	; 0x225c <Dio_init+0x180>
    2264:	2a 2b       	or	r18, r26
    2266:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2268:	82 b3       	in	r24, 0x12	; 18
    226a:	01 80       	ldd	r0, Z+1	; 0x01
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <Dio_init+0x196>
    226e:	66 0f       	add	r22, r22
    2270:	77 1f       	adc	r23, r23
    2272:	0a 94       	dec	r0
    2274:	e2 f7       	brpl	.-8      	; 0x226e <Dio_init+0x192>
    2276:	60 95       	com	r22
    2278:	68 23       	and	r22, r24
    227a:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    227c:	62 b3       	in	r22, 0x12	; 18
    227e:	83 81       	ldd	r24, Z+3	; 0x03
    2280:	28 2f       	mov	r18, r24
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	01 80       	ldd	r0, Z+1	; 0x01
    2286:	02 c0       	rjmp	.+4      	; 0x228c <Dio_init+0x1b0>
    2288:	22 0f       	add	r18, r18
    228a:	33 1f       	adc	r19, r19
    228c:	0a 94       	dec	r0
    228e:	e2 f7       	brpl	.-8      	; 0x2288 <Dio_init+0x1ac>
    2290:	26 2b       	or	r18, r22
    2292:	22 bb       	out	0x12, r18	; 18
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
    2294:	9f 5f       	subi	r25, 0xFF	; 255
    2296:	94 31       	cpi	r25, 0x14	; 20
    2298:	08 f4       	brcc	.+2      	; 0x229c <Dio_init+0x1c0>
    229a:	26 cf       	rjmp	.-436    	; 0x20e8 <Dio_init+0xc>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
    229c:	50 93 45 06 	sts	0x0645, r21	; 0x800645 <pstrDio_pinsConfig+0x1>
    22a0:	40 93 44 06 	sts	0x0644, r20	; 0x800644 <pstrDio_pinsConfig>
	u8_Dio_Status = DIO_INITIALIZED;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	80 93 43 06 	sts	0x0643, r24	; 0x800643 <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
    22aa:	08 95       	ret
{
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
    22ac:	85 e0       	ldi	r24, 0x05	; 5
    22ae:	08 95       	ret
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
    22b0:	83 e0       	ldi	r24, 0x03	; 3
    22b2:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
    22b4:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
    22b6:	08 95       	ret

000022b8 <Dio_writePin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    22b8:	85 31       	cpi	r24, 0x15	; 21
    22ba:	08 f0       	brcs	.+2      	; 0x22be <Dio_writePin+0x6>
    22bc:	90 c0       	rjmp	.+288    	; 0x23de <Dio_writePin+0x126>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    22be:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <u8_Dio_Status>
    22c2:	99 23       	and	r25, r25
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <Dio_writePin+0x10>
    22c6:	8d c0       	rjmp	.+282    	; 0x23e2 <Dio_writePin+0x12a>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    22c8:	e8 2f       	mov	r30, r24
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	cf 01       	movw	r24, r30
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <pstrDio_pinsConfig>
    22da:	f0 91 45 06 	lds	r31, 0x0645	; 0x800645 <pstrDio_pinsConfig+0x1>
    22de:	e8 0f       	add	r30, r24
    22e0:	f9 1f       	adc	r31, r25
    22e2:	80 81       	ld	r24, Z
    22e4:	81 30       	cpi	r24, 0x01	; 1
    22e6:	21 f1       	breq	.+72     	; 0x2330 <Dio_writePin+0x78>
    22e8:	30 f0       	brcs	.+12     	; 0x22f6 <Dio_writePin+0x3e>
    22ea:	82 30       	cpi	r24, 0x02	; 2
    22ec:	f1 f1       	breq	.+124    	; 0x236a <Dio_writePin+0xb2>
    22ee:	83 30       	cpi	r24, 0x03	; 3
    22f0:	09 f4       	brne	.+2      	; 0x22f4 <Dio_writePin+0x3c>
    22f2:	58 c0       	rjmp	.+176    	; 0x23a4 <Dio_writePin+0xec>
    22f4:	78 c0       	rjmp	.+240    	; 0x23e6 <Dio_writePin+0x12e>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
    22f6:	61 30       	cpi	r22, 0x01	; 1
    22f8:	69 f4       	brne	.+26     	; 0x2314 <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    22fa:	2b b3       	in	r18, 0x1b	; 27
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	01 80       	ldd	r0, Z+1	; 0x01
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <Dio_writePin+0x50>
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	0a 94       	dec	r0
    230a:	e2 f7       	brpl	.-8      	; 0x2304 <Dio_writePin+0x4c>
    230c:	82 2b       	or	r24, r18
    230e:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2314:	2b b3       	in	r18, 0x1b	; 27
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	01 80       	ldd	r0, Z+1	; 0x01
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <Dio_writePin+0x6a>
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	0a 94       	dec	r0
    2324:	e2 f7       	brpl	.-8      	; 0x231e <Dio_writePin+0x66>
    2326:	80 95       	com	r24
    2328:	82 23       	and	r24, r18
    232a:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
    2330:	61 30       	cpi	r22, 0x01	; 1
    2332:	69 f4       	brne	.+26     	; 0x234e <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2334:	28 b3       	in	r18, 0x18	; 24
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	01 80       	ldd	r0, Z+1	; 0x01
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <Dio_writePin+0x8a>
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	0a 94       	dec	r0
    2344:	e2 f7       	brpl	.-8      	; 0x233e <Dio_writePin+0x86>
    2346:	82 2b       	or	r24, r18
    2348:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    234e:	28 b3       	in	r18, 0x18	; 24
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	01 80       	ldd	r0, Z+1	; 0x01
    2356:	02 c0       	rjmp	.+4      	; 0x235c <Dio_writePin+0xa4>
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	0a 94       	dec	r0
    235e:	e2 f7       	brpl	.-8      	; 0x2358 <Dio_writePin+0xa0>
    2360:	80 95       	com	r24
    2362:	82 23       	and	r24, r18
    2364:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
    236a:	61 30       	cpi	r22, 0x01	; 1
    236c:	69 f4       	brne	.+26     	; 0x2388 <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    236e:	25 b3       	in	r18, 0x15	; 21
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	01 80       	ldd	r0, Z+1	; 0x01
    2376:	02 c0       	rjmp	.+4      	; 0x237c <Dio_writePin+0xc4>
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	0a 94       	dec	r0
    237e:	e2 f7       	brpl	.-8      	; 0x2378 <Dio_writePin+0xc0>
    2380:	82 2b       	or	r24, r18
    2382:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2388:	25 b3       	in	r18, 0x15	; 21
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	01 80       	ldd	r0, Z+1	; 0x01
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <Dio_writePin+0xde>
    2392:	88 0f       	add	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	0a 94       	dec	r0
    2398:	e2 f7       	brpl	.-8      	; 0x2392 <Dio_writePin+0xda>
    239a:	80 95       	com	r24
    239c:	82 23       	and	r24, r18
    239e:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
    23a4:	61 30       	cpi	r22, 0x01	; 1
    23a6:	69 f4       	brne	.+26     	; 0x23c2 <Dio_writePin+0x10a>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    23a8:	22 b3       	in	r18, 0x12	; 18
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	01 80       	ldd	r0, Z+1	; 0x01
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <Dio_writePin+0xfe>
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	0a 94       	dec	r0
    23b8:	e2 f7       	brpl	.-8      	; 0x23b2 <Dio_writePin+0xfa>
    23ba:	82 2b       	or	r24, r18
    23bc:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    23c2:	22 b3       	in	r18, 0x12	; 18
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	01 80       	ldd	r0, Z+1	; 0x01
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <Dio_writePin+0x118>
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	0a 94       	dec	r0
    23d2:	e2 f7       	brpl	.-8      	; 0x23cc <Dio_writePin+0x114>
    23d4:	80 95       	com	r24
    23d6:	82 23       	and	r24, r18
    23d8:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	08 95       	ret
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    23de:	82 e0       	ldi	r24, 0x02	; 2
    23e0:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    23e2:	86 e0       	ldi	r24, 0x06	; 6
    23e4:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    23e6:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
    23e8:	08 95       	ret

000023ea <Dio_togglePin>:
* Description: Function to Toggle data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    23ea:	85 31       	cpi	r24, 0x15	; 21
    23ec:	08 f0       	brcs	.+2      	; 0x23f0 <Dio_togglePin+0x6>
    23ee:	4f c0       	rjmp	.+158    	; 0x248e <Dio_togglePin+0xa4>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    23f0:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <u8_Dio_Status>
    23f4:	99 23       	and	r25, r25
    23f6:	09 f4       	brne	.+2      	; 0x23fa <Dio_togglePin+0x10>
    23f8:	4c c0       	rjmp	.+152    	; 0x2492 <Dio_togglePin+0xa8>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    23fa:	e8 2f       	mov	r30, r24
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	cf 01       	movw	r24, r30
    2400:	88 0f       	add	r24, r24
    2402:	99 1f       	adc	r25, r25
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <pstrDio_pinsConfig>
    240c:	f0 91 45 06 	lds	r31, 0x0645	; 0x800645 <pstrDio_pinsConfig+0x1>
    2410:	e8 0f       	add	r30, r24
    2412:	f9 1f       	adc	r31, r25
    2414:	80 81       	ld	r24, Z
    2416:	81 30       	cpi	r24, 0x01	; 1
    2418:	99 f0       	breq	.+38     	; 0x2440 <Dio_togglePin+0x56>
    241a:	28 f0       	brcs	.+10     	; 0x2426 <Dio_togglePin+0x3c>
    241c:	82 30       	cpi	r24, 0x02	; 2
    241e:	e9 f0       	breq	.+58     	; 0x245a <Dio_togglePin+0x70>
    2420:	83 30       	cpi	r24, 0x03	; 3
    2422:	41 f1       	breq	.+80     	; 0x2474 <Dio_togglePin+0x8a>
    2424:	38 c0       	rjmp	.+112    	; 0x2496 <Dio_togglePin+0xac>
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2426:	2b b3       	in	r18, 0x1b	; 27
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	01 80       	ldd	r0, Z+1	; 0x01
    242e:	02 c0       	rjmp	.+4      	; 0x2434 <Dio_togglePin+0x4a>
    2430:	88 0f       	add	r24, r24
    2432:	99 1f       	adc	r25, r25
    2434:	0a 94       	dec	r0
    2436:	e2 f7       	brpl	.-8      	; 0x2430 <Dio_togglePin+0x46>
    2438:	82 27       	eor	r24, r18
    243a:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    243c:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    243e:	08 95       	ret
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2440:	28 b3       	in	r18, 0x18	; 24
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	01 80       	ldd	r0, Z+1	; 0x01
    2448:	02 c0       	rjmp	.+4      	; 0x244e <Dio_togglePin+0x64>
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	0a 94       	dec	r0
    2450:	e2 f7       	brpl	.-8      	; 0x244a <Dio_togglePin+0x60>
    2452:	82 27       	eor	r24, r18
    2454:	88 bb       	out	0x18, r24	; 24
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    2456:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    2458:	08 95       	ret
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    245a:	25 b3       	in	r18, 0x15	; 21
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	01 80       	ldd	r0, Z+1	; 0x01
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <Dio_togglePin+0x7e>
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	0a 94       	dec	r0
    246a:	e2 f7       	brpl	.-8      	; 0x2464 <Dio_togglePin+0x7a>
    246c:	82 27       	eor	r24, r18
    246e:	85 bb       	out	0x15, r24	; 21
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    2470:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    2472:	08 95       	ret
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2474:	22 b3       	in	r18, 0x12	; 18
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	01 80       	ldd	r0, Z+1	; 0x01
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <Dio_togglePin+0x98>
    247e:	88 0f       	add	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	0a 94       	dec	r0
    2484:	e2 f7       	brpl	.-8      	; 0x247e <Dio_togglePin+0x94>
    2486:	82 27       	eor	r24, r18
    2488:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    248a:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    248c:	08 95       	ret
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    248e:	82 e0       	ldi	r24, 0x02	; 2
    2490:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    2492:	86 e0       	ldi	r24, 0x06	; 6
    2494:	08 95       	ret
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    2496:	84 e0       	ldi	r24, 0x04	; 4
	}	
	return DIO_STATUS_ERROR_OK;
}
    2498:	08 95       	ret

0000249a <Dio_readPin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    249a:	85 31       	cpi	r24, 0x15	; 21
    249c:	08 f0       	brcs	.+2      	; 0x24a0 <Dio_readPin+0x6>
    249e:	7c c0       	rjmp	.+248    	; 0x2598 <Dio_readPin+0xfe>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    24a0:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <u8_Dio_Status>
    24a4:	99 23       	and	r25, r25
    24a6:	09 f4       	brne	.+2      	; 0x24aa <Dio_readPin+0x10>
    24a8:	79 c0       	rjmp	.+242    	; 0x259c <Dio_readPin+0x102>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    24aa:	e8 2f       	mov	r30, r24
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	cf 01       	movw	r24, r30
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	88 0f       	add	r24, r24
    24b6:	99 1f       	adc	r25, r25
    24b8:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <pstrDio_pinsConfig>
    24bc:	f0 91 45 06 	lds	r31, 0x0645	; 0x800645 <pstrDio_pinsConfig+0x1>
    24c0:	e8 0f       	add	r30, r24
    24c2:	f9 1f       	adc	r31, r25
    24c4:	80 81       	ld	r24, Z
    24c6:	81 30       	cpi	r24, 0x01	; 1
    24c8:	f9 f0       	breq	.+62     	; 0x2508 <Dio_readPin+0x6e>
    24ca:	30 f0       	brcs	.+12     	; 0x24d8 <Dio_readPin+0x3e>
    24cc:	82 30       	cpi	r24, 0x02	; 2
    24ce:	a1 f1       	breq	.+104    	; 0x2538 <Dio_readPin+0x9e>
    24d0:	83 30       	cpi	r24, 0x03	; 3
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <Dio_readPin+0x3c>
    24d4:	49 c0       	rjmp	.+146    	; 0x2568 <Dio_readPin+0xce>
    24d6:	64 c0       	rjmp	.+200    	; 0x25a0 <Dio_readPin+0x106>
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    24d8:	49 b3       	in	r20, 0x19	; 25
    24da:	51 81       	ldd	r21, Z+1	; 0x01
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9c 01       	movw	r18, r24
    24e2:	05 2e       	mov	r0, r21
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <Dio_readPin+0x50>
    24e6:	22 0f       	add	r18, r18
    24e8:	33 1f       	adc	r19, r19
    24ea:	0a 94       	dec	r0
    24ec:	e2 f7       	brpl	.-8      	; 0x24e6 <Dio_readPin+0x4c>
    24ee:	84 2f       	mov	r24, r20
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	82 23       	and	r24, r18
    24f4:	93 23       	and	r25, r19
    24f6:	02 c0       	rjmp	.+4      	; 0x24fc <Dio_readPin+0x62>
    24f8:	95 95       	asr	r25
    24fa:	87 95       	ror	r24
    24fc:	5a 95       	dec	r21
    24fe:	e2 f7       	brpl	.-8      	; 0x24f8 <Dio_readPin+0x5e>
    2500:	fb 01       	movw	r30, r22
    2502:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2504:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2506:	08 95       	ret
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2508:	46 b3       	in	r20, 0x16	; 22
    250a:	51 81       	ldd	r21, Z+1	; 0x01
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9c 01       	movw	r18, r24
    2512:	05 2e       	mov	r0, r21
    2514:	02 c0       	rjmp	.+4      	; 0x251a <Dio_readPin+0x80>
    2516:	22 0f       	add	r18, r18
    2518:	33 1f       	adc	r19, r19
    251a:	0a 94       	dec	r0
    251c:	e2 f7       	brpl	.-8      	; 0x2516 <Dio_readPin+0x7c>
    251e:	84 2f       	mov	r24, r20
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	82 23       	and	r24, r18
    2524:	93 23       	and	r25, r19
    2526:	02 c0       	rjmp	.+4      	; 0x252c <Dio_readPin+0x92>
    2528:	95 95       	asr	r25
    252a:	87 95       	ror	r24
    252c:	5a 95       	dec	r21
    252e:	e2 f7       	brpl	.-8      	; 0x2528 <Dio_readPin+0x8e>
    2530:	fb 01       	movw	r30, r22
    2532:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2534:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2536:	08 95       	ret
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2538:	43 b3       	in	r20, 0x13	; 19
    253a:	51 81       	ldd	r21, Z+1	; 0x01
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	9c 01       	movw	r18, r24
    2542:	05 2e       	mov	r0, r21
    2544:	02 c0       	rjmp	.+4      	; 0x254a <Dio_readPin+0xb0>
    2546:	22 0f       	add	r18, r18
    2548:	33 1f       	adc	r19, r19
    254a:	0a 94       	dec	r0
    254c:	e2 f7       	brpl	.-8      	; 0x2546 <Dio_readPin+0xac>
    254e:	84 2f       	mov	r24, r20
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	82 23       	and	r24, r18
    2554:	93 23       	and	r25, r19
    2556:	02 c0       	rjmp	.+4      	; 0x255c <Dio_readPin+0xc2>
    2558:	95 95       	asr	r25
    255a:	87 95       	ror	r24
    255c:	5a 95       	dec	r21
    255e:	e2 f7       	brpl	.-8      	; 0x2558 <Dio_readPin+0xbe>
    2560:	fb 01       	movw	r30, r22
    2562:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2564:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2566:	08 95       	ret
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2568:	40 b3       	in	r20, 0x10	; 16
    256a:	51 81       	ldd	r21, Z+1	; 0x01
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9c 01       	movw	r18, r24
    2572:	05 2e       	mov	r0, r21
    2574:	02 c0       	rjmp	.+4      	; 0x257a <Dio_readPin+0xe0>
    2576:	22 0f       	add	r18, r18
    2578:	33 1f       	adc	r19, r19
    257a:	0a 94       	dec	r0
    257c:	e2 f7       	brpl	.-8      	; 0x2576 <Dio_readPin+0xdc>
    257e:	84 2f       	mov	r24, r20
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	82 23       	and	r24, r18
    2584:	93 23       	and	r25, r19
    2586:	02 c0       	rjmp	.+4      	; 0x258c <Dio_readPin+0xf2>
    2588:	95 95       	asr	r25
    258a:	87 95       	ror	r24
    258c:	5a 95       	dec	r21
    258e:	e2 f7       	brpl	.-8      	; 0x2588 <Dio_readPin+0xee>
    2590:	fb 01       	movw	r30, r22
    2592:	80 83       	st	Z, r24
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2594:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2596:	08 95       	ret
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    2598:	82 e0       	ldi	r24, 0x02	; 2
    259a:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    259c:	86 e0       	ldi	r24, 0x06	; 6
    259e:	08 95       	ret
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    25a0:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
    25a2:	08 95       	ret

000025a4 <__vector_1>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
    25a4:	1f 92       	push	r1
    25a6:	0f 92       	push	r0
    25a8:	0f b6       	in	r0, 0x3f	; 63
    25aa:	0f 92       	push	r0
    25ac:	11 24       	eor	r1, r1
    25ae:	2f 93       	push	r18
    25b0:	3f 93       	push	r19
    25b2:	4f 93       	push	r20
    25b4:	5f 93       	push	r21
    25b6:	6f 93       	push	r22
    25b8:	7f 93       	push	r23
    25ba:	8f 93       	push	r24
    25bc:	9f 93       	push	r25
    25be:	af 93       	push	r26
    25c0:	bf 93       	push	r27
    25c2:	ef 93       	push	r30
    25c4:	ff 93       	push	r31
    25c6:	e0 91 4a 06 	lds	r30, 0x064A	; 0x80064a <INT0_CallBackPtr>
    25ca:	f0 91 4b 06 	lds	r31, 0x064B	; 0x80064b <INT0_CallBackPtr+0x1>
    25ce:	09 95       	icall
    25d0:	ff 91       	pop	r31
    25d2:	ef 91       	pop	r30
    25d4:	bf 91       	pop	r27
    25d6:	af 91       	pop	r26
    25d8:	9f 91       	pop	r25
    25da:	8f 91       	pop	r24
    25dc:	7f 91       	pop	r23
    25de:	6f 91       	pop	r22
    25e0:	5f 91       	pop	r21
    25e2:	4f 91       	pop	r20
    25e4:	3f 91       	pop	r19
    25e6:	2f 91       	pop	r18
    25e8:	0f 90       	pop	r0
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	0f 90       	pop	r0
    25ee:	1f 90       	pop	r1
    25f0:	18 95       	reti

000025f2 <__vector_2>:
    25f2:	1f 92       	push	r1
    25f4:	0f 92       	push	r0
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	0f 92       	push	r0
    25fa:	11 24       	eor	r1, r1
    25fc:	2f 93       	push	r18
    25fe:	3f 93       	push	r19
    2600:	4f 93       	push	r20
    2602:	5f 93       	push	r21
    2604:	6f 93       	push	r22
    2606:	7f 93       	push	r23
    2608:	8f 93       	push	r24
    260a:	9f 93       	push	r25
    260c:	af 93       	push	r26
    260e:	bf 93       	push	r27
    2610:	ef 93       	push	r30
    2612:	ff 93       	push	r31
    2614:	e0 91 48 06 	lds	r30, 0x0648	; 0x800648 <INT1_CallBackPtr>
    2618:	f0 91 49 06 	lds	r31, 0x0649	; 0x800649 <INT1_CallBackPtr+0x1>
    261c:	09 95       	icall
    261e:	ff 91       	pop	r31
    2620:	ef 91       	pop	r30
    2622:	bf 91       	pop	r27
    2624:	af 91       	pop	r26
    2626:	9f 91       	pop	r25
    2628:	8f 91       	pop	r24
    262a:	7f 91       	pop	r23
    262c:	6f 91       	pop	r22
    262e:	5f 91       	pop	r21
    2630:	4f 91       	pop	r20
    2632:	3f 91       	pop	r19
    2634:	2f 91       	pop	r18
    2636:	0f 90       	pop	r0
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	0f 90       	pop	r0
    263c:	1f 90       	pop	r1
    263e:	18 95       	reti

00002640 <__vector_3>:
}
ISR(INT2_IRQ)
{
    2640:	1f 92       	push	r1
    2642:	0f 92       	push	r0
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	0f 92       	push	r0
    2648:	11 24       	eor	r1, r1
    264a:	2f 93       	push	r18
    264c:	3f 93       	push	r19
    264e:	4f 93       	push	r20
    2650:	5f 93       	push	r21
    2652:	6f 93       	push	r22
    2654:	7f 93       	push	r23
    2656:	8f 93       	push	r24
    2658:	9f 93       	push	r25
    265a:	af 93       	push	r26
    265c:	bf 93       	push	r27
    265e:	ef 93       	push	r30
    2660:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
    2662:	e0 91 46 06 	lds	r30, 0x0646	; 0x800646 <INT2_CallBackPtr>
    2666:	f0 91 47 06 	lds	r31, 0x0647	; 0x800647 <INT2_CallBackPtr+0x1>
    266a:	09 95       	icall
}
    266c:	ff 91       	pop	r31
    266e:	ef 91       	pop	r30
    2670:	bf 91       	pop	r27
    2672:	af 91       	pop	r26
    2674:	9f 91       	pop	r25
    2676:	8f 91       	pop	r24
    2678:	7f 91       	pop	r23
    267a:	6f 91       	pop	r22
    267c:	5f 91       	pop	r21
    267e:	4f 91       	pop	r20
    2680:	3f 91       	pop	r19
    2682:	2f 91       	pop	r18
    2684:	0f 90       	pop	r0
    2686:	0f be       	out	0x3f, r0	; 63
    2688:	0f 90       	pop	r0
    268a:	1f 90       	pop	r1
    268c:	18 95       	reti

0000268e <Gpt_ISRHandler>:
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_EXPIRED;
	return GPT_STATUS_ERROR_OK;
}
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	0e c0       	rjmp	.+28     	; 0x26ae <Gpt_ISRHandler+0x20>
    2692:	29 2f       	mov	r18, r25
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	f9 01       	movw	r30, r18
    2698:	ee 0f       	add	r30, r30
    269a:	ff 1f       	adc	r31, r31
    269c:	2e 0f       	add	r18, r30
    269e:	3f 1f       	adc	r19, r31
    26a0:	f9 01       	movw	r30, r18
    26a2:	e4 51       	subi	r30, 0x14	; 20
    26a4:	fb 4f       	sbci	r31, 0xFB	; 251
    26a6:	20 81       	ld	r18, Z
    26a8:	28 17       	cp	r18, r24
    26aa:	19 f0       	breq	.+6      	; 0x26b2 <Gpt_ISRHandler+0x24>
    26ac:	9f 5f       	subi	r25, 0xFF	; 255
    26ae:	99 23       	and	r25, r25
    26b0:	81 f3       	breq	.-32     	; 0x2692 <Gpt_ISRHandler+0x4>
    26b2:	89 2f       	mov	r24, r25
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	fc 01       	movw	r30, r24
    26b8:	ee 0f       	add	r30, r30
    26ba:	ff 1f       	adc	r31, r31
    26bc:	ee 0f       	add	r30, r30
    26be:	ff 1f       	adc	r31, r31
    26c0:	e3 5b       	subi	r30, 0xB3	; 179
    26c2:	f9 4f       	sbci	r31, 0xF9	; 249
    26c4:	40 81       	ld	r20, Z
    26c6:	51 81       	ldd	r21, Z+1	; 0x01
    26c8:	62 81       	ldd	r22, Z+2	; 0x02
    26ca:	73 81       	ldd	r23, Z+3	; 0x03
    26cc:	41 15       	cp	r20, r1
    26ce:	51 05       	cpc	r21, r1
    26d0:	61 05       	cpc	r22, r1
    26d2:	71 05       	cpc	r23, r1
    26d4:	81 f0       	breq	.+32     	; 0x26f6 <Gpt_ISRHandler+0x68>
    26d6:	88 0f       	add	r24, r24
    26d8:	99 1f       	adc	r25, r25
    26da:	88 0f       	add	r24, r24
    26dc:	99 1f       	adc	r25, r25
    26de:	fc 01       	movw	r30, r24
    26e0:	e3 5b       	subi	r30, 0xB3	; 179
    26e2:	f9 4f       	sbci	r31, 0xF9	; 249
    26e4:	41 50       	subi	r20, 0x01	; 1
    26e6:	51 09       	sbc	r21, r1
    26e8:	61 09       	sbc	r22, r1
    26ea:	71 09       	sbc	r23, r1
    26ec:	40 83       	st	Z, r20
    26ee:	51 83       	std	Z+1, r21	; 0x01
    26f0:	62 83       	std	Z+2, r22	; 0x02
    26f2:	73 83       	std	Z+3, r23	; 0x03
    26f4:	08 95       	ret
    26f6:	23 b7       	in	r18, 0x33	; 51
    26f8:	2e 7f       	andi	r18, 0xFE	; 254
    26fa:	23 bf       	out	0x33, r18	; 51
    26fc:	23 b7       	in	r18, 0x33	; 51
    26fe:	2d 7f       	andi	r18, 0xFD	; 253
    2700:	23 bf       	out	0x33, r18	; 51
    2702:	23 b7       	in	r18, 0x33	; 51
    2704:	2b 7f       	andi	r18, 0xFB	; 251
    2706:	23 bf       	out	0x33, r18	; 51
    2708:	29 b7       	in	r18, 0x39	; 57
    270a:	2e 7f       	andi	r18, 0xFE	; 254
    270c:	29 bf       	out	0x39, r18	; 57
    270e:	fc 01       	movw	r30, r24
    2710:	ef 5a       	subi	r30, 0xAF	; 175
    2712:	f9 4f       	sbci	r31, 0xF9	; 249
    2714:	24 e0       	ldi	r18, 0x04	; 4
    2716:	20 83       	st	Z, r18
    2718:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <Gpt_Timer0_CallBackPtr>
    271c:	f0 91 53 06 	lds	r31, 0x0653	; 0x800653 <Gpt_Timer0_CallBackPtr+0x1>
    2720:	09 95       	icall
    2722:	08 95       	ret

00002724 <GptInit>:
    2724:	80 91 4c 06 	lds	r24, 0x064C	; 0x80064c <genu_GPTModStatus>
    2728:	81 30       	cpi	r24, 0x01	; 1
    272a:	61 f1       	breq	.+88     	; 0x2784 <GptInit+0x60>
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	24 c0       	rjmp	.+72     	; 0x2778 <GptInit+0x54>
    2730:	82 2f       	mov	r24, r18
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	fc 01       	movw	r30, r24
    2736:	ee 0f       	add	r30, r30
    2738:	ff 1f       	adc	r31, r31
    273a:	e8 0f       	add	r30, r24
    273c:	f9 1f       	adc	r31, r25
    273e:	e4 51       	subi	r30, 0x14	; 20
    2740:	fb 4f       	sbci	r31, 0xFB	; 251
    2742:	30 81       	ld	r19, Z
    2744:	33 23       	and	r19, r19
    2746:	19 f0       	breq	.+6      	; 0x274e <GptInit+0x2a>
    2748:	33 30       	cpi	r19, 0x03	; 3
    274a:	f0 f4       	brcc	.+60     	; 0x2788 <GptInit+0x64>
    274c:	0f c0       	rjmp	.+30     	; 0x276c <GptInit+0x48>
    274e:	fc 01       	movw	r30, r24
    2750:	ee 0f       	add	r30, r30
    2752:	ff 1f       	adc	r31, r31
    2754:	e8 0f       	add	r30, r24
    2756:	f9 1f       	adc	r31, r25
    2758:	e4 51       	subi	r30, 0x14	; 20
    275a:	fb 4f       	sbci	r31, 0xFB	; 251
    275c:	32 81       	ldd	r19, Z+2	; 0x02
    275e:	31 11       	cpse	r19, r1
    2760:	05 c0       	rjmp	.+10     	; 0x276c <GptInit+0x48>
    2762:	13 be       	out	0x33, r1	; 51
    2764:	39 b7       	in	r19, 0x39	; 57
    2766:	3c 7f       	andi	r19, 0xFC	; 252
    2768:	39 bf       	out	0x39, r19	; 57
    276a:	12 be       	out	0x32, r1	; 50
    276c:	fc 01       	movw	r30, r24
    276e:	ef 5a       	subi	r30, 0xAF	; 175
    2770:	f9 4f       	sbci	r31, 0xF9	; 249
    2772:	31 e0       	ldi	r19, 0x01	; 1
    2774:	30 83       	st	Z, r19
    2776:	2f 5f       	subi	r18, 0xFF	; 255
    2778:	22 23       	and	r18, r18
    277a:	d1 f2       	breq	.-76     	; 0x2730 <GptInit+0xc>
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	80 93 4c 06 	sts	0x064C, r24	; 0x80064c <genu_GPTModStatus>
    2782:	08 95       	ret
    2784:	83 e0       	ldi	r24, 0x03	; 3
    2786:	08 95       	ret
    2788:	85 e0       	ldi	r24, 0x05	; 5
    278a:	08 95       	ret

0000278c <GptStart_aSync>:
* Return value: enuGpt_Status_t - Returns the status of the function (if there is any error)
* Description: Function to Start the Timer module counting from 0x00 until (u16_Ticks)
               and generate interrupt when OVF.
************************************************************************************/
enuGpt_Status_t GptStart_aSync(u8Gpt_Channel_t ChannelId, u32Gpt_Value_t u16_Ticks, pfGpt_CallBack_t CallBack)
{
    278c:	0f 93       	push	r16
    278e:	1f 93       	push	r17
    2790:	cf 93       	push	r28
    2792:	df 93       	push	r29
    2794:	89 01       	movw	r16, r18
	
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    2796:	81 11       	cpse	r24, r1
    2798:	4a c0       	rjmp	.+148    	; 0x282e <GptStart_aSync+0xa2>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    279a:	c8 2f       	mov	r28, r24
    279c:	d0 e0       	ldi	r29, 0x00	; 0
    279e:	fe 01       	movw	r30, r28
    27a0:	ef 5a       	subi	r30, 0xAF	; 175
    27a2:	f9 4f       	sbci	r31, 0xF9	; 249
    27a4:	80 81       	ld	r24, Z
    27a6:	88 23       	and	r24, r24
    27a8:	09 f4       	brne	.+2      	; 0x27ac <GptStart_aSync+0x20>
    27aa:	43 c0       	rjmp	.+134    	; 0x2832 <GptStart_aSync+0xa6>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
    27ac:	82 30       	cpi	r24, 0x02	; 2
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <GptStart_aSync+0x26>
    27b0:	42 c0       	rjmp	.+132    	; 0x2836 <GptStart_aSync+0xaa>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u16_remainderCount=0;
	
	enuChannelsState[ChannelId] = GPT_RUNNING;
    27b2:	82 e0       	ldi	r24, 0x02	; 2
    27b4:	fe 01       	movw	r30, r28
    27b6:	ef 5a       	subi	r30, 0xAF	; 175
    27b8:	f9 4f       	sbci	r31, 0xF9	; 249
    27ba:	80 83       	st	Z, r24
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    27bc:	fe 01       	movw	r30, r28
    27be:	ee 0f       	add	r30, r30
    27c0:	ff 1f       	adc	r31, r31
    27c2:	ec 0f       	add	r30, r28
    27c4:	fd 1f       	adc	r31, r29
    27c6:	e4 51       	subi	r30, 0x14	; 20
    27c8:	fb 4f       	sbci	r31, 0xFB	; 251
    27ca:	80 81       	ld	r24, Z
    27cc:	88 23       	and	r24, r24
    27ce:	21 f0       	breq	.+8      	; 0x27d8 <GptStart_aSync+0x4c>
    27d0:	83 30       	cpi	r24, 0x03	; 3
    27d2:	98 f1       	brcs	.+102    	; 0x283a <GptStart_aSync+0xae>
		case GPT_TIMER_2: /* In case of Timer 2 */
			break;
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    27d4:	85 e0       	ldi	r24, 0x05	; 5
    27d6:	34 c0       	rjmp	.+104    	; 0x2840 <GptStart_aSync+0xb4>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Get Number of loops to overflow the timer counter */
			u32_Channels_ISR_Count[ChannelId] = u16_Ticks / GPT_MAX_VALUE_8BIT; //0xFF
    27d8:	cb 01       	movw	r24, r22
    27da:	ba 01       	movw	r22, r20
    27dc:	2f ef       	ldi	r18, 0xFF	; 255
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	50 e0       	ldi	r21, 0x00	; 0
    27e4:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__udivmodsi4>
    27e8:	fe 01       	movw	r30, r28
    27ea:	ee 0f       	add	r30, r30
    27ec:	ff 1f       	adc	r31, r31
    27ee:	ee 0f       	add	r30, r30
    27f0:	ff 1f       	adc	r31, r31
    27f2:	e3 5b       	subi	r30, 0xB3	; 179
    27f4:	f9 4f       	sbci	r31, 0xF9	; 249
    27f6:	20 83       	st	Z, r18
    27f8:	31 83       	std	Z+1, r19	; 0x01
    27fa:	42 83       	std	Z+2, r20	; 0x02
    27fc:	53 83       	std	Z+3, r21	; 0x03
			/* Get Number of extra ticks (remainder) */
			u16_remainderCount = u16_Ticks % GPT_MAX_VALUE_8BIT;
    27fe:	26 2f       	mov	r18, r22
    2800:	37 2f       	mov	r19, r23
			/* Set the interrupt enable */
			REG_SET_BIT(GPT_TIMSK_REG, GPT_TIMSK_TOIE0);
    2802:	89 b7       	in	r24, 0x39	; 57
    2804:	81 60       	ori	r24, 0x01	; 1
    2806:	89 bf       	out	0x39, r24	; 57
			/* Set the callback function pointer */
			Gpt_Timer0_CallBackPtr=CallBack;
    2808:	10 93 53 06 	sts	0x0653, r17	; 0x800653 <Gpt_Timer0_CallBackPtr+0x1>
    280c:	00 93 52 06 	sts	0x0652, r16	; 0x800652 <Gpt_Timer0_CallBackPtr>
			/* Start the clock with the given pre scaler */
			GPT_TCCR0_REG = (Timers_Configurations[ChannelId].enuClock_Src) << GPT_TCCR0_CS00;
    2810:	ce 01       	movw	r24, r28
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	c8 0f       	add	r28, r24
    2818:	d9 1f       	adc	r29, r25
    281a:	c4 51       	subi	r28, 0x14	; 20
    281c:	db 4f       	sbci	r29, 0xFB	; 251
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	83 bf       	out	0x33, r24	; 51
			/* Run the remainder ticks */
			/* Put the value of the 0xFF - remainderTicks to start count from it */
			if(u16_remainderCount != 0)
    2822:	23 2b       	or	r18, r19
    2824:	61 f0       	breq	.+24     	; 0x283e <GptStart_aSync+0xb2>
			{
				GPT_TCNT0_REG = 256 - u16_remainderCount;
    2826:	61 95       	neg	r22
    2828:	62 bf       	out	0x32, r22	; 50
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	09 c0       	rjmp	.+18     	; 0x2840 <GptStart_aSync+0xb4>
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    282e:	86 e0       	ldi	r24, 0x06	; 6
    2830:	07 c0       	rjmp	.+14     	; 0x2840 <GptStart_aSync+0xb4>
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    2832:	82 e0       	ldi	r24, 0x02	; 2
    2834:	05 c0       	rjmp	.+10     	; 0x2840 <GptStart_aSync+0xb4>
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_BUSY;
    2836:	87 e0       	ldi	r24, 0x07	; 7
    2838:	03 c0       	rjmp	.+6      	; 0x2840 <GptStart_aSync+0xb4>
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	01 c0       	rjmp	.+2      	; 0x2840 <GptStart_aSync+0xb4>
    283e:	81 e0       	ldi	r24, 0x01	; 1
}
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
    2844:	1f 91       	pop	r17
    2846:	0f 91       	pop	r16
    2848:	08 95       	ret

0000284a <GptStop>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    284a:	81 11       	cpse	r24, r1
    284c:	23 c0       	rjmp	.+70     	; 0x2894 <GptStop+0x4a>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	fc 01       	movw	r30, r24
    2852:	ef 5a       	subi	r30, 0xAF	; 175
    2854:	f9 4f       	sbci	r31, 0xF9	; 249
    2856:	20 81       	ld	r18, Z
    2858:	22 23       	and	r18, r18
    285a:	f1 f0       	breq	.+60     	; 0x2898 <GptStop+0x4e>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
    285c:	22 30       	cpi	r18, 0x02	; 2
    285e:	f1 f4       	brne	.+60     	; 0x289c <GptStop+0x52>

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    2860:	fc 01       	movw	r30, r24
    2862:	ee 0f       	add	r30, r30
    2864:	ff 1f       	adc	r31, r31
    2866:	e8 0f       	add	r30, r24
    2868:	f9 1f       	adc	r31, r25
    286a:	e4 51       	subi	r30, 0x14	; 20
    286c:	fb 4f       	sbci	r31, 0xFB	; 251
    286e:	20 81       	ld	r18, Z
    2870:	22 23       	and	r18, r18
    2872:	19 f0       	breq	.+6      	; 0x287a <GptStop+0x30>
    2874:	23 30       	cpi	r18, 0x03	; 3
    2876:	a0 f4       	brcc	.+40     	; 0x28a0 <GptStop+0x56>
    2878:	06 c0       	rjmp	.+12     	; 0x2886 <GptStop+0x3c>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Stop the clock from the timer */
			GPT_TCCR0_REG &= ~(7 << GPT_TCCR0_CS00);
    287a:	23 b7       	in	r18, 0x33	; 51
    287c:	28 7f       	andi	r18, 0xF8	; 248
    287e:	23 bf       	out	0x33, r18	; 51
			GPT_TIMSK_REG &= ~(3 << GPT_TIMSK_TOIE0);
    2880:	29 b7       	in	r18, 0x39	; 57
    2882:	2c 7f       	andi	r18, 0xFC	; 252
    2884:	29 bf       	out	0x39, r18	; 57
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
    2886:	fc 01       	movw	r30, r24
    2888:	ef 5a       	subi	r30, 0xAF	; 175
    288a:	f9 4f       	sbci	r31, 0xF9	; 249
    288c:	23 e0       	ldi	r18, 0x03	; 3
    288e:	20 83       	st	Z, r18
	return GPT_STATUS_ERROR_OK;
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    2894:	86 e0       	ldi	r24, 0x06	; 6
    2896:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    2898:	82 e0       	ldi	r24, 0x02	; 2
    289a:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_STOPPED;
    289c:	88 e0       	ldi	r24, 0x08	; 8
    289e:	08 95       	ret
		case GPT_TIMER_2: /* In case of Timer 2 */
		break;
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    28a0:	85 e0       	ldi	r24, 0x05	; 5
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
    28a2:	08 95       	ret

000028a4 <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    28a4:	1f 92       	push	r1
    28a6:	0f 92       	push	r0
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	0f 92       	push	r0
    28ac:	11 24       	eor	r1, r1
    28ae:	2f 93       	push	r18
    28b0:	3f 93       	push	r19
    28b2:	4f 93       	push	r20
    28b4:	5f 93       	push	r21
    28b6:	6f 93       	push	r22
    28b8:	7f 93       	push	r23
    28ba:	8f 93       	push	r24
    28bc:	9f 93       	push	r25
    28be:	af 93       	push	r26
    28c0:	bf 93       	push	r27
    28c2:	ef 93       	push	r30
    28c4:	ff 93       	push	r31
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	0e 94 47 13 	call	0x268e	; 0x268e <Gpt_ISRHandler>
    28cc:	ff 91       	pop	r31
    28ce:	ef 91       	pop	r30
    28d0:	bf 91       	pop	r27
    28d2:	af 91       	pop	r26
    28d4:	9f 91       	pop	r25
    28d6:	8f 91       	pop	r24
    28d8:	7f 91       	pop	r23
    28da:	6f 91       	pop	r22
    28dc:	5f 91       	pop	r21
    28de:	4f 91       	pop	r20
    28e0:	3f 91       	pop	r19
    28e2:	2f 91       	pop	r18
    28e4:	0f 90       	pop	r0
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	0f 90       	pop	r0
    28ea:	1f 90       	pop	r1
    28ec:	18 95       	reti

000028ee <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    28ee:	1f 92       	push	r1
    28f0:	0f 92       	push	r0
    28f2:	0f b6       	in	r0, 0x3f	; 63
    28f4:	0f 92       	push	r0
    28f6:	11 24       	eor	r1, r1
    28f8:	2f 93       	push	r18
    28fa:	3f 93       	push	r19
    28fc:	4f 93       	push	r20
    28fe:	5f 93       	push	r21
    2900:	6f 93       	push	r22
    2902:	7f 93       	push	r23
    2904:	8f 93       	push	r24
    2906:	9f 93       	push	r25
    2908:	af 93       	push	r26
    290a:	bf 93       	push	r27
    290c:	ef 93       	push	r30
    290e:	ff 93       	push	r31
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	0e 94 47 13 	call	0x268e	; 0x268e <Gpt_ISRHandler>
    2916:	ff 91       	pop	r31
    2918:	ef 91       	pop	r30
    291a:	bf 91       	pop	r27
    291c:	af 91       	pop	r26
    291e:	9f 91       	pop	r25
    2920:	8f 91       	pop	r24
    2922:	7f 91       	pop	r23
    2924:	6f 91       	pop	r22
    2926:	5f 91       	pop	r21
    2928:	4f 91       	pop	r20
    292a:	3f 91       	pop	r19
    292c:	2f 91       	pop	r18
    292e:	0f 90       	pop	r0
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	0f 90       	pop	r0
    2934:	1f 90       	pop	r1
    2936:	18 95       	reti

00002938 <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2938:	1f 92       	push	r1
    293a:	0f 92       	push	r0
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	0f 92       	push	r0
    2940:	11 24       	eor	r1, r1
    2942:	2f 93       	push	r18
    2944:	3f 93       	push	r19
    2946:	4f 93       	push	r20
    2948:	5f 93       	push	r21
    294a:	6f 93       	push	r22
    294c:	7f 93       	push	r23
    294e:	8f 93       	push	r24
    2950:	9f 93       	push	r25
    2952:	af 93       	push	r26
    2954:	bf 93       	push	r27
    2956:	ef 93       	push	r30
    2958:	ff 93       	push	r31
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	0e 94 47 13 	call	0x268e	; 0x268e <Gpt_ISRHandler>
    2960:	ff 91       	pop	r31
    2962:	ef 91       	pop	r30
    2964:	bf 91       	pop	r27
    2966:	af 91       	pop	r26
    2968:	9f 91       	pop	r25
    296a:	8f 91       	pop	r24
    296c:	7f 91       	pop	r23
    296e:	6f 91       	pop	r22
    2970:	5f 91       	pop	r21
    2972:	4f 91       	pop	r20
    2974:	3f 91       	pop	r19
    2976:	2f 91       	pop	r18
    2978:	0f 90       	pop	r0
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	0f 90       	pop	r0
    297e:	1f 90       	pop	r1
    2980:	18 95       	reti

00002982 <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2982:	1f 92       	push	r1
    2984:	0f 92       	push	r0
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	0f 92       	push	r0
    298a:	11 24       	eor	r1, r1
    298c:	2f 93       	push	r18
    298e:	3f 93       	push	r19
    2990:	4f 93       	push	r20
    2992:	5f 93       	push	r21
    2994:	6f 93       	push	r22
    2996:	7f 93       	push	r23
    2998:	8f 93       	push	r24
    299a:	9f 93       	push	r25
    299c:	af 93       	push	r26
    299e:	bf 93       	push	r27
    29a0:	ef 93       	push	r30
    29a2:	ff 93       	push	r31
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	0e 94 47 13 	call	0x268e	; 0x268e <Gpt_ISRHandler>
    29aa:	ff 91       	pop	r31
    29ac:	ef 91       	pop	r30
    29ae:	bf 91       	pop	r27
    29b0:	af 91       	pop	r26
    29b2:	9f 91       	pop	r25
    29b4:	8f 91       	pop	r24
    29b6:	7f 91       	pop	r23
    29b8:	6f 91       	pop	r22
    29ba:	5f 91       	pop	r21
    29bc:	4f 91       	pop	r20
    29be:	3f 91       	pop	r19
    29c0:	2f 91       	pop	r18
    29c2:	0f 90       	pop	r0
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	0f 90       	pop	r0
    29c8:	1f 90       	pop	r1
    29ca:	18 95       	reti

000029cc <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    29cc:	1f 92       	push	r1
    29ce:	0f 92       	push	r0
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	0f 92       	push	r0
    29d4:	11 24       	eor	r1, r1
    29d6:	2f 93       	push	r18
    29d8:	3f 93       	push	r19
    29da:	4f 93       	push	r20
    29dc:	5f 93       	push	r21
    29de:	6f 93       	push	r22
    29e0:	7f 93       	push	r23
    29e2:	8f 93       	push	r24
    29e4:	9f 93       	push	r25
    29e6:	af 93       	push	r26
    29e8:	bf 93       	push	r27
    29ea:	ef 93       	push	r30
    29ec:	ff 93       	push	r31
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	0e 94 47 13 	call	0x268e	; 0x268e <Gpt_ISRHandler>
    29f4:	ff 91       	pop	r31
    29f6:	ef 91       	pop	r30
    29f8:	bf 91       	pop	r27
    29fa:	af 91       	pop	r26
    29fc:	9f 91       	pop	r25
    29fe:	8f 91       	pop	r24
    2a00:	7f 91       	pop	r23
    2a02:	6f 91       	pop	r22
    2a04:	5f 91       	pop	r21
    2a06:	4f 91       	pop	r20
    2a08:	3f 91       	pop	r19
    2a0a:	2f 91       	pop	r18
    2a0c:	0f 90       	pop	r0
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	0f 90       	pop	r0
    2a12:	1f 90       	pop	r1
    2a14:	18 95       	reti

00002a16 <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2a16:	1f 92       	push	r1
    2a18:	0f 92       	push	r0
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	0f 92       	push	r0
    2a1e:	11 24       	eor	r1, r1
    2a20:	2f 93       	push	r18
    2a22:	3f 93       	push	r19
    2a24:	4f 93       	push	r20
    2a26:	5f 93       	push	r21
    2a28:	6f 93       	push	r22
    2a2a:	7f 93       	push	r23
    2a2c:	8f 93       	push	r24
    2a2e:	9f 93       	push	r25
    2a30:	af 93       	push	r26
    2a32:	bf 93       	push	r27
    2a34:	ef 93       	push	r30
    2a36:	ff 93       	push	r31
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	0e 94 47 13 	call	0x268e	; 0x268e <Gpt_ISRHandler>
    2a3e:	ff 91       	pop	r31
    2a40:	ef 91       	pop	r30
    2a42:	bf 91       	pop	r27
    2a44:	af 91       	pop	r26
    2a46:	9f 91       	pop	r25
    2a48:	8f 91       	pop	r24
    2a4a:	7f 91       	pop	r23
    2a4c:	6f 91       	pop	r22
    2a4e:	5f 91       	pop	r21
    2a50:	4f 91       	pop	r20
    2a52:	3f 91       	pop	r19
    2a54:	2f 91       	pop	r18
    2a56:	0f 90       	pop	r0
    2a58:	0f be       	out	0x3f, r0	; 63
    2a5a:	0f 90       	pop	r0
    2a5c:	1f 90       	pop	r1
    2a5e:	18 95       	reti

00002a60 <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2a60:	1f 92       	push	r1
    2a62:	0f 92       	push	r0
    2a64:	0f b6       	in	r0, 0x3f	; 63
    2a66:	0f 92       	push	r0
    2a68:	11 24       	eor	r1, r1
    2a6a:	2f 93       	push	r18
    2a6c:	3f 93       	push	r19
    2a6e:	4f 93       	push	r20
    2a70:	5f 93       	push	r21
    2a72:	6f 93       	push	r22
    2a74:	7f 93       	push	r23
    2a76:	8f 93       	push	r24
    2a78:	9f 93       	push	r25
    2a7a:	af 93       	push	r26
    2a7c:	bf 93       	push	r27
    2a7e:	ef 93       	push	r30
    2a80:	ff 93       	push	r31
    2a82:	82 e0       	ldi	r24, 0x02	; 2
    2a84:	0e 94 47 13 	call	0x268e	; 0x268e <Gpt_ISRHandler>
    2a88:	ff 91       	pop	r31
    2a8a:	ef 91       	pop	r30
    2a8c:	bf 91       	pop	r27
    2a8e:	af 91       	pop	r26
    2a90:	9f 91       	pop	r25
    2a92:	8f 91       	pop	r24
    2a94:	7f 91       	pop	r23
    2a96:	6f 91       	pop	r22
    2a98:	5f 91       	pop	r21
    2a9a:	4f 91       	pop	r20
    2a9c:	3f 91       	pop	r19
    2a9e:	2f 91       	pop	r18
    2aa0:	0f 90       	pop	r0
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	0f 90       	pop	r0
    2aa6:	1f 90       	pop	r1
    2aa8:	18 95       	reti

00002aaa <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2aaa:	1f 92       	push	r1
    2aac:	0f 92       	push	r0
    2aae:	0f b6       	in	r0, 0x3f	; 63
    2ab0:	0f 92       	push	r0
    2ab2:	11 24       	eor	r1, r1
    2ab4:	2f 93       	push	r18
    2ab6:	3f 93       	push	r19
    2ab8:	4f 93       	push	r20
    2aba:	5f 93       	push	r21
    2abc:	6f 93       	push	r22
    2abe:	7f 93       	push	r23
    2ac0:	8f 93       	push	r24
    2ac2:	9f 93       	push	r25
    2ac4:	af 93       	push	r26
    2ac6:	bf 93       	push	r27
    2ac8:	ef 93       	push	r30
    2aca:	ff 93       	push	r31
    2acc:	82 e0       	ldi	r24, 0x02	; 2
    2ace:	0e 94 47 13 	call	0x268e	; 0x268e <Gpt_ISRHandler>
    2ad2:	ff 91       	pop	r31
    2ad4:	ef 91       	pop	r30
    2ad6:	bf 91       	pop	r27
    2ad8:	af 91       	pop	r26
    2ada:	9f 91       	pop	r25
    2adc:	8f 91       	pop	r24
    2ade:	7f 91       	pop	r23
    2ae0:	6f 91       	pop	r22
    2ae2:	5f 91       	pop	r21
    2ae4:	4f 91       	pop	r20
    2ae6:	3f 91       	pop	r19
    2ae8:	2f 91       	pop	r18
    2aea:	0f 90       	pop	r0
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	0f 90       	pop	r0
    2af0:	1f 90       	pop	r1
    2af2:	18 95       	reti

00002af4 <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
    2af4:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2af8:	86 30       	cpi	r24, 0x06	; 6
    2afa:	49 f0       	breq	.+18     	; 0x2b0e <I2C_MasterInit+0x1a>
    2afc:	82 e0       	ldi	r24, 0x02	; 2
    2afe:	81 b9       	out	0x01, r24	; 1
    2b00:	89 e0       	ldi	r24, 0x09	; 9
    2b02:	80 b9       	out	0x00, r24	; 0
    2b04:	86 e0       	ldi	r24, 0x06	; 6
    2b06:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <genuI2C_Status>
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	08 95       	ret
    2b0e:	87 e0       	ldi	r24, 0x07	; 7
    2b10:	08 95       	ret

00002b12 <I2C_MasterSendSTART>:
    2b12:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2b16:	86 30       	cpi	r24, 0x06	; 6
    2b18:	59 f4       	brne	.+22     	; 0x2b30 <I2C_MasterSendSTART+0x1e>
    2b1a:	84 ea       	ldi	r24, 0xA4	; 164
    2b1c:	86 bf       	out	0x36, r24	; 54
    2b1e:	06 b6       	in	r0, 0x36	; 54
    2b20:	07 fe       	sbrs	r0, 7
    2b22:	fd cf       	rjmp	.-6      	; 0x2b1e <I2C_MasterSendSTART+0xc>
    2b24:	81 b1       	in	r24, 0x01	; 1
    2b26:	88 7f       	andi	r24, 0xF8	; 248
    2b28:	88 30       	cpi	r24, 0x08	; 8
    2b2a:	21 f0       	breq	.+8      	; 0x2b34 <I2C_MasterSendSTART+0x22>
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	08 95       	ret
    2b30:	85 e0       	ldi	r24, 0x05	; 5
    2b32:	08 95       	ret
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	08 95       	ret

00002b38 <I2C_MasterSendSlaveAddress>:
    2b38:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2b3c:	96 30       	cpi	r25, 0x06	; 6
    2b3e:	29 f5       	brne	.+74     	; 0x2b8a <I2C_MasterSendSlaveAddress+0x52>
    2b40:	62 30       	cpi	r22, 0x02	; 2
    2b42:	28 f5       	brcc	.+74     	; 0x2b8e <I2C_MasterSendSlaveAddress+0x56>
    2b44:	88 23       	and	r24, r24
    2b46:	2c f1       	brlt	.+74     	; 0x2b92 <I2C_MasterSendSlaveAddress+0x5a>
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	88 0f       	add	r24, r24
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	68 2b       	or	r22, r24
    2b50:	63 b9       	out	0x03, r22	; 3
    2b52:	84 e8       	ldi	r24, 0x84	; 132
    2b54:	86 bf       	out	0x36, r24	; 54
    2b56:	06 b6       	in	r0, 0x36	; 54
    2b58:	07 fe       	sbrs	r0, 7
    2b5a:	fd cf       	rjmp	.-6      	; 0x2b56 <I2C_MasterSendSlaveAddress+0x1e>
    2b5c:	81 b1       	in	r24, 0x01	; 1
    2b5e:	88 7f       	andi	r24, 0xF8	; 248
    2b60:	88 33       	cpi	r24, 0x38	; 56
    2b62:	59 f0       	breq	.+22     	; 0x2b7a <I2C_MasterSendSlaveAddress+0x42>
    2b64:	28 f4       	brcc	.+10     	; 0x2b70 <I2C_MasterSendSlaveAddress+0x38>
    2b66:	88 31       	cpi	r24, 0x18	; 24
    2b68:	b1 f0       	breq	.+44     	; 0x2b96 <I2C_MasterSendSlaveAddress+0x5e>
    2b6a:	80 32       	cpi	r24, 0x20	; 32
    2b6c:	41 f0       	breq	.+16     	; 0x2b7e <I2C_MasterSendSlaveAddress+0x46>
    2b6e:	0b c0       	rjmp	.+22     	; 0x2b86 <I2C_MasterSendSlaveAddress+0x4e>
    2b70:	80 34       	cpi	r24, 0x40	; 64
    2b72:	89 f0       	breq	.+34     	; 0x2b96 <I2C_MasterSendSlaveAddress+0x5e>
    2b74:	88 34       	cpi	r24, 0x48	; 72
    2b76:	29 f0       	breq	.+10     	; 0x2b82 <I2C_MasterSendSlaveAddress+0x4a>
    2b78:	06 c0       	rjmp	.+12     	; 0x2b86 <I2C_MasterSendSlaveAddress+0x4e>
    2b7a:	88 e3       	ldi	r24, 0x38	; 56
    2b7c:	08 95       	ret
    2b7e:	80 e2       	ldi	r24, 0x20	; 32
    2b80:	08 95       	ret
    2b82:	88 e4       	ldi	r24, 0x48	; 72
    2b84:	08 95       	ret
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	08 95       	ret
    2b8a:	85 e0       	ldi	r24, 0x05	; 5
    2b8c:	08 95       	ret
    2b8e:	82 e0       	ldi	r24, 0x02	; 2
    2b90:	08 95       	ret
    2b92:	83 e0       	ldi	r24, 0x03	; 3
    2b94:	08 95       	ret
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	08 95       	ret

00002b9a <I2C_MasterSendRepSTART>:
    2b9a:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2b9e:	86 30       	cpi	r24, 0x06	; 6
    2ba0:	59 f4       	brne	.+22     	; 0x2bb8 <I2C_MasterSendRepSTART+0x1e>
    2ba2:	84 ea       	ldi	r24, 0xA4	; 164
    2ba4:	86 bf       	out	0x36, r24	; 54
    2ba6:	06 b6       	in	r0, 0x36	; 54
    2ba8:	07 fe       	sbrs	r0, 7
    2baa:	fd cf       	rjmp	.-6      	; 0x2ba6 <I2C_MasterSendRepSTART+0xc>
    2bac:	81 b1       	in	r24, 0x01	; 1
    2bae:	88 7f       	andi	r24, 0xF8	; 248
    2bb0:	80 31       	cpi	r24, 0x10	; 16
    2bb2:	21 f0       	breq	.+8      	; 0x2bbc <I2C_MasterSendRepSTART+0x22>
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	08 95       	ret
    2bb8:	85 e0       	ldi	r24, 0x05	; 5
    2bba:	08 95       	ret
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	08 95       	ret

00002bc0 <I2C_MasterSendSTOP>:
    2bc0:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2bc4:	86 30       	cpi	r24, 0x06	; 6
    2bc6:	39 f4       	brne	.+14     	; 0x2bd6 <I2C_MasterSendSTOP+0x16>
    2bc8:	84 e9       	ldi	r24, 0x94	; 148
    2bca:	86 bf       	out	0x36, r24	; 54
    2bcc:	06 b6       	in	r0, 0x36	; 54
    2bce:	04 fc       	sbrc	r0, 4
    2bd0:	fd cf       	rjmp	.-6      	; 0x2bcc <I2C_MasterSendSTOP+0xc>
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	08 95       	ret
    2bd6:	85 e0       	ldi	r24, 0x05	; 5
    2bd8:	08 95       	ret

00002bda <I2C_MasterSendByte>:
    2bda:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2bde:	96 30       	cpi	r25, 0x06	; 6
    2be0:	69 f4       	brne	.+26     	; 0x2bfc <I2C_MasterSendByte+0x22>
    2be2:	83 b9       	out	0x03, r24	; 3
    2be4:	84 e8       	ldi	r24, 0x84	; 132
    2be6:	86 bf       	out	0x36, r24	; 54
    2be8:	06 b6       	in	r0, 0x36	; 54
    2bea:	07 fe       	sbrs	r0, 7
    2bec:	fd cf       	rjmp	.-6      	; 0x2be8 <I2C_MasterSendByte+0xe>
    2bee:	81 b1       	in	r24, 0x01	; 1
    2bf0:	88 7f       	andi	r24, 0xF8	; 248
    2bf2:	88 32       	cpi	r24, 0x28	; 40
    2bf4:	29 f0       	breq	.+10     	; 0x2c00 <I2C_MasterSendByte+0x26>
    2bf6:	80 33       	cpi	r24, 0x30	; 48
    2bf8:	29 f4       	brne	.+10     	; 0x2c04 <I2C_MasterSendByte+0x2a>
    2bfa:	08 95       	ret
    2bfc:	85 e0       	ldi	r24, 0x05	; 5
    2bfe:	08 95       	ret
    2c00:	88 e2       	ldi	r24, 0x28	; 40
    2c02:	08 95       	ret
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	08 95       	ret

00002c08 <I2C_MasterReceiveByte_ACK>:
    2c08:	fc 01       	movw	r30, r24
    2c0a:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2c0e:	96 30       	cpi	r25, 0x06	; 6
    2c10:	79 f4       	brne	.+30     	; 0x2c30 <I2C_MasterReceiveByte_ACK+0x28>
    2c12:	30 97       	sbiw	r30, 0x00	; 0
    2c14:	79 f0       	breq	.+30     	; 0x2c34 <I2C_MasterReceiveByte_ACK+0x2c>
    2c16:	84 ec       	ldi	r24, 0xC4	; 196
    2c18:	86 bf       	out	0x36, r24	; 54
    2c1a:	06 b6       	in	r0, 0x36	; 54
    2c1c:	07 fe       	sbrs	r0, 7
    2c1e:	fd cf       	rjmp	.-6      	; 0x2c1a <I2C_MasterReceiveByte_ACK+0x12>
    2c20:	81 b1       	in	r24, 0x01	; 1
    2c22:	88 7f       	andi	r24, 0xF8	; 248
    2c24:	80 35       	cpi	r24, 0x50	; 80
    2c26:	41 f4       	brne	.+16     	; 0x2c38 <I2C_MasterReceiveByte_ACK+0x30>
    2c28:	83 b1       	in	r24, 0x03	; 3
    2c2a:	80 83       	st	Z, r24
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	08 95       	ret
    2c30:	85 e0       	ldi	r24, 0x05	; 5
    2c32:	08 95       	ret
    2c34:	84 e0       	ldi	r24, 0x04	; 4
    2c36:	08 95       	ret
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	08 95       	ret

00002c3c <I2C_MasterReceiveByte_NACK>:
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2c42:	96 30       	cpi	r25, 0x06	; 6
    2c44:	79 f4       	brne	.+30     	; 0x2c64 <I2C_MasterReceiveByte_NACK+0x28>
    2c46:	30 97       	sbiw	r30, 0x00	; 0
    2c48:	79 f0       	breq	.+30     	; 0x2c68 <I2C_MasterReceiveByte_NACK+0x2c>
    2c4a:	84 e8       	ldi	r24, 0x84	; 132
    2c4c:	86 bf       	out	0x36, r24	; 54
    2c4e:	06 b6       	in	r0, 0x36	; 54
    2c50:	07 fe       	sbrs	r0, 7
    2c52:	fd cf       	rjmp	.-6      	; 0x2c4e <I2C_MasterReceiveByte_NACK+0x12>
    2c54:	81 b1       	in	r24, 0x01	; 1
    2c56:	88 7f       	andi	r24, 0xF8	; 248
    2c58:	88 35       	cpi	r24, 0x58	; 88
    2c5a:	41 f4       	brne	.+16     	; 0x2c6c <I2C_MasterReceiveByte_NACK+0x30>
    2c5c:	83 b1       	in	r24, 0x03	; 3
    2c5e:	80 83       	st	Z, r24
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	08 95       	ret
    2c64:	85 e0       	ldi	r24, 0x05	; 5
    2c66:	08 95       	ret
    2c68:	84 e0       	ldi	r24, 0x04	; 4
    2c6a:	08 95       	ret
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	08 95       	ret

00002c70 <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
    2c70:	7f 92       	push	r7
    2c72:	8f 92       	push	r8
    2c74:	9f 92       	push	r9
    2c76:	af 92       	push	r10
    2c78:	bf 92       	push	r11
    2c7a:	cf 92       	push	r12
    2c7c:	df 92       	push	r13
    2c7e:	ef 92       	push	r14
    2c80:	ff 92       	push	r15
    2c82:	0f 93       	push	r16
    2c84:	1f 93       	push	r17
    2c86:	cf 93       	push	r28
    2c88:	df 93       	push	r29
    2c8a:	78 2e       	mov	r7, r24
    2c8c:	eb 01       	movw	r28, r22
    2c8e:	7a 01       	movw	r14, r20
    2c90:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    2c92:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2c96:	86 30       	cpi	r24, 0x06	; 6
    2c98:	09 f0       	breq	.+2      	; 0x2c9c <I2C_MasterReceiveGeneral+0x2c>
    2c9a:	47 c0       	rjmp	.+142    	; 0x2d2a <I2C_MasterReceiveGeneral+0xba>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
    2c9c:	20 97       	sbiw	r28, 0x00	; 0
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <I2C_MasterReceiveGeneral+0x32>
    2ca0:	46 c0       	rjmp	.+140    	; 0x2d2e <I2C_MasterReceiveGeneral+0xbe>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
    2ca2:	23 2b       	or	r18, r19
    2ca4:	09 f4       	brne	.+2      	; 0x2ca8 <I2C_MasterReceiveGeneral+0x38>
    2ca6:	45 c0       	rjmp	.+138    	; 0x2d32 <I2C_MasterReceiveGeneral+0xc2>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    2ca8:	77 20       	and	r7, r7
    2caa:	0c f4       	brge	.+2      	; 0x2cae <I2C_MasterReceiveGeneral+0x3e>
    2cac:	44 c0       	rjmp	.+136    	; 0x2d36 <I2C_MasterReceiveGeneral+0xc6>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2cae:	0e 94 89 15 	call	0x2b12	; 0x2b12 <I2C_MasterSendSTART>
    2cb2:	88 23       	and	r24, r24
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <I2C_MasterReceiveGeneral+0x48>
    2cb6:	4a c0       	rjmp	.+148    	; 0x2d4c <I2C_MasterReceiveGeneral+0xdc>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2cb8:	60 e0       	ldi	r22, 0x00	; 0
    2cba:	87 2d       	mov	r24, r7
    2cbc:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <I2C_MasterSendSlaveAddress>
    2cc0:	81 30       	cpi	r24, 0x01	; 1
    2cc2:	d9 f5       	brne	.+118    	; 0x2d3a <I2C_MasterReceiveGeneral+0xca>
    2cc4:	0b c0       	rjmp	.+22     	; 0x2cdc <I2C_MasterReceiveGeneral+0x6c>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2cc6:	4e 01       	movw	r8, r28
    2cc8:	8f ef       	ldi	r24, 0xFF	; 255
    2cca:	88 1a       	sub	r8, r24
    2ccc:	98 0a       	sbc	r9, r24
    2cce:	88 81       	ld	r24, Y
    2cd0:	0e 94 ed 15 	call	0x2bda	; 0x2bda <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    2cd4:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2cd6:	88 23       	and	r24, r24
    2cd8:	c9 f1       	breq	.+114    	; 0x2d4c <I2C_MasterReceiveGeneral+0xdc>
    2cda:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    2cdc:	57 01       	movw	r10, r14
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	a8 1a       	sub	r10, r24
    2ce2:	b1 08       	sbc	r11, r1
    2ce4:	ef 28       	or	r14, r15
    2ce6:	79 f7       	brne	.-34     	; 0x2cc6 <I2C_MasterReceiveGeneral+0x56>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
    2ce8:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <I2C_MasterSendRepSTART>
    2cec:	81 30       	cpi	r24, 0x01	; 1
    2cee:	39 f5       	brne	.+78     	; 0x2d3e <I2C_MasterReceiveGeneral+0xce>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2cf0:	61 e0       	ldi	r22, 0x01	; 1
    2cf2:	87 2d       	mov	r24, r7
    2cf4:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <I2C_MasterSendSlaveAddress>
    2cf8:	81 30       	cpi	r24, 0x01	; 1
    2cfa:	19 f5       	brne	.+70     	; 0x2d42 <I2C_MasterReceiveGeneral+0xd2>
    2cfc:	08 c0       	rjmp	.+16     	; 0x2d0e <I2C_MasterReceiveGeneral+0x9e>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
    2cfe:	e6 01       	movw	r28, r12
    2d00:	21 96       	adiw	r28, 0x01	; 1
    2d02:	c6 01       	movw	r24, r12
    2d04:	0e 94 04 16 	call	0x2c08	; 0x2c08 <I2C_MasterReceiveByte_ACK>
    2d08:	81 30       	cpi	r24, 0x01	; 1
    2d0a:	e9 f4       	brne	.+58     	; 0x2d46 <I2C_MasterReceiveGeneral+0xd6>
    2d0c:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
    2d0e:	01 50       	subi	r16, 0x01	; 1
    2d10:	11 09       	sbc	r17, r1
    2d12:	a9 f7       	brne	.-22     	; 0x2cfe <I2C_MasterReceiveGeneral+0x8e>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
    2d14:	c6 01       	movw	r24, r12
    2d16:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <I2C_MasterReceiveByte_NACK>
    2d1a:	81 30       	cpi	r24, 0x01	; 1
    2d1c:	b1 f4       	brne	.+44     	; 0x2d4a <I2C_MasterReceiveGeneral+0xda>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
    2d1e:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <I2C_MasterSendSTOP>
    2d22:	81 30       	cpi	r24, 0x01	; 1
    2d24:	99 f0       	breq	.+38     	; 0x2d4c <I2C_MasterReceiveGeneral+0xdc>
		return I2C_STATUS_ERROR_NOK;
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	11 c0       	rjmp	.+34     	; 0x2d4c <I2C_MasterReceiveGeneral+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    2d2a:	85 e0       	ldi	r24, 0x05	; 5
    2d2c:	0f c0       	rjmp	.+30     	; 0x2d4c <I2C_MasterReceiveGeneral+0xdc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2d2e:	84 e0       	ldi	r24, 0x04	; 4
    2d30:	0d c0       	rjmp	.+26     	; 0x2d4c <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2d32:	84 e0       	ldi	r24, 0x04	; 4
    2d34:	0b c0       	rjmp	.+22     	; 0x2d4c <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    2d36:	83 e0       	ldi	r24, 0x03	; 3
    2d38:	09 c0       	rjmp	.+18     	; 0x2d4c <I2C_MasterReceiveGeneral+0xdc>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	07 c0       	rjmp	.+14     	; 0x2d4c <I2C_MasterReceiveGeneral+0xdc>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	05 c0       	rjmp	.+10     	; 0x2d4c <I2C_MasterReceiveGeneral+0xdc>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	03 c0       	rjmp	.+6      	; 0x2d4c <I2C_MasterReceiveGeneral+0xdc>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	01 c0       	rjmp	.+2      	; 0x2d4c <I2C_MasterReceiveGeneral+0xdc>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
    2d4c:	df 91       	pop	r29
    2d4e:	cf 91       	pop	r28
    2d50:	1f 91       	pop	r17
    2d52:	0f 91       	pop	r16
    2d54:	ff 90       	pop	r15
    2d56:	ef 90       	pop	r14
    2d58:	df 90       	pop	r13
    2d5a:	cf 90       	pop	r12
    2d5c:	bf 90       	pop	r11
    2d5e:	af 90       	pop	r10
    2d60:	9f 90       	pop	r9
    2d62:	8f 90       	pop	r8
    2d64:	7f 90       	pop	r7
    2d66:	08 95       	ret

00002d68 <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
    2d68:	bf 92       	push	r11
    2d6a:	cf 92       	push	r12
    2d6c:	df 92       	push	r13
    2d6e:	ef 92       	push	r14
    2d70:	ff 92       	push	r15
    2d72:	0f 93       	push	r16
    2d74:	1f 93       	push	r17
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	18 2f       	mov	r17, r24
    2d7c:	06 2f       	mov	r16, r22
    2d7e:	ea 01       	movw	r28, r20
    2d80:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    2d82:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2d86:	86 30       	cpi	r24, 0x06	; 6
    2d88:	59 f5       	brne	.+86     	; 0x2de0 <I2C_MasterSendToLocation+0x78>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    2d8a:	20 97       	sbiw	r28, 0x00	; 0
    2d8c:	59 f1       	breq	.+86     	; 0x2de4 <I2C_MasterSendToLocation+0x7c>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    2d8e:	11 23       	and	r17, r17
    2d90:	5c f1       	brlt	.+86     	; 0x2de8 <I2C_MasterSendToLocation+0x80>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2d92:	0e 94 89 15 	call	0x2b12	; 0x2b12 <I2C_MasterSendSTART>
    2d96:	88 23       	and	r24, r24
    2d98:	61 f1       	breq	.+88     	; 0x2df2 <I2C_MasterSendToLocation+0x8a>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2d9a:	60 e0       	ldi	r22, 0x00	; 0
    2d9c:	81 2f       	mov	r24, r17
    2d9e:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <I2C_MasterSendSlaveAddress>
    2da2:	b8 2e       	mov	r11, r24
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	b8 12       	cpse	r11, r24
    2da8:	21 c0       	rjmp	.+66     	; 0x2dec <I2C_MasterSendToLocation+0x84>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2daa:	80 2f       	mov	r24, r16
    2dac:	0e 94 ed 15 	call	0x2bda	; 0x2bda <I2C_MasterSendByte>
    2db0:	81 11       	cpse	r24, r1
    2db2:	0c c0       	rjmp	.+24     	; 0x2dcc <I2C_MasterSendToLocation+0x64>
    2db4:	1e c0       	rjmp	.+60     	; 0x2df2 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2db6:	6e 01       	movw	r12, r28
    2db8:	8f ef       	ldi	r24, 0xFF	; 255
    2dba:	c8 1a       	sub	r12, r24
    2dbc:	d8 0a       	sbc	r13, r24
    2dbe:	88 81       	ld	r24, Y
    2dc0:	0e 94 ed 15 	call	0x2bda	; 0x2bda <I2C_MasterSendByte>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    2dc4:	78 01       	movw	r14, r16
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2dc6:	88 23       	and	r24, r24
    2dc8:	a1 f0       	breq	.+40     	; 0x2df2 <I2C_MasterSendToLocation+0x8a>
    2dca:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    2dcc:	87 01       	movw	r16, r14
    2dce:	01 50       	subi	r16, 0x01	; 1
    2dd0:	11 09       	sbc	r17, r1
    2dd2:	ef 28       	or	r14, r15
    2dd4:	81 f7       	brne	.-32     	; 0x2db6 <I2C_MasterSendToLocation+0x4e>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2dd6:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <I2C_MasterSendSTOP>
    2dda:	81 11       	cpse	r24, r1
    2ddc:	09 c0       	rjmp	.+18     	; 0x2df0 <I2C_MasterSendToLocation+0x88>
    2dde:	09 c0       	rjmp	.+18     	; 0x2df2 <I2C_MasterSendToLocation+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    2de0:	85 e0       	ldi	r24, 0x05	; 5
    2de2:	07 c0       	rjmp	.+14     	; 0x2df2 <I2C_MasterSendToLocation+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2de4:	84 e0       	ldi	r24, 0x04	; 4
    2de6:	05 c0       	rjmp	.+10     	; 0x2df2 <I2C_MasterSendToLocation+0x8a>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    2de8:	83 e0       	ldi	r24, 0x03	; 3
    2dea:	03 c0       	rjmp	.+6      	; 0x2df2 <I2C_MasterSendToLocation+0x8a>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	01 c0       	rjmp	.+2      	; 0x2df2 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
    2df0:	8b 2d       	mov	r24, r11
}
    2df2:	df 91       	pop	r29
    2df4:	cf 91       	pop	r28
    2df6:	1f 91       	pop	r17
    2df8:	0f 91       	pop	r16
    2dfa:	ff 90       	pop	r15
    2dfc:	ef 90       	pop	r14
    2dfe:	df 90       	pop	r13
    2e00:	cf 90       	pop	r12
    2e02:	bf 90       	pop	r11
    2e04:	08 95       	ret

00002e06 <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
    2e06:	0f 93       	push	r16
    2e08:	1f 93       	push	r17
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	1f 92       	push	r1
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
    2e16:	89 01       	movw	r16, r18
    2e18:	9a 01       	movw	r18, r20
    2e1a:	41 e0       	ldi	r20, 0x01	; 1
    2e1c:	50 e0       	ldi	r21, 0x00	; 0
    2e1e:	be 01       	movw	r22, r28
    2e20:	6f 5f       	subi	r22, 0xFF	; 255
    2e22:	7f 4f       	sbci	r23, 0xFF	; 255
    2e24:	0e 94 38 16 	call	0x2c70	; 0x2c70 <I2C_MasterReceiveGeneral>
}
    2e28:	0f 90       	pop	r0
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	08 95       	ret

00002e34 <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
    2e34:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <genuSpi_Status>
    2e38:	87 30       	cpi	r24, 0x07	; 7
    2e3a:	b9 f0       	breq	.+46     	; 0x2e6a <Spi_init+0x36>
    2e3c:	87 b3       	in	r24, 0x17	; 23
    2e3e:	80 64       	ori	r24, 0x40	; 64
    2e40:	87 bb       	out	0x17, r24	; 23
    2e42:	87 b3       	in	r24, 0x17	; 23
    2e44:	8f 7d       	andi	r24, 0xDF	; 223
    2e46:	87 bb       	out	0x17, r24	; 23
    2e48:	87 b3       	in	r24, 0x17	; 23
    2e4a:	8f 7e       	andi	r24, 0xEF	; 239
    2e4c:	87 bb       	out	0x17, r24	; 23
    2e4e:	87 b3       	in	r24, 0x17	; 23
    2e50:	8f 77       	andi	r24, 0x7F	; 127
    2e52:	87 bb       	out	0x17, r24	; 23
    2e54:	8d b1       	in	r24, 0x0d	; 13
    2e56:	8f 7e       	andi	r24, 0xEF	; 239
    2e58:	8d b9       	out	0x0d, r24	; 13
    2e5a:	8d b1       	in	r24, 0x0d	; 13
    2e5c:	80 64       	ori	r24, 0x40	; 64
    2e5e:	8d b9       	out	0x0d, r24	; 13
    2e60:	87 e0       	ldi	r24, 0x07	; 7
    2e62:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <genuSpi_Status>
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	08 95       	ret
    2e6a:	88 e0       	ldi	r24, 0x08	; 8
    2e6c:	08 95       	ret

00002e6e <Spi_SlaveReceiveByte>:
    2e6e:	fc 01       	movw	r30, r24
    2e70:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <genuSpi_Status>
    2e74:	97 30       	cpi	r25, 0x07	; 7
    2e76:	41 f4       	brne	.+16     	; 0x2e88 <Spi_SlaveReceiveByte+0x1a>
    2e78:	30 97       	sbiw	r30, 0x00	; 0
    2e7a:	41 f0       	breq	.+16     	; 0x2e8c <Spi_SlaveReceiveByte+0x1e>
    2e7c:	77 9b       	sbis	0x0e, 7	; 14
    2e7e:	fe cf       	rjmp	.-4      	; 0x2e7c <Spi_SlaveReceiveByte+0xe>
    2e80:	8f b1       	in	r24, 0x0f	; 15
    2e82:	80 83       	st	Z, r24
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	08 95       	ret
    2e88:	86 e0       	ldi	r24, 0x06	; 6
    2e8a:	08 95       	ret
    2e8c:	85 e0       	ldi	r24, 0x05	; 5
    2e8e:	08 95       	ret

00002e90 <Spi_SlaveReceivePacket>:
    2e90:	cf 92       	push	r12
    2e92:	df 92       	push	r13
    2e94:	ef 92       	push	r14
    2e96:	ff 92       	push	r15
    2e98:	1f 93       	push	r17
    2e9a:	cf 93       	push	r28
    2e9c:	df 93       	push	r29
    2e9e:	6c 01       	movw	r12, r24
    2ea0:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <genuSpi_Status>
    2ea4:	97 30       	cpi	r25, 0x07	; 7
    2ea6:	b1 f4       	brne	.+44     	; 0x2ed4 <Spi_SlaveReceivePacket+0x44>
    2ea8:	7b 01       	movw	r14, r22
    2eaa:	10 e0       	ldi	r17, 0x00	; 0
    2eac:	0c c0       	rjmp	.+24     	; 0x2ec6 <Spi_SlaveReceivePacket+0x36>
    2eae:	e6 01       	movw	r28, r12
    2eb0:	c8 0f       	add	r28, r24
    2eb2:	d9 1f       	adc	r29, r25
    2eb4:	ce 01       	movw	r24, r28
    2eb6:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <Spi_SlaveReceiveByte>
    2eba:	81 30       	cpi	r24, 0x01	; 1
    2ebc:	69 f4       	brne	.+26     	; 0x2ed8 <Spi_SlaveReceivePacket+0x48>
    2ebe:	98 81       	ld	r25, Y
    2ec0:	99 23       	and	r25, r25
    2ec2:	59 f0       	breq	.+22     	; 0x2eda <Spi_SlaveReceivePacket+0x4a>
    2ec4:	1f 5f       	subi	r17, 0xFF	; 255
    2ec6:	81 2f       	mov	r24, r17
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	8e 15       	cp	r24, r14
    2ecc:	9f 05       	cpc	r25, r15
    2ece:	78 f3       	brcs	.-34     	; 0x2eae <Spi_SlaveReceivePacket+0x1e>
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	03 c0       	rjmp	.+6      	; 0x2eda <Spi_SlaveReceivePacket+0x4a>
    2ed4:	86 e0       	ldi	r24, 0x06	; 6
    2ed6:	01 c0       	rjmp	.+2      	; 0x2eda <Spi_SlaveReceivePacket+0x4a>
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	df 91       	pop	r29
    2edc:	cf 91       	pop	r28
    2ede:	1f 91       	pop	r17
    2ee0:	ff 90       	pop	r15
    2ee2:	ef 90       	pop	r14
    2ee4:	df 90       	pop	r13
    2ee6:	cf 90       	pop	r12
    2ee8:	08 95       	ret

00002eea <__vector_12>:


    2eea:	1f 92       	push	r1
    2eec:	0f 92       	push	r0
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	0f 92       	push	r0
    2ef2:	11 24       	eor	r1, r1
    2ef4:	2f 93       	push	r18
    2ef6:	3f 93       	push	r19
    2ef8:	4f 93       	push	r20
    2efa:	5f 93       	push	r21
    2efc:	6f 93       	push	r22
    2efe:	7f 93       	push	r23
    2f00:	8f 93       	push	r24
    2f02:	9f 93       	push	r25
    2f04:	af 93       	push	r26
    2f06:	bf 93       	push	r27
    2f08:	ef 93       	push	r30
    2f0a:	ff 93       	push	r31
    2f0c:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <SPI_STC_CallBackPtr>
    2f10:	f0 91 55 06 	lds	r31, 0x0655	; 0x800655 <SPI_STC_CallBackPtr+0x1>
    2f14:	09 95       	icall
    2f16:	ff 91       	pop	r31
    2f18:	ef 91       	pop	r30
    2f1a:	bf 91       	pop	r27
    2f1c:	af 91       	pop	r26
    2f1e:	9f 91       	pop	r25
    2f20:	8f 91       	pop	r24
    2f22:	7f 91       	pop	r23
    2f24:	6f 91       	pop	r22
    2f26:	5f 91       	pop	r21
    2f28:	4f 91       	pop	r20
    2f2a:	3f 91       	pop	r19
    2f2c:	2f 91       	pop	r18
    2f2e:	0f 90       	pop	r0
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	0f 90       	pop	r0
    2f34:	1f 90       	pop	r1
    2f36:	18 95       	reti

00002f38 <stringLength>:
	for (s8_loopIndex=length-2; s8_loopIndex>=0; s8_loopIndex--)
	{
		*pu32_Num += (pu8_String[s8_loopIndex]-'0') *digit;
		digit*=10;
	}
}
    2f38:	ac 01       	movw	r20, r24
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	01 c0       	rjmp	.+2      	; 0x2f40 <stringLength+0x8>
    2f3e:	8f 5f       	subi	r24, 0xFF	; 255
    2f40:	fa 01       	movw	r30, r20
    2f42:	e8 0f       	add	r30, r24
    2f44:	f1 1d       	adc	r31, r1
    2f46:	20 81       	ld	r18, Z
    2f48:	21 11       	cpse	r18, r1
    2f4a:	f9 cf       	rjmp	.-14     	; 0x2f3e <stringLength+0x6>
    2f4c:	8f 5f       	subi	r24, 0xFF	; 255
    2f4e:	08 95       	ret

00002f50 <stringCompare>:
    2f50:	ff 92       	push	r15
    2f52:	0f 93       	push	r16
    2f54:	1f 93       	push	r17
    2f56:	cf 93       	push	r28
    2f58:	df 93       	push	r29
    2f5a:	8c 01       	movw	r16, r24
    2f5c:	eb 01       	movw	r28, r22
    2f5e:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <stringLength>
    2f62:	f8 2e       	mov	r15, r24
    2f64:	ce 01       	movw	r24, r28
    2f66:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <stringLength>
    2f6a:	8f 15       	cp	r24, r15
    2f6c:	b8 f0       	brcs	.+46     	; 0x2f9c <stringCompare+0x4c>
    2f6e:	f8 16       	cp	r15, r24
    2f70:	b8 f0       	brcs	.+46     	; 0x2fa0 <stringCompare+0x50>
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	09 c0       	rjmp	.+18     	; 0x2f88 <stringCompare+0x38>
    2f76:	fe 01       	movw	r30, r28
    2f78:	e8 0f       	add	r30, r24
    2f7a:	f9 1f       	adc	r31, r25
    2f7c:	80 81       	ld	r24, Z
    2f7e:	82 17       	cp	r24, r18
    2f80:	88 f0       	brcs	.+34     	; 0x2fa4 <stringCompare+0x54>
    2f82:	28 17       	cp	r18, r24
    2f84:	88 f0       	brcs	.+34     	; 0x2fa8 <stringCompare+0x58>
    2f86:	3f 5f       	subi	r19, 0xFF	; 255
    2f88:	83 2f       	mov	r24, r19
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	f8 01       	movw	r30, r16
    2f8e:	e8 0f       	add	r30, r24
    2f90:	f9 1f       	adc	r31, r25
    2f92:	20 81       	ld	r18, Z
    2f94:	21 11       	cpse	r18, r1
    2f96:	ef cf       	rjmp	.-34     	; 0x2f76 <stringCompare+0x26>
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	07 c0       	rjmp	.+14     	; 0x2faa <stringCompare+0x5a>
    2f9c:	82 e0       	ldi	r24, 0x02	; 2
    2f9e:	05 c0       	rjmp	.+10     	; 0x2faa <stringCompare+0x5a>
    2fa0:	83 e0       	ldi	r24, 0x03	; 3
    2fa2:	03 c0       	rjmp	.+6      	; 0x2faa <stringCompare+0x5a>
    2fa4:	82 e0       	ldi	r24, 0x02	; 2
    2fa6:	01 c0       	rjmp	.+2      	; 0x2faa <stringCompare+0x5a>
    2fa8:	83 e0       	ldi	r24, 0x03	; 3
    2faa:	df 91       	pop	r29
    2fac:	cf 91       	pop	r28
    2fae:	1f 91       	pop	r17
    2fb0:	0f 91       	pop	r16
    2fb2:	ff 90       	pop	r15
    2fb4:	08 95       	ret

00002fb6 <EmptyString>:
    2fb6:	ac 01       	movw	r20, r24
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	02 c0       	rjmp	.+4      	; 0x2fc0 <EmptyString+0xa>
    2fbc:	9f 5f       	subi	r25, 0xFF	; 255
    2fbe:	10 82       	st	Z, r1
    2fc0:	fa 01       	movw	r30, r20
    2fc2:	e9 0f       	add	r30, r25
    2fc4:	f1 1d       	adc	r31, r1
    2fc6:	20 81       	ld	r18, Z
    2fc8:	21 11       	cpse	r18, r1
    2fca:	f8 cf       	rjmp	.-16     	; 0x2fbc <EmptyString+0x6>
    2fcc:	08 95       	ret

00002fce <stringCopy>:
    2fce:	dc 01       	movw	r26, r24
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	05 c0       	rjmp	.+10     	; 0x2fde <stringCopy+0x10>
    2fd4:	fb 01       	movw	r30, r22
    2fd6:	e2 0f       	add	r30, r18
    2fd8:	f3 1f       	adc	r31, r19
    2fda:	40 83       	st	Z, r20
    2fdc:	9f 5f       	subi	r25, 0xFF	; 255
    2fde:	29 2f       	mov	r18, r25
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	fd 01       	movw	r30, r26
    2fe4:	e2 0f       	add	r30, r18
    2fe6:	f3 1f       	adc	r31, r19
    2fe8:	40 81       	ld	r20, Z
    2fea:	41 11       	cpse	r20, r1
    2fec:	f3 cf       	rjmp	.-26     	; 0x2fd4 <stringCopy+0x6>
    2fee:	08 95       	ret

00002ff0 <integerToString>:
    2ff0:	0f 93       	push	r16
    2ff2:	1f 93       	push	r17
    2ff4:	cf 93       	push	r28
    2ff6:	df 93       	push	r29
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	8b 01       	movw	r16, r22
    2ffc:	41 30       	cpi	r20, 0x01	; 1
    2ffe:	09 f0       	breq	.+2      	; 0x3002 <integerToString+0x12>
    3000:	40 c0       	rjmp	.+128    	; 0x3082 <integerToString+0x92>
    3002:	c0 e0       	ldi	r28, 0x00	; 0
    3004:	d0 e0       	ldi	r29, 0x00	; 0
    3006:	6a e0       	ldi	r22, 0x0A	; 10
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__divmodhi4>
    300e:	cb 01       	movw	r24, r22
    3010:	00 97       	sbiw	r24, 0x00	; 0
    3012:	11 f0       	breq	.+4      	; 0x3018 <integerToString+0x28>
    3014:	21 96       	adiw	r28, 0x01	; 1
    3016:	f7 cf       	rjmp	.-18     	; 0x3006 <integerToString+0x16>
    3018:	de 01       	movw	r26, r28
    301a:	11 96       	adiw	r26, 0x01	; 1
    301c:	a0 0f       	add	r26, r16
    301e:	b1 1f       	adc	r27, r17
    3020:	1c 92       	st	X, r1
    3022:	2d c0       	rjmp	.+90     	; 0x307e <integerToString+0x8e>
    3024:	a8 01       	movw	r20, r16
    3026:	4c 0f       	add	r20, r28
    3028:	5d 1f       	adc	r21, r29
    302a:	9f 01       	movw	r18, r30
    302c:	ad ec       	ldi	r26, 0xCD	; 205
    302e:	bc ec       	ldi	r27, 0xCC	; 204
    3030:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <__umulhisi3>
    3034:	96 95       	lsr	r25
    3036:	87 95       	ror	r24
    3038:	96 95       	lsr	r25
    303a:	87 95       	ror	r24
    303c:	96 95       	lsr	r25
    303e:	87 95       	ror	r24
    3040:	9c 01       	movw	r18, r24
    3042:	22 0f       	add	r18, r18
    3044:	33 1f       	adc	r19, r19
    3046:	88 0f       	add	r24, r24
    3048:	99 1f       	adc	r25, r25
    304a:	88 0f       	add	r24, r24
    304c:	99 1f       	adc	r25, r25
    304e:	88 0f       	add	r24, r24
    3050:	99 1f       	adc	r25, r25
    3052:	82 0f       	add	r24, r18
    3054:	93 1f       	adc	r25, r19
    3056:	9f 01       	movw	r18, r30
    3058:	28 1b       	sub	r18, r24
    305a:	39 0b       	sbc	r19, r25
    305c:	c9 01       	movw	r24, r18
    305e:	80 5d       	subi	r24, 0xD0	; 208
    3060:	da 01       	movw	r26, r20
    3062:	8c 93       	st	X, r24
    3064:	9f 01       	movw	r18, r30
    3066:	ad ec       	ldi	r26, 0xCD	; 205
    3068:	bc ec       	ldi	r27, 0xCC	; 204
    306a:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <__umulhisi3>
    306e:	fc 01       	movw	r30, r24
    3070:	f6 95       	lsr	r31
    3072:	e7 95       	ror	r30
    3074:	f6 95       	lsr	r31
    3076:	e7 95       	ror	r30
    3078:	f6 95       	lsr	r31
    307a:	e7 95       	ror	r30
    307c:	21 97       	sbiw	r28, 0x01	; 1
    307e:	30 97       	sbiw	r30, 0x00	; 0
    3080:	89 f6       	brne	.-94     	; 0x3024 <integerToString+0x34>
    3082:	df 91       	pop	r29
    3084:	cf 91       	pop	r28
    3086:	1f 91       	pop	r17
    3088:	0f 91       	pop	r16
    308a:	08 95       	ret

0000308c <stringToFloat>:

float32_t stringToFloat(uint8_t* string)
{
    308c:	8f 92       	push	r8
    308e:	9f 92       	push	r9
    3090:	af 92       	push	r10
    3092:	bf 92       	push	r11
    3094:	cf 92       	push	r12
    3096:	df 92       	push	r13
    3098:	ef 92       	push	r14
    309a:	ff 92       	push	r15
    309c:	0f 93       	push	r16
    309e:	1f 93       	push	r17
    30a0:	cf 93       	push	r28
    30a2:	df 93       	push	r29
    30a4:	ec 01       	movw	r28, r24
	uint8_t strLen = stringLength(string)-1;
    30a6:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <stringLength>
    30aa:	0f ef       	ldi	r16, 0xFF	; 255
    30ac:	08 0f       	add	r16, r24
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
    30ae:	c1 2c       	mov	r12, r1
    30b0:	d1 2c       	mov	r13, r1
    30b2:	76 01       	movw	r14, r12
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    30b4:	10 e0       	ldi	r17, 0x00	; 0
    30b6:	1e c0       	rjmp	.+60     	; 0x30f4 <stringToFloat+0x68>
	{
		if(string[u8_loopIndex] == '.')
    30b8:	fe 01       	movw	r30, r28
    30ba:	e1 0f       	add	r30, r17
    30bc:	f1 1d       	adc	r31, r1
    30be:	60 81       	ld	r22, Z
    30c0:	6e 32       	cpi	r22, 0x2E	; 46
    30c2:	11 f4       	brne	.+4      	; 0x30c8 <stringToFloat+0x3c>
		{
			u8_loopIndex++;
    30c4:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    30c6:	18 c0       	rjmp	.+48     	; 0x30f8 <stringToFloat+0x6c>
		}
		f32_num += string[u8_loopIndex] - '0';
    30c8:	70 e0       	ldi	r23, 0x00	; 0
    30ca:	60 53       	subi	r22, 0x30	; 48
    30cc:	71 09       	sbc	r23, r1
    30ce:	07 2e       	mov	r0, r23
    30d0:	00 0c       	add	r0, r0
    30d2:	88 0b       	sbc	r24, r24
    30d4:	99 0b       	sbc	r25, r25
    30d6:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__floatsisf>
    30da:	a7 01       	movw	r20, r14
    30dc:	96 01       	movw	r18, r12
    30de:	0e 94 48 1c 	call	0x3890	; 0x3890 <__addsf3>
		f32_num *= 10;
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	40 e2       	ldi	r20, 0x20	; 32
    30e8:	51 e4       	ldi	r21, 0x41	; 65
    30ea:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__mulsf3>
    30ee:	6b 01       	movw	r12, r22
    30f0:	7c 01       	movw	r14, r24
{
	uint8_t strLen = stringLength(string)-1;
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    30f2:	1f 5f       	subi	r17, 0xFF	; 255
    30f4:	10 17       	cp	r17, r16
    30f6:	00 f3       	brcs	.-64     	; 0x30b8 <stringToFloat+0x2c>
			break;
		}
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	40 e2       	ldi	r20, 0x20	; 32
    30fe:	51 e4       	ldi	r21, 0x41	; 65
    3100:	c7 01       	movw	r24, r14
    3102:	b6 01       	movw	r22, r12
    3104:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__divsf3>
    3108:	4b 01       	movw	r8, r22
    310a:	5c 01       	movw	r10, r24
	f32_digit = 1;
    310c:	0f 2e       	mov	r0, r31
    310e:	c1 2c       	mov	r12, r1
    3110:	d1 2c       	mov	r13, r1
    3112:	f0 e8       	ldi	r31, 0x80	; 128
    3114:	ef 2e       	mov	r14, r31
    3116:	ff e3       	ldi	r31, 0x3F	; 63
    3118:	ff 2e       	mov	r15, r31
    311a:	f0 2d       	mov	r31, r0
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    311c:	24 c0       	rjmp	.+72     	; 0x3166 <stringToFloat+0xda>
	{
		f32_digit/=10;
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	40 e2       	ldi	r20, 0x20	; 32
    3124:	51 e4       	ldi	r21, 0x41	; 65
    3126:	c7 01       	movw	r24, r14
    3128:	b6 01       	movw	r22, r12
    312a:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__divsf3>
    312e:	6b 01       	movw	r12, r22
    3130:	7c 01       	movw	r14, r24
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
    3132:	fe 01       	movw	r30, r28
    3134:	e1 0f       	add	r30, r17
    3136:	f1 1d       	adc	r31, r1
    3138:	60 81       	ld	r22, Z
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	60 53       	subi	r22, 0x30	; 48
    313e:	71 09       	sbc	r23, r1
    3140:	07 2e       	mov	r0, r23
    3142:	00 0c       	add	r0, r0
    3144:	88 0b       	sbc	r24, r24
    3146:	99 0b       	sbc	r25, r25
    3148:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__floatsisf>
    314c:	a7 01       	movw	r20, r14
    314e:	96 01       	movw	r18, r12
    3150:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__mulsf3>
    3154:	9b 01       	movw	r18, r22
    3156:	ac 01       	movw	r20, r24
    3158:	c5 01       	movw	r24, r10
    315a:	b4 01       	movw	r22, r8
    315c:	0e 94 48 1c 	call	0x3890	; 0x3890 <__addsf3>
    3160:	4b 01       	movw	r8, r22
    3162:	5c 01       	movw	r10, r24
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
	f32_digit = 1;
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    3164:	1f 5f       	subi	r17, 0xFF	; 255
    3166:	10 17       	cp	r17, r16
    3168:	d0 f2       	brcs	.-76     	; 0x311e <stringToFloat+0x92>
	{
		f32_digit/=10;
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
	}
	return f32_num;
}
    316a:	c5 01       	movw	r24, r10
    316c:	b4 01       	movw	r22, r8
    316e:	df 91       	pop	r29
    3170:	cf 91       	pop	r28
    3172:	1f 91       	pop	r17
    3174:	0f 91       	pop	r16
    3176:	ff 90       	pop	r15
    3178:	ef 90       	pop	r14
    317a:	df 90       	pop	r13
    317c:	cf 90       	pop	r12
    317e:	bf 90       	pop	r11
    3180:	af 90       	pop	r10
    3182:	9f 90       	pop	r9
    3184:	8f 90       	pop	r8
    3186:	08 95       	ret

00003188 <floatToString>:

void floatToString(float32_t f32_num, uint8_t* string)
{
    3188:	8f 92       	push	r8
    318a:	9f 92       	push	r9
    318c:	af 92       	push	r10
    318e:	bf 92       	push	r11
    3190:	cf 92       	push	r12
    3192:	df 92       	push	r13
    3194:	ef 92       	push	r14
    3196:	ff 92       	push	r15
    3198:	0f 93       	push	r16
    319a:	1f 93       	push	r17
    319c:	cf 93       	push	r28
    319e:	df 93       	push	r29
    31a0:	4b 01       	movw	r8, r22
    31a2:	5c 01       	movw	r10, r24
    31a4:	8a 01       	movw	r16, r20
	uint32_t u32_num = (uint32_t)f32_num;
    31a6:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__fixunssfsi>
    31aa:	c6 2e       	mov	r12, r22
    31ac:	d7 2e       	mov	r13, r23
    31ae:	e8 2e       	mov	r14, r24
    31b0:	f9 2e       	mov	r15, r25
    31b2:	26 2f       	mov	r18, r22
    31b4:	37 2f       	mov	r19, r23
    31b6:	48 2f       	mov	r20, r24
    31b8:	59 2f       	mov	r21, r25
	uint8_t u8_digitCount=0;
    31ba:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    31bc:	09 c0       	rjmp	.+18     	; 0x31d0 <floatToString+0x48>
	{
		u32_num/=10;
    31be:	ca 01       	movw	r24, r20
    31c0:	b9 01       	movw	r22, r18
    31c2:	2a e0       	ldi	r18, 0x0A	; 10
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	40 e0       	ldi	r20, 0x00	; 0
    31c8:	50 e0       	ldi	r21, 0x00	; 0
    31ca:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__udivmodsi4>
		u8_digitCount++;
    31ce:	df 5f       	subi	r29, 0xFF	; 255
{
	uint32_t u32_num = (uint32_t)f32_num;
	uint8_t u8_digitCount=0;
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    31d0:	21 15       	cp	r18, r1
    31d2:	31 05       	cpc	r19, r1
    31d4:	41 05       	cpc	r20, r1
    31d6:	51 05       	cpc	r21, r1
    31d8:	91 f7       	brne	.-28     	; 0x31be <floatToString+0x36>
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
    31da:	cf ef       	ldi	r28, 0xFF	; 255
    31dc:	cd 0f       	add	r28, r29
	while(u32_num !=0)
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
    31de:	6c 2d       	mov	r22, r12
    31e0:	7d 2d       	mov	r23, r13
    31e2:	8e 2d       	mov	r24, r14
    31e4:	9f 2d       	mov	r25, r15
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    31e6:	14 c0       	rjmp	.+40     	; 0x3210 <floatToString+0x88>
	{
		temp = (u32_num % 10)+ '0';
    31e8:	2a e0       	ldi	r18, 0x0A	; 10
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	40 e0       	ldi	r20, 0x00	; 0
    31ee:	50 e0       	ldi	r21, 0x00	; 0
    31f0:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__udivmodsi4>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	c0 96       	adiw	r24, 0x30	; 48
    31fa:	a1 1d       	adc	r26, r1
    31fc:	b1 1d       	adc	r27, r1
		string[u8_digitCount--] = temp;
    31fe:	f8 01       	movw	r30, r16
    3200:	ec 0f       	add	r30, r28
    3202:	f1 1d       	adc	r31, r1
    3204:	80 83       	st	Z, r24
		u32_num /= 10;
    3206:	62 2f       	mov	r22, r18
    3208:	73 2f       	mov	r23, r19
    320a:	84 2f       	mov	r24, r20
    320c:	95 2f       	mov	r25, r21
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
	{
		temp = (u32_num % 10)+ '0';
		string[u8_digitCount--] = temp;
    320e:	c1 50       	subi	r28, 0x01	; 1
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    3210:	61 15       	cp	r22, r1
    3212:	71 05       	cpc	r23, r1
    3214:	81 05       	cpc	r24, r1
    3216:	91 05       	cpc	r25, r1
    3218:	39 f7       	brne	.-50     	; 0x31e8 <floatToString+0x60>
		string[u8_digitCount--] = temp;
		u32_num /= 10;

	}
	u32_num = (uint32_t)f32_num;
	f32_num -= u32_num;
    321a:	6c 2d       	mov	r22, r12
    321c:	7d 2d       	mov	r23, r13
    321e:	8e 2d       	mov	r24, r14
    3220:	9f 2d       	mov	r25, r15
    3222:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <__floatunsisf>
    3226:	9b 01       	movw	r18, r22
    3228:	ac 01       	movw	r20, r24
    322a:	c5 01       	movw	r24, r10
    322c:	b4 01       	movw	r22, r8
    322e:	0e 94 47 1c 	call	0x388e	; 0x388e <__subsf3>
	u32_num = f32_num*10;
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	40 e2       	ldi	r20, 0x20	; 32
    3238:	51 e4       	ldi	r21, 0x41	; 65
    323a:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__mulsf3>
    323e:	6b 01       	movw	r12, r22
    3240:	7c 01       	movw	r14, r24
    3242:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__fixunssfsi>
	string[u8_indexDot++] = '.';
    3246:	21 e0       	ldi	r18, 0x01	; 1
    3248:	2d 0f       	add	r18, r29
    324a:	f8 01       	movw	r30, r16
    324c:	ed 0f       	add	r30, r29
    324e:	f1 1d       	adc	r31, r1
    3250:	3e e2       	ldi	r19, 0x2E	; 46
    3252:	30 83       	st	Z, r19
	string[u8_indexDot++] = u32_num + '0';
    3254:	de 5f       	subi	r29, 0xFE	; 254
    3256:	f8 01       	movw	r30, r16
    3258:	e2 0f       	add	r30, r18
    325a:	f1 1d       	adc	r31, r1
    325c:	20 e3       	ldi	r18, 0x30	; 48
    325e:	26 0f       	add	r18, r22
    3260:	20 83       	st	Z, r18
	f32_num *=10;
	f32_num -= u32_num;
    3262:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <__floatunsisf>
    3266:	9b 01       	movw	r18, r22
    3268:	ac 01       	movw	r20, r24
    326a:	c7 01       	movw	r24, r14
    326c:	b6 01       	movw	r22, r12
    326e:	0e 94 47 1c 	call	0x388e	; 0x388e <__subsf3>
	u32_num = f32_num*10;
    3272:	20 e0       	ldi	r18, 0x00	; 0
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	40 e2       	ldi	r20, 0x20	; 32
    3278:	51 e4       	ldi	r21, 0x41	; 65
    327a:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__mulsf3>
    327e:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__fixunssfsi>
	string[u8_indexDot] = u32_num + '0';
    3282:	f8 01       	movw	r30, r16
    3284:	ed 0f       	add	r30, r29
    3286:	f1 1d       	adc	r31, r1
    3288:	60 5d       	subi	r22, 0xD0	; 208
    328a:	60 83       	st	Z, r22
    328c:	df 91       	pop	r29
    328e:	cf 91       	pop	r28
    3290:	1f 91       	pop	r17
    3292:	0f 91       	pop	r16
    3294:	ff 90       	pop	r15
    3296:	ef 90       	pop	r14
    3298:	df 90       	pop	r13
    329a:	cf 90       	pop	r12
    329c:	bf 90       	pop	r11
    329e:	af 90       	pop	r10
    32a0:	9f 90       	pop	r9
    32a2:	8f 90       	pop	r8
    32a4:	08 95       	ret

000032a6 <waveFunction>:
* Parameters (out): None
* Return value: None
* Description: Function to be called inside the timer's ISR.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
void waveFunction(void)
{
    32a6:	0f 93       	push	r16
    32a8:	1f 93       	push	r17
	/* Toggle the Pin of the PWM Channel */
	if(Dio_togglePin(SWPwm_Channels[gu8_currentPwmChannel].u8_DioChannelID) != DIO_STATUS_ERROR_OK)
    32aa:	e0 91 57 06 	lds	r30, 0x0657	; 0x800657 <gu8_currentPwmChannel>
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	ee 0f       	add	r30, r30
    32b2:	ff 1f       	adc	r31, r31
    32b4:	e1 51       	subi	r30, 0x11	; 17
    32b6:	fb 4f       	sbci	r31, 0xFB	; 251
    32b8:	80 81       	ld	r24, Z
    32ba:	0e 94 f5 11 	call	0x23ea	; 0x23ea <Dio_togglePin>
    32be:	81 30       	cpi	r24, 0x01	; 1
    32c0:	09 f0       	breq	.+2      	; 0x32c4 <waveFunction+0x1e>
    32c2:	76 c0       	rjmp	.+236    	; 0x33b0 <waveFunction+0x10a>
		return;
	/* Check if the PWM Channel is still in Running State */
	if (gstr_ChannelsData[gu8_currentPwmChannel].enuChannelState == SWPWM_RUNNING)
    32c4:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <gu8_currentPwmChannel>
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	9c 01       	movw	r18, r24
    32cc:	22 0f       	add	r18, r18
    32ce:	33 1f       	adc	r19, r19
    32d0:	f9 01       	movw	r30, r18
    32d2:	ee 0f       	add	r30, r30
    32d4:	ff 1f       	adc	r31, r31
    32d6:	ee 0f       	add	r30, r30
    32d8:	ff 1f       	adc	r31, r31
    32da:	ee 0f       	add	r30, r30
    32dc:	ff 1f       	adc	r31, r31
    32de:	e2 1b       	sub	r30, r18
    32e0:	f3 0b       	sbc	r31, r19
    32e2:	e8 5a       	subi	r30, 0xA8	; 168
    32e4:	f9 4f       	sbci	r31, 0xF9	; 249
    32e6:	25 85       	ldd	r18, Z+13	; 0x0d
    32e8:	22 30       	cpi	r18, 0x02	; 2
    32ea:	09 f0       	breq	.+2      	; 0x32ee <waveFunction+0x48>
    32ec:	61 c0       	rjmp	.+194    	; 0x33b0 <waveFunction+0x10a>
	{
		/* Start the Timer again with the new ticks assigned */
		if(GptStart_aSync(SWPwm_Channels[gu8_currentPwmChannel].u8_GptChannelID,\
    32ee:	88 0f       	add	r24, r24
    32f0:	99 1f       	adc	r25, r25
    32f2:	fc 01       	movw	r30, r24
    32f4:	ee 0f       	add	r30, r30
    32f6:	ff 1f       	adc	r31, r31
    32f8:	ee 0f       	add	r30, r30
    32fa:	ff 1f       	adc	r31, r31
    32fc:	ee 0f       	add	r30, r30
    32fe:	ff 1f       	adc	r31, r31
    3300:	e8 1b       	sub	r30, r24
    3302:	f9 0b       	sbc	r31, r25
    3304:	e8 5a       	subi	r30, 0xA8	; 168
    3306:	f9 4f       	sbci	r31, 0xF9	; 249
    3308:	41 85       	ldd	r20, Z+9	; 0x09
    330a:	52 85       	ldd	r21, Z+10	; 0x0a
    330c:	63 85       	ldd	r22, Z+11	; 0x0b
    330e:	74 85       	ldd	r23, Z+12	; 0x0c
    3310:	fc 01       	movw	r30, r24
    3312:	e1 51       	subi	r30, 0x11	; 17
    3314:	fb 4f       	sbci	r31, 0xFB	; 251
    3316:	23 e5       	ldi	r18, 0x53	; 83
    3318:	39 e1       	ldi	r19, 0x19	; 25
    331a:	81 81       	ldd	r24, Z+1	; 0x01
    331c:	0e 94 c6 13 	call	0x278c	; 0x278c <GptStart_aSync>
    3320:	81 30       	cpi	r24, 0x01	; 1
    3322:	09 f0       	breq	.+2      	; 0x3326 <waveFunction+0x80>
    3324:	45 c0       	rjmp	.+138    	; 0x33b0 <waveFunction+0x10a>
		                  gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks,\
						   waveFunction) != GPT_STATUS_ERROR_OK)	return;
		
		/* Replace the next ticks to be counted between ONTicks and OFFTicks*/
		if(gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks == gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks)
    3326:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <gu8_currentPwmChannel>
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	9c 01       	movw	r18, r24
    332e:	22 0f       	add	r18, r18
    3330:	33 1f       	adc	r19, r19
    3332:	f9 01       	movw	r30, r18
    3334:	ee 0f       	add	r30, r30
    3336:	ff 1f       	adc	r31, r31
    3338:	ee 0f       	add	r30, r30
    333a:	ff 1f       	adc	r31, r31
    333c:	ee 0f       	add	r30, r30
    333e:	ff 1f       	adc	r31, r31
    3340:	e2 1b       	sub	r30, r18
    3342:	f3 0b       	sbc	r31, r19
    3344:	e8 5a       	subi	r30, 0xA8	; 168
    3346:	f9 4f       	sbci	r31, 0xF9	; 249
    3348:	01 85       	ldd	r16, Z+9	; 0x09
    334a:	12 85       	ldd	r17, Z+10	; 0x0a
    334c:	23 85       	ldd	r18, Z+11	; 0x0b
    334e:	34 85       	ldd	r19, Z+12	; 0x0c
    3350:	45 81       	ldd	r20, Z+5	; 0x05
    3352:	56 81       	ldd	r21, Z+6	; 0x06
    3354:	67 81       	ldd	r22, Z+7	; 0x07
    3356:	70 85       	ldd	r23, Z+8	; 0x08
    3358:	04 17       	cp	r16, r20
    335a:	15 07       	cpc	r17, r21
    335c:	26 07       	cpc	r18, r22
    335e:	37 07       	cpc	r19, r23
    3360:	b1 f4       	brne	.+44     	; 0x338e <waveFunction+0xe8>
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_ONTicks;
    3362:	88 0f       	add	r24, r24
    3364:	99 1f       	adc	r25, r25
    3366:	fc 01       	movw	r30, r24
    3368:	ee 0f       	add	r30, r30
    336a:	ff 1f       	adc	r31, r31
    336c:	ee 0f       	add	r30, r30
    336e:	ff 1f       	adc	r31, r31
    3370:	ee 0f       	add	r30, r30
    3372:	ff 1f       	adc	r31, r31
    3374:	e8 1b       	sub	r30, r24
    3376:	f9 0b       	sbc	r31, r25
    3378:	e8 5a       	subi	r30, 0xA8	; 168
    337a:	f9 4f       	sbci	r31, 0xF9	; 249
    337c:	81 81       	ldd	r24, Z+1	; 0x01
    337e:	92 81       	ldd	r25, Z+2	; 0x02
    3380:	a3 81       	ldd	r26, Z+3	; 0x03
    3382:	b4 81       	ldd	r27, Z+4	; 0x04
    3384:	81 87       	std	Z+9, r24	; 0x09
    3386:	92 87       	std	Z+10, r25	; 0x0a
    3388:	a3 87       	std	Z+11, r26	; 0x0b
    338a:	b4 87       	std	Z+12, r27	; 0x0c
    338c:	11 c0       	rjmp	.+34     	; 0x33b0 <waveFunction+0x10a>
		else
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks;
    338e:	88 0f       	add	r24, r24
    3390:	99 1f       	adc	r25, r25
    3392:	fc 01       	movw	r30, r24
    3394:	ee 0f       	add	r30, r30
    3396:	ff 1f       	adc	r31, r31
    3398:	ee 0f       	add	r30, r30
    339a:	ff 1f       	adc	r31, r31
    339c:	ee 0f       	add	r30, r30
    339e:	ff 1f       	adc	r31, r31
    33a0:	e8 1b       	sub	r30, r24
    33a2:	f9 0b       	sbc	r31, r25
    33a4:	e8 5a       	subi	r30, 0xA8	; 168
    33a6:	f9 4f       	sbci	r31, 0xF9	; 249
    33a8:	41 87       	std	Z+9, r20	; 0x09
    33aa:	52 87       	std	Z+10, r21	; 0x0a
    33ac:	63 87       	std	Z+11, r22	; 0x0b
    33ae:	74 87       	std	Z+12, r23	; 0x0c
	}
}
    33b0:	1f 91       	pop	r17
    33b2:	0f 91       	pop	r16
    33b4:	08 95       	ret

000033b6 <SWPwm_Init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
    33b6:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <genu_SWPwmModStatus>
    33ba:	81 30       	cpi	r24, 0x01	; 1
    33bc:	91 f0       	breq	.+36     	; 0x33e2 <SWPwm_Init+0x2c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
    33be:	0e 94 92 13 	call	0x2724	; 0x2724 <GptInit>
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
    33c2:	81 30       	cpi	r24, 0x01	; 1
    33c4:	11 f0       	breq	.+4      	; 0x33ca <SWPwm_Init+0x14>
    33c6:	83 30       	cpi	r24, 0x03	; 3
    33c8:	71 f4       	brne	.+28     	; 0x33e6 <SWPwm_Init+0x30>
		return SWPWM_STATUS_ERROR_NOK;
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    33ca:	85 e8       	ldi	r24, 0x85	; 133
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	0e 94 6e 10 	call	0x20dc	; 0x20dc <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    33d2:	81 30       	cpi	r24, 0x01	; 1
    33d4:	11 f0       	breq	.+4      	; 0x33da <SWPwm_Init+0x24>
    33d6:	87 30       	cpi	r24, 0x07	; 7
    33d8:	41 f4       	brne	.+16     	; 0x33ea <SWPwm_Init+0x34>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <genu_SWPwmModStatus>
	return SWPWM_STATUS_ERROR_OK;
    33e0:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_ERROR_NOK;
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
		return SWPWM_STATUS_ERROR_NOK;
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	08 95       	ret
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return SWPWM_STATUS_ERROR_NOK;
    33ea:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
	return SWPWM_STATUS_ERROR_OK;
}
    33ec:	08 95       	ret

000033ee <SWPwm_Start>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Start(u8SWPwm_Channel_t u8_ChannelID, uint32_t u32_Freq, uint8_t u8_DutyCycle)
{
    33ee:	4f 92       	push	r4
    33f0:	5f 92       	push	r5
    33f2:	6f 92       	push	r6
    33f4:	7f 92       	push	r7
    33f6:	8f 92       	push	r8
    33f8:	9f 92       	push	r9
    33fa:	af 92       	push	r10
    33fc:	bf 92       	push	r11
    33fe:	cf 92       	push	r12
    3400:	df 92       	push	r13
    3402:	ef 92       	push	r14
    3404:	ff 92       	push	r15
    3406:	0f 93       	push	r16
    3408:	1f 93       	push	r17
    340a:	cf 93       	push	r28
    340c:	df 93       	push	r29
    340e:	00 d0       	rcall	.+0      	; 0x3410 <SWPwm_Start+0x22>
    3410:	00 d0       	rcall	.+0      	; 0x3412 <SWPwm_Start+0x24>
    3412:	00 d0       	rcall	.+0      	; 0x3414 <SWPwm_Start+0x26>
    3414:	cd b7       	in	r28, 0x3d	; 61
    3416:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    3418:	90 91 56 06 	lds	r25, 0x0656	; 0x800656 <genu_SWPwmModStatus>
    341c:	91 30       	cpi	r25, 0x01	; 1
    341e:	09 f0       	breq	.+2      	; 0x3422 <SWPwm_Start+0x34>
    3420:	f2 c0       	rjmp	.+484    	; 0x3606 <SWPwm_Start+0x218>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    3422:	81 11       	cpse	r24, r1
    3424:	f2 c0       	rjmp	.+484    	; 0x360a <SWPwm_Start+0x21c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
    3426:	25 36       	cpi	r18, 0x65	; 101
    3428:	08 f0       	brcs	.+2      	; 0x342c <SWPwm_Start+0x3e>
    342a:	f1 c0       	rjmp	.+482    	; 0x360e <SWPwm_Start+0x220>
	{
		return SWPWM_STATUS_DC_OUTRANGE;
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
    342c:	e8 2f       	mov	r30, r24
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	fe 83       	std	Y+6, r31	; 0x06
    3432:	ed 83       	std	Y+5, r30	; 0x05
    3434:	df 01       	movw	r26, r30
    3436:	aa 0f       	add	r26, r26
    3438:	bb 1f       	adc	r27, r27
    343a:	fd 01       	movw	r30, r26
    343c:	ee 0f       	add	r30, r30
    343e:	ff 1f       	adc	r31, r31
    3440:	ee 0f       	add	r30, r30
    3442:	ff 1f       	adc	r31, r31
    3444:	ee 0f       	add	r30, r30
    3446:	ff 1f       	adc	r31, r31
    3448:	ea 1b       	sub	r30, r26
    344a:	fb 0b       	sbc	r31, r27
    344c:	e8 5a       	subi	r30, 0xA8	; 168
    344e:	f9 4f       	sbci	r31, 0xF9	; 249
    3450:	95 85       	ldd	r25, Z+13	; 0x0d
    3452:	92 30       	cpi	r25, 0x02	; 2
    3454:	09 f4       	brne	.+2      	; 0x3458 <SWPwm_Start+0x6a>
    3456:	dd c0       	rjmp	.+442    	; 0x3612 <SWPwm_Start+0x224>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
    3458:	22 23       	and	r18, r18
    345a:	09 f4       	brne	.+2      	; 0x345e <SWPwm_Start+0x70>
    345c:	dc c0       	rjmp	.+440    	; 0x3616 <SWPwm_Start+0x228>
    345e:	12 2f       	mov	r17, r18
    3460:	c8 2e       	mov	r12, r24
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
	}else if(u8_DutyCycle == 100)
    3462:	24 36       	cpi	r18, 0x64	; 100
    3464:	61 f4       	brne	.+24     	; 0x347e <SWPwm_Start+0x90>
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    3466:	fd 01       	movw	r30, r26
    3468:	e1 51       	subi	r30, 0x11	; 17
    346a:	fb 4f       	sbci	r31, 0xFB	; 251
    346c:	61 e0       	ldi	r22, 0x01	; 1
    346e:	80 81       	ld	r24, Z
    3470:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    3474:	81 30       	cpi	r24, 0x01	; 1
    3476:	09 f4       	brne	.+2      	; 0x347a <SWPwm_Start+0x8c>
    3478:	d0 c0       	rjmp	.+416    	; 0x361a <SWPwm_Start+0x22c>
			return SWPWM_STATUS_ERROR_NOK;
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	d5 c0       	rjmp	.+426    	; 0x3628 <SWPwm_Start+0x23a>
		return SWPWM_STATUS_ERROR_OK;
	}
	
	float32_t f32_wavePeriodTime = (float32_t)1 / u32_Freq;					/* The Periodic Time for the Generated Pulse in Seconds */
    347e:	cb 01       	movw	r24, r22
    3480:	ba 01       	movw	r22, r20
    3482:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <__floatunsisf>
    3486:	9b 01       	movw	r18, r22
    3488:	ac 01       	movw	r20, r24
    348a:	60 e0       	ldi	r22, 0x00	; 0
    348c:	70 e0       	ldi	r23, 0x00	; 0
    348e:	80 e8       	ldi	r24, 0x80	; 128
    3490:	9f e3       	ldi	r25, 0x3F	; 63
    3492:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__divsf3>
    3496:	4b 01       	movw	r8, r22
    3498:	5c 01       	movw	r10, r24
	float32_t f32_waveONTime = (f32_wavePeriodTime*u8_DutyCycle) / 100;		/* The HIGH Level Time in Seconds */
    349a:	61 2f       	mov	r22, r17
    349c:	70 e0       	ldi	r23, 0x00	; 0
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__floatsisf>
    34a6:	a5 01       	movw	r20, r10
    34a8:	94 01       	movw	r18, r8
    34aa:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__mulsf3>
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	48 ec       	ldi	r20, 0xC8	; 200
    34b4:	52 e4       	ldi	r21, 0x42	; 66
    34b6:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__divsf3>
    34ba:	2b 01       	movw	r4, r22
    34bc:	3c 01       	movw	r6, r24
	float32_t f32_waveOFFTime = f32_wavePeriodTime - f32_waveONTime;		/* The LOW Level Time in Seconds */
    34be:	9b 01       	movw	r18, r22
    34c0:	ac 01       	movw	r20, r24
    34c2:	c5 01       	movw	r24, r10
    34c4:	b4 01       	movw	r22, r8
    34c6:	0e 94 47 1c 	call	0x388e	; 0x388e <__subsf3>
    34ca:	4b 01       	movw	r8, r22
    34cc:	5c 01       	movw	r10, r24
	float32_t f32_systemPeriodTime = 0.0;
	uint16_t  u16_prescalerValue = 0;
	
	/* Get the Prescaler Value of the used Timer Channel */
	switch(Timers_Configurations[SWPwm_Channels[u8_ChannelID].u8_GptChannelID].enuClock_Src)
    34ce:	ed 81       	ldd	r30, Y+5	; 0x05
    34d0:	fe 81       	ldd	r31, Y+6	; 0x06
    34d2:	ee 0f       	add	r30, r30
    34d4:	ff 1f       	adc	r31, r31
    34d6:	e1 51       	subi	r30, 0x11	; 17
    34d8:	fb 4f       	sbci	r31, 0xFB	; 251
    34da:	d1 80       	ldd	r13, Z+1	; 0x01
    34dc:	8d 2d       	mov	r24, r13
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	fc 01       	movw	r30, r24
    34e2:	ee 0f       	add	r30, r30
    34e4:	ff 1f       	adc	r31, r31
    34e6:	8e 0f       	add	r24, r30
    34e8:	9f 1f       	adc	r25, r31
    34ea:	fc 01       	movw	r30, r24
    34ec:	e4 51       	subi	r30, 0x14	; 20
    34ee:	fb 4f       	sbci	r31, 0xFB	; 251
    34f0:	e1 81       	ldd	r30, Z+1	; 0x01
    34f2:	8e 2f       	mov	r24, r30
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	fc 01       	movw	r30, r24
    34f8:	31 97       	sbiw	r30, 0x01	; 1
    34fa:	e7 30       	cpi	r30, 0x07	; 7
    34fc:	f1 05       	cpc	r31, r1
    34fe:	08 f0       	brcs	.+2      	; 0x3502 <SWPwm_Start+0x114>
    3500:	8e c0       	rjmp	.+284    	; 0x361e <SWPwm_Start+0x230>
    3502:	e6 5d       	subi	r30, 0xD6	; 214
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	0c 94 af 1e 	jmp	0x3d5e	; 0x3d5e <__tablejump2__>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
    350a:	61 e0       	ldi	r22, 0x01	; 1
    350c:	70 e0       	ldi	r23, 0x00	; 0
    350e:	0b c0       	rjmp	.+22     	; 0x3526 <SWPwm_Start+0x138>
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
			break;
		case GPT_CLK_SRC_PRSCLR_64:
			u16_prescalerValue = 64;
    3510:	60 e4       	ldi	r22, 0x40	; 64
    3512:	70 e0       	ldi	r23, 0x00	; 0
			break;
    3514:	08 c0       	rjmp	.+16     	; 0x3526 <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_256:
			u16_prescalerValue = 256;
    3516:	60 e0       	ldi	r22, 0x00	; 0
    3518:	71 e0       	ldi	r23, 0x01	; 1
			break;
    351a:	05 c0       	rjmp	.+10     	; 0x3526 <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_1024:
			u16_prescalerValue = 1024;
    351c:	60 e0       	ldi	r22, 0x00	; 0
    351e:	74 e0       	ldi	r23, 0x04	; 4
			break;
    3520:	02 c0       	rjmp	.+4      	; 0x3526 <SWPwm_Start+0x138>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
    3522:	68 e0       	ldi	r22, 0x08	; 8
    3524:	70 e0       	ldi	r23, 0x00	; 0
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
	}
	
	f32_systemPeriodTime = (float32_t)u16_prescalerValue/SYS_CLOCK_FREQUENCY;				/* The Controllers Periodic Time in seconds based on the System Clock Frequency */
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <__floatunsisf>
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	34 e2       	ldi	r19, 0x24	; 36
    3532:	44 e7       	ldi	r20, 0x74	; 116
    3534:	59 e4       	ldi	r21, 0x49	; 73
    3536:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__divsf3>
    353a:	69 83       	std	Y+1, r22	; 0x01
    353c:	7a 83       	std	Y+2, r23	; 0x02
    353e:	8b 83       	std	Y+3, r24	; 0x03
    3540:	9c 83       	std	Y+4, r25	; 0x04
	gu8_currentPwmChannel = u8_ChannelID;
    3542:	c0 92 57 06 	sts	0x0657, r12	; 0x800657 <gu8_currentPwmChannel>
	gstr_ChannelsData[u8_ChannelID].u32_ONTicks = f32_waveONTime/f32_systemPeriodTime;		/* The HIGH Level Time in Ticks */
    3546:	9b 01       	movw	r18, r22
    3548:	ac 01       	movw	r20, r24
    354a:	c3 01       	movw	r24, r6
    354c:	b2 01       	movw	r22, r4
    354e:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__divsf3>
    3552:	ed 80       	ldd	r14, Y+5	; 0x05
    3554:	fe 80       	ldd	r15, Y+6	; 0x06
    3556:	ee 0c       	add	r14, r14
    3558:	ff 1c       	adc	r15, r15
    355a:	87 01       	movw	r16, r14
    355c:	00 0f       	add	r16, r16
    355e:	11 1f       	adc	r17, r17
    3560:	00 0f       	add	r16, r16
    3562:	11 1f       	adc	r17, r17
    3564:	00 0f       	add	r16, r16
    3566:	11 1f       	adc	r17, r17
    3568:	0e 19       	sub	r16, r14
    356a:	1f 09       	sbc	r17, r15
    356c:	08 5a       	subi	r16, 0xA8	; 168
    356e:	19 4f       	sbci	r17, 0xF9	; 249
    3570:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__fixunssfsi>
    3574:	f8 01       	movw	r30, r16
    3576:	61 83       	std	Z+1, r22	; 0x01
    3578:	72 83       	std	Z+2, r23	; 0x02
    357a:	83 83       	std	Z+3, r24	; 0x03
    357c:	94 83       	std	Z+4, r25	; 0x04
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
    357e:	29 81       	ldd	r18, Y+1	; 0x01
    3580:	3a 81       	ldd	r19, Y+2	; 0x02
    3582:	4b 81       	ldd	r20, Y+3	; 0x03
    3584:	5c 81       	ldd	r21, Y+4	; 0x04
    3586:	c5 01       	movw	r24, r10
    3588:	b4 01       	movw	r22, r8
    358a:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__divsf3>
    358e:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__fixunssfsi>
    3592:	f8 01       	movw	r30, r16
    3594:	65 83       	std	Z+5, r22	; 0x05
    3596:	76 83       	std	Z+6, r23	; 0x06
    3598:	87 83       	std	Z+7, r24	; 0x07
    359a:	90 87       	std	Z+8, r25	; 0x08
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;
    359c:	c0 82       	st	Z, r12

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    359e:	f7 01       	movw	r30, r14
    35a0:	e1 51       	subi	r30, 0x11	; 17
    35a2:	fb 4f       	sbci	r31, 0xFB	; 251
    35a4:	61 e0       	ldi	r22, 0x01	; 1
    35a6:	80 81       	ld	r24, Z
    35a8:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    35ac:	81 30       	cpi	r24, 0x01	; 1
    35ae:	c9 f5       	brne	.+114    	; 0x3622 <SWPwm_Start+0x234>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
    35b0:	8e e0       	ldi	r24, 0x0E	; 14
    35b2:	2d 81       	ldd	r18, Y+5	; 0x05
    35b4:	3e 81       	ldd	r19, Y+6	; 0x06
    35b6:	82 9f       	mul	r24, r18
    35b8:	f0 01       	movw	r30, r0
    35ba:	83 9f       	mul	r24, r19
    35bc:	f0 0d       	add	r31, r0
    35be:	11 24       	eor	r1, r1
    35c0:	e8 5a       	subi	r30, 0xA8	; 168
    35c2:	f9 4f       	sbci	r31, 0xF9	; 249
    35c4:	41 81       	ldd	r20, Z+1	; 0x01
    35c6:	52 81       	ldd	r21, Z+2	; 0x02
    35c8:	63 81       	ldd	r22, Z+3	; 0x03
    35ca:	74 81       	ldd	r23, Z+4	; 0x04
    35cc:	23 e5       	ldi	r18, 0x53	; 83
    35ce:	39 e1       	ldi	r19, 0x19	; 25
    35d0:	8d 2d       	mov	r24, r13
    35d2:	0e 94 c6 13 	call	0x278c	; 0x278c <GptStart_aSync>
    35d6:	81 30       	cpi	r24, 0x01	; 1
    35d8:	31 f5       	brne	.+76     	; 0x3626 <SWPwm_Start+0x238>
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
	
	/* Assign the Next Ticks to be counted by the Asynchronous Timer */
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
    35da:	8e e0       	ldi	r24, 0x0E	; 14
    35dc:	2d 81       	ldd	r18, Y+5	; 0x05
    35de:	3e 81       	ldd	r19, Y+6	; 0x06
    35e0:	82 9f       	mul	r24, r18
    35e2:	f0 01       	movw	r30, r0
    35e4:	83 9f       	mul	r24, r19
    35e6:	f0 0d       	add	r31, r0
    35e8:	11 24       	eor	r1, r1
    35ea:	e8 5a       	subi	r30, 0xA8	; 168
    35ec:	f9 4f       	sbci	r31, 0xF9	; 249
    35ee:	85 81       	ldd	r24, Z+5	; 0x05
    35f0:	96 81       	ldd	r25, Z+6	; 0x06
    35f2:	a7 81       	ldd	r26, Z+7	; 0x07
    35f4:	b0 85       	ldd	r27, Z+8	; 0x08
    35f6:	81 87       	std	Z+9, r24	; 0x09
    35f8:	92 87       	std	Z+10, r25	; 0x0a
    35fa:	a3 87       	std	Z+11, r26	; 0x0b
    35fc:	b4 87       	std	Z+12, r27	; 0x0c
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;
    35fe:	82 e0       	ldi	r24, 0x02	; 2
    3600:	85 87       	std	Z+13, r24	; 0x0d

	return SWPWM_STATUS_ERROR_OK;
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	11 c0       	rjmp	.+34     	; 0x3628 <SWPwm_Start+0x23a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    3606:	82 e0       	ldi	r24, 0x02	; 2
    3608:	0f c0       	rjmp	.+30     	; 0x3628 <SWPwm_Start+0x23a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    360a:	83 e0       	ldi	r24, 0x03	; 3
    360c:	0d c0       	rjmp	.+26     	; 0x3628 <SWPwm_Start+0x23a>
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
	{
		return SWPWM_STATUS_DC_OUTRANGE;
    360e:	84 e0       	ldi	r24, 0x04	; 4
    3610:	0b c0       	rjmp	.+22     	; 0x3628 <SWPwm_Start+0x23a>
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    3612:	85 e0       	ldi	r24, 0x05	; 5
    3614:	09 c0       	rjmp	.+18     	; 0x3628 <SWPwm_Start+0x23a>
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	07 c0       	rjmp	.+14     	; 0x3628 <SWPwm_Start+0x23a>
	}else if(u8_DutyCycle == 100)
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return SWPWM_STATUS_ERROR_NOK;
		return SWPWM_STATUS_ERROR_OK;
    361a:	81 e0       	ldi	r24, 0x01	; 1
    361c:	05 c0       	rjmp	.+10     	; 0x3628 <SWPwm_Start+0x23a>
			break;
		case GPT_CLK_SRC_PRSCLR_EXT_RISE:
			u16_prescalerValue = 1;
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
    361e:	80 e0       	ldi	r24, 0x00	; 0
    3620:	03 c0       	rjmp	.+6      	; 0x3628 <SWPwm_Start+0x23a>
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    3622:	80 e0       	ldi	r24, 0x00	; 0
    3624:	01 c0       	rjmp	.+2      	; 0x3628 <SWPwm_Start+0x23a>
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
    3626:	80 e0       	ldi	r24, 0x00	; 0
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;

	return SWPWM_STATUS_ERROR_OK;
}
    3628:	26 96       	adiw	r28, 0x06	; 6
    362a:	0f b6       	in	r0, 0x3f	; 63
    362c:	f8 94       	cli
    362e:	de bf       	out	0x3e, r29	; 62
    3630:	0f be       	out	0x3f, r0	; 63
    3632:	cd bf       	out	0x3d, r28	; 61
    3634:	df 91       	pop	r29
    3636:	cf 91       	pop	r28
    3638:	1f 91       	pop	r17
    363a:	0f 91       	pop	r16
    363c:	ff 90       	pop	r15
    363e:	ef 90       	pop	r14
    3640:	df 90       	pop	r13
    3642:	cf 90       	pop	r12
    3644:	bf 90       	pop	r11
    3646:	af 90       	pop	r10
    3648:	9f 90       	pop	r9
    364a:	8f 90       	pop	r8
    364c:	7f 90       	pop	r7
    364e:	6f 90       	pop	r6
    3650:	5f 90       	pop	r5
    3652:	4f 90       	pop	r4
    3654:	08 95       	ret

00003656 <SWPwm_Stop>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Stop(u8SWPwm_Channel_t u8_ChannelID)
{
    3656:	cf 93       	push	r28
    3658:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    365a:	90 91 56 06 	lds	r25, 0x0656	; 0x800656 <genu_SWPwmModStatus>
    365e:	91 30       	cpi	r25, 0x01	; 1
    3660:	b1 f5       	brne	.+108    	; 0x36ce <SWPwm_Stop+0x78>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    3662:	81 11       	cpse	r24, r1
    3664:	36 c0       	rjmp	.+108    	; 0x36d2 <SWPwm_Stop+0x7c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
    3666:	c8 2f       	mov	r28, r24
    3668:	d0 e0       	ldi	r29, 0x00	; 0
    366a:	ce 01       	movw	r24, r28
    366c:	88 0f       	add	r24, r24
    366e:	99 1f       	adc	r25, r25
    3670:	fc 01       	movw	r30, r24
    3672:	ee 0f       	add	r30, r30
    3674:	ff 1f       	adc	r31, r31
    3676:	ee 0f       	add	r30, r30
    3678:	ff 1f       	adc	r31, r31
    367a:	ee 0f       	add	r30, r30
    367c:	ff 1f       	adc	r31, r31
    367e:	e8 1b       	sub	r30, r24
    3680:	f9 0b       	sbc	r31, r25
    3682:	e8 5a       	subi	r30, 0xA8	; 168
    3684:	f9 4f       	sbci	r31, 0xF9	; 249
    3686:	85 85       	ldd	r24, Z+13	; 0x0d
    3688:	82 30       	cpi	r24, 0x02	; 2
    368a:	29 f5       	brne	.+74     	; 0x36d6 <SWPwm_Stop+0x80>
	
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
    368c:	fe 01       	movw	r30, r28
    368e:	ee 0f       	add	r30, r30
    3690:	ff 1f       	adc	r31, r31
    3692:	e1 51       	subi	r30, 0x11	; 17
    3694:	fb 4f       	sbci	r31, 0xFB	; 251
    3696:	60 e0       	ldi	r22, 0x00	; 0
    3698:	80 81       	ld	r24, Z
    369a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Dio_writePin>
    369e:	81 30       	cpi	r24, 0x01	; 1
    36a0:	e1 f4       	brne	.+56     	; 0x36da <SWPwm_Stop+0x84>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the State of the PWM Channel to STOPPED */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
    36a2:	8e e0       	ldi	r24, 0x0E	; 14
    36a4:	8c 9f       	mul	r24, r28
    36a6:	f0 01       	movw	r30, r0
    36a8:	8d 9f       	mul	r24, r29
    36aa:	f0 0d       	add	r31, r0
    36ac:	11 24       	eor	r1, r1
    36ae:	e8 5a       	subi	r30, 0xA8	; 168
    36b0:	f9 4f       	sbci	r31, 0xF9	; 249
    36b2:	83 e0       	ldi	r24, 0x03	; 3
    36b4:	85 87       	std	Z+13, r24	; 0x0d
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
    36b6:	fe 01       	movw	r30, r28
    36b8:	ee 0f       	add	r30, r30
    36ba:	ff 1f       	adc	r31, r31
    36bc:	e1 51       	subi	r30, 0x11	; 17
    36be:	fb 4f       	sbci	r31, 0xFB	; 251
    36c0:	81 81       	ldd	r24, Z+1	; 0x01
    36c2:	0e 94 25 14 	call	0x284a	; 0x284a <GptStop>
    36c6:	81 30       	cpi	r24, 0x01	; 1
    36c8:	51 f0       	breq	.+20     	; 0x36de <SWPwm_Stop+0x88>
		return SWPWM_STATUS_ERROR_NOK;
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	09 c0       	rjmp	.+18     	; 0x36e0 <SWPwm_Stop+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    36ce:	82 e0       	ldi	r24, 0x02	; 2
    36d0:	07 c0       	rjmp	.+14     	; 0x36e0 <SWPwm_Stop+0x8a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    36d2:	83 e0       	ldi	r24, 0x03	; 3
    36d4:	05 c0       	rjmp	.+10     	; 0x36e0 <SWPwm_Stop+0x8a>
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    36d6:	85 e0       	ldi	r24, 0x05	; 5
    36d8:	03 c0       	rjmp	.+6      	; 0x36e0 <SWPwm_Stop+0x8a>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    36da:	80 e0       	ldi	r24, 0x00	; 0
    36dc:	01 c0       	rjmp	.+2      	; 0x36e0 <SWPwm_Stop+0x8a>
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
	
	return SWPWM_STATUS_ERROR_OK;
    36de:	81 e0       	ldi	r24, 0x01	; 1
}
    36e0:	df 91       	pop	r29
    36e2:	cf 91       	pop	r28
    36e4:	08 95       	ret

000036e6 <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    36e6:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <u8_Uart_Status>
    36ea:	81 30       	cpi	r24, 0x01	; 1
    36ec:	81 f0       	breq	.+32     	; 0x370e <Uart_init+0x28>
    36ee:	10 bc       	out	0x20, r1	; 32
    36f0:	87 e6       	ldi	r24, 0x67	; 103
    36f2:	89 b9       	out	0x09, r24	; 9
    36f4:	82 e0       	ldi	r24, 0x02	; 2
    36f6:	8b b9       	out	0x0b, r24	; 11
    36f8:	88 e1       	ldi	r24, 0x18	; 24
    36fa:	8a b9       	out	0x0a, r24	; 10
    36fc:	80 e8       	ldi	r24, 0x80	; 128
    36fe:	80 bd       	out	0x20, r24	; 32
    3700:	80 b5       	in	r24, 0x20	; 32
    3702:	86 68       	ori	r24, 0x86	; 134
    3704:	80 bd       	out	0x20, r24	; 32
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <u8_Uart_Status>
    370c:	08 95       	ret
    370e:	87 e0       	ldi	r24, 0x07	; 7
    3710:	08 95       	ret

00003712 <Uart_sendByte>:
    3712:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <u8_Uart_Status>
    3716:	99 23       	and	r25, r25
    3718:	29 f0       	breq	.+10     	; 0x3724 <Uart_sendByte+0x12>
    371a:	5d 9b       	sbis	0x0b, 5	; 11
    371c:	fe cf       	rjmp	.-4      	; 0x371a <Uart_sendByte+0x8>
    371e:	8c b9       	out	0x0c, r24	; 12
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	08 95       	ret
    3724:	86 e0       	ldi	r24, 0x06	; 6
    3726:	08 95       	ret

00003728 <Uart_sendPacket>:
    3728:	ef 92       	push	r14
    372a:	ff 92       	push	r15
    372c:	0f 93       	push	r16
    372e:	1f 93       	push	r17
    3730:	cf 93       	push	r28
    3732:	df 93       	push	r29
    3734:	20 91 66 06 	lds	r18, 0x0666	; 0x800666 <u8_Uart_Status>
    3738:	22 23       	and	r18, r18
    373a:	99 f0       	breq	.+38     	; 0x3762 <Uart_sendPacket+0x3a>
    373c:	8b 01       	movw	r16, r22
    373e:	7c 01       	movw	r14, r24
    3740:	c0 e0       	ldi	r28, 0x00	; 0
    3742:	d0 e0       	ldi	r29, 0x00	; 0
    3744:	09 c0       	rjmp	.+18     	; 0x3758 <Uart_sendPacket+0x30>
    3746:	f7 01       	movw	r30, r14
    3748:	ec 0f       	add	r30, r28
    374a:	fd 1f       	adc	r31, r29
    374c:	80 81       	ld	r24, Z
    374e:	0e 94 89 1b 	call	0x3712	; 0x3712 <Uart_sendByte>
    3752:	81 30       	cpi	r24, 0x01	; 1
    3754:	41 f4       	brne	.+16     	; 0x3766 <Uart_sendPacket+0x3e>
    3756:	21 96       	adiw	r28, 0x01	; 1
    3758:	c0 17       	cp	r28, r16
    375a:	d1 07       	cpc	r29, r17
    375c:	a0 f3       	brcs	.-24     	; 0x3746 <Uart_sendPacket+0x1e>
    375e:	81 e0       	ldi	r24, 0x01	; 1
    3760:	03 c0       	rjmp	.+6      	; 0x3768 <Uart_sendPacket+0x40>
    3762:	86 e0       	ldi	r24, 0x06	; 6
    3764:	01 c0       	rjmp	.+2      	; 0x3768 <Uart_sendPacket+0x40>
    3766:	80 e0       	ldi	r24, 0x00	; 0
    3768:	df 91       	pop	r29
    376a:	cf 91       	pop	r28
    376c:	1f 91       	pop	r17
    376e:	0f 91       	pop	r16
    3770:	ff 90       	pop	r15
    3772:	ef 90       	pop	r14
    3774:	08 95       	ret

00003776 <Uart_EnableNotification_RXC>:
    3776:	9c 01       	movw	r18, r24
    3778:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <u8_Uart_Status>
    377c:	99 23       	and	r25, r25
    377e:	61 f0       	breq	.+24     	; 0x3798 <Uart_EnableNotification_RXC+0x22>
    3780:	21 15       	cp	r18, r1
    3782:	31 05       	cpc	r19, r1
    3784:	59 f0       	breq	.+22     	; 0x379c <Uart_EnableNotification_RXC+0x26>
    3786:	8a b1       	in	r24, 0x0a	; 10
    3788:	80 68       	ori	r24, 0x80	; 128
    378a:	8a b9       	out	0x0a, r24	; 10
    378c:	30 93 6a 06 	sts	0x066A, r19	; 0x80066a <Uart_RXC_CallBackPtr+0x1>
    3790:	20 93 69 06 	sts	0x0669, r18	; 0x800669 <Uart_RXC_CallBackPtr>
    3794:	81 e0       	ldi	r24, 0x01	; 1
    3796:	08 95       	ret
    3798:	86 e0       	ldi	r24, 0x06	; 6
    379a:	08 95       	ret
    379c:	85 e0       	ldi	r24, 0x05	; 5
    379e:	08 95       	ret

000037a0 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    37a0:	8c b1       	in	r24, 0x0c	; 12
}
    37a2:	08 95       	ret

000037a4 <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    37a4:	1f 92       	push	r1
    37a6:	0f 92       	push	r0
    37a8:	0f b6       	in	r0, 0x3f	; 63
    37aa:	0f 92       	push	r0
    37ac:	11 24       	eor	r1, r1
    37ae:	2f 93       	push	r18
    37b0:	3f 93       	push	r19
    37b2:	4f 93       	push	r20
    37b4:	5f 93       	push	r21
    37b6:	6f 93       	push	r22
    37b8:	7f 93       	push	r23
    37ba:	8f 93       	push	r24
    37bc:	9f 93       	push	r25
    37be:	af 93       	push	r26
    37c0:	bf 93       	push	r27
    37c2:	ef 93       	push	r30
    37c4:	ff 93       	push	r31
    37c6:	e0 91 6b 06 	lds	r30, 0x066B	; 0x80066b <Uart_TXC_CallBackPtr>
    37ca:	f0 91 6c 06 	lds	r31, 0x066C	; 0x80066c <Uart_TXC_CallBackPtr+0x1>
    37ce:	09 95       	icall
    37d0:	ff 91       	pop	r31
    37d2:	ef 91       	pop	r30
    37d4:	bf 91       	pop	r27
    37d6:	af 91       	pop	r26
    37d8:	9f 91       	pop	r25
    37da:	8f 91       	pop	r24
    37dc:	7f 91       	pop	r23
    37de:	6f 91       	pop	r22
    37e0:	5f 91       	pop	r21
    37e2:	4f 91       	pop	r20
    37e4:	3f 91       	pop	r19
    37e6:	2f 91       	pop	r18
    37e8:	0f 90       	pop	r0
    37ea:	0f be       	out	0x3f, r0	; 63
    37ec:	0f 90       	pop	r0
    37ee:	1f 90       	pop	r1
    37f0:	18 95       	reti

000037f2 <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    37f2:	1f 92       	push	r1
    37f4:	0f 92       	push	r0
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	0f 92       	push	r0
    37fa:	11 24       	eor	r1, r1
    37fc:	2f 93       	push	r18
    37fe:	3f 93       	push	r19
    3800:	4f 93       	push	r20
    3802:	5f 93       	push	r21
    3804:	6f 93       	push	r22
    3806:	7f 93       	push	r23
    3808:	8f 93       	push	r24
    380a:	9f 93       	push	r25
    380c:	af 93       	push	r26
    380e:	bf 93       	push	r27
    3810:	ef 93       	push	r30
    3812:	ff 93       	push	r31
    3814:	e0 91 69 06 	lds	r30, 0x0669	; 0x800669 <Uart_RXC_CallBackPtr>
    3818:	f0 91 6a 06 	lds	r31, 0x066A	; 0x80066a <Uart_RXC_CallBackPtr+0x1>
    381c:	09 95       	icall
    381e:	ff 91       	pop	r31
    3820:	ef 91       	pop	r30
    3822:	bf 91       	pop	r27
    3824:	af 91       	pop	r26
    3826:	9f 91       	pop	r25
    3828:	8f 91       	pop	r24
    382a:	7f 91       	pop	r23
    382c:	6f 91       	pop	r22
    382e:	5f 91       	pop	r21
    3830:	4f 91       	pop	r20
    3832:	3f 91       	pop	r19
    3834:	2f 91       	pop	r18
    3836:	0f 90       	pop	r0
    3838:	0f be       	out	0x3f, r0	; 63
    383a:	0f 90       	pop	r0
    383c:	1f 90       	pop	r1
    383e:	18 95       	reti

00003840 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    3840:	1f 92       	push	r1
    3842:	0f 92       	push	r0
    3844:	0f b6       	in	r0, 0x3f	; 63
    3846:	0f 92       	push	r0
    3848:	11 24       	eor	r1, r1
    384a:	2f 93       	push	r18
    384c:	3f 93       	push	r19
    384e:	4f 93       	push	r20
    3850:	5f 93       	push	r21
    3852:	6f 93       	push	r22
    3854:	7f 93       	push	r23
    3856:	8f 93       	push	r24
    3858:	9f 93       	push	r25
    385a:	af 93       	push	r26
    385c:	bf 93       	push	r27
    385e:	ef 93       	push	r30
    3860:	ff 93       	push	r31
    3862:	e0 91 67 06 	lds	r30, 0x0667	; 0x800667 <Uart_UDRE_CallBackPtr>
    3866:	f0 91 68 06 	lds	r31, 0x0668	; 0x800668 <Uart_UDRE_CallBackPtr+0x1>
    386a:	09 95       	icall
    386c:	ff 91       	pop	r31
    386e:	ef 91       	pop	r30
    3870:	bf 91       	pop	r27
    3872:	af 91       	pop	r26
    3874:	9f 91       	pop	r25
    3876:	8f 91       	pop	r24
    3878:	7f 91       	pop	r23
    387a:	6f 91       	pop	r22
    387c:	5f 91       	pop	r21
    387e:	4f 91       	pop	r20
    3880:	3f 91       	pop	r19
    3882:	2f 91       	pop	r18
    3884:	0f 90       	pop	r0
    3886:	0f be       	out	0x3f, r0	; 63
    3888:	0f 90       	pop	r0
    388a:	1f 90       	pop	r1
    388c:	18 95       	reti

0000388e <__subsf3>:
    388e:	50 58       	subi	r21, 0x80	; 128

00003890 <__addsf3>:
    3890:	bb 27       	eor	r27, r27
    3892:	aa 27       	eor	r26, r26
    3894:	0e 94 5f 1c 	call	0x38be	; 0x38be <__addsf3x>
    3898:	0c 94 d2 1d 	jmp	0x3ba4	; 0x3ba4 <__fp_round>
    389c:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__fp_pscA>
    38a0:	38 f0       	brcs	.+14     	; 0x38b0 <__addsf3+0x20>
    38a2:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <__fp_pscB>
    38a6:	20 f0       	brcs	.+8      	; 0x38b0 <__addsf3+0x20>
    38a8:	39 f4       	brne	.+14     	; 0x38b8 <__addsf3+0x28>
    38aa:	9f 3f       	cpi	r25, 0xFF	; 255
    38ac:	19 f4       	brne	.+6      	; 0x38b4 <__addsf3+0x24>
    38ae:	26 f4       	brtc	.+8      	; 0x38b8 <__addsf3+0x28>
    38b0:	0c 94 c1 1d 	jmp	0x3b82	; 0x3b82 <__fp_nan>
    38b4:	0e f4       	brtc	.+2      	; 0x38b8 <__addsf3+0x28>
    38b6:	e0 95       	com	r30
    38b8:	e7 fb       	bst	r30, 7
    38ba:	0c 94 bb 1d 	jmp	0x3b76	; 0x3b76 <__fp_inf>

000038be <__addsf3x>:
    38be:	e9 2f       	mov	r30, r25
    38c0:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <__fp_split3>
    38c4:	58 f3       	brcs	.-42     	; 0x389c <__addsf3+0xc>
    38c6:	ba 17       	cp	r27, r26
    38c8:	62 07       	cpc	r22, r18
    38ca:	73 07       	cpc	r23, r19
    38cc:	84 07       	cpc	r24, r20
    38ce:	95 07       	cpc	r25, r21
    38d0:	20 f0       	brcs	.+8      	; 0x38da <__addsf3x+0x1c>
    38d2:	79 f4       	brne	.+30     	; 0x38f2 <__addsf3x+0x34>
    38d4:	a6 f5       	brtc	.+104    	; 0x393e <__addsf3x+0x80>
    38d6:	0c 94 05 1e 	jmp	0x3c0a	; 0x3c0a <__fp_zero>
    38da:	0e f4       	brtc	.+2      	; 0x38de <__addsf3x+0x20>
    38dc:	e0 95       	com	r30
    38de:	0b 2e       	mov	r0, r27
    38e0:	ba 2f       	mov	r27, r26
    38e2:	a0 2d       	mov	r26, r0
    38e4:	0b 01       	movw	r0, r22
    38e6:	b9 01       	movw	r22, r18
    38e8:	90 01       	movw	r18, r0
    38ea:	0c 01       	movw	r0, r24
    38ec:	ca 01       	movw	r24, r20
    38ee:	a0 01       	movw	r20, r0
    38f0:	11 24       	eor	r1, r1
    38f2:	ff 27       	eor	r31, r31
    38f4:	59 1b       	sub	r21, r25
    38f6:	99 f0       	breq	.+38     	; 0x391e <__addsf3x+0x60>
    38f8:	59 3f       	cpi	r21, 0xF9	; 249
    38fa:	50 f4       	brcc	.+20     	; 0x3910 <__addsf3x+0x52>
    38fc:	50 3e       	cpi	r21, 0xE0	; 224
    38fe:	68 f1       	brcs	.+90     	; 0x395a <__addsf3x+0x9c>
    3900:	1a 16       	cp	r1, r26
    3902:	f0 40       	sbci	r31, 0x00	; 0
    3904:	a2 2f       	mov	r26, r18
    3906:	23 2f       	mov	r18, r19
    3908:	34 2f       	mov	r19, r20
    390a:	44 27       	eor	r20, r20
    390c:	58 5f       	subi	r21, 0xF8	; 248
    390e:	f3 cf       	rjmp	.-26     	; 0x38f6 <__addsf3x+0x38>
    3910:	46 95       	lsr	r20
    3912:	37 95       	ror	r19
    3914:	27 95       	ror	r18
    3916:	a7 95       	ror	r26
    3918:	f0 40       	sbci	r31, 0x00	; 0
    391a:	53 95       	inc	r21
    391c:	c9 f7       	brne	.-14     	; 0x3910 <__addsf3x+0x52>
    391e:	7e f4       	brtc	.+30     	; 0x393e <__addsf3x+0x80>
    3920:	1f 16       	cp	r1, r31
    3922:	ba 0b       	sbc	r27, r26
    3924:	62 0b       	sbc	r22, r18
    3926:	73 0b       	sbc	r23, r19
    3928:	84 0b       	sbc	r24, r20
    392a:	ba f0       	brmi	.+46     	; 0x395a <__addsf3x+0x9c>
    392c:	91 50       	subi	r25, 0x01	; 1
    392e:	a1 f0       	breq	.+40     	; 0x3958 <__addsf3x+0x9a>
    3930:	ff 0f       	add	r31, r31
    3932:	bb 1f       	adc	r27, r27
    3934:	66 1f       	adc	r22, r22
    3936:	77 1f       	adc	r23, r23
    3938:	88 1f       	adc	r24, r24
    393a:	c2 f7       	brpl	.-16     	; 0x392c <__addsf3x+0x6e>
    393c:	0e c0       	rjmp	.+28     	; 0x395a <__addsf3x+0x9c>
    393e:	ba 0f       	add	r27, r26
    3940:	62 1f       	adc	r22, r18
    3942:	73 1f       	adc	r23, r19
    3944:	84 1f       	adc	r24, r20
    3946:	48 f4       	brcc	.+18     	; 0x395a <__addsf3x+0x9c>
    3948:	87 95       	ror	r24
    394a:	77 95       	ror	r23
    394c:	67 95       	ror	r22
    394e:	b7 95       	ror	r27
    3950:	f7 95       	ror	r31
    3952:	9e 3f       	cpi	r25, 0xFE	; 254
    3954:	08 f0       	brcs	.+2      	; 0x3958 <__addsf3x+0x9a>
    3956:	b0 cf       	rjmp	.-160    	; 0x38b8 <__addsf3+0x28>
    3958:	93 95       	inc	r25
    395a:	88 0f       	add	r24, r24
    395c:	08 f0       	brcs	.+2      	; 0x3960 <__addsf3x+0xa2>
    395e:	99 27       	eor	r25, r25
    3960:	ee 0f       	add	r30, r30
    3962:	97 95       	ror	r25
    3964:	87 95       	ror	r24
    3966:	08 95       	ret

00003968 <__cmpsf2>:
    3968:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <__fp_cmp>
    396c:	08 f4       	brcc	.+2      	; 0x3970 <__cmpsf2+0x8>
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	08 95       	ret

00003972 <__divsf3>:
    3972:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divsf3x>
    3976:	0c 94 d2 1d 	jmp	0x3ba4	; 0x3ba4 <__fp_round>
    397a:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <__fp_pscB>
    397e:	58 f0       	brcs	.+22     	; 0x3996 <__divsf3+0x24>
    3980:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__fp_pscA>
    3984:	40 f0       	brcs	.+16     	; 0x3996 <__divsf3+0x24>
    3986:	29 f4       	brne	.+10     	; 0x3992 <__divsf3+0x20>
    3988:	5f 3f       	cpi	r21, 0xFF	; 255
    398a:	29 f0       	breq	.+10     	; 0x3996 <__divsf3+0x24>
    398c:	0c 94 bb 1d 	jmp	0x3b76	; 0x3b76 <__fp_inf>
    3990:	51 11       	cpse	r21, r1
    3992:	0c 94 06 1e 	jmp	0x3c0c	; 0x3c0c <__fp_szero>
    3996:	0c 94 c1 1d 	jmp	0x3b82	; 0x3b82 <__fp_nan>

0000399a <__divsf3x>:
    399a:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <__fp_split3>
    399e:	68 f3       	brcs	.-38     	; 0x397a <__divsf3+0x8>

000039a0 <__divsf3_pse>:
    39a0:	99 23       	and	r25, r25
    39a2:	b1 f3       	breq	.-20     	; 0x3990 <__divsf3+0x1e>
    39a4:	55 23       	and	r21, r21
    39a6:	91 f3       	breq	.-28     	; 0x398c <__divsf3+0x1a>
    39a8:	95 1b       	sub	r25, r21
    39aa:	55 0b       	sbc	r21, r21
    39ac:	bb 27       	eor	r27, r27
    39ae:	aa 27       	eor	r26, r26
    39b0:	62 17       	cp	r22, r18
    39b2:	73 07       	cpc	r23, r19
    39b4:	84 07       	cpc	r24, r20
    39b6:	38 f0       	brcs	.+14     	; 0x39c6 <__divsf3_pse+0x26>
    39b8:	9f 5f       	subi	r25, 0xFF	; 255
    39ba:	5f 4f       	sbci	r21, 0xFF	; 255
    39bc:	22 0f       	add	r18, r18
    39be:	33 1f       	adc	r19, r19
    39c0:	44 1f       	adc	r20, r20
    39c2:	aa 1f       	adc	r26, r26
    39c4:	a9 f3       	breq	.-22     	; 0x39b0 <__divsf3_pse+0x10>
    39c6:	35 d0       	rcall	.+106    	; 0x3a32 <__divsf3_pse+0x92>
    39c8:	0e 2e       	mov	r0, r30
    39ca:	3a f0       	brmi	.+14     	; 0x39da <__divsf3_pse+0x3a>
    39cc:	e0 e8       	ldi	r30, 0x80	; 128
    39ce:	32 d0       	rcall	.+100    	; 0x3a34 <__divsf3_pse+0x94>
    39d0:	91 50       	subi	r25, 0x01	; 1
    39d2:	50 40       	sbci	r21, 0x00	; 0
    39d4:	e6 95       	lsr	r30
    39d6:	00 1c       	adc	r0, r0
    39d8:	ca f7       	brpl	.-14     	; 0x39cc <__divsf3_pse+0x2c>
    39da:	2b d0       	rcall	.+86     	; 0x3a32 <__divsf3_pse+0x92>
    39dc:	fe 2f       	mov	r31, r30
    39de:	29 d0       	rcall	.+82     	; 0x3a32 <__divsf3_pse+0x92>
    39e0:	66 0f       	add	r22, r22
    39e2:	77 1f       	adc	r23, r23
    39e4:	88 1f       	adc	r24, r24
    39e6:	bb 1f       	adc	r27, r27
    39e8:	26 17       	cp	r18, r22
    39ea:	37 07       	cpc	r19, r23
    39ec:	48 07       	cpc	r20, r24
    39ee:	ab 07       	cpc	r26, r27
    39f0:	b0 e8       	ldi	r27, 0x80	; 128
    39f2:	09 f0       	breq	.+2      	; 0x39f6 <__divsf3_pse+0x56>
    39f4:	bb 0b       	sbc	r27, r27
    39f6:	80 2d       	mov	r24, r0
    39f8:	bf 01       	movw	r22, r30
    39fa:	ff 27       	eor	r31, r31
    39fc:	93 58       	subi	r25, 0x83	; 131
    39fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3a00:	3a f0       	brmi	.+14     	; 0x3a10 <__divsf3_pse+0x70>
    3a02:	9e 3f       	cpi	r25, 0xFE	; 254
    3a04:	51 05       	cpc	r21, r1
    3a06:	78 f0       	brcs	.+30     	; 0x3a26 <__divsf3_pse+0x86>
    3a08:	0c 94 bb 1d 	jmp	0x3b76	; 0x3b76 <__fp_inf>
    3a0c:	0c 94 06 1e 	jmp	0x3c0c	; 0x3c0c <__fp_szero>
    3a10:	5f 3f       	cpi	r21, 0xFF	; 255
    3a12:	e4 f3       	brlt	.-8      	; 0x3a0c <__divsf3_pse+0x6c>
    3a14:	98 3e       	cpi	r25, 0xE8	; 232
    3a16:	d4 f3       	brlt	.-12     	; 0x3a0c <__divsf3_pse+0x6c>
    3a18:	86 95       	lsr	r24
    3a1a:	77 95       	ror	r23
    3a1c:	67 95       	ror	r22
    3a1e:	b7 95       	ror	r27
    3a20:	f7 95       	ror	r31
    3a22:	9f 5f       	subi	r25, 0xFF	; 255
    3a24:	c9 f7       	brne	.-14     	; 0x3a18 <__divsf3_pse+0x78>
    3a26:	88 0f       	add	r24, r24
    3a28:	91 1d       	adc	r25, r1
    3a2a:	96 95       	lsr	r25
    3a2c:	87 95       	ror	r24
    3a2e:	97 f9       	bld	r25, 7
    3a30:	08 95       	ret
    3a32:	e1 e0       	ldi	r30, 0x01	; 1
    3a34:	66 0f       	add	r22, r22
    3a36:	77 1f       	adc	r23, r23
    3a38:	88 1f       	adc	r24, r24
    3a3a:	bb 1f       	adc	r27, r27
    3a3c:	62 17       	cp	r22, r18
    3a3e:	73 07       	cpc	r23, r19
    3a40:	84 07       	cpc	r24, r20
    3a42:	ba 07       	cpc	r27, r26
    3a44:	20 f0       	brcs	.+8      	; 0x3a4e <__divsf3_pse+0xae>
    3a46:	62 1b       	sub	r22, r18
    3a48:	73 0b       	sbc	r23, r19
    3a4a:	84 0b       	sbc	r24, r20
    3a4c:	ba 0b       	sbc	r27, r26
    3a4e:	ee 1f       	adc	r30, r30
    3a50:	88 f7       	brcc	.-30     	; 0x3a34 <__divsf3_pse+0x94>
    3a52:	e0 95       	com	r30
    3a54:	08 95       	ret

00003a56 <__fixunssfsi>:
    3a56:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <__fp_splitA>
    3a5a:	88 f0       	brcs	.+34     	; 0x3a7e <__fixunssfsi+0x28>
    3a5c:	9f 57       	subi	r25, 0x7F	; 127
    3a5e:	98 f0       	brcs	.+38     	; 0x3a86 <__fixunssfsi+0x30>
    3a60:	b9 2f       	mov	r27, r25
    3a62:	99 27       	eor	r25, r25
    3a64:	b7 51       	subi	r27, 0x17	; 23
    3a66:	b0 f0       	brcs	.+44     	; 0x3a94 <__fixunssfsi+0x3e>
    3a68:	e1 f0       	breq	.+56     	; 0x3aa2 <__fixunssfsi+0x4c>
    3a6a:	66 0f       	add	r22, r22
    3a6c:	77 1f       	adc	r23, r23
    3a6e:	88 1f       	adc	r24, r24
    3a70:	99 1f       	adc	r25, r25
    3a72:	1a f0       	brmi	.+6      	; 0x3a7a <__fixunssfsi+0x24>
    3a74:	ba 95       	dec	r27
    3a76:	c9 f7       	brne	.-14     	; 0x3a6a <__fixunssfsi+0x14>
    3a78:	14 c0       	rjmp	.+40     	; 0x3aa2 <__fixunssfsi+0x4c>
    3a7a:	b1 30       	cpi	r27, 0x01	; 1
    3a7c:	91 f0       	breq	.+36     	; 0x3aa2 <__fixunssfsi+0x4c>
    3a7e:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <__fp_zero>
    3a82:	b1 e0       	ldi	r27, 0x01	; 1
    3a84:	08 95       	ret
    3a86:	0c 94 05 1e 	jmp	0x3c0a	; 0x3c0a <__fp_zero>
    3a8a:	67 2f       	mov	r22, r23
    3a8c:	78 2f       	mov	r23, r24
    3a8e:	88 27       	eor	r24, r24
    3a90:	b8 5f       	subi	r27, 0xF8	; 248
    3a92:	39 f0       	breq	.+14     	; 0x3aa2 <__fixunssfsi+0x4c>
    3a94:	b9 3f       	cpi	r27, 0xF9	; 249
    3a96:	cc f3       	brlt	.-14     	; 0x3a8a <__fixunssfsi+0x34>
    3a98:	86 95       	lsr	r24
    3a9a:	77 95       	ror	r23
    3a9c:	67 95       	ror	r22
    3a9e:	b3 95       	inc	r27
    3aa0:	d9 f7       	brne	.-10     	; 0x3a98 <__fixunssfsi+0x42>
    3aa2:	3e f4       	brtc	.+14     	; 0x3ab2 <__fixunssfsi+0x5c>
    3aa4:	90 95       	com	r25
    3aa6:	80 95       	com	r24
    3aa8:	70 95       	com	r23
    3aaa:	61 95       	neg	r22
    3aac:	7f 4f       	sbci	r23, 0xFF	; 255
    3aae:	8f 4f       	sbci	r24, 0xFF	; 255
    3ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab2:	08 95       	ret

00003ab4 <__floatunsisf>:
    3ab4:	e8 94       	clt
    3ab6:	09 c0       	rjmp	.+18     	; 0x3aca <__floatsisf+0x12>

00003ab8 <__floatsisf>:
    3ab8:	97 fb       	bst	r25, 7
    3aba:	3e f4       	brtc	.+14     	; 0x3aca <__floatsisf+0x12>
    3abc:	90 95       	com	r25
    3abe:	80 95       	com	r24
    3ac0:	70 95       	com	r23
    3ac2:	61 95       	neg	r22
    3ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ac6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    3aca:	99 23       	and	r25, r25
    3acc:	a9 f0       	breq	.+42     	; 0x3af8 <__floatsisf+0x40>
    3ace:	f9 2f       	mov	r31, r25
    3ad0:	96 e9       	ldi	r25, 0x96	; 150
    3ad2:	bb 27       	eor	r27, r27
    3ad4:	93 95       	inc	r25
    3ad6:	f6 95       	lsr	r31
    3ad8:	87 95       	ror	r24
    3ada:	77 95       	ror	r23
    3adc:	67 95       	ror	r22
    3ade:	b7 95       	ror	r27
    3ae0:	f1 11       	cpse	r31, r1
    3ae2:	f8 cf       	rjmp	.-16     	; 0x3ad4 <__floatsisf+0x1c>
    3ae4:	fa f4       	brpl	.+62     	; 0x3b24 <__floatsisf+0x6c>
    3ae6:	bb 0f       	add	r27, r27
    3ae8:	11 f4       	brne	.+4      	; 0x3aee <__floatsisf+0x36>
    3aea:	60 ff       	sbrs	r22, 0
    3aec:	1b c0       	rjmp	.+54     	; 0x3b24 <__floatsisf+0x6c>
    3aee:	6f 5f       	subi	r22, 0xFF	; 255
    3af0:	7f 4f       	sbci	r23, 0xFF	; 255
    3af2:	8f 4f       	sbci	r24, 0xFF	; 255
    3af4:	9f 4f       	sbci	r25, 0xFF	; 255
    3af6:	16 c0       	rjmp	.+44     	; 0x3b24 <__floatsisf+0x6c>
    3af8:	88 23       	and	r24, r24
    3afa:	11 f0       	breq	.+4      	; 0x3b00 <__floatsisf+0x48>
    3afc:	96 e9       	ldi	r25, 0x96	; 150
    3afe:	11 c0       	rjmp	.+34     	; 0x3b22 <__floatsisf+0x6a>
    3b00:	77 23       	and	r23, r23
    3b02:	21 f0       	breq	.+8      	; 0x3b0c <__floatsisf+0x54>
    3b04:	9e e8       	ldi	r25, 0x8E	; 142
    3b06:	87 2f       	mov	r24, r23
    3b08:	76 2f       	mov	r23, r22
    3b0a:	05 c0       	rjmp	.+10     	; 0x3b16 <__floatsisf+0x5e>
    3b0c:	66 23       	and	r22, r22
    3b0e:	71 f0       	breq	.+28     	; 0x3b2c <__floatsisf+0x74>
    3b10:	96 e8       	ldi	r25, 0x86	; 134
    3b12:	86 2f       	mov	r24, r22
    3b14:	70 e0       	ldi	r23, 0x00	; 0
    3b16:	60 e0       	ldi	r22, 0x00	; 0
    3b18:	2a f0       	brmi	.+10     	; 0x3b24 <__floatsisf+0x6c>
    3b1a:	9a 95       	dec	r25
    3b1c:	66 0f       	add	r22, r22
    3b1e:	77 1f       	adc	r23, r23
    3b20:	88 1f       	adc	r24, r24
    3b22:	da f7       	brpl	.-10     	; 0x3b1a <__floatsisf+0x62>
    3b24:	88 0f       	add	r24, r24
    3b26:	96 95       	lsr	r25
    3b28:	87 95       	ror	r24
    3b2a:	97 f9       	bld	r25, 7
    3b2c:	08 95       	ret

00003b2e <__fp_cmp>:
    3b2e:	99 0f       	add	r25, r25
    3b30:	00 08       	sbc	r0, r0
    3b32:	55 0f       	add	r21, r21
    3b34:	aa 0b       	sbc	r26, r26
    3b36:	e0 e8       	ldi	r30, 0x80	; 128
    3b38:	fe ef       	ldi	r31, 0xFE	; 254
    3b3a:	16 16       	cp	r1, r22
    3b3c:	17 06       	cpc	r1, r23
    3b3e:	e8 07       	cpc	r30, r24
    3b40:	f9 07       	cpc	r31, r25
    3b42:	c0 f0       	brcs	.+48     	; 0x3b74 <__fp_cmp+0x46>
    3b44:	12 16       	cp	r1, r18
    3b46:	13 06       	cpc	r1, r19
    3b48:	e4 07       	cpc	r30, r20
    3b4a:	f5 07       	cpc	r31, r21
    3b4c:	98 f0       	brcs	.+38     	; 0x3b74 <__fp_cmp+0x46>
    3b4e:	62 1b       	sub	r22, r18
    3b50:	73 0b       	sbc	r23, r19
    3b52:	84 0b       	sbc	r24, r20
    3b54:	95 0b       	sbc	r25, r21
    3b56:	39 f4       	brne	.+14     	; 0x3b66 <__fp_cmp+0x38>
    3b58:	0a 26       	eor	r0, r26
    3b5a:	61 f0       	breq	.+24     	; 0x3b74 <__fp_cmp+0x46>
    3b5c:	23 2b       	or	r18, r19
    3b5e:	24 2b       	or	r18, r20
    3b60:	25 2b       	or	r18, r21
    3b62:	21 f4       	brne	.+8      	; 0x3b6c <__fp_cmp+0x3e>
    3b64:	08 95       	ret
    3b66:	0a 26       	eor	r0, r26
    3b68:	09 f4       	brne	.+2      	; 0x3b6c <__fp_cmp+0x3e>
    3b6a:	a1 40       	sbci	r26, 0x01	; 1
    3b6c:	a6 95       	lsr	r26
    3b6e:	8f ef       	ldi	r24, 0xFF	; 255
    3b70:	81 1d       	adc	r24, r1
    3b72:	81 1d       	adc	r24, r1
    3b74:	08 95       	ret

00003b76 <__fp_inf>:
    3b76:	97 f9       	bld	r25, 7
    3b78:	9f 67       	ori	r25, 0x7F	; 127
    3b7a:	80 e8       	ldi	r24, 0x80	; 128
    3b7c:	70 e0       	ldi	r23, 0x00	; 0
    3b7e:	60 e0       	ldi	r22, 0x00	; 0
    3b80:	08 95       	ret

00003b82 <__fp_nan>:
    3b82:	9f ef       	ldi	r25, 0xFF	; 255
    3b84:	80 ec       	ldi	r24, 0xC0	; 192
    3b86:	08 95       	ret

00003b88 <__fp_pscA>:
    3b88:	00 24       	eor	r0, r0
    3b8a:	0a 94       	dec	r0
    3b8c:	16 16       	cp	r1, r22
    3b8e:	17 06       	cpc	r1, r23
    3b90:	18 06       	cpc	r1, r24
    3b92:	09 06       	cpc	r0, r25
    3b94:	08 95       	ret

00003b96 <__fp_pscB>:
    3b96:	00 24       	eor	r0, r0
    3b98:	0a 94       	dec	r0
    3b9a:	12 16       	cp	r1, r18
    3b9c:	13 06       	cpc	r1, r19
    3b9e:	14 06       	cpc	r1, r20
    3ba0:	05 06       	cpc	r0, r21
    3ba2:	08 95       	ret

00003ba4 <__fp_round>:
    3ba4:	09 2e       	mov	r0, r25
    3ba6:	03 94       	inc	r0
    3ba8:	00 0c       	add	r0, r0
    3baa:	11 f4       	brne	.+4      	; 0x3bb0 <__fp_round+0xc>
    3bac:	88 23       	and	r24, r24
    3bae:	52 f0       	brmi	.+20     	; 0x3bc4 <__fp_round+0x20>
    3bb0:	bb 0f       	add	r27, r27
    3bb2:	40 f4       	brcc	.+16     	; 0x3bc4 <__fp_round+0x20>
    3bb4:	bf 2b       	or	r27, r31
    3bb6:	11 f4       	brne	.+4      	; 0x3bbc <__fp_round+0x18>
    3bb8:	60 ff       	sbrs	r22, 0
    3bba:	04 c0       	rjmp	.+8      	; 0x3bc4 <__fp_round+0x20>
    3bbc:	6f 5f       	subi	r22, 0xFF	; 255
    3bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc0:	8f 4f       	sbci	r24, 0xFF	; 255
    3bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc4:	08 95       	ret

00003bc6 <__fp_split3>:
    3bc6:	57 fd       	sbrc	r21, 7
    3bc8:	90 58       	subi	r25, 0x80	; 128
    3bca:	44 0f       	add	r20, r20
    3bcc:	55 1f       	adc	r21, r21
    3bce:	59 f0       	breq	.+22     	; 0x3be6 <__fp_splitA+0x10>
    3bd0:	5f 3f       	cpi	r21, 0xFF	; 255
    3bd2:	71 f0       	breq	.+28     	; 0x3bf0 <__fp_splitA+0x1a>
    3bd4:	47 95       	ror	r20

00003bd6 <__fp_splitA>:
    3bd6:	88 0f       	add	r24, r24
    3bd8:	97 fb       	bst	r25, 7
    3bda:	99 1f       	adc	r25, r25
    3bdc:	61 f0       	breq	.+24     	; 0x3bf6 <__fp_splitA+0x20>
    3bde:	9f 3f       	cpi	r25, 0xFF	; 255
    3be0:	79 f0       	breq	.+30     	; 0x3c00 <__fp_splitA+0x2a>
    3be2:	87 95       	ror	r24
    3be4:	08 95       	ret
    3be6:	12 16       	cp	r1, r18
    3be8:	13 06       	cpc	r1, r19
    3bea:	14 06       	cpc	r1, r20
    3bec:	55 1f       	adc	r21, r21
    3bee:	f2 cf       	rjmp	.-28     	; 0x3bd4 <__fp_split3+0xe>
    3bf0:	46 95       	lsr	r20
    3bf2:	f1 df       	rcall	.-30     	; 0x3bd6 <__fp_splitA>
    3bf4:	08 c0       	rjmp	.+16     	; 0x3c06 <__fp_splitA+0x30>
    3bf6:	16 16       	cp	r1, r22
    3bf8:	17 06       	cpc	r1, r23
    3bfa:	18 06       	cpc	r1, r24
    3bfc:	99 1f       	adc	r25, r25
    3bfe:	f1 cf       	rjmp	.-30     	; 0x3be2 <__fp_splitA+0xc>
    3c00:	86 95       	lsr	r24
    3c02:	71 05       	cpc	r23, r1
    3c04:	61 05       	cpc	r22, r1
    3c06:	08 94       	sec
    3c08:	08 95       	ret

00003c0a <__fp_zero>:
    3c0a:	e8 94       	clt

00003c0c <__fp_szero>:
    3c0c:	bb 27       	eor	r27, r27
    3c0e:	66 27       	eor	r22, r22
    3c10:	77 27       	eor	r23, r23
    3c12:	cb 01       	movw	r24, r22
    3c14:	97 f9       	bld	r25, 7
    3c16:	08 95       	ret

00003c18 <__mulsf3>:
    3c18:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <__mulsf3x>
    3c1c:	0c 94 d2 1d 	jmp	0x3ba4	; 0x3ba4 <__fp_round>
    3c20:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__fp_pscA>
    3c24:	38 f0       	brcs	.+14     	; 0x3c34 <__mulsf3+0x1c>
    3c26:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <__fp_pscB>
    3c2a:	20 f0       	brcs	.+8      	; 0x3c34 <__mulsf3+0x1c>
    3c2c:	95 23       	and	r25, r21
    3c2e:	11 f0       	breq	.+4      	; 0x3c34 <__mulsf3+0x1c>
    3c30:	0c 94 bb 1d 	jmp	0x3b76	; 0x3b76 <__fp_inf>
    3c34:	0c 94 c1 1d 	jmp	0x3b82	; 0x3b82 <__fp_nan>
    3c38:	11 24       	eor	r1, r1
    3c3a:	0c 94 06 1e 	jmp	0x3c0c	; 0x3c0c <__fp_szero>

00003c3e <__mulsf3x>:
    3c3e:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <__fp_split3>
    3c42:	70 f3       	brcs	.-36     	; 0x3c20 <__mulsf3+0x8>

00003c44 <__mulsf3_pse>:
    3c44:	95 9f       	mul	r25, r21
    3c46:	c1 f3       	breq	.-16     	; 0x3c38 <__mulsf3+0x20>
    3c48:	95 0f       	add	r25, r21
    3c4a:	50 e0       	ldi	r21, 0x00	; 0
    3c4c:	55 1f       	adc	r21, r21
    3c4e:	62 9f       	mul	r22, r18
    3c50:	f0 01       	movw	r30, r0
    3c52:	72 9f       	mul	r23, r18
    3c54:	bb 27       	eor	r27, r27
    3c56:	f0 0d       	add	r31, r0
    3c58:	b1 1d       	adc	r27, r1
    3c5a:	63 9f       	mul	r22, r19
    3c5c:	aa 27       	eor	r26, r26
    3c5e:	f0 0d       	add	r31, r0
    3c60:	b1 1d       	adc	r27, r1
    3c62:	aa 1f       	adc	r26, r26
    3c64:	64 9f       	mul	r22, r20
    3c66:	66 27       	eor	r22, r22
    3c68:	b0 0d       	add	r27, r0
    3c6a:	a1 1d       	adc	r26, r1
    3c6c:	66 1f       	adc	r22, r22
    3c6e:	82 9f       	mul	r24, r18
    3c70:	22 27       	eor	r18, r18
    3c72:	b0 0d       	add	r27, r0
    3c74:	a1 1d       	adc	r26, r1
    3c76:	62 1f       	adc	r22, r18
    3c78:	73 9f       	mul	r23, r19
    3c7a:	b0 0d       	add	r27, r0
    3c7c:	a1 1d       	adc	r26, r1
    3c7e:	62 1f       	adc	r22, r18
    3c80:	83 9f       	mul	r24, r19
    3c82:	a0 0d       	add	r26, r0
    3c84:	61 1d       	adc	r22, r1
    3c86:	22 1f       	adc	r18, r18
    3c88:	74 9f       	mul	r23, r20
    3c8a:	33 27       	eor	r19, r19
    3c8c:	a0 0d       	add	r26, r0
    3c8e:	61 1d       	adc	r22, r1
    3c90:	23 1f       	adc	r18, r19
    3c92:	84 9f       	mul	r24, r20
    3c94:	60 0d       	add	r22, r0
    3c96:	21 1d       	adc	r18, r1
    3c98:	82 2f       	mov	r24, r18
    3c9a:	76 2f       	mov	r23, r22
    3c9c:	6a 2f       	mov	r22, r26
    3c9e:	11 24       	eor	r1, r1
    3ca0:	9f 57       	subi	r25, 0x7F	; 127
    3ca2:	50 40       	sbci	r21, 0x00	; 0
    3ca4:	9a f0       	brmi	.+38     	; 0x3ccc <__mulsf3_pse+0x88>
    3ca6:	f1 f0       	breq	.+60     	; 0x3ce4 <__mulsf3_pse+0xa0>
    3ca8:	88 23       	and	r24, r24
    3caa:	4a f0       	brmi	.+18     	; 0x3cbe <__mulsf3_pse+0x7a>
    3cac:	ee 0f       	add	r30, r30
    3cae:	ff 1f       	adc	r31, r31
    3cb0:	bb 1f       	adc	r27, r27
    3cb2:	66 1f       	adc	r22, r22
    3cb4:	77 1f       	adc	r23, r23
    3cb6:	88 1f       	adc	r24, r24
    3cb8:	91 50       	subi	r25, 0x01	; 1
    3cba:	50 40       	sbci	r21, 0x00	; 0
    3cbc:	a9 f7       	brne	.-22     	; 0x3ca8 <__mulsf3_pse+0x64>
    3cbe:	9e 3f       	cpi	r25, 0xFE	; 254
    3cc0:	51 05       	cpc	r21, r1
    3cc2:	80 f0       	brcs	.+32     	; 0x3ce4 <__mulsf3_pse+0xa0>
    3cc4:	0c 94 bb 1d 	jmp	0x3b76	; 0x3b76 <__fp_inf>
    3cc8:	0c 94 06 1e 	jmp	0x3c0c	; 0x3c0c <__fp_szero>
    3ccc:	5f 3f       	cpi	r21, 0xFF	; 255
    3cce:	e4 f3       	brlt	.-8      	; 0x3cc8 <__mulsf3_pse+0x84>
    3cd0:	98 3e       	cpi	r25, 0xE8	; 232
    3cd2:	d4 f3       	brlt	.-12     	; 0x3cc8 <__mulsf3_pse+0x84>
    3cd4:	86 95       	lsr	r24
    3cd6:	77 95       	ror	r23
    3cd8:	67 95       	ror	r22
    3cda:	b7 95       	ror	r27
    3cdc:	f7 95       	ror	r31
    3cde:	e7 95       	ror	r30
    3ce0:	9f 5f       	subi	r25, 0xFF	; 255
    3ce2:	c1 f7       	brne	.-16     	; 0x3cd4 <__mulsf3_pse+0x90>
    3ce4:	fe 2b       	or	r31, r30
    3ce6:	88 0f       	add	r24, r24
    3ce8:	91 1d       	adc	r25, r1
    3cea:	96 95       	lsr	r25
    3cec:	87 95       	ror	r24
    3cee:	97 f9       	bld	r25, 7
    3cf0:	08 95       	ret

00003cf2 <__divmodhi4>:
    3cf2:	97 fb       	bst	r25, 7
    3cf4:	07 2e       	mov	r0, r23
    3cf6:	16 f4       	brtc	.+4      	; 0x3cfc <__divmodhi4+0xa>
    3cf8:	00 94       	com	r0
    3cfa:	07 d0       	rcall	.+14     	; 0x3d0a <__divmodhi4_neg1>
    3cfc:	77 fd       	sbrc	r23, 7
    3cfe:	09 d0       	rcall	.+18     	; 0x3d12 <__divmodhi4_neg2>
    3d00:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__udivmodhi4>
    3d04:	07 fc       	sbrc	r0, 7
    3d06:	05 d0       	rcall	.+10     	; 0x3d12 <__divmodhi4_neg2>
    3d08:	3e f4       	brtc	.+14     	; 0x3d18 <__divmodhi4_exit>

00003d0a <__divmodhi4_neg1>:
    3d0a:	90 95       	com	r25
    3d0c:	81 95       	neg	r24
    3d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d10:	08 95       	ret

00003d12 <__divmodhi4_neg2>:
    3d12:	70 95       	com	r23
    3d14:	61 95       	neg	r22
    3d16:	7f 4f       	sbci	r23, 0xFF	; 255

00003d18 <__divmodhi4_exit>:
    3d18:	08 95       	ret

00003d1a <__udivmodsi4>:
    3d1a:	a1 e2       	ldi	r26, 0x21	; 33
    3d1c:	1a 2e       	mov	r1, r26
    3d1e:	aa 1b       	sub	r26, r26
    3d20:	bb 1b       	sub	r27, r27
    3d22:	fd 01       	movw	r30, r26
    3d24:	0d c0       	rjmp	.+26     	; 0x3d40 <__udivmodsi4_ep>

00003d26 <__udivmodsi4_loop>:
    3d26:	aa 1f       	adc	r26, r26
    3d28:	bb 1f       	adc	r27, r27
    3d2a:	ee 1f       	adc	r30, r30
    3d2c:	ff 1f       	adc	r31, r31
    3d2e:	a2 17       	cp	r26, r18
    3d30:	b3 07       	cpc	r27, r19
    3d32:	e4 07       	cpc	r30, r20
    3d34:	f5 07       	cpc	r31, r21
    3d36:	20 f0       	brcs	.+8      	; 0x3d40 <__udivmodsi4_ep>
    3d38:	a2 1b       	sub	r26, r18
    3d3a:	b3 0b       	sbc	r27, r19
    3d3c:	e4 0b       	sbc	r30, r20
    3d3e:	f5 0b       	sbc	r31, r21

00003d40 <__udivmodsi4_ep>:
    3d40:	66 1f       	adc	r22, r22
    3d42:	77 1f       	adc	r23, r23
    3d44:	88 1f       	adc	r24, r24
    3d46:	99 1f       	adc	r25, r25
    3d48:	1a 94       	dec	r1
    3d4a:	69 f7       	brne	.-38     	; 0x3d26 <__udivmodsi4_loop>
    3d4c:	60 95       	com	r22
    3d4e:	70 95       	com	r23
    3d50:	80 95       	com	r24
    3d52:	90 95       	com	r25
    3d54:	9b 01       	movw	r18, r22
    3d56:	ac 01       	movw	r20, r24
    3d58:	bd 01       	movw	r22, r26
    3d5a:	cf 01       	movw	r24, r30
    3d5c:	08 95       	ret

00003d5e <__tablejump2__>:
    3d5e:	ee 0f       	add	r30, r30
    3d60:	ff 1f       	adc	r31, r31
    3d62:	05 90       	lpm	r0, Z+
    3d64:	f4 91       	lpm	r31, Z
    3d66:	e0 2d       	mov	r30, r0
    3d68:	09 94       	ijmp

00003d6a <__umulhisi3>:
    3d6a:	a2 9f       	mul	r26, r18
    3d6c:	b0 01       	movw	r22, r0
    3d6e:	b3 9f       	mul	r27, r19
    3d70:	c0 01       	movw	r24, r0
    3d72:	a3 9f       	mul	r26, r19
    3d74:	70 0d       	add	r23, r0
    3d76:	81 1d       	adc	r24, r1
    3d78:	11 24       	eor	r1, r1
    3d7a:	91 1d       	adc	r25, r1
    3d7c:	b2 9f       	mul	r27, r18
    3d7e:	70 0d       	add	r23, r0
    3d80:	81 1d       	adc	r24, r1
    3d82:	11 24       	eor	r1, r1
    3d84:	91 1d       	adc	r25, r1
    3d86:	08 95       	ret

00003d88 <__adddi3_s8>:
    3d88:	00 24       	eor	r0, r0
    3d8a:	a7 fd       	sbrc	r26, 7
    3d8c:	00 94       	com	r0
    3d8e:	2a 0f       	add	r18, r26
    3d90:	30 1d       	adc	r19, r0
    3d92:	40 1d       	adc	r20, r0
    3d94:	50 1d       	adc	r21, r0
    3d96:	60 1d       	adc	r22, r0
    3d98:	70 1d       	adc	r23, r0
    3d9a:	80 1d       	adc	r24, r0
    3d9c:	90 1d       	adc	r25, r0
    3d9e:	08 95       	ret

00003da0 <__cmpdi2>:
    3da0:	2a 15       	cp	r18, r10
    3da2:	3b 05       	cpc	r19, r11
    3da4:	4c 05       	cpc	r20, r12
    3da6:	5d 05       	cpc	r21, r13
    3da8:	6e 05       	cpc	r22, r14
    3daa:	7f 05       	cpc	r23, r15
    3dac:	80 07       	cpc	r24, r16
    3dae:	91 07       	cpc	r25, r17
    3db0:	08 95       	ret

00003db2 <__udivmodhi4>:
    3db2:	aa 1b       	sub	r26, r26
    3db4:	bb 1b       	sub	r27, r27
    3db6:	51 e1       	ldi	r21, 0x11	; 17
    3db8:	07 c0       	rjmp	.+14     	; 0x3dc8 <__udivmodhi4_ep>

00003dba <__udivmodhi4_loop>:
    3dba:	aa 1f       	adc	r26, r26
    3dbc:	bb 1f       	adc	r27, r27
    3dbe:	a6 17       	cp	r26, r22
    3dc0:	b7 07       	cpc	r27, r23
    3dc2:	10 f0       	brcs	.+4      	; 0x3dc8 <__udivmodhi4_ep>
    3dc4:	a6 1b       	sub	r26, r22
    3dc6:	b7 0b       	sbc	r27, r23

00003dc8 <__udivmodhi4_ep>:
    3dc8:	88 1f       	adc	r24, r24
    3dca:	99 1f       	adc	r25, r25
    3dcc:	5a 95       	dec	r21
    3dce:	a9 f7       	brne	.-22     	; 0x3dba <__udivmodhi4_loop>
    3dd0:	80 95       	com	r24
    3dd2:	90 95       	com	r25
    3dd4:	bc 01       	movw	r22, r24
    3dd6:	cd 01       	movw	r24, r26
    3dd8:	08 95       	ret

00003dda <_exit>:
    3dda:	f8 94       	cli

00003ddc <__stop_program>:
    3ddc:	ff cf       	rjmp	.-2      	; 0x3ddc <__stop_program>
