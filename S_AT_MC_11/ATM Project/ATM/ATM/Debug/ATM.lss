
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004326  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000050e  00800060  00004326  000043ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000017b  0080056e  0080056e  000048c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000048c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000048f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f8  00000000  00000000  00004934  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007923  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e98  00000000  00000000  0000c94f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004798  00000000  00000000  0000e7e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016ec  00000000  00000000  00012f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c92  00000000  00000000  0001466c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000629c  00000000  00000000  000172fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000608  00000000  00000000  0001d59a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__vector_1>
       8:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__vector_2>
       c:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__vector_3>
      10:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <__vector_4>
      14:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <__vector_5>
      18:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__vector_6>
      1c:	0c 94 8d 17 	jmp	0x2f1a	; 0x2f1a <__vector_7>
      20:	0c 94 b2 17 	jmp	0x2f64	; 0x2f64 <__vector_8>
      24:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__vector_9>
      28:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <__vector_10>
      2c:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__vector_11>
      30:	0c 94 19 1a 	jmp	0x3432	; 0x3432 <__vector_12>
      34:	0c 94 9d 1e 	jmp	0x3d3a	; 0x3d3a <__vector_13>
      38:	0c 94 c4 1e 	jmp	0x3d88	; 0x3d88 <__vector_14>
      3c:	0c 94 76 1e 	jmp	0x3cec	; 0x3cec <__vector_15>
      40:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__vector_16>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	29 1d       	adc	r18, r9
      56:	35 1d       	adc	r19, r5
      58:	2c 1d       	adc	r18, r12
      5a:	2f 1d       	adc	r18, r15
      5c:	32 1d       	adc	r19, r2
      5e:	29 1d       	adc	r18, r9
      60:	29 1d       	adc	r18, r9

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	15 e0       	ldi	r17, 0x05	; 5
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e6 e2       	ldi	r30, 0x26	; 38
      76:	f3 e4       	ldi	r31, 0x43	; 67
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	ae 36       	cpi	r26, 0x6E	; 110
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	26 e0       	ldi	r18, 0x06	; 6
      86:	ae e6       	ldi	r26, 0x6E	; 110
      88:	b5 e0       	ldi	r27, 0x05	; 5
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a9 3e       	cpi	r26, 0xE9	; 233
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 b4 11 	call	0x2368	; 0x2368 <main>
      98:	0c 94 91 21 	jmp	0x4322	; 0x4322 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <AppADMIN_searchPan>:
* Parameters (out): None
* Return value: sint16_t - return the index of the Customer in DB
* Description: Function to search for a customer's PAN if existed in DB.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
sint16_t AppADMIN_searchPan(uint8_t* pu8_data)
{
      a0:	0f 93       	push	r16
      a2:	1f 93       	push	r17
      a4:	cf 93       	push	r28
      a6:	df 93       	push	r29
      a8:	cd b7       	in	r28, 0x3d	; 61
      aa:	de b7       	in	r29, 0x3e	; 62
      ac:	2a 97       	sbiw	r28, 0x0a	; 10
      ae:	0f b6       	in	r0, 0x3f	; 63
      b0:	f8 94       	cli
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	0f be       	out	0x3f, r0	; 63
      b6:	cd bf       	out	0x3d, r28	; 61
      b8:	8c 01       	movw	r16, r24
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
      ba:	fe 01       	movw	r30, r28
      bc:	31 96       	adiw	r30, 0x01	; 1
      be:	8a e0       	ldi	r24, 0x0A	; 10
      c0:	df 01       	movw	r26, r30
      c2:	1d 92       	st	X+, r1
      c4:	8a 95       	dec	r24
      c6:	e9 f7       	brne	.-6      	; 0xc2 <AppADMIN_searchPan+0x22>
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
      c8:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <gu8_clientIndex>
      cc:	20 c0       	rjmp	.+64     	; 0x10e <AppADMIN_searchPan+0x6e>
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	01 96       	adiw	r24, 0x01	; 1
      d2:	82 95       	swap	r24
      d4:	88 0f       	add	r24, r24
      d6:	88 0f       	add	r24, r24
      d8:	80 7c       	andi	r24, 0xC0	; 192
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
      da:	4a e0       	ldi	r20, 0x0A	; 10
      dc:	50 e0       	ldi	r21, 0x00	; 0
      de:	be 01       	movw	r22, r28
      e0:	6f 5f       	subi	r22, 0xFF	; 255
      e2:	7f 4f       	sbci	r23, 0xFF	; 255
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <Eeprom_24_readPacket>
      ea:	81 30       	cpi	r24, 0x01	; 1
      ec:	c9 f4       	brne	.+50     	; 0x120 <AppADMIN_searchPan+0x80>
		return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, pu8_data) == 1)
      ee:	b8 01       	movw	r22, r16
      f0:	ce 01       	movw	r24, r28
      f2:	01 96       	adiw	r24, 0x01	; 1
      f4:	0e 94 4c 1a 	call	0x3498	; 0x3498 <stringCompare>
      f8:	81 30       	cpi	r24, 0x01	; 1
      fa:	21 f4       	brne	.+8      	; 0x104 <AppADMIN_searchPan+0x64>
		{
			return gu8_clientIndex;
      fc:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <gu8_clientIndex>
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	10 c0       	rjmp	.+32     	; 0x124 <AppADMIN_searchPan+0x84>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
sint16_t AppADMIN_searchPan(uint8_t* pu8_data)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     104:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <gu8_clientIndex>
     108:	8f 5f       	subi	r24, 0xFF	; 255
     10a:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <gu8_clientIndex>
     10e:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <gu8_clientIndex>
     112:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <gu8_registeredAccNum>
     116:	89 17       	cp	r24, r25
     118:	d0 f2       	brcs	.-76     	; 0xce <AppADMIN_searchPan+0x2e>
		if(stringCompare(au8_clientPAN, pu8_data) == 1)
		{
			return gu8_clientIndex;
		}
	}
	return -1;
     11a:	8f ef       	ldi	r24, 0xFF	; 255
     11c:	9f ef       	ldi	r25, 0xFF	; 255
     11e:	02 c0       	rjmp	.+4      	; 0x124 <AppADMIN_searchPan+0x84>
	uint8_t au8_clientPAN[10] = {0};
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	90 e0       	ldi	r25, 0x00	; 0
		{
			return gu8_clientIndex;
		}
	}
	return -1;
}
     124:	2a 96       	adiw	r28, 0x0a	; 10
     126:	0f b6       	in	r0, 0x3f	; 63
     128:	f8 94       	cli
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	0f be       	out	0x3f, r0	; 63
     12e:	cd bf       	out	0x3d, r28	; 61
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	1f 91       	pop	r17
     136:	0f 91       	pop	r16
     138:	08 95       	ret

0000013a <AppUSER_displayTemp>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to display the temperature.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_displayTemp(void)
{
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	1f 92       	push	r1
     140:	cd b7       	in	r28, 0x3d	; 61
     142:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_currentTemp=0;
     144:	19 82       	std	Y+1, r1	; 0x01
	gu8_displayFlag = DISPLAY_TEMP;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <gu8_displayFlag>
	Lcd_clear();
     14c:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Lcd_setCursor>
     158:	81 30       	cpi	r24, 0x01	; 1
     15a:	f9 f4       	brne	.+62     	; 0x19a <AppUSER_displayTemp+0x60>
	return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
     15c:	84 ee       	ldi	r24, 0xE4	; 228
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <Lcd_printString>
     164:	81 30       	cpi	r24, 0x01	; 1
     166:	d9 f4       	brne	.+54     	; 0x19e <AppUSER_displayTemp+0x64>
	return APP_STATUS_ERROR_NOK;
	if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
     168:	ce 01       	movw	r24, r28
     16a:	01 96       	adiw	r24, 0x01	; 1
     16c:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LM35_readTemp>
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	59 f4       	brne	.+22     	; 0x18a <AppUSER_displayTemp+0x50>
	{
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Lcd_setCursor>
     17a:	81 30       	cpi	r24, 0x01	; 1
     17c:	91 f4       	brne	.+36     	; 0x1a2 <AppUSER_displayTemp+0x68>
		return APP_STATUS_ERROR_NOK;
		if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
     17e:	89 81       	ldd	r24, Y+1	; 0x01
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <Lcd_printDecimal>
     186:	81 30       	cpi	r24, 0x01	; 1
     188:	71 f4       	brne	.+28     	; 0x1a6 <AppUSER_displayTemp+0x6c>
		return APP_STATUS_ERROR_NOK;
	}
	if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
     18a:	85 ef       	ldi	r24, 0xF5	; 245
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <Lcd_printString>
     192:	81 30       	cpi	r24, 0x01	; 1
     194:	51 f0       	breq	.+20     	; 0x1aa <AppUSER_displayTemp+0x70>
	return APP_STATUS_ERROR_NOK;
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	09 c0       	rjmp	.+18     	; 0x1ac <AppUSER_displayTemp+0x72>
{
	uint8_t u8_currentTemp=0;
	gu8_displayFlag = DISPLAY_TEMP;
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	07 c0       	rjmp	.+14     	; 0x1ac <AppUSER_displayTemp+0x72>
	if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	05 c0       	rjmp	.+10     	; 0x1ac <AppUSER_displayTemp+0x72>
	if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
	{
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	03 c0       	rjmp	.+6      	; 0x1ac <AppUSER_displayTemp+0x72>
		if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <AppUSER_displayTemp+0x72>
	}
	if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	return APP_STATUS_ERROR_OK;
     1aa:	81 e0       	ldi	r24, 0x01	; 1
}
     1ac:	0f 90       	pop	r0
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	08 95       	ret

000001b4 <AppUSER_checkPan>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
     1b4:	1f 93       	push	r17
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	2a 97       	sbiw	r28, 0x0a	; 10
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	f8 94       	cli
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
     1ca:	fe 01       	movw	r30, r28
     1cc:	31 96       	adiw	r30, 0x01	; 1
     1ce:	8a e0       	ldi	r24, 0x0A	; 10
     1d0:	df 01       	movw	r26, r30
     1d2:	1d 92       	st	X+, r1
     1d4:	8a 95       	dec	r24
     1d6:	e9 f7       	brne	.-6      	; 0x1d2 <AppUSER_checkPan+0x1e>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     1d8:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <gu8_clientIndex>
     1dc:	1d c0       	rjmp	.+58     	; 0x218 <AppUSER_checkPan+0x64>
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	82 95       	swap	r24
     1e4:	88 0f       	add	r24, r24
     1e6:	88 0f       	add	r24, r24
     1e8:	80 7c       	andi	r24, 0xC0	; 192
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     1ea:	4a e0       	ldi	r20, 0x0A	; 10
     1ec:	50 e0       	ldi	r21, 0x00	; 0
     1ee:	be 01       	movw	r22, r28
     1f0:	6f 5f       	subi	r22, 0xFF	; 255
     1f2:	7f 4f       	sbci	r23, 0xFF	; 255
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <Eeprom_24_readPacket>
     1fa:	81 30       	cpi	r24, 0x01	; 1
     1fc:	89 f5       	brne	.+98     	; 0x260 <AppUSER_checkPan+0xac>
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
     1fe:	67 ea       	ldi	r22, 0xA7	; 167
     200:	75 e0       	ldi	r23, 0x05	; 5
     202:	ce 01       	movw	r24, r28
     204:	01 96       	adiw	r24, 0x01	; 1
     206:	0e 94 4c 1a 	call	0x3498	; 0x3498 <stringCompare>
     20a:	81 30       	cpi	r24, 0x01	; 1
     20c:	69 f0       	breq	.+26     	; 0x228 <AppUSER_checkPan+0x74>
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     20e:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <gu8_clientIndex>
     212:	8f 5f       	subi	r24, 0xFF	; 255
     214:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <gu8_clientIndex>
     218:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <gu8_clientIndex>
     21c:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <gu8_registeredAccNum>
     220:	89 17       	cp	r24, r25
     222:	e8 f2       	brcs	.-70     	; 0x1de <AppUSER_checkPan+0x2a>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	01 c0       	rjmp	.+2      	; 0x22a <AppUSER_checkPan+0x76>
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
		{
			u8_panFound = 1;
     228:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
	
	if(u8_panFound == 1)
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	d9 f4       	brne	.+54     	; 0x264 <AppUSER_checkPan+0xb0>
	{
		uint8_t u8_clientBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     22e:	10 91 7b 05 	lds	r17, 0x057B	; 0x80057b <gu8_clientIndex>
     232:	12 95       	swap	r17
     234:	11 0f       	add	r17, r17
     236:	11 0f       	add	r17, r17
     238:	10 7c       	andi	r17, 0xC0	; 192
     23a:	16 5b       	subi	r17, 0xB6	; 182
			
		stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
     23c:	6b e8       	ldi	r22, 0x8B	; 139
     23e:	75 e0       	ldi	r23, 0x05	; 5
     240:	ce 01       	movw	r24, r28
     242:	01 96       	adiw	r24, 0x01	; 1
     244:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stringCopy>
			
		if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     248:	48 e0       	ldi	r20, 0x08	; 8
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	65 e9       	ldi	r22, 0x95	; 149
     24e:	75 e0       	ldi	r23, 0x05	; 5
     250:	81 2f       	mov	r24, r17
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <Eeprom_24_readPacket>
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	31 f0       	breq	.+12     	; 0x268 <AppUSER_checkPan+0xb4>
			return APP_STATUS_ERROR_NOK;
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	05 c0       	rjmp	.+10     	; 0x26a <AppUSER_checkPan+0xb6>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	03 c0       	rjmp	.+6      	; 0x26a <AppUSER_checkPan+0xb6>
			return APP_STATUS_ERROR_NOK;
			
		return APP_STATUS_PAN_FOUND;
	}

	return APP_STATUS_PAN_NOT_FOUND;
     264:	8b e0       	ldi	r24, 0x0B	; 11
     266:	01 c0       	rjmp	.+2      	; 0x26a <AppUSER_checkPan+0xb6>
		stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
			
		if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
			
		return APP_STATUS_PAN_FOUND;
     268:	8a e0       	ldi	r24, 0x0A	; 10
	}

	return APP_STATUS_PAN_NOT_FOUND;
}
     26a:	2a 96       	adiw	r28, 0x0a	; 10
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	1f 91       	pop	r17
     27c:	08 95       	ret

0000027e <AppUSER_ReportKeypad>:
* Parameters (out): pu8_key - Pointer to variable to hold the button pressed
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the value pressed in the keypad.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_ReportKeypad(uint8_t* pu8_key)
{
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	ec 01       	movw	r28, r24
	static uint8_t u8_index = 0;
	static uint8_t sau8_data[10]={0};
	enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&sau8_data[u8_index]);
     284:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <u8_index.2293>
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	81 59       	subi	r24, 0x91	; 145
     28c:	9a 4f       	sbci	r25, 0xFA	; 250
     28e:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <Keypad_readKey>
		
	if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
     292:	86 30       	cpi	r24, 0x06	; 6
     294:	09 f0       	breq	.+2      	; 0x298 <AppUSER_ReportKeypad+0x1a>
     296:	74 c0       	rjmp	.+232    	; 0x380 <AppUSER_ReportKeypad+0x102>
	{
		if(sau8_data[u8_index] == '=')
     298:	60 91 79 05 	lds	r22, 0x0579	; 0x800579 <u8_index.2293>
     29c:	86 2f       	mov	r24, r22
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	fc 01       	movw	r30, r24
     2a2:	e1 59       	subi	r30, 0x91	; 145
     2a4:	fa 4f       	sbci	r31, 0xFA	; 250
     2a6:	20 81       	ld	r18, Z
     2a8:	2d 33       	cpi	r18, 0x3D	; 61
     2aa:	09 f5       	brne	.+66     	; 0x2ee <AppUSER_ReportKeypad+0x70>
		{
			sau8_data[u8_index] = '\0';
     2ac:	fc 01       	movw	r30, r24
     2ae:	e1 59       	subi	r30, 0x91	; 145
     2b0:	fa 4f       	sbci	r31, 0xFA	; 250
     2b2:	10 82       	st	Z, r1
			u8_index = 0;
     2b4:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <u8_index.2293>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     2b8:	66 e0       	ldi	r22, 0x06	; 6
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Lcd_setCursor>
     2c0:	81 30       	cpi	r24, 0x01	; 1
     2c2:	09 f0       	breq	.+2      	; 0x2c6 <AppUSER_ReportKeypad+0x48>
     2c4:	5f c0       	rjmp	.+190    	; 0x384 <AppUSER_ReportKeypad+0x106>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
     2c6:	84 e0       	ldi	r24, 0x04	; 4
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <Lcd_printString>
     2ce:	81 30       	cpi	r24, 0x01	; 1
     2d0:	09 f0       	breq	.+2      	; 0x2d4 <AppUSER_ReportKeypad+0x56>
     2d2:	5a c0       	rjmp	.+180    	; 0x388 <AppUSER_ReportKeypad+0x10a>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     2d4:	66 e0       	ldi	r22, 0x06	; 6
     2d6:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Lcd_setCursor>
     2da:	81 30       	cpi	r24, 0x01	; 1
     2dc:	09 f0       	breq	.+2      	; 0x2e0 <AppUSER_ReportKeypad+0x62>
     2de:	56 c0       	rjmp	.+172    	; 0x38c <AppUSER_ReportKeypad+0x10e>
			return APP_STATUS_ERROR_NOK;
			stringCopy(sau8_data, pu8_key);
     2e0:	be 01       	movw	r22, r28
     2e2:	8f e6       	ldi	r24, 0x6F	; 111
     2e4:	95 e0       	ldi	r25, 0x05	; 5
     2e6:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stringCopy>
			return APP_STATUS_KPD_NUM;
     2ea:	87 e0       	ldi	r24, 0x07	; 7
     2ec:	5a c0       	rjmp	.+180    	; 0x3a2 <AppUSER_ReportKeypad+0x124>
		}else if(sau8_data[u8_index] == '-')
     2ee:	2d 32       	cpi	r18, 0x2D	; 45
     2f0:	b1 f4       	brne	.+44     	; 0x31e <AppUSER_ReportKeypad+0xa0>
		{
			u8_index--;
     2f2:	ef ef       	ldi	r30, 0xFF	; 255
     2f4:	e6 0f       	add	r30, r22
     2f6:	e0 93 79 05 	sts	0x0579, r30	; 0x800579 <u8_index.2293>
			sau8_data[u8_index] = '\0';
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	e1 59       	subi	r30, 0x91	; 145
     2fe:	fa 4f       	sbci	r31, 0xFA	; 250
     300:	10 82       	st	Z, r1
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     302:	6b 5f       	subi	r22, 0xFB	; 251
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Lcd_setCursor>
     30a:	81 30       	cpi	r24, 0x01	; 1
     30c:	09 f0       	breq	.+2      	; 0x310 <AppUSER_ReportKeypad+0x92>
     30e:	40 c0       	rjmp	.+128    	; 0x390 <AppUSER_ReportKeypad+0x112>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_printChar(' ') != LCD_STATUS_ERROR_OK)
     310:	80 e2       	ldi	r24, 0x20	; 32
     312:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <Lcd_printChar>
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	e9 f1       	breq	.+122    	; 0x394 <AppUSER_ReportKeypad+0x116>
			return APP_STATUS_ERROR_NOK;
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	42 c0       	rjmp	.+132    	; 0x3a2 <AppUSER_ReportKeypad+0x124>
		}else if((sau8_data[u8_index] != '+') || (sau8_data[u8_index] != 'x'))
		{
			if(u8_index!=10)
     31e:	6a 30       	cpi	r22, 0x0A	; 10
     320:	49 f1       	breq	.+82     	; 0x374 <AppUSER_ReportKeypad+0xf6>
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     322:	6a 5f       	subi	r22, 0xFA	; 250
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Lcd_setCursor>
     32a:	81 30       	cpi	r24, 0x01	; 1
     32c:	a9 f5       	brne	.+106    	; 0x398 <AppUSER_ReportKeypad+0x11a>
					return APP_STATUS_ERROR_NOK;
				if(Kpd_enablePass == 0)
     32e:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <Kpd_enablePass>
     332:	81 11       	cpse	r24, r1
     334:	0b c0       	rjmp	.+22     	; 0x34c <AppUSER_ReportKeypad+0xce>
				{
					if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
     336:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <u8_index.2293>
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	e1 59       	subi	r30, 0x91	; 145
     33e:	fa 4f       	sbci	r31, 0xFA	; 250
     340:	80 81       	ld	r24, Z
     342:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <Lcd_printChar>
     346:	81 30       	cpi	r24, 0x01	; 1
     348:	49 f5       	brne	.+82     	; 0x39c <AppUSER_ReportKeypad+0x11e>
     34a:	0d c0       	rjmp	.+26     	; 0x366 <AppUSER_ReportKeypad+0xe8>
						return APP_STATUS_ERROR_NOK;
				}
				else
				{
					if(u8_index < 4)
     34c:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <u8_index.2293>
     350:	84 30       	cpi	r24, 0x04	; 4
     352:	30 f4       	brcc	.+12     	; 0x360 <AppUSER_ReportKeypad+0xe2>
					{
						if(Lcd_printChar('*') != LCD_STATUS_ERROR_OK)
     354:	8a e2       	ldi	r24, 0x2A	; 42
     356:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <Lcd_printChar>
     35a:	81 30       	cpi	r24, 0x01	; 1
     35c:	09 f5       	brne	.+66     	; 0x3a0 <AppUSER_ReportKeypad+0x122>
     35e:	03 c0       	rjmp	.+6      	; 0x366 <AppUSER_ReportKeypad+0xe8>
							return APP_STATUS_ERROR_NOK;
					}else
					{
						u8_index--;
     360:	81 50       	subi	r24, 0x01	; 1
     362:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <u8_index.2293>
					}
				}
				u8_index++;
     366:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <u8_index.2293>
     36a:	8f 5f       	subi	r24, 0xFF	; 255
     36c:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <u8_index.2293>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	17 c0       	rjmp	.+46     	; 0x3a2 <AppUSER_ReportKeypad+0x124>
					}
				}
				u8_index++;
			}else
			{
				sau8_data[u8_index] = '\0';
     374:	fc 01       	movw	r30, r24
     376:	e1 59       	subi	r30, 0x91	; 145
     378:	fa 4f       	sbci	r31, 0xFA	; 250
     37a:	10 82       	st	Z, r1
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	11 c0       	rjmp	.+34     	; 0x3a2 <AppUSER_ReportKeypad+0x124>
			}
				
		}
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	0f c0       	rjmp	.+30     	; 0x3a2 <AppUSER_ReportKeypad+0x124>
		if(sau8_data[u8_index] == '=')
		{
			sau8_data[u8_index] = '\0';
			u8_index = 0;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	0d c0       	rjmp	.+26     	; 0x3a2 <AppUSER_ReportKeypad+0x124>
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0b c0       	rjmp	.+22     	; 0x3a2 <AppUSER_ReportKeypad+0x124>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	09 c0       	rjmp	.+18     	; 0x3a2 <AppUSER_ReportKeypad+0x124>
		}else if(sau8_data[u8_index] == '-')
		{
			u8_index--;
			sau8_data[u8_index] = '\0';
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	07 c0       	rjmp	.+14     	; 0x3a2 <AppUSER_ReportKeypad+0x124>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	05 c0       	rjmp	.+10     	; 0x3a2 <AppUSER_ReportKeypad+0x124>
		}else if((sau8_data[u8_index] != '+') || (sau8_data[u8_index] != 'x'))
		{
			if(u8_index!=10)
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	03 c0       	rjmp	.+6      	; 0x3a2 <AppUSER_ReportKeypad+0x124>
				if(Kpd_enablePass == 0)
				{
					if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	01 c0       	rjmp	.+2      	; 0x3a2 <AppUSER_ReportKeypad+0x124>
				else
				{
					if(u8_index < 4)
					{
						if(Lcd_printChar('*') != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
     3a0:	80 e0       	ldi	r24, 0x00	; 0
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
}
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	08 95       	ret

000003a8 <AppUSER_startTransaction>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startTransaction(void)
{
     3a8:	4f 92       	push	r4
     3aa:	5f 92       	push	r5
     3ac:	6f 92       	push	r6
     3ae:	7f 92       	push	r7
     3b0:	8f 92       	push	r8
     3b2:	9f 92       	push	r9
     3b4:	af 92       	push	r10
     3b6:	bf 92       	push	r11
     3b8:	cf 92       	push	r12
     3ba:	df 92       	push	r13
     3bc:	ef 92       	push	r14
     3be:	ff 92       	push	r15
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	28 97       	sbiw	r28, 0x08	; 8
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_inputKPD[8] = {0};
     3d6:	fe 01       	movw	r30, r28
     3d8:	31 96       	adiw	r30, 0x01	; 1
     3da:	88 e0       	ldi	r24, 0x08	; 8
     3dc:	df 01       	movw	r26, r30
     3de:	1d 92       	st	X+, r1
     3e0:	8a 95       	dec	r24
     3e2:	e9 f7       	brne	.-6      	; 0x3de <AppUSER_startTransaction+0x36>
	enuApp_Status_t KeypdaStatus = 0;
	float32_t f32_balance = stringToFloat(gstr_clientdata.au8_Balance);
     3e4:	85 e9       	ldi	r24, 0x95	; 149
     3e6:	95 e0       	ldi	r25, 0x05	; 5
     3e8:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <stringToFloat>
     3ec:	2b 01       	movw	r4, r22
     3ee:	3c 01       	movw	r6, r24
	float32_t f32_maxAmount = stringToFloat(gau8_maxAmount);
     3f0:	8c e7       	ldi	r24, 0x7C	; 124
     3f2:	95 e0       	ldi	r25, 0x05	; 5
     3f4:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <stringToFloat>
     3f8:	4b 01       	movw	r8, r22
     3fa:	5c 01       	movw	r10, r24
	float32_t f32_amount = 0;
	while(1)
	{
		EmptyString(au8_inputKPD);
     3fc:	ce 01       	movw	r24, r28
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     404:	ce 01       	movw	r24, r28
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	0e 94 3f 01 	call	0x27e	; 0x27e <AppUSER_ReportKeypad>
		
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     40c:	87 30       	cpi	r24, 0x07	; 7
     40e:	09 f0       	breq	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     410:	d0 c0       	rjmp	.+416    	; 0x5b2 <__EEPROM_REGION_LENGTH__+0x1b2>
		{
			if((stringLength(au8_inputKPD) != MAX_BAL_LENGTH+1) || (au8_inputKPD[4] != '.'))
     412:	ce 01       	movw	r24, r28
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	0e 94 40 1a 	call	0x3480	; 0x3480 <stringLength>
     41a:	88 30       	cpi	r24, 0x08	; 8
     41c:	19 f4       	brne	.+6      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     41e:	8d 81       	ldd	r24, Y+5	; 0x05
     420:	8e 32       	cpi	r24, 0x2E	; 46
     422:	59 f0       	breq	.+22     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
			{
// 				Lcd_printLCD((uint8_t*)"Invalid Balance", (uint8_t*)"Format = xxxx.xx");
				Lcd_clear();
     424:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Lcd_clear>
				Lcd_setCursor(0,0);
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Lcd_setCursor>
				Lcd_printString(cgau8_AMOUNTString);
     430:	80 e6       	ldi	r24, 0x60	; 96
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <Lcd_printString>
//  			Delay_ms(1000);
//  			Lcd_clear();
//  			Lcd_setCursor(0,0);
//  			Lcd_printString((uint8_t*)"Enter Amount");
				continue;
     438:	e1 cf       	rjmp	.-62     	; 0x3fc <AppUSER_startTransaction+0x54>
			}
			f32_amount = stringToFloat(au8_inputKPD);
     43a:	ce 01       	movw	r24, r28
     43c:	01 96       	adiw	r24, 0x01	; 1
     43e:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <stringToFloat>
     442:	6b 01       	movw	r12, r22
     444:	7c 01       	movw	r14, r24
			
			if(f32_maxAmount < f32_amount)
     446:	9b 01       	movw	r18, r22
     448:	ac 01       	movw	r20, r24
     44a:	c5 01       	movw	r24, r10
     44c:	b4 01       	movw	r22, r8
     44e:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__cmpsf2>
     452:	88 23       	and	r24, r24
     454:	0c f5       	brge	.+66     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
			{
				Lcd_printLCD((uint8_t*)"   Max Amount", (uint8_t*)"    Exceeded");
     456:	67 e0       	ldi	r22, 0x07	; 7
     458:	71 e0       	ldi	r23, 0x01	; 1
     45a:	84 e1       	ldi	r24, 0x14	; 20
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
				
				Delay_ms(500);
     462:	24 ef       	ldi	r18, 0xF4	; 244
     464:	31 e0       	ldi	r19, 0x01	; 1
     466:	40 e0       	ldi	r20, 0x00	; 0
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
				
				Lcd_clear();
     476:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Lcd_setCursor>
     482:	81 30       	cpi	r24, 0x01	; 1
     484:	09 f0       	breq	.+2      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     486:	a0 c0       	rjmp	.+320    	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
					return APP_STATUS_ERROR_NOK;
				if(Lcd_printString(cgau8_AMOUNTString) != LCD_STATUS_ERROR_OK)
     488:	80 e6       	ldi	r24, 0x60	; 96
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <Lcd_printString>
     490:	81 30       	cpi	r24, 0x01	; 1
     492:	09 f4       	brne	.+2      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
     494:	8e c0       	rjmp	.+284    	; 0x5b2 <__EEPROM_REGION_LENGTH__+0x1b2>
     496:	9a c0       	rjmp	.+308    	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
					return APP_STATUS_ERROR_NOK;
			}else
			{
			Lcd_printLCD((uint8_t*)"  Please Wait", (uint8_t*)" Processing....");
     498:	62 e2       	ldi	r22, 0x22	; 34
     49a:	71 e0       	ldi	r23, 0x01	; 1
     49c:	82 e3       	ldi	r24, 0x32	; 50
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
				
			if(f32_balance < f32_amount)
     4a4:	a7 01       	movw	r20, r14
     4a6:	96 01       	movw	r18, r12
     4a8:	c3 01       	movw	r24, r6
     4aa:	b2 01       	movw	r22, r4
     4ac:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__cmpsf2>
     4b0:	88 23       	and	r24, r24
     4b2:	0c f5       	brge	.+66     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			{
				Lcd_printLCD((uint8_t*)"  Insufficient", (uint8_t*)"      Fund");
     4b4:	60 e4       	ldi	r22, 0x40	; 64
     4b6:	71 e0       	ldi	r23, 0x01	; 1
     4b8:	8b e4       	ldi	r24, 0x4B	; 75
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
					
				Delay_ms(500);
     4c0:	24 ef       	ldi	r18, 0xF4	; 244
     4c2:	31 e0       	ldi	r19, 0x01	; 1
     4c4:	40 e0       	ldi	r20, 0x00	; 0
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
					
				Lcd_clear();
     4d4:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Lcd_setCursor>
     4e0:	81 30       	cpi	r24, 0x01	; 1
     4e2:	09 f0       	breq	.+2      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
     4e4:	75 c0       	rjmp	.+234    	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString(cgau8_AMOUNTString) != LCD_STATUS_ERROR_OK)
     4e6:	80 e6       	ldi	r24, 0x60	; 96
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <Lcd_printString>
     4ee:	81 30       	cpi	r24, 0x01	; 1
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
     4f2:	5f c0       	rjmp	.+190    	; 0x5b2 <__EEPROM_REGION_LENGTH__+0x1b2>
     4f4:	6f c0       	rjmp	.+222    	; 0x5d4 <__EEPROM_REGION_LENGTH__+0x1d4>
				return APP_STATUS_ERROR_NOK;
				}else/****************** Transaction Successfull ******************/
				{
					Lcd_printLCD((uint8_t*)"   Successful", (uint8_t*)"  Transaction");
     4f6:	6a e5       	ldi	r22, 0x5A	; 90
     4f8:	71 e0       	ldi	r23, 0x01	; 1
     4fa:	88 e6       	ldi	r24, 0x68	; 104
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
						
					Motor_run(MOTOR_CASH_ID, 100, MOTOR_DIR_CLK_WISE);
     502:	40 e0       	ldi	r20, 0x00	; 0
     504:	64 e6       	ldi	r22, 0x64	; 100
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	0e 94 b0 10 	call	0x2160	; 0x2160 <Motor_run>
					Delay_ms(1000);
     50c:	28 ee       	ldi	r18, 0xE8	; 232
     50e:	33 e0       	ldi	r19, 0x03	; 3
     510:	40 e0       	ldi	r20, 0x00	; 0
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
					Motor_stop(MOTOR_CASH_ID);
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	0e 94 41 10 	call	0x2082	; 0x2082 <Motor_stop>
					gu8_USER_Mode_State = USER_IDLE;
     526:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <gu8_USER_Mode_State>
						
					f32_balance -= f32_amount;
     52a:	a7 01       	movw	r20, r14
     52c:	96 01       	movw	r18, r12
     52e:	c3 01       	movw	r24, r6
     530:	b2 01       	movw	r22, r4
     532:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <__subsf3>
     536:	6b 01       	movw	r12, r22
     538:	7c 01       	movw	r14, r24
					EmptyString(gstr_clientdata.au8_Balance);
     53a:	85 e9       	ldi	r24, 0x95	; 149
     53c:	95 e0       	ldi	r25, 0x05	; 5
     53e:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
     542:	45 e9       	ldi	r20, 0x95	; 149
     544:	55 e0       	ldi	r21, 0x05	; 5
     546:	c7 01       	movw	r24, r14
     548:	b6 01       	movw	r22, r12
     54a:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <floatToString>
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     54e:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <gu8_clientIndex>
     552:	82 95       	swap	r24
     554:	88 0f       	add	r24, r24
     556:	88 0f       	add	r24, r24
     558:	80 7c       	andi	r24, 0xC0	; 192
     55a:	1a e4       	ldi	r17, 0x4A	; 74
     55c:	18 0f       	add	r17, r24
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     55e:	85 e9       	ldi	r24, 0x95	; 149
     560:	95 e0       	ldi	r25, 0x05	; 5
     562:	0e 94 40 1a 	call	0x3480	; 0x3480 <stringLength>
					f32_balance -= f32_amount;
					EmptyString(gstr_clientdata.au8_Balance);
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
     566:	48 2f       	mov	r20, r24
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	65 e9       	ldi	r22, 0x95	; 149
     56c:	75 e0       	ldi	r23, 0x05	; 5
     56e:	81 2f       	mov	r24, r17
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 35 0c 	call	0x186a	; 0x186a <Eeprom_24_writePacket>
     576:	81 30       	cpi	r24, 0x01	; 1
     578:	79 f5       	brne	.+94     	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
						
					Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
     57a:	65 e9       	ldi	r22, 0x95	; 149
     57c:	75 e0       	ldi	r23, 0x05	; 5
     57e:	86 e7       	ldi	r24, 0x76	; 118
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
					Delay_ms(1000);
     586:	28 ee       	ldi	r18, 0xE8	; 232
     588:	33 e0       	ldi	r19, 0x03	; 3
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH); //Card Out
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	82 e1       	ldi	r24, 0x12	; 18
     59e:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     5a2:	65 e8       	ldi	r22, 0x85	; 133
     5a4:	71 e0       	ldi	r23, 0x01	; 1
     5a6:	84 e9       	ldi	r24, 0x94	; 148
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
						
					return APP_STATUS_ERROR_OK;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	14 c0       	rjmp	.+40     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
				}
			}
		}
		Delay_ms(175);
     5b2:	2f ea       	ldi	r18, 0xAF	; 175
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	40 e0       	ldi	r20, 0x00	; 0
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
     5c6:	1a cf       	rjmp	.-460    	; 0x3fc <AppUSER_startTransaction+0x54>
				
				Delay_ms(500);
				
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	07 c0       	rjmp	.+14     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
				if(Lcd_printString(cgau8_AMOUNTString) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	05 c0       	rjmp	.+10     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
					
				Delay_ms(500);
					
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	03 c0       	rjmp	.+6      	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
				if(Lcd_printString(cgau8_AMOUNTString) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
		Delay_ms(175);
	}
}
     5da:	28 96       	adiw	r28, 0x08	; 8
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd bf       	out	0x3d, r28	; 61
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	bf 90       	pop	r11
     5f6:	af 90       	pop	r10
     5f8:	9f 90       	pop	r9
     5fa:	8f 90       	pop	r8
     5fc:	7f 90       	pop	r7
     5fe:	6f 90       	pop	r6
     600:	5f 90       	pop	r5
     602:	4f 90       	pop	r4
     604:	08 95       	ret

00000606 <AppUSER_checkPin>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the user's input pin if right or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPin(void)
{
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	00 d0       	rcall	.+0      	; 0x60e <AppUSER_checkPin+0x8>
     60e:	00 d0       	rcall	.+0      	; 0x610 <AppUSER_checkPin+0xa>
     610:	1f 92       	push	r1
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_inputKPD[5] = {0};
     616:	fe 01       	movw	r30, r28
     618:	31 96       	adiw	r30, 0x01	; 1
     61a:	85 e0       	ldi	r24, 0x05	; 5
     61c:	df 01       	movw	r26, r30
     61e:	1d 92       	st	X+, r1
     620:	8a 95       	dec	r24
     622:	e9 f7       	brne	.-6      	; 0x61e <AppUSER_checkPin+0x18>
	enuApp_Status_t KeypdaStatus = 0;
	Kpd_enablePass = 1;
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <Kpd_enablePass>
	uint8_t u8_loopCounter = 0;
     62a:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		EmptyString(au8_inputKPD);
     62c:	ce 01       	movw	r24, r28
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     634:	ce 01       	movw	r24, r28
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	0e 94 3f 01 	call	0x27e	; 0x27e <AppUSER_ReportKeypad>
			
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     63c:	87 30       	cpi	r24, 0x07	; 7
     63e:	09 f0       	breq	.+2      	; 0x642 <AppUSER_checkPin+0x3c>
     640:	5b c0       	rjmp	.+182    	; 0x6f8 <AppUSER_checkPin+0xf2>
		{
			u8_loopCounter++;
     642:	1f 5f       	subi	r17, 0xFF	; 255
			if(stringCompare(au8_inputKPD, gstr_userCardData.au8_pinNum) != 1)
     644:	61 eb       	ldi	r22, 0xB1	; 177
     646:	75 e0       	ldi	r23, 0x05	; 5
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	0e 94 4c 1a 	call	0x3498	; 0x3498 <stringCompare>
     650:	81 30       	cpi	r24, 0x01	; 1
     652:	09 f4       	brne	.+2      	; 0x656 <AppUSER_checkPin+0x50>
     654:	47 c0       	rjmp	.+142    	; 0x6e4 <AppUSER_checkPin+0xde>
			{
				if(u8_loopCounter == MAX_PIN_TRIAL)
     656:	13 30       	cpi	r17, 0x03	; 3
     658:	31 f5       	brne	.+76     	; 0x6a6 <AppUSER_checkPin+0xa0>
				{
					Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)" ");
     65a:	65 e0       	ldi	r22, 0x05	; 5
     65c:	71 e0       	ldi	r23, 0x01	; 1
     65e:	82 ea       	ldi	r24, 0xA2	; 162
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
					Delay_ms(1000);
     666:	28 ee       	ldi	r18, 0xE8	; 232
     668:	33 e0       	ldi	r19, 0x03	; 3
     66a:	40 e0       	ldi	r20, 0x00	; 0
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
					Lcd_printLCD((uint8_t*)"Please Contact", (uint8_t*)"Customer Service");
     67a:	61 eb       	ldi	r22, 0xB1	; 177
     67c:	71 e0       	ldi	r23, 0x01	; 1
     67e:	82 ec       	ldi	r24, 0xC2	; 194
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
					Delay_ms(1000);
     686:	28 ee       	ldi	r18, 0xE8	; 232
     688:	33 e0       	ldi	r19, 0x03	; 3
     68a:	40 e0       	ldi	r20, 0x00	; 0
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     69a:	61 e0       	ldi	r22, 0x01	; 1
     69c:	82 e1       	ldi	r24, 0x12	; 18
     69e:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
					return APP_STATUS_PIN_NOT_CORRECT;
     6a2:	89 e0       	ldi	r24, 0x09	; 9
     6a4:	37 c0       	rjmp	.+110    	; 0x714 <AppUSER_checkPin+0x10e>
				}
				Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)"   Try Again");
     6a6:	61 ed       	ldi	r22, 0xD1	; 209
     6a8:	71 e0       	ldi	r23, 0x01	; 1
     6aa:	82 ea       	ldi	r24, 0xA2	; 162
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
				Delay_ms(500);
     6b2:	24 ef       	ldi	r18, 0xF4	; 244
     6b4:	31 e0       	ldi	r19, 0x01	; 1
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
					
				Lcd_clear();
     6c6:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Lcd_setCursor>
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	e1 f4       	brne	.+56     	; 0x70e <AppUSER_checkPin+0x108>
					return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     6d6:	8e ed       	ldi	r24, 0xDE	; 222
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <Lcd_printString>
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	59 f0       	breq	.+22     	; 0x6f8 <AppUSER_checkPin+0xf2>
     6e2:	17 c0       	rjmp	.+46     	; 0x712 <AppUSER_checkPin+0x10c>
					return APP_STATUS_ERROR_NOK;
			}else
			{
				Lcd_printLCD((uint8_t*)"  Please Wait", (uint8_t*)" Processing....");
     6e4:	62 e2       	ldi	r22, 0x22	; 34
     6e6:	71 e0       	ldi	r23, 0x01	; 1
     6e8:	82 e3       	ldi	r24, 0x32	; 50
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
					Kpd_enablePass = 0;
     6f0:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <Kpd_enablePass>
				return APP_STATUS_PIN_CORRECT;
     6f4:	88 e0       	ldi	r24, 0x08	; 8
     6f6:	0e c0       	rjmp	.+28     	; 0x714 <AppUSER_checkPin+0x10e>
			}
		}
		Delay_ms(175);
     6f8:	2f ea       	ldi	r18, 0xAF	; 175
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
	}
     70c:	8f cf       	rjmp	.-226    	; 0x62c <AppUSER_checkPin+0x26>
				Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)"   Try Again");
				Delay_ms(500);
					
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	01 c0       	rjmp	.+2      	; 0x714 <AppUSER_checkPin+0x10e>
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     712:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		Delay_ms(175);
	}
	Kpd_enablePass = 0;
}
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	08 95       	ret

00000726 <AppUSER_startProcess>:
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to start processing the card.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
     726:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Lcd_setCursor>
     732:	81 30       	cpi	r24, 0x01	; 1
     734:	09 f0       	breq	.+2      	; 0x738 <AppUSER_startProcess+0x12>
     736:	50 c0       	rjmp	.+160    	; 0x7d8 <AppUSER_startProcess+0xb2>
	return APP_STATUS_ERROR_NOK;
	enuApp_Status_t PAN_status = AppUSER_checkPan();
     738:	0e 94 da 00 	call	0x1b4	; 0x1b4 <AppUSER_checkPan>
	if(PAN_status == APP_STATUS_PAN_NOT_FOUND)
     73c:	8b 30       	cpi	r24, 0x0B	; 11
     73e:	61 f4       	brne	.+24     	; 0x758 <AppUSER_startProcess+0x32>
	{
		Lcd_printLCD((uint8_t*)"Your Card is not", (uint8_t*)"in the Database");
     740:	6d ee       	ldi	r22, 0xED	; 237
     742:	71 e0       	ldi	r23, 0x01	; 1
     744:	8d ef       	ldi	r24, 0xFD	; 253
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
		Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     74c:	61 e0       	ldi	r22, 0x01	; 1
     74e:	82 e1       	ldi	r24, 0x12	; 18
     750:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
		return APP_STATUS_PAN_NOT_FOUND;
     754:	8b e0       	ldi	r24, 0x0B	; 11
     756:	08 95       	ret
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     758:	8e ed       	ldi	r24, 0xDE	; 222
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <Lcd_printString>
     760:	81 30       	cpi	r24, 0x01	; 1
     762:	e1 f5       	brne	.+120    	; 0x7dc <AppUSER_startProcess+0xb6>
		return APP_STATUS_ERROR_NOK;
	enuApp_Status_t PIN_status = AppUSER_checkPin();
     764:	0e 94 03 03 	call	0x606	; 0x606 <AppUSER_checkPin>
	if(PIN_status == APP_STATUS_PIN_NOT_CORRECT)
     768:	89 30       	cpi	r24, 0x09	; 9
     76a:	d1 f1       	breq	.+116    	; 0x7e0 <AppUSER_startProcess+0xba>
	{
		return APP_STATUS_PIN_NOT_CORRECT;
	}else if(PIN_status != APP_STATUS_PIN_CORRECT)
     76c:	88 30       	cpi	r24, 0x08	; 8
     76e:	d1 f5       	brne	.+116    	; 0x7e4 <AppUSER_startProcess+0xbe>
		return APP_STATUS_ERROR_NOK;
	
	
	Lcd_printLCD((uint8_t*)"    Welcome", (uint8_t*)"    Customer");
     770:	6e e0       	ldi	r22, 0x0E	; 14
     772:	72 e0       	ldi	r23, 0x02	; 2
     774:	8b e1       	ldi	r24, 0x1B	; 27
     776:	92 e0       	ldi	r25, 0x02	; 2
     778:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
	Delay_ms(1000);
     77c:	28 ee       	ldi	r18, 0xE8	; 232
     77e:	33 e0       	ldi	r19, 0x03	; 3
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
	
	Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
     790:	65 e9       	ldi	r22, 0x95	; 149
     792:	75 e0       	ldi	r23, 0x05	; 5
     794:	86 e7       	ldi	r24, 0x76	; 118
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
	Delay_ms(1000);
     79c:	28 ee       	ldi	r18, 0xE8	; 232
     79e:	33 e0       	ldi	r19, 0x03	; 3
     7a0:	40 e0       	ldi	r20, 0x00	; 0
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
	
	Lcd_clear();
     7b0:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     7b4:	60 e0       	ldi	r22, 0x00	; 0
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Lcd_setCursor>
     7bc:	81 30       	cpi	r24, 0x01	; 1
     7be:	a1 f4       	brne	.+40     	; 0x7e8 <AppUSER_startProcess+0xc2>
		return APP_STATUS_ERROR_NOK;
	if(Lcd_printString(cgau8_AMOUNTString) != LCD_STATUS_ERROR_OK)
     7c0:	80 e6       	ldi	r24, 0x60	; 96
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <Lcd_printString>
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	81 f4       	brne	.+32     	; 0x7ec <AppUSER_startProcess+0xc6>
		return APP_STATUS_ERROR_NOK;
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
     7cc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <AppUSER_startTransaction>
     7d0:	81 30       	cpi	r24, 0x01	; 1
     7d2:	69 f0       	breq	.+26     	; 0x7ee <AppUSER_startProcess+0xc8>
		return APP_STATUS_ERROR_NOK;
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	08 95       	ret
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	08 95       	ret
		Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
		return APP_STATUS_PAN_NOT_FOUND;
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	08 95       	ret
	enuApp_Status_t PIN_status = AppUSER_checkPin();
	if(PIN_status == APP_STATUS_PIN_NOT_CORRECT)
	{
		return APP_STATUS_PIN_NOT_CORRECT;
     7e0:	89 e0       	ldi	r24, 0x09	; 9
     7e2:	08 95       	ret
	}else if(PIN_status != APP_STATUS_PIN_CORRECT)
		return APP_STATUS_ERROR_NOK;
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	08 95       	ret
	Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
	Delay_ms(1000);
	
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	08 95       	ret
	if(Lcd_printString(cgau8_AMOUNTString) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     7ec:	80 e0       	ldi	r24, 0x00	; 0
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     7ee:	08 95       	ret

000007f0 <AppUSER_getCardData>:
* Parameters (out): pstr_CardData - Structure to save the card's data in.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the Card data Struct
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_getCardData(strCardData_t* pstr_CardData, uint8_t *pu8_dataString)
{
     7f0:	ac 01       	movw	r20, r24
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
     7f2:	20 e0       	ldi	r18, 0x00	; 0
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	0a c0       	rjmp	.+20     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     7f8:	fb 01       	movw	r30, r22
     7fa:	e9 0f       	add	r30, r25
     7fc:	f1 1d       	adc	r31, r1
     7fe:	80 81       	ld	r24, Z
     800:	fa 01       	movw	r30, r20
     802:	e2 0f       	add	r30, r18
     804:	f1 1d       	adc	r31, r1
     806:	80 83       	st	Z, r24
		u8_dataIndex++;
     808:	2f 5f       	subi	r18, 0xFF	; 255
{
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     80a:	9f 5f       	subi	r25, 0xFF	; 255
     80c:	9a 30       	cpi	r25, 0x0A	; 10
     80e:	a0 f3       	brcs	.-24     	; 0x7f8 <AppUSER_getCardData+0x8>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
     810:	fa 01       	movw	r30, r20
     812:	e2 0f       	add	r30, r18
     814:	f1 1d       	adc	r31, r1
     816:	10 82       	st	Z, r1
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
     818:	20 e0       	ldi	r18, 0x00	; 0
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     81a:	9b e0       	ldi	r25, 0x0B	; 11
     81c:	0a c0       	rjmp	.+20     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     81e:	fb 01       	movw	r30, r22
     820:	e9 0f       	add	r30, r25
     822:	f1 1d       	adc	r31, r1
     824:	80 81       	ld	r24, Z
     826:	fa 01       	movw	r30, r20
     828:	e2 0f       	add	r30, r18
     82a:	f1 1d       	adc	r31, r1
     82c:	82 87       	std	Z+10, r24	; 0x0a
		u8_dataIndex++;
     82e:	2f 5f       	subi	r18, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     830:	9f 5f       	subi	r25, 0xFF	; 255
     832:	94 31       	cpi	r25, 0x14	; 20
     834:	a0 f3       	brcs	.-24     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
     836:	fa 01       	movw	r30, r20
     838:	e2 0f       	add	r30, r18
     83a:	f1 1d       	adc	r31, r1
     83c:	12 86       	std	Z+10, r1	; 0x0a
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
     83e:	90 e0       	ldi	r25, 0x00	; 0
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     840:	85 e1       	ldi	r24, 0x15	; 21
     842:	0a c0       	rjmp	.+20     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     844:	fb 01       	movw	r30, r22
     846:	e8 0f       	add	r30, r24
     848:	f1 1d       	adc	r31, r1
     84a:	20 81       	ld	r18, Z
     84c:	fa 01       	movw	r30, r20
     84e:	e9 0f       	add	r30, r25
     850:	f1 1d       	adc	r31, r1
     852:	24 8b       	std	Z+20, r18	; 0x14
		u8_dataIndex++;
     854:	9f 5f       	subi	r25, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     856:	8f 5f       	subi	r24, 0xFF	; 255
     858:	89 31       	cpi	r24, 0x19	; 25
     85a:	a0 f3       	brcs	.-24     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_pinNum[u8_dataIndex] = '\0';
     85c:	fa 01       	movw	r30, r20
     85e:	e9 0f       	add	r30, r25
     860:	f1 1d       	adc	r31, r1
     862:	14 8a       	std	Z+20, r1	; 0x14
	return APP_STATUS_ERROR_OK;
}
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	08 95       	ret

00000868 <AppUSER_insertCard>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to run the Card Inserting Process.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_insertCard(void)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
     872:	da 95       	dec	r29
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	de bf       	out	0x3e, r29	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	cd bf       	out	0x3d, r28	; 61
	gu8_USER_Mode_State = USER_BUSY;
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <gu8_USER_Mode_State>
	uint8_t u8_buttonVal = PIN_LOW;
     884:	19 82       	std	Y+1, r1	; 0x01
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     886:	fe 01       	movw	r30, r28
     888:	32 96       	adiw	r30, 0x02	; 2
     88a:	8f ef       	ldi	r24, 0xFF	; 255
     88c:	df 01       	movw	r26, r30
     88e:	1d 92       	st	X+, r1
     890:	8a 95       	dec	r24
     892:	e9 f7       	brne	.-6      	; 0x88e <AppUSER_insertCard+0x26>
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
     894:	67 e2       	ldi	r22, 0x27	; 39
     896:	72 e0       	ldi	r23, 0x02	; 2
     898:	86 e3       	ldi	r24, 0x36	; 54
     89a:	92 e0       	ldi	r25, 0x02	; 2
     89c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
	while(u8_buttonVal == PIN_LOW)
     8a0:	0f c0       	rjmp	.+30     	; 0x8c0 <AppUSER_insertCard+0x58>
	{
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <Button_updateState>
     8a8:	81 30       	cpi	r24, 0x01	; 1
     8aa:	09 f0       	breq	.+2      	; 0x8ae <AppUSER_insertCard+0x46>
     8ac:	89 c0       	rjmp	.+274    	; 0x9c0 <AppUSER_insertCard+0x158>
			return APP_STATUS_ERROR_NOK;
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
     8ae:	be 01       	movw	r22, r28
     8b0:	6f 5f       	subi	r22, 0xFF	; 255
     8b2:	7f 4f       	sbci	r23, 0xFF	; 255
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	0e 94 6d 0a 	call	0x14da	; 0x14da <Button_getState>
     8ba:	81 30       	cpi	r24, 0x01	; 1
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <AppUSER_insertCard+0x58>
     8be:	82 c0       	rjmp	.+260    	; 0x9c4 <AppUSER_insertCard+0x15c>
	gu8_USER_Mode_State = USER_BUSY;
	uint8_t u8_buttonVal = PIN_LOW;
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
	while(u8_buttonVal == PIN_LOW)
     8c0:	89 81       	ldd	r24, Y+1	; 0x01
     8c2:	88 23       	and	r24, r24
     8c4:	71 f3       	breq	.-36     	; 0x8a2 <AppUSER_insertCard+0x3a>
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	}
	Lcd_printLCD((uint8_t*)"Button Pressed",(uint8_t*)"Receiving Data");
     8c6:	67 e4       	ldi	r22, 0x47	; 71
     8c8:	72 e0       	ldi	r23, 0x02	; 2
     8ca:	86 e5       	ldi	r24, 0x56	; 86
     8cc:	92 e0       	ldi	r25, 0x02	; 2
     8ce:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	82 e1       	ldi	r24, 0x12	; 18
     8d6:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
	EmptyString(au8_inputString);
     8da:	ce 01       	movw	r24, r28
     8dc:	02 96       	adiw	r24, 0x02	; 2
     8de:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
	while (au8_inputString[0] != '#')
     8e2:	41 c0       	rjmp	.+130    	; 0x966 <AppUSER_insertCard+0xfe>
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
     8e4:	6c e1       	ldi	r22, 0x1C	; 28
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	ce 01       	movw	r24, r28
     8ea:	02 96       	adiw	r24, 0x02	; 2
     8ec:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <Spi_SlaveReceivePacket>
     8f0:	81 30       	cpi	r24, 0x01	; 1
     8f2:	09 f0       	breq	.+2      	; 0x8f6 <AppUSER_insertCard+0x8e>
     8f4:	69 c0       	rjmp	.+210    	; 0x9c8 <AppUSER_insertCard+0x160>
			return APP_STATUS_ERROR_NOK;
		if((au8_inputString[0] == '*') && (au8_inputString[1] == '*'))
     8f6:	8a 81       	ldd	r24, Y+2	; 0x02
     8f8:	8a 32       	cpi	r24, 0x2A	; 42
     8fa:	a9 f5       	brne	.+106    	; 0x966 <AppUSER_insertCard+0xfe>
     8fc:	8b 81       	ldd	r24, Y+3	; 0x03
     8fe:	8a 32       	cpi	r24, 0x2A	; 42
     900:	91 f5       	brne	.+100    	; 0x966 <AppUSER_insertCard+0xfe>
		{
			Lcd_printLCD((uint8_t*)"Card is not",(uint8_t*)"Programmed");
     902:	65 e6       	ldi	r22, 0x65	; 101
     904:	72 e0       	ldi	r23, 0x02	; 2
     906:	82 e0       	ldi	r24, 0x02	; 2
     908:	92 e0       	ldi	r25, 0x02	; 2
     90a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
			Delay_ms(1000);
     90e:	28 ee       	ldi	r18, 0xE8	; 232
     910:	33 e0       	ldi	r19, 0x03	; 3
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
			Lcd_printLCD((uint8_t*)"Please Contact",(uint8_t*)"Customer Service");
     922:	61 eb       	ldi	r22, 0xB1	; 177
     924:	71 e0       	ldi	r23, 0x01	; 1
     926:	82 ec       	ldi	r24, 0xC2	; 194
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
			Delay_ms(1000);
     92e:	28 ee       	ldi	r18, 0xE8	; 232
     930:	33 e0       	ldi	r19, 0x03	; 3
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
			Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     942:	61 e0       	ldi	r22, 0x01	; 1
     944:	82 e1       	ldi	r24, 0x12	; 18
     946:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
			gu8_USER_Mode_State = USER_IDLE;
     94a:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <gu8_USER_Mode_State>
			Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     94e:	65 e8       	ldi	r22, 0x85	; 133
     950:	71 e0       	ldi	r23, 0x01	; 1
     952:	84 e9       	ldi	r24, 0x94	; 148
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
			EmptyString(au8_inputString);
     95a:	ce 01       	movw	r24, r28
     95c:	02 96       	adiw	r24, 0x02	; 2
     95e:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
			return APP_STATUS_ERROR_OK;
     962:	11 e0       	ldi	r17, 0x01	; 1
     964:	34 c0       	rjmp	.+104    	; 0x9ce <AppUSER_insertCard+0x166>
			return APP_STATUS_ERROR_NOK;
	}
	Lcd_printLCD((uint8_t*)"Button Pressed",(uint8_t*)"Receiving Data");
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
	EmptyString(au8_inputString);
	while (au8_inputString[0] != '#')
     966:	8a 81       	ldd	r24, Y+2	; 0x02
     968:	83 32       	cpi	r24, 0x23	; 35
     96a:	09 f0       	breq	.+2      	; 0x96e <AppUSER_insertCard+0x106>
     96c:	bb cf       	rjmp	.-138    	; 0x8e4 <AppUSER_insertCard+0x7c>
			Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
			EmptyString(au8_inputString);
			return APP_STATUS_ERROR_OK;
		}
	}
	if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
     96e:	be 01       	movw	r22, r28
     970:	6e 5f       	subi	r22, 0xFE	; 254
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	8d e9       	ldi	r24, 0x9D	; 157
     976:	95 e0       	ldi	r25, 0x05	; 5
     978:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <AppUSER_getCardData>
     97c:	18 2f       	mov	r17, r24
     97e:	81 30       	cpi	r24, 0x01	; 1
     980:	29 f5       	brne	.+74     	; 0x9cc <AppUSER_insertCard+0x164>
		return APP_STATUS_ERROR_NOK;
		
	enuApp_Status_t processState = AppUSER_startProcess(&gstr_userCardData);
     982:	8d e9       	ldi	r24, 0x9D	; 157
     984:	95 e0       	ldi	r25, 0x05	; 5
     986:	0e 94 93 03 	call	0x726	; 0x726 <AppUSER_startProcess>
	if((processState == APP_STATUS_PAN_NOT_FOUND) || (processState == APP_STATUS_PIN_NOT_CORRECT))
     98a:	8b 30       	cpi	r24, 0x0B	; 11
     98c:	11 f0       	breq	.+4      	; 0x992 <AppUSER_insertCard+0x12a>
     98e:	89 30       	cpi	r24, 0x09	; 9
     990:	99 f4       	brne	.+38     	; 0x9b8 <AppUSER_insertCard+0x150>
	{
		Delay_ms(1000);
     992:	28 ee       	ldi	r18, 0xE8	; 232
     994:	33 e0       	ldi	r19, 0x03	; 3
     996:	40 e0       	ldi	r20, 0x00	; 0
     998:	50 e0       	ldi	r21, 0x00	; 0
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
		gu8_USER_Mode_State = USER_IDLE;
     9a6:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <gu8_USER_Mode_State>
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     9aa:	65 e8       	ldi	r22, 0x85	; 133
     9ac:	71 e0       	ldi	r23, 0x01	; 1
     9ae:	84 e9       	ldi	r24, 0x94	; 148
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
     9b6:	0b c0       	rjmp	.+22     	; 0x9ce <AppUSER_insertCard+0x166>
	}else if (processState != APP_STATUS_ERROR_OK)
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	49 f0       	breq	.+18     	; 0x9ce <AppUSER_insertCard+0x166>
		return APP_STATUS_ERROR_NOK;
     9bc:	10 e0       	ldi	r17, 0x00	; 0
     9be:	07 c0       	rjmp	.+14     	; 0x9ce <AppUSER_insertCard+0x166>
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
	while(u8_buttonVal == PIN_LOW)
	{
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     9c0:	10 e0       	ldi	r17, 0x00	; 0
     9c2:	05 c0       	rjmp	.+10     	; 0x9ce <AppUSER_insertCard+0x166>
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     9c4:	10 e0       	ldi	r17, 0x00	; 0
     9c6:	03 c0       	rjmp	.+6      	; 0x9ce <AppUSER_insertCard+0x166>
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
	EmptyString(au8_inputString);
	while (au8_inputString[0] != '#')
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     9c8:	10 e0       	ldi	r17, 0x00	; 0
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <AppUSER_insertCard+0x166>
			EmptyString(au8_inputString);
			return APP_STATUS_ERROR_OK;
		}
	}
	if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     9cc:	10 e0       	ldi	r17, 0x00	; 0
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
	}else if (processState != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     9ce:	81 2f       	mov	r24, r17
     9d0:	d3 95       	inc	r29
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	08 95       	ret

000009e4 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
     9e4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <enuCurrentAppStatus>
     9e8:	84 30       	cpi	r24, 0x04	; 4
     9ea:	09 f4       	brne	.+2      	; 0x9ee <App_init+0xa>
     9ec:	bd c0       	rjmp	.+378    	; 0xb68 <App_init+0x184>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(LCD_STATUS_ERROR_OK != Lcd_init())
     9ee:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Lcd_init>
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <App_init+0x14>
     9f6:	97 c0       	rjmp	.+302    	; 0xb26 <App_init+0x142>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
     9f8:	0e 94 61 11 	call	0x22c2	; 0x22c2 <Terminal_init>
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	09 f0       	breq	.+2      	; 0xa02 <App_init+0x1e>
     a00:	94 c0       	rjmp	.+296    	; 0xb2a <App_init+0x146>
		return APP_STATUS_ERROR_NOK;
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
     a02:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <Eeprom_24_init>
     a06:	81 30       	cpi	r24, 0x01	; 1
     a08:	09 f0       	breq	.+2      	; 0xa0c <App_init+0x28>
     a0a:	91 c0       	rjmp	.+290    	; 0xb2e <App_init+0x14a>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
     a0c:	0e 94 be 19 	call	0x337c	; 0x337c <Spi_init>
     a10:	81 30       	cpi	r24, 0x01	; 1
     a12:	09 f0       	breq	.+2      	; 0xa16 <App_init+0x32>
     a14:	8e c0       	rjmp	.+284    	; 0xb32 <App_init+0x14e>
		return APP_STATUS_ERROR_NOK;
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
     a16:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <Keypad_init>
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	09 f0       	breq	.+2      	; 0xa20 <App_init+0x3c>
     a1e:	8b c0       	rjmp	.+278    	; 0xb36 <App_init+0x152>
		return APP_STATUS_ERROR_NOK;
	if(LM35_STATUS_ERROR_OK != LM35_init())
     a20:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <LM35_init>
     a24:	81 30       	cpi	r24, 0x01	; 1
     a26:	09 f0       	breq	.+2      	; 0xa2a <App_init+0x46>
     a28:	88 c0       	rjmp	.+272    	; 0xb3a <App_init+0x156>
		return APP_STATUS_ERROR_NOK;
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
     a2a:	0e 94 30 10 	call	0x2060	; 0x2060 <Motor_init>
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	09 f0       	breq	.+2      	; 0xa34 <App_init+0x50>
     a32:	85 c0       	rjmp	.+266    	; 0xb3e <App_init+0x15a>
		return APP_STATUS_ERROR_NOK;
	if(BTTN_STATUS_ERROR_OK != Button_init())
     a34:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <Button_init>
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	09 f0       	breq	.+2      	; 0xa3e <App_init+0x5a>
     a3c:	82 c0       	rjmp	.+260    	; 0xb42 <App_init+0x15e>
	/* Only for Testing */
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
     a3e:	8e e4       	ldi	r24, 0x4E	; 78
     a40:	95 e0       	ldi	r25, 0x05	; 5
     a42:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <Lcd_printString>
     a46:	81 30       	cpi	r24, 0x01	; 1
     a48:	09 f0       	breq	.+2      	; 0xa4c <App_init+0x68>
     a4a:	7d c0       	rjmp	.+250    	; 0xb46 <App_init+0x162>
		return APP_STATUS_ERROR_NOK;
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
     a4c:	80 e4       	ldi	r24, 0x40	; 64
     a4e:	95 e0       	ldi	r25, 0x05	; 5
     a50:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
     a54:	81 30       	cpi	r24, 0x01	; 1
     a56:	09 f0       	breq	.+2      	; 0xa5a <App_init+0x76>
     a58:	78 c0       	rjmp	.+240    	; 0xb4a <App_init+0x166>
		return APP_STATUS_ERROR_NOK;
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
     a5a:	6a e8       	ldi	r22, 0x8A	; 138
     a5c:	75 e0       	ldi	r23, 0x05	; 5
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Eeprom_24_readByte>
     a66:	81 30       	cpi	r24, 0x01	; 1
     a68:	09 f0       	breq	.+2      	; 0xa6c <App_init+0x88>
     a6a:	71 c0       	rjmp	.+226    	; 0xb4e <App_init+0x16a>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     a6c:	2a e0       	ldi	r18, 0x0A	; 10
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
	
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
     a80:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <gu8_initData>
     a84:	8a 3a       	cpi	r24, 0xAA	; 170
     a86:	f9 f0       	breq	.+62     	; 0xac6 <App_init+0xe2>
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
     a88:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <gu8_ATMMode>
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
     a8c:	88 e5       	ldi	r24, 0x58	; 88
     a8e:	95 e0       	ldi	r25, 0x05	; 5
     a90:	0e 94 40 1a 	call	0x3480	; 0x3480 <stringLength>
	
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
     a94:	48 2f       	mov	r20, r24
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	68 e5       	ldi	r22, 0x58	; 88
     a9a:	75 e0       	ldi	r23, 0x05	; 5
     a9c:	8b e0       	ldi	r24, 0x0B	; 11
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 35 0c 	call	0x186a	; 0x186a <Eeprom_24_writePacket>
     aa4:	81 30       	cpi	r24, 0x01	; 1
     aa6:	09 f0       	breq	.+2      	; 0xaaa <App_init+0xc6>
     aa8:	54 c0       	rjmp	.+168    	; 0xb52 <App_init+0x16e>
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		/* Lock the ATM For the User */
		Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
     aaa:	60 e7       	ldi	r22, 0x70	; 112
     aac:	72 e0       	ldi	r23, 0x02	; 2
     aae:	81 e8       	ldi	r24, 0x81	; 129
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
		
		if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     ab6:	82 e9       	ldi	r24, 0x92	; 146
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	09 f0       	breq	.+2      	; 0xac4 <App_init+0xe0>
     ac2:	49 c0       	rjmp	.+146    	; 0xb56 <App_init+0x172>
     ac4:	2b c0       	rjmp	.+86     	; 0xb1c <App_init+0x138>
			return APP_STATUS_ERROR_NOK;
	}else
	{ /* Case it was previously registered == Contains data in the DB */
		gu8_ATMMode = ATM_MODE_USER;
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <gu8_ATMMode>
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
     acc:	48 e0       	ldi	r20, 0x08	; 8
     ace:	50 e0       	ldi	r21, 0x00	; 0
     ad0:	6c e7       	ldi	r22, 0x7C	; 124
     ad2:	75 e0       	ldi	r23, 0x05	; 5
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <Eeprom_24_readPacket>
     adc:	81 30       	cpi	r24, 0x01	; 1
     ade:	e9 f5       	brne	.+122    	; 0xb5a <App_init+0x176>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     ae0:	69 e8       	ldi	r22, 0x89	; 137
     ae2:	75 e0       	ldi	r23, 0x05	; 5
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Eeprom_24_readByte>
     aec:	81 30       	cpi	r24, 0x01	; 1
     aee:	b9 f5       	brne	.+110    	; 0xb5e <App_init+0x17a>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
     af0:	45 e0       	ldi	r20, 0x05	; 5
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	64 e8       	ldi	r22, 0x84	; 132
     af6:	75 e0       	ldi	r23, 0x05	; 5
     af8:	8b e0       	ldi	r24, 0x0B	; 11
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <Eeprom_24_readPacket>
     b00:	81 30       	cpi	r24, 0x01	; 1
     b02:	79 f5       	brne	.+94     	; 0xb62 <App_init+0x17e>
			return APP_STATUS_ERROR_NOK;
		
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     b04:	65 e8       	ldi	r22, 0x85	; 133
     b06:	71 e0       	ldi	r23, 0x01	; 1
     b08:	84 e9       	ldi	r24, 0x94	; 148
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
			
		if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     b10:	85 ea       	ldi	r24, 0xA5	; 165
     b12:	92 e0       	ldi	r25, 0x02	; 2
     b14:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
     b18:	81 30       	cpi	r24, 0x01	; 1
     b1a:	29 f5       	brne	.+74     	; 0xb66 <App_init+0x182>
			return APP_STATUS_ERROR_NOK;
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     b1c:	84 e0       	ldi	r24, 0x04	; 4
     b1e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <enuCurrentAppStatus>
	return APP_STATUS_ERROR_OK;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(LCD_STATUS_ERROR_OK != Lcd_init())
		return APP_STATUS_ERROR_NOK;
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	08 95       	ret
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	08 95       	ret
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	08 95       	ret
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	08 95       	ret
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
		return APP_STATUS_ERROR_NOK;
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	08 95       	ret
	if(LM35_STATUS_ERROR_OK != LM35_init())
		return APP_STATUS_ERROR_NOK;
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	08 95       	ret
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
		return APP_STATUS_ERROR_NOK;
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	08 95       	ret
	if(BTTN_STATUS_ERROR_OK != Button_init())
		return APP_STATUS_ERROR_NOK;
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	08 95       	ret
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	08 95       	ret
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	08 95       	ret
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	08 95       	ret
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	08 95       	ret
		/* Lock the ATM For the User */
		Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
		
		if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	08 95       	ret
	}else
	{ /* Case it was previously registered == Contains data in the DB */
		gu8_ATMMode = ATM_MODE_USER;
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	08 95       	ret
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	08 95       	ret
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	08 95       	ret
		
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
			
		if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b66:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     b68:	08 95       	ret

00000b6a <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	cf 5f       	subi	r28, 0xFF	; 255
     b78:	d1 09       	sbc	r29, r1
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     b86:	ce 01       	movw	r24, r28
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	2f ef       	ldi	r18, 0xFF	; 255
     b8c:	fc 01       	movw	r30, r24
     b8e:	11 92       	st	Z+, r1
     b90:	2a 95       	dec	r18
     b92:	e9 f7       	brne	.-6      	; 0xb8e <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
     b94:	0e 94 91 11 	call	0x2322	; 0x2322 <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
     b98:	85 30       	cpi	r24, 0x05	; 5
     b9a:	39 f4       	brne	.+14     	; 0xbaa <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
     b9c:	b8 01       	movw	r22, r16
     b9e:	ce 01       	movw	r24, r28
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stringCopy>
		return APP_STATUS_ERROR_OK;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	11 f0       	breq	.+4      	; 0xbb2 <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
     bb2:	86 e0       	ldi	r24, 0x06	; 6
}
     bb4:	c1 50       	subi	r28, 0x01	; 1
     bb6:	df 4f       	sbci	r29, 0xFF	; 255
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	1f 91       	pop	r17
     bc8:	0f 91       	pop	r16
     bca:	08 95       	ret

00000bcc <AppADMIN_getInput>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the ADMIN Input Choice.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getInput(uint8_t* pu8_data)
{
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nYour Input: ") != TERMINAL_STATUS_ERROR_OK)
     bd2:	81 eb       	ldi	r24, 0xB1	; 177
     bd4:	92 e0       	ldi	r25, 0x02	; 2
     bd6:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	c1 f4       	brne	.+48     	; 0xc0e <AppADMIN_getInput+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     bde:	ce 01       	movw	r24, r28
     be0:	0e 94 b5 05 	call	0xb6a	; 0xb6a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	29 f0       	breq	.+10     	; 0xbf2 <AppADMIN_getInput+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     be8:	11 f0       	breq	.+4      	; 0xbee <AppADMIN_getInput+0x22>
     bea:	86 30       	cpi	r24, 0x06	; 6
     bec:	91 f4       	brne	.+36     	; 0xc12 <AppADMIN_getInput+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     bee:	86 30       	cpi	r24, 0x06	; 6
     bf0:	b1 f3       	breq	.-20     	; 0xbde <AppADMIN_getInput+0x12>
		
		if (pu8_data[1] == '\0')
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	88 23       	and	r24, r24
     bf6:	79 f0       	breq	.+30     	; 0xc16 <AppADMIN_getInput+0x4a>
		break;
		EmptyString(pu8_data);
     bf8:	ce 01       	movw	r24, r28
     bfa:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
     bfe:	8f eb       	ldi	r24, 0xBF	; 191
     c00:	92 e0       	ldi	r25, 0x02	; 2
     c02:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	21 f3       	breq	.-56     	; 0xbd2 <AppADMIN_getInput+0x6>
		return APP_STATUS_ERROR_NOK;
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <AppADMIN_getInput+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nYour Input: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	03 c0       	rjmp	.+6      	; 0xc18 <AppADMIN_getInput+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <AppADMIN_getInput+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     c16:	81 e0       	ldi	r24, 0x01	; 1
}
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	08 95       	ret

00000c1e <AppADMIN_getnewMaxAmount>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getnewMaxAmount(uint8_t* pu8_data)
{
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nMax Amount: ") != TERMINAL_STATUS_ERROR_OK)
     c24:	89 ee       	ldi	r24, 0xE9	; 233
     c26:	92 e0       	ldi	r25, 0x02	; 2
     c28:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	69 f5       	brne	.+90     	; 0xc8a <AppADMIN_getnewMaxAmount+0x6c>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     c30:	ce 01       	movw	r24, r28
     c32:	0e 94 b5 05 	call	0xb6a	; 0xb6a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     c36:	81 30       	cpi	r24, 0x01	; 1
     c38:	99 f0       	breq	.+38     	; 0xc60 <AppADMIN_getnewMaxAmount+0x42>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     c3a:	11 f0       	breq	.+4      	; 0xc40 <AppADMIN_getnewMaxAmount+0x22>
     c3c:	86 30       	cpi	r24, 0x06	; 6
     c3e:	39 f5       	brne	.+78     	; 0xc8e <AppADMIN_getnewMaxAmount+0x70>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     c40:	86 30       	cpi	r24, 0x06	; 6
     c42:	b1 f3       	breq	.-20     	; 0xc30 <AppADMIN_getnewMaxAmount+0x12>
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	0d c0       	rjmp	.+26     	; 0xc62 <AppADMIN_getnewMaxAmount+0x44>
		uint8_t u8_index=0;
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
		{
			if(((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0')) && (pu8_data[u8_index]!='.'))
     c48:	fe 01       	movw	r30, r28
     c4a:	e8 0f       	add	r30, r24
     c4c:	f1 1d       	adc	r31, r1
     c4e:	90 81       	ld	r25, Z
     c50:	20 ed       	ldi	r18, 0xD0	; 208
     c52:	29 0f       	add	r18, r25
     c54:	2a 30       	cpi	r18, 0x0A	; 10
     c56:	10 f0       	brcs	.+4      	; 0xc5c <AppADMIN_getnewMaxAmount+0x3e>
     c58:	9e 32       	cpi	r25, 0x2E	; 46
     c5a:	29 f4       	brne	.+10     	; 0xc66 <AppADMIN_getnewMaxAmount+0x48>
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		uint8_t u8_index=0;
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
     c5c:	8f 5f       	subi	r24, 0xFF	; 255
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <AppADMIN_getnewMaxAmount+0x44>
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	87 30       	cpi	r24, 0x07	; 7
     c64:	88 f3       	brcs	.-30     	; 0xc48 <AppADMIN_getnewMaxAmount+0x2a>
			if(((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0')) && (pu8_data[u8_index]!='.'))
			{
				break;
			}
		}
		if ((u8_index == MAX_BAL_LENGTH) && (pu8_data[u8_index] == '\0'))
     c66:	87 30       	cpi	r24, 0x07	; 7
     c68:	31 f4       	brne	.+12     	; 0xc76 <AppADMIN_getnewMaxAmount+0x58>
     c6a:	fe 01       	movw	r30, r28
     c6c:	e8 0f       	add	r30, r24
     c6e:	f1 1d       	adc	r31, r1
     c70:	80 81       	ld	r24, Z
     c72:	88 23       	and	r24, r24
     c74:	71 f0       	breq	.+28     	; 0xc92 <AppADMIN_getnewMaxAmount+0x74>
		{
			break;
		}
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
     c76:	87 ef       	ldi	r24, 0xF7	; 247
     c78:	92 e0       	ldi	r25, 0x02	; 2
     c7a:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	51 f4       	brne	.+20     	; 0xc96 <AppADMIN_getnewMaxAmount+0x78>
		return APP_STATUS_ERROR_NOK;
		EmptyString(pu8_data);
     c82:	ce 01       	movw	r24, r28
     c84:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
	} while (1);
     c88:	cd cf       	rjmp	.-102    	; 0xc24 <AppADMIN_getnewMaxAmount+0x6>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nMax Amount: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <AppADMIN_getnewMaxAmount+0x7a>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <AppADMIN_getnewMaxAmount+0x7a>
		}
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
		EmptyString(pu8_data);
	} while (1);
	return APP_STATUS_ERROR_OK;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	01 c0       	rjmp	.+2      	; 0xc98 <AppADMIN_getnewMaxAmount+0x7a>
		if ((u8_index == MAX_BAL_LENGTH) && (pu8_data[u8_index] == '\0'))
		{
			break;
		}
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     c96:	80 e0       	ldi	r24, 0x00	; 0
		EmptyString(pu8_data);
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	08 95       	ret

00000c9e <AppADMIN_getCustomerPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerPAN(uint8_t* pu8_data)
{
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nPAN: ") != TERMINAL_STATUS_ERROR_OK)
     ca6:	81 e3       	ldi	r24, 0x31	; 49
     ca8:	93 e0       	ldi	r25, 0x03	; 3
     caa:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	99 f5       	brne	.+102    	; 0xd18 <AppADMIN_getCustomerPAN+0x7a>
			return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     cb2:	ce 01       	movw	r24, r28
     cb4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	29 f0       	breq	.+10     	; 0xcc6 <AppADMIN_getCustomerPAN+0x28>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     cbc:	11 f0       	breq	.+4      	; 0xcc2 <AppADMIN_getCustomerPAN+0x24>
     cbe:	86 30       	cpi	r24, 0x06	; 6
     cc0:	69 f5       	brne	.+90     	; 0xd1c <AppADMIN_getCustomerPAN+0x7e>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     cc2:	86 30       	cpi	r24, 0x06	; 6
     cc4:	b1 f3       	breq	.-20     	; 0xcb2 <AppADMIN_getCustomerPAN+0x14>
		
		if(stringLength(pu8_data) != MAX_PAN_LENGTH+1)
     cc6:	ce 01       	movw	r24, r28
     cc8:	0e 94 40 1a 	call	0x3480	; 0x3480 <stringLength>
     ccc:	8a 30       	cpi	r24, 0x0A	; 10
     cce:	e9 f0       	breq	.+58     	; 0xd0a <AppADMIN_getCustomerPAN+0x6c>
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r") != TERMINAL_STATUS_ERROR_OK)
     cd0:	88 e3       	ldi	r24, 0x38	; 56
     cd2:	93 e0       	ldi	r25, 0x03	; 3
     cd4:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	11 f5       	brne	.+68     	; 0xd20 <AppADMIN_getCustomerPAN+0x82>
				return APP_STATUS_ERROR_NOK;
			EmptyString(pu8_data);
     cdc:	ce 01       	movw	r24, r28
     cde:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
			continue;
     ce2:	e1 cf       	rjmp	.-62     	; 0xca6 <AppADMIN_getCustomerPAN+0x8>
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
     ce4:	fe 01       	movw	r30, r28
     ce6:	e1 0f       	add	r30, r17
     ce8:	f1 1d       	adc	r31, r1
     cea:	80 81       	ld	r24, Z
     cec:	80 53       	subi	r24, 0x30	; 48
     cee:	8a 30       	cpi	r24, 0x0A	; 10
     cf0:	50 f0       	brcs	.+20     	; 0xd06 <AppADMIN_getCustomerPAN+0x68>
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r") != TERMINAL_STATUS_ERROR_OK)
     cf2:	88 e3       	ldi	r24, 0x38	; 56
     cf4:	93 e0       	ldi	r25, 0x03	; 3
     cf6:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	99 f4       	brne	.+38     	; 0xd24 <AppADMIN_getCustomerPAN+0x86>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
     cfe:	ce 01       	movw	r24, r28
     d00:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
				break;
     d04:	05 c0       	rjmp	.+10     	; 0xd10 <AppADMIN_getCustomerPAN+0x72>
			EmptyString(pu8_data);
			continue;
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
     d06:	1f 5f       	subi	r17, 0xFF	; 255
     d08:	01 c0       	rjmp	.+2      	; 0xd0c <AppADMIN_getCustomerPAN+0x6e>
     d0a:	10 e0       	ldi	r17, 0x00	; 0
     d0c:	19 30       	cpi	r17, 0x09	; 9
     d0e:	50 f3       	brcs	.-44     	; 0xce4 <AppADMIN_getCustomerPAN+0x46>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
				break;
			}
		}
		if (u8_index == MAX_PAN_LENGTH)
     d10:	19 30       	cpi	r17, 0x09	; 9
     d12:	49 f6       	brne	.-110    	; 0xca6 <AppADMIN_getCustomerPAN+0x8>
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	07 c0       	rjmp	.+14     	; 0xd26 <AppADMIN_getCustomerPAN+0x88>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nPAN: ") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	05 c0       	rjmp	.+10     	; 0xd26 <AppADMIN_getCustomerPAN+0x88>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	03 c0       	rjmp	.+6      	; 0xd26 <AppADMIN_getCustomerPAN+0x88>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringLength(pu8_data) != MAX_PAN_LENGTH+1)
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <AppADMIN_getCustomerPAN+0x88>
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     d24:	80 e0       	ldi	r24, 0x00	; 0
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	08 95       	ret

00000d2e <AppADMIN_getCustomerBalance>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Balance by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the balance of the customer.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerBalance(uint8_t* pu8_data)
{
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nBalance: ") != TERMINAL_STATUS_ERROR_OK)
     d34:	8a e6       	ldi	r24, 0x6A	; 106
     d36:	93 e0       	ldi	r25, 0x03	; 3
     d38:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	69 f5       	brne	.+90     	; 0xd9a <AppADMIN_getCustomerBalance+0x6c>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     d40:	ce 01       	movw	r24, r28
     d42:	0e 94 b5 05 	call	0xb6a	; 0xb6a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	99 f0       	breq	.+38     	; 0xd70 <AppADMIN_getCustomerBalance+0x42>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     d4a:	11 f0       	breq	.+4      	; 0xd50 <AppADMIN_getCustomerBalance+0x22>
     d4c:	86 30       	cpi	r24, 0x06	; 6
     d4e:	39 f5       	brne	.+78     	; 0xd9e <AppADMIN_getCustomerBalance+0x70>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     d50:	86 30       	cpi	r24, 0x06	; 6
     d52:	b1 f3       	breq	.-20     	; 0xd40 <AppADMIN_getCustomerBalance+0x12>
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	0d c0       	rjmp	.+26     	; 0xd72 <AppADMIN_getCustomerBalance+0x44>
		
		uint8_t u8_index=0;
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
		{
			if(((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0')) && (pu8_data[u8_index]!='.'))
     d58:	fe 01       	movw	r30, r28
     d5a:	e8 0f       	add	r30, r24
     d5c:	f1 1d       	adc	r31, r1
     d5e:	90 81       	ld	r25, Z
     d60:	20 ed       	ldi	r18, 0xD0	; 208
     d62:	29 0f       	add	r18, r25
     d64:	2a 30       	cpi	r18, 0x0A	; 10
     d66:	10 f0       	brcs	.+4      	; 0xd6c <AppADMIN_getCustomerBalance+0x3e>
     d68:	9e 32       	cpi	r25, 0x2E	; 46
     d6a:	29 f4       	brne	.+10     	; 0xd76 <AppADMIN_getCustomerBalance+0x48>
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		uint8_t u8_index=0;
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <AppADMIN_getCustomerBalance+0x44>
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	87 30       	cpi	r24, 0x07	; 7
     d74:	88 f3       	brcs	.-30     	; 0xd58 <AppADMIN_getCustomerBalance+0x2a>
			if(((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0')) && (pu8_data[u8_index]!='.'))
			{
				break;
			}
		}
		if ((u8_index == MAX_BAL_LENGTH) && (pu8_data[u8_index] == '\0'))
     d76:	87 30       	cpi	r24, 0x07	; 7
     d78:	31 f4       	brne	.+12     	; 0xd86 <AppADMIN_getCustomerBalance+0x58>
     d7a:	fe 01       	movw	r30, r28
     d7c:	e8 0f       	add	r30, r24
     d7e:	f1 1d       	adc	r31, r1
     d80:	80 81       	ld	r24, Z
     d82:	88 23       	and	r24, r24
     d84:	71 f0       	breq	.+28     	; 0xda2 <AppADMIN_getCustomerBalance+0x74>
		{
			break;
		}
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
     d86:	87 ef       	ldi	r24, 0xF7	; 247
     d88:	92 e0       	ldi	r25, 0x02	; 2
     d8a:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	51 f4       	brne	.+20     	; 0xda6 <AppADMIN_getCustomerBalance+0x78>
		return APP_STATUS_ERROR_NOK;
		EmptyString(pu8_data);
     d92:	ce 01       	movw	r24, r28
     d94:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
	} while (1);
     d98:	cd cf       	rjmp	.-102    	; 0xd34 <AppADMIN_getCustomerBalance+0x6>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nBalance: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	05 c0       	rjmp	.+10     	; 0xda8 <AppADMIN_getCustomerBalance+0x7a>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	03 c0       	rjmp	.+6      	; 0xda8 <AppADMIN_getCustomerBalance+0x7a>
		}
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
		EmptyString(pu8_data);
	} while (1);
	return APP_STATUS_ERROR_OK;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <AppADMIN_getCustomerBalance+0x7a>
		if ((u8_index == MAX_BAL_LENGTH) && (pu8_data[u8_index] == '\0'))
		{
			break;
		}
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     da6:	80 e0       	ldi	r24, 0x00	; 0
		EmptyString(pu8_data);
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	08 95       	ret

00000dae <AppADMIN_processNewCustomer>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to process adding a new customer in the data base.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_processNewCustomer(void)
{
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	64 97       	sbiw	r28, 0x14	; 20
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_tempPAN[10]={0};
     dca:	8e 01       	movw	r16, r28
     dcc:	0f 5f       	subi	r16, 0xFF	; 255
     dce:	1f 4f       	sbci	r17, 0xFF	; 255
     dd0:	8a e0       	ldi	r24, 0x0A	; 10
     dd2:	d8 01       	movw	r26, r16
     dd4:	1d 92       	st	X+, r1
     dd6:	8a 95       	dec	r24
     dd8:	e9 f7       	brne	.-6      	; 0xdd4 <AppADMIN_processNewCustomer+0x26>
	uint8_t au8_tempBalance[8]={0};
     dda:	fe 01       	movw	r30, r28
     ddc:	3b 96       	adiw	r30, 0x0b	; 11
     dde:	88 e0       	ldi	r24, 0x08	; 8
     de0:	df 01       	movw	r26, r30
     de2:	1d 92       	st	X+, r1
     de4:	8a 95       	dec	r24
     de6:	e9 f7       	brne	.-6      	; 0xde2 <AppADMIN_processNewCustomer+0x34>
	uint8_t au8_input[2]={0};
     de8:	1c 8a       	std	Y+20, r1	; 0x14
     dea:	1b 8a       	std	Y+19, r1	; 0x13
	uint8_t u8_exist = 0;
	uint8_t u8_newCustomerPanAddr = 0;
	uint8_t u8_newCustomerBalAddr = 0;
	EmptyString(gstr_clientdata.au8_PAN);
     dec:	8b e8       	ldi	r24, 0x8B	; 139
     dee:	95 e0       	ldi	r25, 0x05	; 5
     df0:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
	EmptyString(gstr_clientdata.au8_Balance);
     df4:	85 e9       	ldi	r24, 0x95	; 149
     df6:	95 e0       	ldi	r25, 0x05	; 5
     df8:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     dfc:	c8 01       	movw	r24, r16
     dfe:	0e 94 4f 06 	call	0xc9e	; 0xc9e <AppADMIN_getCustomerPAN>
     e02:	18 2f       	mov	r17, r24
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	09 f0       	breq	.+2      	; 0xe0a <AppADMIN_processNewCustomer+0x5c>
     e08:	b2 c0       	rjmp	.+356    	; 0xf6e <AppADMIN_processNewCustomer+0x1c0>
		return APP_STATUS_ERROR_NOK;
	
	sint16_t s16_clientIndex = AppADMIN_searchPan(au8_tempPAN);
     e0a:	ce 01       	movw	r24, r28
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	0e 94 50 00 	call	0xa0	; 0xa0 <AppADMIN_searchPan>
     e12:	7c 01       	movw	r14, r24
	
	if(s16_clientIndex != -1)
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	a9 f0       	breq	.+42     	; 0xe42 <AppADMIN_processNewCustomer+0x94>
	{
		Terminal_Out((uint8_t*)"This PAN is already existed in the Data Base\r\nDo you wish to update it?(y/n): ");
     e18:	85 e7       	ldi	r24, 0x75	; 117
     e1a:	93 e0       	ldi	r25, 0x03	; 3
     e1c:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
		AppADMIN_getInput(au8_input);
     e20:	ce 01       	movw	r24, r28
     e22:	43 96       	adiw	r24, 0x13	; 19
     e24:	0e 94 e6 05 	call	0xbcc	; 0xbcc <AppADMIN_getInput>
		if((au8_input[0] == 'y') || (au8_input[0] == 'Y'))
     e28:	8b 89       	ldd	r24, Y+19	; 0x13
     e2a:	89 37       	cpi	r24, 0x79	; 121
     e2c:	61 f0       	breq	.+24     	; 0xe46 <AppADMIN_processNewCustomer+0x98>
     e2e:	89 35       	cpi	r24, 0x59	; 89
     e30:	61 f0       	breq	.+24     	; 0xe4a <AppADMIN_processNewCustomer+0x9c>
		{
			u8_exist = 1;
		}else if((au8_input[0] == 'n') || (au8_input[0] == 'N'))
     e32:	8e 36       	cpi	r24, 0x6E	; 110
     e34:	09 f4       	brne	.+2      	; 0xe38 <AppADMIN_processNewCustomer+0x8a>
     e36:	a8 c0       	rjmp	.+336    	; 0xf88 <AppADMIN_processNewCustomer+0x1da>
     e38:	8e 34       	cpi	r24, 0x4E	; 78
     e3a:	09 f4       	brne	.+2      	; 0xe3e <AppADMIN_processNewCustomer+0x90>
     e3c:	a5 c0       	rjmp	.+330    	; 0xf88 <AppADMIN_processNewCustomer+0x1da>
enuApp_Status_t AppADMIN_processNewCustomer(void)
{
	uint8_t au8_tempPAN[10]={0};
	uint8_t au8_tempBalance[8]={0};
	uint8_t au8_input[2]={0};
	uint8_t u8_exist = 0;
     e3e:	00 e0       	ldi	r16, 0x00	; 0
     e40:	05 c0       	rjmp	.+10     	; 0xe4c <AppADMIN_processNewCustomer+0x9e>
     e42:	00 e0       	ldi	r16, 0x00	; 0
     e44:	03 c0       	rjmp	.+6      	; 0xe4c <AppADMIN_processNewCustomer+0x9e>
	{
		Terminal_Out((uint8_t*)"This PAN is already existed in the Data Base\r\nDo you wish to update it?(y/n): ");
		AppADMIN_getInput(au8_input);
		if((au8_input[0] == 'y') || (au8_input[0] == 'Y'))
		{
			u8_exist = 1;
     e46:	01 e0       	ldi	r16, 0x01	; 1
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <AppADMIN_processNewCustomer+0x9e>
     e4a:	01 e0       	ldi	r16, 0x01	; 1
		}else if((au8_input[0] == 'n') || (au8_input[0] == 'N'))
		{
			return APP_STATUS_ERROR_OK; 
		}
	}
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
     e4c:	6b e8       	ldi	r22, 0x8B	; 139
     e4e:	75 e0       	ldi	r23, 0x05	; 5
     e50:	ce 01       	movw	r24, r28
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stringCopy>
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
     e58:	ce 01       	movw	r24, r28
     e5a:	0b 96       	adiw	r24, 0x0b	; 11
     e5c:	0e 94 97 06 	call	0xd2e	; 0xd2e <AppADMIN_getCustomerBalance>
     e60:	18 2f       	mov	r17, r24
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	09 f0       	breq	.+2      	; 0xe68 <AppADMIN_processNewCustomer+0xba>
     e66:	85 c0       	rjmp	.+266    	; 0xf72 <AppADMIN_processNewCustomer+0x1c4>
		return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
     e68:	65 e9       	ldi	r22, 0x95	; 149
     e6a:	75 e0       	ldi	r23, 0x05	; 5
     e6c:	ce 01       	movw	r24, r28
     e6e:	0b 96       	adiw	r24, 0x0b	; 11
     e70:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stringCopy>
	
	if(u8_exist == 0)
     e74:	01 11       	cpse	r16, r1
     e76:	3e c0       	rjmp	.+124    	; 0xef4 <AppADMIN_processNewCustomer+0x146>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
     e78:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <gu8_registeredAccNum>
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	2f 5f       	subi	r18, 0xFF	; 255
     e82:	3f 4f       	sbci	r19, 0xFF	; 255
     e84:	f2 2e       	mov	r15, r18
     e86:	ff 0c       	add	r15, r15
     e88:	ff 0c       	add	r15, r15
     e8a:	ff 0c       	add	r15, r15
     e8c:	ff 0c       	add	r15, r15
     e8e:	ff 0c       	add	r15, r15
     e90:	ff 0c       	add	r15, r15
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
     e92:	82 95       	swap	r24
     e94:	88 0f       	add	r24, r24
     e96:	88 0f       	add	r24, r24
     e98:	80 7c       	andi	r24, 0xC0	; 192
     e9a:	0a e4       	ldi	r16, 0x4A	; 74
     e9c:	08 0f       	add	r16, r24
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
     e9e:	8b e8       	ldi	r24, 0x8B	; 139
     ea0:	95 e0       	ldi	r25, 0x05	; 5
     ea2:	0e 94 40 1a 	call	0x3480	; 0x3480 <stringLength>
     ea6:	48 2f       	mov	r20, r24
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	6b e8       	ldi	r22, 0x8B	; 139
     eac:	75 e0       	ldi	r23, 0x05	; 5
     eae:	8f 2d       	mov	r24, r15
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 35 0c 	call	0x186a	; 0x186a <Eeprom_24_writePacket>
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	09 f0       	breq	.+2      	; 0xebc <AppADMIN_processNewCustomer+0x10e>
     eba:	5d c0       	rjmp	.+186    	; 0xf76 <AppADMIN_processNewCustomer+0x1c8>
		return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     ebc:	85 e9       	ldi	r24, 0x95	; 149
     ebe:	95 e0       	ldi	r25, 0x05	; 5
     ec0:	0e 94 40 1a 	call	0x3480	; 0x3480 <stringLength>
     ec4:	48 2f       	mov	r20, r24
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	65 e9       	ldi	r22, 0x95	; 149
     eca:	75 e0       	ldi	r23, 0x05	; 5
     ecc:	80 2f       	mov	r24, r16
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 35 0c 	call	0x186a	; 0x186a <Eeprom_24_writePacket>
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	09 f0       	breq	.+2      	; 0xeda <AppADMIN_processNewCustomer+0x12c>
     ed8:	50 c0       	rjmp	.+160    	; 0xf7a <AppADMIN_processNewCustomer+0x1cc>
		return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     eda:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <gu8_registeredAccNum>
     ede:	6f 5f       	subi	r22, 0xFF	; 255
     ee0:	60 93 89 05 	sts	0x0589, r22	; 0x800589 <gu8_registeredAccNum>
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 09 0b 	call	0x1612	; 0x1612 <Eeprom_24_writeByte>
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	09 f0       	breq	.+2      	; 0xef2 <AppADMIN_processNewCustomer+0x144>
     ef0:	46 c0       	rjmp	.+140    	; 0xf7e <AppADMIN_processNewCustomer+0x1d0>
     ef2:	2d c0       	rjmp	.+90     	; 0xf4e <AppADMIN_processNewCustomer+0x1a0>
		return APP_STATUS_ERROR_NOK;
	}else
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
     ef4:	c7 01       	movw	r24, r14
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	08 2f       	mov	r16, r24
     efa:	02 95       	swap	r16
     efc:	00 0f       	add	r16, r16
     efe:	00 0f       	add	r16, r16
     f00:	00 7c       	andi	r16, 0xC0	; 192
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
     f02:	8e 2d       	mov	r24, r14
     f04:	82 95       	swap	r24
     f06:	88 0f       	add	r24, r24
     f08:	88 0f       	add	r24, r24
     f0a:	80 7c       	andi	r24, 0xC0	; 192
     f0c:	0f 2e       	mov	r0, r31
     f0e:	fa e4       	ldi	r31, 0x4A	; 74
     f10:	ef 2e       	mov	r14, r31
     f12:	f0 2d       	mov	r31, r0
     f14:	e8 0e       	add	r14, r24
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
     f16:	8b e8       	ldi	r24, 0x8B	; 139
     f18:	95 e0       	ldi	r25, 0x05	; 5
     f1a:	0e 94 40 1a 	call	0x3480	; 0x3480 <stringLength>
     f1e:	48 2f       	mov	r20, r24
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	6b e8       	ldi	r22, 0x8B	; 139
     f24:	75 e0       	ldi	r23, 0x05	; 5
     f26:	80 2f       	mov	r24, r16
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 35 0c 	call	0x186a	; 0x186a <Eeprom_24_writePacket>
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	41 f5       	brne	.+80     	; 0xf82 <AppADMIN_processNewCustomer+0x1d4>
			return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     f32:	85 e9       	ldi	r24, 0x95	; 149
     f34:	95 e0       	ldi	r25, 0x05	; 5
     f36:	0e 94 40 1a 	call	0x3480	; 0x3480 <stringLength>
     f3a:	48 2f       	mov	r20, r24
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	65 e9       	ldi	r22, 0x95	; 149
     f40:	75 e0       	ldi	r23, 0x05	; 5
     f42:	8e 2d       	mov	r24, r14
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 35 0c 	call	0x186a	; 0x186a <Eeprom_24_writePacket>
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	e1 f4       	brne	.+56     	; 0xf86 <AppADMIN_processNewCustomer+0x1d8>
			return APP_STATUS_ERROR_NOK;
	}
	if(gu8_registeredAccNum == 1)
     f4e:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <gu8_registeredAccNum>
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	c9 f4       	brne	.+50     	; 0xf88 <AppADMIN_processNewCustomer+0x1da>
	{
		gu8_initData = ATM_DB_FLAG_SET_VAL;
     f56:	8a ea       	ldi	r24, 0xAA	; 170
     f58:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <gu8_initData>
		if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
     f5c:	6a ea       	ldi	r22, 0xAA	; 170
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 09 0b 	call	0x1612	; 0x1612 <Eeprom_24_writeByte>
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	79 f0       	breq	.+30     	; 0xf88 <AppADMIN_processNewCustomer+0x1da>
			return APP_STATUS_ERROR_NOK;
     f6a:	10 e0       	ldi	r17, 0x00	; 0
     f6c:	0d c0       	rjmp	.+26     	; 0xf88 <AppADMIN_processNewCustomer+0x1da>
	uint8_t u8_newCustomerBalAddr = 0;
	EmptyString(gstr_clientdata.au8_PAN);
	EmptyString(gstr_clientdata.au8_Balance);
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f6e:	10 e0       	ldi	r17, 0x00	; 0
     f70:	0b c0       	rjmp	.+22     	; 0xf88 <AppADMIN_processNewCustomer+0x1da>
	}
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f72:	10 e0       	ldi	r17, 0x00	; 0
     f74:	09 c0       	rjmp	.+18     	; 0xf88 <AppADMIN_processNewCustomer+0x1da>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f76:	10 e0       	ldi	r17, 0x00	; 0
     f78:	07 c0       	rjmp	.+14     	; 0xf88 <AppADMIN_processNewCustomer+0x1da>
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f7a:	10 e0       	ldi	r17, 0x00	; 0
     f7c:	05 c0       	rjmp	.+10     	; 0xf88 <AppADMIN_processNewCustomer+0x1da>
		
		if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f7e:	10 e0       	ldi	r17, 0x00	; 0
     f80:	03 c0       	rjmp	.+6      	; 0xf88 <AppADMIN_processNewCustomer+0x1da>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     f82:	10 e0       	ldi	r17, 0x00	; 0
     f84:	01 c0       	rjmp	.+2      	; 0xf88 <AppADMIN_processNewCustomer+0x1da>
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     f86:	10 e0       	ldi	r17, 0x00	; 0
		gu8_initData = ATM_DB_FLAG_SET_VAL;
		if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	}
	return APP_STATUS_ERROR_OK;
}
     f88:	81 2f       	mov	r24, r17
     f8a:	64 96       	adiw	r28, 0x14	; 20
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	08 95       	ret

00000fa4 <AppADMIN_processExistingCustomer>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to process adding a new customer in the data base.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_processExistingCustomer(void)
{
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	64 97       	sbiw	r28, 0x14	; 20
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_tempPAN[10]={0};
     fc0:	8e 01       	movw	r16, r28
     fc2:	0f 5f       	subi	r16, 0xFF	; 255
     fc4:	1f 4f       	sbci	r17, 0xFF	; 255
     fc6:	8a e0       	ldi	r24, 0x0A	; 10
     fc8:	d8 01       	movw	r26, r16
     fca:	1d 92       	st	X+, r1
     fcc:	8a 95       	dec	r24
     fce:	e9 f7       	brne	.-6      	; 0xfca <AppADMIN_processExistingCustomer+0x26>
	uint8_t au8_tempBalance[8]={0};
     fd0:	fe 01       	movw	r30, r28
     fd2:	3b 96       	adiw	r30, 0x0b	; 11
     fd4:	88 e0       	ldi	r24, 0x08	; 8
     fd6:	df 01       	movw	r26, r30
     fd8:	1d 92       	st	X+, r1
     fda:	8a 95       	dec	r24
     fdc:	e9 f7       	brne	.-6      	; 0xfd8 <AppADMIN_processExistingCustomer+0x34>
	uint8_t au8_input[2]={0};
     fde:	1c 8a       	std	Y+20, r1	; 0x14
     fe0:	1b 8a       	std	Y+19, r1	; 0x13
	uint8_t u8_exist = 1;
	uint8_t u8_newCustomerPanAddr = 0;
	uint8_t u8_newCustomerBalAddr = 0;
	EmptyString(gstr_clientdata.au8_PAN);
     fe2:	8b e8       	ldi	r24, 0x8B	; 139
     fe4:	95 e0       	ldi	r25, 0x05	; 5
     fe6:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
	EmptyString(gstr_clientdata.au8_Balance);
     fea:	85 e9       	ldi	r24, 0x95	; 149
     fec:	95 e0       	ldi	r25, 0x05	; 5
     fee:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     ff2:	c8 01       	movw	r24, r16
     ff4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <AppADMIN_getCustomerPAN>
     ff8:	18 2f       	mov	r17, r24
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	09 f0       	breq	.+2      	; 0x1000 <AppADMIN_processExistingCustomer+0x5c>
     ffe:	b4 c0       	rjmp	.+360    	; 0x1168 <AppADMIN_processExistingCustomer+0x1c4>
		return APP_STATUS_ERROR_NOK;
	
	sint16_t s16_clientIndex = AppADMIN_searchPan(au8_tempPAN);
    1000:	ce 01       	movw	r24, r28
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	0e 94 50 00 	call	0xa0	; 0xa0 <AppADMIN_searchPan>
    1008:	7c 01       	movw	r14, r24
	
	if(s16_clientIndex == -1)
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	a9 f4       	brne	.+42     	; 0x1038 <AppADMIN_processExistingCustomer+0x94>
	{
		Terminal_Out((uint8_t*)"This PAN is not existed in the Data Base\r\nDo you wish to add new?(y/n): ");
    100e:	84 ec       	ldi	r24, 0xC4	; 196
    1010:	93 e0       	ldi	r25, 0x03	; 3
    1012:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
		AppADMIN_getInput(au8_input);
    1016:	ce 01       	movw	r24, r28
    1018:	43 96       	adiw	r24, 0x13	; 19
    101a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <AppADMIN_getInput>
		if((au8_input[0] == 'y') || (au8_input[0] == 'Y'))
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	89 37       	cpi	r24, 0x79	; 121
    1022:	61 f0       	breq	.+24     	; 0x103c <AppADMIN_processExistingCustomer+0x98>
    1024:	89 35       	cpi	r24, 0x59	; 89
    1026:	61 f0       	breq	.+24     	; 0x1040 <AppADMIN_processExistingCustomer+0x9c>
		{
			u8_exist = 0;
		}else if((au8_input[0] == 'n') || (au8_input[0] == 'N'))
    1028:	8e 36       	cpi	r24, 0x6E	; 110
    102a:	09 f4       	brne	.+2      	; 0x102e <AppADMIN_processExistingCustomer+0x8a>
    102c:	a8 c0       	rjmp	.+336    	; 0x117e <AppADMIN_processExistingCustomer+0x1da>
    102e:	8e 34       	cpi	r24, 0x4E	; 78
    1030:	09 f4       	brne	.+2      	; 0x1034 <AppADMIN_processExistingCustomer+0x90>
    1032:	a5 c0       	rjmp	.+330    	; 0x117e <AppADMIN_processExistingCustomer+0x1da>
enuApp_Status_t AppADMIN_processExistingCustomer(void)
{
	uint8_t au8_tempPAN[10]={0};
	uint8_t au8_tempBalance[8]={0};
	uint8_t au8_input[2]={0};
	uint8_t u8_exist = 1;
    1034:	01 e0       	ldi	r16, 0x01	; 1
    1036:	05 c0       	rjmp	.+10     	; 0x1042 <AppADMIN_processExistingCustomer+0x9e>
    1038:	01 e0       	ldi	r16, 0x01	; 1
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <AppADMIN_processExistingCustomer+0x9e>
	{
		Terminal_Out((uint8_t*)"This PAN is not existed in the Data Base\r\nDo you wish to add new?(y/n): ");
		AppADMIN_getInput(au8_input);
		if((au8_input[0] == 'y') || (au8_input[0] == 'Y'))
		{
			u8_exist = 0;
    103c:	00 e0       	ldi	r16, 0x00	; 0
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <AppADMIN_processExistingCustomer+0x9e>
    1040:	00 e0       	ldi	r16, 0x00	; 0
		}else if((au8_input[0] == 'n') || (au8_input[0] == 'N'))
		{
			return APP_STATUS_ERROR_OK;
		}
	}
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
    1042:	6b e8       	ldi	r22, 0x8B	; 139
    1044:	75 e0       	ldi	r23, 0x05	; 5
    1046:	ce 01       	movw	r24, r28
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stringCopy>
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
    104e:	ce 01       	movw	r24, r28
    1050:	0b 96       	adiw	r24, 0x0b	; 11
    1052:	0e 94 97 06 	call	0xd2e	; 0xd2e <AppADMIN_getCustomerBalance>
    1056:	18 2f       	mov	r17, r24
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	09 f0       	breq	.+2      	; 0x105e <AppADMIN_processExistingCustomer+0xba>
    105c:	87 c0       	rjmp	.+270    	; 0x116c <AppADMIN_processExistingCustomer+0x1c8>
		return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
    105e:	65 e9       	ldi	r22, 0x95	; 149
    1060:	75 e0       	ldi	r23, 0x05	; 5
    1062:	ce 01       	movw	r24, r28
    1064:	0b 96       	adiw	r24, 0x0b	; 11
    1066:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stringCopy>
	
	if(u8_exist == 0)
    106a:	01 11       	cpse	r16, r1
    106c:	4e c0       	rjmp	.+156    	; 0x110a <AppADMIN_processExistingCustomer+0x166>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
    106e:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <gu8_registeredAccNum>
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	2f 5f       	subi	r18, 0xFF	; 255
    1078:	3f 4f       	sbci	r19, 0xFF	; 255
    107a:	f2 2e       	mov	r15, r18
    107c:	ff 0c       	add	r15, r15
    107e:	ff 0c       	add	r15, r15
    1080:	ff 0c       	add	r15, r15
    1082:	ff 0c       	add	r15, r15
    1084:	ff 0c       	add	r15, r15
    1086:	ff 0c       	add	r15, r15
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
    1088:	82 95       	swap	r24
    108a:	88 0f       	add	r24, r24
    108c:	88 0f       	add	r24, r24
    108e:	80 7c       	andi	r24, 0xC0	; 192
    1090:	0a e4       	ldi	r16, 0x4A	; 74
    1092:	08 0f       	add	r16, r24
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
    1094:	8b e8       	ldi	r24, 0x8B	; 139
    1096:	95 e0       	ldi	r25, 0x05	; 5
    1098:	0e 94 40 1a 	call	0x3480	; 0x3480 <stringLength>
    109c:	48 2f       	mov	r20, r24
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	6b e8       	ldi	r22, 0x8B	; 139
    10a2:	75 e0       	ldi	r23, 0x05	; 5
    10a4:	8f 2d       	mov	r24, r15
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 35 0c 	call	0x186a	; 0x186a <Eeprom_24_writePacket>
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <AppADMIN_processExistingCustomer+0x10e>
    10b0:	5f c0       	rjmp	.+190    	; 0x1170 <AppADMIN_processExistingCustomer+0x1cc>
			return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
    10b2:	85 e9       	ldi	r24, 0x95	; 149
    10b4:	95 e0       	ldi	r25, 0x05	; 5
    10b6:	0e 94 40 1a 	call	0x3480	; 0x3480 <stringLength>
    10ba:	48 2f       	mov	r20, r24
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	65 e9       	ldi	r22, 0x95	; 149
    10c0:	75 e0       	ldi	r23, 0x05	; 5
    10c2:	80 2f       	mov	r24, r16
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 35 0c 	call	0x186a	; 0x186a <Eeprom_24_writePacket>
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <AppADMIN_processExistingCustomer+0x12c>
    10ce:	52 c0       	rjmp	.+164    	; 0x1174 <AppADMIN_processExistingCustomer+0x1d0>
			return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
    10d0:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <gu8_registeredAccNum>
    10d4:	6f 5f       	subi	r22, 0xFF	; 255
    10d6:	60 93 89 05 	sts	0x0589, r22	; 0x800589 <gu8_registeredAccNum>
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 09 0b 	call	0x1612	; 0x1612 <Eeprom_24_writeByte>
    10e2:	81 30       	cpi	r24, 0x01	; 1
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <AppADMIN_processExistingCustomer+0x144>
    10e6:	48 c0       	rjmp	.+144    	; 0x1178 <AppADMIN_processExistingCustomer+0x1d4>
			return APP_STATUS_ERROR_NOK;
			
		if(gu8_registeredAccNum == 1)
    10e8:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <gu8_registeredAccNum>
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <AppADMIN_processExistingCustomer+0x14e>
    10f0:	46 c0       	rjmp	.+140    	; 0x117e <AppADMIN_processExistingCustomer+0x1da>
		{
			gu8_initData = ATM_DB_FLAG_SET_VAL;
    10f2:	8a ea       	ldi	r24, 0xAA	; 170
    10f4:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <gu8_initData>
			if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
    10f8:	6a ea       	ldi	r22, 0xAA	; 170
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 09 0b 	call	0x1612	; 0x1612 <Eeprom_24_writeByte>
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	e1 f1       	breq	.+120    	; 0x117e <AppADMIN_processExistingCustomer+0x1da>
			return APP_STATUS_ERROR_NOK;
    1106:	10 e0       	ldi	r17, 0x00	; 0
    1108:	3a c0       	rjmp	.+116    	; 0x117e <AppADMIN_processExistingCustomer+0x1da>
		}
	}else
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
    110a:	c7 01       	movw	r24, r14
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	08 2f       	mov	r16, r24
    1110:	02 95       	swap	r16
    1112:	00 0f       	add	r16, r16
    1114:	00 0f       	add	r16, r16
    1116:	00 7c       	andi	r16, 0xC0	; 192
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
    1118:	8e 2d       	mov	r24, r14
    111a:	82 95       	swap	r24
    111c:	88 0f       	add	r24, r24
    111e:	88 0f       	add	r24, r24
    1120:	80 7c       	andi	r24, 0xC0	; 192
    1122:	0f 2e       	mov	r0, r31
    1124:	fa e4       	ldi	r31, 0x4A	; 74
    1126:	ef 2e       	mov	r14, r31
    1128:	f0 2d       	mov	r31, r0
    112a:	e8 0e       	add	r14, r24
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
    112c:	8b e8       	ldi	r24, 0x8B	; 139
    112e:	95 e0       	ldi	r25, 0x05	; 5
    1130:	0e 94 40 1a 	call	0x3480	; 0x3480 <stringLength>
    1134:	48 2f       	mov	r20, r24
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	6b e8       	ldi	r22, 0x8B	; 139
    113a:	75 e0       	ldi	r23, 0x05	; 5
    113c:	80 2f       	mov	r24, r16
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 35 0c 	call	0x186a	; 0x186a <Eeprom_24_writePacket>
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	d1 f4       	brne	.+52     	; 0x117c <AppADMIN_processExistingCustomer+0x1d8>
		return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
    1148:	85 e9       	ldi	r24, 0x95	; 149
    114a:	95 e0       	ldi	r25, 0x05	; 5
    114c:	0e 94 40 1a 	call	0x3480	; 0x3480 <stringLength>
    1150:	48 2f       	mov	r20, r24
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	65 e9       	ldi	r22, 0x95	; 149
    1156:	75 e0       	ldi	r23, 0x05	; 5
    1158:	8e 2d       	mov	r24, r14
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 35 0c 	call	0x186a	; 0x186a <Eeprom_24_writePacket>
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	69 f0       	breq	.+26     	; 0x117e <AppADMIN_processExistingCustomer+0x1da>
		return APP_STATUS_ERROR_NOK;
    1164:	10 e0       	ldi	r17, 0x00	; 0
    1166:	0b c0       	rjmp	.+22     	; 0x117e <AppADMIN_processExistingCustomer+0x1da>
	uint8_t u8_newCustomerBalAddr = 0;
	EmptyString(gstr_clientdata.au8_PAN);
	EmptyString(gstr_clientdata.au8_Balance);
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
    1168:	10 e0       	ldi	r17, 0x00	; 0
    116a:	09 c0       	rjmp	.+18     	; 0x117e <AppADMIN_processExistingCustomer+0x1da>
	}
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
    116c:	10 e0       	ldi	r17, 0x00	; 0
    116e:	07 c0       	rjmp	.+14     	; 0x117e <AppADMIN_processExistingCustomer+0x1da>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
    1170:	10 e0       	ldi	r17, 0x00	; 0
    1172:	05 c0       	rjmp	.+10     	; 0x117e <AppADMIN_processExistingCustomer+0x1da>
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
    1174:	10 e0       	ldi	r17, 0x00	; 0
    1176:	03 c0       	rjmp	.+6      	; 0x117e <AppADMIN_processExistingCustomer+0x1da>
		
		if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	01 c0       	rjmp	.+2      	; 0x117e <AppADMIN_processExistingCustomer+0x1da>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
    117c:	10 e0       	ldi	r17, 0x00	; 0
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	}
	return APP_STATUS_ERROR_OK;
}
    117e:	81 2f       	mov	r24, r17
    1180:	64 96       	adiw	r28, 0x14	; 20
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	08 95       	ret

0000119a <AppADMIN_getAtmPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input ATM PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the atm pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getAtmPIN(uint8_t* pu8_data)
{
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t u8_counter=0;
	Terminal_enablePasswordMode();
    11a2:	0e 94 ac 11 	call	0x2358	; 0x2358 <Terminal_enablePasswordMode>
* Description: Function to get the atm pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getAtmPIN(uint8_t* pu8_data)
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t u8_counter=0;
    11a6:	10 e0       	ldi	r17, 0x00	; 0
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"\nATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
    11a8:	8d e0       	ldi	r24, 0x0D	; 13
    11aa:	94 e0       	ldi	r25, 0x04	; 4
    11ac:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	b9 f5       	brne	.+110    	; 0x1222 <AppADMIN_getAtmPIN+0x88>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
    11b4:	ce 01       	movw	r24, r28
    11b6:	0e 94 b5 05 	call	0xb6a	; 0xb6a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	29 f0       	breq	.+10     	; 0x11c8 <AppADMIN_getAtmPIN+0x2e>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
    11be:	11 f0       	breq	.+4      	; 0x11c4 <AppADMIN_getAtmPIN+0x2a>
    11c0:	86 30       	cpi	r24, 0x06	; 6
    11c2:	89 f5       	brne	.+98     	; 0x1226 <AppADMIN_getAtmPIN+0x8c>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
    11c4:	86 30       	cpi	r24, 0x06	; 6
    11c6:	b1 f3       	breq	.-20     	; 0x11b4 <AppADMIN_getAtmPIN+0x1a>
		
		if(stringCompare((uint8_t*)ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
    11c8:	be 01       	movw	r22, r28
    11ca:	88 e5       	ldi	r24, 0x58	; 88
    11cc:	95 e0       	ldi	r25, 0x05	; 5
    11ce:	0e 94 4c 1a 	call	0x3498	; 0x3498 <stringCompare>
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	e1 f0       	breq	.+56     	; 0x120e <AppADMIN_getAtmPIN+0x74>
		{
			if(u8_counter == MAX_PIN_TRIAL)
    11d6:	13 30       	cpi	r17, 0x03	; 3
    11d8:	79 f4       	brne	.+30     	; 0x11f8 <AppADMIN_getAtmPIN+0x5e>
			{
				gu8_ATMMode = ATM_MODE_USER;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <gu8_ATMMode>
				Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
    11e0:	65 e8       	ldi	r22, 0x85	; 133
    11e2:	71 e0       	ldi	r23, 0x01	; 1
    11e4:	84 e9       	ldi	r24, 0x94	; 148
    11e6:	91 e0       	ldi	r25, 0x01	; 1
    11e8:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
				Terminal_Out((uint8_t*)"Incorrect PIN\r\nPlease reach the Company\r\n");
    11ec:	88 e1       	ldi	r24, 0x18	; 24
    11ee:	94 e0       	ldi	r25, 0x04	; 4
    11f0:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
				return APP_STATUS_PIN_NOT_CORRECT;
    11f4:	89 e0       	ldi	r24, 0x09	; 9
    11f6:	1c c0       	rjmp	.+56     	; 0x1230 <AppADMIN_getAtmPIN+0x96>
			}
			if(Terminal_Out((uint8_t*)"\nIncorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
    11f8:	82 e4       	ldi	r24, 0x42	; 66
    11fa:	94 e0       	ldi	r25, 0x04	; 4
    11fc:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	99 f4       	brne	.+38     	; 0x122a <AppADMIN_getAtmPIN+0x90>
				return APP_STATUS_ERROR_NOK;
			u8_counter++;
    1204:	1f 5f       	subi	r17, 0xFF	; 255
			EmptyString(pu8_data);
    1206:	ce 01       	movw	r24, r28
    1208:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
			break;
		}
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	} while (1);
    120c:	cd cf       	rjmp	.-102    	; 0x11a8 <AppADMIN_getAtmPIN+0xe>
			u8_counter++;
			EmptyString(pu8_data);
			continue;
		}else
		{
			if(Terminal_Out((uint8_t*)"\nLoading...\r") != TERMINAL_STATUS_ERROR_OK)
    120e:	82 e5       	ldi	r24, 0x52	; 82
    1210:	94 e0       	ldi	r25, 0x04	; 4
    1212:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	51 f4       	brne	.+20     	; 0x122e <AppADMIN_getAtmPIN+0x94>
		}
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
    121a:	0e 94 b0 11 	call	0x2360	; 0x2360 <Terminal_disablePasswordMode>
	return APP_STATUS_PIN_CORRECT;
    121e:	88 e0       	ldi	r24, 0x08	; 8
    1220:	07 c0       	rjmp	.+14     	; 0x1230 <AppADMIN_getAtmPIN+0x96>
	uint8_t u8_counter=0;
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"\nATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	05 c0       	rjmp	.+10     	; 0x1230 <AppADMIN_getAtmPIN+0x96>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	03 c0       	rjmp	.+6      	; 0x1230 <AppADMIN_getAtmPIN+0x96>
				Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
				Terminal_Out((uint8_t*)"Incorrect PIN\r\nPlease reach the Company\r\n");
				return APP_STATUS_PIN_NOT_CORRECT;
			}
			if(Terminal_Out((uint8_t*)"\nIncorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <AppADMIN_getAtmPIN+0x96>
			EmptyString(pu8_data);
			continue;
		}else
		{
			if(Terminal_Out((uint8_t*)"\nLoading...\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
    122e:	80 e0       	ldi	r24, 0x00	; 0
		if(Terminal_Out((uint8_t*)"\nInvalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_PIN_CORRECT;
}
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	08 95       	ret

00001238 <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	69 97       	sbiw	r28, 0x19	; 25
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
    124c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <enuCurrentAppStatus>
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	09 f0       	breq	.+2      	; 0x1256 <App_update+0x1e>
    1254:	18 c1       	rjmp	.+560    	; 0x1486 <App_update+0x24e>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
    1256:	fe 01       	movw	r30, r28
    1258:	31 96       	adiw	r30, 0x01	; 1
    125a:	8a e0       	ldi	r24, 0x0A	; 10
    125c:	df 01       	movw	r26, r30
    125e:	1d 92       	st	X+, r1
    1260:	8a 95       	dec	r24
    1262:	e9 f7       	brne	.-6      	; 0x125e <App_update+0x26>
	static uint8_t u8_passFlag = 0;
	if(gu8_ATMMode == ATM_MODE_ADMIN)
    1264:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gu8_ATMMode>
    1268:	81 11       	cpse	r24, r1
    126a:	8c c0       	rjmp	.+280    	; 0x1384 <App_update+0x14c>
	{ /**************** PROGRAMMING MODE ****************/
			uint8_t au8_Input[2]={0};
    126c:	19 8e       	std	Y+25, r1	; 0x19
    126e:	18 8e       	std	Y+24, r1	; 0x18
			uint8_t au8_tempPinNum[5]={0};
    1270:	72 96       	adiw	r30, 0x12	; 18
    1272:	85 e0       	ldi	r24, 0x05	; 5
    1274:	df 01       	movw	r26, r30
    1276:	1d 92       	st	X+, r1
    1278:	8a 95       	dec	r24
    127a:	e9 f7       	brne	.-6      	; 0x1276 <App_update+0x3e>
			uint8_t au8_tempMaxAmount[8]={0};
    127c:	38 97       	sbiw	r30, 0x08	; 8
    127e:	88 e0       	ldi	r24, 0x08	; 8
    1280:	df 01       	movw	r26, r30
    1282:	1d 92       	st	X+, r1
    1284:	8a 95       	dec	r24
    1286:	e9 f7       	brne	.-6      	; 0x1282 <App_update+0x4a>
			enuApp_Status_t PIN_Status = 0;
			if(u8_passFlag == 0)
    1288:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <__data_end>
    128c:	81 11       	cpse	r24, r1
    128e:	0d c0       	rjmp	.+26     	; 0x12aa <App_update+0x72>
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				PIN_Status = AppADMIN_getAtmPIN(au8_tempPinNum);
    1290:	ce 01       	movw	r24, r28
    1292:	43 96       	adiw	r24, 0x13	; 19
    1294:	0e 94 cd 08 	call	0x119a	; 0x119a <AppADMIN_getAtmPIN>
				if(PIN_Status == APP_STATUS_PIN_NOT_CORRECT)
    1298:	89 30       	cpi	r24, 0x09	; 9
    129a:	09 f4       	brne	.+2      	; 0x129e <App_update+0x66>
    129c:	67 c0       	rjmp	.+206    	; 0x136c <App_update+0x134>
					return APP_STATUS_ERROR_OK;
				else if(PIN_Status != APP_STATUS_PIN_CORRECT)
    129e:	88 30       	cpi	r24, 0x08	; 8
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <App_update+0x6c>
    12a2:	66 c0       	rjmp	.+204    	; 0x1370 <App_update+0x138>
					return APP_STATUS_ERROR_NOK;
				u8_passFlag = 1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <__data_end>
			}
			
			Terminal_Out((uint8_t*)"\n1.Add New Customer\n\r2.Update Existing Customer\n\r3.Update Max Amount\n\r4.Exit\r");
    12aa:	8f e5       	ldi	r24, 0x5F	; 95
    12ac:	94 e0       	ldi	r25, 0x04	; 4
    12ae:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
			
			AppADMIN_getInput(au8_Input);
    12b2:	ce 01       	movw	r24, r28
    12b4:	48 96       	adiw	r24, 0x18	; 24
    12b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <AppADMIN_getInput>
			if(au8_Input[0] == '1')//--------- New Customer OPTION -----------//
    12ba:	88 8d       	ldd	r24, Y+24	; 0x18
    12bc:	81 33       	cpi	r24, 0x31	; 49
    12be:	39 f4       	brne	.+14     	; 0x12ce <App_update+0x96>
			{
				AppADMIN_processNewCustomer();
    12c0:	0e 94 d7 06 	call	0xdae	; 0xdae <AppADMIN_processNewCustomer>
				EmptyString(au8_Input);
    12c4:	ce 01       	movw	r24, r28
    12c6:	48 96       	adiw	r24, 0x18	; 24
    12c8:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
    12cc:	d0 c0       	rjmp	.+416    	; 0x146e <App_update+0x236>

			}else if(au8_Input[0] == '2')//--------- Update Existing Customer OPTION -----------//
    12ce:	82 33       	cpi	r24, 0x32	; 50
    12d0:	39 f4       	brne	.+14     	; 0x12e0 <App_update+0xa8>
			{
				AppADMIN_processExistingCustomer();
    12d2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <AppADMIN_processExistingCustomer>
				EmptyString(au8_Input);
    12d6:	ce 01       	movw	r24, r28
    12d8:	48 96       	adiw	r24, 0x18	; 24
    12da:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
    12de:	c7 c0       	rjmp	.+398    	; 0x146e <App_update+0x236>
			}else if(au8_Input[0] == '3')//--------- Max Amount OPTION -----------//
    12e0:	83 33       	cpi	r24, 0x33	; 51
    12e2:	d1 f4       	brne	.+52     	; 0x1318 <App_update+0xe0>
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
    12e4:	ce 01       	movw	r24, r28
    12e6:	0b 96       	adiw	r24, 0x0b	; 11
    12e8:	0e 94 0f 06 	call	0xc1e	; 0xc1e <AppADMIN_getnewMaxAmount>
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
    12ec:	ce 01       	movw	r24, r28
    12ee:	0b 96       	adiw	r24, 0x0b	; 11
    12f0:	0e 94 40 1a 	call	0x3480	; 0x3480 <stringLength>
    12f4:	48 2f       	mov	r20, r24
    12f6:	50 e0       	ldi	r21, 0x00	; 0
    12f8:	be 01       	movw	r22, r28
    12fa:	65 5f       	subi	r22, 0xF5	; 245
    12fc:	7f 4f       	sbci	r23, 0xFF	; 255
    12fe:	83 e0       	ldi	r24, 0x03	; 3
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 35 0c 	call	0x186a	; 0x186a <Eeprom_24_writePacket>
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	a9 f5       	brne	.+106    	; 0x1374 <App_update+0x13c>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempMaxAmount, gau8_maxAmount);	
    130a:	6c e7       	ldi	r22, 0x7C	; 124
    130c:	75 e0       	ldi	r23, 0x05	; 5
    130e:	ce 01       	movw	r24, r28
    1310:	0b 96       	adiw	r24, 0x0b	; 11
    1312:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stringCopy>
    1316:	ab c0       	rjmp	.+342    	; 0x146e <App_update+0x236>
			}else if(au8_Input[0] == '4')//--------- EXIT OPTION -----------//
    1318:	84 33       	cpi	r24, 0x34	; 52
    131a:	09 f5       	brne	.+66     	; 0x135e <App_update+0x126>
			{
				if(gu8_initData == ATM_DB_FLAG_SET_VAL)
    131c:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <gu8_initData>
    1320:	8a 3a       	cpi	r24, 0xAA	; 170
    1322:	a9 f4       	brne	.+42     	; 0x134e <App_update+0x116>
				{
					u8_passFlag = 0;
    1324:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <__data_end>
					gu8_ATMMode = ATM_MODE_USER;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <gu8_ATMMode>
					Lcd_clear();
    132e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Lcd_clear>
					if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
    1332:	85 ea       	ldi	r24, 0xA5	; 165
    1334:	92 e0       	ldi	r25, 0x02	; 2
    1336:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	e9 f4       	brne	.+58     	; 0x1378 <App_update+0x140>
						return APP_STATUS_ERROR_NOK;
					
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
    133e:	65 e8       	ldi	r22, 0x85	; 133
    1340:	71 e0       	ldi	r23, 0x01	; 1
    1342:	84 e9       	ldi	r24, 0x94	; 148
    1344:	91 e0       	ldi	r25, 0x01	; 1
    1346:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
					
					return APP_STATUS_ERROR_OK;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	9d c0       	rjmp	.+314    	; 0x1488 <App_update+0x250>
				}else
				{
					if(Terminal_Out((uint8_t*)"\nData Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
    134e:	8d ea       	ldi	r24, 0xAD	; 173
    1350:	94 e0       	ldi	r25, 0x04	; 4
    1352:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	89 f0       	breq	.+34     	; 0x137c <App_update+0x144>
						return APP_STATUS_ERROR_NOK;
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	95 c0       	rjmp	.+298    	; 0x1488 <App_update+0x250>
					return APP_STATUS_ERROR_OK;
				}
			}else
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Input!") != TERMINAL_STATUS_ERROR_OK)
    135e:	8b ee       	ldi	r24, 0xEB	; 235
    1360:	94 e0       	ldi	r25, 0x04	; 4
    1362:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	59 f4       	brne	.+22     	; 0x1380 <App_update+0x148>
    136a:	81 c0       	rjmp	.+258    	; 0x146e <App_update+0x236>
			if(u8_passFlag == 0)
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				PIN_Status = AppADMIN_getAtmPIN(au8_tempPinNum);
				if(PIN_Status == APP_STATUS_PIN_NOT_CORRECT)
					return APP_STATUS_ERROR_OK;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	8c c0       	rjmp	.+280    	; 0x1488 <App_update+0x250>
				else if(PIN_Status != APP_STATUS_PIN_CORRECT)
					return APP_STATUS_ERROR_NOK;
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	8a c0       	rjmp	.+276    	; 0x1488 <App_update+0x250>
				EmptyString(au8_Input);
			}else if(au8_Input[0] == '3')//--------- Max Amount OPTION -----------//
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	88 c0       	rjmp	.+272    	; 0x1488 <App_update+0x250>
				{
					u8_passFlag = 0;
					gu8_ATMMode = ATM_MODE_USER;
					Lcd_clear();
					if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	86 c0       	rjmp	.+268    	; 0x1488 <App_update+0x250>
					return APP_STATUS_ERROR_OK;
				}else
				{
					if(Terminal_Out((uint8_t*)"\nData Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					return APP_STATUS_ERROR_OK;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	84 c0       	rjmp	.+264    	; 0x1488 <App_update+0x250>
				}
			}else
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Input!") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	82 c0       	rjmp	.+260    	; 0x1488 <App_update+0x250>
	{							/************* User Mode **************/
		/********************************************************************************************/
		/************************************ ADMIN ENTERED ****************************************/
		/********************************************************************************************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
    1384:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <gu8_ADMIN_Request>
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	31 f4       	brne	.+12     	; 0x1398 <App_update+0x160>
    138c:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <gu8_USER_Mode_State>
    1390:	81 11       	cpse	r24, r1
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <App_update+0x160>
			{
				gu8_ATMMode = ATM_MODE_ADMIN;
    1394:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <gu8_ATMMode>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
    1398:	ce 01       	movw	r24, r28
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	31 f5       	brne	.+76     	; 0x13f0 <App_update+0x1b8>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
    13a4:	6d e5       	ldi	r22, 0x5D	; 93
    13a6:	75 e0       	ldi	r23, 0x05	; 5
    13a8:	ce 01       	movw	r24, r28
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	0e 94 4c 1a 	call	0x3498	; 0x3498 <stringCompare>
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	11 f5       	brne	.+68     	; 0x13f8 <App_update+0x1c0>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
    13b4:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <gu8_USER_Mode_State>
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	51 f4       	brne	.+20     	; 0x13d0 <App_update+0x198>
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
    13bc:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <gu8_ADMIN_Request>
						if(Terminal_Out((uint8_t*)"\nATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
    13c0:	8b ef       	ldi	r24, 0xFB	; 251
    13c2:	94 e0       	ldi	r25, 0x04	; 4
    13c4:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	09 f0       	breq	.+2      	; 0x13ce <App_update+0x196>
    13cc:	4a c0       	rjmp	.+148    	; 0x1462 <App_update+0x22a>
    13ce:	14 c0       	rjmp	.+40     	; 0x13f8 <App_update+0x1c0>
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The ATM is not used by User */
					{
						gu8_ATMMode = ATM_MODE_ADMIN;
    13d0:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <gu8_ATMMode>
						
						Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
    13d4:	60 e7       	ldi	r22, 0x70	; 112
    13d6:	72 e0       	ldi	r23, 0x02	; 2
    13d8:	81 e8       	ldi	r24, 0x81	; 129
    13da:	92 e0       	ldi	r25, 0x02	; 2
    13dc:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
						
						if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
    13e0:	82 e9       	ldi	r24, 0x92	; 146
    13e2:	92 e0       	ldi	r25, 0x02	; 2
    13e4:	0e 94 76 11 	call	0x22ec	; 0x22ec <Terminal_Out>
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	e9 f1       	breq	.+122    	; 0x1466 <App_update+0x22e>
							return APP_STATUS_ERROR_NOK;
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	4c c0       	rjmp	.+152    	; 0x1488 <App_update+0x250>
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	11 f0       	breq	.+4      	; 0x13f8 <App_update+0x1c0>
    13f4:	86 30       	cpi	r24, 0x06	; 6
    13f6:	c9 f5       	brne	.+114    	; 0x146a <App_update+0x232>
				return APP_STATUS_ERROR_NOK;
			/****************************************************************/
			/********************** Getting Input from User ************************/
			uint8_t au8_data=0;
    13f8:	1b 8a       	std	Y+19, r1	; 0x13
			enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&au8_data);
    13fa:	ce 01       	movw	r24, r28
    13fc:	43 96       	adiw	r24, 0x13	; 19
    13fe:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <Keypad_readKey>
			if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
    1402:	86 30       	cpi	r24, 0x06	; 6
    1404:	b1 f4       	brne	.+44     	; 0x1432 <App_update+0x1fa>
			{
			/************************************ KEYPAD PRESSED ****************************************/
			/********* Insert Card Chosen ********/
				if(au8_data == '1') 
    1406:	8b 89       	ldd	r24, Y+19	; 0x13
    1408:	81 33       	cpi	r24, 0x31	; 49
    140a:	19 f4       	brne	.+6      	; 0x1412 <App_update+0x1da>
				{
					AppUSER_insertCard();
    140c:	0e 94 34 04 	call	0x868	; 0x868 <AppUSER_insertCard>
    1410:	2e c0       	rjmp	.+92     	; 0x146e <App_update+0x236>
			/******* Display Temp Chosen *******/
				}else if(au8_data == '2')
    1412:	82 33       	cpi	r24, 0x32	; 50
    1414:	19 f4       	brne	.+6      	; 0x141c <App_update+0x1e4>
				{
					AppUSER_displayTemp();
    1416:	0e 94 9d 00 	call	0x13a	; 0x13a <AppUSER_displayTemp>
    141a:	29 c0       	rjmp	.+82     	; 0x146e <App_update+0x236>
				}else if(au8_data == '-') 
    141c:	8d 32       	cpi	r24, 0x2D	; 45
    141e:	39 f5       	brne	.+78     	; 0x146e <App_update+0x236>
				{
					gu8_displayFlag = 0;
    1420:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <gu8_displayFlag>
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
    1424:	65 e8       	ldi	r22, 0x85	; 133
    1426:	71 e0       	ldi	r23, 0x01	; 1
    1428:	84 e9       	ldi	r24, 0x94	; 148
    142a:	91 e0       	ldi	r25, 0x01	; 1
    142c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Lcd_printLCD>
    1430:	1e c0       	rjmp	.+60     	; 0x146e <App_update+0x236>
				}
			}else if(gu8_displayFlag == DISPLAY_TEMP) /* If in temperature screen >> Update the temp value */
    1432:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <gu8_displayFlag>
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	d1 f4       	brne	.+52     	; 0x146e <App_update+0x236>
			{
				uint8_t u8_currentTemp=0;
    143a:	1b 86       	std	Y+11, r1	; 0x0b
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
    143c:	ce 01       	movw	r24, r28
    143e:	0b 96       	adiw	r24, 0x0b	; 11
    1440:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LM35_readTemp>
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	99 f4       	brne	.+38     	; 0x146e <App_update+0x236>
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Lcd_setCursor>
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	31 f4       	brne	.+12     	; 0x145e <App_update+0x226>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
    1452:	8b 85       	ldd	r24, Y+11	; 0x0b
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <Lcd_printDecimal>
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	41 f0       	breq	.+16     	; 0x146e <App_update+0x236>
			{
				uint8_t u8_currentTemp=0;
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	13 c0       	rjmp	.+38     	; 0x1488 <App_update+0x250>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"\nATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	11 c0       	rjmp	.+34     	; 0x1488 <App_update+0x250>
						
						Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
						
						if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
						return APP_STATUS_ERROR_OK;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	0f c0       	rjmp	.+30     	; 0x1488 <App_update+0x250>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	0d c0       	rjmp	.+26     	; 0x1488 <App_update+0x250>
					return APP_STATUS_ERROR_NOK;
				}
			}
	/****************************************************************/
	}
	Delay_ms(100);
    146e:	24 e6       	ldi	r18, 0x64	; 100
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
	return APP_STATUS_ERROR_OK;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <App_update+0x250>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
    1486:	85 e0       	ldi	r24, 0x05	; 5
			}
	/****************************************************************/
	}
	Delay_ms(100);
	return APP_STATUS_ERROR_OK;
}
    1488:	69 96       	adiw	r28, 0x19	; 25
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
    149a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <App_init>
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	39 f4       	brne	.+14     	; 0x14b0 <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
    14a2:	8f b7       	in	r24, 0x3f	; 63
    14a4:	80 68       	ori	r24, 0x80	; 128
    14a6:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
    14a8:	0e 94 1c 09 	call	0x1238	; 0x1238 <App_update>
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	e1 f3       	breq	.-8      	; 0x14a8 <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
	}
}
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	08 95       	ret

000014b4 <Button_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button module is already initialized */
	if (genu_BttnModuleState == BTTN_STATUS_INIT)
    14b4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <genu_BttnModuleState>
    14b8:	85 30       	cpi	r24, 0x05	; 5
    14ba:	71 f0       	breq	.+28     	; 0x14d8 <Button_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    14bc:	82 e9       	ldi	r24, 0x92	; 146
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 15 13 	call	0x262a	; 0x262a <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	11 f0       	breq	.+4      	; 0x14cc <Button_init+0x18>
    14c8:	87 30       	cpi	r24, 0x07	; 7
    14ca:	29 f4       	brne	.+10     	; 0x14d6 <Button_init+0x22>
		return BTTN_STATUS_ERROR_NOK;
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
    14cc:	85 e0       	ldi	r24, 0x05	; 5
    14ce:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <genu_BttnModuleState>
	return BTTN_STATUS_ERROR_OK;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return BTTN_STATUS_ERROR_NOK;
    14d6:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
	return BTTN_STATUS_ERROR_OK;
}
    14d8:	08 95       	ret

000014da <Button_getState>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
    14da:	82 30       	cpi	r24, 0x02	; 2
    14dc:	60 f4       	brcc	.+24     	; 0x14f6 <Button_getState+0x1c>
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
    14de:	61 15       	cp	r22, r1
    14e0:	71 05       	cpc	r23, r1
    14e2:	59 f0       	breq	.+22     	; 0x14fa <Button_getState+0x20>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
    14e4:	e8 2f       	mov	r30, r24
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	e7 54       	subi	r30, 0x47	; 71
    14ea:	fa 4f       	sbci	r31, 0xFA	; 250
    14ec:	80 81       	ld	r24, Z
    14ee:	fb 01       	movw	r30, r22
    14f0:	80 83       	st	Z, r24
	return BTTN_STATUS_ERROR_OK;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
    14f6:	82 e0       	ldi	r24, 0x02	; 2
    14f8:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
	{
		return BTTN_STATUS_ERROR_NULL;
    14fa:	83 e0       	ldi	r24, 0x03	; 3
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
	return BTTN_STATUS_ERROR_OK;
}
    14fc:	08 95       	ret

000014fe <Button_updateState>:
* Parameters (out): None
* Return value: enuBttn_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to update the state of the button (Pressed or Released) by reading the Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuBttn_Status_t Button_updateState(uint8_t u8_bttnID)
{
    14fe:	0f 93       	push	r16
    1500:	1f 93       	push	r17
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	1f 92       	push	r1
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
    150c:	82 30       	cpi	r24, 0x02	; 2
    150e:	08 f0       	brcs	.+2      	; 0x1512 <Button_updateState+0x14>
    1510:	58 c0       	rjmp	.+176    	; 0x15c2 <Button_updateState+0xc4>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
    1512:	19 82       	std	Y+1, r1	; 0x01
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
    1514:	08 2f       	mov	r16, r24
    1516:	10 e0       	ldi	r17, 0x00	; 0
    1518:	f8 01       	movw	r30, r16
    151a:	e0 59       	subi	r30, 0x90	; 144
    151c:	ff 4f       	sbci	r31, 0xFF	; 255
    151e:	be 01       	movw	r22, r28
    1520:	6f 5f       	subi	r22, 0xFF	; 255
    1522:	7f 4f       	sbci	r23, 0xFF	; 255
    1524:	80 81       	ld	r24, Z
    1526:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <Dio_readPin>
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	09 f0       	breq	.+2      	; 0x1530 <Button_updateState+0x32>
    152e:	4b c0       	rjmp	.+150    	; 0x15c6 <Button_updateState+0xc8>
		return BTTN_STATUS_ERROR_NOK;
	if(u8_valueTemp == PIN_HIGH)
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	09 f5       	brne	.+66     	; 0x1578 <Button_updateState+0x7a>
    1536:	04 c0       	rjmp	.+8      	; 0x1540 <Button_updateState+0x42>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    1538:	01 96       	adiw	r24, 0x01	; 1
    153a:	a1 1d       	adc	r26, r1
    153c:	b1 1d       	adc	r27, r1
    153e:	03 c0       	rjmp	.+6      	; 0x1546 <Button_updateState+0x48>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	dc 01       	movw	r26, r24
    1546:	88 3b       	cpi	r24, 0xB8	; 184
    1548:	2b e0       	ldi	r18, 0x0B	; 11
    154a:	92 07       	cpc	r25, r18
    154c:	a1 05       	cpc	r26, r1
    154e:	b1 05       	cpc	r27, r1
    1550:	98 f3       	brcs	.-26     	; 0x1538 <Button_updateState+0x3a>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    1552:	be 01       	movw	r22, r28
    1554:	6f 5f       	subi	r22, 0xFF	; 255
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	f8 01       	movw	r30, r16
    155a:	e0 59       	subi	r30, 0x90	; 144
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	80 81       	ld	r24, Z
    1560:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <Dio_readPin>
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	89 f5       	brne	.+98     	; 0x15ca <Button_updateState+0xcc>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_HIGH)
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	81 f5       	brne	.+96     	; 0x15ce <Button_updateState+0xd0>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
    156e:	f8 01       	movw	r30, r16
    1570:	e7 54       	subi	r30, 0x47	; 71
    1572:	fa 4f       	sbci	r31, 0xFA	; 250
    1574:	80 83       	st	Z, r24
    1576:	30 c0       	rjmp	.+96     	; 0x15d8 <Button_updateState+0xda>
	}else if (u8_valueTemp == PIN_LOW)
    1578:	88 23       	and	r24, r24
    157a:	31 f0       	breq	.+12     	; 0x1588 <Button_updateState+0x8a>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	2c c0       	rjmp	.+88     	; 0x15d8 <Button_updateState+0xda>
		if(u8_valueTemp == PIN_HIGH)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
	}else if (u8_valueTemp == PIN_LOW)
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	a1 1d       	adc	r26, r1
    1584:	b1 1d       	adc	r27, r1
    1586:	03 c0       	rjmp	.+6      	; 0x158e <Button_updateState+0x90>
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	dc 01       	movw	r26, r24
    158e:	88 3b       	cpi	r24, 0xB8	; 184
    1590:	2b e0       	ldi	r18, 0x0B	; 11
    1592:	92 07       	cpc	r25, r18
    1594:	a1 05       	cpc	r26, r1
    1596:	b1 05       	cpc	r27, r1
    1598:	98 f3       	brcs	.-26     	; 0x1580 <Button_updateState+0x82>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    159a:	be 01       	movw	r22, r28
    159c:	6f 5f       	subi	r22, 0xFF	; 255
    159e:	7f 4f       	sbci	r23, 0xFF	; 255
    15a0:	f8 01       	movw	r30, r16
    15a2:	e0 59       	subi	r30, 0x90	; 144
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	80 81       	ld	r24, Z
    15a8:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <Dio_readPin>
    15ac:	81 30       	cpi	r24, 0x01	; 1
    15ae:	89 f4       	brne	.+34     	; 0x15d2 <Button_updateState+0xd4>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	81 11       	cpse	r24, r1
    15b4:	10 c0       	rjmp	.+32     	; 0x15d6 <Button_updateState+0xd8>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
    15b6:	f8 01       	movw	r30, r16
    15b8:	e7 54       	subi	r30, 0x47	; 71
    15ba:	fa 4f       	sbci	r31, 0xFA	; 250
    15bc:	10 82       	st	Z, r1
	}
	return BTTN_STATUS_ERROR_OK;
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	0b c0       	rjmp	.+22     	; 0x15d8 <Button_updateState+0xda>
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
		return BTTN_STATUS_ERROR_ID_INVALID;
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	09 c0       	rjmp	.+18     	; 0x15d8 <Button_updateState+0xda>
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
		return BTTN_STATUS_ERROR_NOK;
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	07 c0       	rjmp	.+14     	; 0x15d8 <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	05 c0       	rjmp	.+10     	; 0x15d8 <Button_updateState+0xda>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	03 c0       	rjmp	.+6      	; 0x15d8 <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	01 c0       	rjmp	.+2      	; 0x15d8 <Button_updateState+0xda>
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
}
    15d8:	0f 90       	pop	r0
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	08 95       	ret

000015e4 <EEPROM_getAddresses>:
{
#if EEPROM_24_MODEL	== AT24C16B
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
	*pu8_wordAddress = u16_location & 0xFF;
#elif EEPROM_24_MODEL == AT24C256B
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS;
    15e4:	20 e5       	ldi	r18, 0x50	; 80
    15e6:	fc 01       	movw	r30, r24
    15e8:	20 83       	st	Z, r18
	pu8_wordAddress[0] = (uint8_t)(u16_location >> 8);
    15ea:	fb 01       	movw	r30, r22
    15ec:	50 83       	st	Z, r21
	pu8_wordAddress[1] = (uint8_t)u16_location;
    15ee:	41 83       	std	Z+1, r20	; 0x01
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	08 95       	ret

000015f4 <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
    15f4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <genu_eepromModuleState>
    15f8:	83 30       	cpi	r24, 0x03	; 3
    15fa:	51 f0       	breq	.+20     	; 0x1610 <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
    15fc:	0e 94 21 18 	call	0x3042	; 0x3042 <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
    1600:	85 30       	cpi	r24, 0x05	; 5
    1602:	29 f0       	breq	.+10     	; 0x160e <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
    160e:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
    1610:	08 95       	ret

00001612 <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
    1612:	ff 92       	push	r15
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	00 d0       	rcall	.+0      	; 0x161e <Eeprom_24_writeByte+0xc>
    161e:	00 d0       	rcall	.+0      	; 0x1620 <Eeprom_24_writeByte+0xe>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	ac 01       	movw	r20, r24
    1626:	6c 83       	std	Y+4, r22	; 0x04
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1628:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <genu_eepromModuleState>
    162c:	93 30       	cpi	r25, 0x03	; 3
    162e:	41 f5       	brne	.+80     	; 0x1680 <Eeprom_24_writeByte+0x6e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    1630:	19 82       	std	Y+1, r1	; 0x01
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#elif EEPROM_24_MODEL == AT24C256B
 	uint8_t u8_wordAddr[2]= {0};
    1632:	1b 82       	std	Y+3, r1	; 0x03
    1634:	1a 82       	std	Y+2, r1	; 0x02
 	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    1636:	be 01       	movw	r22, r28
    1638:	6e 5f       	subi	r22, 0xFE	; 254
    163a:	7f 4f       	sbci	r23, 0xFF	; 255
    163c:	ce 01       	movw	r24, r28
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <EEPROM_getAddresses>
    1644:	f8 2e       	mov	r15, r24
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	f8 12       	cpse	r15, r24
    164a:	1e c0       	rjmp	.+60     	; 0x1688 <Eeprom_24_writeByte+0x76>
		return EEPROM_24_STATUS_ERROR_NOK;
 
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    164c:	01 e0       	ldi	r16, 0x01	; 1
    164e:	10 e0       	ldi	r17, 0x00	; 0
    1650:	9e 01       	movw	r18, r28
    1652:	2c 5f       	subi	r18, 0xFC	; 252
    1654:	3f 4f       	sbci	r19, 0xFF	; 255
    1656:	42 e0       	ldi	r20, 0x02	; 2
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	be 01       	movw	r22, r28
    165c:	6e 5f       	subi	r22, 0xFE	; 254
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	0e 94 df 18 	call	0x31be	; 0x31be <I2C_MasterSendGeneral>
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	89 f4       	brne	.+34     	; 0x168c <Eeprom_24_writeByte+0x7a>
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
    166a:	2f e0       	ldi	r18, 0x0F	; 15
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    167e:	07 c0       	rjmp	.+14     	; 0x168e <Eeprom_24_writeByte+0x7c>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1680:	68 94       	set
    1682:	ff 24       	eor	r15, r15
    1684:	f1 f8       	bld	r15, 1
    1686:	03 c0       	rjmp	.+6      	; 0x168e <Eeprom_24_writeByte+0x7c>
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#elif EEPROM_24_MODEL == AT24C256B
 	uint8_t u8_wordAddr[2]= {0};
 	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1688:	f1 2c       	mov	r15, r1
    168a:	01 c0       	rjmp	.+2      	; 0x168e <Eeprom_24_writeByte+0x7c>
 
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    168c:	f1 2c       	mov	r15, r1

#endif
	Delay_ms(15);
	return EEPROM_24_STATUS_ERROR_OK;
}
    168e:	8f 2d       	mov	r24, r15
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	ff 90       	pop	r15
    16a2:	08 95       	ret

000016a4 <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
    16a4:	cf 92       	push	r12
    16a6:	df 92       	push	r13
    16a8:	ff 92       	push	r15
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <Eeprom_24_readByte+0x10>
    16b4:	1f 92       	push	r1
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    16bc:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <genu_eepromModuleState>
    16c0:	93 30       	cpi	r25, 0x03	; 3
    16c2:	51 f5       	brne	.+84     	; 0x1718 <Eeprom_24_readByte+0x74>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    16c4:	61 15       	cp	r22, r1
    16c6:	71 05       	cpc	r23, r1
    16c8:	59 f1       	breq	.+86     	; 0x1720 <Eeprom_24_readByte+0x7c>
    16ca:	6b 01       	movw	r12, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    16cc:	19 82       	std	Y+1, r1	; 0x01
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]= {0};
    16ce:	1b 82       	std	Y+3, r1	; 0x03
    16d0:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    16d2:	be 01       	movw	r22, r28
    16d4:	6e 5f       	subi	r22, 0xFE	; 254
    16d6:	7f 4f       	sbci	r23, 0xFF	; 255
    16d8:	ce 01       	movw	r24, r28
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <EEPROM_getAddresses>
    16e0:	f8 2e       	mov	r15, r24
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	f8 12       	cpse	r15, r24
    16e6:	20 c0       	rjmp	.+64     	; 0x1728 <Eeprom_24_readByte+0x84>
		return EEPROM_24_STATUS_ERROR_NOK;

	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    16e8:	01 e0       	ldi	r16, 0x01	; 1
    16ea:	10 e0       	ldi	r17, 0x00	; 0
    16ec:	96 01       	movw	r18, r12
    16ee:	42 e0       	ldi	r20, 0x02	; 2
    16f0:	50 e0       	ldi	r21, 0x00	; 0
    16f2:	be 01       	movw	r22, r28
    16f4:	6e 5f       	subi	r22, 0xFE	; 254
    16f6:	7f 4f       	sbci	r23, 0xFF	; 255
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	0e 94 42 19 	call	0x3284	; 0x3284 <I2C_MasterReceiveGeneral>
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	a9 f4       	brne	.+42     	; 0x172c <Eeprom_24_readByte+0x88>
		return EEPROM_24_STATUS_ERROR_NOK;
	
#endif
	Delay_ms(5);
    1702:	25 e0       	ldi	r18, 0x05	; 5
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	50 e0       	ldi	r21, 0x00	; 0
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    1716:	0b c0       	rjmp	.+22     	; 0x172e <Eeprom_24_readByte+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1718:	68 94       	set
    171a:	ff 24       	eor	r15, r15
    171c:	f1 f8       	bld	r15, 1
    171e:	07 c0       	rjmp	.+14     	; 0x172e <Eeprom_24_readByte+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1720:	68 94       	set
    1722:	ff 24       	eor	r15, r15
    1724:	f2 f8       	bld	r15, 2
    1726:	03 c0       	rjmp	.+6      	; 0x172e <Eeprom_24_readByte+0x8a>
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]= {0};
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1728:	f1 2c       	mov	r15, r1
    172a:	01 c0       	rjmp	.+2      	; 0x172e <Eeprom_24_readByte+0x8a>

	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    172c:	f1 2c       	mov	r15, r1
	
#endif
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
    172e:	8f 2d       	mov	r24, r15
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	df 90       	pop	r13
    1742:	cf 90       	pop	r12
    1744:	08 95       	ret

00001746 <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
    1746:	cf 92       	push	r12
    1748:	df 92       	push	r13
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	00 d0       	rcall	.+0      	; 0x1756 <Eeprom_24_writePage+0x10>
    1756:	1f 92       	push	r1
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    175c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <genu_eepromModuleState>
    1760:	93 30       	cpi	r25, 0x03	; 3
    1762:	29 f5       	brne	.+74     	; 0x17ae <Eeprom_24_writePage+0x68>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1764:	61 15       	cp	r22, r1
    1766:	71 05       	cpc	r23, r1
    1768:	31 f1       	breq	.+76     	; 0x17b6 <Eeprom_24_writePage+0x70>
    176a:	6b 01       	movw	r12, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
    176c:	90 e4       	ldi	r25, 0x40	; 64
    176e:	89 9f       	mul	r24, r25
    1770:	a0 01       	movw	r20, r0
    1772:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    1774:	19 82       	std	Y+1, r1	; 0x01
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]={0};
    1776:	1b 82       	std	Y+3, r1	; 0x03
    1778:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    177a:	be 01       	movw	r22, r28
    177c:	6e 5f       	subi	r22, 0xFE	; 254
    177e:	7f 4f       	sbci	r23, 0xFF	; 255
    1780:	ce 01       	movw	r24, r28
    1782:	01 96       	adiw	r24, 0x01	; 1
    1784:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <EEPROM_getAddresses>
    1788:	f8 2e       	mov	r15, r24
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	f8 12       	cpse	r15, r24
    178e:	17 c0       	rjmp	.+46     	; 0x17be <Eeprom_24_writePage+0x78>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    1790:	00 e4       	ldi	r16, 0x40	; 64
    1792:	10 e0       	ldi	r17, 0x00	; 0
    1794:	96 01       	movw	r18, r12
    1796:	42 e0       	ldi	r20, 0x02	; 2
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	be 01       	movw	r22, r28
    179c:	6e 5f       	subi	r22, 0xFE	; 254
    179e:	7f 4f       	sbci	r23, 0xFF	; 255
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	0e 94 df 18 	call	0x31be	; 0x31be <I2C_MasterSendGeneral>
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	59 f0       	breq	.+22     	; 0x17c0 <Eeprom_24_writePage+0x7a>
		return EEPROM_24_STATUS_ERROR_NOK;
    17aa:	f1 2c       	mov	r15, r1
    17ac:	09 c0       	rjmp	.+18     	; 0x17c0 <Eeprom_24_writePage+0x7a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    17ae:	68 94       	set
    17b0:	ff 24       	eor	r15, r15
    17b2:	f1 f8       	bld	r15, 1
    17b4:	05 c0       	rjmp	.+10     	; 0x17c0 <Eeprom_24_writePage+0x7a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    17b6:	68 94       	set
    17b8:	ff 24       	eor	r15, r15
    17ba:	f2 f8       	bld	r15, 2
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <Eeprom_24_writePage+0x7a>
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]={0};
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    17be:	f1 2c       	mov	r15, r1
	
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    17c0:	8f 2d       	mov	r24, r15
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	ff 90       	pop	r15
    17d2:	df 90       	pop	r13
    17d4:	cf 90       	pop	r12
    17d6:	08 95       	ret

000017d8 <Eeprom_24_readPage>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory page.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read data inside a specific page in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPage(uint8_t u8_page, uint8_t *pu8_data)
{
    17d8:	cf 92       	push	r12
    17da:	df 92       	push	r13
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <Eeprom_24_readPage+0x10>
    17e8:	1f 92       	push	r1
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    17ee:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <genu_eepromModuleState>
    17f2:	93 30       	cpi	r25, 0x03	; 3
    17f4:	29 f5       	brne	.+74     	; 0x1840 <Eeprom_24_readPage+0x68>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    17f6:	61 15       	cp	r22, r1
    17f8:	71 05       	cpc	r23, r1
    17fa:	31 f1       	breq	.+76     	; 0x1848 <Eeprom_24_readPage+0x70>
    17fc:	6b 01       	movw	r12, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
    17fe:	90 e4       	ldi	r25, 0x40	; 64
    1800:	89 9f       	mul	r24, r25
    1802:	a0 01       	movw	r20, r0
    1804:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    1806:	19 82       	std	Y+1, r1	; 0x01
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]={0};
    1808:	1b 82       	std	Y+3, r1	; 0x03
    180a:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    180c:	be 01       	movw	r22, r28
    180e:	6e 5f       	subi	r22, 0xFE	; 254
    1810:	7f 4f       	sbci	r23, 0xFF	; 255
    1812:	ce 01       	movw	r24, r28
    1814:	01 96       	adiw	r24, 0x01	; 1
    1816:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <EEPROM_getAddresses>
    181a:	f8 2e       	mov	r15, r24
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	f8 12       	cpse	r15, r24
    1820:	17 c0       	rjmp	.+46     	; 0x1850 <Eeprom_24_readPage+0x78>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    1822:	00 e4       	ldi	r16, 0x40	; 64
    1824:	10 e0       	ldi	r17, 0x00	; 0
    1826:	96 01       	movw	r18, r12
    1828:	42 e0       	ldi	r20, 0x02	; 2
    182a:	50 e0       	ldi	r21, 0x00	; 0
    182c:	be 01       	movw	r22, r28
    182e:	6e 5f       	subi	r22, 0xFE	; 254
    1830:	7f 4f       	sbci	r23, 0xFF	; 255
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	0e 94 42 19 	call	0x3284	; 0x3284 <I2C_MasterReceiveGeneral>
    1838:	81 30       	cpi	r24, 0x01	; 1
    183a:	59 f0       	breq	.+22     	; 0x1852 <Eeprom_24_readPage+0x7a>
		return EEPROM_24_STATUS_ERROR_NOK;
    183c:	f1 2c       	mov	r15, r1
    183e:	09 c0       	rjmp	.+18     	; 0x1852 <Eeprom_24_readPage+0x7a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1840:	68 94       	set
    1842:	ff 24       	eor	r15, r15
    1844:	f1 f8       	bld	r15, 1
    1846:	05 c0       	rjmp	.+10     	; 0x1852 <Eeprom_24_readPage+0x7a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1848:	68 94       	set
    184a:	ff 24       	eor	r15, r15
    184c:	f2 f8       	bld	r15, 2
    184e:	01 c0       	rjmp	.+2      	; 0x1852 <Eeprom_24_readPage+0x7a>
		return EEPROM_24_STATUS_ERROR_NOK;

#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]={0};
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1850:	f1 2c       	mov	r15, r1
	
	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    1852:	8f 2d       	mov	r24, r15
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	ff 90       	pop	r15
    1864:	df 90       	pop	r13
    1866:	cf 90       	pop	r12
    1868:	08 95       	ret

0000186a <Eeprom_24_writePacket>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Multiple data bytes to a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    186a:	6f 92       	push	r6
    186c:	7f 92       	push	r7
    186e:	8f 92       	push	r8
    1870:	9f 92       	push	r9
    1872:	af 92       	push	r10
    1874:	bf 92       	push	r11
    1876:	cf 92       	push	r12
    1878:	df 92       	push	r13
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	00 d0       	rcall	.+0      	; 0x1886 <Eeprom_24_writePacket+0x1c>
    1886:	1f 92       	push	r1
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	8c 01       	movw	r16, r24
    188e:	5b 01       	movw	r10, r22
    1890:	6a 01       	movw	r12, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1892:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <genu_eepromModuleState>
    1896:	83 30       	cpi	r24, 0x03	; 3
    1898:	09 f0       	breq	.+2      	; 0x189c <Eeprom_24_writePacket+0x32>
    189a:	bd c0       	rjmp	.+378    	; 0x1a16 <Eeprom_24_writePacket+0x1ac>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    189c:	67 2b       	or	r22, r23
    189e:	09 f4       	brne	.+2      	; 0x18a2 <Eeprom_24_writePacket+0x38>
    18a0:	be c0       	rjmp	.+380    	; 0x1a1e <Eeprom_24_writePacket+0x1b4>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    18a2:	19 82       	std	Y+1, r1	; 0x01
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
	}
	
#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]= {0};
    18a4:	1b 82       	std	Y+3, r1	; 0x03
    18a6:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    18a8:	a8 01       	movw	r20, r16
    18aa:	be 01       	movw	r22, r28
    18ac:	6e 5f       	subi	r22, 0xFE	; 254
    18ae:	7f 4f       	sbci	r23, 0xFF	; 255
    18b0:	ce 01       	movw	r24, r28
    18b2:	01 96       	adiw	r24, 0x01	; 1
    18b4:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <EEPROM_getAddresses>
    18b8:	f8 2e       	mov	r15, r24
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	f8 12       	cpse	r15, r24
    18be:	b3 c0       	rjmp	.+358    	; 0x1a26 <Eeprom_24_writePacket+0x1bc>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint16_t u16_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;
    18c0:	48 01       	movw	r8, r16
    18c2:	80 ec       	ldi	r24, 0xC0	; 192
    18c4:	88 22       	and	r8, r24
    18c6:	e8 94       	clt
    18c8:	97 f8       	bld	r9, 7
    18ca:	00 24       	eor	r0, r0
    18cc:	88 0c       	add	r8, r8
    18ce:	99 1c       	adc	r9, r9
    18d0:	00 1c       	adc	r0, r0
    18d2:	88 0c       	add	r8, r8
    18d4:	99 1c       	adc	r9, r9
    18d6:	00 1c       	adc	r0, r0
    18d8:	89 2c       	mov	r8, r9
    18da:	90 2c       	mov	r9, r0
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
    18dc:	0f 73       	andi	r16, 0x3F	; 63
	if(u8_byteOffset != 0)
    18de:	d1 f1       	breq	.+116    	; 0x1954 <Eeprom_24_writePacket+0xea>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    18e0:	80 e4       	ldi	r24, 0x40	; 64
    18e2:	68 2e       	mov	r6, r24
    18e4:	60 1a       	sub	r6, r16
		if (u16_dataLen < length)
    18e6:	71 2c       	mov	r7, r1
    18e8:	c6 14       	cp	r12, r6
    18ea:	d7 04       	cpc	r13, r7
    18ec:	c0 f4       	brcc	.+48     	; 0x191e <Eeprom_24_writePacket+0xb4>
		{
			if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
    18ee:	86 01       	movw	r16, r12
    18f0:	95 01       	movw	r18, r10
    18f2:	42 e0       	ldi	r20, 0x02	; 2
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	be 01       	movw	r22, r28
    18f8:	6e 5f       	subi	r22, 0xFE	; 254
    18fa:	7f 4f       	sbci	r23, 0xFF	; 255
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	0e 94 df 18 	call	0x31be	; 0x31be <I2C_MasterSendGeneral>
    1902:	81 30       	cpi	r24, 0x01	; 1
    1904:	09 f0       	breq	.+2      	; 0x1908 <Eeprom_24_writePacket+0x9e>
    1906:	91 c0       	rjmp	.+290    	; 0x1a2a <Eeprom_24_writePacket+0x1c0>
				return EEPROM_24_STATUS_ERROR_NOK;
			Delay_ms(15);
    1908:	2f e0       	ldi	r18, 0x0F	; 15
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	50 e0       	ldi	r21, 0x00	; 0
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
			return EEPROM_24_STATUS_ERROR_OK;
    191c:	8f c0       	rjmp	.+286    	; 0x1a3c <Eeprom_24_writePacket+0x1d2>
		}
		if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, length) != I2C_STATUS_ERROR_OK)
    191e:	83 01       	movw	r16, r6
    1920:	95 01       	movw	r18, r10
    1922:	42 e0       	ldi	r20, 0x02	; 2
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	be 01       	movw	r22, r28
    1928:	6e 5f       	subi	r22, 0xFE	; 254
    192a:	7f 4f       	sbci	r23, 0xFF	; 255
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	0e 94 df 18 	call	0x31be	; 0x31be <I2C_MasterSendGeneral>
    1932:	81 30       	cpi	r24, 0x01	; 1
    1934:	09 f0       	breq	.+2      	; 0x1938 <Eeprom_24_writePacket+0xce>
    1936:	7b c0       	rjmp	.+246    	; 0x1a2e <Eeprom_24_writePacket+0x1c4>
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    1938:	c6 18       	sub	r12, r6
    193a:	d7 08       	sbc	r13, r7
		i=1;
		Delay_ms(15);
    193c:	2f e0       	ldi	r18, 0x0F	; 15
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
		}
		if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
    1950:	01 e0       	ldi	r16, 0x01	; 1
    1952:	03 c0       	rjmp	.+6      	; 0x195a <Eeprom_24_writePacket+0xf0>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
    1954:	00 e0       	ldi	r16, 0x00	; 0

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
    1956:	61 2c       	mov	r6, r1
    1958:	71 2c       	mov	r7, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
    195a:	c6 01       	movw	r24, r12
    195c:	00 24       	eor	r0, r0
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	00 1c       	adc	r0, r0
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	00 1c       	adc	r0, r0
    196a:	89 2f       	mov	r24, r25
    196c:	90 2d       	mov	r25, r0
    196e:	18 2f       	mov	r17, r24
	while (pages_num > 0)
    1970:	1c c0       	rjmp	.+56     	; 0x19aa <Eeprom_24_writePacket+0x140>
	{
		pages_num--;
    1972:	11 50       	subi	r17, 0x01	; 1
		if(Eeprom_24_writePage(u16_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    1974:	b5 01       	movw	r22, r10
    1976:	66 0d       	add	r22, r6
    1978:	77 1d       	adc	r23, r7
    197a:	80 2f       	mov	r24, r16
    197c:	88 0d       	add	r24, r8
    197e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Eeprom_24_writePage>
    1982:	81 30       	cpi	r24, 0x01	; 1
    1984:	09 f0       	breq	.+2      	; 0x1988 <Eeprom_24_writePacket+0x11e>
    1986:	55 c0       	rjmp	.+170    	; 0x1a32 <Eeprom_24_writePacket+0x1c8>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    1988:	0f 5f       	subi	r16, 0xFF	; 255
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
    198a:	80 e4       	ldi	r24, 0x40	; 64
    198c:	c8 1a       	sub	r12, r24
    198e:	d1 08       	sbc	r13, r1
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
    1990:	80 e4       	ldi	r24, 0x40	; 64
    1992:	68 0e       	add	r6, r24
    1994:	71 1c       	adc	r7, r1
		Delay_ms(15);
    1996:	2f e0       	ldi	r18, 0x0F	; 15
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e0       	ldi	r20, 0x00	; 0
    199c:	50 e0       	ldi	r21, 0x00	; 0
    199e:	60 e0       	ldi	r22, 0x00	; 0
    19a0:	70 e0       	ldi	r23, 0x00	; 0
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
    19aa:	11 16       	cp	r1, r17
    19ac:	14 f3       	brlt	.-60     	; 0x1972 <Eeprom_24_writePacket+0x108>
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
		Delay_ms(15);
	}
	
	if (u16_dataLen > 0)
    19ae:	c1 14       	cp	r12, r1
    19b0:	d1 04       	cpc	r13, r1
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <Eeprom_24_writePacket+0x14c>
    19b4:	43 c0       	rjmp	.+134    	; 0x1a3c <Eeprom_24_writePacket+0x1d2>
	{
		uint16_t u16_newLocation = (u16_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
    19b6:	a4 01       	movw	r20, r8
    19b8:	40 0f       	add	r20, r16
    19ba:	51 1d       	adc	r21, r1
    19bc:	00 24       	eor	r0, r0
    19be:	56 95       	lsr	r21
    19c0:	47 95       	ror	r20
    19c2:	07 94       	ror	r0
    19c4:	56 95       	lsr	r21
    19c6:	47 95       	ror	r20
    19c8:	07 94       	ror	r0
    19ca:	54 2f       	mov	r21, r20
    19cc:	40 2d       	mov	r20, r0
		if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
    19ce:	be 01       	movw	r22, r28
    19d0:	6e 5f       	subi	r22, 0xFE	; 254
    19d2:	7f 4f       	sbci	r23, 0xFF	; 255
    19d4:	ce 01       	movw	r24, r28
    19d6:	01 96       	adiw	r24, 0x01	; 1
    19d8:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <EEPROM_getAddresses>
    19dc:	f8 2e       	mov	r15, r24
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	f8 12       	cpse	r15, r24
    19e2:	29 c0       	rjmp	.+82     	; 0x1a36 <Eeprom_24_writePacket+0x1cc>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    19e4:	95 01       	movw	r18, r10
    19e6:	26 0d       	add	r18, r6
    19e8:	37 1d       	adc	r19, r7
    19ea:	86 01       	movw	r16, r12
    19ec:	42 e0       	ldi	r20, 0x02	; 2
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	be 01       	movw	r22, r28
    19f2:	6e 5f       	subi	r22, 0xFE	; 254
    19f4:	7f 4f       	sbci	r23, 0xFF	; 255
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	0e 94 df 18 	call	0x31be	; 0x31be <I2C_MasterSendGeneral>
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	e9 f4       	brne	.+58     	; 0x1a3a <Eeprom_24_writePacket+0x1d0>
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
    1a00:	2f e0       	ldi	r18, 0x0F	; 15
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
    1a14:	13 c0       	rjmp	.+38     	; 0x1a3c <Eeprom_24_writePacket+0x1d2>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1a16:	68 94       	set
    1a18:	ff 24       	eor	r15, r15
    1a1a:	f1 f8       	bld	r15, 1
    1a1c:	0f c0       	rjmp	.+30     	; 0x1a3c <Eeprom_24_writePacket+0x1d2>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1a1e:	68 94       	set
    1a20:	ff 24       	eor	r15, r15
    1a22:	f2 f8       	bld	r15, 2
    1a24:	0b c0       	rjmp	.+22     	; 0x1a3c <Eeprom_24_writePacket+0x1d2>
	}
	
#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]= {0};
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1a26:	f1 2c       	mov	r15, r1
    1a28:	09 c0       	rjmp	.+18     	; 0x1a3c <Eeprom_24_writePacket+0x1d2>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
		if (u16_dataLen < length)
		{
			if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
    1a2a:	f1 2c       	mov	r15, r1
    1a2c:	07 c0       	rjmp	.+14     	; 0x1a3c <Eeprom_24_writePacket+0x1d2>
			Delay_ms(15);
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1a2e:	f1 2c       	mov	r15, r1
    1a30:	05 c0       	rjmp	.+10     	; 0x1a3c <Eeprom_24_writePacket+0x1d2>
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
	{
		pages_num--;
		if(Eeprom_24_writePage(u16_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1a32:	f1 2c       	mov	r15, r1
    1a34:	03 c0       	rjmp	.+6      	; 0x1a3c <Eeprom_24_writePacket+0x1d2>
	
	if (u16_dataLen > 0)
	{
		uint16_t u16_newLocation = (u16_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1a36:	f1 2c       	mov	r15, r1
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <Eeprom_24_writePacket+0x1d2>
		if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1a3a:	f1 2c       	mov	r15, r1
		Delay_ms(15);
	}

#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    1a3c:	8f 2d       	mov	r24, r15
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	ff 90       	pop	r15
    1a4e:	df 90       	pop	r13
    1a50:	cf 90       	pop	r12
    1a52:	bf 90       	pop	r11
    1a54:	af 90       	pop	r10
    1a56:	9f 90       	pop	r9
    1a58:	8f 90       	pop	r8
    1a5a:	7f 90       	pop	r7
    1a5c:	6f 90       	pop	r6
    1a5e:	08 95       	ret

00001a60 <Eeprom_24_readPacket>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read Multiple data bytes from a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    1a60:	6f 92       	push	r6
    1a62:	7f 92       	push	r7
    1a64:	8f 92       	push	r8
    1a66:	9f 92       	push	r9
    1a68:	af 92       	push	r10
    1a6a:	bf 92       	push	r11
    1a6c:	cf 92       	push	r12
    1a6e:	df 92       	push	r13
    1a70:	ff 92       	push	r15
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <Eeprom_24_readPacket+0x1c>
    1a7c:	1f 92       	push	r1
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	8c 01       	movw	r16, r24
    1a84:	5b 01       	movw	r10, r22
    1a86:	6a 01       	movw	r12, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1a88:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <genu_eepromModuleState>
    1a8c:	83 30       	cpi	r24, 0x03	; 3
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <Eeprom_24_readPacket+0x32>
    1a90:	a0 c0       	rjmp	.+320    	; 0x1bd2 <Eeprom_24_readPacket+0x172>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1a92:	67 2b       	or	r22, r23
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <Eeprom_24_readPacket+0x38>
    1a96:	a1 c0       	rjmp	.+322    	; 0x1bda <Eeprom_24_readPacket+0x17a>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    1a98:	19 82       	std	Y+1, r1	; 0x01
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]={0};
    1a9a:	1b 82       	std	Y+3, r1	; 0x03
    1a9c:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    1a9e:	a8 01       	movw	r20, r16
    1aa0:	be 01       	movw	r22, r28
    1aa2:	6e 5f       	subi	r22, 0xFE	; 254
    1aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	01 96       	adiw	r24, 0x01	; 1
    1aaa:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <EEPROM_getAddresses>
    1aae:	f8 2e       	mov	r15, r24
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	f8 12       	cpse	r15, r24
    1ab4:	96 c0       	rjmp	.+300    	; 0x1be2 <Eeprom_24_readPacket+0x182>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint16_t u16_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;		//The first page to write in
    1ab6:	48 01       	movw	r8, r16
    1ab8:	80 ec       	ldi	r24, 0xC0	; 192
    1aba:	88 22       	and	r8, r24
    1abc:	e8 94       	clt
    1abe:	97 f8       	bld	r9, 7
    1ac0:	00 24       	eor	r0, r0
    1ac2:	88 0c       	add	r8, r8
    1ac4:	99 1c       	adc	r9, r9
    1ac6:	00 1c       	adc	r0, r0
    1ac8:	88 0c       	add	r8, r8
    1aca:	99 1c       	adc	r9, r9
    1acc:	00 1c       	adc	r0, r0
    1ace:	89 2c       	mov	r8, r9
    1ad0:	90 2c       	mov	r9, r0
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
    1ad2:	0f 73       	andi	r16, 0x3F	; 63
	
	if(u8_byteOffset != 0)
    1ad4:	81 f1       	breq	.+96     	; 0x1b36 <Eeprom_24_readPacket+0xd6>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    1ad6:	80 e4       	ldi	r24, 0x40	; 64
    1ad8:	68 2e       	mov	r6, r24
    1ada:	60 1a       	sub	r6, r16
		if (u16_dataLen < length)
    1adc:	71 2c       	mov	r7, r1
    1ade:	c6 14       	cp	r12, r6
    1ae0:	d7 04       	cpc	r13, r7
    1ae2:	c0 f4       	brcc	.+48     	; 0x1b14 <Eeprom_24_readPacket+0xb4>
		{
			if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1ae4:	86 01       	movw	r16, r12
    1ae6:	95 01       	movw	r18, r10
    1ae8:	42 e0       	ldi	r20, 0x02	; 2
    1aea:	50 e0       	ldi	r21, 0x00	; 0
    1aec:	be 01       	movw	r22, r28
    1aee:	6e 5f       	subi	r22, 0xFE	; 254
    1af0:	7f 4f       	sbci	r23, 0xFF	; 255
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	0e 94 42 19 	call	0x3284	; 0x3284 <I2C_MasterReceiveGeneral>
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	09 f0       	breq	.+2      	; 0x1afe <Eeprom_24_readPacket+0x9e>
    1afc:	74 c0       	rjmp	.+232    	; 0x1be6 <Eeprom_24_readPacket+0x186>
				return EEPROM_24_STATUS_ERROR_NOK;
			Delay_ms(15);
    1afe:	2f e0       	ldi	r18, 0x0F	; 15
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
			return EEPROM_24_STATUS_ERROR_OK;
    1b12:	70 c0       	rjmp	.+224    	; 0x1bf4 <Eeprom_24_readPacket+0x194>
		}
		if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, length) != I2C_STATUS_ERROR_OK)
    1b14:	83 01       	movw	r16, r6
    1b16:	95 01       	movw	r18, r10
    1b18:	42 e0       	ldi	r20, 0x02	; 2
    1b1a:	50 e0       	ldi	r21, 0x00	; 0
    1b1c:	be 01       	movw	r22, r28
    1b1e:	6e 5f       	subi	r22, 0xFE	; 254
    1b20:	7f 4f       	sbci	r23, 0xFF	; 255
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	0e 94 42 19 	call	0x3284	; 0x3284 <I2C_MasterReceiveGeneral>
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <Eeprom_24_readPacket+0xce>
    1b2c:	5e c0       	rjmp	.+188    	; 0x1bea <Eeprom_24_readPacket+0x18a>
			return EEPROM_24_STATUS_ERROR_NOK;
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    1b2e:	c6 18       	sub	r12, r6
    1b30:	d7 08       	sbc	r13, r7
		i=1;
    1b32:	11 e0       	ldi	r17, 0x01	; 1
    1b34:	03 c0       	rjmp	.+6      	; 0x1b3c <Eeprom_24_readPacket+0xdc>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
    1b36:	10 e0       	ldi	r17, 0x00	; 0

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
    1b38:	61 2c       	mov	r6, r1
    1b3a:	71 2c       	mov	r7, r1
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
    1b3c:	c6 01       	movw	r24, r12
    1b3e:	00 24       	eor	r0, r0
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	00 1c       	adc	r0, r0
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	00 1c       	adc	r0, r0
    1b4c:	89 2f       	mov	r24, r25
    1b4e:	90 2d       	mov	r25, r0
	while (pages_num--)
    1b50:	12 c0       	rjmp	.+36     	; 0x1b76 <Eeprom_24_readPacket+0x116>
	{
		if(Eeprom_24_readPage(u16_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    1b52:	b5 01       	movw	r22, r10
    1b54:	66 0d       	add	r22, r6
    1b56:	77 1d       	adc	r23, r7
    1b58:	81 2f       	mov	r24, r17
    1b5a:	88 0d       	add	r24, r8
    1b5c:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <Eeprom_24_readPage>
    1b60:	81 30       	cpi	r24, 0x01	; 1
    1b62:	09 f0       	breq	.+2      	; 0x1b66 <Eeprom_24_readPacket+0x106>
    1b64:	44 c0       	rjmp	.+136    	; 0x1bee <Eeprom_24_readPacket+0x18e>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    1b66:	1f 5f       	subi	r17, 0xFF	; 255
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
    1b68:	80 e4       	ldi	r24, 0x40	; 64
    1b6a:	c8 1a       	sub	r12, r24
    1b6c:	d1 08       	sbc	r13, r1
		u16dataIndex += EEPROM_24_PAGE_BYTES;
    1b6e:	80 e4       	ldi	r24, 0x40	; 64
    1b70:	68 0e       	add	r6, r24
    1b72:	71 1c       	adc	r7, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
    1b74:	80 2f       	mov	r24, r16
    1b76:	0f ef       	ldi	r16, 0xFF	; 255
    1b78:	08 0f       	add	r16, r24
    1b7a:	81 11       	cpse	r24, r1
    1b7c:	ea cf       	rjmp	.-44     	; 0x1b52 <Eeprom_24_readPacket+0xf2>
		i++;
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u16dataIndex += EEPROM_24_PAGE_BYTES;
	}

	if (u16_dataLen > 0)
    1b7e:	c1 14       	cp	r12, r1
    1b80:	d1 04       	cpc	r13, r1
    1b82:	c1 f1       	breq	.+112    	; 0x1bf4 <Eeprom_24_readPacket+0x194>
	{
		uint16_t new_location = (u16_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
    1b84:	a4 01       	movw	r20, r8
    1b86:	41 0f       	add	r20, r17
    1b88:	51 1d       	adc	r21, r1
    1b8a:	00 24       	eor	r0, r0
    1b8c:	56 95       	lsr	r21
    1b8e:	47 95       	ror	r20
    1b90:	07 94       	ror	r0
    1b92:	56 95       	lsr	r21
    1b94:	47 95       	ror	r20
    1b96:	07 94       	ror	r0
    1b98:	54 2f       	mov	r21, r20
    1b9a:	40 2d       	mov	r20, r0
		if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
    1b9c:	be 01       	movw	r22, r28
    1b9e:	6e 5f       	subi	r22, 0xFE	; 254
    1ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	01 96       	adiw	r24, 0x01	; 1
    1ba6:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <EEPROM_getAddresses>
    1baa:	f8 2e       	mov	r15, r24
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	f8 12       	cpse	r15, r24
    1bb0:	20 c0       	rjmp	.+64     	; 0x1bf2 <Eeprom_24_readPacket+0x192>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1bb2:	95 01       	movw	r18, r10
    1bb4:	26 0d       	add	r18, r6
    1bb6:	37 1d       	adc	r19, r7
    1bb8:	86 01       	movw	r16, r12
    1bba:	42 e0       	ldi	r20, 0x02	; 2
    1bbc:	50 e0       	ldi	r21, 0x00	; 0
    1bbe:	be 01       	movw	r22, r28
    1bc0:	6e 5f       	subi	r22, 0xFE	; 254
    1bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	0e 94 42 19 	call	0x3284	; 0x3284 <I2C_MasterReceiveGeneral>
    1bca:	81 30       	cpi	r24, 0x01	; 1
    1bcc:	99 f0       	breq	.+38     	; 0x1bf4 <Eeprom_24_readPacket+0x194>
			return EEPROM_24_STATUS_ERROR_NOK;
    1bce:	f1 2c       	mov	r15, r1
    1bd0:	11 c0       	rjmp	.+34     	; 0x1bf4 <Eeprom_24_readPacket+0x194>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1bd2:	68 94       	set
    1bd4:	ff 24       	eor	r15, r15
    1bd6:	f1 f8       	bld	r15, 1
    1bd8:	0d c0       	rjmp	.+26     	; 0x1bf4 <Eeprom_24_readPacket+0x194>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1bda:	68 94       	set
    1bdc:	ff 24       	eor	r15, r15
    1bde:	f2 f8       	bld	r15, 2
    1be0:	09 c0       	rjmp	.+18     	; 0x1bf4 <Eeprom_24_readPacket+0x194>
			return EEPROM_24_STATUS_ERROR_NOK;
	}
#elif EEPROM_24_MODEL == AT24C256B
	uint8_t u8_wordAddr[2]={0};
	if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1be2:	f1 2c       	mov	r15, r1
    1be4:	07 c0       	rjmp	.+14     	; 0x1bf4 <Eeprom_24_readPacket+0x194>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
		if (u16_dataLen < length)
		{
			if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
    1be6:	f1 2c       	mov	r15, r1
    1be8:	05 c0       	rjmp	.+10     	; 0x1bf4 <Eeprom_24_readPacket+0x194>
			Delay_ms(15);
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1bea:	f1 2c       	mov	r15, r1
    1bec:	03 c0       	rjmp	.+6      	; 0x1bf4 <Eeprom_24_readPacket+0x194>
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
	{
		if(Eeprom_24_readPage(u16_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1bee:	f1 2c       	mov	r15, r1
    1bf0:	01 c0       	rjmp	.+2      	; 0x1bf4 <Eeprom_24_readPacket+0x194>

	if (u16_dataLen > 0)
	{
		uint16_t new_location = (u16_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1bf2:	f1 2c       	mov	r15, r1
		if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    1bf4:	8f 2d       	mov	r24, r15
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	1f 91       	pop	r17
    1c02:	0f 91       	pop	r16
    1c04:	ff 90       	pop	r15
    1c06:	df 90       	pop	r13
    1c08:	cf 90       	pop	r12
    1c0a:	bf 90       	pop	r11
    1c0c:	af 90       	pop	r10
    1c0e:	9f 90       	pop	r9
    1c10:	8f 90       	pop	r8
    1c12:	7f 90       	pop	r7
    1c14:	6f 90       	pop	r6
    1c16:	08 95       	ret

00001c18 <Keypad_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is already initialized */
	if (genu_KeypadModuleState == KEYPAD_STATUS_INIT)
    1c18:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <genu_KeypadModuleState>
    1c1c:	85 30       	cpi	r24, 0x05	; 5
    1c1e:	71 f0       	breq	.+28     	; 0x1c3c <Keypad_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    1c20:	82 e9       	ldi	r24, 0x92	; 146
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	0e 94 15 13 	call	0x262a	; 0x262a <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    1c28:	81 30       	cpi	r24, 0x01	; 1
    1c2a:	11 f0       	breq	.+4      	; 0x1c30 <Keypad_init+0x18>
    1c2c:	87 30       	cpi	r24, 0x07	; 7
    1c2e:	29 f4       	brne	.+10     	; 0x1c3a <Keypad_init+0x22>
		return KEYPAD_STATUS_ERROR_NOK;
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
    1c30:	85 e0       	ldi	r24, 0x05	; 5
    1c32:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <genu_KeypadModuleState>
	return KEYPAD_STATUS_ERROR_OK;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return KEYPAD_STATUS_ERROR_NOK;
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
	return KEYPAD_STATUS_ERROR_OK;
}
    1c3c:	08 95       	ret

00001c3e <Keypad_readKey>:
* Parameters (out): pu8_pressedKey - Pointer to a Char to hold the pressed key.
* Return value: enuKeypad_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current pressed Key.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuKeypad_Status_t Keypad_readKey(uint8_t * pu8_pressedKey)
{
    1c3e:	af 92       	push	r10
    1c40:	bf 92       	push	r11
    1c42:	cf 92       	push	r12
    1c44:	df 92       	push	r13
    1c46:	ef 92       	push	r14
    1c48:	ff 92       	push	r15
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	1f 92       	push	r1
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	6c 01       	movw	r12, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
    1c5a:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <genu_KeypadModuleState>
    1c5e:	95 30       	cpi	r25, 0x05	; 5
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <Keypad_readKey+0x26>
    1c62:	50 c0       	rjmp	.+160    	; 0x1d04 <Keypad_readKey+0xc6>
	{
		return KEYPAD_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
    1c64:	c1 14       	cp	r12, r1
    1c66:	d1 04       	cpc	r13, r1
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <Keypad_readKey+0x2e>
    1c6a:	4e c0       	rjmp	.+156    	; 0x1d08 <Keypad_readKey+0xca>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	89 83       	std	Y+1, r24	; 0x01
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    1c70:	00 e0       	ldi	r16, 0x00	; 0
    1c72:	43 c0       	rjmp	.+134    	; 0x1cfa <Keypad_readKey+0xbc>
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
    1c74:	a0 2e       	mov	r10, r16
    1c76:	b1 2c       	mov	r11, r1
    1c78:	f5 01       	movw	r30, r10
    1c7a:	e9 57       	subi	r30, 0x79	; 121
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	09 f0       	breq	.+2      	; 0x1c8c <Keypad_readKey+0x4e>
    1c8a:	40 c0       	rjmp	.+128    	; 0x1d0c <Keypad_readKey+0xce>
    1c8c:	10 e0       	ldi	r17, 0x00	; 0
    1c8e:	29 c0       	rjmp	.+82     	; 0x1ce2 <Keypad_readKey+0xa4>
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
    1c90:	e1 2e       	mov	r14, r17
    1c92:	f1 2c       	mov	r15, r1
    1c94:	f7 01       	movw	r30, r14
    1c96:	ed 57       	subi	r30, 0x7D	; 125
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	be 01       	movw	r22, r28
    1c9c:	6f 5f       	subi	r22, 0xFF	; 255
    1c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca0:	80 81       	ld	r24, Z
    1ca2:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <Dio_readPin>
    1ca6:	81 30       	cpi	r24, 0x01	; 1
    1ca8:	99 f5       	brne	.+102    	; 0x1d10 <Keypad_readKey+0xd2>
				return KEYPAD_STATUS_ERROR_NOK;
			if(u8_pinValue == PIN_LOW)
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	81 11       	cpse	r24, r1
    1cae:	18 c0       	rjmp	.+48     	; 0x1ce0 <Keypad_readKey+0xa2>
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    1cb0:	61 e0       	ldi	r22, 0x01	; 1
    1cb2:	f5 01       	movw	r30, r10
    1cb4:	e9 57       	subi	r30, 0x79	; 121
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	80 81       	ld	r24, Z
    1cba:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	49 f5       	brne	.+82     	; 0x1d14 <Keypad_readKey+0xd6>
					return KEYPAD_STATUS_ERROR_NOK;
				*pu8_pressedKey = gau8_ButtonSymbols[u8_RowIndex][u8_ColumnIndex];
    1cc2:	97 01       	movw	r18, r14
    1cc4:	22 0f       	add	r18, r18
    1cc6:	33 1f       	adc	r19, r19
    1cc8:	22 0f       	add	r18, r18
    1cca:	33 1f       	adc	r19, r19
    1ccc:	2d 58       	subi	r18, 0x8D	; 141
    1cce:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd0:	f9 01       	movw	r30, r18
    1cd2:	ea 0d       	add	r30, r10
    1cd4:	fb 1d       	adc	r31, r11
    1cd6:	80 81       	ld	r24, Z
    1cd8:	f6 01       	movw	r30, r12
    1cda:	80 83       	st	Z, r24
				return KEYPAD_STATUS_PRESSED;
    1cdc:	86 e0       	ldi	r24, 0x06	; 6
    1cde:	1d c0       	rjmp	.+58     	; 0x1d1a <Keypad_readKey+0xdc>
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
    1ce0:	1f 5f       	subi	r17, 0xFF	; 255
    1ce2:	14 30       	cpi	r17, 0x04	; 4
    1ce4:	a8 f2       	brcs	.-86     	; 0x1c90 <Keypad_readKey+0x52>
				return KEYPAD_STATUS_PRESSED;
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    1ce6:	f5 01       	movw	r30, r10
    1ce8:	e9 57       	subi	r30, 0x79	; 121
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	61 e0       	ldi	r22, 0x01	; 1
    1cee:	80 81       	ld	r24, Z
    1cf0:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	81 f4       	brne	.+32     	; 0x1d18 <Keypad_readKey+0xda>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    1cf8:	0f 5f       	subi	r16, 0xFF	; 255
    1cfa:	04 30       	cpi	r16, 0x04	; 4
    1cfc:	08 f4       	brcc	.+2      	; 0x1d00 <Keypad_readKey+0xc2>
    1cfe:	ba cf       	rjmp	.-140    	; 0x1c74 <Keypad_readKey+0x36>
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    1d00:	87 e0       	ldi	r24, 0x07	; 7
    1d02:	0b c0       	rjmp	.+22     	; 0x1d1a <Keypad_readKey+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
	{
		return KEYPAD_STATUS_NOT_INIT;
    1d04:	84 e0       	ldi	r24, 0x04	; 4
    1d06:	09 c0       	rjmp	.+18     	; 0x1d1a <Keypad_readKey+0xdc>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
	{
		return KEYPAD_STATUS_ERROR_NULL;
    1d08:	83 e0       	ldi	r24, 0x03	; 3
    1d0a:	07 c0       	rjmp	.+14     	; 0x1d1a <Keypad_readKey+0xdc>
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	05 c0       	rjmp	.+10     	; 0x1d1a <Keypad_readKey+0xdc>
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
				return KEYPAD_STATUS_ERROR_NOK;
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	03 c0       	rjmp	.+6      	; 0x1d1a <Keypad_readKey+0xdc>
			if(u8_pinValue == PIN_LOW)
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
					return KEYPAD_STATUS_ERROR_NOK;
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	01 c0       	rjmp	.+2      	; 0x1d1a <Keypad_readKey+0xdc>
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    1d18:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    1d1a:	0f 90       	pop	r0
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	1f 91       	pop	r17
    1d22:	0f 91       	pop	r16
    1d24:	ff 90       	pop	r15
    1d26:	ef 90       	pop	r14
    1d28:	df 90       	pop	r13
    1d2a:	cf 90       	pop	r12
    1d2c:	bf 90       	pop	r11
    1d2e:	af 90       	pop	r10
    1d30:	08 95       	ret

00001d32 <Lcd_WriteData>:
{
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, BIN);
	Lcd_printString(au8_snum);
	return LCD_STATUS_ERROR_OK;
}
    1d32:	cf 93       	push	r28
    1d34:	c8 2f       	mov	r28, r24
    1d36:	80 ff       	sbrs	r24, 0
    1d38:	05 c0       	rjmp	.+10     	; 0x1d44 <Lcd_WriteData+0x12>
    1d3a:	61 e0       	ldi	r22, 0x01	; 1
    1d3c:	8a e0       	ldi	r24, 0x0A	; 10
    1d3e:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    1d42:	04 c0       	rjmp	.+8      	; 0x1d4c <Lcd_WriteData+0x1a>
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	8a e0       	ldi	r24, 0x0A	; 10
    1d48:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    1d4c:	c1 ff       	sbrs	r28, 1
    1d4e:	05 c0       	rjmp	.+10     	; 0x1d5a <Lcd_WriteData+0x28>
    1d50:	61 e0       	ldi	r22, 0x01	; 1
    1d52:	8b e0       	ldi	r24, 0x0B	; 11
    1d54:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    1d58:	04 c0       	rjmp	.+8      	; 0x1d62 <Lcd_WriteData+0x30>
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
    1d5c:	8b e0       	ldi	r24, 0x0B	; 11
    1d5e:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    1d62:	c2 ff       	sbrs	r28, 2
    1d64:	05 c0       	rjmp	.+10     	; 0x1d70 <Lcd_WriteData+0x3e>
    1d66:	61 e0       	ldi	r22, 0x01	; 1
    1d68:	8c e0       	ldi	r24, 0x0C	; 12
    1d6a:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    1d6e:	04 c0       	rjmp	.+8      	; 0x1d78 <Lcd_WriteData+0x46>
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	8c e0       	ldi	r24, 0x0C	; 12
    1d74:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    1d78:	c3 ff       	sbrs	r28, 3
    1d7a:	05 c0       	rjmp	.+10     	; 0x1d86 <Lcd_WriteData+0x54>
    1d7c:	61 e0       	ldi	r22, 0x01	; 1
    1d7e:	8d e0       	ldi	r24, 0x0D	; 13
    1d80:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    1d84:	04 c0       	rjmp	.+8      	; 0x1d8e <Lcd_WriteData+0x5c>
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	8d e0       	ldi	r24, 0x0D	; 13
    1d8a:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    1d8e:	cf 91       	pop	r28
    1d90:	08 95       	ret

00001d92 <Lcd_EnableToggle>:
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	89 e0       	ldi	r24, 0x09	; 9
    1d96:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    1d9a:	21 e0       	ldi	r18, 0x01	; 1
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	50 e0       	ldi	r21, 0x00	; 0
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
    1dae:	60 e0       	ldi	r22, 0x00	; 0
    1db0:	89 e0       	ldi	r24, 0x09	; 9
    1db2:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    1db6:	08 95       	ret

00001db8 <Lcd_sendCommand>:
    1db8:	cf 93       	push	r28
    1dba:	c8 2f       	mov	r28, r24
    1dbc:	60 e0       	ldi	r22, 0x00	; 0
    1dbe:	87 e0       	ldi	r24, 0x07	; 7
    1dc0:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    1dc4:	8c 2f       	mov	r24, r28
    1dc6:	82 95       	swap	r24
    1dc8:	8f 70       	andi	r24, 0x0F	; 15
    1dca:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <Lcd_WriteData>
    1dce:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <Lcd_EnableToggle>
    1dd2:	21 e0       	ldi	r18, 0x01	; 1
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e0       	ldi	r20, 0x00	; 0
    1dd8:	50 e0       	ldi	r21, 0x00	; 0
    1dda:	60 e0       	ldi	r22, 0x00	; 0
    1ddc:	70 e0       	ldi	r23, 0x00	; 0
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
    1de6:	8c 2f       	mov	r24, r28
    1de8:	8f 70       	andi	r24, 0x0F	; 15
    1dea:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <Lcd_WriteData>
    1dee:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <Lcd_EnableToggle>
    1df2:	22 e0       	ldi	r18, 0x02	; 2
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e0       	ldi	r20, 0x00	; 0
    1df8:	50 e0       	ldi	r21, 0x00	; 0
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	cf 91       	pop	r28
    1e0a:	08 95       	ret

00001e0c <Lcd_init>:
    1e0c:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <genu_LcdModuleState>
    1e10:	86 30       	cpi	r24, 0x06	; 6
    1e12:	91 f1       	breq	.+100    	; 0x1e78 <Lcd_init+0x6c>
    1e14:	82 e9       	ldi	r24, 0x92	; 146
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	0e 94 15 13 	call	0x262a	; 0x262a <Dio_init>
    1e1c:	81 30       	cpi	r24, 0x01	; 1
    1e1e:	11 f0       	breq	.+4      	; 0x1e24 <Lcd_init+0x18>
    1e20:	87 30       	cpi	r24, 0x07	; 7
    1e22:	49 f5       	brne	.+82     	; 0x1e76 <Lcd_init+0x6a>
    1e24:	24 e1       	ldi	r18, 0x14	; 20
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	50 e0       	ldi	r21, 0x00	; 0
    1e2c:	60 e0       	ldi	r22, 0x00	; 0
    1e2e:	70 e0       	ldi	r23, 0x00	; 0
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	87 e0       	ldi	r24, 0x07	; 7
    1e3c:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    1e40:	60 e0       	ldi	r22, 0x00	; 0
    1e42:	89 e0       	ldi	r24, 0x09	; 9
    1e44:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    1e48:	83 e3       	ldi	r24, 0x33	; 51
    1e4a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <Lcd_sendCommand>
    1e4e:	82 e3       	ldi	r24, 0x32	; 50
    1e50:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <Lcd_sendCommand>
    1e54:	88 e2       	ldi	r24, 0x28	; 40
    1e56:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <Lcd_sendCommand>
    1e5a:	8c e0       	ldi	r24, 0x0C	; 12
    1e5c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <Lcd_sendCommand>
    1e60:	86 e0       	ldi	r24, 0x06	; 6
    1e62:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <Lcd_sendCommand>
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <Lcd_sendCommand>
    1e6c:	86 e0       	ldi	r24, 0x06	; 6
    1e6e:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <genu_LcdModuleState>
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	08 95       	ret
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	08 95       	ret

00001e7a <Lcd_setCursor>:
    1e7a:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <genu_LcdModuleState>
    1e7e:	96 30       	cpi	r25, 0x06	; 6
    1e80:	89 f4       	brne	.+34     	; 0x1ea4 <Lcd_setCursor+0x2a>
    1e82:	83 30       	cpi	r24, 0x03	; 3
    1e84:	88 f4       	brcc	.+34     	; 0x1ea8 <Lcd_setCursor+0x2e>
    1e86:	61 31       	cpi	r22, 0x11	; 17
    1e88:	88 f4       	brcc	.+34     	; 0x1eac <Lcd_setCursor+0x32>
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	2e 5f       	subi	r18, 0xFE	; 254
    1e90:	3f 4f       	sbci	r19, 0xFF	; 255
    1e92:	86 2f       	mov	r24, r22
    1e94:	90 e4       	ldi	r25, 0x40	; 64
    1e96:	29 9f       	mul	r18, r25
    1e98:	80 0d       	add	r24, r0
    1e9a:	11 24       	eor	r1, r1
    1e9c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <Lcd_sendCommand>
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	08 95       	ret
    1ea4:	85 e0       	ldi	r24, 0x05	; 5
    1ea6:	08 95       	ret
    1ea8:	83 e0       	ldi	r24, 0x03	; 3
    1eaa:	08 95       	ret
    1eac:	82 e0       	ldi	r24, 0x02	; 2
    1eae:	08 95       	ret

00001eb0 <Lcd_printChar>:
    1eb0:	cf 93       	push	r28
    1eb2:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <genu_LcdModuleState>
    1eb6:	96 30       	cpi	r25, 0x06	; 6
    1eb8:	41 f5       	brne	.+80     	; 0x1f0a <Lcd_printChar+0x5a>
    1eba:	c8 2f       	mov	r28, r24
    1ebc:	61 e0       	ldi	r22, 0x01	; 1
    1ebe:	87 e0       	ldi	r24, 0x07	; 7
    1ec0:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    1ec4:	8c 2f       	mov	r24, r28
    1ec6:	82 95       	swap	r24
    1ec8:	8f 70       	andi	r24, 0x0F	; 15
    1eca:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <Lcd_WriteData>
    1ece:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <Lcd_EnableToggle>
    1ed2:	21 e0       	ldi	r18, 0x01	; 1
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e0       	ldi	r20, 0x00	; 0
    1ed8:	50 e0       	ldi	r21, 0x00	; 0
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
    1ee6:	8c 2f       	mov	r24, r28
    1ee8:	8f 70       	andi	r24, 0x0F	; 15
    1eea:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <Lcd_WriteData>
    1eee:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <Lcd_EnableToggle>
    1ef2:	22 e0       	ldi	r18, 0x02	; 2
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e0       	ldi	r20, 0x00	; 0
    1ef8:	50 e0       	ldi	r21, 0x00	; 0
    1efa:	60 e0       	ldi	r22, 0x00	; 0
    1efc:	70 e0       	ldi	r23, 0x00	; 0
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Delay_ms>
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	01 c0       	rjmp	.+2      	; 0x1f0c <Lcd_printChar+0x5c>
    1f0a:	85 e0       	ldi	r24, 0x05	; 5
    1f0c:	cf 91       	pop	r28
    1f0e:	08 95       	ret

00001f10 <Lcd_printString>:
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	ec 01       	movw	r28, r24
    1f16:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <genu_LcdModuleState>
    1f1a:	86 30       	cpi	r24, 0x06	; 6
    1f1c:	49 f4       	brne	.+18     	; 0x1f30 <Lcd_printString+0x20>
    1f1e:	03 c0       	rjmp	.+6      	; 0x1f26 <Lcd_printString+0x16>
    1f20:	21 96       	adiw	r28, 0x01	; 1
    1f22:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <Lcd_printChar>
    1f26:	88 81       	ld	r24, Y
    1f28:	81 11       	cpse	r24, r1
    1f2a:	fa cf       	rjmp	.-12     	; 0x1f20 <Lcd_printString+0x10>
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	01 c0       	rjmp	.+2      	; 0x1f32 <Lcd_printString+0x22>
    1f30:	85 e0       	ldi	r24, 0x05	; 5
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	08 95       	ret

00001f38 <Lcd_clear>:
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <Lcd_sendCommand>
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	08 95       	ret

00001f42 <Lcd_printLCD>:
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	ec 01       	movw	r28, r24
    1f4c:	8b 01       	movw	r16, r22
    1f4e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Lcd_clear>
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Lcd_setCursor>
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	89 f4       	brne	.+34     	; 0x1f80 <Lcd_printLCD+0x3e>
    1f5e:	ce 01       	movw	r24, r28
    1f60:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <Lcd_printString>
    1f64:	81 30       	cpi	r24, 0x01	; 1
    1f66:	71 f4       	brne	.+28     	; 0x1f84 <Lcd_printLCD+0x42>
    1f68:	60 e0       	ldi	r22, 0x00	; 0
    1f6a:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Lcd_setCursor>
    1f6e:	81 30       	cpi	r24, 0x01	; 1
    1f70:	59 f4       	brne	.+22     	; 0x1f88 <Lcd_printLCD+0x46>
    1f72:	c8 01       	movw	r24, r16
    1f74:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <Lcd_printString>
    1f78:	81 30       	cpi	r24, 0x01	; 1
    1f7a:	39 f0       	breq	.+14     	; 0x1f8a <Lcd_printLCD+0x48>
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	05 c0       	rjmp	.+10     	; 0x1f8a <Lcd_printLCD+0x48>
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	03 c0       	rjmp	.+6      	; 0x1f8a <Lcd_printLCD+0x48>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	01 c0       	rjmp	.+2      	; 0x1f8a <Lcd_printLCD+0x48>
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	1f 91       	pop	r17
    1f90:	0f 91       	pop	r16
    1f92:	08 95       	ret

00001f94 <Lcd_printDecimal>:
enuLcd_Status_t Lcd_printDecimal(uint16_t u16_num)
{
    1f94:	cf 93       	push	r28
    1f96:	df 93       	push	r29
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	61 97       	sbiw	r28, 0x11	; 17
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	de bf       	out	0x3e, r29	; 62
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, DEC);
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	be 01       	movw	r22, r28
    1fac:	6f 5f       	subi	r22, 0xFF	; 255
    1fae:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb0:	0e 94 9c 1a 	call	0x3538	; 0x3538 <integerToString>
	Lcd_printString(au8_snum);
    1fb4:	ce 01       	movw	r24, r28
    1fb6:	01 96       	adiw	r24, 0x01	; 1
    1fb8:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <Lcd_printString>
	return LCD_STATUS_ERROR_OK;
}
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	61 96       	adiw	r28, 0x11	; 17
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	df 91       	pop	r29
    1fcc:	cf 91       	pop	r28
    1fce:	08 95       	ret

00001fd0 <LM35_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is already initialized */
	if (genu_LM35ModuleState == LM35_STATUS_INIT)
    1fd0:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <genu_LM35ModuleState>
    1fd4:	85 30       	cpi	r24, 0x05	; 5
    1fd6:	51 f0       	breq	.+20     	; 0x1fec <LM35_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
    1fd8:	0e 94 b7 11 	call	0x236e	; 0x236e <Adc_init>
    1fdc:	81 30       	cpi	r24, 0x01	; 1
    1fde:	29 f4       	brne	.+10     	; 0x1fea <LM35_init+0x1a>
		return LM35_STATUS_ERROR_NOK;
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
    1fe0:	85 e0       	ldi	r24, 0x05	; 5
    1fe2:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <genu_LM35ModuleState>
	return LM35_STATUS_ERROR_OK;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
		return LM35_STATUS_ERROR_NOK;
    1fea:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
	return LM35_STATUS_ERROR_OK;
}
    1fec:	08 95       	ret

00001fee <LM35_readTemp>:
* Parameters (out): pu8_Temp - Pointer to a Char to hold the temperature.
* Return value: enuLM35_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current temperature and return in celsius.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLM35_Status_t LM35_readTemp(uint8_t * pu8_Temp)
{
    1fee:	0f 93       	push	r16
    1ff0:	1f 93       	push	r17
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <LM35_readTemp+0xa>
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <LM35_readTemp+0xc>
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	9c 01       	movw	r18, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
    2000:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <genu_LM35ModuleState>
    2004:	95 30       	cpi	r25, 0x05	; 5
    2006:	f1 f4       	brne	.+60     	; 0x2044 <LM35_readTemp+0x56>
	{
	return LM35_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
    2008:	21 15       	cp	r18, r1
    200a:	31 05       	cpc	r19, r1
    200c:	e9 f0       	breq	.+58     	; 0x2048 <LM35_readTemp+0x5a>
    200e:	89 01       	movw	r16, r18
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
    2010:	19 82       	std	Y+1, r1	; 0x01
    2012:	1a 82       	std	Y+2, r1	; 0x02
    2014:	1b 82       	std	Y+3, r1	; 0x03
    2016:	1c 82       	std	Y+4, r1	; 0x04
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
    2018:	be 01       	movw	r22, r28
    201a:	6f 5f       	subi	r22, 0xFF	; 255
    201c:	7f 4f       	sbci	r23, 0xFF	; 255
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	0e 94 df 11 	call	0x23be	; 0x23be <Adc_start>
    2024:	81 30       	cpi	r24, 0x01	; 1
    2026:	91 f4       	brne	.+36     	; 0x204c <LM35_readTemp+0x5e>
		return LM35_STATUS_ERROR_NOK;
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
    2028:	69 81       	ldd	r22, Y+1	; 0x01
    202a:	7a 81       	ldd	r23, Y+2	; 0x02
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	9c 81       	ldd	r25, Y+4	; 0x04
    2030:	2a e0       	ldi	r18, 0x0A	; 10
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e0       	ldi	r20, 0x00	; 0
    2036:	50 e0       	ldi	r21, 0x00	; 0
    2038:	0e 94 31 21 	call	0x4262	; 0x4262 <__udivmodsi4>
    203c:	f8 01       	movw	r30, r16
    203e:	20 83       	st	Z, r18
	return LM35_STATUS_ERROR_OK;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	05 c0       	rjmp	.+10     	; 0x204e <LM35_readTemp+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
	{
	return LM35_STATUS_NOT_INIT;
    2044:	84 e0       	ldi	r24, 0x04	; 4
    2046:	03 c0       	rjmp	.+6      	; 0x204e <LM35_readTemp+0x60>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
	{
		return LM35_STATUS_ERROR_NULL;
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	01 c0       	rjmp	.+2      	; 0x204e <LM35_readTemp+0x60>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
		return LM35_STATUS_ERROR_NOK;
    204c:	80 e0       	ldi	r24, 0x00	; 0
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
	return LM35_STATUS_ERROR_OK;
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	1f 91       	pop	r17
    205c:	0f 91       	pop	r16
    205e:	08 95       	ret

00002060 <Motor_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
    2060:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <gu8_MotorModuleStatus>
    2064:	86 30       	cpi	r24, 0x06	; 6
    2066:	49 f0       	breq	.+18     	; 0x207a <Motor_init+0x1a>
/**************************************************************************************/
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
    2068:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <SWPwm_Init>
    206c:	81 30       	cpi	r24, 0x01	; 1
    206e:	39 f4       	brne	.+14     	; 0x207e <Motor_init+0x1e>
		return MOTOR_STATUS_ERROR_NOK;
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
    2070:	86 e0       	ldi	r24, 0x06	; 6
    2072:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <gu8_MotorModuleStatus>
	return MOTOR_STATUS_ERROR_OK;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_INIT;
    207a:	86 e0       	ldi	r24, 0x06	; 6
    207c:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
		return MOTOR_STATUS_ERROR_NOK;
    207e:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
	return MOTOR_STATUS_ERROR_OK;
}
    2080:	08 95       	ret

00002082 <Motor_stop>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the motor.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to stop motor */
enuMotor_Status_t Motor_stop(uint8_t u8_motorID)
{
    2082:	df 92       	push	r13
    2084:	ef 92       	push	r14
    2086:	ff 92       	push	r15
    2088:	0f 93       	push	r16
    208a:	1f 93       	push	r17
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    2090:	81 11       	cpse	r24, r1
    2092:	5d c0       	rjmp	.+186    	; 0x214e <Motor_stop+0xcc>
    2094:	d8 2e       	mov	r13, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Stop the Motor by driving the pins to LOW */
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    2096:	08 2f       	mov	r16, r24
    2098:	10 e0       	ldi	r17, 0x00	; 0
    209a:	78 01       	movw	r14, r16
    209c:	ee 0c       	add	r14, r14
    209e:	ff 1c       	adc	r15, r15
    20a0:	ee 0c       	add	r14, r14
    20a2:	ff 1c       	adc	r15, r15
    20a4:	c7 01       	movw	r24, r14
    20a6:	80 0f       	add	r24, r16
    20a8:	91 1f       	adc	r25, r17
    20aa:	ec 01       	movw	r28, r24
    20ac:	cd 59       	subi	r28, 0x9D	; 157
    20ae:	da 4f       	sbci	r29, 0xFA	; 250
    20b0:	60 e0       	ldi	r22, 0x00	; 0
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    20c0:	e0 e0       	ldi	r30, 0x00	; 0
    20c2:	1c c0       	rjmp	.+56     	; 0x20fc <Motor_stop+0x7a>
	{
		if(u8_loopIndex == u8_motorID) /* Skip the current motor */
    20c4:	ed 15       	cp	r30, r13
    20c6:	c9 f0       	breq	.+50     	; 0x20fa <Motor_stop+0x78>
		{
			continue;
		}
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
    20c8:	d8 01       	movw	r26, r16
    20ca:	aa 0f       	add	r26, r26
    20cc:	bb 1f       	adc	r27, r27
    20ce:	aa 0f       	add	r26, r26
    20d0:	bb 1f       	adc	r27, r27
    20d2:	a0 0f       	add	r26, r16
    20d4:	b1 1f       	adc	r27, r17
    20d6:	ad 59       	subi	r26, 0x9D	; 157
    20d8:	ba 4f       	sbci	r27, 0xFA	; 250
    20da:	2c 91       	ld	r18, X
    20dc:	8e 2f       	mov	r24, r30
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	dc 01       	movw	r26, r24
    20e2:	aa 0f       	add	r26, r26
    20e4:	bb 1f       	adc	r27, r27
    20e6:	aa 0f       	add	r26, r26
    20e8:	bb 1f       	adc	r27, r27
    20ea:	8a 0f       	add	r24, r26
    20ec:	9b 1f       	adc	r25, r27
    20ee:	dc 01       	movw	r26, r24
    20f0:	ad 59       	subi	r26, 0x9D	; 157
    20f2:	ba 4f       	sbci	r27, 0xFA	; 250
    20f4:	8c 91       	ld	r24, X
    20f6:	28 17       	cp	r18, r24
    20f8:	19 f0       	breq	.+6      	; 0x2100 <Motor_stop+0x7e>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    20fa:	ef 5f       	subi	r30, 0xFF	; 255
    20fc:	ee 23       	and	r30, r30
    20fe:	11 f3       	breq	.-60     	; 0x20c4 <Motor_stop+0x42>
			break;
		}
	}
	
	
	if(u8_loopIndex == MOTORS_USED_NUM)
    2100:	e1 30       	cpi	r30, 0x01	; 1
    2102:	69 f4       	brne	.+26     	; 0x211e <Motor_stop+0x9c>
	{ /* In case that there isn't any motor using the same PWM Channel --> Stop the PWM */
		SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    2104:	f8 01       	movw	r30, r16
    2106:	ee 0f       	add	r30, r30
    2108:	ff 1f       	adc	r31, r31
    210a:	ee 0f       	add	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	e0 0f       	add	r30, r16
    2110:	f1 1f       	adc	r31, r17
    2112:	ed 59       	subi	r30, 0x9D	; 157
    2114:	fa 4f       	sbci	r31, 0xFA	; 250
    2116:	80 81       	ld	r24, Z
    2118:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <SWPwm_Stop>
    211c:	12 c0       	rjmp	.+36     	; 0x2142 <Motor_stop+0xc0>
	}else
	{/* In case that there is another motor using the same PWM Channel */
		if (gau8_MotorsState[u8_loopIndex] == MOTOR_STOPPED) /* Check if the other motor is not running */
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	e6 54       	subi	r30, 0x46	; 70
    2122:	fa 4f       	sbci	r31, 0xFA	; 250
    2124:	80 81       	ld	r24, Z
    2126:	81 11       	cpse	r24, r1
    2128:	0c c0       	rjmp	.+24     	; 0x2142 <Motor_stop+0xc0>
		{/* In case that the other motor is not running --> Stop the PWM */
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    212a:	f8 01       	movw	r30, r16
    212c:	ee 0f       	add	r30, r30
    212e:	ff 1f       	adc	r31, r31
    2130:	ee 0f       	add	r30, r30
    2132:	ff 1f       	adc	r31, r31
    2134:	e0 0f       	add	r30, r16
    2136:	f1 1f       	adc	r31, r17
    2138:	ed 59       	subi	r30, 0x9D	; 157
    213a:	fa 4f       	sbci	r31, 0xFA	; 250
    213c:	80 81       	ld	r24, Z
    213e:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <SWPwm_Stop>
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
    2142:	f8 01       	movw	r30, r16
    2144:	e6 54       	subi	r30, 0x46	; 70
    2146:	fa 4f       	sbci	r31, 0xFA	; 250
    2148:	10 82       	st	Z, r1
	return MOTOR_STATUS_ERROR_OK;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	01 c0       	rjmp	.+2      	; 0x2150 <Motor_stop+0xce>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    214e:	82 e0       	ldi	r24, 0x02	; 2
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
	return MOTOR_STATUS_ERROR_OK;
    2150:	df 91       	pop	r29
    2152:	cf 91       	pop	r28
    2154:	1f 91       	pop	r17
    2156:	0f 91       	pop	r16
    2158:	ff 90       	pop	r15
    215a:	ef 90       	pop	r14
    215c:	df 90       	pop	r13
    215e:	08 95       	ret

00002160 <Motor_run>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Move the motor in the given direction.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to move the motor forward with given speed in % */
enuMotor_Status_t Motor_run(uint8_t u8_motorID, uint8_t u8_speed, uint8_t u8_direction)
{
    2160:	ff 92       	push	r15
    2162:	0f 93       	push	r16
    2164:	1f 93       	push	r17
    2166:	cf 93       	push	r28
    2168:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
    216a:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <gu8_MotorModuleStatus>
    216e:	96 30       	cpi	r25, 0x06	; 6
    2170:	09 f0       	breq	.+2      	; 0x2174 <Motor_run+0x14>
    2172:	57 c0       	rjmp	.+174    	; 0x2222 <Motor_run+0xc2>
	{
		return MOTOR_STATUS_UNINIT;
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    2174:	81 11       	cpse	r24, r1
    2176:	57 c0       	rjmp	.+174    	; 0x2226 <Motor_run+0xc6>
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
    2178:	65 36       	cpi	r22, 0x65	; 101
    217a:	08 f0       	brcs	.+2      	; 0x217e <Motor_run+0x1e>
    217c:	56 c0       	rjmp	.+172    	; 0x222a <Motor_run+0xca>
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
    217e:	42 30       	cpi	r20, 0x02	; 2
    2180:	08 f0       	brcs	.+2      	; 0x2184 <Motor_run+0x24>
    2182:	55 c0       	rjmp	.+170    	; 0x222e <Motor_run+0xce>
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
    2184:	08 2f       	mov	r16, r24
    2186:	10 e0       	ldi	r17, 0x00	; 0
    2188:	f8 01       	movw	r30, r16
    218a:	e6 54       	subi	r30, 0x46	; 70
    218c:	fa 4f       	sbci	r31, 0xFA	; 250
    218e:	90 81       	ld	r25, Z
    2190:	91 30       	cpi	r25, 0x01	; 1
    2192:	09 f4       	brne	.+2      	; 0x2196 <Motor_run+0x36>
    2194:	4e c0       	rjmp	.+156    	; 0x2232 <Motor_run+0xd2>
    2196:	f6 2e       	mov	r15, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_speed == 0) 
    2198:	61 11       	cpse	r22, r1
    219a:	04 c0       	rjmp	.+8      	; 0x21a4 <Motor_run+0x44>
	{
		Motor_stop(u8_motorID);
    219c:	0e 94 41 10 	call	0x2082	; 0x2082 <Motor_stop>
		return MOTOR_STATUS_ERROR_OK;
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	48 c0       	rjmp	.+144    	; 0x2234 <Motor_run+0xd4>
	}
	if(u8_direction == MOTOR_DIR_CLK_WISE) /* Activate the Motor in the Clock Wise Direction */
    21a4:	41 11       	cpse	r20, r1
    21a6:	12 c0       	rjmp	.+36     	; 0x21cc <Motor_run+0x6c>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_HIGH);
    21a8:	25 e0       	ldi	r18, 0x05	; 5
    21aa:	20 9f       	mul	r18, r16
    21ac:	c0 01       	movw	r24, r0
    21ae:	21 9f       	mul	r18, r17
    21b0:	90 0d       	add	r25, r0
    21b2:	11 24       	eor	r1, r1
    21b4:	ec 01       	movw	r28, r24
    21b6:	cd 59       	subi	r28, 0x9D	; 157
    21b8:	da 4f       	sbci	r29, 0xFA	; 250
    21ba:	61 e0       	ldi	r22, 0x01	; 1
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	8a 81       	ldd	r24, Y+2	; 0x02
    21c6:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    21ca:	13 c0       	rjmp	.+38     	; 0x21f2 <Motor_run+0x92>
	}else if(u8_direction == MOTOR_DIR_ANTI_CLK_WISE) /* Activate the Motor in the Anti Clock Wise Direction */
    21cc:	41 30       	cpi	r20, 0x01	; 1
    21ce:	89 f4       	brne	.+34     	; 0x21f2 <Motor_run+0x92>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    21d0:	25 e0       	ldi	r18, 0x05	; 5
    21d2:	20 9f       	mul	r18, r16
    21d4:	c0 01       	movw	r24, r0
    21d6:	21 9f       	mul	r18, r17
    21d8:	90 0d       	add	r25, r0
    21da:	11 24       	eor	r1, r1
    21dc:	ec 01       	movw	r28, r24
    21de:	cd 59       	subi	r28, 0x9D	; 157
    21e0:	da 4f       	sbci	r29, 0xFA	; 250
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_HIGH);
    21ea:	61 e0       	ldi	r22, 0x01	; 1
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
	}
	
	/* Change the state of the Motor to Running */
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
    21f2:	f8 01       	movw	r30, r16
    21f4:	e6 54       	subi	r30, 0x46	; 70
    21f6:	fa 4f       	sbci	r31, 0xFA	; 250
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	80 83       	st	Z, r24
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
    21fc:	f8 01       	movw	r30, r16
    21fe:	ee 0f       	add	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	ee 0f       	add	r30, r30
    2204:	ff 1f       	adc	r31, r31
    2206:	e0 0f       	add	r30, r16
    2208:	f1 1f       	adc	r31, r17
    220a:	ed 59       	subi	r30, 0x9D	; 157
    220c:	fa 4f       	sbci	r31, 0xFA	; 250
    220e:	43 81       	ldd	r20, Z+3	; 0x03
    2210:	54 81       	ldd	r21, Z+4	; 0x04
    2212:	60 e0       	ldi	r22, 0x00	; 0
    2214:	70 e0       	ldi	r23, 0x00	; 0
    2216:	2f 2d       	mov	r18, r15
    2218:	80 81       	ld	r24, Z
    221a:	0e 94 9b 1c 	call	0x3936	; 0x3936 <SWPwm_Start>
	
	return MOTOR_STATUS_ERROR_OK;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	09 c0       	rjmp	.+18     	; 0x2234 <Motor_run+0xd4>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_UNINIT;
    2222:	87 e0       	ldi	r24, 0x07	; 7
    2224:	07 c0       	rjmp	.+14     	; 0x2234 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    2226:	82 e0       	ldi	r24, 0x02	; 2
    2228:	05 c0       	rjmp	.+10     	; 0x2234 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
    222a:	83 e0       	ldi	r24, 0x03	; 3
    222c:	03 c0       	rjmp	.+6      	; 0x2234 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
    222e:	84 e0       	ldi	r24, 0x04	; 4
    2230:	01 c0       	rjmp	.+2      	; 0x2234 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
	{
		return MOTOR_STATUS_ERROR_RUNNING;
    2232:	85 e0       	ldi	r24, 0x05	; 5
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
	
	return MOTOR_STATUS_ERROR_OK;
}
    2234:	df 91       	pop	r29
    2236:	cf 91       	pop	r28
    2238:	1f 91       	pop	r17
    223a:	0f 91       	pop	r16
    223c:	ff 90       	pop	r15
    223e:	08 95       	ret

00002240 <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
    2240:	cf 93       	push	r28
    2242:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
    2244:	c0 91 bc 05 	lds	r28, 0x05BC	; 0x8005bc <gu8_counter>
    2248:	d0 e0       	ldi	r29, 0x00	; 0
    224a:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <Uart_DataRegister>
    224e:	c3 54       	subi	r28, 0x43	; 67
    2250:	da 4f       	sbci	r29, 0xFA	; 250
    2252:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
    2254:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <gu8_counter>
    2258:	e9 2f       	mov	r30, r25
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	e3 54       	subi	r30, 0x43	; 67
    225e:	fa 4f       	sbci	r31, 0xFA	; 250
    2260:	80 81       	ld	r24, Z
    2262:	8d 30       	cpi	r24, 0x0D	; 13
    2264:	71 f4       	brne	.+28     	; 0x2282 <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    2266:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
    226a:	e0 91 bc 05 	lds	r30, 0x05BC	; 0x8005bc <gu8_counter>
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	e3 54       	subi	r30, 0x43	; 67
    2272:	fa 4f       	sbci	r31, 0xFA	; 250
    2274:	10 82       	st	Z, r1
		gu8_counter = 0;
    2276:	10 92 bc 05 	sts	0x05BC, r1	; 0x8005bc <gu8_counter>
		gu8_flag = 1;
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <gu8_flag>
    2280:	1d c0       	rjmp	.+58     	; 0x22bc <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
    2282:	88 30       	cpi	r24, 0x08	; 8
    2284:	51 f4       	brne	.+20     	; 0x229a <Uart_RXC_ISR+0x5a>
    2286:	99 23       	and	r25, r25
    2288:	41 f0       	breq	.+16     	; 0x229a <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    228a:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <Uart_sendByte>
		gu8_counter--;
    228e:	80 91 bc 05 	lds	r24, 0x05BC	; 0x8005bc <gu8_counter>
    2292:	81 50       	subi	r24, 0x01	; 1
    2294:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <gu8_counter>
    2298:	11 c0       	rjmp	.+34     	; 0x22bc <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
    229a:	88 30       	cpi	r24, 0x08	; 8
    229c:	79 f0       	breq	.+30     	; 0x22bc <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
    229e:	90 91 bc 06 	lds	r25, 0x06BC	; 0x8006bc <gu8_visibility>
    22a2:	91 30       	cpi	r25, 0x01	; 1
    22a4:	21 f4       	brne	.+8      	; 0x22ae <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
    22a6:	8a e2       	ldi	r24, 0x2A	; 42
    22a8:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <Uart_sendByte>
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
    22ae:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <Uart_sendByte>
		}
		gu8_counter++;
    22b2:	80 91 bc 05 	lds	r24, 0x05BC	; 0x8005bc <gu8_counter>
    22b6:	8f 5f       	subi	r24, 0xFF	; 255
    22b8:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <gu8_counter>
	}
}
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	08 95       	ret

000022c2 <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
    22c2:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <genu_TerminalModuleState>
    22c6:	83 30       	cpi	r24, 0x03	; 3
    22c8:	81 f0       	breq	.+32     	; 0x22ea <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
    22ca:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
    22ce:	81 30       	cpi	r24, 0x01	; 1
    22d0:	11 f0       	breq	.+4      	; 0x22d6 <Terminal_init+0x14>
    22d2:	87 30       	cpi	r24, 0x07	; 7
    22d4:	49 f4       	brne	.+18     	; 0x22e8 <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
    22d6:	80 e2       	ldi	r24, 0x20	; 32
    22d8:	91 e1       	ldi	r25, 0x11	; 17
    22da:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
    22de:	83 e0       	ldi	r24, 0x03	; 3
    22e0:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
    22e8:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
    22ea:	08 95       	ret

000022ec <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	81 f0       	breq	.+32     	; 0x2314 <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    22f4:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <genu_TerminalModuleState>
    22f8:	22 30       	cpi	r18, 0x02	; 2
    22fa:	79 f0       	breq	.+30     	; 0x231a <Terminal_Out+0x2e>
    22fc:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
    22fe:	0e 94 40 1a 	call	0x3480	; 0x3480 <stringLength>
    2302:	68 2f       	mov	r22, r24
    2304:	70 e0       	ldi	r23, 0x00	; 0
    2306:	ce 01       	movw	r24, r28
    2308:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
    230c:	81 30       	cpi	r24, 0x01	; 1
    230e:	21 f0       	breq	.+8      	; 0x2318 <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	03 c0       	rjmp	.+6      	; 0x231a <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    2314:	24 e0       	ldi	r18, 0x04	; 4
    2316:	01 c0       	rjmp	.+2      	; 0x231a <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
    2318:	21 e0       	ldi	r18, 0x01	; 1
}
    231a:	82 2f       	mov	r24, r18
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	08 95       	ret

00002322 <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
    2322:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
    2324:	89 2b       	or	r24, r25
    2326:	a1 f0       	breq	.+40     	; 0x2350 <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    2328:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <genu_TerminalModuleState>
    232c:	82 30       	cpi	r24, 0x02	; 2
    232e:	99 f0       	breq	.+38     	; 0x2356 <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
    2330:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <gu8_flag>
    2334:	81 30       	cpi	r24, 0x01	; 1
    2336:	71 f4       	brne	.+28     	; 0x2354 <Terminal_In+0x32>
	{
		gu8_flag = 0;
    2338:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
    233c:	8d eb       	ldi	r24, 0xBD	; 189
    233e:	95 e0       	ldi	r25, 0x05	; 5
    2340:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stringCopy>
		EmptyString(gau8_data);
    2344:	8d eb       	ldi	r24, 0xBD	; 189
    2346:	95 e0       	ldi	r25, 0x05	; 5
    2348:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
    234c:	85 e0       	ldi	r24, 0x05	; 5
    234e:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    2350:	84 e0       	ldi	r24, 0x04	; 4
    2352:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
    2354:	81 e0       	ldi	r24, 0x01	; 1
}
    2356:	08 95       	ret

00002358 <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	80 93 bc 06 	sts	0x06BC, r24	; 0x8006bc <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
    235e:	08 95       	ret

00002360 <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
    2360:	10 92 bc 06 	sts	0x06BC, r1	; 0x8006bc <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	08 95       	ret

00002368 <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
    2368:	0e 94 4d 0a 	call	0x149a	; 0x149a <App_start>
    236c:	ff cf       	rjmp	.-2      	; 0x236c <main+0x4>

0000236e <Adc_init>:
		f32_Resolution = (1000*ADC_AREF_VALUE)/ADC_STEPS_NUM;
	}
	*pu32_data = u16_Result*f32_Resolution;
		
	return ADC_STATUS_ERROR_OK;
}
    236e:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <genuAdc_Status>
    2372:	87 30       	cpi	r24, 0x07	; 7
    2374:	11 f1       	breq	.+68     	; 0x23ba <Adc_init+0x4c>
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	13 c0       	rjmp	.+38     	; 0x23a0 <Adc_init+0x32>
    237a:	3b b3       	in	r19, 0x1b	; 27
    237c:	e2 2f       	mov	r30, r18
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	ee 0f       	add	r30, r30
    2382:	ff 1f       	adc	r31, r31
    2384:	e0 57       	subi	r30, 0x70	; 112
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	00 80       	ld	r0, Z
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <Adc_init+0x26>
    2390:	88 0f       	add	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	0a 94       	dec	r0
    2396:	e2 f7       	brpl	.-8      	; 0x2390 <Adc_init+0x22>
    2398:	80 95       	com	r24
    239a:	83 23       	and	r24, r19
    239c:	8b bb       	out	0x1b, r24	; 27
    239e:	2f 5f       	subi	r18, 0xFF	; 255
    23a0:	22 23       	and	r18, r18
    23a2:	59 f3       	breq	.-42     	; 0x237a <Adc_init+0xc>
    23a4:	97 e0       	ldi	r25, 0x07	; 7
    23a6:	96 b9       	out	0x06, r25	; 6
    23a8:	86 b1       	in	r24, 0x06	; 6
    23aa:	8f 7d       	andi	r24, 0xDF	; 223
    23ac:	86 b9       	out	0x06, r24	; 6
    23ae:	86 b1       	in	r24, 0x06	; 6
    23b0:	86 b9       	out	0x06, r24	; 6
    23b2:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <genuAdc_Status>
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	08 95       	ret
    23ba:	88 e0       	ldi	r24, 0x08	; 8
    23bc:	08 95       	ret

000023be <Adc_start>:
    23be:	cf 92       	push	r12
    23c0:	df 92       	push	r13
    23c2:	ef 92       	push	r14
    23c4:	ff 92       	push	r15
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
    23ca:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <genuAdc_Status>
    23ce:	97 30       	cpi	r25, 0x07	; 7
    23d0:	09 f0       	breq	.+2      	; 0x23d4 <Adc_start+0x16>
    23d2:	61 c0       	rjmp	.+194    	; 0x2496 <Adc_start+0xd8>
    23d4:	61 15       	cp	r22, r1
    23d6:	71 05       	cpc	r23, r1
    23d8:	09 f4       	brne	.+2      	; 0x23dc <Adc_start+0x1e>
    23da:	5f c0       	rjmp	.+190    	; 0x249a <Adc_start+0xdc>
    23dc:	37 b1       	in	r19, 0x07	; 7
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	fc 01       	movw	r30, r24
    23e2:	ee 0f       	add	r30, r30
    23e4:	ff 1f       	adc	r31, r31
    23e6:	e0 57       	subi	r30, 0x70	; 112
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	20 81       	ld	r18, Z
    23ec:	23 2b       	or	r18, r19
    23ee:	27 b9       	out	0x07, r18	; 7
    23f0:	47 b1       	in	r20, 0x07	; 7
    23f2:	31 81       	ldd	r19, Z+1	; 0x01
    23f4:	50 e4       	ldi	r21, 0x40	; 64
    23f6:	35 9f       	mul	r19, r21
    23f8:	90 01       	movw	r18, r0
    23fa:	11 24       	eor	r1, r1
    23fc:	24 2b       	or	r18, r20
    23fe:	27 b9       	out	0x07, r18	; 7
    2400:	26 b1       	in	r18, 0x06	; 6
    2402:	20 68       	ori	r18, 0x80	; 128
    2404:	26 b9       	out	0x06, r18	; 6
    2406:	26 b1       	in	r18, 0x06	; 6
    2408:	20 64       	ori	r18, 0x40	; 64
    240a:	26 b9       	out	0x06, r18	; 6
    240c:	34 9b       	sbis	0x06, 4	; 6
    240e:	fe cf       	rjmp	.-4      	; 0x240c <Adc_start+0x4e>
    2410:	44 b1       	in	r20, 0x04	; 4
    2412:	25 b1       	in	r18, 0x05	; 5
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	32 2f       	mov	r19, r18
    2418:	22 27       	eor	r18, r18
    241a:	24 2b       	or	r18, r20
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	fc 01       	movw	r30, r24
    2422:	e0 57       	subi	r30, 0x70	; 112
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	81 81       	ldd	r24, Z+1	; 0x01
    2428:	83 30       	cpi	r24, 0x03	; 3
    242a:	41 f0       	breq	.+16     	; 0x243c <Adc_start+0x7e>
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	69 f0       	breq	.+26     	; 0x244a <Adc_start+0x8c>
    2430:	88 23       	and	r24, r24
    2432:	a1 f0       	breq	.+40     	; 0x245c <Adc_start+0x9e>
    2434:	c1 2c       	mov	r12, r1
    2436:	d1 2c       	mov	r13, r1
    2438:	76 01       	movw	r14, r12
    243a:	18 c0       	rjmp	.+48     	; 0x246c <Adc_start+0xae>
    243c:	c1 2c       	mov	r12, r1
    243e:	d1 2c       	mov	r13, r1
    2440:	76 01       	movw	r14, r12
    2442:	68 94       	set
    2444:	e5 f8       	bld	r14, 5
    2446:	f6 f8       	bld	r15, 6
    2448:	11 c0       	rjmp	.+34     	; 0x246c <Adc_start+0xae>
    244a:	0f 2e       	mov	r0, r31
    244c:	c1 2c       	mov	r12, r1
    244e:	f0 e4       	ldi	r31, 0x40	; 64
    2450:	df 2e       	mov	r13, r31
    2452:	fc e9       	ldi	r31, 0x9C	; 156
    2454:	ef 2e       	mov	r14, r31
    2456:	fd 2c       	mov	r15, r13
    2458:	f0 2d       	mov	r31, r0
    245a:	08 c0       	rjmp	.+16     	; 0x246c <Adc_start+0xae>
    245c:	0f 2e       	mov	r0, r31
    245e:	c1 2c       	mov	r12, r1
    2460:	f0 e4       	ldi	r31, 0x40	; 64
    2462:	df 2e       	mov	r13, r31
    2464:	fc e9       	ldi	r31, 0x9C	; 156
    2466:	ef 2e       	mov	r14, r31
    2468:	fd 2c       	mov	r15, r13
    246a:	f0 2d       	mov	r31, r0
    246c:	eb 01       	movw	r28, r22
    246e:	b9 01       	movw	r22, r18
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__floatunsisf>
    2478:	a7 01       	movw	r20, r14
    247a:	96 01       	movw	r18, r12
    247c:	0e 94 b0 20 	call	0x4160	; 0x4160 <__mulsf3>
    2480:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <__fixunssfsi>
    2484:	68 83       	st	Y, r22
    2486:	79 83       	std	Y+1, r23	; 0x01
    2488:	8a 83       	std	Y+2, r24	; 0x02
    248a:	9b 83       	std	Y+3, r25	; 0x03
    248c:	86 b1       	in	r24, 0x06	; 6
    248e:	80 61       	ori	r24, 0x10	; 16
    2490:	86 b9       	out	0x06, r24	; 6
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	03 c0       	rjmp	.+6      	; 0x249c <Adc_start+0xde>
    2496:	86 e0       	ldi	r24, 0x06	; 6
    2498:	01 c0       	rjmp	.+2      	; 0x249c <Adc_start+0xde>
    249a:	85 e0       	ldi	r24, 0x05	; 5
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	ff 90       	pop	r15
    24a2:	ef 90       	pop	r14
    24a4:	df 90       	pop	r13
    24a6:	cf 90       	pop	r12
    24a8:	08 95       	ret

000024aa <__vector_16>:

ISR(ADC_IRQ)
{
    24aa:	1f 92       	push	r1
    24ac:	0f 92       	push	r0
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	0f 92       	push	r0
    24b2:	11 24       	eor	r1, r1
    24b4:	2f 93       	push	r18
    24b6:	3f 93       	push	r19
    24b8:	4f 93       	push	r20
    24ba:	5f 93       	push	r21
    24bc:	6f 93       	push	r22
    24be:	7f 93       	push	r23
    24c0:	8f 93       	push	r24
    24c2:	9f 93       	push	r25
    24c4:	af 93       	push	r26
    24c6:	bf 93       	push	r27
    24c8:	ef 93       	push	r30
    24ca:	ff 93       	push	r31
	(*ADC_CallBackPtr)();
    24cc:	e0 91 bd 06 	lds	r30, 0x06BD	; 0x8006bd <ADC_CallBackPtr>
    24d0:	f0 91 be 06 	lds	r31, 0x06BE	; 0x8006be <ADC_CallBackPtr+0x1>
    24d4:	09 95       	icall
    24d6:	ff 91       	pop	r31
    24d8:	ef 91       	pop	r30
    24da:	bf 91       	pop	r27
    24dc:	af 91       	pop	r26
    24de:	9f 91       	pop	r25
    24e0:	8f 91       	pop	r24
    24e2:	7f 91       	pop	r23
    24e4:	6f 91       	pop	r22
    24e6:	5f 91       	pop	r21
    24e8:	4f 91       	pop	r20
    24ea:	3f 91       	pop	r19
    24ec:	2f 91       	pop	r18
    24ee:	0f 90       	pop	r0
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	0f 90       	pop	r0
    24f4:	1f 90       	pop	r1
    24f6:	18 95       	reti

000024f8 <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
    24f8:	2f 92       	push	r2
    24fa:	3f 92       	push	r3
    24fc:	4f 92       	push	r4
    24fe:	5f 92       	push	r5
    2500:	6f 92       	push	r6
    2502:	7f 92       	push	r7
    2504:	8f 92       	push	r8
    2506:	9f 92       	push	r9
    2508:	af 92       	push	r10
    250a:	bf 92       	push	r11
    250c:	cf 92       	push	r12
    250e:	df 92       	push	r13
    2510:	ef 92       	push	r14
    2512:	ff 92       	push	r15
    2514:	0f 93       	push	r16
    2516:	1f 93       	push	r17
    2518:	cf 93       	push	r28
    251a:	df 93       	push	r29
    251c:	00 d0       	rcall	.+0      	; 0x251e <Delay_ms+0x26>
    251e:	00 d0       	rcall	.+0      	; 0x2520 <Delay_ms+0x28>
    2520:	00 d0       	rcall	.+0      	; 0x2522 <Delay_ms+0x2a>
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	22 2e       	mov	r2, r18
    2528:	33 2e       	mov	r3, r19
    252a:	44 2e       	mov	r4, r20
    252c:	55 2e       	mov	r5, r21
    252e:	66 2e       	mov	r6, r22
    2530:	79 83       	std	Y+1, r23	; 0x01
    2532:	8a 83       	std	Y+2, r24	; 0x02
    2534:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    2536:	91 2c       	mov	r9, r1
    2538:	1d 82       	std	Y+5, r1	; 0x05
    253a:	1c 82       	std	Y+4, r1	; 0x04
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	e0 e0       	ldi	r30, 0x00	; 0
    2542:	71 2c       	mov	r7, r1
    2544:	81 2c       	mov	r8, r1
    2546:	44 c0       	rjmp	.+136    	; 0x25d0 <Delay_ms+0xd8>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
    2548:	2d 2d       	mov	r18, r13
    254a:	3e 2d       	mov	r19, r14
    254c:	4f 2d       	mov	r20, r15
    254e:	50 2f       	mov	r21, r16
    2550:	61 2f       	mov	r22, r17
    2552:	7a 2f       	mov	r23, r26
    2554:	8b 2d       	mov	r24, r11
    2556:	9c 2d       	mov	r25, r12
    2558:	a1 e0       	ldi	r26, 0x01	; 1
    255a:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__adddi3_s8>
    255e:	d2 2e       	mov	r13, r18
    2560:	e3 2e       	mov	r14, r19
    2562:	f4 2e       	mov	r15, r20
    2564:	05 2f       	mov	r16, r21
    2566:	16 2f       	mov	r17, r22
    2568:	a7 2f       	mov	r26, r23
    256a:	b8 2e       	mov	r11, r24
    256c:	c9 2e       	mov	r12, r25
    256e:	0a c0       	rjmp	.+20     	; 0x2584 <Delay_ms+0x8c>
    2570:	d1 2c       	mov	r13, r1
    2572:	e1 2c       	mov	r14, r1
    2574:	f1 2c       	mov	r15, r1
    2576:	00 e0       	ldi	r16, 0x00	; 0
    2578:	10 e0       	ldi	r17, 0x00	; 0
    257a:	a0 e0       	ldi	r26, 0x00	; 0
    257c:	b1 2c       	mov	r11, r1
    257e:	c1 2c       	mov	r12, r1
    2580:	ad 80       	ldd	r10, Y+5	; 0x05
    2582:	ee 83       	std	Y+6, r30	; 0x06
    2584:	2d 2d       	mov	r18, r13
    2586:	3e 2d       	mov	r19, r14
    2588:	4f 2d       	mov	r20, r15
    258a:	50 2f       	mov	r21, r16
    258c:	61 2f       	mov	r22, r17
    258e:	7a 2f       	mov	r23, r26
    2590:	8b 2d       	mov	r24, r11
    2592:	9c 2d       	mov	r25, r12
    2594:	2b 38       	cpi	r18, 0x8B	; 139
    2596:	31 05       	cpc	r19, r1
    2598:	41 05       	cpc	r20, r1
    259a:	51 05       	cpc	r21, r1
    259c:	61 05       	cpc	r22, r1
    259e:	71 05       	cpc	r23, r1
    25a0:	81 05       	cpc	r24, r1
    25a2:	91 05       	cpc	r25, r1
    25a4:	89 f2       	breq	.-94     	; 0x2548 <Delay_ms+0x50>
    25a6:	80 f2       	brcs	.-96     	; 0x2548 <Delay_ms+0x50>
    25a8:	ee 81       	ldd	r30, Y+6	; 0x06

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    25aa:	29 2d       	mov	r18, r9
    25ac:	3a 2d       	mov	r19, r10
    25ae:	4c 81       	ldd	r20, Y+4	; 0x04
    25b0:	5b 2f       	mov	r21, r27
    25b2:	6f 2f       	mov	r22, r31
    25b4:	7e 2f       	mov	r23, r30
    25b6:	87 2d       	mov	r24, r7
    25b8:	98 2d       	mov	r25, r8
    25ba:	a1 e0       	ldi	r26, 0x01	; 1
    25bc:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__adddi3_s8>
    25c0:	92 2e       	mov	r9, r18
    25c2:	3d 83       	std	Y+5, r19	; 0x05
    25c4:	4c 83       	std	Y+4, r20	; 0x04
    25c6:	b5 2f       	mov	r27, r21
    25c8:	f6 2f       	mov	r31, r22
    25ca:	e7 2f       	mov	r30, r23
    25cc:	78 2e       	mov	r7, r24
    25ce:	89 2e       	mov	r8, r25
    25d0:	29 2d       	mov	r18, r9
    25d2:	3d 81       	ldd	r19, Y+5	; 0x05
    25d4:	4c 81       	ldd	r20, Y+4	; 0x04
    25d6:	5b 2f       	mov	r21, r27
    25d8:	6f 2f       	mov	r22, r31
    25da:	7e 2f       	mov	r23, r30
    25dc:	87 2d       	mov	r24, r7
    25de:	98 2d       	mov	r25, r8
    25e0:	a2 2c       	mov	r10, r2
    25e2:	b3 2c       	mov	r11, r3
    25e4:	c4 2c       	mov	r12, r4
    25e6:	d5 2c       	mov	r13, r5
    25e8:	e6 2c       	mov	r14, r6
    25ea:	f9 80       	ldd	r15, Y+1	; 0x01
    25ec:	0a 81       	ldd	r16, Y+2	; 0x02
    25ee:	1b 81       	ldd	r17, Y+3	; 0x03
    25f0:	0e 94 74 21 	call	0x42e8	; 0x42e8 <__cmpdi2>
    25f4:	08 f4       	brcc	.+2      	; 0x25f8 <Delay_ms+0x100>
    25f6:	bc cf       	rjmp	.-136    	; 0x2570 <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
    25f8:	26 96       	adiw	r28, 0x06	; 6
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	f8 94       	cli
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	cd bf       	out	0x3d, r28	; 61
    2604:	df 91       	pop	r29
    2606:	cf 91       	pop	r28
    2608:	1f 91       	pop	r17
    260a:	0f 91       	pop	r16
    260c:	ff 90       	pop	r15
    260e:	ef 90       	pop	r14
    2610:	df 90       	pop	r13
    2612:	cf 90       	pop	r12
    2614:	bf 90       	pop	r11
    2616:	af 90       	pop	r10
    2618:	9f 90       	pop	r9
    261a:	8f 90       	pop	r8
    261c:	7f 90       	pop	r7
    261e:	6f 90       	pop	r6
    2620:	5f 90       	pop	r5
    2622:	4f 90       	pop	r4
    2624:	3f 90       	pop	r3
    2626:	2f 90       	pop	r2
    2628:	08 95       	ret

0000262a <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
    262a:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
    262c:	89 2b       	or	r24, r25
    262e:	09 f4       	brne	.+2      	; 0x2632 <Dio_init+0x8>
    2630:	e4 c0       	rjmp	.+456    	; 0x27fa <Dio_init+0x1d0>
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	d7 c0       	rjmp	.+430    	; 0x27e4 <Dio_init+0x1ba>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
    2636:	e9 2f       	mov	r30, r25
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	ee 0f       	add	r30, r30
    263c:	ff 1f       	adc	r31, r31
    263e:	ee 0f       	add	r30, r30
    2640:	ff 1f       	adc	r31, r31
    2642:	e4 0f       	add	r30, r20
    2644:	f5 1f       	adc	r31, r21
    2646:	31 81       	ldd	r19, Z+1	; 0x01
    2648:	38 30       	cpi	r19, 0x08	; 8
    264a:	08 f0       	brcs	.+2      	; 0x264e <Dio_init+0x24>
    264c:	d8 c0       	rjmp	.+432    	; 0x27fe <Dio_init+0x1d4>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
    264e:	20 81       	ld	r18, Z
    2650:	21 30       	cpi	r18, 0x01	; 1
    2652:	c1 f1       	breq	.+112    	; 0x26c4 <Dio_init+0x9a>
    2654:	38 f0       	brcs	.+14     	; 0x2664 <Dio_init+0x3a>
    2656:	22 30       	cpi	r18, 0x02	; 2
    2658:	09 f4       	brne	.+2      	; 0x265c <Dio_init+0x32>
    265a:	64 c0       	rjmp	.+200    	; 0x2724 <Dio_init+0xfa>
    265c:	23 30       	cpi	r18, 0x03	; 3
    265e:	09 f4       	brne	.+2      	; 0x2662 <Dio_init+0x38>
    2660:	91 c0       	rjmp	.+290    	; 0x2784 <Dio_init+0x15a>
    2662:	cf c0       	rjmp	.+414    	; 0x2802 <Dio_init+0x1d8>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2664:	2a b3       	in	r18, 0x1a	; 26
    2666:	61 e0       	ldi	r22, 0x01	; 1
    2668:	70 e0       	ldi	r23, 0x00	; 0
    266a:	db 01       	movw	r26, r22
    266c:	02 c0       	rjmp	.+4      	; 0x2672 <Dio_init+0x48>
    266e:	aa 0f       	add	r26, r26
    2670:	bb 1f       	adc	r27, r27
    2672:	3a 95       	dec	r19
    2674:	e2 f7       	brpl	.-8      	; 0x266e <Dio_init+0x44>
    2676:	8a 2f       	mov	r24, r26
    2678:	80 95       	com	r24
    267a:	82 23       	and	r24, r18
    267c:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    267e:	aa b3       	in	r26, 0x1a	; 26
    2680:	82 81       	ldd	r24, Z+2	; 0x02
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	01 80       	ldd	r0, Z+1	; 0x01
    2688:	02 c0       	rjmp	.+4      	; 0x268e <Dio_init+0x64>
    268a:	22 0f       	add	r18, r18
    268c:	33 1f       	adc	r19, r19
    268e:	0a 94       	dec	r0
    2690:	e2 f7       	brpl	.-8      	; 0x268a <Dio_init+0x60>
    2692:	2a 2b       	or	r18, r26
    2694:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2696:	8b b3       	in	r24, 0x1b	; 27
    2698:	01 80       	ldd	r0, Z+1	; 0x01
    269a:	02 c0       	rjmp	.+4      	; 0x26a0 <Dio_init+0x76>
    269c:	66 0f       	add	r22, r22
    269e:	77 1f       	adc	r23, r23
    26a0:	0a 94       	dec	r0
    26a2:	e2 f7       	brpl	.-8      	; 0x269c <Dio_init+0x72>
    26a4:	60 95       	com	r22
    26a6:	68 23       	and	r22, r24
    26a8:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    26aa:	6b b3       	in	r22, 0x1b	; 27
    26ac:	83 81       	ldd	r24, Z+3	; 0x03
    26ae:	28 2f       	mov	r18, r24
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	01 80       	ldd	r0, Z+1	; 0x01
    26b4:	02 c0       	rjmp	.+4      	; 0x26ba <Dio_init+0x90>
    26b6:	22 0f       	add	r18, r18
    26b8:	33 1f       	adc	r19, r19
    26ba:	0a 94       	dec	r0
    26bc:	e2 f7       	brpl	.-8      	; 0x26b6 <Dio_init+0x8c>
    26be:	26 2b       	or	r18, r22
    26c0:	2b bb       	out	0x1b, r18	; 27
				break;
    26c2:	8f c0       	rjmp	.+286    	; 0x27e2 <Dio_init+0x1b8>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    26c4:	27 b3       	in	r18, 0x17	; 23
    26c6:	61 e0       	ldi	r22, 0x01	; 1
    26c8:	70 e0       	ldi	r23, 0x00	; 0
    26ca:	db 01       	movw	r26, r22
    26cc:	02 c0       	rjmp	.+4      	; 0x26d2 <Dio_init+0xa8>
    26ce:	aa 0f       	add	r26, r26
    26d0:	bb 1f       	adc	r27, r27
    26d2:	3a 95       	dec	r19
    26d4:	e2 f7       	brpl	.-8      	; 0x26ce <Dio_init+0xa4>
    26d6:	8a 2f       	mov	r24, r26
    26d8:	80 95       	com	r24
    26da:	82 23       	and	r24, r18
    26dc:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    26de:	a7 b3       	in	r26, 0x17	; 23
    26e0:	82 81       	ldd	r24, Z+2	; 0x02
    26e2:	28 2f       	mov	r18, r24
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	01 80       	ldd	r0, Z+1	; 0x01
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <Dio_init+0xc4>
    26ea:	22 0f       	add	r18, r18
    26ec:	33 1f       	adc	r19, r19
    26ee:	0a 94       	dec	r0
    26f0:	e2 f7       	brpl	.-8      	; 0x26ea <Dio_init+0xc0>
    26f2:	2a 2b       	or	r18, r26
    26f4:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    26f6:	88 b3       	in	r24, 0x18	; 24
    26f8:	01 80       	ldd	r0, Z+1	; 0x01
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <Dio_init+0xd6>
    26fc:	66 0f       	add	r22, r22
    26fe:	77 1f       	adc	r23, r23
    2700:	0a 94       	dec	r0
    2702:	e2 f7       	brpl	.-8      	; 0x26fc <Dio_init+0xd2>
    2704:	60 95       	com	r22
    2706:	68 23       	and	r22, r24
    2708:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    270a:	68 b3       	in	r22, 0x18	; 24
    270c:	83 81       	ldd	r24, Z+3	; 0x03
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	01 80       	ldd	r0, Z+1	; 0x01
    2714:	02 c0       	rjmp	.+4      	; 0x271a <Dio_init+0xf0>
    2716:	22 0f       	add	r18, r18
    2718:	33 1f       	adc	r19, r19
    271a:	0a 94       	dec	r0
    271c:	e2 f7       	brpl	.-8      	; 0x2716 <Dio_init+0xec>
    271e:	26 2b       	or	r18, r22
    2720:	28 bb       	out	0x18, r18	; 24
				break;
    2722:	5f c0       	rjmp	.+190    	; 0x27e2 <Dio_init+0x1b8>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2724:	24 b3       	in	r18, 0x14	; 20
    2726:	61 e0       	ldi	r22, 0x01	; 1
    2728:	70 e0       	ldi	r23, 0x00	; 0
    272a:	db 01       	movw	r26, r22
    272c:	02 c0       	rjmp	.+4      	; 0x2732 <Dio_init+0x108>
    272e:	aa 0f       	add	r26, r26
    2730:	bb 1f       	adc	r27, r27
    2732:	3a 95       	dec	r19
    2734:	e2 f7       	brpl	.-8      	; 0x272e <Dio_init+0x104>
    2736:	8a 2f       	mov	r24, r26
    2738:	80 95       	com	r24
    273a:	82 23       	and	r24, r18
    273c:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    273e:	a4 b3       	in	r26, 0x14	; 20
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	28 2f       	mov	r18, r24
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	01 80       	ldd	r0, Z+1	; 0x01
    2748:	02 c0       	rjmp	.+4      	; 0x274e <Dio_init+0x124>
    274a:	22 0f       	add	r18, r18
    274c:	33 1f       	adc	r19, r19
    274e:	0a 94       	dec	r0
    2750:	e2 f7       	brpl	.-8      	; 0x274a <Dio_init+0x120>
    2752:	2a 2b       	or	r18, r26
    2754:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2756:	85 b3       	in	r24, 0x15	; 21
    2758:	01 80       	ldd	r0, Z+1	; 0x01
    275a:	02 c0       	rjmp	.+4      	; 0x2760 <Dio_init+0x136>
    275c:	66 0f       	add	r22, r22
    275e:	77 1f       	adc	r23, r23
    2760:	0a 94       	dec	r0
    2762:	e2 f7       	brpl	.-8      	; 0x275c <Dio_init+0x132>
    2764:	60 95       	com	r22
    2766:	68 23       	and	r22, r24
    2768:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    276a:	65 b3       	in	r22, 0x15	; 21
    276c:	83 81       	ldd	r24, Z+3	; 0x03
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	01 80       	ldd	r0, Z+1	; 0x01
    2774:	02 c0       	rjmp	.+4      	; 0x277a <Dio_init+0x150>
    2776:	22 0f       	add	r18, r18
    2778:	33 1f       	adc	r19, r19
    277a:	0a 94       	dec	r0
    277c:	e2 f7       	brpl	.-8      	; 0x2776 <Dio_init+0x14c>
    277e:	26 2b       	or	r18, r22
    2780:	25 bb       	out	0x15, r18	; 21
				break;
    2782:	2f c0       	rjmp	.+94     	; 0x27e2 <Dio_init+0x1b8>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2784:	21 b3       	in	r18, 0x11	; 17
    2786:	61 e0       	ldi	r22, 0x01	; 1
    2788:	70 e0       	ldi	r23, 0x00	; 0
    278a:	db 01       	movw	r26, r22
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <Dio_init+0x168>
    278e:	aa 0f       	add	r26, r26
    2790:	bb 1f       	adc	r27, r27
    2792:	3a 95       	dec	r19
    2794:	e2 f7       	brpl	.-8      	; 0x278e <Dio_init+0x164>
    2796:	8a 2f       	mov	r24, r26
    2798:	80 95       	com	r24
    279a:	82 23       	and	r24, r18
    279c:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    279e:	a1 b3       	in	r26, 0x11	; 17
    27a0:	82 81       	ldd	r24, Z+2	; 0x02
    27a2:	28 2f       	mov	r18, r24
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	01 80       	ldd	r0, Z+1	; 0x01
    27a8:	02 c0       	rjmp	.+4      	; 0x27ae <Dio_init+0x184>
    27aa:	22 0f       	add	r18, r18
    27ac:	33 1f       	adc	r19, r19
    27ae:	0a 94       	dec	r0
    27b0:	e2 f7       	brpl	.-8      	; 0x27aa <Dio_init+0x180>
    27b2:	2a 2b       	or	r18, r26
    27b4:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    27b6:	82 b3       	in	r24, 0x12	; 18
    27b8:	01 80       	ldd	r0, Z+1	; 0x01
    27ba:	02 c0       	rjmp	.+4      	; 0x27c0 <Dio_init+0x196>
    27bc:	66 0f       	add	r22, r22
    27be:	77 1f       	adc	r23, r23
    27c0:	0a 94       	dec	r0
    27c2:	e2 f7       	brpl	.-8      	; 0x27bc <Dio_init+0x192>
    27c4:	60 95       	com	r22
    27c6:	68 23       	and	r22, r24
    27c8:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    27ca:	62 b3       	in	r22, 0x12	; 18
    27cc:	83 81       	ldd	r24, Z+3	; 0x03
    27ce:	28 2f       	mov	r18, r24
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	01 80       	ldd	r0, Z+1	; 0x01
    27d4:	02 c0       	rjmp	.+4      	; 0x27da <Dio_init+0x1b0>
    27d6:	22 0f       	add	r18, r18
    27d8:	33 1f       	adc	r19, r19
    27da:	0a 94       	dec	r0
    27dc:	e2 f7       	brpl	.-8      	; 0x27d6 <Dio_init+0x1ac>
    27de:	26 2b       	or	r18, r22
    27e0:	22 bb       	out	0x12, r18	; 18
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
    27e2:	9f 5f       	subi	r25, 0xFF	; 255
    27e4:	94 31       	cpi	r25, 0x14	; 20
    27e6:	08 f4       	brcc	.+2      	; 0x27ea <Dio_init+0x1c0>
    27e8:	26 cf       	rjmp	.-436    	; 0x2636 <Dio_init+0xc>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
    27ea:	50 93 c1 06 	sts	0x06C1, r21	; 0x8006c1 <pstrDio_pinsConfig+0x1>
    27ee:	40 93 c0 06 	sts	0x06C0, r20	; 0x8006c0 <pstrDio_pinsConfig>
	u8_Dio_Status = DIO_INITIALIZED;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
    27f8:	08 95       	ret
{
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
    27fa:	85 e0       	ldi	r24, 0x05	; 5
    27fc:	08 95       	ret
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
    27fe:	83 e0       	ldi	r24, 0x03	; 3
    2800:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
    2802:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
    2804:	08 95       	ret

00002806 <Dio_writePin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    2806:	85 31       	cpi	r24, 0x15	; 21
    2808:	08 f0       	brcs	.+2      	; 0x280c <Dio_writePin+0x6>
    280a:	90 c0       	rjmp	.+288    	; 0x292c <Dio_writePin+0x126>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    280c:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <u8_Dio_Status>
    2810:	99 23       	and	r25, r25
    2812:	09 f4       	brne	.+2      	; 0x2816 <Dio_writePin+0x10>
    2814:	8d c0       	rjmp	.+282    	; 0x2930 <Dio_writePin+0x12a>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    2816:	e8 2f       	mov	r30, r24
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	cf 01       	movw	r24, r30
    281c:	88 0f       	add	r24, r24
    281e:	99 1f       	adc	r25, r25
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	e0 91 c0 06 	lds	r30, 0x06C0	; 0x8006c0 <pstrDio_pinsConfig>
    2828:	f0 91 c1 06 	lds	r31, 0x06C1	; 0x8006c1 <pstrDio_pinsConfig+0x1>
    282c:	e8 0f       	add	r30, r24
    282e:	f9 1f       	adc	r31, r25
    2830:	80 81       	ld	r24, Z
    2832:	81 30       	cpi	r24, 0x01	; 1
    2834:	21 f1       	breq	.+72     	; 0x287e <Dio_writePin+0x78>
    2836:	30 f0       	brcs	.+12     	; 0x2844 <Dio_writePin+0x3e>
    2838:	82 30       	cpi	r24, 0x02	; 2
    283a:	f1 f1       	breq	.+124    	; 0x28b8 <Dio_writePin+0xb2>
    283c:	83 30       	cpi	r24, 0x03	; 3
    283e:	09 f4       	brne	.+2      	; 0x2842 <Dio_writePin+0x3c>
    2840:	58 c0       	rjmp	.+176    	; 0x28f2 <Dio_writePin+0xec>
    2842:	78 c0       	rjmp	.+240    	; 0x2934 <Dio_writePin+0x12e>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
    2844:	61 30       	cpi	r22, 0x01	; 1
    2846:	69 f4       	brne	.+26     	; 0x2862 <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2848:	2b b3       	in	r18, 0x1b	; 27
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	01 80       	ldd	r0, Z+1	; 0x01
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <Dio_writePin+0x50>
    2852:	88 0f       	add	r24, r24
    2854:	99 1f       	adc	r25, r25
    2856:	0a 94       	dec	r0
    2858:	e2 f7       	brpl	.-8      	; 0x2852 <Dio_writePin+0x4c>
    285a:	82 2b       	or	r24, r18
    285c:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2862:	2b b3       	in	r18, 0x1b	; 27
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	01 80       	ldd	r0, Z+1	; 0x01
    286a:	02 c0       	rjmp	.+4      	; 0x2870 <Dio_writePin+0x6a>
    286c:	88 0f       	add	r24, r24
    286e:	99 1f       	adc	r25, r25
    2870:	0a 94       	dec	r0
    2872:	e2 f7       	brpl	.-8      	; 0x286c <Dio_writePin+0x66>
    2874:	80 95       	com	r24
    2876:	82 23       	and	r24, r18
    2878:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
    287e:	61 30       	cpi	r22, 0x01	; 1
    2880:	69 f4       	brne	.+26     	; 0x289c <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2882:	28 b3       	in	r18, 0x18	; 24
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	01 80       	ldd	r0, Z+1	; 0x01
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <Dio_writePin+0x8a>
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	0a 94       	dec	r0
    2892:	e2 f7       	brpl	.-8      	; 0x288c <Dio_writePin+0x86>
    2894:	82 2b       	or	r24, r18
    2896:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    289c:	28 b3       	in	r18, 0x18	; 24
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	01 80       	ldd	r0, Z+1	; 0x01
    28a4:	02 c0       	rjmp	.+4      	; 0x28aa <Dio_writePin+0xa4>
    28a6:	88 0f       	add	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	0a 94       	dec	r0
    28ac:	e2 f7       	brpl	.-8      	; 0x28a6 <Dio_writePin+0xa0>
    28ae:	80 95       	com	r24
    28b0:	82 23       	and	r24, r18
    28b2:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
    28b8:	61 30       	cpi	r22, 0x01	; 1
    28ba:	69 f4       	brne	.+26     	; 0x28d6 <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    28bc:	25 b3       	in	r18, 0x15	; 21
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	01 80       	ldd	r0, Z+1	; 0x01
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <Dio_writePin+0xc4>
    28c6:	88 0f       	add	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	0a 94       	dec	r0
    28cc:	e2 f7       	brpl	.-8      	; 0x28c6 <Dio_writePin+0xc0>
    28ce:	82 2b       	or	r24, r18
    28d0:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    28d6:	25 b3       	in	r18, 0x15	; 21
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	01 80       	ldd	r0, Z+1	; 0x01
    28de:	02 c0       	rjmp	.+4      	; 0x28e4 <Dio_writePin+0xde>
    28e0:	88 0f       	add	r24, r24
    28e2:	99 1f       	adc	r25, r25
    28e4:	0a 94       	dec	r0
    28e6:	e2 f7       	brpl	.-8      	; 0x28e0 <Dio_writePin+0xda>
    28e8:	80 95       	com	r24
    28ea:	82 23       	and	r24, r18
    28ec:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
    28f2:	61 30       	cpi	r22, 0x01	; 1
    28f4:	69 f4       	brne	.+26     	; 0x2910 <Dio_writePin+0x10a>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    28f6:	22 b3       	in	r18, 0x12	; 18
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	01 80       	ldd	r0, Z+1	; 0x01
    28fe:	02 c0       	rjmp	.+4      	; 0x2904 <Dio_writePin+0xfe>
    2900:	88 0f       	add	r24, r24
    2902:	99 1f       	adc	r25, r25
    2904:	0a 94       	dec	r0
    2906:	e2 f7       	brpl	.-8      	; 0x2900 <Dio_writePin+0xfa>
    2908:	82 2b       	or	r24, r18
    290a:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2910:	22 b3       	in	r18, 0x12	; 18
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	01 80       	ldd	r0, Z+1	; 0x01
    2918:	02 c0       	rjmp	.+4      	; 0x291e <Dio_writePin+0x118>
    291a:	88 0f       	add	r24, r24
    291c:	99 1f       	adc	r25, r25
    291e:	0a 94       	dec	r0
    2920:	e2 f7       	brpl	.-8      	; 0x291a <Dio_writePin+0x114>
    2922:	80 95       	com	r24
    2924:	82 23       	and	r24, r18
    2926:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	08 95       	ret
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    292c:	82 e0       	ldi	r24, 0x02	; 2
    292e:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    2930:	86 e0       	ldi	r24, 0x06	; 6
    2932:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    2934:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
    2936:	08 95       	ret

00002938 <Dio_togglePin>:
* Description: Function to Toggle data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    2938:	85 31       	cpi	r24, 0x15	; 21
    293a:	08 f0       	brcs	.+2      	; 0x293e <Dio_togglePin+0x6>
    293c:	4f c0       	rjmp	.+158    	; 0x29dc <Dio_togglePin+0xa4>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    293e:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <u8_Dio_Status>
    2942:	99 23       	and	r25, r25
    2944:	09 f4       	brne	.+2      	; 0x2948 <Dio_togglePin+0x10>
    2946:	4c c0       	rjmp	.+152    	; 0x29e0 <Dio_togglePin+0xa8>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    2948:	e8 2f       	mov	r30, r24
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	cf 01       	movw	r24, r30
    294e:	88 0f       	add	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	88 0f       	add	r24, r24
    2954:	99 1f       	adc	r25, r25
    2956:	e0 91 c0 06 	lds	r30, 0x06C0	; 0x8006c0 <pstrDio_pinsConfig>
    295a:	f0 91 c1 06 	lds	r31, 0x06C1	; 0x8006c1 <pstrDio_pinsConfig+0x1>
    295e:	e8 0f       	add	r30, r24
    2960:	f9 1f       	adc	r31, r25
    2962:	80 81       	ld	r24, Z
    2964:	81 30       	cpi	r24, 0x01	; 1
    2966:	99 f0       	breq	.+38     	; 0x298e <Dio_togglePin+0x56>
    2968:	28 f0       	brcs	.+10     	; 0x2974 <Dio_togglePin+0x3c>
    296a:	82 30       	cpi	r24, 0x02	; 2
    296c:	e9 f0       	breq	.+58     	; 0x29a8 <Dio_togglePin+0x70>
    296e:	83 30       	cpi	r24, 0x03	; 3
    2970:	41 f1       	breq	.+80     	; 0x29c2 <Dio_togglePin+0x8a>
    2972:	38 c0       	rjmp	.+112    	; 0x29e4 <Dio_togglePin+0xac>
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2974:	2b b3       	in	r18, 0x1b	; 27
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	01 80       	ldd	r0, Z+1	; 0x01
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <Dio_togglePin+0x4a>
    297e:	88 0f       	add	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	0a 94       	dec	r0
    2984:	e2 f7       	brpl	.-8      	; 0x297e <Dio_togglePin+0x46>
    2986:	82 27       	eor	r24, r18
    2988:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    298a:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    298c:	08 95       	ret
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    298e:	28 b3       	in	r18, 0x18	; 24
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	01 80       	ldd	r0, Z+1	; 0x01
    2996:	02 c0       	rjmp	.+4      	; 0x299c <Dio_togglePin+0x64>
    2998:	88 0f       	add	r24, r24
    299a:	99 1f       	adc	r25, r25
    299c:	0a 94       	dec	r0
    299e:	e2 f7       	brpl	.-8      	; 0x2998 <Dio_togglePin+0x60>
    29a0:	82 27       	eor	r24, r18
    29a2:	88 bb       	out	0x18, r24	; 24
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    29a4:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    29a6:	08 95       	ret
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    29a8:	25 b3       	in	r18, 0x15	; 21
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	01 80       	ldd	r0, Z+1	; 0x01
    29b0:	02 c0       	rjmp	.+4      	; 0x29b6 <Dio_togglePin+0x7e>
    29b2:	88 0f       	add	r24, r24
    29b4:	99 1f       	adc	r25, r25
    29b6:	0a 94       	dec	r0
    29b8:	e2 f7       	brpl	.-8      	; 0x29b2 <Dio_togglePin+0x7a>
    29ba:	82 27       	eor	r24, r18
    29bc:	85 bb       	out	0x15, r24	; 21
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    29be:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    29c0:	08 95       	ret
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    29c2:	22 b3       	in	r18, 0x12	; 18
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	01 80       	ldd	r0, Z+1	; 0x01
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <Dio_togglePin+0x98>
    29cc:	88 0f       	add	r24, r24
    29ce:	99 1f       	adc	r25, r25
    29d0:	0a 94       	dec	r0
    29d2:	e2 f7       	brpl	.-8      	; 0x29cc <Dio_togglePin+0x94>
    29d4:	82 27       	eor	r24, r18
    29d6:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    29d8:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    29da:	08 95       	ret
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    29dc:	82 e0       	ldi	r24, 0x02	; 2
    29de:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    29e0:	86 e0       	ldi	r24, 0x06	; 6
    29e2:	08 95       	ret
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    29e4:	84 e0       	ldi	r24, 0x04	; 4
	}	
	return DIO_STATUS_ERROR_OK;
}
    29e6:	08 95       	ret

000029e8 <Dio_readPin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    29e8:	85 31       	cpi	r24, 0x15	; 21
    29ea:	08 f0       	brcs	.+2      	; 0x29ee <Dio_readPin+0x6>
    29ec:	7c c0       	rjmp	.+248    	; 0x2ae6 <Dio_readPin+0xfe>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    29ee:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <u8_Dio_Status>
    29f2:	99 23       	and	r25, r25
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <Dio_readPin+0x10>
    29f6:	79 c0       	rjmp	.+242    	; 0x2aea <Dio_readPin+0x102>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    29f8:	e8 2f       	mov	r30, r24
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	cf 01       	movw	r24, r30
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	88 0f       	add	r24, r24
    2a04:	99 1f       	adc	r25, r25
    2a06:	e0 91 c0 06 	lds	r30, 0x06C0	; 0x8006c0 <pstrDio_pinsConfig>
    2a0a:	f0 91 c1 06 	lds	r31, 0x06C1	; 0x8006c1 <pstrDio_pinsConfig+0x1>
    2a0e:	e8 0f       	add	r30, r24
    2a10:	f9 1f       	adc	r31, r25
    2a12:	80 81       	ld	r24, Z
    2a14:	81 30       	cpi	r24, 0x01	; 1
    2a16:	f9 f0       	breq	.+62     	; 0x2a56 <Dio_readPin+0x6e>
    2a18:	30 f0       	brcs	.+12     	; 0x2a26 <Dio_readPin+0x3e>
    2a1a:	82 30       	cpi	r24, 0x02	; 2
    2a1c:	a1 f1       	breq	.+104    	; 0x2a86 <Dio_readPin+0x9e>
    2a1e:	83 30       	cpi	r24, 0x03	; 3
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <Dio_readPin+0x3c>
    2a22:	49 c0       	rjmp	.+146    	; 0x2ab6 <Dio_readPin+0xce>
    2a24:	64 c0       	rjmp	.+200    	; 0x2aee <Dio_readPin+0x106>
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2a26:	49 b3       	in	r20, 0x19	; 25
    2a28:	51 81       	ldd	r21, Z+1	; 0x01
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	9c 01       	movw	r18, r24
    2a30:	05 2e       	mov	r0, r21
    2a32:	02 c0       	rjmp	.+4      	; 0x2a38 <Dio_readPin+0x50>
    2a34:	22 0f       	add	r18, r18
    2a36:	33 1f       	adc	r19, r19
    2a38:	0a 94       	dec	r0
    2a3a:	e2 f7       	brpl	.-8      	; 0x2a34 <Dio_readPin+0x4c>
    2a3c:	84 2f       	mov	r24, r20
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	82 23       	and	r24, r18
    2a42:	93 23       	and	r25, r19
    2a44:	02 c0       	rjmp	.+4      	; 0x2a4a <Dio_readPin+0x62>
    2a46:	95 95       	asr	r25
    2a48:	87 95       	ror	r24
    2a4a:	5a 95       	dec	r21
    2a4c:	e2 f7       	brpl	.-8      	; 0x2a46 <Dio_readPin+0x5e>
    2a4e:	fb 01       	movw	r30, r22
    2a50:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2a52:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2a54:	08 95       	ret
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2a56:	46 b3       	in	r20, 0x16	; 22
    2a58:	51 81       	ldd	r21, Z+1	; 0x01
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	9c 01       	movw	r18, r24
    2a60:	05 2e       	mov	r0, r21
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <Dio_readPin+0x80>
    2a64:	22 0f       	add	r18, r18
    2a66:	33 1f       	adc	r19, r19
    2a68:	0a 94       	dec	r0
    2a6a:	e2 f7       	brpl	.-8      	; 0x2a64 <Dio_readPin+0x7c>
    2a6c:	84 2f       	mov	r24, r20
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	82 23       	and	r24, r18
    2a72:	93 23       	and	r25, r19
    2a74:	02 c0       	rjmp	.+4      	; 0x2a7a <Dio_readPin+0x92>
    2a76:	95 95       	asr	r25
    2a78:	87 95       	ror	r24
    2a7a:	5a 95       	dec	r21
    2a7c:	e2 f7       	brpl	.-8      	; 0x2a76 <Dio_readPin+0x8e>
    2a7e:	fb 01       	movw	r30, r22
    2a80:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2a82:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2a84:	08 95       	ret
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2a86:	43 b3       	in	r20, 0x13	; 19
    2a88:	51 81       	ldd	r21, Z+1	; 0x01
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	9c 01       	movw	r18, r24
    2a90:	05 2e       	mov	r0, r21
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <Dio_readPin+0xb0>
    2a94:	22 0f       	add	r18, r18
    2a96:	33 1f       	adc	r19, r19
    2a98:	0a 94       	dec	r0
    2a9a:	e2 f7       	brpl	.-8      	; 0x2a94 <Dio_readPin+0xac>
    2a9c:	84 2f       	mov	r24, r20
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	82 23       	and	r24, r18
    2aa2:	93 23       	and	r25, r19
    2aa4:	02 c0       	rjmp	.+4      	; 0x2aaa <Dio_readPin+0xc2>
    2aa6:	95 95       	asr	r25
    2aa8:	87 95       	ror	r24
    2aaa:	5a 95       	dec	r21
    2aac:	e2 f7       	brpl	.-8      	; 0x2aa6 <Dio_readPin+0xbe>
    2aae:	fb 01       	movw	r30, r22
    2ab0:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2ab4:	08 95       	ret
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2ab6:	40 b3       	in	r20, 0x10	; 16
    2ab8:	51 81       	ldd	r21, Z+1	; 0x01
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	9c 01       	movw	r18, r24
    2ac0:	05 2e       	mov	r0, r21
    2ac2:	02 c0       	rjmp	.+4      	; 0x2ac8 <Dio_readPin+0xe0>
    2ac4:	22 0f       	add	r18, r18
    2ac6:	33 1f       	adc	r19, r19
    2ac8:	0a 94       	dec	r0
    2aca:	e2 f7       	brpl	.-8      	; 0x2ac4 <Dio_readPin+0xdc>
    2acc:	84 2f       	mov	r24, r20
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	82 23       	and	r24, r18
    2ad2:	93 23       	and	r25, r19
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <Dio_readPin+0xf2>
    2ad6:	95 95       	asr	r25
    2ad8:	87 95       	ror	r24
    2ada:	5a 95       	dec	r21
    2adc:	e2 f7       	brpl	.-8      	; 0x2ad6 <Dio_readPin+0xee>
    2ade:	fb 01       	movw	r30, r22
    2ae0:	80 83       	st	Z, r24
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2ae4:	08 95       	ret
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    2ae6:	82 e0       	ldi	r24, 0x02	; 2
    2ae8:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    2aea:	86 e0       	ldi	r24, 0x06	; 6
    2aec:	08 95       	ret
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    2aee:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
    2af0:	08 95       	ret

00002af2 <__vector_1>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
    2af2:	1f 92       	push	r1
    2af4:	0f 92       	push	r0
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	0f 92       	push	r0
    2afa:	11 24       	eor	r1, r1
    2afc:	2f 93       	push	r18
    2afe:	3f 93       	push	r19
    2b00:	4f 93       	push	r20
    2b02:	5f 93       	push	r21
    2b04:	6f 93       	push	r22
    2b06:	7f 93       	push	r23
    2b08:	8f 93       	push	r24
    2b0a:	9f 93       	push	r25
    2b0c:	af 93       	push	r26
    2b0e:	bf 93       	push	r27
    2b10:	ef 93       	push	r30
    2b12:	ff 93       	push	r31
    2b14:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <INT0_CallBackPtr>
    2b18:	f0 91 c7 06 	lds	r31, 0x06C7	; 0x8006c7 <INT0_CallBackPtr+0x1>
    2b1c:	09 95       	icall
    2b1e:	ff 91       	pop	r31
    2b20:	ef 91       	pop	r30
    2b22:	bf 91       	pop	r27
    2b24:	af 91       	pop	r26
    2b26:	9f 91       	pop	r25
    2b28:	8f 91       	pop	r24
    2b2a:	7f 91       	pop	r23
    2b2c:	6f 91       	pop	r22
    2b2e:	5f 91       	pop	r21
    2b30:	4f 91       	pop	r20
    2b32:	3f 91       	pop	r19
    2b34:	2f 91       	pop	r18
    2b36:	0f 90       	pop	r0
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	0f 90       	pop	r0
    2b3c:	1f 90       	pop	r1
    2b3e:	18 95       	reti

00002b40 <__vector_2>:
    2b40:	1f 92       	push	r1
    2b42:	0f 92       	push	r0
    2b44:	0f b6       	in	r0, 0x3f	; 63
    2b46:	0f 92       	push	r0
    2b48:	11 24       	eor	r1, r1
    2b4a:	2f 93       	push	r18
    2b4c:	3f 93       	push	r19
    2b4e:	4f 93       	push	r20
    2b50:	5f 93       	push	r21
    2b52:	6f 93       	push	r22
    2b54:	7f 93       	push	r23
    2b56:	8f 93       	push	r24
    2b58:	9f 93       	push	r25
    2b5a:	af 93       	push	r26
    2b5c:	bf 93       	push	r27
    2b5e:	ef 93       	push	r30
    2b60:	ff 93       	push	r31
    2b62:	e0 91 c4 06 	lds	r30, 0x06C4	; 0x8006c4 <INT1_CallBackPtr>
    2b66:	f0 91 c5 06 	lds	r31, 0x06C5	; 0x8006c5 <INT1_CallBackPtr+0x1>
    2b6a:	09 95       	icall
    2b6c:	ff 91       	pop	r31
    2b6e:	ef 91       	pop	r30
    2b70:	bf 91       	pop	r27
    2b72:	af 91       	pop	r26
    2b74:	9f 91       	pop	r25
    2b76:	8f 91       	pop	r24
    2b78:	7f 91       	pop	r23
    2b7a:	6f 91       	pop	r22
    2b7c:	5f 91       	pop	r21
    2b7e:	4f 91       	pop	r20
    2b80:	3f 91       	pop	r19
    2b82:	2f 91       	pop	r18
    2b84:	0f 90       	pop	r0
    2b86:	0f be       	out	0x3f, r0	; 63
    2b88:	0f 90       	pop	r0
    2b8a:	1f 90       	pop	r1
    2b8c:	18 95       	reti

00002b8e <__vector_3>:
}
ISR(INT2_IRQ)
{
    2b8e:	1f 92       	push	r1
    2b90:	0f 92       	push	r0
    2b92:	0f b6       	in	r0, 0x3f	; 63
    2b94:	0f 92       	push	r0
    2b96:	11 24       	eor	r1, r1
    2b98:	2f 93       	push	r18
    2b9a:	3f 93       	push	r19
    2b9c:	4f 93       	push	r20
    2b9e:	5f 93       	push	r21
    2ba0:	6f 93       	push	r22
    2ba2:	7f 93       	push	r23
    2ba4:	8f 93       	push	r24
    2ba6:	9f 93       	push	r25
    2ba8:	af 93       	push	r26
    2baa:	bf 93       	push	r27
    2bac:	ef 93       	push	r30
    2bae:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
    2bb0:	e0 91 c2 06 	lds	r30, 0x06C2	; 0x8006c2 <INT2_CallBackPtr>
    2bb4:	f0 91 c3 06 	lds	r31, 0x06C3	; 0x8006c3 <INT2_CallBackPtr+0x1>
    2bb8:	09 95       	icall
}
    2bba:	ff 91       	pop	r31
    2bbc:	ef 91       	pop	r30
    2bbe:	bf 91       	pop	r27
    2bc0:	af 91       	pop	r26
    2bc2:	9f 91       	pop	r25
    2bc4:	8f 91       	pop	r24
    2bc6:	7f 91       	pop	r23
    2bc8:	6f 91       	pop	r22
    2bca:	5f 91       	pop	r21
    2bcc:	4f 91       	pop	r20
    2bce:	3f 91       	pop	r19
    2bd0:	2f 91       	pop	r18
    2bd2:	0f 90       	pop	r0
    2bd4:	0f be       	out	0x3f, r0	; 63
    2bd6:	0f 90       	pop	r0
    2bd8:	1f 90       	pop	r1
    2bda:	18 95       	reti

00002bdc <Gpt_ISRHandler>:
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_EXPIRED;
	return GPT_STATUS_ERROR_OK;
}
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	0e c0       	rjmp	.+28     	; 0x2bfc <Gpt_ISRHandler+0x20>
    2be0:	29 2f       	mov	r18, r25
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	f9 01       	movw	r30, r18
    2be6:	ee 0f       	add	r30, r30
    2be8:	ff 1f       	adc	r31, r31
    2bea:	2e 0f       	add	r18, r30
    2bec:	3f 1f       	adc	r19, r31
    2bee:	f9 01       	movw	r30, r18
    2bf0:	e8 59       	subi	r30, 0x98	; 152
    2bf2:	fa 4f       	sbci	r31, 0xFA	; 250
    2bf4:	20 81       	ld	r18, Z
    2bf6:	28 17       	cp	r18, r24
    2bf8:	19 f0       	breq	.+6      	; 0x2c00 <Gpt_ISRHandler+0x24>
    2bfa:	9f 5f       	subi	r25, 0xFF	; 255
    2bfc:	99 23       	and	r25, r25
    2bfe:	81 f3       	breq	.-32     	; 0x2be0 <Gpt_ISRHandler+0x4>
    2c00:	89 2f       	mov	r24, r25
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	fc 01       	movw	r30, r24
    2c06:	ee 0f       	add	r30, r30
    2c08:	ff 1f       	adc	r31, r31
    2c0a:	ee 0f       	add	r30, r30
    2c0c:	ff 1f       	adc	r31, r31
    2c0e:	e7 53       	subi	r30, 0x37	; 55
    2c10:	f9 4f       	sbci	r31, 0xF9	; 249
    2c12:	40 81       	ld	r20, Z
    2c14:	51 81       	ldd	r21, Z+1	; 0x01
    2c16:	62 81       	ldd	r22, Z+2	; 0x02
    2c18:	73 81       	ldd	r23, Z+3	; 0x03
    2c1a:	41 15       	cp	r20, r1
    2c1c:	51 05       	cpc	r21, r1
    2c1e:	61 05       	cpc	r22, r1
    2c20:	71 05       	cpc	r23, r1
    2c22:	81 f0       	breq	.+32     	; 0x2c44 <Gpt_ISRHandler+0x68>
    2c24:	88 0f       	add	r24, r24
    2c26:	99 1f       	adc	r25, r25
    2c28:	88 0f       	add	r24, r24
    2c2a:	99 1f       	adc	r25, r25
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	e7 53       	subi	r30, 0x37	; 55
    2c30:	f9 4f       	sbci	r31, 0xF9	; 249
    2c32:	41 50       	subi	r20, 0x01	; 1
    2c34:	51 09       	sbc	r21, r1
    2c36:	61 09       	sbc	r22, r1
    2c38:	71 09       	sbc	r23, r1
    2c3a:	40 83       	st	Z, r20
    2c3c:	51 83       	std	Z+1, r21	; 0x01
    2c3e:	62 83       	std	Z+2, r22	; 0x02
    2c40:	73 83       	std	Z+3, r23	; 0x03
    2c42:	08 95       	ret
    2c44:	23 b7       	in	r18, 0x33	; 51
    2c46:	2e 7f       	andi	r18, 0xFE	; 254
    2c48:	23 bf       	out	0x33, r18	; 51
    2c4a:	23 b7       	in	r18, 0x33	; 51
    2c4c:	2d 7f       	andi	r18, 0xFD	; 253
    2c4e:	23 bf       	out	0x33, r18	; 51
    2c50:	23 b7       	in	r18, 0x33	; 51
    2c52:	2b 7f       	andi	r18, 0xFB	; 251
    2c54:	23 bf       	out	0x33, r18	; 51
    2c56:	29 b7       	in	r18, 0x39	; 57
    2c58:	2e 7f       	andi	r18, 0xFE	; 254
    2c5a:	29 bf       	out	0x39, r18	; 57
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	e3 53       	subi	r30, 0x33	; 51
    2c60:	f9 4f       	sbci	r31, 0xF9	; 249
    2c62:	24 e0       	ldi	r18, 0x04	; 4
    2c64:	20 83       	st	Z, r18
    2c66:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <Gpt_Timer0_CallBackPtr>
    2c6a:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <Gpt_Timer0_CallBackPtr+0x1>
    2c6e:	09 95       	icall
    2c70:	08 95       	ret

00002c72 <GptInit>:
    2c72:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <genu_GPTModStatus>
    2c76:	81 30       	cpi	r24, 0x01	; 1
    2c78:	61 f1       	breq	.+88     	; 0x2cd2 <GptInit+0x60>
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	24 c0       	rjmp	.+72     	; 0x2cc6 <GptInit+0x54>
    2c7e:	82 2f       	mov	r24, r18
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	fc 01       	movw	r30, r24
    2c84:	ee 0f       	add	r30, r30
    2c86:	ff 1f       	adc	r31, r31
    2c88:	e8 0f       	add	r30, r24
    2c8a:	f9 1f       	adc	r31, r25
    2c8c:	e8 59       	subi	r30, 0x98	; 152
    2c8e:	fa 4f       	sbci	r31, 0xFA	; 250
    2c90:	30 81       	ld	r19, Z
    2c92:	33 23       	and	r19, r19
    2c94:	19 f0       	breq	.+6      	; 0x2c9c <GptInit+0x2a>
    2c96:	33 30       	cpi	r19, 0x03	; 3
    2c98:	f0 f4       	brcc	.+60     	; 0x2cd6 <GptInit+0x64>
    2c9a:	0f c0       	rjmp	.+30     	; 0x2cba <GptInit+0x48>
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	ee 0f       	add	r30, r30
    2ca0:	ff 1f       	adc	r31, r31
    2ca2:	e8 0f       	add	r30, r24
    2ca4:	f9 1f       	adc	r31, r25
    2ca6:	e8 59       	subi	r30, 0x98	; 152
    2ca8:	fa 4f       	sbci	r31, 0xFA	; 250
    2caa:	32 81       	ldd	r19, Z+2	; 0x02
    2cac:	31 11       	cpse	r19, r1
    2cae:	05 c0       	rjmp	.+10     	; 0x2cba <GptInit+0x48>
    2cb0:	13 be       	out	0x33, r1	; 51
    2cb2:	39 b7       	in	r19, 0x39	; 57
    2cb4:	3c 7f       	andi	r19, 0xFC	; 252
    2cb6:	39 bf       	out	0x39, r19	; 57
    2cb8:	12 be       	out	0x32, r1	; 50
    2cba:	fc 01       	movw	r30, r24
    2cbc:	e3 53       	subi	r30, 0x33	; 51
    2cbe:	f9 4f       	sbci	r31, 0xF9	; 249
    2cc0:	31 e0       	ldi	r19, 0x01	; 1
    2cc2:	30 83       	st	Z, r19
    2cc4:	2f 5f       	subi	r18, 0xFF	; 255
    2cc6:	22 23       	and	r18, r18
    2cc8:	d1 f2       	breq	.-76     	; 0x2c7e <GptInit+0xc>
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <genu_GPTModStatus>
    2cd0:	08 95       	ret
    2cd2:	83 e0       	ldi	r24, 0x03	; 3
    2cd4:	08 95       	ret
    2cd6:	85 e0       	ldi	r24, 0x05	; 5
    2cd8:	08 95       	ret

00002cda <GptStart_aSync>:
* Return value: enuGpt_Status_t - Returns the status of the function (if there is any error)
* Description: Function to Start the Timer module counting from 0x00 until (u16_Ticks)
               and generate interrupt when OVF.
************************************************************************************/
enuGpt_Status_t GptStart_aSync(u8Gpt_Channel_t ChannelId, u32Gpt_Value_t u16_Ticks, pfGpt_CallBack_t CallBack)
{
    2cda:	0f 93       	push	r16
    2cdc:	1f 93       	push	r17
    2cde:	cf 93       	push	r28
    2ce0:	df 93       	push	r29
    2ce2:	89 01       	movw	r16, r18
	
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    2ce4:	81 11       	cpse	r24, r1
    2ce6:	4a c0       	rjmp	.+148    	; 0x2d7c <GptStart_aSync+0xa2>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    2ce8:	c8 2f       	mov	r28, r24
    2cea:	d0 e0       	ldi	r29, 0x00	; 0
    2cec:	fe 01       	movw	r30, r28
    2cee:	e3 53       	subi	r30, 0x33	; 51
    2cf0:	f9 4f       	sbci	r31, 0xF9	; 249
    2cf2:	80 81       	ld	r24, Z
    2cf4:	88 23       	and	r24, r24
    2cf6:	09 f4       	brne	.+2      	; 0x2cfa <GptStart_aSync+0x20>
    2cf8:	43 c0       	rjmp	.+134    	; 0x2d80 <GptStart_aSync+0xa6>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
    2cfa:	82 30       	cpi	r24, 0x02	; 2
    2cfc:	09 f4       	brne	.+2      	; 0x2d00 <GptStart_aSync+0x26>
    2cfe:	42 c0       	rjmp	.+132    	; 0x2d84 <GptStart_aSync+0xaa>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u16_remainderCount=0;
	
	enuChannelsState[ChannelId] = GPT_RUNNING;
    2d00:	82 e0       	ldi	r24, 0x02	; 2
    2d02:	fe 01       	movw	r30, r28
    2d04:	e3 53       	subi	r30, 0x33	; 51
    2d06:	f9 4f       	sbci	r31, 0xF9	; 249
    2d08:	80 83       	st	Z, r24
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	ee 0f       	add	r30, r30
    2d0e:	ff 1f       	adc	r31, r31
    2d10:	ec 0f       	add	r30, r28
    2d12:	fd 1f       	adc	r31, r29
    2d14:	e8 59       	subi	r30, 0x98	; 152
    2d16:	fa 4f       	sbci	r31, 0xFA	; 250
    2d18:	80 81       	ld	r24, Z
    2d1a:	88 23       	and	r24, r24
    2d1c:	21 f0       	breq	.+8      	; 0x2d26 <GptStart_aSync+0x4c>
    2d1e:	83 30       	cpi	r24, 0x03	; 3
    2d20:	98 f1       	brcs	.+102    	; 0x2d88 <GptStart_aSync+0xae>
		case GPT_TIMER_2: /* In case of Timer 2 */
			break;
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    2d22:	85 e0       	ldi	r24, 0x05	; 5
    2d24:	34 c0       	rjmp	.+104    	; 0x2d8e <GptStart_aSync+0xb4>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Get Number of loops to overflow the timer counter */
			u32_Channels_ISR_Count[ChannelId] = u16_Ticks / GPT_MAX_VALUE_8BIT; //0xFF
    2d26:	cb 01       	movw	r24, r22
    2d28:	ba 01       	movw	r22, r20
    2d2a:	2f ef       	ldi	r18, 0xFF	; 255
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	40 e0       	ldi	r20, 0x00	; 0
    2d30:	50 e0       	ldi	r21, 0x00	; 0
    2d32:	0e 94 31 21 	call	0x4262	; 0x4262 <__udivmodsi4>
    2d36:	fe 01       	movw	r30, r28
    2d38:	ee 0f       	add	r30, r30
    2d3a:	ff 1f       	adc	r31, r31
    2d3c:	ee 0f       	add	r30, r30
    2d3e:	ff 1f       	adc	r31, r31
    2d40:	e7 53       	subi	r30, 0x37	; 55
    2d42:	f9 4f       	sbci	r31, 0xF9	; 249
    2d44:	20 83       	st	Z, r18
    2d46:	31 83       	std	Z+1, r19	; 0x01
    2d48:	42 83       	std	Z+2, r20	; 0x02
    2d4a:	53 83       	std	Z+3, r21	; 0x03
			/* Get Number of extra ticks (remainder) */
			u16_remainderCount = u16_Ticks % GPT_MAX_VALUE_8BIT;
    2d4c:	26 2f       	mov	r18, r22
    2d4e:	37 2f       	mov	r19, r23
			/* Set the interrupt enable */
			REG_SET_BIT(GPT_TIMSK_REG, GPT_TIMSK_TOIE0);
    2d50:	89 b7       	in	r24, 0x39	; 57
    2d52:	81 60       	ori	r24, 0x01	; 1
    2d54:	89 bf       	out	0x39, r24	; 57
			/* Set the callback function pointer */
			Gpt_Timer0_CallBackPtr=CallBack;
    2d56:	10 93 cf 06 	sts	0x06CF, r17	; 0x8006cf <Gpt_Timer0_CallBackPtr+0x1>
    2d5a:	00 93 ce 06 	sts	0x06CE, r16	; 0x8006ce <Gpt_Timer0_CallBackPtr>
			/* Start the clock with the given pre scaler */
			GPT_TCCR0_REG = (Timers_Configurations[ChannelId].enuClock_Src) << GPT_TCCR0_CS00;
    2d5e:	ce 01       	movw	r24, r28
    2d60:	88 0f       	add	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	c8 0f       	add	r28, r24
    2d66:	d9 1f       	adc	r29, r25
    2d68:	c8 59       	subi	r28, 0x98	; 152
    2d6a:	da 4f       	sbci	r29, 0xFA	; 250
    2d6c:	89 81       	ldd	r24, Y+1	; 0x01
    2d6e:	83 bf       	out	0x33, r24	; 51
			/* Run the remainder ticks */
			/* Put the value of the 0xFF - remainderTicks to start count from it */
			if(u16_remainderCount != 0)
    2d70:	23 2b       	or	r18, r19
    2d72:	61 f0       	breq	.+24     	; 0x2d8c <GptStart_aSync+0xb2>
			{
				GPT_TCNT0_REG = 256 - u16_remainderCount;
    2d74:	61 95       	neg	r22
    2d76:	62 bf       	out	0x32, r22	; 50
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	09 c0       	rjmp	.+18     	; 0x2d8e <GptStart_aSync+0xb4>
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    2d7c:	86 e0       	ldi	r24, 0x06	; 6
    2d7e:	07 c0       	rjmp	.+14     	; 0x2d8e <GptStart_aSync+0xb4>
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    2d80:	82 e0       	ldi	r24, 0x02	; 2
    2d82:	05 c0       	rjmp	.+10     	; 0x2d8e <GptStart_aSync+0xb4>
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_BUSY;
    2d84:	87 e0       	ldi	r24, 0x07	; 7
    2d86:	03 c0       	rjmp	.+6      	; 0x2d8e <GptStart_aSync+0xb4>
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	01 c0       	rjmp	.+2      	; 0x2d8e <GptStart_aSync+0xb4>
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
}
    2d8e:	df 91       	pop	r29
    2d90:	cf 91       	pop	r28
    2d92:	1f 91       	pop	r17
    2d94:	0f 91       	pop	r16
    2d96:	08 95       	ret

00002d98 <GptStop>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    2d98:	81 11       	cpse	r24, r1
    2d9a:	23 c0       	rjmp	.+70     	; 0x2de2 <GptStop+0x4a>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	fc 01       	movw	r30, r24
    2da0:	e3 53       	subi	r30, 0x33	; 51
    2da2:	f9 4f       	sbci	r31, 0xF9	; 249
    2da4:	20 81       	ld	r18, Z
    2da6:	22 23       	and	r18, r18
    2da8:	f1 f0       	breq	.+60     	; 0x2de6 <GptStop+0x4e>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
    2daa:	22 30       	cpi	r18, 0x02	; 2
    2dac:	f1 f4       	brne	.+60     	; 0x2dea <GptStop+0x52>

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    2dae:	fc 01       	movw	r30, r24
    2db0:	ee 0f       	add	r30, r30
    2db2:	ff 1f       	adc	r31, r31
    2db4:	e8 0f       	add	r30, r24
    2db6:	f9 1f       	adc	r31, r25
    2db8:	e8 59       	subi	r30, 0x98	; 152
    2dba:	fa 4f       	sbci	r31, 0xFA	; 250
    2dbc:	20 81       	ld	r18, Z
    2dbe:	22 23       	and	r18, r18
    2dc0:	19 f0       	breq	.+6      	; 0x2dc8 <GptStop+0x30>
    2dc2:	23 30       	cpi	r18, 0x03	; 3
    2dc4:	a0 f4       	brcc	.+40     	; 0x2dee <GptStop+0x56>
    2dc6:	06 c0       	rjmp	.+12     	; 0x2dd4 <GptStop+0x3c>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Stop the clock from the timer */
			GPT_TCCR0_REG &= ~(7 << GPT_TCCR0_CS00);
    2dc8:	23 b7       	in	r18, 0x33	; 51
    2dca:	28 7f       	andi	r18, 0xF8	; 248
    2dcc:	23 bf       	out	0x33, r18	; 51
			GPT_TIMSK_REG &= ~(3 << GPT_TIMSK_TOIE0);
    2dce:	29 b7       	in	r18, 0x39	; 57
    2dd0:	2c 7f       	andi	r18, 0xFC	; 252
    2dd2:	29 bf       	out	0x39, r18	; 57
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	e3 53       	subi	r30, 0x33	; 51
    2dd8:	f9 4f       	sbci	r31, 0xF9	; 249
    2dda:	23 e0       	ldi	r18, 0x03	; 3
    2ddc:	20 83       	st	Z, r18
	return GPT_STATUS_ERROR_OK;
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    2de2:	86 e0       	ldi	r24, 0x06	; 6
    2de4:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    2de6:	82 e0       	ldi	r24, 0x02	; 2
    2de8:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_STOPPED;
    2dea:	88 e0       	ldi	r24, 0x08	; 8
    2dec:	08 95       	ret
		case GPT_TIMER_2: /* In case of Timer 2 */
		break;
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    2dee:	85 e0       	ldi	r24, 0x05	; 5
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
    2df0:	08 95       	ret

00002df2 <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    2df2:	1f 92       	push	r1
    2df4:	0f 92       	push	r0
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	0f 92       	push	r0
    2dfa:	11 24       	eor	r1, r1
    2dfc:	2f 93       	push	r18
    2dfe:	3f 93       	push	r19
    2e00:	4f 93       	push	r20
    2e02:	5f 93       	push	r21
    2e04:	6f 93       	push	r22
    2e06:	7f 93       	push	r23
    2e08:	8f 93       	push	r24
    2e0a:	9f 93       	push	r25
    2e0c:	af 93       	push	r26
    2e0e:	bf 93       	push	r27
    2e10:	ef 93       	push	r30
    2e12:	ff 93       	push	r31
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Gpt_ISRHandler>
    2e1a:	ff 91       	pop	r31
    2e1c:	ef 91       	pop	r30
    2e1e:	bf 91       	pop	r27
    2e20:	af 91       	pop	r26
    2e22:	9f 91       	pop	r25
    2e24:	8f 91       	pop	r24
    2e26:	7f 91       	pop	r23
    2e28:	6f 91       	pop	r22
    2e2a:	5f 91       	pop	r21
    2e2c:	4f 91       	pop	r20
    2e2e:	3f 91       	pop	r19
    2e30:	2f 91       	pop	r18
    2e32:	0f 90       	pop	r0
    2e34:	0f be       	out	0x3f, r0	; 63
    2e36:	0f 90       	pop	r0
    2e38:	1f 90       	pop	r1
    2e3a:	18 95       	reti

00002e3c <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    2e3c:	1f 92       	push	r1
    2e3e:	0f 92       	push	r0
    2e40:	0f b6       	in	r0, 0x3f	; 63
    2e42:	0f 92       	push	r0
    2e44:	11 24       	eor	r1, r1
    2e46:	2f 93       	push	r18
    2e48:	3f 93       	push	r19
    2e4a:	4f 93       	push	r20
    2e4c:	5f 93       	push	r21
    2e4e:	6f 93       	push	r22
    2e50:	7f 93       	push	r23
    2e52:	8f 93       	push	r24
    2e54:	9f 93       	push	r25
    2e56:	af 93       	push	r26
    2e58:	bf 93       	push	r27
    2e5a:	ef 93       	push	r30
    2e5c:	ff 93       	push	r31
    2e5e:	80 e0       	ldi	r24, 0x00	; 0
    2e60:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Gpt_ISRHandler>
    2e64:	ff 91       	pop	r31
    2e66:	ef 91       	pop	r30
    2e68:	bf 91       	pop	r27
    2e6a:	af 91       	pop	r26
    2e6c:	9f 91       	pop	r25
    2e6e:	8f 91       	pop	r24
    2e70:	7f 91       	pop	r23
    2e72:	6f 91       	pop	r22
    2e74:	5f 91       	pop	r21
    2e76:	4f 91       	pop	r20
    2e78:	3f 91       	pop	r19
    2e7a:	2f 91       	pop	r18
    2e7c:	0f 90       	pop	r0
    2e7e:	0f be       	out	0x3f, r0	; 63
    2e80:	0f 90       	pop	r0
    2e82:	1f 90       	pop	r1
    2e84:	18 95       	reti

00002e86 <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2e86:	1f 92       	push	r1
    2e88:	0f 92       	push	r0
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	0f 92       	push	r0
    2e8e:	11 24       	eor	r1, r1
    2e90:	2f 93       	push	r18
    2e92:	3f 93       	push	r19
    2e94:	4f 93       	push	r20
    2e96:	5f 93       	push	r21
    2e98:	6f 93       	push	r22
    2e9a:	7f 93       	push	r23
    2e9c:	8f 93       	push	r24
    2e9e:	9f 93       	push	r25
    2ea0:	af 93       	push	r26
    2ea2:	bf 93       	push	r27
    2ea4:	ef 93       	push	r30
    2ea6:	ff 93       	push	r31
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Gpt_ISRHandler>
    2eae:	ff 91       	pop	r31
    2eb0:	ef 91       	pop	r30
    2eb2:	bf 91       	pop	r27
    2eb4:	af 91       	pop	r26
    2eb6:	9f 91       	pop	r25
    2eb8:	8f 91       	pop	r24
    2eba:	7f 91       	pop	r23
    2ebc:	6f 91       	pop	r22
    2ebe:	5f 91       	pop	r21
    2ec0:	4f 91       	pop	r20
    2ec2:	3f 91       	pop	r19
    2ec4:	2f 91       	pop	r18
    2ec6:	0f 90       	pop	r0
    2ec8:	0f be       	out	0x3f, r0	; 63
    2eca:	0f 90       	pop	r0
    2ecc:	1f 90       	pop	r1
    2ece:	18 95       	reti

00002ed0 <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2ed0:	1f 92       	push	r1
    2ed2:	0f 92       	push	r0
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	0f 92       	push	r0
    2ed8:	11 24       	eor	r1, r1
    2eda:	2f 93       	push	r18
    2edc:	3f 93       	push	r19
    2ede:	4f 93       	push	r20
    2ee0:	5f 93       	push	r21
    2ee2:	6f 93       	push	r22
    2ee4:	7f 93       	push	r23
    2ee6:	8f 93       	push	r24
    2ee8:	9f 93       	push	r25
    2eea:	af 93       	push	r26
    2eec:	bf 93       	push	r27
    2eee:	ef 93       	push	r30
    2ef0:	ff 93       	push	r31
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Gpt_ISRHandler>
    2ef8:	ff 91       	pop	r31
    2efa:	ef 91       	pop	r30
    2efc:	bf 91       	pop	r27
    2efe:	af 91       	pop	r26
    2f00:	9f 91       	pop	r25
    2f02:	8f 91       	pop	r24
    2f04:	7f 91       	pop	r23
    2f06:	6f 91       	pop	r22
    2f08:	5f 91       	pop	r21
    2f0a:	4f 91       	pop	r20
    2f0c:	3f 91       	pop	r19
    2f0e:	2f 91       	pop	r18
    2f10:	0f 90       	pop	r0
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	0f 90       	pop	r0
    2f16:	1f 90       	pop	r1
    2f18:	18 95       	reti

00002f1a <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2f1a:	1f 92       	push	r1
    2f1c:	0f 92       	push	r0
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	0f 92       	push	r0
    2f22:	11 24       	eor	r1, r1
    2f24:	2f 93       	push	r18
    2f26:	3f 93       	push	r19
    2f28:	4f 93       	push	r20
    2f2a:	5f 93       	push	r21
    2f2c:	6f 93       	push	r22
    2f2e:	7f 93       	push	r23
    2f30:	8f 93       	push	r24
    2f32:	9f 93       	push	r25
    2f34:	af 93       	push	r26
    2f36:	bf 93       	push	r27
    2f38:	ef 93       	push	r30
    2f3a:	ff 93       	push	r31
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Gpt_ISRHandler>
    2f42:	ff 91       	pop	r31
    2f44:	ef 91       	pop	r30
    2f46:	bf 91       	pop	r27
    2f48:	af 91       	pop	r26
    2f4a:	9f 91       	pop	r25
    2f4c:	8f 91       	pop	r24
    2f4e:	7f 91       	pop	r23
    2f50:	6f 91       	pop	r22
    2f52:	5f 91       	pop	r21
    2f54:	4f 91       	pop	r20
    2f56:	3f 91       	pop	r19
    2f58:	2f 91       	pop	r18
    2f5a:	0f 90       	pop	r0
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	0f 90       	pop	r0
    2f60:	1f 90       	pop	r1
    2f62:	18 95       	reti

00002f64 <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2f64:	1f 92       	push	r1
    2f66:	0f 92       	push	r0
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	0f 92       	push	r0
    2f6c:	11 24       	eor	r1, r1
    2f6e:	2f 93       	push	r18
    2f70:	3f 93       	push	r19
    2f72:	4f 93       	push	r20
    2f74:	5f 93       	push	r21
    2f76:	6f 93       	push	r22
    2f78:	7f 93       	push	r23
    2f7a:	8f 93       	push	r24
    2f7c:	9f 93       	push	r25
    2f7e:	af 93       	push	r26
    2f80:	bf 93       	push	r27
    2f82:	ef 93       	push	r30
    2f84:	ff 93       	push	r31
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Gpt_ISRHandler>
    2f8c:	ff 91       	pop	r31
    2f8e:	ef 91       	pop	r30
    2f90:	bf 91       	pop	r27
    2f92:	af 91       	pop	r26
    2f94:	9f 91       	pop	r25
    2f96:	8f 91       	pop	r24
    2f98:	7f 91       	pop	r23
    2f9a:	6f 91       	pop	r22
    2f9c:	5f 91       	pop	r21
    2f9e:	4f 91       	pop	r20
    2fa0:	3f 91       	pop	r19
    2fa2:	2f 91       	pop	r18
    2fa4:	0f 90       	pop	r0
    2fa6:	0f be       	out	0x3f, r0	; 63
    2fa8:	0f 90       	pop	r0
    2faa:	1f 90       	pop	r1
    2fac:	18 95       	reti

00002fae <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2fae:	1f 92       	push	r1
    2fb0:	0f 92       	push	r0
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	0f 92       	push	r0
    2fb6:	11 24       	eor	r1, r1
    2fb8:	2f 93       	push	r18
    2fba:	3f 93       	push	r19
    2fbc:	4f 93       	push	r20
    2fbe:	5f 93       	push	r21
    2fc0:	6f 93       	push	r22
    2fc2:	7f 93       	push	r23
    2fc4:	8f 93       	push	r24
    2fc6:	9f 93       	push	r25
    2fc8:	af 93       	push	r26
    2fca:	bf 93       	push	r27
    2fcc:	ef 93       	push	r30
    2fce:	ff 93       	push	r31
    2fd0:	82 e0       	ldi	r24, 0x02	; 2
    2fd2:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Gpt_ISRHandler>
    2fd6:	ff 91       	pop	r31
    2fd8:	ef 91       	pop	r30
    2fda:	bf 91       	pop	r27
    2fdc:	af 91       	pop	r26
    2fde:	9f 91       	pop	r25
    2fe0:	8f 91       	pop	r24
    2fe2:	7f 91       	pop	r23
    2fe4:	6f 91       	pop	r22
    2fe6:	5f 91       	pop	r21
    2fe8:	4f 91       	pop	r20
    2fea:	3f 91       	pop	r19
    2fec:	2f 91       	pop	r18
    2fee:	0f 90       	pop	r0
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	0f 90       	pop	r0
    2ff4:	1f 90       	pop	r1
    2ff6:	18 95       	reti

00002ff8 <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2ff8:	1f 92       	push	r1
    2ffa:	0f 92       	push	r0
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	0f 92       	push	r0
    3000:	11 24       	eor	r1, r1
    3002:	2f 93       	push	r18
    3004:	3f 93       	push	r19
    3006:	4f 93       	push	r20
    3008:	5f 93       	push	r21
    300a:	6f 93       	push	r22
    300c:	7f 93       	push	r23
    300e:	8f 93       	push	r24
    3010:	9f 93       	push	r25
    3012:	af 93       	push	r26
    3014:	bf 93       	push	r27
    3016:	ef 93       	push	r30
    3018:	ff 93       	push	r31
    301a:	82 e0       	ldi	r24, 0x02	; 2
    301c:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Gpt_ISRHandler>
    3020:	ff 91       	pop	r31
    3022:	ef 91       	pop	r30
    3024:	bf 91       	pop	r27
    3026:	af 91       	pop	r26
    3028:	9f 91       	pop	r25
    302a:	8f 91       	pop	r24
    302c:	7f 91       	pop	r23
    302e:	6f 91       	pop	r22
    3030:	5f 91       	pop	r21
    3032:	4f 91       	pop	r20
    3034:	3f 91       	pop	r19
    3036:	2f 91       	pop	r18
    3038:	0f 90       	pop	r0
    303a:	0f be       	out	0x3f, r0	; 63
    303c:	0f 90       	pop	r0
    303e:	1f 90       	pop	r1
    3040:	18 95       	reti

00003042 <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
    3042:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <genuI2C_Status>
    3046:	86 30       	cpi	r24, 0x06	; 6
    3048:	49 f0       	breq	.+18     	; 0x305c <I2C_MasterInit+0x1a>
    304a:	82 e0       	ldi	r24, 0x02	; 2
    304c:	81 b9       	out	0x01, r24	; 1
    304e:	89 e0       	ldi	r24, 0x09	; 9
    3050:	80 b9       	out	0x00, r24	; 0
    3052:	86 e0       	ldi	r24, 0x06	; 6
    3054:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <genuI2C_Status>
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	08 95       	ret
    305c:	87 e0       	ldi	r24, 0x07	; 7
    305e:	08 95       	ret

00003060 <I2C_MasterSendSTART>:
    3060:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <genuI2C_Status>
    3064:	86 30       	cpi	r24, 0x06	; 6
    3066:	59 f4       	brne	.+22     	; 0x307e <I2C_MasterSendSTART+0x1e>
    3068:	84 ea       	ldi	r24, 0xA4	; 164
    306a:	86 bf       	out	0x36, r24	; 54
    306c:	06 b6       	in	r0, 0x36	; 54
    306e:	07 fe       	sbrs	r0, 7
    3070:	fd cf       	rjmp	.-6      	; 0x306c <I2C_MasterSendSTART+0xc>
    3072:	81 b1       	in	r24, 0x01	; 1
    3074:	88 7f       	andi	r24, 0xF8	; 248
    3076:	88 30       	cpi	r24, 0x08	; 8
    3078:	21 f0       	breq	.+8      	; 0x3082 <I2C_MasterSendSTART+0x22>
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	08 95       	ret
    307e:	85 e0       	ldi	r24, 0x05	; 5
    3080:	08 95       	ret
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	08 95       	ret

00003086 <I2C_MasterSendSlaveAddress>:
    3086:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <genuI2C_Status>
    308a:	96 30       	cpi	r25, 0x06	; 6
    308c:	29 f5       	brne	.+74     	; 0x30d8 <I2C_MasterSendSlaveAddress+0x52>
    308e:	62 30       	cpi	r22, 0x02	; 2
    3090:	28 f5       	brcc	.+74     	; 0x30dc <I2C_MasterSendSlaveAddress+0x56>
    3092:	88 23       	and	r24, r24
    3094:	2c f1       	brlt	.+74     	; 0x30e0 <I2C_MasterSendSlaveAddress+0x5a>
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	88 0f       	add	r24, r24
    309a:	99 1f       	adc	r25, r25
    309c:	68 2b       	or	r22, r24
    309e:	63 b9       	out	0x03, r22	; 3
    30a0:	84 e8       	ldi	r24, 0x84	; 132
    30a2:	86 bf       	out	0x36, r24	; 54
    30a4:	06 b6       	in	r0, 0x36	; 54
    30a6:	07 fe       	sbrs	r0, 7
    30a8:	fd cf       	rjmp	.-6      	; 0x30a4 <I2C_MasterSendSlaveAddress+0x1e>
    30aa:	81 b1       	in	r24, 0x01	; 1
    30ac:	88 7f       	andi	r24, 0xF8	; 248
    30ae:	88 33       	cpi	r24, 0x38	; 56
    30b0:	59 f0       	breq	.+22     	; 0x30c8 <I2C_MasterSendSlaveAddress+0x42>
    30b2:	28 f4       	brcc	.+10     	; 0x30be <I2C_MasterSendSlaveAddress+0x38>
    30b4:	88 31       	cpi	r24, 0x18	; 24
    30b6:	b1 f0       	breq	.+44     	; 0x30e4 <I2C_MasterSendSlaveAddress+0x5e>
    30b8:	80 32       	cpi	r24, 0x20	; 32
    30ba:	41 f0       	breq	.+16     	; 0x30cc <I2C_MasterSendSlaveAddress+0x46>
    30bc:	0b c0       	rjmp	.+22     	; 0x30d4 <I2C_MasterSendSlaveAddress+0x4e>
    30be:	80 34       	cpi	r24, 0x40	; 64
    30c0:	89 f0       	breq	.+34     	; 0x30e4 <I2C_MasterSendSlaveAddress+0x5e>
    30c2:	88 34       	cpi	r24, 0x48	; 72
    30c4:	29 f0       	breq	.+10     	; 0x30d0 <I2C_MasterSendSlaveAddress+0x4a>
    30c6:	06 c0       	rjmp	.+12     	; 0x30d4 <I2C_MasterSendSlaveAddress+0x4e>
    30c8:	88 e3       	ldi	r24, 0x38	; 56
    30ca:	08 95       	ret
    30cc:	80 e2       	ldi	r24, 0x20	; 32
    30ce:	08 95       	ret
    30d0:	88 e4       	ldi	r24, 0x48	; 72
    30d2:	08 95       	ret
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	08 95       	ret
    30d8:	85 e0       	ldi	r24, 0x05	; 5
    30da:	08 95       	ret
    30dc:	82 e0       	ldi	r24, 0x02	; 2
    30de:	08 95       	ret
    30e0:	83 e0       	ldi	r24, 0x03	; 3
    30e2:	08 95       	ret
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	08 95       	ret

000030e8 <I2C_MasterSendRepSTART>:
    30e8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <genuI2C_Status>
    30ec:	86 30       	cpi	r24, 0x06	; 6
    30ee:	59 f4       	brne	.+22     	; 0x3106 <I2C_MasterSendRepSTART+0x1e>
    30f0:	84 ea       	ldi	r24, 0xA4	; 164
    30f2:	86 bf       	out	0x36, r24	; 54
    30f4:	06 b6       	in	r0, 0x36	; 54
    30f6:	07 fe       	sbrs	r0, 7
    30f8:	fd cf       	rjmp	.-6      	; 0x30f4 <I2C_MasterSendRepSTART+0xc>
    30fa:	81 b1       	in	r24, 0x01	; 1
    30fc:	88 7f       	andi	r24, 0xF8	; 248
    30fe:	80 31       	cpi	r24, 0x10	; 16
    3100:	21 f0       	breq	.+8      	; 0x310a <I2C_MasterSendRepSTART+0x22>
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	08 95       	ret
    3106:	85 e0       	ldi	r24, 0x05	; 5
    3108:	08 95       	ret
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	08 95       	ret

0000310e <I2C_MasterSendSTOP>:
    310e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <genuI2C_Status>
    3112:	86 30       	cpi	r24, 0x06	; 6
    3114:	39 f4       	brne	.+14     	; 0x3124 <I2C_MasterSendSTOP+0x16>
    3116:	84 e9       	ldi	r24, 0x94	; 148
    3118:	86 bf       	out	0x36, r24	; 54
    311a:	06 b6       	in	r0, 0x36	; 54
    311c:	04 fc       	sbrc	r0, 4
    311e:	fd cf       	rjmp	.-6      	; 0x311a <I2C_MasterSendSTOP+0xc>
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	08 95       	ret
    3124:	85 e0       	ldi	r24, 0x05	; 5
    3126:	08 95       	ret

00003128 <I2C_MasterSendByte>:
    3128:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <genuI2C_Status>
    312c:	96 30       	cpi	r25, 0x06	; 6
    312e:	69 f4       	brne	.+26     	; 0x314a <I2C_MasterSendByte+0x22>
    3130:	83 b9       	out	0x03, r24	; 3
    3132:	84 e8       	ldi	r24, 0x84	; 132
    3134:	86 bf       	out	0x36, r24	; 54
    3136:	06 b6       	in	r0, 0x36	; 54
    3138:	07 fe       	sbrs	r0, 7
    313a:	fd cf       	rjmp	.-6      	; 0x3136 <I2C_MasterSendByte+0xe>
    313c:	81 b1       	in	r24, 0x01	; 1
    313e:	88 7f       	andi	r24, 0xF8	; 248
    3140:	88 32       	cpi	r24, 0x28	; 40
    3142:	29 f0       	breq	.+10     	; 0x314e <I2C_MasterSendByte+0x26>
    3144:	80 33       	cpi	r24, 0x30	; 48
    3146:	29 f4       	brne	.+10     	; 0x3152 <I2C_MasterSendByte+0x2a>
    3148:	08 95       	ret
    314a:	85 e0       	ldi	r24, 0x05	; 5
    314c:	08 95       	ret
    314e:	88 e2       	ldi	r24, 0x28	; 40
    3150:	08 95       	ret
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	08 95       	ret

00003156 <I2C_MasterReceiveByte_ACK>:
    3156:	fc 01       	movw	r30, r24
    3158:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <genuI2C_Status>
    315c:	96 30       	cpi	r25, 0x06	; 6
    315e:	79 f4       	brne	.+30     	; 0x317e <I2C_MasterReceiveByte_ACK+0x28>
    3160:	30 97       	sbiw	r30, 0x00	; 0
    3162:	79 f0       	breq	.+30     	; 0x3182 <I2C_MasterReceiveByte_ACK+0x2c>
    3164:	84 ec       	ldi	r24, 0xC4	; 196
    3166:	86 bf       	out	0x36, r24	; 54
    3168:	06 b6       	in	r0, 0x36	; 54
    316a:	07 fe       	sbrs	r0, 7
    316c:	fd cf       	rjmp	.-6      	; 0x3168 <I2C_MasterReceiveByte_ACK+0x12>
    316e:	81 b1       	in	r24, 0x01	; 1
    3170:	88 7f       	andi	r24, 0xF8	; 248
    3172:	80 35       	cpi	r24, 0x50	; 80
    3174:	41 f4       	brne	.+16     	; 0x3186 <I2C_MasterReceiveByte_ACK+0x30>
    3176:	83 b1       	in	r24, 0x03	; 3
    3178:	80 83       	st	Z, r24
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	08 95       	ret
    317e:	85 e0       	ldi	r24, 0x05	; 5
    3180:	08 95       	ret
    3182:	84 e0       	ldi	r24, 0x04	; 4
    3184:	08 95       	ret
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	08 95       	ret

0000318a <I2C_MasterReceiveByte_NACK>:
    318a:	fc 01       	movw	r30, r24
    318c:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <genuI2C_Status>
    3190:	96 30       	cpi	r25, 0x06	; 6
    3192:	79 f4       	brne	.+30     	; 0x31b2 <I2C_MasterReceiveByte_NACK+0x28>
    3194:	30 97       	sbiw	r30, 0x00	; 0
    3196:	79 f0       	breq	.+30     	; 0x31b6 <I2C_MasterReceiveByte_NACK+0x2c>
    3198:	84 e8       	ldi	r24, 0x84	; 132
    319a:	86 bf       	out	0x36, r24	; 54
    319c:	06 b6       	in	r0, 0x36	; 54
    319e:	07 fe       	sbrs	r0, 7
    31a0:	fd cf       	rjmp	.-6      	; 0x319c <I2C_MasterReceiveByte_NACK+0x12>
    31a2:	81 b1       	in	r24, 0x01	; 1
    31a4:	88 7f       	andi	r24, 0xF8	; 248
    31a6:	88 35       	cpi	r24, 0x58	; 88
    31a8:	41 f4       	brne	.+16     	; 0x31ba <I2C_MasterReceiveByte_NACK+0x30>
    31aa:	83 b1       	in	r24, 0x03	; 3
    31ac:	80 83       	st	Z, r24
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	08 95       	ret
    31b2:	85 e0       	ldi	r24, 0x05	; 5
    31b4:	08 95       	ret
    31b6:	84 e0       	ldi	r24, 0x04	; 4
    31b8:	08 95       	ret
    31ba:	80 e0       	ldi	r24, 0x00	; 0
    31bc:	08 95       	ret

000031be <I2C_MasterSendGeneral>:
    31be:	8f 92       	push	r8
    31c0:	9f 92       	push	r9
    31c2:	af 92       	push	r10
    31c4:	bf 92       	push	r11
    31c6:	cf 92       	push	r12
    31c8:	df 92       	push	r13
    31ca:	ef 92       	push	r14
    31cc:	ff 92       	push	r15
    31ce:	0f 93       	push	r16
    31d0:	1f 93       	push	r17
    31d2:	cf 93       	push	r28
    31d4:	df 93       	push	r29
    31d6:	b8 2e       	mov	r11, r24
    31d8:	eb 01       	movw	r28, r22
    31da:	6a 01       	movw	r12, r20
    31dc:	79 01       	movw	r14, r18
    31de:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <genuI2C_Status>
    31e2:	86 30       	cpi	r24, 0x06	; 6
    31e4:	c9 f5       	brne	.+114    	; 0x3258 <I2C_MasterSendGeneral+0x9a>
    31e6:	20 97       	sbiw	r28, 0x00	; 0
    31e8:	c9 f1       	breq	.+114    	; 0x325c <I2C_MasterSendGeneral+0x9e>
    31ea:	23 2b       	or	r18, r19
    31ec:	c9 f1       	breq	.+114    	; 0x3260 <I2C_MasterSendGeneral+0xa2>
    31ee:	bb 20       	and	r11, r11
    31f0:	cc f1       	brlt	.+114    	; 0x3264 <I2C_MasterSendGeneral+0xa6>
    31f2:	0e 94 30 18 	call	0x3060	; 0x3060 <I2C_MasterSendSTART>
    31f6:	88 23       	and	r24, r24
    31f8:	c1 f1       	breq	.+112    	; 0x326a <I2C_MasterSendGeneral+0xac>
    31fa:	60 e0       	ldi	r22, 0x00	; 0
    31fc:	8b 2d       	mov	r24, r11
    31fe:	0e 94 43 18 	call	0x3086	; 0x3086 <I2C_MasterSendSlaveAddress>
    3202:	81 30       	cpi	r24, 0x01	; 1
    3204:	89 f5       	brne	.+98     	; 0x3268 <I2C_MasterSendGeneral+0xaa>
    3206:	0b c0       	rjmp	.+22     	; 0x321e <I2C_MasterSendGeneral+0x60>
    3208:	4e 01       	movw	r8, r28
    320a:	8f ef       	ldi	r24, 0xFF	; 255
    320c:	88 1a       	sub	r8, r24
    320e:	98 0a       	sbc	r9, r24
    3210:	88 81       	ld	r24, Y
    3212:	0e 94 94 18 	call	0x3128	; 0x3128 <I2C_MasterSendByte>
    3216:	65 01       	movw	r12, r10
    3218:	88 23       	and	r24, r24
    321a:	39 f1       	breq	.+78     	; 0x326a <I2C_MasterSendGeneral+0xac>
    321c:	e4 01       	movw	r28, r8
    321e:	56 01       	movw	r10, r12
    3220:	e1 e0       	ldi	r30, 0x01	; 1
    3222:	ae 1a       	sub	r10, r30
    3224:	b1 08       	sbc	r11, r1
    3226:	cd 28       	or	r12, r13
    3228:	79 f7       	brne	.-34     	; 0x3208 <I2C_MasterSendGeneral+0x4a>
    322a:	0c c0       	rjmp	.+24     	; 0x3244 <I2C_MasterSendGeneral+0x86>
    322c:	67 01       	movw	r12, r14
    322e:	ff ef       	ldi	r31, 0xFF	; 255
    3230:	cf 1a       	sub	r12, r31
    3232:	df 0a       	sbc	r13, r31
    3234:	f7 01       	movw	r30, r14
    3236:	80 81       	ld	r24, Z
    3238:	0e 94 94 18 	call	0x3128	; 0x3128 <I2C_MasterSendByte>
    323c:	8e 01       	movw	r16, r28
    323e:	88 23       	and	r24, r24
    3240:	a1 f0       	breq	.+40     	; 0x326a <I2C_MasterSendGeneral+0xac>
    3242:	76 01       	movw	r14, r12
    3244:	e8 01       	movw	r28, r16
    3246:	21 97       	sbiw	r28, 0x01	; 1
    3248:	01 2b       	or	r16, r17
    324a:	81 f7       	brne	.-32     	; 0x322c <I2C_MasterSendGeneral+0x6e>
    324c:	0e 94 87 18 	call	0x310e	; 0x310e <I2C_MasterSendSTOP>
    3250:	81 30       	cpi	r24, 0x01	; 1
    3252:	59 f0       	breq	.+22     	; 0x326a <I2C_MasterSendGeneral+0xac>
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	09 c0       	rjmp	.+18     	; 0x326a <I2C_MasterSendGeneral+0xac>
    3258:	85 e0       	ldi	r24, 0x05	; 5
    325a:	07 c0       	rjmp	.+14     	; 0x326a <I2C_MasterSendGeneral+0xac>
    325c:	84 e0       	ldi	r24, 0x04	; 4
    325e:	05 c0       	rjmp	.+10     	; 0x326a <I2C_MasterSendGeneral+0xac>
    3260:	84 e0       	ldi	r24, 0x04	; 4
    3262:	03 c0       	rjmp	.+6      	; 0x326a <I2C_MasterSendGeneral+0xac>
    3264:	83 e0       	ldi	r24, 0x03	; 3
    3266:	01 c0       	rjmp	.+2      	; 0x326a <I2C_MasterSendGeneral+0xac>
    3268:	80 e0       	ldi	r24, 0x00	; 0
    326a:	df 91       	pop	r29
    326c:	cf 91       	pop	r28
    326e:	1f 91       	pop	r17
    3270:	0f 91       	pop	r16
    3272:	ff 90       	pop	r15
    3274:	ef 90       	pop	r14
    3276:	df 90       	pop	r13
    3278:	cf 90       	pop	r12
    327a:	bf 90       	pop	r11
    327c:	af 90       	pop	r10
    327e:	9f 90       	pop	r9
    3280:	8f 90       	pop	r8
    3282:	08 95       	ret

00003284 <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
    3284:	7f 92       	push	r7
    3286:	8f 92       	push	r8
    3288:	9f 92       	push	r9
    328a:	af 92       	push	r10
    328c:	bf 92       	push	r11
    328e:	cf 92       	push	r12
    3290:	df 92       	push	r13
    3292:	ef 92       	push	r14
    3294:	ff 92       	push	r15
    3296:	0f 93       	push	r16
    3298:	1f 93       	push	r17
    329a:	cf 93       	push	r28
    329c:	df 93       	push	r29
    329e:	78 2e       	mov	r7, r24
    32a0:	eb 01       	movw	r28, r22
    32a2:	7a 01       	movw	r14, r20
    32a4:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    32a6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <genuI2C_Status>
    32aa:	86 30       	cpi	r24, 0x06	; 6
    32ac:	09 f0       	breq	.+2      	; 0x32b0 <I2C_MasterReceiveGeneral+0x2c>
    32ae:	47 c0       	rjmp	.+142    	; 0x333e <I2C_MasterReceiveGeneral+0xba>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
    32b0:	20 97       	sbiw	r28, 0x00	; 0
    32b2:	09 f4       	brne	.+2      	; 0x32b6 <I2C_MasterReceiveGeneral+0x32>
    32b4:	46 c0       	rjmp	.+140    	; 0x3342 <I2C_MasterReceiveGeneral+0xbe>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
    32b6:	23 2b       	or	r18, r19
    32b8:	09 f4       	brne	.+2      	; 0x32bc <I2C_MasterReceiveGeneral+0x38>
    32ba:	45 c0       	rjmp	.+138    	; 0x3346 <I2C_MasterReceiveGeneral+0xc2>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    32bc:	77 20       	and	r7, r7
    32be:	0c f4       	brge	.+2      	; 0x32c2 <I2C_MasterReceiveGeneral+0x3e>
    32c0:	44 c0       	rjmp	.+136    	; 0x334a <I2C_MasterReceiveGeneral+0xc6>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    32c2:	0e 94 30 18 	call	0x3060	; 0x3060 <I2C_MasterSendSTART>
    32c6:	88 23       	and	r24, r24
    32c8:	09 f4       	brne	.+2      	; 0x32cc <I2C_MasterReceiveGeneral+0x48>
    32ca:	4a c0       	rjmp	.+148    	; 0x3360 <I2C_MasterReceiveGeneral+0xdc>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    32cc:	60 e0       	ldi	r22, 0x00	; 0
    32ce:	87 2d       	mov	r24, r7
    32d0:	0e 94 43 18 	call	0x3086	; 0x3086 <I2C_MasterSendSlaveAddress>
    32d4:	81 30       	cpi	r24, 0x01	; 1
    32d6:	d9 f5       	brne	.+118    	; 0x334e <I2C_MasterReceiveGeneral+0xca>
    32d8:	0b c0       	rjmp	.+22     	; 0x32f0 <I2C_MasterReceiveGeneral+0x6c>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    32da:	4e 01       	movw	r8, r28
    32dc:	8f ef       	ldi	r24, 0xFF	; 255
    32de:	88 1a       	sub	r8, r24
    32e0:	98 0a       	sbc	r9, r24
    32e2:	88 81       	ld	r24, Y
    32e4:	0e 94 94 18 	call	0x3128	; 0x3128 <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    32e8:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    32ea:	88 23       	and	r24, r24
    32ec:	c9 f1       	breq	.+114    	; 0x3360 <I2C_MasterReceiveGeneral+0xdc>
    32ee:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    32f0:	57 01       	movw	r10, r14
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	a8 1a       	sub	r10, r24
    32f6:	b1 08       	sbc	r11, r1
    32f8:	ef 28       	or	r14, r15
    32fa:	79 f7       	brne	.-34     	; 0x32da <I2C_MasterReceiveGeneral+0x56>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
    32fc:	0e 94 74 18 	call	0x30e8	; 0x30e8 <I2C_MasterSendRepSTART>
    3300:	81 30       	cpi	r24, 0x01	; 1
    3302:	39 f5       	brne	.+78     	; 0x3352 <I2C_MasterReceiveGeneral+0xce>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    3304:	61 e0       	ldi	r22, 0x01	; 1
    3306:	87 2d       	mov	r24, r7
    3308:	0e 94 43 18 	call	0x3086	; 0x3086 <I2C_MasterSendSlaveAddress>
    330c:	81 30       	cpi	r24, 0x01	; 1
    330e:	19 f5       	brne	.+70     	; 0x3356 <I2C_MasterReceiveGeneral+0xd2>
    3310:	08 c0       	rjmp	.+16     	; 0x3322 <I2C_MasterReceiveGeneral+0x9e>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
    3312:	e6 01       	movw	r28, r12
    3314:	21 96       	adiw	r28, 0x01	; 1
    3316:	c6 01       	movw	r24, r12
    3318:	0e 94 ab 18 	call	0x3156	; 0x3156 <I2C_MasterReceiveByte_ACK>
    331c:	81 30       	cpi	r24, 0x01	; 1
    331e:	e9 f4       	brne	.+58     	; 0x335a <I2C_MasterReceiveGeneral+0xd6>
    3320:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
    3322:	01 50       	subi	r16, 0x01	; 1
    3324:	11 09       	sbc	r17, r1
    3326:	a9 f7       	brne	.-22     	; 0x3312 <I2C_MasterReceiveGeneral+0x8e>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
    3328:	c6 01       	movw	r24, r12
    332a:	0e 94 c5 18 	call	0x318a	; 0x318a <I2C_MasterReceiveByte_NACK>
    332e:	81 30       	cpi	r24, 0x01	; 1
    3330:	b1 f4       	brne	.+44     	; 0x335e <I2C_MasterReceiveGeneral+0xda>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
    3332:	0e 94 87 18 	call	0x310e	; 0x310e <I2C_MasterSendSTOP>
    3336:	81 30       	cpi	r24, 0x01	; 1
    3338:	99 f0       	breq	.+38     	; 0x3360 <I2C_MasterReceiveGeneral+0xdc>
		return I2C_STATUS_ERROR_NOK;
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	11 c0       	rjmp	.+34     	; 0x3360 <I2C_MasterReceiveGeneral+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    333e:	85 e0       	ldi	r24, 0x05	; 5
    3340:	0f c0       	rjmp	.+30     	; 0x3360 <I2C_MasterReceiveGeneral+0xdc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    3342:	84 e0       	ldi	r24, 0x04	; 4
    3344:	0d c0       	rjmp	.+26     	; 0x3360 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    3346:	84 e0       	ldi	r24, 0x04	; 4
    3348:	0b c0       	rjmp	.+22     	; 0x3360 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    334a:	83 e0       	ldi	r24, 0x03	; 3
    334c:	09 c0       	rjmp	.+18     	; 0x3360 <I2C_MasterReceiveGeneral+0xdc>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	07 c0       	rjmp	.+14     	; 0x3360 <I2C_MasterReceiveGeneral+0xdc>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	05 c0       	rjmp	.+10     	; 0x3360 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	03 c0       	rjmp	.+6      	; 0x3360 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	01 c0       	rjmp	.+2      	; 0x3360 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    335e:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
    3360:	df 91       	pop	r29
    3362:	cf 91       	pop	r28
    3364:	1f 91       	pop	r17
    3366:	0f 91       	pop	r16
    3368:	ff 90       	pop	r15
    336a:	ef 90       	pop	r14
    336c:	df 90       	pop	r13
    336e:	cf 90       	pop	r12
    3370:	bf 90       	pop	r11
    3372:	af 90       	pop	r10
    3374:	9f 90       	pop	r9
    3376:	8f 90       	pop	r8
    3378:	7f 90       	pop	r7
    337a:	08 95       	ret

0000337c <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
    337c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <genuSpi_Status>
    3380:	87 30       	cpi	r24, 0x07	; 7
    3382:	b9 f0       	breq	.+46     	; 0x33b2 <Spi_init+0x36>
    3384:	87 b3       	in	r24, 0x17	; 23
    3386:	80 64       	ori	r24, 0x40	; 64
    3388:	87 bb       	out	0x17, r24	; 23
    338a:	87 b3       	in	r24, 0x17	; 23
    338c:	8f 7d       	andi	r24, 0xDF	; 223
    338e:	87 bb       	out	0x17, r24	; 23
    3390:	87 b3       	in	r24, 0x17	; 23
    3392:	8f 7e       	andi	r24, 0xEF	; 239
    3394:	87 bb       	out	0x17, r24	; 23
    3396:	87 b3       	in	r24, 0x17	; 23
    3398:	8f 77       	andi	r24, 0x7F	; 127
    339a:	87 bb       	out	0x17, r24	; 23
    339c:	8d b1       	in	r24, 0x0d	; 13
    339e:	8f 7e       	andi	r24, 0xEF	; 239
    33a0:	8d b9       	out	0x0d, r24	; 13
    33a2:	8d b1       	in	r24, 0x0d	; 13
    33a4:	80 64       	ori	r24, 0x40	; 64
    33a6:	8d b9       	out	0x0d, r24	; 13
    33a8:	87 e0       	ldi	r24, 0x07	; 7
    33aa:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <genuSpi_Status>
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	08 95       	ret
    33b2:	88 e0       	ldi	r24, 0x08	; 8
    33b4:	08 95       	ret

000033b6 <Spi_SlaveReceiveByte>:
    33b6:	fc 01       	movw	r30, r24
    33b8:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <genuSpi_Status>
    33bc:	97 30       	cpi	r25, 0x07	; 7
    33be:	41 f4       	brne	.+16     	; 0x33d0 <Spi_SlaveReceiveByte+0x1a>
    33c0:	30 97       	sbiw	r30, 0x00	; 0
    33c2:	41 f0       	breq	.+16     	; 0x33d4 <Spi_SlaveReceiveByte+0x1e>
    33c4:	77 9b       	sbis	0x0e, 7	; 14
    33c6:	fe cf       	rjmp	.-4      	; 0x33c4 <Spi_SlaveReceiveByte+0xe>
    33c8:	8f b1       	in	r24, 0x0f	; 15
    33ca:	80 83       	st	Z, r24
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	08 95       	ret
    33d0:	86 e0       	ldi	r24, 0x06	; 6
    33d2:	08 95       	ret
    33d4:	85 e0       	ldi	r24, 0x05	; 5
    33d6:	08 95       	ret

000033d8 <Spi_SlaveReceivePacket>:
    33d8:	cf 92       	push	r12
    33da:	df 92       	push	r13
    33dc:	ef 92       	push	r14
    33de:	ff 92       	push	r15
    33e0:	1f 93       	push	r17
    33e2:	cf 93       	push	r28
    33e4:	df 93       	push	r29
    33e6:	6c 01       	movw	r12, r24
    33e8:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <genuSpi_Status>
    33ec:	97 30       	cpi	r25, 0x07	; 7
    33ee:	b1 f4       	brne	.+44     	; 0x341c <Spi_SlaveReceivePacket+0x44>
    33f0:	7b 01       	movw	r14, r22
    33f2:	10 e0       	ldi	r17, 0x00	; 0
    33f4:	0c c0       	rjmp	.+24     	; 0x340e <Spi_SlaveReceivePacket+0x36>
    33f6:	e6 01       	movw	r28, r12
    33f8:	c8 0f       	add	r28, r24
    33fa:	d9 1f       	adc	r29, r25
    33fc:	ce 01       	movw	r24, r28
    33fe:	0e 94 db 19 	call	0x33b6	; 0x33b6 <Spi_SlaveReceiveByte>
    3402:	81 30       	cpi	r24, 0x01	; 1
    3404:	69 f4       	brne	.+26     	; 0x3420 <Spi_SlaveReceivePacket+0x48>
    3406:	98 81       	ld	r25, Y
    3408:	99 23       	and	r25, r25
    340a:	59 f0       	breq	.+22     	; 0x3422 <Spi_SlaveReceivePacket+0x4a>
    340c:	1f 5f       	subi	r17, 0xFF	; 255
    340e:	81 2f       	mov	r24, r17
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	8e 15       	cp	r24, r14
    3414:	9f 05       	cpc	r25, r15
    3416:	78 f3       	brcs	.-34     	; 0x33f6 <Spi_SlaveReceivePacket+0x1e>
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	03 c0       	rjmp	.+6      	; 0x3422 <Spi_SlaveReceivePacket+0x4a>
    341c:	86 e0       	ldi	r24, 0x06	; 6
    341e:	01 c0       	rjmp	.+2      	; 0x3422 <Spi_SlaveReceivePacket+0x4a>
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	df 91       	pop	r29
    3424:	cf 91       	pop	r28
    3426:	1f 91       	pop	r17
    3428:	ff 90       	pop	r15
    342a:	ef 90       	pop	r14
    342c:	df 90       	pop	r13
    342e:	cf 90       	pop	r12
    3430:	08 95       	ret

00003432 <__vector_12>:


    3432:	1f 92       	push	r1
    3434:	0f 92       	push	r0
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	0f 92       	push	r0
    343a:	11 24       	eor	r1, r1
    343c:	2f 93       	push	r18
    343e:	3f 93       	push	r19
    3440:	4f 93       	push	r20
    3442:	5f 93       	push	r21
    3444:	6f 93       	push	r22
    3446:	7f 93       	push	r23
    3448:	8f 93       	push	r24
    344a:	9f 93       	push	r25
    344c:	af 93       	push	r26
    344e:	bf 93       	push	r27
    3450:	ef 93       	push	r30
    3452:	ff 93       	push	r31
    3454:	e0 91 d0 06 	lds	r30, 0x06D0	; 0x8006d0 <SPI_STC_CallBackPtr>
    3458:	f0 91 d1 06 	lds	r31, 0x06D1	; 0x8006d1 <SPI_STC_CallBackPtr+0x1>
    345c:	09 95       	icall
    345e:	ff 91       	pop	r31
    3460:	ef 91       	pop	r30
    3462:	bf 91       	pop	r27
    3464:	af 91       	pop	r26
    3466:	9f 91       	pop	r25
    3468:	8f 91       	pop	r24
    346a:	7f 91       	pop	r23
    346c:	6f 91       	pop	r22
    346e:	5f 91       	pop	r21
    3470:	4f 91       	pop	r20
    3472:	3f 91       	pop	r19
    3474:	2f 91       	pop	r18
    3476:	0f 90       	pop	r0
    3478:	0f be       	out	0x3f, r0	; 63
    347a:	0f 90       	pop	r0
    347c:	1f 90       	pop	r1
    347e:	18 95       	reti

00003480 <stringLength>:
	for (s8_loopIndex=length-2; s8_loopIndex>=0; s8_loopIndex--)
	{
		*pu32_Num += (pu8_String[s8_loopIndex]-'0') *digit;
		digit*=10;
	}
}
    3480:	ac 01       	movw	r20, r24
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	01 c0       	rjmp	.+2      	; 0x3488 <stringLength+0x8>
    3486:	8f 5f       	subi	r24, 0xFF	; 255
    3488:	fa 01       	movw	r30, r20
    348a:	e8 0f       	add	r30, r24
    348c:	f1 1d       	adc	r31, r1
    348e:	20 81       	ld	r18, Z
    3490:	21 11       	cpse	r18, r1
    3492:	f9 cf       	rjmp	.-14     	; 0x3486 <stringLength+0x6>
    3494:	8f 5f       	subi	r24, 0xFF	; 255
    3496:	08 95       	ret

00003498 <stringCompare>:
    3498:	ff 92       	push	r15
    349a:	0f 93       	push	r16
    349c:	1f 93       	push	r17
    349e:	cf 93       	push	r28
    34a0:	df 93       	push	r29
    34a2:	8c 01       	movw	r16, r24
    34a4:	eb 01       	movw	r28, r22
    34a6:	0e 94 40 1a 	call	0x3480	; 0x3480 <stringLength>
    34aa:	f8 2e       	mov	r15, r24
    34ac:	ce 01       	movw	r24, r28
    34ae:	0e 94 40 1a 	call	0x3480	; 0x3480 <stringLength>
    34b2:	8f 15       	cp	r24, r15
    34b4:	b8 f0       	brcs	.+46     	; 0x34e4 <stringCompare+0x4c>
    34b6:	f8 16       	cp	r15, r24
    34b8:	b8 f0       	brcs	.+46     	; 0x34e8 <stringCompare+0x50>
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	09 c0       	rjmp	.+18     	; 0x34d0 <stringCompare+0x38>
    34be:	fe 01       	movw	r30, r28
    34c0:	e8 0f       	add	r30, r24
    34c2:	f9 1f       	adc	r31, r25
    34c4:	80 81       	ld	r24, Z
    34c6:	82 17       	cp	r24, r18
    34c8:	88 f0       	brcs	.+34     	; 0x34ec <stringCompare+0x54>
    34ca:	28 17       	cp	r18, r24
    34cc:	88 f0       	brcs	.+34     	; 0x34f0 <stringCompare+0x58>
    34ce:	3f 5f       	subi	r19, 0xFF	; 255
    34d0:	83 2f       	mov	r24, r19
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	f8 01       	movw	r30, r16
    34d6:	e8 0f       	add	r30, r24
    34d8:	f9 1f       	adc	r31, r25
    34da:	20 81       	ld	r18, Z
    34dc:	21 11       	cpse	r18, r1
    34de:	ef cf       	rjmp	.-34     	; 0x34be <stringCompare+0x26>
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	07 c0       	rjmp	.+14     	; 0x34f2 <stringCompare+0x5a>
    34e4:	82 e0       	ldi	r24, 0x02	; 2
    34e6:	05 c0       	rjmp	.+10     	; 0x34f2 <stringCompare+0x5a>
    34e8:	83 e0       	ldi	r24, 0x03	; 3
    34ea:	03 c0       	rjmp	.+6      	; 0x34f2 <stringCompare+0x5a>
    34ec:	82 e0       	ldi	r24, 0x02	; 2
    34ee:	01 c0       	rjmp	.+2      	; 0x34f2 <stringCompare+0x5a>
    34f0:	83 e0       	ldi	r24, 0x03	; 3
    34f2:	df 91       	pop	r29
    34f4:	cf 91       	pop	r28
    34f6:	1f 91       	pop	r17
    34f8:	0f 91       	pop	r16
    34fa:	ff 90       	pop	r15
    34fc:	08 95       	ret

000034fe <EmptyString>:
    34fe:	ac 01       	movw	r20, r24
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	02 c0       	rjmp	.+4      	; 0x3508 <EmptyString+0xa>
    3504:	9f 5f       	subi	r25, 0xFF	; 255
    3506:	10 82       	st	Z, r1
    3508:	fa 01       	movw	r30, r20
    350a:	e9 0f       	add	r30, r25
    350c:	f1 1d       	adc	r31, r1
    350e:	20 81       	ld	r18, Z
    3510:	21 11       	cpse	r18, r1
    3512:	f8 cf       	rjmp	.-16     	; 0x3504 <EmptyString+0x6>
    3514:	08 95       	ret

00003516 <stringCopy>:
    3516:	dc 01       	movw	r26, r24
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	05 c0       	rjmp	.+10     	; 0x3526 <stringCopy+0x10>
    351c:	fb 01       	movw	r30, r22
    351e:	e2 0f       	add	r30, r18
    3520:	f3 1f       	adc	r31, r19
    3522:	40 83       	st	Z, r20
    3524:	9f 5f       	subi	r25, 0xFF	; 255
    3526:	29 2f       	mov	r18, r25
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	fd 01       	movw	r30, r26
    352c:	e2 0f       	add	r30, r18
    352e:	f3 1f       	adc	r31, r19
    3530:	40 81       	ld	r20, Z
    3532:	41 11       	cpse	r20, r1
    3534:	f3 cf       	rjmp	.-26     	; 0x351c <stringCopy+0x6>
    3536:	08 95       	ret

00003538 <integerToString>:
    3538:	0f 93       	push	r16
    353a:	1f 93       	push	r17
    353c:	cf 93       	push	r28
    353e:	df 93       	push	r29
    3540:	fc 01       	movw	r30, r24
    3542:	8b 01       	movw	r16, r22
    3544:	41 30       	cpi	r20, 0x01	; 1
    3546:	09 f0       	breq	.+2      	; 0x354a <integerToString+0x12>
    3548:	40 c0       	rjmp	.+128    	; 0x35ca <integerToString+0x92>
    354a:	c0 e0       	ldi	r28, 0x00	; 0
    354c:	d0 e0       	ldi	r29, 0x00	; 0
    354e:	6a e0       	ldi	r22, 0x0A	; 10
    3550:	70 e0       	ldi	r23, 0x00	; 0
    3552:	0e 94 1d 21 	call	0x423a	; 0x423a <__divmodhi4>
    3556:	cb 01       	movw	r24, r22
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	11 f0       	breq	.+4      	; 0x3560 <integerToString+0x28>
    355c:	21 96       	adiw	r28, 0x01	; 1
    355e:	f7 cf       	rjmp	.-18     	; 0x354e <integerToString+0x16>
    3560:	de 01       	movw	r26, r28
    3562:	11 96       	adiw	r26, 0x01	; 1
    3564:	a0 0f       	add	r26, r16
    3566:	b1 1f       	adc	r27, r17
    3568:	1c 92       	st	X, r1
    356a:	2d c0       	rjmp	.+90     	; 0x35c6 <integerToString+0x8e>
    356c:	a8 01       	movw	r20, r16
    356e:	4c 0f       	add	r20, r28
    3570:	5d 1f       	adc	r21, r29
    3572:	9f 01       	movw	r18, r30
    3574:	ad ec       	ldi	r26, 0xCD	; 205
    3576:	bc ec       	ldi	r27, 0xCC	; 204
    3578:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__umulhisi3>
    357c:	96 95       	lsr	r25
    357e:	87 95       	ror	r24
    3580:	96 95       	lsr	r25
    3582:	87 95       	ror	r24
    3584:	96 95       	lsr	r25
    3586:	87 95       	ror	r24
    3588:	9c 01       	movw	r18, r24
    358a:	22 0f       	add	r18, r18
    358c:	33 1f       	adc	r19, r19
    358e:	88 0f       	add	r24, r24
    3590:	99 1f       	adc	r25, r25
    3592:	88 0f       	add	r24, r24
    3594:	99 1f       	adc	r25, r25
    3596:	88 0f       	add	r24, r24
    3598:	99 1f       	adc	r25, r25
    359a:	82 0f       	add	r24, r18
    359c:	93 1f       	adc	r25, r19
    359e:	9f 01       	movw	r18, r30
    35a0:	28 1b       	sub	r18, r24
    35a2:	39 0b       	sbc	r19, r25
    35a4:	c9 01       	movw	r24, r18
    35a6:	80 5d       	subi	r24, 0xD0	; 208
    35a8:	da 01       	movw	r26, r20
    35aa:	8c 93       	st	X, r24
    35ac:	9f 01       	movw	r18, r30
    35ae:	ad ec       	ldi	r26, 0xCD	; 205
    35b0:	bc ec       	ldi	r27, 0xCC	; 204
    35b2:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__umulhisi3>
    35b6:	fc 01       	movw	r30, r24
    35b8:	f6 95       	lsr	r31
    35ba:	e7 95       	ror	r30
    35bc:	f6 95       	lsr	r31
    35be:	e7 95       	ror	r30
    35c0:	f6 95       	lsr	r31
    35c2:	e7 95       	ror	r30
    35c4:	21 97       	sbiw	r28, 0x01	; 1
    35c6:	30 97       	sbiw	r30, 0x00	; 0
    35c8:	89 f6       	brne	.-94     	; 0x356c <integerToString+0x34>
    35ca:	df 91       	pop	r29
    35cc:	cf 91       	pop	r28
    35ce:	1f 91       	pop	r17
    35d0:	0f 91       	pop	r16
    35d2:	08 95       	ret

000035d4 <stringToFloat>:

float32_t stringToFloat(uint8_t* string)
{
    35d4:	8f 92       	push	r8
    35d6:	9f 92       	push	r9
    35d8:	af 92       	push	r10
    35da:	bf 92       	push	r11
    35dc:	cf 92       	push	r12
    35de:	df 92       	push	r13
    35e0:	ef 92       	push	r14
    35e2:	ff 92       	push	r15
    35e4:	0f 93       	push	r16
    35e6:	1f 93       	push	r17
    35e8:	cf 93       	push	r28
    35ea:	df 93       	push	r29
    35ec:	ec 01       	movw	r28, r24
	uint8_t strLen = stringLength(string)-1;
    35ee:	0e 94 40 1a 	call	0x3480	; 0x3480 <stringLength>
    35f2:	0f ef       	ldi	r16, 0xFF	; 255
    35f4:	08 0f       	add	r16, r24
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
    35f6:	c1 2c       	mov	r12, r1
    35f8:	d1 2c       	mov	r13, r1
    35fa:	76 01       	movw	r14, r12
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    35fc:	10 e0       	ldi	r17, 0x00	; 0
    35fe:	1e c0       	rjmp	.+60     	; 0x363c <stringToFloat+0x68>
	{
		if(string[u8_loopIndex] == '.')
    3600:	fe 01       	movw	r30, r28
    3602:	e1 0f       	add	r30, r17
    3604:	f1 1d       	adc	r31, r1
    3606:	60 81       	ld	r22, Z
    3608:	6e 32       	cpi	r22, 0x2E	; 46
    360a:	11 f4       	brne	.+4      	; 0x3610 <stringToFloat+0x3c>
		{
			u8_loopIndex++;
    360c:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    360e:	18 c0       	rjmp	.+48     	; 0x3640 <stringToFloat+0x6c>
		}
		f32_num += string[u8_loopIndex] - '0';
    3610:	70 e0       	ldi	r23, 0x00	; 0
    3612:	60 53       	subi	r22, 0x30	; 48
    3614:	71 09       	sbc	r23, r1
    3616:	07 2e       	mov	r0, r23
    3618:	00 0c       	add	r0, r0
    361a:	88 0b       	sbc	r24, r24
    361c:	99 0b       	sbc	r25, r25
    361e:	0e 94 00 20 	call	0x4000	; 0x4000 <__floatsisf>
    3622:	a7 01       	movw	r20, r14
    3624:	96 01       	movw	r18, r12
    3626:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__addsf3>
		f32_num *= 10;
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	40 e2       	ldi	r20, 0x20	; 32
    3630:	51 e4       	ldi	r21, 0x41	; 65
    3632:	0e 94 b0 20 	call	0x4160	; 0x4160 <__mulsf3>
    3636:	6b 01       	movw	r12, r22
    3638:	7c 01       	movw	r14, r24
{
	uint8_t strLen = stringLength(string)-1;
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    363a:	1f 5f       	subi	r17, 0xFF	; 255
    363c:	10 17       	cp	r17, r16
    363e:	00 f3       	brcs	.-64     	; 0x3600 <stringToFloat+0x2c>
			break;
		}
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	40 e2       	ldi	r20, 0x20	; 32
    3646:	51 e4       	ldi	r21, 0x41	; 65
    3648:	c7 01       	movw	r24, r14
    364a:	b6 01       	movw	r22, r12
    364c:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <__divsf3>
    3650:	4b 01       	movw	r8, r22
    3652:	5c 01       	movw	r10, r24
	f32_digit = 1;
    3654:	0f 2e       	mov	r0, r31
    3656:	c1 2c       	mov	r12, r1
    3658:	d1 2c       	mov	r13, r1
    365a:	f0 e8       	ldi	r31, 0x80	; 128
    365c:	ef 2e       	mov	r14, r31
    365e:	ff e3       	ldi	r31, 0x3F	; 63
    3660:	ff 2e       	mov	r15, r31
    3662:	f0 2d       	mov	r31, r0
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    3664:	24 c0       	rjmp	.+72     	; 0x36ae <stringToFloat+0xda>
	{
		f32_digit/=10;
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	40 e2       	ldi	r20, 0x20	; 32
    366c:	51 e4       	ldi	r21, 0x41	; 65
    366e:	c7 01       	movw	r24, r14
    3670:	b6 01       	movw	r22, r12
    3672:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <__divsf3>
    3676:	6b 01       	movw	r12, r22
    3678:	7c 01       	movw	r14, r24
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
    367a:	fe 01       	movw	r30, r28
    367c:	e1 0f       	add	r30, r17
    367e:	f1 1d       	adc	r31, r1
    3680:	60 81       	ld	r22, Z
    3682:	70 e0       	ldi	r23, 0x00	; 0
    3684:	60 53       	subi	r22, 0x30	; 48
    3686:	71 09       	sbc	r23, r1
    3688:	07 2e       	mov	r0, r23
    368a:	00 0c       	add	r0, r0
    368c:	88 0b       	sbc	r24, r24
    368e:	99 0b       	sbc	r25, r25
    3690:	0e 94 00 20 	call	0x4000	; 0x4000 <__floatsisf>
    3694:	a7 01       	movw	r20, r14
    3696:	96 01       	movw	r18, r12
    3698:	0e 94 b0 20 	call	0x4160	; 0x4160 <__mulsf3>
    369c:	9b 01       	movw	r18, r22
    369e:	ac 01       	movw	r20, r24
    36a0:	c5 01       	movw	r24, r10
    36a2:	b4 01       	movw	r22, r8
    36a4:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__addsf3>
    36a8:	4b 01       	movw	r8, r22
    36aa:	5c 01       	movw	r10, r24
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
	f32_digit = 1;
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    36ac:	1f 5f       	subi	r17, 0xFF	; 255
    36ae:	10 17       	cp	r17, r16
    36b0:	d0 f2       	brcs	.-76     	; 0x3666 <stringToFloat+0x92>
	{
		f32_digit/=10;
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
	}
	return f32_num;
}
    36b2:	c5 01       	movw	r24, r10
    36b4:	b4 01       	movw	r22, r8
    36b6:	df 91       	pop	r29
    36b8:	cf 91       	pop	r28
    36ba:	1f 91       	pop	r17
    36bc:	0f 91       	pop	r16
    36be:	ff 90       	pop	r15
    36c0:	ef 90       	pop	r14
    36c2:	df 90       	pop	r13
    36c4:	cf 90       	pop	r12
    36c6:	bf 90       	pop	r11
    36c8:	af 90       	pop	r10
    36ca:	9f 90       	pop	r9
    36cc:	8f 90       	pop	r8
    36ce:	08 95       	ret

000036d0 <floatToString>:

void floatToString(float32_t f32_num, uint8_t* string)
{
    36d0:	8f 92       	push	r8
    36d2:	9f 92       	push	r9
    36d4:	af 92       	push	r10
    36d6:	bf 92       	push	r11
    36d8:	cf 92       	push	r12
    36da:	df 92       	push	r13
    36dc:	ef 92       	push	r14
    36de:	ff 92       	push	r15
    36e0:	0f 93       	push	r16
    36e2:	1f 93       	push	r17
    36e4:	cf 93       	push	r28
    36e6:	df 93       	push	r29
    36e8:	4b 01       	movw	r8, r22
    36ea:	5c 01       	movw	r10, r24
    36ec:	8a 01       	movw	r16, r20
	uint32_t u32_num = (uint32_t)f32_num;
    36ee:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <__fixunssfsi>
    36f2:	c6 2e       	mov	r12, r22
    36f4:	d7 2e       	mov	r13, r23
    36f6:	e8 2e       	mov	r14, r24
    36f8:	f9 2e       	mov	r15, r25
    36fa:	26 2f       	mov	r18, r22
    36fc:	37 2f       	mov	r19, r23
    36fe:	48 2f       	mov	r20, r24
    3700:	59 2f       	mov	r21, r25
	uint8_t u8_digitCount=0;
    3702:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    3704:	09 c0       	rjmp	.+18     	; 0x3718 <floatToString+0x48>
	{
		u32_num/=10;
    3706:	ca 01       	movw	r24, r20
    3708:	b9 01       	movw	r22, r18
    370a:	2a e0       	ldi	r18, 0x0A	; 10
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	40 e0       	ldi	r20, 0x00	; 0
    3710:	50 e0       	ldi	r21, 0x00	; 0
    3712:	0e 94 31 21 	call	0x4262	; 0x4262 <__udivmodsi4>
		u8_digitCount++;
    3716:	df 5f       	subi	r29, 0xFF	; 255
{
	uint32_t u32_num = (uint32_t)f32_num;
	uint8_t u8_digitCount=0;
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    3718:	21 15       	cp	r18, r1
    371a:	31 05       	cpc	r19, r1
    371c:	41 05       	cpc	r20, r1
    371e:	51 05       	cpc	r21, r1
    3720:	91 f7       	brne	.-28     	; 0x3706 <floatToString+0x36>
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
    3722:	cf ef       	ldi	r28, 0xFF	; 255
    3724:	cd 0f       	add	r28, r29
	while(u32_num !=0)
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
    3726:	6c 2d       	mov	r22, r12
    3728:	7d 2d       	mov	r23, r13
    372a:	8e 2d       	mov	r24, r14
    372c:	9f 2d       	mov	r25, r15
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    372e:	14 c0       	rjmp	.+40     	; 0x3758 <floatToString+0x88>
	{
		temp = (u32_num % 10)+ '0';
    3730:	2a e0       	ldi	r18, 0x0A	; 10
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	40 e0       	ldi	r20, 0x00	; 0
    3736:	50 e0       	ldi	r21, 0x00	; 0
    3738:	0e 94 31 21 	call	0x4262	; 0x4262 <__udivmodsi4>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	c0 96       	adiw	r24, 0x30	; 48
    3742:	a1 1d       	adc	r26, r1
    3744:	b1 1d       	adc	r27, r1
		string[u8_digitCount--] = temp;
    3746:	f8 01       	movw	r30, r16
    3748:	ec 0f       	add	r30, r28
    374a:	f1 1d       	adc	r31, r1
    374c:	80 83       	st	Z, r24
		u32_num /= 10;
    374e:	62 2f       	mov	r22, r18
    3750:	73 2f       	mov	r23, r19
    3752:	84 2f       	mov	r24, r20
    3754:	95 2f       	mov	r25, r21
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
	{
		temp = (u32_num % 10)+ '0';
		string[u8_digitCount--] = temp;
    3756:	c1 50       	subi	r28, 0x01	; 1
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    3758:	61 15       	cp	r22, r1
    375a:	71 05       	cpc	r23, r1
    375c:	81 05       	cpc	r24, r1
    375e:	91 05       	cpc	r25, r1
    3760:	39 f7       	brne	.-50     	; 0x3730 <floatToString+0x60>
		string[u8_digitCount--] = temp;
		u32_num /= 10;

	}
	u32_num = (uint32_t)f32_num;
	f32_num -= u32_num;
    3762:	6c 2d       	mov	r22, r12
    3764:	7d 2d       	mov	r23, r13
    3766:	8e 2d       	mov	r24, r14
    3768:	9f 2d       	mov	r25, r15
    376a:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__floatunsisf>
    376e:	9b 01       	movw	r18, r22
    3770:	ac 01       	movw	r20, r24
    3772:	c5 01       	movw	r24, r10
    3774:	b4 01       	movw	r22, r8
    3776:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <__subsf3>
	u32_num = f32_num*10;
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	40 e2       	ldi	r20, 0x20	; 32
    3780:	51 e4       	ldi	r21, 0x41	; 65
    3782:	0e 94 b0 20 	call	0x4160	; 0x4160 <__mulsf3>
    3786:	6b 01       	movw	r12, r22
    3788:	7c 01       	movw	r14, r24
    378a:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <__fixunssfsi>
	string[u8_indexDot++] = '.';
    378e:	21 e0       	ldi	r18, 0x01	; 1
    3790:	2d 0f       	add	r18, r29
    3792:	f8 01       	movw	r30, r16
    3794:	ed 0f       	add	r30, r29
    3796:	f1 1d       	adc	r31, r1
    3798:	3e e2       	ldi	r19, 0x2E	; 46
    379a:	30 83       	st	Z, r19
	string[u8_indexDot++] = u32_num + '0';
    379c:	de 5f       	subi	r29, 0xFE	; 254
    379e:	f8 01       	movw	r30, r16
    37a0:	e2 0f       	add	r30, r18
    37a2:	f1 1d       	adc	r31, r1
    37a4:	20 e3       	ldi	r18, 0x30	; 48
    37a6:	26 0f       	add	r18, r22
    37a8:	20 83       	st	Z, r18
	f32_num *=10;
	f32_num -= u32_num;
    37aa:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__floatunsisf>
    37ae:	9b 01       	movw	r18, r22
    37b0:	ac 01       	movw	r20, r24
    37b2:	c7 01       	movw	r24, r14
    37b4:	b6 01       	movw	r22, r12
    37b6:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <__subsf3>
	u32_num = f32_num*10;
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	40 e2       	ldi	r20, 0x20	; 32
    37c0:	51 e4       	ldi	r21, 0x41	; 65
    37c2:	0e 94 b0 20 	call	0x4160	; 0x4160 <__mulsf3>
    37c6:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <__fixunssfsi>
	string[u8_indexDot] = u32_num + '0';
    37ca:	f8 01       	movw	r30, r16
    37cc:	ed 0f       	add	r30, r29
    37ce:	f1 1d       	adc	r31, r1
    37d0:	60 5d       	subi	r22, 0xD0	; 208
    37d2:	60 83       	st	Z, r22
    37d4:	df 91       	pop	r29
    37d6:	cf 91       	pop	r28
    37d8:	1f 91       	pop	r17
    37da:	0f 91       	pop	r16
    37dc:	ff 90       	pop	r15
    37de:	ef 90       	pop	r14
    37e0:	df 90       	pop	r13
    37e2:	cf 90       	pop	r12
    37e4:	bf 90       	pop	r11
    37e6:	af 90       	pop	r10
    37e8:	9f 90       	pop	r9
    37ea:	8f 90       	pop	r8
    37ec:	08 95       	ret

000037ee <waveFunction>:
* Parameters (out): None
* Return value: None
* Description: Function to be called inside the timer's ISR.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
void waveFunction(void)
{
    37ee:	0f 93       	push	r16
    37f0:	1f 93       	push	r17
	/* Toggle the Pin of the PWM Channel */
	if(Dio_togglePin(SWPwm_Channels[gu8_currentPwmChannel].u8_DioChannelID) != DIO_STATUS_ERROR_OK)
    37f2:	e0 91 d3 06 	lds	r30, 0x06D3	; 0x8006d3 <gu8_currentPwmChannel>
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	ee 0f       	add	r30, r30
    37fa:	ff 1f       	adc	r31, r31
    37fc:	e5 59       	subi	r30, 0x95	; 149
    37fe:	fa 4f       	sbci	r31, 0xFA	; 250
    3800:	80 81       	ld	r24, Z
    3802:	0e 94 9c 14 	call	0x2938	; 0x2938 <Dio_togglePin>
    3806:	81 30       	cpi	r24, 0x01	; 1
    3808:	09 f0       	breq	.+2      	; 0x380c <waveFunction+0x1e>
    380a:	76 c0       	rjmp	.+236    	; 0x38f8 <waveFunction+0x10a>
		return;
	/* Check if the PWM Channel is still in Running State */
	if (gstr_ChannelsData[gu8_currentPwmChannel].enuChannelState == SWPWM_RUNNING)
    380c:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <gu8_currentPwmChannel>
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	9c 01       	movw	r18, r24
    3814:	22 0f       	add	r18, r18
    3816:	33 1f       	adc	r19, r19
    3818:	f9 01       	movw	r30, r18
    381a:	ee 0f       	add	r30, r30
    381c:	ff 1f       	adc	r31, r31
    381e:	ee 0f       	add	r30, r30
    3820:	ff 1f       	adc	r31, r31
    3822:	ee 0f       	add	r30, r30
    3824:	ff 1f       	adc	r31, r31
    3826:	e2 1b       	sub	r30, r18
    3828:	f3 0b       	sbc	r31, r19
    382a:	ec 52       	subi	r30, 0x2C	; 44
    382c:	f9 4f       	sbci	r31, 0xF9	; 249
    382e:	25 85       	ldd	r18, Z+13	; 0x0d
    3830:	22 30       	cpi	r18, 0x02	; 2
    3832:	09 f0       	breq	.+2      	; 0x3836 <waveFunction+0x48>
    3834:	61 c0       	rjmp	.+194    	; 0x38f8 <waveFunction+0x10a>
	{
		/* Start the Timer again with the new ticks assigned */
		if(GptStart_aSync(SWPwm_Channels[gu8_currentPwmChannel].u8_GptChannelID,\
    3836:	88 0f       	add	r24, r24
    3838:	99 1f       	adc	r25, r25
    383a:	fc 01       	movw	r30, r24
    383c:	ee 0f       	add	r30, r30
    383e:	ff 1f       	adc	r31, r31
    3840:	ee 0f       	add	r30, r30
    3842:	ff 1f       	adc	r31, r31
    3844:	ee 0f       	add	r30, r30
    3846:	ff 1f       	adc	r31, r31
    3848:	e8 1b       	sub	r30, r24
    384a:	f9 0b       	sbc	r31, r25
    384c:	ec 52       	subi	r30, 0x2C	; 44
    384e:	f9 4f       	sbci	r31, 0xF9	; 249
    3850:	41 85       	ldd	r20, Z+9	; 0x09
    3852:	52 85       	ldd	r21, Z+10	; 0x0a
    3854:	63 85       	ldd	r22, Z+11	; 0x0b
    3856:	74 85       	ldd	r23, Z+12	; 0x0c
    3858:	fc 01       	movw	r30, r24
    385a:	e5 59       	subi	r30, 0x95	; 149
    385c:	fa 4f       	sbci	r31, 0xFA	; 250
    385e:	27 ef       	ldi	r18, 0xF7	; 247
    3860:	3b e1       	ldi	r19, 0x1B	; 27
    3862:	81 81       	ldd	r24, Z+1	; 0x01
    3864:	0e 94 6d 16 	call	0x2cda	; 0x2cda <GptStart_aSync>
    3868:	81 30       	cpi	r24, 0x01	; 1
    386a:	09 f0       	breq	.+2      	; 0x386e <waveFunction+0x80>
    386c:	45 c0       	rjmp	.+138    	; 0x38f8 <waveFunction+0x10a>
		                  gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks,\
						   waveFunction) != GPT_STATUS_ERROR_OK)	return;
		
		/* Replace the next ticks to be counted between ONTicks and OFFTicks*/
		if(gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks == gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks)
    386e:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <gu8_currentPwmChannel>
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	9c 01       	movw	r18, r24
    3876:	22 0f       	add	r18, r18
    3878:	33 1f       	adc	r19, r19
    387a:	f9 01       	movw	r30, r18
    387c:	ee 0f       	add	r30, r30
    387e:	ff 1f       	adc	r31, r31
    3880:	ee 0f       	add	r30, r30
    3882:	ff 1f       	adc	r31, r31
    3884:	ee 0f       	add	r30, r30
    3886:	ff 1f       	adc	r31, r31
    3888:	e2 1b       	sub	r30, r18
    388a:	f3 0b       	sbc	r31, r19
    388c:	ec 52       	subi	r30, 0x2C	; 44
    388e:	f9 4f       	sbci	r31, 0xF9	; 249
    3890:	01 85       	ldd	r16, Z+9	; 0x09
    3892:	12 85       	ldd	r17, Z+10	; 0x0a
    3894:	23 85       	ldd	r18, Z+11	; 0x0b
    3896:	34 85       	ldd	r19, Z+12	; 0x0c
    3898:	45 81       	ldd	r20, Z+5	; 0x05
    389a:	56 81       	ldd	r21, Z+6	; 0x06
    389c:	67 81       	ldd	r22, Z+7	; 0x07
    389e:	70 85       	ldd	r23, Z+8	; 0x08
    38a0:	04 17       	cp	r16, r20
    38a2:	15 07       	cpc	r17, r21
    38a4:	26 07       	cpc	r18, r22
    38a6:	37 07       	cpc	r19, r23
    38a8:	b1 f4       	brne	.+44     	; 0x38d6 <waveFunction+0xe8>
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_ONTicks;
    38aa:	88 0f       	add	r24, r24
    38ac:	99 1f       	adc	r25, r25
    38ae:	fc 01       	movw	r30, r24
    38b0:	ee 0f       	add	r30, r30
    38b2:	ff 1f       	adc	r31, r31
    38b4:	ee 0f       	add	r30, r30
    38b6:	ff 1f       	adc	r31, r31
    38b8:	ee 0f       	add	r30, r30
    38ba:	ff 1f       	adc	r31, r31
    38bc:	e8 1b       	sub	r30, r24
    38be:	f9 0b       	sbc	r31, r25
    38c0:	ec 52       	subi	r30, 0x2C	; 44
    38c2:	f9 4f       	sbci	r31, 0xF9	; 249
    38c4:	81 81       	ldd	r24, Z+1	; 0x01
    38c6:	92 81       	ldd	r25, Z+2	; 0x02
    38c8:	a3 81       	ldd	r26, Z+3	; 0x03
    38ca:	b4 81       	ldd	r27, Z+4	; 0x04
    38cc:	81 87       	std	Z+9, r24	; 0x09
    38ce:	92 87       	std	Z+10, r25	; 0x0a
    38d0:	a3 87       	std	Z+11, r26	; 0x0b
    38d2:	b4 87       	std	Z+12, r27	; 0x0c
    38d4:	11 c0       	rjmp	.+34     	; 0x38f8 <waveFunction+0x10a>
		else
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks;
    38d6:	88 0f       	add	r24, r24
    38d8:	99 1f       	adc	r25, r25
    38da:	fc 01       	movw	r30, r24
    38dc:	ee 0f       	add	r30, r30
    38de:	ff 1f       	adc	r31, r31
    38e0:	ee 0f       	add	r30, r30
    38e2:	ff 1f       	adc	r31, r31
    38e4:	ee 0f       	add	r30, r30
    38e6:	ff 1f       	adc	r31, r31
    38e8:	e8 1b       	sub	r30, r24
    38ea:	f9 0b       	sbc	r31, r25
    38ec:	ec 52       	subi	r30, 0x2C	; 44
    38ee:	f9 4f       	sbci	r31, 0xF9	; 249
    38f0:	41 87       	std	Z+9, r20	; 0x09
    38f2:	52 87       	std	Z+10, r21	; 0x0a
    38f4:	63 87       	std	Z+11, r22	; 0x0b
    38f6:	74 87       	std	Z+12, r23	; 0x0c
	}
}
    38f8:	1f 91       	pop	r17
    38fa:	0f 91       	pop	r16
    38fc:	08 95       	ret

000038fe <SWPwm_Init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
    38fe:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <genu_SWPwmModStatus>
    3902:	81 30       	cpi	r24, 0x01	; 1
    3904:	91 f0       	breq	.+36     	; 0x392a <SWPwm_Init+0x2c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
    3906:	0e 94 39 16 	call	0x2c72	; 0x2c72 <GptInit>
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
    390a:	81 30       	cpi	r24, 0x01	; 1
    390c:	11 f0       	breq	.+4      	; 0x3912 <SWPwm_Init+0x14>
    390e:	83 30       	cpi	r24, 0x03	; 3
    3910:	71 f4       	brne	.+28     	; 0x392e <SWPwm_Init+0x30>
		return SWPWM_STATUS_ERROR_NOK;
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    3912:	82 e9       	ldi	r24, 0x92	; 146
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	0e 94 15 13 	call	0x262a	; 0x262a <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    391a:	81 30       	cpi	r24, 0x01	; 1
    391c:	11 f0       	breq	.+4      	; 0x3922 <SWPwm_Init+0x24>
    391e:	87 30       	cpi	r24, 0x07	; 7
    3920:	41 f4       	brne	.+16     	; 0x3932 <SWPwm_Init+0x34>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <genu_SWPwmModStatus>
	return SWPWM_STATUS_ERROR_OK;
    3928:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_ERROR_NOK;
    392a:	80 e0       	ldi	r24, 0x00	; 0
    392c:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
		return SWPWM_STATUS_ERROR_NOK;
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	08 95       	ret
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return SWPWM_STATUS_ERROR_NOK;
    3932:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
	return SWPWM_STATUS_ERROR_OK;
}
    3934:	08 95       	ret

00003936 <SWPwm_Start>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Start(u8SWPwm_Channel_t u8_ChannelID, uint32_t u32_Freq, uint8_t u8_DutyCycle)
{
    3936:	4f 92       	push	r4
    3938:	5f 92       	push	r5
    393a:	6f 92       	push	r6
    393c:	7f 92       	push	r7
    393e:	8f 92       	push	r8
    3940:	9f 92       	push	r9
    3942:	af 92       	push	r10
    3944:	bf 92       	push	r11
    3946:	cf 92       	push	r12
    3948:	df 92       	push	r13
    394a:	ef 92       	push	r14
    394c:	ff 92       	push	r15
    394e:	0f 93       	push	r16
    3950:	1f 93       	push	r17
    3952:	cf 93       	push	r28
    3954:	df 93       	push	r29
    3956:	00 d0       	rcall	.+0      	; 0x3958 <SWPwm_Start+0x22>
    3958:	00 d0       	rcall	.+0      	; 0x395a <SWPwm_Start+0x24>
    395a:	00 d0       	rcall	.+0      	; 0x395c <SWPwm_Start+0x26>
    395c:	cd b7       	in	r28, 0x3d	; 61
    395e:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    3960:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <genu_SWPwmModStatus>
    3964:	91 30       	cpi	r25, 0x01	; 1
    3966:	09 f0       	breq	.+2      	; 0x396a <SWPwm_Start+0x34>
    3968:	f2 c0       	rjmp	.+484    	; 0x3b4e <SWPwm_Start+0x218>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    396a:	81 11       	cpse	r24, r1
    396c:	f2 c0       	rjmp	.+484    	; 0x3b52 <SWPwm_Start+0x21c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
    396e:	25 36       	cpi	r18, 0x65	; 101
    3970:	08 f0       	brcs	.+2      	; 0x3974 <SWPwm_Start+0x3e>
    3972:	f1 c0       	rjmp	.+482    	; 0x3b56 <SWPwm_Start+0x220>
	{
		return SWPWM_STATUS_DC_OUTRANGE;
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
    3974:	e8 2f       	mov	r30, r24
    3976:	f0 e0       	ldi	r31, 0x00	; 0
    3978:	fe 83       	std	Y+6, r31	; 0x06
    397a:	ed 83       	std	Y+5, r30	; 0x05
    397c:	df 01       	movw	r26, r30
    397e:	aa 0f       	add	r26, r26
    3980:	bb 1f       	adc	r27, r27
    3982:	fd 01       	movw	r30, r26
    3984:	ee 0f       	add	r30, r30
    3986:	ff 1f       	adc	r31, r31
    3988:	ee 0f       	add	r30, r30
    398a:	ff 1f       	adc	r31, r31
    398c:	ee 0f       	add	r30, r30
    398e:	ff 1f       	adc	r31, r31
    3990:	ea 1b       	sub	r30, r26
    3992:	fb 0b       	sbc	r31, r27
    3994:	ec 52       	subi	r30, 0x2C	; 44
    3996:	f9 4f       	sbci	r31, 0xF9	; 249
    3998:	95 85       	ldd	r25, Z+13	; 0x0d
    399a:	92 30       	cpi	r25, 0x02	; 2
    399c:	09 f4       	brne	.+2      	; 0x39a0 <SWPwm_Start+0x6a>
    399e:	dd c0       	rjmp	.+442    	; 0x3b5a <SWPwm_Start+0x224>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
    39a0:	22 23       	and	r18, r18
    39a2:	09 f4       	brne	.+2      	; 0x39a6 <SWPwm_Start+0x70>
    39a4:	dc c0       	rjmp	.+440    	; 0x3b5e <SWPwm_Start+0x228>
    39a6:	12 2f       	mov	r17, r18
    39a8:	c8 2e       	mov	r12, r24
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
	}else if(u8_DutyCycle == 100)
    39aa:	24 36       	cpi	r18, 0x64	; 100
    39ac:	61 f4       	brne	.+24     	; 0x39c6 <SWPwm_Start+0x90>
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    39ae:	fd 01       	movw	r30, r26
    39b0:	e5 59       	subi	r30, 0x95	; 149
    39b2:	fa 4f       	sbci	r31, 0xFA	; 250
    39b4:	61 e0       	ldi	r22, 0x01	; 1
    39b6:	80 81       	ld	r24, Z
    39b8:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    39bc:	81 30       	cpi	r24, 0x01	; 1
    39be:	09 f4       	brne	.+2      	; 0x39c2 <SWPwm_Start+0x8c>
    39c0:	d0 c0       	rjmp	.+416    	; 0x3b62 <SWPwm_Start+0x22c>
			return SWPWM_STATUS_ERROR_NOK;
    39c2:	80 e0       	ldi	r24, 0x00	; 0
    39c4:	d5 c0       	rjmp	.+426    	; 0x3b70 <SWPwm_Start+0x23a>
		return SWPWM_STATUS_ERROR_OK;
	}
	
	float32_t f32_wavePeriodTime = (float32_t)1 / u32_Freq;					/* The Periodic Time for the Generated Pulse in Seconds */
    39c6:	cb 01       	movw	r24, r22
    39c8:	ba 01       	movw	r22, r20
    39ca:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__floatunsisf>
    39ce:	9b 01       	movw	r18, r22
    39d0:	ac 01       	movw	r20, r24
    39d2:	60 e0       	ldi	r22, 0x00	; 0
    39d4:	70 e0       	ldi	r23, 0x00	; 0
    39d6:	80 e8       	ldi	r24, 0x80	; 128
    39d8:	9f e3       	ldi	r25, 0x3F	; 63
    39da:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <__divsf3>
    39de:	4b 01       	movw	r8, r22
    39e0:	5c 01       	movw	r10, r24
	float32_t f32_waveONTime = (f32_wavePeriodTime*u8_DutyCycle) / 100;		/* The HIGH Level Time in Seconds */
    39e2:	61 2f       	mov	r22, r17
    39e4:	70 e0       	ldi	r23, 0x00	; 0
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	0e 94 00 20 	call	0x4000	; 0x4000 <__floatsisf>
    39ee:	a5 01       	movw	r20, r10
    39f0:	94 01       	movw	r18, r8
    39f2:	0e 94 b0 20 	call	0x4160	; 0x4160 <__mulsf3>
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	48 ec       	ldi	r20, 0xC8	; 200
    39fc:	52 e4       	ldi	r21, 0x42	; 66
    39fe:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <__divsf3>
    3a02:	2b 01       	movw	r4, r22
    3a04:	3c 01       	movw	r6, r24
	float32_t f32_waveOFFTime = f32_wavePeriodTime - f32_waveONTime;		/* The LOW Level Time in Seconds */
    3a06:	9b 01       	movw	r18, r22
    3a08:	ac 01       	movw	r20, r24
    3a0a:	c5 01       	movw	r24, r10
    3a0c:	b4 01       	movw	r22, r8
    3a0e:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <__subsf3>
    3a12:	4b 01       	movw	r8, r22
    3a14:	5c 01       	movw	r10, r24
	float32_t f32_systemPeriodTime = 0.0;
	uint16_t  u16_prescalerValue = 0;
	
	/* Get the Prescaler Value of the used Timer Channel */
	switch(Timers_Configurations[SWPwm_Channels[u8_ChannelID].u8_GptChannelID].enuClock_Src)
    3a16:	ed 81       	ldd	r30, Y+5	; 0x05
    3a18:	fe 81       	ldd	r31, Y+6	; 0x06
    3a1a:	ee 0f       	add	r30, r30
    3a1c:	ff 1f       	adc	r31, r31
    3a1e:	e5 59       	subi	r30, 0x95	; 149
    3a20:	fa 4f       	sbci	r31, 0xFA	; 250
    3a22:	d1 80       	ldd	r13, Z+1	; 0x01
    3a24:	8d 2d       	mov	r24, r13
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	fc 01       	movw	r30, r24
    3a2a:	ee 0f       	add	r30, r30
    3a2c:	ff 1f       	adc	r31, r31
    3a2e:	8e 0f       	add	r24, r30
    3a30:	9f 1f       	adc	r25, r31
    3a32:	fc 01       	movw	r30, r24
    3a34:	e8 59       	subi	r30, 0x98	; 152
    3a36:	fa 4f       	sbci	r31, 0xFA	; 250
    3a38:	e1 81       	ldd	r30, Z+1	; 0x01
    3a3a:	8e 2f       	mov	r24, r30
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	fc 01       	movw	r30, r24
    3a40:	31 97       	sbiw	r30, 0x01	; 1
    3a42:	e7 30       	cpi	r30, 0x07	; 7
    3a44:	f1 05       	cpc	r31, r1
    3a46:	08 f0       	brcs	.+2      	; 0x3a4a <SWPwm_Start+0x114>
    3a48:	8e c0       	rjmp	.+284    	; 0x3b66 <SWPwm_Start+0x230>
    3a4a:	e6 5d       	subi	r30, 0xD6	; 214
    3a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4e:	0c 94 53 21 	jmp	0x42a6	; 0x42a6 <__tablejump2__>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
    3a52:	61 e0       	ldi	r22, 0x01	; 1
    3a54:	70 e0       	ldi	r23, 0x00	; 0
    3a56:	0b c0       	rjmp	.+22     	; 0x3a6e <SWPwm_Start+0x138>
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
			break;
		case GPT_CLK_SRC_PRSCLR_64:
			u16_prescalerValue = 64;
    3a58:	60 e4       	ldi	r22, 0x40	; 64
    3a5a:	70 e0       	ldi	r23, 0x00	; 0
			break;
    3a5c:	08 c0       	rjmp	.+16     	; 0x3a6e <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_256:
			u16_prescalerValue = 256;
    3a5e:	60 e0       	ldi	r22, 0x00	; 0
    3a60:	71 e0       	ldi	r23, 0x01	; 1
			break;
    3a62:	05 c0       	rjmp	.+10     	; 0x3a6e <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_1024:
			u16_prescalerValue = 1024;
    3a64:	60 e0       	ldi	r22, 0x00	; 0
    3a66:	74 e0       	ldi	r23, 0x04	; 4
			break;
    3a68:	02 c0       	rjmp	.+4      	; 0x3a6e <SWPwm_Start+0x138>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
    3a6a:	68 e0       	ldi	r22, 0x08	; 8
    3a6c:	70 e0       	ldi	r23, 0x00	; 0
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
	}
	
	f32_systemPeriodTime = (float32_t)u16_prescalerValue/SYS_CLOCK_FREQUENCY;				/* The Controllers Periodic Time in seconds based on the System Clock Frequency */
    3a6e:	80 e0       	ldi	r24, 0x00	; 0
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__floatunsisf>
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	34 e2       	ldi	r19, 0x24	; 36
    3a7a:	44 e7       	ldi	r20, 0x74	; 116
    3a7c:	59 e4       	ldi	r21, 0x49	; 73
    3a7e:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <__divsf3>
    3a82:	69 83       	std	Y+1, r22	; 0x01
    3a84:	7a 83       	std	Y+2, r23	; 0x02
    3a86:	8b 83       	std	Y+3, r24	; 0x03
    3a88:	9c 83       	std	Y+4, r25	; 0x04
	gu8_currentPwmChannel = u8_ChannelID;
    3a8a:	c0 92 d3 06 	sts	0x06D3, r12	; 0x8006d3 <gu8_currentPwmChannel>
	gstr_ChannelsData[u8_ChannelID].u32_ONTicks = f32_waveONTime/f32_systemPeriodTime;		/* The HIGH Level Time in Ticks */
    3a8e:	9b 01       	movw	r18, r22
    3a90:	ac 01       	movw	r20, r24
    3a92:	c3 01       	movw	r24, r6
    3a94:	b2 01       	movw	r22, r4
    3a96:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <__divsf3>
    3a9a:	ed 80       	ldd	r14, Y+5	; 0x05
    3a9c:	fe 80       	ldd	r15, Y+6	; 0x06
    3a9e:	ee 0c       	add	r14, r14
    3aa0:	ff 1c       	adc	r15, r15
    3aa2:	87 01       	movw	r16, r14
    3aa4:	00 0f       	add	r16, r16
    3aa6:	11 1f       	adc	r17, r17
    3aa8:	00 0f       	add	r16, r16
    3aaa:	11 1f       	adc	r17, r17
    3aac:	00 0f       	add	r16, r16
    3aae:	11 1f       	adc	r17, r17
    3ab0:	0e 19       	sub	r16, r14
    3ab2:	1f 09       	sbc	r17, r15
    3ab4:	0c 52       	subi	r16, 0x2C	; 44
    3ab6:	19 4f       	sbci	r17, 0xF9	; 249
    3ab8:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <__fixunssfsi>
    3abc:	f8 01       	movw	r30, r16
    3abe:	61 83       	std	Z+1, r22	; 0x01
    3ac0:	72 83       	std	Z+2, r23	; 0x02
    3ac2:	83 83       	std	Z+3, r24	; 0x03
    3ac4:	94 83       	std	Z+4, r25	; 0x04
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
    3ac6:	29 81       	ldd	r18, Y+1	; 0x01
    3ac8:	3a 81       	ldd	r19, Y+2	; 0x02
    3aca:	4b 81       	ldd	r20, Y+3	; 0x03
    3acc:	5c 81       	ldd	r21, Y+4	; 0x04
    3ace:	c5 01       	movw	r24, r10
    3ad0:	b4 01       	movw	r22, r8
    3ad2:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <__divsf3>
    3ad6:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <__fixunssfsi>
    3ada:	f8 01       	movw	r30, r16
    3adc:	65 83       	std	Z+5, r22	; 0x05
    3ade:	76 83       	std	Z+6, r23	; 0x06
    3ae0:	87 83       	std	Z+7, r24	; 0x07
    3ae2:	90 87       	std	Z+8, r25	; 0x08
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;
    3ae4:	c0 82       	st	Z, r12

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    3ae6:	f7 01       	movw	r30, r14
    3ae8:	e5 59       	subi	r30, 0x95	; 149
    3aea:	fa 4f       	sbci	r31, 0xFA	; 250
    3aec:	61 e0       	ldi	r22, 0x01	; 1
    3aee:	80 81       	ld	r24, Z
    3af0:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    3af4:	81 30       	cpi	r24, 0x01	; 1
    3af6:	c9 f5       	brne	.+114    	; 0x3b6a <SWPwm_Start+0x234>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
    3af8:	8e e0       	ldi	r24, 0x0E	; 14
    3afa:	2d 81       	ldd	r18, Y+5	; 0x05
    3afc:	3e 81       	ldd	r19, Y+6	; 0x06
    3afe:	82 9f       	mul	r24, r18
    3b00:	f0 01       	movw	r30, r0
    3b02:	83 9f       	mul	r24, r19
    3b04:	f0 0d       	add	r31, r0
    3b06:	11 24       	eor	r1, r1
    3b08:	ec 52       	subi	r30, 0x2C	; 44
    3b0a:	f9 4f       	sbci	r31, 0xF9	; 249
    3b0c:	41 81       	ldd	r20, Z+1	; 0x01
    3b0e:	52 81       	ldd	r21, Z+2	; 0x02
    3b10:	63 81       	ldd	r22, Z+3	; 0x03
    3b12:	74 81       	ldd	r23, Z+4	; 0x04
    3b14:	27 ef       	ldi	r18, 0xF7	; 247
    3b16:	3b e1       	ldi	r19, 0x1B	; 27
    3b18:	8d 2d       	mov	r24, r13
    3b1a:	0e 94 6d 16 	call	0x2cda	; 0x2cda <GptStart_aSync>
    3b1e:	81 30       	cpi	r24, 0x01	; 1
    3b20:	31 f5       	brne	.+76     	; 0x3b6e <SWPwm_Start+0x238>
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
	
	/* Assign the Next Ticks to be counted by the Asynchronous Timer */
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
    3b22:	8e e0       	ldi	r24, 0x0E	; 14
    3b24:	2d 81       	ldd	r18, Y+5	; 0x05
    3b26:	3e 81       	ldd	r19, Y+6	; 0x06
    3b28:	82 9f       	mul	r24, r18
    3b2a:	f0 01       	movw	r30, r0
    3b2c:	83 9f       	mul	r24, r19
    3b2e:	f0 0d       	add	r31, r0
    3b30:	11 24       	eor	r1, r1
    3b32:	ec 52       	subi	r30, 0x2C	; 44
    3b34:	f9 4f       	sbci	r31, 0xF9	; 249
    3b36:	85 81       	ldd	r24, Z+5	; 0x05
    3b38:	96 81       	ldd	r25, Z+6	; 0x06
    3b3a:	a7 81       	ldd	r26, Z+7	; 0x07
    3b3c:	b0 85       	ldd	r27, Z+8	; 0x08
    3b3e:	81 87       	std	Z+9, r24	; 0x09
    3b40:	92 87       	std	Z+10, r25	; 0x0a
    3b42:	a3 87       	std	Z+11, r26	; 0x0b
    3b44:	b4 87       	std	Z+12, r27	; 0x0c
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;
    3b46:	82 e0       	ldi	r24, 0x02	; 2
    3b48:	85 87       	std	Z+13, r24	; 0x0d

	return SWPWM_STATUS_ERROR_OK;
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	11 c0       	rjmp	.+34     	; 0x3b70 <SWPwm_Start+0x23a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    3b4e:	82 e0       	ldi	r24, 0x02	; 2
    3b50:	0f c0       	rjmp	.+30     	; 0x3b70 <SWPwm_Start+0x23a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    3b52:	83 e0       	ldi	r24, 0x03	; 3
    3b54:	0d c0       	rjmp	.+26     	; 0x3b70 <SWPwm_Start+0x23a>
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
	{
		return SWPWM_STATUS_DC_OUTRANGE;
    3b56:	84 e0       	ldi	r24, 0x04	; 4
    3b58:	0b c0       	rjmp	.+22     	; 0x3b70 <SWPwm_Start+0x23a>
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    3b5a:	85 e0       	ldi	r24, 0x05	; 5
    3b5c:	09 c0       	rjmp	.+18     	; 0x3b70 <SWPwm_Start+0x23a>
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	07 c0       	rjmp	.+14     	; 0x3b70 <SWPwm_Start+0x23a>
	}else if(u8_DutyCycle == 100)
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return SWPWM_STATUS_ERROR_NOK;
		return SWPWM_STATUS_ERROR_OK;
    3b62:	81 e0       	ldi	r24, 0x01	; 1
    3b64:	05 c0       	rjmp	.+10     	; 0x3b70 <SWPwm_Start+0x23a>
			break;
		case GPT_CLK_SRC_PRSCLR_EXT_RISE:
			u16_prescalerValue = 1;
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
    3b66:	80 e0       	ldi	r24, 0x00	; 0
    3b68:	03 c0       	rjmp	.+6      	; 0x3b70 <SWPwm_Start+0x23a>
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	01 c0       	rjmp	.+2      	; 0x3b70 <SWPwm_Start+0x23a>
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
    3b6e:	80 e0       	ldi	r24, 0x00	; 0
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;

	return SWPWM_STATUS_ERROR_OK;
}
    3b70:	26 96       	adiw	r28, 0x06	; 6
    3b72:	0f b6       	in	r0, 0x3f	; 63
    3b74:	f8 94       	cli
    3b76:	de bf       	out	0x3e, r29	; 62
    3b78:	0f be       	out	0x3f, r0	; 63
    3b7a:	cd bf       	out	0x3d, r28	; 61
    3b7c:	df 91       	pop	r29
    3b7e:	cf 91       	pop	r28
    3b80:	1f 91       	pop	r17
    3b82:	0f 91       	pop	r16
    3b84:	ff 90       	pop	r15
    3b86:	ef 90       	pop	r14
    3b88:	df 90       	pop	r13
    3b8a:	cf 90       	pop	r12
    3b8c:	bf 90       	pop	r11
    3b8e:	af 90       	pop	r10
    3b90:	9f 90       	pop	r9
    3b92:	8f 90       	pop	r8
    3b94:	7f 90       	pop	r7
    3b96:	6f 90       	pop	r6
    3b98:	5f 90       	pop	r5
    3b9a:	4f 90       	pop	r4
    3b9c:	08 95       	ret

00003b9e <SWPwm_Stop>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Stop(u8SWPwm_Channel_t u8_ChannelID)
{
    3b9e:	cf 93       	push	r28
    3ba0:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    3ba2:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <genu_SWPwmModStatus>
    3ba6:	91 30       	cpi	r25, 0x01	; 1
    3ba8:	b1 f5       	brne	.+108    	; 0x3c16 <SWPwm_Stop+0x78>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    3baa:	81 11       	cpse	r24, r1
    3bac:	36 c0       	rjmp	.+108    	; 0x3c1a <SWPwm_Stop+0x7c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
    3bae:	c8 2f       	mov	r28, r24
    3bb0:	d0 e0       	ldi	r29, 0x00	; 0
    3bb2:	ce 01       	movw	r24, r28
    3bb4:	88 0f       	add	r24, r24
    3bb6:	99 1f       	adc	r25, r25
    3bb8:	fc 01       	movw	r30, r24
    3bba:	ee 0f       	add	r30, r30
    3bbc:	ff 1f       	adc	r31, r31
    3bbe:	ee 0f       	add	r30, r30
    3bc0:	ff 1f       	adc	r31, r31
    3bc2:	ee 0f       	add	r30, r30
    3bc4:	ff 1f       	adc	r31, r31
    3bc6:	e8 1b       	sub	r30, r24
    3bc8:	f9 0b       	sbc	r31, r25
    3bca:	ec 52       	subi	r30, 0x2C	; 44
    3bcc:	f9 4f       	sbci	r31, 0xF9	; 249
    3bce:	85 85       	ldd	r24, Z+13	; 0x0d
    3bd0:	82 30       	cpi	r24, 0x02	; 2
    3bd2:	29 f5       	brne	.+74     	; 0x3c1e <SWPwm_Stop+0x80>
	
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
    3bd4:	fe 01       	movw	r30, r28
    3bd6:	ee 0f       	add	r30, r30
    3bd8:	ff 1f       	adc	r31, r31
    3bda:	e5 59       	subi	r30, 0x95	; 149
    3bdc:	fa 4f       	sbci	r31, 0xFA	; 250
    3bde:	60 e0       	ldi	r22, 0x00	; 0
    3be0:	80 81       	ld	r24, Z
    3be2:	0e 94 03 14 	call	0x2806	; 0x2806 <Dio_writePin>
    3be6:	81 30       	cpi	r24, 0x01	; 1
    3be8:	e1 f4       	brne	.+56     	; 0x3c22 <SWPwm_Stop+0x84>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the State of the PWM Channel to STOPPED */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
    3bea:	8e e0       	ldi	r24, 0x0E	; 14
    3bec:	8c 9f       	mul	r24, r28
    3bee:	f0 01       	movw	r30, r0
    3bf0:	8d 9f       	mul	r24, r29
    3bf2:	f0 0d       	add	r31, r0
    3bf4:	11 24       	eor	r1, r1
    3bf6:	ec 52       	subi	r30, 0x2C	; 44
    3bf8:	f9 4f       	sbci	r31, 0xF9	; 249
    3bfa:	83 e0       	ldi	r24, 0x03	; 3
    3bfc:	85 87       	std	Z+13, r24	; 0x0d
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
    3bfe:	fe 01       	movw	r30, r28
    3c00:	ee 0f       	add	r30, r30
    3c02:	ff 1f       	adc	r31, r31
    3c04:	e5 59       	subi	r30, 0x95	; 149
    3c06:	fa 4f       	sbci	r31, 0xFA	; 250
    3c08:	81 81       	ldd	r24, Z+1	; 0x01
    3c0a:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <GptStop>
    3c0e:	81 30       	cpi	r24, 0x01	; 1
    3c10:	51 f0       	breq	.+20     	; 0x3c26 <SWPwm_Stop+0x88>
		return SWPWM_STATUS_ERROR_NOK;
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	09 c0       	rjmp	.+18     	; 0x3c28 <SWPwm_Stop+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    3c16:	82 e0       	ldi	r24, 0x02	; 2
    3c18:	07 c0       	rjmp	.+14     	; 0x3c28 <SWPwm_Stop+0x8a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    3c1a:	83 e0       	ldi	r24, 0x03	; 3
    3c1c:	05 c0       	rjmp	.+10     	; 0x3c28 <SWPwm_Stop+0x8a>
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    3c1e:	85 e0       	ldi	r24, 0x05	; 5
    3c20:	03 c0       	rjmp	.+6      	; 0x3c28 <SWPwm_Stop+0x8a>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	01 c0       	rjmp	.+2      	; 0x3c28 <SWPwm_Stop+0x8a>
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
	
	return SWPWM_STATUS_ERROR_OK;
    3c26:	81 e0       	ldi	r24, 0x01	; 1
}
    3c28:	df 91       	pop	r29
    3c2a:	cf 91       	pop	r28
    3c2c:	08 95       	ret

00003c2e <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    3c2e:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <u8_Uart_Status>
    3c32:	81 30       	cpi	r24, 0x01	; 1
    3c34:	81 f0       	breq	.+32     	; 0x3c56 <Uart_init+0x28>
    3c36:	10 bc       	out	0x20, r1	; 32
    3c38:	87 e6       	ldi	r24, 0x67	; 103
    3c3a:	89 b9       	out	0x09, r24	; 9
    3c3c:	82 e0       	ldi	r24, 0x02	; 2
    3c3e:	8b b9       	out	0x0b, r24	; 11
    3c40:	88 e1       	ldi	r24, 0x18	; 24
    3c42:	8a b9       	out	0x0a, r24	; 10
    3c44:	80 e8       	ldi	r24, 0x80	; 128
    3c46:	80 bd       	out	0x20, r24	; 32
    3c48:	80 b5       	in	r24, 0x20	; 32
    3c4a:	86 68       	ori	r24, 0x86	; 134
    3c4c:	80 bd       	out	0x20, r24	; 32
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <u8_Uart_Status>
    3c54:	08 95       	ret
    3c56:	87 e0       	ldi	r24, 0x07	; 7
    3c58:	08 95       	ret

00003c5a <Uart_sendByte>:
    3c5a:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <u8_Uart_Status>
    3c5e:	99 23       	and	r25, r25
    3c60:	29 f0       	breq	.+10     	; 0x3c6c <Uart_sendByte+0x12>
    3c62:	5d 9b       	sbis	0x0b, 5	; 11
    3c64:	fe cf       	rjmp	.-4      	; 0x3c62 <Uart_sendByte+0x8>
    3c66:	8c b9       	out	0x0c, r24	; 12
    3c68:	81 e0       	ldi	r24, 0x01	; 1
    3c6a:	08 95       	ret
    3c6c:	86 e0       	ldi	r24, 0x06	; 6
    3c6e:	08 95       	ret

00003c70 <Uart_sendPacket>:
    3c70:	ef 92       	push	r14
    3c72:	ff 92       	push	r15
    3c74:	0f 93       	push	r16
    3c76:	1f 93       	push	r17
    3c78:	cf 93       	push	r28
    3c7a:	df 93       	push	r29
    3c7c:	20 91 e2 06 	lds	r18, 0x06E2	; 0x8006e2 <u8_Uart_Status>
    3c80:	22 23       	and	r18, r18
    3c82:	99 f0       	breq	.+38     	; 0x3caa <Uart_sendPacket+0x3a>
    3c84:	8b 01       	movw	r16, r22
    3c86:	7c 01       	movw	r14, r24
    3c88:	c0 e0       	ldi	r28, 0x00	; 0
    3c8a:	d0 e0       	ldi	r29, 0x00	; 0
    3c8c:	09 c0       	rjmp	.+18     	; 0x3ca0 <Uart_sendPacket+0x30>
    3c8e:	f7 01       	movw	r30, r14
    3c90:	ec 0f       	add	r30, r28
    3c92:	fd 1f       	adc	r31, r29
    3c94:	80 81       	ld	r24, Z
    3c96:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <Uart_sendByte>
    3c9a:	81 30       	cpi	r24, 0x01	; 1
    3c9c:	41 f4       	brne	.+16     	; 0x3cae <Uart_sendPacket+0x3e>
    3c9e:	21 96       	adiw	r28, 0x01	; 1
    3ca0:	c0 17       	cp	r28, r16
    3ca2:	d1 07       	cpc	r29, r17
    3ca4:	a0 f3       	brcs	.-24     	; 0x3c8e <Uart_sendPacket+0x1e>
    3ca6:	81 e0       	ldi	r24, 0x01	; 1
    3ca8:	03 c0       	rjmp	.+6      	; 0x3cb0 <Uart_sendPacket+0x40>
    3caa:	86 e0       	ldi	r24, 0x06	; 6
    3cac:	01 c0       	rjmp	.+2      	; 0x3cb0 <Uart_sendPacket+0x40>
    3cae:	80 e0       	ldi	r24, 0x00	; 0
    3cb0:	df 91       	pop	r29
    3cb2:	cf 91       	pop	r28
    3cb4:	1f 91       	pop	r17
    3cb6:	0f 91       	pop	r16
    3cb8:	ff 90       	pop	r15
    3cba:	ef 90       	pop	r14
    3cbc:	08 95       	ret

00003cbe <Uart_EnableNotification_RXC>:
    3cbe:	9c 01       	movw	r18, r24
    3cc0:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <u8_Uart_Status>
    3cc4:	99 23       	and	r25, r25
    3cc6:	61 f0       	breq	.+24     	; 0x3ce0 <Uart_EnableNotification_RXC+0x22>
    3cc8:	21 15       	cp	r18, r1
    3cca:	31 05       	cpc	r19, r1
    3ccc:	59 f0       	breq	.+22     	; 0x3ce4 <Uart_EnableNotification_RXC+0x26>
    3cce:	8a b1       	in	r24, 0x0a	; 10
    3cd0:	80 68       	ori	r24, 0x80	; 128
    3cd2:	8a b9       	out	0x0a, r24	; 10
    3cd4:	30 93 e6 06 	sts	0x06E6, r19	; 0x8006e6 <Uart_RXC_CallBackPtr+0x1>
    3cd8:	20 93 e5 06 	sts	0x06E5, r18	; 0x8006e5 <Uart_RXC_CallBackPtr>
    3cdc:	81 e0       	ldi	r24, 0x01	; 1
    3cde:	08 95       	ret
    3ce0:	86 e0       	ldi	r24, 0x06	; 6
    3ce2:	08 95       	ret
    3ce4:	85 e0       	ldi	r24, 0x05	; 5
    3ce6:	08 95       	ret

00003ce8 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    3ce8:	8c b1       	in	r24, 0x0c	; 12
}
    3cea:	08 95       	ret

00003cec <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    3cec:	1f 92       	push	r1
    3cee:	0f 92       	push	r0
    3cf0:	0f b6       	in	r0, 0x3f	; 63
    3cf2:	0f 92       	push	r0
    3cf4:	11 24       	eor	r1, r1
    3cf6:	2f 93       	push	r18
    3cf8:	3f 93       	push	r19
    3cfa:	4f 93       	push	r20
    3cfc:	5f 93       	push	r21
    3cfe:	6f 93       	push	r22
    3d00:	7f 93       	push	r23
    3d02:	8f 93       	push	r24
    3d04:	9f 93       	push	r25
    3d06:	af 93       	push	r26
    3d08:	bf 93       	push	r27
    3d0a:	ef 93       	push	r30
    3d0c:	ff 93       	push	r31
    3d0e:	e0 91 e7 06 	lds	r30, 0x06E7	; 0x8006e7 <Uart_TXC_CallBackPtr>
    3d12:	f0 91 e8 06 	lds	r31, 0x06E8	; 0x8006e8 <Uart_TXC_CallBackPtr+0x1>
    3d16:	09 95       	icall
    3d18:	ff 91       	pop	r31
    3d1a:	ef 91       	pop	r30
    3d1c:	bf 91       	pop	r27
    3d1e:	af 91       	pop	r26
    3d20:	9f 91       	pop	r25
    3d22:	8f 91       	pop	r24
    3d24:	7f 91       	pop	r23
    3d26:	6f 91       	pop	r22
    3d28:	5f 91       	pop	r21
    3d2a:	4f 91       	pop	r20
    3d2c:	3f 91       	pop	r19
    3d2e:	2f 91       	pop	r18
    3d30:	0f 90       	pop	r0
    3d32:	0f be       	out	0x3f, r0	; 63
    3d34:	0f 90       	pop	r0
    3d36:	1f 90       	pop	r1
    3d38:	18 95       	reti

00003d3a <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    3d3a:	1f 92       	push	r1
    3d3c:	0f 92       	push	r0
    3d3e:	0f b6       	in	r0, 0x3f	; 63
    3d40:	0f 92       	push	r0
    3d42:	11 24       	eor	r1, r1
    3d44:	2f 93       	push	r18
    3d46:	3f 93       	push	r19
    3d48:	4f 93       	push	r20
    3d4a:	5f 93       	push	r21
    3d4c:	6f 93       	push	r22
    3d4e:	7f 93       	push	r23
    3d50:	8f 93       	push	r24
    3d52:	9f 93       	push	r25
    3d54:	af 93       	push	r26
    3d56:	bf 93       	push	r27
    3d58:	ef 93       	push	r30
    3d5a:	ff 93       	push	r31
    3d5c:	e0 91 e5 06 	lds	r30, 0x06E5	; 0x8006e5 <Uart_RXC_CallBackPtr>
    3d60:	f0 91 e6 06 	lds	r31, 0x06E6	; 0x8006e6 <Uart_RXC_CallBackPtr+0x1>
    3d64:	09 95       	icall
    3d66:	ff 91       	pop	r31
    3d68:	ef 91       	pop	r30
    3d6a:	bf 91       	pop	r27
    3d6c:	af 91       	pop	r26
    3d6e:	9f 91       	pop	r25
    3d70:	8f 91       	pop	r24
    3d72:	7f 91       	pop	r23
    3d74:	6f 91       	pop	r22
    3d76:	5f 91       	pop	r21
    3d78:	4f 91       	pop	r20
    3d7a:	3f 91       	pop	r19
    3d7c:	2f 91       	pop	r18
    3d7e:	0f 90       	pop	r0
    3d80:	0f be       	out	0x3f, r0	; 63
    3d82:	0f 90       	pop	r0
    3d84:	1f 90       	pop	r1
    3d86:	18 95       	reti

00003d88 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    3d88:	1f 92       	push	r1
    3d8a:	0f 92       	push	r0
    3d8c:	0f b6       	in	r0, 0x3f	; 63
    3d8e:	0f 92       	push	r0
    3d90:	11 24       	eor	r1, r1
    3d92:	2f 93       	push	r18
    3d94:	3f 93       	push	r19
    3d96:	4f 93       	push	r20
    3d98:	5f 93       	push	r21
    3d9a:	6f 93       	push	r22
    3d9c:	7f 93       	push	r23
    3d9e:	8f 93       	push	r24
    3da0:	9f 93       	push	r25
    3da2:	af 93       	push	r26
    3da4:	bf 93       	push	r27
    3da6:	ef 93       	push	r30
    3da8:	ff 93       	push	r31
    3daa:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <Uart_UDRE_CallBackPtr>
    3dae:	f0 91 e4 06 	lds	r31, 0x06E4	; 0x8006e4 <Uart_UDRE_CallBackPtr+0x1>
    3db2:	09 95       	icall
    3db4:	ff 91       	pop	r31
    3db6:	ef 91       	pop	r30
    3db8:	bf 91       	pop	r27
    3dba:	af 91       	pop	r26
    3dbc:	9f 91       	pop	r25
    3dbe:	8f 91       	pop	r24
    3dc0:	7f 91       	pop	r23
    3dc2:	6f 91       	pop	r22
    3dc4:	5f 91       	pop	r21
    3dc6:	4f 91       	pop	r20
    3dc8:	3f 91       	pop	r19
    3dca:	2f 91       	pop	r18
    3dcc:	0f 90       	pop	r0
    3dce:	0f be       	out	0x3f, r0	; 63
    3dd0:	0f 90       	pop	r0
    3dd2:	1f 90       	pop	r1
    3dd4:	18 95       	reti

00003dd6 <__subsf3>:
    3dd6:	50 58       	subi	r21, 0x80	; 128

00003dd8 <__addsf3>:
    3dd8:	bb 27       	eor	r27, r27
    3dda:	aa 27       	eor	r26, r26
    3ddc:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__addsf3x>
    3de0:	0c 94 76 20 	jmp	0x40ec	; 0x40ec <__fp_round>
    3de4:	0e 94 68 20 	call	0x40d0	; 0x40d0 <__fp_pscA>
    3de8:	38 f0       	brcs	.+14     	; 0x3df8 <__addsf3+0x20>
    3dea:	0e 94 6f 20 	call	0x40de	; 0x40de <__fp_pscB>
    3dee:	20 f0       	brcs	.+8      	; 0x3df8 <__addsf3+0x20>
    3df0:	39 f4       	brne	.+14     	; 0x3e00 <__addsf3+0x28>
    3df2:	9f 3f       	cpi	r25, 0xFF	; 255
    3df4:	19 f4       	brne	.+6      	; 0x3dfc <__addsf3+0x24>
    3df6:	26 f4       	brtc	.+8      	; 0x3e00 <__addsf3+0x28>
    3df8:	0c 94 65 20 	jmp	0x40ca	; 0x40ca <__fp_nan>
    3dfc:	0e f4       	brtc	.+2      	; 0x3e00 <__addsf3+0x28>
    3dfe:	e0 95       	com	r30
    3e00:	e7 fb       	bst	r30, 7
    3e02:	0c 94 5f 20 	jmp	0x40be	; 0x40be <__fp_inf>

00003e06 <__addsf3x>:
    3e06:	e9 2f       	mov	r30, r25
    3e08:	0e 94 87 20 	call	0x410e	; 0x410e <__fp_split3>
    3e0c:	58 f3       	brcs	.-42     	; 0x3de4 <__addsf3+0xc>
    3e0e:	ba 17       	cp	r27, r26
    3e10:	62 07       	cpc	r22, r18
    3e12:	73 07       	cpc	r23, r19
    3e14:	84 07       	cpc	r24, r20
    3e16:	95 07       	cpc	r25, r21
    3e18:	20 f0       	brcs	.+8      	; 0x3e22 <__addsf3x+0x1c>
    3e1a:	79 f4       	brne	.+30     	; 0x3e3a <__addsf3x+0x34>
    3e1c:	a6 f5       	brtc	.+104    	; 0x3e86 <__addsf3x+0x80>
    3e1e:	0c 94 a9 20 	jmp	0x4152	; 0x4152 <__fp_zero>
    3e22:	0e f4       	brtc	.+2      	; 0x3e26 <__addsf3x+0x20>
    3e24:	e0 95       	com	r30
    3e26:	0b 2e       	mov	r0, r27
    3e28:	ba 2f       	mov	r27, r26
    3e2a:	a0 2d       	mov	r26, r0
    3e2c:	0b 01       	movw	r0, r22
    3e2e:	b9 01       	movw	r22, r18
    3e30:	90 01       	movw	r18, r0
    3e32:	0c 01       	movw	r0, r24
    3e34:	ca 01       	movw	r24, r20
    3e36:	a0 01       	movw	r20, r0
    3e38:	11 24       	eor	r1, r1
    3e3a:	ff 27       	eor	r31, r31
    3e3c:	59 1b       	sub	r21, r25
    3e3e:	99 f0       	breq	.+38     	; 0x3e66 <__addsf3x+0x60>
    3e40:	59 3f       	cpi	r21, 0xF9	; 249
    3e42:	50 f4       	brcc	.+20     	; 0x3e58 <__addsf3x+0x52>
    3e44:	50 3e       	cpi	r21, 0xE0	; 224
    3e46:	68 f1       	brcs	.+90     	; 0x3ea2 <__addsf3x+0x9c>
    3e48:	1a 16       	cp	r1, r26
    3e4a:	f0 40       	sbci	r31, 0x00	; 0
    3e4c:	a2 2f       	mov	r26, r18
    3e4e:	23 2f       	mov	r18, r19
    3e50:	34 2f       	mov	r19, r20
    3e52:	44 27       	eor	r20, r20
    3e54:	58 5f       	subi	r21, 0xF8	; 248
    3e56:	f3 cf       	rjmp	.-26     	; 0x3e3e <__addsf3x+0x38>
    3e58:	46 95       	lsr	r20
    3e5a:	37 95       	ror	r19
    3e5c:	27 95       	ror	r18
    3e5e:	a7 95       	ror	r26
    3e60:	f0 40       	sbci	r31, 0x00	; 0
    3e62:	53 95       	inc	r21
    3e64:	c9 f7       	brne	.-14     	; 0x3e58 <__addsf3x+0x52>
    3e66:	7e f4       	brtc	.+30     	; 0x3e86 <__addsf3x+0x80>
    3e68:	1f 16       	cp	r1, r31
    3e6a:	ba 0b       	sbc	r27, r26
    3e6c:	62 0b       	sbc	r22, r18
    3e6e:	73 0b       	sbc	r23, r19
    3e70:	84 0b       	sbc	r24, r20
    3e72:	ba f0       	brmi	.+46     	; 0x3ea2 <__addsf3x+0x9c>
    3e74:	91 50       	subi	r25, 0x01	; 1
    3e76:	a1 f0       	breq	.+40     	; 0x3ea0 <__addsf3x+0x9a>
    3e78:	ff 0f       	add	r31, r31
    3e7a:	bb 1f       	adc	r27, r27
    3e7c:	66 1f       	adc	r22, r22
    3e7e:	77 1f       	adc	r23, r23
    3e80:	88 1f       	adc	r24, r24
    3e82:	c2 f7       	brpl	.-16     	; 0x3e74 <__addsf3x+0x6e>
    3e84:	0e c0       	rjmp	.+28     	; 0x3ea2 <__addsf3x+0x9c>
    3e86:	ba 0f       	add	r27, r26
    3e88:	62 1f       	adc	r22, r18
    3e8a:	73 1f       	adc	r23, r19
    3e8c:	84 1f       	adc	r24, r20
    3e8e:	48 f4       	brcc	.+18     	; 0x3ea2 <__addsf3x+0x9c>
    3e90:	87 95       	ror	r24
    3e92:	77 95       	ror	r23
    3e94:	67 95       	ror	r22
    3e96:	b7 95       	ror	r27
    3e98:	f7 95       	ror	r31
    3e9a:	9e 3f       	cpi	r25, 0xFE	; 254
    3e9c:	08 f0       	brcs	.+2      	; 0x3ea0 <__addsf3x+0x9a>
    3e9e:	b0 cf       	rjmp	.-160    	; 0x3e00 <__addsf3+0x28>
    3ea0:	93 95       	inc	r25
    3ea2:	88 0f       	add	r24, r24
    3ea4:	08 f0       	brcs	.+2      	; 0x3ea8 <__addsf3x+0xa2>
    3ea6:	99 27       	eor	r25, r25
    3ea8:	ee 0f       	add	r30, r30
    3eaa:	97 95       	ror	r25
    3eac:	87 95       	ror	r24
    3eae:	08 95       	ret

00003eb0 <__cmpsf2>:
    3eb0:	0e 94 3b 20 	call	0x4076	; 0x4076 <__fp_cmp>
    3eb4:	08 f4       	brcc	.+2      	; 0x3eb8 <__cmpsf2+0x8>
    3eb6:	81 e0       	ldi	r24, 0x01	; 1
    3eb8:	08 95       	ret

00003eba <__divsf3>:
    3eba:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__divsf3x>
    3ebe:	0c 94 76 20 	jmp	0x40ec	; 0x40ec <__fp_round>
    3ec2:	0e 94 6f 20 	call	0x40de	; 0x40de <__fp_pscB>
    3ec6:	58 f0       	brcs	.+22     	; 0x3ede <__divsf3+0x24>
    3ec8:	0e 94 68 20 	call	0x40d0	; 0x40d0 <__fp_pscA>
    3ecc:	40 f0       	brcs	.+16     	; 0x3ede <__divsf3+0x24>
    3ece:	29 f4       	brne	.+10     	; 0x3eda <__divsf3+0x20>
    3ed0:	5f 3f       	cpi	r21, 0xFF	; 255
    3ed2:	29 f0       	breq	.+10     	; 0x3ede <__divsf3+0x24>
    3ed4:	0c 94 5f 20 	jmp	0x40be	; 0x40be <__fp_inf>
    3ed8:	51 11       	cpse	r21, r1
    3eda:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__fp_szero>
    3ede:	0c 94 65 20 	jmp	0x40ca	; 0x40ca <__fp_nan>

00003ee2 <__divsf3x>:
    3ee2:	0e 94 87 20 	call	0x410e	; 0x410e <__fp_split3>
    3ee6:	68 f3       	brcs	.-38     	; 0x3ec2 <__divsf3+0x8>

00003ee8 <__divsf3_pse>:
    3ee8:	99 23       	and	r25, r25
    3eea:	b1 f3       	breq	.-20     	; 0x3ed8 <__divsf3+0x1e>
    3eec:	55 23       	and	r21, r21
    3eee:	91 f3       	breq	.-28     	; 0x3ed4 <__divsf3+0x1a>
    3ef0:	95 1b       	sub	r25, r21
    3ef2:	55 0b       	sbc	r21, r21
    3ef4:	bb 27       	eor	r27, r27
    3ef6:	aa 27       	eor	r26, r26
    3ef8:	62 17       	cp	r22, r18
    3efa:	73 07       	cpc	r23, r19
    3efc:	84 07       	cpc	r24, r20
    3efe:	38 f0       	brcs	.+14     	; 0x3f0e <__divsf3_pse+0x26>
    3f00:	9f 5f       	subi	r25, 0xFF	; 255
    3f02:	5f 4f       	sbci	r21, 0xFF	; 255
    3f04:	22 0f       	add	r18, r18
    3f06:	33 1f       	adc	r19, r19
    3f08:	44 1f       	adc	r20, r20
    3f0a:	aa 1f       	adc	r26, r26
    3f0c:	a9 f3       	breq	.-22     	; 0x3ef8 <__divsf3_pse+0x10>
    3f0e:	35 d0       	rcall	.+106    	; 0x3f7a <__divsf3_pse+0x92>
    3f10:	0e 2e       	mov	r0, r30
    3f12:	3a f0       	brmi	.+14     	; 0x3f22 <__divsf3_pse+0x3a>
    3f14:	e0 e8       	ldi	r30, 0x80	; 128
    3f16:	32 d0       	rcall	.+100    	; 0x3f7c <__divsf3_pse+0x94>
    3f18:	91 50       	subi	r25, 0x01	; 1
    3f1a:	50 40       	sbci	r21, 0x00	; 0
    3f1c:	e6 95       	lsr	r30
    3f1e:	00 1c       	adc	r0, r0
    3f20:	ca f7       	brpl	.-14     	; 0x3f14 <__divsf3_pse+0x2c>
    3f22:	2b d0       	rcall	.+86     	; 0x3f7a <__divsf3_pse+0x92>
    3f24:	fe 2f       	mov	r31, r30
    3f26:	29 d0       	rcall	.+82     	; 0x3f7a <__divsf3_pse+0x92>
    3f28:	66 0f       	add	r22, r22
    3f2a:	77 1f       	adc	r23, r23
    3f2c:	88 1f       	adc	r24, r24
    3f2e:	bb 1f       	adc	r27, r27
    3f30:	26 17       	cp	r18, r22
    3f32:	37 07       	cpc	r19, r23
    3f34:	48 07       	cpc	r20, r24
    3f36:	ab 07       	cpc	r26, r27
    3f38:	b0 e8       	ldi	r27, 0x80	; 128
    3f3a:	09 f0       	breq	.+2      	; 0x3f3e <__divsf3_pse+0x56>
    3f3c:	bb 0b       	sbc	r27, r27
    3f3e:	80 2d       	mov	r24, r0
    3f40:	bf 01       	movw	r22, r30
    3f42:	ff 27       	eor	r31, r31
    3f44:	93 58       	subi	r25, 0x83	; 131
    3f46:	5f 4f       	sbci	r21, 0xFF	; 255
    3f48:	3a f0       	brmi	.+14     	; 0x3f58 <__divsf3_pse+0x70>
    3f4a:	9e 3f       	cpi	r25, 0xFE	; 254
    3f4c:	51 05       	cpc	r21, r1
    3f4e:	78 f0       	brcs	.+30     	; 0x3f6e <__divsf3_pse+0x86>
    3f50:	0c 94 5f 20 	jmp	0x40be	; 0x40be <__fp_inf>
    3f54:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__fp_szero>
    3f58:	5f 3f       	cpi	r21, 0xFF	; 255
    3f5a:	e4 f3       	brlt	.-8      	; 0x3f54 <__divsf3_pse+0x6c>
    3f5c:	98 3e       	cpi	r25, 0xE8	; 232
    3f5e:	d4 f3       	brlt	.-12     	; 0x3f54 <__divsf3_pse+0x6c>
    3f60:	86 95       	lsr	r24
    3f62:	77 95       	ror	r23
    3f64:	67 95       	ror	r22
    3f66:	b7 95       	ror	r27
    3f68:	f7 95       	ror	r31
    3f6a:	9f 5f       	subi	r25, 0xFF	; 255
    3f6c:	c9 f7       	brne	.-14     	; 0x3f60 <__divsf3_pse+0x78>
    3f6e:	88 0f       	add	r24, r24
    3f70:	91 1d       	adc	r25, r1
    3f72:	96 95       	lsr	r25
    3f74:	87 95       	ror	r24
    3f76:	97 f9       	bld	r25, 7
    3f78:	08 95       	ret
    3f7a:	e1 e0       	ldi	r30, 0x01	; 1
    3f7c:	66 0f       	add	r22, r22
    3f7e:	77 1f       	adc	r23, r23
    3f80:	88 1f       	adc	r24, r24
    3f82:	bb 1f       	adc	r27, r27
    3f84:	62 17       	cp	r22, r18
    3f86:	73 07       	cpc	r23, r19
    3f88:	84 07       	cpc	r24, r20
    3f8a:	ba 07       	cpc	r27, r26
    3f8c:	20 f0       	brcs	.+8      	; 0x3f96 <__divsf3_pse+0xae>
    3f8e:	62 1b       	sub	r22, r18
    3f90:	73 0b       	sbc	r23, r19
    3f92:	84 0b       	sbc	r24, r20
    3f94:	ba 0b       	sbc	r27, r26
    3f96:	ee 1f       	adc	r30, r30
    3f98:	88 f7       	brcc	.-30     	; 0x3f7c <__divsf3_pse+0x94>
    3f9a:	e0 95       	com	r30
    3f9c:	08 95       	ret

00003f9e <__fixunssfsi>:
    3f9e:	0e 94 8f 20 	call	0x411e	; 0x411e <__fp_splitA>
    3fa2:	88 f0       	brcs	.+34     	; 0x3fc6 <__fixunssfsi+0x28>
    3fa4:	9f 57       	subi	r25, 0x7F	; 127
    3fa6:	98 f0       	brcs	.+38     	; 0x3fce <__fixunssfsi+0x30>
    3fa8:	b9 2f       	mov	r27, r25
    3faa:	99 27       	eor	r25, r25
    3fac:	b7 51       	subi	r27, 0x17	; 23
    3fae:	b0 f0       	brcs	.+44     	; 0x3fdc <__fixunssfsi+0x3e>
    3fb0:	e1 f0       	breq	.+56     	; 0x3fea <__fixunssfsi+0x4c>
    3fb2:	66 0f       	add	r22, r22
    3fb4:	77 1f       	adc	r23, r23
    3fb6:	88 1f       	adc	r24, r24
    3fb8:	99 1f       	adc	r25, r25
    3fba:	1a f0       	brmi	.+6      	; 0x3fc2 <__fixunssfsi+0x24>
    3fbc:	ba 95       	dec	r27
    3fbe:	c9 f7       	brne	.-14     	; 0x3fb2 <__fixunssfsi+0x14>
    3fc0:	14 c0       	rjmp	.+40     	; 0x3fea <__fixunssfsi+0x4c>
    3fc2:	b1 30       	cpi	r27, 0x01	; 1
    3fc4:	91 f0       	breq	.+36     	; 0x3fea <__fixunssfsi+0x4c>
    3fc6:	0e 94 a9 20 	call	0x4152	; 0x4152 <__fp_zero>
    3fca:	b1 e0       	ldi	r27, 0x01	; 1
    3fcc:	08 95       	ret
    3fce:	0c 94 a9 20 	jmp	0x4152	; 0x4152 <__fp_zero>
    3fd2:	67 2f       	mov	r22, r23
    3fd4:	78 2f       	mov	r23, r24
    3fd6:	88 27       	eor	r24, r24
    3fd8:	b8 5f       	subi	r27, 0xF8	; 248
    3fda:	39 f0       	breq	.+14     	; 0x3fea <__fixunssfsi+0x4c>
    3fdc:	b9 3f       	cpi	r27, 0xF9	; 249
    3fde:	cc f3       	brlt	.-14     	; 0x3fd2 <__fixunssfsi+0x34>
    3fe0:	86 95       	lsr	r24
    3fe2:	77 95       	ror	r23
    3fe4:	67 95       	ror	r22
    3fe6:	b3 95       	inc	r27
    3fe8:	d9 f7       	brne	.-10     	; 0x3fe0 <__fixunssfsi+0x42>
    3fea:	3e f4       	brtc	.+14     	; 0x3ffa <__fixunssfsi+0x5c>
    3fec:	90 95       	com	r25
    3fee:	80 95       	com	r24
    3ff0:	70 95       	com	r23
    3ff2:	61 95       	neg	r22
    3ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    3ffa:	08 95       	ret

00003ffc <__floatunsisf>:
    3ffc:	e8 94       	clt
    3ffe:	09 c0       	rjmp	.+18     	; 0x4012 <__floatsisf+0x12>

00004000 <__floatsisf>:
    4000:	97 fb       	bst	r25, 7
    4002:	3e f4       	brtc	.+14     	; 0x4012 <__floatsisf+0x12>
    4004:	90 95       	com	r25
    4006:	80 95       	com	r24
    4008:	70 95       	com	r23
    400a:	61 95       	neg	r22
    400c:	7f 4f       	sbci	r23, 0xFF	; 255
    400e:	8f 4f       	sbci	r24, 0xFF	; 255
    4010:	9f 4f       	sbci	r25, 0xFF	; 255
    4012:	99 23       	and	r25, r25
    4014:	a9 f0       	breq	.+42     	; 0x4040 <__floatsisf+0x40>
    4016:	f9 2f       	mov	r31, r25
    4018:	96 e9       	ldi	r25, 0x96	; 150
    401a:	bb 27       	eor	r27, r27
    401c:	93 95       	inc	r25
    401e:	f6 95       	lsr	r31
    4020:	87 95       	ror	r24
    4022:	77 95       	ror	r23
    4024:	67 95       	ror	r22
    4026:	b7 95       	ror	r27
    4028:	f1 11       	cpse	r31, r1
    402a:	f8 cf       	rjmp	.-16     	; 0x401c <__floatsisf+0x1c>
    402c:	fa f4       	brpl	.+62     	; 0x406c <__floatsisf+0x6c>
    402e:	bb 0f       	add	r27, r27
    4030:	11 f4       	brne	.+4      	; 0x4036 <__floatsisf+0x36>
    4032:	60 ff       	sbrs	r22, 0
    4034:	1b c0       	rjmp	.+54     	; 0x406c <__floatsisf+0x6c>
    4036:	6f 5f       	subi	r22, 0xFF	; 255
    4038:	7f 4f       	sbci	r23, 0xFF	; 255
    403a:	8f 4f       	sbci	r24, 0xFF	; 255
    403c:	9f 4f       	sbci	r25, 0xFF	; 255
    403e:	16 c0       	rjmp	.+44     	; 0x406c <__floatsisf+0x6c>
    4040:	88 23       	and	r24, r24
    4042:	11 f0       	breq	.+4      	; 0x4048 <__floatsisf+0x48>
    4044:	96 e9       	ldi	r25, 0x96	; 150
    4046:	11 c0       	rjmp	.+34     	; 0x406a <__floatsisf+0x6a>
    4048:	77 23       	and	r23, r23
    404a:	21 f0       	breq	.+8      	; 0x4054 <__floatsisf+0x54>
    404c:	9e e8       	ldi	r25, 0x8E	; 142
    404e:	87 2f       	mov	r24, r23
    4050:	76 2f       	mov	r23, r22
    4052:	05 c0       	rjmp	.+10     	; 0x405e <__floatsisf+0x5e>
    4054:	66 23       	and	r22, r22
    4056:	71 f0       	breq	.+28     	; 0x4074 <__floatsisf+0x74>
    4058:	96 e8       	ldi	r25, 0x86	; 134
    405a:	86 2f       	mov	r24, r22
    405c:	70 e0       	ldi	r23, 0x00	; 0
    405e:	60 e0       	ldi	r22, 0x00	; 0
    4060:	2a f0       	brmi	.+10     	; 0x406c <__floatsisf+0x6c>
    4062:	9a 95       	dec	r25
    4064:	66 0f       	add	r22, r22
    4066:	77 1f       	adc	r23, r23
    4068:	88 1f       	adc	r24, r24
    406a:	da f7       	brpl	.-10     	; 0x4062 <__floatsisf+0x62>
    406c:	88 0f       	add	r24, r24
    406e:	96 95       	lsr	r25
    4070:	87 95       	ror	r24
    4072:	97 f9       	bld	r25, 7
    4074:	08 95       	ret

00004076 <__fp_cmp>:
    4076:	99 0f       	add	r25, r25
    4078:	00 08       	sbc	r0, r0
    407a:	55 0f       	add	r21, r21
    407c:	aa 0b       	sbc	r26, r26
    407e:	e0 e8       	ldi	r30, 0x80	; 128
    4080:	fe ef       	ldi	r31, 0xFE	; 254
    4082:	16 16       	cp	r1, r22
    4084:	17 06       	cpc	r1, r23
    4086:	e8 07       	cpc	r30, r24
    4088:	f9 07       	cpc	r31, r25
    408a:	c0 f0       	brcs	.+48     	; 0x40bc <__fp_cmp+0x46>
    408c:	12 16       	cp	r1, r18
    408e:	13 06       	cpc	r1, r19
    4090:	e4 07       	cpc	r30, r20
    4092:	f5 07       	cpc	r31, r21
    4094:	98 f0       	brcs	.+38     	; 0x40bc <__fp_cmp+0x46>
    4096:	62 1b       	sub	r22, r18
    4098:	73 0b       	sbc	r23, r19
    409a:	84 0b       	sbc	r24, r20
    409c:	95 0b       	sbc	r25, r21
    409e:	39 f4       	brne	.+14     	; 0x40ae <__fp_cmp+0x38>
    40a0:	0a 26       	eor	r0, r26
    40a2:	61 f0       	breq	.+24     	; 0x40bc <__fp_cmp+0x46>
    40a4:	23 2b       	or	r18, r19
    40a6:	24 2b       	or	r18, r20
    40a8:	25 2b       	or	r18, r21
    40aa:	21 f4       	brne	.+8      	; 0x40b4 <__fp_cmp+0x3e>
    40ac:	08 95       	ret
    40ae:	0a 26       	eor	r0, r26
    40b0:	09 f4       	brne	.+2      	; 0x40b4 <__fp_cmp+0x3e>
    40b2:	a1 40       	sbci	r26, 0x01	; 1
    40b4:	a6 95       	lsr	r26
    40b6:	8f ef       	ldi	r24, 0xFF	; 255
    40b8:	81 1d       	adc	r24, r1
    40ba:	81 1d       	adc	r24, r1
    40bc:	08 95       	ret

000040be <__fp_inf>:
    40be:	97 f9       	bld	r25, 7
    40c0:	9f 67       	ori	r25, 0x7F	; 127
    40c2:	80 e8       	ldi	r24, 0x80	; 128
    40c4:	70 e0       	ldi	r23, 0x00	; 0
    40c6:	60 e0       	ldi	r22, 0x00	; 0
    40c8:	08 95       	ret

000040ca <__fp_nan>:
    40ca:	9f ef       	ldi	r25, 0xFF	; 255
    40cc:	80 ec       	ldi	r24, 0xC0	; 192
    40ce:	08 95       	ret

000040d0 <__fp_pscA>:
    40d0:	00 24       	eor	r0, r0
    40d2:	0a 94       	dec	r0
    40d4:	16 16       	cp	r1, r22
    40d6:	17 06       	cpc	r1, r23
    40d8:	18 06       	cpc	r1, r24
    40da:	09 06       	cpc	r0, r25
    40dc:	08 95       	ret

000040de <__fp_pscB>:
    40de:	00 24       	eor	r0, r0
    40e0:	0a 94       	dec	r0
    40e2:	12 16       	cp	r1, r18
    40e4:	13 06       	cpc	r1, r19
    40e6:	14 06       	cpc	r1, r20
    40e8:	05 06       	cpc	r0, r21
    40ea:	08 95       	ret

000040ec <__fp_round>:
    40ec:	09 2e       	mov	r0, r25
    40ee:	03 94       	inc	r0
    40f0:	00 0c       	add	r0, r0
    40f2:	11 f4       	brne	.+4      	; 0x40f8 <__fp_round+0xc>
    40f4:	88 23       	and	r24, r24
    40f6:	52 f0       	brmi	.+20     	; 0x410c <__fp_round+0x20>
    40f8:	bb 0f       	add	r27, r27
    40fa:	40 f4       	brcc	.+16     	; 0x410c <__fp_round+0x20>
    40fc:	bf 2b       	or	r27, r31
    40fe:	11 f4       	brne	.+4      	; 0x4104 <__fp_round+0x18>
    4100:	60 ff       	sbrs	r22, 0
    4102:	04 c0       	rjmp	.+8      	; 0x410c <__fp_round+0x20>
    4104:	6f 5f       	subi	r22, 0xFF	; 255
    4106:	7f 4f       	sbci	r23, 0xFF	; 255
    4108:	8f 4f       	sbci	r24, 0xFF	; 255
    410a:	9f 4f       	sbci	r25, 0xFF	; 255
    410c:	08 95       	ret

0000410e <__fp_split3>:
    410e:	57 fd       	sbrc	r21, 7
    4110:	90 58       	subi	r25, 0x80	; 128
    4112:	44 0f       	add	r20, r20
    4114:	55 1f       	adc	r21, r21
    4116:	59 f0       	breq	.+22     	; 0x412e <__fp_splitA+0x10>
    4118:	5f 3f       	cpi	r21, 0xFF	; 255
    411a:	71 f0       	breq	.+28     	; 0x4138 <__fp_splitA+0x1a>
    411c:	47 95       	ror	r20

0000411e <__fp_splitA>:
    411e:	88 0f       	add	r24, r24
    4120:	97 fb       	bst	r25, 7
    4122:	99 1f       	adc	r25, r25
    4124:	61 f0       	breq	.+24     	; 0x413e <__fp_splitA+0x20>
    4126:	9f 3f       	cpi	r25, 0xFF	; 255
    4128:	79 f0       	breq	.+30     	; 0x4148 <__fp_splitA+0x2a>
    412a:	87 95       	ror	r24
    412c:	08 95       	ret
    412e:	12 16       	cp	r1, r18
    4130:	13 06       	cpc	r1, r19
    4132:	14 06       	cpc	r1, r20
    4134:	55 1f       	adc	r21, r21
    4136:	f2 cf       	rjmp	.-28     	; 0x411c <__fp_split3+0xe>
    4138:	46 95       	lsr	r20
    413a:	f1 df       	rcall	.-30     	; 0x411e <__fp_splitA>
    413c:	08 c0       	rjmp	.+16     	; 0x414e <__fp_splitA+0x30>
    413e:	16 16       	cp	r1, r22
    4140:	17 06       	cpc	r1, r23
    4142:	18 06       	cpc	r1, r24
    4144:	99 1f       	adc	r25, r25
    4146:	f1 cf       	rjmp	.-30     	; 0x412a <__fp_splitA+0xc>
    4148:	86 95       	lsr	r24
    414a:	71 05       	cpc	r23, r1
    414c:	61 05       	cpc	r22, r1
    414e:	08 94       	sec
    4150:	08 95       	ret

00004152 <__fp_zero>:
    4152:	e8 94       	clt

00004154 <__fp_szero>:
    4154:	bb 27       	eor	r27, r27
    4156:	66 27       	eor	r22, r22
    4158:	77 27       	eor	r23, r23
    415a:	cb 01       	movw	r24, r22
    415c:	97 f9       	bld	r25, 7
    415e:	08 95       	ret

00004160 <__mulsf3>:
    4160:	0e 94 c3 20 	call	0x4186	; 0x4186 <__mulsf3x>
    4164:	0c 94 76 20 	jmp	0x40ec	; 0x40ec <__fp_round>
    4168:	0e 94 68 20 	call	0x40d0	; 0x40d0 <__fp_pscA>
    416c:	38 f0       	brcs	.+14     	; 0x417c <__mulsf3+0x1c>
    416e:	0e 94 6f 20 	call	0x40de	; 0x40de <__fp_pscB>
    4172:	20 f0       	brcs	.+8      	; 0x417c <__mulsf3+0x1c>
    4174:	95 23       	and	r25, r21
    4176:	11 f0       	breq	.+4      	; 0x417c <__mulsf3+0x1c>
    4178:	0c 94 5f 20 	jmp	0x40be	; 0x40be <__fp_inf>
    417c:	0c 94 65 20 	jmp	0x40ca	; 0x40ca <__fp_nan>
    4180:	11 24       	eor	r1, r1
    4182:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__fp_szero>

00004186 <__mulsf3x>:
    4186:	0e 94 87 20 	call	0x410e	; 0x410e <__fp_split3>
    418a:	70 f3       	brcs	.-36     	; 0x4168 <__mulsf3+0x8>

0000418c <__mulsf3_pse>:
    418c:	95 9f       	mul	r25, r21
    418e:	c1 f3       	breq	.-16     	; 0x4180 <__mulsf3+0x20>
    4190:	95 0f       	add	r25, r21
    4192:	50 e0       	ldi	r21, 0x00	; 0
    4194:	55 1f       	adc	r21, r21
    4196:	62 9f       	mul	r22, r18
    4198:	f0 01       	movw	r30, r0
    419a:	72 9f       	mul	r23, r18
    419c:	bb 27       	eor	r27, r27
    419e:	f0 0d       	add	r31, r0
    41a0:	b1 1d       	adc	r27, r1
    41a2:	63 9f       	mul	r22, r19
    41a4:	aa 27       	eor	r26, r26
    41a6:	f0 0d       	add	r31, r0
    41a8:	b1 1d       	adc	r27, r1
    41aa:	aa 1f       	adc	r26, r26
    41ac:	64 9f       	mul	r22, r20
    41ae:	66 27       	eor	r22, r22
    41b0:	b0 0d       	add	r27, r0
    41b2:	a1 1d       	adc	r26, r1
    41b4:	66 1f       	adc	r22, r22
    41b6:	82 9f       	mul	r24, r18
    41b8:	22 27       	eor	r18, r18
    41ba:	b0 0d       	add	r27, r0
    41bc:	a1 1d       	adc	r26, r1
    41be:	62 1f       	adc	r22, r18
    41c0:	73 9f       	mul	r23, r19
    41c2:	b0 0d       	add	r27, r0
    41c4:	a1 1d       	adc	r26, r1
    41c6:	62 1f       	adc	r22, r18
    41c8:	83 9f       	mul	r24, r19
    41ca:	a0 0d       	add	r26, r0
    41cc:	61 1d       	adc	r22, r1
    41ce:	22 1f       	adc	r18, r18
    41d0:	74 9f       	mul	r23, r20
    41d2:	33 27       	eor	r19, r19
    41d4:	a0 0d       	add	r26, r0
    41d6:	61 1d       	adc	r22, r1
    41d8:	23 1f       	adc	r18, r19
    41da:	84 9f       	mul	r24, r20
    41dc:	60 0d       	add	r22, r0
    41de:	21 1d       	adc	r18, r1
    41e0:	82 2f       	mov	r24, r18
    41e2:	76 2f       	mov	r23, r22
    41e4:	6a 2f       	mov	r22, r26
    41e6:	11 24       	eor	r1, r1
    41e8:	9f 57       	subi	r25, 0x7F	; 127
    41ea:	50 40       	sbci	r21, 0x00	; 0
    41ec:	9a f0       	brmi	.+38     	; 0x4214 <__mulsf3_pse+0x88>
    41ee:	f1 f0       	breq	.+60     	; 0x422c <__mulsf3_pse+0xa0>
    41f0:	88 23       	and	r24, r24
    41f2:	4a f0       	brmi	.+18     	; 0x4206 <__mulsf3_pse+0x7a>
    41f4:	ee 0f       	add	r30, r30
    41f6:	ff 1f       	adc	r31, r31
    41f8:	bb 1f       	adc	r27, r27
    41fa:	66 1f       	adc	r22, r22
    41fc:	77 1f       	adc	r23, r23
    41fe:	88 1f       	adc	r24, r24
    4200:	91 50       	subi	r25, 0x01	; 1
    4202:	50 40       	sbci	r21, 0x00	; 0
    4204:	a9 f7       	brne	.-22     	; 0x41f0 <__mulsf3_pse+0x64>
    4206:	9e 3f       	cpi	r25, 0xFE	; 254
    4208:	51 05       	cpc	r21, r1
    420a:	80 f0       	brcs	.+32     	; 0x422c <__mulsf3_pse+0xa0>
    420c:	0c 94 5f 20 	jmp	0x40be	; 0x40be <__fp_inf>
    4210:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__fp_szero>
    4214:	5f 3f       	cpi	r21, 0xFF	; 255
    4216:	e4 f3       	brlt	.-8      	; 0x4210 <__mulsf3_pse+0x84>
    4218:	98 3e       	cpi	r25, 0xE8	; 232
    421a:	d4 f3       	brlt	.-12     	; 0x4210 <__mulsf3_pse+0x84>
    421c:	86 95       	lsr	r24
    421e:	77 95       	ror	r23
    4220:	67 95       	ror	r22
    4222:	b7 95       	ror	r27
    4224:	f7 95       	ror	r31
    4226:	e7 95       	ror	r30
    4228:	9f 5f       	subi	r25, 0xFF	; 255
    422a:	c1 f7       	brne	.-16     	; 0x421c <__mulsf3_pse+0x90>
    422c:	fe 2b       	or	r31, r30
    422e:	88 0f       	add	r24, r24
    4230:	91 1d       	adc	r25, r1
    4232:	96 95       	lsr	r25
    4234:	87 95       	ror	r24
    4236:	97 f9       	bld	r25, 7
    4238:	08 95       	ret

0000423a <__divmodhi4>:
    423a:	97 fb       	bst	r25, 7
    423c:	07 2e       	mov	r0, r23
    423e:	16 f4       	brtc	.+4      	; 0x4244 <__divmodhi4+0xa>
    4240:	00 94       	com	r0
    4242:	07 d0       	rcall	.+14     	; 0x4252 <__divmodhi4_neg1>
    4244:	77 fd       	sbrc	r23, 7
    4246:	09 d0       	rcall	.+18     	; 0x425a <__divmodhi4_neg2>
    4248:	0e 94 7d 21 	call	0x42fa	; 0x42fa <__udivmodhi4>
    424c:	07 fc       	sbrc	r0, 7
    424e:	05 d0       	rcall	.+10     	; 0x425a <__divmodhi4_neg2>
    4250:	3e f4       	brtc	.+14     	; 0x4260 <__divmodhi4_exit>

00004252 <__divmodhi4_neg1>:
    4252:	90 95       	com	r25
    4254:	81 95       	neg	r24
    4256:	9f 4f       	sbci	r25, 0xFF	; 255
    4258:	08 95       	ret

0000425a <__divmodhi4_neg2>:
    425a:	70 95       	com	r23
    425c:	61 95       	neg	r22
    425e:	7f 4f       	sbci	r23, 0xFF	; 255

00004260 <__divmodhi4_exit>:
    4260:	08 95       	ret

00004262 <__udivmodsi4>:
    4262:	a1 e2       	ldi	r26, 0x21	; 33
    4264:	1a 2e       	mov	r1, r26
    4266:	aa 1b       	sub	r26, r26
    4268:	bb 1b       	sub	r27, r27
    426a:	fd 01       	movw	r30, r26
    426c:	0d c0       	rjmp	.+26     	; 0x4288 <__udivmodsi4_ep>

0000426e <__udivmodsi4_loop>:
    426e:	aa 1f       	adc	r26, r26
    4270:	bb 1f       	adc	r27, r27
    4272:	ee 1f       	adc	r30, r30
    4274:	ff 1f       	adc	r31, r31
    4276:	a2 17       	cp	r26, r18
    4278:	b3 07       	cpc	r27, r19
    427a:	e4 07       	cpc	r30, r20
    427c:	f5 07       	cpc	r31, r21
    427e:	20 f0       	brcs	.+8      	; 0x4288 <__udivmodsi4_ep>
    4280:	a2 1b       	sub	r26, r18
    4282:	b3 0b       	sbc	r27, r19
    4284:	e4 0b       	sbc	r30, r20
    4286:	f5 0b       	sbc	r31, r21

00004288 <__udivmodsi4_ep>:
    4288:	66 1f       	adc	r22, r22
    428a:	77 1f       	adc	r23, r23
    428c:	88 1f       	adc	r24, r24
    428e:	99 1f       	adc	r25, r25
    4290:	1a 94       	dec	r1
    4292:	69 f7       	brne	.-38     	; 0x426e <__udivmodsi4_loop>
    4294:	60 95       	com	r22
    4296:	70 95       	com	r23
    4298:	80 95       	com	r24
    429a:	90 95       	com	r25
    429c:	9b 01       	movw	r18, r22
    429e:	ac 01       	movw	r20, r24
    42a0:	bd 01       	movw	r22, r26
    42a2:	cf 01       	movw	r24, r30
    42a4:	08 95       	ret

000042a6 <__tablejump2__>:
    42a6:	ee 0f       	add	r30, r30
    42a8:	ff 1f       	adc	r31, r31
    42aa:	05 90       	lpm	r0, Z+
    42ac:	f4 91       	lpm	r31, Z
    42ae:	e0 2d       	mov	r30, r0
    42b0:	09 94       	ijmp

000042b2 <__umulhisi3>:
    42b2:	a2 9f       	mul	r26, r18
    42b4:	b0 01       	movw	r22, r0
    42b6:	b3 9f       	mul	r27, r19
    42b8:	c0 01       	movw	r24, r0
    42ba:	a3 9f       	mul	r26, r19
    42bc:	70 0d       	add	r23, r0
    42be:	81 1d       	adc	r24, r1
    42c0:	11 24       	eor	r1, r1
    42c2:	91 1d       	adc	r25, r1
    42c4:	b2 9f       	mul	r27, r18
    42c6:	70 0d       	add	r23, r0
    42c8:	81 1d       	adc	r24, r1
    42ca:	11 24       	eor	r1, r1
    42cc:	91 1d       	adc	r25, r1
    42ce:	08 95       	ret

000042d0 <__adddi3_s8>:
    42d0:	00 24       	eor	r0, r0
    42d2:	a7 fd       	sbrc	r26, 7
    42d4:	00 94       	com	r0
    42d6:	2a 0f       	add	r18, r26
    42d8:	30 1d       	adc	r19, r0
    42da:	40 1d       	adc	r20, r0
    42dc:	50 1d       	adc	r21, r0
    42de:	60 1d       	adc	r22, r0
    42e0:	70 1d       	adc	r23, r0
    42e2:	80 1d       	adc	r24, r0
    42e4:	90 1d       	adc	r25, r0
    42e6:	08 95       	ret

000042e8 <__cmpdi2>:
    42e8:	2a 15       	cp	r18, r10
    42ea:	3b 05       	cpc	r19, r11
    42ec:	4c 05       	cpc	r20, r12
    42ee:	5d 05       	cpc	r21, r13
    42f0:	6e 05       	cpc	r22, r14
    42f2:	7f 05       	cpc	r23, r15
    42f4:	80 07       	cpc	r24, r16
    42f6:	91 07       	cpc	r25, r17
    42f8:	08 95       	ret

000042fa <__udivmodhi4>:
    42fa:	aa 1b       	sub	r26, r26
    42fc:	bb 1b       	sub	r27, r27
    42fe:	51 e1       	ldi	r21, 0x11	; 17
    4300:	07 c0       	rjmp	.+14     	; 0x4310 <__udivmodhi4_ep>

00004302 <__udivmodhi4_loop>:
    4302:	aa 1f       	adc	r26, r26
    4304:	bb 1f       	adc	r27, r27
    4306:	a6 17       	cp	r26, r22
    4308:	b7 07       	cpc	r27, r23
    430a:	10 f0       	brcs	.+4      	; 0x4310 <__udivmodhi4_ep>
    430c:	a6 1b       	sub	r26, r22
    430e:	b7 0b       	sbc	r27, r23

00004310 <__udivmodhi4_ep>:
    4310:	88 1f       	adc	r24, r24
    4312:	99 1f       	adc	r25, r25
    4314:	5a 95       	dec	r21
    4316:	a9 f7       	brne	.-22     	; 0x4302 <__udivmodhi4_loop>
    4318:	80 95       	com	r24
    431a:	90 95       	com	r25
    431c:	bc 01       	movw	r22, r24
    431e:	cd 01       	movw	r24, r26
    4320:	08 95       	ret

00004322 <_exit>:
    4322:	f8 94       	cli

00004324 <__stop_program>:
    4324:	ff cf       	rjmp	.-2      	; 0x4324 <__stop_program>
