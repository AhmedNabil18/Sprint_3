
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000208e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000294  00800060  0000208e  00002122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000015c  008002f4  008002f4  000023b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000023e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000600  00000000  00000000  00002424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005c59  00000000  00000000  00002a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b26  00000000  00000000  0000867d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000377c  00000000  00000000  0000a1a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013dc  00000000  00000000  0000d920  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000276e  00000000  00000000  0000ecfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004f70  00000000  00000000  0001146a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  000163da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__vector_1>
       8:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__vector_2>
       c:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__vector_3>
      10:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <__vector_4>
      14:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__vector_5>
      18:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__vector_6>
      1c:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__vector_7>
      20:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_8>
      24:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__vector_9>
      28:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__vector_10>
      2c:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__vector_11>
      30:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__vector_12>
      34:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <__vector_13>
      38:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__vector_14>
      3c:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__vector_15>
      40:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 35       	cpi	r26, 0x50	; 80
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 08 	call	0x1092	; 0x1092 <main>
      8a:	0c 94 45 10 	jmp	0x208a	; 0x208a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
      92:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <enuCurrentAppStatus>
      96:	84 30       	cpi	r24, 0x04	; 4
      98:	09 f4       	brne	.+2      	; 0x9c <App_init+0xa>
      9a:	05 c1       	rjmp	.+522    	; 0x2a6 <App_init+0x214>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
      9c:	0e 94 2b 04 	call	0x856	; 0x856 <Eeprom_24_init>
      a0:	81 30       	cpi	r24, 0x01	; 1
      a2:	09 f0       	breq	.+2      	; 0xa6 <App_init+0x14>
      a4:	cf c0       	rjmp	.+414    	; 0x244 <App_init+0x1b2>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
      a6:	0e 94 f6 07 	call	0xfec	; 0xfec <Terminal_init>
      aa:	81 30       	cpi	r24, 0x01	; 1
      ac:	09 f0       	breq	.+2      	; 0xb0 <App_init+0x1e>
      ae:	cc c0       	rjmp	.+408    	; 0x248 <App_init+0x1b6>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
      b0:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <Spi_init>
      b4:	81 30       	cpi	r24, 0x01	; 1
      b6:	09 f0       	breq	.+2      	; 0xba <App_init+0x28>
      b8:	c9 c0       	rjmp	.+402    	; 0x24c <App_init+0x1ba>
		return APP_STATUS_ERROR_NOK;
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
      ba:	0e 94 ae 06 	call	0xd5c	; 0xd5c <Keypad_init>
      be:	81 30       	cpi	r24, 0x01	; 1
      c0:	09 f0       	breq	.+2      	; 0xc4 <App_init+0x32>
      c2:	c6 c0       	rjmp	.+396    	; 0x250 <App_init+0x1be>
		return APP_STATUS_ERROR_NOK;
	if(LCD_STATUS_ERROR_OK != Lcd_init())
      c4:	0e 94 1a 07 	call	0xe34	; 0xe34 <Lcd_init>
      c8:	81 30       	cpi	r24, 0x01	; 1
      ca:	09 f0       	breq	.+2      	; 0xce <App_init+0x3c>
      cc:	c3 c0       	rjmp	.+390    	; 0x254 <App_init+0x1c2>
		return APP_STATUS_ERROR_NOK;
	if(LM35_STATUS_ERROR_OK != LM35_init())
      ce:	0e 94 95 07 	call	0xf2a	; 0xf2a <LM35_init>
      d2:	81 30       	cpi	r24, 0x01	; 1
      d4:	09 f0       	breq	.+2      	; 0xd8 <App_init+0x46>
      d6:	c0 c0       	rjmp	.+384    	; 0x258 <App_init+0x1c6>
		return APP_STATUS_ERROR_NOK;
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
      d8:	0e 94 a4 07 	call	0xf48	; 0xf48 <Motor_init>
      dc:	81 30       	cpi	r24, 0x01	; 1
      de:	09 f0       	breq	.+2      	; 0xe2 <App_init+0x50>
      e0:	bd c0       	rjmp	.+378    	; 0x25c <App_init+0x1ca>
		return APP_STATUS_ERROR_NOK;
	/**************************/
	/* Only for Testing */
	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
      e2:	6f ef       	ldi	r22, 0xFF	; 255
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	0e 94 3a 04 	call	0x874	; 0x874 <Eeprom_24_writeByte>
      ec:	81 30       	cpi	r24, 0x01	; 1
      ee:	09 f0       	breq	.+2      	; 0xf2 <App_init+0x60>
      f0:	b7 c0       	rjmp	.+366    	; 0x260 <App_init+0x1ce>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
      f2:	2a e0       	ldi	r18, 0x0A	; 10
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	40 e0       	ldi	r20, 0x00	; 0
      f8:	50 e0       	ldi	r21, 0x00	; 0
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 9b 08 	call	0x1136	; 0x1136 <Delay_ms>
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
     106:	80 ee       	ldi	r24, 0xE0	; 224
     108:	92 e0       	ldi	r25, 0x02	; 2
     10a:	0e 94 81 07 	call	0xf02	; 0xf02 <Lcd_printString>
     10e:	81 30       	cpi	r24, 0x01	; 1
     110:	09 f0       	breq	.+2      	; 0x114 <App_init+0x82>
     112:	a8 c0       	rjmp	.+336    	; 0x264 <App_init+0x1d2>
		return APP_STATUS_ERROR_NOK;
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
     114:	82 ed       	ldi	r24, 0xD2	; 210
     116:	92 e0       	ldi	r25, 0x02	; 2
     118:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     11c:	81 30       	cpi	r24, 0x01	; 1
     11e:	09 f0       	breq	.+2      	; 0x122 <App_init+0x90>
     120:	a3 c0       	rjmp	.+326    	; 0x268 <App_init+0x1d6>
		return APP_STATUS_ERROR_NOK;
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
     122:	63 e0       	ldi	r22, 0x03	; 3
     124:	73 e0       	ldi	r23, 0x03	; 3
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 76 04 	call	0x8ec	; 0x8ec <Eeprom_24_readByte>
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	09 f0       	breq	.+2      	; 0x134 <App_init+0xa2>
     132:	9c c0       	rjmp	.+312    	; 0x26c <App_init+0x1da>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     134:	2a e0       	ldi	r18, 0x0A	; 10
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	40 e0       	ldi	r20, 0x00	; 0
     13a:	50 e0       	ldi	r21, 0x00	; 0
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	70 e0       	ldi	r23, 0x00	; 0
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 9b 08 	call	0x1136	; 0x1136 <Delay_ms>
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
     148:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <gu8_initData>
     14c:	8a 3a       	cpi	r24, 0xAA	; 170
     14e:	a1 f1       	breq	.+104    	; 0x1b8 <App_init+0x126>
	{
		gu8_ATMMode = ATM_MODE_ADMIN;
     150:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <gu8_ATMMode>
		
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, ATM_DB_ATM_PIN_VAL,stringLength(ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
     154:	80 e6       	ldi	r24, 0x60	; 96
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <stringLength>
     15c:	48 2f       	mov	r20, r24
     15e:	50 e0       	ldi	r21, 0x00	; 0
     160:	60 e6       	ldi	r22, 0x60	; 96
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	8b e0       	ldi	r24, 0x0B	; 11
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 29 05 	call	0xa52	; 0xa52 <Eeprom_24_writePacket>
     16c:	81 30       	cpi	r24, 0x01	; 1
     16e:	09 f0       	breq	.+2      	; 0x172 <App_init+0xe0>
     170:	7f c0       	rjmp	.+254    	; 0x270 <App_init+0x1de>
			return APP_STATUS_ERROR_NOK;
		
		if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	0e 94 4a 07 	call	0xe94	; 0xe94 <Lcd_setCursor>
     17a:	81 30       	cpi	r24, 0x01	; 1
     17c:	09 f0       	breq	.+2      	; 0x180 <App_init+0xee>
     17e:	7a c0       	rjmp	.+244    	; 0x274 <App_init+0x1e2>
			return APP_STATUS_ERROR_OK;
		if(Lcd_printString((uint8_t*)"*******ATM******") != LCD_STATUS_ERROR_OK)
     180:	8e eb       	ldi	r24, 0xBE	; 190
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 81 07 	call	0xf02	; 0xf02 <Lcd_printString>
     188:	81 30       	cpi	r24, 0x01	; 1
     18a:	09 f0       	breq	.+2      	; 0x18e <App_init+0xfc>
     18c:	75 c0       	rjmp	.+234    	; 0x278 <App_init+0x1e6>
			return APP_STATUS_ERROR_NOK;
		if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	0e 94 4a 07 	call	0xe94	; 0xe94 <Lcd_setCursor>
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	09 f0       	breq	.+2      	; 0x19a <App_init+0x108>
     198:	71 c0       	rjmp	.+226    	; 0x27c <App_init+0x1ea>
			return APP_STATUS_ERROR_OK;
		if(Lcd_printString((uint8_t*)"*****LOCKED*****") != LCD_STATUS_ERROR_OK)
     19a:	8f ec       	ldi	r24, 0xCF	; 207
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 81 07 	call	0xf02	; 0xf02 <Lcd_printString>
     1a2:	81 30       	cpi	r24, 0x01	; 1
     1a4:	09 f0       	breq	.+2      	; 0x1a8 <App_init+0x116>
     1a6:	6c c0       	rjmp	.+216    	; 0x280 <App_init+0x1ee>
			return APP_STATUS_ERROR_NOK;
		
		if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     1a8:	80 ee       	ldi	r24, 0xE0	; 224
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     1b0:	81 30       	cpi	r24, 0x01	; 1
     1b2:	09 f0       	breq	.+2      	; 0x1b6 <App_init+0x124>
     1b4:	67 c0       	rjmp	.+206    	; 0x284 <App_init+0x1f2>
     1b6:	41 c0       	rjmp	.+130    	; 0x23a <App_init+0x1a8>
			return APP_STATUS_ERROR_NOK;
	}else
	{//gu8_ATMPin
		gu8_ATMMode = ATM_MODE_USER;
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu8_ATMMode>
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
     1be:	48 e0       	ldi	r20, 0x08	; 8
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	65 ef       	ldi	r22, 0xF5	; 245
     1c4:	72 e0       	ldi	r23, 0x02	; 2
     1c6:	83 e0       	ldi	r24, 0x03	; 3
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 02 06 	call	0xc04	; 0xc04 <Eeprom_24_readPacket>
     1ce:	81 30       	cpi	r24, 0x01	; 1
     1d0:	09 f0       	breq	.+2      	; 0x1d4 <App_init+0x142>
     1d2:	5a c0       	rjmp	.+180    	; 0x288 <App_init+0x1f6>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     1d4:	62 e0       	ldi	r22, 0x02	; 2
     1d6:	73 e0       	ldi	r23, 0x03	; 3
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 76 04 	call	0x8ec	; 0x8ec <Eeprom_24_readByte>
     1e0:	81 30       	cpi	r24, 0x01	; 1
     1e2:	09 f0       	breq	.+2      	; 0x1e6 <App_init+0x154>
     1e4:	53 c0       	rjmp	.+166    	; 0x28c <App_init+0x1fa>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 8) != EEPROM_24_STATUS_ERROR_OK)
     1e6:	48 e0       	ldi	r20, 0x08	; 8
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	6d ef       	ldi	r22, 0xFD	; 253
     1ec:	72 e0       	ldi	r23, 0x02	; 2
     1ee:	8b e0       	ldi	r24, 0x0B	; 11
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 02 06 	call	0xc04	; 0xc04 <Eeprom_24_readPacket>
     1f6:	81 30       	cpi	r24, 0x01	; 1
     1f8:	09 f0       	breq	.+2      	; 0x1fc <App_init+0x16a>
     1fa:	4a c0       	rjmp	.+148    	; 0x290 <App_init+0x1fe>
			return APP_STATUS_ERROR_NOK;
		
		if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	0e 94 4a 07 	call	0xe94	; 0xe94 <Lcd_setCursor>
     204:	81 30       	cpi	r24, 0x01	; 1
     206:	09 f0       	breq	.+2      	; 0x20a <App_init+0x178>
     208:	45 c0       	rjmp	.+138    	; 0x294 <App_init+0x202>
			return APP_STATUS_ERROR_OK;
		if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
     20a:	82 ef       	ldi	r24, 0xF2	; 242
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 81 07 	call	0xf02	; 0xf02 <Lcd_printString>
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	09 f0       	breq	.+2      	; 0x218 <App_init+0x186>
     216:	40 c0       	rjmp	.+128    	; 0x298 <App_init+0x206>
			return APP_STATUS_ERROR_NOK;
		if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	0e 94 4a 07 	call	0xe94	; 0xe94 <Lcd_setCursor>
     21e:	81 30       	cpi	r24, 0x01	; 1
     220:	e9 f5       	brne	.+122    	; 0x29c <App_init+0x20a>
			return APP_STATUS_ERROR_OK;
		if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	0e 94 81 07 	call	0xf02	; 0xf02 <Lcd_printString>
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	c9 f5       	brne	.+114    	; 0x2a0 <App_init+0x20e>
			return APP_STATUS_ERROR_NOK;
			
		if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     22e:	8f e0       	ldi	r24, 0x0F	; 15
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     236:	81 30       	cpi	r24, 0x01	; 1
     238:	a9 f5       	brne	.+106    	; 0x2a4 <App_init+0x212>
			return APP_STATUS_ERROR_NOK;
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     23a:	84 e0       	ldi	r24, 0x04	; 4
     23c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <enuCurrentAppStatus>
	return APP_STATUS_ERROR_OK;
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	08 95       	ret
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	08 95       	ret
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	08 95       	ret
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
		return APP_STATUS_ERROR_NOK;
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	08 95       	ret
	if(LCD_STATUS_ERROR_OK != Lcd_init())
		return APP_STATUS_ERROR_NOK;
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	08 95       	ret
	if(LM35_STATUS_ERROR_OK != LM35_init())
		return APP_STATUS_ERROR_NOK;
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	08 95       	ret
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
		return APP_STATUS_ERROR_NOK;
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	08 95       	ret
	/**************************/
	/* Only for Testing */
	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret
	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	08 95       	ret
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	08 95       	ret
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	08 95       	ret
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
	{
		gu8_ATMMode = ATM_MODE_ADMIN;
		
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, ATM_DB_ATM_PIN_VAL,stringLength(ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	08 95       	ret
		
		if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_OK;
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	08 95       	ret
		if(Lcd_printString((uint8_t*)"*******ATM******") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	08 95       	ret
		if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_OK;
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	08 95       	ret
		if(Lcd_printString((uint8_t*)"*****LOCKED*****") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	08 95       	ret
		
		if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 95       	ret
	}else
	{//gu8_ATMPin
		gu8_ATMMode = ATM_MODE_USER;
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	08 95       	ret
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	08 95       	ret
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 8) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	08 95       	ret
		
		if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_OK;
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	08 95       	ret
		if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	08 95       	ret
		if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_OK;
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	08 95       	ret
		if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	08 95       	ret
			
		if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     2a4:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     2a6:	08 95       	ret

000002a8 <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	cf 5f       	subi	r28, 0xFF	; 255
     2b6:	d1 09       	sbc	r29, r1
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     2c4:	ce 01       	movw	r24, r28
     2c6:	01 96       	adiw	r24, 0x01	; 1
     2c8:	2f ef       	ldi	r18, 0xFF	; 255
     2ca:	fc 01       	movw	r30, r24
     2cc:	11 92       	st	Z+, r1
     2ce:	2a 95       	dec	r18
     2d0:	e9 f7       	brne	.-6      	; 0x2cc <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
     2d2:	0e 94 26 08 	call	0x104c	; 0x104c <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
     2d6:	85 30       	cpi	r24, 0x05	; 5
     2d8:	39 f4       	brne	.+14     	; 0x2e8 <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
     2da:	b8 01       	movw	r22, r16
     2dc:	ce 01       	movw	r24, r28
     2de:	01 96       	adiw	r24, 0x01	; 1
     2e0:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <stringCopy>
		return APP_STATUS_ERROR_OK;
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	11 f0       	breq	.+4      	; 0x2f0 <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
     2f0:	86 e0       	ldi	r24, 0x06	; 6
}
     2f2:	c1 50       	subi	r28, 0x01	; 1
     2f4:	df 4f       	sbci	r29, 0xFF	; 255
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	08 95       	ret

0000030a <AppADMIN_getInput>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the ADMIN Input Choice.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getInput(uint8_t* pu8_data)
{
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Your Input: ") != TERMINAL_STATUS_ERROR_OK)
     310:	8a e1       	ldi	r24, 0x1A	; 26
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     318:	81 30       	cpi	r24, 0x01	; 1
     31a:	c1 f4       	brne	.+48     	; 0x34c <AppADMIN_getInput+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     31c:	ce 01       	movw	r24, r28
     31e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     322:	81 30       	cpi	r24, 0x01	; 1
     324:	29 f0       	breq	.+10     	; 0x330 <AppADMIN_getInput+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     326:	11 f0       	breq	.+4      	; 0x32c <AppADMIN_getInput+0x22>
     328:	86 30       	cpi	r24, 0x06	; 6
     32a:	91 f4       	brne	.+36     	; 0x350 <AppADMIN_getInput+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     32c:	86 30       	cpi	r24, 0x06	; 6
     32e:	b1 f3       	breq	.-20     	; 0x31c <AppADMIN_getInput+0x12>
		
		if (pu8_data[1] == '\0')
     330:	89 81       	ldd	r24, Y+1	; 0x01
     332:	88 23       	and	r24, r24
     334:	79 f0       	breq	.+30     	; 0x354 <AppADMIN_getInput+0x4a>
		break;
		EmptyString(pu8_data);
     336:	ce 01       	movw	r24, r28
     338:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
     33c:	87 e2       	ldi	r24, 0x27	; 39
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     344:	81 30       	cpi	r24, 0x01	; 1
     346:	21 f3       	breq	.-56     	; 0x310 <AppADMIN_getInput+0x6>
		return APP_STATUS_ERROR_NOK;
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	05 c0       	rjmp	.+10     	; 0x356 <AppADMIN_getInput+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Your Input: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	03 c0       	rjmp	.+6      	; 0x356 <AppADMIN_getInput+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	01 c0       	rjmp	.+2      	; 0x356 <AppADMIN_getInput+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     354:	81 e0       	ldi	r24, 0x01	; 1
}
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <AppADMIN_getnewMaxAmount>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getnewMaxAmount(uint8_t* pu8_data)
{
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Max Amount: ") != TERMINAL_STATUS_ERROR_OK)
     362:	80 e5       	ldi	r24, 0x50	; 80
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	d9 f4       	brne	.+54     	; 0x3a4 <AppADMIN_getnewMaxAmount+0x48>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     36e:	ce 01       	movw	r24, r28
     370:	0e 94 54 01 	call	0x2a8	; 0x2a8 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     374:	81 30       	cpi	r24, 0x01	; 1
     376:	29 f0       	breq	.+10     	; 0x382 <AppADMIN_getnewMaxAmount+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     378:	11 f0       	breq	.+4      	; 0x37e <AppADMIN_getnewMaxAmount+0x22>
     37a:	86 30       	cpi	r24, 0x06	; 6
     37c:	a9 f4       	brne	.+42     	; 0x3a8 <AppADMIN_getnewMaxAmount+0x4c>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     37e:	86 30       	cpi	r24, 0x06	; 6
     380:	b1 f3       	breq	.-20     	; 0x36e <AppADMIN_getnewMaxAmount+0x12>
		
		if ((pu8_data[7] == '\0') && (pu8_data[4] == '.'))
     382:	8f 81       	ldd	r24, Y+7	; 0x07
     384:	81 11       	cpse	r24, r1
     386:	03 c0       	rjmp	.+6      	; 0x38e <AppADMIN_getnewMaxAmount+0x32>
     388:	8c 81       	ldd	r24, Y+4	; 0x04
     38a:	8e 32       	cpi	r24, 0x2E	; 46
     38c:	79 f0       	breq	.+30     	; 0x3ac <AppADMIN_getnewMaxAmount+0x50>
			break;
		EmptyString(pu8_data);
     38e:	ce 01       	movw	r24, r28
     390:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
     394:	8d e5       	ldi	r24, 0x5D	; 93
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	09 f3       	breq	.-62     	; 0x362 <AppADMIN_getnewMaxAmount+0x6>
			return APP_STATUS_ERROR_NOK;
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	05 c0       	rjmp	.+10     	; 0x3ae <AppADMIN_getnewMaxAmount+0x52>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Max Amount: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	03 c0       	rjmp	.+6      	; 0x3ae <AppADMIN_getnewMaxAmount+0x52>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <AppADMIN_getnewMaxAmount+0x52>
			break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
}
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <AppADMIN_getCustomerPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerPAN(uint8_t* pu8_data)
{
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"PAN: ") != TERMINAL_STATUS_ERROR_OK)
     3ba:	8d e8       	ldi	r24, 0x8D	; 141
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     3c2:	81 30       	cpi	r24, 0x01	; 1
     3c4:	c1 f4       	brne	.+48     	; 0x3f6 <AppADMIN_getCustomerPAN+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     3c6:	ce 01       	movw	r24, r28
     3c8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	29 f0       	breq	.+10     	; 0x3da <AppADMIN_getCustomerPAN+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     3d0:	11 f0       	breq	.+4      	; 0x3d6 <AppADMIN_getCustomerPAN+0x22>
     3d2:	86 30       	cpi	r24, 0x06	; 6
     3d4:	91 f4       	brne	.+36     	; 0x3fa <AppADMIN_getCustomerPAN+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     3d6:	86 30       	cpi	r24, 0x06	; 6
     3d8:	b1 f3       	breq	.-20     	; 0x3c6 <AppADMIN_getCustomerPAN+0x12>
		
		if (pu8_data[9] == '\0')
     3da:	89 85       	ldd	r24, Y+9	; 0x09
     3dc:	88 23       	and	r24, r24
     3de:	79 f0       	breq	.+30     	; 0x3fe <AppADMIN_getCustomerPAN+0x4a>
		break;
		EmptyString(pu8_data);
     3e0:	ce 01       	movw	r24, r28
     3e2:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
     3e6:	83 e9       	ldi	r24, 0x93	; 147
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     3ee:	81 30       	cpi	r24, 0x01	; 1
     3f0:	21 f3       	breq	.-56     	; 0x3ba <AppADMIN_getCustomerPAN+0x6>
		return APP_STATUS_ERROR_NOK;
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	05 c0       	rjmp	.+10     	; 0x400 <__EEPROM_REGION_LENGTH__>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"PAN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	03 c0       	rjmp	.+6      	; 0x400 <__EEPROM_REGION_LENGTH__>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	01 c0       	rjmp	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     3fe:	81 e0       	ldi	r24, 0x01	; 1
}
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <AppADMIN_getCustomerBalance>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Balance by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the balance of the customer.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerBalance(uint8_t* pu8_data)
{
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Balance: ") != TERMINAL_STATUS_ERROR_OK)
     40c:	83 eb       	ldi	r24, 0xB3	; 179
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     414:	81 30       	cpi	r24, 0x01	; 1
     416:	c1 f4       	brne	.+48     	; 0x448 <AppADMIN_getCustomerBalance+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     418:	ce 01       	movw	r24, r28
     41a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     41e:	81 30       	cpi	r24, 0x01	; 1
     420:	29 f0       	breq	.+10     	; 0x42c <AppADMIN_getCustomerBalance+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     422:	11 f0       	breq	.+4      	; 0x428 <AppADMIN_getCustomerBalance+0x22>
     424:	86 30       	cpi	r24, 0x06	; 6
     426:	91 f4       	brne	.+36     	; 0x44c <AppADMIN_getCustomerBalance+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     428:	86 30       	cpi	r24, 0x06	; 6
     42a:	b1 f3       	breq	.-20     	; 0x418 <AppADMIN_getCustomerBalance+0x12>
		
		if (pu8_data[7] == '\0')
     42c:	8f 81       	ldd	r24, Y+7	; 0x07
     42e:	88 23       	and	r24, r24
     430:	79 f0       	breq	.+30     	; 0x450 <AppADMIN_getCustomerBalance+0x4a>
		break;
		EmptyString(pu8_data);
     432:	ce 01       	movw	r24, r28
     434:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters\r") != TERMINAL_STATUS_ERROR_OK)
     438:	8d eb       	ldi	r24, 0xBD	; 189
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	21 f3       	breq	.-56     	; 0x40c <AppADMIN_getCustomerBalance+0x6>
		return APP_STATUS_ERROR_NOK;
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	05 c0       	rjmp	.+10     	; 0x452 <AppADMIN_getCustomerBalance+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Balance: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	03 c0       	rjmp	.+6      	; 0x452 <AppADMIN_getCustomerBalance+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	01 c0       	rjmp	.+2      	; 0x452 <AppADMIN_getCustomerBalance+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     450:	81 e0       	ldi	r24, 0x01	; 1
}
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <AppADMIN_getAtmPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input ATM PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the atm pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getAtmPIN(uint8_t* pu8_data)
{
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	
	Terminal_enablePasswordMode();
     45e:	0e 94 41 08 	call	0x1082	; 0x1082 <Terminal_enablePasswordMode>
	do
	{
		if(Terminal_Out((uint8_t*)"Card PIN: ") != TERMINAL_STATUS_ERROR_OK)
     462:	81 ee       	ldi	r24, 0xE1	; 225
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     46a:	81 30       	cpi	r24, 0x01	; 1
     46c:	69 f5       	brne	.+90     	; 0x4c8 <AppADMIN_getAtmPIN+0x70>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     46e:	ce 01       	movw	r24, r28
     470:	0e 94 54 01 	call	0x2a8	; 0x2a8 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     474:	81 30       	cpi	r24, 0x01	; 1
     476:	29 f0       	breq	.+10     	; 0x482 <AppADMIN_getAtmPIN+0x2a>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     478:	11 f0       	breq	.+4      	; 0x47e <AppADMIN_getAtmPIN+0x26>
     47a:	86 30       	cpi	r24, 0x06	; 6
     47c:	39 f5       	brne	.+78     	; 0x4cc <AppADMIN_getAtmPIN+0x74>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     47e:	86 30       	cpi	r24, 0x06	; 6
     480:	b1 f3       	breq	.-20     	; 0x46e <AppADMIN_getAtmPIN+0x16>
		
		if(stringCompare(ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
     482:	be 01       	movw	r22, r28
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <stringCompare>
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	39 f0       	breq	.+14     	; 0x49e <AppADMIN_getAtmPIN+0x46>
		{
			if(Terminal_Out((uint8_t*)"Incorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
     490:	8c ee       	ldi	r24, 0xEC	; 236
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     498:	81 30       	cpi	r24, 0x01	; 1
     49a:	41 f0       	breq	.+16     	; 0x4ac <AppADMIN_getAtmPIN+0x54>
     49c:	19 c0       	rjmp	.+50     	; 0x4d0 <AppADMIN_getAtmPIN+0x78>
				return APP_STATUS_ERROR_NOK;
		}else
		{
			if(Terminal_Out((uint8_t*)"Loading...\r") != TERMINAL_STATUS_ERROR_OK)
     49e:	8b ef       	ldi	r24, 0xFB	; 251
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     4a6:	81 30       	cpi	r24, 0x01	; 1
     4a8:	a9 f4       	brne	.+42     	; 0x4d4 <AppADMIN_getAtmPIN+0x7c>
     4aa:	0a c0       	rjmp	.+20     	; 0x4c0 <AppADMIN_getAtmPIN+0x68>
				return APP_STATUS_ERROR_NOK;
			break;
		}
		EmptyString(pu8_data);
     4ac:	ce 01       	movw	r24, r28
     4ae:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
     4b2:	87 e0       	ldi	r24, 0x07	; 7
     4b4:	92 e0       	ldi	r25, 0x02	; 2
     4b6:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     4ba:	81 30       	cpi	r24, 0x01	; 1
     4bc:	91 f2       	breq	.-92     	; 0x462 <AppADMIN_getAtmPIN+0xa>
     4be:	0c c0       	rjmp	.+24     	; 0x4d8 <AppADMIN_getAtmPIN+0x80>
			return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
     4c0:	0e 94 45 08 	call	0x108a	; 0x108a <Terminal_disablePasswordMode>
	return APP_STATUS_ERROR_OK;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	09 c0       	rjmp	.+18     	; 0x4da <AppADMIN_getAtmPIN+0x82>
	
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"Card PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	07 c0       	rjmp	.+14     	; 0x4da <AppADMIN_getAtmPIN+0x82>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	05 c0       	rjmp	.+10     	; 0x4da <AppADMIN_getAtmPIN+0x82>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringCompare(ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
		{
			if(Terminal_Out((uint8_t*)"Incorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	03 c0       	rjmp	.+6      	; 0x4da <AppADMIN_getAtmPIN+0x82>
		}else
		{
			if(Terminal_Out((uint8_t*)"Loading...\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	01 c0       	rjmp	.+2      	; 0x4da <AppADMIN_getAtmPIN+0x82>
			break;
		}
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     4d8:	80 e0       	ldi	r24, 0x00	; 0
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_ERROR_OK;
}
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <AppADMIN_saveNewCustomerData>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save PAN and Balance of a new Customer in the EEPROM
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveNewCustomerData(void)
{
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*16 ;
     4e4:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <gu8_registeredAccNum>
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	c9 01       	movw	r24, r18
     4ec:	02 96       	adiw	r24, 0x02	; 2
     4ee:	d8 2f       	mov	r29, r24
     4f0:	d2 95       	swap	r29
     4f2:	d0 7f       	andi	r29, 0xF0	; 240
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*16 ;
     4f4:	2d 5f       	subi	r18, 0xFD	; 253
     4f6:	3f 4f       	sbci	r19, 0xFF	; 255
     4f8:	c2 2f       	mov	r28, r18
     4fa:	c2 95       	swap	r28
     4fc:	c0 7f       	andi	r28, 0xF0	; 240
	uint8_t au8_cardData[16] = {0};
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
     4fe:	84 e0       	ldi	r24, 0x04	; 4
     500:	93 e0       	ldi	r25, 0x03	; 3
     502:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <stringLength>
     506:	48 2f       	mov	r20, r24
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	64 e0       	ldi	r22, 0x04	; 4
     50c:	73 e0       	ldi	r23, 0x03	; 3
     50e:	8d 2f       	mov	r24, r29
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 29 05 	call	0xa52	; 0xa52 <Eeprom_24_writePacket>
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	d9 f4       	brne	.+54     	; 0x550 <AppADMIN_saveNewCustomerData+0x70>
		return APP_STATUS_ERROR_NOK;
		
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     51a:	8e e0       	ldi	r24, 0x0E	; 14
     51c:	93 e0       	ldi	r25, 0x03	; 3
     51e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <stringLength>
     522:	48 2f       	mov	r20, r24
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	6e e0       	ldi	r22, 0x0E	; 14
     528:	73 e0       	ldi	r23, 0x03	; 3
     52a:	8c 2f       	mov	r24, r28
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 29 05 	call	0xa52	; 0xa52 <Eeprom_24_writePacket>
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	79 f4       	brne	.+30     	; 0x554 <AppADMIN_saveNewCustomerData+0x74>
		return APP_STATUS_ERROR_NOK;
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     536:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <gu8_registeredAccNum>
     53a:	6f 5f       	subi	r22, 0xFF	; 255
     53c:	60 93 02 03 	sts	0x0302, r22	; 0x800302 <gu8_registeredAccNum>
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 3a 04 	call	0x874	; 0x874 <Eeprom_24_writeByte>
     548:	81 30       	cpi	r24, 0x01	; 1
     54a:	31 f0       	breq	.+12     	; 0x558 <AppADMIN_saveNewCustomerData+0x78>
		return APP_STATUS_ERROR_NOK;
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	05 c0       	rjmp	.+10     	; 0x55a <AppADMIN_saveNewCustomerData+0x7a>
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*16 ;
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*16 ;
	uint8_t au8_cardData[16] = {0};
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	03 c0       	rjmp	.+6      	; 0x55a <AppADMIN_saveNewCustomerData+0x7a>
		
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	01 c0       	rjmp	.+2      	; 0x55a <AppADMIN_saveNewCustomerData+0x7a>
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     558:	81 e0       	ldi	r24, 0x01	; 1
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <AppUSER_sendCardData>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the EEPROM
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_sendCardData(strCardData_t* pstr_CardData)
{
     560:	ef 92       	push	r14
     562:	ff 92       	push	r15
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
     570:	6e 97       	sbiw	r28, 0x1e	; 30
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	de bf       	out	0x3e, r29	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	cd bf       	out	0x3d, r28	; 61
     57c:	8c 01       	movw	r16, r24
	if(Terminal_Out((uint8_t*)"Data is being sent to the ATM...\r") != TERMINAL_STATUS_ERROR_OK)
     57e:	87 e2       	ldi	r24, 0x27	; 39
     580:	92 e0       	ldi	r25, 0x02	; 2
     582:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     586:	81 30       	cpi	r24, 0x01	; 1
     588:	71 f5       	brne	.+92     	; 0x5e6 <AppUSER_sendCardData+0x86>
		return APP_STATUS_ERROR_NOK;
		
	uint8_t au8_DataFrame[30] = {0};
     58a:	ce 01       	movw	r24, r28
     58c:	01 96       	adiw	r24, 0x01	; 1
     58e:	7c 01       	movw	r14, r24
     590:	8e e1       	ldi	r24, 0x1E	; 30
     592:	f7 01       	movw	r30, r14
     594:	11 92       	st	Z+, r1
     596:	8a 95       	dec	r24
     598:	e9 f7       	brne	.-6      	; 0x594 <AppUSER_sendCardData+0x34>
	stringConcatenate(au8_DataFrame, (uint8_t*)"#");
     59a:	69 e4       	ldi	r22, 0x49	; 73
     59c:	72 e0       	ldi	r23, 0x02	; 2
     59e:	c7 01       	movw	r24, r14
     5a0:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_cardHolderName);
     5a4:	b8 01       	movw	r22, r16
     5a6:	c7 01       	movw	r24, r14
     5a8:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"-");
     5ac:	6c e4       	ldi	r22, 0x4C	; 76
     5ae:	72 e0       	ldi	r23, 0x02	; 2
     5b0:	c7 01       	movw	r24, r14
     5b2:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_primaryAccountNumber);
     5b6:	b8 01       	movw	r22, r16
     5b8:	66 5f       	subi	r22, 0xF6	; 246
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	c7 01       	movw	r24, r14
     5be:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"-");
     5c2:	6c e4       	ldi	r22, 0x4C	; 76
     5c4:	72 e0       	ldi	r23, 0x02	; 2
     5c6:	c7 01       	movw	r24, r14
     5c8:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <stringConcatenate>
	stringConcatenate(au8_DataFrame, pstr_CardData->au8_pinNum);
     5cc:	b8 01       	movw	r22, r16
     5ce:	6c 5e       	subi	r22, 0xEC	; 236
     5d0:	7f 4f       	sbci	r23, 0xFF	; 255
     5d2:	c7 01       	movw	r24, r14
     5d4:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <stringConcatenate>
	stringConcatenate(au8_DataFrame, (uint8_t*)"#-");
     5d8:	6b e4       	ldi	r22, 0x4B	; 75
     5da:	72 e0       	ldi	r23, 0x02	; 2
     5dc:	c7 01       	movw	r24, r14
     5de:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <stringConcatenate>
// 	SPI_SS_ENABLE();
// 	if(Spi_MasterSendPacket(au8_DataFrame, stringLength(au8_DataFrame)) != SPI_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	SPI_SS_DISABLE();
	
	return APP_STATUS_ERROR_OK;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <AppUSER_sendCardData+0x88>
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_sendCardData(strCardData_t* pstr_CardData)
{
	if(Terminal_Out((uint8_t*)"Data is being sent to the ATM...\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     5e6:	80 e0       	ldi	r24, 0x00	; 0
// 	if(Spi_MasterSendPacket(au8_DataFrame, stringLength(au8_DataFrame)) != SPI_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	SPI_SS_DISABLE();
	
	return APP_STATUS_ERROR_OK;
     5e8:	6e 96       	adiw	r28, 0x1e	; 30
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	f8 94       	cli
     5ee:	de bf       	out	0x3e, r29	; 62
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	cd bf       	out	0x3d, r28	; 61
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	08 95       	ret

00000602 <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	ab 97       	sbiw	r28, 0x2b	; 43
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
     616:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <enuCurrentAppStatus>
     61a:	84 30       	cpi	r24, 0x04	; 4
     61c:	09 f0       	breq	.+2      	; 0x620 <App_update+0x1e>
     61e:	ed c0       	rjmp	.+474    	; 0x7fa <App_update+0x1f8>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
     620:	fe 01       	movw	r30, r28
     622:	31 96       	adiw	r30, 0x01	; 1
     624:	8a e0       	ldi	r24, 0x0A	; 10
     626:	df 01       	movw	r26, r30
     628:	1d 92       	st	X+, r1
     62a:	8a 95       	dec	r24
     62c:	e9 f7       	brne	.-6      	; 0x628 <App_update+0x26>
	static uint8_t u8_passFlag = 0;
	if(gu8_ATMMode == ATM_MODE_ADMIN)
     62e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gu8_ATMMode>
     632:	81 11       	cpse	r24, r1
     634:	a9 c0       	rjmp	.+338    	; 0x788 <App_update+0x186>
	{ /**************** PROGRAMMING MODE ****************/
			uint8_t au8_tempPAN[10]={0};
     636:	3a 96       	adiw	r30, 0x0a	; 10
     638:	8a e0       	ldi	r24, 0x0A	; 10
     63a:	df 01       	movw	r26, r30
     63c:	1d 92       	st	X+, r1
     63e:	8a 95       	dec	r24
     640:	e9 f7       	brne	.-6      	; 0x63c <App_update+0x3a>
			uint8_t au8_tempBalance[8]={0};
     642:	88 e0       	ldi	r24, 0x08	; 8
     644:	72 96       	adiw	r30, 0x12	; 18
     646:	df 01       	movw	r26, r30
     648:	98 2f       	mov	r25, r24
     64a:	1d 92       	st	X+, r1
     64c:	9a 95       	dec	r25
     64e:	e9 f7       	brne	.-6      	; 0x64a <App_update+0x48>
			uint8_t au8_Input[2]={0};
     650:	1b a6       	std	Y+43, r1	; 0x2b
     652:	1a a6       	std	Y+42, r1	; 0x2a
			uint8_t au8_tempPinNum[5]={0};
     654:	38 96       	adiw	r30, 0x08	; 8
     656:	95 e0       	ldi	r25, 0x05	; 5
     658:	df 01       	movw	r26, r30
     65a:	1d 92       	st	X+, r1
     65c:	9a 95       	dec	r25
     65e:	e9 f7       	brne	.-6      	; 0x65a <App_update+0x58>
			uint8_t au8_tempMaxAmount[8]={0};
     660:	70 97       	sbiw	r30, 0x10	; 16
     662:	df 01       	movw	r26, r30
     664:	1d 92       	st	X+, r1
     666:	8a 95       	dec	r24
     668:	e9 f7       	brne	.-6      	; 0x664 <App_update+0x62>
			
			if(u8_passFlag == 0)
     66a:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <__data_end>
     66e:	81 11       	cpse	r24, r1
     670:	09 c0       	rjmp	.+18     	; 0x684 <App_update+0x82>
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
     672:	ce 01       	movw	r24, r28
     674:	85 96       	adiw	r24, 0x25	; 37
     676:	0e 94 2c 02 	call	0x458	; 0x458 <AppADMIN_getAtmPIN>
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	09 f0       	breq	.+2      	; 0x680 <App_update+0x7e>
     67e:	72 c0       	rjmp	.+228    	; 0x764 <App_update+0x162>
					return APP_STATUS_ERROR_NOK;
				u8_passFlag = 1;
     680:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <__data_end>
			}
			
			if(Terminal_Out((uint8_t*)"1.Add New Customer\r2.Update Max Amount\r3.Exit\r") != TERMINAL_STATUS_ERROR_OK)
     684:	8e e4       	ldi	r24, 0x4E	; 78
     686:	92 e0       	ldi	r25, 0x02	; 2
     688:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	09 f0       	breq	.+2      	; 0x692 <App_update+0x90>
     690:	6b c0       	rjmp	.+214    	; 0x768 <App_update+0x166>
				return APP_STATUS_ERROR_NOK;
				
			AppADMIN_getInput(au8_Input);
     692:	ce 01       	movw	r24, r28
     694:	8a 96       	adiw	r24, 0x2a	; 42
     696:	0e 94 85 01 	call	0x30a	; 0x30a <AppADMIN_getInput>
			if(au8_Input[0] == '1')//--------- New Customer OPTION -----------//
     69a:	8a a5       	ldd	r24, Y+42	; 0x2a
     69c:	81 33       	cpi	r24, 0x31	; 49
     69e:	79 f5       	brne	.+94     	; 0x6fe <App_update+0xfc>
			{
				/* Get the Customer's Primary Account Number from the ADMIN Terminal */
				if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     6a0:	ce 01       	movw	r24, r28
     6a2:	0b 96       	adiw	r24, 0x0b	; 11
     6a4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <AppADMIN_getCustomerPAN>
     6a8:	81 30       	cpi	r24, 0x01	; 1
     6aa:	09 f0       	breq	.+2      	; 0x6ae <App_update+0xac>
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <App_update+0x16a>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
     6ae:	64 e0       	ldi	r22, 0x04	; 4
     6b0:	73 e0       	ldi	r23, 0x03	; 3
     6b2:	ce 01       	movw	r24, r28
     6b4:	0b 96       	adiw	r24, 0x0b	; 11
     6b6:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <stringCopy>
				
				/* Get the Customer's Balance from the ADMIN Terminal */
				if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
     6ba:	ce 01       	movw	r24, r28
     6bc:	4d 96       	adiw	r24, 0x1d	; 29
     6be:	0e 94 03 02 	call	0x406	; 0x406 <AppADMIN_getCustomerBalance>
     6c2:	81 30       	cpi	r24, 0x01	; 1
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <App_update+0xc6>
     6c6:	54 c0       	rjmp	.+168    	; 0x770 <App_update+0x16e>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
     6c8:	6e e0       	ldi	r22, 0x0E	; 14
     6ca:	73 e0       	ldi	r23, 0x03	; 3
     6cc:	ce 01       	movw	r24, r28
     6ce:	4d 96       	adiw	r24, 0x1d	; 29
     6d0:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <stringCopy>
				
				if(AppADMIN_saveNewCustomerData() != APP_STATUS_ERROR_OK)
     6d4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <AppADMIN_saveNewCustomerData>
     6d8:	81 30       	cpi	r24, 0x01	; 1
     6da:	09 f0       	breq	.+2      	; 0x6de <App_update+0xdc>
     6dc:	4b c0       	rjmp	.+150    	; 0x774 <App_update+0x172>
					return APP_STATUS_ERROR_NOK;
				EmptyString(au8_Input);
     6de:	ce 01       	movw	r24, r28
     6e0:	8a 96       	adiw	r24, 0x2a	; 42
     6e2:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <EmptyString>
				if(gu8_registeredAccNum == 1)
     6e6:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <gu8_registeredAccNum>
     6ea:	81 30       	cpi	r24, 0x01	; 1
     6ec:	c9 f5       	brne	.+114    	; 0x760 <App_update+0x15e>
				{
					if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
     6ee:	6a ea       	ldi	r22, 0xAA	; 170
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 3a 04 	call	0x874	; 0x874 <Eeprom_24_writeByte>
     6f8:	81 30       	cpi	r24, 0x01	; 1
     6fa:	f1 f5       	brne	.+124    	; 0x778 <App_update+0x176>
     6fc:	31 c0       	rjmp	.+98     	; 0x760 <App_update+0x15e>
					return APP_STATUS_ERROR_NOK;
				}

			}else if(au8_Input[0] == '2')//--------- Max Amount OPTION -----------//
     6fe:	82 33       	cpi	r24, 0x32	; 50
     700:	a1 f4       	brne	.+40     	; 0x72a <App_update+0x128>
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
     702:	ce 01       	movw	r24, r28
     704:	45 96       	adiw	r24, 0x15	; 21
     706:	0e 94 ae 01 	call	0x35c	; 0x35c <AppADMIN_getnewMaxAmount>
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
     70a:	ce 01       	movw	r24, r28
     70c:	45 96       	adiw	r24, 0x15	; 21
     70e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <stringLength>
     712:	48 2f       	mov	r20, r24
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	be 01       	movw	r22, r28
     718:	6b 5e       	subi	r22, 0xEB	; 235
     71a:	7f 4f       	sbci	r23, 0xFF	; 255
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 29 05 	call	0xa52	; 0xa52 <Eeprom_24_writePacket>
     724:	81 30       	cpi	r24, 0x01	; 1
     726:	51 f5       	brne	.+84     	; 0x77c <App_update+0x17a>
     728:	1b c0       	rjmp	.+54     	; 0x760 <App_update+0x15e>
					return APP_STATUS_ERROR_NOK;
					
			}else if(au8_Input[0] == '3')//--------- EXIT OPTION -----------//
     72a:	83 33       	cpi	r24, 0x33	; 51
     72c:	c9 f4       	brne	.+50     	; 0x760 <App_update+0x15e>
			{
				if(gu8_initData == ATM_DB_FLAG_SET_VAL)
     72e:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <gu8_initData>
     732:	8a 3a       	cpi	r24, 0xAA	; 170
     734:	69 f4       	brne	.+26     	; 0x750 <App_update+0x14e>
				{
					u8_passFlag = 0;
     736:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <__data_end>
					gu8_ATMMode = ATM_MODE_USER;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu8_ATMMode>
					if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     740:	8f e0       	ldi	r24, 0x0F	; 15
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	d1 f0       	breq	.+52     	; 0x780 <App_update+0x17e>
						return APP_STATUS_ERROR_NOK;
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	5e c0       	rjmp	.+188    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
					return APP_STATUS_ERROR_OK;
				}else
				{
					if(Terminal_Out((uint8_t*)"Data Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
     750:	8d e7       	ldi	r24, 0x7D	; 125
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     758:	81 30       	cpi	r24, 0x01	; 1
     75a:	a1 f0       	breq	.+40     	; 0x784 <App_update+0x182>
						return APP_STATUS_ERROR_NOK;
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	56 c0       	rjmp	.+172    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
				}
			}
	/****************************************************************/
	}
	
	return APP_STATUS_ERROR_OK;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	54 c0       	rjmp	.+168    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			
			if(u8_passFlag == 0)
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	52 c0       	rjmp	.+164    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
				u8_passFlag = 1;
			}
			
			if(Terminal_Out((uint8_t*)"1.Add New Customer\r2.Update Max Amount\r3.Exit\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	50 c0       	rjmp	.+160    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			AppADMIN_getInput(au8_Input);
			if(au8_Input[0] == '1')//--------- New Customer OPTION -----------//
			{
				/* Get the Customer's Primary Account Number from the ADMIN Terminal */
				if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	4e c0       	rjmp	.+156    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
				stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
				
				/* Get the Customer's Balance from the ADMIN Terminal */
				if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	4c c0       	rjmp	.+152    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
				stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
				
				if(AppADMIN_saveNewCustomerData() != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	4a c0       	rjmp	.+148    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
				EmptyString(au8_Input);
				if(gu8_registeredAccNum == 1)
				{
					if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	48 c0       	rjmp	.+144    	; 0x80c <__DATA_REGION_LENGTH__+0xc>

			}else if(au8_Input[0] == '2')//--------- Max Amount OPTION -----------//
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	46 c0       	rjmp	.+140    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
				{
					u8_passFlag = 0;
					gu8_ATMMode = ATM_MODE_USER;
					if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					return APP_STATUS_ERROR_OK;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	44 c0       	rjmp	.+136    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
				}else
				{
					if(Terminal_Out((uint8_t*)"Data Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					return APP_STATUS_ERROR_OK;
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	42 c0       	rjmp	.+132    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			}
	/****************************************************************/
	}else
	{/************* User Mode **************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
     788:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <gu8_ADMIN_Request>
     78c:	81 30       	cpi	r24, 0x01	; 1
     78e:	11 f4       	brne	.+4      	; 0x794 <App_update+0x192>
			{
				gu8_ATMMode = ATM_MODE_ADMIN;
     790:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <gu8_ATMMode>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
     794:	ce 01       	movw	r24, r28
     796:	01 96       	adiw	r24, 0x01	; 1
     798:	0e 94 54 01 	call	0x2a8	; 0x2a8 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     79c:	81 30       	cpi	r24, 0x01	; 1
     79e:	59 f4       	brne	.+22     	; 0x7b6 <App_update+0x1b4>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
     7a0:	6a ee       	ldi	r22, 0xEA	; 234
     7a2:	72 e0       	ldi	r23, 0x02	; 2
     7a4:	ce 01       	movw	r24, r28
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <stringCompare>
     7ac:	81 30       	cpi	r24, 0x01	; 1
     7ae:	39 f4       	brne	.+14     	; 0x7be <App_update+0x1bc>
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"CARD is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The ATM is not used by User */
					{
						gu8_ATMMode = ATM_MODE_ADMIN;
     7b0:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <gu8_ATMMode>
						return APP_STATUS_ERROR_OK;
     7b4:	2b c0       	rjmp	.+86     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     7b6:	81 30       	cpi	r24, 0x01	; 1
     7b8:	11 f0       	breq	.+4      	; 0x7be <App_update+0x1bc>
     7ba:	86 30       	cpi	r24, 0x06	; 6
     7bc:	01 f5       	brne	.+64     	; 0x7fe <App_update+0x1fc>
				return APP_STATUS_ERROR_NOK;
			/****************************************************************/
			if (cgu8_ATM_Req == ATM_REQUESTED)
     7be:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <cgu8_ATM_Req>
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	f1 f4       	brne	.+60     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			{
				AppUSER_sendCardData(&gstr_userCardData);
     7c6:	86 e1       	ldi	r24, 0x16	; 22
     7c8:	93 e0       	ldi	r25, 0x03	; 3
     7ca:	0e 94 b0 02 	call	0x560	; 0x560 <AppUSER_sendCardData>
				
				Delay_ms(100);
     7ce:	24 e6       	ldi	r18, 0x64	; 100
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 9b 08 	call	0x1136	; 0x1136 <Delay_ms>
				
				if (gu8_ADMIN_Request == ADMIN_NOT_REQUESTED)
     7e2:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <gu8_ADMIN_Request>
     7e6:	81 11       	cpse	r24, r1
     7e8:	0e c0       	rjmp	.+28     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
				{
					if(Terminal_Out((uint8_t*)"Data Successfully Sent\r") != TERMINAL_STATUS_ERROR_OK)
     7ea:	8a eb       	ldi	r24, 0xBA	; 186
     7ec:	92 e0       	ldi	r25, 0x02	; 2
     7ee:	0e 94 0b 08 	call	0x1016	; 0x1016 <Terminal_Out>
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	51 f0       	breq	.+20     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
						return APP_STATUS_ERROR_NOK;
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	09 c0       	rjmp	.+18     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
     7fa:	85 e0       	ldi	r24, 0x05	; 5
     7fc:	07 c0       	rjmp	.+14     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
						gu8_ATMMode = ATM_MODE_ADMIN;
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	05 c0       	rjmp	.+10     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
				}
			}
	/****************************************************************/
	}
	
	return APP_STATUS_ERROR_OK;
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	03 c0       	rjmp	.+6      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	01 c0       	rjmp	.+2      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80a:	81 e0       	ldi	r24, 0x01	; 1
}
     80c:	ab 96       	adiw	r28, 0x2b	; 43
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	de bf       	out	0x3e, r29	; 62
     814:	0f be       	out	0x3f, r0	; 63
     816:	cd bf       	out	0x3d, r28	; 61
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
     81e:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
     822:	81 30       	cpi	r24, 0x01	; 1
     824:	39 f4       	brne	.+14     	; 0x834 <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
     826:	8f b7       	in	r24, 0x3f	; 63
     828:	80 68       	ori	r24, 0x80	; 128
     82a:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
     82c:	0e 94 01 03 	call	0x602	; 0x602 <App_update>
     830:	81 30       	cpi	r24, 0x01	; 1
     832:	e1 f3       	breq	.-8      	; 0x82c <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
	}
}
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	08 95       	ret

00000838 <EEPROM_getAddresses>:
* Description: Function to Calculate the slave address byte and the word address byte from the location
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
     838:	9a 01       	movw	r18, r20
     83a:	22 27       	eor	r18, r18
     83c:	37 70       	andi	r19, 0x07	; 7
     83e:	22 0f       	add	r18, r18
     840:	23 2f       	mov	r18, r19
     842:	22 1f       	adc	r18, r18
     844:	33 0b       	sbc	r19, r19
     846:	31 95       	neg	r19
     848:	20 65       	ori	r18, 0x50	; 80
     84a:	fc 01       	movw	r30, r24
     84c:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
     84e:	fb 01       	movw	r30, r22
     850:	40 83       	st	Z, r20
	return EEPROM_24_STATUS_ERROR_OK;
}
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	08 95       	ret

00000856 <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
     856:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <genu_eepromModuleState>
     85a:	83 30       	cpi	r24, 0x03	; 3
     85c:	51 f0       	breq	.+20     	; 0x872 <__stack+0x13>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
     85e:	0e 94 ce 0c 	call	0x199c	; 0x199c <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
     862:	85 30       	cpi	r24, 0x05	; 5
     864:	29 f0       	breq	.+10     	; 0x870 <__stack+0x11>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
     870:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
     872:	08 95       	ret

00000874 <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	00 d0       	rcall	.+0      	; 0x87c <Eeprom_24_writeByte+0x8>
     87c:	1f 92       	push	r1
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	ac 01       	movw	r20, r24
     884:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     886:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <genu_eepromModuleState>
     88a:	93 30       	cpi	r25, 0x03	; 3
     88c:	11 f5       	brne	.+68     	; 0x8d2 <Eeprom_24_writeByte+0x5e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     88e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
     890:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     892:	be 01       	movw	r22, r28
     894:	6e 5f       	subi	r22, 0xFE	; 254
     896:	7f 4f       	sbci	r23, 0xFF	; 255
     898:	ce 01       	movw	r24, r28
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	0e 94 1c 04 	call	0x838	; 0x838 <EEPROM_getAddresses>
     8a0:	18 2f       	mov	r17, r24
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	c1 f4       	brne	.+48     	; 0x8d6 <Eeprom_24_writeByte+0x62>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
     8a6:	21 e0       	ldi	r18, 0x01	; 1
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	ae 01       	movw	r20, r28
     8ac:	4d 5f       	subi	r20, 0xFD	; 253
     8ae:	5f 4f       	sbci	r21, 0xFF	; 255
     8b0:	6a 81       	ldd	r22, Y+2	; 0x02
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <I2C_MasterSendToLocation>
     8b8:	81 30       	cpi	r24, 0x01	; 1
     8ba:	79 f4       	brne	.+30     	; 0x8da <Eeprom_24_writeByte+0x66>
		return EEPROM_24_STATUS_ERROR_NOK;
	Delay_ms(15);
     8bc:	2f e0       	ldi	r18, 0x0F	; 15
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 9b 08 	call	0x1136	; 0x1136 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
     8d0:	05 c0       	rjmp	.+10     	; 0x8dc <Eeprom_24_writeByte+0x68>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     8d2:	12 e0       	ldi	r17, 0x02	; 2
     8d4:	03 c0       	rjmp	.+6      	; 0x8dc <Eeprom_24_writeByte+0x68>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     8d6:	10 e0       	ldi	r17, 0x00	; 0
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <Eeprom_24_writeByte+0x68>
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     8da:	10 e0       	ldi	r17, 0x00	; 0
	Delay_ms(15);
	return EEPROM_24_STATUS_ERROR_OK;
}
     8dc:	81 2f       	mov	r24, r17
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	08 95       	ret

000008ec <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	00 d0       	rcall	.+0      	; 0x8f8 <Eeprom_24_readByte+0xc>
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     8fe:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <genu_eepromModuleState>
     902:	93 30       	cpi	r25, 0x03	; 3
     904:	21 f5       	brne	.+72     	; 0x94e <Eeprom_24_readByte+0x62>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     906:	61 15       	cp	r22, r1
     908:	71 05       	cpc	r23, r1
     90a:	19 f1       	breq	.+70     	; 0x952 <Eeprom_24_readByte+0x66>
     90c:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
     90e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t word_addr=0;
     910:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     912:	be 01       	movw	r22, r28
     914:	6e 5f       	subi	r22, 0xFE	; 254
     916:	7f 4f       	sbci	r23, 0xFF	; 255
     918:	ce 01       	movw	r24, r28
     91a:	01 96       	adiw	r24, 0x01	; 1
     91c:	0e 94 1c 04 	call	0x838	; 0x838 <EEPROM_getAddresses>
     920:	18 2f       	mov	r17, r24
     922:	81 30       	cpi	r24, 0x01	; 1
     924:	c1 f4       	brne	.+48     	; 0x956 <Eeprom_24_readByte+0x6a>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
     926:	21 e0       	ldi	r18, 0x01	; 1
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	a7 01       	movw	r20, r14
     92c:	6a 81       	ldd	r22, Y+2	; 0x02
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	0e 94 56 0e 	call	0x1cac	; 0x1cac <I2C_MasterReceiveFromLocation>
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	89 f4       	brne	.+34     	; 0x95a <Eeprom_24_readByte+0x6e>
		return EEPROM_24_STATUS_ERROR_NOK;
	Delay_ms(5);
     938:	25 e0       	ldi	r18, 0x05	; 5
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 9b 08 	call	0x1136	; 0x1136 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
     94c:	07 c0       	rjmp	.+14     	; 0x95c <Eeprom_24_readByte+0x70>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     94e:	12 e0       	ldi	r17, 0x02	; 2
     950:	05 c0       	rjmp	.+10     	; 0x95c <Eeprom_24_readByte+0x70>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     952:	14 e0       	ldi	r17, 0x04	; 4
     954:	03 c0       	rjmp	.+6      	; 0x95c <Eeprom_24_readByte+0x70>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
	uint8_t word_addr=0;
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     956:	10 e0       	ldi	r17, 0x00	; 0
     958:	01 c0       	rjmp	.+2      	; 0x95c <Eeprom_24_readByte+0x70>
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     95a:	10 e0       	ldi	r17, 0x00	; 0
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
     95c:	81 2f       	mov	r24, r17
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	08 95       	ret

0000096e <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	00 d0       	rcall	.+0      	; 0x97a <Eeprom_24_writePage+0xc>
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     97e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <genu_eepromModuleState>
     982:	93 30       	cpi	r25, 0x03	; 3
     984:	f9 f4       	brne	.+62     	; 0x9c4 <Eeprom_24_writePage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     986:	61 15       	cp	r22, r1
     988:	71 05       	cpc	r23, r1
     98a:	f1 f0       	breq	.+60     	; 0x9c8 <Eeprom_24_writePage+0x5a>
     98c:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
     98e:	90 e1       	ldi	r25, 0x10	; 16
     990:	89 9f       	mul	r24, r25
     992:	a0 01       	movw	r20, r0
     994:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
     996:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
     998:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
     99a:	be 01       	movw	r22, r28
     99c:	6e 5f       	subi	r22, 0xFE	; 254
     99e:	7f 4f       	sbci	r23, 0xFF	; 255
     9a0:	ce 01       	movw	r24, r28
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	0e 94 1c 04 	call	0x838	; 0x838 <EEPROM_getAddresses>
     9a8:	18 2f       	mov	r17, r24
     9aa:	81 30       	cpi	r24, 0x01	; 1
     9ac:	79 f4       	brne	.+30     	; 0x9cc <Eeprom_24_writePage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
     9ae:	20 e1       	ldi	r18, 0x10	; 16
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	a7 01       	movw	r20, r14
     9b4:	6a 81       	ldd	r22, Y+2	; 0x02
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <I2C_MasterSendToLocation>
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	39 f0       	breq	.+14     	; 0x9ce <Eeprom_24_writePage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
     9c0:	10 e0       	ldi	r17, 0x00	; 0
     9c2:	05 c0       	rjmp	.+10     	; 0x9ce <Eeprom_24_writePage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     9c4:	12 e0       	ldi	r17, 0x02	; 2
     9c6:	03 c0       	rjmp	.+6      	; 0x9ce <Eeprom_24_writePage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     9c8:	14 e0       	ldi	r17, 0x04	; 4
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <Eeprom_24_writePage+0x60>
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     9cc:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
     9ce:	81 2f       	mov	r24, r17
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	1f 91       	pop	r17
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	08 95       	ret

000009e0 <Eeprom_24_readPage>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory page.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read data inside a specific page in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPage(uint8_t u8_page, uint8_t *pu8_data)
{
     9e0:	ef 92       	push	r14
     9e2:	ff 92       	push	r15
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	00 d0       	rcall	.+0      	; 0x9ec <Eeprom_24_readPage+0xc>
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     9f0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <genu_eepromModuleState>
     9f4:	93 30       	cpi	r25, 0x03	; 3
     9f6:	f9 f4       	brne	.+62     	; 0xa36 <Eeprom_24_readPage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     9f8:	61 15       	cp	r22, r1
     9fa:	71 05       	cpc	r23, r1
     9fc:	f1 f0       	breq	.+60     	; 0xa3a <Eeprom_24_readPage+0x5a>
     9fe:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
     a00:	90 e1       	ldi	r25, 0x10	; 16
     a02:	89 9f       	mul	r24, r25
     a04:	a0 01       	movw	r20, r0
     a06:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
     a08:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
     a0a:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
     a0c:	be 01       	movw	r22, r28
     a0e:	6e 5f       	subi	r22, 0xFE	; 254
     a10:	7f 4f       	sbci	r23, 0xFF	; 255
     a12:	ce 01       	movw	r24, r28
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	0e 94 1c 04 	call	0x838	; 0x838 <EEPROM_getAddresses>
     a1a:	18 2f       	mov	r17, r24
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	79 f4       	brne	.+30     	; 0xa3e <Eeprom_24_readPage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
     a20:	20 e1       	ldi	r18, 0x10	; 16
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	a7 01       	movw	r20, r14
     a26:	6a 81       	ldd	r22, Y+2	; 0x02
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <I2C_MasterReceiveFromLocation>
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	39 f0       	breq	.+14     	; 0xa40 <Eeprom_24_readPage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
     a32:	10 e0       	ldi	r17, 0x00	; 0
     a34:	05 c0       	rjmp	.+10     	; 0xa40 <Eeprom_24_readPage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     a36:	12 e0       	ldi	r17, 0x02	; 2
     a38:	03 c0       	rjmp	.+6      	; 0xa40 <Eeprom_24_readPage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     a3a:	14 e0       	ldi	r17, 0x04	; 4
     a3c:	01 c0       	rjmp	.+2      	; 0xa40 <Eeprom_24_readPage+0x60>
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     a3e:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
     a40:	81 2f       	mov	r24, r17
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	08 95       	ret

00000a52 <Eeprom_24_writePacket>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Multiple data bytes to a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
     a52:	6f 92       	push	r6
     a54:	7f 92       	push	r7
     a56:	8f 92       	push	r8
     a58:	9f 92       	push	r9
     a5a:	af 92       	push	r10
     a5c:	bf 92       	push	r11
     a5e:	cf 92       	push	r12
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	00 d0       	rcall	.+0      	; 0xa70 <Eeprom_24_writePacket+0x1e>
     a70:	cd b7       	in	r28, 0x3d	; 61
     a72:	de b7       	in	r29, 0x3e	; 62
     a74:	5c 01       	movw	r10, r24
     a76:	6b 01       	movw	r12, r22
     a78:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     a7a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <genu_eepromModuleState>
     a7e:	83 30       	cpi	r24, 0x03	; 3
     a80:	09 f0       	breq	.+2      	; 0xa84 <Eeprom_24_writePacket+0x32>
     a82:	a1 c0       	rjmp	.+322    	; 0xbc6 <Eeprom_24_writePacket+0x174>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     a84:	67 2b       	or	r22, r23
     a86:	09 f4       	brne	.+2      	; 0xa8a <Eeprom_24_writePacket+0x38>
     a88:	a0 c0       	rjmp	.+320    	; 0xbca <Eeprom_24_writePacket+0x178>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     a8a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
     a8c:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     a8e:	a5 01       	movw	r20, r10
     a90:	be 01       	movw	r22, r28
     a92:	6e 5f       	subi	r22, 0xFE	; 254
     a94:	7f 4f       	sbci	r23, 0xFF	; 255
     a96:	ce 01       	movw	r24, r28
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	0e 94 1c 04 	call	0x838	; 0x838 <EEPROM_getAddresses>
     a9e:	18 2f       	mov	r17, r24
     aa0:	81 30       	cpi	r24, 0x01	; 1
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <Eeprom_24_writePacket+0x54>
     aa4:	94 c0       	rjmp	.+296    	; 0xbce <Eeprom_24_writePacket+0x17c>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & 0x7F0)>>4;
     aa6:	45 01       	movw	r8, r10
     aa8:	80 ef       	ldi	r24, 0xF0	; 240
     aaa:	88 22       	and	r8, r24
     aac:	87 e0       	ldi	r24, 0x07	; 7
     aae:	98 22       	and	r9, r24
     ab0:	96 94       	lsr	r9
     ab2:	87 94       	ror	r8
     ab4:	96 94       	lsr	r9
     ab6:	87 94       	ror	r8
     ab8:	96 94       	lsr	r9
     aba:	87 94       	ror	r8
     abc:	96 94       	lsr	r9
     abe:	87 94       	ror	r8
     ac0:	68 2c       	mov	r6, r8
	uint8_t u8_byteOffset = u16_location & 0x00F;
     ac2:	8a 2d       	mov	r24, r10
     ac4:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
     ac6:	51 f1       	breq	.+84     	; 0xb1c <Eeprom_24_writePacket+0xca>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
     ac8:	90 e1       	ldi	r25, 0x10	; 16
     aca:	a9 2e       	mov	r10, r25
     acc:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
     ace:	b1 2c       	mov	r11, r1
     ad0:	ea 14       	cp	r14, r10
     ad2:	fb 04       	cpc	r15, r11
     ad4:	58 f4       	brcc	.+22     	; 0xaec <Eeprom_24_writePacket+0x9a>
		{
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
     ad6:	97 01       	movw	r18, r14
     ad8:	a6 01       	movw	r20, r12
     ada:	6a 81       	ldd	r22, Y+2	; 0x02
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <I2C_MasterSendToLocation>
     ae2:	81 30       	cpi	r24, 0x01	; 1
     ae4:	09 f4       	brne	.+2      	; 0xae8 <Eeprom_24_writePacket+0x96>
     ae6:	7c c0       	rjmp	.+248    	; 0xbe0 <Eeprom_24_writePacket+0x18e>
				return EEPROM_24_STATUS_ERROR_NOK;
     ae8:	10 e0       	ldi	r17, 0x00	; 0
     aea:	7a c0       	rjmp	.+244    	; 0xbe0 <Eeprom_24_writePacket+0x18e>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
     aec:	95 01       	movw	r18, r10
     aee:	a6 01       	movw	r20, r12
     af0:	6a 81       	ldd	r22, Y+2	; 0x02
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <I2C_MasterSendToLocation>
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	09 f0       	breq	.+2      	; 0xafe <Eeprom_24_writePacket+0xac>
     afc:	6a c0       	rjmp	.+212    	; 0xbd2 <Eeprom_24_writePacket+0x180>
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
     afe:	ea 18       	sub	r14, r10
     b00:	fb 08       	sbc	r15, r11
		i=1;
		Delay_ms(15);
     b02:	2f e0       	ldi	r18, 0x0F	; 15
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 9b 08 	call	0x1136	; 0x1136 <Delay_ms>
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
     b16:	77 24       	eor	r7, r7
     b18:	73 94       	inc	r7
     b1a:	03 c0       	rjmp	.+6      	; 0xb22 <Eeprom_24_writePacket+0xd0>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
     b1c:	71 2c       	mov	r7, r1
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
     b1e:	a1 2c       	mov	r10, r1
     b20:	b1 2c       	mov	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
     b22:	c7 01       	movw	r24, r14
     b24:	92 95       	swap	r25
     b26:	82 95       	swap	r24
     b28:	8f 70       	andi	r24, 0x0F	; 15
     b2a:	89 27       	eor	r24, r25
     b2c:	9f 70       	andi	r25, 0x0F	; 15
     b2e:	89 27       	eor	r24, r25
     b30:	08 2f       	mov	r16, r24
	while (pages_num > 0)
     b32:	1c c0       	rjmp	.+56     	; 0xb6c <Eeprom_24_writePacket+0x11a>
	{
		pages_num--;
     b34:	01 50       	subi	r16, 0x01	; 1
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
     b36:	b6 01       	movw	r22, r12
     b38:	6a 0d       	add	r22, r10
     b3a:	7b 1d       	adc	r23, r11
     b3c:	87 2d       	mov	r24, r7
     b3e:	86 0d       	add	r24, r6
     b40:	0e 94 b7 04 	call	0x96e	; 0x96e <Eeprom_24_writePage>
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	09 f0       	breq	.+2      	; 0xb4a <Eeprom_24_writePacket+0xf8>
     b48:	46 c0       	rjmp	.+140    	; 0xbd6 <Eeprom_24_writePacket+0x184>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
     b4a:	73 94       	inc	r7
		u16_dataLen -= 16;
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	e8 1a       	sub	r14, r24
     b50:	f1 08       	sbc	r15, r1
		u8_dataIndex += 16;
     b52:	80 e1       	ldi	r24, 0x10	; 16
     b54:	a8 0e       	add	r10, r24
     b56:	b1 1c       	adc	r11, r1
		Delay_ms(15);
     b58:	2f e0       	ldi	r18, 0x0F	; 15
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	50 e0       	ldi	r21, 0x00	; 0
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 9b 08 	call	0x1136	; 0x1136 <Delay_ms>
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
     b6c:	10 16       	cp	r1, r16
     b6e:	14 f3       	brlt	.-60     	; 0xb34 <Eeprom_24_writePacket+0xe2>
		u16_dataLen -= 16;
		u8_dataIndex += 16;
		Delay_ms(15);
	}
	
	if (u16_dataLen > 0)
     b70:	e1 14       	cp	r14, r1
     b72:	f1 04       	cpc	r15, r1
     b74:	a9 f1       	breq	.+106    	; 0xbe0 <Eeprom_24_writePacket+0x18e>
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << 4;
     b76:	a4 01       	movw	r20, r8
     b78:	47 0d       	add	r20, r7
     b7a:	51 1d       	adc	r21, r1
     b7c:	42 95       	swap	r20
     b7e:	52 95       	swap	r21
     b80:	50 7f       	andi	r21, 0xF0	; 240
     b82:	54 27       	eor	r21, r20
     b84:	40 7f       	andi	r20, 0xF0	; 240
     b86:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
     b88:	be 01       	movw	r22, r28
     b8a:	6e 5f       	subi	r22, 0xFE	; 254
     b8c:	7f 4f       	sbci	r23, 0xFF	; 255
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 1c 04 	call	0x838	; 0x838 <EEPROM_getAddresses>
     b96:	18 2f       	mov	r17, r24
     b98:	81 30       	cpi	r24, 0x01	; 1
     b9a:	f9 f4       	brne	.+62     	; 0xbda <Eeprom_24_writePacket+0x188>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
     b9c:	a6 01       	movw	r20, r12
     b9e:	4a 0d       	add	r20, r10
     ba0:	5b 1d       	adc	r21, r11
     ba2:	97 01       	movw	r18, r14
     ba4:	6a 81       	ldd	r22, Y+2	; 0x02
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <I2C_MasterSendToLocation>
     bac:	81 30       	cpi	r24, 0x01	; 1
     bae:	b9 f4       	brne	.+46     	; 0xbde <Eeprom_24_writePacket+0x18c>
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
     bb0:	2f e0       	ldi	r18, 0x0F	; 15
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e0       	ldi	r20, 0x00	; 0
     bb6:	50 e0       	ldi	r21, 0x00	; 0
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 9b 08 	call	0x1136	; 0x1136 <Delay_ms>
     bc4:	0d c0       	rjmp	.+26     	; 0xbe0 <Eeprom_24_writePacket+0x18e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     bc6:	12 e0       	ldi	r17, 0x02	; 2
     bc8:	0b c0       	rjmp	.+22     	; 0xbe0 <Eeprom_24_writePacket+0x18e>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     bca:	14 e0       	ldi	r17, 0x04	; 4
     bcc:	09 c0       	rjmp	.+18     	; 0xbe0 <Eeprom_24_writePacket+0x18e>
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     bce:	10 e0       	ldi	r17, 0x00	; 0
     bd0:	07 c0       	rjmp	.+14     	; 0xbe0 <Eeprom_24_writePacket+0x18e>
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     bd2:	10 e0       	ldi	r17, 0x00	; 0
     bd4:	05 c0       	rjmp	.+10     	; 0xbe0 <Eeprom_24_writePacket+0x18e>
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
	{
		pages_num--;
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     bd6:	10 e0       	ldi	r17, 0x00	; 0
     bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <Eeprom_24_writePacket+0x18e>
	
	if (u16_dataLen > 0)
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << 4;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     bda:	10 e0       	ldi	r17, 0x00	; 0
     bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <Eeprom_24_writePacket+0x18e>
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     bde:	10 e0       	ldi	r17, 0x00	; 0
		Delay_ms(15);
	}
	return EEPROM_24_STATUS_ERROR_OK;
}
     be0:	81 2f       	mov	r24, r17
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	df 90       	pop	r13
     bf4:	cf 90       	pop	r12
     bf6:	bf 90       	pop	r11
     bf8:	af 90       	pop	r10
     bfa:	9f 90       	pop	r9
     bfc:	8f 90       	pop	r8
     bfe:	7f 90       	pop	r7
     c00:	6f 90       	pop	r6
     c02:	08 95       	ret

00000c04 <Eeprom_24_readPacket>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read Multiple data bytes from a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
     c04:	6f 92       	push	r6
     c06:	7f 92       	push	r7
     c08:	8f 92       	push	r8
     c0a:	9f 92       	push	r9
     c0c:	af 92       	push	r10
     c0e:	bf 92       	push	r11
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	00 d0       	rcall	.+0      	; 0xc22 <Eeprom_24_readPacket+0x1e>
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	5c 01       	movw	r10, r24
     c28:	6b 01       	movw	r12, r22
     c2a:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
     c2c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <genu_eepromModuleState>
     c30:	83 30       	cpi	r24, 0x03	; 3
     c32:	09 f0       	breq	.+2      	; 0xc36 <Eeprom_24_readPacket+0x32>
     c34:	76 c0       	rjmp	.+236    	; 0xd22 <Eeprom_24_readPacket+0x11e>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
     c36:	67 2b       	or	r22, r23
     c38:	09 f4       	brne	.+2      	; 0xc3c <Eeprom_24_readPacket+0x38>
     c3a:	75 c0       	rjmp	.+234    	; 0xd26 <Eeprom_24_readPacket+0x122>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
     c3c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
     c3e:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t u16dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
     c40:	a5 01       	movw	r20, r10
     c42:	be 01       	movw	r22, r28
     c44:	6e 5f       	subi	r22, 0xFE	; 254
     c46:	7f 4f       	sbci	r23, 0xFF	; 255
     c48:	ce 01       	movw	r24, r28
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	0e 94 1c 04 	call	0x838	; 0x838 <EEPROM_getAddresses>
     c50:	18 2f       	mov	r17, r24
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	09 f0       	breq	.+2      	; 0xc58 <Eeprom_24_readPacket+0x54>
     c56:	69 c0       	rjmp	.+210    	; 0xd2a <Eeprom_24_readPacket+0x126>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & 0x7F0)>>4;		//The first page to write in
     c58:	45 01       	movw	r8, r10
     c5a:	80 ef       	ldi	r24, 0xF0	; 240
     c5c:	88 22       	and	r8, r24
     c5e:	87 e0       	ldi	r24, 0x07	; 7
     c60:	98 22       	and	r9, r24
     c62:	96 94       	lsr	r9
     c64:	87 94       	ror	r8
     c66:	96 94       	lsr	r9
     c68:	87 94       	ror	r8
     c6a:	96 94       	lsr	r9
     c6c:	87 94       	ror	r8
     c6e:	96 94       	lsr	r9
     c70:	87 94       	ror	r8
     c72:	78 2c       	mov	r7, r8
	uint8_t u8_byteOffset = u16_location & 0x00F;
     c74:	8a 2d       	mov	r24, r10
     c76:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
     c78:	89 f0       	breq	.+34     	; 0xc9c <Eeprom_24_readPacket+0x98>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
     c7a:	90 e1       	ldi	r25, 0x10	; 16
     c7c:	a9 2e       	mov	r10, r25
     c7e:	a8 1a       	sub	r10, r24
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
     c80:	b1 2c       	mov	r11, r1
     c82:	95 01       	movw	r18, r10
     c84:	a6 01       	movw	r20, r12
     c86:	6a 81       	ldd	r22, Y+2	; 0x02
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <I2C_MasterReceiveFromLocation>
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	09 f0       	breq	.+2      	; 0xc94 <Eeprom_24_readPacket+0x90>
     c92:	4d c0       	rjmp	.+154    	; 0xd2e <Eeprom_24_readPacket+0x12a>
			return EEPROM_24_STATUS_ERROR_NOK;
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
     c94:	ea 18       	sub	r14, r10
     c96:	fb 08       	sbc	r15, r11
		i=1;
     c98:	01 e0       	ldi	r16, 0x01	; 1
     c9a:	03 c0       	rjmp	.+6      	; 0xca2 <Eeprom_24_readPacket+0x9e>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
     c9c:	00 e0       	ldi	r16, 0x00	; 0
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
     c9e:	a1 2c       	mov	r10, r1
     ca0:	b1 2c       	mov	r11, r1
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
     ca2:	c7 01       	movw	r24, r14
     ca4:	92 95       	swap	r25
     ca6:	82 95       	swap	r24
     ca8:	8f 70       	andi	r24, 0x0F	; 15
     caa:	89 27       	eor	r24, r25
     cac:	9f 70       	andi	r25, 0x0F	; 15
     cae:	89 27       	eor	r24, r25
	while (pages_num--)
     cb0:	11 c0       	rjmp	.+34     	; 0xcd4 <Eeprom_24_readPacket+0xd0>
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
     cb2:	b6 01       	movw	r22, r12
     cb4:	6a 0d       	add	r22, r10
     cb6:	7b 1d       	adc	r23, r11
     cb8:	80 2f       	mov	r24, r16
     cba:	87 0d       	add	r24, r7
     cbc:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <Eeprom_24_readPage>
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	b9 f5       	brne	.+110    	; 0xd32 <Eeprom_24_readPacket+0x12e>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
     cc4:	0f 5f       	subi	r16, 0xFF	; 255
		u16_dataLen -= 16;
     cc6:	80 e1       	ldi	r24, 0x10	; 16
     cc8:	e8 1a       	sub	r14, r24
     cca:	f1 08       	sbc	r15, r1
		u16dataIndex += 16;
     ccc:	80 e1       	ldi	r24, 0x10	; 16
     cce:	a8 0e       	add	r10, r24
     cd0:	b1 1c       	adc	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
     cd2:	86 2d       	mov	r24, r6
     cd4:	66 24       	eor	r6, r6
     cd6:	6a 94       	dec	r6
     cd8:	68 0e       	add	r6, r24
     cda:	81 11       	cpse	r24, r1
     cdc:	ea cf       	rjmp	.-44     	; 0xcb2 <Eeprom_24_readPacket+0xae>
		i++;
		u16_dataLen -= 16;
		u16dataIndex += 16;
	}

	if (u16_dataLen > 0)
     cde:	e1 14       	cp	r14, r1
     ce0:	f1 04       	cpc	r15, r1
     ce2:	51 f1       	breq	.+84     	; 0xd38 <Eeprom_24_readPacket+0x134>
	{
		uint16_t new_location = (u8_pageStart + i) << 4;
     ce4:	a4 01       	movw	r20, r8
     ce6:	40 0f       	add	r20, r16
     ce8:	51 1d       	adc	r21, r1
     cea:	42 95       	swap	r20
     cec:	52 95       	swap	r21
     cee:	50 7f       	andi	r21, 0xF0	; 240
     cf0:	54 27       	eor	r21, r20
     cf2:	40 7f       	andi	r20, 0xF0	; 240
     cf4:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
     cf6:	be 01       	movw	r22, r28
     cf8:	6e 5f       	subi	r22, 0xFE	; 254
     cfa:	7f 4f       	sbci	r23, 0xFF	; 255
     cfc:	ce 01       	movw	r24, r28
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	0e 94 1c 04 	call	0x838	; 0x838 <EEPROM_getAddresses>
     d04:	18 2f       	mov	r17, r24
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	b1 f4       	brne	.+44     	; 0xd36 <Eeprom_24_readPacket+0x132>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
     d0a:	a6 01       	movw	r20, r12
     d0c:	4a 0d       	add	r20, r10
     d0e:	5b 1d       	adc	r21, r11
     d10:	97 01       	movw	r18, r14
     d12:	6a 81       	ldd	r22, Y+2	; 0x02
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	0e 94 56 0e 	call	0x1cac	; 0x1cac <I2C_MasterReceiveFromLocation>
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	69 f0       	breq	.+26     	; 0xd38 <Eeprom_24_readPacket+0x134>
			return EEPROM_24_STATUS_ERROR_NOK;
     d1e:	10 e0       	ldi	r17, 0x00	; 0
     d20:	0b c0       	rjmp	.+22     	; 0xd38 <Eeprom_24_readPacket+0x134>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
     d22:	12 e0       	ldi	r17, 0x02	; 2
     d24:	09 c0       	rjmp	.+18     	; 0xd38 <Eeprom_24_readPacket+0x134>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
     d26:	14 e0       	ldi	r17, 0x04	; 4
     d28:	07 c0       	rjmp	.+14     	; 0xd38 <Eeprom_24_readPacket+0x134>
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
     d2a:	10 e0       	ldi	r17, 0x00	; 0
     d2c:	05 c0       	rjmp	.+10     	; 0xd38 <Eeprom_24_readPacket+0x134>
	
	if(u8_byteOffset != 0)
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     d2e:	10 e0       	ldi	r17, 0x00	; 0
     d30:	03 c0       	rjmp	.+6      	; 0xd38 <Eeprom_24_readPacket+0x134>
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     d32:	10 e0       	ldi	r17, 0x00	; 0
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <Eeprom_24_readPacket+0x134>

	if (u16_dataLen > 0)
	{
		uint16_t new_location = (u8_pageStart + i) << 4;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
     d36:	10 e0       	ldi	r17, 0x00	; 0
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
	return EEPROM_24_STATUS_ERROR_OK;
     d38:	81 2f       	mov	r24, r17
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	ff 90       	pop	r15
     d48:	ef 90       	pop	r14
     d4a:	df 90       	pop	r13
     d4c:	cf 90       	pop	r12
     d4e:	bf 90       	pop	r11
     d50:	af 90       	pop	r10
     d52:	9f 90       	pop	r9
     d54:	8f 90       	pop	r8
     d56:	7f 90       	pop	r7
     d58:	6f 90       	pop	r6
     d5a:	08 95       	ret

00000d5c <Keypad_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is already initialized */
	if (genu_KeypadModuleState == KEYPAD_STATUS_INIT)
     d5c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <genu_KeypadModuleState>
     d60:	85 30       	cpi	r24, 0x05	; 5
     d62:	71 f0       	breq	.+28     	; 0xd80 <Keypad_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
     d64:	80 e7       	ldi	r24, 0x70	; 112
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 2b 09 	call	0x1256	; 0x1256 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	11 f0       	breq	.+4      	; 0xd74 <Keypad_init+0x18>
     d70:	87 30       	cpi	r24, 0x07	; 7
     d72:	29 f4       	brne	.+10     	; 0xd7e <Keypad_init+0x22>
		return KEYPAD_STATUS_ERROR_NOK;
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
     d74:	85 e0       	ldi	r24, 0x05	; 5
     d76:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <genu_KeypadModuleState>
	return KEYPAD_STATUS_ERROR_OK;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return KEYPAD_STATUS_ERROR_NOK;
     d7e:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
	return KEYPAD_STATUS_ERROR_OK;
}
     d80:	08 95       	ret

00000d82 <Lcd_WriteData>:
static enuLcd_Status_t genu_LcdModuleState = LCD_STATUS_NOT_INIT;
// static uint8_t gu8_currentColumn = 0;
// static uint8_t gu8_currentRow = 0;

static void Lcd_WriteData(uint8_t u8_Data)
{
     d82:	cf 93       	push	r28
     d84:	c8 2f       	mov	r28, r24
	(u8_Data & 0x1)!=0 ? Dio_writePin(LCD_D4,PIN_HIGH) : Dio_writePin(LCD_D4,PIN_LOW);
     d86:	80 ff       	sbrs	r24, 0
     d88:	05 c0       	rjmp	.+10     	; 0xd94 <Lcd_WriteData+0x12>
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	8a e0       	ldi	r24, 0x0A	; 10
     d8e:	0e 94 19 0a 	call	0x1432	; 0x1432 <Dio_writePin>
     d92:	04 c0       	rjmp	.+8      	; 0xd9c <Lcd_WriteData+0x1a>
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	8a e0       	ldi	r24, 0x0A	; 10
     d98:	0e 94 19 0a 	call	0x1432	; 0x1432 <Dio_writePin>
	(u8_Data & 0x2)!=0 ? Dio_writePin(LCD_D5,PIN_HIGH) : Dio_writePin(LCD_D5,PIN_LOW);
     d9c:	c1 ff       	sbrs	r28, 1
     d9e:	05 c0       	rjmp	.+10     	; 0xdaa <Lcd_WriteData+0x28>
     da0:	61 e0       	ldi	r22, 0x01	; 1
     da2:	8b e0       	ldi	r24, 0x0B	; 11
     da4:	0e 94 19 0a 	call	0x1432	; 0x1432 <Dio_writePin>
     da8:	04 c0       	rjmp	.+8      	; 0xdb2 <Lcd_WriteData+0x30>
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	8b e0       	ldi	r24, 0x0B	; 11
     dae:	0e 94 19 0a 	call	0x1432	; 0x1432 <Dio_writePin>
	(u8_Data & 0x4)!=0 ? Dio_writePin(LCD_D6,PIN_HIGH) : Dio_writePin(LCD_D6,PIN_LOW);
     db2:	c2 ff       	sbrs	r28, 2
     db4:	05 c0       	rjmp	.+10     	; 0xdc0 <Lcd_WriteData+0x3e>
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	8c e0       	ldi	r24, 0x0C	; 12
     dba:	0e 94 19 0a 	call	0x1432	; 0x1432 <Dio_writePin>
     dbe:	04 c0       	rjmp	.+8      	; 0xdc8 <Lcd_WriteData+0x46>
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	8c e0       	ldi	r24, 0x0C	; 12
     dc4:	0e 94 19 0a 	call	0x1432	; 0x1432 <Dio_writePin>
	(u8_Data & 0x8)!=0 ? Dio_writePin(LCD_D7,PIN_HIGH) : Dio_writePin(LCD_D7,PIN_LOW);
     dc8:	c3 ff       	sbrs	r28, 3
     dca:	05 c0       	rjmp	.+10     	; 0xdd6 <Lcd_WriteData+0x54>
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	8d e0       	ldi	r24, 0x0D	; 13
     dd0:	0e 94 19 0a 	call	0x1432	; 0x1432 <Dio_writePin>
     dd4:	04 c0       	rjmp	.+8      	; 0xdde <Lcd_WriteData+0x5c>
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	8d e0       	ldi	r24, 0x0D	; 13
     dda:	0e 94 19 0a 	call	0x1432	; 0x1432 <Dio_writePin>
}
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <Lcd_EnableToggle>:
static void Lcd_EnableToggle(void)
{
	ENABLE;
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	89 e0       	ldi	r24, 0x09	; 9
     de6:	0e 94 19 0a 	call	0x1432	; 0x1432 <Dio_writePin>
	Delay_ms(1);
     dea:	21 e0       	ldi	r18, 0x01	; 1
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 9b 08 	call	0x1136	; 0x1136 <Delay_ms>
	DISABLE;
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	89 e0       	ldi	r24, 0x09	; 9
     e02:	0e 94 19 0a 	call	0x1432	; 0x1432 <Dio_writePin>
     e06:	08 95       	ret

00000e08 <Lcd_sendCommand>:
* Parameters (out): None
* Return value: enuLcd_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send a Command to the LCD.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLcd_Status_t Lcd_sendCommand(uint8_t u8_command)
{
     e08:	cf 93       	push	r28
     e0a:	c8 2f       	mov	r28, r24
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	
	CMD;
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	87 e0       	ldi	r24, 0x07	; 7
     e10:	0e 94 19 0a 	call	0x1432	; 0x1432 <Dio_writePin>
	Lcd_WriteData((u8_command & 0xF0)>>4); 
     e14:	8c 2f       	mov	r24, r28
     e16:	82 95       	swap	r24
     e18:	8f 70       	andi	r24, 0x0F	; 15
     e1a:	0e 94 c1 06 	call	0xd82	; 0xd82 <Lcd_WriteData>
	Lcd_EnableToggle();
     e1e:	0e 94 f1 06 	call	0xde2	; 0xde2 <Lcd_EnableToggle>
	Lcd_WriteData(u8_command & 0x0F);
     e22:	8c 2f       	mov	r24, r28
     e24:	8f 70       	andi	r24, 0x0F	; 15
     e26:	0e 94 c1 06 	call	0xd82	; 0xd82 <Lcd_WriteData>
	Lcd_EnableToggle();
     e2a:	0e 94 f1 06 	call	0xde2	; 0xde2 <Lcd_EnableToggle>
				
	return LCD_STATUS_ERROR_OK;
}
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	cf 91       	pop	r28
     e32:	08 95       	ret

00000e34 <Lcd_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Lcd module is already initialized */
	if (genu_LcdModuleState == LCD_STATUS_INIT)
     e34:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <genu_LcdModuleState>
     e38:	86 30       	cpi	r24, 0x06	; 6
     e3a:	59 f1       	breq	.+86     	; 0xe92 <Lcd_init+0x5e>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
     e3c:	80 e7       	ldi	r24, 0x70	; 112
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 2b 09 	call	0x1256	; 0x1256 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	11 f0       	breq	.+4      	; 0xe4c <Lcd_init+0x18>
     e48:	87 30       	cpi	r24, 0x07	; 7
     e4a:	11 f5       	brne	.+68     	; 0xe90 <Lcd_init+0x5c>
		return LCD_STATUS_ERROR_NOK;
	
	CMD;
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	87 e0       	ldi	r24, 0x07	; 7
     e50:	0e 94 19 0a 	call	0x1432	; 0x1432 <Dio_writePin>
	DISABLE;
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	89 e0       	ldi	r24, 0x09	; 9
     e58:	0e 94 19 0a 	call	0x1432	; 0x1432 <Dio_writePin>
	
	Lcd_sendCommand(0x33);
     e5c:	83 e3       	ldi	r24, 0x33	; 51
     e5e:	0e 94 04 07 	call	0xe08	; 0xe08 <Lcd_sendCommand>
	Lcd_sendCommand(0x32);
     e62:	82 e3       	ldi	r24, 0x32	; 50
     e64:	0e 94 04 07 	call	0xe08	; 0xe08 <Lcd_sendCommand>
	Lcd_sendCommand(0x28);
     e68:	88 e2       	ldi	r24, 0x28	; 40
     e6a:	0e 94 04 07 	call	0xe08	; 0xe08 <Lcd_sendCommand>
	Lcd_sendCommand(0x08);
     e6e:	88 e0       	ldi	r24, 0x08	; 8
     e70:	0e 94 04 07 	call	0xe08	; 0xe08 <Lcd_sendCommand>
	Lcd_sendCommand(0x01);
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	0e 94 04 07 	call	0xe08	; 0xe08 <Lcd_sendCommand>
	Lcd_sendCommand(0x06);
     e7a:	86 e0       	ldi	r24, 0x06	; 6
     e7c:	0e 94 04 07 	call	0xe08	; 0xe08 <Lcd_sendCommand>
	Lcd_sendCommand(0x0C);
     e80:	8c e0       	ldi	r24, 0x0C	; 12
     e82:	0e 94 04 07 	call	0xe08	; 0xe08 <Lcd_sendCommand>
	
	/* Change the state of the Lcd module to Initialized */
	genu_LcdModuleState = LCD_STATUS_INIT;
     e86:	86 e0       	ldi	r24, 0x06	; 6
     e88:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <genu_LcdModuleState>
	return LCD_STATUS_ERROR_OK;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return LCD_STATUS_ERROR_NOK;
     e90:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_sendCommand(0x0C);
	
	/* Change the state of the Lcd module to Initialized */
	genu_LcdModuleState = LCD_STATUS_INIT;
	return LCD_STATUS_ERROR_OK;
}
     e92:	08 95       	ret

00000e94 <Lcd_setCursor>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Lcd module is not initialized */
	if (genu_LcdModuleState != LCD_STATUS_INIT)
     e94:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <genu_LcdModuleState>
     e98:	96 30       	cpi	r25, 0x06	; 6
     e9a:	89 f4       	brne	.+34     	; 0xebe <Lcd_setCursor+0x2a>
	{
		return LCD_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the Row index is out of range */
	if(u8_Row > LCD_ROWS_NUM)
     e9c:	83 30       	cpi	r24, 0x03	; 3
     e9e:	88 f4       	brcc	.+34     	; 0xec2 <Lcd_setCursor+0x2e>
	{
		return LCD_STATUS_ERROR_ROW_INVALID;
	}else{/*Nothing to here*/}
	/* Check if the Column index is out of range */
	if(u8_Column > LCD_COLUMNS_NUM)
     ea0:	61 31       	cpi	r22, 0x11	; 17
     ea2:	88 f4       	brcc	.+34     	; 0xec6 <Lcd_setCursor+0x32>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	    uint8_t u8_Command=0x00;
		u8_Command = LCD_ROW_1_INDEX + u8_Row*0x40 + u8_Column;
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	2e 5f       	subi	r18, 0xFE	; 254
     eaa:	3f 4f       	sbci	r19, 0xFF	; 255
	    Lcd_sendCommand(u8_Command);
     eac:	86 2f       	mov	r24, r22
     eae:	90 e4       	ldi	r25, 0x40	; 64
     eb0:	29 9f       	mul	r18, r25
     eb2:	80 0d       	add	r24, r0
     eb4:	11 24       	eor	r1, r1
     eb6:	0e 94 04 07 	call	0xe08	; 0xe08 <Lcd_sendCommand>
		
	return LCD_STATUS_ERROR_OK;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Lcd module is not initialized */
	if (genu_LcdModuleState != LCD_STATUS_INIT)
	{
		return LCD_STATUS_NOT_INIT;
     ebe:	85 e0       	ldi	r24, 0x05	; 5
     ec0:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the Row index is out of range */
	if(u8_Row > LCD_ROWS_NUM)
	{
		return LCD_STATUS_ERROR_ROW_INVALID;
     ec2:	83 e0       	ldi	r24, 0x03	; 3
     ec4:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the Column index is out of range */
	if(u8_Column > LCD_COLUMNS_NUM)
	{
		return LCD_STATUS_ERROR_COL_INVALID;
     ec6:	82 e0       	ldi	r24, 0x02	; 2
	    uint8_t u8_Command=0x00;
		u8_Command = LCD_ROW_1_INDEX + u8_Row*0x40 + u8_Column;
	    Lcd_sendCommand(u8_Command);
		
	return LCD_STATUS_ERROR_OK;
}
     ec8:	08 95       	ret

00000eca <Lcd_printChar>:
* Parameters (out): None
* Return value: enuLcd_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print single character at the current position of the cursor in the LCD.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLcd_Status_t Lcd_printChar(uint8_t u8_data)
{
     eca:	cf 93       	push	r28
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Lcd module is not initialized */
	if (genu_LcdModuleState != LCD_STATUS_INIT)
     ecc:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <genu_LcdModuleState>
     ed0:	96 30       	cpi	r25, 0x06	; 6
     ed2:	a1 f4       	brne	.+40     	; 0xefc <Lcd_printChar+0x32>
     ed4:	c8 2f       	mov	r28, r24
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	DATA;             // => RS = 1
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	87 e0       	ldi	r24, 0x07	; 7
     eda:	0e 94 19 0a 	call	0x1432	; 0x1432 <Dio_writePin>
	Lcd_WriteData((u8_data & 0xF0)>>4);             //Data transfer
     ede:	8c 2f       	mov	r24, r28
     ee0:	82 95       	swap	r24
     ee2:	8f 70       	andi	r24, 0x0F	; 15
     ee4:	0e 94 c1 06 	call	0xd82	; 0xd82 <Lcd_WriteData>
	Lcd_EnableToggle();
     ee8:	0e 94 f1 06 	call	0xde2	; 0xde2 <Lcd_EnableToggle>
	Lcd_WriteData(u8_data & 0x0F);
     eec:	8c 2f       	mov	r24, r28
     eee:	8f 70       	andi	r24, 0x0F	; 15
     ef0:	0e 94 c1 06 	call	0xd82	; 0xd82 <Lcd_WriteData>
	Lcd_EnableToggle();
     ef4:	0e 94 f1 06 	call	0xde2	; 0xde2 <Lcd_EnableToggle>
		
	return LCD_STATUS_ERROR_OK;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	01 c0       	rjmp	.+2      	; 0xefe <Lcd_printChar+0x34>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Lcd module is not initialized */
	if (genu_LcdModuleState != LCD_STATUS_INIT)
	{
		return LCD_STATUS_NOT_INIT;
     efc:	85 e0       	ldi	r24, 0x05	; 5
	Lcd_EnableToggle();
	Lcd_WriteData(u8_data & 0x0F);
	Lcd_EnableToggle();
		
	return LCD_STATUS_ERROR_OK;
}
     efe:	cf 91       	pop	r28
     f00:	08 95       	ret

00000f02 <Lcd_printString>:
* Parameters (out): None
* Return value: enuLcd_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print string at the current position of the cursor in the LCD.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLcd_Status_t Lcd_printString(uint8_t *pu8_data)
{
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	ec 01       	movw	r28, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Lcd module is not initialized */
	if (genu_LcdModuleState != LCD_STATUS_INIT)
     f08:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <genu_LcdModuleState>
     f0c:	86 30       	cpi	r24, 0x06	; 6
     f0e:	49 f4       	brne	.+18     	; 0xf22 <Lcd_printString+0x20>
     f10:	03 c0       	rjmp	.+6      	; 0xf18 <Lcd_printString+0x16>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	while (*pu8_data != '\0')
	{
		Lcd_printChar(*pu8_data++);
     f12:	21 96       	adiw	r28, 0x01	; 1
     f14:	0e 94 65 07 	call	0xeca	; 0xeca <Lcd_printChar>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	while (*pu8_data != '\0')
     f18:	88 81       	ld	r24, Y
     f1a:	81 11       	cpse	r24, r1
     f1c:	fa cf       	rjmp	.-12     	; 0xf12 <Lcd_printString+0x10>
	{
		Lcd_printChar(*pu8_data++);
	}
		
	return LCD_STATUS_ERROR_OK;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <Lcd_printString+0x22>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Lcd module is not initialized */
	if (genu_LcdModuleState != LCD_STATUS_INIT)
	{
		return LCD_STATUS_NOT_INIT;
     f22:	85 e0       	ldi	r24, 0x05	; 5
	{
		Lcd_printChar(*pu8_data++);
	}
		
	return LCD_STATUS_ERROR_OK;
}
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	08 95       	ret

00000f2a <LM35_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is already initialized */
	if (genu_LM35ModuleState == LM35_STATUS_INIT)
     f2a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <genu_LM35ModuleState>
     f2e:	85 30       	cpi	r24, 0x05	; 5
     f30:	51 f0       	breq	.+20     	; 0xf46 <LM35_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
     f32:	0e 94 4c 08 	call	0x1098	; 0x1098 <Adc_init>
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	29 f4       	brne	.+10     	; 0xf44 <LM35_init+0x1a>
		return LM35_STATUS_ERROR_NOK;
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
     f3a:	85 e0       	ldi	r24, 0x05	; 5
     f3c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <genu_LM35ModuleState>
	return LM35_STATUS_ERROR_OK;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
		return LM35_STATUS_ERROR_NOK;
     f44:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
	return LM35_STATUS_ERROR_OK;
}
     f46:	08 95       	ret

00000f48 <Motor_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
     f48:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <gu8_MotorModuleStatus>
     f4c:	86 30       	cpi	r24, 0x06	; 6
     f4e:	49 f0       	breq	.+18     	; 0xf62 <Motor_init+0x1a>
/**************************************************************************************/
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
     f50:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <SWPwm_Init>
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	39 f4       	brne	.+14     	; 0xf66 <Motor_init+0x1e>
		return MOTOR_STATUS_ERROR_NOK;
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
     f58:	86 e0       	ldi	r24, 0x06	; 6
     f5a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <gu8_MotorModuleStatus>
	return MOTOR_STATUS_ERROR_OK;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_INIT;
     f62:	86 e0       	ldi	r24, 0x06	; 6
     f64:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
		return MOTOR_STATUS_ERROR_NOK;
     f66:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
	return MOTOR_STATUS_ERROR_OK;
}
     f68:	08 95       	ret

00000f6a <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
     f6e:	c0 91 32 03 	lds	r28, 0x0332	; 0x800332 <gu8_counter>
     f72:	d0 e0       	ldi	r29, 0x00	; 0
     f74:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <Uart_DataRegister>
     f78:	cd 5c       	subi	r28, 0xCD	; 205
     f7a:	dc 4f       	sbci	r29, 0xFC	; 252
     f7c:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
     f7e:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <gu8_counter>
     f82:	e9 2f       	mov	r30, r25
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	ed 5c       	subi	r30, 0xCD	; 205
     f88:	fc 4f       	sbci	r31, 0xFC	; 252
     f8a:	80 81       	ld	r24, Z
     f8c:	8d 30       	cpi	r24, 0x0D	; 13
     f8e:	71 f4       	brne	.+28     	; 0xfac <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
     f90:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
     f94:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <gu8_counter>
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	ed 5c       	subi	r30, 0xCD	; 205
     f9c:	fc 4f       	sbci	r31, 0xFC	; 252
     f9e:	10 82       	st	Z, r1
		gu8_counter = 0;
     fa0:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <gu8_counter>
		gu8_flag = 1;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <gu8_flag>
     faa:	1d c0       	rjmp	.+58     	; 0xfe6 <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
     fac:	88 30       	cpi	r24, 0x08	; 8
     fae:	51 f4       	brne	.+20     	; 0xfc4 <Uart_RXC_ISR+0x5a>
     fb0:	99 23       	and	r25, r25
     fb2:	41 f0       	breq	.+16     	; 0xfc4 <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
     fb4:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Uart_sendByte>
		gu8_counter--;
     fb8:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <gu8_counter>
     fbc:	81 50       	subi	r24, 0x01	; 1
     fbe:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <gu8_counter>
     fc2:	11 c0       	rjmp	.+34     	; 0xfe6 <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
     fc4:	88 30       	cpi	r24, 0x08	; 8
     fc6:	79 f0       	breq	.+30     	; 0xfe6 <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
     fc8:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <gu8_visibility>
     fcc:	91 30       	cpi	r25, 0x01	; 1
     fce:	21 f4       	brne	.+8      	; 0xfd8 <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
     fd0:	8a e2       	ldi	r24, 0x2A	; 42
     fd2:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Uart_sendByte>
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
     fd8:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Uart_sendByte>
		}
		gu8_counter++;
     fdc:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <gu8_counter>
     fe0:	8f 5f       	subi	r24, 0xFF	; 255
     fe2:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <gu8_counter>
	}
}
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
     fec:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <genu_TerminalModuleState>
     ff0:	83 30       	cpi	r24, 0x03	; 3
     ff2:	81 f0       	breq	.+32     	; 0x1014 <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
     ff4:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	11 f0       	breq	.+4      	; 0x1000 <Terminal_init+0x14>
     ffc:	87 30       	cpi	r24, 0x07	; 7
     ffe:	49 f4       	brne	.+18     	; 0x1012 <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
    1000:	85 eb       	ldi	r24, 0xB5	; 181
    1002:	97 e0       	ldi	r25, 0x07	; 7
    1004:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
    1012:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
    1014:	08 95       	ret

00001016 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	81 f0       	breq	.+32     	; 0x103e <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    101e:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <genu_TerminalModuleState>
    1022:	22 30       	cpi	r18, 0x02	; 2
    1024:	79 f0       	breq	.+30     	; 0x1044 <Terminal_Out+0x2e>
    1026:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
    1028:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <stringLength>
    102c:	68 2f       	mov	r22, r24
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	ce 01       	movw	r24, r28
    1032:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	21 f0       	breq	.+8      	; 0x1042 <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	03 c0       	rjmp	.+6      	; 0x1044 <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    103e:	24 e0       	ldi	r18, 0x04	; 4
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
    1042:	21 e0       	ldi	r18, 0x01	; 1
}
    1044:	82 2f       	mov	r24, r18
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
    104c:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
    104e:	89 2b       	or	r24, r25
    1050:	a1 f0       	breq	.+40     	; 0x107a <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    1052:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <genu_TerminalModuleState>
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	99 f0       	breq	.+38     	; 0x1080 <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
    105a:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <gu8_flag>
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	71 f4       	brne	.+28     	; 0x107e <Terminal_In+0x32>
	{
		gu8_flag = 0;
    1062:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
    1066:	83 e3       	ldi	r24, 0x33	; 51
    1068:	93 e0       	ldi	r25, 0x03	; 3
    106a:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <stringCopy>
		EmptyString(gau8_data);
    106e:	83 e3       	ldi	r24, 0x33	; 51
    1070:	93 e0       	ldi	r25, 0x03	; 3
    1072:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
    1076:	85 e0       	ldi	r24, 0x05	; 5
    1078:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    107a:	84 e0       	ldi	r24, 0x04	; 4
    107c:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
    107e:	81 e0       	ldi	r24, 0x01	; 1
}
    1080:	08 95       	ret

00001082 <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
    1088:	08 95       	ret

0000108a <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
    108a:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	08 95       	ret

00001092 <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
    1092:	0e 94 0f 04 	call	0x81e	; 0x81e <App_start>
    1096:	ff cf       	rjmp	.-2      	; 0x1096 <main+0x4>

00001098 <Adc_init>:
		f32_Resolution = (1000*ADC_AREF_VALUE)/ADC_STEPS_NUM;
	}
	*pu32_data = u16_Result*f32_Resolution;
		
	return ADC_STATUS_ERROR_OK;
}
    1098:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <genuAdc_Status>
    109c:	87 30       	cpi	r24, 0x07	; 7
    109e:	11 f1       	breq	.+68     	; 0x10e4 <Adc_init+0x4c>
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	13 c0       	rjmp	.+38     	; 0x10ca <Adc_init+0x32>
    10a4:	3b b3       	in	r19, 0x1b	; 27
    10a6:	e2 2f       	mov	r30, r18
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	ee 0f       	add	r30, r30
    10ac:	ff 1f       	adc	r31, r31
    10ae:	e2 59       	subi	r30, 0x92	; 146
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	00 80       	ld	r0, Z
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <Adc_init+0x26>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <Adc_init+0x22>
    10c2:	80 95       	com	r24
    10c4:	83 23       	and	r24, r19
    10c6:	8b bb       	out	0x1b, r24	; 27
    10c8:	2f 5f       	subi	r18, 0xFF	; 255
    10ca:	22 23       	and	r18, r18
    10cc:	59 f3       	breq	.-42     	; 0x10a4 <Adc_init+0xc>
    10ce:	97 e0       	ldi	r25, 0x07	; 7
    10d0:	96 b9       	out	0x06, r25	; 6
    10d2:	86 b1       	in	r24, 0x06	; 6
    10d4:	8f 7d       	andi	r24, 0xDF	; 223
    10d6:	86 b9       	out	0x06, r24	; 6
    10d8:	86 b1       	in	r24, 0x06	; 6
    10da:	86 b9       	out	0x06, r24	; 6
    10dc:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <genuAdc_Status>
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	08 95       	ret
    10e4:	88 e0       	ldi	r24, 0x08	; 8
    10e6:	08 95       	ret

000010e8 <__vector_16>:

ISR(ADC_IRQ)
{
    10e8:	1f 92       	push	r1
    10ea:	0f 92       	push	r0
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	0f 92       	push	r0
    10f0:	11 24       	eor	r1, r1
    10f2:	2f 93       	push	r18
    10f4:	3f 93       	push	r19
    10f6:	4f 93       	push	r20
    10f8:	5f 93       	push	r21
    10fa:	6f 93       	push	r22
    10fc:	7f 93       	push	r23
    10fe:	8f 93       	push	r24
    1100:	9f 93       	push	r25
    1102:	af 93       	push	r26
    1104:	bf 93       	push	r27
    1106:	ef 93       	push	r30
    1108:	ff 93       	push	r31
	(*ADC_CallBackPtr)();
    110a:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <ADC_CallBackPtr>
    110e:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <ADC_CallBackPtr+0x1>
    1112:	09 95       	icall
    1114:	ff 91       	pop	r31
    1116:	ef 91       	pop	r30
    1118:	bf 91       	pop	r27
    111a:	af 91       	pop	r26
    111c:	9f 91       	pop	r25
    111e:	8f 91       	pop	r24
    1120:	7f 91       	pop	r23
    1122:	6f 91       	pop	r22
    1124:	5f 91       	pop	r21
    1126:	4f 91       	pop	r20
    1128:	3f 91       	pop	r19
    112a:	2f 91       	pop	r18
    112c:	0f 90       	pop	r0
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	0f 90       	pop	r0
    1132:	1f 90       	pop	r1
    1134:	18 95       	reti

00001136 <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
    1136:	2f 92       	push	r2
    1138:	3f 92       	push	r3
    113a:	4f 92       	push	r4
    113c:	5f 92       	push	r5
    113e:	6f 92       	push	r6
    1140:	7f 92       	push	r7
    1142:	8f 92       	push	r8
    1144:	9f 92       	push	r9
    1146:	af 92       	push	r10
    1148:	bf 92       	push	r11
    114a:	cf 92       	push	r12
    114c:	df 92       	push	r13
    114e:	ef 92       	push	r14
    1150:	ff 92       	push	r15
    1152:	0f 93       	push	r16
    1154:	1f 93       	push	r17
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	00 d0       	rcall	.+0      	; 0x115c <Delay_ms+0x26>
    115c:	00 d0       	rcall	.+0      	; 0x115e <Delay_ms+0x28>
    115e:	1f 92       	push	r1
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	22 2e       	mov	r2, r18
    1166:	33 2e       	mov	r3, r19
    1168:	44 2e       	mov	r4, r20
    116a:	55 2e       	mov	r5, r21
    116c:	66 2e       	mov	r6, r22
    116e:	79 83       	std	Y+1, r23	; 0x01
    1170:	8a 83       	std	Y+2, r24	; 0x02
    1172:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    1174:	91 2c       	mov	r9, r1
    1176:	1d 82       	std	Y+5, r1	; 0x05
    1178:	1c 82       	std	Y+4, r1	; 0x04
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	e0 e0       	ldi	r30, 0x00	; 0
    1180:	71 2c       	mov	r7, r1
    1182:	81 2c       	mov	r8, r1
    1184:	3d c0       	rjmp	.+122    	; 0x1200 <Delay_ms+0xca>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
    1186:	2c 2d       	mov	r18, r12
    1188:	3d 2d       	mov	r19, r13
    118a:	4e 2d       	mov	r20, r14
    118c:	5f 2d       	mov	r21, r15
    118e:	60 2f       	mov	r22, r16
    1190:	71 2f       	mov	r23, r17
    1192:	8a 2d       	mov	r24, r10
    1194:	9b 2d       	mov	r25, r11
    1196:	a1 e0       	ldi	r26, 0x01	; 1
    1198:	0e 94 24 10 	call	0x2048	; 0x2048 <__adddi3_s8>
    119c:	c2 2e       	mov	r12, r18
    119e:	d3 2e       	mov	r13, r19
    11a0:	e4 2e       	mov	r14, r20
    11a2:	f5 2e       	mov	r15, r21
    11a4:	06 2f       	mov	r16, r22
    11a6:	17 2f       	mov	r17, r23
    11a8:	a8 2e       	mov	r10, r24
    11aa:	b9 2e       	mov	r11, r25
    11ac:	08 c0       	rjmp	.+16     	; 0x11be <Delay_ms+0x88>
    11ae:	c1 2c       	mov	r12, r1
    11b0:	d1 2c       	mov	r13, r1
    11b2:	e1 2c       	mov	r14, r1
    11b4:	f1 2c       	mov	r15, r1
    11b6:	00 e0       	ldi	r16, 0x00	; 0
    11b8:	10 e0       	ldi	r17, 0x00	; 0
    11ba:	a1 2c       	mov	r10, r1
    11bc:	b1 2c       	mov	r11, r1
    11be:	2c 2d       	mov	r18, r12
    11c0:	3d 2d       	mov	r19, r13
    11c2:	4e 2d       	mov	r20, r14
    11c4:	5f 2d       	mov	r21, r15
    11c6:	60 2f       	mov	r22, r16
    11c8:	71 2f       	mov	r23, r17
    11ca:	8a 2d       	mov	r24, r10
    11cc:	9b 2d       	mov	r25, r11
    11ce:	ac e0       	ldi	r26, 0x0C	; 12
    11d0:	0e 94 39 10 	call	0x2072	; 0x2072 <__cmpdi2_s8>
    11d4:	c1 f2       	breq	.-80     	; 0x1186 <Delay_ms+0x50>
    11d6:	b8 f2       	brcs	.-82     	; 0x1186 <Delay_ms+0x50>
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    11da:	29 2d       	mov	r18, r9
    11dc:	3d 81       	ldd	r19, Y+5	; 0x05
    11de:	48 2f       	mov	r20, r24
    11e0:	5b 2f       	mov	r21, r27
    11e2:	6f 2f       	mov	r22, r31
    11e4:	7e 2f       	mov	r23, r30
    11e6:	87 2d       	mov	r24, r7
    11e8:	98 2d       	mov	r25, r8
    11ea:	a1 e0       	ldi	r26, 0x01	; 1
    11ec:	0e 94 24 10 	call	0x2048	; 0x2048 <__adddi3_s8>
    11f0:	92 2e       	mov	r9, r18
    11f2:	3d 83       	std	Y+5, r19	; 0x05
    11f4:	4c 83       	std	Y+4, r20	; 0x04
    11f6:	b5 2f       	mov	r27, r21
    11f8:	f6 2f       	mov	r31, r22
    11fa:	e7 2f       	mov	r30, r23
    11fc:	78 2e       	mov	r7, r24
    11fe:	89 2e       	mov	r8, r25
    1200:	29 2d       	mov	r18, r9
    1202:	3d 81       	ldd	r19, Y+5	; 0x05
    1204:	4c 81       	ldd	r20, Y+4	; 0x04
    1206:	5b 2f       	mov	r21, r27
    1208:	6f 2f       	mov	r22, r31
    120a:	7e 2f       	mov	r23, r30
    120c:	87 2d       	mov	r24, r7
    120e:	98 2d       	mov	r25, r8
    1210:	a2 2c       	mov	r10, r2
    1212:	b3 2c       	mov	r11, r3
    1214:	c4 2c       	mov	r12, r4
    1216:	d5 2c       	mov	r13, r5
    1218:	e6 2c       	mov	r14, r6
    121a:	f9 80       	ldd	r15, Y+1	; 0x01
    121c:	0a 81       	ldd	r16, Y+2	; 0x02
    121e:	1b 81       	ldd	r17, Y+3	; 0x03
    1220:	0e 94 30 10 	call	0x2060	; 0x2060 <__cmpdi2>
    1224:	20 f2       	brcs	.-120    	; 0x11ae <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	ff 90       	pop	r15
    123a:	ef 90       	pop	r14
    123c:	df 90       	pop	r13
    123e:	cf 90       	pop	r12
    1240:	bf 90       	pop	r11
    1242:	af 90       	pop	r10
    1244:	9f 90       	pop	r9
    1246:	8f 90       	pop	r8
    1248:	7f 90       	pop	r7
    124a:	6f 90       	pop	r6
    124c:	5f 90       	pop	r5
    124e:	4f 90       	pop	r4
    1250:	3f 90       	pop	r3
    1252:	2f 90       	pop	r2
    1254:	08 95       	ret

00001256 <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
    1256:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
    1258:	89 2b       	or	r24, r25
    125a:	09 f4       	brne	.+2      	; 0x125e <Dio_init+0x8>
    125c:	e4 c0       	rjmp	.+456    	; 0x1426 <Dio_init+0x1d0>
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	d7 c0       	rjmp	.+430    	; 0x1410 <Dio_init+0x1ba>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
    1262:	e9 2f       	mov	r30, r25
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	ee 0f       	add	r30, r30
    1268:	ff 1f       	adc	r31, r31
    126a:	ee 0f       	add	r30, r30
    126c:	ff 1f       	adc	r31, r31
    126e:	e4 0f       	add	r30, r20
    1270:	f5 1f       	adc	r31, r21
    1272:	31 81       	ldd	r19, Z+1	; 0x01
    1274:	38 30       	cpi	r19, 0x08	; 8
    1276:	08 f0       	brcs	.+2      	; 0x127a <Dio_init+0x24>
    1278:	d8 c0       	rjmp	.+432    	; 0x142a <Dio_init+0x1d4>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
    127a:	20 81       	ld	r18, Z
    127c:	21 30       	cpi	r18, 0x01	; 1
    127e:	c1 f1       	breq	.+112    	; 0x12f0 <Dio_init+0x9a>
    1280:	38 f0       	brcs	.+14     	; 0x1290 <Dio_init+0x3a>
    1282:	22 30       	cpi	r18, 0x02	; 2
    1284:	09 f4       	brne	.+2      	; 0x1288 <Dio_init+0x32>
    1286:	64 c0       	rjmp	.+200    	; 0x1350 <Dio_init+0xfa>
    1288:	23 30       	cpi	r18, 0x03	; 3
    128a:	09 f4       	brne	.+2      	; 0x128e <Dio_init+0x38>
    128c:	91 c0       	rjmp	.+290    	; 0x13b0 <Dio_init+0x15a>
    128e:	cf c0       	rjmp	.+414    	; 0x142e <Dio_init+0x1d8>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    1290:	2a b3       	in	r18, 0x1a	; 26
    1292:	61 e0       	ldi	r22, 0x01	; 1
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	db 01       	movw	r26, r22
    1298:	02 c0       	rjmp	.+4      	; 0x129e <Dio_init+0x48>
    129a:	aa 0f       	add	r26, r26
    129c:	bb 1f       	adc	r27, r27
    129e:	3a 95       	dec	r19
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <Dio_init+0x44>
    12a2:	8a 2f       	mov	r24, r26
    12a4:	80 95       	com	r24
    12a6:	82 23       	and	r24, r18
    12a8:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    12aa:	aa b3       	in	r26, 0x1a	; 26
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	01 80       	ldd	r0, Z+1	; 0x01
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <Dio_init+0x64>
    12b6:	22 0f       	add	r18, r18
    12b8:	33 1f       	adc	r19, r19
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <Dio_init+0x60>
    12be:	2a 2b       	or	r18, r26
    12c0:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    12c2:	8b b3       	in	r24, 0x1b	; 27
    12c4:	01 80       	ldd	r0, Z+1	; 0x01
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <Dio_init+0x76>
    12c8:	66 0f       	add	r22, r22
    12ca:	77 1f       	adc	r23, r23
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <Dio_init+0x72>
    12d0:	60 95       	com	r22
    12d2:	68 23       	and	r22, r24
    12d4:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    12d6:	6b b3       	in	r22, 0x1b	; 27
    12d8:	83 81       	ldd	r24, Z+3	; 0x03
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	01 80       	ldd	r0, Z+1	; 0x01
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <Dio_init+0x90>
    12e2:	22 0f       	add	r18, r18
    12e4:	33 1f       	adc	r19, r19
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <Dio_init+0x8c>
    12ea:	26 2b       	or	r18, r22
    12ec:	2b bb       	out	0x1b, r18	; 27
				break;
    12ee:	8f c0       	rjmp	.+286    	; 0x140e <Dio_init+0x1b8>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    12f0:	27 b3       	in	r18, 0x17	; 23
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	db 01       	movw	r26, r22
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <Dio_init+0xa8>
    12fa:	aa 0f       	add	r26, r26
    12fc:	bb 1f       	adc	r27, r27
    12fe:	3a 95       	dec	r19
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <Dio_init+0xa4>
    1302:	8a 2f       	mov	r24, r26
    1304:	80 95       	com	r24
    1306:	82 23       	and	r24, r18
    1308:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    130a:	a7 b3       	in	r26, 0x17	; 23
    130c:	82 81       	ldd	r24, Z+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	01 80       	ldd	r0, Z+1	; 0x01
    1314:	02 c0       	rjmp	.+4      	; 0x131a <Dio_init+0xc4>
    1316:	22 0f       	add	r18, r18
    1318:	33 1f       	adc	r19, r19
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <Dio_init+0xc0>
    131e:	2a 2b       	or	r18, r26
    1320:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    1322:	88 b3       	in	r24, 0x18	; 24
    1324:	01 80       	ldd	r0, Z+1	; 0x01
    1326:	02 c0       	rjmp	.+4      	; 0x132c <Dio_init+0xd6>
    1328:	66 0f       	add	r22, r22
    132a:	77 1f       	adc	r23, r23
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <Dio_init+0xd2>
    1330:	60 95       	com	r22
    1332:	68 23       	and	r22, r24
    1334:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    1336:	68 b3       	in	r22, 0x18	; 24
    1338:	83 81       	ldd	r24, Z+3	; 0x03
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	01 80       	ldd	r0, Z+1	; 0x01
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <Dio_init+0xf0>
    1342:	22 0f       	add	r18, r18
    1344:	33 1f       	adc	r19, r19
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <Dio_init+0xec>
    134a:	26 2b       	or	r18, r22
    134c:	28 bb       	out	0x18, r18	; 24
				break;
    134e:	5f c0       	rjmp	.+190    	; 0x140e <Dio_init+0x1b8>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    1350:	24 b3       	in	r18, 0x14	; 20
    1352:	61 e0       	ldi	r22, 0x01	; 1
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	db 01       	movw	r26, r22
    1358:	02 c0       	rjmp	.+4      	; 0x135e <Dio_init+0x108>
    135a:	aa 0f       	add	r26, r26
    135c:	bb 1f       	adc	r27, r27
    135e:	3a 95       	dec	r19
    1360:	e2 f7       	brpl	.-8      	; 0x135a <Dio_init+0x104>
    1362:	8a 2f       	mov	r24, r26
    1364:	80 95       	com	r24
    1366:	82 23       	and	r24, r18
    1368:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    136a:	a4 b3       	in	r26, 0x14	; 20
    136c:	82 81       	ldd	r24, Z+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	01 80       	ldd	r0, Z+1	; 0x01
    1374:	02 c0       	rjmp	.+4      	; 0x137a <Dio_init+0x124>
    1376:	22 0f       	add	r18, r18
    1378:	33 1f       	adc	r19, r19
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <Dio_init+0x120>
    137e:	2a 2b       	or	r18, r26
    1380:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    1382:	85 b3       	in	r24, 0x15	; 21
    1384:	01 80       	ldd	r0, Z+1	; 0x01
    1386:	02 c0       	rjmp	.+4      	; 0x138c <Dio_init+0x136>
    1388:	66 0f       	add	r22, r22
    138a:	77 1f       	adc	r23, r23
    138c:	0a 94       	dec	r0
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <Dio_init+0x132>
    1390:	60 95       	com	r22
    1392:	68 23       	and	r22, r24
    1394:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    1396:	65 b3       	in	r22, 0x15	; 21
    1398:	83 81       	ldd	r24, Z+3	; 0x03
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	01 80       	ldd	r0, Z+1	; 0x01
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <Dio_init+0x150>
    13a2:	22 0f       	add	r18, r18
    13a4:	33 1f       	adc	r19, r19
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <Dio_init+0x14c>
    13aa:	26 2b       	or	r18, r22
    13ac:	25 bb       	out	0x15, r18	; 21
				break;
    13ae:	2f c0       	rjmp	.+94     	; 0x140e <Dio_init+0x1b8>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    13b0:	21 b3       	in	r18, 0x11	; 17
    13b2:	61 e0       	ldi	r22, 0x01	; 1
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	db 01       	movw	r26, r22
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <Dio_init+0x168>
    13ba:	aa 0f       	add	r26, r26
    13bc:	bb 1f       	adc	r27, r27
    13be:	3a 95       	dec	r19
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <Dio_init+0x164>
    13c2:	8a 2f       	mov	r24, r26
    13c4:	80 95       	com	r24
    13c6:	82 23       	and	r24, r18
    13c8:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    13ca:	a1 b3       	in	r26, 0x11	; 17
    13cc:	82 81       	ldd	r24, Z+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	01 80       	ldd	r0, Z+1	; 0x01
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <Dio_init+0x184>
    13d6:	22 0f       	add	r18, r18
    13d8:	33 1f       	adc	r19, r19
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <Dio_init+0x180>
    13de:	2a 2b       	or	r18, r26
    13e0:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    13e2:	82 b3       	in	r24, 0x12	; 18
    13e4:	01 80       	ldd	r0, Z+1	; 0x01
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <Dio_init+0x196>
    13e8:	66 0f       	add	r22, r22
    13ea:	77 1f       	adc	r23, r23
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <Dio_init+0x192>
    13f0:	60 95       	com	r22
    13f2:	68 23       	and	r22, r24
    13f4:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    13f6:	62 b3       	in	r22, 0x12	; 18
    13f8:	83 81       	ldd	r24, Z+3	; 0x03
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	01 80       	ldd	r0, Z+1	; 0x01
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <Dio_init+0x1b0>
    1402:	22 0f       	add	r18, r18
    1404:	33 1f       	adc	r19, r19
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <Dio_init+0x1ac>
    140a:	26 2b       	or	r18, r22
    140c:	22 bb       	out	0x12, r18	; 18
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
    140e:	9f 5f       	subi	r25, 0xFF	; 255
    1410:	93 31       	cpi	r25, 0x13	; 19
    1412:	08 f4       	brcc	.+2      	; 0x1416 <Dio_init+0x1c0>
    1414:	26 cf       	rjmp	.-436    	; 0x1262 <Dio_init+0xc>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
    1416:	50 93 37 04 	sts	0x0437, r21	; 0x800437 <pstrDio_pinsConfig+0x1>
    141a:	40 93 36 04 	sts	0x0436, r20	; 0x800436 <pstrDio_pinsConfig>
	u8_Dio_Status = DIO_INITIALIZED;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
    1424:	08 95       	ret
{
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
    1426:	85 e0       	ldi	r24, 0x05	; 5
    1428:	08 95       	ret
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
    142a:	83 e0       	ldi	r24, 0x03	; 3
    142c:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
    142e:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
    1430:	08 95       	ret

00001432 <Dio_writePin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    1432:	84 31       	cpi	r24, 0x14	; 20
    1434:	08 f0       	brcs	.+2      	; 0x1438 <Dio_writePin+0x6>
    1436:	90 c0       	rjmp	.+288    	; 0x1558 <Dio_writePin+0x126>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    1438:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <u8_Dio_Status>
    143c:	99 23       	and	r25, r25
    143e:	09 f4       	brne	.+2      	; 0x1442 <Dio_writePin+0x10>
    1440:	8d c0       	rjmp	.+282    	; 0x155c <Dio_writePin+0x12a>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    1442:	e8 2f       	mov	r30, r24
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	cf 01       	movw	r24, r30
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	e0 91 36 04 	lds	r30, 0x0436	; 0x800436 <pstrDio_pinsConfig>
    1454:	f0 91 37 04 	lds	r31, 0x0437	; 0x800437 <pstrDio_pinsConfig+0x1>
    1458:	e8 0f       	add	r30, r24
    145a:	f9 1f       	adc	r31, r25
    145c:	80 81       	ld	r24, Z
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	21 f1       	breq	.+72     	; 0x14aa <Dio_writePin+0x78>
    1462:	30 f0       	brcs	.+12     	; 0x1470 <Dio_writePin+0x3e>
    1464:	82 30       	cpi	r24, 0x02	; 2
    1466:	f1 f1       	breq	.+124    	; 0x14e4 <Dio_writePin+0xb2>
    1468:	83 30       	cpi	r24, 0x03	; 3
    146a:	09 f4       	brne	.+2      	; 0x146e <Dio_writePin+0x3c>
    146c:	58 c0       	rjmp	.+176    	; 0x151e <Dio_writePin+0xec>
    146e:	78 c0       	rjmp	.+240    	; 0x1560 <Dio_writePin+0x12e>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
    1470:	61 30       	cpi	r22, 0x01	; 1
    1472:	69 f4       	brne	.+26     	; 0x148e <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    1474:	2b b3       	in	r18, 0x1b	; 27
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	01 80       	ldd	r0, Z+1	; 0x01
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <Dio_writePin+0x50>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <Dio_writePin+0x4c>
    1486:	82 2b       	or	r24, r18
    1488:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    148e:	2b b3       	in	r18, 0x1b	; 27
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	01 80       	ldd	r0, Z+1	; 0x01
    1496:	02 c0       	rjmp	.+4      	; 0x149c <Dio_writePin+0x6a>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <Dio_writePin+0x66>
    14a0:	80 95       	com	r24
    14a2:	82 23       	and	r24, r18
    14a4:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
    14aa:	61 30       	cpi	r22, 0x01	; 1
    14ac:	69 f4       	brne	.+26     	; 0x14c8 <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    14ae:	28 b3       	in	r18, 0x18	; 24
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	01 80       	ldd	r0, Z+1	; 0x01
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <Dio_writePin+0x8a>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	0a 94       	dec	r0
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <Dio_writePin+0x86>
    14c0:	82 2b       	or	r24, r18
    14c2:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    14c8:	28 b3       	in	r18, 0x18	; 24
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	01 80       	ldd	r0, Z+1	; 0x01
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <Dio_writePin+0xa4>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <Dio_writePin+0xa0>
    14da:	80 95       	com	r24
    14dc:	82 23       	and	r24, r18
    14de:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
    14e4:	61 30       	cpi	r22, 0x01	; 1
    14e6:	69 f4       	brne	.+26     	; 0x1502 <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    14e8:	25 b3       	in	r18, 0x15	; 21
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	01 80       	ldd	r0, Z+1	; 0x01
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <Dio_writePin+0xc4>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <Dio_writePin+0xc0>
    14fa:	82 2b       	or	r24, r18
    14fc:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    1502:	25 b3       	in	r18, 0x15	; 21
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	01 80       	ldd	r0, Z+1	; 0x01
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <Dio_writePin+0xde>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <Dio_writePin+0xda>
    1514:	80 95       	com	r24
    1516:	82 23       	and	r24, r18
    1518:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
    151e:	61 30       	cpi	r22, 0x01	; 1
    1520:	69 f4       	brne	.+26     	; 0x153c <Dio_writePin+0x10a>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    1522:	22 b3       	in	r18, 0x12	; 18
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	01 80       	ldd	r0, Z+1	; 0x01
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <Dio_writePin+0xfe>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <Dio_writePin+0xfa>
    1534:	82 2b       	or	r24, r18
    1536:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    153c:	22 b3       	in	r18, 0x12	; 18
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	01 80       	ldd	r0, Z+1	; 0x01
    1544:	02 c0       	rjmp	.+4      	; 0x154a <Dio_writePin+0x118>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <Dio_writePin+0x114>
    154e:	80 95       	com	r24
    1550:	82 23       	and	r24, r18
    1552:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	08 95       	ret
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    1558:	82 e0       	ldi	r24, 0x02	; 2
    155a:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    155c:	86 e0       	ldi	r24, 0x06	; 6
    155e:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    1560:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
    1562:	08 95       	ret

00001564 <__vector_1>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
    1564:	1f 92       	push	r1
    1566:	0f 92       	push	r0
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	0f 92       	push	r0
    156c:	11 24       	eor	r1, r1
    156e:	2f 93       	push	r18
    1570:	3f 93       	push	r19
    1572:	4f 93       	push	r20
    1574:	5f 93       	push	r21
    1576:	6f 93       	push	r22
    1578:	7f 93       	push	r23
    157a:	8f 93       	push	r24
    157c:	9f 93       	push	r25
    157e:	af 93       	push	r26
    1580:	bf 93       	push	r27
    1582:	ef 93       	push	r30
    1584:	ff 93       	push	r31
    1586:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <INT0_CallBackPtr>
    158a:	f0 91 3d 04 	lds	r31, 0x043D	; 0x80043d <INT0_CallBackPtr+0x1>
    158e:	09 95       	icall
    1590:	ff 91       	pop	r31
    1592:	ef 91       	pop	r30
    1594:	bf 91       	pop	r27
    1596:	af 91       	pop	r26
    1598:	9f 91       	pop	r25
    159a:	8f 91       	pop	r24
    159c:	7f 91       	pop	r23
    159e:	6f 91       	pop	r22
    15a0:	5f 91       	pop	r21
    15a2:	4f 91       	pop	r20
    15a4:	3f 91       	pop	r19
    15a6:	2f 91       	pop	r18
    15a8:	0f 90       	pop	r0
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	0f 90       	pop	r0
    15ae:	1f 90       	pop	r1
    15b0:	18 95       	reti

000015b2 <__vector_2>:
    15b2:	1f 92       	push	r1
    15b4:	0f 92       	push	r0
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	0f 92       	push	r0
    15ba:	11 24       	eor	r1, r1
    15bc:	2f 93       	push	r18
    15be:	3f 93       	push	r19
    15c0:	4f 93       	push	r20
    15c2:	5f 93       	push	r21
    15c4:	6f 93       	push	r22
    15c6:	7f 93       	push	r23
    15c8:	8f 93       	push	r24
    15ca:	9f 93       	push	r25
    15cc:	af 93       	push	r26
    15ce:	bf 93       	push	r27
    15d0:	ef 93       	push	r30
    15d2:	ff 93       	push	r31
    15d4:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <INT1_CallBackPtr>
    15d8:	f0 91 3b 04 	lds	r31, 0x043B	; 0x80043b <INT1_CallBackPtr+0x1>
    15dc:	09 95       	icall
    15de:	ff 91       	pop	r31
    15e0:	ef 91       	pop	r30
    15e2:	bf 91       	pop	r27
    15e4:	af 91       	pop	r26
    15e6:	9f 91       	pop	r25
    15e8:	8f 91       	pop	r24
    15ea:	7f 91       	pop	r23
    15ec:	6f 91       	pop	r22
    15ee:	5f 91       	pop	r21
    15f0:	4f 91       	pop	r20
    15f2:	3f 91       	pop	r19
    15f4:	2f 91       	pop	r18
    15f6:	0f 90       	pop	r0
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	0f 90       	pop	r0
    15fc:	1f 90       	pop	r1
    15fe:	18 95       	reti

00001600 <__vector_3>:
}
ISR(INT2_IRQ)
{
    1600:	1f 92       	push	r1
    1602:	0f 92       	push	r0
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	0f 92       	push	r0
    1608:	11 24       	eor	r1, r1
    160a:	2f 93       	push	r18
    160c:	3f 93       	push	r19
    160e:	4f 93       	push	r20
    1610:	5f 93       	push	r21
    1612:	6f 93       	push	r22
    1614:	7f 93       	push	r23
    1616:	8f 93       	push	r24
    1618:	9f 93       	push	r25
    161a:	af 93       	push	r26
    161c:	bf 93       	push	r27
    161e:	ef 93       	push	r30
    1620:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
    1622:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <INT2_CallBackPtr>
    1626:	f0 91 39 04 	lds	r31, 0x0439	; 0x800439 <INT2_CallBackPtr+0x1>
    162a:	09 95       	icall
}
    162c:	ff 91       	pop	r31
    162e:	ef 91       	pop	r30
    1630:	bf 91       	pop	r27
    1632:	af 91       	pop	r26
    1634:	9f 91       	pop	r25
    1636:	8f 91       	pop	r24
    1638:	7f 91       	pop	r23
    163a:	6f 91       	pop	r22
    163c:	5f 91       	pop	r21
    163e:	4f 91       	pop	r20
    1640:	3f 91       	pop	r19
    1642:	2f 91       	pop	r18
    1644:	0f 90       	pop	r0
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	0f 90       	pop	r0
    164a:	1f 90       	pop	r1
    164c:	18 95       	reti

0000164e <Gpt_ISRHandler>:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e c0       	rjmp	.+28     	; 0x166e <Gpt_ISRHandler+0x20>
    1652:	29 2f       	mov	r18, r25
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	f9 01       	movw	r30, r18
    1658:	ee 0f       	add	r30, r30
    165a:	ff 1f       	adc	r31, r31
    165c:	2e 0f       	add	r18, r30
    165e:	3f 1f       	adc	r19, r31
    1660:	f9 01       	movw	r30, r18
    1662:	e0 51       	subi	r30, 0x10	; 16
    1664:	fd 4f       	sbci	r31, 0xFD	; 253
    1666:	20 81       	ld	r18, Z
    1668:	28 17       	cp	r18, r24
    166a:	19 f0       	breq	.+6      	; 0x1672 <Gpt_ISRHandler+0x24>
    166c:	9f 5f       	subi	r25, 0xFF	; 255
    166e:	99 23       	and	r25, r25
    1670:	81 f3       	breq	.-32     	; 0x1652 <Gpt_ISRHandler+0x4>
    1672:	89 2f       	mov	r24, r25
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	fc 01       	movw	r30, r24
    1678:	ee 0f       	add	r30, r30
    167a:	ff 1f       	adc	r31, r31
    167c:	ee 0f       	add	r30, r30
    167e:	ff 1f       	adc	r31, r31
    1680:	e1 5c       	subi	r30, 0xC1	; 193
    1682:	fb 4f       	sbci	r31, 0xFB	; 251
    1684:	40 81       	ld	r20, Z
    1686:	51 81       	ldd	r21, Z+1	; 0x01
    1688:	62 81       	ldd	r22, Z+2	; 0x02
    168a:	73 81       	ldd	r23, Z+3	; 0x03
    168c:	41 15       	cp	r20, r1
    168e:	51 05       	cpc	r21, r1
    1690:	61 05       	cpc	r22, r1
    1692:	71 05       	cpc	r23, r1
    1694:	81 f0       	breq	.+32     	; 0x16b6 <Gpt_ISRHandler+0x68>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	fc 01       	movw	r30, r24
    16a0:	e1 5c       	subi	r30, 0xC1	; 193
    16a2:	fb 4f       	sbci	r31, 0xFB	; 251
    16a4:	41 50       	subi	r20, 0x01	; 1
    16a6:	51 09       	sbc	r21, r1
    16a8:	61 09       	sbc	r22, r1
    16aa:	71 09       	sbc	r23, r1
    16ac:	40 83       	st	Z, r20
    16ae:	51 83       	std	Z+1, r21	; 0x01
    16b0:	62 83       	std	Z+2, r22	; 0x02
    16b2:	73 83       	std	Z+3, r23	; 0x03
    16b4:	08 95       	ret
    16b6:	23 b7       	in	r18, 0x33	; 51
    16b8:	2e 7f       	andi	r18, 0xFE	; 254
    16ba:	23 bf       	out	0x33, r18	; 51
    16bc:	23 b7       	in	r18, 0x33	; 51
    16be:	2d 7f       	andi	r18, 0xFD	; 253
    16c0:	23 bf       	out	0x33, r18	; 51
    16c2:	23 b7       	in	r18, 0x33	; 51
    16c4:	2b 7f       	andi	r18, 0xFB	; 251
    16c6:	23 bf       	out	0x33, r18	; 51
    16c8:	29 b7       	in	r18, 0x39	; 57
    16ca:	2e 7f       	andi	r18, 0xFE	; 254
    16cc:	29 bf       	out	0x39, r18	; 57
    16ce:	fc 01       	movw	r30, r24
    16d0:	ed 5b       	subi	r30, 0xBD	; 189
    16d2:	fb 4f       	sbci	r31, 0xFB	; 251
    16d4:	24 e0       	ldi	r18, 0x04	; 4
    16d6:	20 83       	st	Z, r18
    16d8:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <Gpt_Timer0_CallBackPtr>
    16dc:	f0 91 45 04 	lds	r31, 0x0445	; 0x800445 <Gpt_Timer0_CallBackPtr+0x1>
    16e0:	09 95       	icall
    16e2:	08 95       	ret

000016e4 <GptInit>:
    16e4:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <genu_GPTModStatus>
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	61 f1       	breq	.+88     	; 0x1744 <GptInit+0x60>
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	24 c0       	rjmp	.+72     	; 0x1738 <GptInit+0x54>
    16f0:	82 2f       	mov	r24, r18
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	fc 01       	movw	r30, r24
    16f6:	ee 0f       	add	r30, r30
    16f8:	ff 1f       	adc	r31, r31
    16fa:	e8 0f       	add	r30, r24
    16fc:	f9 1f       	adc	r31, r25
    16fe:	e0 51       	subi	r30, 0x10	; 16
    1700:	fd 4f       	sbci	r31, 0xFD	; 253
    1702:	30 81       	ld	r19, Z
    1704:	33 23       	and	r19, r19
    1706:	19 f0       	breq	.+6      	; 0x170e <GptInit+0x2a>
    1708:	33 30       	cpi	r19, 0x03	; 3
    170a:	f0 f4       	brcc	.+60     	; 0x1748 <GptInit+0x64>
    170c:	0f c0       	rjmp	.+30     	; 0x172c <GptInit+0x48>
    170e:	fc 01       	movw	r30, r24
    1710:	ee 0f       	add	r30, r30
    1712:	ff 1f       	adc	r31, r31
    1714:	e8 0f       	add	r30, r24
    1716:	f9 1f       	adc	r31, r25
    1718:	e0 51       	subi	r30, 0x10	; 16
    171a:	fd 4f       	sbci	r31, 0xFD	; 253
    171c:	32 81       	ldd	r19, Z+2	; 0x02
    171e:	31 11       	cpse	r19, r1
    1720:	05 c0       	rjmp	.+10     	; 0x172c <GptInit+0x48>
    1722:	13 be       	out	0x33, r1	; 51
    1724:	39 b7       	in	r19, 0x39	; 57
    1726:	3c 7f       	andi	r19, 0xFC	; 252
    1728:	39 bf       	out	0x39, r19	; 57
    172a:	12 be       	out	0x32, r1	; 50
    172c:	fc 01       	movw	r30, r24
    172e:	ed 5b       	subi	r30, 0xBD	; 189
    1730:	fb 4f       	sbci	r31, 0xFB	; 251
    1732:	31 e0       	ldi	r19, 0x01	; 1
    1734:	30 83       	st	Z, r19
    1736:	2f 5f       	subi	r18, 0xFF	; 255
    1738:	22 23       	and	r18, r18
    173a:	d1 f2       	breq	.-76     	; 0x16f0 <GptInit+0xc>
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <genu_GPTModStatus>
    1742:	08 95       	ret
    1744:	83 e0       	ldi	r24, 0x03	; 3
    1746:	08 95       	ret
    1748:	85 e0       	ldi	r24, 0x05	; 5
    174a:	08 95       	ret

0000174c <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    174c:	1f 92       	push	r1
    174e:	0f 92       	push	r0
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	0f 92       	push	r0
    1754:	11 24       	eor	r1, r1
    1756:	2f 93       	push	r18
    1758:	3f 93       	push	r19
    175a:	4f 93       	push	r20
    175c:	5f 93       	push	r21
    175e:	6f 93       	push	r22
    1760:	7f 93       	push	r23
    1762:	8f 93       	push	r24
    1764:	9f 93       	push	r25
    1766:	af 93       	push	r26
    1768:	bf 93       	push	r27
    176a:	ef 93       	push	r30
    176c:	ff 93       	push	r31
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	0e 94 27 0b 	call	0x164e	; 0x164e <Gpt_ISRHandler>
    1774:	ff 91       	pop	r31
    1776:	ef 91       	pop	r30
    1778:	bf 91       	pop	r27
    177a:	af 91       	pop	r26
    177c:	9f 91       	pop	r25
    177e:	8f 91       	pop	r24
    1780:	7f 91       	pop	r23
    1782:	6f 91       	pop	r22
    1784:	5f 91       	pop	r21
    1786:	4f 91       	pop	r20
    1788:	3f 91       	pop	r19
    178a:	2f 91       	pop	r18
    178c:	0f 90       	pop	r0
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	0f 90       	pop	r0
    1792:	1f 90       	pop	r1
    1794:	18 95       	reti

00001796 <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    1796:	1f 92       	push	r1
    1798:	0f 92       	push	r0
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	0f 92       	push	r0
    179e:	11 24       	eor	r1, r1
    17a0:	2f 93       	push	r18
    17a2:	3f 93       	push	r19
    17a4:	4f 93       	push	r20
    17a6:	5f 93       	push	r21
    17a8:	6f 93       	push	r22
    17aa:	7f 93       	push	r23
    17ac:	8f 93       	push	r24
    17ae:	9f 93       	push	r25
    17b0:	af 93       	push	r26
    17b2:	bf 93       	push	r27
    17b4:	ef 93       	push	r30
    17b6:	ff 93       	push	r31
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	0e 94 27 0b 	call	0x164e	; 0x164e <Gpt_ISRHandler>
    17be:	ff 91       	pop	r31
    17c0:	ef 91       	pop	r30
    17c2:	bf 91       	pop	r27
    17c4:	af 91       	pop	r26
    17c6:	9f 91       	pop	r25
    17c8:	8f 91       	pop	r24
    17ca:	7f 91       	pop	r23
    17cc:	6f 91       	pop	r22
    17ce:	5f 91       	pop	r21
    17d0:	4f 91       	pop	r20
    17d2:	3f 91       	pop	r19
    17d4:	2f 91       	pop	r18
    17d6:	0f 90       	pop	r0
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	0f 90       	pop	r0
    17dc:	1f 90       	pop	r1
    17de:	18 95       	reti

000017e0 <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    17e0:	1f 92       	push	r1
    17e2:	0f 92       	push	r0
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	0f 92       	push	r0
    17e8:	11 24       	eor	r1, r1
    17ea:	2f 93       	push	r18
    17ec:	3f 93       	push	r19
    17ee:	4f 93       	push	r20
    17f0:	5f 93       	push	r21
    17f2:	6f 93       	push	r22
    17f4:	7f 93       	push	r23
    17f6:	8f 93       	push	r24
    17f8:	9f 93       	push	r25
    17fa:	af 93       	push	r26
    17fc:	bf 93       	push	r27
    17fe:	ef 93       	push	r30
    1800:	ff 93       	push	r31
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	0e 94 27 0b 	call	0x164e	; 0x164e <Gpt_ISRHandler>
    1808:	ff 91       	pop	r31
    180a:	ef 91       	pop	r30
    180c:	bf 91       	pop	r27
    180e:	af 91       	pop	r26
    1810:	9f 91       	pop	r25
    1812:	8f 91       	pop	r24
    1814:	7f 91       	pop	r23
    1816:	6f 91       	pop	r22
    1818:	5f 91       	pop	r21
    181a:	4f 91       	pop	r20
    181c:	3f 91       	pop	r19
    181e:	2f 91       	pop	r18
    1820:	0f 90       	pop	r0
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	0f 90       	pop	r0
    1826:	1f 90       	pop	r1
    1828:	18 95       	reti

0000182a <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    182a:	1f 92       	push	r1
    182c:	0f 92       	push	r0
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	0f 92       	push	r0
    1832:	11 24       	eor	r1, r1
    1834:	2f 93       	push	r18
    1836:	3f 93       	push	r19
    1838:	4f 93       	push	r20
    183a:	5f 93       	push	r21
    183c:	6f 93       	push	r22
    183e:	7f 93       	push	r23
    1840:	8f 93       	push	r24
    1842:	9f 93       	push	r25
    1844:	af 93       	push	r26
    1846:	bf 93       	push	r27
    1848:	ef 93       	push	r30
    184a:	ff 93       	push	r31
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	0e 94 27 0b 	call	0x164e	; 0x164e <Gpt_ISRHandler>
    1852:	ff 91       	pop	r31
    1854:	ef 91       	pop	r30
    1856:	bf 91       	pop	r27
    1858:	af 91       	pop	r26
    185a:	9f 91       	pop	r25
    185c:	8f 91       	pop	r24
    185e:	7f 91       	pop	r23
    1860:	6f 91       	pop	r22
    1862:	5f 91       	pop	r21
    1864:	4f 91       	pop	r20
    1866:	3f 91       	pop	r19
    1868:	2f 91       	pop	r18
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	0f 90       	pop	r0
    1870:	1f 90       	pop	r1
    1872:	18 95       	reti

00001874 <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    1874:	1f 92       	push	r1
    1876:	0f 92       	push	r0
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	0f 92       	push	r0
    187c:	11 24       	eor	r1, r1
    187e:	2f 93       	push	r18
    1880:	3f 93       	push	r19
    1882:	4f 93       	push	r20
    1884:	5f 93       	push	r21
    1886:	6f 93       	push	r22
    1888:	7f 93       	push	r23
    188a:	8f 93       	push	r24
    188c:	9f 93       	push	r25
    188e:	af 93       	push	r26
    1890:	bf 93       	push	r27
    1892:	ef 93       	push	r30
    1894:	ff 93       	push	r31
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	0e 94 27 0b 	call	0x164e	; 0x164e <Gpt_ISRHandler>
    189c:	ff 91       	pop	r31
    189e:	ef 91       	pop	r30
    18a0:	bf 91       	pop	r27
    18a2:	af 91       	pop	r26
    18a4:	9f 91       	pop	r25
    18a6:	8f 91       	pop	r24
    18a8:	7f 91       	pop	r23
    18aa:	6f 91       	pop	r22
    18ac:	5f 91       	pop	r21
    18ae:	4f 91       	pop	r20
    18b0:	3f 91       	pop	r19
    18b2:	2f 91       	pop	r18
    18b4:	0f 90       	pop	r0
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	0f 90       	pop	r0
    18ba:	1f 90       	pop	r1
    18bc:	18 95       	reti

000018be <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	2f 93       	push	r18
    18ca:	3f 93       	push	r19
    18cc:	4f 93       	push	r20
    18ce:	5f 93       	push	r21
    18d0:	6f 93       	push	r22
    18d2:	7f 93       	push	r23
    18d4:	8f 93       	push	r24
    18d6:	9f 93       	push	r25
    18d8:	af 93       	push	r26
    18da:	bf 93       	push	r27
    18dc:	ef 93       	push	r30
    18de:	ff 93       	push	r31
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	0e 94 27 0b 	call	0x164e	; 0x164e <Gpt_ISRHandler>
    18e6:	ff 91       	pop	r31
    18e8:	ef 91       	pop	r30
    18ea:	bf 91       	pop	r27
    18ec:	af 91       	pop	r26
    18ee:	9f 91       	pop	r25
    18f0:	8f 91       	pop	r24
    18f2:	7f 91       	pop	r23
    18f4:	6f 91       	pop	r22
    18f6:	5f 91       	pop	r21
    18f8:	4f 91       	pop	r20
    18fa:	3f 91       	pop	r19
    18fc:	2f 91       	pop	r18
    18fe:	0f 90       	pop	r0
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	0f 90       	pop	r0
    1904:	1f 90       	pop	r1
    1906:	18 95       	reti

00001908 <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    1908:	1f 92       	push	r1
    190a:	0f 92       	push	r0
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	0f 92       	push	r0
    1910:	11 24       	eor	r1, r1
    1912:	2f 93       	push	r18
    1914:	3f 93       	push	r19
    1916:	4f 93       	push	r20
    1918:	5f 93       	push	r21
    191a:	6f 93       	push	r22
    191c:	7f 93       	push	r23
    191e:	8f 93       	push	r24
    1920:	9f 93       	push	r25
    1922:	af 93       	push	r26
    1924:	bf 93       	push	r27
    1926:	ef 93       	push	r30
    1928:	ff 93       	push	r31
    192a:	82 e0       	ldi	r24, 0x02	; 2
    192c:	0e 94 27 0b 	call	0x164e	; 0x164e <Gpt_ISRHandler>
    1930:	ff 91       	pop	r31
    1932:	ef 91       	pop	r30
    1934:	bf 91       	pop	r27
    1936:	af 91       	pop	r26
    1938:	9f 91       	pop	r25
    193a:	8f 91       	pop	r24
    193c:	7f 91       	pop	r23
    193e:	6f 91       	pop	r22
    1940:	5f 91       	pop	r21
    1942:	4f 91       	pop	r20
    1944:	3f 91       	pop	r19
    1946:	2f 91       	pop	r18
    1948:	0f 90       	pop	r0
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	0f 90       	pop	r0
    194e:	1f 90       	pop	r1
    1950:	18 95       	reti

00001952 <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    1952:	1f 92       	push	r1
    1954:	0f 92       	push	r0
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	0f 92       	push	r0
    195a:	11 24       	eor	r1, r1
    195c:	2f 93       	push	r18
    195e:	3f 93       	push	r19
    1960:	4f 93       	push	r20
    1962:	5f 93       	push	r21
    1964:	6f 93       	push	r22
    1966:	7f 93       	push	r23
    1968:	8f 93       	push	r24
    196a:	9f 93       	push	r25
    196c:	af 93       	push	r26
    196e:	bf 93       	push	r27
    1970:	ef 93       	push	r30
    1972:	ff 93       	push	r31
    1974:	82 e0       	ldi	r24, 0x02	; 2
    1976:	0e 94 27 0b 	call	0x164e	; 0x164e <Gpt_ISRHandler>
    197a:	ff 91       	pop	r31
    197c:	ef 91       	pop	r30
    197e:	bf 91       	pop	r27
    1980:	af 91       	pop	r26
    1982:	9f 91       	pop	r25
    1984:	8f 91       	pop	r24
    1986:	7f 91       	pop	r23
    1988:	6f 91       	pop	r22
    198a:	5f 91       	pop	r21
    198c:	4f 91       	pop	r20
    198e:	3f 91       	pop	r19
    1990:	2f 91       	pop	r18
    1992:	0f 90       	pop	r0
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	0f 90       	pop	r0
    1998:	1f 90       	pop	r1
    199a:	18 95       	reti

0000199c <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
    199c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <genuI2C_Status>
    19a0:	86 30       	cpi	r24, 0x06	; 6
    19a2:	41 f0       	breq	.+16     	; 0x19b4 <I2C_MasterInit+0x18>
    19a4:	11 b8       	out	0x01, r1	; 1
    19a6:	8a ef       	ldi	r24, 0xFA	; 250
    19a8:	80 b9       	out	0x00, r24	; 0
    19aa:	86 e0       	ldi	r24, 0x06	; 6
    19ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <genuI2C_Status>
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	08 95       	ret
    19b4:	87 e0       	ldi	r24, 0x07	; 7
    19b6:	08 95       	ret

000019b8 <I2C_MasterSendSTART>:
    19b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <genuI2C_Status>
    19bc:	86 30       	cpi	r24, 0x06	; 6
    19be:	59 f4       	brne	.+22     	; 0x19d6 <I2C_MasterSendSTART+0x1e>
    19c0:	84 ea       	ldi	r24, 0xA4	; 164
    19c2:	86 bf       	out	0x36, r24	; 54
    19c4:	06 b6       	in	r0, 0x36	; 54
    19c6:	07 fe       	sbrs	r0, 7
    19c8:	fd cf       	rjmp	.-6      	; 0x19c4 <I2C_MasterSendSTART+0xc>
    19ca:	81 b1       	in	r24, 0x01	; 1
    19cc:	88 7f       	andi	r24, 0xF8	; 248
    19ce:	88 30       	cpi	r24, 0x08	; 8
    19d0:	21 f0       	breq	.+8      	; 0x19da <I2C_MasterSendSTART+0x22>
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	08 95       	ret
    19d6:	85 e0       	ldi	r24, 0x05	; 5
    19d8:	08 95       	ret
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	08 95       	ret

000019de <I2C_MasterSendSlaveAddress>:
    19de:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <genuI2C_Status>
    19e2:	96 30       	cpi	r25, 0x06	; 6
    19e4:	29 f5       	brne	.+74     	; 0x1a30 <I2C_MasterSendSlaveAddress+0x52>
    19e6:	62 30       	cpi	r22, 0x02	; 2
    19e8:	28 f5       	brcc	.+74     	; 0x1a34 <I2C_MasterSendSlaveAddress+0x56>
    19ea:	88 23       	and	r24, r24
    19ec:	2c f1       	brlt	.+74     	; 0x1a38 <I2C_MasterSendSlaveAddress+0x5a>
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	68 2b       	or	r22, r24
    19f6:	63 b9       	out	0x03, r22	; 3
    19f8:	84 e8       	ldi	r24, 0x84	; 132
    19fa:	86 bf       	out	0x36, r24	; 54
    19fc:	06 b6       	in	r0, 0x36	; 54
    19fe:	07 fe       	sbrs	r0, 7
    1a00:	fd cf       	rjmp	.-6      	; 0x19fc <I2C_MasterSendSlaveAddress+0x1e>
    1a02:	81 b1       	in	r24, 0x01	; 1
    1a04:	88 7f       	andi	r24, 0xF8	; 248
    1a06:	88 33       	cpi	r24, 0x38	; 56
    1a08:	59 f0       	breq	.+22     	; 0x1a20 <I2C_MasterSendSlaveAddress+0x42>
    1a0a:	28 f4       	brcc	.+10     	; 0x1a16 <I2C_MasterSendSlaveAddress+0x38>
    1a0c:	88 31       	cpi	r24, 0x18	; 24
    1a0e:	b1 f0       	breq	.+44     	; 0x1a3c <I2C_MasterSendSlaveAddress+0x5e>
    1a10:	80 32       	cpi	r24, 0x20	; 32
    1a12:	41 f0       	breq	.+16     	; 0x1a24 <I2C_MasterSendSlaveAddress+0x46>
    1a14:	0b c0       	rjmp	.+22     	; 0x1a2c <I2C_MasterSendSlaveAddress+0x4e>
    1a16:	80 34       	cpi	r24, 0x40	; 64
    1a18:	89 f0       	breq	.+34     	; 0x1a3c <I2C_MasterSendSlaveAddress+0x5e>
    1a1a:	88 34       	cpi	r24, 0x48	; 72
    1a1c:	29 f0       	breq	.+10     	; 0x1a28 <I2C_MasterSendSlaveAddress+0x4a>
    1a1e:	06 c0       	rjmp	.+12     	; 0x1a2c <I2C_MasterSendSlaveAddress+0x4e>
    1a20:	88 e3       	ldi	r24, 0x38	; 56
    1a22:	08 95       	ret
    1a24:	80 e2       	ldi	r24, 0x20	; 32
    1a26:	08 95       	ret
    1a28:	88 e4       	ldi	r24, 0x48	; 72
    1a2a:	08 95       	ret
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	08 95       	ret
    1a30:	85 e0       	ldi	r24, 0x05	; 5
    1a32:	08 95       	ret
    1a34:	82 e0       	ldi	r24, 0x02	; 2
    1a36:	08 95       	ret
    1a38:	83 e0       	ldi	r24, 0x03	; 3
    1a3a:	08 95       	ret
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	08 95       	ret

00001a40 <I2C_MasterSendRepSTART>:
    1a40:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <genuI2C_Status>
    1a44:	86 30       	cpi	r24, 0x06	; 6
    1a46:	59 f4       	brne	.+22     	; 0x1a5e <I2C_MasterSendRepSTART+0x1e>
    1a48:	84 ea       	ldi	r24, 0xA4	; 164
    1a4a:	86 bf       	out	0x36, r24	; 54
    1a4c:	06 b6       	in	r0, 0x36	; 54
    1a4e:	07 fe       	sbrs	r0, 7
    1a50:	fd cf       	rjmp	.-6      	; 0x1a4c <I2C_MasterSendRepSTART+0xc>
    1a52:	81 b1       	in	r24, 0x01	; 1
    1a54:	88 7f       	andi	r24, 0xF8	; 248
    1a56:	80 31       	cpi	r24, 0x10	; 16
    1a58:	21 f0       	breq	.+8      	; 0x1a62 <I2C_MasterSendRepSTART+0x22>
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	08 95       	ret
    1a5e:	85 e0       	ldi	r24, 0x05	; 5
    1a60:	08 95       	ret
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	08 95       	ret

00001a66 <I2C_MasterSendSTOP>:
    1a66:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <genuI2C_Status>
    1a6a:	86 30       	cpi	r24, 0x06	; 6
    1a6c:	39 f4       	brne	.+14     	; 0x1a7c <I2C_MasterSendSTOP+0x16>
    1a6e:	84 e9       	ldi	r24, 0x94	; 148
    1a70:	86 bf       	out	0x36, r24	; 54
    1a72:	06 b6       	in	r0, 0x36	; 54
    1a74:	04 fc       	sbrc	r0, 4
    1a76:	fd cf       	rjmp	.-6      	; 0x1a72 <I2C_MasterSendSTOP+0xc>
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	08 95       	ret
    1a7c:	85 e0       	ldi	r24, 0x05	; 5
    1a7e:	08 95       	ret

00001a80 <I2C_MasterSendByte>:
    1a80:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <genuI2C_Status>
    1a84:	96 30       	cpi	r25, 0x06	; 6
    1a86:	69 f4       	brne	.+26     	; 0x1aa2 <I2C_MasterSendByte+0x22>
    1a88:	83 b9       	out	0x03, r24	; 3
    1a8a:	84 e8       	ldi	r24, 0x84	; 132
    1a8c:	86 bf       	out	0x36, r24	; 54
    1a8e:	06 b6       	in	r0, 0x36	; 54
    1a90:	07 fe       	sbrs	r0, 7
    1a92:	fd cf       	rjmp	.-6      	; 0x1a8e <I2C_MasterSendByte+0xe>
    1a94:	81 b1       	in	r24, 0x01	; 1
    1a96:	88 7f       	andi	r24, 0xF8	; 248
    1a98:	88 32       	cpi	r24, 0x28	; 40
    1a9a:	29 f0       	breq	.+10     	; 0x1aa6 <I2C_MasterSendByte+0x26>
    1a9c:	80 33       	cpi	r24, 0x30	; 48
    1a9e:	29 f4       	brne	.+10     	; 0x1aaa <I2C_MasterSendByte+0x2a>
    1aa0:	08 95       	ret
    1aa2:	85 e0       	ldi	r24, 0x05	; 5
    1aa4:	08 95       	ret
    1aa6:	88 e2       	ldi	r24, 0x28	; 40
    1aa8:	08 95       	ret
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	08 95       	ret

00001aae <I2C_MasterReceiveByte_ACK>:
    1aae:	fc 01       	movw	r30, r24
    1ab0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <genuI2C_Status>
    1ab4:	96 30       	cpi	r25, 0x06	; 6
    1ab6:	79 f4       	brne	.+30     	; 0x1ad6 <I2C_MasterReceiveByte_ACK+0x28>
    1ab8:	30 97       	sbiw	r30, 0x00	; 0
    1aba:	79 f0       	breq	.+30     	; 0x1ada <I2C_MasterReceiveByte_ACK+0x2c>
    1abc:	84 ec       	ldi	r24, 0xC4	; 196
    1abe:	86 bf       	out	0x36, r24	; 54
    1ac0:	06 b6       	in	r0, 0x36	; 54
    1ac2:	07 fe       	sbrs	r0, 7
    1ac4:	fd cf       	rjmp	.-6      	; 0x1ac0 <I2C_MasterReceiveByte_ACK+0x12>
    1ac6:	81 b1       	in	r24, 0x01	; 1
    1ac8:	88 7f       	andi	r24, 0xF8	; 248
    1aca:	80 35       	cpi	r24, 0x50	; 80
    1acc:	41 f4       	brne	.+16     	; 0x1ade <I2C_MasterReceiveByte_ACK+0x30>
    1ace:	83 b1       	in	r24, 0x03	; 3
    1ad0:	80 83       	st	Z, r24
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	08 95       	ret
    1ad6:	85 e0       	ldi	r24, 0x05	; 5
    1ad8:	08 95       	ret
    1ada:	84 e0       	ldi	r24, 0x04	; 4
    1adc:	08 95       	ret
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	08 95       	ret

00001ae2 <I2C_MasterReceiveByte_NACK>:
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <genuI2C_Status>
    1ae8:	96 30       	cpi	r25, 0x06	; 6
    1aea:	79 f4       	brne	.+30     	; 0x1b0a <I2C_MasterReceiveByte_NACK+0x28>
    1aec:	30 97       	sbiw	r30, 0x00	; 0
    1aee:	79 f0       	breq	.+30     	; 0x1b0e <I2C_MasterReceiveByte_NACK+0x2c>
    1af0:	84 e8       	ldi	r24, 0x84	; 132
    1af2:	86 bf       	out	0x36, r24	; 54
    1af4:	06 b6       	in	r0, 0x36	; 54
    1af6:	07 fe       	sbrs	r0, 7
    1af8:	fd cf       	rjmp	.-6      	; 0x1af4 <I2C_MasterReceiveByte_NACK+0x12>
    1afa:	81 b1       	in	r24, 0x01	; 1
    1afc:	88 7f       	andi	r24, 0xF8	; 248
    1afe:	88 35       	cpi	r24, 0x58	; 88
    1b00:	41 f4       	brne	.+16     	; 0x1b12 <I2C_MasterReceiveByte_NACK+0x30>
    1b02:	83 b1       	in	r24, 0x03	; 3
    1b04:	80 83       	st	Z, r24
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	08 95       	ret
    1b0a:	85 e0       	ldi	r24, 0x05	; 5
    1b0c:	08 95       	ret
    1b0e:	84 e0       	ldi	r24, 0x04	; 4
    1b10:	08 95       	ret
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	08 95       	ret

00001b16 <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
    1b16:	7f 92       	push	r7
    1b18:	8f 92       	push	r8
    1b1a:	9f 92       	push	r9
    1b1c:	af 92       	push	r10
    1b1e:	bf 92       	push	r11
    1b20:	cf 92       	push	r12
    1b22:	df 92       	push	r13
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	78 2e       	mov	r7, r24
    1b32:	eb 01       	movw	r28, r22
    1b34:	7a 01       	movw	r14, r20
    1b36:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    1b38:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <genuI2C_Status>
    1b3c:	86 30       	cpi	r24, 0x06	; 6
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <I2C_MasterReceiveGeneral+0x2c>
    1b40:	47 c0       	rjmp	.+142    	; 0x1bd0 <I2C_MasterReceiveGeneral+0xba>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
    1b42:	20 97       	sbiw	r28, 0x00	; 0
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <I2C_MasterReceiveGeneral+0x32>
    1b46:	46 c0       	rjmp	.+140    	; 0x1bd4 <I2C_MasterReceiveGeneral+0xbe>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
    1b48:	23 2b       	or	r18, r19
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <I2C_MasterReceiveGeneral+0x38>
    1b4c:	45 c0       	rjmp	.+138    	; 0x1bd8 <I2C_MasterReceiveGeneral+0xc2>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    1b4e:	77 20       	and	r7, r7
    1b50:	0c f4       	brge	.+2      	; 0x1b54 <I2C_MasterReceiveGeneral+0x3e>
    1b52:	44 c0       	rjmp	.+136    	; 0x1bdc <I2C_MasterReceiveGeneral+0xc6>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1b54:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <I2C_MasterSendSTART>
    1b58:	88 23       	and	r24, r24
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <I2C_MasterReceiveGeneral+0x48>
    1b5c:	4a c0       	rjmp	.+148    	; 0x1bf2 <I2C_MasterReceiveGeneral+0xdc>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	87 2d       	mov	r24, r7
    1b62:	0e 94 ef 0c 	call	0x19de	; 0x19de <I2C_MasterSendSlaveAddress>
    1b66:	81 30       	cpi	r24, 0x01	; 1
    1b68:	d9 f5       	brne	.+118    	; 0x1be0 <I2C_MasterReceiveGeneral+0xca>
    1b6a:	0b c0       	rjmp	.+22     	; 0x1b82 <I2C_MasterReceiveGeneral+0x6c>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1b6c:	4e 01       	movw	r8, r28
    1b6e:	8f ef       	ldi	r24, 0xFF	; 255
    1b70:	88 1a       	sub	r8, r24
    1b72:	98 0a       	sbc	r9, r24
    1b74:	88 81       	ld	r24, Y
    1b76:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    1b7a:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1b7c:	88 23       	and	r24, r24
    1b7e:	c9 f1       	breq	.+114    	; 0x1bf2 <I2C_MasterReceiveGeneral+0xdc>
    1b80:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    1b82:	57 01       	movw	r10, r14
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	a8 1a       	sub	r10, r24
    1b88:	b1 08       	sbc	r11, r1
    1b8a:	ef 28       	or	r14, r15
    1b8c:	79 f7       	brne	.-34     	; 0x1b6c <I2C_MasterReceiveGeneral+0x56>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
    1b8e:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <I2C_MasterSendRepSTART>
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	39 f5       	brne	.+78     	; 0x1be4 <I2C_MasterReceiveGeneral+0xce>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    1b96:	61 e0       	ldi	r22, 0x01	; 1
    1b98:	87 2d       	mov	r24, r7
    1b9a:	0e 94 ef 0c 	call	0x19de	; 0x19de <I2C_MasterSendSlaveAddress>
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	19 f5       	brne	.+70     	; 0x1be8 <I2C_MasterReceiveGeneral+0xd2>
    1ba2:	08 c0       	rjmp	.+16     	; 0x1bb4 <I2C_MasterReceiveGeneral+0x9e>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
    1ba4:	e6 01       	movw	r28, r12
    1ba6:	21 96       	adiw	r28, 0x01	; 1
    1ba8:	c6 01       	movw	r24, r12
    1baa:	0e 94 57 0d 	call	0x1aae	; 0x1aae <I2C_MasterReceiveByte_ACK>
    1bae:	81 30       	cpi	r24, 0x01	; 1
    1bb0:	e9 f4       	brne	.+58     	; 0x1bec <I2C_MasterReceiveGeneral+0xd6>
    1bb2:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
    1bb4:	01 50       	subi	r16, 0x01	; 1
    1bb6:	11 09       	sbc	r17, r1
    1bb8:	a9 f7       	brne	.-22     	; 0x1ba4 <I2C_MasterReceiveGeneral+0x8e>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
    1bba:	c6 01       	movw	r24, r12
    1bbc:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <I2C_MasterReceiveByte_NACK>
    1bc0:	81 30       	cpi	r24, 0x01	; 1
    1bc2:	b1 f4       	brne	.+44     	; 0x1bf0 <I2C_MasterReceiveGeneral+0xda>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
    1bc4:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <I2C_MasterSendSTOP>
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	99 f0       	breq	.+38     	; 0x1bf2 <I2C_MasterReceiveGeneral+0xdc>
		return I2C_STATUS_ERROR_NOK;
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	11 c0       	rjmp	.+34     	; 0x1bf2 <I2C_MasterReceiveGeneral+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    1bd0:	85 e0       	ldi	r24, 0x05	; 5
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <I2C_MasterReceiveGeneral+0xdc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    1bd4:	84 e0       	ldi	r24, 0x04	; 4
    1bd6:	0d c0       	rjmp	.+26     	; 0x1bf2 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    1bd8:	84 e0       	ldi	r24, 0x04	; 4
    1bda:	0b c0       	rjmp	.+22     	; 0x1bf2 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    1bdc:	83 e0       	ldi	r24, 0x03	; 3
    1bde:	09 c0       	rjmp	.+18     	; 0x1bf2 <I2C_MasterReceiveGeneral+0xdc>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	07 c0       	rjmp	.+14     	; 0x1bf2 <I2C_MasterReceiveGeneral+0xdc>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	05 c0       	rjmp	.+10     	; 0x1bf2 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	03 c0       	rjmp	.+6      	; 0x1bf2 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	01 c0       	rjmp	.+2      	; 0x1bf2 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	bf 90       	pop	r11
    1c04:	af 90       	pop	r10
    1c06:	9f 90       	pop	r9
    1c08:	8f 90       	pop	r8
    1c0a:	7f 90       	pop	r7
    1c0c:	08 95       	ret

00001c0e <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
    1c0e:	bf 92       	push	r11
    1c10:	cf 92       	push	r12
    1c12:	df 92       	push	r13
    1c14:	ef 92       	push	r14
    1c16:	ff 92       	push	r15
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	18 2f       	mov	r17, r24
    1c22:	06 2f       	mov	r16, r22
    1c24:	ea 01       	movw	r28, r20
    1c26:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    1c28:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <genuI2C_Status>
    1c2c:	86 30       	cpi	r24, 0x06	; 6
    1c2e:	59 f5       	brne	.+86     	; 0x1c86 <I2C_MasterSendToLocation+0x78>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1c30:	20 97       	sbiw	r28, 0x00	; 0
    1c32:	59 f1       	breq	.+86     	; 0x1c8a <I2C_MasterSendToLocation+0x7c>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    1c34:	11 23       	and	r17, r17
    1c36:	5c f1       	brlt	.+86     	; 0x1c8e <I2C_MasterSendToLocation+0x80>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1c38:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <I2C_MasterSendSTART>
    1c3c:	88 23       	and	r24, r24
    1c3e:	61 f1       	breq	.+88     	; 0x1c98 <I2C_MasterSendToLocation+0x8a>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	81 2f       	mov	r24, r17
    1c44:	0e 94 ef 0c 	call	0x19de	; 0x19de <I2C_MasterSendSlaveAddress>
    1c48:	b8 2e       	mov	r11, r24
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	b8 12       	cpse	r11, r24
    1c4e:	21 c0       	rjmp	.+66     	; 0x1c92 <I2C_MasterSendToLocation+0x84>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1c50:	80 2f       	mov	r24, r16
    1c52:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <I2C_MasterSendByte>
    1c56:	81 11       	cpse	r24, r1
    1c58:	0c c0       	rjmp	.+24     	; 0x1c72 <I2C_MasterSendToLocation+0x64>
    1c5a:	1e c0       	rjmp	.+60     	; 0x1c98 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1c5c:	6e 01       	movw	r12, r28
    1c5e:	8f ef       	ldi	r24, 0xFF	; 255
    1c60:	c8 1a       	sub	r12, r24
    1c62:	d8 0a       	sbc	r13, r24
    1c64:	88 81       	ld	r24, Y
    1c66:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <I2C_MasterSendByte>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    1c6a:	78 01       	movw	r14, r16
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1c6c:	88 23       	and	r24, r24
    1c6e:	a1 f0       	breq	.+40     	; 0x1c98 <I2C_MasterSendToLocation+0x8a>
    1c70:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    1c72:	87 01       	movw	r16, r14
    1c74:	01 50       	subi	r16, 0x01	; 1
    1c76:	11 09       	sbc	r17, r1
    1c78:	ef 28       	or	r14, r15
    1c7a:	81 f7       	brne	.-32     	; 0x1c5c <I2C_MasterSendToLocation+0x4e>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    1c7c:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <I2C_MasterSendSTOP>
    1c80:	81 11       	cpse	r24, r1
    1c82:	09 c0       	rjmp	.+18     	; 0x1c96 <I2C_MasterSendToLocation+0x88>
    1c84:	09 c0       	rjmp	.+18     	; 0x1c98 <I2C_MasterSendToLocation+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    1c86:	85 e0       	ldi	r24, 0x05	; 5
    1c88:	07 c0       	rjmp	.+14     	; 0x1c98 <I2C_MasterSendToLocation+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    1c8a:	84 e0       	ldi	r24, 0x04	; 4
    1c8c:	05 c0       	rjmp	.+10     	; 0x1c98 <I2C_MasterSendToLocation+0x8a>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    1c8e:	83 e0       	ldi	r24, 0x03	; 3
    1c90:	03 c0       	rjmp	.+6      	; 0x1c98 <I2C_MasterSendToLocation+0x8a>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	01 c0       	rjmp	.+2      	; 0x1c98 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
    1c96:	8b 2d       	mov	r24, r11
}
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	ff 90       	pop	r15
    1ca2:	ef 90       	pop	r14
    1ca4:	df 90       	pop	r13
    1ca6:	cf 90       	pop	r12
    1ca8:	bf 90       	pop	r11
    1caa:	08 95       	ret

00001cac <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	1f 92       	push	r1
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
    1cbc:	89 01       	movw	r16, r18
    1cbe:	9a 01       	movw	r18, r20
    1cc0:	41 e0       	ldi	r20, 0x01	; 1
    1cc2:	50 e0       	ldi	r21, 0x00	; 0
    1cc4:	be 01       	movw	r22, r28
    1cc6:	6f 5f       	subi	r22, 0xFF	; 255
    1cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cca:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <I2C_MasterReceiveGeneral>
}
    1cce:	0f 90       	pop	r0
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	08 95       	ret

00001cda <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
    1cda:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <genuSpi_Status>
    1cde:	87 30       	cpi	r24, 0x07	; 7
    1ce0:	b9 f0       	breq	.+46     	; 0x1d10 <Spi_init+0x36>
    1ce2:	87 b3       	in	r24, 0x17	; 23
    1ce4:	80 62       	ori	r24, 0x20	; 32
    1ce6:	87 bb       	out	0x17, r24	; 23
    1ce8:	87 b3       	in	r24, 0x17	; 23
    1cea:	8f 7b       	andi	r24, 0xBF	; 191
    1cec:	87 bb       	out	0x17, r24	; 23
    1cee:	87 b3       	in	r24, 0x17	; 23
    1cf0:	8f 7e       	andi	r24, 0xEF	; 239
    1cf2:	87 bb       	out	0x17, r24	; 23
    1cf4:	87 b3       	in	r24, 0x17	; 23
    1cf6:	8f 77       	andi	r24, 0x7F	; 127
    1cf8:	87 bb       	out	0x17, r24	; 23
    1cfa:	8d b1       	in	r24, 0x0d	; 13
    1cfc:	8f 7e       	andi	r24, 0xEF	; 239
    1cfe:	8d b9       	out	0x0d, r24	; 13
    1d00:	8d b1       	in	r24, 0x0d	; 13
    1d02:	80 64       	ori	r24, 0x40	; 64
    1d04:	8d b9       	out	0x0d, r24	; 13
    1d06:	87 e0       	ldi	r24, 0x07	; 7
    1d08:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <genuSpi_Status>
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	08 95       	ret
    1d10:	88 e0       	ldi	r24, 0x08	; 8
    1d12:	08 95       	ret

00001d14 <__vector_12>:


    1d14:	1f 92       	push	r1
    1d16:	0f 92       	push	r0
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	0f 92       	push	r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	2f 93       	push	r18
    1d20:	3f 93       	push	r19
    1d22:	4f 93       	push	r20
    1d24:	5f 93       	push	r21
    1d26:	6f 93       	push	r22
    1d28:	7f 93       	push	r23
    1d2a:	8f 93       	push	r24
    1d2c:	9f 93       	push	r25
    1d2e:	af 93       	push	r26
    1d30:	bf 93       	push	r27
    1d32:	ef 93       	push	r30
    1d34:	ff 93       	push	r31
    1d36:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <SPI_STC_CallBackPtr>
    1d3a:	f0 91 47 04 	lds	r31, 0x0447	; 0x800447 <SPI_STC_CallBackPtr+0x1>
    1d3e:	09 95       	icall
    1d40:	ff 91       	pop	r31
    1d42:	ef 91       	pop	r30
    1d44:	bf 91       	pop	r27
    1d46:	af 91       	pop	r26
    1d48:	9f 91       	pop	r25
    1d4a:	8f 91       	pop	r24
    1d4c:	7f 91       	pop	r23
    1d4e:	6f 91       	pop	r22
    1d50:	5f 91       	pop	r21
    1d52:	4f 91       	pop	r20
    1d54:	3f 91       	pop	r19
    1d56:	2f 91       	pop	r18
    1d58:	0f 90       	pop	r0
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	0f 90       	pop	r0
    1d5e:	1f 90       	pop	r1
    1d60:	18 95       	reti

00001d62 <stringLength>:
        else if(string1[u8_loopIndex] < string2[u8_loopIndex])
            return 2;
        u8_loopIndex++;
    }
    return 3;
}
    1d62:	ac 01       	movw	r20, r24
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <stringLength+0x8>
    1d68:	8f 5f       	subi	r24, 0xFF	; 255
    1d6a:	fa 01       	movw	r30, r20
    1d6c:	e8 0f       	add	r30, r24
    1d6e:	f1 1d       	adc	r31, r1
    1d70:	20 81       	ld	r18, Z
    1d72:	21 11       	cpse	r18, r1
    1d74:	f9 cf       	rjmp	.-14     	; 0x1d68 <stringLength+0x6>
    1d76:	8f 5f       	subi	r24, 0xFF	; 255
    1d78:	08 95       	ret

00001d7a <stringCompare>:
    1d7a:	ff 92       	push	r15
    1d7c:	0f 93       	push	r16
    1d7e:	1f 93       	push	r17
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	ec 01       	movw	r28, r24
    1d86:	8b 01       	movw	r16, r22
    1d88:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <stringLength>
    1d8c:	f8 2e       	mov	r15, r24
    1d8e:	c8 01       	movw	r24, r16
    1d90:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <stringLength>
    1d94:	8f 15       	cp	r24, r15
    1d96:	a8 f0       	brcs	.+42     	; 0x1dc2 <stringCompare+0x48>
    1d98:	f8 16       	cp	r15, r24
    1d9a:	a8 f0       	brcs	.+42     	; 0x1dc6 <stringCompare+0x4c>
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	07 c0       	rjmp	.+14     	; 0x1dae <stringCompare+0x34>
    1da0:	f8 01       	movw	r30, r16
    1da2:	e8 0f       	add	r30, r24
    1da4:	f9 1f       	adc	r31, r25
    1da6:	80 81       	ld	r24, Z
    1da8:	28 13       	cpse	r18, r24
    1daa:	0f c0       	rjmp	.+30     	; 0x1dca <stringCompare+0x50>
    1dac:	3f 5f       	subi	r19, 0xFF	; 255
    1dae:	83 2f       	mov	r24, r19
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	fe 01       	movw	r30, r28
    1db4:	e8 0f       	add	r30, r24
    1db6:	f9 1f       	adc	r31, r25
    1db8:	20 81       	ld	r18, Z
    1dba:	21 11       	cpse	r18, r1
    1dbc:	f1 cf       	rjmp	.-30     	; 0x1da0 <stringCompare+0x26>
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	05 c0       	rjmp	.+10     	; 0x1dcc <stringCompare+0x52>
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	03 c0       	rjmp	.+6      	; 0x1dcc <stringCompare+0x52>
    1dc6:	83 e0       	ldi	r24, 0x03	; 3
    1dc8:	01 c0       	rjmp	.+2      	; 0x1dcc <stringCompare+0x52>
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	df 91       	pop	r29
    1dce:	cf 91       	pop	r28
    1dd0:	1f 91       	pop	r17
    1dd2:	0f 91       	pop	r16
    1dd4:	ff 90       	pop	r15
    1dd6:	08 95       	ret

00001dd8 <stringConcatenate>:
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	ec 01       	movw	r28, r24
    1de4:	8b 01       	movw	r16, r22
    1de6:	cb 01       	movw	r24, r22
    1de8:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <stringLength>
    1dec:	f8 2e       	mov	r15, r24
    1dee:	ce 01       	movw	r24, r28
    1df0:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <stringLength>
    1df4:	81 50       	subi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	0b c0       	rjmp	.+22     	; 0x1e10 <stringConcatenate+0x38>
    1dfa:	28 0f       	add	r18, r24
    1dfc:	31 1d       	adc	r19, r1
    1dfe:	fe 01       	movw	r30, r28
    1e00:	e2 0f       	add	r30, r18
    1e02:	f3 1f       	adc	r31, r19
    1e04:	d8 01       	movw	r26, r16
    1e06:	a9 0f       	add	r26, r25
    1e08:	b1 1d       	adc	r27, r1
    1e0a:	2c 91       	ld	r18, X
    1e0c:	20 83       	st	Z, r18
    1e0e:	9f 5f       	subi	r25, 0xFF	; 255
    1e10:	29 2f       	mov	r18, r25
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	4f 2d       	mov	r20, r15
    1e16:	50 e0       	ldi	r21, 0x00	; 0
    1e18:	41 50       	subi	r20, 0x01	; 1
    1e1a:	51 09       	sbc	r21, r1
    1e1c:	42 17       	cp	r20, r18
    1e1e:	53 07       	cpc	r21, r19
    1e20:	64 f7       	brge	.-40     	; 0x1dfa <stringConcatenate+0x22>
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	1f 91       	pop	r17
    1e28:	0f 91       	pop	r16
    1e2a:	ff 90       	pop	r15
    1e2c:	08 95       	ret

00001e2e <EmptyString>:

void EmptyString(uint8_t *string)
{
    1e2e:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
    1e30:	90 e0       	ldi	r25, 0x00	; 0
	while(string[u8_loopIndex] != '\0')
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <EmptyString+0xa>
		string[u8_loopIndex++] = '\0';
    1e34:	9f 5f       	subi	r25, 0xFF	; 255
    1e36:	10 82       	st	Z, r1
}

void EmptyString(uint8_t *string)
{
	uint8_t u8_loopIndex=0;
	while(string[u8_loopIndex] != '\0')
    1e38:	fa 01       	movw	r30, r20
    1e3a:	e9 0f       	add	r30, r25
    1e3c:	f1 1d       	adc	r31, r1
    1e3e:	20 81       	ld	r18, Z
    1e40:	21 11       	cpse	r18, r1
    1e42:	f8 cf       	rjmp	.-16     	; 0x1e34 <EmptyString+0x6>
		string[u8_loopIndex++] = '\0';
}
    1e44:	08 95       	ret

00001e46 <stringCopy>:

void stringCopy(uint8_t* source, uint8_t* destination)
{
    1e46:	dc 01       	movw	r26, r24
    uint8_t u8_loopIndex=0;
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    while(source[u8_loopIndex] != '\0')
    1e4a:	05 c0       	rjmp	.+10     	; 0x1e56 <stringCopy+0x10>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
    1e4c:	fb 01       	movw	r30, r22
    1e4e:	e2 0f       	add	r30, r18
    1e50:	f3 1f       	adc	r31, r19
    1e52:	40 83       	st	Z, r20
	    u8_loopIndex++;
    1e54:	9f 5f       	subi	r25, 0xFF	; 255
}

void stringCopy(uint8_t* source, uint8_t* destination)
{
    uint8_t u8_loopIndex=0;
    while(source[u8_loopIndex] != '\0')
    1e56:	29 2f       	mov	r18, r25
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	fd 01       	movw	r30, r26
    1e5c:	e2 0f       	add	r30, r18
    1e5e:	f3 1f       	adc	r31, r19
    1e60:	40 81       	ld	r20, Z
    1e62:	41 11       	cpse	r20, r1
    1e64:	f3 cf       	rjmp	.-26     	; 0x1e4c <stringCopy+0x6>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
	    u8_loopIndex++;
    }
}
    1e66:	08 95       	ret

00001e68 <SWPwm_Init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
    1e68:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <genu_SWPwmModStatus>
    1e6c:	81 30       	cpi	r24, 0x01	; 1
    1e6e:	91 f0       	breq	.+36     	; 0x1e94 <SWPwm_Init+0x2c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
    1e70:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <GptInit>
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
    1e74:	81 30       	cpi	r24, 0x01	; 1
    1e76:	11 f0       	breq	.+4      	; 0x1e7c <SWPwm_Init+0x14>
    1e78:	83 30       	cpi	r24, 0x03	; 3
    1e7a:	71 f4       	brne	.+28     	; 0x1e98 <SWPwm_Init+0x30>
		return SWPWM_STATUS_ERROR_NOK;
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    1e7c:	80 e7       	ldi	r24, 0x70	; 112
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	0e 94 2b 09 	call	0x1256	; 0x1256 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    1e84:	81 30       	cpi	r24, 0x01	; 1
    1e86:	11 f0       	breq	.+4      	; 0x1e8c <SWPwm_Init+0x24>
    1e88:	87 30       	cpi	r24, 0x07	; 7
    1e8a:	41 f4       	brne	.+16     	; 0x1e9c <SWPwm_Init+0x34>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <genu_SWPwmModStatus>
	return SWPWM_STATUS_ERROR_OK;
    1e92:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_ERROR_NOK;
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
		return SWPWM_STATUS_ERROR_NOK;
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	08 95       	ret
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return SWPWM_STATUS_ERROR_NOK;
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
	return SWPWM_STATUS_ERROR_OK;
}
    1e9e:	08 95       	ret

00001ea0 <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    1ea0:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <u8_Uart_Status>
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	81 f0       	breq	.+32     	; 0x1ec8 <Uart_init+0x28>
    1ea8:	10 bc       	out	0x20, r1	; 32
    1eaa:	8c e0       	ldi	r24, 0x0C	; 12
    1eac:	89 b9       	out	0x09, r24	; 9
    1eae:	82 e0       	ldi	r24, 0x02	; 2
    1eb0:	8b b9       	out	0x0b, r24	; 11
    1eb2:	88 e1       	ldi	r24, 0x18	; 24
    1eb4:	8a b9       	out	0x0a, r24	; 10
    1eb6:	80 e8       	ldi	r24, 0x80	; 128
    1eb8:	80 bd       	out	0x20, r24	; 32
    1eba:	80 b5       	in	r24, 0x20	; 32
    1ebc:	86 68       	ori	r24, 0x86	; 134
    1ebe:	80 bd       	out	0x20, r24	; 32
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <u8_Uart_Status>
    1ec6:	08 95       	ret
    1ec8:	87 e0       	ldi	r24, 0x07	; 7
    1eca:	08 95       	ret

00001ecc <Uart_sendByte>:
    1ecc:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <u8_Uart_Status>
    1ed0:	99 23       	and	r25, r25
    1ed2:	29 f0       	breq	.+10     	; 0x1ede <Uart_sendByte+0x12>
    1ed4:	5d 9b       	sbis	0x0b, 5	; 11
    1ed6:	fe cf       	rjmp	.-4      	; 0x1ed4 <Uart_sendByte+0x8>
    1ed8:	8c b9       	out	0x0c, r24	; 12
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	08 95       	ret
    1ede:	86 e0       	ldi	r24, 0x06	; 6
    1ee0:	08 95       	ret

00001ee2 <Uart_sendPacket>:
    1ee2:	ef 92       	push	r14
    1ee4:	ff 92       	push	r15
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	20 91 49 04 	lds	r18, 0x0449	; 0x800449 <u8_Uart_Status>
    1ef2:	22 23       	and	r18, r18
    1ef4:	99 f0       	breq	.+38     	; 0x1f1c <Uart_sendPacket+0x3a>
    1ef6:	8b 01       	movw	r16, r22
    1ef8:	7c 01       	movw	r14, r24
    1efa:	c0 e0       	ldi	r28, 0x00	; 0
    1efc:	d0 e0       	ldi	r29, 0x00	; 0
    1efe:	09 c0       	rjmp	.+18     	; 0x1f12 <Uart_sendPacket+0x30>
    1f00:	f7 01       	movw	r30, r14
    1f02:	ec 0f       	add	r30, r28
    1f04:	fd 1f       	adc	r31, r29
    1f06:	80 81       	ld	r24, Z
    1f08:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Uart_sendByte>
    1f0c:	81 30       	cpi	r24, 0x01	; 1
    1f0e:	41 f4       	brne	.+16     	; 0x1f20 <Uart_sendPacket+0x3e>
    1f10:	21 96       	adiw	r28, 0x01	; 1
    1f12:	c0 17       	cp	r28, r16
    1f14:	d1 07       	cpc	r29, r17
    1f16:	a0 f3       	brcs	.-24     	; 0x1f00 <Uart_sendPacket+0x1e>
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	03 c0       	rjmp	.+6      	; 0x1f22 <Uart_sendPacket+0x40>
    1f1c:	86 e0       	ldi	r24, 0x06	; 6
    1f1e:	01 c0       	rjmp	.+2      	; 0x1f22 <Uart_sendPacket+0x40>
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	df 91       	pop	r29
    1f24:	cf 91       	pop	r28
    1f26:	1f 91       	pop	r17
    1f28:	0f 91       	pop	r16
    1f2a:	ff 90       	pop	r15
    1f2c:	ef 90       	pop	r14
    1f2e:	08 95       	ret

00001f30 <Uart_EnableNotification_RXC>:
    1f30:	9c 01       	movw	r18, r24
    1f32:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <u8_Uart_Status>
    1f36:	99 23       	and	r25, r25
    1f38:	61 f0       	breq	.+24     	; 0x1f52 <Uart_EnableNotification_RXC+0x22>
    1f3a:	21 15       	cp	r18, r1
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	59 f0       	breq	.+22     	; 0x1f56 <Uart_EnableNotification_RXC+0x26>
    1f40:	8a b1       	in	r24, 0x0a	; 10
    1f42:	80 68       	ori	r24, 0x80	; 128
    1f44:	8a b9       	out	0x0a, r24	; 10
    1f46:	30 93 4d 04 	sts	0x044D, r19	; 0x80044d <Uart_RXC_CallBackPtr+0x1>
    1f4a:	20 93 4c 04 	sts	0x044C, r18	; 0x80044c <Uart_RXC_CallBackPtr>
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	08 95       	ret
    1f52:	86 e0       	ldi	r24, 0x06	; 6
    1f54:	08 95       	ret
    1f56:	85 e0       	ldi	r24, 0x05	; 5
    1f58:	08 95       	ret

00001f5a <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    1f5a:	8c b1       	in	r24, 0x0c	; 12
}
    1f5c:	08 95       	ret

00001f5e <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    1f5e:	1f 92       	push	r1
    1f60:	0f 92       	push	r0
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	0f 92       	push	r0
    1f66:	11 24       	eor	r1, r1
    1f68:	2f 93       	push	r18
    1f6a:	3f 93       	push	r19
    1f6c:	4f 93       	push	r20
    1f6e:	5f 93       	push	r21
    1f70:	6f 93       	push	r22
    1f72:	7f 93       	push	r23
    1f74:	8f 93       	push	r24
    1f76:	9f 93       	push	r25
    1f78:	af 93       	push	r26
    1f7a:	bf 93       	push	r27
    1f7c:	ef 93       	push	r30
    1f7e:	ff 93       	push	r31
    1f80:	e0 91 4e 04 	lds	r30, 0x044E	; 0x80044e <Uart_TXC_CallBackPtr>
    1f84:	f0 91 4f 04 	lds	r31, 0x044F	; 0x80044f <Uart_TXC_CallBackPtr+0x1>
    1f88:	09 95       	icall
    1f8a:	ff 91       	pop	r31
    1f8c:	ef 91       	pop	r30
    1f8e:	bf 91       	pop	r27
    1f90:	af 91       	pop	r26
    1f92:	9f 91       	pop	r25
    1f94:	8f 91       	pop	r24
    1f96:	7f 91       	pop	r23
    1f98:	6f 91       	pop	r22
    1f9a:	5f 91       	pop	r21
    1f9c:	4f 91       	pop	r20
    1f9e:	3f 91       	pop	r19
    1fa0:	2f 91       	pop	r18
    1fa2:	0f 90       	pop	r0
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	0f 90       	pop	r0
    1fa8:	1f 90       	pop	r1
    1faa:	18 95       	reti

00001fac <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    1fac:	1f 92       	push	r1
    1fae:	0f 92       	push	r0
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	0f 92       	push	r0
    1fb4:	11 24       	eor	r1, r1
    1fb6:	2f 93       	push	r18
    1fb8:	3f 93       	push	r19
    1fba:	4f 93       	push	r20
    1fbc:	5f 93       	push	r21
    1fbe:	6f 93       	push	r22
    1fc0:	7f 93       	push	r23
    1fc2:	8f 93       	push	r24
    1fc4:	9f 93       	push	r25
    1fc6:	af 93       	push	r26
    1fc8:	bf 93       	push	r27
    1fca:	ef 93       	push	r30
    1fcc:	ff 93       	push	r31
    1fce:	e0 91 4c 04 	lds	r30, 0x044C	; 0x80044c <Uart_RXC_CallBackPtr>
    1fd2:	f0 91 4d 04 	lds	r31, 0x044D	; 0x80044d <Uart_RXC_CallBackPtr+0x1>
    1fd6:	09 95       	icall
    1fd8:	ff 91       	pop	r31
    1fda:	ef 91       	pop	r30
    1fdc:	bf 91       	pop	r27
    1fde:	af 91       	pop	r26
    1fe0:	9f 91       	pop	r25
    1fe2:	8f 91       	pop	r24
    1fe4:	7f 91       	pop	r23
    1fe6:	6f 91       	pop	r22
    1fe8:	5f 91       	pop	r21
    1fea:	4f 91       	pop	r20
    1fec:	3f 91       	pop	r19
    1fee:	2f 91       	pop	r18
    1ff0:	0f 90       	pop	r0
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	0f 90       	pop	r0
    1ff6:	1f 90       	pop	r1
    1ff8:	18 95       	reti

00001ffa <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    1ffa:	1f 92       	push	r1
    1ffc:	0f 92       	push	r0
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	0f 92       	push	r0
    2002:	11 24       	eor	r1, r1
    2004:	2f 93       	push	r18
    2006:	3f 93       	push	r19
    2008:	4f 93       	push	r20
    200a:	5f 93       	push	r21
    200c:	6f 93       	push	r22
    200e:	7f 93       	push	r23
    2010:	8f 93       	push	r24
    2012:	9f 93       	push	r25
    2014:	af 93       	push	r26
    2016:	bf 93       	push	r27
    2018:	ef 93       	push	r30
    201a:	ff 93       	push	r31
    201c:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <Uart_UDRE_CallBackPtr>
    2020:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <Uart_UDRE_CallBackPtr+0x1>
    2024:	09 95       	icall
    2026:	ff 91       	pop	r31
    2028:	ef 91       	pop	r30
    202a:	bf 91       	pop	r27
    202c:	af 91       	pop	r26
    202e:	9f 91       	pop	r25
    2030:	8f 91       	pop	r24
    2032:	7f 91       	pop	r23
    2034:	6f 91       	pop	r22
    2036:	5f 91       	pop	r21
    2038:	4f 91       	pop	r20
    203a:	3f 91       	pop	r19
    203c:	2f 91       	pop	r18
    203e:	0f 90       	pop	r0
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	0f 90       	pop	r0
    2044:	1f 90       	pop	r1
    2046:	18 95       	reti

00002048 <__adddi3_s8>:
    2048:	00 24       	eor	r0, r0
    204a:	a7 fd       	sbrc	r26, 7
    204c:	00 94       	com	r0
    204e:	2a 0f       	add	r18, r26
    2050:	30 1d       	adc	r19, r0
    2052:	40 1d       	adc	r20, r0
    2054:	50 1d       	adc	r21, r0
    2056:	60 1d       	adc	r22, r0
    2058:	70 1d       	adc	r23, r0
    205a:	80 1d       	adc	r24, r0
    205c:	90 1d       	adc	r25, r0
    205e:	08 95       	ret

00002060 <__cmpdi2>:
    2060:	2a 15       	cp	r18, r10
    2062:	3b 05       	cpc	r19, r11
    2064:	4c 05       	cpc	r20, r12
    2066:	5d 05       	cpc	r21, r13
    2068:	6e 05       	cpc	r22, r14
    206a:	7f 05       	cpc	r23, r15
    206c:	80 07       	cpc	r24, r16
    206e:	91 07       	cpc	r25, r17
    2070:	08 95       	ret

00002072 <__cmpdi2_s8>:
    2072:	00 24       	eor	r0, r0
    2074:	a7 fd       	sbrc	r26, 7
    2076:	00 94       	com	r0
    2078:	2a 17       	cp	r18, r26
    207a:	30 05       	cpc	r19, r0
    207c:	40 05       	cpc	r20, r0
    207e:	50 05       	cpc	r21, r0
    2080:	60 05       	cpc	r22, r0
    2082:	70 05       	cpc	r23, r0
    2084:	80 05       	cpc	r24, r0
    2086:	90 05       	cpc	r25, r0
    2088:	08 95       	ret

0000208a <_exit>:
    208a:	f8 94       	cli

0000208c <__stop_program>:
    208c:	ff cf       	rjmp	.-2      	; 0x208c <__stop_program>
