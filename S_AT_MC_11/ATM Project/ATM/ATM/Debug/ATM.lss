
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000520  00800060  000041c6  0000425a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000017b  00800580  00800580  0000477a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000477a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000047ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000700  00000000  00000000  000047e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007811  00000000  00000000  00004ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e86  00000000  00000000  0000c6f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000474f  00000000  00000000  0000e57f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016e8  00000000  00000000  00012cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c90  00000000  00000000  000143b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006280  00000000  00000000  00017048  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000600  00000000  00000000  0001d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__vector_1>
       8:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__vector_2>
       c:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <__vector_3>
      10:	0c 94 24 17 	jmp	0x2e48	; 0x2e48 <__vector_4>
      14:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <__vector_5>
      18:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__vector_6>
      1c:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__vector_7>
      20:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__vector_8>
      24:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__vector_9>
      28:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <__vector_10>
      2c:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__vector_11>
      30:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__vector_12>
      34:	0c 94 ed 1d 	jmp	0x3bda	; 0x3bda <__vector_13>
      38:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__vector_14>
      3c:	0c 94 c6 1d 	jmp	0x3b8c	; 0x3b8c <__vector_15>
      40:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__vector_16>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	79 1c       	adc	r7, r9
      56:	85 1c       	adc	r8, r5
      58:	7c 1c       	adc	r7, r12
      5a:	7f 1c       	adc	r7, r15
      5c:	82 1c       	adc	r8, r2
      5e:	79 1c       	adc	r7, r9
      60:	79 1c       	adc	r7, r9

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	15 e0       	ldi	r17, 0x05	; 5
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e6 ec       	ldi	r30, 0xC6	; 198
      76:	f1 e4       	ldi	r31, 0x41	; 65
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a0 38       	cpi	r26, 0x80	; 128
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	26 e0       	ldi	r18, 0x06	; 6
      86:	a0 e8       	ldi	r26, 0x80	; 128
      88:	b5 e0       	ldi	r27, 0x05	; 5
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	ab 3f       	cpi	r26, 0xFB	; 251
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 01 11 	call	0x2202	; 0x2202 <main>
      98:	0c 94 e1 20 	jmp	0x41c2	; 0x41c2 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <AppADMIN_searchPan>:
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
      a0:	0f 93       	push	r16
      a2:	1f 93       	push	r17
      a4:	cf 93       	push	r28
      a6:	df 93       	push	r29
      a8:	cd b7       	in	r28, 0x3d	; 61
      aa:	de b7       	in	r29, 0x3e	; 62
      ac:	2a 97       	sbiw	r28, 0x0a	; 10
      ae:	0f b6       	in	r0, 0x3f	; 63
      b0:	f8 94       	cli
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	0f be       	out	0x3f, r0	; 63
      b6:	cd bf       	out	0x3d, r28	; 61
      b8:	8c 01       	movw	r16, r24
      ba:	fe 01       	movw	r30, r28
      bc:	31 96       	adiw	r30, 0x01	; 1
      be:	8a e0       	ldi	r24, 0x0A	; 10
      c0:	df 01       	movw	r26, r30
      c2:	1d 92       	st	X+, r1
      c4:	8a 95       	dec	r24
      c6:	e9 f7       	brne	.-6      	; 0xc2 <AppADMIN_searchPan+0x22>
      c8:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <gu8_clientIndex>
      cc:	1f c0       	rjmp	.+62     	; 0x10c <AppADMIN_searchPan+0x6c>
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	01 96       	adiw	r24, 0x01	; 1
      d2:	82 95       	swap	r24
      d4:	88 0f       	add	r24, r24
      d6:	80 7e       	andi	r24, 0xE0	; 224
      d8:	4a e0       	ldi	r20, 0x0A	; 10
      da:	50 e0       	ldi	r21, 0x00	; 0
      dc:	be 01       	movw	r22, r28
      de:	6f 5f       	subi	r22, 0xFF	; 255
      e0:	7f 4f       	sbci	r23, 0xFF	; 255
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 9f 0c 	call	0x193e	; 0x193e <Eeprom_24_readPacket>
      e8:	81 30       	cpi	r24, 0x01	; 1
      ea:	c9 f4       	brne	.+50     	; 0x11e <AppADMIN_searchPan+0x7e>
      ec:	b8 01       	movw	r22, r16
      ee:	ce 01       	movw	r24, r28
      f0:	01 96       	adiw	r24, 0x01	; 1
      f2:	0e 94 9c 19 	call	0x3338	; 0x3338 <stringCompare>
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	21 f4       	brne	.+8      	; 0x102 <AppADMIN_searchPan+0x62>
      fa:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <gu8_clientIndex>
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	10 c0       	rjmp	.+32     	; 0x122 <AppADMIN_searchPan+0x82>
     102:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <gu8_clientIndex>
     106:	8f 5f       	subi	r24, 0xFF	; 255
     108:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <gu8_clientIndex>
     10c:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <gu8_clientIndex>
     110:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <gu8_registeredAccNum>
     114:	89 17       	cp	r24, r25
     116:	d8 f2       	brcs	.-74     	; 0xce <AppADMIN_searchPan+0x2e>
     118:	8f ef       	ldi	r24, 0xFF	; 255
     11a:	9f ef       	ldi	r25, 0xFF	; 255
     11c:	02 c0       	rjmp	.+4      	; 0x122 <AppADMIN_searchPan+0x82>
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	2a 96       	adiw	r28, 0x0a	; 10
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	f8 94       	cli
     128:	de bf       	out	0x3e, r29	; 62
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	cd bf       	out	0x3d, r28	; 61
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	1f 91       	pop	r17
     134:	0f 91       	pop	r16
     136:	08 95       	ret

00000138 <AppUSER_displayTemp>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to display the temperature.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_displayTemp(void)
{
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	1f 92       	push	r1
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_currentTemp=0;
     142:	19 82       	std	Y+1, r1	; 0x01
	gu8_displayFlag = DISPLAY_TEMP;
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <gu8_displayFlag>
	Lcd_clear();
     14a:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <Lcd_setCursor>
     156:	81 30       	cpi	r24, 0x01	; 1
     158:	f9 f4       	brne	.+62     	; 0x198 <AppUSER_displayTemp+0x60>
	return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
     15a:	87 ed       	ldi	r24, 0xD7	; 215
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <Lcd_printString>
     162:	81 30       	cpi	r24, 0x01	; 1
     164:	d9 f4       	brne	.+54     	; 0x19c <AppUSER_displayTemp+0x64>
	return APP_STATUS_ERROR_NOK;
	if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
     166:	ce 01       	movw	r24, r28
     168:	01 96       	adiw	r24, 0x01	; 1
     16a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LM35_readTemp>
     16e:	81 30       	cpi	r24, 0x01	; 1
     170:	59 f4       	brne	.+22     	; 0x188 <AppUSER_displayTemp+0x50>
	{
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <Lcd_setCursor>
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	91 f4       	brne	.+36     	; 0x1a0 <AppUSER_displayTemp+0x68>
		return APP_STATUS_ERROR_NOK;
		if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printDecimal>
     184:	81 30       	cpi	r24, 0x01	; 1
     186:	71 f4       	brne	.+28     	; 0x1a4 <AppUSER_displayTemp+0x6c>
		return APP_STATUS_ERROR_NOK;
	}
	if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
     188:	88 ee       	ldi	r24, 0xE8	; 232
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <Lcd_printString>
     190:	81 30       	cpi	r24, 0x01	; 1
     192:	51 f0       	breq	.+20     	; 0x1a8 <AppUSER_displayTemp+0x70>
	return APP_STATUS_ERROR_NOK;
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	09 c0       	rjmp	.+18     	; 0x1aa <AppUSER_displayTemp+0x72>
{
	uint8_t u8_currentTemp=0;
	gu8_displayFlag = DISPLAY_TEMP;
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	07 c0       	rjmp	.+14     	; 0x1aa <AppUSER_displayTemp+0x72>
	if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	05 c0       	rjmp	.+10     	; 0x1aa <AppUSER_displayTemp+0x72>
	if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
	{
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	03 c0       	rjmp	.+6      	; 0x1aa <AppUSER_displayTemp+0x72>
		if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	01 c0       	rjmp	.+2      	; 0x1aa <AppUSER_displayTemp+0x72>
	}
	if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	return APP_STATUS_ERROR_OK;
     1a8:	81 e0       	ldi	r24, 0x01	; 1
}
     1aa:	0f 90       	pop	r0
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <AppUSER_checkPan>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
     1b2:	1f 93       	push	r17
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	2a 97       	sbiw	r28, 0x0a	; 10
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	f8 94       	cli
     1c2:	de bf       	out	0x3e, r29	; 62
     1c4:	0f be       	out	0x3f, r0	; 63
     1c6:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
     1c8:	fe 01       	movw	r30, r28
     1ca:	31 96       	adiw	r30, 0x01	; 1
     1cc:	8a e0       	ldi	r24, 0x0A	; 10
     1ce:	df 01       	movw	r26, r30
     1d0:	1d 92       	st	X+, r1
     1d2:	8a 95       	dec	r24
     1d4:	e9 f7       	brne	.-6      	; 0x1d0 <AppUSER_checkPan+0x1e>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     1d6:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <gu8_clientIndex>
     1da:	1c c0       	rjmp	.+56     	; 0x214 <AppUSER_checkPan+0x62>
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	01 96       	adiw	r24, 0x01	; 1
     1e0:	82 95       	swap	r24
     1e2:	88 0f       	add	r24, r24
     1e4:	80 7e       	andi	r24, 0xE0	; 224
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     1e6:	4a e0       	ldi	r20, 0x0A	; 10
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	be 01       	movw	r22, r28
     1ec:	6f 5f       	subi	r22, 0xFF	; 255
     1ee:	7f 4f       	sbci	r23, 0xFF	; 255
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 9f 0c 	call	0x193e	; 0x193e <Eeprom_24_readPacket>
     1f6:	81 30       	cpi	r24, 0x01	; 1
     1f8:	81 f5       	brne	.+96     	; 0x25a <AppUSER_checkPan+0xa8>
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
     1fa:	69 eb       	ldi	r22, 0xB9	; 185
     1fc:	75 e0       	ldi	r23, 0x05	; 5
     1fe:	ce 01       	movw	r24, r28
     200:	01 96       	adiw	r24, 0x01	; 1
     202:	0e 94 9c 19 	call	0x3338	; 0x3338 <stringCompare>
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	69 f0       	breq	.+26     	; 0x224 <AppUSER_checkPan+0x72>
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     20a:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <gu8_clientIndex>
     20e:	8f 5f       	subi	r24, 0xFF	; 255
     210:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <gu8_clientIndex>
     214:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <gu8_clientIndex>
     218:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <gu8_registeredAccNum>
     21c:	89 17       	cp	r24, r25
     21e:	f0 f2       	brcs	.-68     	; 0x1dc <AppUSER_checkPan+0x2a>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	01 c0       	rjmp	.+2      	; 0x226 <AppUSER_checkPan+0x74>
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
		{
			u8_panFound = 1;
     224:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
	
	if(u8_panFound == 1)
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	d1 f4       	brne	.+52     	; 0x25e <AppUSER_checkPan+0xac>
	{
		uint8_t u8_clientBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     22a:	10 91 8d 05 	lds	r17, 0x058D	; 0x80058d <gu8_clientIndex>
     22e:	12 95       	swap	r17
     230:	11 0f       	add	r17, r17
     232:	10 7e       	andi	r17, 0xE0	; 224
     234:	10 5d       	subi	r17, 0xD0	; 208
			
		stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
     236:	6d e9       	ldi	r22, 0x9D	; 157
     238:	75 e0       	ldi	r23, 0x05	; 5
     23a:	ce 01       	movw	r24, r28
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	0e 94 db 19 	call	0x33b6	; 0x33b6 <stringCopy>
			
		if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     242:	48 e0       	ldi	r20, 0x08	; 8
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	67 ea       	ldi	r22, 0xA7	; 167
     248:	75 e0       	ldi	r23, 0x05	; 5
     24a:	81 2f       	mov	r24, r17
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 9f 0c 	call	0x193e	; 0x193e <Eeprom_24_readPacket>
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	31 f0       	breq	.+12     	; 0x262 <AppUSER_checkPan+0xb0>
			return APP_STATUS_ERROR_NOK;
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	05 c0       	rjmp	.+10     	; 0x264 <AppUSER_checkPan+0xb2>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	03 c0       	rjmp	.+6      	; 0x264 <AppUSER_checkPan+0xb2>
			return APP_STATUS_ERROR_NOK;
			
		return APP_STATUS_PAN_FOUND;
	}

	return APP_STATUS_PAN_NOT_FOUND;
     25e:	8b e0       	ldi	r24, 0x0B	; 11
     260:	01 c0       	rjmp	.+2      	; 0x264 <AppUSER_checkPan+0xb2>
		stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
			
		if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
			
		return APP_STATUS_PAN_FOUND;
     262:	8a e0       	ldi	r24, 0x0A	; 10
	}

	return APP_STATUS_PAN_NOT_FOUND;
}
     264:	2a 96       	adiw	r28, 0x0a	; 10
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	f8 94       	cli
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	cd bf       	out	0x3d, r28	; 61
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	1f 91       	pop	r17
     276:	08 95       	ret

00000278 <AppUSER_ReportKeypad>:
* Parameters (out): pu8_key - Pointer to variable to hold the button pressed
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the value pressed in the keypad.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_ReportKeypad(uint8_t* pu8_key)
{
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	ec 01       	movw	r28, r24
	static uint8_t u8_index = 0;
	static uint8_t sau8_data[10]={0};
	enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&sau8_data[u8_index]);
     27e:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <u8_index.2294>
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	8f 57       	subi	r24, 0x7F	; 127
     286:	9a 4f       	sbci	r25, 0xFA	; 250
     288:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <Keypad_readKey>
		
	if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
     28c:	86 30       	cpi	r24, 0x06	; 6
     28e:	09 f0       	breq	.+2      	; 0x292 <AppUSER_ReportKeypad+0x1a>
     290:	74 c0       	rjmp	.+232    	; 0x37a <AppUSER_ReportKeypad+0x102>
	{
		if(sau8_data[u8_index] == '=')
     292:	60 91 8b 05 	lds	r22, 0x058B	; 0x80058b <u8_index.2294>
     296:	86 2f       	mov	r24, r22
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	fc 01       	movw	r30, r24
     29c:	ef 57       	subi	r30, 0x7F	; 127
     29e:	fa 4f       	sbci	r31, 0xFA	; 250
     2a0:	20 81       	ld	r18, Z
     2a2:	2d 33       	cpi	r18, 0x3D	; 61
     2a4:	09 f5       	brne	.+66     	; 0x2e8 <AppUSER_ReportKeypad+0x70>
		{
			sau8_data[u8_index] = '\0';
     2a6:	fc 01       	movw	r30, r24
     2a8:	ef 57       	subi	r30, 0x7F	; 127
     2aa:	fa 4f       	sbci	r31, 0xFA	; 250
     2ac:	10 82       	st	Z, r1
			u8_index = 0;
     2ae:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <u8_index.2294>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     2b2:	66 e0       	ldi	r22, 0x06	; 6
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <Lcd_setCursor>
     2ba:	81 30       	cpi	r24, 0x01	; 1
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <AppUSER_ReportKeypad+0x48>
     2be:	5f c0       	rjmp	.+190    	; 0x37e <AppUSER_ReportKeypad+0x106>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
     2c0:	87 ef       	ldi	r24, 0xF7	; 247
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <Lcd_printString>
     2c8:	81 30       	cpi	r24, 0x01	; 1
     2ca:	09 f0       	breq	.+2      	; 0x2ce <AppUSER_ReportKeypad+0x56>
     2cc:	5a c0       	rjmp	.+180    	; 0x382 <AppUSER_ReportKeypad+0x10a>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     2ce:	66 e0       	ldi	r22, 0x06	; 6
     2d0:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <Lcd_setCursor>
     2d4:	81 30       	cpi	r24, 0x01	; 1
     2d6:	09 f0       	breq	.+2      	; 0x2da <AppUSER_ReportKeypad+0x62>
     2d8:	56 c0       	rjmp	.+172    	; 0x386 <AppUSER_ReportKeypad+0x10e>
			return APP_STATUS_ERROR_NOK;
			stringCopy(sau8_data, pu8_key);
     2da:	be 01       	movw	r22, r28
     2dc:	81 e8       	ldi	r24, 0x81	; 129
     2de:	95 e0       	ldi	r25, 0x05	; 5
     2e0:	0e 94 db 19 	call	0x33b6	; 0x33b6 <stringCopy>
			return APP_STATUS_KPD_NUM;
     2e4:	87 e0       	ldi	r24, 0x07	; 7
     2e6:	5a c0       	rjmp	.+180    	; 0x39c <AppUSER_ReportKeypad+0x124>
		}else if(sau8_data[u8_index] == '-')
     2e8:	2d 32       	cpi	r18, 0x2D	; 45
     2ea:	b1 f4       	brne	.+44     	; 0x318 <AppUSER_ReportKeypad+0xa0>
		{
			u8_index--;
     2ec:	ef ef       	ldi	r30, 0xFF	; 255
     2ee:	e6 0f       	add	r30, r22
     2f0:	e0 93 8b 05 	sts	0x058B, r30	; 0x80058b <u8_index.2294>
			sau8_data[u8_index] = '\0';
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	ef 57       	subi	r30, 0x7F	; 127
     2f8:	fa 4f       	sbci	r31, 0xFA	; 250
     2fa:	10 82       	st	Z, r1
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     2fc:	6b 5f       	subi	r22, 0xFB	; 251
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <Lcd_setCursor>
     304:	81 30       	cpi	r24, 0x01	; 1
     306:	09 f0       	breq	.+2      	; 0x30a <AppUSER_ReportKeypad+0x92>
     308:	40 c0       	rjmp	.+128    	; 0x38a <AppUSER_ReportKeypad+0x112>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_printChar(' ') != LCD_STATUS_ERROR_OK)
     30a:	80 e2       	ldi	r24, 0x20	; 32
     30c:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <Lcd_printChar>
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	e9 f1       	breq	.+122    	; 0x38e <AppUSER_ReportKeypad+0x116>
			return APP_STATUS_ERROR_NOK;
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	42 c0       	rjmp	.+132    	; 0x39c <AppUSER_ReportKeypad+0x124>
		}else
		{
			if(u8_index!=10)
     318:	6a 30       	cpi	r22, 0x0A	; 10
     31a:	49 f1       	breq	.+82     	; 0x36e <AppUSER_ReportKeypad+0xf6>
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     31c:	6a 5f       	subi	r22, 0xFA	; 250
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <Lcd_setCursor>
     324:	81 30       	cpi	r24, 0x01	; 1
     326:	a9 f5       	brne	.+106    	; 0x392 <AppUSER_ReportKeypad+0x11a>
					return APP_STATUS_ERROR_NOK;
				if(Kpd_enablePass == 0)
     328:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <Kpd_enablePass>
     32c:	81 11       	cpse	r24, r1
     32e:	0b c0       	rjmp	.+22     	; 0x346 <AppUSER_ReportKeypad+0xce>
				{
					if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
     330:	e0 91 8b 05 	lds	r30, 0x058B	; 0x80058b <u8_index.2294>
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	ef 57       	subi	r30, 0x7F	; 127
     338:	fa 4f       	sbci	r31, 0xFA	; 250
     33a:	80 81       	ld	r24, Z
     33c:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <Lcd_printChar>
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	49 f5       	brne	.+82     	; 0x396 <AppUSER_ReportKeypad+0x11e>
     344:	0d c0       	rjmp	.+26     	; 0x360 <AppUSER_ReportKeypad+0xe8>
						return APP_STATUS_ERROR_NOK;
				}
				else
				{
					if(u8_index < 4)
     346:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <u8_index.2294>
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	30 f4       	brcc	.+12     	; 0x35a <AppUSER_ReportKeypad+0xe2>
					{
						if(Lcd_printChar('*') != LCD_STATUS_ERROR_OK)
     34e:	8a e2       	ldi	r24, 0x2A	; 42
     350:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <Lcd_printChar>
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	09 f5       	brne	.+66     	; 0x39a <AppUSER_ReportKeypad+0x122>
     358:	03 c0       	rjmp	.+6      	; 0x360 <AppUSER_ReportKeypad+0xe8>
							return APP_STATUS_ERROR_NOK;
					}else
					{
						u8_index--;
     35a:	81 50       	subi	r24, 0x01	; 1
     35c:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <u8_index.2294>
					}
				}
				u8_index++;
     360:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <u8_index.2294>
     364:	8f 5f       	subi	r24, 0xFF	; 255
     366:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <u8_index.2294>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	17 c0       	rjmp	.+46     	; 0x39c <AppUSER_ReportKeypad+0x124>
					}
				}
				u8_index++;
			}else
			{
				sau8_data[u8_index] = '\0';
     36e:	fc 01       	movw	r30, r24
     370:	ef 57       	subi	r30, 0x7F	; 127
     372:	fa 4f       	sbci	r31, 0xFA	; 250
     374:	10 82       	st	Z, r1
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	11 c0       	rjmp	.+34     	; 0x39c <AppUSER_ReportKeypad+0x124>
			}
				
		}
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	0f c0       	rjmp	.+30     	; 0x39c <AppUSER_ReportKeypad+0x124>
		if(sau8_data[u8_index] == '=')
		{
			sau8_data[u8_index] = '\0';
			u8_index = 0;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	0d c0       	rjmp	.+26     	; 0x39c <AppUSER_ReportKeypad+0x124>
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	0b c0       	rjmp	.+22     	; 0x39c <AppUSER_ReportKeypad+0x124>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	09 c0       	rjmp	.+18     	; 0x39c <AppUSER_ReportKeypad+0x124>
		}else if(sau8_data[u8_index] == '-')
		{
			u8_index--;
			sau8_data[u8_index] = '\0';
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	07 c0       	rjmp	.+14     	; 0x39c <AppUSER_ReportKeypad+0x124>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	05 c0       	rjmp	.+10     	; 0x39c <AppUSER_ReportKeypad+0x124>
		}else
		{
			if(u8_index!=10)
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	03 c0       	rjmp	.+6      	; 0x39c <AppUSER_ReportKeypad+0x124>
				if(Kpd_enablePass == 0)
				{
					if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	01 c0       	rjmp	.+2      	; 0x39c <AppUSER_ReportKeypad+0x124>
				else
				{
					if(u8_index < 4)
					{
						if(Lcd_printChar('*') != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
     39a:	80 e0       	ldi	r24, 0x00	; 0
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
}
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <AppUSER_startTransaction>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startTransaction(void)
{
     3a2:	4f 92       	push	r4
     3a4:	5f 92       	push	r5
     3a6:	6f 92       	push	r6
     3a8:	7f 92       	push	r7
     3aa:	8f 92       	push	r8
     3ac:	9f 92       	push	r9
     3ae:	af 92       	push	r10
     3b0:	bf 92       	push	r11
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	1f 93       	push	r17
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
     3c4:	28 97       	sbiw	r28, 0x08	; 8
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	de bf       	out	0x3e, r29	; 62
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_inputKPD[8] = {0};
     3d0:	fe 01       	movw	r30, r28
     3d2:	31 96       	adiw	r30, 0x01	; 1
     3d4:	88 e0       	ldi	r24, 0x08	; 8
     3d6:	df 01       	movw	r26, r30
     3d8:	1d 92       	st	X+, r1
     3da:	8a 95       	dec	r24
     3dc:	e9 f7       	brne	.-6      	; 0x3d8 <AppUSER_startTransaction+0x36>
	enuApp_Status_t KeypdaStatus = 0;
	float32_t f32_balance = stringToFloat(gstr_clientdata.au8_Balance);
     3de:	87 ea       	ldi	r24, 0xA7	; 167
     3e0:	95 e0       	ldi	r25, 0x05	; 5
     3e2:	0e 94 3a 1a 	call	0x3474	; 0x3474 <stringToFloat>
     3e6:	2b 01       	movw	r4, r22
     3e8:	3c 01       	movw	r6, r24
	float32_t f32_maxAmount = stringToFloat(gau8_maxAmount);
     3ea:	8e e8       	ldi	r24, 0x8E	; 142
     3ec:	95 e0       	ldi	r25, 0x05	; 5
     3ee:	0e 94 3a 1a 	call	0x3474	; 0x3474 <stringToFloat>
     3f2:	4b 01       	movw	r8, r22
     3f4:	5c 01       	movw	r10, r24
	float32_t f32_amount = 0;
	while(1)
	{
		EmptyString(au8_inputKPD);
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	0e 94 cf 19 	call	0x339e	; 0x339e <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     3fe:	ce 01       	movw	r24, r28
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	0e 94 3c 01 	call	0x278	; 0x278 <AppUSER_ReportKeypad>
		
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     406:	87 30       	cpi	r24, 0x07	; 7
     408:	09 f0       	breq	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     40a:	b6 c0       	rjmp	.+364    	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
		{
			
			f32_amount = stringToFloat(au8_inputKPD);
     40c:	ce 01       	movw	r24, r28
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	0e 94 3a 1a 	call	0x3474	; 0x3474 <stringToFloat>
     414:	6b 01       	movw	r12, r22
     416:	7c 01       	movw	r14, r24
			
			if(f32_maxAmount < f32_amount)
     418:	9b 01       	movw	r18, r22
     41a:	ac 01       	movw	r20, r24
     41c:	c5 01       	movw	r24, r10
     41e:	b4 01       	movw	r22, r8
     420:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__cmpsf2>
     424:	88 23       	and	r24, r24
     426:	0c f5       	brge	.+66     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			{
				Lcd_printLCD((uint8_t*)"   Max Amount", (uint8_t*)"    Exceeded");
     428:	6a ef       	ldi	r22, 0xFA	; 250
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	87 e0       	ldi	r24, 0x07	; 7
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
				
				Delay_ms(500);
     434:	24 ef       	ldi	r18, 0xF4	; 244
     436:	31 e0       	ldi	r19, 0x01	; 1
     438:	40 e0       	ldi	r20, 0x00	; 0
     43a:	50 e0       	ldi	r21, 0x00	; 0
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
				
				Lcd_clear();
     448:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <Lcd_setCursor>
     454:	81 30       	cpi	r24, 0x01	; 1
     456:	09 f0       	breq	.+2      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     458:	9a c0       	rjmp	.+308    	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     45a:	85 e1       	ldi	r24, 0x15	; 21
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <Lcd_printString>
     462:	81 30       	cpi	r24, 0x01	; 1
     464:	09 f4       	brne	.+2      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     466:	88 c0       	rjmp	.+272    	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
     468:	94 c0       	rjmp	.+296    	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
				return APP_STATUS_ERROR_NOK;
			}else
			{
			Lcd_printLCD((uint8_t*)"  Please Wait", (uint8_t*)" Processing....");
     46a:	62 e2       	ldi	r22, 0x22	; 34
     46c:	71 e0       	ldi	r23, 0x01	; 1
     46e:	82 e3       	ldi	r24, 0x32	; 50
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
				
			if(f32_balance < f32_amount)
     476:	a7 01       	movw	r20, r14
     478:	96 01       	movw	r18, r12
     47a:	c3 01       	movw	r24, r6
     47c:	b2 01       	movw	r22, r4
     47e:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__cmpsf2>
     482:	88 23       	and	r24, r24
     484:	0c f5       	brge	.+66     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
			{
				Lcd_printLCD((uint8_t*)"  Insufficient", (uint8_t*)"      Fund");
     486:	60 e4       	ldi	r22, 0x40	; 64
     488:	71 e0       	ldi	r23, 0x01	; 1
     48a:	8b e4       	ldi	r24, 0x4B	; 75
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
					
				Delay_ms(500);
     492:	24 ef       	ldi	r18, 0xF4	; 244
     494:	31 e0       	ldi	r19, 0x01	; 1
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
					
				Lcd_clear();
     4a6:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <Lcd_setCursor>
     4b2:	81 30       	cpi	r24, 0x01	; 1
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     4b6:	6f c0       	rjmp	.+222    	; 0x596 <__EEPROM_REGION_LENGTH__+0x196>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     4b8:	85 e1       	ldi	r24, 0x15	; 21
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <Lcd_printString>
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
     4c4:	59 c0       	rjmp	.+178    	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
     4c6:	69 c0       	rjmp	.+210    	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
				return APP_STATUS_ERROR_NOK;
				}else/****************** Transaction Successfull ******************/
				{
					Lcd_printLCD((uint8_t*)"   Successful", (uint8_t*)"  Transaction");
     4c8:	6a e5       	ldi	r22, 0x5A	; 90
     4ca:	71 e0       	ldi	r23, 0x01	; 1
     4cc:	88 e6       	ldi	r24, 0x68	; 104
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
						
					Motor_run(MOTOR_CASH_ID, 100, MOTOR_DIR_CLK_WISE);
     4d4:	40 e0       	ldi	r20, 0x00	; 0
     4d6:	64 e6       	ldi	r22, 0x64	; 100
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <Motor_run>
					Delay_ms(1000);
     4de:	28 ee       	ldi	r18, 0xE8	; 232
     4e0:	33 e0       	ldi	r19, 0x03	; 3
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
					Motor_stop(MOTOR_CASH_ID);
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <Motor_stop>
					gu8_USER_Mode_State = USER_IDLE;
     4f8:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <gu8_USER_Mode_State>
						
					f32_balance -= f32_amount;
     4fc:	a7 01       	movw	r20, r14
     4fe:	96 01       	movw	r18, r12
     500:	c3 01       	movw	r24, r6
     502:	b2 01       	movw	r22, r4
     504:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__subsf3>
     508:	6b 01       	movw	r12, r22
     50a:	7c 01       	movw	r14, r24
					EmptyString(gstr_clientdata.au8_Balance);
     50c:	87 ea       	ldi	r24, 0xA7	; 167
     50e:	95 e0       	ldi	r25, 0x05	; 5
     510:	0e 94 cf 19 	call	0x339e	; 0x339e <EmptyString>
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
     514:	47 ea       	ldi	r20, 0xA7	; 167
     516:	55 e0       	ldi	r21, 0x05	; 5
     518:	c7 01       	movw	r24, r14
     51a:	b6 01       	movw	r22, r12
     51c:	0e 94 b8 1a 	call	0x3570	; 0x3570 <floatToString>
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     520:	10 91 8d 05 	lds	r17, 0x058D	; 0x80058d <gu8_clientIndex>
     524:	12 95       	swap	r17
     526:	11 0f       	add	r17, r17
     528:	10 7e       	andi	r17, 0xE0	; 224
     52a:	10 5d       	subi	r17, 0xD0	; 208
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     52c:	87 ea       	ldi	r24, 0xA7	; 167
     52e:	95 e0       	ldi	r25, 0x05	; 5
     530:	0e 94 90 19 	call	0x3320	; 0x3320 <stringLength>
					f32_balance -= f32_amount;
					EmptyString(gstr_clientdata.au8_Balance);
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
     534:	48 2f       	mov	r20, r24
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	67 ea       	ldi	r22, 0xA7	; 167
     53a:	75 e0       	ldi	r23, 0x05	; 5
     53c:	81 2f       	mov	r24, r17
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 c6 0b 	call	0x178c	; 0x178c <Eeprom_24_writePacket>
     544:	81 30       	cpi	r24, 0x01	; 1
     546:	59 f5       	brne	.+86     	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
						
					Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
     548:	67 ea       	ldi	r22, 0xA7	; 167
     54a:	75 e0       	ldi	r23, 0x05	; 5
     54c:	86 e7       	ldi	r24, 0x76	; 118
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
					Delay_ms(1000);
     554:	28 ee       	ldi	r18, 0xE8	; 232
     556:	33 e0       	ldi	r19, 0x03	; 3
     558:	40 e0       	ldi	r20, 0x00	; 0
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     568:	65 e8       	ldi	r22, 0x85	; 133
     56a:	71 e0       	ldi	r23, 0x01	; 1
     56c:	84 e9       	ldi	r24, 0x94	; 148
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
						
					return APP_STATUS_ERROR_OK;
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	14 c0       	rjmp	.+40     	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
				}
			}
		}
		Delay_ms(200);
     578:	28 ec       	ldi	r18, 0xC8	; 200
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
	}
     58c:	34 cf       	rjmp	.-408    	; 0x3f6 <AppUSER_startTransaction+0x54>
				
				Delay_ms(500);
				
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	07 c0       	rjmp	.+14     	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	05 c0       	rjmp	.+10     	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
					
				Delay_ms(500);
					
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	03 c0       	rjmp	.+6      	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     59e:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
		Delay_ms(200);
	}
}
     5a0:	28 96       	adiw	r28, 0x08	; 8
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	bf 90       	pop	r11
     5bc:	af 90       	pop	r10
     5be:	9f 90       	pop	r9
     5c0:	8f 90       	pop	r8
     5c2:	7f 90       	pop	r7
     5c4:	6f 90       	pop	r6
     5c6:	5f 90       	pop	r5
     5c8:	4f 90       	pop	r4
     5ca:	08 95       	ret

000005cc <AppUSER_checkPin>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the user's input pin if right or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPin(void)
{
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	00 d0       	rcall	.+0      	; 0x5d4 <AppUSER_checkPin+0x8>
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <AppUSER_checkPin+0xa>
     5d6:	1f 92       	push	r1
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_inputKPD[5] = {0};
     5dc:	fe 01       	movw	r30, r28
     5de:	31 96       	adiw	r30, 0x01	; 1
     5e0:	85 e0       	ldi	r24, 0x05	; 5
     5e2:	df 01       	movw	r26, r30
     5e4:	1d 92       	st	X+, r1
     5e6:	8a 95       	dec	r24
     5e8:	e9 f7       	brne	.-6      	; 0x5e4 <AppUSER_checkPin+0x18>
	enuApp_Status_t KeypdaStatus = 0;
	Kpd_enablePass = 1;
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <Kpd_enablePass>
	uint8_t u8_loopCounter = 0;
     5f0:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		EmptyString(au8_inputKPD);
     5f2:	ce 01       	movw	r24, r28
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	0e 94 cf 19 	call	0x339e	; 0x339e <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     5fa:	ce 01       	movw	r24, r28
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	0e 94 3c 01 	call	0x278	; 0x278 <AppUSER_ReportKeypad>
			
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     602:	87 30       	cpi	r24, 0x07	; 7
     604:	09 f0       	breq	.+2      	; 0x608 <AppUSER_checkPin+0x3c>
     606:	57 c0       	rjmp	.+174    	; 0x6b6 <AppUSER_checkPin+0xea>
		{
			u8_loopCounter++;
     608:	1f 5f       	subi	r17, 0xFF	; 255
			if(stringCompare(au8_inputKPD, gstr_userCardData.au8_pinNum) != 1)
     60a:	63 ec       	ldi	r22, 0xC3	; 195
     60c:	75 e0       	ldi	r23, 0x05	; 5
     60e:	ce 01       	movw	r24, r28
     610:	01 96       	adiw	r24, 0x01	; 1
     612:	0e 94 9c 19 	call	0x3338	; 0x3338 <stringCompare>
     616:	81 30       	cpi	r24, 0x01	; 1
     618:	09 f4       	brne	.+2      	; 0x61c <AppUSER_checkPin+0x50>
     61a:	43 c0       	rjmp	.+134    	; 0x6a2 <AppUSER_checkPin+0xd6>
			{
				if(u8_loopCounter == MAX_PIN_TRIAL)
     61c:	13 30       	cpi	r17, 0x03	; 3
     61e:	11 f5       	brne	.+68     	; 0x664 <AppUSER_checkPin+0x98>
				{
					Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)" ");
     620:	68 ef       	ldi	r22, 0xF8	; 248
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	82 ea       	ldi	r24, 0xA2	; 162
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
					Delay_ms(1000);
     62c:	28 ee       	ldi	r18, 0xE8	; 232
     62e:	33 e0       	ldi	r19, 0x03	; 3
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
					Lcd_printLCD((uint8_t*)"Please Contact", (uint8_t*)"Customer Service");
     640:	61 eb       	ldi	r22, 0xB1	; 177
     642:	71 e0       	ldi	r23, 0x01	; 1
     644:	82 ec       	ldi	r24, 0xC2	; 194
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
					Delay_ms(1000);
     64c:	28 ee       	ldi	r18, 0xE8	; 232
     64e:	33 e0       	ldi	r19, 0x03	; 3
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
					return APP_STATUS_PIN_NOT_CORRECT;
     660:	89 e0       	ldi	r24, 0x09	; 9
     662:	37 c0       	rjmp	.+110    	; 0x6d2 <AppUSER_checkPin+0x106>
				}
				Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)"   Try Again");
     664:	61 ed       	ldi	r22, 0xD1	; 209
     666:	71 e0       	ldi	r23, 0x01	; 1
     668:	82 ea       	ldi	r24, 0xA2	; 162
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
				Delay_ms(500);
     670:	24 ef       	ldi	r18, 0xF4	; 244
     672:	31 e0       	ldi	r19, 0x01	; 1
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
					
				Lcd_clear();
     684:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <Lcd_setCursor>
     690:	81 30       	cpi	r24, 0x01	; 1
     692:	e1 f4       	brne	.+56     	; 0x6cc <AppUSER_checkPin+0x100>
					return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     694:	8e ed       	ldi	r24, 0xDE	; 222
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <Lcd_printString>
     69c:	81 30       	cpi	r24, 0x01	; 1
     69e:	59 f0       	breq	.+22     	; 0x6b6 <AppUSER_checkPin+0xea>
     6a0:	17 c0       	rjmp	.+46     	; 0x6d0 <AppUSER_checkPin+0x104>
					return APP_STATUS_ERROR_NOK;
			}else
			{
				Lcd_printLCD((uint8_t*)"  Please Wait", (uint8_t*)" Processing....");
     6a2:	62 e2       	ldi	r22, 0x22	; 34
     6a4:	71 e0       	ldi	r23, 0x01	; 1
     6a6:	82 e3       	ldi	r24, 0x32	; 50
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
					Kpd_enablePass = 0;
     6ae:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <Kpd_enablePass>
				return APP_STATUS_PIN_CORRECT;
     6b2:	88 e0       	ldi	r24, 0x08	; 8
     6b4:	0e c0       	rjmp	.+28     	; 0x6d2 <AppUSER_checkPin+0x106>
			}
		}
		Delay_ms(200);
     6b6:	28 ec       	ldi	r18, 0xC8	; 200
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
	}
     6ca:	93 cf       	rjmp	.-218    	; 0x5f2 <AppUSER_checkPin+0x26>
				Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)"   Try Again");
				Delay_ms(500);
					
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <AppUSER_checkPin+0x106>
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     6d0:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		Delay_ms(200);
	}
	Kpd_enablePass = 0;
}
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	08 95       	ret

000006e4 <AppUSER_startProcess>:
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to start processing the card.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
     6e4:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <Lcd_setCursor>
     6f0:	81 30       	cpi	r24, 0x01	; 1
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <AppUSER_startProcess+0x12>
     6f4:	4c c0       	rjmp	.+152    	; 0x78e <AppUSER_startProcess+0xaa>
	return APP_STATUS_ERROR_NOK;
	enuApp_Status_t PAN_status = AppUSER_checkPan();
     6f6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <AppUSER_checkPan>
	if(PAN_status == APP_STATUS_PAN_NOT_FOUND)
     6fa:	8b 30       	cpi	r24, 0x0B	; 11
     6fc:	41 f4       	brne	.+16     	; 0x70e <AppUSER_startProcess+0x2a>
	{
		Lcd_printLCD((uint8_t*)"Your Card is not", (uint8_t*)"in the Database");
     6fe:	6d ee       	ldi	r22, 0xED	; 237
     700:	71 e0       	ldi	r23, 0x01	; 1
     702:	8d ef       	ldi	r24, 0xFD	; 253
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
		return APP_STATUS_PAN_NOT_FOUND;
     70a:	8b e0       	ldi	r24, 0x0B	; 11
     70c:	08 95       	ret
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     70e:	8e ed       	ldi	r24, 0xDE	; 222
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <Lcd_printString>
     716:	81 30       	cpi	r24, 0x01	; 1
     718:	e1 f5       	brne	.+120    	; 0x792 <AppUSER_startProcess+0xae>
		return APP_STATUS_ERROR_NOK;
	enuApp_Status_t PIN_status = AppUSER_checkPin();
     71a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <AppUSER_checkPin>
	if(PIN_status == APP_STATUS_PIN_NOT_CORRECT)
     71e:	89 30       	cpi	r24, 0x09	; 9
     720:	d1 f1       	breq	.+116    	; 0x796 <AppUSER_startProcess+0xb2>
	{
		return APP_STATUS_PIN_NOT_CORRECT;
	}else if(PIN_status != APP_STATUS_PIN_CORRECT)
     722:	88 30       	cpi	r24, 0x08	; 8
     724:	d1 f5       	brne	.+116    	; 0x79a <AppUSER_startProcess+0xb6>
		return APP_STATUS_ERROR_NOK;
	
	
	Lcd_printLCD((uint8_t*)"    Welcome", (uint8_t*)"    Customer");
     726:	6e e0       	ldi	r22, 0x0E	; 14
     728:	72 e0       	ldi	r23, 0x02	; 2
     72a:	8b e1       	ldi	r24, 0x1B	; 27
     72c:	92 e0       	ldi	r25, 0x02	; 2
     72e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
	Delay_ms(2000);
     732:	20 ed       	ldi	r18, 0xD0	; 208
     734:	37 e0       	ldi	r19, 0x07	; 7
     736:	40 e0       	ldi	r20, 0x00	; 0
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
	
	Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
     746:	67 ea       	ldi	r22, 0xA7	; 167
     748:	75 e0       	ldi	r23, 0x05	; 5
     74a:	86 e7       	ldi	r24, 0x76	; 118
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
	Delay_ms(2000);
     752:	20 ed       	ldi	r18, 0xD0	; 208
     754:	37 e0       	ldi	r19, 0x07	; 7
     756:	40 e0       	ldi	r20, 0x00	; 0
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
	
	Lcd_clear();
     766:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <Lcd_setCursor>
     772:	81 30       	cpi	r24, 0x01	; 1
     774:	a1 f4       	brne	.+40     	; 0x79e <AppUSER_startProcess+0xba>
		return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     776:	85 e1       	ldi	r24, 0x15	; 21
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <Lcd_printString>
     77e:	81 30       	cpi	r24, 0x01	; 1
     780:	81 f4       	brne	.+32     	; 0x7a2 <AppUSER_startProcess+0xbe>
		return APP_STATUS_ERROR_NOK;
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
     782:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <AppUSER_startTransaction>
     786:	81 30       	cpi	r24, 0x01	; 1
     788:	69 f0       	breq	.+26     	; 0x7a4 <AppUSER_startProcess+0xc0>
		return APP_STATUS_ERROR_NOK;
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	08 95       	ret
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	08 95       	ret
		Lcd_printLCD((uint8_t*)"Your Card is not", (uint8_t*)"in the Database");
		return APP_STATUS_PAN_NOT_FOUND;
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	08 95       	ret
	enuApp_Status_t PIN_status = AppUSER_checkPin();
	if(PIN_status == APP_STATUS_PIN_NOT_CORRECT)
	{
		return APP_STATUS_PIN_NOT_CORRECT;
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	08 95       	ret
	}else if(PIN_status != APP_STATUS_PIN_CORRECT)
		return APP_STATUS_ERROR_NOK;
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	08 95       	ret
	Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
	Delay_ms(2000);
	
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	08 95       	ret
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     7a2:	80 e0       	ldi	r24, 0x00	; 0
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     7a4:	08 95       	ret

000007a6 <AppUSER_getCardData>:
* Parameters (out): pstr_CardData - Structure to save the card's data in.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the Card data Struct
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_getCardData(strCardData_t* pstr_CardData, uint8_t *pu8_dataString)
{
     7a6:	ac 01       	movw	r20, r24
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
     7a8:	20 e0       	ldi	r18, 0x00	; 0
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	0a c0       	rjmp	.+20     	; 0x7c2 <AppUSER_getCardData+0x1c>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     7ae:	fb 01       	movw	r30, r22
     7b0:	e9 0f       	add	r30, r25
     7b2:	f1 1d       	adc	r31, r1
     7b4:	80 81       	ld	r24, Z
     7b6:	fa 01       	movw	r30, r20
     7b8:	e2 0f       	add	r30, r18
     7ba:	f1 1d       	adc	r31, r1
     7bc:	80 83       	st	Z, r24
		u8_dataIndex++;
     7be:	2f 5f       	subi	r18, 0xFF	; 255
{
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     7c0:	9f 5f       	subi	r25, 0xFF	; 255
     7c2:	9a 30       	cpi	r25, 0x0A	; 10
     7c4:	a0 f3       	brcs	.-24     	; 0x7ae <AppUSER_getCardData+0x8>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
     7c6:	fa 01       	movw	r30, r20
     7c8:	e2 0f       	add	r30, r18
     7ca:	f1 1d       	adc	r31, r1
     7cc:	10 82       	st	Z, r1
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
     7ce:	20 e0       	ldi	r18, 0x00	; 0
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     7d0:	9b e0       	ldi	r25, 0x0B	; 11
     7d2:	0a c0       	rjmp	.+20     	; 0x7e8 <AppUSER_getCardData+0x42>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     7d4:	fb 01       	movw	r30, r22
     7d6:	e9 0f       	add	r30, r25
     7d8:	f1 1d       	adc	r31, r1
     7da:	80 81       	ld	r24, Z
     7dc:	fa 01       	movw	r30, r20
     7de:	e2 0f       	add	r30, r18
     7e0:	f1 1d       	adc	r31, r1
     7e2:	82 87       	std	Z+10, r24	; 0x0a
		u8_dataIndex++;
     7e4:	2f 5f       	subi	r18, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     7e6:	9f 5f       	subi	r25, 0xFF	; 255
     7e8:	94 31       	cpi	r25, 0x14	; 20
     7ea:	a0 f3       	brcs	.-24     	; 0x7d4 <AppUSER_getCardData+0x2e>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
     7ec:	fa 01       	movw	r30, r20
     7ee:	e2 0f       	add	r30, r18
     7f0:	f1 1d       	adc	r31, r1
     7f2:	12 86       	std	Z+10, r1	; 0x0a
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
     7f4:	90 e0       	ldi	r25, 0x00	; 0
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     7f6:	85 e1       	ldi	r24, 0x15	; 21
     7f8:	0a c0       	rjmp	.+20     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     7fa:	fb 01       	movw	r30, r22
     7fc:	e8 0f       	add	r30, r24
     7fe:	f1 1d       	adc	r31, r1
     800:	20 81       	ld	r18, Z
     802:	fa 01       	movw	r30, r20
     804:	e9 0f       	add	r30, r25
     806:	f1 1d       	adc	r31, r1
     808:	24 8b       	std	Z+20, r18	; 0x14
		u8_dataIndex++;
     80a:	9f 5f       	subi	r25, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     80c:	8f 5f       	subi	r24, 0xFF	; 255
     80e:	89 31       	cpi	r24, 0x19	; 25
     810:	a0 f3       	brcs	.-24     	; 0x7fa <AppUSER_getCardData+0x54>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_pinNum[u8_dataIndex] = '\0';
     812:	fa 01       	movw	r30, r20
     814:	e9 0f       	add	r30, r25
     816:	f1 1d       	adc	r31, r1
     818:	14 8a       	std	Z+20, r1	; 0x14
	return APP_STATUS_ERROR_OK;
}
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	08 95       	ret

0000081e <AppUSER_insertCard>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to run the Card Inserting Process.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_insertCard(void)
{
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	da 95       	dec	r29
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
	gu8_USER_Mode_State = USER_BUSY;
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <gu8_USER_Mode_State>
	uint8_t u8_buttonVal = PIN_LOW;
     83a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     83c:	fe 01       	movw	r30, r28
     83e:	32 96       	adiw	r30, 0x02	; 2
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	df 01       	movw	r26, r30
     844:	1d 92       	st	X+, r1
     846:	8a 95       	dec	r24
     848:	e9 f7       	brne	.-6      	; 0x844 <AppUSER_insertCard+0x26>
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
     84a:	67 e2       	ldi	r22, 0x27	; 39
     84c:	72 e0       	ldi	r23, 0x02	; 2
     84e:	86 e3       	ldi	r24, 0x36	; 54
     850:	92 e0       	ldi	r25, 0x02	; 2
     852:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
	while(u8_buttonVal == PIN_LOW)
     856:	0f c0       	rjmp	.+30     	; 0x876 <__stack+0x17>
	{
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	0e 94 46 0a 	call	0x148c	; 0x148c <Button_updateState>
     85e:	81 30       	cpi	r24, 0x01	; 1
     860:	09 f0       	breq	.+2      	; 0x864 <__stack+0x5>
     862:	89 c0       	rjmp	.+274    	; 0x976 <__stack+0x117>
			return APP_STATUS_ERROR_NOK;
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
     864:	be 01       	movw	r22, r28
     866:	6f 5f       	subi	r22, 0xFF	; 255
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0e 94 34 0a 	call	0x1468	; 0x1468 <Button_getState>
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	09 f0       	breq	.+2      	; 0x876 <__stack+0x17>
     874:	82 c0       	rjmp	.+260    	; 0x97a <__stack+0x11b>
	gu8_USER_Mode_State = USER_BUSY;
	uint8_t u8_buttonVal = PIN_LOW;
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
	while(u8_buttonVal == PIN_LOW)
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	88 23       	and	r24, r24
     87a:	71 f3       	breq	.-36     	; 0x858 <AppUSER_insertCard+0x3a>
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	}
	Lcd_printLCD((uint8_t*)"Button Pressed",(uint8_t*)"Receiving Data");
     87c:	67 e4       	ldi	r22, 0x47	; 71
     87e:	72 e0       	ldi	r23, 0x02	; 2
     880:	86 e5       	ldi	r24, 0x56	; 86
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	82 e1       	ldi	r24, 0x12	; 18
     88c:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
	
	while (au8_inputString[0] != '#')
     890:	41 c0       	rjmp	.+130    	; 0x914 <__stack+0xb5>
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
     892:	6c e1       	ldi	r22, 0x1C	; 28
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	ce 01       	movw	r24, r28
     898:	02 96       	adiw	r24, 0x02	; 2
     89a:	0e 94 3c 19 	call	0x3278	; 0x3278 <Spi_SlaveReceivePacket>
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <__stack+0x45>
     8a2:	6d c0       	rjmp	.+218    	; 0x97e <__stack+0x11f>
			return APP_STATUS_ERROR_NOK;
		if((au8_inputString[0] == '*') && (au8_inputString[1] == '*'))
     8a4:	8a 81       	ldd	r24, Y+2	; 0x02
     8a6:	8a 32       	cpi	r24, 0x2A	; 42
     8a8:	a9 f5       	brne	.+106    	; 0x914 <__stack+0xb5>
     8aa:	8b 81       	ldd	r24, Y+3	; 0x03
     8ac:	8a 32       	cpi	r24, 0x2A	; 42
     8ae:	91 f5       	brne	.+100    	; 0x914 <__stack+0xb5>
		{
			Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     8b0:	61 e0       	ldi	r22, 0x01	; 1
     8b2:	82 e1       	ldi	r24, 0x12	; 18
     8b4:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
			Lcd_printLCD((uint8_t*)"Card is not",(uint8_t*)"Programmed");
     8b8:	65 e6       	ldi	r22, 0x65	; 101
     8ba:	72 e0       	ldi	r23, 0x02	; 2
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	92 e0       	ldi	r25, 0x02	; 2
     8c0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
			Delay_ms(1000);
     8c4:	28 ee       	ldi	r18, 0xE8	; 232
     8c6:	33 e0       	ldi	r19, 0x03	; 3
     8c8:	40 e0       	ldi	r20, 0x00	; 0
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
			Lcd_printLCD((uint8_t*)"Please Contact",(uint8_t*)"Customer Service");
     8d8:	61 eb       	ldi	r22, 0xB1	; 177
     8da:	71 e0       	ldi	r23, 0x01	; 1
     8dc:	82 ec       	ldi	r24, 0xC2	; 194
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
			Delay_ms(1000);
     8e4:	28 ee       	ldi	r18, 0xE8	; 232
     8e6:	33 e0       	ldi	r19, 0x03	; 3
     8e8:	40 e0       	ldi	r20, 0x00	; 0
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
			gu8_USER_Mode_State = USER_IDLE;
     8f8:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <gu8_USER_Mode_State>
			Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     8fc:	65 e8       	ldi	r22, 0x85	; 133
     8fe:	71 e0       	ldi	r23, 0x01	; 1
     900:	84 e9       	ldi	r24, 0x94	; 148
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
			EmptyString(au8_inputString);
     908:	ce 01       	movw	r24, r28
     90a:	02 96       	adiw	r24, 0x02	; 2
     90c:	0e 94 cf 19 	call	0x339e	; 0x339e <EmptyString>
			return APP_STATUS_ERROR_OK;
     910:	11 e0       	ldi	r17, 0x01	; 1
     912:	38 c0       	rjmp	.+112    	; 0x984 <__stack+0x125>
			return APP_STATUS_ERROR_NOK;
	}
	Lcd_printLCD((uint8_t*)"Button Pressed",(uint8_t*)"Receiving Data");
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
	
	while (au8_inputString[0] != '#')
     914:	8a 81       	ldd	r24, Y+2	; 0x02
     916:	83 32       	cpi	r24, 0x23	; 35
     918:	09 f0       	breq	.+2      	; 0x91c <__stack+0xbd>
     91a:	bb cf       	rjmp	.-138    	; 0x892 <__stack+0x33>
			return APP_STATUS_ERROR_OK;
		}
		
	}
	
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	82 e1       	ldi	r24, 0x12	; 18
     920:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
	if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
     924:	be 01       	movw	r22, r28
     926:	6e 5f       	subi	r22, 0xFE	; 254
     928:	7f 4f       	sbci	r23, 0xFF	; 255
     92a:	8f ea       	ldi	r24, 0xAF	; 175
     92c:	95 e0       	ldi	r25, 0x05	; 5
     92e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <AppUSER_getCardData>
     932:	18 2f       	mov	r17, r24
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	29 f5       	brne	.+74     	; 0x982 <__stack+0x123>
		return APP_STATUS_ERROR_NOK;
		
	enuApp_Status_t processState = AppUSER_startProcess(&gstr_userCardData);
     938:	8f ea       	ldi	r24, 0xAF	; 175
     93a:	95 e0       	ldi	r25, 0x05	; 5
     93c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <AppUSER_startProcess>
	if((processState == APP_STATUS_PAN_NOT_FOUND) || (processState == APP_STATUS_PIN_NOT_CORRECT))
     940:	8b 30       	cpi	r24, 0x0B	; 11
     942:	11 f0       	breq	.+4      	; 0x948 <__stack+0xe9>
     944:	89 30       	cpi	r24, 0x09	; 9
     946:	99 f4       	brne	.+38     	; 0x96e <__stack+0x10f>
	{
		Delay_ms(1000);
     948:	28 ee       	ldi	r18, 0xE8	; 232
     94a:	33 e0       	ldi	r19, 0x03	; 3
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
		gu8_USER_Mode_State = USER_IDLE;
     95c:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <gu8_USER_Mode_State>
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     960:	65 e8       	ldi	r22, 0x85	; 133
     962:	71 e0       	ldi	r23, 0x01	; 1
     964:	84 e9       	ldi	r24, 0x94	; 148
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
     96c:	0b c0       	rjmp	.+22     	; 0x984 <__stack+0x125>
	}else if (processState != APP_STATUS_ERROR_OK)
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	49 f0       	breq	.+18     	; 0x984 <__stack+0x125>
		return APP_STATUS_ERROR_NOK;
     972:	10 e0       	ldi	r17, 0x00	; 0
     974:	07 c0       	rjmp	.+14     	; 0x984 <__stack+0x125>
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
	while(u8_buttonVal == PIN_LOW)
	{
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     976:	10 e0       	ldi	r17, 0x00	; 0
     978:	05 c0       	rjmp	.+10     	; 0x984 <__stack+0x125>
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     97a:	10 e0       	ldi	r17, 0x00	; 0
     97c:	03 c0       	rjmp	.+6      	; 0x984 <__stack+0x125>
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
	
	while (au8_inputString[0] != '#')
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     97e:	10 e0       	ldi	r17, 0x00	; 0
     980:	01 c0       	rjmp	.+2      	; 0x984 <__stack+0x125>
		
	}
	
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
	if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     982:	10 e0       	ldi	r17, 0x00	; 0
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
	}else if (processState != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     984:	81 2f       	mov	r24, r17
     986:	d3 95       	inc	r29
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	cd bf       	out	0x3d, r28	; 61
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	08 95       	ret

0000099a <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
     99a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enuCurrentAppStatus>
     99e:	84 30       	cpi	r24, 0x04	; 4
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <App_init+0xa>
     9a2:	bd c0       	rjmp	.+378    	; 0xb1e <App_init+0x184>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(LCD_STATUS_ERROR_OK != Lcd_init())
     9a4:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <Lcd_init>
     9a8:	81 30       	cpi	r24, 0x01	; 1
     9aa:	09 f0       	breq	.+2      	; 0x9ae <App_init+0x14>
     9ac:	97 c0       	rjmp	.+302    	; 0xadc <App_init+0x142>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
     9ae:	0e 94 ae 10 	call	0x215c	; 0x215c <Terminal_init>
     9b2:	81 30       	cpi	r24, 0x01	; 1
     9b4:	09 f0       	breq	.+2      	; 0x9b8 <App_init+0x1e>
     9b6:	94 c0       	rjmp	.+296    	; 0xae0 <App_init+0x146>
		return APP_STATUS_ERROR_NOK;
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
     9b8:	0e 94 c8 0a 	call	0x1590	; 0x1590 <Eeprom_24_init>
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	09 f0       	breq	.+2      	; 0x9c2 <App_init+0x28>
     9c0:	91 c0       	rjmp	.+290    	; 0xae4 <App_init+0x14a>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
     9c2:	0e 94 0e 19 	call	0x321c	; 0x321c <Spi_init>
     9c6:	81 30       	cpi	r24, 0x01	; 1
     9c8:	09 f0       	breq	.+2      	; 0x9cc <App_init+0x32>
     9ca:	8e c0       	rjmp	.+284    	; 0xae8 <App_init+0x14e>
		return APP_STATUS_ERROR_NOK;
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
     9cc:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <Keypad_init>
     9d0:	81 30       	cpi	r24, 0x01	; 1
     9d2:	09 f0       	breq	.+2      	; 0x9d6 <App_init+0x3c>
     9d4:	8b c0       	rjmp	.+278    	; 0xaec <App_init+0x152>
		return APP_STATUS_ERROR_NOK;
	if(LM35_STATUS_ERROR_OK != LM35_init())
     9d6:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <LM35_init>
     9da:	81 30       	cpi	r24, 0x01	; 1
     9dc:	09 f0       	breq	.+2      	; 0x9e0 <App_init+0x46>
     9de:	88 c0       	rjmp	.+272    	; 0xaf0 <App_init+0x156>
		return APP_STATUS_ERROR_NOK;
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
     9e0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <Motor_init>
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	09 f0       	breq	.+2      	; 0x9ea <App_init+0x50>
     9e8:	85 c0       	rjmp	.+266    	; 0xaf4 <App_init+0x15a>
		return APP_STATUS_ERROR_NOK;
	if(BTTN_STATUS_ERROR_OK != Button_init())
     9ea:	0e 94 21 0a 	call	0x1442	; 0x1442 <Button_init>
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <App_init+0x5a>
     9f2:	82 c0       	rjmp	.+260    	; 0xaf8 <App_init+0x15e>
	/* Only for Testing */
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
     9f4:	81 e6       	ldi	r24, 0x61	; 97
     9f6:	95 e0       	ldi	r25, 0x05	; 5
     9f8:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <Lcd_printString>
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	09 f0       	breq	.+2      	; 0xa02 <App_init+0x68>
     a00:	7d c0       	rjmp	.+250    	; 0xafc <App_init+0x162>
		return APP_STATUS_ERROR_NOK;
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
     a02:	83 e5       	ldi	r24, 0x53	; 83
     a04:	95 e0       	ldi	r25, 0x05	; 5
     a06:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
     a0a:	81 30       	cpi	r24, 0x01	; 1
     a0c:	09 f0       	breq	.+2      	; 0xa10 <App_init+0x76>
     a0e:	78 c0       	rjmp	.+240    	; 0xb00 <App_init+0x166>
		return APP_STATUS_ERROR_NOK;
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
     a10:	6c e9       	ldi	r22, 0x9C	; 156
     a12:	75 e0       	ldi	r23, 0x05	; 5
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 13 0b 	call	0x1626	; 0x1626 <Eeprom_24_readByte>
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	09 f0       	breq	.+2      	; 0xa22 <App_init+0x88>
     a20:	71 c0       	rjmp	.+226    	; 0xb04 <App_init+0x16a>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     a22:	2a e0       	ldi	r18, 0x0A	; 10
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	40 e0       	ldi	r20, 0x00	; 0
     a28:	50 e0       	ldi	r21, 0x00	; 0
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
	
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
     a36:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <gu8_initData>
     a3a:	8a 3a       	cpi	r24, 0xAA	; 170
     a3c:	f9 f0       	breq	.+62     	; 0xa7c <App_init+0xe2>
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
     a3e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
     a42:	8b e6       	ldi	r24, 0x6B	; 107
     a44:	95 e0       	ldi	r25, 0x05	; 5
     a46:	0e 94 90 19 	call	0x3320	; 0x3320 <stringLength>
	
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
     a4a:	48 2f       	mov	r20, r24
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	6b e6       	ldi	r22, 0x6B	; 107
     a50:	75 e0       	ldi	r23, 0x05	; 5
     a52:	8b e0       	ldi	r24, 0x0B	; 11
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 c6 0b 	call	0x178c	; 0x178c <Eeprom_24_writePacket>
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	09 f0       	breq	.+2      	; 0xa60 <App_init+0xc6>
     a5e:	54 c0       	rjmp	.+168    	; 0xb08 <App_init+0x16e>
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		/* Lock the ATM For the User */
		Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
     a60:	60 e7       	ldi	r22, 0x70	; 112
     a62:	72 e0       	ldi	r23, 0x02	; 2
     a64:	81 e8       	ldi	r24, 0x81	; 129
     a66:	92 e0       	ldi	r25, 0x02	; 2
     a68:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
		
		if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     a6c:	82 e9       	ldi	r24, 0x92	; 146
     a6e:	92 e0       	ldi	r25, 0x02	; 2
     a70:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
     a74:	81 30       	cpi	r24, 0x01	; 1
     a76:	09 f0       	breq	.+2      	; 0xa7a <App_init+0xe0>
     a78:	49 c0       	rjmp	.+146    	; 0xb0c <App_init+0x172>
     a7a:	2b c0       	rjmp	.+86     	; 0xad2 <App_init+0x138>
			return APP_STATUS_ERROR_NOK;
	}else
	{ /* Case it was previously registered == Contains data in the DB */
		gu8_ATMMode = ATM_MODE_USER;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
     a82:	48 e0       	ldi	r20, 0x08	; 8
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	6e e8       	ldi	r22, 0x8E	; 142
     a88:	75 e0       	ldi	r23, 0x05	; 5
     a8a:	83 e0       	ldi	r24, 0x03	; 3
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 9f 0c 	call	0x193e	; 0x193e <Eeprom_24_readPacket>
     a92:	81 30       	cpi	r24, 0x01	; 1
     a94:	e9 f5       	brne	.+122    	; 0xb10 <App_init+0x176>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     a96:	6b e9       	ldi	r22, 0x9B	; 155
     a98:	75 e0       	ldi	r23, 0x05	; 5
     a9a:	82 e0       	ldi	r24, 0x02	; 2
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 13 0b 	call	0x1626	; 0x1626 <Eeprom_24_readByte>
     aa2:	81 30       	cpi	r24, 0x01	; 1
     aa4:	b9 f5       	brne	.+110    	; 0xb14 <App_init+0x17a>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
     aa6:	45 e0       	ldi	r20, 0x05	; 5
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	66 e9       	ldi	r22, 0x96	; 150
     aac:	75 e0       	ldi	r23, 0x05	; 5
     aae:	8b e0       	ldi	r24, 0x0B	; 11
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 9f 0c 	call	0x193e	; 0x193e <Eeprom_24_readPacket>
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	79 f5       	brne	.+94     	; 0xb18 <App_init+0x17e>
			return APP_STATUS_ERROR_NOK;
		
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     aba:	65 e8       	ldi	r22, 0x85	; 133
     abc:	71 e0       	ldi	r23, 0x01	; 1
     abe:	84 e9       	ldi	r24, 0x94	; 148
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
			
		if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     ac6:	85 ea       	ldi	r24, 0xA5	; 165
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
     ace:	81 30       	cpi	r24, 0x01	; 1
     ad0:	29 f5       	brne	.+74     	; 0xb1c <App_init+0x182>
			return APP_STATUS_ERROR_NOK;
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     ad2:	84 e0       	ldi	r24, 0x04	; 4
     ad4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enuCurrentAppStatus>
	return APP_STATUS_ERROR_OK;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(LCD_STATUS_ERROR_OK != Lcd_init())
		return APP_STATUS_ERROR_NOK;
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	08 95       	ret
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	08 95       	ret
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	08 95       	ret
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	08 95       	ret
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
		return APP_STATUS_ERROR_NOK;
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 95       	ret
	if(LM35_STATUS_ERROR_OK != LM35_init())
		return APP_STATUS_ERROR_NOK;
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	08 95       	ret
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
		return APP_STATUS_ERROR_NOK;
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	08 95       	ret
	if(BTTN_STATUS_ERROR_OK != Button_init())
		return APP_STATUS_ERROR_NOK;
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	08 95       	ret
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	08 95       	ret
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	08 95       	ret
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	08 95       	ret
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	08 95       	ret
		/* Lock the ATM For the User */
		Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
		
		if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	08 95       	ret
	}else
	{ /* Case it was previously registered == Contains data in the DB */
		gu8_ATMMode = ATM_MODE_USER;
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	08 95       	ret
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	08 95       	ret
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	08 95       	ret
		
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
			
		if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b1c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     b1e:	08 95       	ret

00000b20 <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
     b2c:	cf 5f       	subi	r28, 0xFF	; 255
     b2e:	d1 09       	sbc	r29, r1
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     b3c:	ce 01       	movw	r24, r28
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	2f ef       	ldi	r18, 0xFF	; 255
     b42:	fc 01       	movw	r30, r24
     b44:	11 92       	st	Z+, r1
     b46:	2a 95       	dec	r18
     b48:	e9 f7       	brne	.-6      	; 0xb44 <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
     b4a:	0e 94 de 10 	call	0x21bc	; 0x21bc <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
     b4e:	85 30       	cpi	r24, 0x05	; 5
     b50:	39 f4       	brne	.+14     	; 0xb60 <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
     b52:	b8 01       	movw	r22, r16
     b54:	ce 01       	movw	r24, r28
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	0e 94 db 19 	call	0x33b6	; 0x33b6 <stringCopy>
		return APP_STATUS_ERROR_OK;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	05 c0       	rjmp	.+10     	; 0xb6a <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	11 f0       	breq	.+4      	; 0xb68 <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	01 c0       	rjmp	.+2      	; 0xb6a <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
     b68:	86 e0       	ldi	r24, 0x06	; 6
}
     b6a:	c1 50       	subi	r28, 0x01	; 1
     b6c:	df 4f       	sbci	r29, 0xFF	; 255
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	08 95       	ret

00000b82 <AppADMIN_getInput>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the ADMIN Input Choice.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getInput(uint8_t* pu8_data)
{
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nYour Input: ") != TERMINAL_STATUS_ERROR_OK)
     b88:	81 eb       	ldi	r24, 0xB1	; 177
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	c1 f4       	brne	.+48     	; 0xbc4 <AppADMIN_getInput+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     b94:	ce 01       	movw	r24, r28
     b96:	0e 94 90 05 	call	0xb20	; 0xb20 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	29 f0       	breq	.+10     	; 0xba8 <AppADMIN_getInput+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     b9e:	11 f0       	breq	.+4      	; 0xba4 <AppADMIN_getInput+0x22>
     ba0:	86 30       	cpi	r24, 0x06	; 6
     ba2:	91 f4       	brne	.+36     	; 0xbc8 <AppADMIN_getInput+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     ba4:	86 30       	cpi	r24, 0x06	; 6
     ba6:	b1 f3       	breq	.-20     	; 0xb94 <AppADMIN_getInput+0x12>
		
		if (pu8_data[1] == '\0')
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	88 23       	and	r24, r24
     bac:	79 f0       	breq	.+30     	; 0xbcc <AppADMIN_getInput+0x4a>
		break;
		EmptyString(pu8_data);
     bae:	ce 01       	movw	r24, r28
     bb0:	0e 94 cf 19 	call	0x339e	; 0x339e <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
     bb4:	8f eb       	ldi	r24, 0xBF	; 191
     bb6:	92 e0       	ldi	r25, 0x02	; 2
     bb8:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	21 f3       	breq	.-56     	; 0xb88 <AppADMIN_getInput+0x6>
		return APP_STATUS_ERROR_NOK;
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	05 c0       	rjmp	.+10     	; 0xbce <AppADMIN_getInput+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nYour Input: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	03 c0       	rjmp	.+6      	; 0xbce <AppADMIN_getInput+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	01 c0       	rjmp	.+2      	; 0xbce <AppADMIN_getInput+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
}
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <AppADMIN_getnewMaxAmount>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getnewMaxAmount(uint8_t* pu8_data)
{
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	8c 01       	movw	r16, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nMax Amount: ") != TERMINAL_STATUS_ERROR_OK)
     bdc:	89 ee       	ldi	r24, 0xE9	; 233
     bde:	92 e0       	ldi	r25, 0x02	; 2
     be0:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	49 f5       	brne	.+82     	; 0xc3a <AppADMIN_getnewMaxAmount+0x66>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     be8:	c8 01       	movw	r24, r16
     bea:	0e 94 90 05 	call	0xb20	; 0xb20 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	e9 f0       	breq	.+58     	; 0xc2c <AppADMIN_getnewMaxAmount+0x58>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     bf2:	11 f0       	breq	.+4      	; 0xbf8 <AppADMIN_getnewMaxAmount+0x24>
     bf4:	86 30       	cpi	r24, 0x06	; 6
     bf6:	19 f5       	brne	.+70     	; 0xc3e <AppADMIN_getnewMaxAmount+0x6a>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     bf8:	86 30       	cpi	r24, 0x06	; 6
     bfa:	b1 f3       	breq	.-20     	; 0xbe8 <AppADMIN_getnewMaxAmount+0x14>
     bfc:	c0 e0       	ldi	r28, 0x00	; 0
     bfe:	17 c0       	rjmp	.+46     	; 0xc2e <AppADMIN_getnewMaxAmount+0x5a>
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
		{
			if(((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0')) && (pu8_data[u8_index]!='.'))
     c00:	f8 01       	movw	r30, r16
     c02:	ec 0f       	add	r30, r28
     c04:	f1 1d       	adc	r31, r1
     c06:	80 81       	ld	r24, Z
     c08:	90 ed       	ldi	r25, 0xD0	; 208
     c0a:	98 0f       	add	r25, r24
     c0c:	9a 30       	cpi	r25, 0x0A	; 10
     c0e:	60 f0       	brcs	.+24     	; 0xc28 <AppADMIN_getnewMaxAmount+0x54>
     c10:	8e 32       	cpi	r24, 0x2E	; 46
     c12:	51 f0       	breq	.+20     	; 0xc28 <AppADMIN_getnewMaxAmount+0x54>
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
     c14:	87 ef       	ldi	r24, 0xF7	; 247
     c16:	92 e0       	ldi	r25, 0x02	; 2
     c18:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
     c1c:	81 30       	cpi	r24, 0x01	; 1
     c1e:	89 f4       	brne	.+34     	; 0xc42 <AppADMIN_getnewMaxAmount+0x6e>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
     c20:	c8 01       	movw	r24, r16
     c22:	0e 94 cf 19 	call	0x339e	; 0x339e <EmptyString>
				break;
     c26:	05 c0       	rjmp	.+10     	; 0xc32 <AppADMIN_getnewMaxAmount+0x5e>
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
     c28:	cf 5f       	subi	r28, 0xFF	; 255
     c2a:	01 c0       	rjmp	.+2      	; 0xc2e <AppADMIN_getnewMaxAmount+0x5a>
     c2c:	c0 e0       	ldi	r28, 0x00	; 0
     c2e:	c7 30       	cpi	r28, 0x07	; 7
     c30:	38 f3       	brcs	.-50     	; 0xc00 <AppADMIN_getnewMaxAmount+0x2c>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
				break;
			}
		}
		if (u8_index == MAX_BAL_LENGTH)
     c32:	c7 30       	cpi	r28, 0x07	; 7
     c34:	99 f6       	brne	.-90     	; 0xbdc <AppADMIN_getnewMaxAmount+0x8>
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <AppADMIN_getnewMaxAmount+0x70>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nMax Amount: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	03 c0       	rjmp	.+6      	; 0xc44 <AppADMIN_getnewMaxAmount+0x70>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <AppADMIN_getnewMaxAmount+0x70>
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
		{
			if(((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0')) && (pu8_data[u8_index]!='.'))
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     c42:	80 e0       	ldi	r24, 0x00	; 0
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	08 95       	ret

00000c4c <AppADMIN_getCustomerPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerPAN(uint8_t* pu8_data)
{
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nPAN: ") != TERMINAL_STATUS_ERROR_OK)
     c54:	81 e3       	ldi	r24, 0x31	; 49
     c56:	93 e0       	ldi	r25, 0x03	; 3
     c58:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	99 f5       	brne	.+102    	; 0xcc6 <AppADMIN_getCustomerPAN+0x7a>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     c60:	ce 01       	movw	r24, r28
     c62:	0e 94 90 05 	call	0xb20	; 0xb20 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     c66:	81 30       	cpi	r24, 0x01	; 1
     c68:	29 f0       	breq	.+10     	; 0xc74 <AppADMIN_getCustomerPAN+0x28>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     c6a:	11 f0       	breq	.+4      	; 0xc70 <AppADMIN_getCustomerPAN+0x24>
     c6c:	86 30       	cpi	r24, 0x06	; 6
     c6e:	69 f5       	brne	.+90     	; 0xcca <AppADMIN_getCustomerPAN+0x7e>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     c70:	86 30       	cpi	r24, 0x06	; 6
     c72:	b1 f3       	breq	.-20     	; 0xc60 <AppADMIN_getCustomerPAN+0x14>
		
		if(stringLength(pu8_data) != MAX_PAN_LENGTH+1)
     c74:	ce 01       	movw	r24, r28
     c76:	0e 94 90 19 	call	0x3320	; 0x3320 <stringLength>
     c7a:	8a 30       	cpi	r24, 0x0A	; 10
     c7c:	e9 f0       	breq	.+58     	; 0xcb8 <AppADMIN_getCustomerPAN+0x6c>
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     c7e:	88 e3       	ldi	r24, 0x38	; 56
     c80:	93 e0       	ldi	r25, 0x03	; 3
     c82:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
     c86:	81 30       	cpi	r24, 0x01	; 1
     c88:	11 f5       	brne	.+68     	; 0xcce <AppADMIN_getCustomerPAN+0x82>
			return APP_STATUS_ERROR_NOK;
			EmptyString(pu8_data);
     c8a:	ce 01       	movw	r24, r28
     c8c:	0e 94 cf 19 	call	0x339e	; 0x339e <EmptyString>
			continue;
     c90:	e1 cf       	rjmp	.-62     	; 0xc54 <AppADMIN_getCustomerPAN+0x8>
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
     c92:	fe 01       	movw	r30, r28
     c94:	e1 0f       	add	r30, r17
     c96:	f1 1d       	adc	r31, r1
     c98:	80 81       	ld	r24, Z
     c9a:	80 53       	subi	r24, 0x30	; 48
     c9c:	8a 30       	cpi	r24, 0x0A	; 10
     c9e:	50 f0       	brcs	.+20     	; 0xcb4 <AppADMIN_getCustomerPAN+0x68>
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     ca0:	88 e3       	ldi	r24, 0x38	; 56
     ca2:	93 e0       	ldi	r25, 0x03	; 3
     ca4:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	99 f4       	brne	.+38     	; 0xcd2 <AppADMIN_getCustomerPAN+0x86>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
     cac:	ce 01       	movw	r24, r28
     cae:	0e 94 cf 19 	call	0x339e	; 0x339e <EmptyString>
				break;
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <AppADMIN_getCustomerPAN+0x72>
			EmptyString(pu8_data);
			continue;
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
     cb4:	1f 5f       	subi	r17, 0xFF	; 255
     cb6:	01 c0       	rjmp	.+2      	; 0xcba <AppADMIN_getCustomerPAN+0x6e>
     cb8:	10 e0       	ldi	r17, 0x00	; 0
     cba:	19 30       	cpi	r17, 0x09	; 9
     cbc:	50 f3       	brcs	.-44     	; 0xc92 <AppADMIN_getCustomerPAN+0x46>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
				break;
			}
		}
		if (u8_index == MAX_PAN_LENGTH)
     cbe:	19 30       	cpi	r17, 0x09	; 9
     cc0:	49 f6       	brne	.-110    	; 0xc54 <AppADMIN_getCustomerPAN+0x8>
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <AppADMIN_getCustomerPAN+0x88>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nPAN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	05 c0       	rjmp	.+10     	; 0xcd4 <AppADMIN_getCustomerPAN+0x88>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	03 c0       	rjmp	.+6      	; 0xcd4 <AppADMIN_getCustomerPAN+0x88>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringLength(pu8_data) != MAX_PAN_LENGTH+1)
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <AppADMIN_getCustomerPAN+0x88>
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     cd2:	80 e0       	ldi	r24, 0x00	; 0
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	08 95       	ret

00000cdc <AppADMIN_getCustomerBalance>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Balance by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the balance of the customer.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerBalance(uint8_t* pu8_data)
{
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	cf 93       	push	r28
     ce2:	8c 01       	movw	r16, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nBalance: ") != TERMINAL_STATUS_ERROR_OK)
     ce4:	8b e6       	ldi	r24, 0x6B	; 107
     ce6:	93 e0       	ldi	r25, 0x03	; 3
     ce8:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	49 f5       	brne	.+82     	; 0xd42 <AppADMIN_getCustomerBalance+0x66>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     cf0:	c8 01       	movw	r24, r16
     cf2:	0e 94 90 05 	call	0xb20	; 0xb20 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	e9 f0       	breq	.+58     	; 0xd34 <AppADMIN_getCustomerBalance+0x58>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     cfa:	11 f0       	breq	.+4      	; 0xd00 <AppADMIN_getCustomerBalance+0x24>
     cfc:	86 30       	cpi	r24, 0x06	; 6
     cfe:	19 f5       	brne	.+70     	; 0xd46 <AppADMIN_getCustomerBalance+0x6a>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     d00:	86 30       	cpi	r24, 0x06	; 6
     d02:	b1 f3       	breq	.-20     	; 0xcf0 <AppADMIN_getCustomerBalance+0x14>
     d04:	c0 e0       	ldi	r28, 0x00	; 0
     d06:	17 c0       	rjmp	.+46     	; 0xd36 <AppADMIN_getCustomerBalance+0x5a>
		
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
		{
			if(((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0')) && (pu8_data[u8_index]!='.'))
     d08:	f8 01       	movw	r30, r16
     d0a:	ec 0f       	add	r30, r28
     d0c:	f1 1d       	adc	r31, r1
     d0e:	80 81       	ld	r24, Z
     d10:	90 ed       	ldi	r25, 0xD0	; 208
     d12:	98 0f       	add	r25, r24
     d14:	9a 30       	cpi	r25, 0x0A	; 10
     d16:	60 f0       	brcs	.+24     	; 0xd30 <AppADMIN_getCustomerBalance+0x54>
     d18:	8e 32       	cpi	r24, 0x2E	; 46
     d1a:	51 f0       	breq	.+20     	; 0xd30 <AppADMIN_getCustomerBalance+0x54>
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
     d1c:	87 ef       	ldi	r24, 0xF7	; 247
     d1e:	92 e0       	ldi	r25, 0x02	; 2
     d20:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	89 f4       	brne	.+34     	; 0xd4a <AppADMIN_getCustomerBalance+0x6e>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
     d28:	c8 01       	movw	r24, r16
     d2a:	0e 94 cf 19 	call	0x339e	; 0x339e <EmptyString>
				break;
     d2e:	05 c0       	rjmp	.+10     	; 0xd3a <AppADMIN_getCustomerBalance+0x5e>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
     d30:	cf 5f       	subi	r28, 0xFF	; 255
     d32:	01 c0       	rjmp	.+2      	; 0xd36 <AppADMIN_getCustomerBalance+0x5a>
     d34:	c0 e0       	ldi	r28, 0x00	; 0
     d36:	c7 30       	cpi	r28, 0x07	; 7
     d38:	38 f3       	brcs	.-50     	; 0xd08 <AppADMIN_getCustomerBalance+0x2c>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
				break;
			}
		}
		if (u8_index == MAX_BAL_LENGTH)
     d3a:	c7 30       	cpi	r28, 0x07	; 7
     d3c:	99 f6       	brne	.-90     	; 0xce4 <AppADMIN_getCustomerBalance+0x8>
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	05 c0       	rjmp	.+10     	; 0xd4c <AppADMIN_getCustomerBalance+0x70>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nBalance: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	03 c0       	rjmp	.+6      	; 0xd4c <AppADMIN_getCustomerBalance+0x70>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	01 c0       	rjmp	.+2      	; 0xd4c <AppADMIN_getCustomerBalance+0x70>
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
		{
			if(((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0')) && (pu8_data[u8_index]!='.'))
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     d4a:	80 e0       	ldi	r24, 0x00	; 0
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	08 95       	ret

00000d54 <AppADMIN_processNewCustomer>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to process adding a new customer in the data base.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_processNewCustomer(void)
{
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	64 97       	sbiw	r28, 0x14	; 20
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_tempPAN[10]={0};
     d70:	8e 01       	movw	r16, r28
     d72:	0f 5f       	subi	r16, 0xFF	; 255
     d74:	1f 4f       	sbci	r17, 0xFF	; 255
     d76:	8a e0       	ldi	r24, 0x0A	; 10
     d78:	d8 01       	movw	r26, r16
     d7a:	1d 92       	st	X+, r1
     d7c:	8a 95       	dec	r24
     d7e:	e9 f7       	brne	.-6      	; 0xd7a <AppADMIN_processNewCustomer+0x26>
	uint8_t au8_tempBalance[8]={0};
     d80:	fe 01       	movw	r30, r28
     d82:	3b 96       	adiw	r30, 0x0b	; 11
     d84:	88 e0       	ldi	r24, 0x08	; 8
     d86:	df 01       	movw	r26, r30
     d88:	1d 92       	st	X+, r1
     d8a:	8a 95       	dec	r24
     d8c:	e9 f7       	brne	.-6      	; 0xd88 <AppADMIN_processNewCustomer+0x34>
	uint8_t au8_input[2]={0};
     d8e:	1c 8a       	std	Y+20, r1	; 0x14
     d90:	1b 8a       	std	Y+19, r1	; 0x13
	uint8_t u8_exist = 0;
	uint8_t u8_newCustomerPanAddr = 0;
	uint8_t u8_newCustomerBalAddr = 0;
	EmptyString(gstr_clientdata.au8_PAN);
     d92:	8d e9       	ldi	r24, 0x9D	; 157
     d94:	95 e0       	ldi	r25, 0x05	; 5
     d96:	0e 94 cf 19 	call	0x339e	; 0x339e <EmptyString>
	EmptyString(gstr_clientdata.au8_Balance);
     d9a:	87 ea       	ldi	r24, 0xA7	; 167
     d9c:	95 e0       	ldi	r25, 0x05	; 5
     d9e:	0e 94 cf 19 	call	0x339e	; 0x339e <EmptyString>
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     da2:	c8 01       	movw	r24, r16
     da4:	0e 94 26 06 	call	0xc4c	; 0xc4c <AppADMIN_getCustomerPAN>
     da8:	18 2f       	mov	r17, r24
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	09 f0       	breq	.+2      	; 0xdb0 <AppADMIN_processNewCustomer+0x5c>
     dae:	b2 c0       	rjmp	.+356    	; 0xf14 <AppADMIN_processNewCustomer+0x1c0>
		return APP_STATUS_ERROR_NOK;
	
	sint16_t s16_clientIndex = AppADMIN_searchPan(au8_tempPAN);
     db0:	ce 01       	movw	r24, r28
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	0e 94 50 00 	call	0xa0	; 0xa0 <AppADMIN_searchPan>
     db8:	7c 01       	movw	r14, r24
	
	if(s16_clientIndex != -1)
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	a9 f0       	breq	.+42     	; 0xde8 <AppADMIN_processNewCustomer+0x94>
	{
		Terminal_Out((uint8_t*)"This PAN is already existed in the Data Base\r\nDo you wish to update it?(y/n): ");
     dbe:	86 e7       	ldi	r24, 0x76	; 118
     dc0:	93 e0       	ldi	r25, 0x03	; 3
     dc2:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
		AppADMIN_getInput(au8_input);
     dc6:	ce 01       	movw	r24, r28
     dc8:	43 96       	adiw	r24, 0x13	; 19
     dca:	0e 94 c1 05 	call	0xb82	; 0xb82 <AppADMIN_getInput>
		if((au8_input[0] == 'y') || (au8_input[0] == 'Y'))
     dce:	8b 89       	ldd	r24, Y+19	; 0x13
     dd0:	89 37       	cpi	r24, 0x79	; 121
     dd2:	61 f0       	breq	.+24     	; 0xdec <AppADMIN_processNewCustomer+0x98>
     dd4:	89 35       	cpi	r24, 0x59	; 89
     dd6:	61 f0       	breq	.+24     	; 0xdf0 <AppADMIN_processNewCustomer+0x9c>
		{
			u8_exist = 1;
		}else if((au8_input[0] == 'n') || (au8_input[0] == 'N'))
     dd8:	8e 36       	cpi	r24, 0x6E	; 110
     dda:	09 f4       	brne	.+2      	; 0xdde <AppADMIN_processNewCustomer+0x8a>
     ddc:	a8 c0       	rjmp	.+336    	; 0xf2e <AppADMIN_processNewCustomer+0x1da>
     dde:	8e 34       	cpi	r24, 0x4E	; 78
     de0:	09 f4       	brne	.+2      	; 0xde4 <AppADMIN_processNewCustomer+0x90>
     de2:	a5 c0       	rjmp	.+330    	; 0xf2e <AppADMIN_processNewCustomer+0x1da>
enuApp_Status_t AppADMIN_processNewCustomer(void)
{
	uint8_t au8_tempPAN[10]={0};
	uint8_t au8_tempBalance[8]={0};
	uint8_t au8_input[2]={0};
	uint8_t u8_exist = 0;
     de4:	00 e0       	ldi	r16, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <AppADMIN_processNewCustomer+0x9e>
     de8:	00 e0       	ldi	r16, 0x00	; 0
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <AppADMIN_processNewCustomer+0x9e>
	{
		Terminal_Out((uint8_t*)"This PAN is already existed in the Data Base\r\nDo you wish to update it?(y/n): ");
		AppADMIN_getInput(au8_input);
		if((au8_input[0] == 'y') || (au8_input[0] == 'Y'))
		{
			u8_exist = 1;
     dec:	01 e0       	ldi	r16, 0x01	; 1
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <AppADMIN_processNewCustomer+0x9e>
     df0:	01 e0       	ldi	r16, 0x01	; 1
		}else if((au8_input[0] == 'n') || (au8_input[0] == 'N'))
		{
			return APP_STATUS_ERROR_OK; 
		}
	}
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
     df2:	6d e9       	ldi	r22, 0x9D	; 157
     df4:	75 e0       	ldi	r23, 0x05	; 5
     df6:	ce 01       	movw	r24, r28
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	0e 94 db 19 	call	0x33b6	; 0x33b6 <stringCopy>
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
     dfe:	ce 01       	movw	r24, r28
     e00:	0b 96       	adiw	r24, 0x0b	; 11
     e02:	0e 94 6e 06 	call	0xcdc	; 0xcdc <AppADMIN_getCustomerBalance>
     e06:	18 2f       	mov	r17, r24
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	09 f0       	breq	.+2      	; 0xe0e <AppADMIN_processNewCustomer+0xba>
     e0c:	85 c0       	rjmp	.+266    	; 0xf18 <AppADMIN_processNewCustomer+0x1c4>
		return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
     e0e:	67 ea       	ldi	r22, 0xA7	; 167
     e10:	75 e0       	ldi	r23, 0x05	; 5
     e12:	ce 01       	movw	r24, r28
     e14:	0b 96       	adiw	r24, 0x0b	; 11
     e16:	0e 94 db 19 	call	0x33b6	; 0x33b6 <stringCopy>
	
	if(u8_exist == 0)
     e1a:	01 11       	cpse	r16, r1
     e1c:	3c c0       	rjmp	.+120    	; 0xe96 <AppADMIN_processNewCustomer+0x142>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
     e1e:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <gu8_registeredAccNum>
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	2f 5f       	subi	r18, 0xFF	; 255
     e28:	3f 4f       	sbci	r19, 0xFF	; 255
     e2a:	f2 2e       	mov	r15, r18
     e2c:	ff 0c       	add	r15, r15
     e2e:	ff 0c       	add	r15, r15
     e30:	ff 0c       	add	r15, r15
     e32:	ff 0c       	add	r15, r15
     e34:	ff 0c       	add	r15, r15
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
     e36:	82 95       	swap	r24
     e38:	88 0f       	add	r24, r24
     e3a:	80 7e       	andi	r24, 0xE0	; 224
     e3c:	00 e3       	ldi	r16, 0x30	; 48
     e3e:	08 0f       	add	r16, r24
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
     e40:	8d e9       	ldi	r24, 0x9D	; 157
     e42:	95 e0       	ldi	r25, 0x05	; 5
     e44:	0e 94 90 19 	call	0x3320	; 0x3320 <stringLength>
     e48:	48 2f       	mov	r20, r24
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	6d e9       	ldi	r22, 0x9D	; 157
     e4e:	75 e0       	ldi	r23, 0x05	; 5
     e50:	8f 2d       	mov	r24, r15
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 c6 0b 	call	0x178c	; 0x178c <Eeprom_24_writePacket>
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	09 f0       	breq	.+2      	; 0xe5e <AppADMIN_processNewCustomer+0x10a>
     e5c:	5f c0       	rjmp	.+190    	; 0xf1c <AppADMIN_processNewCustomer+0x1c8>
		return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     e5e:	87 ea       	ldi	r24, 0xA7	; 167
     e60:	95 e0       	ldi	r25, 0x05	; 5
     e62:	0e 94 90 19 	call	0x3320	; 0x3320 <stringLength>
     e66:	48 2f       	mov	r20, r24
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	67 ea       	ldi	r22, 0xA7	; 167
     e6c:	75 e0       	ldi	r23, 0x05	; 5
     e6e:	80 2f       	mov	r24, r16
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 c6 0b 	call	0x178c	; 0x178c <Eeprom_24_writePacket>
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	09 f0       	breq	.+2      	; 0xe7c <AppADMIN_processNewCustomer+0x128>
     e7a:	52 c0       	rjmp	.+164    	; 0xf20 <AppADMIN_processNewCustomer+0x1cc>
		return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     e7c:	60 91 9b 05 	lds	r22, 0x059B	; 0x80059b <gu8_registeredAccNum>
     e80:	6f 5f       	subi	r22, 0xFF	; 255
     e82:	60 93 9b 05 	sts	0x059B, r22	; 0x80059b <gu8_registeredAccNum>
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <Eeprom_24_writeByte>
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	09 f0       	breq	.+2      	; 0xe94 <AppADMIN_processNewCustomer+0x140>
     e92:	48 c0       	rjmp	.+144    	; 0xf24 <AppADMIN_processNewCustomer+0x1d0>
     e94:	2b c0       	rjmp	.+86     	; 0xeec <AppADMIN_processNewCustomer+0x198>
		return APP_STATUS_ERROR_NOK;
	}else
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
     e96:	c7 01       	movw	r24, r14
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	08 2f       	mov	r16, r24
     e9c:	02 95       	swap	r16
     e9e:	00 0f       	add	r16, r16
     ea0:	00 7e       	andi	r16, 0xE0	; 224
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
     ea2:	8e 2d       	mov	r24, r14
     ea4:	82 95       	swap	r24
     ea6:	88 0f       	add	r24, r24
     ea8:	80 7e       	andi	r24, 0xE0	; 224
     eaa:	0f 2e       	mov	r0, r31
     eac:	f0 e3       	ldi	r31, 0x30	; 48
     eae:	ef 2e       	mov	r14, r31
     eb0:	f0 2d       	mov	r31, r0
     eb2:	e8 0e       	add	r14, r24
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
     eb4:	8d e9       	ldi	r24, 0x9D	; 157
     eb6:	95 e0       	ldi	r25, 0x05	; 5
     eb8:	0e 94 90 19 	call	0x3320	; 0x3320 <stringLength>
     ebc:	48 2f       	mov	r20, r24
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	6d e9       	ldi	r22, 0x9D	; 157
     ec2:	75 e0       	ldi	r23, 0x05	; 5
     ec4:	80 2f       	mov	r24, r16
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 c6 0b 	call	0x178c	; 0x178c <Eeprom_24_writePacket>
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	61 f5       	brne	.+88     	; 0xf28 <AppADMIN_processNewCustomer+0x1d4>
			return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     ed0:	87 ea       	ldi	r24, 0xA7	; 167
     ed2:	95 e0       	ldi	r25, 0x05	; 5
     ed4:	0e 94 90 19 	call	0x3320	; 0x3320 <stringLength>
     ed8:	48 2f       	mov	r20, r24
     eda:	50 e0       	ldi	r21, 0x00	; 0
     edc:	67 ea       	ldi	r22, 0xA7	; 167
     ede:	75 e0       	ldi	r23, 0x05	; 5
     ee0:	8e 2d       	mov	r24, r14
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 c6 0b 	call	0x178c	; 0x178c <Eeprom_24_writePacket>
     ee8:	81 30       	cpi	r24, 0x01	; 1
     eea:	01 f5       	brne	.+64     	; 0xf2c <AppADMIN_processNewCustomer+0x1d8>
			return APP_STATUS_ERROR_NOK;
	}
	if(gu8_registeredAccNum == 1)
     eec:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <gu8_registeredAccNum>
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	e9 f4       	brne	.+58     	; 0xf2e <AppADMIN_processNewCustomer+0x1da>
	{
		Terminal_Out((uint8_t*)"\nData Saved, Flag Raised\n\r");
     ef4:	85 ec       	ldi	r24, 0xC5	; 197
     ef6:	93 e0       	ldi	r25, 0x03	; 3
     ef8:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
		gu8_initData = ATM_DB_FLAG_SET_VAL;
     efc:	8a ea       	ldi	r24, 0xAA	; 170
     efe:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <gu8_initData>
		if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
     f02:	6a ea       	ldi	r22, 0xAA	; 170
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <Eeprom_24_writeByte>
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	79 f0       	breq	.+30     	; 0xf2e <AppADMIN_processNewCustomer+0x1da>
			return APP_STATUS_ERROR_NOK;
     f10:	10 e0       	ldi	r17, 0x00	; 0
     f12:	0d c0       	rjmp	.+26     	; 0xf2e <AppADMIN_processNewCustomer+0x1da>
	uint8_t u8_newCustomerBalAddr = 0;
	EmptyString(gstr_clientdata.au8_PAN);
	EmptyString(gstr_clientdata.au8_Balance);
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f14:	10 e0       	ldi	r17, 0x00	; 0
     f16:	0b c0       	rjmp	.+22     	; 0xf2e <AppADMIN_processNewCustomer+0x1da>
	}
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f18:	10 e0       	ldi	r17, 0x00	; 0
     f1a:	09 c0       	rjmp	.+18     	; 0xf2e <AppADMIN_processNewCustomer+0x1da>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f1c:	10 e0       	ldi	r17, 0x00	; 0
     f1e:	07 c0       	rjmp	.+14     	; 0xf2e <AppADMIN_processNewCustomer+0x1da>
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f20:	10 e0       	ldi	r17, 0x00	; 0
     f22:	05 c0       	rjmp	.+10     	; 0xf2e <AppADMIN_processNewCustomer+0x1da>
		
		if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	03 c0       	rjmp	.+6      	; 0xf2e <AppADMIN_processNewCustomer+0x1da>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     f28:	10 e0       	ldi	r17, 0x00	; 0
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <AppADMIN_processNewCustomer+0x1da>
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     f2c:	10 e0       	ldi	r17, 0x00	; 0
		gu8_initData = ATM_DB_FLAG_SET_VAL;
		if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	}
	return APP_STATUS_ERROR_OK;
}
     f2e:	81 2f       	mov	r24, r17
     f30:	64 96       	adiw	r28, 0x14	; 20
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	ff 90       	pop	r15
     f46:	ef 90       	pop	r14
     f48:	08 95       	ret

00000f4a <AppADMIN_processExistingCustomer>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to process adding a new customer in the data base.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_processExistingCustomer(void)
{
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	64 97       	sbiw	r28, 0x14	; 20
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_tempPAN[10]={0};
     f66:	8e 01       	movw	r16, r28
     f68:	0f 5f       	subi	r16, 0xFF	; 255
     f6a:	1f 4f       	sbci	r17, 0xFF	; 255
     f6c:	8a e0       	ldi	r24, 0x0A	; 10
     f6e:	d8 01       	movw	r26, r16
     f70:	1d 92       	st	X+, r1
     f72:	8a 95       	dec	r24
     f74:	e9 f7       	brne	.-6      	; 0xf70 <AppADMIN_processExistingCustomer+0x26>
	uint8_t au8_tempBalance[8]={0};
     f76:	fe 01       	movw	r30, r28
     f78:	3b 96       	adiw	r30, 0x0b	; 11
     f7a:	88 e0       	ldi	r24, 0x08	; 8
     f7c:	df 01       	movw	r26, r30
     f7e:	1d 92       	st	X+, r1
     f80:	8a 95       	dec	r24
     f82:	e9 f7       	brne	.-6      	; 0xf7e <AppADMIN_processExistingCustomer+0x34>
	uint8_t au8_input[2]={0};
     f84:	1c 8a       	std	Y+20, r1	; 0x14
     f86:	1b 8a       	std	Y+19, r1	; 0x13
	uint8_t u8_exist = 1;
	uint8_t u8_newCustomerPanAddr = 0;
	uint8_t u8_newCustomerBalAddr = 0;
	EmptyString(gstr_clientdata.au8_PAN);
     f88:	8d e9       	ldi	r24, 0x9D	; 157
     f8a:	95 e0       	ldi	r25, 0x05	; 5
     f8c:	0e 94 cf 19 	call	0x339e	; 0x339e <EmptyString>
	EmptyString(gstr_clientdata.au8_Balance);
     f90:	87 ea       	ldi	r24, 0xA7	; 167
     f92:	95 e0       	ldi	r25, 0x05	; 5
     f94:	0e 94 cf 19 	call	0x339e	; 0x339e <EmptyString>
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     f98:	c8 01       	movw	r24, r16
     f9a:	0e 94 26 06 	call	0xc4c	; 0xc4c <AppADMIN_getCustomerPAN>
     f9e:	18 2f       	mov	r17, r24
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <AppADMIN_processExistingCustomer+0x5c>
     fa4:	b4 c0       	rjmp	.+360    	; 0x110e <AppADMIN_processExistingCustomer+0x1c4>
		return APP_STATUS_ERROR_NOK;
	
	sint16_t s16_clientIndex = AppADMIN_searchPan(au8_tempPAN);
     fa6:	ce 01       	movw	r24, r28
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	0e 94 50 00 	call	0xa0	; 0xa0 <AppADMIN_searchPan>
     fae:	7c 01       	movw	r14, r24
	
	if(s16_clientIndex == -1)
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	a9 f4       	brne	.+42     	; 0xfde <AppADMIN_processExistingCustomer+0x94>
	{
		Terminal_Out((uint8_t*)"This PAN is not existed in the Data Base\r\nDo you wish to add new?(y/n): ");
     fb4:	80 ee       	ldi	r24, 0xE0	; 224
     fb6:	93 e0       	ldi	r25, 0x03	; 3
     fb8:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
		AppADMIN_getInput(au8_input);
     fbc:	ce 01       	movw	r24, r28
     fbe:	43 96       	adiw	r24, 0x13	; 19
     fc0:	0e 94 c1 05 	call	0xb82	; 0xb82 <AppADMIN_getInput>
		if((au8_input[0] == 'y') || (au8_input[0] == 'Y'))
     fc4:	8b 89       	ldd	r24, Y+19	; 0x13
     fc6:	89 37       	cpi	r24, 0x79	; 121
     fc8:	61 f0       	breq	.+24     	; 0xfe2 <AppADMIN_processExistingCustomer+0x98>
     fca:	89 35       	cpi	r24, 0x59	; 89
     fcc:	61 f0       	breq	.+24     	; 0xfe6 <AppADMIN_processExistingCustomer+0x9c>
		{
			u8_exist = 0;
		}else if((au8_input[0] == 'n') || (au8_input[0] == 'N'))
     fce:	8e 36       	cpi	r24, 0x6E	; 110
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <AppADMIN_processExistingCustomer+0x8a>
     fd2:	a8 c0       	rjmp	.+336    	; 0x1124 <AppADMIN_processExistingCustomer+0x1da>
     fd4:	8e 34       	cpi	r24, 0x4E	; 78
     fd6:	09 f4       	brne	.+2      	; 0xfda <AppADMIN_processExistingCustomer+0x90>
     fd8:	a5 c0       	rjmp	.+330    	; 0x1124 <AppADMIN_processExistingCustomer+0x1da>
enuApp_Status_t AppADMIN_processExistingCustomer(void)
{
	uint8_t au8_tempPAN[10]={0};
	uint8_t au8_tempBalance[8]={0};
	uint8_t au8_input[2]={0};
	uint8_t u8_exist = 1;
     fda:	01 e0       	ldi	r16, 0x01	; 1
     fdc:	05 c0       	rjmp	.+10     	; 0xfe8 <AppADMIN_processExistingCustomer+0x9e>
     fde:	01 e0       	ldi	r16, 0x01	; 1
     fe0:	03 c0       	rjmp	.+6      	; 0xfe8 <AppADMIN_processExistingCustomer+0x9e>
	{
		Terminal_Out((uint8_t*)"This PAN is not existed in the Data Base\r\nDo you wish to add new?(y/n): ");
		AppADMIN_getInput(au8_input);
		if((au8_input[0] == 'y') || (au8_input[0] == 'Y'))
		{
			u8_exist = 0;
     fe2:	00 e0       	ldi	r16, 0x00	; 0
     fe4:	01 c0       	rjmp	.+2      	; 0xfe8 <AppADMIN_processExistingCustomer+0x9e>
     fe6:	00 e0       	ldi	r16, 0x00	; 0
		}else if((au8_input[0] == 'n') || (au8_input[0] == 'N'))
		{
			return APP_STATUS_ERROR_OK;
		}
	}
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
     fe8:	6d e9       	ldi	r22, 0x9D	; 157
     fea:	75 e0       	ldi	r23, 0x05	; 5
     fec:	ce 01       	movw	r24, r28
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	0e 94 db 19 	call	0x33b6	; 0x33b6 <stringCopy>
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
     ff4:	ce 01       	movw	r24, r28
     ff6:	0b 96       	adiw	r24, 0x0b	; 11
     ff8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <AppADMIN_getCustomerBalance>
     ffc:	18 2f       	mov	r17, r24
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	09 f0       	breq	.+2      	; 0x1004 <AppADMIN_processExistingCustomer+0xba>
    1002:	87 c0       	rjmp	.+270    	; 0x1112 <AppADMIN_processExistingCustomer+0x1c8>
		return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
    1004:	67 ea       	ldi	r22, 0xA7	; 167
    1006:	75 e0       	ldi	r23, 0x05	; 5
    1008:	ce 01       	movw	r24, r28
    100a:	0b 96       	adiw	r24, 0x0b	; 11
    100c:	0e 94 db 19 	call	0x33b6	; 0x33b6 <stringCopy>
	
	if(u8_exist == 0)
    1010:	01 11       	cpse	r16, r1
    1012:	50 c0       	rjmp	.+160    	; 0x10b4 <AppADMIN_processExistingCustomer+0x16a>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
    1014:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <gu8_registeredAccNum>
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	2f 5f       	subi	r18, 0xFF	; 255
    101e:	3f 4f       	sbci	r19, 0xFF	; 255
    1020:	f2 2e       	mov	r15, r18
    1022:	ff 0c       	add	r15, r15
    1024:	ff 0c       	add	r15, r15
    1026:	ff 0c       	add	r15, r15
    1028:	ff 0c       	add	r15, r15
    102a:	ff 0c       	add	r15, r15
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
    102c:	82 95       	swap	r24
    102e:	88 0f       	add	r24, r24
    1030:	80 7e       	andi	r24, 0xE0	; 224
    1032:	00 e3       	ldi	r16, 0x30	; 48
    1034:	08 0f       	add	r16, r24
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
    1036:	8d e9       	ldi	r24, 0x9D	; 157
    1038:	95 e0       	ldi	r25, 0x05	; 5
    103a:	0e 94 90 19 	call	0x3320	; 0x3320 <stringLength>
    103e:	48 2f       	mov	r20, r24
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	6d e9       	ldi	r22, 0x9D	; 157
    1044:	75 e0       	ldi	r23, 0x05	; 5
    1046:	8f 2d       	mov	r24, r15
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 c6 0b 	call	0x178c	; 0x178c <Eeprom_24_writePacket>
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	09 f0       	breq	.+2      	; 0x1054 <AppADMIN_processExistingCustomer+0x10a>
    1052:	61 c0       	rjmp	.+194    	; 0x1116 <AppADMIN_processExistingCustomer+0x1cc>
			return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
    1054:	87 ea       	ldi	r24, 0xA7	; 167
    1056:	95 e0       	ldi	r25, 0x05	; 5
    1058:	0e 94 90 19 	call	0x3320	; 0x3320 <stringLength>
    105c:	48 2f       	mov	r20, r24
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	67 ea       	ldi	r22, 0xA7	; 167
    1062:	75 e0       	ldi	r23, 0x05	; 5
    1064:	80 2f       	mov	r24, r16
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 c6 0b 	call	0x178c	; 0x178c <Eeprom_24_writePacket>
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	09 f0       	breq	.+2      	; 0x1072 <AppADMIN_processExistingCustomer+0x128>
    1070:	54 c0       	rjmp	.+168    	; 0x111a <AppADMIN_processExistingCustomer+0x1d0>
			return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
    1072:	60 91 9b 05 	lds	r22, 0x059B	; 0x80059b <gu8_registeredAccNum>
    1076:	6f 5f       	subi	r22, 0xFF	; 255
    1078:	60 93 9b 05 	sts	0x059B, r22	; 0x80059b <gu8_registeredAccNum>
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <Eeprom_24_writeByte>
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	09 f0       	breq	.+2      	; 0x108a <AppADMIN_processExistingCustomer+0x140>
    1088:	4a c0       	rjmp	.+148    	; 0x111e <AppADMIN_processExistingCustomer+0x1d4>
			return APP_STATUS_ERROR_NOK;
			
		if(gu8_registeredAccNum == 1)
    108a:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <gu8_registeredAccNum>
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	09 f0       	breq	.+2      	; 0x1094 <AppADMIN_processExistingCustomer+0x14a>
    1092:	48 c0       	rjmp	.+144    	; 0x1124 <AppADMIN_processExistingCustomer+0x1da>
		{
			Terminal_Out((uint8_t*)"\nData Saved, Flag Raised\n\r");
    1094:	85 ec       	ldi	r24, 0xC5	; 197
    1096:	93 e0       	ldi	r25, 0x03	; 3
    1098:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
			gu8_initData = ATM_DB_FLAG_SET_VAL;
    109c:	8a ea       	ldi	r24, 0xAA	; 170
    109e:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <gu8_initData>
			if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
    10a2:	6a ea       	ldi	r22, 0xAA	; 170
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <Eeprom_24_writeByte>
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	d1 f1       	breq	.+116    	; 0x1124 <AppADMIN_processExistingCustomer+0x1da>
			return APP_STATUS_ERROR_NOK;
    10b0:	10 e0       	ldi	r17, 0x00	; 0
    10b2:	38 c0       	rjmp	.+112    	; 0x1124 <AppADMIN_processExistingCustomer+0x1da>
		}
	}else
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
    10b4:	c7 01       	movw	r24, r14
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	08 2f       	mov	r16, r24
    10ba:	02 95       	swap	r16
    10bc:	00 0f       	add	r16, r16
    10be:	00 7e       	andi	r16, 0xE0	; 224
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
    10c0:	8e 2d       	mov	r24, r14
    10c2:	82 95       	swap	r24
    10c4:	88 0f       	add	r24, r24
    10c6:	80 7e       	andi	r24, 0xE0	; 224
    10c8:	0f 2e       	mov	r0, r31
    10ca:	f0 e3       	ldi	r31, 0x30	; 48
    10cc:	ef 2e       	mov	r14, r31
    10ce:	f0 2d       	mov	r31, r0
    10d0:	e8 0e       	add	r14, r24
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
    10d2:	8d e9       	ldi	r24, 0x9D	; 157
    10d4:	95 e0       	ldi	r25, 0x05	; 5
    10d6:	0e 94 90 19 	call	0x3320	; 0x3320 <stringLength>
    10da:	48 2f       	mov	r20, r24
    10dc:	50 e0       	ldi	r21, 0x00	; 0
    10de:	6d e9       	ldi	r22, 0x9D	; 157
    10e0:	75 e0       	ldi	r23, 0x05	; 5
    10e2:	80 2f       	mov	r24, r16
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 c6 0b 	call	0x178c	; 0x178c <Eeprom_24_writePacket>
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	d1 f4       	brne	.+52     	; 0x1122 <AppADMIN_processExistingCustomer+0x1d8>
		return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
    10ee:	87 ea       	ldi	r24, 0xA7	; 167
    10f0:	95 e0       	ldi	r25, 0x05	; 5
    10f2:	0e 94 90 19 	call	0x3320	; 0x3320 <stringLength>
    10f6:	48 2f       	mov	r20, r24
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	67 ea       	ldi	r22, 0xA7	; 167
    10fc:	75 e0       	ldi	r23, 0x05	; 5
    10fe:	8e 2d       	mov	r24, r14
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 c6 0b 	call	0x178c	; 0x178c <Eeprom_24_writePacket>
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	69 f0       	breq	.+26     	; 0x1124 <AppADMIN_processExistingCustomer+0x1da>
		return APP_STATUS_ERROR_NOK;
    110a:	10 e0       	ldi	r17, 0x00	; 0
    110c:	0b c0       	rjmp	.+22     	; 0x1124 <AppADMIN_processExistingCustomer+0x1da>
	uint8_t u8_newCustomerBalAddr = 0;
	EmptyString(gstr_clientdata.au8_PAN);
	EmptyString(gstr_clientdata.au8_Balance);
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
    110e:	10 e0       	ldi	r17, 0x00	; 0
    1110:	09 c0       	rjmp	.+18     	; 0x1124 <AppADMIN_processExistingCustomer+0x1da>
	}
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
    1112:	10 e0       	ldi	r17, 0x00	; 0
    1114:	07 c0       	rjmp	.+14     	; 0x1124 <AppADMIN_processExistingCustomer+0x1da>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
    1116:	10 e0       	ldi	r17, 0x00	; 0
    1118:	05 c0       	rjmp	.+10     	; 0x1124 <AppADMIN_processExistingCustomer+0x1da>
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
    111a:	10 e0       	ldi	r17, 0x00	; 0
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <AppADMIN_processExistingCustomer+0x1da>
		
		if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
    111e:	10 e0       	ldi	r17, 0x00	; 0
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <AppADMIN_processExistingCustomer+0x1da>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
    1122:	10 e0       	ldi	r17, 0x00	; 0
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	}
	return APP_STATUS_ERROR_OK;
}
    1124:	81 2f       	mov	r24, r17
    1126:	64 96       	adiw	r28, 0x14	; 20
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	08 95       	ret

00001140 <AppADMIN_getAtmPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input ATM PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the atm pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getAtmPIN(uint8_t* pu8_data)
{
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	
	Terminal_enablePasswordMode();
    1146:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <Terminal_enablePasswordMode>
	do
	{
		if(Terminal_Out((uint8_t*)"\nATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
    114a:	89 e2       	ldi	r24, 0x29	; 41
    114c:	94 e0       	ldi	r25, 0x04	; 4
    114e:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	69 f5       	brne	.+90     	; 0x11b0 <AppADMIN_getAtmPIN+0x70>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
    1156:	ce 01       	movw	r24, r28
    1158:	0e 94 90 05 	call	0xb20	; 0xb20 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	29 f0       	breq	.+10     	; 0x116a <AppADMIN_getAtmPIN+0x2a>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
    1160:	11 f0       	breq	.+4      	; 0x1166 <AppADMIN_getAtmPIN+0x26>
    1162:	86 30       	cpi	r24, 0x06	; 6
    1164:	39 f5       	brne	.+78     	; 0x11b4 <AppADMIN_getAtmPIN+0x74>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
    1166:	86 30       	cpi	r24, 0x06	; 6
    1168:	b1 f3       	breq	.-20     	; 0x1156 <AppADMIN_getAtmPIN+0x16>
		
		if(stringCompare((uint8_t*)ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
    116a:	be 01       	movw	r22, r28
    116c:	8b e6       	ldi	r24, 0x6B	; 107
    116e:	95 e0       	ldi	r25, 0x05	; 5
    1170:	0e 94 9c 19 	call	0x3338	; 0x3338 <stringCompare>
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	39 f0       	breq	.+14     	; 0x1186 <AppADMIN_getAtmPIN+0x46>
		{
			if(Terminal_Out((uint8_t*)"\nIncorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
    1178:	84 e3       	ldi	r24, 0x34	; 52
    117a:	94 e0       	ldi	r25, 0x04	; 4
    117c:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	41 f0       	breq	.+16     	; 0x1194 <AppADMIN_getAtmPIN+0x54>
    1184:	19 c0       	rjmp	.+50     	; 0x11b8 <AppADMIN_getAtmPIN+0x78>
			return APP_STATUS_ERROR_NOK;
		}else
		{
			if(Terminal_Out((uint8_t*)"\nLoading...\r") != TERMINAL_STATUS_ERROR_OK)
    1186:	84 e4       	ldi	r24, 0x44	; 68
    1188:	94 e0       	ldi	r25, 0x04	; 4
    118a:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	a9 f4       	brne	.+42     	; 0x11bc <AppADMIN_getAtmPIN+0x7c>
    1192:	0a c0       	rjmp	.+20     	; 0x11a8 <AppADMIN_getAtmPIN+0x68>
			return APP_STATUS_ERROR_NOK;
			break;
		}
		EmptyString(pu8_data);
    1194:	ce 01       	movw	r24, r28
    1196:	0e 94 cf 19 	call	0x339e	; 0x339e <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
    119a:	81 e5       	ldi	r24, 0x51	; 81
    119c:	94 e0       	ldi	r25, 0x04	; 4
    119e:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	91 f2       	breq	.-92     	; 0x114a <AppADMIN_getAtmPIN+0xa>
    11a6:	0c c0       	rjmp	.+24     	; 0x11c0 <AppADMIN_getAtmPIN+0x80>
		return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
    11a8:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Terminal_disablePasswordMode>
	return APP_STATUS_ERROR_OK;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	09 c0       	rjmp	.+18     	; 0x11c2 <AppADMIN_getAtmPIN+0x82>
	
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"\nATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	07 c0       	rjmp	.+14     	; 0x11c2 <AppADMIN_getAtmPIN+0x82>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	05 c0       	rjmp	.+10     	; 0x11c2 <AppADMIN_getAtmPIN+0x82>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringCompare((uint8_t*)ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
		{
			if(Terminal_Out((uint8_t*)"\nIncorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <AppADMIN_getAtmPIN+0x82>
		}else
		{
			if(Terminal_Out((uint8_t*)"\nLoading...\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <AppADMIN_getAtmPIN+0x82>
			break;
		}
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
    11c0:	80 e0       	ldi	r24, 0x00	; 0
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_ERROR_OK;
}
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	08 95       	ret

000011c8 <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	69 97       	sbiw	r28, 0x19	; 25
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
    11dc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enuCurrentAppStatus>
    11e0:	84 30       	cpi	r24, 0x04	; 4
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <App_update+0x1e>
    11e4:	17 c1       	rjmp	.+558    	; 0x1414 <App_update+0x24c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
    11e6:	fe 01       	movw	r30, r28
    11e8:	31 96       	adiw	r30, 0x01	; 1
    11ea:	8a e0       	ldi	r24, 0x0A	; 10
    11ec:	df 01       	movw	r26, r30
    11ee:	1d 92       	st	X+, r1
    11f0:	8a 95       	dec	r24
    11f2:	e9 f7       	brne	.-6      	; 0x11ee <App_update+0x26>
	static uint8_t u8_passFlag = 0;
	if(gu8_ATMMode == ATM_MODE_ADMIN)
    11f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    11f8:	81 11       	cpse	r24, r1
    11fa:	8b c0       	rjmp	.+278    	; 0x1312 <App_update+0x14a>
	{ /**************** PROGRAMMING MODE ****************/
			uint8_t au8_Input[2]={0};
    11fc:	19 8e       	std	Y+25, r1	; 0x19
    11fe:	18 8e       	std	Y+24, r1	; 0x18
			uint8_t au8_tempPinNum[5]={0};
    1200:	72 96       	adiw	r30, 0x12	; 18
    1202:	85 e0       	ldi	r24, 0x05	; 5
    1204:	df 01       	movw	r26, r30
    1206:	1d 92       	st	X+, r1
    1208:	8a 95       	dec	r24
    120a:	e9 f7       	brne	.-6      	; 0x1206 <App_update+0x3e>
			uint8_t au8_tempMaxAmount[8]={0};
    120c:	38 97       	sbiw	r30, 0x08	; 8
    120e:	88 e0       	ldi	r24, 0x08	; 8
    1210:	df 01       	movw	r26, r30
    1212:	1d 92       	st	X+, r1
    1214:	8a 95       	dec	r24
    1216:	e9 f7       	brne	.-6      	; 0x1212 <App_update+0x4a>
			
			if(u8_passFlag == 0)
    1218:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <__data_end>
    121c:	81 11       	cpse	r24, r1
    121e:	09 c0       	rjmp	.+18     	; 0x1232 <App_update+0x6a>
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
    1220:	ce 01       	movw	r24, r28
    1222:	43 96       	adiw	r24, 0x13	; 19
    1224:	0e 94 a0 08 	call	0x1140	; 0x1140 <AppADMIN_getAtmPIN>
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	09 f0       	breq	.+2      	; 0x122e <App_update+0x66>
    122c:	66 c0       	rjmp	.+204    	; 0x12fa <App_update+0x132>
					return APP_STATUS_ERROR_NOK;
				u8_passFlag = 1;
    122e:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <__data_end>
			}
// 			if(Terminal_Out((uint8_t*)"\n1.Add New Customer\n\r2.Update Max Amount\n\r3.Exit\r") != TERMINAL_STATUS_ERROR_OK)
// 				return APP_STATUS_ERROR_NOK;
			if(Terminal_Out((uint8_t*)"\n1.Add New Customer\n\r2.Update Existing Customer\n\r3.Update Max Amount\n\r4.Exit\r") != TERMINAL_STATUS_ERROR_OK)
    1232:	82 e7       	ldi	r24, 0x72	; 114
    1234:	94 e0       	ldi	r25, 0x04	; 4
    1236:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	09 f0       	breq	.+2      	; 0x1240 <App_update+0x78>
    123e:	5f c0       	rjmp	.+190    	; 0x12fe <App_update+0x136>
				return APP_STATUS_ERROR_NOK;
				
			AppADMIN_getInput(au8_Input);
    1240:	ce 01       	movw	r24, r28
    1242:	48 96       	adiw	r24, 0x18	; 24
    1244:	0e 94 c1 05 	call	0xb82	; 0xb82 <AppADMIN_getInput>
			if(au8_Input[0] == '1')//--------- New Customer OPTION -----------//
    1248:	88 8d       	ldd	r24, Y+24	; 0x18
    124a:	81 33       	cpi	r24, 0x31	; 49
    124c:	39 f4       	brne	.+14     	; 0x125c <App_update+0x94>
			{
				AppADMIN_processNewCustomer();
    124e:	0e 94 aa 06 	call	0xd54	; 0xd54 <AppADMIN_processNewCustomer>
				EmptyString(au8_Input);
    1252:	ce 01       	movw	r24, r28
    1254:	48 96       	adiw	r24, 0x18	; 24
    1256:	0e 94 cf 19 	call	0x339e	; 0x339e <EmptyString>
    125a:	d0 c0       	rjmp	.+416    	; 0x13fc <App_update+0x234>

			}else if(au8_Input[0] == '2')//--------- Update Existing Customer OPTION -----------//
    125c:	82 33       	cpi	r24, 0x32	; 50
    125e:	39 f4       	brne	.+14     	; 0x126e <App_update+0xa6>
			{
				AppADMIN_processExistingCustomer();
    1260:	0e 94 a5 07 	call	0xf4a	; 0xf4a <AppADMIN_processExistingCustomer>
				EmptyString(au8_Input);
    1264:	ce 01       	movw	r24, r28
    1266:	48 96       	adiw	r24, 0x18	; 24
    1268:	0e 94 cf 19 	call	0x339e	; 0x339e <EmptyString>
    126c:	c7 c0       	rjmp	.+398    	; 0x13fc <App_update+0x234>
			}else if(au8_Input[0] == '3')//--------- Max Amount OPTION -----------//
    126e:	83 33       	cpi	r24, 0x33	; 51
    1270:	d1 f4       	brne	.+52     	; 0x12a6 <App_update+0xde>
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
    1272:	ce 01       	movw	r24, r28
    1274:	0b 96       	adiw	r24, 0x0b	; 11
    1276:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <AppADMIN_getnewMaxAmount>
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
    127a:	ce 01       	movw	r24, r28
    127c:	0b 96       	adiw	r24, 0x0b	; 11
    127e:	0e 94 90 19 	call	0x3320	; 0x3320 <stringLength>
    1282:	48 2f       	mov	r20, r24
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	be 01       	movw	r22, r28
    1288:	65 5f       	subi	r22, 0xF5	; 245
    128a:	7f 4f       	sbci	r23, 0xFF	; 255
    128c:	83 e0       	ldi	r24, 0x03	; 3
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 c6 0b 	call	0x178c	; 0x178c <Eeprom_24_writePacket>
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	a9 f5       	brne	.+106    	; 0x1302 <App_update+0x13a>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempMaxAmount, gau8_maxAmount);	
    1298:	6e e8       	ldi	r22, 0x8E	; 142
    129a:	75 e0       	ldi	r23, 0x05	; 5
    129c:	ce 01       	movw	r24, r28
    129e:	0b 96       	adiw	r24, 0x0b	; 11
    12a0:	0e 94 db 19 	call	0x33b6	; 0x33b6 <stringCopy>
    12a4:	ab c0       	rjmp	.+342    	; 0x13fc <App_update+0x234>
			}else if(au8_Input[0] == '4')//--------- EXIT OPTION -----------//
    12a6:	84 33       	cpi	r24, 0x34	; 52
    12a8:	09 f5       	brne	.+66     	; 0x12ec <App_update+0x124>
			{
				if(gu8_initData == ATM_DB_FLAG_SET_VAL)
    12aa:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <gu8_initData>
    12ae:	8a 3a       	cpi	r24, 0xAA	; 170
    12b0:	a9 f4       	brne	.+42     	; 0x12dc <App_update+0x114>
				{
					u8_passFlag = 0;
    12b2:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <__data_end>
					gu8_ATMMode = ATM_MODE_USER;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					Lcd_clear();
    12bc:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <Lcd_clear>
					if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
    12c0:	85 ea       	ldi	r24, 0xA5	; 165
    12c2:	92 e0       	ldi	r25, 0x02	; 2
    12c4:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	e9 f4       	brne	.+58     	; 0x1306 <App_update+0x13e>
						return APP_STATUS_ERROR_NOK;
					
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
    12cc:	65 e8       	ldi	r22, 0x85	; 133
    12ce:	71 e0       	ldi	r23, 0x01	; 1
    12d0:	84 e9       	ldi	r24, 0x94	; 148
    12d2:	91 e0       	ldi	r25, 0x01	; 1
    12d4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
					
					return APP_STATUS_ERROR_OK;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	9d c0       	rjmp	.+314    	; 0x1416 <App_update+0x24e>
				}else
				{
					if(Terminal_Out((uint8_t*)"\nData Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
    12dc:	80 ec       	ldi	r24, 0xC0	; 192
    12de:	94 e0       	ldi	r25, 0x04	; 4
    12e0:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	89 f0       	breq	.+34     	; 0x130a <App_update+0x142>
						return APP_STATUS_ERROR_NOK;
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	95 c0       	rjmp	.+298    	; 0x1416 <App_update+0x24e>
					return APP_STATUS_ERROR_OK;
				}
			}else
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Input!") != TERMINAL_STATUS_ERROR_OK)
    12ec:	8e ef       	ldi	r24, 0xFE	; 254
    12ee:	94 e0       	ldi	r25, 0x04	; 4
    12f0:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	59 f4       	brne	.+22     	; 0x130e <App_update+0x146>
    12f8:	81 c0       	rjmp	.+258    	; 0x13fc <App_update+0x234>
			
			if(u8_passFlag == 0)
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	8c c0       	rjmp	.+280    	; 0x1416 <App_update+0x24e>
				u8_passFlag = 1;
			}
// 			if(Terminal_Out((uint8_t*)"\n1.Add New Customer\n\r2.Update Max Amount\n\r3.Exit\r") != TERMINAL_STATUS_ERROR_OK)
// 				return APP_STATUS_ERROR_NOK;
			if(Terminal_Out((uint8_t*)"\n1.Add New Customer\n\r2.Update Existing Customer\n\r3.Update Max Amount\n\r4.Exit\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	8a c0       	rjmp	.+276    	; 0x1416 <App_update+0x24e>
				EmptyString(au8_Input);
			}else if(au8_Input[0] == '3')//--------- Max Amount OPTION -----------//
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	88 c0       	rjmp	.+272    	; 0x1416 <App_update+0x24e>
				{
					u8_passFlag = 0;
					gu8_ATMMode = ATM_MODE_USER;
					Lcd_clear();
					if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	86 c0       	rjmp	.+268    	; 0x1416 <App_update+0x24e>
					return APP_STATUS_ERROR_OK;
				}else
				{
					if(Terminal_Out((uint8_t*)"\nData Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					return APP_STATUS_ERROR_OK;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	84 c0       	rjmp	.+264    	; 0x1416 <App_update+0x24e>
				}
			}else
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Input!") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	82 c0       	rjmp	.+260    	; 0x1416 <App_update+0x24e>
	{							/************* User Mode **************/
		/********************************************************************************************/
		/************************************ ADMIN ENTERED ****************************************/
		/********************************************************************************************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
    1312:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <gu8_ADMIN_Request>
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	31 f4       	brne	.+12     	; 0x1326 <App_update+0x15e>
    131a:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <gu8_USER_Mode_State>
    131e:	81 11       	cpse	r24, r1
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <App_update+0x15e>
			{
				gu8_ATMMode = ATM_MODE_ADMIN;
    1322:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
    1326:	ce 01       	movw	r24, r28
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	0e 94 90 05 	call	0xb20	; 0xb20 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
    132e:	81 30       	cpi	r24, 0x01	; 1
    1330:	31 f5       	brne	.+76     	; 0x137e <App_update+0x1b6>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
    1332:	60 e7       	ldi	r22, 0x70	; 112
    1334:	75 e0       	ldi	r23, 0x05	; 5
    1336:	ce 01       	movw	r24, r28
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	0e 94 9c 19 	call	0x3338	; 0x3338 <stringCompare>
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	11 f5       	brne	.+68     	; 0x1386 <App_update+0x1be>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
    1342:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <gu8_USER_Mode_State>
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	51 f4       	brne	.+20     	; 0x135e <App_update+0x196>
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
    134a:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <gu8_ADMIN_Request>
						if(Terminal_Out((uint8_t*)"\nATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
    134e:	8e e0       	ldi	r24, 0x0E	; 14
    1350:	95 e0       	ldi	r25, 0x05	; 5
    1352:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	09 f0       	breq	.+2      	; 0x135c <App_update+0x194>
    135a:	4a c0       	rjmp	.+148    	; 0x13f0 <App_update+0x228>
    135c:	14 c0       	rjmp	.+40     	; 0x1386 <App_update+0x1be>
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The ATM is not used by User */
					{
						gu8_ATMMode = ATM_MODE_ADMIN;
    135e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
						
						Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
    1362:	60 e7       	ldi	r22, 0x70	; 112
    1364:	72 e0       	ldi	r23, 0x02	; 2
    1366:	81 e8       	ldi	r24, 0x81	; 129
    1368:	92 e0       	ldi	r25, 0x02	; 2
    136a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
						
						if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
    136e:	82 e9       	ldi	r24, 0x92	; 146
    1370:	92 e0       	ldi	r25, 0x02	; 2
    1372:	0e 94 c3 10 	call	0x2186	; 0x2186 <Terminal_Out>
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	e9 f1       	breq	.+122    	; 0x13f4 <App_update+0x22c>
							return APP_STATUS_ERROR_NOK;
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	4c c0       	rjmp	.+152    	; 0x1416 <App_update+0x24e>
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	11 f0       	breq	.+4      	; 0x1386 <App_update+0x1be>
    1382:	86 30       	cpi	r24, 0x06	; 6
    1384:	c9 f5       	brne	.+114    	; 0x13f8 <App_update+0x230>
				return APP_STATUS_ERROR_NOK;
			/****************************************************************/
			/********************** Getting Input from User ************************/
			uint8_t au8_data=0;
    1386:	1b 8a       	std	Y+19, r1	; 0x13
			enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&au8_data);
    1388:	ce 01       	movw	r24, r28
    138a:	43 96       	adiw	r24, 0x13	; 19
    138c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <Keypad_readKey>
			if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
    1390:	86 30       	cpi	r24, 0x06	; 6
    1392:	b1 f4       	brne	.+44     	; 0x13c0 <App_update+0x1f8>
			{
			/************************************ KEYPAD PRESSED ****************************************/
			/********* Insert Card Chosen ********/
				if(au8_data == '1') 
    1394:	8b 89       	ldd	r24, Y+19	; 0x13
    1396:	81 33       	cpi	r24, 0x31	; 49
    1398:	19 f4       	brne	.+6      	; 0x13a0 <App_update+0x1d8>
				{
					AppUSER_insertCard();
    139a:	0e 94 0f 04 	call	0x81e	; 0x81e <AppUSER_insertCard>
    139e:	2e c0       	rjmp	.+92     	; 0x13fc <App_update+0x234>
			/******* Display Temp Chosen *******/
				}else if(au8_data == '2')
    13a0:	82 33       	cpi	r24, 0x32	; 50
    13a2:	19 f4       	brne	.+6      	; 0x13aa <App_update+0x1e2>
				{
					AppUSER_displayTemp();
    13a4:	0e 94 9c 00 	call	0x138	; 0x138 <AppUSER_displayTemp>
    13a8:	29 c0       	rjmp	.+82     	; 0x13fc <App_update+0x234>
				}else if(au8_data == '-') 
    13aa:	8d 32       	cpi	r24, 0x2D	; 45
    13ac:	39 f5       	brne	.+78     	; 0x13fc <App_update+0x234>
				{
					gu8_displayFlag = 0;
    13ae:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <gu8_displayFlag>
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
    13b2:	65 e8       	ldi	r22, 0x85	; 133
    13b4:	71 e0       	ldi	r23, 0x01	; 1
    13b6:	84 e9       	ldi	r24, 0x94	; 148
    13b8:	91 e0       	ldi	r25, 0x01	; 1
    13ba:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Lcd_printLCD>
    13be:	1e c0       	rjmp	.+60     	; 0x13fc <App_update+0x234>
				}
			}else if(gu8_displayFlag == DISPLAY_TEMP) /* If in temperature screen >> Update the temp value */
    13c0:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <gu8_displayFlag>
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	d1 f4       	brne	.+52     	; 0x13fc <App_update+0x234>
			{
				uint8_t u8_currentTemp=0;
    13c8:	1b 86       	std	Y+11, r1	; 0x0b
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
    13ca:	ce 01       	movw	r24, r28
    13cc:	0b 96       	adiw	r24, 0x0b	; 11
    13ce:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LM35_readTemp>
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	99 f4       	brne	.+38     	; 0x13fc <App_update+0x234>
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <Lcd_setCursor>
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	31 f4       	brne	.+12     	; 0x13ec <App_update+0x224>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
    13e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printDecimal>
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	41 f0       	breq	.+16     	; 0x13fc <App_update+0x234>
			{
				uint8_t u8_currentTemp=0;
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	13 c0       	rjmp	.+38     	; 0x1416 <App_update+0x24e>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"\nATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	11 c0       	rjmp	.+34     	; 0x1416 <App_update+0x24e>
						
						Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
						
						if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
						return APP_STATUS_ERROR_OK;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	0f c0       	rjmp	.+30     	; 0x1416 <App_update+0x24e>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	0d c0       	rjmp	.+26     	; 0x1416 <App_update+0x24e>
					return APP_STATUS_ERROR_NOK;
				}
			}
	/****************************************************************/
	}
	Delay_ms(100);
    13fc:	24 e6       	ldi	r18, 0x64	; 100
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
	return APP_STATUS_ERROR_OK;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <App_update+0x24e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
    1414:	85 e0       	ldi	r24, 0x05	; 5
			}
	/****************************************************************/
	}
	Delay_ms(100);
	return APP_STATUS_ERROR_OK;
}
    1416:	69 96       	adiw	r28, 0x19	; 25
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	08 95       	ret

00001428 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
    1428:	0e 94 cd 04 	call	0x99a	; 0x99a <App_init>
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	39 f4       	brne	.+14     	; 0x143e <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
    1430:	8f b7       	in	r24, 0x3f	; 63
    1432:	80 68       	ori	r24, 0x80	; 128
    1434:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
    1436:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <App_update>
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	e1 f3       	breq	.-8      	; 0x1436 <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
	}
}
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	08 95       	ret

00001442 <Button_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button module is already initialized */
	if (genu_BttnModuleState == BTTN_STATUS_INIT)
    1442:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_BttnModuleState>
    1446:	85 30       	cpi	r24, 0x05	; 5
    1448:	71 f0       	breq	.+28     	; 0x1466 <Button_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    144a:	85 e8       	ldi	r24, 0x85	; 133
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	11 f0       	breq	.+4      	; 0x145a <Button_init+0x18>
    1456:	87 30       	cpi	r24, 0x07	; 7
    1458:	29 f4       	brne	.+10     	; 0x1464 <Button_init+0x22>
		return BTTN_STATUS_ERROR_NOK;
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
    145a:	85 e0       	ldi	r24, 0x05	; 5
    145c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genu_BttnModuleState>
	return BTTN_STATUS_ERROR_OK;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return BTTN_STATUS_ERROR_NOK;
    1464:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
	return BTTN_STATUS_ERROR_OK;
}
    1466:	08 95       	ret

00001468 <Button_getState>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
    1468:	82 30       	cpi	r24, 0x02	; 2
    146a:	60 f4       	brcc	.+24     	; 0x1484 <Button_getState+0x1c>
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
    146c:	61 15       	cp	r22, r1
    146e:	71 05       	cpc	r23, r1
    1470:	59 f0       	breq	.+22     	; 0x1488 <Button_getState+0x20>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
    1472:	e8 2f       	mov	r30, r24
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	e5 53       	subi	r30, 0x35	; 53
    1478:	fa 4f       	sbci	r31, 0xFA	; 250
    147a:	80 81       	ld	r24, Z
    147c:	fb 01       	movw	r30, r22
    147e:	80 83       	st	Z, r24
	return BTTN_STATUS_ERROR_OK;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
	{
		return BTTN_STATUS_ERROR_NULL;
    1488:	83 e0       	ldi	r24, 0x03	; 3
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
	return BTTN_STATUS_ERROR_OK;
}
    148a:	08 95       	ret

0000148c <Button_updateState>:
* Parameters (out): None
* Return value: enuBttn_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to update the state of the button (Pressed or Released) by reading the Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuBttn_Status_t Button_updateState(uint8_t u8_bttnID)
{
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	1f 92       	push	r1
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
    149a:	82 30       	cpi	r24, 0x02	; 2
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <Button_updateState+0x14>
    149e:	58 c0       	rjmp	.+176    	; 0x1550 <Button_updateState+0xc4>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
    14a0:	19 82       	std	Y+1, r1	; 0x01
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
    14a2:	08 2f       	mov	r16, r24
    14a4:	10 e0       	ldi	r17, 0x00	; 0
    14a6:	f8 01       	movw	r30, r16
    14a8:	ed 59       	subi	r30, 0x9D	; 157
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	be 01       	movw	r22, r28
    14ae:	6f 5f       	subi	r22, 0xFF	; 255
    14b0:	7f 4f       	sbci	r23, 0xFF	; 255
    14b2:	80 81       	ld	r24, Z
    14b4:	0e 94 41 14 	call	0x2882	; 0x2882 <Dio_readPin>
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	09 f0       	breq	.+2      	; 0x14be <Button_updateState+0x32>
    14bc:	4b c0       	rjmp	.+150    	; 0x1554 <Button_updateState+0xc8>
		return BTTN_STATUS_ERROR_NOK;
	if(u8_valueTemp == PIN_HIGH)
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	09 f5       	brne	.+66     	; 0x1506 <Button_updateState+0x7a>
    14c4:	04 c0       	rjmp	.+8      	; 0x14ce <Button_updateState+0x42>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	a1 1d       	adc	r26, r1
    14ca:	b1 1d       	adc	r27, r1
    14cc:	03 c0       	rjmp	.+6      	; 0x14d4 <Button_updateState+0x48>
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	dc 01       	movw	r26, r24
    14d4:	88 3b       	cpi	r24, 0xB8	; 184
    14d6:	2b e0       	ldi	r18, 0x0B	; 11
    14d8:	92 07       	cpc	r25, r18
    14da:	a1 05       	cpc	r26, r1
    14dc:	b1 05       	cpc	r27, r1
    14de:	98 f3       	brcs	.-26     	; 0x14c6 <Button_updateState+0x3a>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    14e0:	be 01       	movw	r22, r28
    14e2:	6f 5f       	subi	r22, 0xFF	; 255
    14e4:	7f 4f       	sbci	r23, 0xFF	; 255
    14e6:	f8 01       	movw	r30, r16
    14e8:	ed 59       	subi	r30, 0x9D	; 157
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	80 81       	ld	r24, Z
    14ee:	0e 94 41 14 	call	0x2882	; 0x2882 <Dio_readPin>
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	89 f5       	brne	.+98     	; 0x1558 <Button_updateState+0xcc>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_HIGH)
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	81 f5       	brne	.+96     	; 0x155c <Button_updateState+0xd0>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
    14fc:	f8 01       	movw	r30, r16
    14fe:	e5 53       	subi	r30, 0x35	; 53
    1500:	fa 4f       	sbci	r31, 0xFA	; 250
    1502:	80 83       	st	Z, r24
    1504:	30 c0       	rjmp	.+96     	; 0x1566 <Button_updateState+0xda>
	}else if (u8_valueTemp == PIN_LOW)
    1506:	88 23       	and	r24, r24
    1508:	31 f0       	breq	.+12     	; 0x1516 <Button_updateState+0x8a>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	2c c0       	rjmp	.+88     	; 0x1566 <Button_updateState+0xda>
		if(u8_valueTemp == PIN_HIGH)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
	}else if (u8_valueTemp == PIN_LOW)
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    150e:	01 96       	adiw	r24, 0x01	; 1
    1510:	a1 1d       	adc	r26, r1
    1512:	b1 1d       	adc	r27, r1
    1514:	03 c0       	rjmp	.+6      	; 0x151c <Button_updateState+0x90>
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	dc 01       	movw	r26, r24
    151c:	88 3b       	cpi	r24, 0xB8	; 184
    151e:	2b e0       	ldi	r18, 0x0B	; 11
    1520:	92 07       	cpc	r25, r18
    1522:	a1 05       	cpc	r26, r1
    1524:	b1 05       	cpc	r27, r1
    1526:	98 f3       	brcs	.-26     	; 0x150e <Button_updateState+0x82>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    1528:	be 01       	movw	r22, r28
    152a:	6f 5f       	subi	r22, 0xFF	; 255
    152c:	7f 4f       	sbci	r23, 0xFF	; 255
    152e:	f8 01       	movw	r30, r16
    1530:	ed 59       	subi	r30, 0x9D	; 157
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	80 81       	ld	r24, Z
    1536:	0e 94 41 14 	call	0x2882	; 0x2882 <Dio_readPin>
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	89 f4       	brne	.+34     	; 0x1560 <Button_updateState+0xd4>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	81 11       	cpse	r24, r1
    1542:	10 c0       	rjmp	.+32     	; 0x1564 <Button_updateState+0xd8>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
    1544:	f8 01       	movw	r30, r16
    1546:	e5 53       	subi	r30, 0x35	; 53
    1548:	fa 4f       	sbci	r31, 0xFA	; 250
    154a:	10 82       	st	Z, r1
	}
	return BTTN_STATUS_ERROR_OK;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	0b c0       	rjmp	.+22     	; 0x1566 <Button_updateState+0xda>
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
		return BTTN_STATUS_ERROR_ID_INVALID;
    1550:	82 e0       	ldi	r24, 0x02	; 2
    1552:	09 c0       	rjmp	.+18     	; 0x1566 <Button_updateState+0xda>
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
		return BTTN_STATUS_ERROR_NOK;
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	07 c0       	rjmp	.+14     	; 0x1566 <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	05 c0       	rjmp	.+10     	; 0x1566 <Button_updateState+0xda>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	03 c0       	rjmp	.+6      	; 0x1566 <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <Button_updateState+0xda>
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    1564:	81 e0       	ldi	r24, 0x01	; 1
}
    1566:	0f 90       	pop	r0
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	08 95       	ret

00001572 <EEPROM_getAddresses>:
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
#if EEPROM_24_MODEL	== AT24C16B
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
    1572:	9a 01       	movw	r18, r20
    1574:	22 27       	eor	r18, r18
    1576:	37 70       	andi	r19, 0x07	; 7
    1578:	22 0f       	add	r18, r18
    157a:	23 2f       	mov	r18, r19
    157c:	22 1f       	adc	r18, r18
    157e:	33 0b       	sbc	r19, r19
    1580:	31 95       	neg	r19
    1582:	20 65       	ori	r18, 0x50	; 80
    1584:	fc 01       	movw	r30, r24
    1586:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
    1588:	fb 01       	movw	r30, r22
    158a:	40 83       	st	Z, r20
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS;
	pu8_wordAddress[0] = (uint8_t)(u16_location >> 8);
	pu8_wordAddress[1] = (uint8_t)u16_location;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	08 95       	ret

00001590 <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
    1590:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    1594:	83 30       	cpi	r24, 0x03	; 3
    1596:	51 f0       	breq	.+20     	; 0x15ac <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
    1598:	0e 94 6e 17 	call	0x2edc	; 0x2edc <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
    159c:	85 30       	cpi	r24, 0x05	; 5
    159e:	29 f0       	breq	.+10     	; 0x15aa <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
    15a0:	83 e0       	ldi	r24, 0x03	; 3
    15a2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
    15aa:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
    15ac:	08 95       	ret

000015ae <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <Eeprom_24_writeByte+0x8>
    15b6:	1f 92       	push	r1
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	ac 01       	movw	r20, r24
    15be:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    15c0:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    15c4:	93 30       	cpi	r25, 0x03	; 3
    15c6:	11 f5       	brne	.+68     	; 0x160c <Eeprom_24_writeByte+0x5e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    15c8:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    15ca:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    15cc:	be 01       	movw	r22, r28
    15ce:	6e 5f       	subi	r22, 0xFE	; 254
    15d0:	7f 4f       	sbci	r23, 0xFF	; 255
    15d2:	ce 01       	movw	r24, r28
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	0e 94 b9 0a 	call	0x1572	; 0x1572 <EEPROM_getAddresses>
    15da:	18 2f       	mov	r17, r24
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	c1 f4       	brne	.+48     	; 0x1610 <Eeprom_24_writeByte+0x62>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    15e0:	21 e0       	ldi	r18, 0x01	; 1
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	ae 01       	movw	r20, r28
    15e6:	4d 5f       	subi	r20, 0xFD	; 253
    15e8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ea:	6a 81       	ldd	r22, Y+2	; 0x02
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	0e 94 a8 18 	call	0x3150	; 0x3150 <I2C_MasterSendToLocation>
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	79 f4       	brne	.+30     	; 0x1614 <Eeprom_24_writeByte+0x66>
 
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
    15f6:	2f e0       	ldi	r18, 0x0F	; 15
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    160a:	05 c0       	rjmp	.+10     	; 0x1616 <Eeprom_24_writeByte+0x68>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    160c:	12 e0       	ldi	r17, 0x02	; 2
    160e:	03 c0       	rjmp	.+6      	; 0x1616 <Eeprom_24_writeByte+0x68>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1610:	10 e0       	ldi	r17, 0x00	; 0
    1612:	01 c0       	rjmp	.+2      	; 0x1616 <Eeprom_24_writeByte+0x68>
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1614:	10 e0       	ldi	r17, 0x00	; 0
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
	return EEPROM_24_STATUS_ERROR_OK;
}
    1616:	81 2f       	mov	r24, r17
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	1f 91       	pop	r17
    1624:	08 95       	ret

00001626 <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
    1626:	ef 92       	push	r14
    1628:	ff 92       	push	r15
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	00 d0       	rcall	.+0      	; 0x1632 <Eeprom_24_readByte+0xc>
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1638:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    163c:	93 30       	cpi	r25, 0x03	; 3
    163e:	21 f5       	brne	.+72     	; 0x1688 <Eeprom_24_readByte+0x62>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1640:	61 15       	cp	r22, r1
    1642:	71 05       	cpc	r23, r1
    1644:	19 f1       	breq	.+70     	; 0x168c <Eeprom_24_readByte+0x66>
    1646:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    1648:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    164a:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    164c:	be 01       	movw	r22, r28
    164e:	6e 5f       	subi	r22, 0xFE	; 254
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	ce 01       	movw	r24, r28
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	0e 94 b9 0a 	call	0x1572	; 0x1572 <EEPROM_getAddresses>
    165a:	18 2f       	mov	r17, r24
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	c1 f4       	brne	.+48     	; 0x1690 <Eeprom_24_readByte+0x6a>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    1660:	21 e0       	ldi	r18, 0x01	; 1
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	a7 01       	movw	r20, r14
    1666:	6a 81       	ldd	r22, Y+2	; 0x02
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	0e 94 f7 18 	call	0x31ee	; 0x31ee <I2C_MasterReceiveFromLocation>
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	89 f4       	brne	.+34     	; 0x1694 <Eeprom_24_readByte+0x6e>

	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
	
#endif
	Delay_ms(5);
    1672:	25 e0       	ldi	r18, 0x05	; 5
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    1686:	07 c0       	rjmp	.+14     	; 0x1696 <Eeprom_24_readByte+0x70>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1688:	12 e0       	ldi	r17, 0x02	; 2
    168a:	05 c0       	rjmp	.+10     	; 0x1696 <Eeprom_24_readByte+0x70>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    168c:	14 e0       	ldi	r17, 0x04	; 4
    168e:	03 c0       	rjmp	.+6      	; 0x1696 <Eeprom_24_readByte+0x70>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1690:	10 e0       	ldi	r17, 0x00	; 0
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <Eeprom_24_readByte+0x70>
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1694:	10 e0       	ldi	r17, 0x00	; 0
		return EEPROM_24_STATUS_ERROR_NOK;
	
#endif
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
    1696:	81 2f       	mov	r24, r17
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	08 95       	ret

000016a8 <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <Eeprom_24_writePage+0xc>
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    16b8:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    16bc:	93 30       	cpi	r25, 0x03	; 3
    16be:	f9 f4       	brne	.+62     	; 0x16fe <Eeprom_24_writePage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    16c0:	61 15       	cp	r22, r1
    16c2:	71 05       	cpc	r23, r1
    16c4:	f1 f0       	breq	.+60     	; 0x1702 <Eeprom_24_writePage+0x5a>
    16c6:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
    16c8:	90 e1       	ldi	r25, 0x10	; 16
    16ca:	89 9f       	mul	r24, r25
    16cc:	a0 01       	movw	r20, r0
    16ce:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    16d0:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
    16d2:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    16d4:	be 01       	movw	r22, r28
    16d6:	6e 5f       	subi	r22, 0xFE	; 254
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255
    16da:	ce 01       	movw	r24, r28
    16dc:	01 96       	adiw	r24, 0x01	; 1
    16de:	0e 94 b9 0a 	call	0x1572	; 0x1572 <EEPROM_getAddresses>
    16e2:	18 2f       	mov	r17, r24
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	79 f4       	brne	.+30     	; 0x1706 <Eeprom_24_writePage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    16e8:	20 e1       	ldi	r18, 0x10	; 16
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	a7 01       	movw	r20, r14
    16ee:	6a 81       	ldd	r22, Y+2	; 0x02
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	0e 94 a8 18 	call	0x3150	; 0x3150 <I2C_MasterSendToLocation>
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	39 f0       	breq	.+14     	; 0x1708 <Eeprom_24_writePage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    16fa:	10 e0       	ldi	r17, 0x00	; 0
    16fc:	05 c0       	rjmp	.+10     	; 0x1708 <Eeprom_24_writePage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    16fe:	12 e0       	ldi	r17, 0x02	; 2
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <Eeprom_24_writePage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1702:	14 e0       	ldi	r17, 0x04	; 4
    1704:	01 c0       	rjmp	.+2      	; 0x1708 <Eeprom_24_writePage+0x60>
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1706:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    1708:	81 2f       	mov	r24, r17
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	ff 90       	pop	r15
    1716:	ef 90       	pop	r14
    1718:	08 95       	ret

0000171a <Eeprom_24_readPage>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory page.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read data inside a specific page in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPage(uint8_t u8_page, uint8_t *pu8_data)
{
    171a:	ef 92       	push	r14
    171c:	ff 92       	push	r15
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	00 d0       	rcall	.+0      	; 0x1726 <Eeprom_24_readPage+0xc>
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    172a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    172e:	93 30       	cpi	r25, 0x03	; 3
    1730:	f9 f4       	brne	.+62     	; 0x1770 <Eeprom_24_readPage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1732:	61 15       	cp	r22, r1
    1734:	71 05       	cpc	r23, r1
    1736:	f1 f0       	breq	.+60     	; 0x1774 <Eeprom_24_readPage+0x5a>
    1738:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
    173a:	90 e1       	ldi	r25, 0x10	; 16
    173c:	89 9f       	mul	r24, r25
    173e:	a0 01       	movw	r20, r0
    1740:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    1742:	19 82       	std	Y+1, r1	; 0x01

#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
    1744:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    1746:	be 01       	movw	r22, r28
    1748:	6e 5f       	subi	r22, 0xFE	; 254
    174a:	7f 4f       	sbci	r23, 0xFF	; 255
    174c:	ce 01       	movw	r24, r28
    174e:	01 96       	adiw	r24, 0x01	; 1
    1750:	0e 94 b9 0a 	call	0x1572	; 0x1572 <EEPROM_getAddresses>
    1754:	18 2f       	mov	r17, r24
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	79 f4       	brne	.+30     	; 0x1778 <Eeprom_24_readPage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    175a:	20 e1       	ldi	r18, 0x10	; 16
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	a7 01       	movw	r20, r14
    1760:	6a 81       	ldd	r22, Y+2	; 0x02
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	0e 94 f7 18 	call	0x31ee	; 0x31ee <I2C_MasterReceiveFromLocation>
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	39 f0       	breq	.+14     	; 0x177a <Eeprom_24_readPage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    176c:	10 e0       	ldi	r17, 0x00	; 0
    176e:	05 c0       	rjmp	.+10     	; 0x177a <Eeprom_24_readPage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1770:	12 e0       	ldi	r17, 0x02	; 2
    1772:	03 c0       	rjmp	.+6      	; 0x177a <Eeprom_24_readPage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1774:	14 e0       	ldi	r17, 0x04	; 4
    1776:	01 c0       	rjmp	.+2      	; 0x177a <Eeprom_24_readPage+0x60>
	uint8_t u8_slaveAddr=0;

#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1778:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    177a:	81 2f       	mov	r24, r17
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	1f 91       	pop	r17
    1786:	ff 90       	pop	r15
    1788:	ef 90       	pop	r14
    178a:	08 95       	ret

0000178c <Eeprom_24_writePacket>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Multiple data bytes to a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    178c:	6f 92       	push	r6
    178e:	7f 92       	push	r7
    1790:	8f 92       	push	r8
    1792:	9f 92       	push	r9
    1794:	af 92       	push	r10
    1796:	bf 92       	push	r11
    1798:	cf 92       	push	r12
    179a:	df 92       	push	r13
    179c:	ef 92       	push	r14
    179e:	ff 92       	push	r15
    17a0:	0f 93       	push	r16
    17a2:	1f 93       	push	r17
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <Eeprom_24_writePacket+0x1e>
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	5c 01       	movw	r10, r24
    17b0:	6b 01       	movw	r12, r22
    17b2:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    17b4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    17b8:	83 30       	cpi	r24, 0x03	; 3
    17ba:	09 f0       	breq	.+2      	; 0x17be <Eeprom_24_writePacket+0x32>
    17bc:	a1 c0       	rjmp	.+322    	; 0x1900 <Eeprom_24_writePacket+0x174>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    17be:	67 2b       	or	r22, r23
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <Eeprom_24_writePacket+0x38>
    17c2:	a0 c0       	rjmp	.+320    	; 0x1904 <Eeprom_24_writePacket+0x178>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    17c4:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    17c6:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    17c8:	a5 01       	movw	r20, r10
    17ca:	be 01       	movw	r22, r28
    17cc:	6e 5f       	subi	r22, 0xFE	; 254
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	ce 01       	movw	r24, r28
    17d2:	01 96       	adiw	r24, 0x01	; 1
    17d4:	0e 94 b9 0a 	call	0x1572	; 0x1572 <EEPROM_getAddresses>
    17d8:	18 2f       	mov	r17, r24
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <Eeprom_24_writePacket+0x54>
    17de:	94 c0       	rjmp	.+296    	; 0x1908 <Eeprom_24_writePacket+0x17c>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;
    17e0:	45 01       	movw	r8, r10
    17e2:	80 ef       	ldi	r24, 0xF0	; 240
    17e4:	88 22       	and	r8, r24
    17e6:	87 e0       	ldi	r24, 0x07	; 7
    17e8:	98 22       	and	r9, r24
    17ea:	96 94       	lsr	r9
    17ec:	87 94       	ror	r8
    17ee:	96 94       	lsr	r9
    17f0:	87 94       	ror	r8
    17f2:	96 94       	lsr	r9
    17f4:	87 94       	ror	r8
    17f6:	96 94       	lsr	r9
    17f8:	87 94       	ror	r8
    17fa:	68 2c       	mov	r6, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
    17fc:	8a 2d       	mov	r24, r10
    17fe:	8f 70       	andi	r24, 0x0F	; 15
	if(u8_byteOffset != 0)
    1800:	51 f1       	breq	.+84     	; 0x1856 <Eeprom_24_writePacket+0xca>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    1802:	90 e1       	ldi	r25, 0x10	; 16
    1804:	a9 2e       	mov	r10, r25
    1806:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    1808:	b1 2c       	mov	r11, r1
    180a:	ea 14       	cp	r14, r10
    180c:	fb 04       	cpc	r15, r11
    180e:	58 f4       	brcc	.+22     	; 0x1826 <Eeprom_24_writePacket+0x9a>
		{
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1810:	97 01       	movw	r18, r14
    1812:	a6 01       	movw	r20, r12
    1814:	6a 81       	ldd	r22, Y+2	; 0x02
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	0e 94 a8 18 	call	0x3150	; 0x3150 <I2C_MasterSendToLocation>
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	09 f4       	brne	.+2      	; 0x1822 <Eeprom_24_writePacket+0x96>
    1820:	7c c0       	rjmp	.+248    	; 0x191a <Eeprom_24_writePacket+0x18e>
				return EEPROM_24_STATUS_ERROR_NOK;
    1822:	10 e0       	ldi	r17, 0x00	; 0
    1824:	7a c0       	rjmp	.+244    	; 0x191a <Eeprom_24_writePacket+0x18e>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    1826:	95 01       	movw	r18, r10
    1828:	a6 01       	movw	r20, r12
    182a:	6a 81       	ldd	r22, Y+2	; 0x02
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	0e 94 a8 18 	call	0x3150	; 0x3150 <I2C_MasterSendToLocation>
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	09 f0       	breq	.+2      	; 0x1838 <Eeprom_24_writePacket+0xac>
    1836:	6a c0       	rjmp	.+212    	; 0x190c <Eeprom_24_writePacket+0x180>
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    1838:	ea 18       	sub	r14, r10
    183a:	fb 08       	sbc	r15, r11
		i=1;
		Delay_ms(15);
    183c:	2f e0       	ldi	r18, 0x0F	; 15
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	50 e0       	ldi	r21, 0x00	; 0
    1844:	60 e0       	ldi	r22, 0x00	; 0
    1846:	70 e0       	ldi	r23, 0x00	; 0
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
    1850:	77 24       	eor	r7, r7
    1852:	73 94       	inc	r7
    1854:	03 c0       	rjmp	.+6      	; 0x185c <Eeprom_24_writePacket+0xd0>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
    1856:	71 2c       	mov	r7, r1

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
    1858:	a1 2c       	mov	r10, r1
    185a:	b1 2c       	mov	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
    185c:	c7 01       	movw	r24, r14
    185e:	92 95       	swap	r25
    1860:	82 95       	swap	r24
    1862:	8f 70       	andi	r24, 0x0F	; 15
    1864:	89 27       	eor	r24, r25
    1866:	9f 70       	andi	r25, 0x0F	; 15
    1868:	89 27       	eor	r24, r25
    186a:	08 2f       	mov	r16, r24
	while (pages_num > 0)
    186c:	1c c0       	rjmp	.+56     	; 0x18a6 <Eeprom_24_writePacket+0x11a>
	{
		pages_num--;
    186e:	01 50       	subi	r16, 0x01	; 1
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    1870:	b6 01       	movw	r22, r12
    1872:	6a 0d       	add	r22, r10
    1874:	7b 1d       	adc	r23, r11
    1876:	87 2d       	mov	r24, r7
    1878:	86 0d       	add	r24, r6
    187a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <Eeprom_24_writePage>
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	09 f0       	breq	.+2      	; 0x1884 <Eeprom_24_writePacket+0xf8>
    1882:	46 c0       	rjmp	.+140    	; 0x1910 <Eeprom_24_writePacket+0x184>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    1884:	73 94       	inc	r7
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
    1886:	80 e1       	ldi	r24, 0x10	; 16
    1888:	e8 1a       	sub	r14, r24
    188a:	f1 08       	sbc	r15, r1
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
    188c:	80 e1       	ldi	r24, 0x10	; 16
    188e:	a8 0e       	add	r10, r24
    1890:	b1 1c       	adc	r11, r1
		Delay_ms(15);
    1892:	2f e0       	ldi	r18, 0x0F	; 15
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	60 e0       	ldi	r22, 0x00	; 0
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
    18a6:	10 16       	cp	r1, r16
    18a8:	14 f3       	brlt	.-60     	; 0x186e <Eeprom_24_writePacket+0xe2>
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
		Delay_ms(15);
	}
	
	if (u16_dataLen > 0)
    18aa:	e1 14       	cp	r14, r1
    18ac:	f1 04       	cpc	r15, r1
    18ae:	a9 f1       	breq	.+106    	; 0x191a <Eeprom_24_writePacket+0x18e>
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
    18b0:	a4 01       	movw	r20, r8
    18b2:	47 0d       	add	r20, r7
    18b4:	51 1d       	adc	r21, r1
    18b6:	42 95       	swap	r20
    18b8:	52 95       	swap	r21
    18ba:	50 7f       	andi	r21, 0xF0	; 240
    18bc:	54 27       	eor	r21, r20
    18be:	40 7f       	andi	r20, 0xF0	; 240
    18c0:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
    18c2:	be 01       	movw	r22, r28
    18c4:	6e 5f       	subi	r22, 0xFE	; 254
    18c6:	7f 4f       	sbci	r23, 0xFF	; 255
    18c8:	ce 01       	movw	r24, r28
    18ca:	01 96       	adiw	r24, 0x01	; 1
    18cc:	0e 94 b9 0a 	call	0x1572	; 0x1572 <EEPROM_getAddresses>
    18d0:	18 2f       	mov	r17, r24
    18d2:	81 30       	cpi	r24, 0x01	; 1
    18d4:	f9 f4       	brne	.+62     	; 0x1914 <Eeprom_24_writePacket+0x188>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    18d6:	a6 01       	movw	r20, r12
    18d8:	4a 0d       	add	r20, r10
    18da:	5b 1d       	adc	r21, r11
    18dc:	97 01       	movw	r18, r14
    18de:	6a 81       	ldd	r22, Y+2	; 0x02
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	0e 94 a8 18 	call	0x3150	; 0x3150 <I2C_MasterSendToLocation>
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	b9 f4       	brne	.+46     	; 0x1918 <Eeprom_24_writePacket+0x18c>
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
    18ea:	2f e0       	ldi	r18, 0x0F	; 15
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	60 e0       	ldi	r22, 0x00	; 0
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
    18fe:	0d c0       	rjmp	.+26     	; 0x191a <Eeprom_24_writePacket+0x18e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1900:	12 e0       	ldi	r17, 0x02	; 2
    1902:	0b c0       	rjmp	.+22     	; 0x191a <Eeprom_24_writePacket+0x18e>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1904:	14 e0       	ldi	r17, 0x04	; 4
    1906:	09 c0       	rjmp	.+18     	; 0x191a <Eeprom_24_writePacket+0x18e>
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1908:	10 e0       	ldi	r17, 0x00	; 0
    190a:	07 c0       	rjmp	.+14     	; 0x191a <Eeprom_24_writePacket+0x18e>
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    190c:	10 e0       	ldi	r17, 0x00	; 0
    190e:	05 c0       	rjmp	.+10     	; 0x191a <Eeprom_24_writePacket+0x18e>
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
	{
		pages_num--;
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1910:	10 e0       	ldi	r17, 0x00	; 0
    1912:	03 c0       	rjmp	.+6      	; 0x191a <Eeprom_24_writePacket+0x18e>
	
	if (u16_dataLen > 0)
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1914:	10 e0       	ldi	r17, 0x00	; 0
    1916:	01 c0       	rjmp	.+2      	; 0x191a <Eeprom_24_writePacket+0x18e>
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1918:	10 e0       	ldi	r17, 0x00	; 0
		Delay_ms(15);
	}

#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    191a:	81 2f       	mov	r24, r17
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	ff 90       	pop	r15
    192a:	ef 90       	pop	r14
    192c:	df 90       	pop	r13
    192e:	cf 90       	pop	r12
    1930:	bf 90       	pop	r11
    1932:	af 90       	pop	r10
    1934:	9f 90       	pop	r9
    1936:	8f 90       	pop	r8
    1938:	7f 90       	pop	r7
    193a:	6f 90       	pop	r6
    193c:	08 95       	ret

0000193e <Eeprom_24_readPacket>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read Multiple data bytes from a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    193e:	6f 92       	push	r6
    1940:	7f 92       	push	r7
    1942:	8f 92       	push	r8
    1944:	9f 92       	push	r9
    1946:	af 92       	push	r10
    1948:	bf 92       	push	r11
    194a:	cf 92       	push	r12
    194c:	df 92       	push	r13
    194e:	ef 92       	push	r14
    1950:	ff 92       	push	r15
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	00 d0       	rcall	.+0      	; 0x195c <Eeprom_24_readPacket+0x1e>
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	5c 01       	movw	r10, r24
    1962:	6b 01       	movw	r12, r22
    1964:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1966:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    196a:	83 30       	cpi	r24, 0x03	; 3
    196c:	09 f0       	breq	.+2      	; 0x1970 <Eeprom_24_readPacket+0x32>
    196e:	84 c0       	rjmp	.+264    	; 0x1a78 <Eeprom_24_readPacket+0x13a>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1970:	67 2b       	or	r22, r23
    1972:	09 f4       	brne	.+2      	; 0x1976 <Eeprom_24_readPacket+0x38>
    1974:	83 c0       	rjmp	.+262    	; 0x1a7c <Eeprom_24_readPacket+0x13e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    1976:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u16dataIndex=0;
	uint8_t i=0;

#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;	
    1978:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    197a:	a5 01       	movw	r20, r10
    197c:	be 01       	movw	r22, r28
    197e:	6e 5f       	subi	r22, 0xFE	; 254
    1980:	7f 4f       	sbci	r23, 0xFF	; 255
    1982:	ce 01       	movw	r24, r28
    1984:	01 96       	adiw	r24, 0x01	; 1
    1986:	0e 94 b9 0a 	call	0x1572	; 0x1572 <EEPROM_getAddresses>
    198a:	18 2f       	mov	r17, r24
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	09 f0       	breq	.+2      	; 0x1992 <Eeprom_24_readPacket+0x54>
    1990:	77 c0       	rjmp	.+238    	; 0x1a80 <Eeprom_24_readPacket+0x142>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;		//The first page to write in
    1992:	45 01       	movw	r8, r10
    1994:	80 ef       	ldi	r24, 0xF0	; 240
    1996:	88 22       	and	r8, r24
    1998:	87 e0       	ldi	r24, 0x07	; 7
    199a:	98 22       	and	r9, r24
    199c:	96 94       	lsr	r9
    199e:	87 94       	ror	r8
    19a0:	96 94       	lsr	r9
    19a2:	87 94       	ror	r8
    19a4:	96 94       	lsr	r9
    19a6:	87 94       	ror	r8
    19a8:	96 94       	lsr	r9
    19aa:	87 94       	ror	r8
    19ac:	78 2c       	mov	r7, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
    19ae:	8a 2d       	mov	r24, r10
    19b0:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
    19b2:	f9 f0       	breq	.+62     	; 0x19f2 <Eeprom_24_readPacket+0xb4>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    19b4:	90 e1       	ldi	r25, 0x10	; 16
    19b6:	a9 2e       	mov	r10, r25
    19b8:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    19ba:	b1 2c       	mov	r11, r1
    19bc:	ea 14       	cp	r14, r10
    19be:	fb 04       	cpc	r15, r11
    19c0:	58 f4       	brcc	.+22     	; 0x19d8 <Eeprom_24_readPacket+0x9a>
		{
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
    19c2:	97 01       	movw	r18, r14
    19c4:	a6 01       	movw	r20, r12
    19c6:	6a 81       	ldd	r22, Y+2	; 0x02
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	0e 94 f7 18 	call	0x31ee	; 0x31ee <I2C_MasterReceiveFromLocation>
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <Eeprom_24_readPacket+0x96>
    19d2:	5d c0       	rjmp	.+186    	; 0x1a8e <Eeprom_24_readPacket+0x150>
				return EEPROM_24_STATUS_ERROR_NOK;
    19d4:	10 e0       	ldi	r17, 0x00	; 0
    19d6:	5b c0       	rjmp	.+182    	; 0x1a8e <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    19d8:	95 01       	movw	r18, r10
    19da:	a6 01       	movw	r20, r12
    19dc:	6a 81       	ldd	r22, Y+2	; 0x02
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	0e 94 f7 18 	call	0x31ee	; 0x31ee <I2C_MasterReceiveFromLocation>
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	09 f0       	breq	.+2      	; 0x19ea <Eeprom_24_readPacket+0xac>
    19e8:	4d c0       	rjmp	.+154    	; 0x1a84 <Eeprom_24_readPacket+0x146>
			return EEPROM_24_STATUS_ERROR_NOK;
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    19ea:	ea 18       	sub	r14, r10
    19ec:	fb 08       	sbc	r15, r11
		i=1;
    19ee:	01 e0       	ldi	r16, 0x01	; 1
    19f0:	03 c0       	rjmp	.+6      	; 0x19f8 <Eeprom_24_readPacket+0xba>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
    19f2:	00 e0       	ldi	r16, 0x00	; 0

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
    19f4:	a1 2c       	mov	r10, r1
    19f6:	b1 2c       	mov	r11, r1
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
    19f8:	c7 01       	movw	r24, r14
    19fa:	92 95       	swap	r25
    19fc:	82 95       	swap	r24
    19fe:	8f 70       	andi	r24, 0x0F	; 15
    1a00:	89 27       	eor	r24, r25
    1a02:	9f 70       	andi	r25, 0x0F	; 15
    1a04:	89 27       	eor	r24, r25
	while (pages_num--)
    1a06:	11 c0       	rjmp	.+34     	; 0x1a2a <Eeprom_24_readPacket+0xec>
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    1a08:	b6 01       	movw	r22, r12
    1a0a:	6a 0d       	add	r22, r10
    1a0c:	7b 1d       	adc	r23, r11
    1a0e:	80 2f       	mov	r24, r16
    1a10:	87 0d       	add	r24, r7
    1a12:	0e 94 8d 0b 	call	0x171a	; 0x171a <Eeprom_24_readPage>
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	b9 f5       	brne	.+110    	; 0x1a88 <Eeprom_24_readPacket+0x14a>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    1a1a:	0f 5f       	subi	r16, 0xFF	; 255
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
    1a1c:	80 e1       	ldi	r24, 0x10	; 16
    1a1e:	e8 1a       	sub	r14, r24
    1a20:	f1 08       	sbc	r15, r1
		u16dataIndex += EEPROM_24_PAGE_BYTES;
    1a22:	80 e1       	ldi	r24, 0x10	; 16
    1a24:	a8 0e       	add	r10, r24
    1a26:	b1 1c       	adc	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
    1a28:	86 2d       	mov	r24, r6
    1a2a:	66 24       	eor	r6, r6
    1a2c:	6a 94       	dec	r6
    1a2e:	68 0e       	add	r6, r24
    1a30:	81 11       	cpse	r24, r1
    1a32:	ea cf       	rjmp	.-44     	; 0x1a08 <Eeprom_24_readPacket+0xca>
		i++;
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u16dataIndex += EEPROM_24_PAGE_BYTES;
	}

	if (u16_dataLen > 0)
    1a34:	e1 14       	cp	r14, r1
    1a36:	f1 04       	cpc	r15, r1
    1a38:	51 f1       	breq	.+84     	; 0x1a8e <Eeprom_24_readPacket+0x150>
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
    1a3a:	a4 01       	movw	r20, r8
    1a3c:	40 0f       	add	r20, r16
    1a3e:	51 1d       	adc	r21, r1
    1a40:	42 95       	swap	r20
    1a42:	52 95       	swap	r21
    1a44:	50 7f       	andi	r21, 0xF0	; 240
    1a46:	54 27       	eor	r21, r20
    1a48:	40 7f       	andi	r20, 0xF0	; 240
    1a4a:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
    1a4c:	be 01       	movw	r22, r28
    1a4e:	6e 5f       	subi	r22, 0xFE	; 254
    1a50:	7f 4f       	sbci	r23, 0xFF	; 255
    1a52:	ce 01       	movw	r24, r28
    1a54:	01 96       	adiw	r24, 0x01	; 1
    1a56:	0e 94 b9 0a 	call	0x1572	; 0x1572 <EEPROM_getAddresses>
    1a5a:	18 2f       	mov	r17, r24
    1a5c:	81 30       	cpi	r24, 0x01	; 1
    1a5e:	b1 f4       	brne	.+44     	; 0x1a8c <Eeprom_24_readPacket+0x14e>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1a60:	a6 01       	movw	r20, r12
    1a62:	4a 0d       	add	r20, r10
    1a64:	5b 1d       	adc	r21, r11
    1a66:	97 01       	movw	r18, r14
    1a68:	6a 81       	ldd	r22, Y+2	; 0x02
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <I2C_MasterReceiveFromLocation>
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	69 f0       	breq	.+26     	; 0x1a8e <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_NOK;
    1a74:	10 e0       	ldi	r17, 0x00	; 0
    1a76:	0b c0       	rjmp	.+22     	; 0x1a8e <Eeprom_24_readPacket+0x150>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1a78:	12 e0       	ldi	r17, 0x02	; 2
    1a7a:	09 c0       	rjmp	.+18     	; 0x1a8e <Eeprom_24_readPacket+0x150>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1a7c:	14 e0       	ldi	r17, 0x04	; 4
    1a7e:	07 c0       	rjmp	.+14     	; 0x1a8e <Eeprom_24_readPacket+0x150>
	uint8_t i=0;

#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1a80:	10 e0       	ldi	r17, 0x00	; 0
    1a82:	05 c0       	rjmp	.+10     	; 0x1a8e <Eeprom_24_readPacket+0x150>
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1a84:	10 e0       	ldi	r17, 0x00	; 0
    1a86:	03 c0       	rjmp	.+6      	; 0x1a8e <Eeprom_24_readPacket+0x150>
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1a88:	10 e0       	ldi	r17, 0x00	; 0
    1a8a:	01 c0       	rjmp	.+2      	; 0x1a8e <Eeprom_24_readPacket+0x150>

	if (u16_dataLen > 0)
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1a8c:	10 e0       	ldi	r17, 0x00	; 0
		if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    1a8e:	81 2f       	mov	r24, r17
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	ff 90       	pop	r15
    1a9e:	ef 90       	pop	r14
    1aa0:	df 90       	pop	r13
    1aa2:	cf 90       	pop	r12
    1aa4:	bf 90       	pop	r11
    1aa6:	af 90       	pop	r10
    1aa8:	9f 90       	pop	r9
    1aaa:	8f 90       	pop	r8
    1aac:	7f 90       	pop	r7
    1aae:	6f 90       	pop	r6
    1ab0:	08 95       	ret

00001ab2 <Keypad_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is already initialized */
	if (genu_KeypadModuleState == KEYPAD_STATUS_INIT)
    1ab2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <genu_KeypadModuleState>
    1ab6:	85 30       	cpi	r24, 0x05	; 5
    1ab8:	71 f0       	breq	.+28     	; 0x1ad6 <Keypad_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    1aba:	85 e8       	ldi	r24, 0x85	; 133
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	0e 94 62 12 	call	0x24c4	; 0x24c4 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    1ac2:	81 30       	cpi	r24, 0x01	; 1
    1ac4:	11 f0       	breq	.+4      	; 0x1aca <Keypad_init+0x18>
    1ac6:	87 30       	cpi	r24, 0x07	; 7
    1ac8:	29 f4       	brne	.+10     	; 0x1ad4 <Keypad_init+0x22>
		return KEYPAD_STATUS_ERROR_NOK;
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
    1aca:	85 e0       	ldi	r24, 0x05	; 5
    1acc:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <genu_KeypadModuleState>
	return KEYPAD_STATUS_ERROR_OK;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return KEYPAD_STATUS_ERROR_NOK;
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
	return KEYPAD_STATUS_ERROR_OK;
}
    1ad6:	08 95       	ret

00001ad8 <Keypad_readKey>:
* Parameters (out): pu8_pressedKey - Pointer to a Char to hold the pressed key.
* Return value: enuKeypad_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current pressed Key.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuKeypad_Status_t Keypad_readKey(uint8_t * pu8_pressedKey)
{
    1ad8:	af 92       	push	r10
    1ada:	bf 92       	push	r11
    1adc:	cf 92       	push	r12
    1ade:	df 92       	push	r13
    1ae0:	ef 92       	push	r14
    1ae2:	ff 92       	push	r15
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	1f 92       	push	r1
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	6c 01       	movw	r12, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
    1af4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <genu_KeypadModuleState>
    1af8:	95 30       	cpi	r25, 0x05	; 5
    1afa:	09 f0       	breq	.+2      	; 0x1afe <Keypad_readKey+0x26>
    1afc:	50 c0       	rjmp	.+160    	; 0x1b9e <Keypad_readKey+0xc6>
	{
		return KEYPAD_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
    1afe:	c1 14       	cp	r12, r1
    1b00:	d1 04       	cpc	r13, r1
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <Keypad_readKey+0x2e>
    1b04:	4e c0       	rjmp	.+156    	; 0x1ba2 <Keypad_readKey+0xca>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	89 83       	std	Y+1, r24	; 0x01
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    1b0a:	00 e0       	ldi	r16, 0x00	; 0
    1b0c:	43 c0       	rjmp	.+134    	; 0x1b94 <Keypad_readKey+0xbc>
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
    1b0e:	a0 2e       	mov	r10, r16
    1b10:	b1 2c       	mov	r11, r1
    1b12:	f5 01       	movw	r30, r10
    1b14:	e6 58       	subi	r30, 0x86	; 134
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <Keypad_readKey+0x4e>
    1b24:	40 c0       	rjmp	.+128    	; 0x1ba6 <Keypad_readKey+0xce>
    1b26:	10 e0       	ldi	r17, 0x00	; 0
    1b28:	29 c0       	rjmp	.+82     	; 0x1b7c <Keypad_readKey+0xa4>
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
    1b2a:	e1 2e       	mov	r14, r17
    1b2c:	f1 2c       	mov	r15, r1
    1b2e:	f7 01       	movw	r30, r14
    1b30:	ea 58       	subi	r30, 0x8A	; 138
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	be 01       	movw	r22, r28
    1b36:	6f 5f       	subi	r22, 0xFF	; 255
    1b38:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3a:	80 81       	ld	r24, Z
    1b3c:	0e 94 41 14 	call	0x2882	; 0x2882 <Dio_readPin>
    1b40:	81 30       	cpi	r24, 0x01	; 1
    1b42:	99 f5       	brne	.+102    	; 0x1baa <Keypad_readKey+0xd2>
				return KEYPAD_STATUS_ERROR_NOK;
			if(u8_pinValue == PIN_LOW)
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	81 11       	cpse	r24, r1
    1b48:	18 c0       	rjmp	.+48     	; 0x1b7a <Keypad_readKey+0xa2>
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    1b4a:	61 e0       	ldi	r22, 0x01	; 1
    1b4c:	f5 01       	movw	r30, r10
    1b4e:	e6 58       	subi	r30, 0x86	; 134
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	80 81       	ld	r24, Z
    1b54:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	49 f5       	brne	.+82     	; 0x1bae <Keypad_readKey+0xd6>
					return KEYPAD_STATUS_ERROR_NOK;
				*pu8_pressedKey = gau8_ButtonSymbols[u8_RowIndex][u8_ColumnIndex];
    1b5c:	97 01       	movw	r18, r14
    1b5e:	22 0f       	add	r18, r18
    1b60:	33 1f       	adc	r19, r19
    1b62:	22 0f       	add	r18, r18
    1b64:	33 1f       	adc	r19, r19
    1b66:	2a 59       	subi	r18, 0x9A	; 154
    1b68:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6a:	f9 01       	movw	r30, r18
    1b6c:	ea 0d       	add	r30, r10
    1b6e:	fb 1d       	adc	r31, r11
    1b70:	80 81       	ld	r24, Z
    1b72:	f6 01       	movw	r30, r12
    1b74:	80 83       	st	Z, r24
				return KEYPAD_STATUS_PRESSED;
    1b76:	86 e0       	ldi	r24, 0x06	; 6
    1b78:	1d c0       	rjmp	.+58     	; 0x1bb4 <Keypad_readKey+0xdc>
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
    1b7a:	1f 5f       	subi	r17, 0xFF	; 255
    1b7c:	14 30       	cpi	r17, 0x04	; 4
    1b7e:	a8 f2       	brcs	.-86     	; 0x1b2a <Keypad_readKey+0x52>
				return KEYPAD_STATUS_PRESSED;
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    1b80:	f5 01       	movw	r30, r10
    1b82:	e6 58       	subi	r30, 0x86	; 134
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	61 e0       	ldi	r22, 0x01	; 1
    1b88:	80 81       	ld	r24, Z
    1b8a:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	81 f4       	brne	.+32     	; 0x1bb2 <Keypad_readKey+0xda>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    1b92:	0f 5f       	subi	r16, 0xFF	; 255
    1b94:	04 30       	cpi	r16, 0x04	; 4
    1b96:	08 f4       	brcc	.+2      	; 0x1b9a <Keypad_readKey+0xc2>
    1b98:	ba cf       	rjmp	.-140    	; 0x1b0e <Keypad_readKey+0x36>
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    1b9a:	87 e0       	ldi	r24, 0x07	; 7
    1b9c:	0b c0       	rjmp	.+22     	; 0x1bb4 <Keypad_readKey+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
	{
		return KEYPAD_STATUS_NOT_INIT;
    1b9e:	84 e0       	ldi	r24, 0x04	; 4
    1ba0:	09 c0       	rjmp	.+18     	; 0x1bb4 <Keypad_readKey+0xdc>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
	{
		return KEYPAD_STATUS_ERROR_NULL;
    1ba2:	83 e0       	ldi	r24, 0x03	; 3
    1ba4:	07 c0       	rjmp	.+14     	; 0x1bb4 <Keypad_readKey+0xdc>
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	05 c0       	rjmp	.+10     	; 0x1bb4 <Keypad_readKey+0xdc>
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
				return KEYPAD_STATUS_ERROR_NOK;
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	03 c0       	rjmp	.+6      	; 0x1bb4 <Keypad_readKey+0xdc>
			if(u8_pinValue == PIN_LOW)
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
					return KEYPAD_STATUS_ERROR_NOK;
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	01 c0       	rjmp	.+2      	; 0x1bb4 <Keypad_readKey+0xdc>
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    1bb4:	0f 90       	pop	r0
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	1f 91       	pop	r17
    1bbc:	0f 91       	pop	r16
    1bbe:	ff 90       	pop	r15
    1bc0:	ef 90       	pop	r14
    1bc2:	df 90       	pop	r13
    1bc4:	cf 90       	pop	r12
    1bc6:	bf 90       	pop	r11
    1bc8:	af 90       	pop	r10
    1bca:	08 95       	ret

00001bcc <Lcd_WriteData>:
{
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, BIN);
	Lcd_printString(au8_snum);
	return LCD_STATUS_ERROR_OK;
}
    1bcc:	cf 93       	push	r28
    1bce:	c8 2f       	mov	r28, r24
    1bd0:	80 ff       	sbrs	r24, 0
    1bd2:	05 c0       	rjmp	.+10     	; 0x1bde <Lcd_WriteData+0x12>
    1bd4:	61 e0       	ldi	r22, 0x01	; 1
    1bd6:	8a e0       	ldi	r24, 0x0A	; 10
    1bd8:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <Lcd_WriteData+0x1a>
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	8a e0       	ldi	r24, 0x0A	; 10
    1be2:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    1be6:	c1 ff       	sbrs	r28, 1
    1be8:	05 c0       	rjmp	.+10     	; 0x1bf4 <Lcd_WriteData+0x28>
    1bea:	61 e0       	ldi	r22, 0x01	; 1
    1bec:	8b e0       	ldi	r24, 0x0B	; 11
    1bee:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    1bf2:	04 c0       	rjmp	.+8      	; 0x1bfc <Lcd_WriteData+0x30>
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	8b e0       	ldi	r24, 0x0B	; 11
    1bf8:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    1bfc:	c2 ff       	sbrs	r28, 2
    1bfe:	05 c0       	rjmp	.+10     	; 0x1c0a <Lcd_WriteData+0x3e>
    1c00:	61 e0       	ldi	r22, 0x01	; 1
    1c02:	8c e0       	ldi	r24, 0x0C	; 12
    1c04:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    1c08:	04 c0       	rjmp	.+8      	; 0x1c12 <Lcd_WriteData+0x46>
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	8c e0       	ldi	r24, 0x0C	; 12
    1c0e:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    1c12:	c3 ff       	sbrs	r28, 3
    1c14:	05 c0       	rjmp	.+10     	; 0x1c20 <Lcd_WriteData+0x54>
    1c16:	61 e0       	ldi	r22, 0x01	; 1
    1c18:	8d e0       	ldi	r24, 0x0D	; 13
    1c1a:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    1c1e:	04 c0       	rjmp	.+8      	; 0x1c28 <Lcd_WriteData+0x5c>
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	8d e0       	ldi	r24, 0x0D	; 13
    1c24:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    1c28:	cf 91       	pop	r28
    1c2a:	08 95       	ret

00001c2c <Lcd_EnableToggle>:
    1c2c:	61 e0       	ldi	r22, 0x01	; 1
    1c2e:	89 e0       	ldi	r24, 0x09	; 9
    1c30:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    1c34:	21 e0       	ldi	r18, 0x01	; 1
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	40 e0       	ldi	r20, 0x00	; 0
    1c3a:	50 e0       	ldi	r21, 0x00	; 0
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	89 e0       	ldi	r24, 0x09	; 9
    1c4c:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    1c50:	08 95       	ret

00001c52 <Lcd_sendCommand>:
    1c52:	cf 93       	push	r28
    1c54:	c8 2f       	mov	r28, r24
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	87 e0       	ldi	r24, 0x07	; 7
    1c5a:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    1c5e:	8c 2f       	mov	r24, r28
    1c60:	82 95       	swap	r24
    1c62:	8f 70       	andi	r24, 0x0F	; 15
    1c64:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <Lcd_WriteData>
    1c68:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Lcd_EnableToggle>
    1c6c:	21 e0       	ldi	r18, 0x01	; 1
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e0       	ldi	r20, 0x00	; 0
    1c72:	50 e0       	ldi	r21, 0x00	; 0
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
    1c80:	8c 2f       	mov	r24, r28
    1c82:	8f 70       	andi	r24, 0x0F	; 15
    1c84:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <Lcd_WriteData>
    1c88:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Lcd_EnableToggle>
    1c8c:	22 e0       	ldi	r18, 0x02	; 2
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	50 e0       	ldi	r21, 0x00	; 0
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	70 e0       	ldi	r23, 0x00	; 0
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	cf 91       	pop	r28
    1ca4:	08 95       	ret

00001ca6 <Lcd_init>:
    1ca6:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <genu_LcdModuleState>
    1caa:	86 30       	cpi	r24, 0x06	; 6
    1cac:	91 f1       	breq	.+100    	; 0x1d12 <Lcd_init+0x6c>
    1cae:	85 e8       	ldi	r24, 0x85	; 133
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	0e 94 62 12 	call	0x24c4	; 0x24c4 <Dio_init>
    1cb6:	81 30       	cpi	r24, 0x01	; 1
    1cb8:	11 f0       	breq	.+4      	; 0x1cbe <Lcd_init+0x18>
    1cba:	87 30       	cpi	r24, 0x07	; 7
    1cbc:	49 f5       	brne	.+82     	; 0x1d10 <Lcd_init+0x6a>
    1cbe:	24 e1       	ldi	r18, 0x14	; 20
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	87 e0       	ldi	r24, 0x07	; 7
    1cd6:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	89 e0       	ldi	r24, 0x09	; 9
    1cde:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    1ce2:	83 e3       	ldi	r24, 0x33	; 51
    1ce4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Lcd_sendCommand>
    1ce8:	82 e3       	ldi	r24, 0x32	; 50
    1cea:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Lcd_sendCommand>
    1cee:	88 e2       	ldi	r24, 0x28	; 40
    1cf0:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Lcd_sendCommand>
    1cf4:	8c e0       	ldi	r24, 0x0C	; 12
    1cf6:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Lcd_sendCommand>
    1cfa:	86 e0       	ldi	r24, 0x06	; 6
    1cfc:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Lcd_sendCommand>
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Lcd_sendCommand>
    1d06:	86 e0       	ldi	r24, 0x06	; 6
    1d08:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <genu_LcdModuleState>
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	08 95       	ret
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	08 95       	ret

00001d14 <Lcd_setCursor>:
    1d14:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <genu_LcdModuleState>
    1d18:	96 30       	cpi	r25, 0x06	; 6
    1d1a:	89 f4       	brne	.+34     	; 0x1d3e <Lcd_setCursor+0x2a>
    1d1c:	83 30       	cpi	r24, 0x03	; 3
    1d1e:	88 f4       	brcc	.+34     	; 0x1d42 <Lcd_setCursor+0x2e>
    1d20:	61 31       	cpi	r22, 0x11	; 17
    1d22:	88 f4       	brcc	.+34     	; 0x1d46 <Lcd_setCursor+0x32>
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	2e 5f       	subi	r18, 0xFE	; 254
    1d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2c:	86 2f       	mov	r24, r22
    1d2e:	90 e4       	ldi	r25, 0x40	; 64
    1d30:	29 9f       	mul	r18, r25
    1d32:	80 0d       	add	r24, r0
    1d34:	11 24       	eor	r1, r1
    1d36:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Lcd_sendCommand>
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	08 95       	ret
    1d3e:	85 e0       	ldi	r24, 0x05	; 5
    1d40:	08 95       	ret
    1d42:	83 e0       	ldi	r24, 0x03	; 3
    1d44:	08 95       	ret
    1d46:	82 e0       	ldi	r24, 0x02	; 2
    1d48:	08 95       	ret

00001d4a <Lcd_printChar>:
    1d4a:	cf 93       	push	r28
    1d4c:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <genu_LcdModuleState>
    1d50:	96 30       	cpi	r25, 0x06	; 6
    1d52:	41 f5       	brne	.+80     	; 0x1da4 <Lcd_printChar+0x5a>
    1d54:	c8 2f       	mov	r28, r24
    1d56:	61 e0       	ldi	r22, 0x01	; 1
    1d58:	87 e0       	ldi	r24, 0x07	; 7
    1d5a:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    1d5e:	8c 2f       	mov	r24, r28
    1d60:	82 95       	swap	r24
    1d62:	8f 70       	andi	r24, 0x0F	; 15
    1d64:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <Lcd_WriteData>
    1d68:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Lcd_EnableToggle>
    1d6c:	21 e0       	ldi	r18, 0x01	; 1
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e0       	ldi	r20, 0x00	; 0
    1d72:	50 e0       	ldi	r21, 0x00	; 0
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	70 e0       	ldi	r23, 0x00	; 0
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
    1d80:	8c 2f       	mov	r24, r28
    1d82:	8f 70       	andi	r24, 0x0F	; 15
    1d84:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <Lcd_WriteData>
    1d88:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Lcd_EnableToggle>
    1d8c:	22 e0       	ldi	r18, 0x02	; 2
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	50 e0       	ldi	r21, 0x00	; 0
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	70 e0       	ldi	r23, 0x00	; 0
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	0e 94 c9 11 	call	0x2392	; 0x2392 <Delay_ms>
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	01 c0       	rjmp	.+2      	; 0x1da6 <Lcd_printChar+0x5c>
    1da4:	85 e0       	ldi	r24, 0x05	; 5
    1da6:	cf 91       	pop	r28
    1da8:	08 95       	ret

00001daa <Lcd_printString>:
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	ec 01       	movw	r28, r24
    1db0:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <genu_LcdModuleState>
    1db4:	86 30       	cpi	r24, 0x06	; 6
    1db6:	49 f4       	brne	.+18     	; 0x1dca <Lcd_printString+0x20>
    1db8:	03 c0       	rjmp	.+6      	; 0x1dc0 <Lcd_printString+0x16>
    1dba:	21 96       	adiw	r28, 0x01	; 1
    1dbc:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <Lcd_printChar>
    1dc0:	88 81       	ld	r24, Y
    1dc2:	81 11       	cpse	r24, r1
    1dc4:	fa cf       	rjmp	.-12     	; 0x1dba <Lcd_printString+0x10>
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	01 c0       	rjmp	.+2      	; 0x1dcc <Lcd_printString+0x22>
    1dca:	85 e0       	ldi	r24, 0x05	; 5
    1dcc:	df 91       	pop	r29
    1dce:	cf 91       	pop	r28
    1dd0:	08 95       	ret

00001dd2 <Lcd_clear>:
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Lcd_sendCommand>
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	08 95       	ret

00001ddc <Lcd_printLCD>:
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	ec 01       	movw	r28, r24
    1de6:	8b 01       	movw	r16, r22
    1de8:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <Lcd_clear>
    1dec:	60 e0       	ldi	r22, 0x00	; 0
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <Lcd_setCursor>
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	89 f4       	brne	.+34     	; 0x1e1a <Lcd_printLCD+0x3e>
    1df8:	ce 01       	movw	r24, r28
    1dfa:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <Lcd_printString>
    1dfe:	81 30       	cpi	r24, 0x01	; 1
    1e00:	71 f4       	brne	.+28     	; 0x1e1e <Lcd_printLCD+0x42>
    1e02:	60 e0       	ldi	r22, 0x00	; 0
    1e04:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <Lcd_setCursor>
    1e08:	81 30       	cpi	r24, 0x01	; 1
    1e0a:	59 f4       	brne	.+22     	; 0x1e22 <Lcd_printLCD+0x46>
    1e0c:	c8 01       	movw	r24, r16
    1e0e:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <Lcd_printString>
    1e12:	81 30       	cpi	r24, 0x01	; 1
    1e14:	39 f0       	breq	.+14     	; 0x1e24 <Lcd_printLCD+0x48>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	05 c0       	rjmp	.+10     	; 0x1e24 <Lcd_printLCD+0x48>
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	03 c0       	rjmp	.+6      	; 0x1e24 <Lcd_printLCD+0x48>
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	01 c0       	rjmp	.+2      	; 0x1e24 <Lcd_printLCD+0x48>
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	1f 91       	pop	r17
    1e2a:	0f 91       	pop	r16
    1e2c:	08 95       	ret

00001e2e <Lcd_printDecimal>:
enuLcd_Status_t Lcd_printDecimal(uint16_t u16_num)
{
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	61 97       	sbiw	r28, 0x11	; 17
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, DEC);
    1e42:	41 e0       	ldi	r20, 0x01	; 1
    1e44:	be 01       	movw	r22, r28
    1e46:	6f 5f       	subi	r22, 0xFF	; 255
    1e48:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4a:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <integerToString>
	Lcd_printString(au8_snum);
    1e4e:	ce 01       	movw	r24, r28
    1e50:	01 96       	adiw	r24, 0x01	; 1
    1e52:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <Lcd_printString>
	return LCD_STATUS_ERROR_OK;
}
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	61 96       	adiw	r28, 0x11	; 17
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	08 95       	ret

00001e6a <LM35_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is already initialized */
	if (genu_LM35ModuleState == LM35_STATUS_INIT)
    1e6a:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <genu_LM35ModuleState>
    1e6e:	85 30       	cpi	r24, 0x05	; 5
    1e70:	51 f0       	breq	.+20     	; 0x1e86 <LM35_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
    1e72:	0e 94 04 11 	call	0x2208	; 0x2208 <Adc_init>
    1e76:	81 30       	cpi	r24, 0x01	; 1
    1e78:	29 f4       	brne	.+10     	; 0x1e84 <LM35_init+0x1a>
		return LM35_STATUS_ERROR_NOK;
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
    1e7a:	85 e0       	ldi	r24, 0x05	; 5
    1e7c:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <genu_LM35ModuleState>
	return LM35_STATUS_ERROR_OK;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
		return LM35_STATUS_ERROR_NOK;
    1e84:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
	return LM35_STATUS_ERROR_OK;
}
    1e86:	08 95       	ret

00001e88 <LM35_readTemp>:
* Parameters (out): pu8_Temp - Pointer to a Char to hold the temperature.
* Return value: enuLM35_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current temperature and return in celsius.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLM35_Status_t LM35_readTemp(uint8_t * pu8_Temp)
{
    1e88:	0f 93       	push	r16
    1e8a:	1f 93       	push	r17
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <LM35_readTemp+0xa>
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <LM35_readTemp+0xc>
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	9c 01       	movw	r18, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
    1e9a:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <genu_LM35ModuleState>
    1e9e:	95 30       	cpi	r25, 0x05	; 5
    1ea0:	f1 f4       	brne	.+60     	; 0x1ede <LM35_readTemp+0x56>
	{
	return LM35_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
    1ea2:	21 15       	cp	r18, r1
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	e9 f0       	breq	.+58     	; 0x1ee2 <LM35_readTemp+0x5a>
    1ea8:	89 01       	movw	r16, r18
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
    1eaa:	19 82       	std	Y+1, r1	; 0x01
    1eac:	1a 82       	std	Y+2, r1	; 0x02
    1eae:	1b 82       	std	Y+3, r1	; 0x03
    1eb0:	1c 82       	std	Y+4, r1	; 0x04
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
    1eb2:	be 01       	movw	r22, r28
    1eb4:	6f 5f       	subi	r22, 0xFF	; 255
    1eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	0e 94 2c 11 	call	0x2258	; 0x2258 <Adc_start>
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	91 f4       	brne	.+36     	; 0x1ee6 <LM35_readTemp+0x5e>
		return LM35_STATUS_ERROR_NOK;
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
    1ec2:	69 81       	ldd	r22, Y+1	; 0x01
    1ec4:	7a 81       	ldd	r23, Y+2	; 0x02
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eca:	2a e0       	ldi	r18, 0x0A	; 10
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e0       	ldi	r20, 0x00	; 0
    1ed0:	50 e0       	ldi	r21, 0x00	; 0
    1ed2:	0e 94 81 20 	call	0x4102	; 0x4102 <__udivmodsi4>
    1ed6:	f8 01       	movw	r30, r16
    1ed8:	20 83       	st	Z, r18
	return LM35_STATUS_ERROR_OK;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	05 c0       	rjmp	.+10     	; 0x1ee8 <LM35_readTemp+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
	{
	return LM35_STATUS_NOT_INIT;
    1ede:	84 e0       	ldi	r24, 0x04	; 4
    1ee0:	03 c0       	rjmp	.+6      	; 0x1ee8 <LM35_readTemp+0x60>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
	{
		return LM35_STATUS_ERROR_NULL;
    1ee2:	83 e0       	ldi	r24, 0x03	; 3
    1ee4:	01 c0       	rjmp	.+2      	; 0x1ee8 <LM35_readTemp+0x60>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
		return LM35_STATUS_ERROR_NOK;
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
	return LM35_STATUS_ERROR_OK;
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	1f 91       	pop	r17
    1ef6:	0f 91       	pop	r16
    1ef8:	08 95       	ret

00001efa <Motor_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
    1efa:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <gu8_MotorModuleStatus>
    1efe:	86 30       	cpi	r24, 0x06	; 6
    1f00:	49 f0       	breq	.+18     	; 0x1f14 <Motor_init+0x1a>
/**************************************************************************************/
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
    1f02:	0e 94 cf 1b 	call	0x379e	; 0x379e <SWPwm_Init>
    1f06:	81 30       	cpi	r24, 0x01	; 1
    1f08:	39 f4       	brne	.+14     	; 0x1f18 <Motor_init+0x1e>
		return MOTOR_STATUS_ERROR_NOK;
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
    1f0a:	86 e0       	ldi	r24, 0x06	; 6
    1f0c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <gu8_MotorModuleStatus>
	return MOTOR_STATUS_ERROR_OK;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_INIT;
    1f14:	86 e0       	ldi	r24, 0x06	; 6
    1f16:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
		return MOTOR_STATUS_ERROR_NOK;
    1f18:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
	return MOTOR_STATUS_ERROR_OK;
}
    1f1a:	08 95       	ret

00001f1c <Motor_stop>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the motor.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to stop motor */
enuMotor_Status_t Motor_stop(uint8_t u8_motorID)
{
    1f1c:	df 92       	push	r13
    1f1e:	ef 92       	push	r14
    1f20:	ff 92       	push	r15
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    1f2a:	81 11       	cpse	r24, r1
    1f2c:	5d c0       	rjmp	.+186    	; 0x1fe8 <Motor_stop+0xcc>
    1f2e:	d8 2e       	mov	r13, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Stop the Motor by driving the pins to LOW */
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    1f30:	08 2f       	mov	r16, r24
    1f32:	10 e0       	ldi	r17, 0x00	; 0
    1f34:	78 01       	movw	r14, r16
    1f36:	ee 0c       	add	r14, r14
    1f38:	ff 1c       	adc	r15, r15
    1f3a:	ee 0c       	add	r14, r14
    1f3c:	ff 1c       	adc	r15, r15
    1f3e:	c7 01       	movw	r24, r14
    1f40:	80 0f       	add	r24, r16
    1f42:	91 1f       	adc	r25, r17
    1f44:	ec 01       	movw	r28, r24
    1f46:	ca 58       	subi	r28, 0x8A	; 138
    1f48:	da 4f       	sbci	r29, 0xFA	; 250
    1f4a:	60 e0       	ldi	r22, 0x00	; 0
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1f5a:	e0 e0       	ldi	r30, 0x00	; 0
    1f5c:	1c c0       	rjmp	.+56     	; 0x1f96 <Motor_stop+0x7a>
	{
		if(u8_loopIndex == u8_motorID) /* Skip the current motor */
    1f5e:	ed 15       	cp	r30, r13
    1f60:	c9 f0       	breq	.+50     	; 0x1f94 <Motor_stop+0x78>
		{
			continue;
		}
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
    1f62:	d8 01       	movw	r26, r16
    1f64:	aa 0f       	add	r26, r26
    1f66:	bb 1f       	adc	r27, r27
    1f68:	aa 0f       	add	r26, r26
    1f6a:	bb 1f       	adc	r27, r27
    1f6c:	a0 0f       	add	r26, r16
    1f6e:	b1 1f       	adc	r27, r17
    1f70:	aa 58       	subi	r26, 0x8A	; 138
    1f72:	ba 4f       	sbci	r27, 0xFA	; 250
    1f74:	2c 91       	ld	r18, X
    1f76:	8e 2f       	mov	r24, r30
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	aa 0f       	add	r26, r26
    1f7e:	bb 1f       	adc	r27, r27
    1f80:	aa 0f       	add	r26, r26
    1f82:	bb 1f       	adc	r27, r27
    1f84:	8a 0f       	add	r24, r26
    1f86:	9b 1f       	adc	r25, r27
    1f88:	dc 01       	movw	r26, r24
    1f8a:	aa 58       	subi	r26, 0x8A	; 138
    1f8c:	ba 4f       	sbci	r27, 0xFA	; 250
    1f8e:	8c 91       	ld	r24, X
    1f90:	28 17       	cp	r18, r24
    1f92:	19 f0       	breq	.+6      	; 0x1f9a <Motor_stop+0x7e>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1f94:	ef 5f       	subi	r30, 0xFF	; 255
    1f96:	ee 23       	and	r30, r30
    1f98:	11 f3       	breq	.-60     	; 0x1f5e <Motor_stop+0x42>
			break;
		}
	}
	
	
	if(u8_loopIndex == MOTORS_USED_NUM)
    1f9a:	e1 30       	cpi	r30, 0x01	; 1
    1f9c:	69 f4       	brne	.+26     	; 0x1fb8 <Motor_stop+0x9c>
	{ /* In case that there isn't any motor using the same PWM Channel --> Stop the PWM */
		SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1f9e:	f8 01       	movw	r30, r16
    1fa0:	ee 0f       	add	r30, r30
    1fa2:	ff 1f       	adc	r31, r31
    1fa4:	ee 0f       	add	r30, r30
    1fa6:	ff 1f       	adc	r31, r31
    1fa8:	e0 0f       	add	r30, r16
    1faa:	f1 1f       	adc	r31, r17
    1fac:	ea 58       	subi	r30, 0x8A	; 138
    1fae:	fa 4f       	sbci	r31, 0xFA	; 250
    1fb0:	80 81       	ld	r24, Z
    1fb2:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <SWPwm_Stop>
    1fb6:	12 c0       	rjmp	.+36     	; 0x1fdc <Motor_stop+0xc0>
	}else
	{/* In case that there is another motor using the same PWM Channel */
		if (gau8_MotorsState[u8_loopIndex] == MOTOR_STOPPED) /* Check if the other motor is not running */
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	e4 53       	subi	r30, 0x34	; 52
    1fbc:	fa 4f       	sbci	r31, 0xFA	; 250
    1fbe:	80 81       	ld	r24, Z
    1fc0:	81 11       	cpse	r24, r1
    1fc2:	0c c0       	rjmp	.+24     	; 0x1fdc <Motor_stop+0xc0>
		{/* In case that the other motor is not running --> Stop the PWM */
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1fc4:	f8 01       	movw	r30, r16
    1fc6:	ee 0f       	add	r30, r30
    1fc8:	ff 1f       	adc	r31, r31
    1fca:	ee 0f       	add	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	e0 0f       	add	r30, r16
    1fd0:	f1 1f       	adc	r31, r17
    1fd2:	ea 58       	subi	r30, 0x8A	; 138
    1fd4:	fa 4f       	sbci	r31, 0xFA	; 250
    1fd6:	80 81       	ld	r24, Z
    1fd8:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <SWPwm_Stop>
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
    1fdc:	f8 01       	movw	r30, r16
    1fde:	e4 53       	subi	r30, 0x34	; 52
    1fe0:	fa 4f       	sbci	r31, 0xFA	; 250
    1fe2:	10 82       	st	Z, r1
	return MOTOR_STATUS_ERROR_OK;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	01 c0       	rjmp	.+2      	; 0x1fea <Motor_stop+0xce>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    1fe8:	82 e0       	ldi	r24, 0x02	; 2
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
	return MOTOR_STATUS_ERROR_OK;
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	ff 90       	pop	r15
    1ff4:	ef 90       	pop	r14
    1ff6:	df 90       	pop	r13
    1ff8:	08 95       	ret

00001ffa <Motor_run>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Move the motor in the given direction.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to move the motor forward with given speed in % */
enuMotor_Status_t Motor_run(uint8_t u8_motorID, uint8_t u8_speed, uint8_t u8_direction)
{
    1ffa:	ff 92       	push	r15
    1ffc:	0f 93       	push	r16
    1ffe:	1f 93       	push	r17
    2000:	cf 93       	push	r28
    2002:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
    2004:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <gu8_MotorModuleStatus>
    2008:	96 30       	cpi	r25, 0x06	; 6
    200a:	09 f0       	breq	.+2      	; 0x200e <Motor_run+0x14>
    200c:	57 c0       	rjmp	.+174    	; 0x20bc <Motor_run+0xc2>
	{
		return MOTOR_STATUS_UNINIT;
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    200e:	81 11       	cpse	r24, r1
    2010:	57 c0       	rjmp	.+174    	; 0x20c0 <Motor_run+0xc6>
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
    2012:	65 36       	cpi	r22, 0x65	; 101
    2014:	08 f0       	brcs	.+2      	; 0x2018 <Motor_run+0x1e>
    2016:	56 c0       	rjmp	.+172    	; 0x20c4 <Motor_run+0xca>
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
    2018:	42 30       	cpi	r20, 0x02	; 2
    201a:	08 f0       	brcs	.+2      	; 0x201e <Motor_run+0x24>
    201c:	55 c0       	rjmp	.+170    	; 0x20c8 <Motor_run+0xce>
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
    201e:	08 2f       	mov	r16, r24
    2020:	10 e0       	ldi	r17, 0x00	; 0
    2022:	f8 01       	movw	r30, r16
    2024:	e4 53       	subi	r30, 0x34	; 52
    2026:	fa 4f       	sbci	r31, 0xFA	; 250
    2028:	90 81       	ld	r25, Z
    202a:	91 30       	cpi	r25, 0x01	; 1
    202c:	09 f4       	brne	.+2      	; 0x2030 <Motor_run+0x36>
    202e:	4e c0       	rjmp	.+156    	; 0x20cc <Motor_run+0xd2>
    2030:	f6 2e       	mov	r15, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_speed == 0) 
    2032:	61 11       	cpse	r22, r1
    2034:	04 c0       	rjmp	.+8      	; 0x203e <Motor_run+0x44>
	{
		Motor_stop(u8_motorID);
    2036:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <Motor_stop>
		return MOTOR_STATUS_ERROR_OK;
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	48 c0       	rjmp	.+144    	; 0x20ce <Motor_run+0xd4>
	}
	if(u8_direction == MOTOR_DIR_CLK_WISE) /* Activate the Motor in the Clock Wise Direction */
    203e:	41 11       	cpse	r20, r1
    2040:	12 c0       	rjmp	.+36     	; 0x2066 <Motor_run+0x6c>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_HIGH);
    2042:	25 e0       	ldi	r18, 0x05	; 5
    2044:	20 9f       	mul	r18, r16
    2046:	c0 01       	movw	r24, r0
    2048:	21 9f       	mul	r18, r17
    204a:	90 0d       	add	r25, r0
    204c:	11 24       	eor	r1, r1
    204e:	ec 01       	movw	r28, r24
    2050:	ca 58       	subi	r28, 0x8A	; 138
    2052:	da 4f       	sbci	r29, 0xFA	; 250
    2054:	61 e0       	ldi	r22, 0x01	; 1
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    205c:	60 e0       	ldi	r22, 0x00	; 0
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    2064:	13 c0       	rjmp	.+38     	; 0x208c <Motor_run+0x92>
	}else if(u8_direction == MOTOR_DIR_ANTI_CLK_WISE) /* Activate the Motor in the Anti Clock Wise Direction */
    2066:	41 30       	cpi	r20, 0x01	; 1
    2068:	89 f4       	brne	.+34     	; 0x208c <Motor_run+0x92>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    206a:	25 e0       	ldi	r18, 0x05	; 5
    206c:	20 9f       	mul	r18, r16
    206e:	c0 01       	movw	r24, r0
    2070:	21 9f       	mul	r18, r17
    2072:	90 0d       	add	r25, r0
    2074:	11 24       	eor	r1, r1
    2076:	ec 01       	movw	r28, r24
    2078:	ca 58       	subi	r28, 0x8A	; 138
    207a:	da 4f       	sbci	r29, 0xFA	; 250
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_HIGH);
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
	}
	
	/* Change the state of the Motor to Running */
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
    208c:	f8 01       	movw	r30, r16
    208e:	e4 53       	subi	r30, 0x34	; 52
    2090:	fa 4f       	sbci	r31, 0xFA	; 250
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	80 83       	st	Z, r24
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
    2096:	f8 01       	movw	r30, r16
    2098:	ee 0f       	add	r30, r30
    209a:	ff 1f       	adc	r31, r31
    209c:	ee 0f       	add	r30, r30
    209e:	ff 1f       	adc	r31, r31
    20a0:	e0 0f       	add	r30, r16
    20a2:	f1 1f       	adc	r31, r17
    20a4:	ea 58       	subi	r30, 0x8A	; 138
    20a6:	fa 4f       	sbci	r31, 0xFA	; 250
    20a8:	43 81       	ldd	r20, Z+3	; 0x03
    20aa:	54 81       	ldd	r21, Z+4	; 0x04
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	2f 2d       	mov	r18, r15
    20b2:	80 81       	ld	r24, Z
    20b4:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <SWPwm_Start>
	
	return MOTOR_STATUS_ERROR_OK;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	09 c0       	rjmp	.+18     	; 0x20ce <Motor_run+0xd4>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_UNINIT;
    20bc:	87 e0       	ldi	r24, 0x07	; 7
    20be:	07 c0       	rjmp	.+14     	; 0x20ce <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    20c0:	82 e0       	ldi	r24, 0x02	; 2
    20c2:	05 c0       	rjmp	.+10     	; 0x20ce <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
    20c4:	83 e0       	ldi	r24, 0x03	; 3
    20c6:	03 c0       	rjmp	.+6      	; 0x20ce <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
    20c8:	84 e0       	ldi	r24, 0x04	; 4
    20ca:	01 c0       	rjmp	.+2      	; 0x20ce <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
	{
		return MOTOR_STATUS_ERROR_RUNNING;
    20cc:	85 e0       	ldi	r24, 0x05	; 5
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
	
	return MOTOR_STATUS_ERROR_OK;
}
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28
    20d2:	1f 91       	pop	r17
    20d4:	0f 91       	pop	r16
    20d6:	ff 90       	pop	r15
    20d8:	08 95       	ret

000020da <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
    20de:	c0 91 ce 05 	lds	r28, 0x05CE	; 0x8005ce <gu8_counter>
    20e2:	d0 e0       	ldi	r29, 0x00	; 0
    20e4:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <Uart_DataRegister>
    20e8:	c1 53       	subi	r28, 0x31	; 49
    20ea:	da 4f       	sbci	r29, 0xFA	; 250
    20ec:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
    20ee:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <gu8_counter>
    20f2:	e9 2f       	mov	r30, r25
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	e1 53       	subi	r30, 0x31	; 49
    20f8:	fa 4f       	sbci	r31, 0xFA	; 250
    20fa:	80 81       	ld	r24, Z
    20fc:	8d 30       	cpi	r24, 0x0D	; 13
    20fe:	71 f4       	brne	.+28     	; 0x211c <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    2100:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
    2104:	e0 91 ce 05 	lds	r30, 0x05CE	; 0x8005ce <gu8_counter>
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	e1 53       	subi	r30, 0x31	; 49
    210c:	fa 4f       	sbci	r31, 0xFA	; 250
    210e:	10 82       	st	Z, r1
		gu8_counter = 0;
    2110:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <gu8_counter>
		gu8_flag = 1;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <gu8_flag>
    211a:	1d c0       	rjmp	.+58     	; 0x2156 <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
    211c:	88 30       	cpi	r24, 0x08	; 8
    211e:	51 f4       	brne	.+20     	; 0x2134 <Uart_RXC_ISR+0x5a>
    2120:	99 23       	and	r25, r25
    2122:	41 f0       	breq	.+16     	; 0x2134 <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    2124:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <Uart_sendByte>
		gu8_counter--;
    2128:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <gu8_counter>
    212c:	81 50       	subi	r24, 0x01	; 1
    212e:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <gu8_counter>
    2132:	11 c0       	rjmp	.+34     	; 0x2156 <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
    2134:	88 30       	cpi	r24, 0x08	; 8
    2136:	79 f0       	breq	.+30     	; 0x2156 <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
    2138:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <gu8_visibility>
    213c:	91 30       	cpi	r25, 0x01	; 1
    213e:	21 f4       	brne	.+8      	; 0x2148 <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
    2140:	8a e2       	ldi	r24, 0x2A	; 42
    2142:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <Uart_sendByte>
    2146:	02 c0       	rjmp	.+4      	; 0x214c <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
    2148:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <Uart_sendByte>
		}
		gu8_counter++;
    214c:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <gu8_counter>
    2150:	8f 5f       	subi	r24, 0xFF	; 255
    2152:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <gu8_counter>
	}
}
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	08 95       	ret

0000215c <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
    215c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <genu_TerminalModuleState>
    2160:	83 30       	cpi	r24, 0x03	; 3
    2162:	81 f0       	breq	.+32     	; 0x2184 <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
    2164:	0e 94 67 1d 	call	0x3ace	; 0x3ace <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
    2168:	81 30       	cpi	r24, 0x01	; 1
    216a:	11 f0       	breq	.+4      	; 0x2170 <Terminal_init+0x14>
    216c:	87 30       	cpi	r24, 0x07	; 7
    216e:	49 f4       	brne	.+18     	; 0x2182 <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
    2170:	8d e6       	ldi	r24, 0x6D	; 109
    2172:	90 e1       	ldi	r25, 0x10	; 16
    2174:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
    2178:	83 e0       	ldi	r24, 0x03	; 3
    217a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
    2182:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
    2184:	08 95       	ret

00002186 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	81 f0       	breq	.+32     	; 0x21ae <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    218e:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <genu_TerminalModuleState>
    2192:	22 30       	cpi	r18, 0x02	; 2
    2194:	79 f0       	breq	.+30     	; 0x21b4 <Terminal_Out+0x2e>
    2196:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
    2198:	0e 94 90 19 	call	0x3320	; 0x3320 <stringLength>
    219c:	68 2f       	mov	r22, r24
    219e:	70 e0       	ldi	r23, 0x00	; 0
    21a0:	ce 01       	movw	r24, r28
    21a2:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	21 f0       	breq	.+8      	; 0x21b2 <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	03 c0       	rjmp	.+6      	; 0x21b4 <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    21ae:	24 e0       	ldi	r18, 0x04	; 4
    21b0:	01 c0       	rjmp	.+2      	; 0x21b4 <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
    21b2:	21 e0       	ldi	r18, 0x01	; 1
}
    21b4:	82 2f       	mov	r24, r18
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	08 95       	ret

000021bc <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
    21bc:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
    21be:	89 2b       	or	r24, r25
    21c0:	a1 f0       	breq	.+40     	; 0x21ea <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    21c2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <genu_TerminalModuleState>
    21c6:	82 30       	cpi	r24, 0x02	; 2
    21c8:	99 f0       	breq	.+38     	; 0x21f0 <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
    21ca:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <gu8_flag>
    21ce:	81 30       	cpi	r24, 0x01	; 1
    21d0:	71 f4       	brne	.+28     	; 0x21ee <Terminal_In+0x32>
	{
		gu8_flag = 0;
    21d2:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
    21d6:	8f ec       	ldi	r24, 0xCF	; 207
    21d8:	95 e0       	ldi	r25, 0x05	; 5
    21da:	0e 94 db 19 	call	0x33b6	; 0x33b6 <stringCopy>
		EmptyString(gau8_data);
    21de:	8f ec       	ldi	r24, 0xCF	; 207
    21e0:	95 e0       	ldi	r25, 0x05	; 5
    21e2:	0e 94 cf 19 	call	0x339e	; 0x339e <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
    21e6:	85 e0       	ldi	r24, 0x05	; 5
    21e8:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    21ea:	84 e0       	ldi	r24, 0x04	; 4
    21ec:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
    21ee:	81 e0       	ldi	r24, 0x01	; 1
}
    21f0:	08 95       	ret

000021f2 <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
    21f8:	08 95       	ret

000021fa <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
    21fa:	10 92 ce 06 	sts	0x06CE, r1	; 0x8006ce <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	08 95       	ret

00002202 <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
    2202:	0e 94 14 0a 	call	0x1428	; 0x1428 <App_start>
    2206:	ff cf       	rjmp	.-2      	; 0x2206 <main+0x4>

00002208 <Adc_init>:
		f32_Resolution = (1000*ADC_AREF_VALUE)/ADC_STEPS_NUM;
	}
	*pu32_data = u16_Result*f32_Resolution;
		
	return ADC_STATUS_ERROR_OK;
}
    2208:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <genuAdc_Status>
    220c:	87 30       	cpi	r24, 0x07	; 7
    220e:	11 f1       	breq	.+68     	; 0x2254 <Adc_init+0x4c>
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	13 c0       	rjmp	.+38     	; 0x223a <Adc_init+0x32>
    2214:	3b b3       	in	r19, 0x1b	; 27
    2216:	e2 2f       	mov	r30, r18
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	ee 0f       	add	r30, r30
    221c:	ff 1f       	adc	r31, r31
    221e:	ed 57       	subi	r30, 0x7D	; 125
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	00 80       	ld	r0, Z
    2228:	02 c0       	rjmp	.+4      	; 0x222e <Adc_init+0x26>
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	0a 94       	dec	r0
    2230:	e2 f7       	brpl	.-8      	; 0x222a <Adc_init+0x22>
    2232:	80 95       	com	r24
    2234:	83 23       	and	r24, r19
    2236:	8b bb       	out	0x1b, r24	; 27
    2238:	2f 5f       	subi	r18, 0xFF	; 255
    223a:	22 23       	and	r18, r18
    223c:	59 f3       	breq	.-42     	; 0x2214 <Adc_init+0xc>
    223e:	97 e0       	ldi	r25, 0x07	; 7
    2240:	96 b9       	out	0x06, r25	; 6
    2242:	86 b1       	in	r24, 0x06	; 6
    2244:	8f 7d       	andi	r24, 0xDF	; 223
    2246:	86 b9       	out	0x06, r24	; 6
    2248:	86 b1       	in	r24, 0x06	; 6
    224a:	86 b9       	out	0x06, r24	; 6
    224c:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <genuAdc_Status>
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	08 95       	ret
    2254:	88 e0       	ldi	r24, 0x08	; 8
    2256:	08 95       	ret

00002258 <Adc_start>:
    2258:	cf 92       	push	r12
    225a:	df 92       	push	r13
    225c:	ef 92       	push	r14
    225e:	ff 92       	push	r15
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <genuAdc_Status>
    2268:	97 30       	cpi	r25, 0x07	; 7
    226a:	09 f0       	breq	.+2      	; 0x226e <Adc_start+0x16>
    226c:	61 c0       	rjmp	.+194    	; 0x2330 <Adc_start+0xd8>
    226e:	61 15       	cp	r22, r1
    2270:	71 05       	cpc	r23, r1
    2272:	09 f4       	brne	.+2      	; 0x2276 <Adc_start+0x1e>
    2274:	5f c0       	rjmp	.+190    	; 0x2334 <Adc_start+0xdc>
    2276:	37 b1       	in	r19, 0x07	; 7
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	fc 01       	movw	r30, r24
    227c:	ee 0f       	add	r30, r30
    227e:	ff 1f       	adc	r31, r31
    2280:	ed 57       	subi	r30, 0x7D	; 125
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	20 81       	ld	r18, Z
    2286:	23 2b       	or	r18, r19
    2288:	27 b9       	out	0x07, r18	; 7
    228a:	47 b1       	in	r20, 0x07	; 7
    228c:	31 81       	ldd	r19, Z+1	; 0x01
    228e:	50 e4       	ldi	r21, 0x40	; 64
    2290:	35 9f       	mul	r19, r21
    2292:	90 01       	movw	r18, r0
    2294:	11 24       	eor	r1, r1
    2296:	24 2b       	or	r18, r20
    2298:	27 b9       	out	0x07, r18	; 7
    229a:	26 b1       	in	r18, 0x06	; 6
    229c:	20 68       	ori	r18, 0x80	; 128
    229e:	26 b9       	out	0x06, r18	; 6
    22a0:	26 b1       	in	r18, 0x06	; 6
    22a2:	20 64       	ori	r18, 0x40	; 64
    22a4:	26 b9       	out	0x06, r18	; 6
    22a6:	34 9b       	sbis	0x06, 4	; 6
    22a8:	fe cf       	rjmp	.-4      	; 0x22a6 <Adc_start+0x4e>
    22aa:	44 b1       	in	r20, 0x04	; 4
    22ac:	25 b1       	in	r18, 0x05	; 5
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	32 2f       	mov	r19, r18
    22b2:	22 27       	eor	r18, r18
    22b4:	24 2b       	or	r18, r20
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	fc 01       	movw	r30, r24
    22bc:	ed 57       	subi	r30, 0x7D	; 125
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	81 81       	ldd	r24, Z+1	; 0x01
    22c2:	83 30       	cpi	r24, 0x03	; 3
    22c4:	41 f0       	breq	.+16     	; 0x22d6 <Adc_start+0x7e>
    22c6:	81 30       	cpi	r24, 0x01	; 1
    22c8:	69 f0       	breq	.+26     	; 0x22e4 <Adc_start+0x8c>
    22ca:	88 23       	and	r24, r24
    22cc:	a1 f0       	breq	.+40     	; 0x22f6 <Adc_start+0x9e>
    22ce:	c1 2c       	mov	r12, r1
    22d0:	d1 2c       	mov	r13, r1
    22d2:	76 01       	movw	r14, r12
    22d4:	18 c0       	rjmp	.+48     	; 0x2306 <Adc_start+0xae>
    22d6:	c1 2c       	mov	r12, r1
    22d8:	d1 2c       	mov	r13, r1
    22da:	76 01       	movw	r14, r12
    22dc:	68 94       	set
    22de:	e5 f8       	bld	r14, 5
    22e0:	f6 f8       	bld	r15, 6
    22e2:	11 c0       	rjmp	.+34     	; 0x2306 <Adc_start+0xae>
    22e4:	0f 2e       	mov	r0, r31
    22e6:	c1 2c       	mov	r12, r1
    22e8:	f0 e4       	ldi	r31, 0x40	; 64
    22ea:	df 2e       	mov	r13, r31
    22ec:	fc e9       	ldi	r31, 0x9C	; 156
    22ee:	ef 2e       	mov	r14, r31
    22f0:	fd 2c       	mov	r15, r13
    22f2:	f0 2d       	mov	r31, r0
    22f4:	08 c0       	rjmp	.+16     	; 0x2306 <Adc_start+0xae>
    22f6:	0f 2e       	mov	r0, r31
    22f8:	c1 2c       	mov	r12, r1
    22fa:	f0 e4       	ldi	r31, 0x40	; 64
    22fc:	df 2e       	mov	r13, r31
    22fe:	fc e9       	ldi	r31, 0x9C	; 156
    2300:	ef 2e       	mov	r14, r31
    2302:	fd 2c       	mov	r15, r13
    2304:	f0 2d       	mov	r31, r0
    2306:	eb 01       	movw	r28, r22
    2308:	b9 01       	movw	r22, r18
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <__floatunsisf>
    2312:	a7 01       	movw	r20, r14
    2314:	96 01       	movw	r18, r12
    2316:	0e 94 00 20 	call	0x4000	; 0x4000 <__mulsf3>
    231a:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <__fixunssfsi>
    231e:	68 83       	st	Y, r22
    2320:	79 83       	std	Y+1, r23	; 0x01
    2322:	8a 83       	std	Y+2, r24	; 0x02
    2324:	9b 83       	std	Y+3, r25	; 0x03
    2326:	86 b1       	in	r24, 0x06	; 6
    2328:	80 61       	ori	r24, 0x10	; 16
    232a:	86 b9       	out	0x06, r24	; 6
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	03 c0       	rjmp	.+6      	; 0x2336 <Adc_start+0xde>
    2330:	86 e0       	ldi	r24, 0x06	; 6
    2332:	01 c0       	rjmp	.+2      	; 0x2336 <Adc_start+0xde>
    2334:	85 e0       	ldi	r24, 0x05	; 5
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	ff 90       	pop	r15
    233c:	ef 90       	pop	r14
    233e:	df 90       	pop	r13
    2340:	cf 90       	pop	r12
    2342:	08 95       	ret

00002344 <__vector_16>:

ISR(ADC_IRQ)
{
    2344:	1f 92       	push	r1
    2346:	0f 92       	push	r0
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	0f 92       	push	r0
    234c:	11 24       	eor	r1, r1
    234e:	2f 93       	push	r18
    2350:	3f 93       	push	r19
    2352:	4f 93       	push	r20
    2354:	5f 93       	push	r21
    2356:	6f 93       	push	r22
    2358:	7f 93       	push	r23
    235a:	8f 93       	push	r24
    235c:	9f 93       	push	r25
    235e:	af 93       	push	r26
    2360:	bf 93       	push	r27
    2362:	ef 93       	push	r30
    2364:	ff 93       	push	r31
	(*ADC_CallBackPtr)();
    2366:	e0 91 cf 06 	lds	r30, 0x06CF	; 0x8006cf <ADC_CallBackPtr>
    236a:	f0 91 d0 06 	lds	r31, 0x06D0	; 0x8006d0 <ADC_CallBackPtr+0x1>
    236e:	09 95       	icall
    2370:	ff 91       	pop	r31
    2372:	ef 91       	pop	r30
    2374:	bf 91       	pop	r27
    2376:	af 91       	pop	r26
    2378:	9f 91       	pop	r25
    237a:	8f 91       	pop	r24
    237c:	7f 91       	pop	r23
    237e:	6f 91       	pop	r22
    2380:	5f 91       	pop	r21
    2382:	4f 91       	pop	r20
    2384:	3f 91       	pop	r19
    2386:	2f 91       	pop	r18
    2388:	0f 90       	pop	r0
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	0f 90       	pop	r0
    238e:	1f 90       	pop	r1
    2390:	18 95       	reti

00002392 <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
    2392:	2f 92       	push	r2
    2394:	3f 92       	push	r3
    2396:	4f 92       	push	r4
    2398:	5f 92       	push	r5
    239a:	6f 92       	push	r6
    239c:	7f 92       	push	r7
    239e:	8f 92       	push	r8
    23a0:	9f 92       	push	r9
    23a2:	af 92       	push	r10
    23a4:	bf 92       	push	r11
    23a6:	cf 92       	push	r12
    23a8:	df 92       	push	r13
    23aa:	ef 92       	push	r14
    23ac:	ff 92       	push	r15
    23ae:	0f 93       	push	r16
    23b0:	1f 93       	push	r17
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <Delay_ms+0x26>
    23b8:	00 d0       	rcall	.+0      	; 0x23ba <Delay_ms+0x28>
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <Delay_ms+0x2a>
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	22 2e       	mov	r2, r18
    23c2:	33 2e       	mov	r3, r19
    23c4:	44 2e       	mov	r4, r20
    23c6:	55 2e       	mov	r5, r21
    23c8:	66 2e       	mov	r6, r22
    23ca:	79 83       	std	Y+1, r23	; 0x01
    23cc:	8a 83       	std	Y+2, r24	; 0x02
    23ce:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    23d0:	91 2c       	mov	r9, r1
    23d2:	1d 82       	std	Y+5, r1	; 0x05
    23d4:	1c 82       	std	Y+4, r1	; 0x04
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	e0 e0       	ldi	r30, 0x00	; 0
    23dc:	71 2c       	mov	r7, r1
    23de:	81 2c       	mov	r8, r1
    23e0:	44 c0       	rjmp	.+136    	; 0x246a <Delay_ms+0xd8>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
    23e2:	2d 2d       	mov	r18, r13
    23e4:	3e 2d       	mov	r19, r14
    23e6:	4f 2d       	mov	r20, r15
    23e8:	50 2f       	mov	r21, r16
    23ea:	61 2f       	mov	r22, r17
    23ec:	7a 2f       	mov	r23, r26
    23ee:	8b 2d       	mov	r24, r11
    23f0:	9c 2d       	mov	r25, r12
    23f2:	a1 e0       	ldi	r26, 0x01	; 1
    23f4:	0e 94 b8 20 	call	0x4170	; 0x4170 <__adddi3_s8>
    23f8:	d2 2e       	mov	r13, r18
    23fa:	e3 2e       	mov	r14, r19
    23fc:	f4 2e       	mov	r15, r20
    23fe:	05 2f       	mov	r16, r21
    2400:	16 2f       	mov	r17, r22
    2402:	a7 2f       	mov	r26, r23
    2404:	b8 2e       	mov	r11, r24
    2406:	c9 2e       	mov	r12, r25
    2408:	0a c0       	rjmp	.+20     	; 0x241e <Delay_ms+0x8c>
    240a:	d1 2c       	mov	r13, r1
    240c:	e1 2c       	mov	r14, r1
    240e:	f1 2c       	mov	r15, r1
    2410:	00 e0       	ldi	r16, 0x00	; 0
    2412:	10 e0       	ldi	r17, 0x00	; 0
    2414:	a0 e0       	ldi	r26, 0x00	; 0
    2416:	b1 2c       	mov	r11, r1
    2418:	c1 2c       	mov	r12, r1
    241a:	ad 80       	ldd	r10, Y+5	; 0x05
    241c:	ee 83       	std	Y+6, r30	; 0x06
    241e:	2d 2d       	mov	r18, r13
    2420:	3e 2d       	mov	r19, r14
    2422:	4f 2d       	mov	r20, r15
    2424:	50 2f       	mov	r21, r16
    2426:	61 2f       	mov	r22, r17
    2428:	7a 2f       	mov	r23, r26
    242a:	8b 2d       	mov	r24, r11
    242c:	9c 2d       	mov	r25, r12
    242e:	2b 38       	cpi	r18, 0x8B	; 139
    2430:	31 05       	cpc	r19, r1
    2432:	41 05       	cpc	r20, r1
    2434:	51 05       	cpc	r21, r1
    2436:	61 05       	cpc	r22, r1
    2438:	71 05       	cpc	r23, r1
    243a:	81 05       	cpc	r24, r1
    243c:	91 05       	cpc	r25, r1
    243e:	89 f2       	breq	.-94     	; 0x23e2 <Delay_ms+0x50>
    2440:	80 f2       	brcs	.-96     	; 0x23e2 <Delay_ms+0x50>
    2442:	ee 81       	ldd	r30, Y+6	; 0x06

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    2444:	29 2d       	mov	r18, r9
    2446:	3a 2d       	mov	r19, r10
    2448:	4c 81       	ldd	r20, Y+4	; 0x04
    244a:	5b 2f       	mov	r21, r27
    244c:	6f 2f       	mov	r22, r31
    244e:	7e 2f       	mov	r23, r30
    2450:	87 2d       	mov	r24, r7
    2452:	98 2d       	mov	r25, r8
    2454:	a1 e0       	ldi	r26, 0x01	; 1
    2456:	0e 94 b8 20 	call	0x4170	; 0x4170 <__adddi3_s8>
    245a:	92 2e       	mov	r9, r18
    245c:	3d 83       	std	Y+5, r19	; 0x05
    245e:	4c 83       	std	Y+4, r20	; 0x04
    2460:	b5 2f       	mov	r27, r21
    2462:	f6 2f       	mov	r31, r22
    2464:	e7 2f       	mov	r30, r23
    2466:	78 2e       	mov	r7, r24
    2468:	89 2e       	mov	r8, r25
    246a:	29 2d       	mov	r18, r9
    246c:	3d 81       	ldd	r19, Y+5	; 0x05
    246e:	4c 81       	ldd	r20, Y+4	; 0x04
    2470:	5b 2f       	mov	r21, r27
    2472:	6f 2f       	mov	r22, r31
    2474:	7e 2f       	mov	r23, r30
    2476:	87 2d       	mov	r24, r7
    2478:	98 2d       	mov	r25, r8
    247a:	a2 2c       	mov	r10, r2
    247c:	b3 2c       	mov	r11, r3
    247e:	c4 2c       	mov	r12, r4
    2480:	d5 2c       	mov	r13, r5
    2482:	e6 2c       	mov	r14, r6
    2484:	f9 80       	ldd	r15, Y+1	; 0x01
    2486:	0a 81       	ldd	r16, Y+2	; 0x02
    2488:	1b 81       	ldd	r17, Y+3	; 0x03
    248a:	0e 94 c4 20 	call	0x4188	; 0x4188 <__cmpdi2>
    248e:	08 f4       	brcc	.+2      	; 0x2492 <Delay_ms+0x100>
    2490:	bc cf       	rjmp	.-136    	; 0x240a <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
    2492:	26 96       	adiw	r28, 0x06	; 6
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	1f 91       	pop	r17
    24a4:	0f 91       	pop	r16
    24a6:	ff 90       	pop	r15
    24a8:	ef 90       	pop	r14
    24aa:	df 90       	pop	r13
    24ac:	cf 90       	pop	r12
    24ae:	bf 90       	pop	r11
    24b0:	af 90       	pop	r10
    24b2:	9f 90       	pop	r9
    24b4:	8f 90       	pop	r8
    24b6:	7f 90       	pop	r7
    24b8:	6f 90       	pop	r6
    24ba:	5f 90       	pop	r5
    24bc:	4f 90       	pop	r4
    24be:	3f 90       	pop	r3
    24c0:	2f 90       	pop	r2
    24c2:	08 95       	ret

000024c4 <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
    24c4:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
    24c6:	89 2b       	or	r24, r25
    24c8:	09 f4       	brne	.+2      	; 0x24cc <Dio_init+0x8>
    24ca:	e4 c0       	rjmp	.+456    	; 0x2694 <Dio_init+0x1d0>
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	d7 c0       	rjmp	.+430    	; 0x267e <Dio_init+0x1ba>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
    24d0:	e9 2f       	mov	r30, r25
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	ee 0f       	add	r30, r30
    24d6:	ff 1f       	adc	r31, r31
    24d8:	ee 0f       	add	r30, r30
    24da:	ff 1f       	adc	r31, r31
    24dc:	e4 0f       	add	r30, r20
    24de:	f5 1f       	adc	r31, r21
    24e0:	31 81       	ldd	r19, Z+1	; 0x01
    24e2:	38 30       	cpi	r19, 0x08	; 8
    24e4:	08 f0       	brcs	.+2      	; 0x24e8 <Dio_init+0x24>
    24e6:	d8 c0       	rjmp	.+432    	; 0x2698 <Dio_init+0x1d4>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
    24e8:	20 81       	ld	r18, Z
    24ea:	21 30       	cpi	r18, 0x01	; 1
    24ec:	c1 f1       	breq	.+112    	; 0x255e <Dio_init+0x9a>
    24ee:	38 f0       	brcs	.+14     	; 0x24fe <Dio_init+0x3a>
    24f0:	22 30       	cpi	r18, 0x02	; 2
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <Dio_init+0x32>
    24f4:	64 c0       	rjmp	.+200    	; 0x25be <Dio_init+0xfa>
    24f6:	23 30       	cpi	r18, 0x03	; 3
    24f8:	09 f4       	brne	.+2      	; 0x24fc <Dio_init+0x38>
    24fa:	91 c0       	rjmp	.+290    	; 0x261e <Dio_init+0x15a>
    24fc:	cf c0       	rjmp	.+414    	; 0x269c <Dio_init+0x1d8>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    24fe:	2a b3       	in	r18, 0x1a	; 26
    2500:	61 e0       	ldi	r22, 0x01	; 1
    2502:	70 e0       	ldi	r23, 0x00	; 0
    2504:	db 01       	movw	r26, r22
    2506:	02 c0       	rjmp	.+4      	; 0x250c <Dio_init+0x48>
    2508:	aa 0f       	add	r26, r26
    250a:	bb 1f       	adc	r27, r27
    250c:	3a 95       	dec	r19
    250e:	e2 f7       	brpl	.-8      	; 0x2508 <Dio_init+0x44>
    2510:	8a 2f       	mov	r24, r26
    2512:	80 95       	com	r24
    2514:	82 23       	and	r24, r18
    2516:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2518:	aa b3       	in	r26, 0x1a	; 26
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	28 2f       	mov	r18, r24
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	01 80       	ldd	r0, Z+1	; 0x01
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <Dio_init+0x64>
    2524:	22 0f       	add	r18, r18
    2526:	33 1f       	adc	r19, r19
    2528:	0a 94       	dec	r0
    252a:	e2 f7       	brpl	.-8      	; 0x2524 <Dio_init+0x60>
    252c:	2a 2b       	or	r18, r26
    252e:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2530:	8b b3       	in	r24, 0x1b	; 27
    2532:	01 80       	ldd	r0, Z+1	; 0x01
    2534:	02 c0       	rjmp	.+4      	; 0x253a <Dio_init+0x76>
    2536:	66 0f       	add	r22, r22
    2538:	77 1f       	adc	r23, r23
    253a:	0a 94       	dec	r0
    253c:	e2 f7       	brpl	.-8      	; 0x2536 <Dio_init+0x72>
    253e:	60 95       	com	r22
    2540:	68 23       	and	r22, r24
    2542:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2544:	6b b3       	in	r22, 0x1b	; 27
    2546:	83 81       	ldd	r24, Z+3	; 0x03
    2548:	28 2f       	mov	r18, r24
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	01 80       	ldd	r0, Z+1	; 0x01
    254e:	02 c0       	rjmp	.+4      	; 0x2554 <Dio_init+0x90>
    2550:	22 0f       	add	r18, r18
    2552:	33 1f       	adc	r19, r19
    2554:	0a 94       	dec	r0
    2556:	e2 f7       	brpl	.-8      	; 0x2550 <Dio_init+0x8c>
    2558:	26 2b       	or	r18, r22
    255a:	2b bb       	out	0x1b, r18	; 27
				break;
    255c:	8f c0       	rjmp	.+286    	; 0x267c <Dio_init+0x1b8>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    255e:	27 b3       	in	r18, 0x17	; 23
    2560:	61 e0       	ldi	r22, 0x01	; 1
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	db 01       	movw	r26, r22
    2566:	02 c0       	rjmp	.+4      	; 0x256c <Dio_init+0xa8>
    2568:	aa 0f       	add	r26, r26
    256a:	bb 1f       	adc	r27, r27
    256c:	3a 95       	dec	r19
    256e:	e2 f7       	brpl	.-8      	; 0x2568 <Dio_init+0xa4>
    2570:	8a 2f       	mov	r24, r26
    2572:	80 95       	com	r24
    2574:	82 23       	and	r24, r18
    2576:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2578:	a7 b3       	in	r26, 0x17	; 23
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	28 2f       	mov	r18, r24
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	01 80       	ldd	r0, Z+1	; 0x01
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <Dio_init+0xc4>
    2584:	22 0f       	add	r18, r18
    2586:	33 1f       	adc	r19, r19
    2588:	0a 94       	dec	r0
    258a:	e2 f7       	brpl	.-8      	; 0x2584 <Dio_init+0xc0>
    258c:	2a 2b       	or	r18, r26
    258e:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2590:	88 b3       	in	r24, 0x18	; 24
    2592:	01 80       	ldd	r0, Z+1	; 0x01
    2594:	02 c0       	rjmp	.+4      	; 0x259a <Dio_init+0xd6>
    2596:	66 0f       	add	r22, r22
    2598:	77 1f       	adc	r23, r23
    259a:	0a 94       	dec	r0
    259c:	e2 f7       	brpl	.-8      	; 0x2596 <Dio_init+0xd2>
    259e:	60 95       	com	r22
    25a0:	68 23       	and	r22, r24
    25a2:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    25a4:	68 b3       	in	r22, 0x18	; 24
    25a6:	83 81       	ldd	r24, Z+3	; 0x03
    25a8:	28 2f       	mov	r18, r24
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	01 80       	ldd	r0, Z+1	; 0x01
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <Dio_init+0xf0>
    25b0:	22 0f       	add	r18, r18
    25b2:	33 1f       	adc	r19, r19
    25b4:	0a 94       	dec	r0
    25b6:	e2 f7       	brpl	.-8      	; 0x25b0 <Dio_init+0xec>
    25b8:	26 2b       	or	r18, r22
    25ba:	28 bb       	out	0x18, r18	; 24
				break;
    25bc:	5f c0       	rjmp	.+190    	; 0x267c <Dio_init+0x1b8>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    25be:	24 b3       	in	r18, 0x14	; 20
    25c0:	61 e0       	ldi	r22, 0x01	; 1
    25c2:	70 e0       	ldi	r23, 0x00	; 0
    25c4:	db 01       	movw	r26, r22
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <Dio_init+0x108>
    25c8:	aa 0f       	add	r26, r26
    25ca:	bb 1f       	adc	r27, r27
    25cc:	3a 95       	dec	r19
    25ce:	e2 f7       	brpl	.-8      	; 0x25c8 <Dio_init+0x104>
    25d0:	8a 2f       	mov	r24, r26
    25d2:	80 95       	com	r24
    25d4:	82 23       	and	r24, r18
    25d6:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    25d8:	a4 b3       	in	r26, 0x14	; 20
    25da:	82 81       	ldd	r24, Z+2	; 0x02
    25dc:	28 2f       	mov	r18, r24
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	01 80       	ldd	r0, Z+1	; 0x01
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <Dio_init+0x124>
    25e4:	22 0f       	add	r18, r18
    25e6:	33 1f       	adc	r19, r19
    25e8:	0a 94       	dec	r0
    25ea:	e2 f7       	brpl	.-8      	; 0x25e4 <Dio_init+0x120>
    25ec:	2a 2b       	or	r18, r26
    25ee:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    25f0:	85 b3       	in	r24, 0x15	; 21
    25f2:	01 80       	ldd	r0, Z+1	; 0x01
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <Dio_init+0x136>
    25f6:	66 0f       	add	r22, r22
    25f8:	77 1f       	adc	r23, r23
    25fa:	0a 94       	dec	r0
    25fc:	e2 f7       	brpl	.-8      	; 0x25f6 <Dio_init+0x132>
    25fe:	60 95       	com	r22
    2600:	68 23       	and	r22, r24
    2602:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2604:	65 b3       	in	r22, 0x15	; 21
    2606:	83 81       	ldd	r24, Z+3	; 0x03
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	01 80       	ldd	r0, Z+1	; 0x01
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <Dio_init+0x150>
    2610:	22 0f       	add	r18, r18
    2612:	33 1f       	adc	r19, r19
    2614:	0a 94       	dec	r0
    2616:	e2 f7       	brpl	.-8      	; 0x2610 <Dio_init+0x14c>
    2618:	26 2b       	or	r18, r22
    261a:	25 bb       	out	0x15, r18	; 21
				break;
    261c:	2f c0       	rjmp	.+94     	; 0x267c <Dio_init+0x1b8>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    261e:	21 b3       	in	r18, 0x11	; 17
    2620:	61 e0       	ldi	r22, 0x01	; 1
    2622:	70 e0       	ldi	r23, 0x00	; 0
    2624:	db 01       	movw	r26, r22
    2626:	02 c0       	rjmp	.+4      	; 0x262c <Dio_init+0x168>
    2628:	aa 0f       	add	r26, r26
    262a:	bb 1f       	adc	r27, r27
    262c:	3a 95       	dec	r19
    262e:	e2 f7       	brpl	.-8      	; 0x2628 <Dio_init+0x164>
    2630:	8a 2f       	mov	r24, r26
    2632:	80 95       	com	r24
    2634:	82 23       	and	r24, r18
    2636:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2638:	a1 b3       	in	r26, 0x11	; 17
    263a:	82 81       	ldd	r24, Z+2	; 0x02
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	01 80       	ldd	r0, Z+1	; 0x01
    2642:	02 c0       	rjmp	.+4      	; 0x2648 <Dio_init+0x184>
    2644:	22 0f       	add	r18, r18
    2646:	33 1f       	adc	r19, r19
    2648:	0a 94       	dec	r0
    264a:	e2 f7       	brpl	.-8      	; 0x2644 <Dio_init+0x180>
    264c:	2a 2b       	or	r18, r26
    264e:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2650:	82 b3       	in	r24, 0x12	; 18
    2652:	01 80       	ldd	r0, Z+1	; 0x01
    2654:	02 c0       	rjmp	.+4      	; 0x265a <Dio_init+0x196>
    2656:	66 0f       	add	r22, r22
    2658:	77 1f       	adc	r23, r23
    265a:	0a 94       	dec	r0
    265c:	e2 f7       	brpl	.-8      	; 0x2656 <Dio_init+0x192>
    265e:	60 95       	com	r22
    2660:	68 23       	and	r22, r24
    2662:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2664:	62 b3       	in	r22, 0x12	; 18
    2666:	83 81       	ldd	r24, Z+3	; 0x03
    2668:	28 2f       	mov	r18, r24
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	01 80       	ldd	r0, Z+1	; 0x01
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <Dio_init+0x1b0>
    2670:	22 0f       	add	r18, r18
    2672:	33 1f       	adc	r19, r19
    2674:	0a 94       	dec	r0
    2676:	e2 f7       	brpl	.-8      	; 0x2670 <Dio_init+0x1ac>
    2678:	26 2b       	or	r18, r22
    267a:	22 bb       	out	0x12, r18	; 18
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
    267c:	9f 5f       	subi	r25, 0xFF	; 255
    267e:	94 31       	cpi	r25, 0x14	; 20
    2680:	08 f4       	brcc	.+2      	; 0x2684 <Dio_init+0x1c0>
    2682:	26 cf       	rjmp	.-436    	; 0x24d0 <Dio_init+0xc>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
    2684:	50 93 d3 06 	sts	0x06D3, r21	; 0x8006d3 <pstrDio_pinsConfig+0x1>
    2688:	40 93 d2 06 	sts	0x06D2, r20	; 0x8006d2 <pstrDio_pinsConfig>
	u8_Dio_Status = DIO_INITIALIZED;
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
    2692:	08 95       	ret
{
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
    2694:	85 e0       	ldi	r24, 0x05	; 5
    2696:	08 95       	ret
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
    2698:	83 e0       	ldi	r24, 0x03	; 3
    269a:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
    269c:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
    269e:	08 95       	ret

000026a0 <Dio_writePin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    26a0:	85 31       	cpi	r24, 0x15	; 21
    26a2:	08 f0       	brcs	.+2      	; 0x26a6 <Dio_writePin+0x6>
    26a4:	90 c0       	rjmp	.+288    	; 0x27c6 <Dio_writePin+0x126>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    26a6:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <u8_Dio_Status>
    26aa:	99 23       	and	r25, r25
    26ac:	09 f4       	brne	.+2      	; 0x26b0 <Dio_writePin+0x10>
    26ae:	8d c0       	rjmp	.+282    	; 0x27ca <Dio_writePin+0x12a>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    26b0:	e8 2f       	mov	r30, r24
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	cf 01       	movw	r24, r30
    26b6:	88 0f       	add	r24, r24
    26b8:	99 1f       	adc	r25, r25
    26ba:	88 0f       	add	r24, r24
    26bc:	99 1f       	adc	r25, r25
    26be:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <pstrDio_pinsConfig>
    26c2:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <pstrDio_pinsConfig+0x1>
    26c6:	e8 0f       	add	r30, r24
    26c8:	f9 1f       	adc	r31, r25
    26ca:	80 81       	ld	r24, Z
    26cc:	81 30       	cpi	r24, 0x01	; 1
    26ce:	21 f1       	breq	.+72     	; 0x2718 <Dio_writePin+0x78>
    26d0:	30 f0       	brcs	.+12     	; 0x26de <Dio_writePin+0x3e>
    26d2:	82 30       	cpi	r24, 0x02	; 2
    26d4:	f1 f1       	breq	.+124    	; 0x2752 <Dio_writePin+0xb2>
    26d6:	83 30       	cpi	r24, 0x03	; 3
    26d8:	09 f4       	brne	.+2      	; 0x26dc <Dio_writePin+0x3c>
    26da:	58 c0       	rjmp	.+176    	; 0x278c <Dio_writePin+0xec>
    26dc:	78 c0       	rjmp	.+240    	; 0x27ce <Dio_writePin+0x12e>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
    26de:	61 30       	cpi	r22, 0x01	; 1
    26e0:	69 f4       	brne	.+26     	; 0x26fc <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    26e2:	2b b3       	in	r18, 0x1b	; 27
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	01 80       	ldd	r0, Z+1	; 0x01
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <Dio_writePin+0x50>
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	0a 94       	dec	r0
    26f2:	e2 f7       	brpl	.-8      	; 0x26ec <Dio_writePin+0x4c>
    26f4:	82 2b       	or	r24, r18
    26f6:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    26fc:	2b b3       	in	r18, 0x1b	; 27
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	01 80       	ldd	r0, Z+1	; 0x01
    2704:	02 c0       	rjmp	.+4      	; 0x270a <Dio_writePin+0x6a>
    2706:	88 0f       	add	r24, r24
    2708:	99 1f       	adc	r25, r25
    270a:	0a 94       	dec	r0
    270c:	e2 f7       	brpl	.-8      	; 0x2706 <Dio_writePin+0x66>
    270e:	80 95       	com	r24
    2710:	82 23       	and	r24, r18
    2712:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
    2718:	61 30       	cpi	r22, 0x01	; 1
    271a:	69 f4       	brne	.+26     	; 0x2736 <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    271c:	28 b3       	in	r18, 0x18	; 24
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	01 80       	ldd	r0, Z+1	; 0x01
    2724:	02 c0       	rjmp	.+4      	; 0x272a <Dio_writePin+0x8a>
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	0a 94       	dec	r0
    272c:	e2 f7       	brpl	.-8      	; 0x2726 <Dio_writePin+0x86>
    272e:	82 2b       	or	r24, r18
    2730:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2736:	28 b3       	in	r18, 0x18	; 24
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	01 80       	ldd	r0, Z+1	; 0x01
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <Dio_writePin+0xa4>
    2740:	88 0f       	add	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	0a 94       	dec	r0
    2746:	e2 f7       	brpl	.-8      	; 0x2740 <Dio_writePin+0xa0>
    2748:	80 95       	com	r24
    274a:	82 23       	and	r24, r18
    274c:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
    2752:	61 30       	cpi	r22, 0x01	; 1
    2754:	69 f4       	brne	.+26     	; 0x2770 <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2756:	25 b3       	in	r18, 0x15	; 21
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	01 80       	ldd	r0, Z+1	; 0x01
    275e:	02 c0       	rjmp	.+4      	; 0x2764 <Dio_writePin+0xc4>
    2760:	88 0f       	add	r24, r24
    2762:	99 1f       	adc	r25, r25
    2764:	0a 94       	dec	r0
    2766:	e2 f7       	brpl	.-8      	; 0x2760 <Dio_writePin+0xc0>
    2768:	82 2b       	or	r24, r18
    276a:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2770:	25 b3       	in	r18, 0x15	; 21
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	01 80       	ldd	r0, Z+1	; 0x01
    2778:	02 c0       	rjmp	.+4      	; 0x277e <Dio_writePin+0xde>
    277a:	88 0f       	add	r24, r24
    277c:	99 1f       	adc	r25, r25
    277e:	0a 94       	dec	r0
    2780:	e2 f7       	brpl	.-8      	; 0x277a <Dio_writePin+0xda>
    2782:	80 95       	com	r24
    2784:	82 23       	and	r24, r18
    2786:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
    278c:	61 30       	cpi	r22, 0x01	; 1
    278e:	69 f4       	brne	.+26     	; 0x27aa <Dio_writePin+0x10a>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2790:	22 b3       	in	r18, 0x12	; 18
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	01 80       	ldd	r0, Z+1	; 0x01
    2798:	02 c0       	rjmp	.+4      	; 0x279e <Dio_writePin+0xfe>
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	0a 94       	dec	r0
    27a0:	e2 f7       	brpl	.-8      	; 0x279a <Dio_writePin+0xfa>
    27a2:	82 2b       	or	r24, r18
    27a4:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    27aa:	22 b3       	in	r18, 0x12	; 18
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	01 80       	ldd	r0, Z+1	; 0x01
    27b2:	02 c0       	rjmp	.+4      	; 0x27b8 <Dio_writePin+0x118>
    27b4:	88 0f       	add	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	0a 94       	dec	r0
    27ba:	e2 f7       	brpl	.-8      	; 0x27b4 <Dio_writePin+0x114>
    27bc:	80 95       	com	r24
    27be:	82 23       	and	r24, r18
    27c0:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	08 95       	ret
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    27c6:	82 e0       	ldi	r24, 0x02	; 2
    27c8:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    27ca:	86 e0       	ldi	r24, 0x06	; 6
    27cc:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    27ce:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
    27d0:	08 95       	ret

000027d2 <Dio_togglePin>:
* Description: Function to Toggle data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    27d2:	85 31       	cpi	r24, 0x15	; 21
    27d4:	08 f0       	brcs	.+2      	; 0x27d8 <Dio_togglePin+0x6>
    27d6:	4f c0       	rjmp	.+158    	; 0x2876 <Dio_togglePin+0xa4>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    27d8:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <u8_Dio_Status>
    27dc:	99 23       	and	r25, r25
    27de:	09 f4       	brne	.+2      	; 0x27e2 <Dio_togglePin+0x10>
    27e0:	4c c0       	rjmp	.+152    	; 0x287a <Dio_togglePin+0xa8>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    27e2:	e8 2f       	mov	r30, r24
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	cf 01       	movw	r24, r30
    27e8:	88 0f       	add	r24, r24
    27ea:	99 1f       	adc	r25, r25
    27ec:	88 0f       	add	r24, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <pstrDio_pinsConfig>
    27f4:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <pstrDio_pinsConfig+0x1>
    27f8:	e8 0f       	add	r30, r24
    27fa:	f9 1f       	adc	r31, r25
    27fc:	80 81       	ld	r24, Z
    27fe:	81 30       	cpi	r24, 0x01	; 1
    2800:	99 f0       	breq	.+38     	; 0x2828 <Dio_togglePin+0x56>
    2802:	28 f0       	brcs	.+10     	; 0x280e <Dio_togglePin+0x3c>
    2804:	82 30       	cpi	r24, 0x02	; 2
    2806:	e9 f0       	breq	.+58     	; 0x2842 <Dio_togglePin+0x70>
    2808:	83 30       	cpi	r24, 0x03	; 3
    280a:	41 f1       	breq	.+80     	; 0x285c <Dio_togglePin+0x8a>
    280c:	38 c0       	rjmp	.+112    	; 0x287e <Dio_togglePin+0xac>
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    280e:	2b b3       	in	r18, 0x1b	; 27
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	01 80       	ldd	r0, Z+1	; 0x01
    2816:	02 c0       	rjmp	.+4      	; 0x281c <Dio_togglePin+0x4a>
    2818:	88 0f       	add	r24, r24
    281a:	99 1f       	adc	r25, r25
    281c:	0a 94       	dec	r0
    281e:	e2 f7       	brpl	.-8      	; 0x2818 <Dio_togglePin+0x46>
    2820:	82 27       	eor	r24, r18
    2822:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    2824:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    2826:	08 95       	ret
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2828:	28 b3       	in	r18, 0x18	; 24
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	01 80       	ldd	r0, Z+1	; 0x01
    2830:	02 c0       	rjmp	.+4      	; 0x2836 <Dio_togglePin+0x64>
    2832:	88 0f       	add	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	0a 94       	dec	r0
    2838:	e2 f7       	brpl	.-8      	; 0x2832 <Dio_togglePin+0x60>
    283a:	82 27       	eor	r24, r18
    283c:	88 bb       	out	0x18, r24	; 24
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    283e:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    2840:	08 95       	ret
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2842:	25 b3       	in	r18, 0x15	; 21
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	01 80       	ldd	r0, Z+1	; 0x01
    284a:	02 c0       	rjmp	.+4      	; 0x2850 <Dio_togglePin+0x7e>
    284c:	88 0f       	add	r24, r24
    284e:	99 1f       	adc	r25, r25
    2850:	0a 94       	dec	r0
    2852:	e2 f7       	brpl	.-8      	; 0x284c <Dio_togglePin+0x7a>
    2854:	82 27       	eor	r24, r18
    2856:	85 bb       	out	0x15, r24	; 21
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    2858:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    285a:	08 95       	ret
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    285c:	22 b3       	in	r18, 0x12	; 18
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	01 80       	ldd	r0, Z+1	; 0x01
    2864:	02 c0       	rjmp	.+4      	; 0x286a <Dio_togglePin+0x98>
    2866:	88 0f       	add	r24, r24
    2868:	99 1f       	adc	r25, r25
    286a:	0a 94       	dec	r0
    286c:	e2 f7       	brpl	.-8      	; 0x2866 <Dio_togglePin+0x94>
    286e:	82 27       	eor	r24, r18
    2870:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    2872:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    2874:	08 95       	ret
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    2876:	82 e0       	ldi	r24, 0x02	; 2
    2878:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    287a:	86 e0       	ldi	r24, 0x06	; 6
    287c:	08 95       	ret
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    287e:	84 e0       	ldi	r24, 0x04	; 4
	}	
	return DIO_STATUS_ERROR_OK;
}
    2880:	08 95       	ret

00002882 <Dio_readPin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    2882:	85 31       	cpi	r24, 0x15	; 21
    2884:	08 f0       	brcs	.+2      	; 0x2888 <Dio_readPin+0x6>
    2886:	7c c0       	rjmp	.+248    	; 0x2980 <Dio_readPin+0xfe>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    2888:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <u8_Dio_Status>
    288c:	99 23       	and	r25, r25
    288e:	09 f4       	brne	.+2      	; 0x2892 <Dio_readPin+0x10>
    2890:	79 c0       	rjmp	.+242    	; 0x2984 <Dio_readPin+0x102>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    2892:	e8 2f       	mov	r30, r24
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	cf 01       	movw	r24, r30
    2898:	88 0f       	add	r24, r24
    289a:	99 1f       	adc	r25, r25
    289c:	88 0f       	add	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <pstrDio_pinsConfig>
    28a4:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <pstrDio_pinsConfig+0x1>
    28a8:	e8 0f       	add	r30, r24
    28aa:	f9 1f       	adc	r31, r25
    28ac:	80 81       	ld	r24, Z
    28ae:	81 30       	cpi	r24, 0x01	; 1
    28b0:	f9 f0       	breq	.+62     	; 0x28f0 <Dio_readPin+0x6e>
    28b2:	30 f0       	brcs	.+12     	; 0x28c0 <Dio_readPin+0x3e>
    28b4:	82 30       	cpi	r24, 0x02	; 2
    28b6:	a1 f1       	breq	.+104    	; 0x2920 <Dio_readPin+0x9e>
    28b8:	83 30       	cpi	r24, 0x03	; 3
    28ba:	09 f4       	brne	.+2      	; 0x28be <Dio_readPin+0x3c>
    28bc:	49 c0       	rjmp	.+146    	; 0x2950 <Dio_readPin+0xce>
    28be:	64 c0       	rjmp	.+200    	; 0x2988 <Dio_readPin+0x106>
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    28c0:	49 b3       	in	r20, 0x19	; 25
    28c2:	51 81       	ldd	r21, Z+1	; 0x01
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	9c 01       	movw	r18, r24
    28ca:	05 2e       	mov	r0, r21
    28cc:	02 c0       	rjmp	.+4      	; 0x28d2 <Dio_readPin+0x50>
    28ce:	22 0f       	add	r18, r18
    28d0:	33 1f       	adc	r19, r19
    28d2:	0a 94       	dec	r0
    28d4:	e2 f7       	brpl	.-8      	; 0x28ce <Dio_readPin+0x4c>
    28d6:	84 2f       	mov	r24, r20
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	82 23       	and	r24, r18
    28dc:	93 23       	and	r25, r19
    28de:	02 c0       	rjmp	.+4      	; 0x28e4 <Dio_readPin+0x62>
    28e0:	95 95       	asr	r25
    28e2:	87 95       	ror	r24
    28e4:	5a 95       	dec	r21
    28e6:	e2 f7       	brpl	.-8      	; 0x28e0 <Dio_readPin+0x5e>
    28e8:	fb 01       	movw	r30, r22
    28ea:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    28ec:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    28ee:	08 95       	ret
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    28f0:	46 b3       	in	r20, 0x16	; 22
    28f2:	51 81       	ldd	r21, Z+1	; 0x01
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	9c 01       	movw	r18, r24
    28fa:	05 2e       	mov	r0, r21
    28fc:	02 c0       	rjmp	.+4      	; 0x2902 <Dio_readPin+0x80>
    28fe:	22 0f       	add	r18, r18
    2900:	33 1f       	adc	r19, r19
    2902:	0a 94       	dec	r0
    2904:	e2 f7       	brpl	.-8      	; 0x28fe <Dio_readPin+0x7c>
    2906:	84 2f       	mov	r24, r20
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	82 23       	and	r24, r18
    290c:	93 23       	and	r25, r19
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <Dio_readPin+0x92>
    2910:	95 95       	asr	r25
    2912:	87 95       	ror	r24
    2914:	5a 95       	dec	r21
    2916:	e2 f7       	brpl	.-8      	; 0x2910 <Dio_readPin+0x8e>
    2918:	fb 01       	movw	r30, r22
    291a:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    291c:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    291e:	08 95       	ret
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2920:	43 b3       	in	r20, 0x13	; 19
    2922:	51 81       	ldd	r21, Z+1	; 0x01
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	9c 01       	movw	r18, r24
    292a:	05 2e       	mov	r0, r21
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <Dio_readPin+0xb0>
    292e:	22 0f       	add	r18, r18
    2930:	33 1f       	adc	r19, r19
    2932:	0a 94       	dec	r0
    2934:	e2 f7       	brpl	.-8      	; 0x292e <Dio_readPin+0xac>
    2936:	84 2f       	mov	r24, r20
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	82 23       	and	r24, r18
    293c:	93 23       	and	r25, r19
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <Dio_readPin+0xc2>
    2940:	95 95       	asr	r25
    2942:	87 95       	ror	r24
    2944:	5a 95       	dec	r21
    2946:	e2 f7       	brpl	.-8      	; 0x2940 <Dio_readPin+0xbe>
    2948:	fb 01       	movw	r30, r22
    294a:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    294c:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    294e:	08 95       	ret
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2950:	40 b3       	in	r20, 0x10	; 16
    2952:	51 81       	ldd	r21, Z+1	; 0x01
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9c 01       	movw	r18, r24
    295a:	05 2e       	mov	r0, r21
    295c:	02 c0       	rjmp	.+4      	; 0x2962 <Dio_readPin+0xe0>
    295e:	22 0f       	add	r18, r18
    2960:	33 1f       	adc	r19, r19
    2962:	0a 94       	dec	r0
    2964:	e2 f7       	brpl	.-8      	; 0x295e <Dio_readPin+0xdc>
    2966:	84 2f       	mov	r24, r20
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	82 23       	and	r24, r18
    296c:	93 23       	and	r25, r19
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <Dio_readPin+0xf2>
    2970:	95 95       	asr	r25
    2972:	87 95       	ror	r24
    2974:	5a 95       	dec	r21
    2976:	e2 f7       	brpl	.-8      	; 0x2970 <Dio_readPin+0xee>
    2978:	fb 01       	movw	r30, r22
    297a:	80 83       	st	Z, r24
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    297c:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    297e:	08 95       	ret
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    2980:	82 e0       	ldi	r24, 0x02	; 2
    2982:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    2984:	86 e0       	ldi	r24, 0x06	; 6
    2986:	08 95       	ret
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    2988:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
    298a:	08 95       	ret

0000298c <__vector_1>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
    298c:	1f 92       	push	r1
    298e:	0f 92       	push	r0
    2990:	0f b6       	in	r0, 0x3f	; 63
    2992:	0f 92       	push	r0
    2994:	11 24       	eor	r1, r1
    2996:	2f 93       	push	r18
    2998:	3f 93       	push	r19
    299a:	4f 93       	push	r20
    299c:	5f 93       	push	r21
    299e:	6f 93       	push	r22
    29a0:	7f 93       	push	r23
    29a2:	8f 93       	push	r24
    29a4:	9f 93       	push	r25
    29a6:	af 93       	push	r26
    29a8:	bf 93       	push	r27
    29aa:	ef 93       	push	r30
    29ac:	ff 93       	push	r31
    29ae:	e0 91 d8 06 	lds	r30, 0x06D8	; 0x8006d8 <INT0_CallBackPtr>
    29b2:	f0 91 d9 06 	lds	r31, 0x06D9	; 0x8006d9 <INT0_CallBackPtr+0x1>
    29b6:	09 95       	icall
    29b8:	ff 91       	pop	r31
    29ba:	ef 91       	pop	r30
    29bc:	bf 91       	pop	r27
    29be:	af 91       	pop	r26
    29c0:	9f 91       	pop	r25
    29c2:	8f 91       	pop	r24
    29c4:	7f 91       	pop	r23
    29c6:	6f 91       	pop	r22
    29c8:	5f 91       	pop	r21
    29ca:	4f 91       	pop	r20
    29cc:	3f 91       	pop	r19
    29ce:	2f 91       	pop	r18
    29d0:	0f 90       	pop	r0
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	0f 90       	pop	r0
    29d6:	1f 90       	pop	r1
    29d8:	18 95       	reti

000029da <__vector_2>:
    29da:	1f 92       	push	r1
    29dc:	0f 92       	push	r0
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	0f 92       	push	r0
    29e2:	11 24       	eor	r1, r1
    29e4:	2f 93       	push	r18
    29e6:	3f 93       	push	r19
    29e8:	4f 93       	push	r20
    29ea:	5f 93       	push	r21
    29ec:	6f 93       	push	r22
    29ee:	7f 93       	push	r23
    29f0:	8f 93       	push	r24
    29f2:	9f 93       	push	r25
    29f4:	af 93       	push	r26
    29f6:	bf 93       	push	r27
    29f8:	ef 93       	push	r30
    29fa:	ff 93       	push	r31
    29fc:	e0 91 d6 06 	lds	r30, 0x06D6	; 0x8006d6 <INT1_CallBackPtr>
    2a00:	f0 91 d7 06 	lds	r31, 0x06D7	; 0x8006d7 <INT1_CallBackPtr+0x1>
    2a04:	09 95       	icall
    2a06:	ff 91       	pop	r31
    2a08:	ef 91       	pop	r30
    2a0a:	bf 91       	pop	r27
    2a0c:	af 91       	pop	r26
    2a0e:	9f 91       	pop	r25
    2a10:	8f 91       	pop	r24
    2a12:	7f 91       	pop	r23
    2a14:	6f 91       	pop	r22
    2a16:	5f 91       	pop	r21
    2a18:	4f 91       	pop	r20
    2a1a:	3f 91       	pop	r19
    2a1c:	2f 91       	pop	r18
    2a1e:	0f 90       	pop	r0
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	0f 90       	pop	r0
    2a24:	1f 90       	pop	r1
    2a26:	18 95       	reti

00002a28 <__vector_3>:
}
ISR(INT2_IRQ)
{
    2a28:	1f 92       	push	r1
    2a2a:	0f 92       	push	r0
    2a2c:	0f b6       	in	r0, 0x3f	; 63
    2a2e:	0f 92       	push	r0
    2a30:	11 24       	eor	r1, r1
    2a32:	2f 93       	push	r18
    2a34:	3f 93       	push	r19
    2a36:	4f 93       	push	r20
    2a38:	5f 93       	push	r21
    2a3a:	6f 93       	push	r22
    2a3c:	7f 93       	push	r23
    2a3e:	8f 93       	push	r24
    2a40:	9f 93       	push	r25
    2a42:	af 93       	push	r26
    2a44:	bf 93       	push	r27
    2a46:	ef 93       	push	r30
    2a48:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
    2a4a:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <INT2_CallBackPtr>
    2a4e:	f0 91 d5 06 	lds	r31, 0x06D5	; 0x8006d5 <INT2_CallBackPtr+0x1>
    2a52:	09 95       	icall
}
    2a54:	ff 91       	pop	r31
    2a56:	ef 91       	pop	r30
    2a58:	bf 91       	pop	r27
    2a5a:	af 91       	pop	r26
    2a5c:	9f 91       	pop	r25
    2a5e:	8f 91       	pop	r24
    2a60:	7f 91       	pop	r23
    2a62:	6f 91       	pop	r22
    2a64:	5f 91       	pop	r21
    2a66:	4f 91       	pop	r20
    2a68:	3f 91       	pop	r19
    2a6a:	2f 91       	pop	r18
    2a6c:	0f 90       	pop	r0
    2a6e:	0f be       	out	0x3f, r0	; 63
    2a70:	0f 90       	pop	r0
    2a72:	1f 90       	pop	r1
    2a74:	18 95       	reti

00002a76 <Gpt_ISRHandler>:
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_EXPIRED;
	return GPT_STATUS_ERROR_OK;
}
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	0e c0       	rjmp	.+28     	; 0x2a96 <Gpt_ISRHandler+0x20>
    2a7a:	29 2f       	mov	r18, r25
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	f9 01       	movw	r30, r18
    2a80:	ee 0f       	add	r30, r30
    2a82:	ff 1f       	adc	r31, r31
    2a84:	2e 0f       	add	r18, r30
    2a86:	3f 1f       	adc	r19, r31
    2a88:	f9 01       	movw	r30, r18
    2a8a:	e5 58       	subi	r30, 0x85	; 133
    2a8c:	fa 4f       	sbci	r31, 0xFA	; 250
    2a8e:	20 81       	ld	r18, Z
    2a90:	28 17       	cp	r18, r24
    2a92:	19 f0       	breq	.+6      	; 0x2a9a <Gpt_ISRHandler+0x24>
    2a94:	9f 5f       	subi	r25, 0xFF	; 255
    2a96:	99 23       	and	r25, r25
    2a98:	81 f3       	breq	.-32     	; 0x2a7a <Gpt_ISRHandler+0x4>
    2a9a:	89 2f       	mov	r24, r25
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	ee 0f       	add	r30, r30
    2aa2:	ff 1f       	adc	r31, r31
    2aa4:	ee 0f       	add	r30, r30
    2aa6:	ff 1f       	adc	r31, r31
    2aa8:	e5 52       	subi	r30, 0x25	; 37
    2aaa:	f9 4f       	sbci	r31, 0xF9	; 249
    2aac:	40 81       	ld	r20, Z
    2aae:	51 81       	ldd	r21, Z+1	; 0x01
    2ab0:	62 81       	ldd	r22, Z+2	; 0x02
    2ab2:	73 81       	ldd	r23, Z+3	; 0x03
    2ab4:	41 15       	cp	r20, r1
    2ab6:	51 05       	cpc	r21, r1
    2ab8:	61 05       	cpc	r22, r1
    2aba:	71 05       	cpc	r23, r1
    2abc:	81 f0       	breq	.+32     	; 0x2ade <Gpt_ISRHandler+0x68>
    2abe:	88 0f       	add	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	88 0f       	add	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	e5 52       	subi	r30, 0x25	; 37
    2aca:	f9 4f       	sbci	r31, 0xF9	; 249
    2acc:	41 50       	subi	r20, 0x01	; 1
    2ace:	51 09       	sbc	r21, r1
    2ad0:	61 09       	sbc	r22, r1
    2ad2:	71 09       	sbc	r23, r1
    2ad4:	40 83       	st	Z, r20
    2ad6:	51 83       	std	Z+1, r21	; 0x01
    2ad8:	62 83       	std	Z+2, r22	; 0x02
    2ada:	73 83       	std	Z+3, r23	; 0x03
    2adc:	08 95       	ret
    2ade:	23 b7       	in	r18, 0x33	; 51
    2ae0:	2e 7f       	andi	r18, 0xFE	; 254
    2ae2:	23 bf       	out	0x33, r18	; 51
    2ae4:	23 b7       	in	r18, 0x33	; 51
    2ae6:	2d 7f       	andi	r18, 0xFD	; 253
    2ae8:	23 bf       	out	0x33, r18	; 51
    2aea:	23 b7       	in	r18, 0x33	; 51
    2aec:	2b 7f       	andi	r18, 0xFB	; 251
    2aee:	23 bf       	out	0x33, r18	; 51
    2af0:	29 b7       	in	r18, 0x39	; 57
    2af2:	2e 7f       	andi	r18, 0xFE	; 254
    2af4:	29 bf       	out	0x39, r18	; 57
    2af6:	fc 01       	movw	r30, r24
    2af8:	e1 52       	subi	r30, 0x21	; 33
    2afa:	f9 4f       	sbci	r31, 0xF9	; 249
    2afc:	24 e0       	ldi	r18, 0x04	; 4
    2afe:	20 83       	st	Z, r18
    2b00:	e0 91 e0 06 	lds	r30, 0x06E0	; 0x8006e0 <Gpt_Timer0_CallBackPtr>
    2b04:	f0 91 e1 06 	lds	r31, 0x06E1	; 0x8006e1 <Gpt_Timer0_CallBackPtr+0x1>
    2b08:	09 95       	icall
    2b0a:	08 95       	ret

00002b0c <GptInit>:
    2b0c:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <genu_GPTModStatus>
    2b10:	81 30       	cpi	r24, 0x01	; 1
    2b12:	61 f1       	breq	.+88     	; 0x2b6c <GptInit+0x60>
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	24 c0       	rjmp	.+72     	; 0x2b60 <GptInit+0x54>
    2b18:	82 2f       	mov	r24, r18
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	ee 0f       	add	r30, r30
    2b20:	ff 1f       	adc	r31, r31
    2b22:	e8 0f       	add	r30, r24
    2b24:	f9 1f       	adc	r31, r25
    2b26:	e5 58       	subi	r30, 0x85	; 133
    2b28:	fa 4f       	sbci	r31, 0xFA	; 250
    2b2a:	30 81       	ld	r19, Z
    2b2c:	33 23       	and	r19, r19
    2b2e:	19 f0       	breq	.+6      	; 0x2b36 <GptInit+0x2a>
    2b30:	33 30       	cpi	r19, 0x03	; 3
    2b32:	f0 f4       	brcc	.+60     	; 0x2b70 <GptInit+0x64>
    2b34:	0f c0       	rjmp	.+30     	; 0x2b54 <GptInit+0x48>
    2b36:	fc 01       	movw	r30, r24
    2b38:	ee 0f       	add	r30, r30
    2b3a:	ff 1f       	adc	r31, r31
    2b3c:	e8 0f       	add	r30, r24
    2b3e:	f9 1f       	adc	r31, r25
    2b40:	e5 58       	subi	r30, 0x85	; 133
    2b42:	fa 4f       	sbci	r31, 0xFA	; 250
    2b44:	32 81       	ldd	r19, Z+2	; 0x02
    2b46:	31 11       	cpse	r19, r1
    2b48:	05 c0       	rjmp	.+10     	; 0x2b54 <GptInit+0x48>
    2b4a:	13 be       	out	0x33, r1	; 51
    2b4c:	39 b7       	in	r19, 0x39	; 57
    2b4e:	3c 7f       	andi	r19, 0xFC	; 252
    2b50:	39 bf       	out	0x39, r19	; 57
    2b52:	12 be       	out	0x32, r1	; 50
    2b54:	fc 01       	movw	r30, r24
    2b56:	e1 52       	subi	r30, 0x21	; 33
    2b58:	f9 4f       	sbci	r31, 0xF9	; 249
    2b5a:	31 e0       	ldi	r19, 0x01	; 1
    2b5c:	30 83       	st	Z, r19
    2b5e:	2f 5f       	subi	r18, 0xFF	; 255
    2b60:	22 23       	and	r18, r18
    2b62:	d1 f2       	breq	.-76     	; 0x2b18 <GptInit+0xc>
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	80 93 da 06 	sts	0x06DA, r24	; 0x8006da <genu_GPTModStatus>
    2b6a:	08 95       	ret
    2b6c:	83 e0       	ldi	r24, 0x03	; 3
    2b6e:	08 95       	ret
    2b70:	85 e0       	ldi	r24, 0x05	; 5
    2b72:	08 95       	ret

00002b74 <GptStart_aSync>:
* Return value: enuGpt_Status_t - Returns the status of the function (if there is any error)
* Description: Function to Start the Timer module counting from 0x00 until (u16_Ticks)
               and generate interrupt when OVF.
************************************************************************************/
enuGpt_Status_t GptStart_aSync(u8Gpt_Channel_t ChannelId, u32Gpt_Value_t u16_Ticks, pfGpt_CallBack_t CallBack)
{
    2b74:	0f 93       	push	r16
    2b76:	1f 93       	push	r17
    2b78:	cf 93       	push	r28
    2b7a:	df 93       	push	r29
    2b7c:	89 01       	movw	r16, r18
	
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    2b7e:	81 11       	cpse	r24, r1
    2b80:	4a c0       	rjmp	.+148    	; 0x2c16 <GptStart_aSync+0xa2>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    2b82:	c8 2f       	mov	r28, r24
    2b84:	d0 e0       	ldi	r29, 0x00	; 0
    2b86:	fe 01       	movw	r30, r28
    2b88:	e1 52       	subi	r30, 0x21	; 33
    2b8a:	f9 4f       	sbci	r31, 0xF9	; 249
    2b8c:	80 81       	ld	r24, Z
    2b8e:	88 23       	and	r24, r24
    2b90:	09 f4       	brne	.+2      	; 0x2b94 <GptStart_aSync+0x20>
    2b92:	43 c0       	rjmp	.+134    	; 0x2c1a <GptStart_aSync+0xa6>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
    2b94:	82 30       	cpi	r24, 0x02	; 2
    2b96:	09 f4       	brne	.+2      	; 0x2b9a <GptStart_aSync+0x26>
    2b98:	42 c0       	rjmp	.+132    	; 0x2c1e <GptStart_aSync+0xaa>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u16_remainderCount=0;
	
	enuChannelsState[ChannelId] = GPT_RUNNING;
    2b9a:	82 e0       	ldi	r24, 0x02	; 2
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	e1 52       	subi	r30, 0x21	; 33
    2ba0:	f9 4f       	sbci	r31, 0xF9	; 249
    2ba2:	80 83       	st	Z, r24
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	ee 0f       	add	r30, r30
    2ba8:	ff 1f       	adc	r31, r31
    2baa:	ec 0f       	add	r30, r28
    2bac:	fd 1f       	adc	r31, r29
    2bae:	e5 58       	subi	r30, 0x85	; 133
    2bb0:	fa 4f       	sbci	r31, 0xFA	; 250
    2bb2:	80 81       	ld	r24, Z
    2bb4:	88 23       	and	r24, r24
    2bb6:	21 f0       	breq	.+8      	; 0x2bc0 <GptStart_aSync+0x4c>
    2bb8:	83 30       	cpi	r24, 0x03	; 3
    2bba:	98 f1       	brcs	.+102    	; 0x2c22 <GptStart_aSync+0xae>
		case GPT_TIMER_2: /* In case of Timer 2 */
			break;
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    2bbc:	85 e0       	ldi	r24, 0x05	; 5
    2bbe:	34 c0       	rjmp	.+104    	; 0x2c28 <GptStart_aSync+0xb4>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Get Number of loops to overflow the timer counter */
			u32_Channels_ISR_Count[ChannelId] = u16_Ticks / GPT_MAX_VALUE_8BIT; //0xFF
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	ba 01       	movw	r22, r20
    2bc4:	2f ef       	ldi	r18, 0xFF	; 255
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e0       	ldi	r20, 0x00	; 0
    2bca:	50 e0       	ldi	r21, 0x00	; 0
    2bcc:	0e 94 81 20 	call	0x4102	; 0x4102 <__udivmodsi4>
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	ee 0f       	add	r30, r30
    2bd4:	ff 1f       	adc	r31, r31
    2bd6:	ee 0f       	add	r30, r30
    2bd8:	ff 1f       	adc	r31, r31
    2bda:	e5 52       	subi	r30, 0x25	; 37
    2bdc:	f9 4f       	sbci	r31, 0xF9	; 249
    2bde:	20 83       	st	Z, r18
    2be0:	31 83       	std	Z+1, r19	; 0x01
    2be2:	42 83       	std	Z+2, r20	; 0x02
    2be4:	53 83       	std	Z+3, r21	; 0x03
			/* Get Number of extra ticks (remainder) */
			u16_remainderCount = u16_Ticks % GPT_MAX_VALUE_8BIT;
    2be6:	26 2f       	mov	r18, r22
    2be8:	37 2f       	mov	r19, r23
			/* Set the interrupt enable */
			REG_SET_BIT(GPT_TIMSK_REG, GPT_TIMSK_TOIE0);
    2bea:	89 b7       	in	r24, 0x39	; 57
    2bec:	81 60       	ori	r24, 0x01	; 1
    2bee:	89 bf       	out	0x39, r24	; 57
			/* Set the callback function pointer */
			Gpt_Timer0_CallBackPtr=CallBack;
    2bf0:	10 93 e1 06 	sts	0x06E1, r17	; 0x8006e1 <Gpt_Timer0_CallBackPtr+0x1>
    2bf4:	00 93 e0 06 	sts	0x06E0, r16	; 0x8006e0 <Gpt_Timer0_CallBackPtr>
			/* Start the clock with the given pre scaler */
			GPT_TCCR0_REG = (Timers_Configurations[ChannelId].enuClock_Src) << GPT_TCCR0_CS00;
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	c8 0f       	add	r28, r24
    2c00:	d9 1f       	adc	r29, r25
    2c02:	c5 58       	subi	r28, 0x85	; 133
    2c04:	da 4f       	sbci	r29, 0xFA	; 250
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	83 bf       	out	0x33, r24	; 51
			/* Run the remainder ticks */
			/* Put the value of the 0xFF - remainderTicks to start count from it */
			if(u16_remainderCount != 0)
    2c0a:	23 2b       	or	r18, r19
    2c0c:	61 f0       	breq	.+24     	; 0x2c26 <GptStart_aSync+0xb2>
			{
				GPT_TCNT0_REG = 256 - u16_remainderCount;
    2c0e:	61 95       	neg	r22
    2c10:	62 bf       	out	0x32, r22	; 50
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	09 c0       	rjmp	.+18     	; 0x2c28 <GptStart_aSync+0xb4>
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    2c16:	86 e0       	ldi	r24, 0x06	; 6
    2c18:	07 c0       	rjmp	.+14     	; 0x2c28 <GptStart_aSync+0xb4>
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    2c1a:	82 e0       	ldi	r24, 0x02	; 2
    2c1c:	05 c0       	rjmp	.+10     	; 0x2c28 <GptStart_aSync+0xb4>
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_BUSY;
    2c1e:	87 e0       	ldi	r24, 0x07	; 7
    2c20:	03 c0       	rjmp	.+6      	; 0x2c28 <GptStart_aSync+0xb4>
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	01 c0       	rjmp	.+2      	; 0x2c28 <GptStart_aSync+0xb4>
    2c26:	81 e0       	ldi	r24, 0x01	; 1
}
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	1f 91       	pop	r17
    2c2e:	0f 91       	pop	r16
    2c30:	08 95       	ret

00002c32 <GptStop>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    2c32:	81 11       	cpse	r24, r1
    2c34:	23 c0       	rjmp	.+70     	; 0x2c7c <GptStop+0x4a>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	fc 01       	movw	r30, r24
    2c3a:	e1 52       	subi	r30, 0x21	; 33
    2c3c:	f9 4f       	sbci	r31, 0xF9	; 249
    2c3e:	20 81       	ld	r18, Z
    2c40:	22 23       	and	r18, r18
    2c42:	f1 f0       	breq	.+60     	; 0x2c80 <GptStop+0x4e>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
    2c44:	22 30       	cpi	r18, 0x02	; 2
    2c46:	f1 f4       	brne	.+60     	; 0x2c84 <GptStop+0x52>

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    2c48:	fc 01       	movw	r30, r24
    2c4a:	ee 0f       	add	r30, r30
    2c4c:	ff 1f       	adc	r31, r31
    2c4e:	e8 0f       	add	r30, r24
    2c50:	f9 1f       	adc	r31, r25
    2c52:	e5 58       	subi	r30, 0x85	; 133
    2c54:	fa 4f       	sbci	r31, 0xFA	; 250
    2c56:	20 81       	ld	r18, Z
    2c58:	22 23       	and	r18, r18
    2c5a:	19 f0       	breq	.+6      	; 0x2c62 <GptStop+0x30>
    2c5c:	23 30       	cpi	r18, 0x03	; 3
    2c5e:	a0 f4       	brcc	.+40     	; 0x2c88 <GptStop+0x56>
    2c60:	06 c0       	rjmp	.+12     	; 0x2c6e <GptStop+0x3c>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Stop the clock from the timer */
			GPT_TCCR0_REG &= ~(7 << GPT_TCCR0_CS00);
    2c62:	23 b7       	in	r18, 0x33	; 51
    2c64:	28 7f       	andi	r18, 0xF8	; 248
    2c66:	23 bf       	out	0x33, r18	; 51
			GPT_TIMSK_REG &= ~(3 << GPT_TIMSK_TOIE0);
    2c68:	29 b7       	in	r18, 0x39	; 57
    2c6a:	2c 7f       	andi	r18, 0xFC	; 252
    2c6c:	29 bf       	out	0x39, r18	; 57
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
    2c6e:	fc 01       	movw	r30, r24
    2c70:	e1 52       	subi	r30, 0x21	; 33
    2c72:	f9 4f       	sbci	r31, 0xF9	; 249
    2c74:	23 e0       	ldi	r18, 0x03	; 3
    2c76:	20 83       	st	Z, r18
	return GPT_STATUS_ERROR_OK;
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    2c7c:	86 e0       	ldi	r24, 0x06	; 6
    2c7e:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    2c80:	82 e0       	ldi	r24, 0x02	; 2
    2c82:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_STOPPED;
    2c84:	88 e0       	ldi	r24, 0x08	; 8
    2c86:	08 95       	ret
		case GPT_TIMER_2: /* In case of Timer 2 */
		break;
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    2c88:	85 e0       	ldi	r24, 0x05	; 5
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
    2c8a:	08 95       	ret

00002c8c <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    2c8c:	1f 92       	push	r1
    2c8e:	0f 92       	push	r0
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	0f 92       	push	r0
    2c94:	11 24       	eor	r1, r1
    2c96:	2f 93       	push	r18
    2c98:	3f 93       	push	r19
    2c9a:	4f 93       	push	r20
    2c9c:	5f 93       	push	r21
    2c9e:	6f 93       	push	r22
    2ca0:	7f 93       	push	r23
    2ca2:	8f 93       	push	r24
    2ca4:	9f 93       	push	r25
    2ca6:	af 93       	push	r26
    2ca8:	bf 93       	push	r27
    2caa:	ef 93       	push	r30
    2cac:	ff 93       	push	r31
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <Gpt_ISRHandler>
    2cb4:	ff 91       	pop	r31
    2cb6:	ef 91       	pop	r30
    2cb8:	bf 91       	pop	r27
    2cba:	af 91       	pop	r26
    2cbc:	9f 91       	pop	r25
    2cbe:	8f 91       	pop	r24
    2cc0:	7f 91       	pop	r23
    2cc2:	6f 91       	pop	r22
    2cc4:	5f 91       	pop	r21
    2cc6:	4f 91       	pop	r20
    2cc8:	3f 91       	pop	r19
    2cca:	2f 91       	pop	r18
    2ccc:	0f 90       	pop	r0
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	0f 90       	pop	r0
    2cd2:	1f 90       	pop	r1
    2cd4:	18 95       	reti

00002cd6 <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    2cd6:	1f 92       	push	r1
    2cd8:	0f 92       	push	r0
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	0f 92       	push	r0
    2cde:	11 24       	eor	r1, r1
    2ce0:	2f 93       	push	r18
    2ce2:	3f 93       	push	r19
    2ce4:	4f 93       	push	r20
    2ce6:	5f 93       	push	r21
    2ce8:	6f 93       	push	r22
    2cea:	7f 93       	push	r23
    2cec:	8f 93       	push	r24
    2cee:	9f 93       	push	r25
    2cf0:	af 93       	push	r26
    2cf2:	bf 93       	push	r27
    2cf4:	ef 93       	push	r30
    2cf6:	ff 93       	push	r31
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <Gpt_ISRHandler>
    2cfe:	ff 91       	pop	r31
    2d00:	ef 91       	pop	r30
    2d02:	bf 91       	pop	r27
    2d04:	af 91       	pop	r26
    2d06:	9f 91       	pop	r25
    2d08:	8f 91       	pop	r24
    2d0a:	7f 91       	pop	r23
    2d0c:	6f 91       	pop	r22
    2d0e:	5f 91       	pop	r21
    2d10:	4f 91       	pop	r20
    2d12:	3f 91       	pop	r19
    2d14:	2f 91       	pop	r18
    2d16:	0f 90       	pop	r0
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	0f 90       	pop	r0
    2d1c:	1f 90       	pop	r1
    2d1e:	18 95       	reti

00002d20 <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2d20:	1f 92       	push	r1
    2d22:	0f 92       	push	r0
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	0f 92       	push	r0
    2d28:	11 24       	eor	r1, r1
    2d2a:	2f 93       	push	r18
    2d2c:	3f 93       	push	r19
    2d2e:	4f 93       	push	r20
    2d30:	5f 93       	push	r21
    2d32:	6f 93       	push	r22
    2d34:	7f 93       	push	r23
    2d36:	8f 93       	push	r24
    2d38:	9f 93       	push	r25
    2d3a:	af 93       	push	r26
    2d3c:	bf 93       	push	r27
    2d3e:	ef 93       	push	r30
    2d40:	ff 93       	push	r31
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <Gpt_ISRHandler>
    2d48:	ff 91       	pop	r31
    2d4a:	ef 91       	pop	r30
    2d4c:	bf 91       	pop	r27
    2d4e:	af 91       	pop	r26
    2d50:	9f 91       	pop	r25
    2d52:	8f 91       	pop	r24
    2d54:	7f 91       	pop	r23
    2d56:	6f 91       	pop	r22
    2d58:	5f 91       	pop	r21
    2d5a:	4f 91       	pop	r20
    2d5c:	3f 91       	pop	r19
    2d5e:	2f 91       	pop	r18
    2d60:	0f 90       	pop	r0
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	0f 90       	pop	r0
    2d66:	1f 90       	pop	r1
    2d68:	18 95       	reti

00002d6a <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2d6a:	1f 92       	push	r1
    2d6c:	0f 92       	push	r0
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	0f 92       	push	r0
    2d72:	11 24       	eor	r1, r1
    2d74:	2f 93       	push	r18
    2d76:	3f 93       	push	r19
    2d78:	4f 93       	push	r20
    2d7a:	5f 93       	push	r21
    2d7c:	6f 93       	push	r22
    2d7e:	7f 93       	push	r23
    2d80:	8f 93       	push	r24
    2d82:	9f 93       	push	r25
    2d84:	af 93       	push	r26
    2d86:	bf 93       	push	r27
    2d88:	ef 93       	push	r30
    2d8a:	ff 93       	push	r31
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <Gpt_ISRHandler>
    2d92:	ff 91       	pop	r31
    2d94:	ef 91       	pop	r30
    2d96:	bf 91       	pop	r27
    2d98:	af 91       	pop	r26
    2d9a:	9f 91       	pop	r25
    2d9c:	8f 91       	pop	r24
    2d9e:	7f 91       	pop	r23
    2da0:	6f 91       	pop	r22
    2da2:	5f 91       	pop	r21
    2da4:	4f 91       	pop	r20
    2da6:	3f 91       	pop	r19
    2da8:	2f 91       	pop	r18
    2daa:	0f 90       	pop	r0
    2dac:	0f be       	out	0x3f, r0	; 63
    2dae:	0f 90       	pop	r0
    2db0:	1f 90       	pop	r1
    2db2:	18 95       	reti

00002db4 <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2db4:	1f 92       	push	r1
    2db6:	0f 92       	push	r0
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	0f 92       	push	r0
    2dbc:	11 24       	eor	r1, r1
    2dbe:	2f 93       	push	r18
    2dc0:	3f 93       	push	r19
    2dc2:	4f 93       	push	r20
    2dc4:	5f 93       	push	r21
    2dc6:	6f 93       	push	r22
    2dc8:	7f 93       	push	r23
    2dca:	8f 93       	push	r24
    2dcc:	9f 93       	push	r25
    2dce:	af 93       	push	r26
    2dd0:	bf 93       	push	r27
    2dd2:	ef 93       	push	r30
    2dd4:	ff 93       	push	r31
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <Gpt_ISRHandler>
    2ddc:	ff 91       	pop	r31
    2dde:	ef 91       	pop	r30
    2de0:	bf 91       	pop	r27
    2de2:	af 91       	pop	r26
    2de4:	9f 91       	pop	r25
    2de6:	8f 91       	pop	r24
    2de8:	7f 91       	pop	r23
    2dea:	6f 91       	pop	r22
    2dec:	5f 91       	pop	r21
    2dee:	4f 91       	pop	r20
    2df0:	3f 91       	pop	r19
    2df2:	2f 91       	pop	r18
    2df4:	0f 90       	pop	r0
    2df6:	0f be       	out	0x3f, r0	; 63
    2df8:	0f 90       	pop	r0
    2dfa:	1f 90       	pop	r1
    2dfc:	18 95       	reti

00002dfe <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2dfe:	1f 92       	push	r1
    2e00:	0f 92       	push	r0
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	0f 92       	push	r0
    2e06:	11 24       	eor	r1, r1
    2e08:	2f 93       	push	r18
    2e0a:	3f 93       	push	r19
    2e0c:	4f 93       	push	r20
    2e0e:	5f 93       	push	r21
    2e10:	6f 93       	push	r22
    2e12:	7f 93       	push	r23
    2e14:	8f 93       	push	r24
    2e16:	9f 93       	push	r25
    2e18:	af 93       	push	r26
    2e1a:	bf 93       	push	r27
    2e1c:	ef 93       	push	r30
    2e1e:	ff 93       	push	r31
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <Gpt_ISRHandler>
    2e26:	ff 91       	pop	r31
    2e28:	ef 91       	pop	r30
    2e2a:	bf 91       	pop	r27
    2e2c:	af 91       	pop	r26
    2e2e:	9f 91       	pop	r25
    2e30:	8f 91       	pop	r24
    2e32:	7f 91       	pop	r23
    2e34:	6f 91       	pop	r22
    2e36:	5f 91       	pop	r21
    2e38:	4f 91       	pop	r20
    2e3a:	3f 91       	pop	r19
    2e3c:	2f 91       	pop	r18
    2e3e:	0f 90       	pop	r0
    2e40:	0f be       	out	0x3f, r0	; 63
    2e42:	0f 90       	pop	r0
    2e44:	1f 90       	pop	r1
    2e46:	18 95       	reti

00002e48 <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2e48:	1f 92       	push	r1
    2e4a:	0f 92       	push	r0
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	0f 92       	push	r0
    2e50:	11 24       	eor	r1, r1
    2e52:	2f 93       	push	r18
    2e54:	3f 93       	push	r19
    2e56:	4f 93       	push	r20
    2e58:	5f 93       	push	r21
    2e5a:	6f 93       	push	r22
    2e5c:	7f 93       	push	r23
    2e5e:	8f 93       	push	r24
    2e60:	9f 93       	push	r25
    2e62:	af 93       	push	r26
    2e64:	bf 93       	push	r27
    2e66:	ef 93       	push	r30
    2e68:	ff 93       	push	r31
    2e6a:	82 e0       	ldi	r24, 0x02	; 2
    2e6c:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <Gpt_ISRHandler>
    2e70:	ff 91       	pop	r31
    2e72:	ef 91       	pop	r30
    2e74:	bf 91       	pop	r27
    2e76:	af 91       	pop	r26
    2e78:	9f 91       	pop	r25
    2e7a:	8f 91       	pop	r24
    2e7c:	7f 91       	pop	r23
    2e7e:	6f 91       	pop	r22
    2e80:	5f 91       	pop	r21
    2e82:	4f 91       	pop	r20
    2e84:	3f 91       	pop	r19
    2e86:	2f 91       	pop	r18
    2e88:	0f 90       	pop	r0
    2e8a:	0f be       	out	0x3f, r0	; 63
    2e8c:	0f 90       	pop	r0
    2e8e:	1f 90       	pop	r1
    2e90:	18 95       	reti

00002e92 <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2e92:	1f 92       	push	r1
    2e94:	0f 92       	push	r0
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	0f 92       	push	r0
    2e9a:	11 24       	eor	r1, r1
    2e9c:	2f 93       	push	r18
    2e9e:	3f 93       	push	r19
    2ea0:	4f 93       	push	r20
    2ea2:	5f 93       	push	r21
    2ea4:	6f 93       	push	r22
    2ea6:	7f 93       	push	r23
    2ea8:	8f 93       	push	r24
    2eaa:	9f 93       	push	r25
    2eac:	af 93       	push	r26
    2eae:	bf 93       	push	r27
    2eb0:	ef 93       	push	r30
    2eb2:	ff 93       	push	r31
    2eb4:	82 e0       	ldi	r24, 0x02	; 2
    2eb6:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <Gpt_ISRHandler>
    2eba:	ff 91       	pop	r31
    2ebc:	ef 91       	pop	r30
    2ebe:	bf 91       	pop	r27
    2ec0:	af 91       	pop	r26
    2ec2:	9f 91       	pop	r25
    2ec4:	8f 91       	pop	r24
    2ec6:	7f 91       	pop	r23
    2ec8:	6f 91       	pop	r22
    2eca:	5f 91       	pop	r21
    2ecc:	4f 91       	pop	r20
    2ece:	3f 91       	pop	r19
    2ed0:	2f 91       	pop	r18
    2ed2:	0f 90       	pop	r0
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	0f 90       	pop	r0
    2ed8:	1f 90       	pop	r1
    2eda:	18 95       	reti

00002edc <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
    2edc:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2ee0:	86 30       	cpi	r24, 0x06	; 6
    2ee2:	49 f0       	breq	.+18     	; 0x2ef6 <I2C_MasterInit+0x1a>
    2ee4:	82 e0       	ldi	r24, 0x02	; 2
    2ee6:	81 b9       	out	0x01, r24	; 1
    2ee8:	89 e0       	ldi	r24, 0x09	; 9
    2eea:	80 b9       	out	0x00, r24	; 0
    2eec:	86 e0       	ldi	r24, 0x06	; 6
    2eee:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <genuI2C_Status>
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	08 95       	ret
    2ef6:	87 e0       	ldi	r24, 0x07	; 7
    2ef8:	08 95       	ret

00002efa <I2C_MasterSendSTART>:
    2efa:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2efe:	86 30       	cpi	r24, 0x06	; 6
    2f00:	59 f4       	brne	.+22     	; 0x2f18 <I2C_MasterSendSTART+0x1e>
    2f02:	84 ea       	ldi	r24, 0xA4	; 164
    2f04:	86 bf       	out	0x36, r24	; 54
    2f06:	06 b6       	in	r0, 0x36	; 54
    2f08:	07 fe       	sbrs	r0, 7
    2f0a:	fd cf       	rjmp	.-6      	; 0x2f06 <I2C_MasterSendSTART+0xc>
    2f0c:	81 b1       	in	r24, 0x01	; 1
    2f0e:	88 7f       	andi	r24, 0xF8	; 248
    2f10:	88 30       	cpi	r24, 0x08	; 8
    2f12:	21 f0       	breq	.+8      	; 0x2f1c <I2C_MasterSendSTART+0x22>
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	08 95       	ret
    2f18:	85 e0       	ldi	r24, 0x05	; 5
    2f1a:	08 95       	ret
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	08 95       	ret

00002f20 <I2C_MasterSendSlaveAddress>:
    2f20:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2f24:	96 30       	cpi	r25, 0x06	; 6
    2f26:	29 f5       	brne	.+74     	; 0x2f72 <I2C_MasterSendSlaveAddress+0x52>
    2f28:	62 30       	cpi	r22, 0x02	; 2
    2f2a:	28 f5       	brcc	.+74     	; 0x2f76 <I2C_MasterSendSlaveAddress+0x56>
    2f2c:	88 23       	and	r24, r24
    2f2e:	2c f1       	brlt	.+74     	; 0x2f7a <I2C_MasterSendSlaveAddress+0x5a>
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	88 0f       	add	r24, r24
    2f34:	99 1f       	adc	r25, r25
    2f36:	68 2b       	or	r22, r24
    2f38:	63 b9       	out	0x03, r22	; 3
    2f3a:	84 e8       	ldi	r24, 0x84	; 132
    2f3c:	86 bf       	out	0x36, r24	; 54
    2f3e:	06 b6       	in	r0, 0x36	; 54
    2f40:	07 fe       	sbrs	r0, 7
    2f42:	fd cf       	rjmp	.-6      	; 0x2f3e <I2C_MasterSendSlaveAddress+0x1e>
    2f44:	81 b1       	in	r24, 0x01	; 1
    2f46:	88 7f       	andi	r24, 0xF8	; 248
    2f48:	88 33       	cpi	r24, 0x38	; 56
    2f4a:	59 f0       	breq	.+22     	; 0x2f62 <I2C_MasterSendSlaveAddress+0x42>
    2f4c:	28 f4       	brcc	.+10     	; 0x2f58 <I2C_MasterSendSlaveAddress+0x38>
    2f4e:	88 31       	cpi	r24, 0x18	; 24
    2f50:	b1 f0       	breq	.+44     	; 0x2f7e <I2C_MasterSendSlaveAddress+0x5e>
    2f52:	80 32       	cpi	r24, 0x20	; 32
    2f54:	41 f0       	breq	.+16     	; 0x2f66 <I2C_MasterSendSlaveAddress+0x46>
    2f56:	0b c0       	rjmp	.+22     	; 0x2f6e <I2C_MasterSendSlaveAddress+0x4e>
    2f58:	80 34       	cpi	r24, 0x40	; 64
    2f5a:	89 f0       	breq	.+34     	; 0x2f7e <I2C_MasterSendSlaveAddress+0x5e>
    2f5c:	88 34       	cpi	r24, 0x48	; 72
    2f5e:	29 f0       	breq	.+10     	; 0x2f6a <I2C_MasterSendSlaveAddress+0x4a>
    2f60:	06 c0       	rjmp	.+12     	; 0x2f6e <I2C_MasterSendSlaveAddress+0x4e>
    2f62:	88 e3       	ldi	r24, 0x38	; 56
    2f64:	08 95       	ret
    2f66:	80 e2       	ldi	r24, 0x20	; 32
    2f68:	08 95       	ret
    2f6a:	88 e4       	ldi	r24, 0x48	; 72
    2f6c:	08 95       	ret
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	08 95       	ret
    2f72:	85 e0       	ldi	r24, 0x05	; 5
    2f74:	08 95       	ret
    2f76:	82 e0       	ldi	r24, 0x02	; 2
    2f78:	08 95       	ret
    2f7a:	83 e0       	ldi	r24, 0x03	; 3
    2f7c:	08 95       	ret
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	08 95       	ret

00002f82 <I2C_MasterSendRepSTART>:
    2f82:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2f86:	86 30       	cpi	r24, 0x06	; 6
    2f88:	59 f4       	brne	.+22     	; 0x2fa0 <I2C_MasterSendRepSTART+0x1e>
    2f8a:	84 ea       	ldi	r24, 0xA4	; 164
    2f8c:	86 bf       	out	0x36, r24	; 54
    2f8e:	06 b6       	in	r0, 0x36	; 54
    2f90:	07 fe       	sbrs	r0, 7
    2f92:	fd cf       	rjmp	.-6      	; 0x2f8e <I2C_MasterSendRepSTART+0xc>
    2f94:	81 b1       	in	r24, 0x01	; 1
    2f96:	88 7f       	andi	r24, 0xF8	; 248
    2f98:	80 31       	cpi	r24, 0x10	; 16
    2f9a:	21 f0       	breq	.+8      	; 0x2fa4 <I2C_MasterSendRepSTART+0x22>
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	08 95       	ret
    2fa0:	85 e0       	ldi	r24, 0x05	; 5
    2fa2:	08 95       	ret
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	08 95       	ret

00002fa8 <I2C_MasterSendSTOP>:
    2fa8:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2fac:	86 30       	cpi	r24, 0x06	; 6
    2fae:	39 f4       	brne	.+14     	; 0x2fbe <I2C_MasterSendSTOP+0x16>
    2fb0:	84 e9       	ldi	r24, 0x94	; 148
    2fb2:	86 bf       	out	0x36, r24	; 54
    2fb4:	06 b6       	in	r0, 0x36	; 54
    2fb6:	04 fc       	sbrc	r0, 4
    2fb8:	fd cf       	rjmp	.-6      	; 0x2fb4 <I2C_MasterSendSTOP+0xc>
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	08 95       	ret
    2fbe:	85 e0       	ldi	r24, 0x05	; 5
    2fc0:	08 95       	ret

00002fc2 <I2C_MasterSendByte>:
    2fc2:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2fc6:	96 30       	cpi	r25, 0x06	; 6
    2fc8:	69 f4       	brne	.+26     	; 0x2fe4 <I2C_MasterSendByte+0x22>
    2fca:	83 b9       	out	0x03, r24	; 3
    2fcc:	84 e8       	ldi	r24, 0x84	; 132
    2fce:	86 bf       	out	0x36, r24	; 54
    2fd0:	06 b6       	in	r0, 0x36	; 54
    2fd2:	07 fe       	sbrs	r0, 7
    2fd4:	fd cf       	rjmp	.-6      	; 0x2fd0 <I2C_MasterSendByte+0xe>
    2fd6:	81 b1       	in	r24, 0x01	; 1
    2fd8:	88 7f       	andi	r24, 0xF8	; 248
    2fda:	88 32       	cpi	r24, 0x28	; 40
    2fdc:	29 f0       	breq	.+10     	; 0x2fe8 <I2C_MasterSendByte+0x26>
    2fde:	80 33       	cpi	r24, 0x30	; 48
    2fe0:	29 f4       	brne	.+10     	; 0x2fec <I2C_MasterSendByte+0x2a>
    2fe2:	08 95       	ret
    2fe4:	85 e0       	ldi	r24, 0x05	; 5
    2fe6:	08 95       	ret
    2fe8:	88 e2       	ldi	r24, 0x28	; 40
    2fea:	08 95       	ret
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	08 95       	ret

00002ff0 <I2C_MasterReceiveByte_ACK>:
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2ff6:	96 30       	cpi	r25, 0x06	; 6
    2ff8:	79 f4       	brne	.+30     	; 0x3018 <I2C_MasterReceiveByte_ACK+0x28>
    2ffa:	30 97       	sbiw	r30, 0x00	; 0
    2ffc:	79 f0       	breq	.+30     	; 0x301c <I2C_MasterReceiveByte_ACK+0x2c>
    2ffe:	84 ec       	ldi	r24, 0xC4	; 196
    3000:	86 bf       	out	0x36, r24	; 54
    3002:	06 b6       	in	r0, 0x36	; 54
    3004:	07 fe       	sbrs	r0, 7
    3006:	fd cf       	rjmp	.-6      	; 0x3002 <I2C_MasterReceiveByte_ACK+0x12>
    3008:	81 b1       	in	r24, 0x01	; 1
    300a:	88 7f       	andi	r24, 0xF8	; 248
    300c:	80 35       	cpi	r24, 0x50	; 80
    300e:	41 f4       	brne	.+16     	; 0x3020 <I2C_MasterReceiveByte_ACK+0x30>
    3010:	83 b1       	in	r24, 0x03	; 3
    3012:	80 83       	st	Z, r24
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	08 95       	ret
    3018:	85 e0       	ldi	r24, 0x05	; 5
    301a:	08 95       	ret
    301c:	84 e0       	ldi	r24, 0x04	; 4
    301e:	08 95       	ret
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	08 95       	ret

00003024 <I2C_MasterReceiveByte_NACK>:
    3024:	fc 01       	movw	r30, r24
    3026:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    302a:	96 30       	cpi	r25, 0x06	; 6
    302c:	79 f4       	brne	.+30     	; 0x304c <I2C_MasterReceiveByte_NACK+0x28>
    302e:	30 97       	sbiw	r30, 0x00	; 0
    3030:	79 f0       	breq	.+30     	; 0x3050 <I2C_MasterReceiveByte_NACK+0x2c>
    3032:	84 e8       	ldi	r24, 0x84	; 132
    3034:	86 bf       	out	0x36, r24	; 54
    3036:	06 b6       	in	r0, 0x36	; 54
    3038:	07 fe       	sbrs	r0, 7
    303a:	fd cf       	rjmp	.-6      	; 0x3036 <I2C_MasterReceiveByte_NACK+0x12>
    303c:	81 b1       	in	r24, 0x01	; 1
    303e:	88 7f       	andi	r24, 0xF8	; 248
    3040:	88 35       	cpi	r24, 0x58	; 88
    3042:	41 f4       	brne	.+16     	; 0x3054 <I2C_MasterReceiveByte_NACK+0x30>
    3044:	83 b1       	in	r24, 0x03	; 3
    3046:	80 83       	st	Z, r24
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	08 95       	ret
    304c:	85 e0       	ldi	r24, 0x05	; 5
    304e:	08 95       	ret
    3050:	84 e0       	ldi	r24, 0x04	; 4
    3052:	08 95       	ret
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	08 95       	ret

00003058 <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
    3058:	7f 92       	push	r7
    305a:	8f 92       	push	r8
    305c:	9f 92       	push	r9
    305e:	af 92       	push	r10
    3060:	bf 92       	push	r11
    3062:	cf 92       	push	r12
    3064:	df 92       	push	r13
    3066:	ef 92       	push	r14
    3068:	ff 92       	push	r15
    306a:	0f 93       	push	r16
    306c:	1f 93       	push	r17
    306e:	cf 93       	push	r28
    3070:	df 93       	push	r29
    3072:	78 2e       	mov	r7, r24
    3074:	eb 01       	movw	r28, r22
    3076:	7a 01       	movw	r14, r20
    3078:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    307a:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    307e:	86 30       	cpi	r24, 0x06	; 6
    3080:	09 f0       	breq	.+2      	; 0x3084 <I2C_MasterReceiveGeneral+0x2c>
    3082:	47 c0       	rjmp	.+142    	; 0x3112 <I2C_MasterReceiveGeneral+0xba>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
    3084:	20 97       	sbiw	r28, 0x00	; 0
    3086:	09 f4       	brne	.+2      	; 0x308a <I2C_MasterReceiveGeneral+0x32>
    3088:	46 c0       	rjmp	.+140    	; 0x3116 <I2C_MasterReceiveGeneral+0xbe>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
    308a:	23 2b       	or	r18, r19
    308c:	09 f4       	brne	.+2      	; 0x3090 <I2C_MasterReceiveGeneral+0x38>
    308e:	45 c0       	rjmp	.+138    	; 0x311a <I2C_MasterReceiveGeneral+0xc2>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    3090:	77 20       	and	r7, r7
    3092:	0c f4       	brge	.+2      	; 0x3096 <I2C_MasterReceiveGeneral+0x3e>
    3094:	44 c0       	rjmp	.+136    	; 0x311e <I2C_MasterReceiveGeneral+0xc6>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    3096:	0e 94 7d 17 	call	0x2efa	; 0x2efa <I2C_MasterSendSTART>
    309a:	88 23       	and	r24, r24
    309c:	09 f4       	brne	.+2      	; 0x30a0 <I2C_MasterReceiveGeneral+0x48>
    309e:	4a c0       	rjmp	.+148    	; 0x3134 <I2C_MasterReceiveGeneral+0xdc>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    30a0:	60 e0       	ldi	r22, 0x00	; 0
    30a2:	87 2d       	mov	r24, r7
    30a4:	0e 94 90 17 	call	0x2f20	; 0x2f20 <I2C_MasterSendSlaveAddress>
    30a8:	81 30       	cpi	r24, 0x01	; 1
    30aa:	d9 f5       	brne	.+118    	; 0x3122 <I2C_MasterReceiveGeneral+0xca>
    30ac:	0b c0       	rjmp	.+22     	; 0x30c4 <I2C_MasterReceiveGeneral+0x6c>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    30ae:	4e 01       	movw	r8, r28
    30b0:	8f ef       	ldi	r24, 0xFF	; 255
    30b2:	88 1a       	sub	r8, r24
    30b4:	98 0a       	sbc	r9, r24
    30b6:	88 81       	ld	r24, Y
    30b8:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    30bc:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    30be:	88 23       	and	r24, r24
    30c0:	c9 f1       	breq	.+114    	; 0x3134 <I2C_MasterReceiveGeneral+0xdc>
    30c2:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    30c4:	57 01       	movw	r10, r14
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	a8 1a       	sub	r10, r24
    30ca:	b1 08       	sbc	r11, r1
    30cc:	ef 28       	or	r14, r15
    30ce:	79 f7       	brne	.-34     	; 0x30ae <I2C_MasterReceiveGeneral+0x56>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
    30d0:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <I2C_MasterSendRepSTART>
    30d4:	81 30       	cpi	r24, 0x01	; 1
    30d6:	39 f5       	brne	.+78     	; 0x3126 <I2C_MasterReceiveGeneral+0xce>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    30d8:	61 e0       	ldi	r22, 0x01	; 1
    30da:	87 2d       	mov	r24, r7
    30dc:	0e 94 90 17 	call	0x2f20	; 0x2f20 <I2C_MasterSendSlaveAddress>
    30e0:	81 30       	cpi	r24, 0x01	; 1
    30e2:	19 f5       	brne	.+70     	; 0x312a <I2C_MasterReceiveGeneral+0xd2>
    30e4:	08 c0       	rjmp	.+16     	; 0x30f6 <I2C_MasterReceiveGeneral+0x9e>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
    30e6:	e6 01       	movw	r28, r12
    30e8:	21 96       	adiw	r28, 0x01	; 1
    30ea:	c6 01       	movw	r24, r12
    30ec:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <I2C_MasterReceiveByte_ACK>
    30f0:	81 30       	cpi	r24, 0x01	; 1
    30f2:	e9 f4       	brne	.+58     	; 0x312e <I2C_MasterReceiveGeneral+0xd6>
    30f4:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
    30f6:	01 50       	subi	r16, 0x01	; 1
    30f8:	11 09       	sbc	r17, r1
    30fa:	a9 f7       	brne	.-22     	; 0x30e6 <I2C_MasterReceiveGeneral+0x8e>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
    30fc:	c6 01       	movw	r24, r12
    30fe:	0e 94 12 18 	call	0x3024	; 0x3024 <I2C_MasterReceiveByte_NACK>
    3102:	81 30       	cpi	r24, 0x01	; 1
    3104:	b1 f4       	brne	.+44     	; 0x3132 <I2C_MasterReceiveGeneral+0xda>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
    3106:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <I2C_MasterSendSTOP>
    310a:	81 30       	cpi	r24, 0x01	; 1
    310c:	99 f0       	breq	.+38     	; 0x3134 <I2C_MasterReceiveGeneral+0xdc>
		return I2C_STATUS_ERROR_NOK;
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	11 c0       	rjmp	.+34     	; 0x3134 <I2C_MasterReceiveGeneral+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    3112:	85 e0       	ldi	r24, 0x05	; 5
    3114:	0f c0       	rjmp	.+30     	; 0x3134 <I2C_MasterReceiveGeneral+0xdc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    3116:	84 e0       	ldi	r24, 0x04	; 4
    3118:	0d c0       	rjmp	.+26     	; 0x3134 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    311a:	84 e0       	ldi	r24, 0x04	; 4
    311c:	0b c0       	rjmp	.+22     	; 0x3134 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    311e:	83 e0       	ldi	r24, 0x03	; 3
    3120:	09 c0       	rjmp	.+18     	; 0x3134 <I2C_MasterReceiveGeneral+0xdc>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	07 c0       	rjmp	.+14     	; 0x3134 <I2C_MasterReceiveGeneral+0xdc>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	05 c0       	rjmp	.+10     	; 0x3134 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	03 c0       	rjmp	.+6      	; 0x3134 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	01 c0       	rjmp	.+2      	; 0x3134 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    3132:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
    3134:	df 91       	pop	r29
    3136:	cf 91       	pop	r28
    3138:	1f 91       	pop	r17
    313a:	0f 91       	pop	r16
    313c:	ff 90       	pop	r15
    313e:	ef 90       	pop	r14
    3140:	df 90       	pop	r13
    3142:	cf 90       	pop	r12
    3144:	bf 90       	pop	r11
    3146:	af 90       	pop	r10
    3148:	9f 90       	pop	r9
    314a:	8f 90       	pop	r8
    314c:	7f 90       	pop	r7
    314e:	08 95       	ret

00003150 <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
    3150:	bf 92       	push	r11
    3152:	cf 92       	push	r12
    3154:	df 92       	push	r13
    3156:	ef 92       	push	r14
    3158:	ff 92       	push	r15
    315a:	0f 93       	push	r16
    315c:	1f 93       	push	r17
    315e:	cf 93       	push	r28
    3160:	df 93       	push	r29
    3162:	18 2f       	mov	r17, r24
    3164:	06 2f       	mov	r16, r22
    3166:	ea 01       	movw	r28, r20
    3168:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    316a:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    316e:	86 30       	cpi	r24, 0x06	; 6
    3170:	59 f5       	brne	.+86     	; 0x31c8 <I2C_MasterSendToLocation+0x78>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    3172:	20 97       	sbiw	r28, 0x00	; 0
    3174:	59 f1       	breq	.+86     	; 0x31cc <I2C_MasterSendToLocation+0x7c>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    3176:	11 23       	and	r17, r17
    3178:	5c f1       	brlt	.+86     	; 0x31d0 <I2C_MasterSendToLocation+0x80>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    317a:	0e 94 7d 17 	call	0x2efa	; 0x2efa <I2C_MasterSendSTART>
    317e:	88 23       	and	r24, r24
    3180:	61 f1       	breq	.+88     	; 0x31da <I2C_MasterSendToLocation+0x8a>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    3182:	60 e0       	ldi	r22, 0x00	; 0
    3184:	81 2f       	mov	r24, r17
    3186:	0e 94 90 17 	call	0x2f20	; 0x2f20 <I2C_MasterSendSlaveAddress>
    318a:	b8 2e       	mov	r11, r24
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	b8 12       	cpse	r11, r24
    3190:	21 c0       	rjmp	.+66     	; 0x31d4 <I2C_MasterSendToLocation+0x84>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    3192:	80 2f       	mov	r24, r16
    3194:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <I2C_MasterSendByte>
    3198:	81 11       	cpse	r24, r1
    319a:	0c c0       	rjmp	.+24     	; 0x31b4 <I2C_MasterSendToLocation+0x64>
    319c:	1e c0       	rjmp	.+60     	; 0x31da <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    319e:	6e 01       	movw	r12, r28
    31a0:	8f ef       	ldi	r24, 0xFF	; 255
    31a2:	c8 1a       	sub	r12, r24
    31a4:	d8 0a       	sbc	r13, r24
    31a6:	88 81       	ld	r24, Y
    31a8:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <I2C_MasterSendByte>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    31ac:	78 01       	movw	r14, r16
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    31ae:	88 23       	and	r24, r24
    31b0:	a1 f0       	breq	.+40     	; 0x31da <I2C_MasterSendToLocation+0x8a>
    31b2:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    31b4:	87 01       	movw	r16, r14
    31b6:	01 50       	subi	r16, 0x01	; 1
    31b8:	11 09       	sbc	r17, r1
    31ba:	ef 28       	or	r14, r15
    31bc:	81 f7       	brne	.-32     	; 0x319e <I2C_MasterSendToLocation+0x4e>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    31be:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <I2C_MasterSendSTOP>
    31c2:	81 11       	cpse	r24, r1
    31c4:	09 c0       	rjmp	.+18     	; 0x31d8 <I2C_MasterSendToLocation+0x88>
    31c6:	09 c0       	rjmp	.+18     	; 0x31da <I2C_MasterSendToLocation+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    31c8:	85 e0       	ldi	r24, 0x05	; 5
    31ca:	07 c0       	rjmp	.+14     	; 0x31da <I2C_MasterSendToLocation+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    31cc:	84 e0       	ldi	r24, 0x04	; 4
    31ce:	05 c0       	rjmp	.+10     	; 0x31da <I2C_MasterSendToLocation+0x8a>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    31d0:	83 e0       	ldi	r24, 0x03	; 3
    31d2:	03 c0       	rjmp	.+6      	; 0x31da <I2C_MasterSendToLocation+0x8a>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    31d4:	80 e0       	ldi	r24, 0x00	; 0
    31d6:	01 c0       	rjmp	.+2      	; 0x31da <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
    31d8:	8b 2d       	mov	r24, r11
}
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	1f 91       	pop	r17
    31e0:	0f 91       	pop	r16
    31e2:	ff 90       	pop	r15
    31e4:	ef 90       	pop	r14
    31e6:	df 90       	pop	r13
    31e8:	cf 90       	pop	r12
    31ea:	bf 90       	pop	r11
    31ec:	08 95       	ret

000031ee <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
    31ee:	0f 93       	push	r16
    31f0:	1f 93       	push	r17
    31f2:	cf 93       	push	r28
    31f4:	df 93       	push	r29
    31f6:	1f 92       	push	r1
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62
    31fc:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
    31fe:	89 01       	movw	r16, r18
    3200:	9a 01       	movw	r18, r20
    3202:	41 e0       	ldi	r20, 0x01	; 1
    3204:	50 e0       	ldi	r21, 0x00	; 0
    3206:	be 01       	movw	r22, r28
    3208:	6f 5f       	subi	r22, 0xFF	; 255
    320a:	7f 4f       	sbci	r23, 0xFF	; 255
    320c:	0e 94 2c 18 	call	0x3058	; 0x3058 <I2C_MasterReceiveGeneral>
}
    3210:	0f 90       	pop	r0
    3212:	df 91       	pop	r29
    3214:	cf 91       	pop	r28
    3216:	1f 91       	pop	r17
    3218:	0f 91       	pop	r16
    321a:	08 95       	ret

0000321c <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
    321c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <genuSpi_Status>
    3220:	87 30       	cpi	r24, 0x07	; 7
    3222:	b9 f0       	breq	.+46     	; 0x3252 <Spi_init+0x36>
    3224:	87 b3       	in	r24, 0x17	; 23
    3226:	80 64       	ori	r24, 0x40	; 64
    3228:	87 bb       	out	0x17, r24	; 23
    322a:	87 b3       	in	r24, 0x17	; 23
    322c:	8f 7d       	andi	r24, 0xDF	; 223
    322e:	87 bb       	out	0x17, r24	; 23
    3230:	87 b3       	in	r24, 0x17	; 23
    3232:	8f 7e       	andi	r24, 0xEF	; 239
    3234:	87 bb       	out	0x17, r24	; 23
    3236:	87 b3       	in	r24, 0x17	; 23
    3238:	8f 77       	andi	r24, 0x7F	; 127
    323a:	87 bb       	out	0x17, r24	; 23
    323c:	8d b1       	in	r24, 0x0d	; 13
    323e:	8f 7e       	andi	r24, 0xEF	; 239
    3240:	8d b9       	out	0x0d, r24	; 13
    3242:	8d b1       	in	r24, 0x0d	; 13
    3244:	80 64       	ori	r24, 0x40	; 64
    3246:	8d b9       	out	0x0d, r24	; 13
    3248:	87 e0       	ldi	r24, 0x07	; 7
    324a:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <genuSpi_Status>
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	08 95       	ret
    3252:	88 e0       	ldi	r24, 0x08	; 8
    3254:	08 95       	ret

00003256 <Spi_SlaveReceiveByte>:
    3256:	fc 01       	movw	r30, r24
    3258:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <genuSpi_Status>
    325c:	97 30       	cpi	r25, 0x07	; 7
    325e:	41 f4       	brne	.+16     	; 0x3270 <Spi_SlaveReceiveByte+0x1a>
    3260:	30 97       	sbiw	r30, 0x00	; 0
    3262:	41 f0       	breq	.+16     	; 0x3274 <Spi_SlaveReceiveByte+0x1e>
    3264:	77 9b       	sbis	0x0e, 7	; 14
    3266:	fe cf       	rjmp	.-4      	; 0x3264 <Spi_SlaveReceiveByte+0xe>
    3268:	8f b1       	in	r24, 0x0f	; 15
    326a:	80 83       	st	Z, r24
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	08 95       	ret
    3270:	86 e0       	ldi	r24, 0x06	; 6
    3272:	08 95       	ret
    3274:	85 e0       	ldi	r24, 0x05	; 5
    3276:	08 95       	ret

00003278 <Spi_SlaveReceivePacket>:
    3278:	cf 92       	push	r12
    327a:	df 92       	push	r13
    327c:	ef 92       	push	r14
    327e:	ff 92       	push	r15
    3280:	1f 93       	push	r17
    3282:	cf 93       	push	r28
    3284:	df 93       	push	r29
    3286:	6c 01       	movw	r12, r24
    3288:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <genuSpi_Status>
    328c:	97 30       	cpi	r25, 0x07	; 7
    328e:	b1 f4       	brne	.+44     	; 0x32bc <Spi_SlaveReceivePacket+0x44>
    3290:	7b 01       	movw	r14, r22
    3292:	10 e0       	ldi	r17, 0x00	; 0
    3294:	0c c0       	rjmp	.+24     	; 0x32ae <Spi_SlaveReceivePacket+0x36>
    3296:	e6 01       	movw	r28, r12
    3298:	c8 0f       	add	r28, r24
    329a:	d9 1f       	adc	r29, r25
    329c:	ce 01       	movw	r24, r28
    329e:	0e 94 2b 19 	call	0x3256	; 0x3256 <Spi_SlaveReceiveByte>
    32a2:	81 30       	cpi	r24, 0x01	; 1
    32a4:	69 f4       	brne	.+26     	; 0x32c0 <Spi_SlaveReceivePacket+0x48>
    32a6:	98 81       	ld	r25, Y
    32a8:	99 23       	and	r25, r25
    32aa:	59 f0       	breq	.+22     	; 0x32c2 <Spi_SlaveReceivePacket+0x4a>
    32ac:	1f 5f       	subi	r17, 0xFF	; 255
    32ae:	81 2f       	mov	r24, r17
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	8e 15       	cp	r24, r14
    32b4:	9f 05       	cpc	r25, r15
    32b6:	78 f3       	brcs	.-34     	; 0x3296 <Spi_SlaveReceivePacket+0x1e>
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	03 c0       	rjmp	.+6      	; 0x32c2 <Spi_SlaveReceivePacket+0x4a>
    32bc:	86 e0       	ldi	r24, 0x06	; 6
    32be:	01 c0       	rjmp	.+2      	; 0x32c2 <Spi_SlaveReceivePacket+0x4a>
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	df 91       	pop	r29
    32c4:	cf 91       	pop	r28
    32c6:	1f 91       	pop	r17
    32c8:	ff 90       	pop	r15
    32ca:	ef 90       	pop	r14
    32cc:	df 90       	pop	r13
    32ce:	cf 90       	pop	r12
    32d0:	08 95       	ret

000032d2 <__vector_12>:


    32d2:	1f 92       	push	r1
    32d4:	0f 92       	push	r0
    32d6:	0f b6       	in	r0, 0x3f	; 63
    32d8:	0f 92       	push	r0
    32da:	11 24       	eor	r1, r1
    32dc:	2f 93       	push	r18
    32de:	3f 93       	push	r19
    32e0:	4f 93       	push	r20
    32e2:	5f 93       	push	r21
    32e4:	6f 93       	push	r22
    32e6:	7f 93       	push	r23
    32e8:	8f 93       	push	r24
    32ea:	9f 93       	push	r25
    32ec:	af 93       	push	r26
    32ee:	bf 93       	push	r27
    32f0:	ef 93       	push	r30
    32f2:	ff 93       	push	r31
    32f4:	e0 91 e2 06 	lds	r30, 0x06E2	; 0x8006e2 <SPI_STC_CallBackPtr>
    32f8:	f0 91 e3 06 	lds	r31, 0x06E3	; 0x8006e3 <SPI_STC_CallBackPtr+0x1>
    32fc:	09 95       	icall
    32fe:	ff 91       	pop	r31
    3300:	ef 91       	pop	r30
    3302:	bf 91       	pop	r27
    3304:	af 91       	pop	r26
    3306:	9f 91       	pop	r25
    3308:	8f 91       	pop	r24
    330a:	7f 91       	pop	r23
    330c:	6f 91       	pop	r22
    330e:	5f 91       	pop	r21
    3310:	4f 91       	pop	r20
    3312:	3f 91       	pop	r19
    3314:	2f 91       	pop	r18
    3316:	0f 90       	pop	r0
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	0f 90       	pop	r0
    331c:	1f 90       	pop	r1
    331e:	18 95       	reti

00003320 <stringLength>:
	for (s8_loopIndex=length-2; s8_loopIndex>=0; s8_loopIndex--)
	{
		*pu32_Num += (pu8_String[s8_loopIndex]-'0') *digit;
		digit*=10;
	}
}
    3320:	ac 01       	movw	r20, r24
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	01 c0       	rjmp	.+2      	; 0x3328 <stringLength+0x8>
    3326:	8f 5f       	subi	r24, 0xFF	; 255
    3328:	fa 01       	movw	r30, r20
    332a:	e8 0f       	add	r30, r24
    332c:	f1 1d       	adc	r31, r1
    332e:	20 81       	ld	r18, Z
    3330:	21 11       	cpse	r18, r1
    3332:	f9 cf       	rjmp	.-14     	; 0x3326 <stringLength+0x6>
    3334:	8f 5f       	subi	r24, 0xFF	; 255
    3336:	08 95       	ret

00003338 <stringCompare>:
    3338:	ff 92       	push	r15
    333a:	0f 93       	push	r16
    333c:	1f 93       	push	r17
    333e:	cf 93       	push	r28
    3340:	df 93       	push	r29
    3342:	8c 01       	movw	r16, r24
    3344:	eb 01       	movw	r28, r22
    3346:	0e 94 90 19 	call	0x3320	; 0x3320 <stringLength>
    334a:	f8 2e       	mov	r15, r24
    334c:	ce 01       	movw	r24, r28
    334e:	0e 94 90 19 	call	0x3320	; 0x3320 <stringLength>
    3352:	8f 15       	cp	r24, r15
    3354:	b8 f0       	brcs	.+46     	; 0x3384 <stringCompare+0x4c>
    3356:	f8 16       	cp	r15, r24
    3358:	b8 f0       	brcs	.+46     	; 0x3388 <stringCompare+0x50>
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	09 c0       	rjmp	.+18     	; 0x3370 <stringCompare+0x38>
    335e:	fe 01       	movw	r30, r28
    3360:	e8 0f       	add	r30, r24
    3362:	f9 1f       	adc	r31, r25
    3364:	80 81       	ld	r24, Z
    3366:	82 17       	cp	r24, r18
    3368:	88 f0       	brcs	.+34     	; 0x338c <stringCompare+0x54>
    336a:	28 17       	cp	r18, r24
    336c:	88 f0       	brcs	.+34     	; 0x3390 <stringCompare+0x58>
    336e:	3f 5f       	subi	r19, 0xFF	; 255
    3370:	83 2f       	mov	r24, r19
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	f8 01       	movw	r30, r16
    3376:	e8 0f       	add	r30, r24
    3378:	f9 1f       	adc	r31, r25
    337a:	20 81       	ld	r18, Z
    337c:	21 11       	cpse	r18, r1
    337e:	ef cf       	rjmp	.-34     	; 0x335e <stringCompare+0x26>
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	07 c0       	rjmp	.+14     	; 0x3392 <stringCompare+0x5a>
    3384:	82 e0       	ldi	r24, 0x02	; 2
    3386:	05 c0       	rjmp	.+10     	; 0x3392 <stringCompare+0x5a>
    3388:	83 e0       	ldi	r24, 0x03	; 3
    338a:	03 c0       	rjmp	.+6      	; 0x3392 <stringCompare+0x5a>
    338c:	82 e0       	ldi	r24, 0x02	; 2
    338e:	01 c0       	rjmp	.+2      	; 0x3392 <stringCompare+0x5a>
    3390:	83 e0       	ldi	r24, 0x03	; 3
    3392:	df 91       	pop	r29
    3394:	cf 91       	pop	r28
    3396:	1f 91       	pop	r17
    3398:	0f 91       	pop	r16
    339a:	ff 90       	pop	r15
    339c:	08 95       	ret

0000339e <EmptyString>:
    339e:	ac 01       	movw	r20, r24
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	02 c0       	rjmp	.+4      	; 0x33a8 <EmptyString+0xa>
    33a4:	9f 5f       	subi	r25, 0xFF	; 255
    33a6:	10 82       	st	Z, r1
    33a8:	fa 01       	movw	r30, r20
    33aa:	e9 0f       	add	r30, r25
    33ac:	f1 1d       	adc	r31, r1
    33ae:	20 81       	ld	r18, Z
    33b0:	21 11       	cpse	r18, r1
    33b2:	f8 cf       	rjmp	.-16     	; 0x33a4 <EmptyString+0x6>
    33b4:	08 95       	ret

000033b6 <stringCopy>:
    33b6:	dc 01       	movw	r26, r24
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	05 c0       	rjmp	.+10     	; 0x33c6 <stringCopy+0x10>
    33bc:	fb 01       	movw	r30, r22
    33be:	e2 0f       	add	r30, r18
    33c0:	f3 1f       	adc	r31, r19
    33c2:	40 83       	st	Z, r20
    33c4:	9f 5f       	subi	r25, 0xFF	; 255
    33c6:	29 2f       	mov	r18, r25
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	fd 01       	movw	r30, r26
    33cc:	e2 0f       	add	r30, r18
    33ce:	f3 1f       	adc	r31, r19
    33d0:	40 81       	ld	r20, Z
    33d2:	41 11       	cpse	r20, r1
    33d4:	f3 cf       	rjmp	.-26     	; 0x33bc <stringCopy+0x6>
    33d6:	08 95       	ret

000033d8 <integerToString>:
    33d8:	0f 93       	push	r16
    33da:	1f 93       	push	r17
    33dc:	cf 93       	push	r28
    33de:	df 93       	push	r29
    33e0:	fc 01       	movw	r30, r24
    33e2:	8b 01       	movw	r16, r22
    33e4:	41 30       	cpi	r20, 0x01	; 1
    33e6:	09 f0       	breq	.+2      	; 0x33ea <integerToString+0x12>
    33e8:	40 c0       	rjmp	.+128    	; 0x346a <integerToString+0x92>
    33ea:	c0 e0       	ldi	r28, 0x00	; 0
    33ec:	d0 e0       	ldi	r29, 0x00	; 0
    33ee:	6a e0       	ldi	r22, 0x0A	; 10
    33f0:	70 e0       	ldi	r23, 0x00	; 0
    33f2:	0e 94 6d 20 	call	0x40da	; 0x40da <__divmodhi4>
    33f6:	cb 01       	movw	r24, r22
    33f8:	00 97       	sbiw	r24, 0x00	; 0
    33fa:	11 f0       	breq	.+4      	; 0x3400 <integerToString+0x28>
    33fc:	21 96       	adiw	r28, 0x01	; 1
    33fe:	f7 cf       	rjmp	.-18     	; 0x33ee <integerToString+0x16>
    3400:	de 01       	movw	r26, r28
    3402:	11 96       	adiw	r26, 0x01	; 1
    3404:	a0 0f       	add	r26, r16
    3406:	b1 1f       	adc	r27, r17
    3408:	1c 92       	st	X, r1
    340a:	2d c0       	rjmp	.+90     	; 0x3466 <integerToString+0x8e>
    340c:	a8 01       	movw	r20, r16
    340e:	4c 0f       	add	r20, r28
    3410:	5d 1f       	adc	r21, r29
    3412:	9f 01       	movw	r18, r30
    3414:	ad ec       	ldi	r26, 0xCD	; 205
    3416:	bc ec       	ldi	r27, 0xCC	; 204
    3418:	0e 94 a9 20 	call	0x4152	; 0x4152 <__umulhisi3>
    341c:	96 95       	lsr	r25
    341e:	87 95       	ror	r24
    3420:	96 95       	lsr	r25
    3422:	87 95       	ror	r24
    3424:	96 95       	lsr	r25
    3426:	87 95       	ror	r24
    3428:	9c 01       	movw	r18, r24
    342a:	22 0f       	add	r18, r18
    342c:	33 1f       	adc	r19, r19
    342e:	88 0f       	add	r24, r24
    3430:	99 1f       	adc	r25, r25
    3432:	88 0f       	add	r24, r24
    3434:	99 1f       	adc	r25, r25
    3436:	88 0f       	add	r24, r24
    3438:	99 1f       	adc	r25, r25
    343a:	82 0f       	add	r24, r18
    343c:	93 1f       	adc	r25, r19
    343e:	9f 01       	movw	r18, r30
    3440:	28 1b       	sub	r18, r24
    3442:	39 0b       	sbc	r19, r25
    3444:	c9 01       	movw	r24, r18
    3446:	80 5d       	subi	r24, 0xD0	; 208
    3448:	da 01       	movw	r26, r20
    344a:	8c 93       	st	X, r24
    344c:	9f 01       	movw	r18, r30
    344e:	ad ec       	ldi	r26, 0xCD	; 205
    3450:	bc ec       	ldi	r27, 0xCC	; 204
    3452:	0e 94 a9 20 	call	0x4152	; 0x4152 <__umulhisi3>
    3456:	fc 01       	movw	r30, r24
    3458:	f6 95       	lsr	r31
    345a:	e7 95       	ror	r30
    345c:	f6 95       	lsr	r31
    345e:	e7 95       	ror	r30
    3460:	f6 95       	lsr	r31
    3462:	e7 95       	ror	r30
    3464:	21 97       	sbiw	r28, 0x01	; 1
    3466:	30 97       	sbiw	r30, 0x00	; 0
    3468:	89 f6       	brne	.-94     	; 0x340c <integerToString+0x34>
    346a:	df 91       	pop	r29
    346c:	cf 91       	pop	r28
    346e:	1f 91       	pop	r17
    3470:	0f 91       	pop	r16
    3472:	08 95       	ret

00003474 <stringToFloat>:

float32_t stringToFloat(uint8_t* string)
{
    3474:	8f 92       	push	r8
    3476:	9f 92       	push	r9
    3478:	af 92       	push	r10
    347a:	bf 92       	push	r11
    347c:	cf 92       	push	r12
    347e:	df 92       	push	r13
    3480:	ef 92       	push	r14
    3482:	ff 92       	push	r15
    3484:	0f 93       	push	r16
    3486:	1f 93       	push	r17
    3488:	cf 93       	push	r28
    348a:	df 93       	push	r29
    348c:	ec 01       	movw	r28, r24
	uint8_t strLen = stringLength(string)-1;
    348e:	0e 94 90 19 	call	0x3320	; 0x3320 <stringLength>
    3492:	0f ef       	ldi	r16, 0xFF	; 255
    3494:	08 0f       	add	r16, r24
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
    3496:	c1 2c       	mov	r12, r1
    3498:	d1 2c       	mov	r13, r1
    349a:	76 01       	movw	r14, r12
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    349c:	10 e0       	ldi	r17, 0x00	; 0
    349e:	1e c0       	rjmp	.+60     	; 0x34dc <stringToFloat+0x68>
	{
		if(string[u8_loopIndex] == '.')
    34a0:	fe 01       	movw	r30, r28
    34a2:	e1 0f       	add	r30, r17
    34a4:	f1 1d       	adc	r31, r1
    34a6:	60 81       	ld	r22, Z
    34a8:	6e 32       	cpi	r22, 0x2E	; 46
    34aa:	11 f4       	brne	.+4      	; 0x34b0 <stringToFloat+0x3c>
		{
			u8_loopIndex++;
    34ac:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    34ae:	18 c0       	rjmp	.+48     	; 0x34e0 <stringToFloat+0x6c>
		}
		f32_num += string[u8_loopIndex] - '0';
    34b0:	70 e0       	ldi	r23, 0x00	; 0
    34b2:	60 53       	subi	r22, 0x30	; 48
    34b4:	71 09       	sbc	r23, r1
    34b6:	07 2e       	mov	r0, r23
    34b8:	00 0c       	add	r0, r0
    34ba:	88 0b       	sbc	r24, r24
    34bc:	99 0b       	sbc	r25, r25
    34be:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__floatsisf>
    34c2:	a7 01       	movw	r20, r14
    34c4:	96 01       	movw	r18, r12
    34c6:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <__addsf3>
		f32_num *= 10;
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	40 e2       	ldi	r20, 0x20	; 32
    34d0:	51 e4       	ldi	r21, 0x41	; 65
    34d2:	0e 94 00 20 	call	0x4000	; 0x4000 <__mulsf3>
    34d6:	6b 01       	movw	r12, r22
    34d8:	7c 01       	movw	r14, r24
{
	uint8_t strLen = stringLength(string)-1;
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    34da:	1f 5f       	subi	r17, 0xFF	; 255
    34dc:	10 17       	cp	r17, r16
    34de:	00 f3       	brcs	.-64     	; 0x34a0 <stringToFloat+0x2c>
			break;
		}
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	40 e2       	ldi	r20, 0x20	; 32
    34e6:	51 e4       	ldi	r21, 0x41	; 65
    34e8:	c7 01       	movw	r24, r14
    34ea:	b6 01       	movw	r22, r12
    34ec:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__divsf3>
    34f0:	4b 01       	movw	r8, r22
    34f2:	5c 01       	movw	r10, r24
	f32_digit = 1;
    34f4:	0f 2e       	mov	r0, r31
    34f6:	c1 2c       	mov	r12, r1
    34f8:	d1 2c       	mov	r13, r1
    34fa:	f0 e8       	ldi	r31, 0x80	; 128
    34fc:	ef 2e       	mov	r14, r31
    34fe:	ff e3       	ldi	r31, 0x3F	; 63
    3500:	ff 2e       	mov	r15, r31
    3502:	f0 2d       	mov	r31, r0
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    3504:	24 c0       	rjmp	.+72     	; 0x354e <stringToFloat+0xda>
	{
		f32_digit/=10;
    3506:	20 e0       	ldi	r18, 0x00	; 0
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	40 e2       	ldi	r20, 0x20	; 32
    350c:	51 e4       	ldi	r21, 0x41	; 65
    350e:	c7 01       	movw	r24, r14
    3510:	b6 01       	movw	r22, r12
    3512:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__divsf3>
    3516:	6b 01       	movw	r12, r22
    3518:	7c 01       	movw	r14, r24
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
    351a:	fe 01       	movw	r30, r28
    351c:	e1 0f       	add	r30, r17
    351e:	f1 1d       	adc	r31, r1
    3520:	60 81       	ld	r22, Z
    3522:	70 e0       	ldi	r23, 0x00	; 0
    3524:	60 53       	subi	r22, 0x30	; 48
    3526:	71 09       	sbc	r23, r1
    3528:	07 2e       	mov	r0, r23
    352a:	00 0c       	add	r0, r0
    352c:	88 0b       	sbc	r24, r24
    352e:	99 0b       	sbc	r25, r25
    3530:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__floatsisf>
    3534:	a7 01       	movw	r20, r14
    3536:	96 01       	movw	r18, r12
    3538:	0e 94 00 20 	call	0x4000	; 0x4000 <__mulsf3>
    353c:	9b 01       	movw	r18, r22
    353e:	ac 01       	movw	r20, r24
    3540:	c5 01       	movw	r24, r10
    3542:	b4 01       	movw	r22, r8
    3544:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <__addsf3>
    3548:	4b 01       	movw	r8, r22
    354a:	5c 01       	movw	r10, r24
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
	f32_digit = 1;
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    354c:	1f 5f       	subi	r17, 0xFF	; 255
    354e:	10 17       	cp	r17, r16
    3550:	d0 f2       	brcs	.-76     	; 0x3506 <stringToFloat+0x92>
	{
		f32_digit/=10;
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
	}
	return f32_num;
}
    3552:	c5 01       	movw	r24, r10
    3554:	b4 01       	movw	r22, r8
    3556:	df 91       	pop	r29
    3558:	cf 91       	pop	r28
    355a:	1f 91       	pop	r17
    355c:	0f 91       	pop	r16
    355e:	ff 90       	pop	r15
    3560:	ef 90       	pop	r14
    3562:	df 90       	pop	r13
    3564:	cf 90       	pop	r12
    3566:	bf 90       	pop	r11
    3568:	af 90       	pop	r10
    356a:	9f 90       	pop	r9
    356c:	8f 90       	pop	r8
    356e:	08 95       	ret

00003570 <floatToString>:

void floatToString(float32_t f32_num, uint8_t* string)
{
    3570:	8f 92       	push	r8
    3572:	9f 92       	push	r9
    3574:	af 92       	push	r10
    3576:	bf 92       	push	r11
    3578:	cf 92       	push	r12
    357a:	df 92       	push	r13
    357c:	ef 92       	push	r14
    357e:	ff 92       	push	r15
    3580:	0f 93       	push	r16
    3582:	1f 93       	push	r17
    3584:	cf 93       	push	r28
    3586:	df 93       	push	r29
    3588:	4b 01       	movw	r8, r22
    358a:	5c 01       	movw	r10, r24
    358c:	8a 01       	movw	r16, r20
	uint32_t u32_num = (uint32_t)f32_num;
    358e:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <__fixunssfsi>
    3592:	c6 2e       	mov	r12, r22
    3594:	d7 2e       	mov	r13, r23
    3596:	e8 2e       	mov	r14, r24
    3598:	f9 2e       	mov	r15, r25
    359a:	26 2f       	mov	r18, r22
    359c:	37 2f       	mov	r19, r23
    359e:	48 2f       	mov	r20, r24
    35a0:	59 2f       	mov	r21, r25
	uint8_t u8_digitCount=0;
    35a2:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    35a4:	09 c0       	rjmp	.+18     	; 0x35b8 <floatToString+0x48>
	{
		u32_num/=10;
    35a6:	ca 01       	movw	r24, r20
    35a8:	b9 01       	movw	r22, r18
    35aa:	2a e0       	ldi	r18, 0x0A	; 10
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	40 e0       	ldi	r20, 0x00	; 0
    35b0:	50 e0       	ldi	r21, 0x00	; 0
    35b2:	0e 94 81 20 	call	0x4102	; 0x4102 <__udivmodsi4>
		u8_digitCount++;
    35b6:	df 5f       	subi	r29, 0xFF	; 255
{
	uint32_t u32_num = (uint32_t)f32_num;
	uint8_t u8_digitCount=0;
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    35b8:	21 15       	cp	r18, r1
    35ba:	31 05       	cpc	r19, r1
    35bc:	41 05       	cpc	r20, r1
    35be:	51 05       	cpc	r21, r1
    35c0:	91 f7       	brne	.-28     	; 0x35a6 <floatToString+0x36>
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
    35c2:	cf ef       	ldi	r28, 0xFF	; 255
    35c4:	cd 0f       	add	r28, r29
	while(u32_num !=0)
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
    35c6:	6c 2d       	mov	r22, r12
    35c8:	7d 2d       	mov	r23, r13
    35ca:	8e 2d       	mov	r24, r14
    35cc:	9f 2d       	mov	r25, r15
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    35ce:	14 c0       	rjmp	.+40     	; 0x35f8 <floatToString+0x88>
	{
		temp = (u32_num % 10)+ '0';
    35d0:	2a e0       	ldi	r18, 0x0A	; 10
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	40 e0       	ldi	r20, 0x00	; 0
    35d6:	50 e0       	ldi	r21, 0x00	; 0
    35d8:	0e 94 81 20 	call	0x4102	; 0x4102 <__udivmodsi4>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	c0 96       	adiw	r24, 0x30	; 48
    35e2:	a1 1d       	adc	r26, r1
    35e4:	b1 1d       	adc	r27, r1
		string[u8_digitCount--] = temp;
    35e6:	f8 01       	movw	r30, r16
    35e8:	ec 0f       	add	r30, r28
    35ea:	f1 1d       	adc	r31, r1
    35ec:	80 83       	st	Z, r24
		u32_num /= 10;
    35ee:	62 2f       	mov	r22, r18
    35f0:	73 2f       	mov	r23, r19
    35f2:	84 2f       	mov	r24, r20
    35f4:	95 2f       	mov	r25, r21
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
	{
		temp = (u32_num % 10)+ '0';
		string[u8_digitCount--] = temp;
    35f6:	c1 50       	subi	r28, 0x01	; 1
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    35f8:	61 15       	cp	r22, r1
    35fa:	71 05       	cpc	r23, r1
    35fc:	81 05       	cpc	r24, r1
    35fe:	91 05       	cpc	r25, r1
    3600:	39 f7       	brne	.-50     	; 0x35d0 <floatToString+0x60>
		string[u8_digitCount--] = temp;
		u32_num /= 10;

	}
	u32_num = (uint32_t)f32_num;
	f32_num -= u32_num;
    3602:	6c 2d       	mov	r22, r12
    3604:	7d 2d       	mov	r23, r13
    3606:	8e 2d       	mov	r24, r14
    3608:	9f 2d       	mov	r25, r15
    360a:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <__floatunsisf>
    360e:	9b 01       	movw	r18, r22
    3610:	ac 01       	movw	r20, r24
    3612:	c5 01       	movw	r24, r10
    3614:	b4 01       	movw	r22, r8
    3616:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__subsf3>
	u32_num = f32_num*10;
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	40 e2       	ldi	r20, 0x20	; 32
    3620:	51 e4       	ldi	r21, 0x41	; 65
    3622:	0e 94 00 20 	call	0x4000	; 0x4000 <__mulsf3>
    3626:	6b 01       	movw	r12, r22
    3628:	7c 01       	movw	r14, r24
    362a:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <__fixunssfsi>
	string[u8_indexDot++] = '.';
    362e:	21 e0       	ldi	r18, 0x01	; 1
    3630:	2d 0f       	add	r18, r29
    3632:	f8 01       	movw	r30, r16
    3634:	ed 0f       	add	r30, r29
    3636:	f1 1d       	adc	r31, r1
    3638:	3e e2       	ldi	r19, 0x2E	; 46
    363a:	30 83       	st	Z, r19
	string[u8_indexDot++] = u32_num + '0';
    363c:	de 5f       	subi	r29, 0xFE	; 254
    363e:	f8 01       	movw	r30, r16
    3640:	e2 0f       	add	r30, r18
    3642:	f1 1d       	adc	r31, r1
    3644:	20 e3       	ldi	r18, 0x30	; 48
    3646:	26 0f       	add	r18, r22
    3648:	20 83       	st	Z, r18
	f32_num *=10;
	f32_num -= u32_num;
    364a:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <__floatunsisf>
    364e:	9b 01       	movw	r18, r22
    3650:	ac 01       	movw	r20, r24
    3652:	c7 01       	movw	r24, r14
    3654:	b6 01       	movw	r22, r12
    3656:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__subsf3>
	u32_num = f32_num*10;
    365a:	20 e0       	ldi	r18, 0x00	; 0
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	40 e2       	ldi	r20, 0x20	; 32
    3660:	51 e4       	ldi	r21, 0x41	; 65
    3662:	0e 94 00 20 	call	0x4000	; 0x4000 <__mulsf3>
    3666:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <__fixunssfsi>
	string[u8_indexDot] = u32_num + '0';
    366a:	f8 01       	movw	r30, r16
    366c:	ed 0f       	add	r30, r29
    366e:	f1 1d       	adc	r31, r1
    3670:	60 5d       	subi	r22, 0xD0	; 208
    3672:	60 83       	st	Z, r22
    3674:	df 91       	pop	r29
    3676:	cf 91       	pop	r28
    3678:	1f 91       	pop	r17
    367a:	0f 91       	pop	r16
    367c:	ff 90       	pop	r15
    367e:	ef 90       	pop	r14
    3680:	df 90       	pop	r13
    3682:	cf 90       	pop	r12
    3684:	bf 90       	pop	r11
    3686:	af 90       	pop	r10
    3688:	9f 90       	pop	r9
    368a:	8f 90       	pop	r8
    368c:	08 95       	ret

0000368e <waveFunction>:
* Parameters (out): None
* Return value: None
* Description: Function to be called inside the timer's ISR.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
void waveFunction(void)
{
    368e:	0f 93       	push	r16
    3690:	1f 93       	push	r17
	/* Toggle the Pin of the PWM Channel */
	if(Dio_togglePin(SWPwm_Channels[gu8_currentPwmChannel].u8_DioChannelID) != DIO_STATUS_ERROR_OK)
    3692:	e0 91 e5 06 	lds	r30, 0x06E5	; 0x8006e5 <gu8_currentPwmChannel>
    3696:	f0 e0       	ldi	r31, 0x00	; 0
    3698:	ee 0f       	add	r30, r30
    369a:	ff 1f       	adc	r31, r31
    369c:	e2 58       	subi	r30, 0x82	; 130
    369e:	fa 4f       	sbci	r31, 0xFA	; 250
    36a0:	80 81       	ld	r24, Z
    36a2:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <Dio_togglePin>
    36a6:	81 30       	cpi	r24, 0x01	; 1
    36a8:	09 f0       	breq	.+2      	; 0x36ac <waveFunction+0x1e>
    36aa:	76 c0       	rjmp	.+236    	; 0x3798 <waveFunction+0x10a>
		return;
	/* Check if the PWM Channel is still in Running State */
	if (gstr_ChannelsData[gu8_currentPwmChannel].enuChannelState == SWPWM_RUNNING)
    36ac:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <gu8_currentPwmChannel>
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	9c 01       	movw	r18, r24
    36b4:	22 0f       	add	r18, r18
    36b6:	33 1f       	adc	r19, r19
    36b8:	f9 01       	movw	r30, r18
    36ba:	ee 0f       	add	r30, r30
    36bc:	ff 1f       	adc	r31, r31
    36be:	ee 0f       	add	r30, r30
    36c0:	ff 1f       	adc	r31, r31
    36c2:	ee 0f       	add	r30, r30
    36c4:	ff 1f       	adc	r31, r31
    36c6:	e2 1b       	sub	r30, r18
    36c8:	f3 0b       	sbc	r31, r19
    36ca:	ea 51       	subi	r30, 0x1A	; 26
    36cc:	f9 4f       	sbci	r31, 0xF9	; 249
    36ce:	25 85       	ldd	r18, Z+13	; 0x0d
    36d0:	22 30       	cpi	r18, 0x02	; 2
    36d2:	09 f0       	breq	.+2      	; 0x36d6 <waveFunction+0x48>
    36d4:	61 c0       	rjmp	.+194    	; 0x3798 <waveFunction+0x10a>
	{
		/* Start the Timer again with the new ticks assigned */
		if(GptStart_aSync(SWPwm_Channels[gu8_currentPwmChannel].u8_GptChannelID,\
    36d6:	88 0f       	add	r24, r24
    36d8:	99 1f       	adc	r25, r25
    36da:	fc 01       	movw	r30, r24
    36dc:	ee 0f       	add	r30, r30
    36de:	ff 1f       	adc	r31, r31
    36e0:	ee 0f       	add	r30, r30
    36e2:	ff 1f       	adc	r31, r31
    36e4:	ee 0f       	add	r30, r30
    36e6:	ff 1f       	adc	r31, r31
    36e8:	e8 1b       	sub	r30, r24
    36ea:	f9 0b       	sbc	r31, r25
    36ec:	ea 51       	subi	r30, 0x1A	; 26
    36ee:	f9 4f       	sbci	r31, 0xF9	; 249
    36f0:	41 85       	ldd	r20, Z+9	; 0x09
    36f2:	52 85       	ldd	r21, Z+10	; 0x0a
    36f4:	63 85       	ldd	r22, Z+11	; 0x0b
    36f6:	74 85       	ldd	r23, Z+12	; 0x0c
    36f8:	fc 01       	movw	r30, r24
    36fa:	e2 58       	subi	r30, 0x82	; 130
    36fc:	fa 4f       	sbci	r31, 0xFA	; 250
    36fe:	27 e4       	ldi	r18, 0x47	; 71
    3700:	3b e1       	ldi	r19, 0x1B	; 27
    3702:	81 81       	ldd	r24, Z+1	; 0x01
    3704:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <GptStart_aSync>
    3708:	81 30       	cpi	r24, 0x01	; 1
    370a:	09 f0       	breq	.+2      	; 0x370e <waveFunction+0x80>
    370c:	45 c0       	rjmp	.+138    	; 0x3798 <waveFunction+0x10a>
		                  gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks,\
						   waveFunction) != GPT_STATUS_ERROR_OK)	return;
		
		/* Replace the next ticks to be counted between ONTicks and OFFTicks*/
		if(gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks == gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks)
    370e:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <gu8_currentPwmChannel>
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	9c 01       	movw	r18, r24
    3716:	22 0f       	add	r18, r18
    3718:	33 1f       	adc	r19, r19
    371a:	f9 01       	movw	r30, r18
    371c:	ee 0f       	add	r30, r30
    371e:	ff 1f       	adc	r31, r31
    3720:	ee 0f       	add	r30, r30
    3722:	ff 1f       	adc	r31, r31
    3724:	ee 0f       	add	r30, r30
    3726:	ff 1f       	adc	r31, r31
    3728:	e2 1b       	sub	r30, r18
    372a:	f3 0b       	sbc	r31, r19
    372c:	ea 51       	subi	r30, 0x1A	; 26
    372e:	f9 4f       	sbci	r31, 0xF9	; 249
    3730:	01 85       	ldd	r16, Z+9	; 0x09
    3732:	12 85       	ldd	r17, Z+10	; 0x0a
    3734:	23 85       	ldd	r18, Z+11	; 0x0b
    3736:	34 85       	ldd	r19, Z+12	; 0x0c
    3738:	45 81       	ldd	r20, Z+5	; 0x05
    373a:	56 81       	ldd	r21, Z+6	; 0x06
    373c:	67 81       	ldd	r22, Z+7	; 0x07
    373e:	70 85       	ldd	r23, Z+8	; 0x08
    3740:	04 17       	cp	r16, r20
    3742:	15 07       	cpc	r17, r21
    3744:	26 07       	cpc	r18, r22
    3746:	37 07       	cpc	r19, r23
    3748:	b1 f4       	brne	.+44     	; 0x3776 <waveFunction+0xe8>
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_ONTicks;
    374a:	88 0f       	add	r24, r24
    374c:	99 1f       	adc	r25, r25
    374e:	fc 01       	movw	r30, r24
    3750:	ee 0f       	add	r30, r30
    3752:	ff 1f       	adc	r31, r31
    3754:	ee 0f       	add	r30, r30
    3756:	ff 1f       	adc	r31, r31
    3758:	ee 0f       	add	r30, r30
    375a:	ff 1f       	adc	r31, r31
    375c:	e8 1b       	sub	r30, r24
    375e:	f9 0b       	sbc	r31, r25
    3760:	ea 51       	subi	r30, 0x1A	; 26
    3762:	f9 4f       	sbci	r31, 0xF9	; 249
    3764:	81 81       	ldd	r24, Z+1	; 0x01
    3766:	92 81       	ldd	r25, Z+2	; 0x02
    3768:	a3 81       	ldd	r26, Z+3	; 0x03
    376a:	b4 81       	ldd	r27, Z+4	; 0x04
    376c:	81 87       	std	Z+9, r24	; 0x09
    376e:	92 87       	std	Z+10, r25	; 0x0a
    3770:	a3 87       	std	Z+11, r26	; 0x0b
    3772:	b4 87       	std	Z+12, r27	; 0x0c
    3774:	11 c0       	rjmp	.+34     	; 0x3798 <waveFunction+0x10a>
		else
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks;
    3776:	88 0f       	add	r24, r24
    3778:	99 1f       	adc	r25, r25
    377a:	fc 01       	movw	r30, r24
    377c:	ee 0f       	add	r30, r30
    377e:	ff 1f       	adc	r31, r31
    3780:	ee 0f       	add	r30, r30
    3782:	ff 1f       	adc	r31, r31
    3784:	ee 0f       	add	r30, r30
    3786:	ff 1f       	adc	r31, r31
    3788:	e8 1b       	sub	r30, r24
    378a:	f9 0b       	sbc	r31, r25
    378c:	ea 51       	subi	r30, 0x1A	; 26
    378e:	f9 4f       	sbci	r31, 0xF9	; 249
    3790:	41 87       	std	Z+9, r20	; 0x09
    3792:	52 87       	std	Z+10, r21	; 0x0a
    3794:	63 87       	std	Z+11, r22	; 0x0b
    3796:	74 87       	std	Z+12, r23	; 0x0c
	}
}
    3798:	1f 91       	pop	r17
    379a:	0f 91       	pop	r16
    379c:	08 95       	ret

0000379e <SWPwm_Init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
    379e:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <genu_SWPwmModStatus>
    37a2:	81 30       	cpi	r24, 0x01	; 1
    37a4:	91 f0       	breq	.+36     	; 0x37ca <SWPwm_Init+0x2c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
    37a6:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <GptInit>
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
    37aa:	81 30       	cpi	r24, 0x01	; 1
    37ac:	11 f0       	breq	.+4      	; 0x37b2 <SWPwm_Init+0x14>
    37ae:	83 30       	cpi	r24, 0x03	; 3
    37b0:	71 f4       	brne	.+28     	; 0x37ce <SWPwm_Init+0x30>
		return SWPWM_STATUS_ERROR_NOK;
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    37b2:	85 e8       	ldi	r24, 0x85	; 133
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	0e 94 62 12 	call	0x24c4	; 0x24c4 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    37ba:	81 30       	cpi	r24, 0x01	; 1
    37bc:	11 f0       	breq	.+4      	; 0x37c2 <SWPwm_Init+0x24>
    37be:	87 30       	cpi	r24, 0x07	; 7
    37c0:	41 f4       	brne	.+16     	; 0x37d2 <SWPwm_Init+0x34>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <genu_SWPwmModStatus>
	return SWPWM_STATUS_ERROR_OK;
    37c8:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_ERROR_NOK;
    37ca:	80 e0       	ldi	r24, 0x00	; 0
    37cc:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
		return SWPWM_STATUS_ERROR_NOK;
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	08 95       	ret
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return SWPWM_STATUS_ERROR_NOK;
    37d2:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
	return SWPWM_STATUS_ERROR_OK;
}
    37d4:	08 95       	ret

000037d6 <SWPwm_Start>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Start(u8SWPwm_Channel_t u8_ChannelID, uint32_t u32_Freq, uint8_t u8_DutyCycle)
{
    37d6:	4f 92       	push	r4
    37d8:	5f 92       	push	r5
    37da:	6f 92       	push	r6
    37dc:	7f 92       	push	r7
    37de:	8f 92       	push	r8
    37e0:	9f 92       	push	r9
    37e2:	af 92       	push	r10
    37e4:	bf 92       	push	r11
    37e6:	cf 92       	push	r12
    37e8:	df 92       	push	r13
    37ea:	ef 92       	push	r14
    37ec:	ff 92       	push	r15
    37ee:	0f 93       	push	r16
    37f0:	1f 93       	push	r17
    37f2:	cf 93       	push	r28
    37f4:	df 93       	push	r29
    37f6:	00 d0       	rcall	.+0      	; 0x37f8 <SWPwm_Start+0x22>
    37f8:	00 d0       	rcall	.+0      	; 0x37fa <SWPwm_Start+0x24>
    37fa:	00 d0       	rcall	.+0      	; 0x37fc <SWPwm_Start+0x26>
    37fc:	cd b7       	in	r28, 0x3d	; 61
    37fe:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    3800:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <genu_SWPwmModStatus>
    3804:	91 30       	cpi	r25, 0x01	; 1
    3806:	09 f0       	breq	.+2      	; 0x380a <SWPwm_Start+0x34>
    3808:	f2 c0       	rjmp	.+484    	; 0x39ee <SWPwm_Start+0x218>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    380a:	81 11       	cpse	r24, r1
    380c:	f2 c0       	rjmp	.+484    	; 0x39f2 <SWPwm_Start+0x21c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
    380e:	25 36       	cpi	r18, 0x65	; 101
    3810:	08 f0       	brcs	.+2      	; 0x3814 <SWPwm_Start+0x3e>
    3812:	f1 c0       	rjmp	.+482    	; 0x39f6 <SWPwm_Start+0x220>
	{
		return SWPWM_STATUS_DC_OUTRANGE;
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
    3814:	e8 2f       	mov	r30, r24
    3816:	f0 e0       	ldi	r31, 0x00	; 0
    3818:	fe 83       	std	Y+6, r31	; 0x06
    381a:	ed 83       	std	Y+5, r30	; 0x05
    381c:	df 01       	movw	r26, r30
    381e:	aa 0f       	add	r26, r26
    3820:	bb 1f       	adc	r27, r27
    3822:	fd 01       	movw	r30, r26
    3824:	ee 0f       	add	r30, r30
    3826:	ff 1f       	adc	r31, r31
    3828:	ee 0f       	add	r30, r30
    382a:	ff 1f       	adc	r31, r31
    382c:	ee 0f       	add	r30, r30
    382e:	ff 1f       	adc	r31, r31
    3830:	ea 1b       	sub	r30, r26
    3832:	fb 0b       	sbc	r31, r27
    3834:	ea 51       	subi	r30, 0x1A	; 26
    3836:	f9 4f       	sbci	r31, 0xF9	; 249
    3838:	95 85       	ldd	r25, Z+13	; 0x0d
    383a:	92 30       	cpi	r25, 0x02	; 2
    383c:	09 f4       	brne	.+2      	; 0x3840 <SWPwm_Start+0x6a>
    383e:	dd c0       	rjmp	.+442    	; 0x39fa <SWPwm_Start+0x224>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
    3840:	22 23       	and	r18, r18
    3842:	09 f4       	brne	.+2      	; 0x3846 <SWPwm_Start+0x70>
    3844:	dc c0       	rjmp	.+440    	; 0x39fe <SWPwm_Start+0x228>
    3846:	12 2f       	mov	r17, r18
    3848:	c8 2e       	mov	r12, r24
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
	}else if(u8_DutyCycle == 100)
    384a:	24 36       	cpi	r18, 0x64	; 100
    384c:	61 f4       	brne	.+24     	; 0x3866 <SWPwm_Start+0x90>
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    384e:	fd 01       	movw	r30, r26
    3850:	e2 58       	subi	r30, 0x82	; 130
    3852:	fa 4f       	sbci	r31, 0xFA	; 250
    3854:	61 e0       	ldi	r22, 0x01	; 1
    3856:	80 81       	ld	r24, Z
    3858:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    385c:	81 30       	cpi	r24, 0x01	; 1
    385e:	09 f4       	brne	.+2      	; 0x3862 <SWPwm_Start+0x8c>
    3860:	d0 c0       	rjmp	.+416    	; 0x3a02 <SWPwm_Start+0x22c>
			return SWPWM_STATUS_ERROR_NOK;
    3862:	80 e0       	ldi	r24, 0x00	; 0
    3864:	d5 c0       	rjmp	.+426    	; 0x3a10 <SWPwm_Start+0x23a>
		return SWPWM_STATUS_ERROR_OK;
	}
	
	float32_t f32_wavePeriodTime = (float32_t)1 / u32_Freq;					/* The Periodic Time for the Generated Pulse in Seconds */
    3866:	cb 01       	movw	r24, r22
    3868:	ba 01       	movw	r22, r20
    386a:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <__floatunsisf>
    386e:	9b 01       	movw	r18, r22
    3870:	ac 01       	movw	r20, r24
    3872:	60 e0       	ldi	r22, 0x00	; 0
    3874:	70 e0       	ldi	r23, 0x00	; 0
    3876:	80 e8       	ldi	r24, 0x80	; 128
    3878:	9f e3       	ldi	r25, 0x3F	; 63
    387a:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__divsf3>
    387e:	4b 01       	movw	r8, r22
    3880:	5c 01       	movw	r10, r24
	float32_t f32_waveONTime = (f32_wavePeriodTime*u8_DutyCycle) / 100;		/* The HIGH Level Time in Seconds */
    3882:	61 2f       	mov	r22, r17
    3884:	70 e0       	ldi	r23, 0x00	; 0
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__floatsisf>
    388e:	a5 01       	movw	r20, r10
    3890:	94 01       	movw	r18, r8
    3892:	0e 94 00 20 	call	0x4000	; 0x4000 <__mulsf3>
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	48 ec       	ldi	r20, 0xC8	; 200
    389c:	52 e4       	ldi	r21, 0x42	; 66
    389e:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__divsf3>
    38a2:	2b 01       	movw	r4, r22
    38a4:	3c 01       	movw	r6, r24
	float32_t f32_waveOFFTime = f32_wavePeriodTime - f32_waveONTime;		/* The LOW Level Time in Seconds */
    38a6:	9b 01       	movw	r18, r22
    38a8:	ac 01       	movw	r20, r24
    38aa:	c5 01       	movw	r24, r10
    38ac:	b4 01       	movw	r22, r8
    38ae:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__subsf3>
    38b2:	4b 01       	movw	r8, r22
    38b4:	5c 01       	movw	r10, r24
	float32_t f32_systemPeriodTime = 0.0;
	uint16_t  u16_prescalerValue = 0;
	
	/* Get the Prescaler Value of the used Timer Channel */
	switch(Timers_Configurations[SWPwm_Channels[u8_ChannelID].u8_GptChannelID].enuClock_Src)
    38b6:	ed 81       	ldd	r30, Y+5	; 0x05
    38b8:	fe 81       	ldd	r31, Y+6	; 0x06
    38ba:	ee 0f       	add	r30, r30
    38bc:	ff 1f       	adc	r31, r31
    38be:	e2 58       	subi	r30, 0x82	; 130
    38c0:	fa 4f       	sbci	r31, 0xFA	; 250
    38c2:	d1 80       	ldd	r13, Z+1	; 0x01
    38c4:	8d 2d       	mov	r24, r13
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	fc 01       	movw	r30, r24
    38ca:	ee 0f       	add	r30, r30
    38cc:	ff 1f       	adc	r31, r31
    38ce:	8e 0f       	add	r24, r30
    38d0:	9f 1f       	adc	r25, r31
    38d2:	fc 01       	movw	r30, r24
    38d4:	e5 58       	subi	r30, 0x85	; 133
    38d6:	fa 4f       	sbci	r31, 0xFA	; 250
    38d8:	e1 81       	ldd	r30, Z+1	; 0x01
    38da:	8e 2f       	mov	r24, r30
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	fc 01       	movw	r30, r24
    38e0:	31 97       	sbiw	r30, 0x01	; 1
    38e2:	e7 30       	cpi	r30, 0x07	; 7
    38e4:	f1 05       	cpc	r31, r1
    38e6:	08 f0       	brcs	.+2      	; 0x38ea <SWPwm_Start+0x114>
    38e8:	8e c0       	rjmp	.+284    	; 0x3a06 <SWPwm_Start+0x230>
    38ea:	e6 5d       	subi	r30, 0xD6	; 214
    38ec:	ff 4f       	sbci	r31, 0xFF	; 255
    38ee:	0c 94 a3 20 	jmp	0x4146	; 0x4146 <__tablejump2__>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
    38f2:	61 e0       	ldi	r22, 0x01	; 1
    38f4:	70 e0       	ldi	r23, 0x00	; 0
    38f6:	0b c0       	rjmp	.+22     	; 0x390e <SWPwm_Start+0x138>
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
			break;
		case GPT_CLK_SRC_PRSCLR_64:
			u16_prescalerValue = 64;
    38f8:	60 e4       	ldi	r22, 0x40	; 64
    38fa:	70 e0       	ldi	r23, 0x00	; 0
			break;
    38fc:	08 c0       	rjmp	.+16     	; 0x390e <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_256:
			u16_prescalerValue = 256;
    38fe:	60 e0       	ldi	r22, 0x00	; 0
    3900:	71 e0       	ldi	r23, 0x01	; 1
			break;
    3902:	05 c0       	rjmp	.+10     	; 0x390e <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_1024:
			u16_prescalerValue = 1024;
    3904:	60 e0       	ldi	r22, 0x00	; 0
    3906:	74 e0       	ldi	r23, 0x04	; 4
			break;
    3908:	02 c0       	rjmp	.+4      	; 0x390e <SWPwm_Start+0x138>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
    390a:	68 e0       	ldi	r22, 0x08	; 8
    390c:	70 e0       	ldi	r23, 0x00	; 0
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
	}
	
	f32_systemPeriodTime = (float32_t)u16_prescalerValue/SYS_CLOCK_FREQUENCY;				/* The Controllers Periodic Time in seconds based on the System Clock Frequency */
    390e:	80 e0       	ldi	r24, 0x00	; 0
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <__floatunsisf>
    3916:	20 e0       	ldi	r18, 0x00	; 0
    3918:	34 e2       	ldi	r19, 0x24	; 36
    391a:	44 e7       	ldi	r20, 0x74	; 116
    391c:	59 e4       	ldi	r21, 0x49	; 73
    391e:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__divsf3>
    3922:	69 83       	std	Y+1, r22	; 0x01
    3924:	7a 83       	std	Y+2, r23	; 0x02
    3926:	8b 83       	std	Y+3, r24	; 0x03
    3928:	9c 83       	std	Y+4, r25	; 0x04
	gu8_currentPwmChannel = u8_ChannelID;
    392a:	c0 92 e5 06 	sts	0x06E5, r12	; 0x8006e5 <gu8_currentPwmChannel>
	gstr_ChannelsData[u8_ChannelID].u32_ONTicks = f32_waveONTime/f32_systemPeriodTime;		/* The HIGH Level Time in Ticks */
    392e:	9b 01       	movw	r18, r22
    3930:	ac 01       	movw	r20, r24
    3932:	c3 01       	movw	r24, r6
    3934:	b2 01       	movw	r22, r4
    3936:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__divsf3>
    393a:	ed 80       	ldd	r14, Y+5	; 0x05
    393c:	fe 80       	ldd	r15, Y+6	; 0x06
    393e:	ee 0c       	add	r14, r14
    3940:	ff 1c       	adc	r15, r15
    3942:	87 01       	movw	r16, r14
    3944:	00 0f       	add	r16, r16
    3946:	11 1f       	adc	r17, r17
    3948:	00 0f       	add	r16, r16
    394a:	11 1f       	adc	r17, r17
    394c:	00 0f       	add	r16, r16
    394e:	11 1f       	adc	r17, r17
    3950:	0e 19       	sub	r16, r14
    3952:	1f 09       	sbc	r17, r15
    3954:	0a 51       	subi	r16, 0x1A	; 26
    3956:	19 4f       	sbci	r17, 0xF9	; 249
    3958:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <__fixunssfsi>
    395c:	f8 01       	movw	r30, r16
    395e:	61 83       	std	Z+1, r22	; 0x01
    3960:	72 83       	std	Z+2, r23	; 0x02
    3962:	83 83       	std	Z+3, r24	; 0x03
    3964:	94 83       	std	Z+4, r25	; 0x04
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
    3966:	29 81       	ldd	r18, Y+1	; 0x01
    3968:	3a 81       	ldd	r19, Y+2	; 0x02
    396a:	4b 81       	ldd	r20, Y+3	; 0x03
    396c:	5c 81       	ldd	r21, Y+4	; 0x04
    396e:	c5 01       	movw	r24, r10
    3970:	b4 01       	movw	r22, r8
    3972:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__divsf3>
    3976:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <__fixunssfsi>
    397a:	f8 01       	movw	r30, r16
    397c:	65 83       	std	Z+5, r22	; 0x05
    397e:	76 83       	std	Z+6, r23	; 0x06
    3980:	87 83       	std	Z+7, r24	; 0x07
    3982:	90 87       	std	Z+8, r25	; 0x08
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;
    3984:	c0 82       	st	Z, r12

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    3986:	f7 01       	movw	r30, r14
    3988:	e2 58       	subi	r30, 0x82	; 130
    398a:	fa 4f       	sbci	r31, 0xFA	; 250
    398c:	61 e0       	ldi	r22, 0x01	; 1
    398e:	80 81       	ld	r24, Z
    3990:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    3994:	81 30       	cpi	r24, 0x01	; 1
    3996:	c9 f5       	brne	.+114    	; 0x3a0a <SWPwm_Start+0x234>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
    3998:	8e e0       	ldi	r24, 0x0E	; 14
    399a:	2d 81       	ldd	r18, Y+5	; 0x05
    399c:	3e 81       	ldd	r19, Y+6	; 0x06
    399e:	82 9f       	mul	r24, r18
    39a0:	f0 01       	movw	r30, r0
    39a2:	83 9f       	mul	r24, r19
    39a4:	f0 0d       	add	r31, r0
    39a6:	11 24       	eor	r1, r1
    39a8:	ea 51       	subi	r30, 0x1A	; 26
    39aa:	f9 4f       	sbci	r31, 0xF9	; 249
    39ac:	41 81       	ldd	r20, Z+1	; 0x01
    39ae:	52 81       	ldd	r21, Z+2	; 0x02
    39b0:	63 81       	ldd	r22, Z+3	; 0x03
    39b2:	74 81       	ldd	r23, Z+4	; 0x04
    39b4:	27 e4       	ldi	r18, 0x47	; 71
    39b6:	3b e1       	ldi	r19, 0x1B	; 27
    39b8:	8d 2d       	mov	r24, r13
    39ba:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <GptStart_aSync>
    39be:	81 30       	cpi	r24, 0x01	; 1
    39c0:	31 f5       	brne	.+76     	; 0x3a0e <SWPwm_Start+0x238>
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
	
	/* Assign the Next Ticks to be counted by the Asynchronous Timer */
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
    39c2:	8e e0       	ldi	r24, 0x0E	; 14
    39c4:	2d 81       	ldd	r18, Y+5	; 0x05
    39c6:	3e 81       	ldd	r19, Y+6	; 0x06
    39c8:	82 9f       	mul	r24, r18
    39ca:	f0 01       	movw	r30, r0
    39cc:	83 9f       	mul	r24, r19
    39ce:	f0 0d       	add	r31, r0
    39d0:	11 24       	eor	r1, r1
    39d2:	ea 51       	subi	r30, 0x1A	; 26
    39d4:	f9 4f       	sbci	r31, 0xF9	; 249
    39d6:	85 81       	ldd	r24, Z+5	; 0x05
    39d8:	96 81       	ldd	r25, Z+6	; 0x06
    39da:	a7 81       	ldd	r26, Z+7	; 0x07
    39dc:	b0 85       	ldd	r27, Z+8	; 0x08
    39de:	81 87       	std	Z+9, r24	; 0x09
    39e0:	92 87       	std	Z+10, r25	; 0x0a
    39e2:	a3 87       	std	Z+11, r26	; 0x0b
    39e4:	b4 87       	std	Z+12, r27	; 0x0c
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;
    39e6:	82 e0       	ldi	r24, 0x02	; 2
    39e8:	85 87       	std	Z+13, r24	; 0x0d

	return SWPWM_STATUS_ERROR_OK;
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	11 c0       	rjmp	.+34     	; 0x3a10 <SWPwm_Start+0x23a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    39ee:	82 e0       	ldi	r24, 0x02	; 2
    39f0:	0f c0       	rjmp	.+30     	; 0x3a10 <SWPwm_Start+0x23a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    39f2:	83 e0       	ldi	r24, 0x03	; 3
    39f4:	0d c0       	rjmp	.+26     	; 0x3a10 <SWPwm_Start+0x23a>
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
	{
		return SWPWM_STATUS_DC_OUTRANGE;
    39f6:	84 e0       	ldi	r24, 0x04	; 4
    39f8:	0b c0       	rjmp	.+22     	; 0x3a10 <SWPwm_Start+0x23a>
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    39fa:	85 e0       	ldi	r24, 0x05	; 5
    39fc:	09 c0       	rjmp	.+18     	; 0x3a10 <SWPwm_Start+0x23a>
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
    39fe:	81 e0       	ldi	r24, 0x01	; 1
    3a00:	07 c0       	rjmp	.+14     	; 0x3a10 <SWPwm_Start+0x23a>
	}else if(u8_DutyCycle == 100)
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return SWPWM_STATUS_ERROR_NOK;
		return SWPWM_STATUS_ERROR_OK;
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	05 c0       	rjmp	.+10     	; 0x3a10 <SWPwm_Start+0x23a>
			break;
		case GPT_CLK_SRC_PRSCLR_EXT_RISE:
			u16_prescalerValue = 1;
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	03 c0       	rjmp	.+6      	; 0x3a10 <SWPwm_Start+0x23a>
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    3a0a:	80 e0       	ldi	r24, 0x00	; 0
    3a0c:	01 c0       	rjmp	.+2      	; 0x3a10 <SWPwm_Start+0x23a>
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
    3a0e:	80 e0       	ldi	r24, 0x00	; 0
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;

	return SWPWM_STATUS_ERROR_OK;
}
    3a10:	26 96       	adiw	r28, 0x06	; 6
    3a12:	0f b6       	in	r0, 0x3f	; 63
    3a14:	f8 94       	cli
    3a16:	de bf       	out	0x3e, r29	; 62
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	cd bf       	out	0x3d, r28	; 61
    3a1c:	df 91       	pop	r29
    3a1e:	cf 91       	pop	r28
    3a20:	1f 91       	pop	r17
    3a22:	0f 91       	pop	r16
    3a24:	ff 90       	pop	r15
    3a26:	ef 90       	pop	r14
    3a28:	df 90       	pop	r13
    3a2a:	cf 90       	pop	r12
    3a2c:	bf 90       	pop	r11
    3a2e:	af 90       	pop	r10
    3a30:	9f 90       	pop	r9
    3a32:	8f 90       	pop	r8
    3a34:	7f 90       	pop	r7
    3a36:	6f 90       	pop	r6
    3a38:	5f 90       	pop	r5
    3a3a:	4f 90       	pop	r4
    3a3c:	08 95       	ret

00003a3e <SWPwm_Stop>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Stop(u8SWPwm_Channel_t u8_ChannelID)
{
    3a3e:	cf 93       	push	r28
    3a40:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    3a42:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <genu_SWPwmModStatus>
    3a46:	91 30       	cpi	r25, 0x01	; 1
    3a48:	b1 f5       	brne	.+108    	; 0x3ab6 <SWPwm_Stop+0x78>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    3a4a:	81 11       	cpse	r24, r1
    3a4c:	36 c0       	rjmp	.+108    	; 0x3aba <SWPwm_Stop+0x7c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
    3a4e:	c8 2f       	mov	r28, r24
    3a50:	d0 e0       	ldi	r29, 0x00	; 0
    3a52:	ce 01       	movw	r24, r28
    3a54:	88 0f       	add	r24, r24
    3a56:	99 1f       	adc	r25, r25
    3a58:	fc 01       	movw	r30, r24
    3a5a:	ee 0f       	add	r30, r30
    3a5c:	ff 1f       	adc	r31, r31
    3a5e:	ee 0f       	add	r30, r30
    3a60:	ff 1f       	adc	r31, r31
    3a62:	ee 0f       	add	r30, r30
    3a64:	ff 1f       	adc	r31, r31
    3a66:	e8 1b       	sub	r30, r24
    3a68:	f9 0b       	sbc	r31, r25
    3a6a:	ea 51       	subi	r30, 0x1A	; 26
    3a6c:	f9 4f       	sbci	r31, 0xF9	; 249
    3a6e:	85 85       	ldd	r24, Z+13	; 0x0d
    3a70:	82 30       	cpi	r24, 0x02	; 2
    3a72:	29 f5       	brne	.+74     	; 0x3abe <SWPwm_Stop+0x80>
	
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
    3a74:	fe 01       	movw	r30, r28
    3a76:	ee 0f       	add	r30, r30
    3a78:	ff 1f       	adc	r31, r31
    3a7a:	e2 58       	subi	r30, 0x82	; 130
    3a7c:	fa 4f       	sbci	r31, 0xFA	; 250
    3a7e:	60 e0       	ldi	r22, 0x00	; 0
    3a80:	80 81       	ld	r24, Z
    3a82:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Dio_writePin>
    3a86:	81 30       	cpi	r24, 0x01	; 1
    3a88:	e1 f4       	brne	.+56     	; 0x3ac2 <SWPwm_Stop+0x84>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the State of the PWM Channel to STOPPED */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
    3a8a:	8e e0       	ldi	r24, 0x0E	; 14
    3a8c:	8c 9f       	mul	r24, r28
    3a8e:	f0 01       	movw	r30, r0
    3a90:	8d 9f       	mul	r24, r29
    3a92:	f0 0d       	add	r31, r0
    3a94:	11 24       	eor	r1, r1
    3a96:	ea 51       	subi	r30, 0x1A	; 26
    3a98:	f9 4f       	sbci	r31, 0xF9	; 249
    3a9a:	83 e0       	ldi	r24, 0x03	; 3
    3a9c:	85 87       	std	Z+13, r24	; 0x0d
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
    3a9e:	fe 01       	movw	r30, r28
    3aa0:	ee 0f       	add	r30, r30
    3aa2:	ff 1f       	adc	r31, r31
    3aa4:	e2 58       	subi	r30, 0x82	; 130
    3aa6:	fa 4f       	sbci	r31, 0xFA	; 250
    3aa8:	81 81       	ldd	r24, Z+1	; 0x01
    3aaa:	0e 94 19 16 	call	0x2c32	; 0x2c32 <GptStop>
    3aae:	81 30       	cpi	r24, 0x01	; 1
    3ab0:	51 f0       	breq	.+20     	; 0x3ac6 <SWPwm_Stop+0x88>
		return SWPWM_STATUS_ERROR_NOK;
    3ab2:	80 e0       	ldi	r24, 0x00	; 0
    3ab4:	09 c0       	rjmp	.+18     	; 0x3ac8 <SWPwm_Stop+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    3ab6:	82 e0       	ldi	r24, 0x02	; 2
    3ab8:	07 c0       	rjmp	.+14     	; 0x3ac8 <SWPwm_Stop+0x8a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    3aba:	83 e0       	ldi	r24, 0x03	; 3
    3abc:	05 c0       	rjmp	.+10     	; 0x3ac8 <SWPwm_Stop+0x8a>
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    3abe:	85 e0       	ldi	r24, 0x05	; 5
    3ac0:	03 c0       	rjmp	.+6      	; 0x3ac8 <SWPwm_Stop+0x8a>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	01 c0       	rjmp	.+2      	; 0x3ac8 <SWPwm_Stop+0x8a>
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
	
	return SWPWM_STATUS_ERROR_OK;
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
}
    3ac8:	df 91       	pop	r29
    3aca:	cf 91       	pop	r28
    3acc:	08 95       	ret

00003ace <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    3ace:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <u8_Uart_Status>
    3ad2:	81 30       	cpi	r24, 0x01	; 1
    3ad4:	81 f0       	breq	.+32     	; 0x3af6 <Uart_init+0x28>
    3ad6:	10 bc       	out	0x20, r1	; 32
    3ad8:	87 e6       	ldi	r24, 0x67	; 103
    3ada:	89 b9       	out	0x09, r24	; 9
    3adc:	82 e0       	ldi	r24, 0x02	; 2
    3ade:	8b b9       	out	0x0b, r24	; 11
    3ae0:	88 e1       	ldi	r24, 0x18	; 24
    3ae2:	8a b9       	out	0x0a, r24	; 10
    3ae4:	80 e8       	ldi	r24, 0x80	; 128
    3ae6:	80 bd       	out	0x20, r24	; 32
    3ae8:	80 b5       	in	r24, 0x20	; 32
    3aea:	86 68       	ori	r24, 0x86	; 134
    3aec:	80 bd       	out	0x20, r24	; 32
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <u8_Uart_Status>
    3af4:	08 95       	ret
    3af6:	87 e0       	ldi	r24, 0x07	; 7
    3af8:	08 95       	ret

00003afa <Uart_sendByte>:
    3afa:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <u8_Uart_Status>
    3afe:	99 23       	and	r25, r25
    3b00:	29 f0       	breq	.+10     	; 0x3b0c <Uart_sendByte+0x12>
    3b02:	5d 9b       	sbis	0x0b, 5	; 11
    3b04:	fe cf       	rjmp	.-4      	; 0x3b02 <Uart_sendByte+0x8>
    3b06:	8c b9       	out	0x0c, r24	; 12
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	08 95       	ret
    3b0c:	86 e0       	ldi	r24, 0x06	; 6
    3b0e:	08 95       	ret

00003b10 <Uart_sendPacket>:
    3b10:	ef 92       	push	r14
    3b12:	ff 92       	push	r15
    3b14:	0f 93       	push	r16
    3b16:	1f 93       	push	r17
    3b18:	cf 93       	push	r28
    3b1a:	df 93       	push	r29
    3b1c:	20 91 f4 06 	lds	r18, 0x06F4	; 0x8006f4 <u8_Uart_Status>
    3b20:	22 23       	and	r18, r18
    3b22:	99 f0       	breq	.+38     	; 0x3b4a <Uart_sendPacket+0x3a>
    3b24:	8b 01       	movw	r16, r22
    3b26:	7c 01       	movw	r14, r24
    3b28:	c0 e0       	ldi	r28, 0x00	; 0
    3b2a:	d0 e0       	ldi	r29, 0x00	; 0
    3b2c:	09 c0       	rjmp	.+18     	; 0x3b40 <Uart_sendPacket+0x30>
    3b2e:	f7 01       	movw	r30, r14
    3b30:	ec 0f       	add	r30, r28
    3b32:	fd 1f       	adc	r31, r29
    3b34:	80 81       	ld	r24, Z
    3b36:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <Uart_sendByte>
    3b3a:	81 30       	cpi	r24, 0x01	; 1
    3b3c:	41 f4       	brne	.+16     	; 0x3b4e <Uart_sendPacket+0x3e>
    3b3e:	21 96       	adiw	r28, 0x01	; 1
    3b40:	c0 17       	cp	r28, r16
    3b42:	d1 07       	cpc	r29, r17
    3b44:	a0 f3       	brcs	.-24     	; 0x3b2e <Uart_sendPacket+0x1e>
    3b46:	81 e0       	ldi	r24, 0x01	; 1
    3b48:	03 c0       	rjmp	.+6      	; 0x3b50 <Uart_sendPacket+0x40>
    3b4a:	86 e0       	ldi	r24, 0x06	; 6
    3b4c:	01 c0       	rjmp	.+2      	; 0x3b50 <Uart_sendPacket+0x40>
    3b4e:	80 e0       	ldi	r24, 0x00	; 0
    3b50:	df 91       	pop	r29
    3b52:	cf 91       	pop	r28
    3b54:	1f 91       	pop	r17
    3b56:	0f 91       	pop	r16
    3b58:	ff 90       	pop	r15
    3b5a:	ef 90       	pop	r14
    3b5c:	08 95       	ret

00003b5e <Uart_EnableNotification_RXC>:
    3b5e:	9c 01       	movw	r18, r24
    3b60:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <u8_Uart_Status>
    3b64:	99 23       	and	r25, r25
    3b66:	61 f0       	breq	.+24     	; 0x3b80 <Uart_EnableNotification_RXC+0x22>
    3b68:	21 15       	cp	r18, r1
    3b6a:	31 05       	cpc	r19, r1
    3b6c:	59 f0       	breq	.+22     	; 0x3b84 <Uart_EnableNotification_RXC+0x26>
    3b6e:	8a b1       	in	r24, 0x0a	; 10
    3b70:	80 68       	ori	r24, 0x80	; 128
    3b72:	8a b9       	out	0x0a, r24	; 10
    3b74:	30 93 f8 06 	sts	0x06F8, r19	; 0x8006f8 <Uart_RXC_CallBackPtr+0x1>
    3b78:	20 93 f7 06 	sts	0x06F7, r18	; 0x8006f7 <Uart_RXC_CallBackPtr>
    3b7c:	81 e0       	ldi	r24, 0x01	; 1
    3b7e:	08 95       	ret
    3b80:	86 e0       	ldi	r24, 0x06	; 6
    3b82:	08 95       	ret
    3b84:	85 e0       	ldi	r24, 0x05	; 5
    3b86:	08 95       	ret

00003b88 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    3b88:	8c b1       	in	r24, 0x0c	; 12
}
    3b8a:	08 95       	ret

00003b8c <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    3b8c:	1f 92       	push	r1
    3b8e:	0f 92       	push	r0
    3b90:	0f b6       	in	r0, 0x3f	; 63
    3b92:	0f 92       	push	r0
    3b94:	11 24       	eor	r1, r1
    3b96:	2f 93       	push	r18
    3b98:	3f 93       	push	r19
    3b9a:	4f 93       	push	r20
    3b9c:	5f 93       	push	r21
    3b9e:	6f 93       	push	r22
    3ba0:	7f 93       	push	r23
    3ba2:	8f 93       	push	r24
    3ba4:	9f 93       	push	r25
    3ba6:	af 93       	push	r26
    3ba8:	bf 93       	push	r27
    3baa:	ef 93       	push	r30
    3bac:	ff 93       	push	r31
    3bae:	e0 91 f9 06 	lds	r30, 0x06F9	; 0x8006f9 <Uart_TXC_CallBackPtr>
    3bb2:	f0 91 fa 06 	lds	r31, 0x06FA	; 0x8006fa <Uart_TXC_CallBackPtr+0x1>
    3bb6:	09 95       	icall
    3bb8:	ff 91       	pop	r31
    3bba:	ef 91       	pop	r30
    3bbc:	bf 91       	pop	r27
    3bbe:	af 91       	pop	r26
    3bc0:	9f 91       	pop	r25
    3bc2:	8f 91       	pop	r24
    3bc4:	7f 91       	pop	r23
    3bc6:	6f 91       	pop	r22
    3bc8:	5f 91       	pop	r21
    3bca:	4f 91       	pop	r20
    3bcc:	3f 91       	pop	r19
    3bce:	2f 91       	pop	r18
    3bd0:	0f 90       	pop	r0
    3bd2:	0f be       	out	0x3f, r0	; 63
    3bd4:	0f 90       	pop	r0
    3bd6:	1f 90       	pop	r1
    3bd8:	18 95       	reti

00003bda <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    3bda:	1f 92       	push	r1
    3bdc:	0f 92       	push	r0
    3bde:	0f b6       	in	r0, 0x3f	; 63
    3be0:	0f 92       	push	r0
    3be2:	11 24       	eor	r1, r1
    3be4:	2f 93       	push	r18
    3be6:	3f 93       	push	r19
    3be8:	4f 93       	push	r20
    3bea:	5f 93       	push	r21
    3bec:	6f 93       	push	r22
    3bee:	7f 93       	push	r23
    3bf0:	8f 93       	push	r24
    3bf2:	9f 93       	push	r25
    3bf4:	af 93       	push	r26
    3bf6:	bf 93       	push	r27
    3bf8:	ef 93       	push	r30
    3bfa:	ff 93       	push	r31
    3bfc:	e0 91 f7 06 	lds	r30, 0x06F7	; 0x8006f7 <Uart_RXC_CallBackPtr>
    3c00:	f0 91 f8 06 	lds	r31, 0x06F8	; 0x8006f8 <Uart_RXC_CallBackPtr+0x1>
    3c04:	09 95       	icall
    3c06:	ff 91       	pop	r31
    3c08:	ef 91       	pop	r30
    3c0a:	bf 91       	pop	r27
    3c0c:	af 91       	pop	r26
    3c0e:	9f 91       	pop	r25
    3c10:	8f 91       	pop	r24
    3c12:	7f 91       	pop	r23
    3c14:	6f 91       	pop	r22
    3c16:	5f 91       	pop	r21
    3c18:	4f 91       	pop	r20
    3c1a:	3f 91       	pop	r19
    3c1c:	2f 91       	pop	r18
    3c1e:	0f 90       	pop	r0
    3c20:	0f be       	out	0x3f, r0	; 63
    3c22:	0f 90       	pop	r0
    3c24:	1f 90       	pop	r1
    3c26:	18 95       	reti

00003c28 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    3c28:	1f 92       	push	r1
    3c2a:	0f 92       	push	r0
    3c2c:	0f b6       	in	r0, 0x3f	; 63
    3c2e:	0f 92       	push	r0
    3c30:	11 24       	eor	r1, r1
    3c32:	2f 93       	push	r18
    3c34:	3f 93       	push	r19
    3c36:	4f 93       	push	r20
    3c38:	5f 93       	push	r21
    3c3a:	6f 93       	push	r22
    3c3c:	7f 93       	push	r23
    3c3e:	8f 93       	push	r24
    3c40:	9f 93       	push	r25
    3c42:	af 93       	push	r26
    3c44:	bf 93       	push	r27
    3c46:	ef 93       	push	r30
    3c48:	ff 93       	push	r31
    3c4a:	e0 91 f5 06 	lds	r30, 0x06F5	; 0x8006f5 <Uart_UDRE_CallBackPtr>
    3c4e:	f0 91 f6 06 	lds	r31, 0x06F6	; 0x8006f6 <Uart_UDRE_CallBackPtr+0x1>
    3c52:	09 95       	icall
    3c54:	ff 91       	pop	r31
    3c56:	ef 91       	pop	r30
    3c58:	bf 91       	pop	r27
    3c5a:	af 91       	pop	r26
    3c5c:	9f 91       	pop	r25
    3c5e:	8f 91       	pop	r24
    3c60:	7f 91       	pop	r23
    3c62:	6f 91       	pop	r22
    3c64:	5f 91       	pop	r21
    3c66:	4f 91       	pop	r20
    3c68:	3f 91       	pop	r19
    3c6a:	2f 91       	pop	r18
    3c6c:	0f 90       	pop	r0
    3c6e:	0f be       	out	0x3f, r0	; 63
    3c70:	0f 90       	pop	r0
    3c72:	1f 90       	pop	r1
    3c74:	18 95       	reti

00003c76 <__subsf3>:
    3c76:	50 58       	subi	r21, 0x80	; 128

00003c78 <__addsf3>:
    3c78:	bb 27       	eor	r27, r27
    3c7a:	aa 27       	eor	r26, r26
    3c7c:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__addsf3x>
    3c80:	0c 94 c6 1f 	jmp	0x3f8c	; 0x3f8c <__fp_round>
    3c84:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__fp_pscA>
    3c88:	38 f0       	brcs	.+14     	; 0x3c98 <__addsf3+0x20>
    3c8a:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <__fp_pscB>
    3c8e:	20 f0       	brcs	.+8      	; 0x3c98 <__addsf3+0x20>
    3c90:	39 f4       	brne	.+14     	; 0x3ca0 <__addsf3+0x28>
    3c92:	9f 3f       	cpi	r25, 0xFF	; 255
    3c94:	19 f4       	brne	.+6      	; 0x3c9c <__addsf3+0x24>
    3c96:	26 f4       	brtc	.+8      	; 0x3ca0 <__addsf3+0x28>
    3c98:	0c 94 b5 1f 	jmp	0x3f6a	; 0x3f6a <__fp_nan>
    3c9c:	0e f4       	brtc	.+2      	; 0x3ca0 <__addsf3+0x28>
    3c9e:	e0 95       	com	r30
    3ca0:	e7 fb       	bst	r30, 7
    3ca2:	0c 94 af 1f 	jmp	0x3f5e	; 0x3f5e <__fp_inf>

00003ca6 <__addsf3x>:
    3ca6:	e9 2f       	mov	r30, r25
    3ca8:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__fp_split3>
    3cac:	58 f3       	brcs	.-42     	; 0x3c84 <__addsf3+0xc>
    3cae:	ba 17       	cp	r27, r26
    3cb0:	62 07       	cpc	r22, r18
    3cb2:	73 07       	cpc	r23, r19
    3cb4:	84 07       	cpc	r24, r20
    3cb6:	95 07       	cpc	r25, r21
    3cb8:	20 f0       	brcs	.+8      	; 0x3cc2 <__addsf3x+0x1c>
    3cba:	79 f4       	brne	.+30     	; 0x3cda <__addsf3x+0x34>
    3cbc:	a6 f5       	brtc	.+104    	; 0x3d26 <__addsf3x+0x80>
    3cbe:	0c 94 f9 1f 	jmp	0x3ff2	; 0x3ff2 <__fp_zero>
    3cc2:	0e f4       	brtc	.+2      	; 0x3cc6 <__addsf3x+0x20>
    3cc4:	e0 95       	com	r30
    3cc6:	0b 2e       	mov	r0, r27
    3cc8:	ba 2f       	mov	r27, r26
    3cca:	a0 2d       	mov	r26, r0
    3ccc:	0b 01       	movw	r0, r22
    3cce:	b9 01       	movw	r22, r18
    3cd0:	90 01       	movw	r18, r0
    3cd2:	0c 01       	movw	r0, r24
    3cd4:	ca 01       	movw	r24, r20
    3cd6:	a0 01       	movw	r20, r0
    3cd8:	11 24       	eor	r1, r1
    3cda:	ff 27       	eor	r31, r31
    3cdc:	59 1b       	sub	r21, r25
    3cde:	99 f0       	breq	.+38     	; 0x3d06 <__addsf3x+0x60>
    3ce0:	59 3f       	cpi	r21, 0xF9	; 249
    3ce2:	50 f4       	brcc	.+20     	; 0x3cf8 <__addsf3x+0x52>
    3ce4:	50 3e       	cpi	r21, 0xE0	; 224
    3ce6:	68 f1       	brcs	.+90     	; 0x3d42 <__addsf3x+0x9c>
    3ce8:	1a 16       	cp	r1, r26
    3cea:	f0 40       	sbci	r31, 0x00	; 0
    3cec:	a2 2f       	mov	r26, r18
    3cee:	23 2f       	mov	r18, r19
    3cf0:	34 2f       	mov	r19, r20
    3cf2:	44 27       	eor	r20, r20
    3cf4:	58 5f       	subi	r21, 0xF8	; 248
    3cf6:	f3 cf       	rjmp	.-26     	; 0x3cde <__addsf3x+0x38>
    3cf8:	46 95       	lsr	r20
    3cfa:	37 95       	ror	r19
    3cfc:	27 95       	ror	r18
    3cfe:	a7 95       	ror	r26
    3d00:	f0 40       	sbci	r31, 0x00	; 0
    3d02:	53 95       	inc	r21
    3d04:	c9 f7       	brne	.-14     	; 0x3cf8 <__addsf3x+0x52>
    3d06:	7e f4       	brtc	.+30     	; 0x3d26 <__addsf3x+0x80>
    3d08:	1f 16       	cp	r1, r31
    3d0a:	ba 0b       	sbc	r27, r26
    3d0c:	62 0b       	sbc	r22, r18
    3d0e:	73 0b       	sbc	r23, r19
    3d10:	84 0b       	sbc	r24, r20
    3d12:	ba f0       	brmi	.+46     	; 0x3d42 <__addsf3x+0x9c>
    3d14:	91 50       	subi	r25, 0x01	; 1
    3d16:	a1 f0       	breq	.+40     	; 0x3d40 <__addsf3x+0x9a>
    3d18:	ff 0f       	add	r31, r31
    3d1a:	bb 1f       	adc	r27, r27
    3d1c:	66 1f       	adc	r22, r22
    3d1e:	77 1f       	adc	r23, r23
    3d20:	88 1f       	adc	r24, r24
    3d22:	c2 f7       	brpl	.-16     	; 0x3d14 <__addsf3x+0x6e>
    3d24:	0e c0       	rjmp	.+28     	; 0x3d42 <__addsf3x+0x9c>
    3d26:	ba 0f       	add	r27, r26
    3d28:	62 1f       	adc	r22, r18
    3d2a:	73 1f       	adc	r23, r19
    3d2c:	84 1f       	adc	r24, r20
    3d2e:	48 f4       	brcc	.+18     	; 0x3d42 <__addsf3x+0x9c>
    3d30:	87 95       	ror	r24
    3d32:	77 95       	ror	r23
    3d34:	67 95       	ror	r22
    3d36:	b7 95       	ror	r27
    3d38:	f7 95       	ror	r31
    3d3a:	9e 3f       	cpi	r25, 0xFE	; 254
    3d3c:	08 f0       	brcs	.+2      	; 0x3d40 <__addsf3x+0x9a>
    3d3e:	b0 cf       	rjmp	.-160    	; 0x3ca0 <__addsf3+0x28>
    3d40:	93 95       	inc	r25
    3d42:	88 0f       	add	r24, r24
    3d44:	08 f0       	brcs	.+2      	; 0x3d48 <__addsf3x+0xa2>
    3d46:	99 27       	eor	r25, r25
    3d48:	ee 0f       	add	r30, r30
    3d4a:	97 95       	ror	r25
    3d4c:	87 95       	ror	r24
    3d4e:	08 95       	ret

00003d50 <__cmpsf2>:
    3d50:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__fp_cmp>
    3d54:	08 f4       	brcc	.+2      	; 0x3d58 <__cmpsf2+0x8>
    3d56:	81 e0       	ldi	r24, 0x01	; 1
    3d58:	08 95       	ret

00003d5a <__divsf3>:
    3d5a:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <__divsf3x>
    3d5e:	0c 94 c6 1f 	jmp	0x3f8c	; 0x3f8c <__fp_round>
    3d62:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <__fp_pscB>
    3d66:	58 f0       	brcs	.+22     	; 0x3d7e <__divsf3+0x24>
    3d68:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__fp_pscA>
    3d6c:	40 f0       	brcs	.+16     	; 0x3d7e <__divsf3+0x24>
    3d6e:	29 f4       	brne	.+10     	; 0x3d7a <__divsf3+0x20>
    3d70:	5f 3f       	cpi	r21, 0xFF	; 255
    3d72:	29 f0       	breq	.+10     	; 0x3d7e <__divsf3+0x24>
    3d74:	0c 94 af 1f 	jmp	0x3f5e	; 0x3f5e <__fp_inf>
    3d78:	51 11       	cpse	r21, r1
    3d7a:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <__fp_szero>
    3d7e:	0c 94 b5 1f 	jmp	0x3f6a	; 0x3f6a <__fp_nan>

00003d82 <__divsf3x>:
    3d82:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__fp_split3>
    3d86:	68 f3       	brcs	.-38     	; 0x3d62 <__divsf3+0x8>

00003d88 <__divsf3_pse>:
    3d88:	99 23       	and	r25, r25
    3d8a:	b1 f3       	breq	.-20     	; 0x3d78 <__divsf3+0x1e>
    3d8c:	55 23       	and	r21, r21
    3d8e:	91 f3       	breq	.-28     	; 0x3d74 <__divsf3+0x1a>
    3d90:	95 1b       	sub	r25, r21
    3d92:	55 0b       	sbc	r21, r21
    3d94:	bb 27       	eor	r27, r27
    3d96:	aa 27       	eor	r26, r26
    3d98:	62 17       	cp	r22, r18
    3d9a:	73 07       	cpc	r23, r19
    3d9c:	84 07       	cpc	r24, r20
    3d9e:	38 f0       	brcs	.+14     	; 0x3dae <__divsf3_pse+0x26>
    3da0:	9f 5f       	subi	r25, 0xFF	; 255
    3da2:	5f 4f       	sbci	r21, 0xFF	; 255
    3da4:	22 0f       	add	r18, r18
    3da6:	33 1f       	adc	r19, r19
    3da8:	44 1f       	adc	r20, r20
    3daa:	aa 1f       	adc	r26, r26
    3dac:	a9 f3       	breq	.-22     	; 0x3d98 <__divsf3_pse+0x10>
    3dae:	35 d0       	rcall	.+106    	; 0x3e1a <__divsf3_pse+0x92>
    3db0:	0e 2e       	mov	r0, r30
    3db2:	3a f0       	brmi	.+14     	; 0x3dc2 <__divsf3_pse+0x3a>
    3db4:	e0 e8       	ldi	r30, 0x80	; 128
    3db6:	32 d0       	rcall	.+100    	; 0x3e1c <__divsf3_pse+0x94>
    3db8:	91 50       	subi	r25, 0x01	; 1
    3dba:	50 40       	sbci	r21, 0x00	; 0
    3dbc:	e6 95       	lsr	r30
    3dbe:	00 1c       	adc	r0, r0
    3dc0:	ca f7       	brpl	.-14     	; 0x3db4 <__divsf3_pse+0x2c>
    3dc2:	2b d0       	rcall	.+86     	; 0x3e1a <__divsf3_pse+0x92>
    3dc4:	fe 2f       	mov	r31, r30
    3dc6:	29 d0       	rcall	.+82     	; 0x3e1a <__divsf3_pse+0x92>
    3dc8:	66 0f       	add	r22, r22
    3dca:	77 1f       	adc	r23, r23
    3dcc:	88 1f       	adc	r24, r24
    3dce:	bb 1f       	adc	r27, r27
    3dd0:	26 17       	cp	r18, r22
    3dd2:	37 07       	cpc	r19, r23
    3dd4:	48 07       	cpc	r20, r24
    3dd6:	ab 07       	cpc	r26, r27
    3dd8:	b0 e8       	ldi	r27, 0x80	; 128
    3dda:	09 f0       	breq	.+2      	; 0x3dde <__divsf3_pse+0x56>
    3ddc:	bb 0b       	sbc	r27, r27
    3dde:	80 2d       	mov	r24, r0
    3de0:	bf 01       	movw	r22, r30
    3de2:	ff 27       	eor	r31, r31
    3de4:	93 58       	subi	r25, 0x83	; 131
    3de6:	5f 4f       	sbci	r21, 0xFF	; 255
    3de8:	3a f0       	brmi	.+14     	; 0x3df8 <__divsf3_pse+0x70>
    3dea:	9e 3f       	cpi	r25, 0xFE	; 254
    3dec:	51 05       	cpc	r21, r1
    3dee:	78 f0       	brcs	.+30     	; 0x3e0e <__divsf3_pse+0x86>
    3df0:	0c 94 af 1f 	jmp	0x3f5e	; 0x3f5e <__fp_inf>
    3df4:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <__fp_szero>
    3df8:	5f 3f       	cpi	r21, 0xFF	; 255
    3dfa:	e4 f3       	brlt	.-8      	; 0x3df4 <__divsf3_pse+0x6c>
    3dfc:	98 3e       	cpi	r25, 0xE8	; 232
    3dfe:	d4 f3       	brlt	.-12     	; 0x3df4 <__divsf3_pse+0x6c>
    3e00:	86 95       	lsr	r24
    3e02:	77 95       	ror	r23
    3e04:	67 95       	ror	r22
    3e06:	b7 95       	ror	r27
    3e08:	f7 95       	ror	r31
    3e0a:	9f 5f       	subi	r25, 0xFF	; 255
    3e0c:	c9 f7       	brne	.-14     	; 0x3e00 <__divsf3_pse+0x78>
    3e0e:	88 0f       	add	r24, r24
    3e10:	91 1d       	adc	r25, r1
    3e12:	96 95       	lsr	r25
    3e14:	87 95       	ror	r24
    3e16:	97 f9       	bld	r25, 7
    3e18:	08 95       	ret
    3e1a:	e1 e0       	ldi	r30, 0x01	; 1
    3e1c:	66 0f       	add	r22, r22
    3e1e:	77 1f       	adc	r23, r23
    3e20:	88 1f       	adc	r24, r24
    3e22:	bb 1f       	adc	r27, r27
    3e24:	62 17       	cp	r22, r18
    3e26:	73 07       	cpc	r23, r19
    3e28:	84 07       	cpc	r24, r20
    3e2a:	ba 07       	cpc	r27, r26
    3e2c:	20 f0       	brcs	.+8      	; 0x3e36 <__divsf3_pse+0xae>
    3e2e:	62 1b       	sub	r22, r18
    3e30:	73 0b       	sbc	r23, r19
    3e32:	84 0b       	sbc	r24, r20
    3e34:	ba 0b       	sbc	r27, r26
    3e36:	ee 1f       	adc	r30, r30
    3e38:	88 f7       	brcc	.-30     	; 0x3e1c <__divsf3_pse+0x94>
    3e3a:	e0 95       	com	r30
    3e3c:	08 95       	ret

00003e3e <__fixunssfsi>:
    3e3e:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <__fp_splitA>
    3e42:	88 f0       	brcs	.+34     	; 0x3e66 <__fixunssfsi+0x28>
    3e44:	9f 57       	subi	r25, 0x7F	; 127
    3e46:	98 f0       	brcs	.+38     	; 0x3e6e <__fixunssfsi+0x30>
    3e48:	b9 2f       	mov	r27, r25
    3e4a:	99 27       	eor	r25, r25
    3e4c:	b7 51       	subi	r27, 0x17	; 23
    3e4e:	b0 f0       	brcs	.+44     	; 0x3e7c <__fixunssfsi+0x3e>
    3e50:	e1 f0       	breq	.+56     	; 0x3e8a <__fixunssfsi+0x4c>
    3e52:	66 0f       	add	r22, r22
    3e54:	77 1f       	adc	r23, r23
    3e56:	88 1f       	adc	r24, r24
    3e58:	99 1f       	adc	r25, r25
    3e5a:	1a f0       	brmi	.+6      	; 0x3e62 <__fixunssfsi+0x24>
    3e5c:	ba 95       	dec	r27
    3e5e:	c9 f7       	brne	.-14     	; 0x3e52 <__fixunssfsi+0x14>
    3e60:	14 c0       	rjmp	.+40     	; 0x3e8a <__fixunssfsi+0x4c>
    3e62:	b1 30       	cpi	r27, 0x01	; 1
    3e64:	91 f0       	breq	.+36     	; 0x3e8a <__fixunssfsi+0x4c>
    3e66:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <__fp_zero>
    3e6a:	b1 e0       	ldi	r27, 0x01	; 1
    3e6c:	08 95       	ret
    3e6e:	0c 94 f9 1f 	jmp	0x3ff2	; 0x3ff2 <__fp_zero>
    3e72:	67 2f       	mov	r22, r23
    3e74:	78 2f       	mov	r23, r24
    3e76:	88 27       	eor	r24, r24
    3e78:	b8 5f       	subi	r27, 0xF8	; 248
    3e7a:	39 f0       	breq	.+14     	; 0x3e8a <__fixunssfsi+0x4c>
    3e7c:	b9 3f       	cpi	r27, 0xF9	; 249
    3e7e:	cc f3       	brlt	.-14     	; 0x3e72 <__fixunssfsi+0x34>
    3e80:	86 95       	lsr	r24
    3e82:	77 95       	ror	r23
    3e84:	67 95       	ror	r22
    3e86:	b3 95       	inc	r27
    3e88:	d9 f7       	brne	.-10     	; 0x3e80 <__fixunssfsi+0x42>
    3e8a:	3e f4       	brtc	.+14     	; 0x3e9a <__fixunssfsi+0x5c>
    3e8c:	90 95       	com	r25
    3e8e:	80 95       	com	r24
    3e90:	70 95       	com	r23
    3e92:	61 95       	neg	r22
    3e94:	7f 4f       	sbci	r23, 0xFF	; 255
    3e96:	8f 4f       	sbci	r24, 0xFF	; 255
    3e98:	9f 4f       	sbci	r25, 0xFF	; 255
    3e9a:	08 95       	ret

00003e9c <__floatunsisf>:
    3e9c:	e8 94       	clt
    3e9e:	09 c0       	rjmp	.+18     	; 0x3eb2 <__floatsisf+0x12>

00003ea0 <__floatsisf>:
    3ea0:	97 fb       	bst	r25, 7
    3ea2:	3e f4       	brtc	.+14     	; 0x3eb2 <__floatsisf+0x12>
    3ea4:	90 95       	com	r25
    3ea6:	80 95       	com	r24
    3ea8:	70 95       	com	r23
    3eaa:	61 95       	neg	r22
    3eac:	7f 4f       	sbci	r23, 0xFF	; 255
    3eae:	8f 4f       	sbci	r24, 0xFF	; 255
    3eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    3eb2:	99 23       	and	r25, r25
    3eb4:	a9 f0       	breq	.+42     	; 0x3ee0 <__floatsisf+0x40>
    3eb6:	f9 2f       	mov	r31, r25
    3eb8:	96 e9       	ldi	r25, 0x96	; 150
    3eba:	bb 27       	eor	r27, r27
    3ebc:	93 95       	inc	r25
    3ebe:	f6 95       	lsr	r31
    3ec0:	87 95       	ror	r24
    3ec2:	77 95       	ror	r23
    3ec4:	67 95       	ror	r22
    3ec6:	b7 95       	ror	r27
    3ec8:	f1 11       	cpse	r31, r1
    3eca:	f8 cf       	rjmp	.-16     	; 0x3ebc <__floatsisf+0x1c>
    3ecc:	fa f4       	brpl	.+62     	; 0x3f0c <__floatsisf+0x6c>
    3ece:	bb 0f       	add	r27, r27
    3ed0:	11 f4       	brne	.+4      	; 0x3ed6 <__floatsisf+0x36>
    3ed2:	60 ff       	sbrs	r22, 0
    3ed4:	1b c0       	rjmp	.+54     	; 0x3f0c <__floatsisf+0x6c>
    3ed6:	6f 5f       	subi	r22, 0xFF	; 255
    3ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    3eda:	8f 4f       	sbci	r24, 0xFF	; 255
    3edc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ede:	16 c0       	rjmp	.+44     	; 0x3f0c <__floatsisf+0x6c>
    3ee0:	88 23       	and	r24, r24
    3ee2:	11 f0       	breq	.+4      	; 0x3ee8 <__floatsisf+0x48>
    3ee4:	96 e9       	ldi	r25, 0x96	; 150
    3ee6:	11 c0       	rjmp	.+34     	; 0x3f0a <__floatsisf+0x6a>
    3ee8:	77 23       	and	r23, r23
    3eea:	21 f0       	breq	.+8      	; 0x3ef4 <__floatsisf+0x54>
    3eec:	9e e8       	ldi	r25, 0x8E	; 142
    3eee:	87 2f       	mov	r24, r23
    3ef0:	76 2f       	mov	r23, r22
    3ef2:	05 c0       	rjmp	.+10     	; 0x3efe <__floatsisf+0x5e>
    3ef4:	66 23       	and	r22, r22
    3ef6:	71 f0       	breq	.+28     	; 0x3f14 <__floatsisf+0x74>
    3ef8:	96 e8       	ldi	r25, 0x86	; 134
    3efa:	86 2f       	mov	r24, r22
    3efc:	70 e0       	ldi	r23, 0x00	; 0
    3efe:	60 e0       	ldi	r22, 0x00	; 0
    3f00:	2a f0       	brmi	.+10     	; 0x3f0c <__floatsisf+0x6c>
    3f02:	9a 95       	dec	r25
    3f04:	66 0f       	add	r22, r22
    3f06:	77 1f       	adc	r23, r23
    3f08:	88 1f       	adc	r24, r24
    3f0a:	da f7       	brpl	.-10     	; 0x3f02 <__floatsisf+0x62>
    3f0c:	88 0f       	add	r24, r24
    3f0e:	96 95       	lsr	r25
    3f10:	87 95       	ror	r24
    3f12:	97 f9       	bld	r25, 7
    3f14:	08 95       	ret

00003f16 <__fp_cmp>:
    3f16:	99 0f       	add	r25, r25
    3f18:	00 08       	sbc	r0, r0
    3f1a:	55 0f       	add	r21, r21
    3f1c:	aa 0b       	sbc	r26, r26
    3f1e:	e0 e8       	ldi	r30, 0x80	; 128
    3f20:	fe ef       	ldi	r31, 0xFE	; 254
    3f22:	16 16       	cp	r1, r22
    3f24:	17 06       	cpc	r1, r23
    3f26:	e8 07       	cpc	r30, r24
    3f28:	f9 07       	cpc	r31, r25
    3f2a:	c0 f0       	brcs	.+48     	; 0x3f5c <__fp_cmp+0x46>
    3f2c:	12 16       	cp	r1, r18
    3f2e:	13 06       	cpc	r1, r19
    3f30:	e4 07       	cpc	r30, r20
    3f32:	f5 07       	cpc	r31, r21
    3f34:	98 f0       	brcs	.+38     	; 0x3f5c <__fp_cmp+0x46>
    3f36:	62 1b       	sub	r22, r18
    3f38:	73 0b       	sbc	r23, r19
    3f3a:	84 0b       	sbc	r24, r20
    3f3c:	95 0b       	sbc	r25, r21
    3f3e:	39 f4       	brne	.+14     	; 0x3f4e <__fp_cmp+0x38>
    3f40:	0a 26       	eor	r0, r26
    3f42:	61 f0       	breq	.+24     	; 0x3f5c <__fp_cmp+0x46>
    3f44:	23 2b       	or	r18, r19
    3f46:	24 2b       	or	r18, r20
    3f48:	25 2b       	or	r18, r21
    3f4a:	21 f4       	brne	.+8      	; 0x3f54 <__fp_cmp+0x3e>
    3f4c:	08 95       	ret
    3f4e:	0a 26       	eor	r0, r26
    3f50:	09 f4       	brne	.+2      	; 0x3f54 <__fp_cmp+0x3e>
    3f52:	a1 40       	sbci	r26, 0x01	; 1
    3f54:	a6 95       	lsr	r26
    3f56:	8f ef       	ldi	r24, 0xFF	; 255
    3f58:	81 1d       	adc	r24, r1
    3f5a:	81 1d       	adc	r24, r1
    3f5c:	08 95       	ret

00003f5e <__fp_inf>:
    3f5e:	97 f9       	bld	r25, 7
    3f60:	9f 67       	ori	r25, 0x7F	; 127
    3f62:	80 e8       	ldi	r24, 0x80	; 128
    3f64:	70 e0       	ldi	r23, 0x00	; 0
    3f66:	60 e0       	ldi	r22, 0x00	; 0
    3f68:	08 95       	ret

00003f6a <__fp_nan>:
    3f6a:	9f ef       	ldi	r25, 0xFF	; 255
    3f6c:	80 ec       	ldi	r24, 0xC0	; 192
    3f6e:	08 95       	ret

00003f70 <__fp_pscA>:
    3f70:	00 24       	eor	r0, r0
    3f72:	0a 94       	dec	r0
    3f74:	16 16       	cp	r1, r22
    3f76:	17 06       	cpc	r1, r23
    3f78:	18 06       	cpc	r1, r24
    3f7a:	09 06       	cpc	r0, r25
    3f7c:	08 95       	ret

00003f7e <__fp_pscB>:
    3f7e:	00 24       	eor	r0, r0
    3f80:	0a 94       	dec	r0
    3f82:	12 16       	cp	r1, r18
    3f84:	13 06       	cpc	r1, r19
    3f86:	14 06       	cpc	r1, r20
    3f88:	05 06       	cpc	r0, r21
    3f8a:	08 95       	ret

00003f8c <__fp_round>:
    3f8c:	09 2e       	mov	r0, r25
    3f8e:	03 94       	inc	r0
    3f90:	00 0c       	add	r0, r0
    3f92:	11 f4       	brne	.+4      	; 0x3f98 <__fp_round+0xc>
    3f94:	88 23       	and	r24, r24
    3f96:	52 f0       	brmi	.+20     	; 0x3fac <__fp_round+0x20>
    3f98:	bb 0f       	add	r27, r27
    3f9a:	40 f4       	brcc	.+16     	; 0x3fac <__fp_round+0x20>
    3f9c:	bf 2b       	or	r27, r31
    3f9e:	11 f4       	brne	.+4      	; 0x3fa4 <__fp_round+0x18>
    3fa0:	60 ff       	sbrs	r22, 0
    3fa2:	04 c0       	rjmp	.+8      	; 0x3fac <__fp_round+0x20>
    3fa4:	6f 5f       	subi	r22, 0xFF	; 255
    3fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    3fa8:	8f 4f       	sbci	r24, 0xFF	; 255
    3faa:	9f 4f       	sbci	r25, 0xFF	; 255
    3fac:	08 95       	ret

00003fae <__fp_split3>:
    3fae:	57 fd       	sbrc	r21, 7
    3fb0:	90 58       	subi	r25, 0x80	; 128
    3fb2:	44 0f       	add	r20, r20
    3fb4:	55 1f       	adc	r21, r21
    3fb6:	59 f0       	breq	.+22     	; 0x3fce <__fp_splitA+0x10>
    3fb8:	5f 3f       	cpi	r21, 0xFF	; 255
    3fba:	71 f0       	breq	.+28     	; 0x3fd8 <__fp_splitA+0x1a>
    3fbc:	47 95       	ror	r20

00003fbe <__fp_splitA>:
    3fbe:	88 0f       	add	r24, r24
    3fc0:	97 fb       	bst	r25, 7
    3fc2:	99 1f       	adc	r25, r25
    3fc4:	61 f0       	breq	.+24     	; 0x3fde <__fp_splitA+0x20>
    3fc6:	9f 3f       	cpi	r25, 0xFF	; 255
    3fc8:	79 f0       	breq	.+30     	; 0x3fe8 <__fp_splitA+0x2a>
    3fca:	87 95       	ror	r24
    3fcc:	08 95       	ret
    3fce:	12 16       	cp	r1, r18
    3fd0:	13 06       	cpc	r1, r19
    3fd2:	14 06       	cpc	r1, r20
    3fd4:	55 1f       	adc	r21, r21
    3fd6:	f2 cf       	rjmp	.-28     	; 0x3fbc <__fp_split3+0xe>
    3fd8:	46 95       	lsr	r20
    3fda:	f1 df       	rcall	.-30     	; 0x3fbe <__fp_splitA>
    3fdc:	08 c0       	rjmp	.+16     	; 0x3fee <__fp_splitA+0x30>
    3fde:	16 16       	cp	r1, r22
    3fe0:	17 06       	cpc	r1, r23
    3fe2:	18 06       	cpc	r1, r24
    3fe4:	99 1f       	adc	r25, r25
    3fe6:	f1 cf       	rjmp	.-30     	; 0x3fca <__fp_splitA+0xc>
    3fe8:	86 95       	lsr	r24
    3fea:	71 05       	cpc	r23, r1
    3fec:	61 05       	cpc	r22, r1
    3fee:	08 94       	sec
    3ff0:	08 95       	ret

00003ff2 <__fp_zero>:
    3ff2:	e8 94       	clt

00003ff4 <__fp_szero>:
    3ff4:	bb 27       	eor	r27, r27
    3ff6:	66 27       	eor	r22, r22
    3ff8:	77 27       	eor	r23, r23
    3ffa:	cb 01       	movw	r24, r22
    3ffc:	97 f9       	bld	r25, 7
    3ffe:	08 95       	ret

00004000 <__mulsf3>:
    4000:	0e 94 13 20 	call	0x4026	; 0x4026 <__mulsf3x>
    4004:	0c 94 c6 1f 	jmp	0x3f8c	; 0x3f8c <__fp_round>
    4008:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__fp_pscA>
    400c:	38 f0       	brcs	.+14     	; 0x401c <__mulsf3+0x1c>
    400e:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <__fp_pscB>
    4012:	20 f0       	brcs	.+8      	; 0x401c <__mulsf3+0x1c>
    4014:	95 23       	and	r25, r21
    4016:	11 f0       	breq	.+4      	; 0x401c <__mulsf3+0x1c>
    4018:	0c 94 af 1f 	jmp	0x3f5e	; 0x3f5e <__fp_inf>
    401c:	0c 94 b5 1f 	jmp	0x3f6a	; 0x3f6a <__fp_nan>
    4020:	11 24       	eor	r1, r1
    4022:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <__fp_szero>

00004026 <__mulsf3x>:
    4026:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__fp_split3>
    402a:	70 f3       	brcs	.-36     	; 0x4008 <__mulsf3+0x8>

0000402c <__mulsf3_pse>:
    402c:	95 9f       	mul	r25, r21
    402e:	c1 f3       	breq	.-16     	; 0x4020 <__mulsf3+0x20>
    4030:	95 0f       	add	r25, r21
    4032:	50 e0       	ldi	r21, 0x00	; 0
    4034:	55 1f       	adc	r21, r21
    4036:	62 9f       	mul	r22, r18
    4038:	f0 01       	movw	r30, r0
    403a:	72 9f       	mul	r23, r18
    403c:	bb 27       	eor	r27, r27
    403e:	f0 0d       	add	r31, r0
    4040:	b1 1d       	adc	r27, r1
    4042:	63 9f       	mul	r22, r19
    4044:	aa 27       	eor	r26, r26
    4046:	f0 0d       	add	r31, r0
    4048:	b1 1d       	adc	r27, r1
    404a:	aa 1f       	adc	r26, r26
    404c:	64 9f       	mul	r22, r20
    404e:	66 27       	eor	r22, r22
    4050:	b0 0d       	add	r27, r0
    4052:	a1 1d       	adc	r26, r1
    4054:	66 1f       	adc	r22, r22
    4056:	82 9f       	mul	r24, r18
    4058:	22 27       	eor	r18, r18
    405a:	b0 0d       	add	r27, r0
    405c:	a1 1d       	adc	r26, r1
    405e:	62 1f       	adc	r22, r18
    4060:	73 9f       	mul	r23, r19
    4062:	b0 0d       	add	r27, r0
    4064:	a1 1d       	adc	r26, r1
    4066:	62 1f       	adc	r22, r18
    4068:	83 9f       	mul	r24, r19
    406a:	a0 0d       	add	r26, r0
    406c:	61 1d       	adc	r22, r1
    406e:	22 1f       	adc	r18, r18
    4070:	74 9f       	mul	r23, r20
    4072:	33 27       	eor	r19, r19
    4074:	a0 0d       	add	r26, r0
    4076:	61 1d       	adc	r22, r1
    4078:	23 1f       	adc	r18, r19
    407a:	84 9f       	mul	r24, r20
    407c:	60 0d       	add	r22, r0
    407e:	21 1d       	adc	r18, r1
    4080:	82 2f       	mov	r24, r18
    4082:	76 2f       	mov	r23, r22
    4084:	6a 2f       	mov	r22, r26
    4086:	11 24       	eor	r1, r1
    4088:	9f 57       	subi	r25, 0x7F	; 127
    408a:	50 40       	sbci	r21, 0x00	; 0
    408c:	9a f0       	brmi	.+38     	; 0x40b4 <__mulsf3_pse+0x88>
    408e:	f1 f0       	breq	.+60     	; 0x40cc <__mulsf3_pse+0xa0>
    4090:	88 23       	and	r24, r24
    4092:	4a f0       	brmi	.+18     	; 0x40a6 <__mulsf3_pse+0x7a>
    4094:	ee 0f       	add	r30, r30
    4096:	ff 1f       	adc	r31, r31
    4098:	bb 1f       	adc	r27, r27
    409a:	66 1f       	adc	r22, r22
    409c:	77 1f       	adc	r23, r23
    409e:	88 1f       	adc	r24, r24
    40a0:	91 50       	subi	r25, 0x01	; 1
    40a2:	50 40       	sbci	r21, 0x00	; 0
    40a4:	a9 f7       	brne	.-22     	; 0x4090 <__mulsf3_pse+0x64>
    40a6:	9e 3f       	cpi	r25, 0xFE	; 254
    40a8:	51 05       	cpc	r21, r1
    40aa:	80 f0       	brcs	.+32     	; 0x40cc <__mulsf3_pse+0xa0>
    40ac:	0c 94 af 1f 	jmp	0x3f5e	; 0x3f5e <__fp_inf>
    40b0:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <__fp_szero>
    40b4:	5f 3f       	cpi	r21, 0xFF	; 255
    40b6:	e4 f3       	brlt	.-8      	; 0x40b0 <__mulsf3_pse+0x84>
    40b8:	98 3e       	cpi	r25, 0xE8	; 232
    40ba:	d4 f3       	brlt	.-12     	; 0x40b0 <__mulsf3_pse+0x84>
    40bc:	86 95       	lsr	r24
    40be:	77 95       	ror	r23
    40c0:	67 95       	ror	r22
    40c2:	b7 95       	ror	r27
    40c4:	f7 95       	ror	r31
    40c6:	e7 95       	ror	r30
    40c8:	9f 5f       	subi	r25, 0xFF	; 255
    40ca:	c1 f7       	brne	.-16     	; 0x40bc <__mulsf3_pse+0x90>
    40cc:	fe 2b       	or	r31, r30
    40ce:	88 0f       	add	r24, r24
    40d0:	91 1d       	adc	r25, r1
    40d2:	96 95       	lsr	r25
    40d4:	87 95       	ror	r24
    40d6:	97 f9       	bld	r25, 7
    40d8:	08 95       	ret

000040da <__divmodhi4>:
    40da:	97 fb       	bst	r25, 7
    40dc:	07 2e       	mov	r0, r23
    40de:	16 f4       	brtc	.+4      	; 0x40e4 <__divmodhi4+0xa>
    40e0:	00 94       	com	r0
    40e2:	07 d0       	rcall	.+14     	; 0x40f2 <__divmodhi4_neg1>
    40e4:	77 fd       	sbrc	r23, 7
    40e6:	09 d0       	rcall	.+18     	; 0x40fa <__divmodhi4_neg2>
    40e8:	0e 94 cd 20 	call	0x419a	; 0x419a <__udivmodhi4>
    40ec:	07 fc       	sbrc	r0, 7
    40ee:	05 d0       	rcall	.+10     	; 0x40fa <__divmodhi4_neg2>
    40f0:	3e f4       	brtc	.+14     	; 0x4100 <__divmodhi4_exit>

000040f2 <__divmodhi4_neg1>:
    40f2:	90 95       	com	r25
    40f4:	81 95       	neg	r24
    40f6:	9f 4f       	sbci	r25, 0xFF	; 255
    40f8:	08 95       	ret

000040fa <__divmodhi4_neg2>:
    40fa:	70 95       	com	r23
    40fc:	61 95       	neg	r22
    40fe:	7f 4f       	sbci	r23, 0xFF	; 255

00004100 <__divmodhi4_exit>:
    4100:	08 95       	ret

00004102 <__udivmodsi4>:
    4102:	a1 e2       	ldi	r26, 0x21	; 33
    4104:	1a 2e       	mov	r1, r26
    4106:	aa 1b       	sub	r26, r26
    4108:	bb 1b       	sub	r27, r27
    410a:	fd 01       	movw	r30, r26
    410c:	0d c0       	rjmp	.+26     	; 0x4128 <__udivmodsi4_ep>

0000410e <__udivmodsi4_loop>:
    410e:	aa 1f       	adc	r26, r26
    4110:	bb 1f       	adc	r27, r27
    4112:	ee 1f       	adc	r30, r30
    4114:	ff 1f       	adc	r31, r31
    4116:	a2 17       	cp	r26, r18
    4118:	b3 07       	cpc	r27, r19
    411a:	e4 07       	cpc	r30, r20
    411c:	f5 07       	cpc	r31, r21
    411e:	20 f0       	brcs	.+8      	; 0x4128 <__udivmodsi4_ep>
    4120:	a2 1b       	sub	r26, r18
    4122:	b3 0b       	sbc	r27, r19
    4124:	e4 0b       	sbc	r30, r20
    4126:	f5 0b       	sbc	r31, r21

00004128 <__udivmodsi4_ep>:
    4128:	66 1f       	adc	r22, r22
    412a:	77 1f       	adc	r23, r23
    412c:	88 1f       	adc	r24, r24
    412e:	99 1f       	adc	r25, r25
    4130:	1a 94       	dec	r1
    4132:	69 f7       	brne	.-38     	; 0x410e <__udivmodsi4_loop>
    4134:	60 95       	com	r22
    4136:	70 95       	com	r23
    4138:	80 95       	com	r24
    413a:	90 95       	com	r25
    413c:	9b 01       	movw	r18, r22
    413e:	ac 01       	movw	r20, r24
    4140:	bd 01       	movw	r22, r26
    4142:	cf 01       	movw	r24, r30
    4144:	08 95       	ret

00004146 <__tablejump2__>:
    4146:	ee 0f       	add	r30, r30
    4148:	ff 1f       	adc	r31, r31
    414a:	05 90       	lpm	r0, Z+
    414c:	f4 91       	lpm	r31, Z
    414e:	e0 2d       	mov	r30, r0
    4150:	09 94       	ijmp

00004152 <__umulhisi3>:
    4152:	a2 9f       	mul	r26, r18
    4154:	b0 01       	movw	r22, r0
    4156:	b3 9f       	mul	r27, r19
    4158:	c0 01       	movw	r24, r0
    415a:	a3 9f       	mul	r26, r19
    415c:	70 0d       	add	r23, r0
    415e:	81 1d       	adc	r24, r1
    4160:	11 24       	eor	r1, r1
    4162:	91 1d       	adc	r25, r1
    4164:	b2 9f       	mul	r27, r18
    4166:	70 0d       	add	r23, r0
    4168:	81 1d       	adc	r24, r1
    416a:	11 24       	eor	r1, r1
    416c:	91 1d       	adc	r25, r1
    416e:	08 95       	ret

00004170 <__adddi3_s8>:
    4170:	00 24       	eor	r0, r0
    4172:	a7 fd       	sbrc	r26, 7
    4174:	00 94       	com	r0
    4176:	2a 0f       	add	r18, r26
    4178:	30 1d       	adc	r19, r0
    417a:	40 1d       	adc	r20, r0
    417c:	50 1d       	adc	r21, r0
    417e:	60 1d       	adc	r22, r0
    4180:	70 1d       	adc	r23, r0
    4182:	80 1d       	adc	r24, r0
    4184:	90 1d       	adc	r25, r0
    4186:	08 95       	ret

00004188 <__cmpdi2>:
    4188:	2a 15       	cp	r18, r10
    418a:	3b 05       	cpc	r19, r11
    418c:	4c 05       	cpc	r20, r12
    418e:	5d 05       	cpc	r21, r13
    4190:	6e 05       	cpc	r22, r14
    4192:	7f 05       	cpc	r23, r15
    4194:	80 07       	cpc	r24, r16
    4196:	91 07       	cpc	r25, r17
    4198:	08 95       	ret

0000419a <__udivmodhi4>:
    419a:	aa 1b       	sub	r26, r26
    419c:	bb 1b       	sub	r27, r27
    419e:	51 e1       	ldi	r21, 0x11	; 17
    41a0:	07 c0       	rjmp	.+14     	; 0x41b0 <__udivmodhi4_ep>

000041a2 <__udivmodhi4_loop>:
    41a2:	aa 1f       	adc	r26, r26
    41a4:	bb 1f       	adc	r27, r27
    41a6:	a6 17       	cp	r26, r22
    41a8:	b7 07       	cpc	r27, r23
    41aa:	10 f0       	brcs	.+4      	; 0x41b0 <__udivmodhi4_ep>
    41ac:	a6 1b       	sub	r26, r22
    41ae:	b7 0b       	sbc	r27, r23

000041b0 <__udivmodhi4_ep>:
    41b0:	88 1f       	adc	r24, r24
    41b2:	99 1f       	adc	r25, r25
    41b4:	5a 95       	dec	r21
    41b6:	a9 f7       	brne	.-22     	; 0x41a2 <__udivmodhi4_loop>
    41b8:	80 95       	com	r24
    41ba:	90 95       	com	r25
    41bc:	bc 01       	movw	r22, r24
    41be:	cd 01       	movw	r24, r26
    41c0:	08 95       	ret

000041c2 <_exit>:
    41c2:	f8 94       	cli

000041c4 <__stop_program>:
    41c4:	ff cf       	rjmp	.-2      	; 0x41c4 <__stop_program>
