
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004140  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000568  00800060  00004140  000041d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000094  008005c8  008005c8  0000473c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000473c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000476c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000700  00000000  00000000  000047a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000076f0  00000000  00000000  00004ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ea2  00000000  00000000  0000c598  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000046c1  00000000  00000000  0000e43a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016dc  00000000  00000000  00012afc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c8d  00000000  00000000  000141d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006069  00000000  00000000  00016e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005e8  00000000  00000000  0001cece  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__vector_1>
       8:	0c 94 a5 14 	jmp	0x294a	; 0x294a <__vector_2>
       c:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__vector_3>
      10:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__vector_4>
      14:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__vector_5>
      18:	0c 94 6d 16 	jmp	0x2cda	; 0x2cda <__vector_6>
      1c:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__vector_7>
      20:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__vector_8>
      24:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__vector_9>
      28:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <__vector_10>
      2c:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__vector_11>
      30:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__vector_12>
      34:	0c 94 a5 1d 	jmp	0x3b4a	; 0x3b4a <__vector_13>
      38:	0c 94 cc 1d 	jmp	0x3b98	; 0x3b98 <__vector_14>
      3c:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__vector_15>
      40:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__vector_16>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	31 1c       	adc	r3, r1
      56:	3d 1c       	adc	r3, r13
      58:	34 1c       	adc	r3, r4
      5a:	37 1c       	adc	r3, r7
      5c:	3a 1c       	adc	r3, r10
      5e:	31 1c       	adc	r3, r1
      60:	31 1c       	adc	r3, r1

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	15 e0       	ldi	r17, 0x05	; 5
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e0 e4       	ldi	r30, 0x40	; 64
      76:	f1 e4       	ldi	r31, 0x41	; 65
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a8 3c       	cpi	r26, 0xC8	; 200
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	26 e0       	ldi	r18, 0x06	; 6
      86:	a8 ec       	ldi	r26, 0xC8	; 200
      88:	b5 e0       	ldi	r27, 0x05	; 5
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	ac 35       	cpi	r26, 0x5C	; 92
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 b9 10 	call	0x2172	; 0x2172 <main>
      98:	0c 94 9e 20 	jmp	0x413c	; 0x413c <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <AppADMIN_searchPAN>:
#ifndef APPADMIN_H_
#define APPADMIN_H_


sint16_t AppADMIN_searchPAN(uint8_t* pu8_data)
{
      a0:	0f 93       	push	r16
      a2:	1f 93       	push	r17
      a4:	cf 93       	push	r28
      a6:	df 93       	push	r29
      a8:	cd b7       	in	r28, 0x3d	; 61
      aa:	de b7       	in	r29, 0x3e	; 62
      ac:	2a 97       	sbiw	r28, 0x0a	; 10
      ae:	0f b6       	in	r0, 0x3f	; 63
      b0:	f8 94       	cli
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	0f be       	out	0x3f, r0	; 63
      b6:	cd bf       	out	0x3d, r28	; 61
      b8:	8c 01       	movw	r16, r24
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
      ba:	fe 01       	movw	r30, r28
      bc:	31 96       	adiw	r30, 0x01	; 1
      be:	8a e0       	ldi	r24, 0x0A	; 10
      c0:	df 01       	movw	r26, r30
      c2:	1d 92       	st	X+, r1
      c4:	8a 95       	dec	r24
      c6:	e9 f7       	brne	.-6      	; 0xc2 <AppADMIN_searchPAN+0x22>
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
      c8:	10 92 d9 05 	sts	0x05D9, r1	; 0x8005d9 <gu8_clientIndex>
      cc:	1f c0       	rjmp	.+62     	; 0x10c <AppADMIN_searchPAN+0x6c>
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	01 96       	adiw	r24, 0x01	; 1
      d2:	82 95       	swap	r24
      d4:	88 0f       	add	r24, r24
      d6:	80 7e       	andi	r24, 0xE0	; 224
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
      d8:	4a e0       	ldi	r20, 0x0A	; 10
      da:	50 e0       	ldi	r21, 0x00	; 0
      dc:	be 01       	movw	r22, r28
      de:	6f 5f       	subi	r22, 0xFF	; 255
      e0:	7f 4f       	sbci	r23, 0xFF	; 255
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 57 0c 	call	0x18ae	; 0x18ae <Eeprom_24_readPacket>
      e8:	81 30       	cpi	r24, 0x01	; 1
      ea:	c9 f4       	brne	.+50     	; 0x11e <AppADMIN_searchPAN+0x7e>
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, pu8_data) == 1)
      ec:	b8 01       	movw	r22, r16
      ee:	ce 01       	movw	r24, r28
      f0:	01 96       	adiw	r24, 0x01	; 1
      f2:	0e 94 54 19 	call	0x32a8	; 0x32a8 <stringCompare>
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	21 f4       	brne	.+8      	; 0x102 <AppADMIN_searchPAN+0x62>
		{
			return gu8_clientIndex;
      fa:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <gu8_clientIndex>
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	10 c0       	rjmp	.+32     	; 0x122 <AppADMIN_searchPAN+0x82>

sint16_t AppADMIN_searchPAN(uint8_t* pu8_data)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     102:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <gu8_clientIndex>
     106:	8f 5f       	subi	r24, 0xFF	; 255
     108:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <gu8_clientIndex>
     10c:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <gu8_clientIndex>
     110:	90 91 e7 05 	lds	r25, 0x05E7	; 0x8005e7 <gu8_registeredAccNum>
     114:	89 17       	cp	r24, r25
     116:	d8 f2       	brcs	.-74     	; 0xce <AppADMIN_searchPAN+0x2e>
		{
			return gu8_clientIndex;
		}
	}

	return -1;
     118:	8f ef       	ldi	r24, 0xFF	; 255
     11a:	9f ef       	ldi	r25, 0xFF	; 255
     11c:	02 c0       	rjmp	.+4      	; 0x122 <AppADMIN_searchPAN+0x82>
	uint8_t au8_clientPAN[10] = {0};
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	90 e0       	ldi	r25, 0x00	; 0
			return gu8_clientIndex;
		}
	}

	return -1;
}
     122:	2a 96       	adiw	r28, 0x0a	; 10
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	f8 94       	cli
     128:	de bf       	out	0x3e, r29	; 62
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	cd bf       	out	0x3d, r28	; 61
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	1f 91       	pop	r17
     134:	0f 91       	pop	r16
     136:	08 95       	ret

00000138 <AppADMIN_updateCustomerData>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to update the data of a customer in the data base.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_updateCustomerData(uint16_t u16_clientIndex)
{
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + u16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
     13c:	9c 01       	movw	r18, r24
     13e:	2f 5f       	subi	r18, 0xFF	; 255
     140:	3f 4f       	sbci	r19, 0xFF	; 255
     142:	d2 2f       	mov	r29, r18
     144:	d2 95       	swap	r29
     146:	dd 0f       	add	r29, r29
     148:	d0 7e       	andi	r29, 0xE0	; 224
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + u16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
     14a:	82 95       	swap	r24
     14c:	88 0f       	add	r24, r24
     14e:	80 7e       	andi	r24, 0xE0	; 224
     150:	c0 e3       	ldi	r28, 0x30	; 48
     152:	c8 0f       	add	r28, r24
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
     154:	89 ee       	ldi	r24, 0xE9	; 233
     156:	95 e0       	ldi	r25, 0x05	; 5
     158:	0e 94 48 19 	call	0x3290	; 0x3290 <stringLength>
     15c:	48 2f       	mov	r20, r24
     15e:	50 e0       	ldi	r21, 0x00	; 0
     160:	69 ee       	ldi	r22, 0xE9	; 233
     162:	75 e0       	ldi	r23, 0x05	; 5
     164:	8d 2f       	mov	r24, r29
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <Eeprom_24_writePacket>
     16c:	81 30       	cpi	r24, 0x01	; 1
     16e:	81 f4       	brne	.+32     	; 0x190 <AppADMIN_updateCustomerData+0x58>
		return APP_STATUS_ERROR_NOK;
	
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     170:	83 ef       	ldi	r24, 0xF3	; 243
     172:	95 e0       	ldi	r25, 0x05	; 5
     174:	0e 94 48 19 	call	0x3290	; 0x3290 <stringLength>
     178:	48 2f       	mov	r20, r24
     17a:	50 e0       	ldi	r21, 0x00	; 0
     17c:	63 ef       	ldi	r22, 0xF3	; 243
     17e:	75 e0       	ldi	r23, 0x05	; 5
     180:	8c 2f       	mov	r24, r28
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <Eeprom_24_writePacket>
     188:	81 30       	cpi	r24, 0x01	; 1
     18a:	21 f0       	breq	.+8      	; 0x194 <AppADMIN_updateCustomerData+0x5c>
		return APP_STATUS_ERROR_NOK;
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	03 c0       	rjmp	.+6      	; 0x196 <AppADMIN_updateCustomerData+0x5e>
{
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + u16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + u16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	01 c0       	rjmp	.+2      	; 0x196 <AppADMIN_updateCustomerData+0x5e>
	
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     194:	81 e0       	ldi	r24, 0x01	; 1
}
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <AppUSER_displayTemp>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to display the temperature.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_displayTemp(void)
{
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	1f 92       	push	r1
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_currentTemp=0;
     1a6:	19 82       	std	Y+1, r1	; 0x01
	gu8_displayFlag = DISPLAY_TEMP;
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <gu8_displayFlag>
	Lcd_clear();
     1ae:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     1b2:	60 e0       	ldi	r22, 0x00	; 0
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <Lcd_setCursor>
     1ba:	81 30       	cpi	r24, 0x01	; 1
     1bc:	f9 f4       	brne	.+62     	; 0x1fc <AppUSER_displayTemp+0x60>
	return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
     1be:	87 ed       	ldi	r24, 0xD7	; 215
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <Lcd_printString>
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	d9 f4       	brne	.+54     	; 0x200 <AppUSER_displayTemp+0x64>
	return APP_STATUS_ERROR_NOK;
	if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
     1ca:	ce 01       	movw	r24, r28
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <LM35_readTemp>
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	59 f4       	brne	.+22     	; 0x1ec <AppUSER_displayTemp+0x50>
	{
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <Lcd_setCursor>
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	91 f4       	brne	.+36     	; 0x204 <AppUSER_displayTemp+0x68>
		return APP_STATUS_ERROR_NOK;
		if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
     1e0:	89 81       	ldd	r24, Y+1	; 0x01
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Lcd_printDecimal>
     1e8:	81 30       	cpi	r24, 0x01	; 1
     1ea:	71 f4       	brne	.+28     	; 0x208 <AppUSER_displayTemp+0x6c>
		return APP_STATUS_ERROR_NOK;
	}
	if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
     1ec:	88 ee       	ldi	r24, 0xE8	; 232
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <Lcd_printString>
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	51 f0       	breq	.+20     	; 0x20c <AppUSER_displayTemp+0x70>
	return APP_STATUS_ERROR_NOK;
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	09 c0       	rjmp	.+18     	; 0x20e <AppUSER_displayTemp+0x72>
{
	uint8_t u8_currentTemp=0;
	gu8_displayFlag = DISPLAY_TEMP;
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	07 c0       	rjmp	.+14     	; 0x20e <AppUSER_displayTemp+0x72>
	if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	05 c0       	rjmp	.+10     	; 0x20e <AppUSER_displayTemp+0x72>
	if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
	{
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	03 c0       	rjmp	.+6      	; 0x20e <AppUSER_displayTemp+0x72>
		if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	01 c0       	rjmp	.+2      	; 0x20e <AppUSER_displayTemp+0x72>
	}
	if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	return APP_STATUS_ERROR_OK;
     20c:	81 e0       	ldi	r24, 0x01	; 1
}
     20e:	0f 90       	pop	r0
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	08 95       	ret

00000216 <AppUSER_checkPan>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	2a 97       	sbiw	r28, 0x0a	; 10
     222:	0f b6       	in	r0, 0x3f	; 63
     224:	f8 94       	cli
     226:	de bf       	out	0x3e, r29	; 62
     228:	0f be       	out	0x3f, r0	; 63
     22a:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
     22c:	fe 01       	movw	r30, r28
     22e:	31 96       	adiw	r30, 0x01	; 1
     230:	8a e0       	ldi	r24, 0x0A	; 10
     232:	df 01       	movw	r26, r30
     234:	1d 92       	st	X+, r1
     236:	8a 95       	dec	r24
     238:	e9 f7       	brne	.-6      	; 0x234 <AppUSER_checkPan+0x1e>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     23a:	10 92 d9 05 	sts	0x05D9, r1	; 0x8005d9 <gu8_clientIndex>
     23e:	1d c0       	rjmp	.+58     	; 0x27a <AppUSER_checkPan+0x64>
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	01 96       	adiw	r24, 0x01	; 1
     244:	82 95       	swap	r24
     246:	88 0f       	add	r24, r24
     248:	80 7e       	andi	r24, 0xE0	; 224
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     24a:	4a e0       	ldi	r20, 0x0A	; 10
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	be 01       	movw	r22, r28
     250:	6f 5f       	subi	r22, 0xFF	; 255
     252:	7f 4f       	sbci	r23, 0xFF	; 255
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 57 0c 	call	0x18ae	; 0x18ae <Eeprom_24_readPacket>
     25a:	81 30       	cpi	r24, 0x01	; 1
     25c:	09 f0       	breq	.+2      	; 0x260 <AppUSER_checkPan+0x4a>
     25e:	40 c0       	rjmp	.+128    	; 0x2e0 <AppUSER_checkPan+0xca>
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
     260:	65 e0       	ldi	r22, 0x05	; 5
     262:	76 e0       	ldi	r23, 0x06	; 6
     264:	ce 01       	movw	r24, r28
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	0e 94 54 19 	call	0x32a8	; 0x32a8 <stringCompare>
     26c:	81 30       	cpi	r24, 0x01	; 1
     26e:	69 f0       	breq	.+26     	; 0x28a <AppUSER_checkPan+0x74>
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     270:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <gu8_clientIndex>
     274:	8f 5f       	subi	r24, 0xFF	; 255
     276:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <gu8_clientIndex>
     27a:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <gu8_clientIndex>
     27e:	90 91 e7 05 	lds	r25, 0x05E7	; 0x8005e7 <gu8_registeredAccNum>
     282:	89 17       	cp	r24, r25
     284:	e8 f2       	brcs	.-70     	; 0x240 <AppUSER_checkPan+0x2a>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	01 c0       	rjmp	.+2      	; 0x28c <AppUSER_checkPan+0x76>
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
		{
			u8_panFound = 1;
     28a:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
	
	if(u8_panFound == 1)
     28c:	81 30       	cpi	r24, 0x01	; 1
     28e:	51 f5       	brne	.+84     	; 0x2e4 <AppUSER_checkPan+0xce>
	{
		uint8_t u8_clientBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     290:	10 91 d9 05 	lds	r17, 0x05D9	; 0x8005d9 <gu8_clientIndex>
     294:	12 95       	swap	r17
     296:	11 0f       	add	r17, r17
     298:	10 7e       	andi	r17, 0xE0	; 224
     29a:	10 5d       	subi	r17, 0xD0	; 208
			
		stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
     29c:	69 ee       	ldi	r22, 0xE9	; 233
     29e:	75 e0       	ldi	r23, 0x05	; 5
     2a0:	ce 01       	movw	r24, r28
     2a2:	01 96       	adiw	r24, 0x01	; 1
     2a4:	0e 94 93 19 	call	0x3326	; 0x3326 <stringCopy>
		
		if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     2a8:	48 e0       	ldi	r20, 0x08	; 8
     2aa:	50 e0       	ldi	r21, 0x00	; 0
     2ac:	63 ef       	ldi	r22, 0xF3	; 243
     2ae:	75 e0       	ldi	r23, 0x05	; 5
     2b0:	81 2f       	mov	r24, r17
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 57 0c 	call	0x18ae	; 0x18ae <Eeprom_24_readPacket>
     2b8:	81 30       	cpi	r24, 0x01	; 1
     2ba:	b1 f4       	brne	.+44     	; 0x2e8 <AppUSER_checkPan+0xd2>
			return APP_STATUS_ERROR_NOK;
		
		gf32_balance = stringToFloat(gstr_clientdata.au8_Balance);
     2bc:	83 ef       	ldi	r24, 0xF3	; 243
     2be:	95 e0       	ldi	r25, 0x05	; 5
     2c0:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <stringToFloat>
     2c4:	60 93 d5 05 	sts	0x05D5, r22	; 0x8005d5 <gf32_balance>
     2c8:	70 93 d6 05 	sts	0x05D6, r23	; 0x8005d6 <gf32_balance+0x1>
     2cc:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <gf32_balance+0x2>
     2d0:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <gf32_balance+0x3>
		Terminal_Out(gstr_clientdata.au8_Balance);
     2d4:	83 ef       	ldi	r24, 0xF3	; 243
     2d6:	95 e0       	ldi	r25, 0x05	; 5
     2d8:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
		return APP_STATUS_PAN_FOUND;
     2dc:	8a e0       	ldi	r24, 0x0A	; 10
     2de:	05 c0       	rjmp	.+10     	; 0x2ea <AppUSER_checkPan+0xd4>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	03 c0       	rjmp	.+6      	; 0x2ea <AppUSER_checkPan+0xd4>
		
		gf32_balance = stringToFloat(gstr_clientdata.au8_Balance);
		Terminal_Out(gstr_clientdata.au8_Balance);
		return APP_STATUS_PAN_FOUND;
	}
	return APP_STATUS_PAN_NOT_FOUND;
     2e4:	8b e0       	ldi	r24, 0x0B	; 11
     2e6:	01 c0       	rjmp	.+2      	; 0x2ea <AppUSER_checkPan+0xd4>
		uint8_t u8_clientBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
			
		stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
		
		if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     2e8:	80 e0       	ldi	r24, 0x00	; 0
		gf32_balance = stringToFloat(gstr_clientdata.au8_Balance);
		Terminal_Out(gstr_clientdata.au8_Balance);
		return APP_STATUS_PAN_FOUND;
	}
	return APP_STATUS_PAN_NOT_FOUND;
}
     2ea:	2a 96       	adiw	r28, 0x0a	; 10
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	f8 94       	cli
     2f0:	de bf       	out	0x3e, r29	; 62
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	cd bf       	out	0x3d, r28	; 61
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	08 95       	ret

000002fe <AppUSER_ReportKeypad>:
* Parameters (out): pu8_key - Pointer to variable to hold the button pressed
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the value pressed in the keypad.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_ReportKeypad(uint8_t* pu8_key)
{
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	ec 01       	movw	r28, r24
	static uint8_t u8_index = 0;
	static uint8_t sau8_data[10]={0};
	enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&sau8_data[u8_index]);
     304:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <u8_index.2289>
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	87 53       	subi	r24, 0x37	; 55
     30c:	9a 4f       	sbci	r25, 0xFA	; 250
     30e:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <Keypad_readKey>
		
	if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
     312:	86 30       	cpi	r24, 0x06	; 6
     314:	09 f0       	breq	.+2      	; 0x318 <AppUSER_ReportKeypad+0x1a>
     316:	74 c0       	rjmp	.+232    	; 0x400 <__EEPROM_REGION_LENGTH__>
	{
		if(sau8_data[u8_index] == '=')
     318:	60 91 d3 05 	lds	r22, 0x05D3	; 0x8005d3 <u8_index.2289>
     31c:	86 2f       	mov	r24, r22
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	fc 01       	movw	r30, r24
     322:	e7 53       	subi	r30, 0x37	; 55
     324:	fa 4f       	sbci	r31, 0xFA	; 250
     326:	20 81       	ld	r18, Z
     328:	2d 33       	cpi	r18, 0x3D	; 61
     32a:	09 f5       	brne	.+66     	; 0x36e <AppUSER_ReportKeypad+0x70>
		{
			sau8_data[u8_index] = '\0';
     32c:	fc 01       	movw	r30, r24
     32e:	e7 53       	subi	r30, 0x37	; 55
     330:	fa 4f       	sbci	r31, 0xFA	; 250
     332:	10 82       	st	Z, r1
			u8_index = 0;
     334:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <u8_index.2289>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     338:	66 e0       	ldi	r22, 0x06	; 6
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <Lcd_setCursor>
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	09 f0       	breq	.+2      	; 0x346 <AppUSER_ReportKeypad+0x48>
     344:	5f c0       	rjmp	.+190    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
     346:	87 ef       	ldi	r24, 0xF7	; 247
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <Lcd_printString>
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	09 f0       	breq	.+2      	; 0x354 <AppUSER_ReportKeypad+0x56>
     352:	5a c0       	rjmp	.+180    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     354:	66 e0       	ldi	r22, 0x06	; 6
     356:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <Lcd_setCursor>
     35a:	81 30       	cpi	r24, 0x01	; 1
     35c:	09 f0       	breq	.+2      	; 0x360 <AppUSER_ReportKeypad+0x62>
     35e:	56 c0       	rjmp	.+172    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			return APP_STATUS_ERROR_NOK;
			stringCopy(sau8_data, pu8_key);
     360:	be 01       	movw	r22, r28
     362:	89 ec       	ldi	r24, 0xC9	; 201
     364:	95 e0       	ldi	r25, 0x05	; 5
     366:	0e 94 93 19 	call	0x3326	; 0x3326 <stringCopy>
			return APP_STATUS_KPD_NUM;
     36a:	87 e0       	ldi	r24, 0x07	; 7
     36c:	5a c0       	rjmp	.+180    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
		}else if(sau8_data[u8_index] == '-')
     36e:	2d 32       	cpi	r18, 0x2D	; 45
     370:	b1 f4       	brne	.+44     	; 0x39e <AppUSER_ReportKeypad+0xa0>
		{
			u8_index--;
     372:	ef ef       	ldi	r30, 0xFF	; 255
     374:	e6 0f       	add	r30, r22
     376:	e0 93 d3 05 	sts	0x05D3, r30	; 0x8005d3 <u8_index.2289>
			sau8_data[u8_index] = '\0';
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	e7 53       	subi	r30, 0x37	; 55
     37e:	fa 4f       	sbci	r31, 0xFA	; 250
     380:	10 82       	st	Z, r1
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     382:	6b 5f       	subi	r22, 0xFB	; 251
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <Lcd_setCursor>
     38a:	81 30       	cpi	r24, 0x01	; 1
     38c:	09 f0       	breq	.+2      	; 0x390 <AppUSER_ReportKeypad+0x92>
     38e:	40 c0       	rjmp	.+128    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_printChar(' ') != LCD_STATUS_ERROR_OK)
     390:	80 e2       	ldi	r24, 0x20	; 32
     392:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <Lcd_printChar>
     396:	81 30       	cpi	r24, 0x01	; 1
     398:	e9 f1       	breq	.+122    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			return APP_STATUS_ERROR_NOK;
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	42 c0       	rjmp	.+132    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
		}else
		{
			if(u8_index!=10)
     39e:	6a 30       	cpi	r22, 0x0A	; 10
     3a0:	49 f1       	breq	.+82     	; 0x3f4 <AppUSER_ReportKeypad+0xf6>
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     3a2:	6a 5f       	subi	r22, 0xFA	; 250
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <Lcd_setCursor>
     3aa:	81 30       	cpi	r24, 0x01	; 1
     3ac:	a9 f5       	brne	.+106    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
					return APP_STATUS_ERROR_NOK;
				if(Kpd_enablePass == 0)
     3ae:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <Kpd_enablePass>
     3b2:	81 11       	cpse	r24, r1
     3b4:	0b c0       	rjmp	.+22     	; 0x3cc <AppUSER_ReportKeypad+0xce>
				{
					if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
     3b6:	e0 91 d3 05 	lds	r30, 0x05D3	; 0x8005d3 <u8_index.2289>
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	e7 53       	subi	r30, 0x37	; 55
     3be:	fa 4f       	sbci	r31, 0xFA	; 250
     3c0:	80 81       	ld	r24, Z
     3c2:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <Lcd_printChar>
     3c6:	81 30       	cpi	r24, 0x01	; 1
     3c8:	49 f5       	brne	.+82     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     3ca:	0d c0       	rjmp	.+26     	; 0x3e6 <AppUSER_ReportKeypad+0xe8>
						return APP_STATUS_ERROR_NOK;
				}
				else
				{
					if(u8_index < 4)
     3cc:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <u8_index.2289>
     3d0:	84 30       	cpi	r24, 0x04	; 4
     3d2:	30 f4       	brcc	.+12     	; 0x3e0 <AppUSER_ReportKeypad+0xe2>
					{
						if(Lcd_printChar('*') != LCD_STATUS_ERROR_OK)
     3d4:	8a e2       	ldi	r24, 0x2A	; 42
     3d6:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <Lcd_printChar>
     3da:	81 30       	cpi	r24, 0x01	; 1
     3dc:	09 f5       	brne	.+66     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     3de:	03 c0       	rjmp	.+6      	; 0x3e6 <AppUSER_ReportKeypad+0xe8>
							return APP_STATUS_ERROR_NOK;
					}else
					{
						u8_index--;
     3e0:	81 50       	subi	r24, 0x01	; 1
     3e2:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <u8_index.2289>
					}
				}
				u8_index++;
     3e6:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <u8_index.2289>
     3ea:	8f 5f       	subi	r24, 0xFF	; 255
     3ec:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <u8_index.2289>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	17 c0       	rjmp	.+46     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
					}
				}
				u8_index++;
			}else
			{
				sau8_data[u8_index] = '\0';
     3f4:	fc 01       	movw	r30, r24
     3f6:	e7 53       	subi	r30, 0x37	; 55
     3f8:	fa 4f       	sbci	r31, 0xFA	; 250
     3fa:	10 82       	st	Z, r1
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	11 c0       	rjmp	.+34     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			}
				
		}
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	0f c0       	rjmp	.+30     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
		if(sau8_data[u8_index] == '=')
		{
			sau8_data[u8_index] = '\0';
			u8_index = 0;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	0d c0       	rjmp	.+26     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	0b c0       	rjmp	.+22     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	09 c0       	rjmp	.+18     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
		}else if(sau8_data[u8_index] == '-')
		{
			u8_index--;
			sau8_data[u8_index] = '\0';
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	07 c0       	rjmp	.+14     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	05 c0       	rjmp	.+10     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
		}else
		{
			if(u8_index!=10)
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	03 c0       	rjmp	.+6      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
				if(Kpd_enablePass == 0)
				{
					if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	01 c0       	rjmp	.+2      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
				else
				{
					if(u8_index < 4)
					{
						if(Lcd_printChar('*') != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
     420:	80 e0       	ldi	r24, 0x00	; 0
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
}
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	08 95       	ret

00000428 <AppUSER_startTransaction>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startTransaction(void)
{
     428:	4f 92       	push	r4
     42a:	5f 92       	push	r5
     42c:	6f 92       	push	r6
     42e:	7f 92       	push	r7
     430:	8f 92       	push	r8
     432:	9f 92       	push	r9
     434:	af 92       	push	r10
     436:	bf 92       	push	r11
     438:	cf 92       	push	r12
     43a:	df 92       	push	r13
     43c:	ef 92       	push	r14
     43e:	ff 92       	push	r15
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	28 97       	sbiw	r28, 0x08	; 8
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	f8 94       	cli
     450:	de bf       	out	0x3e, r29	; 62
     452:	0f be       	out	0x3f, r0	; 63
     454:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_inputKPD[8] = {0};
     456:	fe 01       	movw	r30, r28
     458:	31 96       	adiw	r30, 0x01	; 1
     45a:	88 e0       	ldi	r24, 0x08	; 8
     45c:	df 01       	movw	r26, r30
     45e:	1d 92       	st	X+, r1
     460:	8a 95       	dec	r24
     462:	e9 f7       	brne	.-6      	; 0x45e <AppUSER_startTransaction+0x36>
	enuApp_Status_t KeypdaStatus = 0;
	float32_t f32_balance = stringToFloat(gstr_clientdata.au8_Balance);
     464:	83 ef       	ldi	r24, 0xF3	; 243
     466:	95 e0       	ldi	r25, 0x05	; 5
     468:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <stringToFloat>
     46c:	2b 01       	movw	r4, r22
     46e:	3c 01       	movw	r6, r24
	float32_t f32_maxAmount = stringToFloat(gau8_maxAmount);
     470:	8a ed       	ldi	r24, 0xDA	; 218
     472:	95 e0       	ldi	r25, 0x05	; 5
     474:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <stringToFloat>
     478:	4b 01       	movw	r8, r22
     47a:	5c 01       	movw	r10, r24
	float32_t f32_amount = 0;
	while(1)
	{
		EmptyString(au8_inputKPD);
     47c:	ce 01       	movw	r24, r28
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	0e 94 87 19 	call	0x330e	; 0x330e <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     484:	ce 01       	movw	r24, r28
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	0e 94 7f 01 	call	0x2fe	; 0x2fe <AppUSER_ReportKeypad>
		
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     48c:	87 30       	cpi	r24, 0x07	; 7
     48e:	09 f0       	breq	.+2      	; 0x492 <AppUSER_startTransaction+0x6a>
     490:	be c0       	rjmp	.+380    	; 0x60e <AppUSER_startTransaction+0x1e6>
		{
			
			f32_amount = stringToFloat(au8_inputKPD);
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <stringToFloat>
     49a:	6b 01       	movw	r12, r22
     49c:	7c 01       	movw	r14, r24
			
			if(f32_maxAmount < f32_amount)
     49e:	9b 01       	movw	r18, r22
     4a0:	ac 01       	movw	r20, r24
     4a2:	c5 01       	movw	r24, r10
     4a4:	b4 01       	movw	r22, r8
     4a6:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <__cmpsf2>
     4aa:	88 23       	and	r24, r24
     4ac:	0c f5       	brge	.+66     	; 0x4f0 <AppUSER_startTransaction+0xc8>
			{
				Lcd_printLCD((uint8_t*)"   Max Amount", (uint8_t*)"    Exceeded");
     4ae:	6a ef       	ldi	r22, 0xFA	; 250
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	87 e0       	ldi	r24, 0x07	; 7
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
				
				Delay_ms(500);
     4ba:	24 ef       	ldi	r18, 0xF4	; 244
     4bc:	31 e0       	ldi	r19, 0x01	; 1
     4be:	40 e0       	ldi	r20, 0x00	; 0
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
				
				Lcd_clear();
     4ce:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <Lcd_setCursor>
     4da:	81 30       	cpi	r24, 0x01	; 1
     4dc:	09 f0       	breq	.+2      	; 0x4e0 <AppUSER_startTransaction+0xb8>
     4de:	a2 c0       	rjmp	.+324    	; 0x624 <AppUSER_startTransaction+0x1fc>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     4e0:	85 e1       	ldi	r24, 0x15	; 21
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <Lcd_printString>
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	09 f4       	brne	.+2      	; 0x4ee <AppUSER_startTransaction+0xc6>
     4ec:	90 c0       	rjmp	.+288    	; 0x60e <AppUSER_startTransaction+0x1e6>
     4ee:	9c c0       	rjmp	.+312    	; 0x628 <AppUSER_startTransaction+0x200>
				return APP_STATUS_ERROR_NOK;
			}else
			{
				Lcd_printLCD((uint8_t*)"  Please Wait", (uint8_t*)" Processing....");
     4f0:	62 e2       	ldi	r22, 0x22	; 34
     4f2:	71 e0       	ldi	r23, 0x01	; 1
     4f4:	82 e3       	ldi	r24, 0x32	; 50
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
				Delay_ms(500);
     4fc:	24 ef       	ldi	r18, 0xF4	; 244
     4fe:	31 e0       	ldi	r19, 0x01	; 1
     500:	40 e0       	ldi	r20, 0x00	; 0
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
				if(f32_balance < f32_amount)
     510:	a7 01       	movw	r20, r14
     512:	96 01       	movw	r18, r12
     514:	c3 01       	movw	r24, r6
     516:	b2 01       	movw	r22, r4
     518:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <__cmpsf2>
     51c:	88 23       	and	r24, r24
     51e:	0c f5       	brge	.+66     	; 0x562 <AppUSER_startTransaction+0x13a>
				{
					Lcd_printLCD((uint8_t*)"  Insufficient", (uint8_t*)"      Fund");
     520:	60 e4       	ldi	r22, 0x40	; 64
     522:	71 e0       	ldi	r23, 0x01	; 1
     524:	8b e4       	ldi	r24, 0x4B	; 75
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
					
					Delay_ms(500);
     52c:	24 ef       	ldi	r18, 0xF4	; 244
     52e:	31 e0       	ldi	r19, 0x01	; 1
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
					
					Lcd_clear();
     540:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Lcd_clear>
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <Lcd_setCursor>
     54c:	81 30       	cpi	r24, 0x01	; 1
     54e:	09 f0       	breq	.+2      	; 0x552 <AppUSER_startTransaction+0x12a>
     550:	6d c0       	rjmp	.+218    	; 0x62c <AppUSER_startTransaction+0x204>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     552:	85 e1       	ldi	r24, 0x15	; 21
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <Lcd_printString>
     55a:	81 30       	cpi	r24, 0x01	; 1
     55c:	09 f4       	brne	.+2      	; 0x560 <AppUSER_startTransaction+0x138>
     55e:	57 c0       	rjmp	.+174    	; 0x60e <AppUSER_startTransaction+0x1e6>
     560:	67 c0       	rjmp	.+206    	; 0x630 <AppUSER_startTransaction+0x208>
					return APP_STATUS_ERROR_NOK;
				}else/****************** Transaction Successfull ******************/
				{
					Lcd_printLCD((uint8_t*)"   Successful", (uint8_t*)"  Transaction");
     562:	6a e5       	ldi	r22, 0x5A	; 90
     564:	71 e0       	ldi	r23, 0x01	; 1
     566:	88 e6       	ldi	r24, 0x68	; 104
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
						
					Motor_run(MOTOR_CASH_ID, 100, MOTOR_DIR_CLK_WISE);
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	64 e6       	ldi	r22, 0x64	; 100
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <Motor_run>
					Delay_ms(1000);
     578:	28 ee       	ldi	r18, 0xE8	; 232
     57a:	33 e0       	ldi	r19, 0x03	; 3
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
					Motor_stop(MOTOR_CASH_ID);
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <Motor_stop>
						
					f32_balance -= f32_amount;
     592:	a7 01       	movw	r20, r14
     594:	96 01       	movw	r18, r12
     596:	c3 01       	movw	r24, r6
     598:	b2 01       	movw	r22, r4
     59a:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__subsf3>
     59e:	6b 01       	movw	r12, r22
     5a0:	7c 01       	movw	r14, r24
					EmptyString(gstr_clientdata.au8_Balance);
     5a2:	83 ef       	ldi	r24, 0xF3	; 243
     5a4:	95 e0       	ldi	r25, 0x05	; 5
     5a6:	0e 94 87 19 	call	0x330e	; 0x330e <EmptyString>
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
     5aa:	43 ef       	ldi	r20, 0xF3	; 243
     5ac:	55 e0       	ldi	r21, 0x05	; 5
     5ae:	c7 01       	movw	r24, r14
     5b0:	b6 01       	movw	r22, r12
     5b2:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <floatToString>
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     5b6:	10 91 d9 05 	lds	r17, 0x05D9	; 0x8005d9 <gu8_clientIndex>
     5ba:	12 95       	swap	r17
     5bc:	11 0f       	add	r17, r17
     5be:	10 7e       	andi	r17, 0xE0	; 224
     5c0:	10 5d       	subi	r17, 0xD0	; 208
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
											stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     5c2:	83 ef       	ldi	r24, 0xF3	; 243
     5c4:	95 e0       	ldi	r25, 0x05	; 5
     5c6:	0e 94 48 19 	call	0x3290	; 0x3290 <stringLength>
					f32_balance -= f32_amount;
					EmptyString(gstr_clientdata.au8_Balance);
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
     5ca:	48 2f       	mov	r20, r24
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	63 ef       	ldi	r22, 0xF3	; 243
     5d0:	75 e0       	ldi	r23, 0x05	; 5
     5d2:	81 2f       	mov	r24, r17
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <Eeprom_24_writePacket>
     5da:	81 30       	cpi	r24, 0x01	; 1
     5dc:	59 f5       	brne	.+86     	; 0x634 <AppUSER_startTransaction+0x20c>
											stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
						
					Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
     5de:	63 ef       	ldi	r22, 0xF3	; 243
     5e0:	75 e0       	ldi	r23, 0x05	; 5
     5e2:	86 e7       	ldi	r24, 0x76	; 118
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
					Delay_ms(1000);
     5ea:	28 ee       	ldi	r18, 0xE8	; 232
     5ec:	33 e0       	ldi	r19, 0x03	; 3
     5ee:	40 e0       	ldi	r20, 0x00	; 0
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     5fe:	65 e8       	ldi	r22, 0x85	; 133
     600:	71 e0       	ldi	r23, 0x01	; 1
     602:	84 e9       	ldi	r24, 0x94	; 148
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
			}
		}
		Delay_ms(155);
	}
	
	return APP_STATUS_ERROR_OK;
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	14 c0       	rjmp	.+40     	; 0x636 <AppUSER_startTransaction+0x20e>
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
					break;
				}
			}
		}
		Delay_ms(155);
     60e:	2b e9       	ldi	r18, 0x9B	; 155
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
	}
     622:	2c cf       	rjmp	.-424    	; 0x47c <AppUSER_startTransaction+0x54>
				
				Delay_ms(500);
				
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	07 c0       	rjmp	.+14     	; 0x636 <AppUSER_startTransaction+0x20e>
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	05 c0       	rjmp	.+10     	; 0x636 <AppUSER_startTransaction+0x20e>
					
					Delay_ms(500);
					
					Lcd_clear();
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	03 c0       	rjmp	.+6      	; 0x636 <AppUSER_startTransaction+0x20e>
					if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	01 c0       	rjmp	.+2      	; 0x636 <AppUSER_startTransaction+0x20e>
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
											stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     634:	80 e0       	ldi	r24, 0x00	; 0
		}
		Delay_ms(155);
	}
	
	return APP_STATUS_ERROR_OK;
}
     636:	28 96       	adiw	r28, 0x08	; 8
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	bf 90       	pop	r11
     652:	af 90       	pop	r10
     654:	9f 90       	pop	r9
     656:	8f 90       	pop	r8
     658:	7f 90       	pop	r7
     65a:	6f 90       	pop	r6
     65c:	5f 90       	pop	r5
     65e:	4f 90       	pop	r4
     660:	08 95       	ret

00000662 <AppUSER_checkPin>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the user's input pin if right or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPin(void)
{
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	00 d0       	rcall	.+0      	; 0x66a <AppUSER_checkPin+0x8>
     66a:	00 d0       	rcall	.+0      	; 0x66c <AppUSER_checkPin+0xa>
     66c:	1f 92       	push	r1
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_inputKPD[5] = {0};
     672:	fe 01       	movw	r30, r28
     674:	31 96       	adiw	r30, 0x01	; 1
     676:	85 e0       	ldi	r24, 0x05	; 5
     678:	df 01       	movw	r26, r30
     67a:	1d 92       	st	X+, r1
     67c:	8a 95       	dec	r24
     67e:	e9 f7       	brne	.-6      	; 0x67a <AppUSER_checkPin+0x18>
	enuApp_Status_t KeypdaStatus = 0;
	Kpd_enablePass = 1;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <Kpd_enablePass>
	uint8_t u8_loopCounter = 0;
     686:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		EmptyString(au8_inputKPD);
     688:	ce 01       	movw	r24, r28
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	0e 94 87 19 	call	0x330e	; 0x330e <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     690:	ce 01       	movw	r24, r28
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	0e 94 7f 01 	call	0x2fe	; 0x2fe <AppUSER_ReportKeypad>
			
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     698:	87 30       	cpi	r24, 0x07	; 7
     69a:	09 f0       	breq	.+2      	; 0x69e <AppUSER_checkPin+0x3c>
     69c:	57 c0       	rjmp	.+174    	; 0x74c <AppUSER_checkPin+0xea>
		{
			u8_loopCounter++;
     69e:	1f 5f       	subi	r17, 0xFF	; 255
			if(stringCompare(au8_inputKPD, gstr_userCardData.au8_pinNum) != 1)
     6a0:	6f e0       	ldi	r22, 0x0F	; 15
     6a2:	76 e0       	ldi	r23, 0x06	; 6
     6a4:	ce 01       	movw	r24, r28
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	0e 94 54 19 	call	0x32a8	; 0x32a8 <stringCompare>
     6ac:	81 30       	cpi	r24, 0x01	; 1
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <AppUSER_checkPin+0x50>
     6b0:	43 c0       	rjmp	.+134    	; 0x738 <AppUSER_checkPin+0xd6>
			{
				if(u8_loopCounter == MAX_PIN_TRIAL)
     6b2:	13 30       	cpi	r17, 0x03	; 3
     6b4:	11 f5       	brne	.+68     	; 0x6fa <AppUSER_checkPin+0x98>
				{
					Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)" ");
     6b6:	68 ef       	ldi	r22, 0xF8	; 248
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	82 ea       	ldi	r24, 0xA2	; 162
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
					Delay_ms(1000);
     6c2:	28 ee       	ldi	r18, 0xE8	; 232
     6c4:	33 e0       	ldi	r19, 0x03	; 3
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
					Lcd_printLCD((uint8_t*)"Please Contact", (uint8_t*)"Customer Service");
     6d6:	61 eb       	ldi	r22, 0xB1	; 177
     6d8:	71 e0       	ldi	r23, 0x01	; 1
     6da:	82 ec       	ldi	r24, 0xC2	; 194
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
					Delay_ms(1000);
     6e2:	28 ee       	ldi	r18, 0xE8	; 232
     6e4:	33 e0       	ldi	r19, 0x03	; 3
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
					return APP_STATUS_PIN_NOT_CORRECT;
     6f6:	89 e0       	ldi	r24, 0x09	; 9
     6f8:	37 c0       	rjmp	.+110    	; 0x768 <AppUSER_checkPin+0x106>
				}
				Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)"   Try Again");
     6fa:	61 ed       	ldi	r22, 0xD1	; 209
     6fc:	71 e0       	ldi	r23, 0x01	; 1
     6fe:	82 ea       	ldi	r24, 0xA2	; 162
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
				Delay_ms(500);
     706:	24 ef       	ldi	r18, 0xF4	; 244
     708:	31 e0       	ldi	r19, 0x01	; 1
     70a:	40 e0       	ldi	r20, 0x00	; 0
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
					
				Lcd_clear();
     71a:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <Lcd_setCursor>
     726:	81 30       	cpi	r24, 0x01	; 1
     728:	e1 f4       	brne	.+56     	; 0x762 <AppUSER_checkPin+0x100>
					return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     72a:	8e ed       	ldi	r24, 0xDE	; 222
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <Lcd_printString>
     732:	81 30       	cpi	r24, 0x01	; 1
     734:	59 f0       	breq	.+22     	; 0x74c <AppUSER_checkPin+0xea>
     736:	17 c0       	rjmp	.+46     	; 0x766 <AppUSER_checkPin+0x104>
					return APP_STATUS_ERROR_NOK;
			}else
			{
				Lcd_printLCD((uint8_t*)"  Please Wait", (uint8_t*)" Processing....");
     738:	62 e2       	ldi	r22, 0x22	; 34
     73a:	71 e0       	ldi	r23, 0x01	; 1
     73c:	82 e3       	ldi	r24, 0x32	; 50
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
					Kpd_enablePass = 0;
     744:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <Kpd_enablePass>
				return APP_STATUS_PIN_CORRECT;
     748:	88 e0       	ldi	r24, 0x08	; 8
     74a:	0e c0       	rjmp	.+28     	; 0x768 <AppUSER_checkPin+0x106>
			}
		}
		Delay_ms(155);
     74c:	2b e9       	ldi	r18, 0x9B	; 155
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
	}
     760:	93 cf       	rjmp	.-218    	; 0x688 <AppUSER_checkPin+0x26>
				Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)"   Try Again");
				Delay_ms(500);
					
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	01 c0       	rjmp	.+2      	; 0x768 <AppUSER_checkPin+0x106>
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     766:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		Delay_ms(155);
	}
	Kpd_enablePass = 0;
}
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	08 95       	ret

0000077a <AppUSER_startProcess>:
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to start processing the card.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
     77a:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <Lcd_setCursor>
     786:	81 30       	cpi	r24, 0x01	; 1
     788:	09 f0       	breq	.+2      	; 0x78c <AppUSER_startProcess+0x12>
     78a:	81 c0       	rjmp	.+258    	; 0x88e <__stack+0x2f>
	return APP_STATUS_ERROR_NOK;
	enuApp_Status_t PAN_status = AppUSER_checkPan();
     78c:	0e 94 0b 01 	call	0x216	; 0x216 <AppUSER_checkPan>
	if(PAN_status == APP_STATUS_PAN_NOT_FOUND)
     790:	8b 30       	cpi	r24, 0x0B	; 11
     792:	41 f4       	brne	.+16     	; 0x7a4 <AppUSER_startProcess+0x2a>
	{
		Lcd_printLCD((uint8_t*)"Your Card is not", (uint8_t*)"in the Database");
     794:	6d ee       	ldi	r22, 0xED	; 237
     796:	71 e0       	ldi	r23, 0x01	; 1
     798:	8d ef       	ldi	r24, 0xFD	; 253
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
		return APP_STATUS_PAN_NOT_FOUND;
     7a0:	8b e0       	ldi	r24, 0x0B	; 11
     7a2:	08 95       	ret
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     7a4:	8e ed       	ldi	r24, 0xDE	; 222
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <Lcd_printString>
     7ac:	81 30       	cpi	r24, 0x01	; 1
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <AppUSER_startProcess+0x38>
     7b0:	70 c0       	rjmp	.+224    	; 0x892 <__stack+0x33>
		return APP_STATUS_ERROR_NOK;
	enuApp_Status_t PIN_status = AppUSER_checkPin();
     7b2:	0e 94 31 03 	call	0x662	; 0x662 <AppUSER_checkPin>
	if(PIN_status == APP_STATUS_PIN_NOT_CORRECT)
     7b6:	89 30       	cpi	r24, 0x09	; 9
     7b8:	09 f4       	brne	.+2      	; 0x7bc <AppUSER_startProcess+0x42>
     7ba:	6d c0       	rjmp	.+218    	; 0x896 <__stack+0x37>
	{
		return APP_STATUS_PIN_NOT_CORRECT;
	}else if(PIN_status != APP_STATUS_PIN_CORRECT)
     7bc:	88 30       	cpi	r24, 0x08	; 8
     7be:	09 f0       	breq	.+2      	; 0x7c2 <AppUSER_startProcess+0x48>
     7c0:	6c c0       	rjmp	.+216    	; 0x89a <__stack+0x3b>
		return APP_STATUS_ERROR_NOK;
	
	
	Lcd_printLCD((uint8_t*)"    Welcome", (uint8_t*)"    Customer");
     7c2:	6e e0       	ldi	r22, 0x0E	; 14
     7c4:	72 e0       	ldi	r23, 0x02	; 2
     7c6:	8b e1       	ldi	r24, 0x1B	; 27
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
	Delay_ms(1000);
     7ce:	28 ee       	ldi	r18, 0xE8	; 232
     7d0:	33 e0       	ldi	r19, 0x03	; 3
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
	
	if(gf32_balance > 0)
     7e2:	60 91 d5 05 	lds	r22, 0x05D5	; 0x8005d5 <gf32_balance>
     7e6:	70 91 d6 05 	lds	r23, 0x05D6	; 0x8005d6 <gf32_balance+0x1>
     7ea:	80 91 d7 05 	lds	r24, 0x05D7	; 0x8005d7 <gf32_balance+0x2>
     7ee:	90 91 d8 05 	lds	r25, 0x05D8	; 0x8005d8 <gf32_balance+0x3>
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	a9 01       	movw	r20, r18
     7f8:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__gesf2>
     7fc:	18 16       	cp	r1, r24
     7fe:	cc f4       	brge	.+50     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
	{
		
		Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
     800:	63 ef       	ldi	r22, 0xF3	; 243
     802:	75 e0       	ldi	r23, 0x05	; 5
     804:	86 e7       	ldi	r24, 0x76	; 118
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
		Delay_ms(1000);
		Lcd_printLCD((uint8_t*)"Transaction", (uint8_t*)"Denied");
		Delay_ms(1000);
		return APP_STATUS_ERROR_OK;
	}
	Delay_ms(1000);
     80c:	28 ee       	ldi	r18, 0xE8	; 232
     80e:	33 e0       	ldi	r19, 0x03	; 3
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
	
	Lcd_clear();
     820:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <Lcd_setCursor>
     82c:	81 30       	cpi	r24, 0x01	; 1
     82e:	b9 f5       	brne	.+110    	; 0x89e <__stack+0x3f>
     830:	22 c0       	rjmp	.+68     	; 0x876 <__stack+0x17>
	{
		
		Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
	}else
	{
		Lcd_printLCD((uint8_t*)"You have no", (uint8_t*)"  Balance");
     832:	67 e2       	ldi	r22, 0x27	; 39
     834:	72 e0       	ldi	r23, 0x02	; 2
     836:	81 e3       	ldi	r24, 0x31	; 49
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
		Delay_ms(1000);
     83e:	28 ee       	ldi	r18, 0xE8	; 232
     840:	33 e0       	ldi	r19, 0x03	; 3
     842:	40 e0       	ldi	r20, 0x00	; 0
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
		Lcd_printLCD((uint8_t*)"Transaction", (uint8_t*)"Denied");
     852:	6d e3       	ldi	r22, 0x3D	; 61
     854:	72 e0       	ldi	r23, 0x02	; 2
     856:	8c e5       	ldi	r24, 0x5C	; 92
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
		Delay_ms(1000);
     85e:	28 ee       	ldi	r18, 0xE8	; 232
     860:	33 e0       	ldi	r19, 0x03	; 3
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
		return APP_STATUS_ERROR_OK;
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	08 95       	ret
	Delay_ms(1000);
	
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     876:	85 e1       	ldi	r24, 0x15	; 21
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <Lcd_printString>
     87e:	81 30       	cpi	r24, 0x01	; 1
     880:	81 f4       	brne	.+32     	; 0x8a2 <__stack+0x43>
		return APP_STATUS_ERROR_NOK;
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
     882:	0e 94 14 02 	call	0x428	; 0x428 <AppUSER_startTransaction>
     886:	81 30       	cpi	r24, 0x01	; 1
     888:	69 f0       	breq	.+26     	; 0x8a4 <__stack+0x45>
		return APP_STATUS_ERROR_NOK;
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	08 95       	ret
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	08 95       	ret
		Lcd_printLCD((uint8_t*)"Your Card is not", (uint8_t*)"in the Database");
		return APP_STATUS_PAN_NOT_FOUND;
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	08 95       	ret
	enuApp_Status_t PIN_status = AppUSER_checkPin();
	if(PIN_status == APP_STATUS_PIN_NOT_CORRECT)
	{
		return APP_STATUS_PIN_NOT_CORRECT;
     896:	89 e0       	ldi	r24, 0x09	; 9
     898:	08 95       	ret
	}else if(PIN_status != APP_STATUS_PIN_CORRECT)
		return APP_STATUS_ERROR_NOK;
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	08 95       	ret
	}
	Delay_ms(1000);
	
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	08 95       	ret
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     8a2:	80 e0       	ldi	r24, 0x00	; 0
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	return APP_STATUS_ERROR_OK;
}
     8a4:	08 95       	ret

000008a6 <AppUSER_getCardData>:
* Parameters (out): pstr_CardData - Structure to save the card's data in.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the Card data Struct
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_getCardData(strCardData_t* pstr_CardData, uint8_t *pu8_dataString)
{
     8a6:	ac 01       	movw	r20, r24
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
     8a8:	20 e0       	ldi	r18, 0x00	; 0
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	0a c0       	rjmp	.+20     	; 0x8c2 <AppUSER_getCardData+0x1c>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     8ae:	fb 01       	movw	r30, r22
     8b0:	e9 0f       	add	r30, r25
     8b2:	f1 1d       	adc	r31, r1
     8b4:	80 81       	ld	r24, Z
     8b6:	fa 01       	movw	r30, r20
     8b8:	e2 0f       	add	r30, r18
     8ba:	f1 1d       	adc	r31, r1
     8bc:	80 83       	st	Z, r24
		u8_dataIndex++;
     8be:	2f 5f       	subi	r18, 0xFF	; 255
{
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     8c0:	9f 5f       	subi	r25, 0xFF	; 255
     8c2:	9a 30       	cpi	r25, 0x0A	; 10
     8c4:	a0 f3       	brcs	.-24     	; 0x8ae <AppUSER_getCardData+0x8>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
     8c6:	fa 01       	movw	r30, r20
     8c8:	e2 0f       	add	r30, r18
     8ca:	f1 1d       	adc	r31, r1
     8cc:	10 82       	st	Z, r1
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
     8ce:	20 e0       	ldi	r18, 0x00	; 0
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     8d0:	9b e0       	ldi	r25, 0x0B	; 11
     8d2:	0a c0       	rjmp	.+20     	; 0x8e8 <AppUSER_getCardData+0x42>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     8d4:	fb 01       	movw	r30, r22
     8d6:	e9 0f       	add	r30, r25
     8d8:	f1 1d       	adc	r31, r1
     8da:	80 81       	ld	r24, Z
     8dc:	fa 01       	movw	r30, r20
     8de:	e2 0f       	add	r30, r18
     8e0:	f1 1d       	adc	r31, r1
     8e2:	82 87       	std	Z+10, r24	; 0x0a
		u8_dataIndex++;
     8e4:	2f 5f       	subi	r18, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     8e6:	9f 5f       	subi	r25, 0xFF	; 255
     8e8:	94 31       	cpi	r25, 0x14	; 20
     8ea:	a0 f3       	brcs	.-24     	; 0x8d4 <AppUSER_getCardData+0x2e>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
     8ec:	fa 01       	movw	r30, r20
     8ee:	e2 0f       	add	r30, r18
     8f0:	f1 1d       	adc	r31, r1
     8f2:	12 86       	std	Z+10, r1	; 0x0a
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
     8f4:	90 e0       	ldi	r25, 0x00	; 0
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     8f6:	85 e1       	ldi	r24, 0x15	; 21
     8f8:	0a c0       	rjmp	.+20     	; 0x90e <AppUSER_getCardData+0x68>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     8fa:	fb 01       	movw	r30, r22
     8fc:	e8 0f       	add	r30, r24
     8fe:	f1 1d       	adc	r31, r1
     900:	20 81       	ld	r18, Z
     902:	fa 01       	movw	r30, r20
     904:	e9 0f       	add	r30, r25
     906:	f1 1d       	adc	r31, r1
     908:	24 8b       	std	Z+20, r18	; 0x14
		u8_dataIndex++;
     90a:	9f 5f       	subi	r25, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     90c:	8f 5f       	subi	r24, 0xFF	; 255
     90e:	89 31       	cpi	r24, 0x19	; 25
     910:	a0 f3       	brcs	.-24     	; 0x8fa <AppUSER_getCardData+0x54>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_pinNum[u8_dataIndex] = '\0';
     912:	fa 01       	movw	r30, r20
     914:	e9 0f       	add	r30, r25
     916:	f1 1d       	adc	r31, r1
     918:	14 8a       	std	Z+20, r1	; 0x14
	return APP_STATUS_ERROR_OK;
}
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	08 95       	ret

0000091e <AppUSER_insertCard>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to run the Card Inserting Process.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_insertCard(void)
{
     91e:	1f 93       	push	r17
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
     928:	65 97       	sbiw	r28, 0x15	; 21
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	de bf       	out	0x3e, r29	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	cd bf       	out	0x3d, r28	; 61
	gu8_USER_Mode_State = USER_BUSY;
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <gu8_USER_Mode_State>
	uint8_t u8_buttonVal = PIN_LOW;
     93a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     93c:	fe 01       	movw	r30, r28
     93e:	32 96       	adiw	r30, 0x02	; 2
     940:	84 e1       	ldi	r24, 0x14	; 20
     942:	df 01       	movw	r26, r30
     944:	1d 92       	st	X+, r1
     946:	8a 95       	dec	r24
     948:	e9 f7       	brne	.-6      	; 0x944 <AppUSER_insertCard+0x26>
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
     94a:	64 e4       	ldi	r22, 0x44	; 68
     94c:	72 e0       	ldi	r23, 0x02	; 2
     94e:	83 e5       	ldi	r24, 0x53	; 83
     950:	92 e0       	ldi	r25, 0x02	; 2
     952:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
	while(u8_buttonVal == PIN_LOW)
     956:	0f c0       	rjmp	.+30     	; 0x976 <AppUSER_insertCard+0x58>
	{
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	0e 94 fe 09 	call	0x13fc	; 0x13fc <Button_updateState>
     95e:	81 30       	cpi	r24, 0x01	; 1
     960:	09 f0       	breq	.+2      	; 0x964 <AppUSER_insertCard+0x46>
     962:	85 c0       	rjmp	.+266    	; 0xa6e <AppUSER_insertCard+0x150>
			return APP_STATUS_ERROR_NOK;
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
     964:	be 01       	movw	r22, r28
     966:	6f 5f       	subi	r22, 0xFF	; 255
     968:	7f 4f       	sbci	r23, 0xFF	; 255
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Button_getState>
     970:	81 30       	cpi	r24, 0x01	; 1
     972:	09 f0       	breq	.+2      	; 0x976 <AppUSER_insertCard+0x58>
     974:	7e c0       	rjmp	.+252    	; 0xa72 <AppUSER_insertCard+0x154>
	gu8_USER_Mode_State = USER_BUSY;
	uint8_t u8_buttonVal = PIN_LOW;
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
	while(u8_buttonVal == PIN_LOW)
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	88 23       	and	r24, r24
     97a:	71 f3       	breq	.-36     	; 0x958 <AppUSER_insertCard+0x3a>
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	}
	Lcd_printLCD((uint8_t*)"Button Pressed",(uint8_t*)"Receiving Data");
     97c:	64 e6       	ldi	r22, 0x64	; 100
     97e:	72 e0       	ldi	r23, 0x02	; 2
     980:	83 e7       	ldi	r24, 0x73	; 115
     982:	92 e0       	ldi	r25, 0x02	; 2
     984:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	82 e1       	ldi	r24, 0x12	; 18
     98c:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
	
	while (au8_inputString[0] != '#')
     990:	3f c0       	rjmp	.+126    	; 0xa10 <AppUSER_insertCard+0xf2>
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
     992:	6c e1       	ldi	r22, 0x1C	; 28
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	ce 01       	movw	r24, r28
     998:	02 96       	adiw	r24, 0x02	; 2
     99a:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <Spi_SlaveReceivePacket>
     99e:	81 30       	cpi	r24, 0x01	; 1
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <AppUSER_insertCard+0x86>
     9a2:	69 c0       	rjmp	.+210    	; 0xa76 <AppUSER_insertCard+0x158>
			return APP_STATUS_ERROR_NOK;
		if((au8_inputString[0] == '*') && (au8_inputString[1] == '*'))
     9a4:	8a 81       	ldd	r24, Y+2	; 0x02
     9a6:	8a 32       	cpi	r24, 0x2A	; 42
     9a8:	99 f5       	brne	.+102    	; 0xa10 <AppUSER_insertCard+0xf2>
     9aa:	8b 81       	ldd	r24, Y+3	; 0x03
     9ac:	8a 32       	cpi	r24, 0x2A	; 42
     9ae:	81 f5       	brne	.+96     	; 0xa10 <AppUSER_insertCard+0xf2>
		{
			Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	82 e1       	ldi	r24, 0x12	; 18
     9b4:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
			Lcd_printLCD((uint8_t*)"Card is not",(uint8_t*)"Programmed");
     9b8:	62 e8       	ldi	r22, 0x82	; 130
     9ba:	72 e0       	ldi	r23, 0x02	; 2
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	92 e0       	ldi	r25, 0x02	; 2
     9c0:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
			Delay_ms(1000);
     9c4:	28 ee       	ldi	r18, 0xE8	; 232
     9c6:	33 e0       	ldi	r19, 0x03	; 3
     9c8:	40 e0       	ldi	r20, 0x00	; 0
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
			Lcd_printLCD((uint8_t*)"Please Contact",(uint8_t*)"Customer Service");
     9d8:	61 eb       	ldi	r22, 0xB1	; 177
     9da:	71 e0       	ldi	r23, 0x01	; 1
     9dc:	82 ec       	ldi	r24, 0xC2	; 194
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
			Delay_ms(1000);
     9e4:	28 ee       	ldi	r18, 0xE8	; 232
     9e6:	33 e0       	ldi	r19, 0x03	; 3
     9e8:	40 e0       	ldi	r20, 0x00	; 0
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
			Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     9f8:	65 e8       	ldi	r22, 0x85	; 133
     9fa:	71 e0       	ldi	r23, 0x01	; 1
     9fc:	84 e9       	ldi	r24, 0x94	; 148
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
			EmptyString(au8_inputString);
     a04:	ce 01       	movw	r24, r28
     a06:	02 96       	adiw	r24, 0x02	; 2
     a08:	0e 94 87 19 	call	0x330e	; 0x330e <EmptyString>
			return APP_STATUS_ERROR_OK;
     a0c:	11 e0       	ldi	r17, 0x01	; 1
     a0e:	36 c0       	rjmp	.+108    	; 0xa7c <AppUSER_insertCard+0x15e>
			return APP_STATUS_ERROR_NOK;
	}
	Lcd_printLCD((uint8_t*)"Button Pressed",(uint8_t*)"Receiving Data");
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
	
	while (au8_inputString[0] != '#')
     a10:	8a 81       	ldd	r24, Y+2	; 0x02
     a12:	83 32       	cpi	r24, 0x23	; 35
     a14:	09 f0       	breq	.+2      	; 0xa18 <AppUSER_insertCard+0xfa>
     a16:	bd cf       	rjmp	.-134    	; 0x992 <AppUSER_insertCard+0x74>
			return APP_STATUS_ERROR_OK;
		}
		
	}
	
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     a18:	61 e0       	ldi	r22, 0x01	; 1
     a1a:	82 e1       	ldi	r24, 0x12	; 18
     a1c:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
	if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
     a20:	be 01       	movw	r22, r28
     a22:	6e 5f       	subi	r22, 0xFE	; 254
     a24:	7f 4f       	sbci	r23, 0xFF	; 255
     a26:	8b ef       	ldi	r24, 0xFB	; 251
     a28:	95 e0       	ldi	r25, 0x05	; 5
     a2a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <AppUSER_getCardData>
     a2e:	18 2f       	mov	r17, r24
     a30:	81 30       	cpi	r24, 0x01	; 1
     a32:	19 f5       	brne	.+70     	; 0xa7a <AppUSER_insertCard+0x15c>
		return APP_STATUS_ERROR_NOK;
		
	enuApp_Status_t processState = AppUSER_startProcess(&gstr_userCardData);
     a34:	8b ef       	ldi	r24, 0xFB	; 251
     a36:	95 e0       	ldi	r25, 0x05	; 5
     a38:	0e 94 bd 03 	call	0x77a	; 0x77a <AppUSER_startProcess>
	if((processState == APP_STATUS_PAN_NOT_FOUND) || (processState == APP_STATUS_PIN_NOT_CORRECT))
     a3c:	8b 30       	cpi	r24, 0x0B	; 11
     a3e:	11 f0       	breq	.+4      	; 0xa44 <AppUSER_insertCard+0x126>
     a40:	89 30       	cpi	r24, 0x09	; 9
     a42:	89 f4       	brne	.+34     	; 0xa66 <AppUSER_insertCard+0x148>
	{
		Delay_ms(1000);
     a44:	28 ee       	ldi	r18, 0xE8	; 232
     a46:	33 e0       	ldi	r19, 0x03	; 3
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     a58:	65 e8       	ldi	r22, 0x85	; 133
     a5a:	71 e0       	ldi	r23, 0x01	; 1
     a5c:	84 e9       	ldi	r24, 0x94	; 148
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
     a64:	0b c0       	rjmp	.+22     	; 0xa7c <AppUSER_insertCard+0x15e>
	}else if (processState != APP_STATUS_ERROR_OK)
     a66:	81 30       	cpi	r24, 0x01	; 1
     a68:	49 f0       	breq	.+18     	; 0xa7c <AppUSER_insertCard+0x15e>
		return APP_STATUS_ERROR_NOK;
     a6a:	10 e0       	ldi	r17, 0x00	; 0
     a6c:	07 c0       	rjmp	.+14     	; 0xa7c <AppUSER_insertCard+0x15e>
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
	while(u8_buttonVal == PIN_LOW)
	{
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a6e:	10 e0       	ldi	r17, 0x00	; 0
     a70:	05 c0       	rjmp	.+10     	; 0xa7c <AppUSER_insertCard+0x15e>
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a72:	10 e0       	ldi	r17, 0x00	; 0
     a74:	03 c0       	rjmp	.+6      	; 0xa7c <AppUSER_insertCard+0x15e>
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
	
	while (au8_inputString[0] != '#')
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a76:	10 e0       	ldi	r17, 0x00	; 0
     a78:	01 c0       	rjmp	.+2      	; 0xa7c <AppUSER_insertCard+0x15e>
		
	}
	
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
	if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a7a:	10 e0       	ldi	r17, 0x00	; 0
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
	}else if (processState != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     a7c:	81 2f       	mov	r24, r17
     a7e:	65 96       	adiw	r28, 0x15	; 21
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	08 95       	ret

00000a92 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
     a92:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enuCurrentAppStatus>
     a96:	84 30       	cpi	r24, 0x04	; 4
     a98:	09 f4       	brne	.+2      	; 0xa9c <App_init+0xa>
     a9a:	bd c0       	rjmp	.+378    	; 0xc16 <App_init+0x184>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(LCD_STATUS_ERROR_OK != Lcd_init())
     a9c:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <Lcd_init>
     aa0:	81 30       	cpi	r24, 0x01	; 1
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <App_init+0x14>
     aa4:	97 c0       	rjmp	.+302    	; 0xbd4 <App_init+0x142>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
     aa6:	0e 94 66 10 	call	0x20cc	; 0x20cc <Terminal_init>
     aaa:	81 30       	cpi	r24, 0x01	; 1
     aac:	09 f0       	breq	.+2      	; 0xab0 <App_init+0x1e>
     aae:	94 c0       	rjmp	.+296    	; 0xbd8 <App_init+0x146>
		return APP_STATUS_ERROR_NOK;
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
     ab0:	0e 94 80 0a 	call	0x1500	; 0x1500 <Eeprom_24_init>
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	09 f0       	breq	.+2      	; 0xaba <App_init+0x28>
     ab8:	91 c0       	rjmp	.+290    	; 0xbdc <App_init+0x14a>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
     aba:	0e 94 c6 18 	call	0x318c	; 0x318c <Spi_init>
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	09 f0       	breq	.+2      	; 0xac4 <App_init+0x32>
     ac2:	8e c0       	rjmp	.+284    	; 0xbe0 <App_init+0x14e>
		return APP_STATUS_ERROR_NOK;
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
     ac4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Keypad_init>
     ac8:	81 30       	cpi	r24, 0x01	; 1
     aca:	09 f0       	breq	.+2      	; 0xace <App_init+0x3c>
     acc:	8b c0       	rjmp	.+278    	; 0xbe4 <App_init+0x152>
		return APP_STATUS_ERROR_NOK;
	if(LM35_STATUS_ERROR_OK != LM35_init())
     ace:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LM35_init>
     ad2:	81 30       	cpi	r24, 0x01	; 1
     ad4:	09 f0       	breq	.+2      	; 0xad8 <App_init+0x46>
     ad6:	88 c0       	rjmp	.+272    	; 0xbe8 <App_init+0x156>
		return APP_STATUS_ERROR_NOK;
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
     ad8:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <Motor_init>
     adc:	81 30       	cpi	r24, 0x01	; 1
     ade:	09 f0       	breq	.+2      	; 0xae2 <App_init+0x50>
     ae0:	85 c0       	rjmp	.+266    	; 0xbec <App_init+0x15a>
		return APP_STATUS_ERROR_NOK;
	if(BTTN_STATUS_ERROR_OK != Button_init())
     ae2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <Button_init>
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	09 f0       	breq	.+2      	; 0xaec <App_init+0x5a>
     aea:	82 c0       	rjmp	.+260    	; 0xbf0 <App_init+0x15e>
	/* Only for Testing */
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xAA) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
     aec:	88 ea       	ldi	r24, 0xA8	; 168
     aee:	95 e0       	ldi	r25, 0x05	; 5
     af0:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <Lcd_printString>
     af4:	81 30       	cpi	r24, 0x01	; 1
     af6:	09 f0       	breq	.+2      	; 0xafa <App_init+0x68>
     af8:	7d c0       	rjmp	.+250    	; 0xbf4 <App_init+0x162>
		return APP_STATUS_ERROR_NOK;
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
     afa:	8a e9       	ldi	r24, 0x9A	; 154
     afc:	95 e0       	ldi	r25, 0x05	; 5
     afe:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	09 f0       	breq	.+2      	; 0xb08 <App_init+0x76>
     b06:	78 c0       	rjmp	.+240    	; 0xbf8 <App_init+0x166>
		return APP_STATUS_ERROR_NOK;
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
     b08:	68 ee       	ldi	r22, 0xE8	; 232
     b0a:	75 e0       	ldi	r23, 0x05	; 5
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 cb 0a 	call	0x1596	; 0x1596 <Eeprom_24_readByte>
     b14:	81 30       	cpi	r24, 0x01	; 1
     b16:	09 f0       	breq	.+2      	; 0xb1a <App_init+0x88>
     b18:	71 c0       	rjmp	.+226    	; 0xbfc <App_init+0x16a>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     b1a:	2a e0       	ldi	r18, 0x0A	; 10
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
	
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
     b2e:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <gu8_initData>
     b32:	8a 3a       	cpi	r24, 0xAA	; 170
     b34:	f9 f0       	breq	.+62     	; 0xb74 <App_init+0xe2>
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
     b36:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
     b3a:	82 eb       	ldi	r24, 0xB2	; 178
     b3c:	95 e0       	ldi	r25, 0x05	; 5
     b3e:	0e 94 48 19 	call	0x3290	; 0x3290 <stringLength>
	
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
     b42:	48 2f       	mov	r20, r24
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	62 eb       	ldi	r22, 0xB2	; 178
     b48:	75 e0       	ldi	r23, 0x05	; 5
     b4a:	8b e0       	ldi	r24, 0x0B	; 11
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <Eeprom_24_writePacket>
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	09 f0       	breq	.+2      	; 0xb58 <App_init+0xc6>
     b56:	54 c0       	rjmp	.+168    	; 0xc00 <App_init+0x16e>
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		/* Lock the ATM For the User */
		Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
     b58:	6d e8       	ldi	r22, 0x8D	; 141
     b5a:	72 e0       	ldi	r23, 0x02	; 2
     b5c:	8e e9       	ldi	r24, 0x9E	; 158
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
		
		if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     b64:	8f ea       	ldi	r24, 0xAF	; 175
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	09 f0       	breq	.+2      	; 0xb72 <App_init+0xe0>
     b70:	49 c0       	rjmp	.+146    	; 0xc04 <App_init+0x172>
     b72:	2b c0       	rjmp	.+86     	; 0xbca <App_init+0x138>
			return APP_STATUS_ERROR_NOK;
	}else
	{ /* Case it was previously registered == Contains data in the DB */
		gu8_ATMMode = ATM_MODE_USER;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
     b7a:	48 e0       	ldi	r20, 0x08	; 8
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	6a ed       	ldi	r22, 0xDA	; 218
     b80:	75 e0       	ldi	r23, 0x05	; 5
     b82:	83 e0       	ldi	r24, 0x03	; 3
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 57 0c 	call	0x18ae	; 0x18ae <Eeprom_24_readPacket>
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	e9 f5       	brne	.+122    	; 0xc08 <App_init+0x176>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     b8e:	67 ee       	ldi	r22, 0xE7	; 231
     b90:	75 e0       	ldi	r23, 0x05	; 5
     b92:	82 e0       	ldi	r24, 0x02	; 2
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 cb 0a 	call	0x1596	; 0x1596 <Eeprom_24_readByte>
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	b9 f5       	brne	.+110    	; 0xc0c <App_init+0x17a>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
     b9e:	45 e0       	ldi	r20, 0x05	; 5
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	62 ee       	ldi	r22, 0xE2	; 226
     ba4:	75 e0       	ldi	r23, 0x05	; 5
     ba6:	8b e0       	ldi	r24, 0x0B	; 11
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 57 0c 	call	0x18ae	; 0x18ae <Eeprom_24_readPacket>
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	79 f5       	brne	.+94     	; 0xc10 <App_init+0x17e>
			return APP_STATUS_ERROR_NOK;
		
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     bb2:	65 e8       	ldi	r22, 0x85	; 133
     bb4:	71 e0       	ldi	r23, 0x01	; 1
     bb6:	84 e9       	ldi	r24, 0x94	; 148
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
			
		if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     bbe:	82 ec       	ldi	r24, 0xC2	; 194
     bc0:	92 e0       	ldi	r25, 0x02	; 2
     bc2:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	29 f5       	brne	.+74     	; 0xc14 <App_init+0x182>
			return APP_STATUS_ERROR_NOK;
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     bca:	84 e0       	ldi	r24, 0x04	; 4
     bcc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enuCurrentAppStatus>
	return APP_STATUS_ERROR_OK;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(LCD_STATUS_ERROR_OK != Lcd_init())
		return APP_STATUS_ERROR_NOK;
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	08 95       	ret
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	08 95       	ret
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	08 95       	ret
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	08 95       	ret
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
		return APP_STATUS_ERROR_NOK;
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	08 95       	ret
	if(LM35_STATUS_ERROR_OK != LM35_init())
		return APP_STATUS_ERROR_NOK;
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	08 95       	ret
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
		return APP_STATUS_ERROR_NOK;
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	08 95       	ret
	if(BTTN_STATUS_ERROR_OK != Button_init())
		return APP_STATUS_ERROR_NOK;
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	08 95       	ret
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xAA) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	08 95       	ret
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	08 95       	ret
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	08 95       	ret
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	08 95       	ret
		/* Lock the ATM For the User */
		Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
		
		if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	08 95       	ret
	}else
	{ /* Case it was previously registered == Contains data in the DB */
		gu8_ATMMode = ATM_MODE_USER;
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	08 95       	ret
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	08 95       	ret
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	08 95       	ret
		
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
			
		if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     c14:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     c16:	08 95       	ret

00000c18 <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	64 97       	sbiw	r28, 0x14	; 20
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     c32:	ce 01       	movw	r24, r28
     c34:	01 96       	adiw	r24, 0x01	; 1
     c36:	24 e1       	ldi	r18, 0x14	; 20
     c38:	fc 01       	movw	r30, r24
     c3a:	11 92       	st	Z+, r1
     c3c:	2a 95       	dec	r18
     c3e:	e9 f7       	brne	.-6      	; 0xc3a <App_ReportTerminal+0x22>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
     c40:	0e 94 96 10 	call	0x212c	; 0x212c <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
     c44:	85 30       	cpi	r24, 0x05	; 5
     c46:	39 f4       	brne	.+14     	; 0xc56 <App_ReportTerminal+0x3e>
	{
		stringCopy(au8_inputString, pu8_data);
     c48:	b8 01       	movw	r22, r16
     c4a:	ce 01       	movw	r24, r28
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	0e 94 93 19 	call	0x3326	; 0x3326 <stringCopy>
		return APP_STATUS_ERROR_OK;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	05 c0       	rjmp	.+10     	; 0xc60 <App_ReportTerminal+0x48>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	11 f0       	breq	.+4      	; 0xc5e <App_ReportTerminal+0x46>
		return APP_STATUS_ERROR_NOK;
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	01 c0       	rjmp	.+2      	; 0xc60 <App_ReportTerminal+0x48>
	return APP_STATUS_NO_OP;
     c5e:	86 e0       	ldi	r24, 0x06	; 6
}
     c60:	64 96       	adiw	r28, 0x14	; 20
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	08 95       	ret

00000c76 <AppADMIN_getInput>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the ADMIN Input Choice.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getInput(uint8_t* pu8_data)
{
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nYour Input: ") != TERMINAL_STATUS_ERROR_OK)
     c7c:	8e ec       	ldi	r24, 0xCE	; 206
     c7e:	92 e0       	ldi	r25, 0x02	; 2
     c80:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
     c84:	81 30       	cpi	r24, 0x01	; 1
     c86:	c1 f4       	brne	.+48     	; 0xcb8 <AppADMIN_getInput+0x42>
			return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     c88:	ce 01       	movw	r24, r28
     c8a:	0e 94 0c 06 	call	0xc18	; 0xc18 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	29 f0       	breq	.+10     	; 0xc9c <AppADMIN_getInput+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     c92:	11 f0       	breq	.+4      	; 0xc98 <AppADMIN_getInput+0x22>
     c94:	86 30       	cpi	r24, 0x06	; 6
     c96:	91 f4       	brne	.+36     	; 0xcbc <AppADMIN_getInput+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     c98:	86 30       	cpi	r24, 0x06	; 6
     c9a:	b1 f3       	breq	.-20     	; 0xc88 <AppADMIN_getInput+0x12>
		
		if (pu8_data[1] == '\0')
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	88 23       	and	r24, r24
     ca0:	79 f0       	breq	.+30     	; 0xcc0 <AppADMIN_getInput+0x4a>
		break;
		EmptyString(pu8_data);
     ca2:	ce 01       	movw	r24, r28
     ca4:	0e 94 87 19 	call	0x330e	; 0x330e <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
     ca8:	8c ed       	ldi	r24, 0xDC	; 220
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	21 f3       	breq	.-56     	; 0xc7c <AppADMIN_getInput+0x6>
		return APP_STATUS_ERROR_NOK;
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	05 c0       	rjmp	.+10     	; 0xcc2 <AppADMIN_getInput+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nYour Input: ") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	03 c0       	rjmp	.+6      	; 0xcc2 <AppADMIN_getInput+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <AppADMIN_getInput+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     cc0:	81 e0       	ldi	r24, 0x01	; 1
}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <AppADMIN_getnewMaxAmount>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getnewMaxAmount(uint8_t* pu8_data)
{
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nMax Amount: ") != TERMINAL_STATUS_ERROR_OK)
     cce:	86 e0       	ldi	r24, 0x06	; 6
     cd0:	93 e0       	ldi	r25, 0x03	; 3
     cd2:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	d9 f4       	brne	.+54     	; 0xd10 <AppADMIN_getnewMaxAmount+0x48>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     cda:	ce 01       	movw	r24, r28
     cdc:	0e 94 0c 06 	call	0xc18	; 0xc18 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	29 f0       	breq	.+10     	; 0xcee <AppADMIN_getnewMaxAmount+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     ce4:	11 f0       	breq	.+4      	; 0xcea <AppADMIN_getnewMaxAmount+0x22>
     ce6:	86 30       	cpi	r24, 0x06	; 6
     ce8:	a9 f4       	brne	.+42     	; 0xd14 <AppADMIN_getnewMaxAmount+0x4c>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     cea:	86 30       	cpi	r24, 0x06	; 6
     cec:	b1 f3       	breq	.-20     	; 0xcda <AppADMIN_getnewMaxAmount+0x12>
		
		if ((pu8_data[7] == '\0') && (pu8_data[4] == '.'))
     cee:	8f 81       	ldd	r24, Y+7	; 0x07
     cf0:	81 11       	cpse	r24, r1
     cf2:	03 c0       	rjmp	.+6      	; 0xcfa <AppADMIN_getnewMaxAmount+0x32>
     cf4:	8c 81       	ldd	r24, Y+4	; 0x04
     cf6:	8e 32       	cpi	r24, 0x2E	; 46
     cf8:	79 f0       	breq	.+30     	; 0xd18 <AppADMIN_getnewMaxAmount+0x50>
		break;
		EmptyString(pu8_data);
     cfa:	ce 01       	movw	r24, r28
     cfc:	0e 94 87 19 	call	0x330e	; 0x330e <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
     d00:	84 e1       	ldi	r24, 0x14	; 20
     d02:	93 e0       	ldi	r25, 0x03	; 3
     d04:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	09 f3       	breq	.-62     	; 0xcce <AppADMIN_getnewMaxAmount+0x6>
		return APP_STATUS_ERROR_NOK;
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <AppADMIN_getnewMaxAmount+0x52>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nMax Amount: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <AppADMIN_getnewMaxAmount+0x52>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	01 c0       	rjmp	.+2      	; 0xd1a <AppADMIN_getnewMaxAmount+0x52>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     d18:	81 e0       	ldi	r24, 0x01	; 1
}
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <AppADMIN_getCustomerPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerPAN(uint8_t* pu8_data)
{
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nPAN: ") != TERMINAL_STATUS_ERROR_OK)
     d28:	85 e4       	ldi	r24, 0x45	; 69
     d2a:	93 e0       	ldi	r25, 0x03	; 3
     d2c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	99 f5       	brne	.+102    	; 0xd9a <AppADMIN_getCustomerPAN+0x7a>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     d34:	ce 01       	movw	r24, r28
     d36:	0e 94 0c 06 	call	0xc18	; 0xc18 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	29 f0       	breq	.+10     	; 0xd48 <AppADMIN_getCustomerPAN+0x28>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     d3e:	11 f0       	breq	.+4      	; 0xd44 <AppADMIN_getCustomerPAN+0x24>
     d40:	86 30       	cpi	r24, 0x06	; 6
     d42:	69 f5       	brne	.+90     	; 0xd9e <AppADMIN_getCustomerPAN+0x7e>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     d44:	86 30       	cpi	r24, 0x06	; 6
     d46:	b1 f3       	breq	.-20     	; 0xd34 <AppADMIN_getCustomerPAN+0x14>
		
		if(stringLength(pu8_data) != MAX_PAN_LENGTH+1)
     d48:	ce 01       	movw	r24, r28
     d4a:	0e 94 48 19 	call	0x3290	; 0x3290 <stringLength>
     d4e:	8a 30       	cpi	r24, 0x0A	; 10
     d50:	e9 f0       	breq	.+58     	; 0xd8c <AppADMIN_getCustomerPAN+0x6c>
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     d52:	8c e4       	ldi	r24, 0x4C	; 76
     d54:	93 e0       	ldi	r25, 0x03	; 3
     d56:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	11 f5       	brne	.+68     	; 0xda2 <AppADMIN_getCustomerPAN+0x82>
			return APP_STATUS_ERROR_NOK;
			EmptyString(pu8_data);
     d5e:	ce 01       	movw	r24, r28
     d60:	0e 94 87 19 	call	0x330e	; 0x330e <EmptyString>
			continue;
     d64:	e1 cf       	rjmp	.-62     	; 0xd28 <AppADMIN_getCustomerPAN+0x8>
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
     d66:	fe 01       	movw	r30, r28
     d68:	e1 0f       	add	r30, r17
     d6a:	f1 1d       	adc	r31, r1
     d6c:	80 81       	ld	r24, Z
     d6e:	80 53       	subi	r24, 0x30	; 48
     d70:	8a 30       	cpi	r24, 0x0A	; 10
     d72:	50 f0       	brcs	.+20     	; 0xd88 <AppADMIN_getCustomerPAN+0x68>
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
     d74:	8c e4       	ldi	r24, 0x4C	; 76
     d76:	93 e0       	ldi	r25, 0x03	; 3
     d78:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	99 f4       	brne	.+38     	; 0xda6 <AppADMIN_getCustomerPAN+0x86>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
     d80:	ce 01       	movw	r24, r28
     d82:	0e 94 87 19 	call	0x330e	; 0x330e <EmptyString>
				break;
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <AppADMIN_getCustomerPAN+0x72>
			EmptyString(pu8_data);
			continue;
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
     d88:	1f 5f       	subi	r17, 0xFF	; 255
     d8a:	01 c0       	rjmp	.+2      	; 0xd8e <AppADMIN_getCustomerPAN+0x6e>
     d8c:	10 e0       	ldi	r17, 0x00	; 0
     d8e:	19 30       	cpi	r17, 0x09	; 9
     d90:	50 f3       	brcs	.-44     	; 0xd66 <AppADMIN_getCustomerPAN+0x46>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
				break;
			}
		}
		if (u8_index == MAX_PAN_LENGTH)
     d92:	19 30       	cpi	r17, 0x09	; 9
     d94:	49 f6       	brne	.-110    	; 0xd28 <AppADMIN_getCustomerPAN+0x8>
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	07 c0       	rjmp	.+14     	; 0xda8 <AppADMIN_getCustomerPAN+0x88>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nPAN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	05 c0       	rjmp	.+10     	; 0xda8 <AppADMIN_getCustomerPAN+0x88>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	03 c0       	rjmp	.+6      	; 0xda8 <AppADMIN_getCustomerPAN+0x88>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringLength(pu8_data) != MAX_PAN_LENGTH+1)
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <AppADMIN_getCustomerPAN+0x88>
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r\n") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     da6:	80 e0       	ldi	r24, 0x00	; 0
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	08 95       	ret

00000db0 <AppADMIN_getCustomerBalance>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Balance by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the balance of the customer.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerBalance(uint8_t* pu8_data)
{
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nBalance: ") != TERMINAL_STATUS_ERROR_OK)
     db8:	8f e7       	ldi	r24, 0x7F	; 127
     dba:	93 e0       	ldi	r25, 0x03	; 3
     dbc:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	b1 f5       	brne	.+108    	; 0xe30 <AppADMIN_getCustomerBalance+0x80>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     dc4:	ce 01       	movw	r24, r28
     dc6:	0e 94 0c 06 	call	0xc18	; 0xc18 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	29 f0       	breq	.+10     	; 0xdd8 <AppADMIN_getCustomerBalance+0x28>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     dce:	11 f0       	breq	.+4      	; 0xdd4 <AppADMIN_getCustomerBalance+0x24>
     dd0:	86 30       	cpi	r24, 0x06	; 6
     dd2:	81 f5       	brne	.+96     	; 0xe34 <AppADMIN_getCustomerBalance+0x84>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     dd4:	86 30       	cpi	r24, 0x06	; 6
     dd6:	b1 f3       	breq	.-20     	; 0xdc4 <AppADMIN_getCustomerBalance+0x14>
		
		if(stringLength(pu8_data) != MAX_BAL_LENGTH+1)
     dd8:	ce 01       	movw	r24, r28
     dda:	0e 94 48 19 	call	0x3290	; 0x3290 <stringLength>
     dde:	88 30       	cpi	r24, 0x08	; 8
     de0:	01 f1       	breq	.+64     	; 0xe22 <AppADMIN_getCustomerBalance+0x72>
		{
			if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in the Format (XXXX.XX)\r\n") != TERMINAL_STATUS_ERROR_OK)
     de2:	8a e8       	ldi	r24, 0x8A	; 138
     de4:	93 e0       	ldi	r25, 0x03	; 3
     de6:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	29 f5       	brne	.+74     	; 0xe38 <AppADMIN_getCustomerBalance+0x88>
				return APP_STATUS_ERROR_NOK;
			EmptyString(pu8_data);
     dee:	ce 01       	movw	r24, r28
     df0:	0e 94 87 19 	call	0x330e	; 0x330e <EmptyString>
			continue;
     df4:	e1 cf       	rjmp	.-62     	; 0xdb8 <AppADMIN_getCustomerBalance+0x8>
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
		{
			if(((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0')) && (pu8_data[u8_index]!= '.'))
     df6:	fe 01       	movw	r30, r28
     df8:	e1 0f       	add	r30, r17
     dfa:	f1 1d       	adc	r31, r1
     dfc:	80 81       	ld	r24, Z
     dfe:	90 ed       	ldi	r25, 0xD0	; 208
     e00:	98 0f       	add	r25, r24
     e02:	9a 30       	cpi	r25, 0x0A	; 10
     e04:	60 f0       	brcs	.+24     	; 0xe1e <AppADMIN_getCustomerBalance+0x6e>
     e06:	8e 32       	cpi	r24, 0x2E	; 46
     e08:	51 f0       	breq	.+20     	; 0xe1e <AppADMIN_getCustomerBalance+0x6e>
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in the Format (XXXX.XX)\r\n") != TERMINAL_STATUS_ERROR_OK)
     e0a:	8a e8       	ldi	r24, 0x8A	; 138
     e0c:	93 e0       	ldi	r25, 0x03	; 3
     e0e:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	99 f4       	brne	.+38     	; 0xe3c <AppADMIN_getCustomerBalance+0x8c>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
     e16:	ce 01       	movw	r24, r28
     e18:	0e 94 87 19 	call	0x330e	; 0x330e <EmptyString>
				break;
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <AppADMIN_getCustomerBalance+0x78>
			EmptyString(pu8_data);
			continue;
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
     e1e:	1f 5f       	subi	r17, 0xFF	; 255
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <AppADMIN_getCustomerBalance+0x74>
     e22:	10 e0       	ldi	r17, 0x00	; 0
     e24:	17 30       	cpi	r17, 0x07	; 7
     e26:	38 f3       	brcs	.-50     	; 0xdf6 <AppADMIN_getCustomerBalance+0x46>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
				break;
			}
		}
		if (u8_index == MAX_BAL_LENGTH)
     e28:	17 30       	cpi	r17, 0x07	; 7
     e2a:	31 f6       	brne	.-116    	; 0xdb8 <AppADMIN_getCustomerBalance+0x8>
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	07 c0       	rjmp	.+14     	; 0xe3e <AppADMIN_getCustomerBalance+0x8e>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nBalance: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	05 c0       	rjmp	.+10     	; 0xe3e <AppADMIN_getCustomerBalance+0x8e>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	03 c0       	rjmp	.+6      	; 0xe3e <AppADMIN_getCustomerBalance+0x8e>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringLength(pu8_data) != MAX_BAL_LENGTH+1)
		{
			if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in the Format (XXXX.XX)\r\n") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <AppADMIN_getCustomerBalance+0x8e>
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
		{
			if(((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0')) && (pu8_data[u8_index]!= '.'))
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in the Format (XXXX.XX)\r\n") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     e3c:	80 e0       	ldi	r24, 0x00	; 0
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	08 95       	ret

00000e46 <AppADMIN_processNewCustomer>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to process adding a new customer in the data base.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_processNewCustomer(void)
{
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	64 97       	sbiw	r28, 0x14	; 20
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_Input[2]={0};
     e60:	1a 82       	std	Y+2, r1	; 0x02
     e62:	19 82       	std	Y+1, r1	; 0x01
	uint8_t au8_tempPAN[10]={0};
     e64:	ce 01       	movw	r24, r28
     e66:	03 96       	adiw	r24, 0x03	; 3
     e68:	2a e0       	ldi	r18, 0x0A	; 10
     e6a:	dc 01       	movw	r26, r24
     e6c:	1d 92       	st	X+, r1
     e6e:	2a 95       	dec	r18
     e70:	e9 f7       	brne	.-6      	; 0xe6c <AppADMIN_processNewCustomer+0x26>
	uint8_t au8_tempBalance[8]={0};
     e72:	fe 01       	movw	r30, r28
     e74:	3d 96       	adiw	r30, 0x0d	; 13
     e76:	28 e0       	ldi	r18, 0x08	; 8
     e78:	df 01       	movw	r26, r30
     e7a:	1d 92       	st	X+, r1
     e7c:	2a 95       	dec	r18
     e7e:	e9 f7       	brne	.-6      	; 0xe7a <AppADMIN_processNewCustomer+0x34>
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     e80:	0e 94 90 06 	call	0xd20	; 0xd20 <AppADMIN_getCustomerPAN>
     e84:	18 2f       	mov	r17, r24
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	09 f0       	breq	.+2      	; 0xe8c <AppADMIN_processNewCustomer+0x46>
     e8a:	62 c0       	rjmp	.+196    	; 0xf50 <AppADMIN_processNewCustomer+0x10a>
		return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
     e8c:	69 ee       	ldi	r22, 0xE9	; 233
     e8e:	75 e0       	ldi	r23, 0x05	; 5
     e90:	ce 01       	movw	r24, r28
     e92:	03 96       	adiw	r24, 0x03	; 3
     e94:	0e 94 93 19 	call	0x3326	; 0x3326 <stringCopy>
	
	sint16_t s16_clientIndex = AppADMIN_searchPAN(au8_tempPAN);
     e98:	ce 01       	movw	r24, r28
     e9a:	03 96       	adiw	r24, 0x03	; 3
     e9c:	0e 94 50 00 	call	0xa0	; 0xa0 <AppADMIN_searchPAN>
     ea0:	7c 01       	movw	r14, r24
	if(s16_clientIndex != -1)
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	b9 f0       	breq	.+46     	; 0xed4 <AppADMIN_processNewCustomer+0x8e>
	{
		Terminal_Out((uint8_t*)"This PAN already exists in the system\n\rDo you wish to update it?(y/n): ");
     ea6:	88 ec       	ldi	r24, 0xC8	; 200
     ea8:	93 e0       	ldi	r25, 0x03	; 3
     eaa:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
		AppADMIN_getInput(au8_Input);
     eae:	ce 01       	movw	r24, r28
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	0e 94 3b 06 	call	0xc76	; 0xc76 <AppADMIN_getInput>
		if(au8_Input[0] == 'y')
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	89 37       	cpi	r24, 0x79	; 121
     eba:	61 f0       	breq	.+24     	; 0xed4 <AppADMIN_processNewCustomer+0x8e>
		{
			
		}else if(au8_Input[0] == 'n')
     ebc:	8e 36       	cpi	r24, 0x6E	; 110
     ebe:	09 f4       	brne	.+2      	; 0xec2 <AppADMIN_processNewCustomer+0x7c>
     ec0:	4e c0       	rjmp	.+156    	; 0xf5e <AppADMIN_processNewCustomer+0x118>
		{
			return APP_STATUS_ERROR_OK;
		}else
		{
			if(Terminal_Out((uint8_t*)"\nInvalid Input!") != TERMINAL_STATUS_ERROR_OK)
     ec2:	80 e1       	ldi	r24, 0x10	; 16
     ec4:	94 e0       	ldi	r25, 0x04	; 4
     ec6:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	09 f4       	brne	.+2      	; 0xed0 <AppADMIN_processNewCustomer+0x8a>
     ece:	47 c0       	rjmp	.+142    	; 0xf5e <AppADMIN_processNewCustomer+0x118>
				return APP_STATUS_ERROR_NOK;
     ed0:	10 e0       	ldi	r17, 0x00	; 0
     ed2:	45 c0       	rjmp	.+138    	; 0xf5e <AppADMIN_processNewCustomer+0x118>
			return APP_STATUS_ERROR_OK;
		}
	}
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
     ed4:	ce 01       	movw	r24, r28
     ed6:	0d 96       	adiw	r24, 0x0d	; 13
     ed8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <AppADMIN_getCustomerBalance>
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	d1 f5       	brne	.+116    	; 0xf54 <AppADMIN_processNewCustomer+0x10e>
		return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
     ee0:	63 ef       	ldi	r22, 0xF3	; 243
     ee2:	75 e0       	ldi	r23, 0x05	; 5
     ee4:	ce 01       	movw	r24, r28
     ee6:	0d 96       	adiw	r24, 0x0d	; 13
     ee8:	0e 94 93 19 	call	0x3326	; 0x3326 <stringCopy>
	
	if(au8_Input[0] == 'y')
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	89 37       	cpi	r24, 0x79	; 121
     ef0:	41 f4       	brne	.+16     	; 0xf02 <AppADMIN_processNewCustomer+0xbc>
	{
		if(AppADMIN_updateCustomerData((uint16_t)s16_clientIndex) != APP_STATUS_ERROR_OK)
     ef2:	c7 01       	movw	r24, r14
     ef4:	0e 94 9c 00 	call	0x138	; 0x138 <AppADMIN_updateCustomerData>
     ef8:	18 2f       	mov	r17, r24
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	81 f1       	breq	.+96     	; 0xf5e <AppADMIN_processNewCustomer+0x118>
			return APP_STATUS_ERROR_NOK;
     efe:	10 e0       	ldi	r17, 0x00	; 0
     f00:	2e c0       	rjmp	.+92     	; 0xf5e <AppADMIN_processNewCustomer+0x118>
		return APP_STATUS_ERROR_OK;
	}
	
	if(AppADMIN_updateCustomerData((uint16_t)gu8_registeredAccNum) != APP_STATUS_ERROR_OK)
     f02:	80 91 e7 05 	lds	r24, 0x05E7	; 0x8005e7 <gu8_registeredAccNum>
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 9c 00 	call	0x138	; 0x138 <AppADMIN_updateCustomerData>
     f0c:	18 2f       	mov	r17, r24
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	19 f5       	brne	.+70     	; 0xf58 <AppADMIN_processNewCustomer+0x112>
		return APP_STATUS_ERROR_NOK;
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     f12:	60 91 e7 05 	lds	r22, 0x05E7	; 0x8005e7 <gu8_registeredAccNum>
     f16:	6f 5f       	subi	r22, 0xFF	; 255
     f18:	60 93 e7 05 	sts	0x05E7, r22	; 0x8005e7 <gu8_registeredAccNum>
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 8f 0a 	call	0x151e	; 0x151e <Eeprom_24_writeByte>
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	d1 f4       	brne	.+52     	; 0xf5c <AppADMIN_processNewCustomer+0x116>
		return APP_STATUS_ERROR_NOK;
	
	if(gu8_registeredAccNum == 1)
     f28:	80 91 e7 05 	lds	r24, 0x05E7	; 0x8005e7 <gu8_registeredAccNum>
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	b9 f4       	brne	.+46     	; 0xf5e <AppADMIN_processNewCustomer+0x118>
	{
		Terminal_Out((uint8_t*)"\nData Saved, Flag Raised\n");
     f30:	80 e2       	ldi	r24, 0x20	; 32
     f32:	94 e0       	ldi	r25, 0x04	; 4
     f34:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
		gu8_initData = ATM_DB_FLAG_SET_VAL;
     f38:	8a ea       	ldi	r24, 0xAA	; 170
     f3a:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <gu8_initData>
		if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
     f3e:	6a ea       	ldi	r22, 0xAA	; 170
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 8f 0a 	call	0x151e	; 0x151e <Eeprom_24_writeByte>
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	49 f0       	breq	.+18     	; 0xf5e <AppADMIN_processNewCustomer+0x118>
			return APP_STATUS_ERROR_NOK;
     f4c:	10 e0       	ldi	r17, 0x00	; 0
     f4e:	07 c0       	rjmp	.+14     	; 0xf5e <AppADMIN_processNewCustomer+0x118>
	uint8_t au8_Input[2]={0};
	uint8_t au8_tempPAN[10]={0};
	uint8_t au8_tempBalance[8]={0};
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f50:	10 e0       	ldi	r17, 0x00	; 0
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <AppADMIN_processNewCustomer+0x118>
			return APP_STATUS_ERROR_OK;
		}
	}
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f54:	10 e0       	ldi	r17, 0x00	; 0
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <AppADMIN_processNewCustomer+0x118>
			return APP_STATUS_ERROR_NOK;
		return APP_STATUS_ERROR_OK;
	}
	
	if(AppADMIN_updateCustomerData((uint16_t)gu8_registeredAccNum) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f58:	10 e0       	ldi	r17, 0x00	; 0
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <AppADMIN_processNewCustomer+0x118>
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f5c:	10 e0       	ldi	r17, 0x00	; 0
		gu8_initData = ATM_DB_FLAG_SET_VAL;
		if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	}
	return APP_STATUS_ERROR_OK;
}
     f5e:	81 2f       	mov	r24, r17
     f60:	64 96       	adiw	r28, 0x14	; 20
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	08 95       	ret

00000f78 <AppADMIN_processExistingCustomer>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to process updating an existing customer in the data base.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_processExistingCustomer(void)
{
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	64 97       	sbiw	r28, 0x14	; 20
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	de bf       	out	0x3e, r29	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_Input[2]={0};
     f92:	1a 82       	std	Y+2, r1	; 0x02
     f94:	19 82       	std	Y+1, r1	; 0x01
	uint8_t au8_tempPAN[10]={0};
     f96:	ce 01       	movw	r24, r28
     f98:	03 96       	adiw	r24, 0x03	; 3
     f9a:	2a e0       	ldi	r18, 0x0A	; 10
     f9c:	dc 01       	movw	r26, r24
     f9e:	1d 92       	st	X+, r1
     fa0:	2a 95       	dec	r18
     fa2:	e9 f7       	brne	.-6      	; 0xf9e <AppADMIN_processExistingCustomer+0x26>
	uint8_t au8_tempBalance[8]={0};
     fa4:	fe 01       	movw	r30, r28
     fa6:	3d 96       	adiw	r30, 0x0d	; 13
     fa8:	28 e0       	ldi	r18, 0x08	; 8
     faa:	df 01       	movw	r26, r30
     fac:	1d 92       	st	X+, r1
     fae:	2a 95       	dec	r18
     fb0:	e9 f7       	brne	.-6      	; 0xfac <AppADMIN_processExistingCustomer+0x34>
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     fb2:	0e 94 90 06 	call	0xd20	; 0xd20 <AppADMIN_getCustomerPAN>
     fb6:	18 2f       	mov	r17, r24
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	09 f0       	breq	.+2      	; 0xfbe <AppADMIN_processExistingCustomer+0x46>
     fbc:	62 c0       	rjmp	.+196    	; 0x1082 <AppADMIN_processExistingCustomer+0x10a>
		return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
     fbe:	69 ee       	ldi	r22, 0xE9	; 233
     fc0:	75 e0       	ldi	r23, 0x05	; 5
     fc2:	ce 01       	movw	r24, r28
     fc4:	03 96       	adiw	r24, 0x03	; 3
     fc6:	0e 94 93 19 	call	0x3326	; 0x3326 <stringCopy>
	
	sint16_t s16_clientIndex = AppADMIN_searchPAN(au8_tempPAN);
     fca:	ce 01       	movw	r24, r28
     fcc:	03 96       	adiw	r24, 0x03	; 3
     fce:	0e 94 50 00 	call	0xa0	; 0xa0 <AppADMIN_searchPAN>
     fd2:	7c 01       	movw	r14, r24
	if(s16_clientIndex == -1)
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	b9 f4       	brne	.+46     	; 0x1006 <AppADMIN_processExistingCustomer+0x8e>
	{
		Terminal_Out((uint8_t*)"This PAN not registered in the system\n\rDo you wish to add new?(y/n): ");
     fd8:	8a e3       	ldi	r24, 0x3A	; 58
     fda:	94 e0       	ldi	r25, 0x04	; 4
     fdc:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
		AppADMIN_getInput(au8_Input);
     fe0:	ce 01       	movw	r24, r28
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	0e 94 3b 06 	call	0xc76	; 0xc76 <AppADMIN_getInput>
		if(au8_Input[0] == 'y')
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	89 37       	cpi	r24, 0x79	; 121
     fec:	61 f0       	breq	.+24     	; 0x1006 <AppADMIN_processExistingCustomer+0x8e>
		{
			
		}else if(au8_Input[0] == 'n')
     fee:	8e 36       	cpi	r24, 0x6E	; 110
     ff0:	09 f4       	brne	.+2      	; 0xff4 <AppADMIN_processExistingCustomer+0x7c>
     ff2:	4e c0       	rjmp	.+156    	; 0x1090 <AppADMIN_processExistingCustomer+0x118>
		{
			return APP_STATUS_ERROR_OK;
		}else
		{
			if(Terminal_Out((uint8_t*)"\nInvalid Input!") != TERMINAL_STATUS_ERROR_OK)
     ff4:	80 e1       	ldi	r24, 0x10	; 16
     ff6:	94 e0       	ldi	r25, 0x04	; 4
     ff8:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <AppADMIN_processExistingCustomer+0x8a>
    1000:	47 c0       	rjmp	.+142    	; 0x1090 <AppADMIN_processExistingCustomer+0x118>
				return APP_STATUS_ERROR_NOK;
    1002:	10 e0       	ldi	r17, 0x00	; 0
    1004:	45 c0       	rjmp	.+138    	; 0x1090 <AppADMIN_processExistingCustomer+0x118>
			return APP_STATUS_ERROR_OK;
		}
	}
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
    1006:	ce 01       	movw	r24, r28
    1008:	0d 96       	adiw	r24, 0x0d	; 13
    100a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <AppADMIN_getCustomerBalance>
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	d1 f5       	brne	.+116    	; 0x1086 <AppADMIN_processExistingCustomer+0x10e>
		return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
    1012:	63 ef       	ldi	r22, 0xF3	; 243
    1014:	75 e0       	ldi	r23, 0x05	; 5
    1016:	ce 01       	movw	r24, r28
    1018:	0d 96       	adiw	r24, 0x0d	; 13
    101a:	0e 94 93 19 	call	0x3326	; 0x3326 <stringCopy>
	
	if(au8_Input[0] == 'y')
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	89 37       	cpi	r24, 0x79	; 121
    1022:	39 f5       	brne	.+78     	; 0x1072 <AppADMIN_processExistingCustomer+0xfa>
	{
		if(AppADMIN_updateCustomerData((uint16_t)gu8_registeredAccNum) != APP_STATUS_ERROR_OK)
    1024:	80 91 e7 05 	lds	r24, 0x05E7	; 0x8005e7 <gu8_registeredAccNum>
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 9c 00 	call	0x138	; 0x138 <AppADMIN_updateCustomerData>
    102e:	18 2f       	mov	r17, r24
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	59 f5       	brne	.+86     	; 0x108a <AppADMIN_processExistingCustomer+0x112>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
    1034:	60 91 e7 05 	lds	r22, 0x05E7	; 0x8005e7 <gu8_registeredAccNum>
    1038:	6f 5f       	subi	r22, 0xFF	; 255
    103a:	60 93 e7 05 	sts	0x05E7, r22	; 0x8005e7 <gu8_registeredAccNum>
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 8f 0a 	call	0x151e	; 0x151e <Eeprom_24_writeByte>
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	11 f5       	brne	.+68     	; 0x108e <AppADMIN_processExistingCustomer+0x116>
			return APP_STATUS_ERROR_NOK;
		if(gu8_registeredAccNum == 1)
    104a:	80 91 e7 05 	lds	r24, 0x05E7	; 0x8005e7 <gu8_registeredAccNum>
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	f9 f4       	brne	.+62     	; 0x1090 <AppADMIN_processExistingCustomer+0x118>
		{
			Terminal_Out((uint8_t*)"\nData Saved, Flag Raised\n");
    1052:	80 e2       	ldi	r24, 0x20	; 32
    1054:	94 e0       	ldi	r25, 0x04	; 4
    1056:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
			gu8_initData = ATM_DB_FLAG_SET_VAL;
    105a:	8a ea       	ldi	r24, 0xAA	; 170
    105c:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <gu8_initData>
			if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
    1060:	6a ea       	ldi	r22, 0xAA	; 170
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 8f 0a 	call	0x151e	; 0x151e <Eeprom_24_writeByte>
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	89 f0       	breq	.+34     	; 0x1090 <AppADMIN_processExistingCustomer+0x118>
				return APP_STATUS_ERROR_NOK;
    106e:	10 e0       	ldi	r17, 0x00	; 0
    1070:	0f c0       	rjmp	.+30     	; 0x1090 <AppADMIN_processExistingCustomer+0x118>
		}
		return APP_STATUS_ERROR_OK;
	}
	
	if(AppADMIN_updateCustomerData((uint16_t)s16_clientIndex) != APP_STATUS_ERROR_OK)
    1072:	c7 01       	movw	r24, r14
    1074:	0e 94 9c 00 	call	0x138	; 0x138 <AppADMIN_updateCustomerData>
    1078:	18 2f       	mov	r17, r24
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	49 f0       	breq	.+18     	; 0x1090 <AppADMIN_processExistingCustomer+0x118>
		return APP_STATUS_ERROR_NOK;
    107e:	10 e0       	ldi	r17, 0x00	; 0
    1080:	07 c0       	rjmp	.+14     	; 0x1090 <AppADMIN_processExistingCustomer+0x118>
	uint8_t au8_Input[2]={0};
	uint8_t au8_tempPAN[10]={0};
	uint8_t au8_tempBalance[8]={0};
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
    1082:	10 e0       	ldi	r17, 0x00	; 0
    1084:	05 c0       	rjmp	.+10     	; 0x1090 <AppADMIN_processExistingCustomer+0x118>
			return APP_STATUS_ERROR_OK;
		}
	}
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
    1086:	10 e0       	ldi	r17, 0x00	; 0
    1088:	03 c0       	rjmp	.+6      	; 0x1090 <AppADMIN_processExistingCustomer+0x118>
	stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
	
	if(au8_Input[0] == 'y')
	{
		if(AppADMIN_updateCustomerData((uint16_t)gu8_registeredAccNum) != APP_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
    108a:	10 e0       	ldi	r17, 0x00	; 0
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <AppADMIN_processExistingCustomer+0x118>
		if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
    108e:	10 e0       	ldi	r17, 0x00	; 0
	
	if(AppADMIN_updateCustomerData((uint16_t)s16_clientIndex) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
    1090:	81 2f       	mov	r24, r17
    1092:	64 96       	adiw	r28, 0x14	; 20
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	08 95       	ret

000010aa <AppADMIN_getAtmPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input ATM PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the atm pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getAtmPIN(uint8_t* pu8_data)
{
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	
	Terminal_enablePasswordMode();
    10b0:	0e 94 b1 10 	call	0x2162	; 0x2162 <Terminal_enablePasswordMode>
	do
	{
		if(Terminal_Out((uint8_t*)"\nATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
    10b4:	80 e8       	ldi	r24, 0x80	; 128
    10b6:	94 e0       	ldi	r25, 0x04	; 4
    10b8:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	69 f5       	brne	.+90     	; 0x111a <AppADMIN_getAtmPIN+0x70>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
    10c0:	ce 01       	movw	r24, r28
    10c2:	0e 94 0c 06 	call	0xc18	; 0xc18 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	29 f0       	breq	.+10     	; 0x10d4 <AppADMIN_getAtmPIN+0x2a>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
    10ca:	11 f0       	breq	.+4      	; 0x10d0 <AppADMIN_getAtmPIN+0x26>
    10cc:	86 30       	cpi	r24, 0x06	; 6
    10ce:	39 f5       	brne	.+78     	; 0x111e <AppADMIN_getAtmPIN+0x74>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
    10d0:	86 30       	cpi	r24, 0x06	; 6
    10d2:	b1 f3       	breq	.-20     	; 0x10c0 <AppADMIN_getAtmPIN+0x16>
		
		if(stringCompare((uint8_t*)ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
    10d4:	be 01       	movw	r22, r28
    10d6:	82 eb       	ldi	r24, 0xB2	; 178
    10d8:	95 e0       	ldi	r25, 0x05	; 5
    10da:	0e 94 54 19 	call	0x32a8	; 0x32a8 <stringCompare>
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	39 f0       	breq	.+14     	; 0x10f0 <AppADMIN_getAtmPIN+0x46>
		{
			if(Terminal_Out((uint8_t*)"\nIncorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
    10e2:	8b e8       	ldi	r24, 0x8B	; 139
    10e4:	94 e0       	ldi	r25, 0x04	; 4
    10e6:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	41 f0       	breq	.+16     	; 0x10fe <AppADMIN_getAtmPIN+0x54>
    10ee:	19 c0       	rjmp	.+50     	; 0x1122 <AppADMIN_getAtmPIN+0x78>
			return APP_STATUS_ERROR_NOK;
		}else
		{
			if(Terminal_Out((uint8_t*)"\nLoading...\r") != TERMINAL_STATUS_ERROR_OK)
    10f0:	8b e9       	ldi	r24, 0x9B	; 155
    10f2:	94 e0       	ldi	r25, 0x04	; 4
    10f4:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	a9 f4       	brne	.+42     	; 0x1126 <AppADMIN_getAtmPIN+0x7c>
    10fc:	0a c0       	rjmp	.+20     	; 0x1112 <AppADMIN_getAtmPIN+0x68>
			return APP_STATUS_ERROR_NOK;
			break;
		}
		EmptyString(pu8_data);
    10fe:	ce 01       	movw	r24, r28
    1100:	0e 94 87 19 	call	0x330e	; 0x330e <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
    1104:	88 ea       	ldi	r24, 0xA8	; 168
    1106:	94 e0       	ldi	r25, 0x04	; 4
    1108:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	91 f2       	breq	.-92     	; 0x10b4 <AppADMIN_getAtmPIN+0xa>
    1110:	0c c0       	rjmp	.+24     	; 0x112a <AppADMIN_getAtmPIN+0x80>
		return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
    1112:	0e 94 b5 10 	call	0x216a	; 0x216a <Terminal_disablePasswordMode>
	return APP_STATUS_ERROR_OK;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	09 c0       	rjmp	.+18     	; 0x112c <AppADMIN_getAtmPIN+0x82>
	
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"\nATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	07 c0       	rjmp	.+14     	; 0x112c <AppADMIN_getAtmPIN+0x82>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	05 c0       	rjmp	.+10     	; 0x112c <AppADMIN_getAtmPIN+0x82>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringCompare((uint8_t*)ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
		{
			if(Terminal_Out((uint8_t*)"\nIncorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	03 c0       	rjmp	.+6      	; 0x112c <AppADMIN_getAtmPIN+0x82>
		}else
		{
			if(Terminal_Out((uint8_t*)"\nLoading...\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	01 c0       	rjmp	.+2      	; 0x112c <AppADMIN_getAtmPIN+0x82>
			break;
		}
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
    112a:	80 e0       	ldi	r24, 0x00	; 0
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_ERROR_OK;
}
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	08 95       	ret

00001132 <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	69 97       	sbiw	r28, 0x19	; 25
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
    1146:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enuCurrentAppStatus>
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	09 f0       	breq	.+2      	; 0x1150 <App_update+0x1e>
    114e:	1a c1       	rjmp	.+564    	; 0x1384 <App_update+0x252>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
    1150:	fe 01       	movw	r30, r28
    1152:	31 96       	adiw	r30, 0x01	; 1
    1154:	8a e0       	ldi	r24, 0x0A	; 10
    1156:	df 01       	movw	r26, r30
    1158:	1d 92       	st	X+, r1
    115a:	8a 95       	dec	r24
    115c:	e9 f7       	brne	.-6      	; 0x1158 <App_update+0x26>
	static uint8_t u8_passFlag = 0;
	if(gu8_ATMMode == ATM_MODE_ADMIN)
    115e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1162:	81 11       	cpse	r24, r1
    1164:	8b c0       	rjmp	.+278    	; 0x127c <App_update+0x14a>
	{ /**************** PROGRAMMING MODE ****************/
			uint8_t au8_Input[2]={0};
    1166:	19 8e       	std	Y+25, r1	; 0x19
    1168:	18 8e       	std	Y+24, r1	; 0x18
			uint8_t au8_tempPinNum[5]={0};
    116a:	72 96       	adiw	r30, 0x12	; 18
    116c:	85 e0       	ldi	r24, 0x05	; 5
    116e:	df 01       	movw	r26, r30
    1170:	1d 92       	st	X+, r1
    1172:	8a 95       	dec	r24
    1174:	e9 f7       	brne	.-6      	; 0x1170 <App_update+0x3e>
			uint8_t au8_tempMaxAmount[8]={0};
    1176:	38 97       	sbiw	r30, 0x08	; 8
    1178:	88 e0       	ldi	r24, 0x08	; 8
    117a:	df 01       	movw	r26, r30
    117c:	1d 92       	st	X+, r1
    117e:	8a 95       	dec	r24
    1180:	e9 f7       	brne	.-6      	; 0x117c <App_update+0x4a>
			
			if(u8_passFlag == 0)
    1182:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <__data_end>
    1186:	81 11       	cpse	r24, r1
    1188:	09 c0       	rjmp	.+18     	; 0x119c <App_update+0x6a>
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
    118a:	ce 01       	movw	r24, r28
    118c:	43 96       	adiw	r24, 0x13	; 19
    118e:	0e 94 55 08 	call	0x10aa	; 0x10aa <AppADMIN_getAtmPIN>
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	09 f0       	breq	.+2      	; 0x1198 <App_update+0x66>
    1196:	66 c0       	rjmp	.+204    	; 0x1264 <App_update+0x132>
					return APP_STATUS_ERROR_NOK;
				u8_passFlag = 1;
    1198:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <__data_end>
			}
			
			if(Terminal_Out((uint8_t*)"\n1.Add New Customer\n\r2.Update Existing Customer\n\r3.Update Max Amount\n\r4.Exit\r") != TERMINAL_STATUS_ERROR_OK)
    119c:	89 ec       	ldi	r24, 0xC9	; 201
    119e:	94 e0       	ldi	r25, 0x04	; 4
    11a0:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	09 f0       	breq	.+2      	; 0x11aa <App_update+0x78>
    11a8:	5f c0       	rjmp	.+190    	; 0x1268 <App_update+0x136>
				return APP_STATUS_ERROR_NOK;
				
			AppADMIN_getInput(au8_Input);
    11aa:	ce 01       	movw	r24, r28
    11ac:	48 96       	adiw	r24, 0x18	; 24
    11ae:	0e 94 3b 06 	call	0xc76	; 0xc76 <AppADMIN_getInput>
			if(au8_Input[0] == '1')//--------- New Customer OPTION -----------//
    11b2:	88 8d       	ldd	r24, Y+24	; 0x18
    11b4:	81 33       	cpi	r24, 0x31	; 49
    11b6:	39 f4       	brne	.+14     	; 0x11c6 <App_update+0x94>
			{
				AppADMIN_processNewCustomer();
    11b8:	0e 94 23 07 	call	0xe46	; 0xe46 <AppADMIN_processNewCustomer>
				EmptyString(au8_Input);
    11bc:	ce 01       	movw	r24, r28
    11be:	48 96       	adiw	r24, 0x18	; 24
    11c0:	0e 94 87 19 	call	0x330e	; 0x330e <EmptyString>
    11c4:	d3 c0       	rjmp	.+422    	; 0x136c <App_update+0x23a>

			}else if(au8_Input[0] == '2')//--------- Update Existing Customer OPTION -----------//
    11c6:	82 33       	cpi	r24, 0x32	; 50
    11c8:	39 f4       	brne	.+14     	; 0x11d8 <App_update+0xa6>
			{
				AppADMIN_processExistingCustomer();
    11ca:	0e 94 bc 07 	call	0xf78	; 0xf78 <AppADMIN_processExistingCustomer>
				EmptyString(au8_Input);
    11ce:	ce 01       	movw	r24, r28
    11d0:	48 96       	adiw	r24, 0x18	; 24
    11d2:	0e 94 87 19 	call	0x330e	; 0x330e <EmptyString>
    11d6:	ca c0       	rjmp	.+404    	; 0x136c <App_update+0x23a>
			}else if(au8_Input[0] == '3')//--------- Max Amount OPTION -----------//
    11d8:	83 33       	cpi	r24, 0x33	; 51
    11da:	d1 f4       	brne	.+52     	; 0x1210 <App_update+0xde>
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
    11dc:	ce 01       	movw	r24, r28
    11de:	0b 96       	adiw	r24, 0x0b	; 11
    11e0:	0e 94 64 06 	call	0xcc8	; 0xcc8 <AppADMIN_getnewMaxAmount>
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
    11e4:	ce 01       	movw	r24, r28
    11e6:	0b 96       	adiw	r24, 0x0b	; 11
    11e8:	0e 94 48 19 	call	0x3290	; 0x3290 <stringLength>
    11ec:	48 2f       	mov	r20, r24
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	be 01       	movw	r22, r28
    11f2:	65 5f       	subi	r22, 0xF5	; 245
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	83 e0       	ldi	r24, 0x03	; 3
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <Eeprom_24_writePacket>
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	a9 f5       	brne	.+106    	; 0x126c <App_update+0x13a>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempMaxAmount, gau8_maxAmount);	
    1202:	6a ed       	ldi	r22, 0xDA	; 218
    1204:	75 e0       	ldi	r23, 0x05	; 5
    1206:	ce 01       	movw	r24, r28
    1208:	0b 96       	adiw	r24, 0x0b	; 11
    120a:	0e 94 93 19 	call	0x3326	; 0x3326 <stringCopy>
    120e:	ae c0       	rjmp	.+348    	; 0x136c <App_update+0x23a>
			}else if(au8_Input[0] == '4')//--------- EXIT OPTION -----------//
    1210:	84 33       	cpi	r24, 0x34	; 52
    1212:	09 f5       	brne	.+66     	; 0x1256 <App_update+0x124>
			{
				if(gu8_initData == ATM_DB_FLAG_SET_VAL)
    1214:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <gu8_initData>
    1218:	8a 3a       	cpi	r24, 0xAA	; 170
    121a:	a9 f4       	brne	.+42     	; 0x1246 <App_update+0x114>
				{
					u8_passFlag = 0;
    121c:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <__data_end>
					gu8_ATMMode = ATM_MODE_USER;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					Lcd_clear();
    1226:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Lcd_clear>
					if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
    122a:	82 ec       	ldi	r24, 0xC2	; 194
    122c:	92 e0       	ldi	r25, 0x02	; 2
    122e:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	e9 f4       	brne	.+58     	; 0x1270 <App_update+0x13e>
						return APP_STATUS_ERROR_NOK;
					
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
    1236:	65 e8       	ldi	r22, 0x85	; 133
    1238:	71 e0       	ldi	r23, 0x01	; 1
    123a:	84 e9       	ldi	r24, 0x94	; 148
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
					
					return APP_STATUS_ERROR_OK;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	a0 c0       	rjmp	.+320    	; 0x1386 <App_update+0x254>
				}else
				{
					if(Terminal_Out((uint8_t*)"\nData Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
    1246:	87 e1       	ldi	r24, 0x17	; 23
    1248:	95 e0       	ldi	r25, 0x05	; 5
    124a:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	89 f0       	breq	.+34     	; 0x1274 <App_update+0x142>
						return APP_STATUS_ERROR_NOK;
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	98 c0       	rjmp	.+304    	; 0x1386 <App_update+0x254>
					return APP_STATUS_ERROR_OK;
				}
			}else
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Input!") != TERMINAL_STATUS_ERROR_OK)
    1256:	80 e1       	ldi	r24, 0x10	; 16
    1258:	94 e0       	ldi	r25, 0x04	; 4
    125a:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	59 f4       	brne	.+22     	; 0x1278 <App_update+0x146>
    1262:	84 c0       	rjmp	.+264    	; 0x136c <App_update+0x23a>
			
			if(u8_passFlag == 0)
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	8f c0       	rjmp	.+286    	; 0x1386 <App_update+0x254>
				u8_passFlag = 1;
			}
			
			if(Terminal_Out((uint8_t*)"\n1.Add New Customer\n\r2.Update Existing Customer\n\r3.Update Max Amount\n\r4.Exit\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	8d c0       	rjmp	.+282    	; 0x1386 <App_update+0x254>
				EmptyString(au8_Input);
			}else if(au8_Input[0] == '3')//--------- Max Amount OPTION -----------//
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	8b c0       	rjmp	.+278    	; 0x1386 <App_update+0x254>
				{
					u8_passFlag = 0;
					gu8_ATMMode = ATM_MODE_USER;
					Lcd_clear();
					if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	89 c0       	rjmp	.+274    	; 0x1386 <App_update+0x254>
					return APP_STATUS_ERROR_OK;
				}else
				{
					if(Terminal_Out((uint8_t*)"\nData Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					return APP_STATUS_ERROR_OK;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	87 c0       	rjmp	.+270    	; 0x1386 <App_update+0x254>
				}
			}else
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Input!") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	85 c0       	rjmp	.+266    	; 0x1386 <App_update+0x254>
	{							/************* User Mode **************/
		/********************************************************************************************/
		/************************************ ADMIN ENTERED ****************************************/
		/********************************************************************************************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
    127c:	80 91 15 06 	lds	r24, 0x0615	; 0x800615 <gu8_ADMIN_Request>
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	31 f4       	brne	.+12     	; 0x1290 <App_update+0x15e>
    1284:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <gu8_USER_Mode_State>
    1288:	81 11       	cpse	r24, r1
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <App_update+0x15e>
			{
				gu8_ATMMode = ATM_MODE_ADMIN;
    128c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
    1290:	ce 01       	movw	r24, r28
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	0e 94 0c 06 	call	0xc18	; 0xc18 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	39 f5       	brne	.+78     	; 0x12ea <App_update+0x1b8>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
    129c:	67 eb       	ldi	r22, 0xB7	; 183
    129e:	75 e0       	ldi	r23, 0x05	; 5
    12a0:	ce 01       	movw	r24, r28
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	0e 94 54 19 	call	0x32a8	; 0x32a8 <stringCompare>
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	19 f5       	brne	.+70     	; 0x12f2 <App_update+0x1c0>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
    12ac:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <gu8_USER_Mode_State>
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	51 f4       	brne	.+20     	; 0x12c8 <App_update+0x196>
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
    12b4:	80 93 15 06 	sts	0x0615, r24	; 0x800615 <gu8_ADMIN_Request>
						if(Terminal_Out((uint8_t*)"\nATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
    12b8:	85 e5       	ldi	r24, 0x55	; 85
    12ba:	95 e0       	ldi	r25, 0x05	; 5
    12bc:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <App_update+0x194>
    12c4:	4d c0       	rjmp	.+154    	; 0x1360 <App_update+0x22e>
    12c6:	15 c0       	rjmp	.+42     	; 0x12f2 <App_update+0x1c0>
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The ATM is not used by User */
					{
						gu8_ATMMode = ATM_MODE_ADMIN;
    12c8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
						
						Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
    12cc:	6d e8       	ldi	r22, 0x8D	; 141
    12ce:	72 e0       	ldi	r23, 0x02	; 2
    12d0:	8e e9       	ldi	r24, 0x9E	; 158
    12d2:	92 e0       	ldi	r25, 0x02	; 2
    12d4:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
						
						if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
    12d8:	8f ea       	ldi	r24, 0xAF	; 175
    12da:	92 e0       	ldi	r25, 0x02	; 2
    12dc:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Terminal_Out>
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <App_update+0x1b4>
    12e4:	3f c0       	rjmp	.+126    	; 0x1364 <App_update+0x232>
							return APP_STATUS_ERROR_NOK;
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	4e c0       	rjmp	.+156    	; 0x1386 <App_update+0x254>
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	11 f0       	breq	.+4      	; 0x12f2 <App_update+0x1c0>
    12ee:	86 30       	cpi	r24, 0x06	; 6
    12f0:	d9 f5       	brne	.+118    	; 0x1368 <App_update+0x236>
				return APP_STATUS_ERROR_NOK;
			/****************************************************************/
			/********************** Getting Input from User ************************/
			uint8_t au8_data=0;
    12f2:	1b 8a       	std	Y+19, r1	; 0x13
			enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&au8_data);
    12f4:	ce 01       	movw	r24, r28
    12f6:	43 96       	adiw	r24, 0x13	; 19
    12f8:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <Keypad_readKey>
			if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
    12fc:	86 30       	cpi	r24, 0x06	; 6
    12fe:	c1 f4       	brne	.+48     	; 0x1330 <App_update+0x1fe>
			{
			/************************************ KEYPAD PRESSED ****************************************/
			/********* Insert Card Chosen ********/
				if(au8_data == '1') 
    1300:	8b 89       	ldd	r24, Y+19	; 0x13
    1302:	81 33       	cpi	r24, 0x31	; 49
    1304:	29 f4       	brne	.+10     	; 0x1310 <App_update+0x1de>
				{
					AppUSER_insertCard();
    1306:	0e 94 8f 04 	call	0x91e	; 0x91e <AppUSER_insertCard>
					gu8_USER_Mode_State = USER_IDLE;
    130a:	10 92 16 06 	sts	0x0616, r1	; 0x800616 <gu8_USER_Mode_State>
    130e:	2e c0       	rjmp	.+92     	; 0x136c <App_update+0x23a>
			/******* Display Temp Chosen *******/
				}else if(au8_data == '2')
    1310:	82 33       	cpi	r24, 0x32	; 50
    1312:	19 f4       	brne	.+6      	; 0x131a <App_update+0x1e8>
				{
					AppUSER_displayTemp();
    1314:	0e 94 ce 00 	call	0x19c	; 0x19c <AppUSER_displayTemp>
    1318:	29 c0       	rjmp	.+82     	; 0x136c <App_update+0x23a>
				}else if(au8_data == '-') 
    131a:	8d 32       	cpi	r24, 0x2D	; 45
    131c:	39 f5       	brne	.+78     	; 0x136c <App_update+0x23a>
				{
					gu8_displayFlag = 0;
    131e:	10 92 14 06 	sts	0x0614, r1	; 0x800614 <gu8_displayFlag>
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
    1322:	65 e8       	ldi	r22, 0x85	; 133
    1324:	71 e0       	ldi	r23, 0x01	; 1
    1326:	84 e9       	ldi	r24, 0x94	; 148
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Lcd_printLCD>
    132e:	1e c0       	rjmp	.+60     	; 0x136c <App_update+0x23a>
				}
			}else if(gu8_displayFlag == DISPLAY_TEMP) /* If in temperature screen >> Update the temp value */
    1330:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <gu8_displayFlag>
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	d1 f4       	brne	.+52     	; 0x136c <App_update+0x23a>
			{
				uint8_t u8_currentTemp=0;
    1338:	1b 86       	std	Y+11, r1	; 0x0b
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
    133a:	ce 01       	movw	r24, r28
    133c:	0b 96       	adiw	r24, 0x0b	; 11
    133e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <LM35_readTemp>
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	99 f4       	brne	.+38     	; 0x136c <App_update+0x23a>
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <Lcd_setCursor>
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	31 f4       	brne	.+12     	; 0x135c <App_update+0x22a>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
    1350:	8b 85       	ldd	r24, Y+11	; 0x0b
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Lcd_printDecimal>
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	41 f0       	breq	.+16     	; 0x136c <App_update+0x23a>
			{
				uint8_t u8_currentTemp=0;
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	13 c0       	rjmp	.+38     	; 0x1386 <App_update+0x254>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"\nATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	11 c0       	rjmp	.+34     	; 0x1386 <App_update+0x254>
						
						Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
						
						if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
						return APP_STATUS_ERROR_OK;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	0f c0       	rjmp	.+30     	; 0x1386 <App_update+0x254>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	0d c0       	rjmp	.+26     	; 0x1386 <App_update+0x254>
					return APP_STATUS_ERROR_NOK;
				}
			}
	/****************************************************************/
	}
	Delay_ms(100);
    136c:	24 e6       	ldi	r18, 0x64	; 100
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
	return APP_STATUS_ERROR_OK;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	01 c0       	rjmp	.+2      	; 0x1386 <App_update+0x254>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
    1384:	85 e0       	ldi	r24, 0x05	; 5
			}
	/****************************************************************/
	}
	Delay_ms(100);
	return APP_STATUS_ERROR_OK;
}
    1386:	69 96       	adiw	r28, 0x19	; 25
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
    1398:	0e 94 49 05 	call	0xa92	; 0xa92 <App_init>
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	39 f4       	brne	.+14     	; 0x13ae <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
    13a0:	8f b7       	in	r24, 0x3f	; 63
    13a2:	80 68       	ori	r24, 0x80	; 128
    13a4:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
    13a6:	0e 94 99 08 	call	0x1132	; 0x1132 <App_update>
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	e1 f3       	breq	.-8      	; 0x13a6 <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
	}
}
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	08 95       	ret

000013b2 <Button_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button module is already initialized */
	if (genu_BttnModuleState == BTTN_STATUS_INIT)
    13b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_BttnModuleState>
    13b6:	85 30       	cpi	r24, 0x05	; 5
    13b8:	71 f0       	breq	.+28     	; 0x13d6 <Button_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    13ba:	85 e8       	ldi	r24, 0x85	; 133
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	0e 94 1a 12 	call	0x2434	; 0x2434 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	11 f0       	breq	.+4      	; 0x13ca <Button_init+0x18>
    13c6:	87 30       	cpi	r24, 0x07	; 7
    13c8:	29 f4       	brne	.+10     	; 0x13d4 <Button_init+0x22>
		return BTTN_STATUS_ERROR_NOK;
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
    13ca:	85 e0       	ldi	r24, 0x05	; 5
    13cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genu_BttnModuleState>
	return BTTN_STATUS_ERROR_OK;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return BTTN_STATUS_ERROR_NOK;
    13d4:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
	return BTTN_STATUS_ERROR_OK;
}
    13d6:	08 95       	ret

000013d8 <Button_getState>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
    13d8:	82 30       	cpi	r24, 0x02	; 2
    13da:	60 f4       	brcc	.+24     	; 0x13f4 <Button_getState+0x1c>
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
    13dc:	61 15       	cp	r22, r1
    13de:	71 05       	cpc	r23, r1
    13e0:	59 f0       	breq	.+22     	; 0x13f8 <Button_getState+0x20>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
    13e2:	e8 2f       	mov	r30, r24
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	e9 5e       	subi	r30, 0xE9	; 233
    13e8:	f9 4f       	sbci	r31, 0xF9	; 249
    13ea:	80 81       	ld	r24, Z
    13ec:	fb 01       	movw	r30, r22
    13ee:	80 83       	st	Z, r24
	return BTTN_STATUS_ERROR_OK;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
	{
		return BTTN_STATUS_ERROR_NULL;
    13f8:	83 e0       	ldi	r24, 0x03	; 3
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
	return BTTN_STATUS_ERROR_OK;
}
    13fa:	08 95       	ret

000013fc <Button_updateState>:
* Parameters (out): None
* Return value: enuBttn_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to update the state of the button (Pressed or Released) by reading the Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuBttn_Status_t Button_updateState(uint8_t u8_bttnID)
{
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	1f 92       	push	r1
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
    140a:	82 30       	cpi	r24, 0x02	; 2
    140c:	08 f0       	brcs	.+2      	; 0x1410 <Button_updateState+0x14>
    140e:	58 c0       	rjmp	.+176    	; 0x14c0 <Button_updateState+0xc4>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
    1410:	19 82       	std	Y+1, r1	; 0x01
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
    1412:	08 2f       	mov	r16, r24
    1414:	10 e0       	ldi	r17, 0x00	; 0
    1416:	f8 01       	movw	r30, r16
    1418:	ed 59       	subi	r30, 0x9D	; 157
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	be 01       	movw	r22, r28
    141e:	6f 5f       	subi	r22, 0xFF	; 255
    1420:	7f 4f       	sbci	r23, 0xFF	; 255
    1422:	80 81       	ld	r24, Z
    1424:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <Dio_readPin>
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	09 f0       	breq	.+2      	; 0x142e <Button_updateState+0x32>
    142c:	4b c0       	rjmp	.+150    	; 0x14c4 <Button_updateState+0xc8>
		return BTTN_STATUS_ERROR_NOK;
	if(u8_valueTemp == PIN_HIGH)
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	09 f5       	brne	.+66     	; 0x1476 <Button_updateState+0x7a>
    1434:	04 c0       	rjmp	.+8      	; 0x143e <Button_updateState+0x42>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	a1 1d       	adc	r26, r1
    143a:	b1 1d       	adc	r27, r1
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <Button_updateState+0x48>
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	dc 01       	movw	r26, r24
    1444:	88 3b       	cpi	r24, 0xB8	; 184
    1446:	2b e0       	ldi	r18, 0x0B	; 11
    1448:	92 07       	cpc	r25, r18
    144a:	a1 05       	cpc	r26, r1
    144c:	b1 05       	cpc	r27, r1
    144e:	98 f3       	brcs	.-26     	; 0x1436 <Button_updateState+0x3a>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    1450:	be 01       	movw	r22, r28
    1452:	6f 5f       	subi	r22, 0xFF	; 255
    1454:	7f 4f       	sbci	r23, 0xFF	; 255
    1456:	f8 01       	movw	r30, r16
    1458:	ed 59       	subi	r30, 0x9D	; 157
    145a:	ff 4f       	sbci	r31, 0xFF	; 255
    145c:	80 81       	ld	r24, Z
    145e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <Dio_readPin>
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	89 f5       	brne	.+98     	; 0x14c8 <Button_updateState+0xcc>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_HIGH)
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	81 30       	cpi	r24, 0x01	; 1
    146a:	81 f5       	brne	.+96     	; 0x14cc <Button_updateState+0xd0>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
    146c:	f8 01       	movw	r30, r16
    146e:	e9 5e       	subi	r30, 0xE9	; 233
    1470:	f9 4f       	sbci	r31, 0xF9	; 249
    1472:	80 83       	st	Z, r24
    1474:	30 c0       	rjmp	.+96     	; 0x14d6 <Button_updateState+0xda>
	}else if (u8_valueTemp == PIN_LOW)
    1476:	88 23       	and	r24, r24
    1478:	31 f0       	breq	.+12     	; 0x1486 <Button_updateState+0x8a>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	2c c0       	rjmp	.+88     	; 0x14d6 <Button_updateState+0xda>
		if(u8_valueTemp == PIN_HIGH)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
	}else if (u8_valueTemp == PIN_LOW)
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    147e:	01 96       	adiw	r24, 0x01	; 1
    1480:	a1 1d       	adc	r26, r1
    1482:	b1 1d       	adc	r27, r1
    1484:	03 c0       	rjmp	.+6      	; 0x148c <Button_updateState+0x90>
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	dc 01       	movw	r26, r24
    148c:	88 3b       	cpi	r24, 0xB8	; 184
    148e:	2b e0       	ldi	r18, 0x0B	; 11
    1490:	92 07       	cpc	r25, r18
    1492:	a1 05       	cpc	r26, r1
    1494:	b1 05       	cpc	r27, r1
    1496:	98 f3       	brcs	.-26     	; 0x147e <Button_updateState+0x82>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    1498:	be 01       	movw	r22, r28
    149a:	6f 5f       	subi	r22, 0xFF	; 255
    149c:	7f 4f       	sbci	r23, 0xFF	; 255
    149e:	f8 01       	movw	r30, r16
    14a0:	ed 59       	subi	r30, 0x9D	; 157
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	80 81       	ld	r24, Z
    14a6:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <Dio_readPin>
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	89 f4       	brne	.+34     	; 0x14d0 <Button_updateState+0xd4>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	81 11       	cpse	r24, r1
    14b2:	10 c0       	rjmp	.+32     	; 0x14d4 <Button_updateState+0xd8>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
    14b4:	f8 01       	movw	r30, r16
    14b6:	e9 5e       	subi	r30, 0xE9	; 233
    14b8:	f9 4f       	sbci	r31, 0xF9	; 249
    14ba:	10 82       	st	Z, r1
	}
	return BTTN_STATUS_ERROR_OK;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	0b c0       	rjmp	.+22     	; 0x14d6 <Button_updateState+0xda>
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
		return BTTN_STATUS_ERROR_ID_INVALID;
    14c0:	82 e0       	ldi	r24, 0x02	; 2
    14c2:	09 c0       	rjmp	.+18     	; 0x14d6 <Button_updateState+0xda>
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
		return BTTN_STATUS_ERROR_NOK;
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	07 c0       	rjmp	.+14     	; 0x14d6 <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	05 c0       	rjmp	.+10     	; 0x14d6 <Button_updateState+0xda>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	03 c0       	rjmp	.+6      	; 0x14d6 <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	01 c0       	rjmp	.+2      	; 0x14d6 <Button_updateState+0xda>
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
}
    14d6:	0f 90       	pop	r0
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	08 95       	ret

000014e2 <EEPROM_getAddresses>:
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
#if EEPROM_24_MODEL	== AT24C16B
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
    14e2:	9a 01       	movw	r18, r20
    14e4:	22 27       	eor	r18, r18
    14e6:	37 70       	andi	r19, 0x07	; 7
    14e8:	22 0f       	add	r18, r18
    14ea:	23 2f       	mov	r18, r19
    14ec:	22 1f       	adc	r18, r18
    14ee:	33 0b       	sbc	r19, r19
    14f0:	31 95       	neg	r19
    14f2:	20 65       	ori	r18, 0x50	; 80
    14f4:	fc 01       	movw	r30, r24
    14f6:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
    14f8:	fb 01       	movw	r30, r22
    14fa:	40 83       	st	Z, r20
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS;
	pu8_wordAddress[0] = (uint8_t)(u16_location >> 8);
	pu8_wordAddress[1] = (uint8_t)u16_location;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	08 95       	ret

00001500 <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
    1500:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    1504:	83 30       	cpi	r24, 0x03	; 3
    1506:	51 f0       	breq	.+20     	; 0x151c <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
    1508:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
    150c:	85 30       	cpi	r24, 0x05	; 5
    150e:	29 f0       	breq	.+10     	; 0x151a <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
    1510:	83 e0       	ldi	r24, 0x03	; 3
    1512:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
    151a:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
    151c:	08 95       	ret

0000151e <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
    151e:	1f 93       	push	r17
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	00 d0       	rcall	.+0      	; 0x1526 <Eeprom_24_writeByte+0x8>
    1526:	1f 92       	push	r1
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	ac 01       	movw	r20, r24
    152e:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1530:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    1534:	93 30       	cpi	r25, 0x03	; 3
    1536:	11 f5       	brne	.+68     	; 0x157c <Eeprom_24_writeByte+0x5e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    1538:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    153a:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    153c:	be 01       	movw	r22, r28
    153e:	6e 5f       	subi	r22, 0xFE	; 254
    1540:	7f 4f       	sbci	r23, 0xFF	; 255
    1542:	ce 01       	movw	r24, r28
    1544:	01 96       	adiw	r24, 0x01	; 1
    1546:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <EEPROM_getAddresses>
    154a:	18 2f       	mov	r17, r24
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	c1 f4       	brne	.+48     	; 0x1580 <Eeprom_24_writeByte+0x62>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    1550:	21 e0       	ldi	r18, 0x01	; 1
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	ae 01       	movw	r20, r28
    1556:	4d 5f       	subi	r20, 0xFD	; 253
    1558:	5f 4f       	sbci	r21, 0xFF	; 255
    155a:	6a 81       	ldd	r22, Y+2	; 0x02
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	0e 94 60 18 	call	0x30c0	; 0x30c0 <I2C_MasterSendToLocation>
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	79 f4       	brne	.+30     	; 0x1584 <Eeprom_24_writeByte+0x66>
 
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
    1566:	2f e0       	ldi	r18, 0x0F	; 15
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <Eeprom_24_writeByte+0x68>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    157c:	12 e0       	ldi	r17, 0x02	; 2
    157e:	03 c0       	rjmp	.+6      	; 0x1586 <Eeprom_24_writeByte+0x68>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1580:	10 e0       	ldi	r17, 0x00	; 0
    1582:	01 c0       	rjmp	.+2      	; 0x1586 <Eeprom_24_writeByte+0x68>
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1584:	10 e0       	ldi	r17, 0x00	; 0
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
	return EEPROM_24_STATUS_ERROR_OK;
}
    1586:	81 2f       	mov	r24, r17
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	08 95       	ret

00001596 <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
    1596:	ef 92       	push	r14
    1598:	ff 92       	push	r15
    159a:	1f 93       	push	r17
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <Eeprom_24_readByte+0xc>
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    15a8:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    15ac:	93 30       	cpi	r25, 0x03	; 3
    15ae:	21 f5       	brne	.+72     	; 0x15f8 <Eeprom_24_readByte+0x62>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    15b0:	61 15       	cp	r22, r1
    15b2:	71 05       	cpc	r23, r1
    15b4:	19 f1       	breq	.+70     	; 0x15fc <Eeprom_24_readByte+0x66>
    15b6:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    15b8:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    15ba:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    15bc:	be 01       	movw	r22, r28
    15be:	6e 5f       	subi	r22, 0xFE	; 254
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	ce 01       	movw	r24, r28
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <EEPROM_getAddresses>
    15ca:	18 2f       	mov	r17, r24
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	c1 f4       	brne	.+48     	; 0x1600 <Eeprom_24_readByte+0x6a>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    15d0:	21 e0       	ldi	r18, 0x01	; 1
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	a7 01       	movw	r20, r14
    15d6:	6a 81       	ldd	r22, Y+2	; 0x02
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	0e 94 af 18 	call	0x315e	; 0x315e <I2C_MasterReceiveFromLocation>
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	89 f4       	brne	.+34     	; 0x1604 <Eeprom_24_readByte+0x6e>

	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
	
#endif
	Delay_ms(5);
    15e2:	25 e0       	ldi	r18, 0x05	; 5
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    15f6:	07 c0       	rjmp	.+14     	; 0x1606 <Eeprom_24_readByte+0x70>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    15f8:	12 e0       	ldi	r17, 0x02	; 2
    15fa:	05 c0       	rjmp	.+10     	; 0x1606 <Eeprom_24_readByte+0x70>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    15fc:	14 e0       	ldi	r17, 0x04	; 4
    15fe:	03 c0       	rjmp	.+6      	; 0x1606 <Eeprom_24_readByte+0x70>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1600:	10 e0       	ldi	r17, 0x00	; 0
    1602:	01 c0       	rjmp	.+2      	; 0x1606 <Eeprom_24_readByte+0x70>
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1604:	10 e0       	ldi	r17, 0x00	; 0
		return EEPROM_24_STATUS_ERROR_NOK;
	
#endif
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
    1606:	81 2f       	mov	r24, r17
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	ff 90       	pop	r15
    1614:	ef 90       	pop	r14
    1616:	08 95       	ret

00001618 <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	1f 93       	push	r17
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	00 d0       	rcall	.+0      	; 0x1624 <Eeprom_24_writePage+0xc>
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1628:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    162c:	93 30       	cpi	r25, 0x03	; 3
    162e:	f9 f4       	brne	.+62     	; 0x166e <Eeprom_24_writePage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1630:	61 15       	cp	r22, r1
    1632:	71 05       	cpc	r23, r1
    1634:	f1 f0       	breq	.+60     	; 0x1672 <Eeprom_24_writePage+0x5a>
    1636:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
    1638:	90 e1       	ldi	r25, 0x10	; 16
    163a:	89 9f       	mul	r24, r25
    163c:	a0 01       	movw	r20, r0
    163e:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    1640:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
    1642:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    1644:	be 01       	movw	r22, r28
    1646:	6e 5f       	subi	r22, 0xFE	; 254
    1648:	7f 4f       	sbci	r23, 0xFF	; 255
    164a:	ce 01       	movw	r24, r28
    164c:	01 96       	adiw	r24, 0x01	; 1
    164e:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <EEPROM_getAddresses>
    1652:	18 2f       	mov	r17, r24
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	79 f4       	brne	.+30     	; 0x1676 <Eeprom_24_writePage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    1658:	20 e1       	ldi	r18, 0x10	; 16
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	a7 01       	movw	r20, r14
    165e:	6a 81       	ldd	r22, Y+2	; 0x02
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	0e 94 60 18 	call	0x30c0	; 0x30c0 <I2C_MasterSendToLocation>
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	39 f0       	breq	.+14     	; 0x1678 <Eeprom_24_writePage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    166a:	10 e0       	ldi	r17, 0x00	; 0
    166c:	05 c0       	rjmp	.+10     	; 0x1678 <Eeprom_24_writePage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    166e:	12 e0       	ldi	r17, 0x02	; 2
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <Eeprom_24_writePage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1672:	14 e0       	ldi	r17, 0x04	; 4
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <Eeprom_24_writePage+0x60>
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1676:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    1678:	81 2f       	mov	r24, r17
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	ff 90       	pop	r15
    1686:	ef 90       	pop	r14
    1688:	08 95       	ret

0000168a <Eeprom_24_readPage>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory page.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read data inside a specific page in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPage(uint8_t u8_page, uint8_t *pu8_data)
{
    168a:	ef 92       	push	r14
    168c:	ff 92       	push	r15
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	00 d0       	rcall	.+0      	; 0x1696 <Eeprom_24_readPage+0xc>
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    169a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    169e:	93 30       	cpi	r25, 0x03	; 3
    16a0:	f9 f4       	brne	.+62     	; 0x16e0 <Eeprom_24_readPage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    16a2:	61 15       	cp	r22, r1
    16a4:	71 05       	cpc	r23, r1
    16a6:	f1 f0       	breq	.+60     	; 0x16e4 <Eeprom_24_readPage+0x5a>
    16a8:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
    16aa:	90 e1       	ldi	r25, 0x10	; 16
    16ac:	89 9f       	mul	r24, r25
    16ae:	a0 01       	movw	r20, r0
    16b0:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    16b2:	19 82       	std	Y+1, r1	; 0x01

#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
    16b4:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    16b6:	be 01       	movw	r22, r28
    16b8:	6e 5f       	subi	r22, 0xFE	; 254
    16ba:	7f 4f       	sbci	r23, 0xFF	; 255
    16bc:	ce 01       	movw	r24, r28
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <EEPROM_getAddresses>
    16c4:	18 2f       	mov	r17, r24
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	79 f4       	brne	.+30     	; 0x16e8 <Eeprom_24_readPage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    16ca:	20 e1       	ldi	r18, 0x10	; 16
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	a7 01       	movw	r20, r14
    16d0:	6a 81       	ldd	r22, Y+2	; 0x02
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	0e 94 af 18 	call	0x315e	; 0x315e <I2C_MasterReceiveFromLocation>
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	39 f0       	breq	.+14     	; 0x16ea <Eeprom_24_readPage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    16dc:	10 e0       	ldi	r17, 0x00	; 0
    16de:	05 c0       	rjmp	.+10     	; 0x16ea <Eeprom_24_readPage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    16e0:	12 e0       	ldi	r17, 0x02	; 2
    16e2:	03 c0       	rjmp	.+6      	; 0x16ea <Eeprom_24_readPage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    16e4:	14 e0       	ldi	r17, 0x04	; 4
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <Eeprom_24_readPage+0x60>
	uint8_t u8_slaveAddr=0;

#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    16e8:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    16ea:	81 2f       	mov	r24, r17
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	1f 91       	pop	r17
    16f6:	ff 90       	pop	r15
    16f8:	ef 90       	pop	r14
    16fa:	08 95       	ret

000016fc <Eeprom_24_writePacket>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Multiple data bytes to a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    16fc:	6f 92       	push	r6
    16fe:	7f 92       	push	r7
    1700:	8f 92       	push	r8
    1702:	9f 92       	push	r9
    1704:	af 92       	push	r10
    1706:	bf 92       	push	r11
    1708:	cf 92       	push	r12
    170a:	df 92       	push	r13
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	00 d0       	rcall	.+0      	; 0x171a <Eeprom_24_writePacket+0x1e>
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	5c 01       	movw	r10, r24
    1720:	6b 01       	movw	r12, r22
    1722:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1724:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	09 f0       	breq	.+2      	; 0x172e <Eeprom_24_writePacket+0x32>
    172c:	a1 c0       	rjmp	.+322    	; 0x1870 <Eeprom_24_writePacket+0x174>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    172e:	67 2b       	or	r22, r23
    1730:	09 f4       	brne	.+2      	; 0x1734 <Eeprom_24_writePacket+0x38>
    1732:	a0 c0       	rjmp	.+320    	; 0x1874 <Eeprom_24_writePacket+0x178>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    1734:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    1736:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    1738:	a5 01       	movw	r20, r10
    173a:	be 01       	movw	r22, r28
    173c:	6e 5f       	subi	r22, 0xFE	; 254
    173e:	7f 4f       	sbci	r23, 0xFF	; 255
    1740:	ce 01       	movw	r24, r28
    1742:	01 96       	adiw	r24, 0x01	; 1
    1744:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <EEPROM_getAddresses>
    1748:	18 2f       	mov	r17, r24
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	09 f0       	breq	.+2      	; 0x1750 <Eeprom_24_writePacket+0x54>
    174e:	94 c0       	rjmp	.+296    	; 0x1878 <Eeprom_24_writePacket+0x17c>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;
    1750:	45 01       	movw	r8, r10
    1752:	80 ef       	ldi	r24, 0xF0	; 240
    1754:	88 22       	and	r8, r24
    1756:	87 e0       	ldi	r24, 0x07	; 7
    1758:	98 22       	and	r9, r24
    175a:	96 94       	lsr	r9
    175c:	87 94       	ror	r8
    175e:	96 94       	lsr	r9
    1760:	87 94       	ror	r8
    1762:	96 94       	lsr	r9
    1764:	87 94       	ror	r8
    1766:	96 94       	lsr	r9
    1768:	87 94       	ror	r8
    176a:	68 2c       	mov	r6, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
    176c:	8a 2d       	mov	r24, r10
    176e:	8f 70       	andi	r24, 0x0F	; 15
	if(u8_byteOffset != 0)
    1770:	51 f1       	breq	.+84     	; 0x17c6 <Eeprom_24_writePacket+0xca>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    1772:	90 e1       	ldi	r25, 0x10	; 16
    1774:	a9 2e       	mov	r10, r25
    1776:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    1778:	b1 2c       	mov	r11, r1
    177a:	ea 14       	cp	r14, r10
    177c:	fb 04       	cpc	r15, r11
    177e:	58 f4       	brcc	.+22     	; 0x1796 <Eeprom_24_writePacket+0x9a>
		{
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1780:	97 01       	movw	r18, r14
    1782:	a6 01       	movw	r20, r12
    1784:	6a 81       	ldd	r22, Y+2	; 0x02
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	0e 94 60 18 	call	0x30c0	; 0x30c0 <I2C_MasterSendToLocation>
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	09 f4       	brne	.+2      	; 0x1792 <Eeprom_24_writePacket+0x96>
    1790:	7c c0       	rjmp	.+248    	; 0x188a <Eeprom_24_writePacket+0x18e>
				return EEPROM_24_STATUS_ERROR_NOK;
    1792:	10 e0       	ldi	r17, 0x00	; 0
    1794:	7a c0       	rjmp	.+244    	; 0x188a <Eeprom_24_writePacket+0x18e>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    1796:	95 01       	movw	r18, r10
    1798:	a6 01       	movw	r20, r12
    179a:	6a 81       	ldd	r22, Y+2	; 0x02
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	0e 94 60 18 	call	0x30c0	; 0x30c0 <I2C_MasterSendToLocation>
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <Eeprom_24_writePacket+0xac>
    17a6:	6a c0       	rjmp	.+212    	; 0x187c <Eeprom_24_writePacket+0x180>
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    17a8:	ea 18       	sub	r14, r10
    17aa:	fb 08       	sbc	r15, r11
		i=1;
		Delay_ms(15);
    17ac:	2f e0       	ldi	r18, 0x0F	; 15
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e0       	ldi	r20, 0x00	; 0
    17b2:	50 e0       	ldi	r21, 0x00	; 0
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	70 e0       	ldi	r23, 0x00	; 0
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
    17c0:	77 24       	eor	r7, r7
    17c2:	73 94       	inc	r7
    17c4:	03 c0       	rjmp	.+6      	; 0x17cc <Eeprom_24_writePacket+0xd0>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
    17c6:	71 2c       	mov	r7, r1

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
    17c8:	a1 2c       	mov	r10, r1
    17ca:	b1 2c       	mov	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
    17cc:	c7 01       	movw	r24, r14
    17ce:	92 95       	swap	r25
    17d0:	82 95       	swap	r24
    17d2:	8f 70       	andi	r24, 0x0F	; 15
    17d4:	89 27       	eor	r24, r25
    17d6:	9f 70       	andi	r25, 0x0F	; 15
    17d8:	89 27       	eor	r24, r25
    17da:	08 2f       	mov	r16, r24
	while (pages_num > 0)
    17dc:	1c c0       	rjmp	.+56     	; 0x1816 <Eeprom_24_writePacket+0x11a>
	{
		pages_num--;
    17de:	01 50       	subi	r16, 0x01	; 1
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    17e0:	b6 01       	movw	r22, r12
    17e2:	6a 0d       	add	r22, r10
    17e4:	7b 1d       	adc	r23, r11
    17e6:	87 2d       	mov	r24, r7
    17e8:	86 0d       	add	r24, r6
    17ea:	0e 94 0c 0b 	call	0x1618	; 0x1618 <Eeprom_24_writePage>
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <Eeprom_24_writePacket+0xf8>
    17f2:	46 c0       	rjmp	.+140    	; 0x1880 <Eeprom_24_writePacket+0x184>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    17f4:	73 94       	inc	r7
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
    17f6:	80 e1       	ldi	r24, 0x10	; 16
    17f8:	e8 1a       	sub	r14, r24
    17fa:	f1 08       	sbc	r15, r1
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
    17fc:	80 e1       	ldi	r24, 0x10	; 16
    17fe:	a8 0e       	add	r10, r24
    1800:	b1 1c       	adc	r11, r1
		Delay_ms(15);
    1802:	2f e0       	ldi	r18, 0x0F	; 15
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
    1816:	10 16       	cp	r1, r16
    1818:	14 f3       	brlt	.-60     	; 0x17de <Eeprom_24_writePacket+0xe2>
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
		Delay_ms(15);
	}
	
	if (u16_dataLen > 0)
    181a:	e1 14       	cp	r14, r1
    181c:	f1 04       	cpc	r15, r1
    181e:	a9 f1       	breq	.+106    	; 0x188a <Eeprom_24_writePacket+0x18e>
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
    1820:	a4 01       	movw	r20, r8
    1822:	47 0d       	add	r20, r7
    1824:	51 1d       	adc	r21, r1
    1826:	42 95       	swap	r20
    1828:	52 95       	swap	r21
    182a:	50 7f       	andi	r21, 0xF0	; 240
    182c:	54 27       	eor	r21, r20
    182e:	40 7f       	andi	r20, 0xF0	; 240
    1830:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
    1832:	be 01       	movw	r22, r28
    1834:	6e 5f       	subi	r22, 0xFE	; 254
    1836:	7f 4f       	sbci	r23, 0xFF	; 255
    1838:	ce 01       	movw	r24, r28
    183a:	01 96       	adiw	r24, 0x01	; 1
    183c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <EEPROM_getAddresses>
    1840:	18 2f       	mov	r17, r24
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	f9 f4       	brne	.+62     	; 0x1884 <Eeprom_24_writePacket+0x188>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1846:	a6 01       	movw	r20, r12
    1848:	4a 0d       	add	r20, r10
    184a:	5b 1d       	adc	r21, r11
    184c:	97 01       	movw	r18, r14
    184e:	6a 81       	ldd	r22, Y+2	; 0x02
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	0e 94 60 18 	call	0x30c0	; 0x30c0 <I2C_MasterSendToLocation>
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	b9 f4       	brne	.+46     	; 0x1888 <Eeprom_24_writePacket+0x18c>
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
    185a:	2f e0       	ldi	r18, 0x0F	; 15
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e0       	ldi	r20, 0x00	; 0
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
    186e:	0d c0       	rjmp	.+26     	; 0x188a <Eeprom_24_writePacket+0x18e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1870:	12 e0       	ldi	r17, 0x02	; 2
    1872:	0b c0       	rjmp	.+22     	; 0x188a <Eeprom_24_writePacket+0x18e>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1874:	14 e0       	ldi	r17, 0x04	; 4
    1876:	09 c0       	rjmp	.+18     	; 0x188a <Eeprom_24_writePacket+0x18e>
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1878:	10 e0       	ldi	r17, 0x00	; 0
    187a:	07 c0       	rjmp	.+14     	; 0x188a <Eeprom_24_writePacket+0x18e>
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    187c:	10 e0       	ldi	r17, 0x00	; 0
    187e:	05 c0       	rjmp	.+10     	; 0x188a <Eeprom_24_writePacket+0x18e>
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
	{
		pages_num--;
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1880:	10 e0       	ldi	r17, 0x00	; 0
    1882:	03 c0       	rjmp	.+6      	; 0x188a <Eeprom_24_writePacket+0x18e>
	
	if (u16_dataLen > 0)
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1884:	10 e0       	ldi	r17, 0x00	; 0
    1886:	01 c0       	rjmp	.+2      	; 0x188a <Eeprom_24_writePacket+0x18e>
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1888:	10 e0       	ldi	r17, 0x00	; 0
		Delay_ms(15);
	}

#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    188a:	81 2f       	mov	r24, r17
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	ff 90       	pop	r15
    189a:	ef 90       	pop	r14
    189c:	df 90       	pop	r13
    189e:	cf 90       	pop	r12
    18a0:	bf 90       	pop	r11
    18a2:	af 90       	pop	r10
    18a4:	9f 90       	pop	r9
    18a6:	8f 90       	pop	r8
    18a8:	7f 90       	pop	r7
    18aa:	6f 90       	pop	r6
    18ac:	08 95       	ret

000018ae <Eeprom_24_readPacket>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read Multiple data bytes from a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    18ae:	6f 92       	push	r6
    18b0:	7f 92       	push	r7
    18b2:	8f 92       	push	r8
    18b4:	9f 92       	push	r9
    18b6:	af 92       	push	r10
    18b8:	bf 92       	push	r11
    18ba:	cf 92       	push	r12
    18bc:	df 92       	push	r13
    18be:	ef 92       	push	r14
    18c0:	ff 92       	push	r15
    18c2:	0f 93       	push	r16
    18c4:	1f 93       	push	r17
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	00 d0       	rcall	.+0      	; 0x18cc <Eeprom_24_readPacket+0x1e>
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	5c 01       	movw	r10, r24
    18d2:	6b 01       	movw	r12, r22
    18d4:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    18d6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    18da:	83 30       	cpi	r24, 0x03	; 3
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <Eeprom_24_readPacket+0x32>
    18de:	84 c0       	rjmp	.+264    	; 0x19e8 <Eeprom_24_readPacket+0x13a>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    18e0:	67 2b       	or	r22, r23
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <Eeprom_24_readPacket+0x38>
    18e4:	83 c0       	rjmp	.+262    	; 0x19ec <Eeprom_24_readPacket+0x13e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    18e6:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u16dataIndex=0;
	uint8_t i=0;

#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;	
    18e8:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    18ea:	a5 01       	movw	r20, r10
    18ec:	be 01       	movw	r22, r28
    18ee:	6e 5f       	subi	r22, 0xFE	; 254
    18f0:	7f 4f       	sbci	r23, 0xFF	; 255
    18f2:	ce 01       	movw	r24, r28
    18f4:	01 96       	adiw	r24, 0x01	; 1
    18f6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <EEPROM_getAddresses>
    18fa:	18 2f       	mov	r17, r24
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	09 f0       	breq	.+2      	; 0x1902 <Eeprom_24_readPacket+0x54>
    1900:	77 c0       	rjmp	.+238    	; 0x19f0 <Eeprom_24_readPacket+0x142>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;		//The first page to write in
    1902:	45 01       	movw	r8, r10
    1904:	80 ef       	ldi	r24, 0xF0	; 240
    1906:	88 22       	and	r8, r24
    1908:	87 e0       	ldi	r24, 0x07	; 7
    190a:	98 22       	and	r9, r24
    190c:	96 94       	lsr	r9
    190e:	87 94       	ror	r8
    1910:	96 94       	lsr	r9
    1912:	87 94       	ror	r8
    1914:	96 94       	lsr	r9
    1916:	87 94       	ror	r8
    1918:	96 94       	lsr	r9
    191a:	87 94       	ror	r8
    191c:	78 2c       	mov	r7, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
    191e:	8a 2d       	mov	r24, r10
    1920:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
    1922:	f9 f0       	breq	.+62     	; 0x1962 <Eeprom_24_readPacket+0xb4>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    1924:	90 e1       	ldi	r25, 0x10	; 16
    1926:	a9 2e       	mov	r10, r25
    1928:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    192a:	b1 2c       	mov	r11, r1
    192c:	ea 14       	cp	r14, r10
    192e:	fb 04       	cpc	r15, r11
    1930:	58 f4       	brcc	.+22     	; 0x1948 <Eeprom_24_readPacket+0x9a>
		{
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1932:	97 01       	movw	r18, r14
    1934:	a6 01       	movw	r20, r12
    1936:	6a 81       	ldd	r22, Y+2	; 0x02
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	0e 94 af 18 	call	0x315e	; 0x315e <I2C_MasterReceiveFromLocation>
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	09 f4       	brne	.+2      	; 0x1944 <Eeprom_24_readPacket+0x96>
    1942:	5d c0       	rjmp	.+186    	; 0x19fe <Eeprom_24_readPacket+0x150>
				return EEPROM_24_STATUS_ERROR_NOK;
    1944:	10 e0       	ldi	r17, 0x00	; 0
    1946:	5b c0       	rjmp	.+182    	; 0x19fe <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    1948:	95 01       	movw	r18, r10
    194a:	a6 01       	movw	r20, r12
    194c:	6a 81       	ldd	r22, Y+2	; 0x02
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	0e 94 af 18 	call	0x315e	; 0x315e <I2C_MasterReceiveFromLocation>
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	09 f0       	breq	.+2      	; 0x195a <Eeprom_24_readPacket+0xac>
    1958:	4d c0       	rjmp	.+154    	; 0x19f4 <Eeprom_24_readPacket+0x146>
			return EEPROM_24_STATUS_ERROR_NOK;
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    195a:	ea 18       	sub	r14, r10
    195c:	fb 08       	sbc	r15, r11
		i=1;
    195e:	01 e0       	ldi	r16, 0x01	; 1
    1960:	03 c0       	rjmp	.+6      	; 0x1968 <Eeprom_24_readPacket+0xba>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
    1962:	00 e0       	ldi	r16, 0x00	; 0

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
    1964:	a1 2c       	mov	r10, r1
    1966:	b1 2c       	mov	r11, r1
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
    1968:	c7 01       	movw	r24, r14
    196a:	92 95       	swap	r25
    196c:	82 95       	swap	r24
    196e:	8f 70       	andi	r24, 0x0F	; 15
    1970:	89 27       	eor	r24, r25
    1972:	9f 70       	andi	r25, 0x0F	; 15
    1974:	89 27       	eor	r24, r25
	while (pages_num--)
    1976:	11 c0       	rjmp	.+34     	; 0x199a <Eeprom_24_readPacket+0xec>
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    1978:	b6 01       	movw	r22, r12
    197a:	6a 0d       	add	r22, r10
    197c:	7b 1d       	adc	r23, r11
    197e:	80 2f       	mov	r24, r16
    1980:	87 0d       	add	r24, r7
    1982:	0e 94 45 0b 	call	0x168a	; 0x168a <Eeprom_24_readPage>
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	b9 f5       	brne	.+110    	; 0x19f8 <Eeprom_24_readPacket+0x14a>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    198a:	0f 5f       	subi	r16, 0xFF	; 255
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
    198c:	80 e1       	ldi	r24, 0x10	; 16
    198e:	e8 1a       	sub	r14, r24
    1990:	f1 08       	sbc	r15, r1
		u16dataIndex += EEPROM_24_PAGE_BYTES;
    1992:	80 e1       	ldi	r24, 0x10	; 16
    1994:	a8 0e       	add	r10, r24
    1996:	b1 1c       	adc	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
    1998:	86 2d       	mov	r24, r6
    199a:	66 24       	eor	r6, r6
    199c:	6a 94       	dec	r6
    199e:	68 0e       	add	r6, r24
    19a0:	81 11       	cpse	r24, r1
    19a2:	ea cf       	rjmp	.-44     	; 0x1978 <Eeprom_24_readPacket+0xca>
		i++;
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u16dataIndex += EEPROM_24_PAGE_BYTES;
	}

	if (u16_dataLen > 0)
    19a4:	e1 14       	cp	r14, r1
    19a6:	f1 04       	cpc	r15, r1
    19a8:	51 f1       	breq	.+84     	; 0x19fe <Eeprom_24_readPacket+0x150>
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
    19aa:	a4 01       	movw	r20, r8
    19ac:	40 0f       	add	r20, r16
    19ae:	51 1d       	adc	r21, r1
    19b0:	42 95       	swap	r20
    19b2:	52 95       	swap	r21
    19b4:	50 7f       	andi	r21, 0xF0	; 240
    19b6:	54 27       	eor	r21, r20
    19b8:	40 7f       	andi	r20, 0xF0	; 240
    19ba:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
    19bc:	be 01       	movw	r22, r28
    19be:	6e 5f       	subi	r22, 0xFE	; 254
    19c0:	7f 4f       	sbci	r23, 0xFF	; 255
    19c2:	ce 01       	movw	r24, r28
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <EEPROM_getAddresses>
    19ca:	18 2f       	mov	r17, r24
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	b1 f4       	brne	.+44     	; 0x19fc <Eeprom_24_readPacket+0x14e>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    19d0:	a6 01       	movw	r20, r12
    19d2:	4a 0d       	add	r20, r10
    19d4:	5b 1d       	adc	r21, r11
    19d6:	97 01       	movw	r18, r14
    19d8:	6a 81       	ldd	r22, Y+2	; 0x02
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	0e 94 af 18 	call	0x315e	; 0x315e <I2C_MasterReceiveFromLocation>
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	69 f0       	breq	.+26     	; 0x19fe <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_NOK;
    19e4:	10 e0       	ldi	r17, 0x00	; 0
    19e6:	0b c0       	rjmp	.+22     	; 0x19fe <Eeprom_24_readPacket+0x150>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    19e8:	12 e0       	ldi	r17, 0x02	; 2
    19ea:	09 c0       	rjmp	.+18     	; 0x19fe <Eeprom_24_readPacket+0x150>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    19ec:	14 e0       	ldi	r17, 0x04	; 4
    19ee:	07 c0       	rjmp	.+14     	; 0x19fe <Eeprom_24_readPacket+0x150>
	uint8_t i=0;

#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    19f0:	10 e0       	ldi	r17, 0x00	; 0
    19f2:	05 c0       	rjmp	.+10     	; 0x19fe <Eeprom_24_readPacket+0x150>
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    19f4:	10 e0       	ldi	r17, 0x00	; 0
    19f6:	03 c0       	rjmp	.+6      	; 0x19fe <Eeprom_24_readPacket+0x150>
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    19f8:	10 e0       	ldi	r17, 0x00	; 0
    19fa:	01 c0       	rjmp	.+2      	; 0x19fe <Eeprom_24_readPacket+0x150>

	if (u16_dataLen > 0)
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    19fc:	10 e0       	ldi	r17, 0x00	; 0
		if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    19fe:	81 2f       	mov	r24, r17
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	ff 90       	pop	r15
    1a0e:	ef 90       	pop	r14
    1a10:	df 90       	pop	r13
    1a12:	cf 90       	pop	r12
    1a14:	bf 90       	pop	r11
    1a16:	af 90       	pop	r10
    1a18:	9f 90       	pop	r9
    1a1a:	8f 90       	pop	r8
    1a1c:	7f 90       	pop	r7
    1a1e:	6f 90       	pop	r6
    1a20:	08 95       	ret

00001a22 <Keypad_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is already initialized */
	if (genu_KeypadModuleState == KEYPAD_STATUS_INIT)
    1a22:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <genu_KeypadModuleState>
    1a26:	85 30       	cpi	r24, 0x05	; 5
    1a28:	71 f0       	breq	.+28     	; 0x1a46 <Keypad_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    1a2a:	85 e8       	ldi	r24, 0x85	; 133
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	0e 94 1a 12 	call	0x2434	; 0x2434 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    1a32:	81 30       	cpi	r24, 0x01	; 1
    1a34:	11 f0       	breq	.+4      	; 0x1a3a <Keypad_init+0x18>
    1a36:	87 30       	cpi	r24, 0x07	; 7
    1a38:	29 f4       	brne	.+10     	; 0x1a44 <Keypad_init+0x22>
		return KEYPAD_STATUS_ERROR_NOK;
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
    1a3a:	85 e0       	ldi	r24, 0x05	; 5
    1a3c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <genu_KeypadModuleState>
	return KEYPAD_STATUS_ERROR_OK;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return KEYPAD_STATUS_ERROR_NOK;
    1a44:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
	return KEYPAD_STATUS_ERROR_OK;
}
    1a46:	08 95       	ret

00001a48 <Keypad_readKey>:
* Parameters (out): pu8_pressedKey - Pointer to a Char to hold the pressed key.
* Return value: enuKeypad_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current pressed Key.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuKeypad_Status_t Keypad_readKey(uint8_t * pu8_pressedKey)
{
    1a48:	af 92       	push	r10
    1a4a:	bf 92       	push	r11
    1a4c:	cf 92       	push	r12
    1a4e:	df 92       	push	r13
    1a50:	ef 92       	push	r14
    1a52:	ff 92       	push	r15
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	1f 92       	push	r1
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	6c 01       	movw	r12, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
    1a64:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <genu_KeypadModuleState>
    1a68:	95 30       	cpi	r25, 0x05	; 5
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <Keypad_readKey+0x26>
    1a6c:	50 c0       	rjmp	.+160    	; 0x1b0e <Keypad_readKey+0xc6>
	{
		return KEYPAD_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
    1a6e:	c1 14       	cp	r12, r1
    1a70:	d1 04       	cpc	r13, r1
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <Keypad_readKey+0x2e>
    1a74:	4e c0       	rjmp	.+156    	; 0x1b12 <Keypad_readKey+0xca>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	89 83       	std	Y+1, r24	; 0x01
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    1a7a:	00 e0       	ldi	r16, 0x00	; 0
    1a7c:	43 c0       	rjmp	.+134    	; 0x1b04 <Keypad_readKey+0xbc>
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
    1a7e:	a0 2e       	mov	r10, r16
    1a80:	b1 2c       	mov	r11, r1
    1a82:	f5 01       	movw	r30, r10
    1a84:	e6 58       	subi	r30, 0x86	; 134
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1a90:	81 30       	cpi	r24, 0x01	; 1
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <Keypad_readKey+0x4e>
    1a94:	40 c0       	rjmp	.+128    	; 0x1b16 <Keypad_readKey+0xce>
    1a96:	10 e0       	ldi	r17, 0x00	; 0
    1a98:	29 c0       	rjmp	.+82     	; 0x1aec <Keypad_readKey+0xa4>
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
    1a9a:	e1 2e       	mov	r14, r17
    1a9c:	f1 2c       	mov	r15, r1
    1a9e:	f7 01       	movw	r30, r14
    1aa0:	ea 58       	subi	r30, 0x8A	; 138
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	be 01       	movw	r22, r28
    1aa6:	6f 5f       	subi	r22, 0xFF	; 255
    1aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aaa:	80 81       	ld	r24, Z
    1aac:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <Dio_readPin>
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	99 f5       	brne	.+102    	; 0x1b1a <Keypad_readKey+0xd2>
				return KEYPAD_STATUS_ERROR_NOK;
			if(u8_pinValue == PIN_LOW)
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	81 11       	cpse	r24, r1
    1ab8:	18 c0       	rjmp	.+48     	; 0x1aea <Keypad_readKey+0xa2>
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	f5 01       	movw	r30, r10
    1abe:	e6 58       	subi	r30, 0x86	; 134
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	80 81       	ld	r24, Z
    1ac4:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	49 f5       	brne	.+82     	; 0x1b1e <Keypad_readKey+0xd6>
					return KEYPAD_STATUS_ERROR_NOK;
				*pu8_pressedKey = gau8_ButtonSymbols[u8_RowIndex][u8_ColumnIndex];
    1acc:	97 01       	movw	r18, r14
    1ace:	22 0f       	add	r18, r18
    1ad0:	33 1f       	adc	r19, r19
    1ad2:	22 0f       	add	r18, r18
    1ad4:	33 1f       	adc	r19, r19
    1ad6:	2a 59       	subi	r18, 0x9A	; 154
    1ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    1ada:	f9 01       	movw	r30, r18
    1adc:	ea 0d       	add	r30, r10
    1ade:	fb 1d       	adc	r31, r11
    1ae0:	80 81       	ld	r24, Z
    1ae2:	f6 01       	movw	r30, r12
    1ae4:	80 83       	st	Z, r24
				return KEYPAD_STATUS_PRESSED;
    1ae6:	86 e0       	ldi	r24, 0x06	; 6
    1ae8:	1d c0       	rjmp	.+58     	; 0x1b24 <Keypad_readKey+0xdc>
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
    1aea:	1f 5f       	subi	r17, 0xFF	; 255
    1aec:	14 30       	cpi	r17, 0x04	; 4
    1aee:	a8 f2       	brcs	.-86     	; 0x1a9a <Keypad_readKey+0x52>
				return KEYPAD_STATUS_PRESSED;
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    1af0:	f5 01       	movw	r30, r10
    1af2:	e6 58       	subi	r30, 0x86	; 134
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	61 e0       	ldi	r22, 0x01	; 1
    1af8:	80 81       	ld	r24, Z
    1afa:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	81 f4       	brne	.+32     	; 0x1b22 <Keypad_readKey+0xda>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    1b02:	0f 5f       	subi	r16, 0xFF	; 255
    1b04:	04 30       	cpi	r16, 0x04	; 4
    1b06:	08 f4       	brcc	.+2      	; 0x1b0a <Keypad_readKey+0xc2>
    1b08:	ba cf       	rjmp	.-140    	; 0x1a7e <Keypad_readKey+0x36>
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    1b0a:	87 e0       	ldi	r24, 0x07	; 7
    1b0c:	0b c0       	rjmp	.+22     	; 0x1b24 <Keypad_readKey+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
	{
		return KEYPAD_STATUS_NOT_INIT;
    1b0e:	84 e0       	ldi	r24, 0x04	; 4
    1b10:	09 c0       	rjmp	.+18     	; 0x1b24 <Keypad_readKey+0xdc>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
	{
		return KEYPAD_STATUS_ERROR_NULL;
    1b12:	83 e0       	ldi	r24, 0x03	; 3
    1b14:	07 c0       	rjmp	.+14     	; 0x1b24 <Keypad_readKey+0xdc>
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	05 c0       	rjmp	.+10     	; 0x1b24 <Keypad_readKey+0xdc>
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
				return KEYPAD_STATUS_ERROR_NOK;
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	03 c0       	rjmp	.+6      	; 0x1b24 <Keypad_readKey+0xdc>
			if(u8_pinValue == PIN_LOW)
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
					return KEYPAD_STATUS_ERROR_NOK;
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <Keypad_readKey+0xdc>
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    1b22:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    1b24:	0f 90       	pop	r0
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	1f 91       	pop	r17
    1b2c:	0f 91       	pop	r16
    1b2e:	ff 90       	pop	r15
    1b30:	ef 90       	pop	r14
    1b32:	df 90       	pop	r13
    1b34:	cf 90       	pop	r12
    1b36:	bf 90       	pop	r11
    1b38:	af 90       	pop	r10
    1b3a:	08 95       	ret

00001b3c <Lcd_WriteData>:
{
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, BIN);
	Lcd_printString(au8_snum);
	return LCD_STATUS_ERROR_OK;
}
    1b3c:	cf 93       	push	r28
    1b3e:	c8 2f       	mov	r28, r24
    1b40:	80 ff       	sbrs	r24, 0
    1b42:	05 c0       	rjmp	.+10     	; 0x1b4e <Lcd_WriteData+0x12>
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	8a e0       	ldi	r24, 0x0A	; 10
    1b48:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1b4c:	04 c0       	rjmp	.+8      	; 0x1b56 <Lcd_WriteData+0x1a>
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	8a e0       	ldi	r24, 0x0A	; 10
    1b52:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1b56:	c1 ff       	sbrs	r28, 1
    1b58:	05 c0       	rjmp	.+10     	; 0x1b64 <Lcd_WriteData+0x28>
    1b5a:	61 e0       	ldi	r22, 0x01	; 1
    1b5c:	8b e0       	ldi	r24, 0x0B	; 11
    1b5e:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1b62:	04 c0       	rjmp	.+8      	; 0x1b6c <Lcd_WriteData+0x30>
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	8b e0       	ldi	r24, 0x0B	; 11
    1b68:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1b6c:	c2 ff       	sbrs	r28, 2
    1b6e:	05 c0       	rjmp	.+10     	; 0x1b7a <Lcd_WriteData+0x3e>
    1b70:	61 e0       	ldi	r22, 0x01	; 1
    1b72:	8c e0       	ldi	r24, 0x0C	; 12
    1b74:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1b78:	04 c0       	rjmp	.+8      	; 0x1b82 <Lcd_WriteData+0x46>
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	8c e0       	ldi	r24, 0x0C	; 12
    1b7e:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1b82:	c3 ff       	sbrs	r28, 3
    1b84:	05 c0       	rjmp	.+10     	; 0x1b90 <Lcd_WriteData+0x54>
    1b86:	61 e0       	ldi	r22, 0x01	; 1
    1b88:	8d e0       	ldi	r24, 0x0D	; 13
    1b8a:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1b8e:	04 c0       	rjmp	.+8      	; 0x1b98 <Lcd_WriteData+0x5c>
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	8d e0       	ldi	r24, 0x0D	; 13
    1b94:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1b98:	cf 91       	pop	r28
    1b9a:	08 95       	ret

00001b9c <Lcd_EnableToggle>:
    1b9c:	61 e0       	ldi	r22, 0x01	; 1
    1b9e:	89 e0       	ldi	r24, 0x09	; 9
    1ba0:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1ba4:	21 e0       	ldi	r18, 0x01	; 1
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	50 e0       	ldi	r21, 0x00	; 0
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	89 e0       	ldi	r24, 0x09	; 9
    1bbc:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1bc0:	08 95       	ret

00001bc2 <Lcd_sendCommand>:
    1bc2:	cf 93       	push	r28
    1bc4:	c8 2f       	mov	r28, r24
    1bc6:	60 e0       	ldi	r22, 0x00	; 0
    1bc8:	87 e0       	ldi	r24, 0x07	; 7
    1bca:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1bce:	8c 2f       	mov	r24, r28
    1bd0:	82 95       	swap	r24
    1bd2:	8f 70       	andi	r24, 0x0F	; 15
    1bd4:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <Lcd_WriteData>
    1bd8:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <Lcd_EnableToggle>
    1bdc:	21 e0       	ldi	r18, 0x01	; 1
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	50 e0       	ldi	r21, 0x00	; 0
    1be4:	60 e0       	ldi	r22, 0x00	; 0
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
    1bf0:	8c 2f       	mov	r24, r28
    1bf2:	8f 70       	andi	r24, 0x0F	; 15
    1bf4:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <Lcd_WriteData>
    1bf8:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <Lcd_EnableToggle>
    1bfc:	22 e0       	ldi	r18, 0x02	; 2
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	50 e0       	ldi	r21, 0x00	; 0
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	cf 91       	pop	r28
    1c14:	08 95       	ret

00001c16 <Lcd_init>:
    1c16:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <genu_LcdModuleState>
    1c1a:	86 30       	cpi	r24, 0x06	; 6
    1c1c:	91 f1       	breq	.+100    	; 0x1c82 <Lcd_init+0x6c>
    1c1e:	85 e8       	ldi	r24, 0x85	; 133
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	0e 94 1a 12 	call	0x2434	; 0x2434 <Dio_init>
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	11 f0       	breq	.+4      	; 0x1c2e <Lcd_init+0x18>
    1c2a:	87 30       	cpi	r24, 0x07	; 7
    1c2c:	49 f5       	brne	.+82     	; 0x1c80 <Lcd_init+0x6a>
    1c2e:	24 e1       	ldi	r18, 0x14	; 20
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	50 e0       	ldi	r21, 0x00	; 0
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	87 e0       	ldi	r24, 0x07	; 7
    1c46:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	89 e0       	ldi	r24, 0x09	; 9
    1c4e:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1c52:	83 e3       	ldi	r24, 0x33	; 51
    1c54:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <Lcd_sendCommand>
    1c58:	82 e3       	ldi	r24, 0x32	; 50
    1c5a:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <Lcd_sendCommand>
    1c5e:	88 e2       	ldi	r24, 0x28	; 40
    1c60:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <Lcd_sendCommand>
    1c64:	8c e0       	ldi	r24, 0x0C	; 12
    1c66:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <Lcd_sendCommand>
    1c6a:	86 e0       	ldi	r24, 0x06	; 6
    1c6c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <Lcd_sendCommand>
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <Lcd_sendCommand>
    1c76:	86 e0       	ldi	r24, 0x06	; 6
    1c78:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <genu_LcdModuleState>
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	08 95       	ret
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	08 95       	ret

00001c84 <Lcd_setCursor>:
    1c84:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <genu_LcdModuleState>
    1c88:	96 30       	cpi	r25, 0x06	; 6
    1c8a:	89 f4       	brne	.+34     	; 0x1cae <Lcd_setCursor+0x2a>
    1c8c:	83 30       	cpi	r24, 0x03	; 3
    1c8e:	88 f4       	brcc	.+34     	; 0x1cb2 <Lcd_setCursor+0x2e>
    1c90:	61 31       	cpi	r22, 0x11	; 17
    1c92:	88 f4       	brcc	.+34     	; 0x1cb6 <Lcd_setCursor+0x32>
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	2e 5f       	subi	r18, 0xFE	; 254
    1c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9c:	86 2f       	mov	r24, r22
    1c9e:	90 e4       	ldi	r25, 0x40	; 64
    1ca0:	29 9f       	mul	r18, r25
    1ca2:	80 0d       	add	r24, r0
    1ca4:	11 24       	eor	r1, r1
    1ca6:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <Lcd_sendCommand>
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	08 95       	ret
    1cae:	85 e0       	ldi	r24, 0x05	; 5
    1cb0:	08 95       	ret
    1cb2:	83 e0       	ldi	r24, 0x03	; 3
    1cb4:	08 95       	ret
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	08 95       	ret

00001cba <Lcd_printChar>:
    1cba:	cf 93       	push	r28
    1cbc:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <genu_LcdModuleState>
    1cc0:	96 30       	cpi	r25, 0x06	; 6
    1cc2:	41 f5       	brne	.+80     	; 0x1d14 <Lcd_printChar+0x5a>
    1cc4:	c8 2f       	mov	r28, r24
    1cc6:	61 e0       	ldi	r22, 0x01	; 1
    1cc8:	87 e0       	ldi	r24, 0x07	; 7
    1cca:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1cce:	8c 2f       	mov	r24, r28
    1cd0:	82 95       	swap	r24
    1cd2:	8f 70       	andi	r24, 0x0F	; 15
    1cd4:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <Lcd_WriteData>
    1cd8:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <Lcd_EnableToggle>
    1cdc:	21 e0       	ldi	r18, 0x01	; 1
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	70 e0       	ldi	r23, 0x00	; 0
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
    1cf0:	8c 2f       	mov	r24, r28
    1cf2:	8f 70       	andi	r24, 0x0F	; 15
    1cf4:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <Lcd_WriteData>
    1cf8:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <Lcd_EnableToggle>
    1cfc:	22 e0       	ldi	r18, 0x02	; 2
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e0       	ldi	r20, 0x00	; 0
    1d02:	50 e0       	ldi	r21, 0x00	; 0
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	70 e0       	ldi	r23, 0x00	; 0
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	0e 94 81 11 	call	0x2302	; 0x2302 <Delay_ms>
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	01 c0       	rjmp	.+2      	; 0x1d16 <Lcd_printChar+0x5c>
    1d14:	85 e0       	ldi	r24, 0x05	; 5
    1d16:	cf 91       	pop	r28
    1d18:	08 95       	ret

00001d1a <Lcd_printString>:
    1d1a:	cf 93       	push	r28
    1d1c:	df 93       	push	r29
    1d1e:	ec 01       	movw	r28, r24
    1d20:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <genu_LcdModuleState>
    1d24:	86 30       	cpi	r24, 0x06	; 6
    1d26:	49 f4       	brne	.+18     	; 0x1d3a <Lcd_printString+0x20>
    1d28:	03 c0       	rjmp	.+6      	; 0x1d30 <Lcd_printString+0x16>
    1d2a:	21 96       	adiw	r28, 0x01	; 1
    1d2c:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <Lcd_printChar>
    1d30:	88 81       	ld	r24, Y
    1d32:	81 11       	cpse	r24, r1
    1d34:	fa cf       	rjmp	.-12     	; 0x1d2a <Lcd_printString+0x10>
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	01 c0       	rjmp	.+2      	; 0x1d3c <Lcd_printString+0x22>
    1d3a:	85 e0       	ldi	r24, 0x05	; 5
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	08 95       	ret

00001d42 <Lcd_clear>:
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <Lcd_sendCommand>
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	08 95       	ret

00001d4c <Lcd_printLCD>:
    1d4c:	0f 93       	push	r16
    1d4e:	1f 93       	push	r17
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	ec 01       	movw	r28, r24
    1d56:	8b 01       	movw	r16, r22
    1d58:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Lcd_clear>
    1d5c:	60 e0       	ldi	r22, 0x00	; 0
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <Lcd_setCursor>
    1d64:	81 30       	cpi	r24, 0x01	; 1
    1d66:	89 f4       	brne	.+34     	; 0x1d8a <Lcd_printLCD+0x3e>
    1d68:	ce 01       	movw	r24, r28
    1d6a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <Lcd_printString>
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	71 f4       	brne	.+28     	; 0x1d8e <Lcd_printLCD+0x42>
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <Lcd_setCursor>
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	59 f4       	brne	.+22     	; 0x1d92 <Lcd_printLCD+0x46>
    1d7c:	c8 01       	movw	r24, r16
    1d7e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <Lcd_printString>
    1d82:	81 30       	cpi	r24, 0x01	; 1
    1d84:	39 f0       	breq	.+14     	; 0x1d94 <Lcd_printLCD+0x48>
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	05 c0       	rjmp	.+10     	; 0x1d94 <Lcd_printLCD+0x48>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	03 c0       	rjmp	.+6      	; 0x1d94 <Lcd_printLCD+0x48>
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	01 c0       	rjmp	.+2      	; 0x1d94 <Lcd_printLCD+0x48>
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	08 95       	ret

00001d9e <Lcd_printDecimal>:
enuLcd_Status_t Lcd_printDecimal(uint16_t u16_num)
{
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	61 97       	sbiw	r28, 0x11	; 17
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, DEC);
    1db2:	41 e0       	ldi	r20, 0x01	; 1
    1db4:	be 01       	movw	r22, r28
    1db6:	6f 5f       	subi	r22, 0xFF	; 255
    1db8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dba:	0e 94 a4 19 	call	0x3348	; 0x3348 <integerToString>
	Lcd_printString(au8_snum);
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	01 96       	adiw	r24, 0x01	; 1
    1dc2:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <Lcd_printString>
	return LCD_STATUS_ERROR_OK;
}
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	61 96       	adiw	r28, 0x11	; 17
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	08 95       	ret

00001dda <LM35_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is already initialized */
	if (genu_LM35ModuleState == LM35_STATUS_INIT)
    1dda:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <genu_LM35ModuleState>
    1dde:	85 30       	cpi	r24, 0x05	; 5
    1de0:	51 f0       	breq	.+20     	; 0x1df6 <LM35_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
    1de2:	0e 94 bc 10 	call	0x2178	; 0x2178 <Adc_init>
    1de6:	81 30       	cpi	r24, 0x01	; 1
    1de8:	29 f4       	brne	.+10     	; 0x1df4 <LM35_init+0x1a>
		return LM35_STATUS_ERROR_NOK;
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
    1dea:	85 e0       	ldi	r24, 0x05	; 5
    1dec:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <genu_LM35ModuleState>
	return LM35_STATUS_ERROR_OK;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
		return LM35_STATUS_ERROR_NOK;
    1df4:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
	return LM35_STATUS_ERROR_OK;
}
    1df6:	08 95       	ret

00001df8 <LM35_readTemp>:
* Parameters (out): pu8_Temp - Pointer to a Char to hold the temperature.
* Return value: enuLM35_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current temperature and return in celsius.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLM35_Status_t LM35_readTemp(uint8_t * pu8_Temp)
{
    1df8:	0f 93       	push	r16
    1dfa:	1f 93       	push	r17
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <LM35_readTemp+0xa>
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <LM35_readTemp+0xc>
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	9c 01       	movw	r18, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
    1e0a:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <genu_LM35ModuleState>
    1e0e:	95 30       	cpi	r25, 0x05	; 5
    1e10:	f1 f4       	brne	.+60     	; 0x1e4e <LM35_readTemp+0x56>
	{
	return LM35_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
    1e12:	21 15       	cp	r18, r1
    1e14:	31 05       	cpc	r19, r1
    1e16:	e9 f0       	breq	.+58     	; 0x1e52 <LM35_readTemp+0x5a>
    1e18:	89 01       	movw	r16, r18
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
    1e1a:	19 82       	std	Y+1, r1	; 0x01
    1e1c:	1a 82       	std	Y+2, r1	; 0x02
    1e1e:	1b 82       	std	Y+3, r1	; 0x03
    1e20:	1c 82       	std	Y+4, r1	; 0x04
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
    1e22:	be 01       	movw	r22, r28
    1e24:	6f 5f       	subi	r22, 0xFF	; 255
    1e26:	7f 4f       	sbci	r23, 0xFF	; 255
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <Adc_start>
    1e2e:	81 30       	cpi	r24, 0x01	; 1
    1e30:	91 f4       	brne	.+36     	; 0x1e56 <LM35_readTemp+0x5e>
		return LM35_STATUS_ERROR_NOK;
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
    1e32:	69 81       	ldd	r22, Y+1	; 0x01
    1e34:	7a 81       	ldd	r23, Y+2	; 0x02
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3a:	2a e0       	ldi	r18, 0x0A	; 10
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	0e 94 3e 20 	call	0x407c	; 0x407c <__udivmodsi4>
    1e46:	f8 01       	movw	r30, r16
    1e48:	20 83       	st	Z, r18
	return LM35_STATUS_ERROR_OK;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	05 c0       	rjmp	.+10     	; 0x1e58 <LM35_readTemp+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
	{
	return LM35_STATUS_NOT_INIT;
    1e4e:	84 e0       	ldi	r24, 0x04	; 4
    1e50:	03 c0       	rjmp	.+6      	; 0x1e58 <LM35_readTemp+0x60>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
	{
		return LM35_STATUS_ERROR_NULL;
    1e52:	83 e0       	ldi	r24, 0x03	; 3
    1e54:	01 c0       	rjmp	.+2      	; 0x1e58 <LM35_readTemp+0x60>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
		return LM35_STATUS_ERROR_NOK;
    1e56:	80 e0       	ldi	r24, 0x00	; 0
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
	return LM35_STATUS_ERROR_OK;
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	1f 91       	pop	r17
    1e66:	0f 91       	pop	r16
    1e68:	08 95       	ret

00001e6a <Motor_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
    1e6a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <gu8_MotorModuleStatus>
    1e6e:	86 30       	cpi	r24, 0x06	; 6
    1e70:	49 f0       	breq	.+18     	; 0x1e84 <Motor_init+0x1a>
/**************************************************************************************/
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
    1e72:	0e 94 87 1b 	call	0x370e	; 0x370e <SWPwm_Init>
    1e76:	81 30       	cpi	r24, 0x01	; 1
    1e78:	39 f4       	brne	.+14     	; 0x1e88 <Motor_init+0x1e>
		return MOTOR_STATUS_ERROR_NOK;
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
    1e7a:	86 e0       	ldi	r24, 0x06	; 6
    1e7c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <gu8_MotorModuleStatus>
	return MOTOR_STATUS_ERROR_OK;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_INIT;
    1e84:	86 e0       	ldi	r24, 0x06	; 6
    1e86:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
		return MOTOR_STATUS_ERROR_NOK;
    1e88:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
	return MOTOR_STATUS_ERROR_OK;
}
    1e8a:	08 95       	ret

00001e8c <Motor_stop>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the motor.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to stop motor */
enuMotor_Status_t Motor_stop(uint8_t u8_motorID)
{
    1e8c:	df 92       	push	r13
    1e8e:	ef 92       	push	r14
    1e90:	ff 92       	push	r15
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    1e9a:	81 11       	cpse	r24, r1
    1e9c:	5d c0       	rjmp	.+186    	; 0x1f58 <Motor_stop+0xcc>
    1e9e:	d8 2e       	mov	r13, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Stop the Motor by driving the pins to LOW */
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    1ea0:	08 2f       	mov	r16, r24
    1ea2:	10 e0       	ldi	r17, 0x00	; 0
    1ea4:	78 01       	movw	r14, r16
    1ea6:	ee 0c       	add	r14, r14
    1ea8:	ff 1c       	adc	r15, r15
    1eaa:	ee 0c       	add	r14, r14
    1eac:	ff 1c       	adc	r15, r15
    1eae:	c7 01       	movw	r24, r14
    1eb0:	80 0f       	add	r24, r16
    1eb2:	91 1f       	adc	r25, r17
    1eb4:	ec 01       	movw	r28, r24
    1eb6:	c3 54       	subi	r28, 0x43	; 67
    1eb8:	da 4f       	sbci	r29, 0xFA	; 250
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1ec2:	60 e0       	ldi	r22, 0x00	; 0
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1eca:	e0 e0       	ldi	r30, 0x00	; 0
    1ecc:	1c c0       	rjmp	.+56     	; 0x1f06 <Motor_stop+0x7a>
	{
		if(u8_loopIndex == u8_motorID) /* Skip the current motor */
    1ece:	ed 15       	cp	r30, r13
    1ed0:	c9 f0       	breq	.+50     	; 0x1f04 <Motor_stop+0x78>
		{
			continue;
		}
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
    1ed2:	d8 01       	movw	r26, r16
    1ed4:	aa 0f       	add	r26, r26
    1ed6:	bb 1f       	adc	r27, r27
    1ed8:	aa 0f       	add	r26, r26
    1eda:	bb 1f       	adc	r27, r27
    1edc:	a0 0f       	add	r26, r16
    1ede:	b1 1f       	adc	r27, r17
    1ee0:	a3 54       	subi	r26, 0x43	; 67
    1ee2:	ba 4f       	sbci	r27, 0xFA	; 250
    1ee4:	2c 91       	ld	r18, X
    1ee6:	8e 2f       	mov	r24, r30
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	dc 01       	movw	r26, r24
    1eec:	aa 0f       	add	r26, r26
    1eee:	bb 1f       	adc	r27, r27
    1ef0:	aa 0f       	add	r26, r26
    1ef2:	bb 1f       	adc	r27, r27
    1ef4:	8a 0f       	add	r24, r26
    1ef6:	9b 1f       	adc	r25, r27
    1ef8:	dc 01       	movw	r26, r24
    1efa:	a3 54       	subi	r26, 0x43	; 67
    1efc:	ba 4f       	sbci	r27, 0xFA	; 250
    1efe:	8c 91       	ld	r24, X
    1f00:	28 17       	cp	r18, r24
    1f02:	19 f0       	breq	.+6      	; 0x1f0a <Motor_stop+0x7e>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1f04:	ef 5f       	subi	r30, 0xFF	; 255
    1f06:	ee 23       	and	r30, r30
    1f08:	11 f3       	breq	.-60     	; 0x1ece <Motor_stop+0x42>
			break;
		}
	}
	
	
	if(u8_loopIndex == MOTORS_USED_NUM)
    1f0a:	e1 30       	cpi	r30, 0x01	; 1
    1f0c:	69 f4       	brne	.+26     	; 0x1f28 <Motor_stop+0x9c>
	{ /* In case that there isn't any motor using the same PWM Channel --> Stop the PWM */
		SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1f0e:	f8 01       	movw	r30, r16
    1f10:	ee 0f       	add	r30, r30
    1f12:	ff 1f       	adc	r31, r31
    1f14:	ee 0f       	add	r30, r30
    1f16:	ff 1f       	adc	r31, r31
    1f18:	e0 0f       	add	r30, r16
    1f1a:	f1 1f       	adc	r31, r17
    1f1c:	e3 54       	subi	r30, 0x43	; 67
    1f1e:	fa 4f       	sbci	r31, 0xFA	; 250
    1f20:	80 81       	ld	r24, Z
    1f22:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <SWPwm_Stop>
    1f26:	12 c0       	rjmp	.+36     	; 0x1f4c <Motor_stop+0xc0>
	}else
	{/* In case that there is another motor using the same PWM Channel */
		if (gau8_MotorsState[u8_loopIndex] == MOTOR_STOPPED) /* Check if the other motor is not running */
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	e8 5e       	subi	r30, 0xE8	; 232
    1f2c:	f9 4f       	sbci	r31, 0xF9	; 249
    1f2e:	80 81       	ld	r24, Z
    1f30:	81 11       	cpse	r24, r1
    1f32:	0c c0       	rjmp	.+24     	; 0x1f4c <Motor_stop+0xc0>
		{/* In case that the other motor is not running --> Stop the PWM */
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1f34:	f8 01       	movw	r30, r16
    1f36:	ee 0f       	add	r30, r30
    1f38:	ff 1f       	adc	r31, r31
    1f3a:	ee 0f       	add	r30, r30
    1f3c:	ff 1f       	adc	r31, r31
    1f3e:	e0 0f       	add	r30, r16
    1f40:	f1 1f       	adc	r31, r17
    1f42:	e3 54       	subi	r30, 0x43	; 67
    1f44:	fa 4f       	sbci	r31, 0xFA	; 250
    1f46:	80 81       	ld	r24, Z
    1f48:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <SWPwm_Stop>
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
    1f4c:	f8 01       	movw	r30, r16
    1f4e:	e8 5e       	subi	r30, 0xE8	; 232
    1f50:	f9 4f       	sbci	r31, 0xF9	; 249
    1f52:	10 82       	st	Z, r1
	return MOTOR_STATUS_ERROR_OK;
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	01 c0       	rjmp	.+2      	; 0x1f5a <Motor_stop+0xce>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    1f58:	82 e0       	ldi	r24, 0x02	; 2
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
	return MOTOR_STATUS_ERROR_OK;
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	1f 91       	pop	r17
    1f60:	0f 91       	pop	r16
    1f62:	ff 90       	pop	r15
    1f64:	ef 90       	pop	r14
    1f66:	df 90       	pop	r13
    1f68:	08 95       	ret

00001f6a <Motor_run>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Move the motor in the given direction.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to move the motor forward with given speed in % */
enuMotor_Status_t Motor_run(uint8_t u8_motorID, uint8_t u8_speed, uint8_t u8_direction)
{
    1f6a:	ff 92       	push	r15
    1f6c:	0f 93       	push	r16
    1f6e:	1f 93       	push	r17
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
    1f74:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <gu8_MotorModuleStatus>
    1f78:	96 30       	cpi	r25, 0x06	; 6
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <Motor_run+0x14>
    1f7c:	57 c0       	rjmp	.+174    	; 0x202c <Motor_run+0xc2>
	{
		return MOTOR_STATUS_UNINIT;
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    1f7e:	81 11       	cpse	r24, r1
    1f80:	57 c0       	rjmp	.+174    	; 0x2030 <Motor_run+0xc6>
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
    1f82:	65 36       	cpi	r22, 0x65	; 101
    1f84:	08 f0       	brcs	.+2      	; 0x1f88 <Motor_run+0x1e>
    1f86:	56 c0       	rjmp	.+172    	; 0x2034 <Motor_run+0xca>
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
    1f88:	42 30       	cpi	r20, 0x02	; 2
    1f8a:	08 f0       	brcs	.+2      	; 0x1f8e <Motor_run+0x24>
    1f8c:	55 c0       	rjmp	.+170    	; 0x2038 <Motor_run+0xce>
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
    1f8e:	08 2f       	mov	r16, r24
    1f90:	10 e0       	ldi	r17, 0x00	; 0
    1f92:	f8 01       	movw	r30, r16
    1f94:	e8 5e       	subi	r30, 0xE8	; 232
    1f96:	f9 4f       	sbci	r31, 0xF9	; 249
    1f98:	90 81       	ld	r25, Z
    1f9a:	91 30       	cpi	r25, 0x01	; 1
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <Motor_run+0x36>
    1f9e:	4e c0       	rjmp	.+156    	; 0x203c <Motor_run+0xd2>
    1fa0:	f6 2e       	mov	r15, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_speed == 0) 
    1fa2:	61 11       	cpse	r22, r1
    1fa4:	04 c0       	rjmp	.+8      	; 0x1fae <Motor_run+0x44>
	{
		Motor_stop(u8_motorID);
    1fa6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <Motor_stop>
		return MOTOR_STATUS_ERROR_OK;
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	48 c0       	rjmp	.+144    	; 0x203e <Motor_run+0xd4>
	}
	if(u8_direction == MOTOR_DIR_CLK_WISE) /* Activate the Motor in the Clock Wise Direction */
    1fae:	41 11       	cpse	r20, r1
    1fb0:	12 c0       	rjmp	.+36     	; 0x1fd6 <Motor_run+0x6c>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_HIGH);
    1fb2:	25 e0       	ldi	r18, 0x05	; 5
    1fb4:	20 9f       	mul	r18, r16
    1fb6:	c0 01       	movw	r24, r0
    1fb8:	21 9f       	mul	r18, r17
    1fba:	90 0d       	add	r25, r0
    1fbc:	11 24       	eor	r1, r1
    1fbe:	ec 01       	movw	r28, r24
    1fc0:	c3 54       	subi	r28, 0x43	; 67
    1fc2:	da 4f       	sbci	r29, 0xFA	; 250
    1fc4:	61 e0       	ldi	r22, 0x01	; 1
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1fcc:	60 e0       	ldi	r22, 0x00	; 0
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    1fd4:	13 c0       	rjmp	.+38     	; 0x1ffc <Motor_run+0x92>
	}else if(u8_direction == MOTOR_DIR_ANTI_CLK_WISE) /* Activate the Motor in the Anti Clock Wise Direction */
    1fd6:	41 30       	cpi	r20, 0x01	; 1
    1fd8:	89 f4       	brne	.+34     	; 0x1ffc <Motor_run+0x92>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    1fda:	25 e0       	ldi	r18, 0x05	; 5
    1fdc:	20 9f       	mul	r18, r16
    1fde:	c0 01       	movw	r24, r0
    1fe0:	21 9f       	mul	r18, r17
    1fe2:	90 0d       	add	r25, r0
    1fe4:	11 24       	eor	r1, r1
    1fe6:	ec 01       	movw	r28, r24
    1fe8:	c3 54       	subi	r28, 0x43	; 67
    1fea:	da 4f       	sbci	r29, 0xFA	; 250
    1fec:	60 e0       	ldi	r22, 0x00	; 0
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_HIGH);
    1ff4:	61 e0       	ldi	r22, 0x01	; 1
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
	}
	
	/* Change the state of the Motor to Running */
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
    1ffc:	f8 01       	movw	r30, r16
    1ffe:	e8 5e       	subi	r30, 0xE8	; 232
    2000:	f9 4f       	sbci	r31, 0xF9	; 249
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	80 83       	st	Z, r24
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
    2006:	f8 01       	movw	r30, r16
    2008:	ee 0f       	add	r30, r30
    200a:	ff 1f       	adc	r31, r31
    200c:	ee 0f       	add	r30, r30
    200e:	ff 1f       	adc	r31, r31
    2010:	e0 0f       	add	r30, r16
    2012:	f1 1f       	adc	r31, r17
    2014:	e3 54       	subi	r30, 0x43	; 67
    2016:	fa 4f       	sbci	r31, 0xFA	; 250
    2018:	43 81       	ldd	r20, Z+3	; 0x03
    201a:	54 81       	ldd	r21, Z+4	; 0x04
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	2f 2d       	mov	r18, r15
    2022:	80 81       	ld	r24, Z
    2024:	0e 94 a3 1b 	call	0x3746	; 0x3746 <SWPwm_Start>
	
	return MOTOR_STATUS_ERROR_OK;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	09 c0       	rjmp	.+18     	; 0x203e <Motor_run+0xd4>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_UNINIT;
    202c:	87 e0       	ldi	r24, 0x07	; 7
    202e:	07 c0       	rjmp	.+14     	; 0x203e <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    2030:	82 e0       	ldi	r24, 0x02	; 2
    2032:	05 c0       	rjmp	.+10     	; 0x203e <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
    2034:	83 e0       	ldi	r24, 0x03	; 3
    2036:	03 c0       	rjmp	.+6      	; 0x203e <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
    2038:	84 e0       	ldi	r24, 0x04	; 4
    203a:	01 c0       	rjmp	.+2      	; 0x203e <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
	{
		return MOTOR_STATUS_ERROR_RUNNING;
    203c:	85 e0       	ldi	r24, 0x05	; 5
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
	
	return MOTOR_STATUS_ERROR_OK;
}
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	ff 90       	pop	r15
    2048:	08 95       	ret

0000204a <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
    204e:	c0 91 1a 06 	lds	r28, 0x061A	; 0x80061a <gu8_counter>
    2052:	d0 e0       	ldi	r29, 0x00	; 0
    2054:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <Uart_DataRegister>
    2058:	c5 5e       	subi	r28, 0xE5	; 229
    205a:	d9 4f       	sbci	r29, 0xF9	; 249
    205c:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
    205e:	90 91 1a 06 	lds	r25, 0x061A	; 0x80061a <gu8_counter>
    2062:	e9 2f       	mov	r30, r25
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	e5 5e       	subi	r30, 0xE5	; 229
    2068:	f9 4f       	sbci	r31, 0xF9	; 249
    206a:	80 81       	ld	r24, Z
    206c:	8d 30       	cpi	r24, 0x0D	; 13
    206e:	71 f4       	brne	.+28     	; 0x208c <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    2070:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
    2074:	e0 91 1a 06 	lds	r30, 0x061A	; 0x80061a <gu8_counter>
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	e5 5e       	subi	r30, 0xE5	; 229
    207c:	f9 4f       	sbci	r31, 0xF9	; 249
    207e:	10 82       	st	Z, r1
		gu8_counter = 0;
    2080:	10 92 1a 06 	sts	0x061A, r1	; 0x80061a <gu8_counter>
		gu8_flag = 1;
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <gu8_flag>
    208a:	1d c0       	rjmp	.+58     	; 0x20c6 <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
    208c:	88 30       	cpi	r24, 0x08	; 8
    208e:	51 f4       	brne	.+20     	; 0x20a4 <Uart_RXC_ISR+0x5a>
    2090:	99 23       	and	r25, r25
    2092:	41 f0       	breq	.+16     	; 0x20a4 <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    2094:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Uart_sendByte>
		gu8_counter--;
    2098:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <gu8_counter>
    209c:	81 50       	subi	r24, 0x01	; 1
    209e:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <gu8_counter>
    20a2:	11 c0       	rjmp	.+34     	; 0x20c6 <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
    20a4:	88 30       	cpi	r24, 0x08	; 8
    20a6:	79 f0       	breq	.+30     	; 0x20c6 <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
    20a8:	90 91 2f 06 	lds	r25, 0x062F	; 0x80062f <gu8_visibility>
    20ac:	91 30       	cpi	r25, 0x01	; 1
    20ae:	21 f4       	brne	.+8      	; 0x20b8 <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
    20b0:	8a e2       	ldi	r24, 0x2A	; 42
    20b2:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Uart_sendByte>
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
    20b8:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Uart_sendByte>
		}
		gu8_counter++;
    20bc:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <gu8_counter>
    20c0:	8f 5f       	subi	r24, 0xFF	; 255
    20c2:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <gu8_counter>
	}
}
    20c6:	df 91       	pop	r29
    20c8:	cf 91       	pop	r28
    20ca:	08 95       	ret

000020cc <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
    20cc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <genu_TerminalModuleState>
    20d0:	83 30       	cpi	r24, 0x03	; 3
    20d2:	81 f0       	breq	.+32     	; 0x20f4 <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
    20d4:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
    20d8:	81 30       	cpi	r24, 0x01	; 1
    20da:	11 f0       	breq	.+4      	; 0x20e0 <Terminal_init+0x14>
    20dc:	87 30       	cpi	r24, 0x07	; 7
    20de:	49 f4       	brne	.+18     	; 0x20f2 <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
    20e0:	85 e2       	ldi	r24, 0x25	; 37
    20e2:	90 e1       	ldi	r25, 0x10	; 16
    20e4:	0e 94 67 1d 	call	0x3ace	; 0x3ace <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
    20e8:	83 e0       	ldi	r24, 0x03	; 3
    20ea:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
    20f2:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
    20f4:	08 95       	ret

000020f6 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	81 f0       	breq	.+32     	; 0x211e <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    20fe:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <genu_TerminalModuleState>
    2102:	22 30       	cpi	r18, 0x02	; 2
    2104:	79 f0       	breq	.+30     	; 0x2124 <Terminal_Out+0x2e>
    2106:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
    2108:	0e 94 48 19 	call	0x3290	; 0x3290 <stringLength>
    210c:	68 2f       	mov	r22, r24
    210e:	70 e0       	ldi	r23, 0x00	; 0
    2110:	ce 01       	movw	r24, r28
    2112:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	21 f0       	breq	.+8      	; 0x2122 <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	03 c0       	rjmp	.+6      	; 0x2124 <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    211e:	24 e0       	ldi	r18, 0x04	; 4
    2120:	01 c0       	rjmp	.+2      	; 0x2124 <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
    2122:	21 e0       	ldi	r18, 0x01	; 1
}
    2124:	82 2f       	mov	r24, r18
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	08 95       	ret

0000212c <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
    212c:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
    212e:	89 2b       	or	r24, r25
    2130:	a1 f0       	breq	.+40     	; 0x215a <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    2132:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <genu_TerminalModuleState>
    2136:	82 30       	cpi	r24, 0x02	; 2
    2138:	99 f0       	breq	.+38     	; 0x2160 <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
    213a:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <gu8_flag>
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	71 f4       	brne	.+28     	; 0x215e <Terminal_In+0x32>
	{
		gu8_flag = 0;
    2142:	10 92 19 06 	sts	0x0619, r1	; 0x800619 <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
    2146:	8b e1       	ldi	r24, 0x1B	; 27
    2148:	96 e0       	ldi	r25, 0x06	; 6
    214a:	0e 94 93 19 	call	0x3326	; 0x3326 <stringCopy>
		EmptyString(gau8_data);
    214e:	8b e1       	ldi	r24, 0x1B	; 27
    2150:	96 e0       	ldi	r25, 0x06	; 6
    2152:	0e 94 87 19 	call	0x330e	; 0x330e <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
    2156:	85 e0       	ldi	r24, 0x05	; 5
    2158:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    215a:	84 e0       	ldi	r24, 0x04	; 4
    215c:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
    215e:	81 e0       	ldi	r24, 0x01	; 1
}
    2160:	08 95       	ret

00002162 <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
    2168:	08 95       	ret

0000216a <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
    216a:	10 92 2f 06 	sts	0x062F, r1	; 0x80062f <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	08 95       	ret

00002172 <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
    2172:	0e 94 cc 09 	call	0x1398	; 0x1398 <App_start>
    2176:	ff cf       	rjmp	.-2      	; 0x2176 <main+0x4>

00002178 <Adc_init>:
		f32_Resolution = (1000*ADC_AREF_VALUE)/ADC_STEPS_NUM;
	}
	*pu32_data = u16_Result*f32_Resolution;
		
	return ADC_STATUS_ERROR_OK;
}
    2178:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <genuAdc_Status>
    217c:	87 30       	cpi	r24, 0x07	; 7
    217e:	11 f1       	breq	.+68     	; 0x21c4 <Adc_init+0x4c>
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	13 c0       	rjmp	.+38     	; 0x21aa <Adc_init+0x32>
    2184:	3b b3       	in	r19, 0x1b	; 27
    2186:	e2 2f       	mov	r30, r18
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	ee 0f       	add	r30, r30
    218c:	ff 1f       	adc	r31, r31
    218e:	ed 57       	subi	r30, 0x7D	; 125
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	00 80       	ld	r0, Z
    2198:	02 c0       	rjmp	.+4      	; 0x219e <Adc_init+0x26>
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	0a 94       	dec	r0
    21a0:	e2 f7       	brpl	.-8      	; 0x219a <Adc_init+0x22>
    21a2:	80 95       	com	r24
    21a4:	83 23       	and	r24, r19
    21a6:	8b bb       	out	0x1b, r24	; 27
    21a8:	2f 5f       	subi	r18, 0xFF	; 255
    21aa:	22 23       	and	r18, r18
    21ac:	59 f3       	breq	.-42     	; 0x2184 <Adc_init+0xc>
    21ae:	97 e0       	ldi	r25, 0x07	; 7
    21b0:	96 b9       	out	0x06, r25	; 6
    21b2:	86 b1       	in	r24, 0x06	; 6
    21b4:	8f 7d       	andi	r24, 0xDF	; 223
    21b6:	86 b9       	out	0x06, r24	; 6
    21b8:	86 b1       	in	r24, 0x06	; 6
    21ba:	86 b9       	out	0x06, r24	; 6
    21bc:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <genuAdc_Status>
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	08 95       	ret
    21c4:	88 e0       	ldi	r24, 0x08	; 8
    21c6:	08 95       	ret

000021c8 <Adc_start>:
    21c8:	cf 92       	push	r12
    21ca:	df 92       	push	r13
    21cc:	ef 92       	push	r14
    21ce:	ff 92       	push	r15
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <genuAdc_Status>
    21d8:	97 30       	cpi	r25, 0x07	; 7
    21da:	09 f0       	breq	.+2      	; 0x21de <Adc_start+0x16>
    21dc:	61 c0       	rjmp	.+194    	; 0x22a0 <Adc_start+0xd8>
    21de:	61 15       	cp	r22, r1
    21e0:	71 05       	cpc	r23, r1
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <Adc_start+0x1e>
    21e4:	5f c0       	rjmp	.+190    	; 0x22a4 <Adc_start+0xdc>
    21e6:	37 b1       	in	r19, 0x07	; 7
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	fc 01       	movw	r30, r24
    21ec:	ee 0f       	add	r30, r30
    21ee:	ff 1f       	adc	r31, r31
    21f0:	ed 57       	subi	r30, 0x7D	; 125
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	20 81       	ld	r18, Z
    21f6:	23 2b       	or	r18, r19
    21f8:	27 b9       	out	0x07, r18	; 7
    21fa:	47 b1       	in	r20, 0x07	; 7
    21fc:	31 81       	ldd	r19, Z+1	; 0x01
    21fe:	50 e4       	ldi	r21, 0x40	; 64
    2200:	35 9f       	mul	r19, r21
    2202:	90 01       	movw	r18, r0
    2204:	11 24       	eor	r1, r1
    2206:	24 2b       	or	r18, r20
    2208:	27 b9       	out	0x07, r18	; 7
    220a:	26 b1       	in	r18, 0x06	; 6
    220c:	20 68       	ori	r18, 0x80	; 128
    220e:	26 b9       	out	0x06, r18	; 6
    2210:	26 b1       	in	r18, 0x06	; 6
    2212:	20 64       	ori	r18, 0x40	; 64
    2214:	26 b9       	out	0x06, r18	; 6
    2216:	34 9b       	sbis	0x06, 4	; 6
    2218:	fe cf       	rjmp	.-4      	; 0x2216 <Adc_start+0x4e>
    221a:	44 b1       	in	r20, 0x04	; 4
    221c:	25 b1       	in	r18, 0x05	; 5
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	32 2f       	mov	r19, r18
    2222:	22 27       	eor	r18, r18
    2224:	24 2b       	or	r18, r20
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	fc 01       	movw	r30, r24
    222c:	ed 57       	subi	r30, 0x7D	; 125
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	81 81       	ldd	r24, Z+1	; 0x01
    2232:	83 30       	cpi	r24, 0x03	; 3
    2234:	41 f0       	breq	.+16     	; 0x2246 <Adc_start+0x7e>
    2236:	81 30       	cpi	r24, 0x01	; 1
    2238:	69 f0       	breq	.+26     	; 0x2254 <Adc_start+0x8c>
    223a:	88 23       	and	r24, r24
    223c:	a1 f0       	breq	.+40     	; 0x2266 <Adc_start+0x9e>
    223e:	c1 2c       	mov	r12, r1
    2240:	d1 2c       	mov	r13, r1
    2242:	76 01       	movw	r14, r12
    2244:	18 c0       	rjmp	.+48     	; 0x2276 <Adc_start+0xae>
    2246:	c1 2c       	mov	r12, r1
    2248:	d1 2c       	mov	r13, r1
    224a:	76 01       	movw	r14, r12
    224c:	68 94       	set
    224e:	e5 f8       	bld	r14, 5
    2250:	f6 f8       	bld	r15, 6
    2252:	11 c0       	rjmp	.+34     	; 0x2276 <Adc_start+0xae>
    2254:	0f 2e       	mov	r0, r31
    2256:	c1 2c       	mov	r12, r1
    2258:	f0 e4       	ldi	r31, 0x40	; 64
    225a:	df 2e       	mov	r13, r31
    225c:	fc e9       	ldi	r31, 0x9C	; 156
    225e:	ef 2e       	mov	r14, r31
    2260:	fd 2c       	mov	r15, r13
    2262:	f0 2d       	mov	r31, r0
    2264:	08 c0       	rjmp	.+16     	; 0x2276 <Adc_start+0xae>
    2266:	0f 2e       	mov	r0, r31
    2268:	c1 2c       	mov	r12, r1
    226a:	f0 e4       	ldi	r31, 0x40	; 64
    226c:	df 2e       	mov	r13, r31
    226e:	fc e9       	ldi	r31, 0x9C	; 156
    2270:	ef 2e       	mov	r14, r31
    2272:	fd 2c       	mov	r15, r13
    2274:	f0 2d       	mov	r31, r0
    2276:	eb 01       	movw	r28, r22
    2278:	b9 01       	movw	r22, r18
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <__floatunsisf>
    2282:	a7 01       	movw	r20, r14
    2284:	96 01       	movw	r18, r12
    2286:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__mulsf3>
    228a:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__fixunssfsi>
    228e:	68 83       	st	Y, r22
    2290:	79 83       	std	Y+1, r23	; 0x01
    2292:	8a 83       	std	Y+2, r24	; 0x02
    2294:	9b 83       	std	Y+3, r25	; 0x03
    2296:	86 b1       	in	r24, 0x06	; 6
    2298:	80 61       	ori	r24, 0x10	; 16
    229a:	86 b9       	out	0x06, r24	; 6
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	03 c0       	rjmp	.+6      	; 0x22a6 <Adc_start+0xde>
    22a0:	86 e0       	ldi	r24, 0x06	; 6
    22a2:	01 c0       	rjmp	.+2      	; 0x22a6 <Adc_start+0xde>
    22a4:	85 e0       	ldi	r24, 0x05	; 5
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	ff 90       	pop	r15
    22ac:	ef 90       	pop	r14
    22ae:	df 90       	pop	r13
    22b0:	cf 90       	pop	r12
    22b2:	08 95       	ret

000022b4 <__vector_16>:

ISR(ADC_IRQ)
{
    22b4:	1f 92       	push	r1
    22b6:	0f 92       	push	r0
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	0f 92       	push	r0
    22bc:	11 24       	eor	r1, r1
    22be:	2f 93       	push	r18
    22c0:	3f 93       	push	r19
    22c2:	4f 93       	push	r20
    22c4:	5f 93       	push	r21
    22c6:	6f 93       	push	r22
    22c8:	7f 93       	push	r23
    22ca:	8f 93       	push	r24
    22cc:	9f 93       	push	r25
    22ce:	af 93       	push	r26
    22d0:	bf 93       	push	r27
    22d2:	ef 93       	push	r30
    22d4:	ff 93       	push	r31
	(*ADC_CallBackPtr)();
    22d6:	e0 91 30 06 	lds	r30, 0x0630	; 0x800630 <ADC_CallBackPtr>
    22da:	f0 91 31 06 	lds	r31, 0x0631	; 0x800631 <ADC_CallBackPtr+0x1>
    22de:	09 95       	icall
    22e0:	ff 91       	pop	r31
    22e2:	ef 91       	pop	r30
    22e4:	bf 91       	pop	r27
    22e6:	af 91       	pop	r26
    22e8:	9f 91       	pop	r25
    22ea:	8f 91       	pop	r24
    22ec:	7f 91       	pop	r23
    22ee:	6f 91       	pop	r22
    22f0:	5f 91       	pop	r21
    22f2:	4f 91       	pop	r20
    22f4:	3f 91       	pop	r19
    22f6:	2f 91       	pop	r18
    22f8:	0f 90       	pop	r0
    22fa:	0f be       	out	0x3f, r0	; 63
    22fc:	0f 90       	pop	r0
    22fe:	1f 90       	pop	r1
    2300:	18 95       	reti

00002302 <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
    2302:	2f 92       	push	r2
    2304:	3f 92       	push	r3
    2306:	4f 92       	push	r4
    2308:	5f 92       	push	r5
    230a:	6f 92       	push	r6
    230c:	7f 92       	push	r7
    230e:	8f 92       	push	r8
    2310:	9f 92       	push	r9
    2312:	af 92       	push	r10
    2314:	bf 92       	push	r11
    2316:	cf 92       	push	r12
    2318:	df 92       	push	r13
    231a:	ef 92       	push	r14
    231c:	ff 92       	push	r15
    231e:	0f 93       	push	r16
    2320:	1f 93       	push	r17
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	00 d0       	rcall	.+0      	; 0x2328 <Delay_ms+0x26>
    2328:	00 d0       	rcall	.+0      	; 0x232a <Delay_ms+0x28>
    232a:	00 d0       	rcall	.+0      	; 0x232c <Delay_ms+0x2a>
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	22 2e       	mov	r2, r18
    2332:	33 2e       	mov	r3, r19
    2334:	44 2e       	mov	r4, r20
    2336:	55 2e       	mov	r5, r21
    2338:	66 2e       	mov	r6, r22
    233a:	79 83       	std	Y+1, r23	; 0x01
    233c:	8a 83       	std	Y+2, r24	; 0x02
    233e:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    2340:	91 2c       	mov	r9, r1
    2342:	1d 82       	std	Y+5, r1	; 0x05
    2344:	1c 82       	std	Y+4, r1	; 0x04
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	e0 e0       	ldi	r30, 0x00	; 0
    234c:	71 2c       	mov	r7, r1
    234e:	81 2c       	mov	r8, r1
    2350:	44 c0       	rjmp	.+136    	; 0x23da <Delay_ms+0xd8>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
    2352:	2d 2d       	mov	r18, r13
    2354:	3e 2d       	mov	r19, r14
    2356:	4f 2d       	mov	r20, r15
    2358:	50 2f       	mov	r21, r16
    235a:	61 2f       	mov	r22, r17
    235c:	7a 2f       	mov	r23, r26
    235e:	8b 2d       	mov	r24, r11
    2360:	9c 2d       	mov	r25, r12
    2362:	a1 e0       	ldi	r26, 0x01	; 1
    2364:	0e 94 75 20 	call	0x40ea	; 0x40ea <__adddi3_s8>
    2368:	d2 2e       	mov	r13, r18
    236a:	e3 2e       	mov	r14, r19
    236c:	f4 2e       	mov	r15, r20
    236e:	05 2f       	mov	r16, r21
    2370:	16 2f       	mov	r17, r22
    2372:	a7 2f       	mov	r26, r23
    2374:	b8 2e       	mov	r11, r24
    2376:	c9 2e       	mov	r12, r25
    2378:	0a c0       	rjmp	.+20     	; 0x238e <Delay_ms+0x8c>
    237a:	d1 2c       	mov	r13, r1
    237c:	e1 2c       	mov	r14, r1
    237e:	f1 2c       	mov	r15, r1
    2380:	00 e0       	ldi	r16, 0x00	; 0
    2382:	10 e0       	ldi	r17, 0x00	; 0
    2384:	a0 e0       	ldi	r26, 0x00	; 0
    2386:	b1 2c       	mov	r11, r1
    2388:	c1 2c       	mov	r12, r1
    238a:	ad 80       	ldd	r10, Y+5	; 0x05
    238c:	ee 83       	std	Y+6, r30	; 0x06
    238e:	2d 2d       	mov	r18, r13
    2390:	3e 2d       	mov	r19, r14
    2392:	4f 2d       	mov	r20, r15
    2394:	50 2f       	mov	r21, r16
    2396:	61 2f       	mov	r22, r17
    2398:	7a 2f       	mov	r23, r26
    239a:	8b 2d       	mov	r24, r11
    239c:	9c 2d       	mov	r25, r12
    239e:	2b 38       	cpi	r18, 0x8B	; 139
    23a0:	31 05       	cpc	r19, r1
    23a2:	41 05       	cpc	r20, r1
    23a4:	51 05       	cpc	r21, r1
    23a6:	61 05       	cpc	r22, r1
    23a8:	71 05       	cpc	r23, r1
    23aa:	81 05       	cpc	r24, r1
    23ac:	91 05       	cpc	r25, r1
    23ae:	89 f2       	breq	.-94     	; 0x2352 <Delay_ms+0x50>
    23b0:	80 f2       	brcs	.-96     	; 0x2352 <Delay_ms+0x50>
    23b2:	ee 81       	ldd	r30, Y+6	; 0x06

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    23b4:	29 2d       	mov	r18, r9
    23b6:	3a 2d       	mov	r19, r10
    23b8:	4c 81       	ldd	r20, Y+4	; 0x04
    23ba:	5b 2f       	mov	r21, r27
    23bc:	6f 2f       	mov	r22, r31
    23be:	7e 2f       	mov	r23, r30
    23c0:	87 2d       	mov	r24, r7
    23c2:	98 2d       	mov	r25, r8
    23c4:	a1 e0       	ldi	r26, 0x01	; 1
    23c6:	0e 94 75 20 	call	0x40ea	; 0x40ea <__adddi3_s8>
    23ca:	92 2e       	mov	r9, r18
    23cc:	3d 83       	std	Y+5, r19	; 0x05
    23ce:	4c 83       	std	Y+4, r20	; 0x04
    23d0:	b5 2f       	mov	r27, r21
    23d2:	f6 2f       	mov	r31, r22
    23d4:	e7 2f       	mov	r30, r23
    23d6:	78 2e       	mov	r7, r24
    23d8:	89 2e       	mov	r8, r25
    23da:	29 2d       	mov	r18, r9
    23dc:	3d 81       	ldd	r19, Y+5	; 0x05
    23de:	4c 81       	ldd	r20, Y+4	; 0x04
    23e0:	5b 2f       	mov	r21, r27
    23e2:	6f 2f       	mov	r22, r31
    23e4:	7e 2f       	mov	r23, r30
    23e6:	87 2d       	mov	r24, r7
    23e8:	98 2d       	mov	r25, r8
    23ea:	a2 2c       	mov	r10, r2
    23ec:	b3 2c       	mov	r11, r3
    23ee:	c4 2c       	mov	r12, r4
    23f0:	d5 2c       	mov	r13, r5
    23f2:	e6 2c       	mov	r14, r6
    23f4:	f9 80       	ldd	r15, Y+1	; 0x01
    23f6:	0a 81       	ldd	r16, Y+2	; 0x02
    23f8:	1b 81       	ldd	r17, Y+3	; 0x03
    23fa:	0e 94 81 20 	call	0x4102	; 0x4102 <__cmpdi2>
    23fe:	08 f4       	brcc	.+2      	; 0x2402 <Delay_ms+0x100>
    2400:	bc cf       	rjmp	.-136    	; 0x237a <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
    2402:	26 96       	adiw	r28, 0x06	; 6
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	1f 91       	pop	r17
    2414:	0f 91       	pop	r16
    2416:	ff 90       	pop	r15
    2418:	ef 90       	pop	r14
    241a:	df 90       	pop	r13
    241c:	cf 90       	pop	r12
    241e:	bf 90       	pop	r11
    2420:	af 90       	pop	r10
    2422:	9f 90       	pop	r9
    2424:	8f 90       	pop	r8
    2426:	7f 90       	pop	r7
    2428:	6f 90       	pop	r6
    242a:	5f 90       	pop	r5
    242c:	4f 90       	pop	r4
    242e:	3f 90       	pop	r3
    2430:	2f 90       	pop	r2
    2432:	08 95       	ret

00002434 <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
    2434:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
    2436:	89 2b       	or	r24, r25
    2438:	09 f4       	brne	.+2      	; 0x243c <Dio_init+0x8>
    243a:	e4 c0       	rjmp	.+456    	; 0x2604 <Dio_init+0x1d0>
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	d7 c0       	rjmp	.+430    	; 0x25ee <Dio_init+0x1ba>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
    2440:	e9 2f       	mov	r30, r25
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	ee 0f       	add	r30, r30
    2446:	ff 1f       	adc	r31, r31
    2448:	ee 0f       	add	r30, r30
    244a:	ff 1f       	adc	r31, r31
    244c:	e4 0f       	add	r30, r20
    244e:	f5 1f       	adc	r31, r21
    2450:	31 81       	ldd	r19, Z+1	; 0x01
    2452:	38 30       	cpi	r19, 0x08	; 8
    2454:	08 f0       	brcs	.+2      	; 0x2458 <Dio_init+0x24>
    2456:	d8 c0       	rjmp	.+432    	; 0x2608 <Dio_init+0x1d4>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
    2458:	20 81       	ld	r18, Z
    245a:	21 30       	cpi	r18, 0x01	; 1
    245c:	c1 f1       	breq	.+112    	; 0x24ce <Dio_init+0x9a>
    245e:	38 f0       	brcs	.+14     	; 0x246e <Dio_init+0x3a>
    2460:	22 30       	cpi	r18, 0x02	; 2
    2462:	09 f4       	brne	.+2      	; 0x2466 <Dio_init+0x32>
    2464:	64 c0       	rjmp	.+200    	; 0x252e <Dio_init+0xfa>
    2466:	23 30       	cpi	r18, 0x03	; 3
    2468:	09 f4       	brne	.+2      	; 0x246c <Dio_init+0x38>
    246a:	91 c0       	rjmp	.+290    	; 0x258e <Dio_init+0x15a>
    246c:	cf c0       	rjmp	.+414    	; 0x260c <Dio_init+0x1d8>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    246e:	2a b3       	in	r18, 0x1a	; 26
    2470:	61 e0       	ldi	r22, 0x01	; 1
    2472:	70 e0       	ldi	r23, 0x00	; 0
    2474:	db 01       	movw	r26, r22
    2476:	02 c0       	rjmp	.+4      	; 0x247c <Dio_init+0x48>
    2478:	aa 0f       	add	r26, r26
    247a:	bb 1f       	adc	r27, r27
    247c:	3a 95       	dec	r19
    247e:	e2 f7       	brpl	.-8      	; 0x2478 <Dio_init+0x44>
    2480:	8a 2f       	mov	r24, r26
    2482:	80 95       	com	r24
    2484:	82 23       	and	r24, r18
    2486:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2488:	aa b3       	in	r26, 0x1a	; 26
    248a:	82 81       	ldd	r24, Z+2	; 0x02
    248c:	28 2f       	mov	r18, r24
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	01 80       	ldd	r0, Z+1	; 0x01
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <Dio_init+0x64>
    2494:	22 0f       	add	r18, r18
    2496:	33 1f       	adc	r19, r19
    2498:	0a 94       	dec	r0
    249a:	e2 f7       	brpl	.-8      	; 0x2494 <Dio_init+0x60>
    249c:	2a 2b       	or	r18, r26
    249e:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    24a0:	8b b3       	in	r24, 0x1b	; 27
    24a2:	01 80       	ldd	r0, Z+1	; 0x01
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <Dio_init+0x76>
    24a6:	66 0f       	add	r22, r22
    24a8:	77 1f       	adc	r23, r23
    24aa:	0a 94       	dec	r0
    24ac:	e2 f7       	brpl	.-8      	; 0x24a6 <Dio_init+0x72>
    24ae:	60 95       	com	r22
    24b0:	68 23       	and	r22, r24
    24b2:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    24b4:	6b b3       	in	r22, 0x1b	; 27
    24b6:	83 81       	ldd	r24, Z+3	; 0x03
    24b8:	28 2f       	mov	r18, r24
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	01 80       	ldd	r0, Z+1	; 0x01
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <Dio_init+0x90>
    24c0:	22 0f       	add	r18, r18
    24c2:	33 1f       	adc	r19, r19
    24c4:	0a 94       	dec	r0
    24c6:	e2 f7       	brpl	.-8      	; 0x24c0 <Dio_init+0x8c>
    24c8:	26 2b       	or	r18, r22
    24ca:	2b bb       	out	0x1b, r18	; 27
				break;
    24cc:	8f c0       	rjmp	.+286    	; 0x25ec <Dio_init+0x1b8>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    24ce:	27 b3       	in	r18, 0x17	; 23
    24d0:	61 e0       	ldi	r22, 0x01	; 1
    24d2:	70 e0       	ldi	r23, 0x00	; 0
    24d4:	db 01       	movw	r26, r22
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <Dio_init+0xa8>
    24d8:	aa 0f       	add	r26, r26
    24da:	bb 1f       	adc	r27, r27
    24dc:	3a 95       	dec	r19
    24de:	e2 f7       	brpl	.-8      	; 0x24d8 <Dio_init+0xa4>
    24e0:	8a 2f       	mov	r24, r26
    24e2:	80 95       	com	r24
    24e4:	82 23       	and	r24, r18
    24e6:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    24e8:	a7 b3       	in	r26, 0x17	; 23
    24ea:	82 81       	ldd	r24, Z+2	; 0x02
    24ec:	28 2f       	mov	r18, r24
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	01 80       	ldd	r0, Z+1	; 0x01
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <Dio_init+0xc4>
    24f4:	22 0f       	add	r18, r18
    24f6:	33 1f       	adc	r19, r19
    24f8:	0a 94       	dec	r0
    24fa:	e2 f7       	brpl	.-8      	; 0x24f4 <Dio_init+0xc0>
    24fc:	2a 2b       	or	r18, r26
    24fe:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2500:	88 b3       	in	r24, 0x18	; 24
    2502:	01 80       	ldd	r0, Z+1	; 0x01
    2504:	02 c0       	rjmp	.+4      	; 0x250a <Dio_init+0xd6>
    2506:	66 0f       	add	r22, r22
    2508:	77 1f       	adc	r23, r23
    250a:	0a 94       	dec	r0
    250c:	e2 f7       	brpl	.-8      	; 0x2506 <Dio_init+0xd2>
    250e:	60 95       	com	r22
    2510:	68 23       	and	r22, r24
    2512:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2514:	68 b3       	in	r22, 0x18	; 24
    2516:	83 81       	ldd	r24, Z+3	; 0x03
    2518:	28 2f       	mov	r18, r24
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	01 80       	ldd	r0, Z+1	; 0x01
    251e:	02 c0       	rjmp	.+4      	; 0x2524 <Dio_init+0xf0>
    2520:	22 0f       	add	r18, r18
    2522:	33 1f       	adc	r19, r19
    2524:	0a 94       	dec	r0
    2526:	e2 f7       	brpl	.-8      	; 0x2520 <Dio_init+0xec>
    2528:	26 2b       	or	r18, r22
    252a:	28 bb       	out	0x18, r18	; 24
				break;
    252c:	5f c0       	rjmp	.+190    	; 0x25ec <Dio_init+0x1b8>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    252e:	24 b3       	in	r18, 0x14	; 20
    2530:	61 e0       	ldi	r22, 0x01	; 1
    2532:	70 e0       	ldi	r23, 0x00	; 0
    2534:	db 01       	movw	r26, r22
    2536:	02 c0       	rjmp	.+4      	; 0x253c <Dio_init+0x108>
    2538:	aa 0f       	add	r26, r26
    253a:	bb 1f       	adc	r27, r27
    253c:	3a 95       	dec	r19
    253e:	e2 f7       	brpl	.-8      	; 0x2538 <Dio_init+0x104>
    2540:	8a 2f       	mov	r24, r26
    2542:	80 95       	com	r24
    2544:	82 23       	and	r24, r18
    2546:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2548:	a4 b3       	in	r26, 0x14	; 20
    254a:	82 81       	ldd	r24, Z+2	; 0x02
    254c:	28 2f       	mov	r18, r24
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	01 80       	ldd	r0, Z+1	; 0x01
    2552:	02 c0       	rjmp	.+4      	; 0x2558 <Dio_init+0x124>
    2554:	22 0f       	add	r18, r18
    2556:	33 1f       	adc	r19, r19
    2558:	0a 94       	dec	r0
    255a:	e2 f7       	brpl	.-8      	; 0x2554 <Dio_init+0x120>
    255c:	2a 2b       	or	r18, r26
    255e:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2560:	85 b3       	in	r24, 0x15	; 21
    2562:	01 80       	ldd	r0, Z+1	; 0x01
    2564:	02 c0       	rjmp	.+4      	; 0x256a <Dio_init+0x136>
    2566:	66 0f       	add	r22, r22
    2568:	77 1f       	adc	r23, r23
    256a:	0a 94       	dec	r0
    256c:	e2 f7       	brpl	.-8      	; 0x2566 <Dio_init+0x132>
    256e:	60 95       	com	r22
    2570:	68 23       	and	r22, r24
    2572:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2574:	65 b3       	in	r22, 0x15	; 21
    2576:	83 81       	ldd	r24, Z+3	; 0x03
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	01 80       	ldd	r0, Z+1	; 0x01
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <Dio_init+0x150>
    2580:	22 0f       	add	r18, r18
    2582:	33 1f       	adc	r19, r19
    2584:	0a 94       	dec	r0
    2586:	e2 f7       	brpl	.-8      	; 0x2580 <Dio_init+0x14c>
    2588:	26 2b       	or	r18, r22
    258a:	25 bb       	out	0x15, r18	; 21
				break;
    258c:	2f c0       	rjmp	.+94     	; 0x25ec <Dio_init+0x1b8>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    258e:	21 b3       	in	r18, 0x11	; 17
    2590:	61 e0       	ldi	r22, 0x01	; 1
    2592:	70 e0       	ldi	r23, 0x00	; 0
    2594:	db 01       	movw	r26, r22
    2596:	02 c0       	rjmp	.+4      	; 0x259c <Dio_init+0x168>
    2598:	aa 0f       	add	r26, r26
    259a:	bb 1f       	adc	r27, r27
    259c:	3a 95       	dec	r19
    259e:	e2 f7       	brpl	.-8      	; 0x2598 <Dio_init+0x164>
    25a0:	8a 2f       	mov	r24, r26
    25a2:	80 95       	com	r24
    25a4:	82 23       	and	r24, r18
    25a6:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    25a8:	a1 b3       	in	r26, 0x11	; 17
    25aa:	82 81       	ldd	r24, Z+2	; 0x02
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	01 80       	ldd	r0, Z+1	; 0x01
    25b2:	02 c0       	rjmp	.+4      	; 0x25b8 <Dio_init+0x184>
    25b4:	22 0f       	add	r18, r18
    25b6:	33 1f       	adc	r19, r19
    25b8:	0a 94       	dec	r0
    25ba:	e2 f7       	brpl	.-8      	; 0x25b4 <Dio_init+0x180>
    25bc:	2a 2b       	or	r18, r26
    25be:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    25c0:	82 b3       	in	r24, 0x12	; 18
    25c2:	01 80       	ldd	r0, Z+1	; 0x01
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <Dio_init+0x196>
    25c6:	66 0f       	add	r22, r22
    25c8:	77 1f       	adc	r23, r23
    25ca:	0a 94       	dec	r0
    25cc:	e2 f7       	brpl	.-8      	; 0x25c6 <Dio_init+0x192>
    25ce:	60 95       	com	r22
    25d0:	68 23       	and	r22, r24
    25d2:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    25d4:	62 b3       	in	r22, 0x12	; 18
    25d6:	83 81       	ldd	r24, Z+3	; 0x03
    25d8:	28 2f       	mov	r18, r24
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	01 80       	ldd	r0, Z+1	; 0x01
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <Dio_init+0x1b0>
    25e0:	22 0f       	add	r18, r18
    25e2:	33 1f       	adc	r19, r19
    25e4:	0a 94       	dec	r0
    25e6:	e2 f7       	brpl	.-8      	; 0x25e0 <Dio_init+0x1ac>
    25e8:	26 2b       	or	r18, r22
    25ea:	22 bb       	out	0x12, r18	; 18
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
    25ec:	9f 5f       	subi	r25, 0xFF	; 255
    25ee:	94 31       	cpi	r25, 0x14	; 20
    25f0:	08 f4       	brcc	.+2      	; 0x25f4 <Dio_init+0x1c0>
    25f2:	26 cf       	rjmp	.-436    	; 0x2440 <Dio_init+0xc>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
    25f4:	50 93 34 06 	sts	0x0634, r21	; 0x800634 <pstrDio_pinsConfig+0x1>
    25f8:	40 93 33 06 	sts	0x0633, r20	; 0x800633 <pstrDio_pinsConfig>
	u8_Dio_Status = DIO_INITIALIZED;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
    2602:	08 95       	ret
{
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
    2604:	85 e0       	ldi	r24, 0x05	; 5
    2606:	08 95       	ret
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
    260c:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
    260e:	08 95       	ret

00002610 <Dio_writePin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    2610:	85 31       	cpi	r24, 0x15	; 21
    2612:	08 f0       	brcs	.+2      	; 0x2616 <Dio_writePin+0x6>
    2614:	90 c0       	rjmp	.+288    	; 0x2736 <Dio_writePin+0x126>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    2616:	90 91 32 06 	lds	r25, 0x0632	; 0x800632 <u8_Dio_Status>
    261a:	99 23       	and	r25, r25
    261c:	09 f4       	brne	.+2      	; 0x2620 <Dio_writePin+0x10>
    261e:	8d c0       	rjmp	.+282    	; 0x273a <Dio_writePin+0x12a>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    2620:	e8 2f       	mov	r30, r24
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	cf 01       	movw	r24, r30
    2626:	88 0f       	add	r24, r24
    2628:	99 1f       	adc	r25, r25
    262a:	88 0f       	add	r24, r24
    262c:	99 1f       	adc	r25, r25
    262e:	e0 91 33 06 	lds	r30, 0x0633	; 0x800633 <pstrDio_pinsConfig>
    2632:	f0 91 34 06 	lds	r31, 0x0634	; 0x800634 <pstrDio_pinsConfig+0x1>
    2636:	e8 0f       	add	r30, r24
    2638:	f9 1f       	adc	r31, r25
    263a:	80 81       	ld	r24, Z
    263c:	81 30       	cpi	r24, 0x01	; 1
    263e:	21 f1       	breq	.+72     	; 0x2688 <Dio_writePin+0x78>
    2640:	30 f0       	brcs	.+12     	; 0x264e <Dio_writePin+0x3e>
    2642:	82 30       	cpi	r24, 0x02	; 2
    2644:	f1 f1       	breq	.+124    	; 0x26c2 <Dio_writePin+0xb2>
    2646:	83 30       	cpi	r24, 0x03	; 3
    2648:	09 f4       	brne	.+2      	; 0x264c <Dio_writePin+0x3c>
    264a:	58 c0       	rjmp	.+176    	; 0x26fc <Dio_writePin+0xec>
    264c:	78 c0       	rjmp	.+240    	; 0x273e <Dio_writePin+0x12e>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
    264e:	61 30       	cpi	r22, 0x01	; 1
    2650:	69 f4       	brne	.+26     	; 0x266c <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2652:	2b b3       	in	r18, 0x1b	; 27
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	01 80       	ldd	r0, Z+1	; 0x01
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <Dio_writePin+0x50>
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	0a 94       	dec	r0
    2662:	e2 f7       	brpl	.-8      	; 0x265c <Dio_writePin+0x4c>
    2664:	82 2b       	or	r24, r18
    2666:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    266c:	2b b3       	in	r18, 0x1b	; 27
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	01 80       	ldd	r0, Z+1	; 0x01
    2674:	02 c0       	rjmp	.+4      	; 0x267a <Dio_writePin+0x6a>
    2676:	88 0f       	add	r24, r24
    2678:	99 1f       	adc	r25, r25
    267a:	0a 94       	dec	r0
    267c:	e2 f7       	brpl	.-8      	; 0x2676 <Dio_writePin+0x66>
    267e:	80 95       	com	r24
    2680:	82 23       	and	r24, r18
    2682:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
    2688:	61 30       	cpi	r22, 0x01	; 1
    268a:	69 f4       	brne	.+26     	; 0x26a6 <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    268c:	28 b3       	in	r18, 0x18	; 24
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	01 80       	ldd	r0, Z+1	; 0x01
    2694:	02 c0       	rjmp	.+4      	; 0x269a <Dio_writePin+0x8a>
    2696:	88 0f       	add	r24, r24
    2698:	99 1f       	adc	r25, r25
    269a:	0a 94       	dec	r0
    269c:	e2 f7       	brpl	.-8      	; 0x2696 <Dio_writePin+0x86>
    269e:	82 2b       	or	r24, r18
    26a0:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    26a6:	28 b3       	in	r18, 0x18	; 24
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	01 80       	ldd	r0, Z+1	; 0x01
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <Dio_writePin+0xa4>
    26b0:	88 0f       	add	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	0a 94       	dec	r0
    26b6:	e2 f7       	brpl	.-8      	; 0x26b0 <Dio_writePin+0xa0>
    26b8:	80 95       	com	r24
    26ba:	82 23       	and	r24, r18
    26bc:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
    26c2:	61 30       	cpi	r22, 0x01	; 1
    26c4:	69 f4       	brne	.+26     	; 0x26e0 <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    26c6:	25 b3       	in	r18, 0x15	; 21
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	01 80       	ldd	r0, Z+1	; 0x01
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <Dio_writePin+0xc4>
    26d0:	88 0f       	add	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	0a 94       	dec	r0
    26d6:	e2 f7       	brpl	.-8      	; 0x26d0 <Dio_writePin+0xc0>
    26d8:	82 2b       	or	r24, r18
    26da:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    26e0:	25 b3       	in	r18, 0x15	; 21
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	01 80       	ldd	r0, Z+1	; 0x01
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <Dio_writePin+0xde>
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	0a 94       	dec	r0
    26f0:	e2 f7       	brpl	.-8      	; 0x26ea <Dio_writePin+0xda>
    26f2:	80 95       	com	r24
    26f4:	82 23       	and	r24, r18
    26f6:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
    26fc:	61 30       	cpi	r22, 0x01	; 1
    26fe:	69 f4       	brne	.+26     	; 0x271a <Dio_writePin+0x10a>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2700:	22 b3       	in	r18, 0x12	; 18
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	01 80       	ldd	r0, Z+1	; 0x01
    2708:	02 c0       	rjmp	.+4      	; 0x270e <Dio_writePin+0xfe>
    270a:	88 0f       	add	r24, r24
    270c:	99 1f       	adc	r25, r25
    270e:	0a 94       	dec	r0
    2710:	e2 f7       	brpl	.-8      	; 0x270a <Dio_writePin+0xfa>
    2712:	82 2b       	or	r24, r18
    2714:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    271a:	22 b3       	in	r18, 0x12	; 18
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	01 80       	ldd	r0, Z+1	; 0x01
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <Dio_writePin+0x118>
    2724:	88 0f       	add	r24, r24
    2726:	99 1f       	adc	r25, r25
    2728:	0a 94       	dec	r0
    272a:	e2 f7       	brpl	.-8      	; 0x2724 <Dio_writePin+0x114>
    272c:	80 95       	com	r24
    272e:	82 23       	and	r24, r18
    2730:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	08 95       	ret
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    2736:	82 e0       	ldi	r24, 0x02	; 2
    2738:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    273a:	86 e0       	ldi	r24, 0x06	; 6
    273c:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    273e:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
    2740:	08 95       	ret

00002742 <Dio_togglePin>:
* Description: Function to Toggle data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    2742:	85 31       	cpi	r24, 0x15	; 21
    2744:	08 f0       	brcs	.+2      	; 0x2748 <Dio_togglePin+0x6>
    2746:	4f c0       	rjmp	.+158    	; 0x27e6 <Dio_togglePin+0xa4>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    2748:	90 91 32 06 	lds	r25, 0x0632	; 0x800632 <u8_Dio_Status>
    274c:	99 23       	and	r25, r25
    274e:	09 f4       	brne	.+2      	; 0x2752 <Dio_togglePin+0x10>
    2750:	4c c0       	rjmp	.+152    	; 0x27ea <Dio_togglePin+0xa8>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    2752:	e8 2f       	mov	r30, r24
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	cf 01       	movw	r24, r30
    2758:	88 0f       	add	r24, r24
    275a:	99 1f       	adc	r25, r25
    275c:	88 0f       	add	r24, r24
    275e:	99 1f       	adc	r25, r25
    2760:	e0 91 33 06 	lds	r30, 0x0633	; 0x800633 <pstrDio_pinsConfig>
    2764:	f0 91 34 06 	lds	r31, 0x0634	; 0x800634 <pstrDio_pinsConfig+0x1>
    2768:	e8 0f       	add	r30, r24
    276a:	f9 1f       	adc	r31, r25
    276c:	80 81       	ld	r24, Z
    276e:	81 30       	cpi	r24, 0x01	; 1
    2770:	99 f0       	breq	.+38     	; 0x2798 <Dio_togglePin+0x56>
    2772:	28 f0       	brcs	.+10     	; 0x277e <Dio_togglePin+0x3c>
    2774:	82 30       	cpi	r24, 0x02	; 2
    2776:	e9 f0       	breq	.+58     	; 0x27b2 <Dio_togglePin+0x70>
    2778:	83 30       	cpi	r24, 0x03	; 3
    277a:	41 f1       	breq	.+80     	; 0x27cc <Dio_togglePin+0x8a>
    277c:	38 c0       	rjmp	.+112    	; 0x27ee <Dio_togglePin+0xac>
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    277e:	2b b3       	in	r18, 0x1b	; 27
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	01 80       	ldd	r0, Z+1	; 0x01
    2786:	02 c0       	rjmp	.+4      	; 0x278c <Dio_togglePin+0x4a>
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	0a 94       	dec	r0
    278e:	e2 f7       	brpl	.-8      	; 0x2788 <Dio_togglePin+0x46>
    2790:	82 27       	eor	r24, r18
    2792:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    2794:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    2796:	08 95       	ret
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2798:	28 b3       	in	r18, 0x18	; 24
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	01 80       	ldd	r0, Z+1	; 0x01
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <Dio_togglePin+0x64>
    27a2:	88 0f       	add	r24, r24
    27a4:	99 1f       	adc	r25, r25
    27a6:	0a 94       	dec	r0
    27a8:	e2 f7       	brpl	.-8      	; 0x27a2 <Dio_togglePin+0x60>
    27aa:	82 27       	eor	r24, r18
    27ac:	88 bb       	out	0x18, r24	; 24
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    27ae:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    27b0:	08 95       	ret
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    27b2:	25 b3       	in	r18, 0x15	; 21
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	01 80       	ldd	r0, Z+1	; 0x01
    27ba:	02 c0       	rjmp	.+4      	; 0x27c0 <Dio_togglePin+0x7e>
    27bc:	88 0f       	add	r24, r24
    27be:	99 1f       	adc	r25, r25
    27c0:	0a 94       	dec	r0
    27c2:	e2 f7       	brpl	.-8      	; 0x27bc <Dio_togglePin+0x7a>
    27c4:	82 27       	eor	r24, r18
    27c6:	85 bb       	out	0x15, r24	; 21
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    27ca:	08 95       	ret
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    27cc:	22 b3       	in	r18, 0x12	; 18
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	01 80       	ldd	r0, Z+1	; 0x01
    27d4:	02 c0       	rjmp	.+4      	; 0x27da <Dio_togglePin+0x98>
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	0a 94       	dec	r0
    27dc:	e2 f7       	brpl	.-8      	; 0x27d6 <Dio_togglePin+0x94>
    27de:	82 27       	eor	r24, r18
    27e0:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    27e4:	08 95       	ret
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    27e6:	82 e0       	ldi	r24, 0x02	; 2
    27e8:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    27ea:	86 e0       	ldi	r24, 0x06	; 6
    27ec:	08 95       	ret
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    27ee:	84 e0       	ldi	r24, 0x04	; 4
	}	
	return DIO_STATUS_ERROR_OK;
}
    27f0:	08 95       	ret

000027f2 <Dio_readPin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    27f2:	85 31       	cpi	r24, 0x15	; 21
    27f4:	08 f0       	brcs	.+2      	; 0x27f8 <Dio_readPin+0x6>
    27f6:	7c c0       	rjmp	.+248    	; 0x28f0 <Dio_readPin+0xfe>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    27f8:	90 91 32 06 	lds	r25, 0x0632	; 0x800632 <u8_Dio_Status>
    27fc:	99 23       	and	r25, r25
    27fe:	09 f4       	brne	.+2      	; 0x2802 <Dio_readPin+0x10>
    2800:	79 c0       	rjmp	.+242    	; 0x28f4 <Dio_readPin+0x102>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    2802:	e8 2f       	mov	r30, r24
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	cf 01       	movw	r24, r30
    2808:	88 0f       	add	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	88 0f       	add	r24, r24
    280e:	99 1f       	adc	r25, r25
    2810:	e0 91 33 06 	lds	r30, 0x0633	; 0x800633 <pstrDio_pinsConfig>
    2814:	f0 91 34 06 	lds	r31, 0x0634	; 0x800634 <pstrDio_pinsConfig+0x1>
    2818:	e8 0f       	add	r30, r24
    281a:	f9 1f       	adc	r31, r25
    281c:	80 81       	ld	r24, Z
    281e:	81 30       	cpi	r24, 0x01	; 1
    2820:	f9 f0       	breq	.+62     	; 0x2860 <Dio_readPin+0x6e>
    2822:	30 f0       	brcs	.+12     	; 0x2830 <Dio_readPin+0x3e>
    2824:	82 30       	cpi	r24, 0x02	; 2
    2826:	a1 f1       	breq	.+104    	; 0x2890 <Dio_readPin+0x9e>
    2828:	83 30       	cpi	r24, 0x03	; 3
    282a:	09 f4       	brne	.+2      	; 0x282e <Dio_readPin+0x3c>
    282c:	49 c0       	rjmp	.+146    	; 0x28c0 <Dio_readPin+0xce>
    282e:	64 c0       	rjmp	.+200    	; 0x28f8 <Dio_readPin+0x106>
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2830:	49 b3       	in	r20, 0x19	; 25
    2832:	51 81       	ldd	r21, Z+1	; 0x01
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	9c 01       	movw	r18, r24
    283a:	05 2e       	mov	r0, r21
    283c:	02 c0       	rjmp	.+4      	; 0x2842 <Dio_readPin+0x50>
    283e:	22 0f       	add	r18, r18
    2840:	33 1f       	adc	r19, r19
    2842:	0a 94       	dec	r0
    2844:	e2 f7       	brpl	.-8      	; 0x283e <Dio_readPin+0x4c>
    2846:	84 2f       	mov	r24, r20
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	82 23       	and	r24, r18
    284c:	93 23       	and	r25, r19
    284e:	02 c0       	rjmp	.+4      	; 0x2854 <Dio_readPin+0x62>
    2850:	95 95       	asr	r25
    2852:	87 95       	ror	r24
    2854:	5a 95       	dec	r21
    2856:	e2 f7       	brpl	.-8      	; 0x2850 <Dio_readPin+0x5e>
    2858:	fb 01       	movw	r30, r22
    285a:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    285c:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    285e:	08 95       	ret
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2860:	46 b3       	in	r20, 0x16	; 22
    2862:	51 81       	ldd	r21, Z+1	; 0x01
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	9c 01       	movw	r18, r24
    286a:	05 2e       	mov	r0, r21
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <Dio_readPin+0x80>
    286e:	22 0f       	add	r18, r18
    2870:	33 1f       	adc	r19, r19
    2872:	0a 94       	dec	r0
    2874:	e2 f7       	brpl	.-8      	; 0x286e <Dio_readPin+0x7c>
    2876:	84 2f       	mov	r24, r20
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	82 23       	and	r24, r18
    287c:	93 23       	and	r25, r19
    287e:	02 c0       	rjmp	.+4      	; 0x2884 <Dio_readPin+0x92>
    2880:	95 95       	asr	r25
    2882:	87 95       	ror	r24
    2884:	5a 95       	dec	r21
    2886:	e2 f7       	brpl	.-8      	; 0x2880 <Dio_readPin+0x8e>
    2888:	fb 01       	movw	r30, r22
    288a:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    288c:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    288e:	08 95       	ret
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2890:	43 b3       	in	r20, 0x13	; 19
    2892:	51 81       	ldd	r21, Z+1	; 0x01
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	9c 01       	movw	r18, r24
    289a:	05 2e       	mov	r0, r21
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <Dio_readPin+0xb0>
    289e:	22 0f       	add	r18, r18
    28a0:	33 1f       	adc	r19, r19
    28a2:	0a 94       	dec	r0
    28a4:	e2 f7       	brpl	.-8      	; 0x289e <Dio_readPin+0xac>
    28a6:	84 2f       	mov	r24, r20
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	82 23       	and	r24, r18
    28ac:	93 23       	and	r25, r19
    28ae:	02 c0       	rjmp	.+4      	; 0x28b4 <Dio_readPin+0xc2>
    28b0:	95 95       	asr	r25
    28b2:	87 95       	ror	r24
    28b4:	5a 95       	dec	r21
    28b6:	e2 f7       	brpl	.-8      	; 0x28b0 <Dio_readPin+0xbe>
    28b8:	fb 01       	movw	r30, r22
    28ba:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    28bc:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    28be:	08 95       	ret
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    28c0:	40 b3       	in	r20, 0x10	; 16
    28c2:	51 81       	ldd	r21, Z+1	; 0x01
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	9c 01       	movw	r18, r24
    28ca:	05 2e       	mov	r0, r21
    28cc:	02 c0       	rjmp	.+4      	; 0x28d2 <Dio_readPin+0xe0>
    28ce:	22 0f       	add	r18, r18
    28d0:	33 1f       	adc	r19, r19
    28d2:	0a 94       	dec	r0
    28d4:	e2 f7       	brpl	.-8      	; 0x28ce <Dio_readPin+0xdc>
    28d6:	84 2f       	mov	r24, r20
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	82 23       	and	r24, r18
    28dc:	93 23       	and	r25, r19
    28de:	02 c0       	rjmp	.+4      	; 0x28e4 <Dio_readPin+0xf2>
    28e0:	95 95       	asr	r25
    28e2:	87 95       	ror	r24
    28e4:	5a 95       	dec	r21
    28e6:	e2 f7       	brpl	.-8      	; 0x28e0 <Dio_readPin+0xee>
    28e8:	fb 01       	movw	r30, r22
    28ea:	80 83       	st	Z, r24
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    28ec:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    28ee:	08 95       	ret
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    28f0:	82 e0       	ldi	r24, 0x02	; 2
    28f2:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    28f4:	86 e0       	ldi	r24, 0x06	; 6
    28f6:	08 95       	ret
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    28f8:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
    28fa:	08 95       	ret

000028fc <__vector_1>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
    28fc:	1f 92       	push	r1
    28fe:	0f 92       	push	r0
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	0f 92       	push	r0
    2904:	11 24       	eor	r1, r1
    2906:	2f 93       	push	r18
    2908:	3f 93       	push	r19
    290a:	4f 93       	push	r20
    290c:	5f 93       	push	r21
    290e:	6f 93       	push	r22
    2910:	7f 93       	push	r23
    2912:	8f 93       	push	r24
    2914:	9f 93       	push	r25
    2916:	af 93       	push	r26
    2918:	bf 93       	push	r27
    291a:	ef 93       	push	r30
    291c:	ff 93       	push	r31
    291e:	e0 91 39 06 	lds	r30, 0x0639	; 0x800639 <INT0_CallBackPtr>
    2922:	f0 91 3a 06 	lds	r31, 0x063A	; 0x80063a <INT0_CallBackPtr+0x1>
    2926:	09 95       	icall
    2928:	ff 91       	pop	r31
    292a:	ef 91       	pop	r30
    292c:	bf 91       	pop	r27
    292e:	af 91       	pop	r26
    2930:	9f 91       	pop	r25
    2932:	8f 91       	pop	r24
    2934:	7f 91       	pop	r23
    2936:	6f 91       	pop	r22
    2938:	5f 91       	pop	r21
    293a:	4f 91       	pop	r20
    293c:	3f 91       	pop	r19
    293e:	2f 91       	pop	r18
    2940:	0f 90       	pop	r0
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	0f 90       	pop	r0
    2946:	1f 90       	pop	r1
    2948:	18 95       	reti

0000294a <__vector_2>:
    294a:	1f 92       	push	r1
    294c:	0f 92       	push	r0
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	0f 92       	push	r0
    2952:	11 24       	eor	r1, r1
    2954:	2f 93       	push	r18
    2956:	3f 93       	push	r19
    2958:	4f 93       	push	r20
    295a:	5f 93       	push	r21
    295c:	6f 93       	push	r22
    295e:	7f 93       	push	r23
    2960:	8f 93       	push	r24
    2962:	9f 93       	push	r25
    2964:	af 93       	push	r26
    2966:	bf 93       	push	r27
    2968:	ef 93       	push	r30
    296a:	ff 93       	push	r31
    296c:	e0 91 37 06 	lds	r30, 0x0637	; 0x800637 <INT1_CallBackPtr>
    2970:	f0 91 38 06 	lds	r31, 0x0638	; 0x800638 <INT1_CallBackPtr+0x1>
    2974:	09 95       	icall
    2976:	ff 91       	pop	r31
    2978:	ef 91       	pop	r30
    297a:	bf 91       	pop	r27
    297c:	af 91       	pop	r26
    297e:	9f 91       	pop	r25
    2980:	8f 91       	pop	r24
    2982:	7f 91       	pop	r23
    2984:	6f 91       	pop	r22
    2986:	5f 91       	pop	r21
    2988:	4f 91       	pop	r20
    298a:	3f 91       	pop	r19
    298c:	2f 91       	pop	r18
    298e:	0f 90       	pop	r0
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	0f 90       	pop	r0
    2994:	1f 90       	pop	r1
    2996:	18 95       	reti

00002998 <__vector_3>:
}
ISR(INT2_IRQ)
{
    2998:	1f 92       	push	r1
    299a:	0f 92       	push	r0
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	0f 92       	push	r0
    29a0:	11 24       	eor	r1, r1
    29a2:	2f 93       	push	r18
    29a4:	3f 93       	push	r19
    29a6:	4f 93       	push	r20
    29a8:	5f 93       	push	r21
    29aa:	6f 93       	push	r22
    29ac:	7f 93       	push	r23
    29ae:	8f 93       	push	r24
    29b0:	9f 93       	push	r25
    29b2:	af 93       	push	r26
    29b4:	bf 93       	push	r27
    29b6:	ef 93       	push	r30
    29b8:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
    29ba:	e0 91 35 06 	lds	r30, 0x0635	; 0x800635 <INT2_CallBackPtr>
    29be:	f0 91 36 06 	lds	r31, 0x0636	; 0x800636 <INT2_CallBackPtr+0x1>
    29c2:	09 95       	icall
}
    29c4:	ff 91       	pop	r31
    29c6:	ef 91       	pop	r30
    29c8:	bf 91       	pop	r27
    29ca:	af 91       	pop	r26
    29cc:	9f 91       	pop	r25
    29ce:	8f 91       	pop	r24
    29d0:	7f 91       	pop	r23
    29d2:	6f 91       	pop	r22
    29d4:	5f 91       	pop	r21
    29d6:	4f 91       	pop	r20
    29d8:	3f 91       	pop	r19
    29da:	2f 91       	pop	r18
    29dc:	0f 90       	pop	r0
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	0f 90       	pop	r0
    29e2:	1f 90       	pop	r1
    29e4:	18 95       	reti

000029e6 <Gpt_ISRHandler>:
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_EXPIRED;
	return GPT_STATUS_ERROR_OK;
}
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	0e c0       	rjmp	.+28     	; 0x2a06 <Gpt_ISRHandler+0x20>
    29ea:	29 2f       	mov	r18, r25
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	f9 01       	movw	r30, r18
    29f0:	ee 0f       	add	r30, r30
    29f2:	ff 1f       	adc	r31, r31
    29f4:	2e 0f       	add	r18, r30
    29f6:	3f 1f       	adc	r19, r31
    29f8:	f9 01       	movw	r30, r18
    29fa:	ee 53       	subi	r30, 0x3E	; 62
    29fc:	fa 4f       	sbci	r31, 0xFA	; 250
    29fe:	20 81       	ld	r18, Z
    2a00:	28 17       	cp	r18, r24
    2a02:	19 f0       	breq	.+6      	; 0x2a0a <Gpt_ISRHandler+0x24>
    2a04:	9f 5f       	subi	r25, 0xFF	; 255
    2a06:	99 23       	and	r25, r25
    2a08:	81 f3       	breq	.-32     	; 0x29ea <Gpt_ISRHandler+0x4>
    2a0a:	89 2f       	mov	r24, r25
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	fc 01       	movw	r30, r24
    2a10:	ee 0f       	add	r30, r30
    2a12:	ff 1f       	adc	r31, r31
    2a14:	ee 0f       	add	r30, r30
    2a16:	ff 1f       	adc	r31, r31
    2a18:	e4 5c       	subi	r30, 0xC4	; 196
    2a1a:	f9 4f       	sbci	r31, 0xF9	; 249
    2a1c:	40 81       	ld	r20, Z
    2a1e:	51 81       	ldd	r21, Z+1	; 0x01
    2a20:	62 81       	ldd	r22, Z+2	; 0x02
    2a22:	73 81       	ldd	r23, Z+3	; 0x03
    2a24:	41 15       	cp	r20, r1
    2a26:	51 05       	cpc	r21, r1
    2a28:	61 05       	cpc	r22, r1
    2a2a:	71 05       	cpc	r23, r1
    2a2c:	81 f0       	breq	.+32     	; 0x2a4e <Gpt_ISRHandler+0x68>
    2a2e:	88 0f       	add	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	88 0f       	add	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	fc 01       	movw	r30, r24
    2a38:	e4 5c       	subi	r30, 0xC4	; 196
    2a3a:	f9 4f       	sbci	r31, 0xF9	; 249
    2a3c:	41 50       	subi	r20, 0x01	; 1
    2a3e:	51 09       	sbc	r21, r1
    2a40:	61 09       	sbc	r22, r1
    2a42:	71 09       	sbc	r23, r1
    2a44:	40 83       	st	Z, r20
    2a46:	51 83       	std	Z+1, r21	; 0x01
    2a48:	62 83       	std	Z+2, r22	; 0x02
    2a4a:	73 83       	std	Z+3, r23	; 0x03
    2a4c:	08 95       	ret
    2a4e:	23 b7       	in	r18, 0x33	; 51
    2a50:	2e 7f       	andi	r18, 0xFE	; 254
    2a52:	23 bf       	out	0x33, r18	; 51
    2a54:	23 b7       	in	r18, 0x33	; 51
    2a56:	2d 7f       	andi	r18, 0xFD	; 253
    2a58:	23 bf       	out	0x33, r18	; 51
    2a5a:	23 b7       	in	r18, 0x33	; 51
    2a5c:	2b 7f       	andi	r18, 0xFB	; 251
    2a5e:	23 bf       	out	0x33, r18	; 51
    2a60:	29 b7       	in	r18, 0x39	; 57
    2a62:	2e 7f       	andi	r18, 0xFE	; 254
    2a64:	29 bf       	out	0x39, r18	; 57
    2a66:	fc 01       	movw	r30, r24
    2a68:	e0 5c       	subi	r30, 0xC0	; 192
    2a6a:	f9 4f       	sbci	r31, 0xF9	; 249
    2a6c:	24 e0       	ldi	r18, 0x04	; 4
    2a6e:	20 83       	st	Z, r18
    2a70:	e0 91 41 06 	lds	r30, 0x0641	; 0x800641 <Gpt_Timer0_CallBackPtr>
    2a74:	f0 91 42 06 	lds	r31, 0x0642	; 0x800642 <Gpt_Timer0_CallBackPtr+0x1>
    2a78:	09 95       	icall
    2a7a:	08 95       	ret

00002a7c <GptInit>:
    2a7c:	80 91 3b 06 	lds	r24, 0x063B	; 0x80063b <genu_GPTModStatus>
    2a80:	81 30       	cpi	r24, 0x01	; 1
    2a82:	61 f1       	breq	.+88     	; 0x2adc <GptInit+0x60>
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	24 c0       	rjmp	.+72     	; 0x2ad0 <GptInit+0x54>
    2a88:	82 2f       	mov	r24, r18
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	ee 0f       	add	r30, r30
    2a90:	ff 1f       	adc	r31, r31
    2a92:	e8 0f       	add	r30, r24
    2a94:	f9 1f       	adc	r31, r25
    2a96:	ee 53       	subi	r30, 0x3E	; 62
    2a98:	fa 4f       	sbci	r31, 0xFA	; 250
    2a9a:	30 81       	ld	r19, Z
    2a9c:	33 23       	and	r19, r19
    2a9e:	19 f0       	breq	.+6      	; 0x2aa6 <GptInit+0x2a>
    2aa0:	33 30       	cpi	r19, 0x03	; 3
    2aa2:	f0 f4       	brcc	.+60     	; 0x2ae0 <GptInit+0x64>
    2aa4:	0f c0       	rjmp	.+30     	; 0x2ac4 <GptInit+0x48>
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	ee 0f       	add	r30, r30
    2aaa:	ff 1f       	adc	r31, r31
    2aac:	e8 0f       	add	r30, r24
    2aae:	f9 1f       	adc	r31, r25
    2ab0:	ee 53       	subi	r30, 0x3E	; 62
    2ab2:	fa 4f       	sbci	r31, 0xFA	; 250
    2ab4:	32 81       	ldd	r19, Z+2	; 0x02
    2ab6:	31 11       	cpse	r19, r1
    2ab8:	05 c0       	rjmp	.+10     	; 0x2ac4 <GptInit+0x48>
    2aba:	13 be       	out	0x33, r1	; 51
    2abc:	39 b7       	in	r19, 0x39	; 57
    2abe:	3c 7f       	andi	r19, 0xFC	; 252
    2ac0:	39 bf       	out	0x39, r19	; 57
    2ac2:	12 be       	out	0x32, r1	; 50
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	e0 5c       	subi	r30, 0xC0	; 192
    2ac8:	f9 4f       	sbci	r31, 0xF9	; 249
    2aca:	31 e0       	ldi	r19, 0x01	; 1
    2acc:	30 83       	st	Z, r19
    2ace:	2f 5f       	subi	r18, 0xFF	; 255
    2ad0:	22 23       	and	r18, r18
    2ad2:	d1 f2       	breq	.-76     	; 0x2a88 <GptInit+0xc>
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	80 93 3b 06 	sts	0x063B, r24	; 0x80063b <genu_GPTModStatus>
    2ada:	08 95       	ret
    2adc:	83 e0       	ldi	r24, 0x03	; 3
    2ade:	08 95       	ret
    2ae0:	85 e0       	ldi	r24, 0x05	; 5
    2ae2:	08 95       	ret

00002ae4 <GptStart_aSync>:
* Return value: enuGpt_Status_t - Returns the status of the function (if there is any error)
* Description: Function to Start the Timer module counting from 0x00 until (u16_Ticks)
               and generate interrupt when OVF.
************************************************************************************/
enuGpt_Status_t GptStart_aSync(u8Gpt_Channel_t ChannelId, u32Gpt_Value_t u16_Ticks, pfGpt_CallBack_t CallBack)
{
    2ae4:	0f 93       	push	r16
    2ae6:	1f 93       	push	r17
    2ae8:	cf 93       	push	r28
    2aea:	df 93       	push	r29
    2aec:	89 01       	movw	r16, r18
	
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    2aee:	81 11       	cpse	r24, r1
    2af0:	4a c0       	rjmp	.+148    	; 0x2b86 <GptStart_aSync+0xa2>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    2af2:	c8 2f       	mov	r28, r24
    2af4:	d0 e0       	ldi	r29, 0x00	; 0
    2af6:	fe 01       	movw	r30, r28
    2af8:	e0 5c       	subi	r30, 0xC0	; 192
    2afa:	f9 4f       	sbci	r31, 0xF9	; 249
    2afc:	80 81       	ld	r24, Z
    2afe:	88 23       	and	r24, r24
    2b00:	09 f4       	brne	.+2      	; 0x2b04 <GptStart_aSync+0x20>
    2b02:	43 c0       	rjmp	.+134    	; 0x2b8a <GptStart_aSync+0xa6>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
    2b04:	82 30       	cpi	r24, 0x02	; 2
    2b06:	09 f4       	brne	.+2      	; 0x2b0a <GptStart_aSync+0x26>
    2b08:	42 c0       	rjmp	.+132    	; 0x2b8e <GptStart_aSync+0xaa>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u16_remainderCount=0;
	
	enuChannelsState[ChannelId] = GPT_RUNNING;
    2b0a:	82 e0       	ldi	r24, 0x02	; 2
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	e0 5c       	subi	r30, 0xC0	; 192
    2b10:	f9 4f       	sbci	r31, 0xF9	; 249
    2b12:	80 83       	st	Z, r24
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    2b14:	fe 01       	movw	r30, r28
    2b16:	ee 0f       	add	r30, r30
    2b18:	ff 1f       	adc	r31, r31
    2b1a:	ec 0f       	add	r30, r28
    2b1c:	fd 1f       	adc	r31, r29
    2b1e:	ee 53       	subi	r30, 0x3E	; 62
    2b20:	fa 4f       	sbci	r31, 0xFA	; 250
    2b22:	80 81       	ld	r24, Z
    2b24:	88 23       	and	r24, r24
    2b26:	21 f0       	breq	.+8      	; 0x2b30 <GptStart_aSync+0x4c>
    2b28:	83 30       	cpi	r24, 0x03	; 3
    2b2a:	98 f1       	brcs	.+102    	; 0x2b92 <GptStart_aSync+0xae>
		case GPT_TIMER_2: /* In case of Timer 2 */
			break;
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    2b2c:	85 e0       	ldi	r24, 0x05	; 5
    2b2e:	34 c0       	rjmp	.+104    	; 0x2b98 <GptStart_aSync+0xb4>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Get Number of loops to overflow the timer counter */
			u32_Channels_ISR_Count[ChannelId] = u16_Ticks / GPT_MAX_VALUE_8BIT; //0xFF
    2b30:	cb 01       	movw	r24, r22
    2b32:	ba 01       	movw	r22, r20
    2b34:	2f ef       	ldi	r18, 0xFF	; 255
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e0       	ldi	r20, 0x00	; 0
    2b3a:	50 e0       	ldi	r21, 0x00	; 0
    2b3c:	0e 94 3e 20 	call	0x407c	; 0x407c <__udivmodsi4>
    2b40:	fe 01       	movw	r30, r28
    2b42:	ee 0f       	add	r30, r30
    2b44:	ff 1f       	adc	r31, r31
    2b46:	ee 0f       	add	r30, r30
    2b48:	ff 1f       	adc	r31, r31
    2b4a:	e4 5c       	subi	r30, 0xC4	; 196
    2b4c:	f9 4f       	sbci	r31, 0xF9	; 249
    2b4e:	20 83       	st	Z, r18
    2b50:	31 83       	std	Z+1, r19	; 0x01
    2b52:	42 83       	std	Z+2, r20	; 0x02
    2b54:	53 83       	std	Z+3, r21	; 0x03
			/* Get Number of extra ticks (remainder) */
			u16_remainderCount = u16_Ticks % GPT_MAX_VALUE_8BIT;
    2b56:	26 2f       	mov	r18, r22
    2b58:	37 2f       	mov	r19, r23
			/* Set the interrupt enable */
			REG_SET_BIT(GPT_TIMSK_REG, GPT_TIMSK_TOIE0);
    2b5a:	89 b7       	in	r24, 0x39	; 57
    2b5c:	81 60       	ori	r24, 0x01	; 1
    2b5e:	89 bf       	out	0x39, r24	; 57
			/* Set the callback function pointer */
			Gpt_Timer0_CallBackPtr=CallBack;
    2b60:	10 93 42 06 	sts	0x0642, r17	; 0x800642 <Gpt_Timer0_CallBackPtr+0x1>
    2b64:	00 93 41 06 	sts	0x0641, r16	; 0x800641 <Gpt_Timer0_CallBackPtr>
			/* Start the clock with the given pre scaler */
			GPT_TCCR0_REG = (Timers_Configurations[ChannelId].enuClock_Src) << GPT_TCCR0_CS00;
    2b68:	ce 01       	movw	r24, r28
    2b6a:	88 0f       	add	r24, r24
    2b6c:	99 1f       	adc	r25, r25
    2b6e:	c8 0f       	add	r28, r24
    2b70:	d9 1f       	adc	r29, r25
    2b72:	ce 53       	subi	r28, 0x3E	; 62
    2b74:	da 4f       	sbci	r29, 0xFA	; 250
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	83 bf       	out	0x33, r24	; 51
			/* Run the remainder ticks */
			/* Put the value of the 0xFF - remainderTicks to start count from it */
			if(u16_remainderCount != 0)
    2b7a:	23 2b       	or	r18, r19
    2b7c:	61 f0       	breq	.+24     	; 0x2b96 <GptStart_aSync+0xb2>
			{
				GPT_TCNT0_REG = 256 - u16_remainderCount;
    2b7e:	61 95       	neg	r22
    2b80:	62 bf       	out	0x32, r22	; 50
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	09 c0       	rjmp	.+18     	; 0x2b98 <GptStart_aSync+0xb4>
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    2b86:	86 e0       	ldi	r24, 0x06	; 6
    2b88:	07 c0       	rjmp	.+14     	; 0x2b98 <GptStart_aSync+0xb4>
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    2b8a:	82 e0       	ldi	r24, 0x02	; 2
    2b8c:	05 c0       	rjmp	.+10     	; 0x2b98 <GptStart_aSync+0xb4>
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_BUSY;
    2b8e:	87 e0       	ldi	r24, 0x07	; 7
    2b90:	03 c0       	rjmp	.+6      	; 0x2b98 <GptStart_aSync+0xb4>
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	01 c0       	rjmp	.+2      	; 0x2b98 <GptStart_aSync+0xb4>
    2b96:	81 e0       	ldi	r24, 0x01	; 1
}
    2b98:	df 91       	pop	r29
    2b9a:	cf 91       	pop	r28
    2b9c:	1f 91       	pop	r17
    2b9e:	0f 91       	pop	r16
    2ba0:	08 95       	ret

00002ba2 <GptStop>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    2ba2:	81 11       	cpse	r24, r1
    2ba4:	23 c0       	rjmp	.+70     	; 0x2bec <GptStop+0x4a>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	fc 01       	movw	r30, r24
    2baa:	e0 5c       	subi	r30, 0xC0	; 192
    2bac:	f9 4f       	sbci	r31, 0xF9	; 249
    2bae:	20 81       	ld	r18, Z
    2bb0:	22 23       	and	r18, r18
    2bb2:	f1 f0       	breq	.+60     	; 0x2bf0 <GptStop+0x4e>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
    2bb4:	22 30       	cpi	r18, 0x02	; 2
    2bb6:	f1 f4       	brne	.+60     	; 0x2bf4 <GptStop+0x52>

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    2bb8:	fc 01       	movw	r30, r24
    2bba:	ee 0f       	add	r30, r30
    2bbc:	ff 1f       	adc	r31, r31
    2bbe:	e8 0f       	add	r30, r24
    2bc0:	f9 1f       	adc	r31, r25
    2bc2:	ee 53       	subi	r30, 0x3E	; 62
    2bc4:	fa 4f       	sbci	r31, 0xFA	; 250
    2bc6:	20 81       	ld	r18, Z
    2bc8:	22 23       	and	r18, r18
    2bca:	19 f0       	breq	.+6      	; 0x2bd2 <GptStop+0x30>
    2bcc:	23 30       	cpi	r18, 0x03	; 3
    2bce:	a0 f4       	brcc	.+40     	; 0x2bf8 <GptStop+0x56>
    2bd0:	06 c0       	rjmp	.+12     	; 0x2bde <GptStop+0x3c>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Stop the clock from the timer */
			GPT_TCCR0_REG &= ~(7 << GPT_TCCR0_CS00);
    2bd2:	23 b7       	in	r18, 0x33	; 51
    2bd4:	28 7f       	andi	r18, 0xF8	; 248
    2bd6:	23 bf       	out	0x33, r18	; 51
			GPT_TIMSK_REG &= ~(3 << GPT_TIMSK_TOIE0);
    2bd8:	29 b7       	in	r18, 0x39	; 57
    2bda:	2c 7f       	andi	r18, 0xFC	; 252
    2bdc:	29 bf       	out	0x39, r18	; 57
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
    2bde:	fc 01       	movw	r30, r24
    2be0:	e0 5c       	subi	r30, 0xC0	; 192
    2be2:	f9 4f       	sbci	r31, 0xF9	; 249
    2be4:	23 e0       	ldi	r18, 0x03	; 3
    2be6:	20 83       	st	Z, r18
	return GPT_STATUS_ERROR_OK;
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    2bec:	86 e0       	ldi	r24, 0x06	; 6
    2bee:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    2bf0:	82 e0       	ldi	r24, 0x02	; 2
    2bf2:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_STOPPED;
    2bf4:	88 e0       	ldi	r24, 0x08	; 8
    2bf6:	08 95       	ret
		case GPT_TIMER_2: /* In case of Timer 2 */
		break;
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    2bf8:	85 e0       	ldi	r24, 0x05	; 5
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
    2bfa:	08 95       	ret

00002bfc <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    2bfc:	1f 92       	push	r1
    2bfe:	0f 92       	push	r0
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	0f 92       	push	r0
    2c04:	11 24       	eor	r1, r1
    2c06:	2f 93       	push	r18
    2c08:	3f 93       	push	r19
    2c0a:	4f 93       	push	r20
    2c0c:	5f 93       	push	r21
    2c0e:	6f 93       	push	r22
    2c10:	7f 93       	push	r23
    2c12:	8f 93       	push	r24
    2c14:	9f 93       	push	r25
    2c16:	af 93       	push	r26
    2c18:	bf 93       	push	r27
    2c1a:	ef 93       	push	r30
    2c1c:	ff 93       	push	r31
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Gpt_ISRHandler>
    2c24:	ff 91       	pop	r31
    2c26:	ef 91       	pop	r30
    2c28:	bf 91       	pop	r27
    2c2a:	af 91       	pop	r26
    2c2c:	9f 91       	pop	r25
    2c2e:	8f 91       	pop	r24
    2c30:	7f 91       	pop	r23
    2c32:	6f 91       	pop	r22
    2c34:	5f 91       	pop	r21
    2c36:	4f 91       	pop	r20
    2c38:	3f 91       	pop	r19
    2c3a:	2f 91       	pop	r18
    2c3c:	0f 90       	pop	r0
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	0f 90       	pop	r0
    2c42:	1f 90       	pop	r1
    2c44:	18 95       	reti

00002c46 <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    2c46:	1f 92       	push	r1
    2c48:	0f 92       	push	r0
    2c4a:	0f b6       	in	r0, 0x3f	; 63
    2c4c:	0f 92       	push	r0
    2c4e:	11 24       	eor	r1, r1
    2c50:	2f 93       	push	r18
    2c52:	3f 93       	push	r19
    2c54:	4f 93       	push	r20
    2c56:	5f 93       	push	r21
    2c58:	6f 93       	push	r22
    2c5a:	7f 93       	push	r23
    2c5c:	8f 93       	push	r24
    2c5e:	9f 93       	push	r25
    2c60:	af 93       	push	r26
    2c62:	bf 93       	push	r27
    2c64:	ef 93       	push	r30
    2c66:	ff 93       	push	r31
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Gpt_ISRHandler>
    2c6e:	ff 91       	pop	r31
    2c70:	ef 91       	pop	r30
    2c72:	bf 91       	pop	r27
    2c74:	af 91       	pop	r26
    2c76:	9f 91       	pop	r25
    2c78:	8f 91       	pop	r24
    2c7a:	7f 91       	pop	r23
    2c7c:	6f 91       	pop	r22
    2c7e:	5f 91       	pop	r21
    2c80:	4f 91       	pop	r20
    2c82:	3f 91       	pop	r19
    2c84:	2f 91       	pop	r18
    2c86:	0f 90       	pop	r0
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	0f 90       	pop	r0
    2c8c:	1f 90       	pop	r1
    2c8e:	18 95       	reti

00002c90 <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2c90:	1f 92       	push	r1
    2c92:	0f 92       	push	r0
    2c94:	0f b6       	in	r0, 0x3f	; 63
    2c96:	0f 92       	push	r0
    2c98:	11 24       	eor	r1, r1
    2c9a:	2f 93       	push	r18
    2c9c:	3f 93       	push	r19
    2c9e:	4f 93       	push	r20
    2ca0:	5f 93       	push	r21
    2ca2:	6f 93       	push	r22
    2ca4:	7f 93       	push	r23
    2ca6:	8f 93       	push	r24
    2ca8:	9f 93       	push	r25
    2caa:	af 93       	push	r26
    2cac:	bf 93       	push	r27
    2cae:	ef 93       	push	r30
    2cb0:	ff 93       	push	r31
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Gpt_ISRHandler>
    2cb8:	ff 91       	pop	r31
    2cba:	ef 91       	pop	r30
    2cbc:	bf 91       	pop	r27
    2cbe:	af 91       	pop	r26
    2cc0:	9f 91       	pop	r25
    2cc2:	8f 91       	pop	r24
    2cc4:	7f 91       	pop	r23
    2cc6:	6f 91       	pop	r22
    2cc8:	5f 91       	pop	r21
    2cca:	4f 91       	pop	r20
    2ccc:	3f 91       	pop	r19
    2cce:	2f 91       	pop	r18
    2cd0:	0f 90       	pop	r0
    2cd2:	0f be       	out	0x3f, r0	; 63
    2cd4:	0f 90       	pop	r0
    2cd6:	1f 90       	pop	r1
    2cd8:	18 95       	reti

00002cda <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2cda:	1f 92       	push	r1
    2cdc:	0f 92       	push	r0
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	0f 92       	push	r0
    2ce2:	11 24       	eor	r1, r1
    2ce4:	2f 93       	push	r18
    2ce6:	3f 93       	push	r19
    2ce8:	4f 93       	push	r20
    2cea:	5f 93       	push	r21
    2cec:	6f 93       	push	r22
    2cee:	7f 93       	push	r23
    2cf0:	8f 93       	push	r24
    2cf2:	9f 93       	push	r25
    2cf4:	af 93       	push	r26
    2cf6:	bf 93       	push	r27
    2cf8:	ef 93       	push	r30
    2cfa:	ff 93       	push	r31
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Gpt_ISRHandler>
    2d02:	ff 91       	pop	r31
    2d04:	ef 91       	pop	r30
    2d06:	bf 91       	pop	r27
    2d08:	af 91       	pop	r26
    2d0a:	9f 91       	pop	r25
    2d0c:	8f 91       	pop	r24
    2d0e:	7f 91       	pop	r23
    2d10:	6f 91       	pop	r22
    2d12:	5f 91       	pop	r21
    2d14:	4f 91       	pop	r20
    2d16:	3f 91       	pop	r19
    2d18:	2f 91       	pop	r18
    2d1a:	0f 90       	pop	r0
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	0f 90       	pop	r0
    2d20:	1f 90       	pop	r1
    2d22:	18 95       	reti

00002d24 <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2d24:	1f 92       	push	r1
    2d26:	0f 92       	push	r0
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	0f 92       	push	r0
    2d2c:	11 24       	eor	r1, r1
    2d2e:	2f 93       	push	r18
    2d30:	3f 93       	push	r19
    2d32:	4f 93       	push	r20
    2d34:	5f 93       	push	r21
    2d36:	6f 93       	push	r22
    2d38:	7f 93       	push	r23
    2d3a:	8f 93       	push	r24
    2d3c:	9f 93       	push	r25
    2d3e:	af 93       	push	r26
    2d40:	bf 93       	push	r27
    2d42:	ef 93       	push	r30
    2d44:	ff 93       	push	r31
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Gpt_ISRHandler>
    2d4c:	ff 91       	pop	r31
    2d4e:	ef 91       	pop	r30
    2d50:	bf 91       	pop	r27
    2d52:	af 91       	pop	r26
    2d54:	9f 91       	pop	r25
    2d56:	8f 91       	pop	r24
    2d58:	7f 91       	pop	r23
    2d5a:	6f 91       	pop	r22
    2d5c:	5f 91       	pop	r21
    2d5e:	4f 91       	pop	r20
    2d60:	3f 91       	pop	r19
    2d62:	2f 91       	pop	r18
    2d64:	0f 90       	pop	r0
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	0f 90       	pop	r0
    2d6a:	1f 90       	pop	r1
    2d6c:	18 95       	reti

00002d6e <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2d6e:	1f 92       	push	r1
    2d70:	0f 92       	push	r0
    2d72:	0f b6       	in	r0, 0x3f	; 63
    2d74:	0f 92       	push	r0
    2d76:	11 24       	eor	r1, r1
    2d78:	2f 93       	push	r18
    2d7a:	3f 93       	push	r19
    2d7c:	4f 93       	push	r20
    2d7e:	5f 93       	push	r21
    2d80:	6f 93       	push	r22
    2d82:	7f 93       	push	r23
    2d84:	8f 93       	push	r24
    2d86:	9f 93       	push	r25
    2d88:	af 93       	push	r26
    2d8a:	bf 93       	push	r27
    2d8c:	ef 93       	push	r30
    2d8e:	ff 93       	push	r31
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Gpt_ISRHandler>
    2d96:	ff 91       	pop	r31
    2d98:	ef 91       	pop	r30
    2d9a:	bf 91       	pop	r27
    2d9c:	af 91       	pop	r26
    2d9e:	9f 91       	pop	r25
    2da0:	8f 91       	pop	r24
    2da2:	7f 91       	pop	r23
    2da4:	6f 91       	pop	r22
    2da6:	5f 91       	pop	r21
    2da8:	4f 91       	pop	r20
    2daa:	3f 91       	pop	r19
    2dac:	2f 91       	pop	r18
    2dae:	0f 90       	pop	r0
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	0f 90       	pop	r0
    2db4:	1f 90       	pop	r1
    2db6:	18 95       	reti

00002db8 <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2db8:	1f 92       	push	r1
    2dba:	0f 92       	push	r0
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	0f 92       	push	r0
    2dc0:	11 24       	eor	r1, r1
    2dc2:	2f 93       	push	r18
    2dc4:	3f 93       	push	r19
    2dc6:	4f 93       	push	r20
    2dc8:	5f 93       	push	r21
    2dca:	6f 93       	push	r22
    2dcc:	7f 93       	push	r23
    2dce:	8f 93       	push	r24
    2dd0:	9f 93       	push	r25
    2dd2:	af 93       	push	r26
    2dd4:	bf 93       	push	r27
    2dd6:	ef 93       	push	r30
    2dd8:	ff 93       	push	r31
    2dda:	82 e0       	ldi	r24, 0x02	; 2
    2ddc:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Gpt_ISRHandler>
    2de0:	ff 91       	pop	r31
    2de2:	ef 91       	pop	r30
    2de4:	bf 91       	pop	r27
    2de6:	af 91       	pop	r26
    2de8:	9f 91       	pop	r25
    2dea:	8f 91       	pop	r24
    2dec:	7f 91       	pop	r23
    2dee:	6f 91       	pop	r22
    2df0:	5f 91       	pop	r21
    2df2:	4f 91       	pop	r20
    2df4:	3f 91       	pop	r19
    2df6:	2f 91       	pop	r18
    2df8:	0f 90       	pop	r0
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	0f 90       	pop	r0
    2dfe:	1f 90       	pop	r1
    2e00:	18 95       	reti

00002e02 <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2e02:	1f 92       	push	r1
    2e04:	0f 92       	push	r0
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	0f 92       	push	r0
    2e0a:	11 24       	eor	r1, r1
    2e0c:	2f 93       	push	r18
    2e0e:	3f 93       	push	r19
    2e10:	4f 93       	push	r20
    2e12:	5f 93       	push	r21
    2e14:	6f 93       	push	r22
    2e16:	7f 93       	push	r23
    2e18:	8f 93       	push	r24
    2e1a:	9f 93       	push	r25
    2e1c:	af 93       	push	r26
    2e1e:	bf 93       	push	r27
    2e20:	ef 93       	push	r30
    2e22:	ff 93       	push	r31
    2e24:	82 e0       	ldi	r24, 0x02	; 2
    2e26:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Gpt_ISRHandler>
    2e2a:	ff 91       	pop	r31
    2e2c:	ef 91       	pop	r30
    2e2e:	bf 91       	pop	r27
    2e30:	af 91       	pop	r26
    2e32:	9f 91       	pop	r25
    2e34:	8f 91       	pop	r24
    2e36:	7f 91       	pop	r23
    2e38:	6f 91       	pop	r22
    2e3a:	5f 91       	pop	r21
    2e3c:	4f 91       	pop	r20
    2e3e:	3f 91       	pop	r19
    2e40:	2f 91       	pop	r18
    2e42:	0f 90       	pop	r0
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	0f 90       	pop	r0
    2e48:	1f 90       	pop	r1
    2e4a:	18 95       	reti

00002e4c <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
    2e4c:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2e50:	86 30       	cpi	r24, 0x06	; 6
    2e52:	49 f0       	breq	.+18     	; 0x2e66 <I2C_MasterInit+0x1a>
    2e54:	82 e0       	ldi	r24, 0x02	; 2
    2e56:	81 b9       	out	0x01, r24	; 1
    2e58:	89 e0       	ldi	r24, 0x09	; 9
    2e5a:	80 b9       	out	0x00, r24	; 0
    2e5c:	86 e0       	ldi	r24, 0x06	; 6
    2e5e:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <genuI2C_Status>
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	08 95       	ret
    2e66:	87 e0       	ldi	r24, 0x07	; 7
    2e68:	08 95       	ret

00002e6a <I2C_MasterSendSTART>:
    2e6a:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2e6e:	86 30       	cpi	r24, 0x06	; 6
    2e70:	59 f4       	brne	.+22     	; 0x2e88 <I2C_MasterSendSTART+0x1e>
    2e72:	84 ea       	ldi	r24, 0xA4	; 164
    2e74:	86 bf       	out	0x36, r24	; 54
    2e76:	06 b6       	in	r0, 0x36	; 54
    2e78:	07 fe       	sbrs	r0, 7
    2e7a:	fd cf       	rjmp	.-6      	; 0x2e76 <I2C_MasterSendSTART+0xc>
    2e7c:	81 b1       	in	r24, 0x01	; 1
    2e7e:	88 7f       	andi	r24, 0xF8	; 248
    2e80:	88 30       	cpi	r24, 0x08	; 8
    2e82:	21 f0       	breq	.+8      	; 0x2e8c <I2C_MasterSendSTART+0x22>
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	08 95       	ret
    2e88:	85 e0       	ldi	r24, 0x05	; 5
    2e8a:	08 95       	ret
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	08 95       	ret

00002e90 <I2C_MasterSendSlaveAddress>:
    2e90:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2e94:	96 30       	cpi	r25, 0x06	; 6
    2e96:	29 f5       	brne	.+74     	; 0x2ee2 <I2C_MasterSendSlaveAddress+0x52>
    2e98:	62 30       	cpi	r22, 0x02	; 2
    2e9a:	28 f5       	brcc	.+74     	; 0x2ee6 <I2C_MasterSendSlaveAddress+0x56>
    2e9c:	88 23       	and	r24, r24
    2e9e:	2c f1       	brlt	.+74     	; 0x2eea <I2C_MasterSendSlaveAddress+0x5a>
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	88 0f       	add	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	68 2b       	or	r22, r24
    2ea8:	63 b9       	out	0x03, r22	; 3
    2eaa:	84 e8       	ldi	r24, 0x84	; 132
    2eac:	86 bf       	out	0x36, r24	; 54
    2eae:	06 b6       	in	r0, 0x36	; 54
    2eb0:	07 fe       	sbrs	r0, 7
    2eb2:	fd cf       	rjmp	.-6      	; 0x2eae <I2C_MasterSendSlaveAddress+0x1e>
    2eb4:	81 b1       	in	r24, 0x01	; 1
    2eb6:	88 7f       	andi	r24, 0xF8	; 248
    2eb8:	88 33       	cpi	r24, 0x38	; 56
    2eba:	59 f0       	breq	.+22     	; 0x2ed2 <I2C_MasterSendSlaveAddress+0x42>
    2ebc:	28 f4       	brcc	.+10     	; 0x2ec8 <I2C_MasterSendSlaveAddress+0x38>
    2ebe:	88 31       	cpi	r24, 0x18	; 24
    2ec0:	b1 f0       	breq	.+44     	; 0x2eee <I2C_MasterSendSlaveAddress+0x5e>
    2ec2:	80 32       	cpi	r24, 0x20	; 32
    2ec4:	41 f0       	breq	.+16     	; 0x2ed6 <I2C_MasterSendSlaveAddress+0x46>
    2ec6:	0b c0       	rjmp	.+22     	; 0x2ede <I2C_MasterSendSlaveAddress+0x4e>
    2ec8:	80 34       	cpi	r24, 0x40	; 64
    2eca:	89 f0       	breq	.+34     	; 0x2eee <I2C_MasterSendSlaveAddress+0x5e>
    2ecc:	88 34       	cpi	r24, 0x48	; 72
    2ece:	29 f0       	breq	.+10     	; 0x2eda <I2C_MasterSendSlaveAddress+0x4a>
    2ed0:	06 c0       	rjmp	.+12     	; 0x2ede <I2C_MasterSendSlaveAddress+0x4e>
    2ed2:	88 e3       	ldi	r24, 0x38	; 56
    2ed4:	08 95       	ret
    2ed6:	80 e2       	ldi	r24, 0x20	; 32
    2ed8:	08 95       	ret
    2eda:	88 e4       	ldi	r24, 0x48	; 72
    2edc:	08 95       	ret
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	08 95       	ret
    2ee2:	85 e0       	ldi	r24, 0x05	; 5
    2ee4:	08 95       	ret
    2ee6:	82 e0       	ldi	r24, 0x02	; 2
    2ee8:	08 95       	ret
    2eea:	83 e0       	ldi	r24, 0x03	; 3
    2eec:	08 95       	ret
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	08 95       	ret

00002ef2 <I2C_MasterSendRepSTART>:
    2ef2:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2ef6:	86 30       	cpi	r24, 0x06	; 6
    2ef8:	59 f4       	brne	.+22     	; 0x2f10 <I2C_MasterSendRepSTART+0x1e>
    2efa:	84 ea       	ldi	r24, 0xA4	; 164
    2efc:	86 bf       	out	0x36, r24	; 54
    2efe:	06 b6       	in	r0, 0x36	; 54
    2f00:	07 fe       	sbrs	r0, 7
    2f02:	fd cf       	rjmp	.-6      	; 0x2efe <I2C_MasterSendRepSTART+0xc>
    2f04:	81 b1       	in	r24, 0x01	; 1
    2f06:	88 7f       	andi	r24, 0xF8	; 248
    2f08:	80 31       	cpi	r24, 0x10	; 16
    2f0a:	21 f0       	breq	.+8      	; 0x2f14 <I2C_MasterSendRepSTART+0x22>
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	08 95       	ret
    2f10:	85 e0       	ldi	r24, 0x05	; 5
    2f12:	08 95       	ret
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	08 95       	ret

00002f18 <I2C_MasterSendSTOP>:
    2f18:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2f1c:	86 30       	cpi	r24, 0x06	; 6
    2f1e:	39 f4       	brne	.+14     	; 0x2f2e <I2C_MasterSendSTOP+0x16>
    2f20:	84 e9       	ldi	r24, 0x94	; 148
    2f22:	86 bf       	out	0x36, r24	; 54
    2f24:	06 b6       	in	r0, 0x36	; 54
    2f26:	04 fc       	sbrc	r0, 4
    2f28:	fd cf       	rjmp	.-6      	; 0x2f24 <I2C_MasterSendSTOP+0xc>
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	08 95       	ret
    2f2e:	85 e0       	ldi	r24, 0x05	; 5
    2f30:	08 95       	ret

00002f32 <I2C_MasterSendByte>:
    2f32:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2f36:	96 30       	cpi	r25, 0x06	; 6
    2f38:	69 f4       	brne	.+26     	; 0x2f54 <I2C_MasterSendByte+0x22>
    2f3a:	83 b9       	out	0x03, r24	; 3
    2f3c:	84 e8       	ldi	r24, 0x84	; 132
    2f3e:	86 bf       	out	0x36, r24	; 54
    2f40:	06 b6       	in	r0, 0x36	; 54
    2f42:	07 fe       	sbrs	r0, 7
    2f44:	fd cf       	rjmp	.-6      	; 0x2f40 <I2C_MasterSendByte+0xe>
    2f46:	81 b1       	in	r24, 0x01	; 1
    2f48:	88 7f       	andi	r24, 0xF8	; 248
    2f4a:	88 32       	cpi	r24, 0x28	; 40
    2f4c:	29 f0       	breq	.+10     	; 0x2f58 <I2C_MasterSendByte+0x26>
    2f4e:	80 33       	cpi	r24, 0x30	; 48
    2f50:	29 f4       	brne	.+10     	; 0x2f5c <I2C_MasterSendByte+0x2a>
    2f52:	08 95       	ret
    2f54:	85 e0       	ldi	r24, 0x05	; 5
    2f56:	08 95       	ret
    2f58:	88 e2       	ldi	r24, 0x28	; 40
    2f5a:	08 95       	ret
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	08 95       	ret

00002f60 <I2C_MasterReceiveByte_ACK>:
    2f60:	fc 01       	movw	r30, r24
    2f62:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2f66:	96 30       	cpi	r25, 0x06	; 6
    2f68:	79 f4       	brne	.+30     	; 0x2f88 <I2C_MasterReceiveByte_ACK+0x28>
    2f6a:	30 97       	sbiw	r30, 0x00	; 0
    2f6c:	79 f0       	breq	.+30     	; 0x2f8c <I2C_MasterReceiveByte_ACK+0x2c>
    2f6e:	84 ec       	ldi	r24, 0xC4	; 196
    2f70:	86 bf       	out	0x36, r24	; 54
    2f72:	06 b6       	in	r0, 0x36	; 54
    2f74:	07 fe       	sbrs	r0, 7
    2f76:	fd cf       	rjmp	.-6      	; 0x2f72 <I2C_MasterReceiveByte_ACK+0x12>
    2f78:	81 b1       	in	r24, 0x01	; 1
    2f7a:	88 7f       	andi	r24, 0xF8	; 248
    2f7c:	80 35       	cpi	r24, 0x50	; 80
    2f7e:	41 f4       	brne	.+16     	; 0x2f90 <I2C_MasterReceiveByte_ACK+0x30>
    2f80:	83 b1       	in	r24, 0x03	; 3
    2f82:	80 83       	st	Z, r24
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	08 95       	ret
    2f88:	85 e0       	ldi	r24, 0x05	; 5
    2f8a:	08 95       	ret
    2f8c:	84 e0       	ldi	r24, 0x04	; 4
    2f8e:	08 95       	ret
    2f90:	80 e0       	ldi	r24, 0x00	; 0
    2f92:	08 95       	ret

00002f94 <I2C_MasterReceiveByte_NACK>:
    2f94:	fc 01       	movw	r30, r24
    2f96:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2f9a:	96 30       	cpi	r25, 0x06	; 6
    2f9c:	79 f4       	brne	.+30     	; 0x2fbc <I2C_MasterReceiveByte_NACK+0x28>
    2f9e:	30 97       	sbiw	r30, 0x00	; 0
    2fa0:	79 f0       	breq	.+30     	; 0x2fc0 <I2C_MasterReceiveByte_NACK+0x2c>
    2fa2:	84 e8       	ldi	r24, 0x84	; 132
    2fa4:	86 bf       	out	0x36, r24	; 54
    2fa6:	06 b6       	in	r0, 0x36	; 54
    2fa8:	07 fe       	sbrs	r0, 7
    2faa:	fd cf       	rjmp	.-6      	; 0x2fa6 <I2C_MasterReceiveByte_NACK+0x12>
    2fac:	81 b1       	in	r24, 0x01	; 1
    2fae:	88 7f       	andi	r24, 0xF8	; 248
    2fb0:	88 35       	cpi	r24, 0x58	; 88
    2fb2:	41 f4       	brne	.+16     	; 0x2fc4 <I2C_MasterReceiveByte_NACK+0x30>
    2fb4:	83 b1       	in	r24, 0x03	; 3
    2fb6:	80 83       	st	Z, r24
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	08 95       	ret
    2fbc:	85 e0       	ldi	r24, 0x05	; 5
    2fbe:	08 95       	ret
    2fc0:	84 e0       	ldi	r24, 0x04	; 4
    2fc2:	08 95       	ret
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	08 95       	ret

00002fc8 <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
    2fc8:	7f 92       	push	r7
    2fca:	8f 92       	push	r8
    2fcc:	9f 92       	push	r9
    2fce:	af 92       	push	r10
    2fd0:	bf 92       	push	r11
    2fd2:	cf 92       	push	r12
    2fd4:	df 92       	push	r13
    2fd6:	ef 92       	push	r14
    2fd8:	ff 92       	push	r15
    2fda:	0f 93       	push	r16
    2fdc:	1f 93       	push	r17
    2fde:	cf 93       	push	r28
    2fe0:	df 93       	push	r29
    2fe2:	78 2e       	mov	r7, r24
    2fe4:	eb 01       	movw	r28, r22
    2fe6:	7a 01       	movw	r14, r20
    2fe8:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    2fea:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2fee:	86 30       	cpi	r24, 0x06	; 6
    2ff0:	09 f0       	breq	.+2      	; 0x2ff4 <I2C_MasterReceiveGeneral+0x2c>
    2ff2:	47 c0       	rjmp	.+142    	; 0x3082 <I2C_MasterReceiveGeneral+0xba>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
    2ff4:	20 97       	sbiw	r28, 0x00	; 0
    2ff6:	09 f4       	brne	.+2      	; 0x2ffa <I2C_MasterReceiveGeneral+0x32>
    2ff8:	46 c0       	rjmp	.+140    	; 0x3086 <I2C_MasterReceiveGeneral+0xbe>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
    2ffa:	23 2b       	or	r18, r19
    2ffc:	09 f4       	brne	.+2      	; 0x3000 <I2C_MasterReceiveGeneral+0x38>
    2ffe:	45 c0       	rjmp	.+138    	; 0x308a <I2C_MasterReceiveGeneral+0xc2>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    3000:	77 20       	and	r7, r7
    3002:	0c f4       	brge	.+2      	; 0x3006 <I2C_MasterReceiveGeneral+0x3e>
    3004:	44 c0       	rjmp	.+136    	; 0x308e <I2C_MasterReceiveGeneral+0xc6>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    3006:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <I2C_MasterSendSTART>
    300a:	88 23       	and	r24, r24
    300c:	09 f4       	brne	.+2      	; 0x3010 <I2C_MasterReceiveGeneral+0x48>
    300e:	4a c0       	rjmp	.+148    	; 0x30a4 <I2C_MasterReceiveGeneral+0xdc>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    3010:	60 e0       	ldi	r22, 0x00	; 0
    3012:	87 2d       	mov	r24, r7
    3014:	0e 94 48 17 	call	0x2e90	; 0x2e90 <I2C_MasterSendSlaveAddress>
    3018:	81 30       	cpi	r24, 0x01	; 1
    301a:	d9 f5       	brne	.+118    	; 0x3092 <I2C_MasterReceiveGeneral+0xca>
    301c:	0b c0       	rjmp	.+22     	; 0x3034 <I2C_MasterReceiveGeneral+0x6c>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    301e:	4e 01       	movw	r8, r28
    3020:	8f ef       	ldi	r24, 0xFF	; 255
    3022:	88 1a       	sub	r8, r24
    3024:	98 0a       	sbc	r9, r24
    3026:	88 81       	ld	r24, Y
    3028:	0e 94 99 17 	call	0x2f32	; 0x2f32 <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    302c:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    302e:	88 23       	and	r24, r24
    3030:	c9 f1       	breq	.+114    	; 0x30a4 <I2C_MasterReceiveGeneral+0xdc>
    3032:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    3034:	57 01       	movw	r10, r14
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	a8 1a       	sub	r10, r24
    303a:	b1 08       	sbc	r11, r1
    303c:	ef 28       	or	r14, r15
    303e:	79 f7       	brne	.-34     	; 0x301e <I2C_MasterReceiveGeneral+0x56>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
    3040:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <I2C_MasterSendRepSTART>
    3044:	81 30       	cpi	r24, 0x01	; 1
    3046:	39 f5       	brne	.+78     	; 0x3096 <I2C_MasterReceiveGeneral+0xce>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    3048:	61 e0       	ldi	r22, 0x01	; 1
    304a:	87 2d       	mov	r24, r7
    304c:	0e 94 48 17 	call	0x2e90	; 0x2e90 <I2C_MasterSendSlaveAddress>
    3050:	81 30       	cpi	r24, 0x01	; 1
    3052:	19 f5       	brne	.+70     	; 0x309a <I2C_MasterReceiveGeneral+0xd2>
    3054:	08 c0       	rjmp	.+16     	; 0x3066 <I2C_MasterReceiveGeneral+0x9e>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
    3056:	e6 01       	movw	r28, r12
    3058:	21 96       	adiw	r28, 0x01	; 1
    305a:	c6 01       	movw	r24, r12
    305c:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <I2C_MasterReceiveByte_ACK>
    3060:	81 30       	cpi	r24, 0x01	; 1
    3062:	e9 f4       	brne	.+58     	; 0x309e <I2C_MasterReceiveGeneral+0xd6>
    3064:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
    3066:	01 50       	subi	r16, 0x01	; 1
    3068:	11 09       	sbc	r17, r1
    306a:	a9 f7       	brne	.-22     	; 0x3056 <I2C_MasterReceiveGeneral+0x8e>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
    306c:	c6 01       	movw	r24, r12
    306e:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <I2C_MasterReceiveByte_NACK>
    3072:	81 30       	cpi	r24, 0x01	; 1
    3074:	b1 f4       	brne	.+44     	; 0x30a2 <I2C_MasterReceiveGeneral+0xda>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
    3076:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <I2C_MasterSendSTOP>
    307a:	81 30       	cpi	r24, 0x01	; 1
    307c:	99 f0       	breq	.+38     	; 0x30a4 <I2C_MasterReceiveGeneral+0xdc>
		return I2C_STATUS_ERROR_NOK;
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	11 c0       	rjmp	.+34     	; 0x30a4 <I2C_MasterReceiveGeneral+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    3082:	85 e0       	ldi	r24, 0x05	; 5
    3084:	0f c0       	rjmp	.+30     	; 0x30a4 <I2C_MasterReceiveGeneral+0xdc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    3086:	84 e0       	ldi	r24, 0x04	; 4
    3088:	0d c0       	rjmp	.+26     	; 0x30a4 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    308a:	84 e0       	ldi	r24, 0x04	; 4
    308c:	0b c0       	rjmp	.+22     	; 0x30a4 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    308e:	83 e0       	ldi	r24, 0x03	; 3
    3090:	09 c0       	rjmp	.+18     	; 0x30a4 <I2C_MasterReceiveGeneral+0xdc>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	07 c0       	rjmp	.+14     	; 0x30a4 <I2C_MasterReceiveGeneral+0xdc>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	05 c0       	rjmp	.+10     	; 0x30a4 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	03 c0       	rjmp	.+6      	; 0x30a4 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	01 c0       	rjmp	.+2      	; 0x30a4 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    30a2:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
    30a4:	df 91       	pop	r29
    30a6:	cf 91       	pop	r28
    30a8:	1f 91       	pop	r17
    30aa:	0f 91       	pop	r16
    30ac:	ff 90       	pop	r15
    30ae:	ef 90       	pop	r14
    30b0:	df 90       	pop	r13
    30b2:	cf 90       	pop	r12
    30b4:	bf 90       	pop	r11
    30b6:	af 90       	pop	r10
    30b8:	9f 90       	pop	r9
    30ba:	8f 90       	pop	r8
    30bc:	7f 90       	pop	r7
    30be:	08 95       	ret

000030c0 <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
    30c0:	bf 92       	push	r11
    30c2:	cf 92       	push	r12
    30c4:	df 92       	push	r13
    30c6:	ef 92       	push	r14
    30c8:	ff 92       	push	r15
    30ca:	0f 93       	push	r16
    30cc:	1f 93       	push	r17
    30ce:	cf 93       	push	r28
    30d0:	df 93       	push	r29
    30d2:	18 2f       	mov	r17, r24
    30d4:	06 2f       	mov	r16, r22
    30d6:	ea 01       	movw	r28, r20
    30d8:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    30da:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    30de:	86 30       	cpi	r24, 0x06	; 6
    30e0:	59 f5       	brne	.+86     	; 0x3138 <I2C_MasterSendToLocation+0x78>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    30e2:	20 97       	sbiw	r28, 0x00	; 0
    30e4:	59 f1       	breq	.+86     	; 0x313c <I2C_MasterSendToLocation+0x7c>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    30e6:	11 23       	and	r17, r17
    30e8:	5c f1       	brlt	.+86     	; 0x3140 <I2C_MasterSendToLocation+0x80>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    30ea:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <I2C_MasterSendSTART>
    30ee:	88 23       	and	r24, r24
    30f0:	61 f1       	breq	.+88     	; 0x314a <I2C_MasterSendToLocation+0x8a>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    30f2:	60 e0       	ldi	r22, 0x00	; 0
    30f4:	81 2f       	mov	r24, r17
    30f6:	0e 94 48 17 	call	0x2e90	; 0x2e90 <I2C_MasterSendSlaveAddress>
    30fa:	b8 2e       	mov	r11, r24
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	b8 12       	cpse	r11, r24
    3100:	21 c0       	rjmp	.+66     	; 0x3144 <I2C_MasterSendToLocation+0x84>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    3102:	80 2f       	mov	r24, r16
    3104:	0e 94 99 17 	call	0x2f32	; 0x2f32 <I2C_MasterSendByte>
    3108:	81 11       	cpse	r24, r1
    310a:	0c c0       	rjmp	.+24     	; 0x3124 <I2C_MasterSendToLocation+0x64>
    310c:	1e c0       	rjmp	.+60     	; 0x314a <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    310e:	6e 01       	movw	r12, r28
    3110:	8f ef       	ldi	r24, 0xFF	; 255
    3112:	c8 1a       	sub	r12, r24
    3114:	d8 0a       	sbc	r13, r24
    3116:	88 81       	ld	r24, Y
    3118:	0e 94 99 17 	call	0x2f32	; 0x2f32 <I2C_MasterSendByte>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    311c:	78 01       	movw	r14, r16
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    311e:	88 23       	and	r24, r24
    3120:	a1 f0       	breq	.+40     	; 0x314a <I2C_MasterSendToLocation+0x8a>
    3122:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    3124:	87 01       	movw	r16, r14
    3126:	01 50       	subi	r16, 0x01	; 1
    3128:	11 09       	sbc	r17, r1
    312a:	ef 28       	or	r14, r15
    312c:	81 f7       	brne	.-32     	; 0x310e <I2C_MasterSendToLocation+0x4e>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    312e:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <I2C_MasterSendSTOP>
    3132:	81 11       	cpse	r24, r1
    3134:	09 c0       	rjmp	.+18     	; 0x3148 <I2C_MasterSendToLocation+0x88>
    3136:	09 c0       	rjmp	.+18     	; 0x314a <I2C_MasterSendToLocation+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    3138:	85 e0       	ldi	r24, 0x05	; 5
    313a:	07 c0       	rjmp	.+14     	; 0x314a <I2C_MasterSendToLocation+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    313c:	84 e0       	ldi	r24, 0x04	; 4
    313e:	05 c0       	rjmp	.+10     	; 0x314a <I2C_MasterSendToLocation+0x8a>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    3140:	83 e0       	ldi	r24, 0x03	; 3
    3142:	03 c0       	rjmp	.+6      	; 0x314a <I2C_MasterSendToLocation+0x8a>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	01 c0       	rjmp	.+2      	; 0x314a <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
    3148:	8b 2d       	mov	r24, r11
}
    314a:	df 91       	pop	r29
    314c:	cf 91       	pop	r28
    314e:	1f 91       	pop	r17
    3150:	0f 91       	pop	r16
    3152:	ff 90       	pop	r15
    3154:	ef 90       	pop	r14
    3156:	df 90       	pop	r13
    3158:	cf 90       	pop	r12
    315a:	bf 90       	pop	r11
    315c:	08 95       	ret

0000315e <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
    315e:	0f 93       	push	r16
    3160:	1f 93       	push	r17
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29
    3166:	1f 92       	push	r1
    3168:	cd b7       	in	r28, 0x3d	; 61
    316a:	de b7       	in	r29, 0x3e	; 62
    316c:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
    316e:	89 01       	movw	r16, r18
    3170:	9a 01       	movw	r18, r20
    3172:	41 e0       	ldi	r20, 0x01	; 1
    3174:	50 e0       	ldi	r21, 0x00	; 0
    3176:	be 01       	movw	r22, r28
    3178:	6f 5f       	subi	r22, 0xFF	; 255
    317a:	7f 4f       	sbci	r23, 0xFF	; 255
    317c:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <I2C_MasterReceiveGeneral>
}
    3180:	0f 90       	pop	r0
    3182:	df 91       	pop	r29
    3184:	cf 91       	pop	r28
    3186:	1f 91       	pop	r17
    3188:	0f 91       	pop	r16
    318a:	08 95       	ret

0000318c <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
    318c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <genuSpi_Status>
    3190:	87 30       	cpi	r24, 0x07	; 7
    3192:	b9 f0       	breq	.+46     	; 0x31c2 <Spi_init+0x36>
    3194:	87 b3       	in	r24, 0x17	; 23
    3196:	80 64       	ori	r24, 0x40	; 64
    3198:	87 bb       	out	0x17, r24	; 23
    319a:	87 b3       	in	r24, 0x17	; 23
    319c:	8f 7d       	andi	r24, 0xDF	; 223
    319e:	87 bb       	out	0x17, r24	; 23
    31a0:	87 b3       	in	r24, 0x17	; 23
    31a2:	8f 7e       	andi	r24, 0xEF	; 239
    31a4:	87 bb       	out	0x17, r24	; 23
    31a6:	87 b3       	in	r24, 0x17	; 23
    31a8:	8f 77       	andi	r24, 0x7F	; 127
    31aa:	87 bb       	out	0x17, r24	; 23
    31ac:	8d b1       	in	r24, 0x0d	; 13
    31ae:	8f 7e       	andi	r24, 0xEF	; 239
    31b0:	8d b9       	out	0x0d, r24	; 13
    31b2:	8d b1       	in	r24, 0x0d	; 13
    31b4:	80 64       	ori	r24, 0x40	; 64
    31b6:	8d b9       	out	0x0d, r24	; 13
    31b8:	87 e0       	ldi	r24, 0x07	; 7
    31ba:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <genuSpi_Status>
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	08 95       	ret
    31c2:	88 e0       	ldi	r24, 0x08	; 8
    31c4:	08 95       	ret

000031c6 <Spi_SlaveReceiveByte>:
    31c6:	fc 01       	movw	r30, r24
    31c8:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <genuSpi_Status>
    31cc:	97 30       	cpi	r25, 0x07	; 7
    31ce:	41 f4       	brne	.+16     	; 0x31e0 <Spi_SlaveReceiveByte+0x1a>
    31d0:	30 97       	sbiw	r30, 0x00	; 0
    31d2:	41 f0       	breq	.+16     	; 0x31e4 <Spi_SlaveReceiveByte+0x1e>
    31d4:	77 9b       	sbis	0x0e, 7	; 14
    31d6:	fe cf       	rjmp	.-4      	; 0x31d4 <Spi_SlaveReceiveByte+0xe>
    31d8:	8f b1       	in	r24, 0x0f	; 15
    31da:	80 83       	st	Z, r24
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	08 95       	ret
    31e0:	86 e0       	ldi	r24, 0x06	; 6
    31e2:	08 95       	ret
    31e4:	85 e0       	ldi	r24, 0x05	; 5
    31e6:	08 95       	ret

000031e8 <Spi_SlaveReceivePacket>:
    31e8:	cf 92       	push	r12
    31ea:	df 92       	push	r13
    31ec:	ef 92       	push	r14
    31ee:	ff 92       	push	r15
    31f0:	1f 93       	push	r17
    31f2:	cf 93       	push	r28
    31f4:	df 93       	push	r29
    31f6:	6c 01       	movw	r12, r24
    31f8:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <genuSpi_Status>
    31fc:	97 30       	cpi	r25, 0x07	; 7
    31fe:	b1 f4       	brne	.+44     	; 0x322c <Spi_SlaveReceivePacket+0x44>
    3200:	7b 01       	movw	r14, r22
    3202:	10 e0       	ldi	r17, 0x00	; 0
    3204:	0c c0       	rjmp	.+24     	; 0x321e <Spi_SlaveReceivePacket+0x36>
    3206:	e6 01       	movw	r28, r12
    3208:	c8 0f       	add	r28, r24
    320a:	d9 1f       	adc	r29, r25
    320c:	ce 01       	movw	r24, r28
    320e:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <Spi_SlaveReceiveByte>
    3212:	81 30       	cpi	r24, 0x01	; 1
    3214:	69 f4       	brne	.+26     	; 0x3230 <Spi_SlaveReceivePacket+0x48>
    3216:	98 81       	ld	r25, Y
    3218:	99 23       	and	r25, r25
    321a:	59 f0       	breq	.+22     	; 0x3232 <Spi_SlaveReceivePacket+0x4a>
    321c:	1f 5f       	subi	r17, 0xFF	; 255
    321e:	81 2f       	mov	r24, r17
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	8e 15       	cp	r24, r14
    3224:	9f 05       	cpc	r25, r15
    3226:	78 f3       	brcs	.-34     	; 0x3206 <Spi_SlaveReceivePacket+0x1e>
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	03 c0       	rjmp	.+6      	; 0x3232 <Spi_SlaveReceivePacket+0x4a>
    322c:	86 e0       	ldi	r24, 0x06	; 6
    322e:	01 c0       	rjmp	.+2      	; 0x3232 <Spi_SlaveReceivePacket+0x4a>
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	df 91       	pop	r29
    3234:	cf 91       	pop	r28
    3236:	1f 91       	pop	r17
    3238:	ff 90       	pop	r15
    323a:	ef 90       	pop	r14
    323c:	df 90       	pop	r13
    323e:	cf 90       	pop	r12
    3240:	08 95       	ret

00003242 <__vector_12>:


    3242:	1f 92       	push	r1
    3244:	0f 92       	push	r0
    3246:	0f b6       	in	r0, 0x3f	; 63
    3248:	0f 92       	push	r0
    324a:	11 24       	eor	r1, r1
    324c:	2f 93       	push	r18
    324e:	3f 93       	push	r19
    3250:	4f 93       	push	r20
    3252:	5f 93       	push	r21
    3254:	6f 93       	push	r22
    3256:	7f 93       	push	r23
    3258:	8f 93       	push	r24
    325a:	9f 93       	push	r25
    325c:	af 93       	push	r26
    325e:	bf 93       	push	r27
    3260:	ef 93       	push	r30
    3262:	ff 93       	push	r31
    3264:	e0 91 43 06 	lds	r30, 0x0643	; 0x800643 <SPI_STC_CallBackPtr>
    3268:	f0 91 44 06 	lds	r31, 0x0644	; 0x800644 <SPI_STC_CallBackPtr+0x1>
    326c:	09 95       	icall
    326e:	ff 91       	pop	r31
    3270:	ef 91       	pop	r30
    3272:	bf 91       	pop	r27
    3274:	af 91       	pop	r26
    3276:	9f 91       	pop	r25
    3278:	8f 91       	pop	r24
    327a:	7f 91       	pop	r23
    327c:	6f 91       	pop	r22
    327e:	5f 91       	pop	r21
    3280:	4f 91       	pop	r20
    3282:	3f 91       	pop	r19
    3284:	2f 91       	pop	r18
    3286:	0f 90       	pop	r0
    3288:	0f be       	out	0x3f, r0	; 63
    328a:	0f 90       	pop	r0
    328c:	1f 90       	pop	r1
    328e:	18 95       	reti

00003290 <stringLength>:
	for (s8_loopIndex=length-2; s8_loopIndex>=0; s8_loopIndex--)
	{
		*pu32_Num += (pu8_String[s8_loopIndex]-'0') *digit;
		digit*=10;
	}
}
    3290:	ac 01       	movw	r20, r24
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	01 c0       	rjmp	.+2      	; 0x3298 <stringLength+0x8>
    3296:	8f 5f       	subi	r24, 0xFF	; 255
    3298:	fa 01       	movw	r30, r20
    329a:	e8 0f       	add	r30, r24
    329c:	f1 1d       	adc	r31, r1
    329e:	20 81       	ld	r18, Z
    32a0:	21 11       	cpse	r18, r1
    32a2:	f9 cf       	rjmp	.-14     	; 0x3296 <stringLength+0x6>
    32a4:	8f 5f       	subi	r24, 0xFF	; 255
    32a6:	08 95       	ret

000032a8 <stringCompare>:
    32a8:	ff 92       	push	r15
    32aa:	0f 93       	push	r16
    32ac:	1f 93       	push	r17
    32ae:	cf 93       	push	r28
    32b0:	df 93       	push	r29
    32b2:	8c 01       	movw	r16, r24
    32b4:	eb 01       	movw	r28, r22
    32b6:	0e 94 48 19 	call	0x3290	; 0x3290 <stringLength>
    32ba:	f8 2e       	mov	r15, r24
    32bc:	ce 01       	movw	r24, r28
    32be:	0e 94 48 19 	call	0x3290	; 0x3290 <stringLength>
    32c2:	8f 15       	cp	r24, r15
    32c4:	b8 f0       	brcs	.+46     	; 0x32f4 <stringCompare+0x4c>
    32c6:	f8 16       	cp	r15, r24
    32c8:	b8 f0       	brcs	.+46     	; 0x32f8 <stringCompare+0x50>
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	09 c0       	rjmp	.+18     	; 0x32e0 <stringCompare+0x38>
    32ce:	fe 01       	movw	r30, r28
    32d0:	e8 0f       	add	r30, r24
    32d2:	f9 1f       	adc	r31, r25
    32d4:	80 81       	ld	r24, Z
    32d6:	82 17       	cp	r24, r18
    32d8:	88 f0       	brcs	.+34     	; 0x32fc <stringCompare+0x54>
    32da:	28 17       	cp	r18, r24
    32dc:	88 f0       	brcs	.+34     	; 0x3300 <stringCompare+0x58>
    32de:	3f 5f       	subi	r19, 0xFF	; 255
    32e0:	83 2f       	mov	r24, r19
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	f8 01       	movw	r30, r16
    32e6:	e8 0f       	add	r30, r24
    32e8:	f9 1f       	adc	r31, r25
    32ea:	20 81       	ld	r18, Z
    32ec:	21 11       	cpse	r18, r1
    32ee:	ef cf       	rjmp	.-34     	; 0x32ce <stringCompare+0x26>
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	07 c0       	rjmp	.+14     	; 0x3302 <stringCompare+0x5a>
    32f4:	82 e0       	ldi	r24, 0x02	; 2
    32f6:	05 c0       	rjmp	.+10     	; 0x3302 <stringCompare+0x5a>
    32f8:	83 e0       	ldi	r24, 0x03	; 3
    32fa:	03 c0       	rjmp	.+6      	; 0x3302 <stringCompare+0x5a>
    32fc:	82 e0       	ldi	r24, 0x02	; 2
    32fe:	01 c0       	rjmp	.+2      	; 0x3302 <stringCompare+0x5a>
    3300:	83 e0       	ldi	r24, 0x03	; 3
    3302:	df 91       	pop	r29
    3304:	cf 91       	pop	r28
    3306:	1f 91       	pop	r17
    3308:	0f 91       	pop	r16
    330a:	ff 90       	pop	r15
    330c:	08 95       	ret

0000330e <EmptyString>:
    330e:	ac 01       	movw	r20, r24
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	02 c0       	rjmp	.+4      	; 0x3318 <EmptyString+0xa>
    3314:	9f 5f       	subi	r25, 0xFF	; 255
    3316:	10 82       	st	Z, r1
    3318:	fa 01       	movw	r30, r20
    331a:	e9 0f       	add	r30, r25
    331c:	f1 1d       	adc	r31, r1
    331e:	20 81       	ld	r18, Z
    3320:	21 11       	cpse	r18, r1
    3322:	f8 cf       	rjmp	.-16     	; 0x3314 <EmptyString+0x6>
    3324:	08 95       	ret

00003326 <stringCopy>:
    3326:	dc 01       	movw	r26, r24
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	05 c0       	rjmp	.+10     	; 0x3336 <stringCopy+0x10>
    332c:	fb 01       	movw	r30, r22
    332e:	e2 0f       	add	r30, r18
    3330:	f3 1f       	adc	r31, r19
    3332:	40 83       	st	Z, r20
    3334:	9f 5f       	subi	r25, 0xFF	; 255
    3336:	29 2f       	mov	r18, r25
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	fd 01       	movw	r30, r26
    333c:	e2 0f       	add	r30, r18
    333e:	f3 1f       	adc	r31, r19
    3340:	40 81       	ld	r20, Z
    3342:	41 11       	cpse	r20, r1
    3344:	f3 cf       	rjmp	.-26     	; 0x332c <stringCopy+0x6>
    3346:	08 95       	ret

00003348 <integerToString>:
    3348:	0f 93       	push	r16
    334a:	1f 93       	push	r17
    334c:	cf 93       	push	r28
    334e:	df 93       	push	r29
    3350:	fc 01       	movw	r30, r24
    3352:	8b 01       	movw	r16, r22
    3354:	41 30       	cpi	r20, 0x01	; 1
    3356:	09 f0       	breq	.+2      	; 0x335a <integerToString+0x12>
    3358:	40 c0       	rjmp	.+128    	; 0x33da <integerToString+0x92>
    335a:	c0 e0       	ldi	r28, 0x00	; 0
    335c:	d0 e0       	ldi	r29, 0x00	; 0
    335e:	6a e0       	ldi	r22, 0x0A	; 10
    3360:	70 e0       	ldi	r23, 0x00	; 0
    3362:	0e 94 2a 20 	call	0x4054	; 0x4054 <__divmodhi4>
    3366:	cb 01       	movw	r24, r22
    3368:	00 97       	sbiw	r24, 0x00	; 0
    336a:	11 f0       	breq	.+4      	; 0x3370 <integerToString+0x28>
    336c:	21 96       	adiw	r28, 0x01	; 1
    336e:	f7 cf       	rjmp	.-18     	; 0x335e <integerToString+0x16>
    3370:	de 01       	movw	r26, r28
    3372:	11 96       	adiw	r26, 0x01	; 1
    3374:	a0 0f       	add	r26, r16
    3376:	b1 1f       	adc	r27, r17
    3378:	1c 92       	st	X, r1
    337a:	2d c0       	rjmp	.+90     	; 0x33d6 <integerToString+0x8e>
    337c:	a8 01       	movw	r20, r16
    337e:	4c 0f       	add	r20, r28
    3380:	5d 1f       	adc	r21, r29
    3382:	9f 01       	movw	r18, r30
    3384:	ad ec       	ldi	r26, 0xCD	; 205
    3386:	bc ec       	ldi	r27, 0xCC	; 204
    3388:	0e 94 66 20 	call	0x40cc	; 0x40cc <__umulhisi3>
    338c:	96 95       	lsr	r25
    338e:	87 95       	ror	r24
    3390:	96 95       	lsr	r25
    3392:	87 95       	ror	r24
    3394:	96 95       	lsr	r25
    3396:	87 95       	ror	r24
    3398:	9c 01       	movw	r18, r24
    339a:	22 0f       	add	r18, r18
    339c:	33 1f       	adc	r19, r19
    339e:	88 0f       	add	r24, r24
    33a0:	99 1f       	adc	r25, r25
    33a2:	88 0f       	add	r24, r24
    33a4:	99 1f       	adc	r25, r25
    33a6:	88 0f       	add	r24, r24
    33a8:	99 1f       	adc	r25, r25
    33aa:	82 0f       	add	r24, r18
    33ac:	93 1f       	adc	r25, r19
    33ae:	9f 01       	movw	r18, r30
    33b0:	28 1b       	sub	r18, r24
    33b2:	39 0b       	sbc	r19, r25
    33b4:	c9 01       	movw	r24, r18
    33b6:	80 5d       	subi	r24, 0xD0	; 208
    33b8:	da 01       	movw	r26, r20
    33ba:	8c 93       	st	X, r24
    33bc:	9f 01       	movw	r18, r30
    33be:	ad ec       	ldi	r26, 0xCD	; 205
    33c0:	bc ec       	ldi	r27, 0xCC	; 204
    33c2:	0e 94 66 20 	call	0x40cc	; 0x40cc <__umulhisi3>
    33c6:	fc 01       	movw	r30, r24
    33c8:	f6 95       	lsr	r31
    33ca:	e7 95       	ror	r30
    33cc:	f6 95       	lsr	r31
    33ce:	e7 95       	ror	r30
    33d0:	f6 95       	lsr	r31
    33d2:	e7 95       	ror	r30
    33d4:	21 97       	sbiw	r28, 0x01	; 1
    33d6:	30 97       	sbiw	r30, 0x00	; 0
    33d8:	89 f6       	brne	.-94     	; 0x337c <integerToString+0x34>
    33da:	df 91       	pop	r29
    33dc:	cf 91       	pop	r28
    33de:	1f 91       	pop	r17
    33e0:	0f 91       	pop	r16
    33e2:	08 95       	ret

000033e4 <stringToFloat>:

float32_t stringToFloat(uint8_t* string)
{
    33e4:	8f 92       	push	r8
    33e6:	9f 92       	push	r9
    33e8:	af 92       	push	r10
    33ea:	bf 92       	push	r11
    33ec:	cf 92       	push	r12
    33ee:	df 92       	push	r13
    33f0:	ef 92       	push	r14
    33f2:	ff 92       	push	r15
    33f4:	0f 93       	push	r16
    33f6:	1f 93       	push	r17
    33f8:	cf 93       	push	r28
    33fa:	df 93       	push	r29
    33fc:	ec 01       	movw	r28, r24
	uint8_t strLen = stringLength(string)-1;
    33fe:	0e 94 48 19 	call	0x3290	; 0x3290 <stringLength>
    3402:	0f ef       	ldi	r16, 0xFF	; 255
    3404:	08 0f       	add	r16, r24
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
    3406:	c1 2c       	mov	r12, r1
    3408:	d1 2c       	mov	r13, r1
    340a:	76 01       	movw	r14, r12
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    340c:	10 e0       	ldi	r17, 0x00	; 0
    340e:	1e c0       	rjmp	.+60     	; 0x344c <stringToFloat+0x68>
	{
		if(string[u8_loopIndex] == '.')
    3410:	fe 01       	movw	r30, r28
    3412:	e1 0f       	add	r30, r17
    3414:	f1 1d       	adc	r31, r1
    3416:	60 81       	ld	r22, Z
    3418:	6e 32       	cpi	r22, 0x2E	; 46
    341a:	11 f4       	brne	.+4      	; 0x3420 <stringToFloat+0x3c>
		{
			u8_loopIndex++;
    341c:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    341e:	18 c0       	rjmp	.+48     	; 0x3450 <stringToFloat+0x6c>
		}
		f32_num += string[u8_loopIndex] - '0';
    3420:	70 e0       	ldi	r23, 0x00	; 0
    3422:	60 53       	subi	r22, 0x30	; 48
    3424:	71 09       	sbc	r23, r1
    3426:	07 2e       	mov	r0, r23
    3428:	00 0c       	add	r0, r0
    342a:	88 0b       	sbc	r24, r24
    342c:	99 0b       	sbc	r25, r25
    342e:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <__floatsisf>
    3432:	a7 01       	movw	r20, r14
    3434:	96 01       	movw	r18, r12
    3436:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__addsf3>
		f32_num *= 10;
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	40 e2       	ldi	r20, 0x20	; 32
    3440:	51 e4       	ldi	r21, 0x41	; 65
    3442:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__mulsf3>
    3446:	6b 01       	movw	r12, r22
    3448:	7c 01       	movw	r14, r24
{
	uint8_t strLen = stringLength(string)-1;
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    344a:	1f 5f       	subi	r17, 0xFF	; 255
    344c:	10 17       	cp	r17, r16
    344e:	00 f3       	brcs	.-64     	; 0x3410 <stringToFloat+0x2c>
			break;
		}
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	40 e2       	ldi	r20, 0x20	; 32
    3456:	51 e4       	ldi	r21, 0x41	; 65
    3458:	c7 01       	movw	r24, r14
    345a:	b6 01       	movw	r22, r12
    345c:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__divsf3>
    3460:	4b 01       	movw	r8, r22
    3462:	5c 01       	movw	r10, r24
	f32_digit = 1;
    3464:	0f 2e       	mov	r0, r31
    3466:	c1 2c       	mov	r12, r1
    3468:	d1 2c       	mov	r13, r1
    346a:	f0 e8       	ldi	r31, 0x80	; 128
    346c:	ef 2e       	mov	r14, r31
    346e:	ff e3       	ldi	r31, 0x3F	; 63
    3470:	ff 2e       	mov	r15, r31
    3472:	f0 2d       	mov	r31, r0
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    3474:	24 c0       	rjmp	.+72     	; 0x34be <stringToFloat+0xda>
	{
		f32_digit/=10;
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	40 e2       	ldi	r20, 0x20	; 32
    347c:	51 e4       	ldi	r21, 0x41	; 65
    347e:	c7 01       	movw	r24, r14
    3480:	b6 01       	movw	r22, r12
    3482:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__divsf3>
    3486:	6b 01       	movw	r12, r22
    3488:	7c 01       	movw	r14, r24
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
    348a:	fe 01       	movw	r30, r28
    348c:	e1 0f       	add	r30, r17
    348e:	f1 1d       	adc	r31, r1
    3490:	60 81       	ld	r22, Z
    3492:	70 e0       	ldi	r23, 0x00	; 0
    3494:	60 53       	subi	r22, 0x30	; 48
    3496:	71 09       	sbc	r23, r1
    3498:	07 2e       	mov	r0, r23
    349a:	00 0c       	add	r0, r0
    349c:	88 0b       	sbc	r24, r24
    349e:	99 0b       	sbc	r25, r25
    34a0:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <__floatsisf>
    34a4:	a7 01       	movw	r20, r14
    34a6:	96 01       	movw	r18, r12
    34a8:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__mulsf3>
    34ac:	9b 01       	movw	r18, r22
    34ae:	ac 01       	movw	r20, r24
    34b0:	c5 01       	movw	r24, r10
    34b2:	b4 01       	movw	r22, r8
    34b4:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__addsf3>
    34b8:	4b 01       	movw	r8, r22
    34ba:	5c 01       	movw	r10, r24
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
	f32_digit = 1;
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    34bc:	1f 5f       	subi	r17, 0xFF	; 255
    34be:	10 17       	cp	r17, r16
    34c0:	d0 f2       	brcs	.-76     	; 0x3476 <stringToFloat+0x92>
	{
		f32_digit/=10;
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
	}
	return f32_num;
}
    34c2:	c5 01       	movw	r24, r10
    34c4:	b4 01       	movw	r22, r8
    34c6:	df 91       	pop	r29
    34c8:	cf 91       	pop	r28
    34ca:	1f 91       	pop	r17
    34cc:	0f 91       	pop	r16
    34ce:	ff 90       	pop	r15
    34d0:	ef 90       	pop	r14
    34d2:	df 90       	pop	r13
    34d4:	cf 90       	pop	r12
    34d6:	bf 90       	pop	r11
    34d8:	af 90       	pop	r10
    34da:	9f 90       	pop	r9
    34dc:	8f 90       	pop	r8
    34de:	08 95       	ret

000034e0 <floatToString>:

void floatToString(float32_t f32_num, uint8_t* string)
{
    34e0:	8f 92       	push	r8
    34e2:	9f 92       	push	r9
    34e4:	af 92       	push	r10
    34e6:	bf 92       	push	r11
    34e8:	cf 92       	push	r12
    34ea:	df 92       	push	r13
    34ec:	ef 92       	push	r14
    34ee:	ff 92       	push	r15
    34f0:	0f 93       	push	r16
    34f2:	1f 93       	push	r17
    34f4:	cf 93       	push	r28
    34f6:	df 93       	push	r29
    34f8:	4b 01       	movw	r8, r22
    34fa:	5c 01       	movw	r10, r24
    34fc:	8a 01       	movw	r16, r20
	uint32_t u32_num = (uint32_t)f32_num;
    34fe:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__fixunssfsi>
    3502:	c6 2e       	mov	r12, r22
    3504:	d7 2e       	mov	r13, r23
    3506:	e8 2e       	mov	r14, r24
    3508:	f9 2e       	mov	r15, r25
    350a:	26 2f       	mov	r18, r22
    350c:	37 2f       	mov	r19, r23
    350e:	48 2f       	mov	r20, r24
    3510:	59 2f       	mov	r21, r25
	uint8_t u8_digitCount=0;
    3512:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    3514:	09 c0       	rjmp	.+18     	; 0x3528 <floatToString+0x48>
	{
		u32_num/=10;
    3516:	ca 01       	movw	r24, r20
    3518:	b9 01       	movw	r22, r18
    351a:	2a e0       	ldi	r18, 0x0A	; 10
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	40 e0       	ldi	r20, 0x00	; 0
    3520:	50 e0       	ldi	r21, 0x00	; 0
    3522:	0e 94 3e 20 	call	0x407c	; 0x407c <__udivmodsi4>
		u8_digitCount++;
    3526:	df 5f       	subi	r29, 0xFF	; 255
{
	uint32_t u32_num = (uint32_t)f32_num;
	uint8_t u8_digitCount=0;
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    3528:	21 15       	cp	r18, r1
    352a:	31 05       	cpc	r19, r1
    352c:	41 05       	cpc	r20, r1
    352e:	51 05       	cpc	r21, r1
    3530:	91 f7       	brne	.-28     	; 0x3516 <floatToString+0x36>
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
    3532:	cf ef       	ldi	r28, 0xFF	; 255
    3534:	cd 0f       	add	r28, r29
	while(u32_num !=0)
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
    3536:	6c 2d       	mov	r22, r12
    3538:	7d 2d       	mov	r23, r13
    353a:	8e 2d       	mov	r24, r14
    353c:	9f 2d       	mov	r25, r15
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    353e:	14 c0       	rjmp	.+40     	; 0x3568 <floatToString+0x88>
	{
		temp = (u32_num % 10)+ '0';
    3540:	2a e0       	ldi	r18, 0x0A	; 10
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	40 e0       	ldi	r20, 0x00	; 0
    3546:	50 e0       	ldi	r21, 0x00	; 0
    3548:	0e 94 3e 20 	call	0x407c	; 0x407c <__udivmodsi4>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	c0 96       	adiw	r24, 0x30	; 48
    3552:	a1 1d       	adc	r26, r1
    3554:	b1 1d       	adc	r27, r1
		string[u8_digitCount--] = temp;
    3556:	f8 01       	movw	r30, r16
    3558:	ec 0f       	add	r30, r28
    355a:	f1 1d       	adc	r31, r1
    355c:	80 83       	st	Z, r24
		u32_num /= 10;
    355e:	62 2f       	mov	r22, r18
    3560:	73 2f       	mov	r23, r19
    3562:	84 2f       	mov	r24, r20
    3564:	95 2f       	mov	r25, r21
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
	{
		temp = (u32_num % 10)+ '0';
		string[u8_digitCount--] = temp;
    3566:	c1 50       	subi	r28, 0x01	; 1
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    3568:	61 15       	cp	r22, r1
    356a:	71 05       	cpc	r23, r1
    356c:	81 05       	cpc	r24, r1
    356e:	91 05       	cpc	r25, r1
    3570:	39 f7       	brne	.-50     	; 0x3540 <floatToString+0x60>
		string[u8_digitCount--] = temp;
		u32_num /= 10;

	}
	u32_num = (uint32_t)f32_num;
	f32_num -= u32_num;
    3572:	6c 2d       	mov	r22, r12
    3574:	7d 2d       	mov	r23, r13
    3576:	8e 2d       	mov	r24, r14
    3578:	9f 2d       	mov	r25, r15
    357a:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <__floatunsisf>
    357e:	9b 01       	movw	r18, r22
    3580:	ac 01       	movw	r20, r24
    3582:	c5 01       	movw	r24, r10
    3584:	b4 01       	movw	r22, r8
    3586:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__subsf3>
	u32_num = f32_num*10;
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	40 e2       	ldi	r20, 0x20	; 32
    3590:	51 e4       	ldi	r21, 0x41	; 65
    3592:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__mulsf3>
    3596:	6b 01       	movw	r12, r22
    3598:	7c 01       	movw	r14, r24
    359a:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__fixunssfsi>
	string[u8_indexDot++] = '.';
    359e:	21 e0       	ldi	r18, 0x01	; 1
    35a0:	2d 0f       	add	r18, r29
    35a2:	f8 01       	movw	r30, r16
    35a4:	ed 0f       	add	r30, r29
    35a6:	f1 1d       	adc	r31, r1
    35a8:	3e e2       	ldi	r19, 0x2E	; 46
    35aa:	30 83       	st	Z, r19
	string[u8_indexDot++] = u32_num + '0';
    35ac:	de 5f       	subi	r29, 0xFE	; 254
    35ae:	f8 01       	movw	r30, r16
    35b0:	e2 0f       	add	r30, r18
    35b2:	f1 1d       	adc	r31, r1
    35b4:	20 e3       	ldi	r18, 0x30	; 48
    35b6:	26 0f       	add	r18, r22
    35b8:	20 83       	st	Z, r18
	f32_num *=10;
	f32_num -= u32_num;
    35ba:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <__floatunsisf>
    35be:	9b 01       	movw	r18, r22
    35c0:	ac 01       	movw	r20, r24
    35c2:	c7 01       	movw	r24, r14
    35c4:	b6 01       	movw	r22, r12
    35c6:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__subsf3>
	u32_num = f32_num*10;
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	40 e2       	ldi	r20, 0x20	; 32
    35d0:	51 e4       	ldi	r21, 0x41	; 65
    35d2:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__mulsf3>
    35d6:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__fixunssfsi>
	string[u8_indexDot] = u32_num + '0';
    35da:	f8 01       	movw	r30, r16
    35dc:	ed 0f       	add	r30, r29
    35de:	f1 1d       	adc	r31, r1
    35e0:	60 5d       	subi	r22, 0xD0	; 208
    35e2:	60 83       	st	Z, r22
    35e4:	df 91       	pop	r29
    35e6:	cf 91       	pop	r28
    35e8:	1f 91       	pop	r17
    35ea:	0f 91       	pop	r16
    35ec:	ff 90       	pop	r15
    35ee:	ef 90       	pop	r14
    35f0:	df 90       	pop	r13
    35f2:	cf 90       	pop	r12
    35f4:	bf 90       	pop	r11
    35f6:	af 90       	pop	r10
    35f8:	9f 90       	pop	r9
    35fa:	8f 90       	pop	r8
    35fc:	08 95       	ret

000035fe <waveFunction>:
* Parameters (out): None
* Return value: None
* Description: Function to be called inside the timer's ISR.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
void waveFunction(void)
{
    35fe:	0f 93       	push	r16
    3600:	1f 93       	push	r17
	/* Toggle the Pin of the PWM Channel */
	if(Dio_togglePin(SWPwm_Channels[gu8_currentPwmChannel].u8_DioChannelID) != DIO_STATUS_ERROR_OK)
    3602:	e0 91 46 06 	lds	r30, 0x0646	; 0x800646 <gu8_currentPwmChannel>
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	ee 0f       	add	r30, r30
    360a:	ff 1f       	adc	r31, r31
    360c:	eb 53       	subi	r30, 0x3B	; 59
    360e:	fa 4f       	sbci	r31, 0xFA	; 250
    3610:	80 81       	ld	r24, Z
    3612:	0e 94 a1 13 	call	0x2742	; 0x2742 <Dio_togglePin>
    3616:	81 30       	cpi	r24, 0x01	; 1
    3618:	09 f0       	breq	.+2      	; 0x361c <waveFunction+0x1e>
    361a:	76 c0       	rjmp	.+236    	; 0x3708 <waveFunction+0x10a>
		return;
	/* Check if the PWM Channel is still in Running State */
	if (gstr_ChannelsData[gu8_currentPwmChannel].enuChannelState == SWPWM_RUNNING)
    361c:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <gu8_currentPwmChannel>
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	9c 01       	movw	r18, r24
    3624:	22 0f       	add	r18, r18
    3626:	33 1f       	adc	r19, r19
    3628:	f9 01       	movw	r30, r18
    362a:	ee 0f       	add	r30, r30
    362c:	ff 1f       	adc	r31, r31
    362e:	ee 0f       	add	r30, r30
    3630:	ff 1f       	adc	r31, r31
    3632:	ee 0f       	add	r30, r30
    3634:	ff 1f       	adc	r31, r31
    3636:	e2 1b       	sub	r30, r18
    3638:	f3 0b       	sbc	r31, r19
    363a:	e9 5b       	subi	r30, 0xB9	; 185
    363c:	f9 4f       	sbci	r31, 0xF9	; 249
    363e:	25 85       	ldd	r18, Z+13	; 0x0d
    3640:	22 30       	cpi	r18, 0x02	; 2
    3642:	09 f0       	breq	.+2      	; 0x3646 <waveFunction+0x48>
    3644:	61 c0       	rjmp	.+194    	; 0x3708 <waveFunction+0x10a>
	{
		/* Start the Timer again with the new ticks assigned */
		if(GptStart_aSync(SWPwm_Channels[gu8_currentPwmChannel].u8_GptChannelID,\
    3646:	88 0f       	add	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	fc 01       	movw	r30, r24
    364c:	ee 0f       	add	r30, r30
    364e:	ff 1f       	adc	r31, r31
    3650:	ee 0f       	add	r30, r30
    3652:	ff 1f       	adc	r31, r31
    3654:	ee 0f       	add	r30, r30
    3656:	ff 1f       	adc	r31, r31
    3658:	e8 1b       	sub	r30, r24
    365a:	f9 0b       	sbc	r31, r25
    365c:	e9 5b       	subi	r30, 0xB9	; 185
    365e:	f9 4f       	sbci	r31, 0xF9	; 249
    3660:	41 85       	ldd	r20, Z+9	; 0x09
    3662:	52 85       	ldd	r21, Z+10	; 0x0a
    3664:	63 85       	ldd	r22, Z+11	; 0x0b
    3666:	74 85       	ldd	r23, Z+12	; 0x0c
    3668:	fc 01       	movw	r30, r24
    366a:	eb 53       	subi	r30, 0x3B	; 59
    366c:	fa 4f       	sbci	r31, 0xFA	; 250
    366e:	2f ef       	ldi	r18, 0xFF	; 255
    3670:	3a e1       	ldi	r19, 0x1A	; 26
    3672:	81 81       	ldd	r24, Z+1	; 0x01
    3674:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <GptStart_aSync>
    3678:	81 30       	cpi	r24, 0x01	; 1
    367a:	09 f0       	breq	.+2      	; 0x367e <waveFunction+0x80>
    367c:	45 c0       	rjmp	.+138    	; 0x3708 <waveFunction+0x10a>
		                  gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks,\
						   waveFunction) != GPT_STATUS_ERROR_OK)	return;
		
		/* Replace the next ticks to be counted between ONTicks and OFFTicks*/
		if(gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks == gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks)
    367e:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <gu8_currentPwmChannel>
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	9c 01       	movw	r18, r24
    3686:	22 0f       	add	r18, r18
    3688:	33 1f       	adc	r19, r19
    368a:	f9 01       	movw	r30, r18
    368c:	ee 0f       	add	r30, r30
    368e:	ff 1f       	adc	r31, r31
    3690:	ee 0f       	add	r30, r30
    3692:	ff 1f       	adc	r31, r31
    3694:	ee 0f       	add	r30, r30
    3696:	ff 1f       	adc	r31, r31
    3698:	e2 1b       	sub	r30, r18
    369a:	f3 0b       	sbc	r31, r19
    369c:	e9 5b       	subi	r30, 0xB9	; 185
    369e:	f9 4f       	sbci	r31, 0xF9	; 249
    36a0:	01 85       	ldd	r16, Z+9	; 0x09
    36a2:	12 85       	ldd	r17, Z+10	; 0x0a
    36a4:	23 85       	ldd	r18, Z+11	; 0x0b
    36a6:	34 85       	ldd	r19, Z+12	; 0x0c
    36a8:	45 81       	ldd	r20, Z+5	; 0x05
    36aa:	56 81       	ldd	r21, Z+6	; 0x06
    36ac:	67 81       	ldd	r22, Z+7	; 0x07
    36ae:	70 85       	ldd	r23, Z+8	; 0x08
    36b0:	04 17       	cp	r16, r20
    36b2:	15 07       	cpc	r17, r21
    36b4:	26 07       	cpc	r18, r22
    36b6:	37 07       	cpc	r19, r23
    36b8:	b1 f4       	brne	.+44     	; 0x36e6 <waveFunction+0xe8>
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_ONTicks;
    36ba:	88 0f       	add	r24, r24
    36bc:	99 1f       	adc	r25, r25
    36be:	fc 01       	movw	r30, r24
    36c0:	ee 0f       	add	r30, r30
    36c2:	ff 1f       	adc	r31, r31
    36c4:	ee 0f       	add	r30, r30
    36c6:	ff 1f       	adc	r31, r31
    36c8:	ee 0f       	add	r30, r30
    36ca:	ff 1f       	adc	r31, r31
    36cc:	e8 1b       	sub	r30, r24
    36ce:	f9 0b       	sbc	r31, r25
    36d0:	e9 5b       	subi	r30, 0xB9	; 185
    36d2:	f9 4f       	sbci	r31, 0xF9	; 249
    36d4:	81 81       	ldd	r24, Z+1	; 0x01
    36d6:	92 81       	ldd	r25, Z+2	; 0x02
    36d8:	a3 81       	ldd	r26, Z+3	; 0x03
    36da:	b4 81       	ldd	r27, Z+4	; 0x04
    36dc:	81 87       	std	Z+9, r24	; 0x09
    36de:	92 87       	std	Z+10, r25	; 0x0a
    36e0:	a3 87       	std	Z+11, r26	; 0x0b
    36e2:	b4 87       	std	Z+12, r27	; 0x0c
    36e4:	11 c0       	rjmp	.+34     	; 0x3708 <waveFunction+0x10a>
		else
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks;
    36e6:	88 0f       	add	r24, r24
    36e8:	99 1f       	adc	r25, r25
    36ea:	fc 01       	movw	r30, r24
    36ec:	ee 0f       	add	r30, r30
    36ee:	ff 1f       	adc	r31, r31
    36f0:	ee 0f       	add	r30, r30
    36f2:	ff 1f       	adc	r31, r31
    36f4:	ee 0f       	add	r30, r30
    36f6:	ff 1f       	adc	r31, r31
    36f8:	e8 1b       	sub	r30, r24
    36fa:	f9 0b       	sbc	r31, r25
    36fc:	e9 5b       	subi	r30, 0xB9	; 185
    36fe:	f9 4f       	sbci	r31, 0xF9	; 249
    3700:	41 87       	std	Z+9, r20	; 0x09
    3702:	52 87       	std	Z+10, r21	; 0x0a
    3704:	63 87       	std	Z+11, r22	; 0x0b
    3706:	74 87       	std	Z+12, r23	; 0x0c
	}
}
    3708:	1f 91       	pop	r17
    370a:	0f 91       	pop	r16
    370c:	08 95       	ret

0000370e <SWPwm_Init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
    370e:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <genu_SWPwmModStatus>
    3712:	81 30       	cpi	r24, 0x01	; 1
    3714:	91 f0       	breq	.+36     	; 0x373a <SWPwm_Init+0x2c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
    3716:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <GptInit>
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
    371a:	81 30       	cpi	r24, 0x01	; 1
    371c:	11 f0       	breq	.+4      	; 0x3722 <SWPwm_Init+0x14>
    371e:	83 30       	cpi	r24, 0x03	; 3
    3720:	71 f4       	brne	.+28     	; 0x373e <SWPwm_Init+0x30>
		return SWPWM_STATUS_ERROR_NOK;
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    3722:	85 e8       	ldi	r24, 0x85	; 133
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	0e 94 1a 12 	call	0x2434	; 0x2434 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    372a:	81 30       	cpi	r24, 0x01	; 1
    372c:	11 f0       	breq	.+4      	; 0x3732 <SWPwm_Init+0x24>
    372e:	87 30       	cpi	r24, 0x07	; 7
    3730:	41 f4       	brne	.+16     	; 0x3742 <SWPwm_Init+0x34>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <genu_SWPwmModStatus>
	return SWPWM_STATUS_ERROR_OK;
    3738:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_ERROR_NOK;
    373a:	80 e0       	ldi	r24, 0x00	; 0
    373c:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
		return SWPWM_STATUS_ERROR_NOK;
    373e:	80 e0       	ldi	r24, 0x00	; 0
    3740:	08 95       	ret
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return SWPWM_STATUS_ERROR_NOK;
    3742:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
	return SWPWM_STATUS_ERROR_OK;
}
    3744:	08 95       	ret

00003746 <SWPwm_Start>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Start(u8SWPwm_Channel_t u8_ChannelID, uint32_t u32_Freq, uint8_t u8_DutyCycle)
{
    3746:	4f 92       	push	r4
    3748:	5f 92       	push	r5
    374a:	6f 92       	push	r6
    374c:	7f 92       	push	r7
    374e:	8f 92       	push	r8
    3750:	9f 92       	push	r9
    3752:	af 92       	push	r10
    3754:	bf 92       	push	r11
    3756:	cf 92       	push	r12
    3758:	df 92       	push	r13
    375a:	ef 92       	push	r14
    375c:	ff 92       	push	r15
    375e:	0f 93       	push	r16
    3760:	1f 93       	push	r17
    3762:	cf 93       	push	r28
    3764:	df 93       	push	r29
    3766:	00 d0       	rcall	.+0      	; 0x3768 <SWPwm_Start+0x22>
    3768:	00 d0       	rcall	.+0      	; 0x376a <SWPwm_Start+0x24>
    376a:	00 d0       	rcall	.+0      	; 0x376c <SWPwm_Start+0x26>
    376c:	cd b7       	in	r28, 0x3d	; 61
    376e:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    3770:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <genu_SWPwmModStatus>
    3774:	91 30       	cpi	r25, 0x01	; 1
    3776:	09 f0       	breq	.+2      	; 0x377a <SWPwm_Start+0x34>
    3778:	f2 c0       	rjmp	.+484    	; 0x395e <SWPwm_Start+0x218>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    377a:	81 11       	cpse	r24, r1
    377c:	f2 c0       	rjmp	.+484    	; 0x3962 <SWPwm_Start+0x21c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
    377e:	25 36       	cpi	r18, 0x65	; 101
    3780:	08 f0       	brcs	.+2      	; 0x3784 <SWPwm_Start+0x3e>
    3782:	f1 c0       	rjmp	.+482    	; 0x3966 <SWPwm_Start+0x220>
	{
		return SWPWM_STATUS_DC_OUTRANGE;
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
    3784:	e8 2f       	mov	r30, r24
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	fe 83       	std	Y+6, r31	; 0x06
    378a:	ed 83       	std	Y+5, r30	; 0x05
    378c:	df 01       	movw	r26, r30
    378e:	aa 0f       	add	r26, r26
    3790:	bb 1f       	adc	r27, r27
    3792:	fd 01       	movw	r30, r26
    3794:	ee 0f       	add	r30, r30
    3796:	ff 1f       	adc	r31, r31
    3798:	ee 0f       	add	r30, r30
    379a:	ff 1f       	adc	r31, r31
    379c:	ee 0f       	add	r30, r30
    379e:	ff 1f       	adc	r31, r31
    37a0:	ea 1b       	sub	r30, r26
    37a2:	fb 0b       	sbc	r31, r27
    37a4:	e9 5b       	subi	r30, 0xB9	; 185
    37a6:	f9 4f       	sbci	r31, 0xF9	; 249
    37a8:	95 85       	ldd	r25, Z+13	; 0x0d
    37aa:	92 30       	cpi	r25, 0x02	; 2
    37ac:	09 f4       	brne	.+2      	; 0x37b0 <SWPwm_Start+0x6a>
    37ae:	dd c0       	rjmp	.+442    	; 0x396a <SWPwm_Start+0x224>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
    37b0:	22 23       	and	r18, r18
    37b2:	09 f4       	brne	.+2      	; 0x37b6 <SWPwm_Start+0x70>
    37b4:	dc c0       	rjmp	.+440    	; 0x396e <SWPwm_Start+0x228>
    37b6:	12 2f       	mov	r17, r18
    37b8:	c8 2e       	mov	r12, r24
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
	}else if(u8_DutyCycle == 100)
    37ba:	24 36       	cpi	r18, 0x64	; 100
    37bc:	61 f4       	brne	.+24     	; 0x37d6 <SWPwm_Start+0x90>
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    37be:	fd 01       	movw	r30, r26
    37c0:	eb 53       	subi	r30, 0x3B	; 59
    37c2:	fa 4f       	sbci	r31, 0xFA	; 250
    37c4:	61 e0       	ldi	r22, 0x01	; 1
    37c6:	80 81       	ld	r24, Z
    37c8:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    37cc:	81 30       	cpi	r24, 0x01	; 1
    37ce:	09 f4       	brne	.+2      	; 0x37d2 <SWPwm_Start+0x8c>
    37d0:	d0 c0       	rjmp	.+416    	; 0x3972 <SWPwm_Start+0x22c>
			return SWPWM_STATUS_ERROR_NOK;
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	d5 c0       	rjmp	.+426    	; 0x3980 <SWPwm_Start+0x23a>
		return SWPWM_STATUS_ERROR_OK;
	}
	
	float32_t f32_wavePeriodTime = (float32_t)1 / u32_Freq;					/* The Periodic Time for the Generated Pulse in Seconds */
    37d6:	cb 01       	movw	r24, r22
    37d8:	ba 01       	movw	r22, r20
    37da:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <__floatunsisf>
    37de:	9b 01       	movw	r18, r22
    37e0:	ac 01       	movw	r20, r24
    37e2:	60 e0       	ldi	r22, 0x00	; 0
    37e4:	70 e0       	ldi	r23, 0x00	; 0
    37e6:	80 e8       	ldi	r24, 0x80	; 128
    37e8:	9f e3       	ldi	r25, 0x3F	; 63
    37ea:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__divsf3>
    37ee:	4b 01       	movw	r8, r22
    37f0:	5c 01       	movw	r10, r24
	float32_t f32_waveONTime = (f32_wavePeriodTime*u8_DutyCycle) / 100;		/* The HIGH Level Time in Seconds */
    37f2:	61 2f       	mov	r22, r17
    37f4:	70 e0       	ldi	r23, 0x00	; 0
    37f6:	80 e0       	ldi	r24, 0x00	; 0
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <__floatsisf>
    37fe:	a5 01       	movw	r20, r10
    3800:	94 01       	movw	r18, r8
    3802:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__mulsf3>
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	48 ec       	ldi	r20, 0xC8	; 200
    380c:	52 e4       	ldi	r21, 0x42	; 66
    380e:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__divsf3>
    3812:	2b 01       	movw	r4, r22
    3814:	3c 01       	movw	r6, r24
	float32_t f32_waveOFFTime = f32_wavePeriodTime - f32_waveONTime;		/* The LOW Level Time in Seconds */
    3816:	9b 01       	movw	r18, r22
    3818:	ac 01       	movw	r20, r24
    381a:	c5 01       	movw	r24, r10
    381c:	b4 01       	movw	r22, r8
    381e:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__subsf3>
    3822:	4b 01       	movw	r8, r22
    3824:	5c 01       	movw	r10, r24
	float32_t f32_systemPeriodTime = 0.0;
	uint16_t  u16_prescalerValue = 0;
	
	/* Get the Prescaler Value of the used Timer Channel */
	switch(Timers_Configurations[SWPwm_Channels[u8_ChannelID].u8_GptChannelID].enuClock_Src)
    3826:	ed 81       	ldd	r30, Y+5	; 0x05
    3828:	fe 81       	ldd	r31, Y+6	; 0x06
    382a:	ee 0f       	add	r30, r30
    382c:	ff 1f       	adc	r31, r31
    382e:	eb 53       	subi	r30, 0x3B	; 59
    3830:	fa 4f       	sbci	r31, 0xFA	; 250
    3832:	d1 80       	ldd	r13, Z+1	; 0x01
    3834:	8d 2d       	mov	r24, r13
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	fc 01       	movw	r30, r24
    383a:	ee 0f       	add	r30, r30
    383c:	ff 1f       	adc	r31, r31
    383e:	8e 0f       	add	r24, r30
    3840:	9f 1f       	adc	r25, r31
    3842:	fc 01       	movw	r30, r24
    3844:	ee 53       	subi	r30, 0x3E	; 62
    3846:	fa 4f       	sbci	r31, 0xFA	; 250
    3848:	e1 81       	ldd	r30, Z+1	; 0x01
    384a:	8e 2f       	mov	r24, r30
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	fc 01       	movw	r30, r24
    3850:	31 97       	sbiw	r30, 0x01	; 1
    3852:	e7 30       	cpi	r30, 0x07	; 7
    3854:	f1 05       	cpc	r31, r1
    3856:	08 f0       	brcs	.+2      	; 0x385a <SWPwm_Start+0x114>
    3858:	8e c0       	rjmp	.+284    	; 0x3976 <SWPwm_Start+0x230>
    385a:	e6 5d       	subi	r30, 0xD6	; 214
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <__tablejump2__>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
    3862:	61 e0       	ldi	r22, 0x01	; 1
    3864:	70 e0       	ldi	r23, 0x00	; 0
    3866:	0b c0       	rjmp	.+22     	; 0x387e <SWPwm_Start+0x138>
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
			break;
		case GPT_CLK_SRC_PRSCLR_64:
			u16_prescalerValue = 64;
    3868:	60 e4       	ldi	r22, 0x40	; 64
    386a:	70 e0       	ldi	r23, 0x00	; 0
			break;
    386c:	08 c0       	rjmp	.+16     	; 0x387e <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_256:
			u16_prescalerValue = 256;
    386e:	60 e0       	ldi	r22, 0x00	; 0
    3870:	71 e0       	ldi	r23, 0x01	; 1
			break;
    3872:	05 c0       	rjmp	.+10     	; 0x387e <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_1024:
			u16_prescalerValue = 1024;
    3874:	60 e0       	ldi	r22, 0x00	; 0
    3876:	74 e0       	ldi	r23, 0x04	; 4
			break;
    3878:	02 c0       	rjmp	.+4      	; 0x387e <SWPwm_Start+0x138>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
    387a:	68 e0       	ldi	r22, 0x08	; 8
    387c:	70 e0       	ldi	r23, 0x00	; 0
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
	}
	
	f32_systemPeriodTime = (float32_t)u16_prescalerValue/SYS_CLOCK_FREQUENCY;				/* The Controllers Periodic Time in seconds based on the System Clock Frequency */
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <__floatunsisf>
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	34 e2       	ldi	r19, 0x24	; 36
    388a:	44 e7       	ldi	r20, 0x74	; 116
    388c:	59 e4       	ldi	r21, 0x49	; 73
    388e:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__divsf3>
    3892:	69 83       	std	Y+1, r22	; 0x01
    3894:	7a 83       	std	Y+2, r23	; 0x02
    3896:	8b 83       	std	Y+3, r24	; 0x03
    3898:	9c 83       	std	Y+4, r25	; 0x04
	gu8_currentPwmChannel = u8_ChannelID;
    389a:	c0 92 46 06 	sts	0x0646, r12	; 0x800646 <gu8_currentPwmChannel>
	gstr_ChannelsData[u8_ChannelID].u32_ONTicks = f32_waveONTime/f32_systemPeriodTime;		/* The HIGH Level Time in Ticks */
    389e:	9b 01       	movw	r18, r22
    38a0:	ac 01       	movw	r20, r24
    38a2:	c3 01       	movw	r24, r6
    38a4:	b2 01       	movw	r22, r4
    38a6:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__divsf3>
    38aa:	ed 80       	ldd	r14, Y+5	; 0x05
    38ac:	fe 80       	ldd	r15, Y+6	; 0x06
    38ae:	ee 0c       	add	r14, r14
    38b0:	ff 1c       	adc	r15, r15
    38b2:	87 01       	movw	r16, r14
    38b4:	00 0f       	add	r16, r16
    38b6:	11 1f       	adc	r17, r17
    38b8:	00 0f       	add	r16, r16
    38ba:	11 1f       	adc	r17, r17
    38bc:	00 0f       	add	r16, r16
    38be:	11 1f       	adc	r17, r17
    38c0:	0e 19       	sub	r16, r14
    38c2:	1f 09       	sbc	r17, r15
    38c4:	09 5b       	subi	r16, 0xB9	; 185
    38c6:	19 4f       	sbci	r17, 0xF9	; 249
    38c8:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__fixunssfsi>
    38cc:	f8 01       	movw	r30, r16
    38ce:	61 83       	std	Z+1, r22	; 0x01
    38d0:	72 83       	std	Z+2, r23	; 0x02
    38d2:	83 83       	std	Z+3, r24	; 0x03
    38d4:	94 83       	std	Z+4, r25	; 0x04
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
    38d6:	29 81       	ldd	r18, Y+1	; 0x01
    38d8:	3a 81       	ldd	r19, Y+2	; 0x02
    38da:	4b 81       	ldd	r20, Y+3	; 0x03
    38dc:	5c 81       	ldd	r21, Y+4	; 0x04
    38de:	c5 01       	movw	r24, r10
    38e0:	b4 01       	movw	r22, r8
    38e2:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__divsf3>
    38e6:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__fixunssfsi>
    38ea:	f8 01       	movw	r30, r16
    38ec:	65 83       	std	Z+5, r22	; 0x05
    38ee:	76 83       	std	Z+6, r23	; 0x06
    38f0:	87 83       	std	Z+7, r24	; 0x07
    38f2:	90 87       	std	Z+8, r25	; 0x08
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;
    38f4:	c0 82       	st	Z, r12

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    38f6:	f7 01       	movw	r30, r14
    38f8:	eb 53       	subi	r30, 0x3B	; 59
    38fa:	fa 4f       	sbci	r31, 0xFA	; 250
    38fc:	61 e0       	ldi	r22, 0x01	; 1
    38fe:	80 81       	ld	r24, Z
    3900:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    3904:	81 30       	cpi	r24, 0x01	; 1
    3906:	c9 f5       	brne	.+114    	; 0x397a <SWPwm_Start+0x234>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
    3908:	8e e0       	ldi	r24, 0x0E	; 14
    390a:	2d 81       	ldd	r18, Y+5	; 0x05
    390c:	3e 81       	ldd	r19, Y+6	; 0x06
    390e:	82 9f       	mul	r24, r18
    3910:	f0 01       	movw	r30, r0
    3912:	83 9f       	mul	r24, r19
    3914:	f0 0d       	add	r31, r0
    3916:	11 24       	eor	r1, r1
    3918:	e9 5b       	subi	r30, 0xB9	; 185
    391a:	f9 4f       	sbci	r31, 0xF9	; 249
    391c:	41 81       	ldd	r20, Z+1	; 0x01
    391e:	52 81       	ldd	r21, Z+2	; 0x02
    3920:	63 81       	ldd	r22, Z+3	; 0x03
    3922:	74 81       	ldd	r23, Z+4	; 0x04
    3924:	2f ef       	ldi	r18, 0xFF	; 255
    3926:	3a e1       	ldi	r19, 0x1A	; 26
    3928:	8d 2d       	mov	r24, r13
    392a:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <GptStart_aSync>
    392e:	81 30       	cpi	r24, 0x01	; 1
    3930:	31 f5       	brne	.+76     	; 0x397e <SWPwm_Start+0x238>
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
	
	/* Assign the Next Ticks to be counted by the Asynchronous Timer */
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
    3932:	8e e0       	ldi	r24, 0x0E	; 14
    3934:	2d 81       	ldd	r18, Y+5	; 0x05
    3936:	3e 81       	ldd	r19, Y+6	; 0x06
    3938:	82 9f       	mul	r24, r18
    393a:	f0 01       	movw	r30, r0
    393c:	83 9f       	mul	r24, r19
    393e:	f0 0d       	add	r31, r0
    3940:	11 24       	eor	r1, r1
    3942:	e9 5b       	subi	r30, 0xB9	; 185
    3944:	f9 4f       	sbci	r31, 0xF9	; 249
    3946:	85 81       	ldd	r24, Z+5	; 0x05
    3948:	96 81       	ldd	r25, Z+6	; 0x06
    394a:	a7 81       	ldd	r26, Z+7	; 0x07
    394c:	b0 85       	ldd	r27, Z+8	; 0x08
    394e:	81 87       	std	Z+9, r24	; 0x09
    3950:	92 87       	std	Z+10, r25	; 0x0a
    3952:	a3 87       	std	Z+11, r26	; 0x0b
    3954:	b4 87       	std	Z+12, r27	; 0x0c
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;
    3956:	82 e0       	ldi	r24, 0x02	; 2
    3958:	85 87       	std	Z+13, r24	; 0x0d

	return SWPWM_STATUS_ERROR_OK;
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	11 c0       	rjmp	.+34     	; 0x3980 <SWPwm_Start+0x23a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    395e:	82 e0       	ldi	r24, 0x02	; 2
    3960:	0f c0       	rjmp	.+30     	; 0x3980 <SWPwm_Start+0x23a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    3962:	83 e0       	ldi	r24, 0x03	; 3
    3964:	0d c0       	rjmp	.+26     	; 0x3980 <SWPwm_Start+0x23a>
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
	{
		return SWPWM_STATUS_DC_OUTRANGE;
    3966:	84 e0       	ldi	r24, 0x04	; 4
    3968:	0b c0       	rjmp	.+22     	; 0x3980 <SWPwm_Start+0x23a>
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    396a:	85 e0       	ldi	r24, 0x05	; 5
    396c:	09 c0       	rjmp	.+18     	; 0x3980 <SWPwm_Start+0x23a>
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	07 c0       	rjmp	.+14     	; 0x3980 <SWPwm_Start+0x23a>
	}else if(u8_DutyCycle == 100)
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return SWPWM_STATUS_ERROR_NOK;
		return SWPWM_STATUS_ERROR_OK;
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	05 c0       	rjmp	.+10     	; 0x3980 <SWPwm_Start+0x23a>
			break;
		case GPT_CLK_SRC_PRSCLR_EXT_RISE:
			u16_prescalerValue = 1;
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	03 c0       	rjmp	.+6      	; 0x3980 <SWPwm_Start+0x23a>
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	01 c0       	rjmp	.+2      	; 0x3980 <SWPwm_Start+0x23a>
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
    397e:	80 e0       	ldi	r24, 0x00	; 0
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;

	return SWPWM_STATUS_ERROR_OK;
}
    3980:	26 96       	adiw	r28, 0x06	; 6
    3982:	0f b6       	in	r0, 0x3f	; 63
    3984:	f8 94       	cli
    3986:	de bf       	out	0x3e, r29	; 62
    3988:	0f be       	out	0x3f, r0	; 63
    398a:	cd bf       	out	0x3d, r28	; 61
    398c:	df 91       	pop	r29
    398e:	cf 91       	pop	r28
    3990:	1f 91       	pop	r17
    3992:	0f 91       	pop	r16
    3994:	ff 90       	pop	r15
    3996:	ef 90       	pop	r14
    3998:	df 90       	pop	r13
    399a:	cf 90       	pop	r12
    399c:	bf 90       	pop	r11
    399e:	af 90       	pop	r10
    39a0:	9f 90       	pop	r9
    39a2:	8f 90       	pop	r8
    39a4:	7f 90       	pop	r7
    39a6:	6f 90       	pop	r6
    39a8:	5f 90       	pop	r5
    39aa:	4f 90       	pop	r4
    39ac:	08 95       	ret

000039ae <SWPwm_Stop>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Stop(u8SWPwm_Channel_t u8_ChannelID)
{
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    39b2:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <genu_SWPwmModStatus>
    39b6:	91 30       	cpi	r25, 0x01	; 1
    39b8:	b1 f5       	brne	.+108    	; 0x3a26 <SWPwm_Stop+0x78>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    39ba:	81 11       	cpse	r24, r1
    39bc:	36 c0       	rjmp	.+108    	; 0x3a2a <SWPwm_Stop+0x7c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
    39be:	c8 2f       	mov	r28, r24
    39c0:	d0 e0       	ldi	r29, 0x00	; 0
    39c2:	ce 01       	movw	r24, r28
    39c4:	88 0f       	add	r24, r24
    39c6:	99 1f       	adc	r25, r25
    39c8:	fc 01       	movw	r30, r24
    39ca:	ee 0f       	add	r30, r30
    39cc:	ff 1f       	adc	r31, r31
    39ce:	ee 0f       	add	r30, r30
    39d0:	ff 1f       	adc	r31, r31
    39d2:	ee 0f       	add	r30, r30
    39d4:	ff 1f       	adc	r31, r31
    39d6:	e8 1b       	sub	r30, r24
    39d8:	f9 0b       	sbc	r31, r25
    39da:	e9 5b       	subi	r30, 0xB9	; 185
    39dc:	f9 4f       	sbci	r31, 0xF9	; 249
    39de:	85 85       	ldd	r24, Z+13	; 0x0d
    39e0:	82 30       	cpi	r24, 0x02	; 2
    39e2:	29 f5       	brne	.+74     	; 0x3a2e <SWPwm_Stop+0x80>
	
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
    39e4:	fe 01       	movw	r30, r28
    39e6:	ee 0f       	add	r30, r30
    39e8:	ff 1f       	adc	r31, r31
    39ea:	eb 53       	subi	r30, 0x3B	; 59
    39ec:	fa 4f       	sbci	r31, 0xFA	; 250
    39ee:	60 e0       	ldi	r22, 0x00	; 0
    39f0:	80 81       	ld	r24, Z
    39f2:	0e 94 08 13 	call	0x2610	; 0x2610 <Dio_writePin>
    39f6:	81 30       	cpi	r24, 0x01	; 1
    39f8:	e1 f4       	brne	.+56     	; 0x3a32 <SWPwm_Stop+0x84>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the State of the PWM Channel to STOPPED */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
    39fa:	8e e0       	ldi	r24, 0x0E	; 14
    39fc:	8c 9f       	mul	r24, r28
    39fe:	f0 01       	movw	r30, r0
    3a00:	8d 9f       	mul	r24, r29
    3a02:	f0 0d       	add	r31, r0
    3a04:	11 24       	eor	r1, r1
    3a06:	e9 5b       	subi	r30, 0xB9	; 185
    3a08:	f9 4f       	sbci	r31, 0xF9	; 249
    3a0a:	83 e0       	ldi	r24, 0x03	; 3
    3a0c:	85 87       	std	Z+13, r24	; 0x0d
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
    3a0e:	fe 01       	movw	r30, r28
    3a10:	ee 0f       	add	r30, r30
    3a12:	ff 1f       	adc	r31, r31
    3a14:	eb 53       	subi	r30, 0x3B	; 59
    3a16:	fa 4f       	sbci	r31, 0xFA	; 250
    3a18:	81 81       	ldd	r24, Z+1	; 0x01
    3a1a:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <GptStop>
    3a1e:	81 30       	cpi	r24, 0x01	; 1
    3a20:	51 f0       	breq	.+20     	; 0x3a36 <SWPwm_Stop+0x88>
		return SWPWM_STATUS_ERROR_NOK;
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	09 c0       	rjmp	.+18     	; 0x3a38 <SWPwm_Stop+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    3a26:	82 e0       	ldi	r24, 0x02	; 2
    3a28:	07 c0       	rjmp	.+14     	; 0x3a38 <SWPwm_Stop+0x8a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    3a2a:	83 e0       	ldi	r24, 0x03	; 3
    3a2c:	05 c0       	rjmp	.+10     	; 0x3a38 <SWPwm_Stop+0x8a>
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    3a2e:	85 e0       	ldi	r24, 0x05	; 5
    3a30:	03 c0       	rjmp	.+6      	; 0x3a38 <SWPwm_Stop+0x8a>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    3a32:	80 e0       	ldi	r24, 0x00	; 0
    3a34:	01 c0       	rjmp	.+2      	; 0x3a38 <SWPwm_Stop+0x8a>
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
	
	return SWPWM_STATUS_ERROR_OK;
    3a36:	81 e0       	ldi	r24, 0x01	; 1
}
    3a38:	df 91       	pop	r29
    3a3a:	cf 91       	pop	r28
    3a3c:	08 95       	ret

00003a3e <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    3a3e:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <u8_Uart_Status>
    3a42:	81 30       	cpi	r24, 0x01	; 1
    3a44:	81 f0       	breq	.+32     	; 0x3a66 <Uart_init+0x28>
    3a46:	10 bc       	out	0x20, r1	; 32
    3a48:	87 e6       	ldi	r24, 0x67	; 103
    3a4a:	89 b9       	out	0x09, r24	; 9
    3a4c:	82 e0       	ldi	r24, 0x02	; 2
    3a4e:	8b b9       	out	0x0b, r24	; 11
    3a50:	88 e1       	ldi	r24, 0x18	; 24
    3a52:	8a b9       	out	0x0a, r24	; 10
    3a54:	80 e8       	ldi	r24, 0x80	; 128
    3a56:	80 bd       	out	0x20, r24	; 32
    3a58:	80 b5       	in	r24, 0x20	; 32
    3a5a:	86 68       	ori	r24, 0x86	; 134
    3a5c:	80 bd       	out	0x20, r24	; 32
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <u8_Uart_Status>
    3a64:	08 95       	ret
    3a66:	87 e0       	ldi	r24, 0x07	; 7
    3a68:	08 95       	ret

00003a6a <Uart_sendByte>:
    3a6a:	90 91 55 06 	lds	r25, 0x0655	; 0x800655 <u8_Uart_Status>
    3a6e:	99 23       	and	r25, r25
    3a70:	29 f0       	breq	.+10     	; 0x3a7c <Uart_sendByte+0x12>
    3a72:	5d 9b       	sbis	0x0b, 5	; 11
    3a74:	fe cf       	rjmp	.-4      	; 0x3a72 <Uart_sendByte+0x8>
    3a76:	8c b9       	out	0x0c, r24	; 12
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	08 95       	ret
    3a7c:	86 e0       	ldi	r24, 0x06	; 6
    3a7e:	08 95       	ret

00003a80 <Uart_sendPacket>:
    3a80:	ef 92       	push	r14
    3a82:	ff 92       	push	r15
    3a84:	0f 93       	push	r16
    3a86:	1f 93       	push	r17
    3a88:	cf 93       	push	r28
    3a8a:	df 93       	push	r29
    3a8c:	20 91 55 06 	lds	r18, 0x0655	; 0x800655 <u8_Uart_Status>
    3a90:	22 23       	and	r18, r18
    3a92:	99 f0       	breq	.+38     	; 0x3aba <Uart_sendPacket+0x3a>
    3a94:	8b 01       	movw	r16, r22
    3a96:	7c 01       	movw	r14, r24
    3a98:	c0 e0       	ldi	r28, 0x00	; 0
    3a9a:	d0 e0       	ldi	r29, 0x00	; 0
    3a9c:	09 c0       	rjmp	.+18     	; 0x3ab0 <Uart_sendPacket+0x30>
    3a9e:	f7 01       	movw	r30, r14
    3aa0:	ec 0f       	add	r30, r28
    3aa2:	fd 1f       	adc	r31, r29
    3aa4:	80 81       	ld	r24, Z
    3aa6:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Uart_sendByte>
    3aaa:	81 30       	cpi	r24, 0x01	; 1
    3aac:	41 f4       	brne	.+16     	; 0x3abe <Uart_sendPacket+0x3e>
    3aae:	21 96       	adiw	r28, 0x01	; 1
    3ab0:	c0 17       	cp	r28, r16
    3ab2:	d1 07       	cpc	r29, r17
    3ab4:	a0 f3       	brcs	.-24     	; 0x3a9e <Uart_sendPacket+0x1e>
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	03 c0       	rjmp	.+6      	; 0x3ac0 <Uart_sendPacket+0x40>
    3aba:	86 e0       	ldi	r24, 0x06	; 6
    3abc:	01 c0       	rjmp	.+2      	; 0x3ac0 <Uart_sendPacket+0x40>
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	df 91       	pop	r29
    3ac2:	cf 91       	pop	r28
    3ac4:	1f 91       	pop	r17
    3ac6:	0f 91       	pop	r16
    3ac8:	ff 90       	pop	r15
    3aca:	ef 90       	pop	r14
    3acc:	08 95       	ret

00003ace <Uart_EnableNotification_RXC>:
    3ace:	9c 01       	movw	r18, r24
    3ad0:	90 91 55 06 	lds	r25, 0x0655	; 0x800655 <u8_Uart_Status>
    3ad4:	99 23       	and	r25, r25
    3ad6:	61 f0       	breq	.+24     	; 0x3af0 <Uart_EnableNotification_RXC+0x22>
    3ad8:	21 15       	cp	r18, r1
    3ada:	31 05       	cpc	r19, r1
    3adc:	59 f0       	breq	.+22     	; 0x3af4 <Uart_EnableNotification_RXC+0x26>
    3ade:	8a b1       	in	r24, 0x0a	; 10
    3ae0:	80 68       	ori	r24, 0x80	; 128
    3ae2:	8a b9       	out	0x0a, r24	; 10
    3ae4:	30 93 59 06 	sts	0x0659, r19	; 0x800659 <Uart_RXC_CallBackPtr+0x1>
    3ae8:	20 93 58 06 	sts	0x0658, r18	; 0x800658 <Uart_RXC_CallBackPtr>
    3aec:	81 e0       	ldi	r24, 0x01	; 1
    3aee:	08 95       	ret
    3af0:	86 e0       	ldi	r24, 0x06	; 6
    3af2:	08 95       	ret
    3af4:	85 e0       	ldi	r24, 0x05	; 5
    3af6:	08 95       	ret

00003af8 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    3af8:	8c b1       	in	r24, 0x0c	; 12
}
    3afa:	08 95       	ret

00003afc <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    3afc:	1f 92       	push	r1
    3afe:	0f 92       	push	r0
    3b00:	0f b6       	in	r0, 0x3f	; 63
    3b02:	0f 92       	push	r0
    3b04:	11 24       	eor	r1, r1
    3b06:	2f 93       	push	r18
    3b08:	3f 93       	push	r19
    3b0a:	4f 93       	push	r20
    3b0c:	5f 93       	push	r21
    3b0e:	6f 93       	push	r22
    3b10:	7f 93       	push	r23
    3b12:	8f 93       	push	r24
    3b14:	9f 93       	push	r25
    3b16:	af 93       	push	r26
    3b18:	bf 93       	push	r27
    3b1a:	ef 93       	push	r30
    3b1c:	ff 93       	push	r31
    3b1e:	e0 91 5a 06 	lds	r30, 0x065A	; 0x80065a <Uart_TXC_CallBackPtr>
    3b22:	f0 91 5b 06 	lds	r31, 0x065B	; 0x80065b <Uart_TXC_CallBackPtr+0x1>
    3b26:	09 95       	icall
    3b28:	ff 91       	pop	r31
    3b2a:	ef 91       	pop	r30
    3b2c:	bf 91       	pop	r27
    3b2e:	af 91       	pop	r26
    3b30:	9f 91       	pop	r25
    3b32:	8f 91       	pop	r24
    3b34:	7f 91       	pop	r23
    3b36:	6f 91       	pop	r22
    3b38:	5f 91       	pop	r21
    3b3a:	4f 91       	pop	r20
    3b3c:	3f 91       	pop	r19
    3b3e:	2f 91       	pop	r18
    3b40:	0f 90       	pop	r0
    3b42:	0f be       	out	0x3f, r0	; 63
    3b44:	0f 90       	pop	r0
    3b46:	1f 90       	pop	r1
    3b48:	18 95       	reti

00003b4a <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    3b4a:	1f 92       	push	r1
    3b4c:	0f 92       	push	r0
    3b4e:	0f b6       	in	r0, 0x3f	; 63
    3b50:	0f 92       	push	r0
    3b52:	11 24       	eor	r1, r1
    3b54:	2f 93       	push	r18
    3b56:	3f 93       	push	r19
    3b58:	4f 93       	push	r20
    3b5a:	5f 93       	push	r21
    3b5c:	6f 93       	push	r22
    3b5e:	7f 93       	push	r23
    3b60:	8f 93       	push	r24
    3b62:	9f 93       	push	r25
    3b64:	af 93       	push	r26
    3b66:	bf 93       	push	r27
    3b68:	ef 93       	push	r30
    3b6a:	ff 93       	push	r31
    3b6c:	e0 91 58 06 	lds	r30, 0x0658	; 0x800658 <Uart_RXC_CallBackPtr>
    3b70:	f0 91 59 06 	lds	r31, 0x0659	; 0x800659 <Uart_RXC_CallBackPtr+0x1>
    3b74:	09 95       	icall
    3b76:	ff 91       	pop	r31
    3b78:	ef 91       	pop	r30
    3b7a:	bf 91       	pop	r27
    3b7c:	af 91       	pop	r26
    3b7e:	9f 91       	pop	r25
    3b80:	8f 91       	pop	r24
    3b82:	7f 91       	pop	r23
    3b84:	6f 91       	pop	r22
    3b86:	5f 91       	pop	r21
    3b88:	4f 91       	pop	r20
    3b8a:	3f 91       	pop	r19
    3b8c:	2f 91       	pop	r18
    3b8e:	0f 90       	pop	r0
    3b90:	0f be       	out	0x3f, r0	; 63
    3b92:	0f 90       	pop	r0
    3b94:	1f 90       	pop	r1
    3b96:	18 95       	reti

00003b98 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    3b98:	1f 92       	push	r1
    3b9a:	0f 92       	push	r0
    3b9c:	0f b6       	in	r0, 0x3f	; 63
    3b9e:	0f 92       	push	r0
    3ba0:	11 24       	eor	r1, r1
    3ba2:	2f 93       	push	r18
    3ba4:	3f 93       	push	r19
    3ba6:	4f 93       	push	r20
    3ba8:	5f 93       	push	r21
    3baa:	6f 93       	push	r22
    3bac:	7f 93       	push	r23
    3bae:	8f 93       	push	r24
    3bb0:	9f 93       	push	r25
    3bb2:	af 93       	push	r26
    3bb4:	bf 93       	push	r27
    3bb6:	ef 93       	push	r30
    3bb8:	ff 93       	push	r31
    3bba:	e0 91 56 06 	lds	r30, 0x0656	; 0x800656 <Uart_UDRE_CallBackPtr>
    3bbe:	f0 91 57 06 	lds	r31, 0x0657	; 0x800657 <Uart_UDRE_CallBackPtr+0x1>
    3bc2:	09 95       	icall
    3bc4:	ff 91       	pop	r31
    3bc6:	ef 91       	pop	r30
    3bc8:	bf 91       	pop	r27
    3bca:	af 91       	pop	r26
    3bcc:	9f 91       	pop	r25
    3bce:	8f 91       	pop	r24
    3bd0:	7f 91       	pop	r23
    3bd2:	6f 91       	pop	r22
    3bd4:	5f 91       	pop	r21
    3bd6:	4f 91       	pop	r20
    3bd8:	3f 91       	pop	r19
    3bda:	2f 91       	pop	r18
    3bdc:	0f 90       	pop	r0
    3bde:	0f be       	out	0x3f, r0	; 63
    3be0:	0f 90       	pop	r0
    3be2:	1f 90       	pop	r1
    3be4:	18 95       	reti

00003be6 <__subsf3>:
    3be6:	50 58       	subi	r21, 0x80	; 128

00003be8 <__addsf3>:
    3be8:	bb 27       	eor	r27, r27
    3bea:	aa 27       	eor	r26, r26
    3bec:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <__addsf3x>
    3bf0:	0c 94 7e 1f 	jmp	0x3efc	; 0x3efc <__fp_round>
    3bf4:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__fp_pscA>
    3bf8:	38 f0       	brcs	.+14     	; 0x3c08 <__addsf3+0x20>
    3bfa:	0e 94 77 1f 	call	0x3eee	; 0x3eee <__fp_pscB>
    3bfe:	20 f0       	brcs	.+8      	; 0x3c08 <__addsf3+0x20>
    3c00:	39 f4       	brne	.+14     	; 0x3c10 <__addsf3+0x28>
    3c02:	9f 3f       	cpi	r25, 0xFF	; 255
    3c04:	19 f4       	brne	.+6      	; 0x3c0c <__addsf3+0x24>
    3c06:	26 f4       	brtc	.+8      	; 0x3c10 <__addsf3+0x28>
    3c08:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <__fp_nan>
    3c0c:	0e f4       	brtc	.+2      	; 0x3c10 <__addsf3+0x28>
    3c0e:	e0 95       	com	r30
    3c10:	e7 fb       	bst	r30, 7
    3c12:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__fp_inf>

00003c16 <__addsf3x>:
    3c16:	e9 2f       	mov	r30, r25
    3c18:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__fp_split3>
    3c1c:	58 f3       	brcs	.-42     	; 0x3bf4 <__addsf3+0xc>
    3c1e:	ba 17       	cp	r27, r26
    3c20:	62 07       	cpc	r22, r18
    3c22:	73 07       	cpc	r23, r19
    3c24:	84 07       	cpc	r24, r20
    3c26:	95 07       	cpc	r25, r21
    3c28:	20 f0       	brcs	.+8      	; 0x3c32 <__addsf3x+0x1c>
    3c2a:	79 f4       	brne	.+30     	; 0x3c4a <__addsf3x+0x34>
    3c2c:	a6 f5       	brtc	.+104    	; 0x3c96 <__addsf3x+0x80>
    3c2e:	0c 94 b1 1f 	jmp	0x3f62	; 0x3f62 <__fp_zero>
    3c32:	0e f4       	brtc	.+2      	; 0x3c36 <__addsf3x+0x20>
    3c34:	e0 95       	com	r30
    3c36:	0b 2e       	mov	r0, r27
    3c38:	ba 2f       	mov	r27, r26
    3c3a:	a0 2d       	mov	r26, r0
    3c3c:	0b 01       	movw	r0, r22
    3c3e:	b9 01       	movw	r22, r18
    3c40:	90 01       	movw	r18, r0
    3c42:	0c 01       	movw	r0, r24
    3c44:	ca 01       	movw	r24, r20
    3c46:	a0 01       	movw	r20, r0
    3c48:	11 24       	eor	r1, r1
    3c4a:	ff 27       	eor	r31, r31
    3c4c:	59 1b       	sub	r21, r25
    3c4e:	99 f0       	breq	.+38     	; 0x3c76 <__addsf3x+0x60>
    3c50:	59 3f       	cpi	r21, 0xF9	; 249
    3c52:	50 f4       	brcc	.+20     	; 0x3c68 <__addsf3x+0x52>
    3c54:	50 3e       	cpi	r21, 0xE0	; 224
    3c56:	68 f1       	brcs	.+90     	; 0x3cb2 <__addsf3x+0x9c>
    3c58:	1a 16       	cp	r1, r26
    3c5a:	f0 40       	sbci	r31, 0x00	; 0
    3c5c:	a2 2f       	mov	r26, r18
    3c5e:	23 2f       	mov	r18, r19
    3c60:	34 2f       	mov	r19, r20
    3c62:	44 27       	eor	r20, r20
    3c64:	58 5f       	subi	r21, 0xF8	; 248
    3c66:	f3 cf       	rjmp	.-26     	; 0x3c4e <__addsf3x+0x38>
    3c68:	46 95       	lsr	r20
    3c6a:	37 95       	ror	r19
    3c6c:	27 95       	ror	r18
    3c6e:	a7 95       	ror	r26
    3c70:	f0 40       	sbci	r31, 0x00	; 0
    3c72:	53 95       	inc	r21
    3c74:	c9 f7       	brne	.-14     	; 0x3c68 <__addsf3x+0x52>
    3c76:	7e f4       	brtc	.+30     	; 0x3c96 <__addsf3x+0x80>
    3c78:	1f 16       	cp	r1, r31
    3c7a:	ba 0b       	sbc	r27, r26
    3c7c:	62 0b       	sbc	r22, r18
    3c7e:	73 0b       	sbc	r23, r19
    3c80:	84 0b       	sbc	r24, r20
    3c82:	ba f0       	brmi	.+46     	; 0x3cb2 <__addsf3x+0x9c>
    3c84:	91 50       	subi	r25, 0x01	; 1
    3c86:	a1 f0       	breq	.+40     	; 0x3cb0 <__addsf3x+0x9a>
    3c88:	ff 0f       	add	r31, r31
    3c8a:	bb 1f       	adc	r27, r27
    3c8c:	66 1f       	adc	r22, r22
    3c8e:	77 1f       	adc	r23, r23
    3c90:	88 1f       	adc	r24, r24
    3c92:	c2 f7       	brpl	.-16     	; 0x3c84 <__addsf3x+0x6e>
    3c94:	0e c0       	rjmp	.+28     	; 0x3cb2 <__addsf3x+0x9c>
    3c96:	ba 0f       	add	r27, r26
    3c98:	62 1f       	adc	r22, r18
    3c9a:	73 1f       	adc	r23, r19
    3c9c:	84 1f       	adc	r24, r20
    3c9e:	48 f4       	brcc	.+18     	; 0x3cb2 <__addsf3x+0x9c>
    3ca0:	87 95       	ror	r24
    3ca2:	77 95       	ror	r23
    3ca4:	67 95       	ror	r22
    3ca6:	b7 95       	ror	r27
    3ca8:	f7 95       	ror	r31
    3caa:	9e 3f       	cpi	r25, 0xFE	; 254
    3cac:	08 f0       	brcs	.+2      	; 0x3cb0 <__addsf3x+0x9a>
    3cae:	b0 cf       	rjmp	.-160    	; 0x3c10 <__addsf3+0x28>
    3cb0:	93 95       	inc	r25
    3cb2:	88 0f       	add	r24, r24
    3cb4:	08 f0       	brcs	.+2      	; 0x3cb8 <__addsf3x+0xa2>
    3cb6:	99 27       	eor	r25, r25
    3cb8:	ee 0f       	add	r30, r30
    3cba:	97 95       	ror	r25
    3cbc:	87 95       	ror	r24
    3cbe:	08 95       	ret

00003cc0 <__cmpsf2>:
    3cc0:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__fp_cmp>
    3cc4:	08 f4       	brcc	.+2      	; 0x3cc8 <__cmpsf2+0x8>
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	08 95       	ret

00003cca <__divsf3>:
    3cca:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__divsf3x>
    3cce:	0c 94 7e 1f 	jmp	0x3efc	; 0x3efc <__fp_round>
    3cd2:	0e 94 77 1f 	call	0x3eee	; 0x3eee <__fp_pscB>
    3cd6:	58 f0       	brcs	.+22     	; 0x3cee <__divsf3+0x24>
    3cd8:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__fp_pscA>
    3cdc:	40 f0       	brcs	.+16     	; 0x3cee <__divsf3+0x24>
    3cde:	29 f4       	brne	.+10     	; 0x3cea <__divsf3+0x20>
    3ce0:	5f 3f       	cpi	r21, 0xFF	; 255
    3ce2:	29 f0       	breq	.+10     	; 0x3cee <__divsf3+0x24>
    3ce4:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__fp_inf>
    3ce8:	51 11       	cpse	r21, r1
    3cea:	0c 94 b2 1f 	jmp	0x3f64	; 0x3f64 <__fp_szero>
    3cee:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <__fp_nan>

00003cf2 <__divsf3x>:
    3cf2:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__fp_split3>
    3cf6:	68 f3       	brcs	.-38     	; 0x3cd2 <__divsf3+0x8>

00003cf8 <__divsf3_pse>:
    3cf8:	99 23       	and	r25, r25
    3cfa:	b1 f3       	breq	.-20     	; 0x3ce8 <__divsf3+0x1e>
    3cfc:	55 23       	and	r21, r21
    3cfe:	91 f3       	breq	.-28     	; 0x3ce4 <__divsf3+0x1a>
    3d00:	95 1b       	sub	r25, r21
    3d02:	55 0b       	sbc	r21, r21
    3d04:	bb 27       	eor	r27, r27
    3d06:	aa 27       	eor	r26, r26
    3d08:	62 17       	cp	r22, r18
    3d0a:	73 07       	cpc	r23, r19
    3d0c:	84 07       	cpc	r24, r20
    3d0e:	38 f0       	brcs	.+14     	; 0x3d1e <__divsf3_pse+0x26>
    3d10:	9f 5f       	subi	r25, 0xFF	; 255
    3d12:	5f 4f       	sbci	r21, 0xFF	; 255
    3d14:	22 0f       	add	r18, r18
    3d16:	33 1f       	adc	r19, r19
    3d18:	44 1f       	adc	r20, r20
    3d1a:	aa 1f       	adc	r26, r26
    3d1c:	a9 f3       	breq	.-22     	; 0x3d08 <__divsf3_pse+0x10>
    3d1e:	35 d0       	rcall	.+106    	; 0x3d8a <__divsf3_pse+0x92>
    3d20:	0e 2e       	mov	r0, r30
    3d22:	3a f0       	brmi	.+14     	; 0x3d32 <__divsf3_pse+0x3a>
    3d24:	e0 e8       	ldi	r30, 0x80	; 128
    3d26:	32 d0       	rcall	.+100    	; 0x3d8c <__divsf3_pse+0x94>
    3d28:	91 50       	subi	r25, 0x01	; 1
    3d2a:	50 40       	sbci	r21, 0x00	; 0
    3d2c:	e6 95       	lsr	r30
    3d2e:	00 1c       	adc	r0, r0
    3d30:	ca f7       	brpl	.-14     	; 0x3d24 <__divsf3_pse+0x2c>
    3d32:	2b d0       	rcall	.+86     	; 0x3d8a <__divsf3_pse+0x92>
    3d34:	fe 2f       	mov	r31, r30
    3d36:	29 d0       	rcall	.+82     	; 0x3d8a <__divsf3_pse+0x92>
    3d38:	66 0f       	add	r22, r22
    3d3a:	77 1f       	adc	r23, r23
    3d3c:	88 1f       	adc	r24, r24
    3d3e:	bb 1f       	adc	r27, r27
    3d40:	26 17       	cp	r18, r22
    3d42:	37 07       	cpc	r19, r23
    3d44:	48 07       	cpc	r20, r24
    3d46:	ab 07       	cpc	r26, r27
    3d48:	b0 e8       	ldi	r27, 0x80	; 128
    3d4a:	09 f0       	breq	.+2      	; 0x3d4e <__divsf3_pse+0x56>
    3d4c:	bb 0b       	sbc	r27, r27
    3d4e:	80 2d       	mov	r24, r0
    3d50:	bf 01       	movw	r22, r30
    3d52:	ff 27       	eor	r31, r31
    3d54:	93 58       	subi	r25, 0x83	; 131
    3d56:	5f 4f       	sbci	r21, 0xFF	; 255
    3d58:	3a f0       	brmi	.+14     	; 0x3d68 <__divsf3_pse+0x70>
    3d5a:	9e 3f       	cpi	r25, 0xFE	; 254
    3d5c:	51 05       	cpc	r21, r1
    3d5e:	78 f0       	brcs	.+30     	; 0x3d7e <__divsf3_pse+0x86>
    3d60:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__fp_inf>
    3d64:	0c 94 b2 1f 	jmp	0x3f64	; 0x3f64 <__fp_szero>
    3d68:	5f 3f       	cpi	r21, 0xFF	; 255
    3d6a:	e4 f3       	brlt	.-8      	; 0x3d64 <__divsf3_pse+0x6c>
    3d6c:	98 3e       	cpi	r25, 0xE8	; 232
    3d6e:	d4 f3       	brlt	.-12     	; 0x3d64 <__divsf3_pse+0x6c>
    3d70:	86 95       	lsr	r24
    3d72:	77 95       	ror	r23
    3d74:	67 95       	ror	r22
    3d76:	b7 95       	ror	r27
    3d78:	f7 95       	ror	r31
    3d7a:	9f 5f       	subi	r25, 0xFF	; 255
    3d7c:	c9 f7       	brne	.-14     	; 0x3d70 <__divsf3_pse+0x78>
    3d7e:	88 0f       	add	r24, r24
    3d80:	91 1d       	adc	r25, r1
    3d82:	96 95       	lsr	r25
    3d84:	87 95       	ror	r24
    3d86:	97 f9       	bld	r25, 7
    3d88:	08 95       	ret
    3d8a:	e1 e0       	ldi	r30, 0x01	; 1
    3d8c:	66 0f       	add	r22, r22
    3d8e:	77 1f       	adc	r23, r23
    3d90:	88 1f       	adc	r24, r24
    3d92:	bb 1f       	adc	r27, r27
    3d94:	62 17       	cp	r22, r18
    3d96:	73 07       	cpc	r23, r19
    3d98:	84 07       	cpc	r24, r20
    3d9a:	ba 07       	cpc	r27, r26
    3d9c:	20 f0       	brcs	.+8      	; 0x3da6 <__divsf3_pse+0xae>
    3d9e:	62 1b       	sub	r22, r18
    3da0:	73 0b       	sbc	r23, r19
    3da2:	84 0b       	sbc	r24, r20
    3da4:	ba 0b       	sbc	r27, r26
    3da6:	ee 1f       	adc	r30, r30
    3da8:	88 f7       	brcc	.-30     	; 0x3d8c <__divsf3_pse+0x94>
    3daa:	e0 95       	com	r30
    3dac:	08 95       	ret

00003dae <__fixunssfsi>:
    3dae:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__fp_splitA>
    3db2:	88 f0       	brcs	.+34     	; 0x3dd6 <__fixunssfsi+0x28>
    3db4:	9f 57       	subi	r25, 0x7F	; 127
    3db6:	98 f0       	brcs	.+38     	; 0x3dde <__fixunssfsi+0x30>
    3db8:	b9 2f       	mov	r27, r25
    3dba:	99 27       	eor	r25, r25
    3dbc:	b7 51       	subi	r27, 0x17	; 23
    3dbe:	b0 f0       	brcs	.+44     	; 0x3dec <__fixunssfsi+0x3e>
    3dc0:	e1 f0       	breq	.+56     	; 0x3dfa <__fixunssfsi+0x4c>
    3dc2:	66 0f       	add	r22, r22
    3dc4:	77 1f       	adc	r23, r23
    3dc6:	88 1f       	adc	r24, r24
    3dc8:	99 1f       	adc	r25, r25
    3dca:	1a f0       	brmi	.+6      	; 0x3dd2 <__fixunssfsi+0x24>
    3dcc:	ba 95       	dec	r27
    3dce:	c9 f7       	brne	.-14     	; 0x3dc2 <__fixunssfsi+0x14>
    3dd0:	14 c0       	rjmp	.+40     	; 0x3dfa <__fixunssfsi+0x4c>
    3dd2:	b1 30       	cpi	r27, 0x01	; 1
    3dd4:	91 f0       	breq	.+36     	; 0x3dfa <__fixunssfsi+0x4c>
    3dd6:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__fp_zero>
    3dda:	b1 e0       	ldi	r27, 0x01	; 1
    3ddc:	08 95       	ret
    3dde:	0c 94 b1 1f 	jmp	0x3f62	; 0x3f62 <__fp_zero>
    3de2:	67 2f       	mov	r22, r23
    3de4:	78 2f       	mov	r23, r24
    3de6:	88 27       	eor	r24, r24
    3de8:	b8 5f       	subi	r27, 0xF8	; 248
    3dea:	39 f0       	breq	.+14     	; 0x3dfa <__fixunssfsi+0x4c>
    3dec:	b9 3f       	cpi	r27, 0xF9	; 249
    3dee:	cc f3       	brlt	.-14     	; 0x3de2 <__fixunssfsi+0x34>
    3df0:	86 95       	lsr	r24
    3df2:	77 95       	ror	r23
    3df4:	67 95       	ror	r22
    3df6:	b3 95       	inc	r27
    3df8:	d9 f7       	brne	.-10     	; 0x3df0 <__fixunssfsi+0x42>
    3dfa:	3e f4       	brtc	.+14     	; 0x3e0a <__fixunssfsi+0x5c>
    3dfc:	90 95       	com	r25
    3dfe:	80 95       	com	r24
    3e00:	70 95       	com	r23
    3e02:	61 95       	neg	r22
    3e04:	7f 4f       	sbci	r23, 0xFF	; 255
    3e06:	8f 4f       	sbci	r24, 0xFF	; 255
    3e08:	9f 4f       	sbci	r25, 0xFF	; 255
    3e0a:	08 95       	ret

00003e0c <__floatunsisf>:
    3e0c:	e8 94       	clt
    3e0e:	09 c0       	rjmp	.+18     	; 0x3e22 <__floatsisf+0x12>

00003e10 <__floatsisf>:
    3e10:	97 fb       	bst	r25, 7
    3e12:	3e f4       	brtc	.+14     	; 0x3e22 <__floatsisf+0x12>
    3e14:	90 95       	com	r25
    3e16:	80 95       	com	r24
    3e18:	70 95       	com	r23
    3e1a:	61 95       	neg	r22
    3e1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e1e:	8f 4f       	sbci	r24, 0xFF	; 255
    3e20:	9f 4f       	sbci	r25, 0xFF	; 255
    3e22:	99 23       	and	r25, r25
    3e24:	a9 f0       	breq	.+42     	; 0x3e50 <__floatsisf+0x40>
    3e26:	f9 2f       	mov	r31, r25
    3e28:	96 e9       	ldi	r25, 0x96	; 150
    3e2a:	bb 27       	eor	r27, r27
    3e2c:	93 95       	inc	r25
    3e2e:	f6 95       	lsr	r31
    3e30:	87 95       	ror	r24
    3e32:	77 95       	ror	r23
    3e34:	67 95       	ror	r22
    3e36:	b7 95       	ror	r27
    3e38:	f1 11       	cpse	r31, r1
    3e3a:	f8 cf       	rjmp	.-16     	; 0x3e2c <__floatsisf+0x1c>
    3e3c:	fa f4       	brpl	.+62     	; 0x3e7c <__floatsisf+0x6c>
    3e3e:	bb 0f       	add	r27, r27
    3e40:	11 f4       	brne	.+4      	; 0x3e46 <__floatsisf+0x36>
    3e42:	60 ff       	sbrs	r22, 0
    3e44:	1b c0       	rjmp	.+54     	; 0x3e7c <__floatsisf+0x6c>
    3e46:	6f 5f       	subi	r22, 0xFF	; 255
    3e48:	7f 4f       	sbci	r23, 0xFF	; 255
    3e4a:	8f 4f       	sbci	r24, 0xFF	; 255
    3e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e4e:	16 c0       	rjmp	.+44     	; 0x3e7c <__floatsisf+0x6c>
    3e50:	88 23       	and	r24, r24
    3e52:	11 f0       	breq	.+4      	; 0x3e58 <__floatsisf+0x48>
    3e54:	96 e9       	ldi	r25, 0x96	; 150
    3e56:	11 c0       	rjmp	.+34     	; 0x3e7a <__floatsisf+0x6a>
    3e58:	77 23       	and	r23, r23
    3e5a:	21 f0       	breq	.+8      	; 0x3e64 <__floatsisf+0x54>
    3e5c:	9e e8       	ldi	r25, 0x8E	; 142
    3e5e:	87 2f       	mov	r24, r23
    3e60:	76 2f       	mov	r23, r22
    3e62:	05 c0       	rjmp	.+10     	; 0x3e6e <__floatsisf+0x5e>
    3e64:	66 23       	and	r22, r22
    3e66:	71 f0       	breq	.+28     	; 0x3e84 <__floatsisf+0x74>
    3e68:	96 e8       	ldi	r25, 0x86	; 134
    3e6a:	86 2f       	mov	r24, r22
    3e6c:	70 e0       	ldi	r23, 0x00	; 0
    3e6e:	60 e0       	ldi	r22, 0x00	; 0
    3e70:	2a f0       	brmi	.+10     	; 0x3e7c <__floatsisf+0x6c>
    3e72:	9a 95       	dec	r25
    3e74:	66 0f       	add	r22, r22
    3e76:	77 1f       	adc	r23, r23
    3e78:	88 1f       	adc	r24, r24
    3e7a:	da f7       	brpl	.-10     	; 0x3e72 <__floatsisf+0x62>
    3e7c:	88 0f       	add	r24, r24
    3e7e:	96 95       	lsr	r25
    3e80:	87 95       	ror	r24
    3e82:	97 f9       	bld	r25, 7
    3e84:	08 95       	ret

00003e86 <__fp_cmp>:
    3e86:	99 0f       	add	r25, r25
    3e88:	00 08       	sbc	r0, r0
    3e8a:	55 0f       	add	r21, r21
    3e8c:	aa 0b       	sbc	r26, r26
    3e8e:	e0 e8       	ldi	r30, 0x80	; 128
    3e90:	fe ef       	ldi	r31, 0xFE	; 254
    3e92:	16 16       	cp	r1, r22
    3e94:	17 06       	cpc	r1, r23
    3e96:	e8 07       	cpc	r30, r24
    3e98:	f9 07       	cpc	r31, r25
    3e9a:	c0 f0       	brcs	.+48     	; 0x3ecc <__fp_cmp+0x46>
    3e9c:	12 16       	cp	r1, r18
    3e9e:	13 06       	cpc	r1, r19
    3ea0:	e4 07       	cpc	r30, r20
    3ea2:	f5 07       	cpc	r31, r21
    3ea4:	98 f0       	brcs	.+38     	; 0x3ecc <__fp_cmp+0x46>
    3ea6:	62 1b       	sub	r22, r18
    3ea8:	73 0b       	sbc	r23, r19
    3eaa:	84 0b       	sbc	r24, r20
    3eac:	95 0b       	sbc	r25, r21
    3eae:	39 f4       	brne	.+14     	; 0x3ebe <__fp_cmp+0x38>
    3eb0:	0a 26       	eor	r0, r26
    3eb2:	61 f0       	breq	.+24     	; 0x3ecc <__fp_cmp+0x46>
    3eb4:	23 2b       	or	r18, r19
    3eb6:	24 2b       	or	r18, r20
    3eb8:	25 2b       	or	r18, r21
    3eba:	21 f4       	brne	.+8      	; 0x3ec4 <__fp_cmp+0x3e>
    3ebc:	08 95       	ret
    3ebe:	0a 26       	eor	r0, r26
    3ec0:	09 f4       	brne	.+2      	; 0x3ec4 <__fp_cmp+0x3e>
    3ec2:	a1 40       	sbci	r26, 0x01	; 1
    3ec4:	a6 95       	lsr	r26
    3ec6:	8f ef       	ldi	r24, 0xFF	; 255
    3ec8:	81 1d       	adc	r24, r1
    3eca:	81 1d       	adc	r24, r1
    3ecc:	08 95       	ret

00003ece <__fp_inf>:
    3ece:	97 f9       	bld	r25, 7
    3ed0:	9f 67       	ori	r25, 0x7F	; 127
    3ed2:	80 e8       	ldi	r24, 0x80	; 128
    3ed4:	70 e0       	ldi	r23, 0x00	; 0
    3ed6:	60 e0       	ldi	r22, 0x00	; 0
    3ed8:	08 95       	ret

00003eda <__fp_nan>:
    3eda:	9f ef       	ldi	r25, 0xFF	; 255
    3edc:	80 ec       	ldi	r24, 0xC0	; 192
    3ede:	08 95       	ret

00003ee0 <__fp_pscA>:
    3ee0:	00 24       	eor	r0, r0
    3ee2:	0a 94       	dec	r0
    3ee4:	16 16       	cp	r1, r22
    3ee6:	17 06       	cpc	r1, r23
    3ee8:	18 06       	cpc	r1, r24
    3eea:	09 06       	cpc	r0, r25
    3eec:	08 95       	ret

00003eee <__fp_pscB>:
    3eee:	00 24       	eor	r0, r0
    3ef0:	0a 94       	dec	r0
    3ef2:	12 16       	cp	r1, r18
    3ef4:	13 06       	cpc	r1, r19
    3ef6:	14 06       	cpc	r1, r20
    3ef8:	05 06       	cpc	r0, r21
    3efa:	08 95       	ret

00003efc <__fp_round>:
    3efc:	09 2e       	mov	r0, r25
    3efe:	03 94       	inc	r0
    3f00:	00 0c       	add	r0, r0
    3f02:	11 f4       	brne	.+4      	; 0x3f08 <__fp_round+0xc>
    3f04:	88 23       	and	r24, r24
    3f06:	52 f0       	brmi	.+20     	; 0x3f1c <__fp_round+0x20>
    3f08:	bb 0f       	add	r27, r27
    3f0a:	40 f4       	brcc	.+16     	; 0x3f1c <__fp_round+0x20>
    3f0c:	bf 2b       	or	r27, r31
    3f0e:	11 f4       	brne	.+4      	; 0x3f14 <__fp_round+0x18>
    3f10:	60 ff       	sbrs	r22, 0
    3f12:	04 c0       	rjmp	.+8      	; 0x3f1c <__fp_round+0x20>
    3f14:	6f 5f       	subi	r22, 0xFF	; 255
    3f16:	7f 4f       	sbci	r23, 0xFF	; 255
    3f18:	8f 4f       	sbci	r24, 0xFF	; 255
    3f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f1c:	08 95       	ret

00003f1e <__fp_split3>:
    3f1e:	57 fd       	sbrc	r21, 7
    3f20:	90 58       	subi	r25, 0x80	; 128
    3f22:	44 0f       	add	r20, r20
    3f24:	55 1f       	adc	r21, r21
    3f26:	59 f0       	breq	.+22     	; 0x3f3e <__fp_splitA+0x10>
    3f28:	5f 3f       	cpi	r21, 0xFF	; 255
    3f2a:	71 f0       	breq	.+28     	; 0x3f48 <__fp_splitA+0x1a>
    3f2c:	47 95       	ror	r20

00003f2e <__fp_splitA>:
    3f2e:	88 0f       	add	r24, r24
    3f30:	97 fb       	bst	r25, 7
    3f32:	99 1f       	adc	r25, r25
    3f34:	61 f0       	breq	.+24     	; 0x3f4e <__fp_splitA+0x20>
    3f36:	9f 3f       	cpi	r25, 0xFF	; 255
    3f38:	79 f0       	breq	.+30     	; 0x3f58 <__fp_splitA+0x2a>
    3f3a:	87 95       	ror	r24
    3f3c:	08 95       	ret
    3f3e:	12 16       	cp	r1, r18
    3f40:	13 06       	cpc	r1, r19
    3f42:	14 06       	cpc	r1, r20
    3f44:	55 1f       	adc	r21, r21
    3f46:	f2 cf       	rjmp	.-28     	; 0x3f2c <__fp_split3+0xe>
    3f48:	46 95       	lsr	r20
    3f4a:	f1 df       	rcall	.-30     	; 0x3f2e <__fp_splitA>
    3f4c:	08 c0       	rjmp	.+16     	; 0x3f5e <__fp_splitA+0x30>
    3f4e:	16 16       	cp	r1, r22
    3f50:	17 06       	cpc	r1, r23
    3f52:	18 06       	cpc	r1, r24
    3f54:	99 1f       	adc	r25, r25
    3f56:	f1 cf       	rjmp	.-30     	; 0x3f3a <__fp_splitA+0xc>
    3f58:	86 95       	lsr	r24
    3f5a:	71 05       	cpc	r23, r1
    3f5c:	61 05       	cpc	r22, r1
    3f5e:	08 94       	sec
    3f60:	08 95       	ret

00003f62 <__fp_zero>:
    3f62:	e8 94       	clt

00003f64 <__fp_szero>:
    3f64:	bb 27       	eor	r27, r27
    3f66:	66 27       	eor	r22, r22
    3f68:	77 27       	eor	r23, r23
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	97 f9       	bld	r25, 7
    3f6e:	08 95       	ret

00003f70 <__gesf2>:
    3f70:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__fp_cmp>
    3f74:	08 f4       	brcc	.+2      	; 0x3f78 <__gesf2+0x8>
    3f76:	8f ef       	ldi	r24, 0xFF	; 255
    3f78:	08 95       	ret

00003f7a <__mulsf3>:
    3f7a:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <__mulsf3x>
    3f7e:	0c 94 7e 1f 	jmp	0x3efc	; 0x3efc <__fp_round>
    3f82:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__fp_pscA>
    3f86:	38 f0       	brcs	.+14     	; 0x3f96 <__mulsf3+0x1c>
    3f88:	0e 94 77 1f 	call	0x3eee	; 0x3eee <__fp_pscB>
    3f8c:	20 f0       	brcs	.+8      	; 0x3f96 <__mulsf3+0x1c>
    3f8e:	95 23       	and	r25, r21
    3f90:	11 f0       	breq	.+4      	; 0x3f96 <__mulsf3+0x1c>
    3f92:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__fp_inf>
    3f96:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <__fp_nan>
    3f9a:	11 24       	eor	r1, r1
    3f9c:	0c 94 b2 1f 	jmp	0x3f64	; 0x3f64 <__fp_szero>

00003fa0 <__mulsf3x>:
    3fa0:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__fp_split3>
    3fa4:	70 f3       	brcs	.-36     	; 0x3f82 <__mulsf3+0x8>

00003fa6 <__mulsf3_pse>:
    3fa6:	95 9f       	mul	r25, r21
    3fa8:	c1 f3       	breq	.-16     	; 0x3f9a <__mulsf3+0x20>
    3faa:	95 0f       	add	r25, r21
    3fac:	50 e0       	ldi	r21, 0x00	; 0
    3fae:	55 1f       	adc	r21, r21
    3fb0:	62 9f       	mul	r22, r18
    3fb2:	f0 01       	movw	r30, r0
    3fb4:	72 9f       	mul	r23, r18
    3fb6:	bb 27       	eor	r27, r27
    3fb8:	f0 0d       	add	r31, r0
    3fba:	b1 1d       	adc	r27, r1
    3fbc:	63 9f       	mul	r22, r19
    3fbe:	aa 27       	eor	r26, r26
    3fc0:	f0 0d       	add	r31, r0
    3fc2:	b1 1d       	adc	r27, r1
    3fc4:	aa 1f       	adc	r26, r26
    3fc6:	64 9f       	mul	r22, r20
    3fc8:	66 27       	eor	r22, r22
    3fca:	b0 0d       	add	r27, r0
    3fcc:	a1 1d       	adc	r26, r1
    3fce:	66 1f       	adc	r22, r22
    3fd0:	82 9f       	mul	r24, r18
    3fd2:	22 27       	eor	r18, r18
    3fd4:	b0 0d       	add	r27, r0
    3fd6:	a1 1d       	adc	r26, r1
    3fd8:	62 1f       	adc	r22, r18
    3fda:	73 9f       	mul	r23, r19
    3fdc:	b0 0d       	add	r27, r0
    3fde:	a1 1d       	adc	r26, r1
    3fe0:	62 1f       	adc	r22, r18
    3fe2:	83 9f       	mul	r24, r19
    3fe4:	a0 0d       	add	r26, r0
    3fe6:	61 1d       	adc	r22, r1
    3fe8:	22 1f       	adc	r18, r18
    3fea:	74 9f       	mul	r23, r20
    3fec:	33 27       	eor	r19, r19
    3fee:	a0 0d       	add	r26, r0
    3ff0:	61 1d       	adc	r22, r1
    3ff2:	23 1f       	adc	r18, r19
    3ff4:	84 9f       	mul	r24, r20
    3ff6:	60 0d       	add	r22, r0
    3ff8:	21 1d       	adc	r18, r1
    3ffa:	82 2f       	mov	r24, r18
    3ffc:	76 2f       	mov	r23, r22
    3ffe:	6a 2f       	mov	r22, r26
    4000:	11 24       	eor	r1, r1
    4002:	9f 57       	subi	r25, 0x7F	; 127
    4004:	50 40       	sbci	r21, 0x00	; 0
    4006:	9a f0       	brmi	.+38     	; 0x402e <__mulsf3_pse+0x88>
    4008:	f1 f0       	breq	.+60     	; 0x4046 <__mulsf3_pse+0xa0>
    400a:	88 23       	and	r24, r24
    400c:	4a f0       	brmi	.+18     	; 0x4020 <__mulsf3_pse+0x7a>
    400e:	ee 0f       	add	r30, r30
    4010:	ff 1f       	adc	r31, r31
    4012:	bb 1f       	adc	r27, r27
    4014:	66 1f       	adc	r22, r22
    4016:	77 1f       	adc	r23, r23
    4018:	88 1f       	adc	r24, r24
    401a:	91 50       	subi	r25, 0x01	; 1
    401c:	50 40       	sbci	r21, 0x00	; 0
    401e:	a9 f7       	brne	.-22     	; 0x400a <__mulsf3_pse+0x64>
    4020:	9e 3f       	cpi	r25, 0xFE	; 254
    4022:	51 05       	cpc	r21, r1
    4024:	80 f0       	brcs	.+32     	; 0x4046 <__mulsf3_pse+0xa0>
    4026:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__fp_inf>
    402a:	0c 94 b2 1f 	jmp	0x3f64	; 0x3f64 <__fp_szero>
    402e:	5f 3f       	cpi	r21, 0xFF	; 255
    4030:	e4 f3       	brlt	.-8      	; 0x402a <__mulsf3_pse+0x84>
    4032:	98 3e       	cpi	r25, 0xE8	; 232
    4034:	d4 f3       	brlt	.-12     	; 0x402a <__mulsf3_pse+0x84>
    4036:	86 95       	lsr	r24
    4038:	77 95       	ror	r23
    403a:	67 95       	ror	r22
    403c:	b7 95       	ror	r27
    403e:	f7 95       	ror	r31
    4040:	e7 95       	ror	r30
    4042:	9f 5f       	subi	r25, 0xFF	; 255
    4044:	c1 f7       	brne	.-16     	; 0x4036 <__mulsf3_pse+0x90>
    4046:	fe 2b       	or	r31, r30
    4048:	88 0f       	add	r24, r24
    404a:	91 1d       	adc	r25, r1
    404c:	96 95       	lsr	r25
    404e:	87 95       	ror	r24
    4050:	97 f9       	bld	r25, 7
    4052:	08 95       	ret

00004054 <__divmodhi4>:
    4054:	97 fb       	bst	r25, 7
    4056:	07 2e       	mov	r0, r23
    4058:	16 f4       	brtc	.+4      	; 0x405e <__divmodhi4+0xa>
    405a:	00 94       	com	r0
    405c:	07 d0       	rcall	.+14     	; 0x406c <__divmodhi4_neg1>
    405e:	77 fd       	sbrc	r23, 7
    4060:	09 d0       	rcall	.+18     	; 0x4074 <__divmodhi4_neg2>
    4062:	0e 94 8a 20 	call	0x4114	; 0x4114 <__udivmodhi4>
    4066:	07 fc       	sbrc	r0, 7
    4068:	05 d0       	rcall	.+10     	; 0x4074 <__divmodhi4_neg2>
    406a:	3e f4       	brtc	.+14     	; 0x407a <__divmodhi4_exit>

0000406c <__divmodhi4_neg1>:
    406c:	90 95       	com	r25
    406e:	81 95       	neg	r24
    4070:	9f 4f       	sbci	r25, 0xFF	; 255
    4072:	08 95       	ret

00004074 <__divmodhi4_neg2>:
    4074:	70 95       	com	r23
    4076:	61 95       	neg	r22
    4078:	7f 4f       	sbci	r23, 0xFF	; 255

0000407a <__divmodhi4_exit>:
    407a:	08 95       	ret

0000407c <__udivmodsi4>:
    407c:	a1 e2       	ldi	r26, 0x21	; 33
    407e:	1a 2e       	mov	r1, r26
    4080:	aa 1b       	sub	r26, r26
    4082:	bb 1b       	sub	r27, r27
    4084:	fd 01       	movw	r30, r26
    4086:	0d c0       	rjmp	.+26     	; 0x40a2 <__udivmodsi4_ep>

00004088 <__udivmodsi4_loop>:
    4088:	aa 1f       	adc	r26, r26
    408a:	bb 1f       	adc	r27, r27
    408c:	ee 1f       	adc	r30, r30
    408e:	ff 1f       	adc	r31, r31
    4090:	a2 17       	cp	r26, r18
    4092:	b3 07       	cpc	r27, r19
    4094:	e4 07       	cpc	r30, r20
    4096:	f5 07       	cpc	r31, r21
    4098:	20 f0       	brcs	.+8      	; 0x40a2 <__udivmodsi4_ep>
    409a:	a2 1b       	sub	r26, r18
    409c:	b3 0b       	sbc	r27, r19
    409e:	e4 0b       	sbc	r30, r20
    40a0:	f5 0b       	sbc	r31, r21

000040a2 <__udivmodsi4_ep>:
    40a2:	66 1f       	adc	r22, r22
    40a4:	77 1f       	adc	r23, r23
    40a6:	88 1f       	adc	r24, r24
    40a8:	99 1f       	adc	r25, r25
    40aa:	1a 94       	dec	r1
    40ac:	69 f7       	brne	.-38     	; 0x4088 <__udivmodsi4_loop>
    40ae:	60 95       	com	r22
    40b0:	70 95       	com	r23
    40b2:	80 95       	com	r24
    40b4:	90 95       	com	r25
    40b6:	9b 01       	movw	r18, r22
    40b8:	ac 01       	movw	r20, r24
    40ba:	bd 01       	movw	r22, r26
    40bc:	cf 01       	movw	r24, r30
    40be:	08 95       	ret

000040c0 <__tablejump2__>:
    40c0:	ee 0f       	add	r30, r30
    40c2:	ff 1f       	adc	r31, r31
    40c4:	05 90       	lpm	r0, Z+
    40c6:	f4 91       	lpm	r31, Z
    40c8:	e0 2d       	mov	r30, r0
    40ca:	09 94       	ijmp

000040cc <__umulhisi3>:
    40cc:	a2 9f       	mul	r26, r18
    40ce:	b0 01       	movw	r22, r0
    40d0:	b3 9f       	mul	r27, r19
    40d2:	c0 01       	movw	r24, r0
    40d4:	a3 9f       	mul	r26, r19
    40d6:	70 0d       	add	r23, r0
    40d8:	81 1d       	adc	r24, r1
    40da:	11 24       	eor	r1, r1
    40dc:	91 1d       	adc	r25, r1
    40de:	b2 9f       	mul	r27, r18
    40e0:	70 0d       	add	r23, r0
    40e2:	81 1d       	adc	r24, r1
    40e4:	11 24       	eor	r1, r1
    40e6:	91 1d       	adc	r25, r1
    40e8:	08 95       	ret

000040ea <__adddi3_s8>:
    40ea:	00 24       	eor	r0, r0
    40ec:	a7 fd       	sbrc	r26, 7
    40ee:	00 94       	com	r0
    40f0:	2a 0f       	add	r18, r26
    40f2:	30 1d       	adc	r19, r0
    40f4:	40 1d       	adc	r20, r0
    40f6:	50 1d       	adc	r21, r0
    40f8:	60 1d       	adc	r22, r0
    40fa:	70 1d       	adc	r23, r0
    40fc:	80 1d       	adc	r24, r0
    40fe:	90 1d       	adc	r25, r0
    4100:	08 95       	ret

00004102 <__cmpdi2>:
    4102:	2a 15       	cp	r18, r10
    4104:	3b 05       	cpc	r19, r11
    4106:	4c 05       	cpc	r20, r12
    4108:	5d 05       	cpc	r21, r13
    410a:	6e 05       	cpc	r22, r14
    410c:	7f 05       	cpc	r23, r15
    410e:	80 07       	cpc	r24, r16
    4110:	91 07       	cpc	r25, r17
    4112:	08 95       	ret

00004114 <__udivmodhi4>:
    4114:	aa 1b       	sub	r26, r26
    4116:	bb 1b       	sub	r27, r27
    4118:	51 e1       	ldi	r21, 0x11	; 17
    411a:	07 c0       	rjmp	.+14     	; 0x412a <__udivmodhi4_ep>

0000411c <__udivmodhi4_loop>:
    411c:	aa 1f       	adc	r26, r26
    411e:	bb 1f       	adc	r27, r27
    4120:	a6 17       	cp	r26, r22
    4122:	b7 07       	cpc	r27, r23
    4124:	10 f0       	brcs	.+4      	; 0x412a <__udivmodhi4_ep>
    4126:	a6 1b       	sub	r26, r22
    4128:	b7 0b       	sbc	r27, r23

0000412a <__udivmodhi4_ep>:
    412a:	88 1f       	adc	r24, r24
    412c:	99 1f       	adc	r25, r25
    412e:	5a 95       	dec	r21
    4130:	a9 f7       	brne	.-22     	; 0x411c <__udivmodhi4_loop>
    4132:	80 95       	com	r24
    4134:	90 95       	com	r25
    4136:	bc 01       	movw	r22, r24
    4138:	cd 01       	movw	r24, r26
    413a:	08 95       	ret

0000413c <_exit>:
    413c:	f8 94       	cli

0000413e <__stop_program>:
    413e:	ff cf       	rjmp	.-2      	; 0x413e <__stop_program>
