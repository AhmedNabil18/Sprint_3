
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003be4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003ac  00800060  00003be4  00003c78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000179  0080040c  0080040c  00004024  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004024  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004054  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006b8  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007039  00000000  00000000  00004748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001dfc  00000000  00000000  0000b781  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004349  00000000  00000000  0000d57d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014b4  00000000  00000000  000118c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002af8  00000000  00000000  00012d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000540d  00000000  00000000  00015874  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000588  00000000  00000000  0001ac81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 07 13 	jmp	0x260e	; 0x260e <__vector_1>
       8:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__vector_2>
       c:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__vector_3>
      10:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__vector_4>
      14:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__vector_5>
      18:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__vector_6>
      1c:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <__vector_7>
      20:	0c 94 40 15 	jmp	0x2a80	; 0x2a80 <__vector_8>
      24:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__vector_9>
      28:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__vector_10>
      2c:	0c 94 87 14 	jmp	0x290e	; 0x290e <__vector_11>
      30:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__vector_12>
      34:	0c 94 19 1b 	jmp	0x3632	; 0x3632 <__vector_13>
      38:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__vector_14>
      3c:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <__vector_15>
      40:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__vector_16>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	a5 19       	sub	r26, r5
      56:	b1 19       	sub	r27, r1
      58:	a8 19       	sub	r26, r8
      5a:	ab 19       	sub	r26, r11
      5c:	ae 19       	sub	r26, r14
      5e:	a5 19       	sub	r26, r5
      60:	a5 19       	sub	r26, r5

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	14 e0       	ldi	r17, 0x04	; 4
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e4 ee       	ldi	r30, 0xE4	; 228
      76:	fb e3       	ldi	r31, 0x3B	; 59
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	ac 30       	cpi	r26, 0x0C	; 12
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	25 e0       	ldi	r18, 0x05	; 5
      86:	ac e0       	ldi	r26, 0x0C	; 12
      88:	b4 e0       	ldi	r27, 0x04	; 4
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a5 38       	cpi	r26, 0x85	; 133
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <main>
      98:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
      a0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <enuCurrentAppStatus>
      a4:	84 30       	cpi	r24, 0x04	; 4
      a6:	09 f4       	brne	.+2      	; 0xaa <App_init+0xa>
      a8:	f8 c0       	rjmp	.+496    	; 0x29a <App_init+0x1fa>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
      aa:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <Eeprom_24_init>
      ae:	81 30       	cpi	r24, 0x01	; 1
      b0:	09 f0       	breq	.+2      	; 0xb4 <App_init+0x14>
      b2:	c2 c0       	rjmp	.+388    	; 0x238 <App_init+0x198>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
      b4:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <Terminal_init>
      b8:	81 30       	cpi	r24, 0x01	; 1
      ba:	09 f0       	breq	.+2      	; 0xbe <App_init+0x1e>
      bc:	bf c0       	rjmp	.+382    	; 0x23c <App_init+0x19c>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
      be:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <Spi_init>
      c2:	81 30       	cpi	r24, 0x01	; 1
      c4:	09 f0       	breq	.+2      	; 0xc8 <App_init+0x28>
      c6:	bc c0       	rjmp	.+376    	; 0x240 <App_init+0x1a0>
		return APP_STATUS_ERROR_NOK;
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
      c8:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <Keypad_init>
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	09 f0       	breq	.+2      	; 0xd2 <App_init+0x32>
      d0:	b9 c0       	rjmp	.+370    	; 0x244 <App_init+0x1a4>
		return APP_STATUS_ERROR_NOK;
	if(LCD_STATUS_ERROR_OK != Lcd_init())
      d2:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Lcd_init>
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	09 f0       	breq	.+2      	; 0xdc <App_init+0x3c>
      da:	b6 c0       	rjmp	.+364    	; 0x248 <App_init+0x1a8>
		return APP_STATUS_ERROR_NOK;
	if(LM35_STATUS_ERROR_OK != LM35_init())
      dc:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <LM35_init>
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	09 f0       	breq	.+2      	; 0xe6 <App_init+0x46>
      e4:	b3 c0       	rjmp	.+358    	; 0x24c <App_init+0x1ac>
		return APP_STATUS_ERROR_NOK;
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
      e6:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Motor_init>
      ea:	81 30       	cpi	r24, 0x01	; 1
      ec:	09 f0       	breq	.+2      	; 0xf0 <App_init+0x50>
      ee:	b0 c0       	rjmp	.+352    	; 0x250 <App_init+0x1b0>
		return APP_STATUS_ERROR_NOK;
	if(BTTN_STATUS_ERROR_OK != Button_init())
      f0:	0e 94 c3 08 	call	0x1186	; 0x1186 <Button_init>
      f4:	81 30       	cpi	r24, 0x01	; 1
      f6:	09 f0       	breq	.+2      	; 0xfa <App_init+0x5a>
      f8:	ad c0       	rjmp	.+346    	; 0x254 <App_init+0x1b4>
//	DIO_PORTC_DIR |= 1<<3;
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
      fa:	82 ef       	ldi	r24, 0xF2	; 242
      fc:	93 e0       	ldi	r25, 0x03	; 3
      fe:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	09 f0       	breq	.+2      	; 0x108 <App_init+0x68>
     106:	a8 c0       	rjmp	.+336    	; 0x258 <App_init+0x1b8>
		return APP_STATUS_ERROR_NOK;
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
     108:	84 ee       	ldi	r24, 0xE4	; 228
     10a:	93 e0       	ldi	r25, 0x03	; 3
     10c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     110:	81 30       	cpi	r24, 0x01	; 1
     112:	09 f0       	breq	.+2      	; 0x116 <App_init+0x76>
     114:	a3 c0       	rjmp	.+326    	; 0x25c <App_init+0x1bc>
		return APP_STATUS_ERROR_NOK;
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
     116:	66 e2       	ldi	r22, 0x26	; 38
     118:	74 e0       	ldi	r23, 0x04	; 4
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 b5 09 	call	0x136a	; 0x136a <Eeprom_24_readByte>
     122:	81 30       	cpi	r24, 0x01	; 1
     124:	09 f0       	breq	.+2      	; 0x128 <App_init+0x88>
     126:	9c c0       	rjmp	.+312    	; 0x260 <App_init+0x1c0>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     128:	2a e0       	ldi	r18, 0x0A	; 10
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	40 e0       	ldi	r20, 0x00	; 0
     12e:	50 e0       	ldi	r21, 0x00	; 0
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	70 e0       	ldi	r23, 0x00	; 0
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 13 10 	call	0x2026	; 0x2026 <Delay_ms>
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
     13c:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <gu8_initData>
     140:	8a 3a       	cpi	r24, 0xAA	; 170
     142:	a1 f1       	breq	.+104    	; 0x1ac <App_init+0x10c>
	{
		gu8_ATMMode = ATM_MODE_ADMIN;
     144:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <gu8_ATMMode>
		
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, ATM_DB_ATM_PIN_VAL,stringLength(ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
     148:	80 e6       	ldi	r24, 0x60	; 96
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <stringLength>
     150:	48 2f       	mov	r20, r24
     152:	50 e0       	ldi	r21, 0x00	; 0
     154:	60 e6       	ldi	r22, 0x60	; 96
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	8b e0       	ldi	r24, 0x0B	; 11
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <Eeprom_24_writePacket>
     160:	81 30       	cpi	r24, 0x01	; 1
     162:	09 f0       	breq	.+2      	; 0x166 <App_init+0xc6>
     164:	7f c0       	rjmp	.+254    	; 0x264 <App_init+0x1c4>
			return APP_STATUS_ERROR_NOK;
		
		if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
     166:	60 e0       	ldi	r22, 0x00	; 0
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     16e:	81 30       	cpi	r24, 0x01	; 1
     170:	09 f0       	breq	.+2      	; 0x174 <App_init+0xd4>
     172:	7a c0       	rjmp	.+244    	; 0x268 <App_init+0x1c8>
			return APP_STATUS_ERROR_OK;
		if(Lcd_printString((uint8_t*)"*******ATM******") != LCD_STATUS_ERROR_OK)
     174:	8c ed       	ldi	r24, 0xDC	; 220
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     17c:	81 30       	cpi	r24, 0x01	; 1
     17e:	09 f0       	breq	.+2      	; 0x182 <App_init+0xe2>
     180:	75 c0       	rjmp	.+234    	; 0x26c <App_init+0x1cc>
			return APP_STATUS_ERROR_NOK;
		if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     188:	81 30       	cpi	r24, 0x01	; 1
     18a:	09 f0       	breq	.+2      	; 0x18e <App_init+0xee>
     18c:	71 c0       	rjmp	.+226    	; 0x270 <App_init+0x1d0>
			return APP_STATUS_ERROR_OK;
		if(Lcd_printString((uint8_t*)"*****LOCKED*****") != LCD_STATUS_ERROR_OK)
     18e:	8d ee       	ldi	r24, 0xED	; 237
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     196:	81 30       	cpi	r24, 0x01	; 1
     198:	09 f0       	breq	.+2      	; 0x19c <App_init+0xfc>
     19a:	6c c0       	rjmp	.+216    	; 0x274 <App_init+0x1d4>
			return APP_STATUS_ERROR_NOK;
		
		if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     19c:	8e ef       	ldi	r24, 0xFE	; 254
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     1a4:	81 30       	cpi	r24, 0x01	; 1
     1a6:	09 f0       	breq	.+2      	; 0x1aa <App_init+0x10a>
     1a8:	67 c0       	rjmp	.+206    	; 0x278 <App_init+0x1d8>
     1aa:	41 c0       	rjmp	.+130    	; 0x22e <App_init+0x18e>
			return APP_STATUS_ERROR_NOK;
	}else
	{//gu8_ATMPin
		gu8_ATMMode = ATM_MODE_USER;
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu8_ATMMode>
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
     1b2:	48 e0       	ldi	r20, 0x08	; 8
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	68 e1       	ldi	r22, 0x18	; 24
     1b8:	74 e0       	ldi	r23, 0x04	; 4
     1ba:	83 e0       	ldi	r24, 0x03	; 3
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 41 0b 	call	0x1682	; 0x1682 <Eeprom_24_readPacket>
     1c2:	81 30       	cpi	r24, 0x01	; 1
     1c4:	09 f0       	breq	.+2      	; 0x1c8 <App_init+0x128>
     1c6:	5a c0       	rjmp	.+180    	; 0x27c <App_init+0x1dc>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     1c8:	65 e2       	ldi	r22, 0x25	; 37
     1ca:	74 e0       	ldi	r23, 0x04	; 4
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 b5 09 	call	0x136a	; 0x136a <Eeprom_24_readByte>
     1d4:	81 30       	cpi	r24, 0x01	; 1
     1d6:	09 f0       	breq	.+2      	; 0x1da <App_init+0x13a>
     1d8:	53 c0       	rjmp	.+166    	; 0x280 <App_init+0x1e0>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
     1da:	45 e0       	ldi	r20, 0x05	; 5
     1dc:	50 e0       	ldi	r21, 0x00	; 0
     1de:	60 e2       	ldi	r22, 0x20	; 32
     1e0:	74 e0       	ldi	r23, 0x04	; 4
     1e2:	8b e0       	ldi	r24, 0x0B	; 11
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 41 0b 	call	0x1682	; 0x1682 <Eeprom_24_readPacket>
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	09 f0       	breq	.+2      	; 0x1f0 <App_init+0x150>
     1ee:	4a c0       	rjmp	.+148    	; 0x284 <App_init+0x1e4>
			return APP_STATUS_ERROR_NOK;
		
		if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     1f8:	81 30       	cpi	r24, 0x01	; 1
     1fa:	09 f0       	breq	.+2      	; 0x1fe <App_init+0x15e>
     1fc:	45 c0       	rjmp	.+138    	; 0x288 <App_init+0x1e8>
			return APP_STATUS_ERROR_OK;
		if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
     1fe:	80 e1       	ldi	r24, 0x10	; 16
     200:	91 e0       	ldi	r25, 0x01	; 1
     202:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	09 f0       	breq	.+2      	; 0x20c <App_init+0x16c>
     20a:	40 c0       	rjmp	.+128    	; 0x28c <App_init+0x1ec>
			return APP_STATUS_ERROR_NOK;
		if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	e9 f5       	brne	.+122    	; 0x290 <App_init+0x1f0>
			return APP_STATUS_ERROR_OK;
		if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
     216:	8e e1       	ldi	r24, 0x1E	; 30
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     21e:	81 30       	cpi	r24, 0x01	; 1
     220:	c9 f5       	brne	.+114    	; 0x294 <App_init+0x1f4>
			return APP_STATUS_ERROR_NOK;
			
		if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     222:	8d e2       	ldi	r24, 0x2D	; 45
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	a9 f5       	brne	.+106    	; 0x298 <App_init+0x1f8>
			return APP_STATUS_ERROR_NOK;
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     22e:	84 e0       	ldi	r24, 0x04	; 4
     230:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <enuCurrentAppStatus>
	return APP_STATUS_ERROR_OK;
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	08 95       	ret
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	08 95       	ret
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	08 95       	ret
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
		return APP_STATUS_ERROR_NOK;
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	08 95       	ret
	if(LCD_STATUS_ERROR_OK != Lcd_init())
		return APP_STATUS_ERROR_NOK;
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	08 95       	ret
	if(LM35_STATUS_ERROR_OK != LM35_init())
		return APP_STATUS_ERROR_NOK;
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	08 95       	ret
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
		return APP_STATUS_ERROR_NOK;
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	08 95       	ret
	if(BTTN_STATUS_ERROR_OK != Button_init())
		return APP_STATUS_ERROR_NOK;
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	08 95       	ret
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	08 95       	ret
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	08 95       	ret
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
	{
		gu8_ATMMode = ATM_MODE_ADMIN;
		
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, ATM_DB_ATM_PIN_VAL,stringLength(ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	08 95       	ret
		
		if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_OK;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	08 95       	ret
		if(Lcd_printString((uint8_t*)"*******ATM******") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	08 95       	ret
		if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_OK;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	08 95       	ret
		if(Lcd_printString((uint8_t*)"*****LOCKED*****") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	08 95       	ret
		
		if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	08 95       	ret
	}else
	{//gu8_ATMPin
		gu8_ATMMode = ATM_MODE_USER;
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	08 95       	ret
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	08 95       	ret
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 95       	ret
		
		if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_OK;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	08 95       	ret
		if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	08 95       	ret
		if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_OK;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	08 95       	ret
		if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	08 95       	ret
			
		if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     298:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     29a:	08 95       	ret

0000029c <AppUSER_checkPan>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	2a 97       	sbiw	r28, 0x0a	; 10
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_clientIndex = 0;
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
     2b2:	fe 01       	movw	r30, r28
     2b4:	31 96       	adiw	r30, 0x01	; 1
     2b6:	8a e0       	ldi	r24, 0x0A	; 10
     2b8:	df 01       	movw	r26, r30
     2ba:	1d 92       	st	X+, r1
     2bc:	8a 95       	dec	r24
     2be:	e9 f7       	brne	.-6      	; 0x2ba <AppUSER_checkPan+0x1e>
	uint8_t u8_panFound = 0;
	for (u8_clientIndex=0; u8_clientIndex<gu8_registeredAccNum; u8_clientIndex++)
     2c0:	10 e0       	ldi	r17, 0x00	; 0
     2c2:	18 c0       	rjmp	.+48     	; 0x2f4 <AppUSER_checkPan+0x58>
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + u8_clientIndex*16;
     2c4:	81 2f       	mov	r24, r17
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	02 96       	adiw	r24, 0x02	; 2
     2ca:	82 95       	swap	r24
     2cc:	80 7f       	andi	r24, 0xF0	; 240
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     2ce:	4a e0       	ldi	r20, 0x0A	; 10
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	be 01       	movw	r22, r28
     2d4:	6f 5f       	subi	r22, 0xFF	; 255
     2d6:	7f 4f       	sbci	r23, 0xFF	; 255
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 41 0b 	call	0x1682	; 0x1682 <Eeprom_24_readPacket>
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	51 f5       	brne	.+84     	; 0x336 <AppUSER_checkPan+0x9a>
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
     2e2:	63 e4       	ldi	r22, 0x43	; 67
     2e4:	74 e0       	ldi	r23, 0x04	; 4
     2e6:	ce 01       	movw	r24, r28
     2e8:	01 96       	adiw	r24, 0x01	; 1
     2ea:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <stringCompare>
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	39 f0       	breq	.+14     	; 0x300 <AppUSER_checkPan+0x64>
{
	uint8_t u8_clientIndex = 0;
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
	for (u8_clientIndex=0; u8_clientIndex<gu8_registeredAccNum; u8_clientIndex++)
     2f2:	1f 5f       	subi	r17, 0xFF	; 255
     2f4:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <gu8_registeredAccNum>
     2f8:	18 17       	cp	r17, r24
     2fa:	20 f3       	brcs	.-56     	; 0x2c4 <AppUSER_checkPan+0x28>
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientIndex = 0;
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <AppUSER_checkPan+0x66>
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + u8_clientIndex*16;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
		{
			u8_panFound = 1;
     300:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}	
	
	if(u8_panFound == 1)
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	d1 f4       	brne	.+52     	; 0x33a <AppUSER_checkPan+0x9e>
	{
			uint8_t u8_clientBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + u8_clientIndex*16;
     306:	81 2f       	mov	r24, r17
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	03 96       	adiw	r24, 0x03	; 3
     30c:	18 2f       	mov	r17, r24
     30e:	12 95       	swap	r17
     310:	10 7f       	andi	r17, 0xF0	; 240
		
			stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
     312:	67 e2       	ldi	r22, 0x27	; 39
     314:	74 e0       	ldi	r23, 0x04	; 4
     316:	ce 01       	movw	r24, r28
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	0e 94 1b 18 	call	0x3036	; 0x3036 <stringCopy>
		
			if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     31e:	49 e0       	ldi	r20, 0x09	; 9
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	61 e3       	ldi	r22, 0x31	; 49
     324:	74 e0       	ldi	r23, 0x04	; 4
     326:	81 2f       	mov	r24, r17
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 41 0b 	call	0x1682	; 0x1682 <Eeprom_24_readPacket>
     32e:	81 30       	cpi	r24, 0x01	; 1
     330:	31 f0       	breq	.+12     	; 0x33e <AppUSER_checkPan+0xa2>
				return APP_STATUS_ERROR_NOK;
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	05 c0       	rjmp	.+10     	; 0x340 <AppUSER_checkPan+0xa4>
	uint8_t u8_panFound = 0;
	for (u8_clientIndex=0; u8_clientIndex<gu8_registeredAccNum; u8_clientIndex++)
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + u8_clientIndex*16;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	03 c0       	rjmp	.+6      	; 0x340 <AppUSER_checkPan+0xa4>
				return APP_STATUS_ERROR_NOK;
			
			return APP_STATUS_PAN_FOUND;
	}

	return APP_STATUS_PAN_NOT_FOUND;
     33a:	8a e0       	ldi	r24, 0x0A	; 10
     33c:	01 c0       	rjmp	.+2      	; 0x340 <AppUSER_checkPan+0xa4>
			stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
		
			if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
			
			return APP_STATUS_PAN_FOUND;
     33e:	89 e0       	ldi	r24, 0x09	; 9
	}

	return APP_STATUS_PAN_NOT_FOUND;
}
     340:	2a 96       	adiw	r28, 0x0a	; 10
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	de bf       	out	0x3e, r29	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	cd bf       	out	0x3d, r28	; 61
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	1f 91       	pop	r17
     352:	08 95       	ret

00000354 <AppUSER_ReportKeypad>:
* Parameters (out): pu8_key - Pointer to variable to hold the button pressed
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the value pressed in the keypad.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_ReportKeypad(uint8_t* pu8_key)
{
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	ec 01       	movw	r28, r24
	static uint8_t u8_index = 0;
	static uint8_t sau8_data[10]={0};
	enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&sau8_data[u8_index]);
     35a:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <u8_index.2191>
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	84 5f       	subi	r24, 0xF4	; 244
     362:	9b 4f       	sbci	r25, 0xFB	; 251
     364:	0e 94 0e 0c 	call	0x181c	; 0x181c <Keypad_readKey>
	
	if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
     368:	86 30       	cpi	r24, 0x06	; 6
     36a:	09 f0       	breq	.+2      	; 0x36e <AppUSER_ReportKeypad+0x1a>
     36c:	61 c0       	rjmp	.+194    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	{
		if(sau8_data[u8_index] == '=')
     36e:	60 91 16 04 	lds	r22, 0x0416	; 0x800416 <u8_index.2191>
     372:	86 2f       	mov	r24, r22
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	fc 01       	movw	r30, r24
     378:	e4 5f       	subi	r30, 0xF4	; 244
     37a:	fb 4f       	sbci	r31, 0xFB	; 251
     37c:	20 81       	ld	r18, Z
     37e:	2d 33       	cpi	r18, 0x3D	; 61
     380:	09 f5       	brne	.+66     	; 0x3c4 <AppUSER_ReportKeypad+0x70>
		{
			sau8_data[u8_index] = '\0';
     382:	fc 01       	movw	r30, r24
     384:	e4 5f       	subi	r30, 0xF4	; 244
     386:	fb 4f       	sbci	r31, 0xFB	; 251
     388:	10 82       	st	Z, r1
			u8_index = 0;
     38a:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <u8_index.2191>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     38e:	66 e0       	ldi	r22, 0x06	; 6
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     396:	81 30       	cpi	r24, 0x01	; 1
     398:	09 f0       	breq	.+2      	; 0x39c <AppUSER_ReportKeypad+0x48>
     39a:	4c c0       	rjmp	.+152    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
				return APP_STATUS_ERROR_NOK;
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
     39c:	88 e3       	ldi	r24, 0x38	; 56
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     3a4:	81 30       	cpi	r24, 0x01	; 1
     3a6:	09 f0       	breq	.+2      	; 0x3aa <AppUSER_ReportKeypad+0x56>
     3a8:	47 c0       	rjmp	.+142    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
				return APP_STATUS_ERROR_NOK;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     3aa:	66 e0       	ldi	r22, 0x06	; 6
     3ac:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     3b0:	81 30       	cpi	r24, 0x01	; 1
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <AppUSER_ReportKeypad+0x62>
     3b4:	43 c0       	rjmp	.+134    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
				return APP_STATUS_ERROR_NOK;
			stringCopy(sau8_data, pu8_key);
     3b6:	be 01       	movw	r22, r28
     3b8:	8c e0       	ldi	r24, 0x0C	; 12
     3ba:	94 e0       	ldi	r25, 0x04	; 4
     3bc:	0e 94 1b 18 	call	0x3036	; 0x3036 <stringCopy>
			return APP_STATUS_KPD_NUM;
     3c0:	87 e0       	ldi	r24, 0x07	; 7
     3c2:	45 c0       	rjmp	.+138    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
		}else if(sau8_data[u8_index] == '-')
     3c4:	2d 32       	cpi	r18, 0x2D	; 45
     3c6:	a9 f4       	brne	.+42     	; 0x3f2 <AppUSER_ReportKeypad+0x9e>
		{
			u8_index--;
     3c8:	ef ef       	ldi	r30, 0xFF	; 255
     3ca:	e6 0f       	add	r30, r22
     3cc:	e0 93 16 04 	sts	0x0416, r30	; 0x800416 <u8_index.2191>
			sau8_data[u8_index] = '\0';
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	e4 5f       	subi	r30, 0xF4	; 244
     3d4:	fb 4f       	sbci	r31, 0xFB	; 251
     3d6:	10 82       	st	Z, r1
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     3d8:	6b 5f       	subi	r22, 0xFB	; 251
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	71 f5       	brne	.+92     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
				return APP_STATUS_ERROR_NOK;
			if(Lcd_printChar(' ') != LCD_STATUS_ERROR_OK)
     3e4:	80 e2       	ldi	r24, 0x20	; 32
     3e6:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <Lcd_printChar>
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	59 f1       	breq	.+86     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
				return APP_STATUS_ERROR_NOK;
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	2e c0       	rjmp	.+92     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
		}else
		{
			if(u8_index!=10)
     3f2:	6a 30       	cpi	r22, 0x0A	; 10
     3f4:	b9 f0       	breq	.+46     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     3f6:	6a 5f       	subi	r22, 0xFA	; 250
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     3fe:	81 30       	cpi	r24, 0x01	; 1
     400:	19 f5       	brne	.+70     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
     402:	e0 91 16 04 	lds	r30, 0x0416	; 0x800416 <u8_index.2191>
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	e4 5f       	subi	r30, 0xF4	; 244
     40a:	fb 4f       	sbci	r31, 0xFB	; 251
     40c:	80 81       	ld	r24, Z
     40e:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <Lcd_printChar>
     412:	81 30       	cpi	r24, 0x01	; 1
     414:	d9 f4       	brne	.+54     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
				return APP_STATUS_ERROR_NOK;
				u8_index++;
     416:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <u8_index.2191>
     41a:	8f 5f       	subi	r24, 0xFF	; 255
     41c:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <u8_index.2191>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
	
	return APP_STATUS_ERROR_OK;
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	15 c0       	rjmp	.+42     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
				if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
				u8_index++;
			}else
			{
				sau8_data[u8_index] = '\0';
     424:	fc 01       	movw	r30, r24
     426:	e4 5f       	subi	r30, 0xF4	; 244
     428:	fb 4f       	sbci	r31, 0xFB	; 251
     42a:	10 82       	st	Z, r1
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
	
	return APP_STATUS_ERROR_OK;
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	0f c0       	rjmp	.+30     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
			}
			
		}
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	0d c0       	rjmp	.+26     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
		if(sau8_data[u8_index] == '=')
		{
			sau8_data[u8_index] = '\0';
			u8_index = 0;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0b c0       	rjmp	.+22     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	09 c0       	rjmp	.+18     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	07 c0       	rjmp	.+14     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
		}else if(sau8_data[u8_index] == '-')
		{
			u8_index--;
			sau8_data[u8_index] = '\0';
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	05 c0       	rjmp	.+10     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
	
	return APP_STATUS_ERROR_OK;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	03 c0       	rjmp	.+6      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
		}else
		{
			if(u8_index!=10)
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	01 c0       	rjmp	.+2      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
				if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     44c:	80 e0       	ldi	r24, 0x00	; 0
	{
		return APP_STATUS_ERROR_OK;
	}
	
	return APP_STATUS_ERROR_OK;
}
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	08 95       	ret

00000454 <AppUSER_startTransaction>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startTransaction(void)
{
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
     45c:	28 97       	sbiw	r28, 0x08	; 8
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_inputKPD[8] = {0};
     468:	fe 01       	movw	r30, r28
     46a:	31 96       	adiw	r30, 0x01	; 1
     46c:	88 e0       	ldi	r24, 0x08	; 8
     46e:	df 01       	movw	r26, r30
     470:	1d 92       	st	X+, r1
     472:	8a 95       	dec	r24
     474:	e9 f7       	brne	.-6      	; 0x470 <AppUSER_startTransaction+0x1c>
	enuApp_Status_t KeypdaStatus = 0;
	while(1)
	{
		EmptyString(au8_inputKPD);
     476:	ce 01       	movw	r24, r28
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	0e 94 0f 18 	call	0x301e	; 0x301e <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     47e:	ce 01       	movw	r24, r28
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	0e 94 aa 01 	call	0x354	; 0x354 <AppUSER_ReportKeypad>
		
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     486:	87 30       	cpi	r24, 0x07	; 7
     488:	09 f0       	breq	.+2      	; 0x48c <AppUSER_startTransaction+0x38>
     48a:	ee c0       	rjmp	.+476    	; 0x668 <AppUSER_startTransaction+0x214>
		{
			Terminal_Out(au8_inputKPD);
     48c:	ce 01       	movw	r24, r28
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
			Terminal_Out(gau8_maxAmount);
     494:	88 e1       	ldi	r24, 0x18	; 24
     496:	94 e0       	ldi	r25, 0x04	; 4
     498:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
			if(stringCompare(gau8_maxAmount, au8_inputKPD) == 3)
     49c:	be 01       	movw	r22, r28
     49e:	6f 5f       	subi	r22, 0xFF	; 255
     4a0:	7f 4f       	sbci	r23, 0xFF	; 255
     4a2:	88 e1       	ldi	r24, 0x18	; 24
     4a4:	94 e0       	ldi	r25, 0x04	; 4
     4a6:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <stringCompare>
     4aa:	83 30       	cpi	r24, 0x03	; 3
     4ac:	c1 f5       	brne	.+112    	; 0x51e <AppUSER_startTransaction+0xca>
			{
				Lcd_clear();
     4ae:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     4ba:	81 30       	cpi	r24, 0x01	; 1
     4bc:	09 f0       	breq	.+2      	; 0x4c0 <AppUSER_startTransaction+0x6c>
     4be:	df c0       	rjmp	.+446    	; 0x67e <AppUSER_startTransaction+0x22a>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Max Amount") != LCD_STATUS_ERROR_OK)
     4c0:	8b e3       	ldi	r24, 0x3B	; 59
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     4c8:	81 30       	cpi	r24, 0x01	; 1
     4ca:	09 f0       	breq	.+2      	; 0x4ce <AppUSER_startTransaction+0x7a>
     4cc:	da c0       	rjmp	.+436    	; 0x682 <AppUSER_startTransaction+0x22e>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     4d4:	81 30       	cpi	r24, 0x01	; 1
     4d6:	09 f0       	breq	.+2      	; 0x4da <AppUSER_startTransaction+0x86>
     4d8:	d6 c0       	rjmp	.+428    	; 0x686 <AppUSER_startTransaction+0x232>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Exceeded") != LCD_STATUS_ERROR_OK)
     4da:	86 e4       	ldi	r24, 0x46	; 70
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     4e2:	81 30       	cpi	r24, 0x01	; 1
     4e4:	09 f0       	breq	.+2      	; 0x4e8 <AppUSER_startTransaction+0x94>
     4e6:	d1 c0       	rjmp	.+418    	; 0x68a <AppUSER_startTransaction+0x236>
				return APP_STATUS_ERROR_NOK;
				Delay_ms(500);
     4e8:	24 ef       	ldi	r18, 0xF4	; 244
     4ea:	31 e0       	ldi	r19, 0x01	; 1
     4ec:	40 e0       	ldi	r20, 0x00	; 0
     4ee:	50 e0       	ldi	r21, 0x00	; 0
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 13 10 	call	0x2026	; 0x2026 <Delay_ms>
				Lcd_clear();
     4fc:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     508:	81 30       	cpi	r24, 0x01	; 1
     50a:	09 f0       	breq	.+2      	; 0x50e <AppUSER_startTransaction+0xba>
     50c:	c0 c0       	rjmp	.+384    	; 0x68e <AppUSER_startTransaction+0x23a>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     50e:	8f e4       	ldi	r24, 0x4F	; 79
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	09 f4       	brne	.+2      	; 0x51c <AppUSER_startTransaction+0xc8>
     51a:	a6 c0       	rjmp	.+332    	; 0x668 <AppUSER_startTransaction+0x214>
     51c:	ba c0       	rjmp	.+372    	; 0x692 <AppUSER_startTransaction+0x23e>
				return APP_STATUS_ERROR_NOK;
			}else
			{
				Lcd_clear();
     51e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     52a:	81 30       	cpi	r24, 0x01	; 1
     52c:	09 f0       	breq	.+2      	; 0x530 <AppUSER_startTransaction+0xdc>
     52e:	b3 c0       	rjmp	.+358    	; 0x696 <AppUSER_startTransaction+0x242>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Please Wait") != LCD_STATUS_ERROR_OK)
     530:	8c e5       	ldi	r24, 0x5C	; 92
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     538:	81 30       	cpi	r24, 0x01	; 1
     53a:	09 f0       	breq	.+2      	; 0x53e <AppUSER_startTransaction+0xea>
     53c:	ae c0       	rjmp	.+348    	; 0x69a <AppUSER_startTransaction+0x246>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     544:	81 30       	cpi	r24, 0x01	; 1
     546:	09 f0       	breq	.+2      	; 0x54a <AppUSER_startTransaction+0xf6>
     548:	aa c0       	rjmp	.+340    	; 0x69e <AppUSER_startTransaction+0x24a>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Processing...") != LCD_STATUS_ERROR_OK)
     54a:	88 e6       	ldi	r24, 0x68	; 104
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     552:	81 30       	cpi	r24, 0x01	; 1
     554:	09 f0       	breq	.+2      	; 0x558 <AppUSER_startTransaction+0x104>
     556:	a5 c0       	rjmp	.+330    	; 0x6a2 <AppUSER_startTransaction+0x24e>
				return APP_STATUS_ERROR_NOK;
				if(stringCompare(gstr_clientdata.au8_Balance, au8_inputKPD) == 3)
     558:	be 01       	movw	r22, r28
     55a:	6f 5f       	subi	r22, 0xFF	; 255
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	81 e3       	ldi	r24, 0x31	; 49
     560:	94 e0       	ldi	r25, 0x04	; 4
     562:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <stringCompare>
     566:	83 30       	cpi	r24, 0x03	; 3
     568:	c1 f5       	brne	.+112    	; 0x5da <AppUSER_startTransaction+0x186>
				{
					Lcd_clear();
     56a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     576:	81 30       	cpi	r24, 0x01	; 1
     578:	09 f0       	breq	.+2      	; 0x57c <AppUSER_startTransaction+0x128>
     57a:	95 c0       	rjmp	.+298    	; 0x6a6 <AppUSER_startTransaction+0x252>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Insufficient") != LCD_STATUS_ERROR_OK)
     57c:	86 e7       	ldi	r24, 0x76	; 118
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     584:	81 30       	cpi	r24, 0x01	; 1
     586:	09 f0       	breq	.+2      	; 0x58a <AppUSER_startTransaction+0x136>
     588:	90 c0       	rjmp	.+288    	; 0x6aa <AppUSER_startTransaction+0x256>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     590:	81 30       	cpi	r24, 0x01	; 1
     592:	09 f0       	breq	.+2      	; 0x596 <AppUSER_startTransaction+0x142>
     594:	8c c0       	rjmp	.+280    	; 0x6ae <AppUSER_startTransaction+0x25a>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Fund") != LCD_STATUS_ERROR_OK)
     596:	83 e8       	ldi	r24, 0x83	; 131
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     59e:	81 30       	cpi	r24, 0x01	; 1
     5a0:	09 f0       	breq	.+2      	; 0x5a4 <AppUSER_startTransaction+0x150>
     5a2:	87 c0       	rjmp	.+270    	; 0x6b2 <AppUSER_startTransaction+0x25e>
						return APP_STATUS_ERROR_NOK;
					Delay_ms(500);
     5a4:	24 ef       	ldi	r18, 0xF4	; 244
     5a6:	31 e0       	ldi	r19, 0x01	; 1
     5a8:	40 e0       	ldi	r20, 0x00	; 0
     5aa:	50 e0       	ldi	r21, 0x00	; 0
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 13 10 	call	0x2026	; 0x2026 <Delay_ms>
					Lcd_clear();
     5b8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	09 f0       	breq	.+2      	; 0x5ca <AppUSER_startTransaction+0x176>
     5c8:	76 c0       	rjmp	.+236    	; 0x6b6 <AppUSER_startTransaction+0x262>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     5ca:	8f e4       	ldi	r24, 0x4F	; 79
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     5d2:	81 30       	cpi	r24, 0x01	; 1
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <AppUSER_startTransaction+0x184>
     5d6:	48 c0       	rjmp	.+144    	; 0x668 <AppUSER_startTransaction+0x214>
     5d8:	70 c0       	rjmp	.+224    	; 0x6ba <AppUSER_startTransaction+0x266>
						return APP_STATUS_ERROR_NOK;
				}else/****************** Transaction Successfull ******************/
				{
					Lcd_clear();
     5da:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     5e6:	81 30       	cpi	r24, 0x01	; 1
     5e8:	09 f0       	breq	.+2      	; 0x5ec <AppUSER_startTransaction+0x198>
     5ea:	69 c0       	rjmp	.+210    	; 0x6be <AppUSER_startTransaction+0x26a>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Successful") != LCD_STATUS_ERROR_OK)
     5ec:	88 e8       	ldi	r24, 0x88	; 136
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     5f4:	81 30       	cpi	r24, 0x01	; 1
     5f6:	09 f0       	breq	.+2      	; 0x5fa <AppUSER_startTransaction+0x1a6>
     5f8:	64 c0       	rjmp	.+200    	; 0x6c2 <AppUSER_startTransaction+0x26e>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     600:	81 30       	cpi	r24, 0x01	; 1
     602:	09 f0       	breq	.+2      	; 0x606 <AppUSER_startTransaction+0x1b2>
     604:	60 c0       	rjmp	.+192    	; 0x6c6 <AppUSER_startTransaction+0x272>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Transaction") != LCD_STATUS_ERROR_OK)
     606:	83 e9       	ldi	r24, 0x93	; 147
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     60e:	81 30       	cpi	r24, 0x01	; 1
     610:	09 f0       	breq	.+2      	; 0x614 <AppUSER_startTransaction+0x1c0>
     612:	5b c0       	rjmp	.+182    	; 0x6ca <AppUSER_startTransaction+0x276>
					return APP_STATUS_ERROR_NOK;
					Motor_run(MOTOR_CASH_ID, 100, MOTOR_DIR_CLK_WISE);
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	64 e6       	ldi	r22, 0x64	; 100
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <Motor_run>
					Delay_ms(1000);
     61e:	28 ee       	ldi	r18, 0xE8	; 232
     620:	33 e0       	ldi	r19, 0x03	; 3
     622:	40 e0       	ldi	r20, 0x00	; 0
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 13 10 	call	0x2026	; 0x2026 <Delay_ms>
					Motor_stop(MOTOR_CASH_ID);
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Motor_stop>
					gu8_USER_Mode_State = USER_IDLE;
     638:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <gu8_USER_Mode_State>
					Lcd_clear();
     63c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
     640:	80 e1       	ldi	r24, 0x10	; 16
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     648:	81 30       	cpi	r24, 0x01	; 1
     64a:	09 f0       	breq	.+2      	; 0x64e <AppUSER_startTransaction+0x1fa>
     64c:	40 c0       	rjmp	.+128    	; 0x6ce <AppUSER_startTransaction+0x27a>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     654:	81 30       	cpi	r24, 0x01	; 1
     656:	e9 f5       	brne	.+122    	; 0x6d2 <AppUSER_startTransaction+0x27e>
					return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
     658:	8e e1       	ldi	r24, 0x1E	; 30
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     660:	81 30       	cpi	r24, 0x01	; 1
     662:	c9 f1       	breq	.+114    	; 0x6d6 <AppUSER_startTransaction+0x282>
					return APP_STATUS_ERROR_NOK;
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	38 c0       	rjmp	.+112    	; 0x6d8 <AppUSER_startTransaction+0x284>
					
					return APP_STATUS_ERROR_OK;
				}
			}
		}
		Delay_ms(155);
     668:	2b e9       	ldi	r18, 0x9B	; 155
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	50 e0       	ldi	r21, 0x00	; 0
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 13 10 	call	0x2026	; 0x2026 <Delay_ms>
	}
     67c:	fc ce       	rjmp	.-520    	; 0x476 <AppUSER_startTransaction+0x22>
			Terminal_Out(gau8_maxAmount);
			if(stringCompare(gau8_maxAmount, au8_inputKPD) == 3)
			{
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	2b c0       	rjmp	.+86     	; 0x6d8 <AppUSER_startTransaction+0x284>
				if(Lcd_printString((uint8_t*)"Max Amount") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	29 c0       	rjmp	.+82     	; 0x6d8 <AppUSER_startTransaction+0x284>
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	27 c0       	rjmp	.+78     	; 0x6d8 <AppUSER_startTransaction+0x284>
				if(Lcd_printString((uint8_t*)"Exceeded") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	25 c0       	rjmp	.+74     	; 0x6d8 <AppUSER_startTransaction+0x284>
				Delay_ms(500);
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	23 c0       	rjmp	.+70     	; 0x6d8 <AppUSER_startTransaction+0x284>
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	21 c0       	rjmp	.+66     	; 0x6d8 <AppUSER_startTransaction+0x284>
			}else
			{
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	1f c0       	rjmp	.+62     	; 0x6d8 <AppUSER_startTransaction+0x284>
				if(Lcd_printString((uint8_t*)"Please Wait") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	1d c0       	rjmp	.+58     	; 0x6d8 <AppUSER_startTransaction+0x284>
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	1b c0       	rjmp	.+54     	; 0x6d8 <AppUSER_startTransaction+0x284>
				if(Lcd_printString((uint8_t*)"Processing...") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	19 c0       	rjmp	.+50     	; 0x6d8 <AppUSER_startTransaction+0x284>
				if(stringCompare(gstr_clientdata.au8_Balance, au8_inputKPD) == 3)
				{
					Lcd_clear();
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	17 c0       	rjmp	.+46     	; 0x6d8 <AppUSER_startTransaction+0x284>
					if(Lcd_printString((uint8_t*)"Insufficient") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	15 c0       	rjmp	.+42     	; 0x6d8 <AppUSER_startTransaction+0x284>
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	13 c0       	rjmp	.+38     	; 0x6d8 <AppUSER_startTransaction+0x284>
					if(Lcd_printString((uint8_t*)"Fund") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	11 c0       	rjmp	.+34     	; 0x6d8 <AppUSER_startTransaction+0x284>
					Delay_ms(500);
					Lcd_clear();
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	0f c0       	rjmp	.+30     	; 0x6d8 <AppUSER_startTransaction+0x284>
					if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	0d c0       	rjmp	.+26     	; 0x6d8 <AppUSER_startTransaction+0x284>
				}else/****************** Transaction Successfull ******************/
				{
					Lcd_clear();
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	0b c0       	rjmp	.+22     	; 0x6d8 <AppUSER_startTransaction+0x284>
					if(Lcd_printString((uint8_t*)"Successful") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	09 c0       	rjmp	.+18     	; 0x6d8 <AppUSER_startTransaction+0x284>
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	07 c0       	rjmp	.+14     	; 0x6d8 <AppUSER_startTransaction+0x284>
					if(Lcd_printString((uint8_t*)"Transaction") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	05 c0       	rjmp	.+10     	; 0x6d8 <AppUSER_startTransaction+0x284>
					Delay_ms(1000);
					Motor_stop(MOTOR_CASH_ID);
					gu8_USER_Mode_State = USER_IDLE;
					Lcd_clear();
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <AppUSER_startTransaction+0x284>
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_OK;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	01 c0       	rjmp	.+2      	; 0x6d8 <AppUSER_startTransaction+0x284>
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
					
					return APP_STATUS_ERROR_OK;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
		}
		Delay_ms(155);
	}
}
     6d8:	28 96       	adiw	r28, 0x08	; 8
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	cd bf       	out	0x3d, r28	; 61
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <AppUSER_checkPin>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the user's input pin if right or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPin(void)
{
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	00 d0       	rcall	.+0      	; 0x6f0 <AppUSER_checkPin+0x6>
     6f0:	00 d0       	rcall	.+0      	; 0x6f2 <AppUSER_checkPin+0x8>
     6f2:	1f 92       	push	r1
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_inputKPD[5] = {0};
     6f8:	fe 01       	movw	r30, r28
     6fa:	31 96       	adiw	r30, 0x01	; 1
     6fc:	85 e0       	ldi	r24, 0x05	; 5
     6fe:	df 01       	movw	r26, r30
     700:	1d 92       	st	X+, r1
     702:	8a 95       	dec	r24
     704:	e9 f7       	brne	.-6      	; 0x700 <AppUSER_checkPin+0x16>
	enuApp_Status_t KeypdaStatus = 0;
	while(1)
	{
		EmptyString(au8_inputKPD);
     706:	ce 01       	movw	r24, r28
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	0e 94 0f 18 	call	0x301e	; 0x301e <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     70e:	ce 01       	movw	r24, r28
     710:	01 96       	adiw	r24, 0x01	; 1
     712:	0e 94 aa 01 	call	0x354	; 0x354 <AppUSER_ReportKeypad>
		
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     716:	87 30       	cpi	r24, 0x07	; 7
     718:	09 f0       	breq	.+2      	; 0x71c <AppUSER_checkPin+0x32>
     71a:	59 c0       	rjmp	.+178    	; 0x7ce <AppUSER_checkPin+0xe4>
		{
			if(stringCompare(au8_inputKPD, gstr_userCardData.au8_pinNum) != 1)
     71c:	6d e4       	ldi	r22, 0x4D	; 77
     71e:	74 e0       	ldi	r23, 0x04	; 4
     720:	ce 01       	movw	r24, r28
     722:	01 96       	adiw	r24, 0x01	; 1
     724:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <stringCompare>
     728:	81 30       	cpi	r24, 0x01	; 1
     72a:	b1 f1       	breq	.+108    	; 0x798 <AppUSER_checkPin+0xae>
			{
				Lcd_clear();
     72c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     738:	81 30       	cpi	r24, 0x01	; 1
     73a:	09 f0       	breq	.+2      	; 0x73e <AppUSER_checkPin+0x54>
     73c:	53 c0       	rjmp	.+166    	; 0x7e4 <AppUSER_checkPin+0xfa>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Incorrect PIN") != LCD_STATUS_ERROR_OK)
     73e:	8f e9       	ldi	r24, 0x9F	; 159
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     746:	81 30       	cpi	r24, 0x01	; 1
     748:	09 f0       	breq	.+2      	; 0x74c <AppUSER_checkPin+0x62>
     74a:	4e c0       	rjmp	.+156    	; 0x7e8 <AppUSER_checkPin+0xfe>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     752:	81 30       	cpi	r24, 0x01	; 1
     754:	09 f0       	breq	.+2      	; 0x758 <AppUSER_checkPin+0x6e>
     756:	4a c0       	rjmp	.+148    	; 0x7ec <AppUSER_checkPin+0x102>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Try Again") != LCD_STATUS_ERROR_OK)
     758:	8d ea       	ldi	r24, 0xAD	; 173
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     760:	81 30       	cpi	r24, 0x01	; 1
     762:	09 f0       	breq	.+2      	; 0x766 <AppUSER_checkPin+0x7c>
     764:	45 c0       	rjmp	.+138    	; 0x7f0 <AppUSER_checkPin+0x106>
				return APP_STATUS_ERROR_NOK;
				Delay_ms(500);
     766:	24 ef       	ldi	r18, 0xF4	; 244
     768:	31 e0       	ldi	r19, 0x01	; 1
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 13 10 	call	0x2026	; 0x2026 <Delay_ms>
				Lcd_clear();
     77a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     786:	81 30       	cpi	r24, 0x01	; 1
     788:	a9 f5       	brne	.+106    	; 0x7f4 <AppUSER_checkPin+0x10a>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     78a:	87 eb       	ldi	r24, 0xB7	; 183
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	e1 f0       	breq	.+56     	; 0x7ce <AppUSER_checkPin+0xe4>
     796:	30 c0       	rjmp	.+96     	; 0x7f8 <AppUSER_checkPin+0x10e>
				return APP_STATUS_ERROR_NOK;
			}else
			{
				Lcd_clear();
     798:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	51 f5       	brne	.+84     	; 0x7fc <AppUSER_checkPin+0x112>
					return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Please Wait") != LCD_STATUS_ERROR_OK)
     7a8:	8c e5       	ldi	r24, 0x5C	; 92
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     7b0:	81 30       	cpi	r24, 0x01	; 1
     7b2:	31 f5       	brne	.+76     	; 0x800 <__DATA_REGION_LENGTH__>
					return APP_STATUS_ERROR_NOK;
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     7b4:	60 e0       	ldi	r22, 0x00	; 0
     7b6:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     7ba:	81 30       	cpi	r24, 0x01	; 1
     7bc:	19 f5       	brne	.+70     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
					return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Processing...") != LCD_STATUS_ERROR_OK)
     7be:	88 e6       	ldi	r24, 0x68	; 104
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	f9 f0       	breq	.+62     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
					return APP_STATUS_ERROR_NOK;
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	1e c0       	rjmp	.+60     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
				
				return APP_STATUS_PIN_CORRECT;
			}
		}
		Delay_ms(155);
     7ce:	2b e9       	ldi	r18, 0x9B	; 155
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 13 10 	call	0x2026	; 0x2026 <Delay_ms>
	}	
     7e2:	91 cf       	rjmp	.-222    	; 0x706 <AppUSER_checkPin+0x1c>
		{
			if(stringCompare(au8_inputKPD, gstr_userCardData.au8_pinNum) != 1)
			{
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	11 c0       	rjmp	.+34     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
				if(Lcd_printString((uint8_t*)"Incorrect PIN") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	0f c0       	rjmp	.+30     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	0d c0       	rjmp	.+26     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
				if(Lcd_printString((uint8_t*)"Try Again") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	0b c0       	rjmp	.+22     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
				Delay_ms(500);
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	09 c0       	rjmp	.+18     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	07 c0       	rjmp	.+14     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
			}else
			{
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	05 c0       	rjmp	.+10     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
				if(Lcd_printString((uint8_t*)"Please Wait") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	03 c0       	rjmp	.+6      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	01 c0       	rjmp	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
				if(Lcd_printString((uint8_t*)"Processing...") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
				
				return APP_STATUS_PIN_CORRECT;
     808:	88 e0       	ldi	r24, 0x08	; 8
			}
		}
		Delay_ms(155);
	}	
}
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <AppUSER_startProcess>:
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to start processing the card.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
     81a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	e9 f5       	brne	.+122    	; 0x8a4 <__stack+0x45>
		return APP_STATUS_ERROR_NOK;
	enuApp_Status_t PAN_status = AppUSER_checkPan();
     82a:	0e 94 4e 01 	call	0x29c	; 0x29c <AppUSER_checkPan>
	if(PAN_status == APP_STATUS_PAN_NOT_FOUND)
     82e:	8a 30       	cpi	r24, 0x0A	; 10
     830:	d9 f4       	brne	.+54     	; 0x868 <__stack+0x9>
	{
		Lcd_clear();
     832:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
		if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     83e:	81 30       	cpi	r24, 0x01	; 1
     840:	99 f5       	brne	.+102    	; 0x8a8 <__stack+0x49>
			return APP_STATUS_ERROR_NOK;
		if(Lcd_printString((uint8_t*)"Your Card is not") != LCD_STATUS_ERROR_OK)
     842:	86 ec       	ldi	r24, 0xC6	; 198
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     84a:	81 30       	cpi	r24, 0x01	; 1
     84c:	79 f5       	brne	.+94     	; 0x8ac <__stack+0x4d>
			return APP_STATUS_ERROR_NOK;
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     854:	81 30       	cpi	r24, 0x01	; 1
     856:	61 f5       	brne	.+88     	; 0x8b0 <__stack+0x51>
			return APP_STATUS_ERROR_NOK;
		if(Lcd_printString((uint8_t*)"in the Database") != LCD_STATUS_ERROR_OK)
     858:	87 ed       	ldi	r24, 0xD7	; 215
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     860:	81 30       	cpi	r24, 0x01	; 1
     862:	41 f1       	breq	.+80     	; 0x8b4 <__stack+0x55>
			return APP_STATUS_ERROR_NOK;
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	08 95       	ret
		return APP_STATUS_PAN_NOT_FOUND;
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     868:	87 eb       	ldi	r24, 0xB7	; 183
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	11 f5       	brne	.+68     	; 0x8b8 <__stack+0x59>
	return APP_STATUS_ERROR_NOK;
	if(AppUSER_checkPin() != APP_STATUS_PIN_CORRECT)
     874:	0e 94 75 03 	call	0x6ea	; 0x6ea <AppUSER_checkPin>
     878:	88 30       	cpi	r24, 0x08	; 8
     87a:	01 f5       	brne	.+64     	; 0x8bc <__stack+0x5d>
	return APP_STATUS_ERROR_NOK;
	Lcd_clear();
     87c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	d1 f4       	brne	.+52     	; 0x8c0 <__stack+0x61>
		return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     88c:	8f e4       	ldi	r24, 0x4F	; 79
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     894:	81 30       	cpi	r24, 0x01	; 1
     896:	b1 f4       	brne	.+44     	; 0x8c4 <__stack+0x65>
		return APP_STATUS_ERROR_NOK;
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
     898:	0e 94 2a 02 	call	0x454	; 0x454 <AppUSER_startTransaction>
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	99 f0       	breq	.+38     	; 0x8c6 <__stack+0x67>
		return APP_STATUS_ERROR_NOK;
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	08 95       	ret
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	08 95       	ret
	enuApp_Status_t PAN_status = AppUSER_checkPan();
	if(PAN_status == APP_STATUS_PAN_NOT_FOUND)
	{
		Lcd_clear();
		if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	08 95       	ret
		if(Lcd_printString((uint8_t*)"Your Card is not") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	08 95       	ret
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	08 95       	ret
		if(Lcd_printString((uint8_t*)"in the Database") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		return APP_STATUS_PAN_NOT_FOUND;
     8b4:	8a e0       	ldi	r24, 0x0A	; 10
     8b6:	08 95       	ret
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	08 95       	ret
	if(AppUSER_checkPin() != APP_STATUS_PIN_CORRECT)
	return APP_STATUS_ERROR_NOK;
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	08 95       	ret
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	08 95       	ret
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     8c4:	80 e0       	ldi	r24, 0x00	; 0
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     8c6:	08 95       	ret

000008c8 <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	cf 5f       	subi	r28, 0xFF	; 255
     8d6:	d1 09       	sbc	r29, r1
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
     8e2:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     8e4:	ce 01       	movw	r24, r28
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	2f ef       	ldi	r18, 0xFF	; 255
     8ea:	fc 01       	movw	r30, r24
     8ec:	11 92       	st	Z+, r1
     8ee:	2a 95       	dec	r18
     8f0:	e9 f7       	brne	.-6      	; 0x8ec <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
     8f2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
     8f6:	85 30       	cpi	r24, 0x05	; 5
     8f8:	39 f4       	brne	.+14     	; 0x908 <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
     8fa:	b8 01       	movw	r22, r16
     8fc:	ce 01       	movw	r24, r28
     8fe:	01 96       	adiw	r24, 0x01	; 1
     900:	0e 94 1b 18 	call	0x3036	; 0x3036 <stringCopy>
		return APP_STATUS_ERROR_OK;
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	05 c0       	rjmp	.+10     	; 0x912 <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	11 f0       	breq	.+4      	; 0x910 <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	01 c0       	rjmp	.+2      	; 0x912 <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
     910:	86 e0       	ldi	r24, 0x06	; 6
}
     912:	c1 50       	subi	r28, 0x01	; 1
     914:	df 4f       	sbci	r29, 0xFF	; 255
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <AppADMIN_getInput>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the ADMIN Input Choice.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getInput(uint8_t* pu8_data)
{
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Your Input: ") != TERMINAL_STATUS_ERROR_OK)
     930:	87 ee       	ldi	r24, 0xE7	; 231
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     938:	81 30       	cpi	r24, 0x01	; 1
     93a:	c1 f4       	brne	.+48     	; 0x96c <AppADMIN_getInput+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     93c:	ce 01       	movw	r24, r28
     93e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	29 f0       	breq	.+10     	; 0x950 <AppADMIN_getInput+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     946:	11 f0       	breq	.+4      	; 0x94c <AppADMIN_getInput+0x22>
     948:	86 30       	cpi	r24, 0x06	; 6
     94a:	91 f4       	brne	.+36     	; 0x970 <AppADMIN_getInput+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     94c:	86 30       	cpi	r24, 0x06	; 6
     94e:	b1 f3       	breq	.-20     	; 0x93c <AppADMIN_getInput+0x12>
		
		if (pu8_data[1] == '\0')
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	88 23       	and	r24, r24
     954:	79 f0       	breq	.+30     	; 0x974 <AppADMIN_getInput+0x4a>
		break;
		EmptyString(pu8_data);
     956:	ce 01       	movw	r24, r28
     958:	0e 94 0f 18 	call	0x301e	; 0x301e <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
     95c:	84 ef       	ldi	r24, 0xF4	; 244
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	21 f3       	breq	.-56     	; 0x930 <AppADMIN_getInput+0x6>
		return APP_STATUS_ERROR_NOK;
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	05 c0       	rjmp	.+10     	; 0x976 <AppADMIN_getInput+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Your Input: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	03 c0       	rjmp	.+6      	; 0x976 <AppADMIN_getInput+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	01 c0       	rjmp	.+2      	; 0x976 <AppADMIN_getInput+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     974:	81 e0       	ldi	r24, 0x01	; 1
}
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <AppADMIN_getnewMaxAmount>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getnewMaxAmount(uint8_t* pu8_data)
{
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Max Amount: ") != TERMINAL_STATUS_ERROR_OK)
     982:	8d e1       	ldi	r24, 0x1D	; 29
     984:	92 e0       	ldi	r25, 0x02	; 2
     986:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     98a:	81 30       	cpi	r24, 0x01	; 1
     98c:	d9 f4       	brne	.+54     	; 0x9c4 <AppADMIN_getnewMaxAmount+0x48>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     98e:	ce 01       	movw	r24, r28
     990:	0e 94 64 04 	call	0x8c8	; 0x8c8 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	29 f0       	breq	.+10     	; 0x9a2 <AppADMIN_getnewMaxAmount+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     998:	11 f0       	breq	.+4      	; 0x99e <AppADMIN_getnewMaxAmount+0x22>
     99a:	86 30       	cpi	r24, 0x06	; 6
     99c:	a9 f4       	brne	.+42     	; 0x9c8 <AppADMIN_getnewMaxAmount+0x4c>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     99e:	86 30       	cpi	r24, 0x06	; 6
     9a0:	b1 f3       	breq	.-20     	; 0x98e <AppADMIN_getnewMaxAmount+0x12>
		
		if ((pu8_data[7] == '\0') && (pu8_data[4] == '.'))
     9a2:	8f 81       	ldd	r24, Y+7	; 0x07
     9a4:	81 11       	cpse	r24, r1
     9a6:	03 c0       	rjmp	.+6      	; 0x9ae <AppADMIN_getnewMaxAmount+0x32>
     9a8:	8c 81       	ldd	r24, Y+4	; 0x04
     9aa:	8e 32       	cpi	r24, 0x2E	; 46
     9ac:	79 f0       	breq	.+30     	; 0x9cc <AppADMIN_getnewMaxAmount+0x50>
			break;
		EmptyString(pu8_data);
     9ae:	ce 01       	movw	r24, r28
     9b0:	0e 94 0f 18 	call	0x301e	; 0x301e <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
     9b4:	8a e2       	ldi	r24, 0x2A	; 42
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	09 f3       	breq	.-62     	; 0x982 <AppADMIN_getnewMaxAmount+0x6>
			return APP_STATUS_ERROR_NOK;
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	05 c0       	rjmp	.+10     	; 0x9ce <AppADMIN_getnewMaxAmount+0x52>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Max Amount: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	03 c0       	rjmp	.+6      	; 0x9ce <AppADMIN_getnewMaxAmount+0x52>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <AppADMIN_getnewMaxAmount+0x52>
			break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     9cc:	81 e0       	ldi	r24, 0x01	; 1
}
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret

000009d4 <AppADMIN_getCustomerPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerPAN(uint8_t* pu8_data)
{
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"PAN: ") != TERMINAL_STATUS_ERROR_OK)
     9da:	8a e5       	ldi	r24, 0x5A	; 90
     9dc:	92 e0       	ldi	r25, 0x02	; 2
     9de:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	c1 f4       	brne	.+48     	; 0xa16 <AppADMIN_getCustomerPAN+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     9e6:	ce 01       	movw	r24, r28
     9e8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     9ec:	81 30       	cpi	r24, 0x01	; 1
     9ee:	29 f0       	breq	.+10     	; 0x9fa <AppADMIN_getCustomerPAN+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     9f0:	11 f0       	breq	.+4      	; 0x9f6 <AppADMIN_getCustomerPAN+0x22>
     9f2:	86 30       	cpi	r24, 0x06	; 6
     9f4:	91 f4       	brne	.+36     	; 0xa1a <AppADMIN_getCustomerPAN+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     9f6:	86 30       	cpi	r24, 0x06	; 6
     9f8:	b1 f3       	breq	.-20     	; 0x9e6 <AppADMIN_getCustomerPAN+0x12>
		
		if (pu8_data[9] == '\0')
     9fa:	89 85       	ldd	r24, Y+9	; 0x09
     9fc:	88 23       	and	r24, r24
     9fe:	79 f0       	breq	.+30     	; 0xa1e <AppADMIN_getCustomerPAN+0x4a>
		break;
		EmptyString(pu8_data);
     a00:	ce 01       	movw	r24, r28
     a02:	0e 94 0f 18 	call	0x301e	; 0x301e <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
     a06:	80 e6       	ldi	r24, 0x60	; 96
     a08:	92 e0       	ldi	r25, 0x02	; 2
     a0a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     a0e:	81 30       	cpi	r24, 0x01	; 1
     a10:	21 f3       	breq	.-56     	; 0x9da <AppADMIN_getCustomerPAN+0x6>
		return APP_STATUS_ERROR_NOK;
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	05 c0       	rjmp	.+10     	; 0xa20 <AppADMIN_getCustomerPAN+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"PAN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	03 c0       	rjmp	.+6      	; 0xa20 <AppADMIN_getCustomerPAN+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	01 c0       	rjmp	.+2      	; 0xa20 <AppADMIN_getCustomerPAN+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     a1e:	81 e0       	ldi	r24, 0x01	; 1
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <AppADMIN_getCustomerBalance>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Balance by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the balance of the customer.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerBalance(uint8_t* pu8_data)
{
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Balance: ") != TERMINAL_STATUS_ERROR_OK)
     a2c:	80 e8       	ldi	r24, 0x80	; 128
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     a34:	81 30       	cpi	r24, 0x01	; 1
     a36:	c1 f4       	brne	.+48     	; 0xa68 <AppADMIN_getCustomerBalance+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     a38:	ce 01       	movw	r24, r28
     a3a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     a3e:	81 30       	cpi	r24, 0x01	; 1
     a40:	29 f0       	breq	.+10     	; 0xa4c <AppADMIN_getCustomerBalance+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     a42:	11 f0       	breq	.+4      	; 0xa48 <AppADMIN_getCustomerBalance+0x22>
     a44:	86 30       	cpi	r24, 0x06	; 6
     a46:	91 f4       	brne	.+36     	; 0xa6c <AppADMIN_getCustomerBalance+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     a48:	86 30       	cpi	r24, 0x06	; 6
     a4a:	b1 f3       	breq	.-20     	; 0xa38 <AppADMIN_getCustomerBalance+0x12>
		
		if (pu8_data[7] == '\0')
     a4c:	8f 81       	ldd	r24, Y+7	; 0x07
     a4e:	88 23       	and	r24, r24
     a50:	79 f0       	breq	.+30     	; 0xa70 <AppADMIN_getCustomerBalance+0x4a>
		break;
		EmptyString(pu8_data);
     a52:	ce 01       	movw	r24, r28
     a54:	0e 94 0f 18 	call	0x301e	; 0x301e <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters\r") != TERMINAL_STATUS_ERROR_OK)
     a58:	8a e8       	ldi	r24, 0x8A	; 138
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	21 f3       	breq	.-56     	; 0xa2c <AppADMIN_getCustomerBalance+0x6>
		return APP_STATUS_ERROR_NOK;
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	05 c0       	rjmp	.+10     	; 0xa72 <AppADMIN_getCustomerBalance+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Balance: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	03 c0       	rjmp	.+6      	; 0xa72 <AppADMIN_getCustomerBalance+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	01 c0       	rjmp	.+2      	; 0xa72 <AppADMIN_getCustomerBalance+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     a70:	81 e0       	ldi	r24, 0x01	; 1
}
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	08 95       	ret

00000a78 <AppADMIN_getAtmPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input ATM PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the atm pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getAtmPIN(uint8_t* pu8_data)
{
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	
	Terminal_enablePasswordMode();
     a7e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <Terminal_enablePasswordMode>
	do
	{
		if(Terminal_Out((uint8_t*)"ATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
     a82:	8e ea       	ldi	r24, 0xAE	; 174
     a84:	92 e0       	ldi	r25, 0x02	; 2
     a86:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	69 f5       	brne	.+90     	; 0xae8 <AppADMIN_getAtmPIN+0x70>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     a8e:	ce 01       	movw	r24, r28
     a90:	0e 94 64 04 	call	0x8c8	; 0x8c8 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	29 f0       	breq	.+10     	; 0xaa2 <AppADMIN_getAtmPIN+0x2a>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     a98:	11 f0       	breq	.+4      	; 0xa9e <AppADMIN_getAtmPIN+0x26>
     a9a:	86 30       	cpi	r24, 0x06	; 6
     a9c:	39 f5       	brne	.+78     	; 0xaec <AppADMIN_getAtmPIN+0x74>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     a9e:	86 30       	cpi	r24, 0x06	; 6
     aa0:	b1 f3       	breq	.-20     	; 0xa8e <AppADMIN_getAtmPIN+0x16>
		
		if(stringCompare(ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
     aa2:	be 01       	movw	r22, r28
     aa4:	80 e6       	ldi	r24, 0x60	; 96
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <stringCompare>
     aac:	81 30       	cpi	r24, 0x01	; 1
     aae:	39 f0       	breq	.+14     	; 0xabe <AppADMIN_getAtmPIN+0x46>
		{
			if(Terminal_Out((uint8_t*)"Incorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
     ab0:	88 eb       	ldi	r24, 0xB8	; 184
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     ab8:	81 30       	cpi	r24, 0x01	; 1
     aba:	41 f0       	breq	.+16     	; 0xacc <AppADMIN_getAtmPIN+0x54>
     abc:	19 c0       	rjmp	.+50     	; 0xaf0 <AppADMIN_getAtmPIN+0x78>
				return APP_STATUS_ERROR_NOK;
		}else
		{
			if(Terminal_Out((uint8_t*)"Loading...\r") != TERMINAL_STATUS_ERROR_OK)
     abe:	87 ec       	ldi	r24, 0xC7	; 199
     ac0:	92 e0       	ldi	r25, 0x02	; 2
     ac2:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     ac6:	81 30       	cpi	r24, 0x01	; 1
     ac8:	a9 f4       	brne	.+42     	; 0xaf4 <AppADMIN_getAtmPIN+0x7c>
     aca:	0a c0       	rjmp	.+20     	; 0xae0 <AppADMIN_getAtmPIN+0x68>
				return APP_STATUS_ERROR_NOK;
			break;
		}
		EmptyString(pu8_data);
     acc:	ce 01       	movw	r24, r28
     ace:	0e 94 0f 18 	call	0x301e	; 0x301e <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
     ad2:	83 ed       	ldi	r24, 0xD3	; 211
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     ada:	81 30       	cpi	r24, 0x01	; 1
     adc:	91 f2       	breq	.-92     	; 0xa82 <AppADMIN_getAtmPIN+0xa>
     ade:	0c c0       	rjmp	.+24     	; 0xaf8 <AppADMIN_getAtmPIN+0x80>
			return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
     ae0:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <Terminal_disablePasswordMode>
	return APP_STATUS_ERROR_OK;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	09 c0       	rjmp	.+18     	; 0xafa <AppADMIN_getAtmPIN+0x82>
	
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"ATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	07 c0       	rjmp	.+14     	; 0xafa <AppADMIN_getAtmPIN+0x82>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	05 c0       	rjmp	.+10     	; 0xafa <AppADMIN_getAtmPIN+0x82>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringCompare(ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
		{
			if(Terminal_Out((uint8_t*)"Incorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	03 c0       	rjmp	.+6      	; 0xafa <AppADMIN_getAtmPIN+0x82>
		}else
		{
			if(Terminal_Out((uint8_t*)"Loading...\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	01 c0       	rjmp	.+2      	; 0xafa <AppADMIN_getAtmPIN+0x82>
			break;
		}
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     af8:	80 e0       	ldi	r24, 0x00	; 0
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_ERROR_OK;
}
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	08 95       	ret

00000b00 <AppADMIN_saveNewCustomerData>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save PAN and Balance of a new Customer in the EEPROM
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveNewCustomerData(void)
{
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*16 ;
     b04:	20 91 25 04 	lds	r18, 0x0425	; 0x800425 <gu8_registeredAccNum>
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	c9 01       	movw	r24, r18
     b0c:	02 96       	adiw	r24, 0x02	; 2
     b0e:	d8 2f       	mov	r29, r24
     b10:	d2 95       	swap	r29
     b12:	d0 7f       	andi	r29, 0xF0	; 240
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*16 ;
     b14:	2d 5f       	subi	r18, 0xFD	; 253
     b16:	3f 4f       	sbci	r19, 0xFF	; 255
     b18:	c2 2f       	mov	r28, r18
     b1a:	c2 95       	swap	r28
     b1c:	c0 7f       	andi	r28, 0xF0	; 240
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
     b1e:	87 e2       	ldi	r24, 0x27	; 39
     b20:	94 e0       	ldi	r25, 0x04	; 4
     b22:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <stringLength>
     b26:	48 2f       	mov	r20, r24
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	67 e2       	ldi	r22, 0x27	; 39
     b2c:	74 e0       	ldi	r23, 0x04	; 4
     b2e:	8d 2f       	mov	r24, r29
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <Eeprom_24_writePacket>
     b36:	81 30       	cpi	r24, 0x01	; 1
     b38:	d9 f4       	brne	.+54     	; 0xb70 <AppADMIN_saveNewCustomerData+0x70>
		return APP_STATUS_ERROR_NOK;
		
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     b3a:	81 e3       	ldi	r24, 0x31	; 49
     b3c:	94 e0       	ldi	r25, 0x04	; 4
     b3e:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <stringLength>
     b42:	48 2f       	mov	r20, r24
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	61 e3       	ldi	r22, 0x31	; 49
     b48:	74 e0       	ldi	r23, 0x04	; 4
     b4a:	8c 2f       	mov	r24, r28
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <Eeprom_24_writePacket>
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	79 f4       	brne	.+30     	; 0xb74 <AppADMIN_saveNewCustomerData+0x74>
		return APP_STATUS_ERROR_NOK;
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     b56:	60 91 25 04 	lds	r22, 0x0425	; 0x800425 <gu8_registeredAccNum>
     b5a:	6f 5f       	subi	r22, 0xFF	; 255
     b5c:	60 93 25 04 	sts	0x0425, r22	; 0x800425 <gu8_registeredAccNum>
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 79 09 	call	0x12f2	; 0x12f2 <Eeprom_24_writeByte>
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	31 f0       	breq	.+12     	; 0xb78 <AppADMIN_saveNewCustomerData+0x78>
		return APP_STATUS_ERROR_NOK;
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	05 c0       	rjmp	.+10     	; 0xb7a <AppADMIN_saveNewCustomerData+0x7a>
{
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*16 ;
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*16 ;
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	03 c0       	rjmp	.+6      	; 0xb7a <AppADMIN_saveNewCustomerData+0x7a>
		
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	01 c0       	rjmp	.+2      	; 0xb7a <AppADMIN_saveNewCustomerData+0x7a>
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     b78:	81 e0       	ldi	r24, 0x01	; 1
}
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <AppUSER_getCardData>:
* Parameters (out): pstr_CardData - Structure to save the card's data in.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the Card data Struct
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_getCardData(strCardData_t* pstr_CardData, uint8_t *pu8_dataString)
{
     b80:	ac 01       	movw	r20, r24
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
     b82:	20 e0       	ldi	r18, 0x00	; 0
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	0a c0       	rjmp	.+20     	; 0xb9c <AppUSER_getCardData+0x1c>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     b88:	fb 01       	movw	r30, r22
     b8a:	e9 0f       	add	r30, r25
     b8c:	f1 1d       	adc	r31, r1
     b8e:	80 81       	ld	r24, Z
     b90:	fa 01       	movw	r30, r20
     b92:	e2 0f       	add	r30, r18
     b94:	f1 1d       	adc	r31, r1
     b96:	80 83       	st	Z, r24
		u8_dataIndex++;
     b98:	2f 5f       	subi	r18, 0xFF	; 255
{
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     b9a:	9f 5f       	subi	r25, 0xFF	; 255
     b9c:	9a 30       	cpi	r25, 0x0A	; 10
     b9e:	a0 f3       	brcs	.-24     	; 0xb88 <AppUSER_getCardData+0x8>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
     ba0:	fa 01       	movw	r30, r20
     ba2:	e2 0f       	add	r30, r18
     ba4:	f1 1d       	adc	r31, r1
     ba6:	10 82       	st	Z, r1
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
     ba8:	20 e0       	ldi	r18, 0x00	; 0
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     baa:	9b e0       	ldi	r25, 0x0B	; 11
     bac:	0a c0       	rjmp	.+20     	; 0xbc2 <AppUSER_getCardData+0x42>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     bae:	fb 01       	movw	r30, r22
     bb0:	e9 0f       	add	r30, r25
     bb2:	f1 1d       	adc	r31, r1
     bb4:	80 81       	ld	r24, Z
     bb6:	fa 01       	movw	r30, r20
     bb8:	e2 0f       	add	r30, r18
     bba:	f1 1d       	adc	r31, r1
     bbc:	82 87       	std	Z+10, r24	; 0x0a
		u8_dataIndex++;
     bbe:	2f 5f       	subi	r18, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     bc0:	9f 5f       	subi	r25, 0xFF	; 255
     bc2:	94 31       	cpi	r25, 0x14	; 20
     bc4:	a0 f3       	brcs	.-24     	; 0xbae <AppUSER_getCardData+0x2e>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
     bc6:	fa 01       	movw	r30, r20
     bc8:	e2 0f       	add	r30, r18
     bca:	f1 1d       	adc	r31, r1
     bcc:	12 86       	std	Z+10, r1	; 0x0a
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
     bce:	90 e0       	ldi	r25, 0x00	; 0
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     bd0:	85 e1       	ldi	r24, 0x15	; 21
     bd2:	0a c0       	rjmp	.+20     	; 0xbe8 <AppUSER_getCardData+0x68>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     bd4:	fb 01       	movw	r30, r22
     bd6:	e8 0f       	add	r30, r24
     bd8:	f1 1d       	adc	r31, r1
     bda:	20 81       	ld	r18, Z
     bdc:	fa 01       	movw	r30, r20
     bde:	e9 0f       	add	r30, r25
     be0:	f1 1d       	adc	r31, r1
     be2:	24 8b       	std	Z+20, r18	; 0x14
		u8_dataIndex++;
     be4:	9f 5f       	subi	r25, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     be6:	8f 5f       	subi	r24, 0xFF	; 255
     be8:	89 31       	cpi	r24, 0x19	; 25
     bea:	a0 f3       	brcs	.-24     	; 0xbd4 <AppUSER_getCardData+0x54>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_pinNum[u8_dataIndex] = '\0';
     bec:	fa 01       	movw	r30, r20
     bee:	e9 0f       	add	r30, r25
     bf0:	f1 1d       	adc	r31, r1
     bf2:	14 8a       	std	Z+20, r1	; 0x14
	return APP_STATUS_ERROR_OK;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	08 95       	ret

00000bf8 <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	c0 52       	subi	r28, 0x20	; 32
     c04:	d1 40       	sbci	r29, 0x01	; 1
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
     c10:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <enuCurrentAppStatus>
     c14:	84 30       	cpi	r24, 0x04	; 4
     c16:	09 f0       	breq	.+2      	; 0xc1a <App_update+0x22>
     c18:	9c c2       	rjmp	.+1336   	; 0x1152 <App_update+0x55a>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
     c1a:	fe 01       	movw	r30, r28
     c1c:	31 96       	adiw	r30, 0x01	; 1
     c1e:	8a e0       	ldi	r24, 0x0A	; 10
     c20:	df 01       	movw	r26, r30
     c22:	1d 92       	st	X+, r1
     c24:	8a 95       	dec	r24
     c26:	e9 f7       	brne	.-6      	; 0xc22 <App_update+0x2a>
	static uint8_t u8_passFlag = 0;
	if(gu8_ATMMode == ATM_MODE_ADMIN)
     c28:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gu8_ATMMode>
     c2c:	81 11       	cpse	r24, r1
     c2e:	e7 c0       	rjmp	.+462    	; 0xdfe <App_update+0x206>
	{ /**************** PROGRAMMING MODE ****************/
			uint8_t au8_tempPAN[10]={0};
     c30:	3a 96       	adiw	r30, 0x0a	; 10
     c32:	8a e0       	ldi	r24, 0x0A	; 10
     c34:	df 01       	movw	r26, r30
     c36:	1d 92       	st	X+, r1
     c38:	8a 95       	dec	r24
     c3a:	e9 f7       	brne	.-6      	; 0xc36 <App_update+0x3e>
			uint8_t au8_tempBalance[8]={0};
     c3c:	e9 5f       	subi	r30, 0xF9	; 249
     c3e:	fe 4f       	sbci	r31, 0xFE	; 254
     c40:	88 e0       	ldi	r24, 0x08	; 8
     c42:	df 01       	movw	r26, r30
     c44:	98 2f       	mov	r25, r24
     c46:	1d 92       	st	X+, r1
     c48:	9a 95       	dec	r25
     c4a:	e9 f7       	brne	.-6      	; 0xc46 <App_update+0x4e>
			uint8_t au8_Input[2]={0};
     c4c:	c1 5e       	subi	r28, 0xE1	; 225
     c4e:	de 4f       	sbci	r29, 0xFE	; 254
     c50:	19 82       	std	Y+1, r1	; 0x01
     c52:	18 82       	st	Y, r1
     c54:	cf 51       	subi	r28, 0x1F	; 31
     c56:	d1 40       	sbci	r29, 0x01	; 1
			uint8_t au8_tempPinNum[5]={0};
     c58:	38 96       	adiw	r30, 0x08	; 8
     c5a:	95 e0       	ldi	r25, 0x05	; 5
     c5c:	df 01       	movw	r26, r30
     c5e:	1d 92       	st	X+, r1
     c60:	9a 95       	dec	r25
     c62:	e9 f7       	brne	.-6      	; 0xc5e <App_update+0x66>
			uint8_t au8_tempMaxAmount[8]={0};
     c64:	70 97       	sbiw	r30, 0x10	; 16
     c66:	df 01       	movw	r26, r30
     c68:	1d 92       	st	X+, r1
     c6a:	8a 95       	dec	r24
     c6c:	e9 f7       	brne	.-6      	; 0xc68 <App_update+0x70>
			
			if(u8_passFlag == 0)
     c6e:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <u8_passFlag.2142>
     c72:	81 11       	cpse	r24, r1
     c74:	0a c0       	rjmp	.+20     	; 0xc8a <App_update+0x92>
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
     c76:	ce 01       	movw	r24, r28
     c78:	86 5e       	subi	r24, 0xE6	; 230
     c7a:	9e 4f       	sbci	r25, 0xFE	; 254
     c7c:	0e 94 3c 05 	call	0xa78	; 0xa78 <AppADMIN_getAtmPIN>
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	09 f0       	breq	.+2      	; 0xc86 <App_update+0x8e>
     c84:	a2 c0       	rjmp	.+324    	; 0xdca <App_update+0x1d2>
					return APP_STATUS_ERROR_NOK;
				u8_passFlag = 1;
     c86:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <u8_passFlag.2142>
			}
			
			if(Terminal_Out((uint8_t*)"1.Add New Customer\r2.Update Max Amount\r3.Exit\r") != TERMINAL_STATUS_ERROR_OK)
     c8a:	83 ef       	ldi	r24, 0xF3	; 243
     c8c:	92 e0       	ldi	r25, 0x02	; 2
     c8e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	09 f0       	breq	.+2      	; 0xc98 <App_update+0xa0>
     c96:	9b c0       	rjmp	.+310    	; 0xdce <App_update+0x1d6>
				return APP_STATUS_ERROR_NOK;
				
			AppADMIN_getInput(au8_Input);
     c98:	ce 01       	movw	r24, r28
     c9a:	81 5e       	subi	r24, 0xE1	; 225
     c9c:	9e 4f       	sbci	r25, 0xFE	; 254
     c9e:	0e 94 95 04 	call	0x92a	; 0x92a <AppADMIN_getInput>
			if(au8_Input[0] == '1')//--------- New Customer OPTION -----------//
     ca2:	c1 5e       	subi	r28, 0xE1	; 225
     ca4:	de 4f       	sbci	r29, 0xFE	; 254
     ca6:	88 81       	ld	r24, Y
     ca8:	cf 51       	subi	r28, 0x1F	; 31
     caa:	d1 40       	sbci	r29, 0x01	; 1
     cac:	81 33       	cpi	r24, 0x31	; 49
     cae:	b9 f5       	brne	.+110    	; 0xd1e <App_update+0x126>
			{
				/* Get the Customer's Primary Account Number from the ADMIN Terminal */
				if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     cb0:	ce 01       	movw	r24, r28
     cb2:	0b 96       	adiw	r24, 0x0b	; 11
     cb4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <AppADMIN_getCustomerPAN>
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	09 f0       	breq	.+2      	; 0xcbe <App_update+0xc6>
     cbc:	8a c0       	rjmp	.+276    	; 0xdd2 <App_update+0x1da>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
     cbe:	67 e2       	ldi	r22, 0x27	; 39
     cc0:	74 e0       	ldi	r23, 0x04	; 4
     cc2:	ce 01       	movw	r24, r28
     cc4:	0b 96       	adiw	r24, 0x0b	; 11
     cc6:	0e 94 1b 18 	call	0x3036	; 0x3036 <stringCopy>
				
				/* Get the Customer's Balance from the ADMIN Terminal */
				if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
     cca:	ce 01       	movw	r24, r28
     ccc:	8e 5e       	subi	r24, 0xEE	; 238
     cce:	9e 4f       	sbci	r25, 0xFE	; 254
     cd0:	0e 94 13 05 	call	0xa26	; 0xa26 <AppADMIN_getCustomerBalance>
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	09 f0       	breq	.+2      	; 0xcda <App_update+0xe2>
     cd8:	7e c0       	rjmp	.+252    	; 0xdd6 <App_update+0x1de>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
     cda:	61 e3       	ldi	r22, 0x31	; 49
     cdc:	74 e0       	ldi	r23, 0x04	; 4
     cde:	ce 01       	movw	r24, r28
     ce0:	8e 5e       	subi	r24, 0xEE	; 238
     ce2:	9e 4f       	sbci	r25, 0xFE	; 254
     ce4:	0e 94 1b 18 	call	0x3036	; 0x3036 <stringCopy>
				
				if(AppADMIN_saveNewCustomerData() != APP_STATUS_ERROR_OK)
     ce8:	0e 94 80 05 	call	0xb00	; 0xb00 <AppADMIN_saveNewCustomerData>
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	09 f0       	breq	.+2      	; 0xcf2 <App_update+0xfa>
     cf0:	74 c0       	rjmp	.+232    	; 0xdda <App_update+0x1e2>
					return APP_STATUS_ERROR_NOK;
				EmptyString(au8_Input);
     cf2:	ce 01       	movw	r24, r28
     cf4:	81 5e       	subi	r24, 0xE1	; 225
     cf6:	9e 4f       	sbci	r25, 0xFE	; 254
     cf8:	0e 94 0f 18 	call	0x301e	; 0x301e <EmptyString>
				if(gu8_registeredAccNum == 1)
     cfc:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <gu8_registeredAccNum>
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	09 f0       	breq	.+2      	; 0xd06 <App_update+0x10e>
     d04:	60 c0       	rjmp	.+192    	; 0xdc6 <App_update+0x1ce>
				{
					gu8_initData = ATM_DB_FLAG_SET_VAL;
     d06:	8a ea       	ldi	r24, 0xAA	; 170
     d08:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <gu8_initData>
					if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
     d0c:	6a ea       	ldi	r22, 0xAA	; 170
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 79 09 	call	0x12f2	; 0x12f2 <Eeprom_24_writeByte>
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	09 f0       	breq	.+2      	; 0xd1c <App_update+0x124>
     d1a:	61 c0       	rjmp	.+194    	; 0xdde <App_update+0x1e6>
     d1c:	54 c0       	rjmp	.+168    	; 0xdc6 <App_update+0x1ce>
					return APP_STATUS_ERROR_NOK;
				}

			}else if(au8_Input[0] == '2')//--------- Max Amount OPTION -----------//
     d1e:	82 33       	cpi	r24, 0x32	; 50
     d20:	f1 f4       	brne	.+60     	; 0xd5e <App_update+0x166>
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
     d22:	ce 01       	movw	r24, r28
     d24:	86 5f       	subi	r24, 0xF6	; 246
     d26:	9e 4f       	sbci	r25, 0xFE	; 254
     d28:	0e 94 be 04 	call	0x97c	; 0x97c <AppADMIN_getnewMaxAmount>
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
     d2c:	ce 01       	movw	r24, r28
     d2e:	86 5f       	subi	r24, 0xF6	; 246
     d30:	9e 4f       	sbci	r25, 0xFE	; 254
     d32:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <stringLength>
     d36:	48 2f       	mov	r20, r24
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	be 01       	movw	r22, r28
     d3c:	66 5f       	subi	r22, 0xF6	; 246
     d3e:	7e 4f       	sbci	r23, 0xFE	; 254
     d40:	83 e0       	ldi	r24, 0x03	; 3
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <Eeprom_24_writePacket>
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	09 f0       	breq	.+2      	; 0xd4e <App_update+0x156>
     d4c:	4a c0       	rjmp	.+148    	; 0xde2 <App_update+0x1ea>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempMaxAmount, gau8_maxAmount);
     d4e:	68 e1       	ldi	r22, 0x18	; 24
     d50:	74 e0       	ldi	r23, 0x04	; 4
     d52:	ce 01       	movw	r24, r28
     d54:	86 5f       	subi	r24, 0xF6	; 246
     d56:	9e 4f       	sbci	r25, 0xFE	; 254
     d58:	0e 94 1b 18 	call	0x3036	; 0x3036 <stringCopy>
     d5c:	34 c0       	rjmp	.+104    	; 0xdc6 <App_update+0x1ce>
					
			}else if(au8_Input[0] == '3')//--------- EXIT OPTION -----------//
     d5e:	83 33       	cpi	r24, 0x33	; 51
     d60:	91 f5       	brne	.+100    	; 0xdc6 <App_update+0x1ce>
			{
				if(gu8_initData == ATM_DB_FLAG_SET_VAL)
     d62:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <gu8_initData>
     d66:	8a 3a       	cpi	r24, 0xAA	; 170
     d68:	31 f5       	brne	.+76     	; 0xdb6 <App_update+0x1be>
				{
					u8_passFlag = 0;
     d6a:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <u8_passFlag.2142>
					gu8_ATMMode = ATM_MODE_USER;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu8_ATMMode>
					Lcd_clear();
     d74:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
					if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     d78:	8d e2       	ldi	r24, 0x2D	; 45
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     d80:	81 30       	cpi	r24, 0x01	; 1
     d82:	89 f5       	brne	.+98     	; 0xde6 <App_update+0x1ee>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	69 f5       	brne	.+90     	; 0xdea <App_update+0x1f2>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
     d90:	80 e1       	ldi	r24, 0x10	; 16
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	49 f5       	brne	.+82     	; 0xdee <App_update+0x1f6>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	31 f5       	brne	.+76     	; 0xdf2 <App_update+0x1fa>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
     da6:	8e e1       	ldi	r24, 0x1E	; 30
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	11 f1       	breq	.+68     	; 0xdf6 <App_update+0x1fe>
						return APP_STATUS_ERROR_NOK;
     db2:	10 e0       	ldi	r17, 0x00	; 0
     db4:	cf c1       	rjmp	.+926    	; 0x1154 <App_update+0x55c>
					
					return APP_STATUS_ERROR_OK;
				}else
				{
					if(Terminal_Out((uint8_t*)"Data Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
     db6:	82 e2       	ldi	r24, 0x22	; 34
     db8:	93 e0       	ldi	r25, 0x03	; 3
     dba:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	e1 f0       	breq	.+56     	; 0xdfa <App_update+0x202>
						return APP_STATUS_ERROR_NOK;
     dc2:	10 e0       	ldi	r17, 0x00	; 0
     dc4:	c7 c1       	rjmp	.+910    	; 0x1154 <App_update+0x55c>
				}
			}
	/****************************************************************/
	}
	
	return APP_STATUS_ERROR_OK;
     dc6:	11 e0       	ldi	r17, 0x01	; 1
     dc8:	c5 c1       	rjmp	.+906    	; 0x1154 <App_update+0x55c>
			
			if(u8_passFlag == 0)
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     dca:	10 e0       	ldi	r17, 0x00	; 0
     dcc:	c3 c1       	rjmp	.+902    	; 0x1154 <App_update+0x55c>
				u8_passFlag = 1;
			}
			
			if(Terminal_Out((uint8_t*)"1.Add New Customer\r2.Update Max Amount\r3.Exit\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     dce:	10 e0       	ldi	r17, 0x00	; 0
     dd0:	c1 c1       	rjmp	.+898    	; 0x1154 <App_update+0x55c>
			AppADMIN_getInput(au8_Input);
			if(au8_Input[0] == '1')//--------- New Customer OPTION -----------//
			{
				/* Get the Customer's Primary Account Number from the ADMIN Terminal */
				if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     dd2:	10 e0       	ldi	r17, 0x00	; 0
     dd4:	bf c1       	rjmp	.+894    	; 0x1154 <App_update+0x55c>
				stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
				
				/* Get the Customer's Balance from the ADMIN Terminal */
				if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     dd6:	10 e0       	ldi	r17, 0x00	; 0
     dd8:	bd c1       	rjmp	.+890    	; 0x1154 <App_update+0x55c>
				stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
				
				if(AppADMIN_saveNewCustomerData() != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     dda:	10 e0       	ldi	r17, 0x00	; 0
     ddc:	bb c1       	rjmp	.+886    	; 0x1154 <App_update+0x55c>
				EmptyString(au8_Input);
				if(gu8_registeredAccNum == 1)
				{
					gu8_initData = ATM_DB_FLAG_SET_VAL;
					if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     dde:	10 e0       	ldi	r17, 0x00	; 0
     de0:	b9 c1       	rjmp	.+882    	; 0x1154 <App_update+0x55c>

			}else if(au8_Input[0] == '2')//--------- Max Amount OPTION -----------//
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     de2:	10 e0       	ldi	r17, 0x00	; 0
     de4:	b7 c1       	rjmp	.+878    	; 0x1154 <App_update+0x55c>
				{
					u8_passFlag = 0;
					gu8_ATMMode = ATM_MODE_USER;
					Lcd_clear();
					if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     de6:	10 e0       	ldi	r17, 0x00	; 0
     de8:	b5 c1       	rjmp	.+874    	; 0x1154 <App_update+0x55c>
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
     dea:	11 e0       	ldi	r17, 0x01	; 1
     dec:	b3 c1       	rjmp	.+870    	; 0x1154 <App_update+0x55c>
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     dee:	10 e0       	ldi	r17, 0x00	; 0
     df0:	b1 c1       	rjmp	.+866    	; 0x1154 <App_update+0x55c>
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
     df2:	11 e0       	ldi	r17, 0x01	; 1
     df4:	af c1       	rjmp	.+862    	; 0x1154 <App_update+0x55c>
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					
					return APP_STATUS_ERROR_OK;
     df6:	11 e0       	ldi	r17, 0x01	; 1
     df8:	ad c1       	rjmp	.+858    	; 0x1154 <App_update+0x55c>
				}else
				{
					if(Terminal_Out((uint8_t*)"Data Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					return APP_STATUS_ERROR_OK;
     dfa:	11 e0       	ldi	r17, 0x01	; 1
     dfc:	ab c1       	rjmp	.+854    	; 0x1154 <App_update+0x55c>
	{							/************* User Mode **************/
		/********************************************************************************************/
		/************************************ ADMIN ENTERED ****************************************/
		/********************************************************************************************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
     dfe:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <gu8_ADMIN_Request>
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	31 f4       	brne	.+12     	; 0xe12 <App_update+0x21a>
     e06:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <gu8_USER_Mode_State>
     e0a:	81 11       	cpse	r24, r1
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <App_update+0x21a>
			{
				gu8_ATMMode = ATM_MODE_ADMIN;
     e0e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <gu8_ATMMode>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
     e12:	ce 01       	movw	r24, r28
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	0e 94 64 04 	call	0x8c8	; 0x8c8 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	f1 f5       	brne	.+124    	; 0xe9a <App_update+0x2a2>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
     e1e:	6c ef       	ldi	r22, 0xFC	; 252
     e20:	73 e0       	ldi	r23, 0x03	; 3
     e22:	ce 01       	movw	r24, r28
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <stringCompare>
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	d9 f5       	brne	.+118    	; 0xea4 <App_update+0x2ac>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
     e2e:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <gu8_USER_Mode_State>
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	51 f4       	brne	.+20     	; 0xe4a <App_update+0x252>
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
     e36:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <gu8_ADMIN_Request>
						if(Terminal_Out((uint8_t*)"ATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
     e3a:	8f e5       	ldi	r24, 0x5F	; 95
     e3c:	93 e0       	ldi	r25, 0x03	; 3
     e3e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	09 f0       	breq	.+2      	; 0xe48 <App_update+0x250>
     e46:	6f c1       	rjmp	.+734    	; 0x1126 <App_update+0x52e>
     e48:	2d c0       	rjmp	.+90     	; 0xea4 <App_update+0x2ac>
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The ATM is not used by User */
					{
						gu8_ATMMode = ATM_MODE_ADMIN;
     e4a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <gu8_ATMMode>
						Lcd_clear();
     e4e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
						if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	09 f0       	breq	.+2      	; 0xe60 <App_update+0x268>
     e5e:	65 c1       	rjmp	.+714    	; 0x112a <App_update+0x532>
							return APP_STATUS_ERROR_OK;
						if(Lcd_printString((uint8_t*)"*******ATM******") != LCD_STATUS_ERROR_OK)
     e60:	8c ed       	ldi	r24, 0xDC	; 220
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	09 f0       	breq	.+2      	; 0xe6e <App_update+0x276>
     e6c:	60 c1       	rjmp	.+704    	; 0x112e <App_update+0x536>
							return APP_STATUS_ERROR_NOK;
						if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	09 f0       	breq	.+2      	; 0xe7a <App_update+0x282>
     e78:	5c c1       	rjmp	.+696    	; 0x1132 <App_update+0x53a>
							return APP_STATUS_ERROR_OK;
						if(Lcd_printString((uint8_t*)"*****LOCKED*****") != LCD_STATUS_ERROR_OK)
     e7a:	8d ee       	ldi	r24, 0xED	; 237
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	09 f0       	breq	.+2      	; 0xe88 <App_update+0x290>
     e86:	57 c1       	rjmp	.+686    	; 0x1136 <App_update+0x53e>
							return APP_STATUS_ERROR_NOK;
						if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     e88:	8e ef       	ldi	r24, 0xFE	; 254
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <Terminal_Out>
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	09 f4       	brne	.+2      	; 0xe96 <App_update+0x29e>
     e94:	52 c1       	rjmp	.+676    	; 0x113a <App_update+0x542>
							return APP_STATUS_ERROR_NOK;
     e96:	10 e0       	ldi	r17, 0x00	; 0
     e98:	5d c1       	rjmp	.+698    	; 0x1154 <App_update+0x55c>
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	19 f0       	breq	.+6      	; 0xea4 <App_update+0x2ac>
     e9e:	86 30       	cpi	r24, 0x06	; 6
     ea0:	09 f0       	breq	.+2      	; 0xea4 <App_update+0x2ac>
     ea2:	4d c1       	rjmp	.+666    	; 0x113e <App_update+0x546>
				return APP_STATUS_ERROR_NOK;
			/****************************************************************/
			/********************** Getting Input from User ************************/
			uint8_t au8_data=0;
     ea4:	ce 5e       	subi	r28, 0xEE	; 238
     ea6:	de 4f       	sbci	r29, 0xFE	; 254
     ea8:	18 82       	st	Y, r1
     eaa:	c2 51       	subi	r28, 0x12	; 18
     eac:	d1 40       	sbci	r29, 0x01	; 1
			enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&au8_data);
     eae:	ce 01       	movw	r24, r28
     eb0:	8e 5e       	subi	r24, 0xEE	; 238
     eb2:	9e 4f       	sbci	r25, 0xFE	; 254
     eb4:	0e 94 0e 0c 	call	0x181c	; 0x181c <Keypad_readKey>
			if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
     eb8:	86 30       	cpi	r24, 0x06	; 6
     eba:	09 f0       	breq	.+2      	; 0xebe <App_update+0x2c6>
     ebc:	1a c1       	rjmp	.+564    	; 0x10f2 <App_update+0x4fa>
			{
			/********************************************************************************************/
			/************************************ KEYPAD PRESSED ****************************************/
			/********************************************************************************************/
				/********* Insert Card Chosen ********/
				if(au8_data == '1') 
     ebe:	ce 5e       	subi	r28, 0xEE	; 238
     ec0:	de 4f       	sbci	r29, 0xFE	; 254
     ec2:	88 81       	ld	r24, Y
     ec4:	c2 51       	subi	r28, 0x12	; 18
     ec6:	d1 40       	sbci	r29, 0x01	; 1
     ec8:	81 33       	cpi	r24, 0x31	; 49
     eca:	09 f0       	breq	.+2      	; 0xece <App_update+0x2d6>
     ecc:	c7 c0       	rjmp	.+398    	; 0x105c <App_update+0x464>
				{
					gu8_USER_Mode_State = USER_BUSY;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <gu8_USER_Mode_State>
					uint8_t u8_buttonVal = PIN_LOW;
     ed4:	c6 5f       	subi	r28, 0xF6	; 246
     ed6:	de 4f       	sbci	r29, 0xFE	; 254
     ed8:	18 82       	st	Y, r1
     eda:	ca 50       	subi	r28, 0x0A	; 10
     edc:	d1 40       	sbci	r29, 0x01	; 1
					uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     ede:	fe 01       	movw	r30, r28
     ee0:	3b 96       	adiw	r30, 0x0b	; 11
     ee2:	8f ef       	ldi	r24, 0xFF	; 255
     ee4:	df 01       	movw	r26, r30
     ee6:	1d 92       	st	X+, r1
     ee8:	8a 95       	dec	r24
     eea:	e9 f7       	brne	.-6      	; 0xee6 <App_update+0x2ee>
					Lcd_clear();
     eec:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	09 f0       	breq	.+2      	; 0xefe <App_update+0x306>
     efc:	97 c0       	rjmp	.+302    	; 0x102c <App_update+0x434>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"Waiting for Card") != LCD_STATUS_ERROR_OK)
     efe:	83 ea       	ldi	r24, 0xA3	; 163
     f00:	93 e0       	ldi	r25, 0x03	; 3
     f02:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	09 f0       	breq	.+2      	; 0xf0c <App_update+0x314>
     f0a:	92 c0       	rjmp	.+292    	; 0x1030 <App_update+0x438>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	09 f0       	breq	.+2      	; 0xf18 <App_update+0x320>
     f16:	8e c0       	rjmp	.+284    	; 0x1034 <App_update+0x43c>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"Press Button ;)") != LCD_STATUS_ERROR_OK)
     f18:	84 eb       	ldi	r24, 0xB4	; 180
     f1a:	93 e0       	ldi	r25, 0x03	; 3
     f1c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	09 f0       	breq	.+2      	; 0xf26 <App_update+0x32e>
     f24:	89 c0       	rjmp	.+274    	; 0x1038 <App_update+0x440>
     f26:	0f c0       	rjmp	.+30     	; 0xf46 <App_update+0x34e>
						return APP_STATUS_ERROR_NOK;
					while(u8_buttonVal == PIN_LOW)
					{
						if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <Button_updateState>
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	09 f0       	breq	.+2      	; 0xf34 <App_update+0x33c>
     f32:	84 c0       	rjmp	.+264    	; 0x103c <App_update+0x444>
							return APP_STATUS_ERROR_NOK;
						if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
     f34:	be 01       	movw	r22, r28
     f36:	66 5f       	subi	r22, 0xF6	; 246
     f38:	7e 4f       	sbci	r23, 0xFE	; 254
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Button_getState>
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	09 f0       	breq	.+2      	; 0xf46 <App_update+0x34e>
     f44:	7d c0       	rjmp	.+250    	; 0x1040 <App_update+0x448>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"Press Button ;)") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					while(u8_buttonVal == PIN_LOW)
     f46:	c6 5f       	subi	r28, 0xF6	; 246
     f48:	de 4f       	sbci	r29, 0xFE	; 254
     f4a:	88 81       	ld	r24, Y
     f4c:	ca 50       	subi	r28, 0x0A	; 10
     f4e:	d1 40       	sbci	r29, 0x01	; 1
     f50:	88 23       	and	r24, r24
     f52:	51 f3       	breq	.-44     	; 0xf28 <App_update+0x330>
						if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
						if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
					}
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	82 e1       	ldi	r24, 0x12	; 18
     f58:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
					Delay_ms(1);
     f5c:	21 e0       	ldi	r18, 0x01	; 1
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 13 10 	call	0x2026	; 0x2026 <Delay_ms>
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	82 e1       	ldi	r24, 0x12	; 18
     f74:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
					while (au8_inputString[0] != '#')
     f78:	09 c0       	rjmp	.+18     	; 0xf8c <App_update+0x394>
					{
						if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
     f7a:	6c e1       	ldi	r22, 0x1C	; 28
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	ce 01       	movw	r24, r28
     f80:	0b 96       	adiw	r24, 0x0b	; 11
     f82:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <Spi_SlaveReceivePacket>
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	09 f0       	breq	.+2      	; 0xf8c <App_update+0x394>
     f8a:	5c c0       	rjmp	.+184    	; 0x1044 <App_update+0x44c>
							return APP_STATUS_ERROR_NOK;
					}
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
					Delay_ms(1);
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
					while (au8_inputString[0] != '#')
     f8c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f8e:	83 32       	cpi	r24, 0x23	; 35
     f90:	a1 f7       	brne	.-24     	; 0xf7a <App_update+0x382>
					{
						if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
					}
					
					if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
     f92:	be 01       	movw	r22, r28
     f94:	65 5f       	subi	r22, 0xF5	; 245
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	89 e3       	ldi	r24, 0x39	; 57
     f9a:	94 e0       	ldi	r25, 0x04	; 4
     f9c:	0e 94 c0 05 	call	0xb80	; 0xb80 <AppUSER_getCardData>
     fa0:	18 2f       	mov	r17, r24
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <App_update+0x3b0>
     fa6:	50 c0       	rjmp	.+160    	; 0x1048 <App_update+0x450>
						return APP_STATUS_ERROR_NOK;
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	82 e1       	ldi	r24, 0x12	; 18
     fac:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
					Delay_ms(1);
     fb0:	21 e0       	ldi	r18, 0x01	; 1
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e0       	ldi	r20, 0x00	; 0
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 13 10 	call	0x2026	; 0x2026 <Delay_ms>
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	82 e1       	ldi	r24, 0x12	; 18
     fc8:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
					enuApp_Status_t processState = AppUSER_startProcess(&gstr_userCardData);
     fcc:	89 e3       	ldi	r24, 0x39	; 57
     fce:	94 e0       	ldi	r25, 0x04	; 4
     fd0:	0e 94 0d 04 	call	0x81a	; 0x81a <AppUSER_startProcess>
					if(processState == APP_STATUS_PAN_NOT_FOUND)
     fd4:	8a 30       	cpi	r24, 0x0A	; 10
     fd6:	39 f5       	brne	.+78     	; 0x1026 <App_update+0x42e>
					{
						Delay_ms(1000);
     fd8:	28 ee       	ldi	r18, 0xE8	; 232
     fda:	33 e0       	ldi	r19, 0x03	; 3
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 13 10 	call	0x2026	; 0x2026 <Delay_ms>
						gu8_USER_Mode_State = USER_IDLE;
     fec:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <gu8_USER_Mode_State>
						Lcd_clear();
     ff0:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
						if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	31 f5       	brne	.+76     	; 0x104c <App_update+0x454>
							return APP_STATUS_ERROR_NOK;
						if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
    1000:	80 e1       	ldi	r24, 0x10	; 16
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	11 f5       	brne	.+68     	; 0x1050 <App_update+0x458>
							return APP_STATUS_ERROR_NOK;
						if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	09 f0       	breq	.+2      	; 0x1018 <App_update+0x420>
    1016:	9e c0       	rjmp	.+316    	; 0x1154 <App_update+0x55c>
							return APP_STATUS_ERROR_OK;
						if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
    1018:	8e e1       	ldi	r24, 0x1E	; 30
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	c1 f4       	brne	.+48     	; 0x1054 <App_update+0x45c>
    1024:	7e c0       	rjmp	.+252    	; 0x1122 <App_update+0x52a>
							return APP_STATUS_ERROR_NOK;
					}else if (processState != APP_STATUS_ERROR_OK)
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	b9 f4       	brne	.+46     	; 0x1058 <App_update+0x460>
    102a:	7b c0       	rjmp	.+246    	; 0x1122 <App_update+0x52a>
					gu8_USER_Mode_State = USER_BUSY;
					uint8_t u8_buttonVal = PIN_LOW;
					uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
					Lcd_clear();
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
    102c:	11 e0       	ldi	r17, 0x01	; 1
    102e:	92 c0       	rjmp	.+292    	; 0x1154 <App_update+0x55c>
					if(Lcd_printString((uint8_t*)"Waiting for Card") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    1030:	10 e0       	ldi	r17, 0x00	; 0
    1032:	90 c0       	rjmp	.+288    	; 0x1154 <App_update+0x55c>
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
    1034:	11 e0       	ldi	r17, 0x01	; 1
    1036:	8e c0       	rjmp	.+284    	; 0x1154 <App_update+0x55c>
					if(Lcd_printString((uint8_t*)"Press Button ;)") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    1038:	10 e0       	ldi	r17, 0x00	; 0
    103a:	8c c0       	rjmp	.+280    	; 0x1154 <App_update+0x55c>
					while(u8_buttonVal == PIN_LOW)
					{
						if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    103c:	10 e0       	ldi	r17, 0x00	; 0
    103e:	8a c0       	rjmp	.+276    	; 0x1154 <App_update+0x55c>
						if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1040:	10 e0       	ldi	r17, 0x00	; 0
    1042:	88 c0       	rjmp	.+272    	; 0x1154 <App_update+0x55c>
					Delay_ms(1);
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
					while (au8_inputString[0] != '#')
					{
						if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1044:	10 e0       	ldi	r17, 0x00	; 0
    1046:	86 c0       	rjmp	.+268    	; 0x1154 <App_update+0x55c>
					}
					
					if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    1048:	10 e0       	ldi	r17, 0x00	; 0
    104a:	84 c0       	rjmp	.+264    	; 0x1154 <App_update+0x55c>
					{
						Delay_ms(1000);
						gu8_USER_Mode_State = USER_IDLE;
						Lcd_clear();
						if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    104c:	10 e0       	ldi	r17, 0x00	; 0
    104e:	82 c0       	rjmp	.+260    	; 0x1154 <App_update+0x55c>
						if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1050:	10 e0       	ldi	r17, 0x00	; 0
    1052:	80 c0       	rjmp	.+256    	; 0x1154 <App_update+0x55c>
						if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_OK;
						if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1054:	10 e0       	ldi	r17, 0x00	; 0
    1056:	7e c0       	rjmp	.+252    	; 0x1154 <App_update+0x55c>
					}else if (processState != APP_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    1058:	10 e0       	ldi	r17, 0x00	; 0
    105a:	7c c0       	rjmp	.+248    	; 0x1154 <App_update+0x55c>
			/********************************************************************************************/
			/********************************************************************************************/
			/********************************************************************************************/
			/******* Display Temp Chosen *******/
				}else if(au8_data == '2')
    105c:	82 33       	cpi	r24, 0x32	; 50
    105e:	59 f5       	brne	.+86     	; 0x10b6 <App_update+0x4be>
				{
					uint8_t u8_currentTemp=0;
    1060:	1b 86       	std	Y+11, r1	; 0x0b
					gu8_displayFlag = DISPLAY_TEMP;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <gu8_displayFlag>
					Lcd_clear();
    1068:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	e9 f4       	brne	.+58     	; 0x10b2 <App_update+0x4ba>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
    1078:	84 ec       	ldi	r24, 0xC4	; 196
    107a:	93 e0       	ldi	r25, 0x03	; 3
    107c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	b9 f4       	brne	.+46     	; 0x10b2 <App_update+0x4ba>
						return APP_STATUS_ERROR_NOK;
					if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
    1084:	ce 01       	movw	r24, r28
    1086:	0b 96       	adiw	r24, 0x0b	; 11
    1088:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <LM35_readTemp>
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	59 f4       	brne	.+22     	; 0x10a6 <App_update+0x4ae>
					{
						if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	61 f4       	brne	.+24     	; 0x10b2 <App_update+0x4ba>
						return APP_STATUS_ERROR_NOK;
						if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
    109a:	8b 85       	ldd	r24, Y+11	; 0x0b
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <Lcd_printDecimal>
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	31 f4       	brne	.+12     	; 0x10b2 <App_update+0x4ba>
						return APP_STATUS_ERROR_NOK;
					}
					if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
    10a6:	85 ed       	ldi	r24, 0xD5	; 213
    10a8:	93 e0       	ldi	r25, 0x03	; 3
    10aa:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	c1 f1       	breq	.+112    	; 0x1122 <App_update+0x52a>
				{
					uint8_t u8_currentTemp=0;
					gu8_displayFlag = DISPLAY_TEMP;
					Lcd_clear();
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    10b2:	10 e0       	ldi	r17, 0x00	; 0
    10b4:	4f c0       	rjmp	.+158    	; 0x1154 <App_update+0x55c>
						if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					}
					if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
				}else if(au8_data == '-')
    10b6:	8d 32       	cpi	r24, 0x2D	; 45
    10b8:	a1 f5       	brne	.+104    	; 0x1122 <App_update+0x52a>
				{
					gu8_displayFlag = 0;
    10ba:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <gu8_displayFlag>
					Lcd_clear();
    10be:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_clear>
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	d1 f5       	brne	.+116    	; 0x1142 <App_update+0x54a>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
    10ce:	80 e1       	ldi	r24, 0x10	; 16
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	b1 f5       	brne	.+108    	; 0x1146 <App_update+0x54e>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	99 f5       	brne	.+102    	; 0x114a <App_update+0x552>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
    10e4:	8e e1       	ldi	r24, 0x1E	; 30
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	79 f5       	brne	.+94     	; 0x114e <App_update+0x556>
    10f0:	18 c0       	rjmp	.+48     	; 0x1122 <App_update+0x52a>
						return APP_STATUS_ERROR_NOK;
				}
			}else if(gu8_displayFlag == DISPLAY_TEMP)
    10f2:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <gu8_displayFlag>
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	a1 f4       	brne	.+40     	; 0x1122 <App_update+0x52a>
			{
				uint8_t u8_currentTemp=0;
    10fa:	1b 86       	std	Y+11, r1	; 0x0b
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
    10fc:	ce 01       	movw	r24, r28
    10fe:	0b 96       	adiw	r24, 0x0b	; 11
    1100:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <LM35_readTemp>
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	69 f4       	brne	.+26     	; 0x1122 <App_update+0x52a>
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Lcd_setCursor>
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	31 f4       	brne	.+12     	; 0x111e <App_update+0x526>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
    1112:	8b 85       	ldd	r24, Y+11	; 0x0b
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <Lcd_printDecimal>
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	11 f0       	breq	.+4      	; 0x1122 <App_update+0x52a>
			{
				uint8_t u8_currentTemp=0;
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    111e:	10 e0       	ldi	r17, 0x00	; 0
    1120:	19 c0       	rjmp	.+50     	; 0x1154 <App_update+0x55c>
				}
			}
	/****************************************************************/
	}
	
	return APP_STATUS_ERROR_OK;
    1122:	11 e0       	ldi	r17, 0x01	; 1
    1124:	17 c0       	rjmp	.+46     	; 0x1154 <App_update+0x55c>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"ATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1126:	10 e0       	ldi	r17, 0x00	; 0
    1128:	15 c0       	rjmp	.+42     	; 0x1154 <App_update+0x55c>
					}else /* User Mode is Idle ==> The ATM is not used by User */
					{
						gu8_ATMMode = ATM_MODE_ADMIN;
						Lcd_clear();
						if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_OK;
    112a:	11 e0       	ldi	r17, 0x01	; 1
    112c:	13 c0       	rjmp	.+38     	; 0x1154 <App_update+0x55c>
						if(Lcd_printString((uint8_t*)"*******ATM******") != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    112e:	10 e0       	ldi	r17, 0x00	; 0
    1130:	11 c0       	rjmp	.+34     	; 0x1154 <App_update+0x55c>
						if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_OK;
    1132:	11 e0       	ldi	r17, 0x01	; 1
    1134:	0f c0       	rjmp	.+30     	; 0x1154 <App_update+0x55c>
						if(Lcd_printString((uint8_t*)"*****LOCKED*****") != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1136:	10 e0       	ldi	r17, 0x00	; 0
    1138:	0d c0       	rjmp	.+26     	; 0x1154 <App_update+0x55c>
						if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
						return APP_STATUS_ERROR_OK;
    113a:	11 e0       	ldi	r17, 0x01	; 1
    113c:	0b c0       	rjmp	.+22     	; 0x1154 <App_update+0x55c>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
    113e:	10 e0       	ldi	r17, 0x00	; 0
    1140:	09 c0       	rjmp	.+18     	; 0x1154 <App_update+0x55c>
				}else if(au8_data == '-')
				{
					gu8_displayFlag = 0;
					Lcd_clear();
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
    1142:	11 e0       	ldi	r17, 0x01	; 1
    1144:	07 c0       	rjmp	.+14     	; 0x1154 <App_update+0x55c>
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    1146:	10 e0       	ldi	r17, 0x00	; 0
    1148:	05 c0       	rjmp	.+10     	; 0x1154 <App_update+0x55c>
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
    114a:	11 e0       	ldi	r17, 0x01	; 1
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <App_update+0x55c>
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    114e:	10 e0       	ldi	r17, 0x00	; 0
    1150:	01 c0       	rjmp	.+2      	; 0x1154 <App_update+0x55c>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
    1152:	15 e0       	ldi	r17, 0x05	; 5
			}
	/****************************************************************/
	}
	
	return APP_STATUS_ERROR_OK;
}
    1154:	81 2f       	mov	r24, r17
    1156:	c0 5e       	subi	r28, 0xE0	; 224
    1158:	de 4f       	sbci	r29, 0xFE	; 254
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	08 95       	ret

0000116c <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
    116c:	0e 94 50 00 	call	0xa0	; 0xa0 <App_init>
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	39 f4       	brne	.+14     	; 0x1182 <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
    1174:	8f b7       	in	r24, 0x3f	; 63
    1176:	80 68       	ori	r24, 0x80	; 128
    1178:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
    117a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <App_update>
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	e1 f3       	breq	.-8      	; 0x117a <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
	}
}
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	08 95       	ret

00001186 <Button_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button module is already initialized */
	if (genu_BttnModuleState == BTTN_STATUS_INIT)
    1186:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <genu_BttnModuleState>
    118a:	85 30       	cpi	r24, 0x05	; 5
    118c:	71 f0       	breq	.+28     	; 0x11aa <Button_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    118e:	8a e8       	ldi	r24, 0x8A	; 138
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 a3 10 	call	0x2146	; 0x2146 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	11 f0       	breq	.+4      	; 0x119e <Button_init+0x18>
    119a:	87 30       	cpi	r24, 0x07	; 7
    119c:	29 f4       	brne	.+10     	; 0x11a8 <Button_init+0x22>
		return BTTN_STATUS_ERROR_NOK;
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
    119e:	85 e0       	ldi	r24, 0x05	; 5
    11a0:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <genu_BttnModuleState>
	return BTTN_STATUS_ERROR_OK;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return BTTN_STATUS_ERROR_NOK;
    11a8:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
	return BTTN_STATUS_ERROR_OK;
}
    11aa:	08 95       	ret

000011ac <Button_getState>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
    11ac:	82 30       	cpi	r24, 0x02	; 2
    11ae:	60 f4       	brcc	.+24     	; 0x11c8 <Button_getState+0x1c>
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
    11b0:	61 15       	cp	r22, r1
    11b2:	71 05       	cpc	r23, r1
    11b4:	59 f0       	breq	.+22     	; 0x11cc <Button_getState+0x20>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
    11b6:	e8 2f       	mov	r30, r24
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	eb 5a       	subi	r30, 0xAB	; 171
    11bc:	fb 4f       	sbci	r31, 0xFB	; 251
    11be:	80 81       	ld	r24, Z
    11c0:	fb 01       	movw	r30, r22
    11c2:	80 83       	st	Z, r24
	return BTTN_STATUS_ERROR_OK;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
	{
		return BTTN_STATUS_ERROR_NULL;
    11cc:	83 e0       	ldi	r24, 0x03	; 3
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
	return BTTN_STATUS_ERROR_OK;
}
    11ce:	08 95       	ret

000011d0 <Button_updateState>:
* Parameters (out): None
* Return value: enuBttn_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to update the state of the button (Pressed or Released) by reading the Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuBttn_Status_t Button_updateState(uint8_t u8_bttnID)
{
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	1f 92       	push	r1
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
    11de:	82 30       	cpi	r24, 0x02	; 2
    11e0:	08 f0       	brcs	.+2      	; 0x11e4 <Button_updateState+0x14>
    11e2:	58 c0       	rjmp	.+176    	; 0x1294 <Button_updateState+0xc4>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
    11e4:	19 82       	std	Y+1, r1	; 0x01
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
    11e6:	08 2f       	mov	r16, r24
    11e8:	10 e0       	ldi	r17, 0x00	; 0
    11ea:	f8 01       	movw	r30, r16
    11ec:	e8 59       	subi	r30, 0x98	; 152
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	be 01       	movw	r22, r28
    11f2:	6f 5f       	subi	r22, 0xFF	; 255
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	80 81       	ld	r24, Z
    11f8:	0e 94 82 12 	call	0x2504	; 0x2504 <Dio_readPin>
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	09 f0       	breq	.+2      	; 0x1202 <Button_updateState+0x32>
    1200:	4b c0       	rjmp	.+150    	; 0x1298 <Button_updateState+0xc8>
		return BTTN_STATUS_ERROR_NOK;
	if(u8_valueTemp == PIN_HIGH)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	09 f5       	brne	.+66     	; 0x124a <Button_updateState+0x7a>
    1208:	04 c0       	rjmp	.+8      	; 0x1212 <Button_updateState+0x42>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	a1 1d       	adc	r26, r1
    120e:	b1 1d       	adc	r27, r1
    1210:	03 c0       	rjmp	.+6      	; 0x1218 <Button_updateState+0x48>
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	dc 01       	movw	r26, r24
    1218:	88 3b       	cpi	r24, 0xB8	; 184
    121a:	2b e0       	ldi	r18, 0x0B	; 11
    121c:	92 07       	cpc	r25, r18
    121e:	a1 05       	cpc	r26, r1
    1220:	b1 05       	cpc	r27, r1
    1222:	98 f3       	brcs	.-26     	; 0x120a <Button_updateState+0x3a>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    1224:	be 01       	movw	r22, r28
    1226:	6f 5f       	subi	r22, 0xFF	; 255
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	f8 01       	movw	r30, r16
    122c:	e8 59       	subi	r30, 0x98	; 152
    122e:	ff 4f       	sbci	r31, 0xFF	; 255
    1230:	80 81       	ld	r24, Z
    1232:	0e 94 82 12 	call	0x2504	; 0x2504 <Dio_readPin>
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	89 f5       	brne	.+98     	; 0x129c <Button_updateState+0xcc>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_HIGH)
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	81 f5       	brne	.+96     	; 0x12a0 <Button_updateState+0xd0>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
    1240:	f8 01       	movw	r30, r16
    1242:	eb 5a       	subi	r30, 0xAB	; 171
    1244:	fb 4f       	sbci	r31, 0xFB	; 251
    1246:	80 83       	st	Z, r24
    1248:	30 c0       	rjmp	.+96     	; 0x12aa <Button_updateState+0xda>
	}else if (u8_valueTemp == PIN_LOW)
    124a:	88 23       	and	r24, r24
    124c:	31 f0       	breq	.+12     	; 0x125a <Button_updateState+0x8a>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	2c c0       	rjmp	.+88     	; 0x12aa <Button_updateState+0xda>
		if(u8_valueTemp == PIN_HIGH)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
	}else if (u8_valueTemp == PIN_LOW)
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	a1 1d       	adc	r26, r1
    1256:	b1 1d       	adc	r27, r1
    1258:	03 c0       	rjmp	.+6      	; 0x1260 <Button_updateState+0x90>
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	dc 01       	movw	r26, r24
    1260:	88 3b       	cpi	r24, 0xB8	; 184
    1262:	2b e0       	ldi	r18, 0x0B	; 11
    1264:	92 07       	cpc	r25, r18
    1266:	a1 05       	cpc	r26, r1
    1268:	b1 05       	cpc	r27, r1
    126a:	98 f3       	brcs	.-26     	; 0x1252 <Button_updateState+0x82>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    126c:	be 01       	movw	r22, r28
    126e:	6f 5f       	subi	r22, 0xFF	; 255
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	f8 01       	movw	r30, r16
    1274:	e8 59       	subi	r30, 0x98	; 152
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	80 81       	ld	r24, Z
    127a:	0e 94 82 12 	call	0x2504	; 0x2504 <Dio_readPin>
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	89 f4       	brne	.+34     	; 0x12a4 <Button_updateState+0xd4>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	81 11       	cpse	r24, r1
    1286:	10 c0       	rjmp	.+32     	; 0x12a8 <Button_updateState+0xd8>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
    1288:	f8 01       	movw	r30, r16
    128a:	eb 5a       	subi	r30, 0xAB	; 171
    128c:	fb 4f       	sbci	r31, 0xFB	; 251
    128e:	10 82       	st	Z, r1
	}
	return BTTN_STATUS_ERROR_OK;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	0b c0       	rjmp	.+22     	; 0x12aa <Button_updateState+0xda>
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
		return BTTN_STATUS_ERROR_ID_INVALID;
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	09 c0       	rjmp	.+18     	; 0x12aa <Button_updateState+0xda>
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
		return BTTN_STATUS_ERROR_NOK;
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	07 c0       	rjmp	.+14     	; 0x12aa <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	05 c0       	rjmp	.+10     	; 0x12aa <Button_updateState+0xda>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <Button_updateState+0xda>
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
}
    12aa:	0f 90       	pop	r0
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	08 95       	ret

000012b6 <EEPROM_getAddresses>:
* Description: Function to Calculate the slave address byte and the word address byte from the location
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
    12b6:	9a 01       	movw	r18, r20
    12b8:	22 27       	eor	r18, r18
    12ba:	37 70       	andi	r19, 0x07	; 7
    12bc:	22 0f       	add	r18, r18
    12be:	23 2f       	mov	r18, r19
    12c0:	22 1f       	adc	r18, r18
    12c2:	33 0b       	sbc	r19, r19
    12c4:	31 95       	neg	r19
    12c6:	20 65       	ori	r18, 0x50	; 80
    12c8:	fc 01       	movw	r30, r24
    12ca:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
    12cc:	fb 01       	movw	r30, r22
    12ce:	40 83       	st	Z, r20
	return EEPROM_24_STATUS_ERROR_OK;
}
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	08 95       	ret

000012d4 <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
    12d4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <genu_eepromModuleState>
    12d8:	83 30       	cpi	r24, 0x03	; 3
    12da:	51 f0       	breq	.+20     	; 0x12f0 <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
    12dc:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
    12e0:	85 30       	cpi	r24, 0x05	; 5
    12e2:	29 f0       	breq	.+10     	; 0x12ee <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
    12e4:	83 e0       	ldi	r24, 0x03	; 3
    12e6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
    12ee:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
    12f0:	08 95       	ret

000012f2 <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <Eeprom_24_writeByte+0x8>
    12fa:	1f 92       	push	r1
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	ac 01       	movw	r20, r24
    1302:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1304:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <genu_eepromModuleState>
    1308:	93 30       	cpi	r25, 0x03	; 3
    130a:	11 f5       	brne	.+68     	; 0x1350 <Eeprom_24_writeByte+0x5e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    130c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    130e:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    1310:	be 01       	movw	r22, r28
    1312:	6e 5f       	subi	r22, 0xFE	; 254
    1314:	7f 4f       	sbci	r23, 0xFF	; 255
    1316:	ce 01       	movw	r24, r28
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <EEPROM_getAddresses>
    131e:	18 2f       	mov	r17, r24
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	c1 f4       	brne	.+48     	; 0x1354 <Eeprom_24_writeByte+0x62>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    1324:	21 e0       	ldi	r18, 0x01	; 1
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	ae 01       	movw	r20, r28
    132a:	4d 5f       	subi	r20, 0xFD	; 253
    132c:	5f 4f       	sbci	r21, 0xFF	; 255
    132e:	6a 81       	ldd	r22, Y+2	; 0x02
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <I2C_MasterSendToLocation>
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	79 f4       	brne	.+30     	; 0x1358 <Eeprom_24_writeByte+0x66>
		return EEPROM_24_STATUS_ERROR_NOK;
	Delay_ms(15);
    133a:	2f e0       	ldi	r18, 0x0F	; 15
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 13 10 	call	0x2026	; 0x2026 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    134e:	05 c0       	rjmp	.+10     	; 0x135a <Eeprom_24_writeByte+0x68>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1350:	12 e0       	ldi	r17, 0x02	; 2
    1352:	03 c0       	rjmp	.+6      	; 0x135a <Eeprom_24_writeByte+0x68>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1354:	10 e0       	ldi	r17, 0x00	; 0
    1356:	01 c0       	rjmp	.+2      	; 0x135a <Eeprom_24_writeByte+0x68>
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1358:	10 e0       	ldi	r17, 0x00	; 0
	Delay_ms(15);
	return EEPROM_24_STATUS_ERROR_OK;
}
    135a:	81 2f       	mov	r24, r17
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	08 95       	ret

0000136a <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	00 d0       	rcall	.+0      	; 0x1376 <Eeprom_24_readByte+0xc>
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    137c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <genu_eepromModuleState>
    1380:	93 30       	cpi	r25, 0x03	; 3
    1382:	21 f5       	brne	.+72     	; 0x13cc <Eeprom_24_readByte+0x62>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1384:	61 15       	cp	r22, r1
    1386:	71 05       	cpc	r23, r1
    1388:	19 f1       	breq	.+70     	; 0x13d0 <Eeprom_24_readByte+0x66>
    138a:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
    138c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t word_addr=0;
    138e:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    1390:	be 01       	movw	r22, r28
    1392:	6e 5f       	subi	r22, 0xFE	; 254
    1394:	7f 4f       	sbci	r23, 0xFF	; 255
    1396:	ce 01       	movw	r24, r28
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <EEPROM_getAddresses>
    139e:	18 2f       	mov	r17, r24
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	c1 f4       	brne	.+48     	; 0x13d4 <Eeprom_24_readByte+0x6a>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    13a4:	21 e0       	ldi	r18, 0x01	; 1
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	a7 01       	movw	r20, r14
    13aa:	6a 81       	ldd	r22, Y+2	; 0x02
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <I2C_MasterReceiveFromLocation>
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	89 f4       	brne	.+34     	; 0x13d8 <Eeprom_24_readByte+0x6e>
		return EEPROM_24_STATUS_ERROR_NOK;
	Delay_ms(5);
    13b6:	25 e0       	ldi	r18, 0x05	; 5
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 13 10 	call	0x2026	; 0x2026 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    13ca:	07 c0       	rjmp	.+14     	; 0x13da <Eeprom_24_readByte+0x70>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    13cc:	12 e0       	ldi	r17, 0x02	; 2
    13ce:	05 c0       	rjmp	.+10     	; 0x13da <Eeprom_24_readByte+0x70>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    13d0:	14 e0       	ldi	r17, 0x04	; 4
    13d2:	03 c0       	rjmp	.+6      	; 0x13da <Eeprom_24_readByte+0x70>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
	uint8_t word_addr=0;
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    13d4:	10 e0       	ldi	r17, 0x00	; 0
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <Eeprom_24_readByte+0x70>
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    13d8:	10 e0       	ldi	r17, 0x00	; 0
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
    13da:	81 2f       	mov	r24, r17
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	08 95       	ret

000013ec <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <Eeprom_24_writePage+0xc>
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    13fc:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <genu_eepromModuleState>
    1400:	93 30       	cpi	r25, 0x03	; 3
    1402:	f9 f4       	brne	.+62     	; 0x1442 <Eeprom_24_writePage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1404:	61 15       	cp	r22, r1
    1406:	71 05       	cpc	r23, r1
    1408:	f1 f0       	breq	.+60     	; 0x1446 <Eeprom_24_writePage+0x5a>
    140a:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
    140c:	90 e1       	ldi	r25, 0x10	; 16
    140e:	89 9f       	mul	r24, r25
    1410:	a0 01       	movw	r20, r0
    1412:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    1414:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    1416:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    1418:	be 01       	movw	r22, r28
    141a:	6e 5f       	subi	r22, 0xFE	; 254
    141c:	7f 4f       	sbci	r23, 0xFF	; 255
    141e:	ce 01       	movw	r24, r28
    1420:	01 96       	adiw	r24, 0x01	; 1
    1422:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <EEPROM_getAddresses>
    1426:	18 2f       	mov	r17, r24
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	79 f4       	brne	.+30     	; 0x144a <Eeprom_24_writePage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    142c:	20 e1       	ldi	r18, 0x10	; 16
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	a7 01       	movw	r20, r14
    1432:	6a 81       	ldd	r22, Y+2	; 0x02
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <I2C_MasterSendToLocation>
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	39 f0       	breq	.+14     	; 0x144c <Eeprom_24_writePage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    143e:	10 e0       	ldi	r17, 0x00	; 0
    1440:	05 c0       	rjmp	.+10     	; 0x144c <Eeprom_24_writePage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1442:	12 e0       	ldi	r17, 0x02	; 2
    1444:	03 c0       	rjmp	.+6      	; 0x144c <Eeprom_24_writePage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1446:	14 e0       	ldi	r17, 0x04	; 4
    1448:	01 c0       	rjmp	.+2      	; 0x144c <Eeprom_24_writePage+0x60>
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    144a:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
    144c:	81 2f       	mov	r24, r17
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	1f 91       	pop	r17
    1458:	ff 90       	pop	r15
    145a:	ef 90       	pop	r14
    145c:	08 95       	ret

0000145e <Eeprom_24_readPage>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory page.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read data inside a specific page in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPage(uint8_t u8_page, uint8_t *pu8_data)
{
    145e:	ef 92       	push	r14
    1460:	ff 92       	push	r15
    1462:	1f 93       	push	r17
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	00 d0       	rcall	.+0      	; 0x146a <Eeprom_24_readPage+0xc>
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    146e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <genu_eepromModuleState>
    1472:	93 30       	cpi	r25, 0x03	; 3
    1474:	f9 f4       	brne	.+62     	; 0x14b4 <Eeprom_24_readPage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1476:	61 15       	cp	r22, r1
    1478:	71 05       	cpc	r23, r1
    147a:	f1 f0       	breq	.+60     	; 0x14b8 <Eeprom_24_readPage+0x5a>
    147c:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
    147e:	90 e1       	ldi	r25, 0x10	; 16
    1480:	89 9f       	mul	r24, r25
    1482:	a0 01       	movw	r20, r0
    1484:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    1486:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    1488:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    148a:	be 01       	movw	r22, r28
    148c:	6e 5f       	subi	r22, 0xFE	; 254
    148e:	7f 4f       	sbci	r23, 0xFF	; 255
    1490:	ce 01       	movw	r24, r28
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <EEPROM_getAddresses>
    1498:	18 2f       	mov	r17, r24
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	79 f4       	brne	.+30     	; 0x14bc <Eeprom_24_readPage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    149e:	20 e1       	ldi	r18, 0x10	; 16
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	a7 01       	movw	r20, r14
    14a4:	6a 81       	ldd	r22, Y+2	; 0x02
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <I2C_MasterReceiveFromLocation>
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	39 f0       	breq	.+14     	; 0x14be <Eeprom_24_readPage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    14b0:	10 e0       	ldi	r17, 0x00	; 0
    14b2:	05 c0       	rjmp	.+10     	; 0x14be <Eeprom_24_readPage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    14b4:	12 e0       	ldi	r17, 0x02	; 2
    14b6:	03 c0       	rjmp	.+6      	; 0x14be <Eeprom_24_readPage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    14b8:	14 e0       	ldi	r17, 0x04	; 4
    14ba:	01 c0       	rjmp	.+2      	; 0x14be <Eeprom_24_readPage+0x60>
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    14bc:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
    14be:	81 2f       	mov	r24, r17
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	ff 90       	pop	r15
    14cc:	ef 90       	pop	r14
    14ce:	08 95       	ret

000014d0 <Eeprom_24_writePacket>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Multiple data bytes to a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    14d0:	6f 92       	push	r6
    14d2:	7f 92       	push	r7
    14d4:	8f 92       	push	r8
    14d6:	9f 92       	push	r9
    14d8:	af 92       	push	r10
    14da:	bf 92       	push	r11
    14dc:	cf 92       	push	r12
    14de:	df 92       	push	r13
    14e0:	ef 92       	push	r14
    14e2:	ff 92       	push	r15
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <Eeprom_24_writePacket+0x1e>
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	5c 01       	movw	r10, r24
    14f4:	6b 01       	movw	r12, r22
    14f6:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    14f8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <genu_eepromModuleState>
    14fc:	83 30       	cpi	r24, 0x03	; 3
    14fe:	09 f0       	breq	.+2      	; 0x1502 <Eeprom_24_writePacket+0x32>
    1500:	a1 c0       	rjmp	.+322    	; 0x1644 <Eeprom_24_writePacket+0x174>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1502:	67 2b       	or	r22, r23
    1504:	09 f4       	brne	.+2      	; 0x1508 <Eeprom_24_writePacket+0x38>
    1506:	a0 c0       	rjmp	.+320    	; 0x1648 <Eeprom_24_writePacket+0x178>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    1508:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    150a:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    150c:	a5 01       	movw	r20, r10
    150e:	be 01       	movw	r22, r28
    1510:	6e 5f       	subi	r22, 0xFE	; 254
    1512:	7f 4f       	sbci	r23, 0xFF	; 255
    1514:	ce 01       	movw	r24, r28
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <EEPROM_getAddresses>
    151c:	18 2f       	mov	r17, r24
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	09 f0       	breq	.+2      	; 0x1524 <Eeprom_24_writePacket+0x54>
    1522:	94 c0       	rjmp	.+296    	; 0x164c <Eeprom_24_writePacket+0x17c>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & 0x7F0)>>4;
    1524:	45 01       	movw	r8, r10
    1526:	80 ef       	ldi	r24, 0xF0	; 240
    1528:	88 22       	and	r8, r24
    152a:	87 e0       	ldi	r24, 0x07	; 7
    152c:	98 22       	and	r9, r24
    152e:	96 94       	lsr	r9
    1530:	87 94       	ror	r8
    1532:	96 94       	lsr	r9
    1534:	87 94       	ror	r8
    1536:	96 94       	lsr	r9
    1538:	87 94       	ror	r8
    153a:	96 94       	lsr	r9
    153c:	87 94       	ror	r8
    153e:	68 2c       	mov	r6, r8
	uint8_t u8_byteOffset = u16_location & 0x00F;
    1540:	8a 2d       	mov	r24, r10
    1542:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
    1544:	51 f1       	breq	.+84     	; 0x159a <Eeprom_24_writePacket+0xca>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    1546:	90 e1       	ldi	r25, 0x10	; 16
    1548:	a9 2e       	mov	r10, r25
    154a:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    154c:	b1 2c       	mov	r11, r1
    154e:	ea 14       	cp	r14, r10
    1550:	fb 04       	cpc	r15, r11
    1552:	58 f4       	brcc	.+22     	; 0x156a <Eeprom_24_writePacket+0x9a>
		{
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1554:	97 01       	movw	r18, r14
    1556:	a6 01       	movw	r20, r12
    1558:	6a 81       	ldd	r22, Y+2	; 0x02
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <I2C_MasterSendToLocation>
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	09 f4       	brne	.+2      	; 0x1566 <Eeprom_24_writePacket+0x96>
    1564:	7c c0       	rjmp	.+248    	; 0x165e <Eeprom_24_writePacket+0x18e>
				return EEPROM_24_STATUS_ERROR_NOK;
    1566:	10 e0       	ldi	r17, 0x00	; 0
    1568:	7a c0       	rjmp	.+244    	; 0x165e <Eeprom_24_writePacket+0x18e>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    156a:	95 01       	movw	r18, r10
    156c:	a6 01       	movw	r20, r12
    156e:	6a 81       	ldd	r22, Y+2	; 0x02
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <I2C_MasterSendToLocation>
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	09 f0       	breq	.+2      	; 0x157c <Eeprom_24_writePacket+0xac>
    157a:	6a c0       	rjmp	.+212    	; 0x1650 <Eeprom_24_writePacket+0x180>
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    157c:	ea 18       	sub	r14, r10
    157e:	fb 08       	sbc	r15, r11
		i=1;
		Delay_ms(15);
    1580:	2f e0       	ldi	r18, 0x0F	; 15
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 13 10 	call	0x2026	; 0x2026 <Delay_ms>
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
    1594:	77 24       	eor	r7, r7
    1596:	73 94       	inc	r7
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <Eeprom_24_writePacket+0xd0>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
    159a:	71 2c       	mov	r7, r1
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
    159c:	a1 2c       	mov	r10, r1
    159e:	b1 2c       	mov	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
    15a0:	c7 01       	movw	r24, r14
    15a2:	92 95       	swap	r25
    15a4:	82 95       	swap	r24
    15a6:	8f 70       	andi	r24, 0x0F	; 15
    15a8:	89 27       	eor	r24, r25
    15aa:	9f 70       	andi	r25, 0x0F	; 15
    15ac:	89 27       	eor	r24, r25
    15ae:	08 2f       	mov	r16, r24
	while (pages_num > 0)
    15b0:	1c c0       	rjmp	.+56     	; 0x15ea <Eeprom_24_writePacket+0x11a>
	{
		pages_num--;
    15b2:	01 50       	subi	r16, 0x01	; 1
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    15b4:	b6 01       	movw	r22, r12
    15b6:	6a 0d       	add	r22, r10
    15b8:	7b 1d       	adc	r23, r11
    15ba:	87 2d       	mov	r24, r7
    15bc:	86 0d       	add	r24, r6
    15be:	0e 94 f6 09 	call	0x13ec	; 0x13ec <Eeprom_24_writePage>
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <Eeprom_24_writePacket+0xf8>
    15c6:	46 c0       	rjmp	.+140    	; 0x1654 <Eeprom_24_writePacket+0x184>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    15c8:	73 94       	inc	r7
		u16_dataLen -= 16;
    15ca:	80 e1       	ldi	r24, 0x10	; 16
    15cc:	e8 1a       	sub	r14, r24
    15ce:	f1 08       	sbc	r15, r1
		u8_dataIndex += 16;
    15d0:	80 e1       	ldi	r24, 0x10	; 16
    15d2:	a8 0e       	add	r10, r24
    15d4:	b1 1c       	adc	r11, r1
		Delay_ms(15);
    15d6:	2f e0       	ldi	r18, 0x0F	; 15
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e0       	ldi	r20, 0x00	; 0
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	0e 94 13 10 	call	0x2026	; 0x2026 <Delay_ms>
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
    15ea:	10 16       	cp	r1, r16
    15ec:	14 f3       	brlt	.-60     	; 0x15b2 <Eeprom_24_writePacket+0xe2>
		u16_dataLen -= 16;
		u8_dataIndex += 16;
		Delay_ms(15);
	}
	
	if (u16_dataLen > 0)
    15ee:	e1 14       	cp	r14, r1
    15f0:	f1 04       	cpc	r15, r1
    15f2:	a9 f1       	breq	.+106    	; 0x165e <Eeprom_24_writePacket+0x18e>
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << 4;
    15f4:	a4 01       	movw	r20, r8
    15f6:	47 0d       	add	r20, r7
    15f8:	51 1d       	adc	r21, r1
    15fa:	42 95       	swap	r20
    15fc:	52 95       	swap	r21
    15fe:	50 7f       	andi	r21, 0xF0	; 240
    1600:	54 27       	eor	r21, r20
    1602:	40 7f       	andi	r20, 0xF0	; 240
    1604:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
    1606:	be 01       	movw	r22, r28
    1608:	6e 5f       	subi	r22, 0xFE	; 254
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	ce 01       	movw	r24, r28
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <EEPROM_getAddresses>
    1614:	18 2f       	mov	r17, r24
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	f9 f4       	brne	.+62     	; 0x1658 <Eeprom_24_writePacket+0x188>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    161a:	a6 01       	movw	r20, r12
    161c:	4a 0d       	add	r20, r10
    161e:	5b 1d       	adc	r21, r11
    1620:	97 01       	movw	r18, r14
    1622:	6a 81       	ldd	r22, Y+2	; 0x02
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <I2C_MasterSendToLocation>
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	b9 f4       	brne	.+46     	; 0x165c <Eeprom_24_writePacket+0x18c>
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
    162e:	2f e0       	ldi	r18, 0x0F	; 15
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e0       	ldi	r20, 0x00	; 0
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 13 10 	call	0x2026	; 0x2026 <Delay_ms>
    1642:	0d c0       	rjmp	.+26     	; 0x165e <Eeprom_24_writePacket+0x18e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1644:	12 e0       	ldi	r17, 0x02	; 2
    1646:	0b c0       	rjmp	.+22     	; 0x165e <Eeprom_24_writePacket+0x18e>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1648:	14 e0       	ldi	r17, 0x04	; 4
    164a:	09 c0       	rjmp	.+18     	; 0x165e <Eeprom_24_writePacket+0x18e>
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    164c:	10 e0       	ldi	r17, 0x00	; 0
    164e:	07 c0       	rjmp	.+14     	; 0x165e <Eeprom_24_writePacket+0x18e>
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1650:	10 e0       	ldi	r17, 0x00	; 0
    1652:	05 c0       	rjmp	.+10     	; 0x165e <Eeprom_24_writePacket+0x18e>
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
	{
		pages_num--;
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1654:	10 e0       	ldi	r17, 0x00	; 0
    1656:	03 c0       	rjmp	.+6      	; 0x165e <Eeprom_24_writePacket+0x18e>
	
	if (u16_dataLen > 0)
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << 4;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1658:	10 e0       	ldi	r17, 0x00	; 0
    165a:	01 c0       	rjmp	.+2      	; 0x165e <Eeprom_24_writePacket+0x18e>
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    165c:	10 e0       	ldi	r17, 0x00	; 0
		Delay_ms(15);
	}
	return EEPROM_24_STATUS_ERROR_OK;
}
    165e:	81 2f       	mov	r24, r17
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	ff 90       	pop	r15
    166e:	ef 90       	pop	r14
    1670:	df 90       	pop	r13
    1672:	cf 90       	pop	r12
    1674:	bf 90       	pop	r11
    1676:	af 90       	pop	r10
    1678:	9f 90       	pop	r9
    167a:	8f 90       	pop	r8
    167c:	7f 90       	pop	r7
    167e:	6f 90       	pop	r6
    1680:	08 95       	ret

00001682 <Eeprom_24_readPacket>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read Multiple data bytes from a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    1682:	6f 92       	push	r6
    1684:	7f 92       	push	r7
    1686:	8f 92       	push	r8
    1688:	9f 92       	push	r9
    168a:	af 92       	push	r10
    168c:	bf 92       	push	r11
    168e:	cf 92       	push	r12
    1690:	df 92       	push	r13
    1692:	ef 92       	push	r14
    1694:	ff 92       	push	r15
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <Eeprom_24_readPacket+0x1e>
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	5c 01       	movw	r10, r24
    16a6:	6b 01       	movw	r12, r22
    16a8:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    16aa:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <genu_eepromModuleState>
    16ae:	83 30       	cpi	r24, 0x03	; 3
    16b0:	09 f0       	breq	.+2      	; 0x16b4 <Eeprom_24_readPacket+0x32>
    16b2:	84 c0       	rjmp	.+264    	; 0x17bc <Eeprom_24_readPacket+0x13a>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    16b4:	67 2b       	or	r22, r23
    16b6:	09 f4       	brne	.+2      	; 0x16ba <Eeprom_24_readPacket+0x38>
    16b8:	83 c0       	rjmp	.+262    	; 0x17c0 <Eeprom_24_readPacket+0x13e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    16ba:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    16bc:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t u16dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    16be:	a5 01       	movw	r20, r10
    16c0:	be 01       	movw	r22, r28
    16c2:	6e 5f       	subi	r22, 0xFE	; 254
    16c4:	7f 4f       	sbci	r23, 0xFF	; 255
    16c6:	ce 01       	movw	r24, r28
    16c8:	01 96       	adiw	r24, 0x01	; 1
    16ca:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <EEPROM_getAddresses>
    16ce:	18 2f       	mov	r17, r24
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <Eeprom_24_readPacket+0x54>
    16d4:	77 c0       	rjmp	.+238    	; 0x17c4 <Eeprom_24_readPacket+0x142>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & 0x7F0)>>4;		//The first page to write in
    16d6:	45 01       	movw	r8, r10
    16d8:	80 ef       	ldi	r24, 0xF0	; 240
    16da:	88 22       	and	r8, r24
    16dc:	87 e0       	ldi	r24, 0x07	; 7
    16de:	98 22       	and	r9, r24
    16e0:	96 94       	lsr	r9
    16e2:	87 94       	ror	r8
    16e4:	96 94       	lsr	r9
    16e6:	87 94       	ror	r8
    16e8:	96 94       	lsr	r9
    16ea:	87 94       	ror	r8
    16ec:	96 94       	lsr	r9
    16ee:	87 94       	ror	r8
    16f0:	78 2c       	mov	r7, r8
	uint8_t u8_byteOffset = u16_location & 0x00F;
    16f2:	8a 2d       	mov	r24, r10
    16f4:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
    16f6:	f9 f0       	breq	.+62     	; 0x1736 <Eeprom_24_readPacket+0xb4>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    16f8:	90 e1       	ldi	r25, 0x10	; 16
    16fa:	a9 2e       	mov	r10, r25
    16fc:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    16fe:	b1 2c       	mov	r11, r1
    1700:	ea 14       	cp	r14, r10
    1702:	fb 04       	cpc	r15, r11
    1704:	58 f4       	brcc	.+22     	; 0x171c <Eeprom_24_readPacket+0x9a>
		{
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    1706:	95 01       	movw	r18, r10
    1708:	a6 01       	movw	r20, r12
    170a:	6a 81       	ldd	r22, Y+2	; 0x02
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <I2C_MasterReceiveFromLocation>
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	09 f4       	brne	.+2      	; 0x1718 <Eeprom_24_readPacket+0x96>
    1716:	5d c0       	rjmp	.+186    	; 0x17d2 <Eeprom_24_readPacket+0x150>
				return EEPROM_24_STATUS_ERROR_NOK;
    1718:	10 e0       	ldi	r17, 0x00	; 0
    171a:	5b c0       	rjmp	.+182    	; 0x17d2 <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    171c:	95 01       	movw	r18, r10
    171e:	a6 01       	movw	r20, r12
    1720:	6a 81       	ldd	r22, Y+2	; 0x02
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <I2C_MasterReceiveFromLocation>
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	09 f0       	breq	.+2      	; 0x172e <Eeprom_24_readPacket+0xac>
    172c:	4d c0       	rjmp	.+154    	; 0x17c8 <Eeprom_24_readPacket+0x146>
			return EEPROM_24_STATUS_ERROR_NOK;
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    172e:	ea 18       	sub	r14, r10
    1730:	fb 08       	sbc	r15, r11
		i=1;
    1732:	01 e0       	ldi	r16, 0x01	; 1
    1734:	03 c0       	rjmp	.+6      	; 0x173c <Eeprom_24_readPacket+0xba>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
    1736:	00 e0       	ldi	r16, 0x00	; 0
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
    1738:	a1 2c       	mov	r10, r1
    173a:	b1 2c       	mov	r11, r1
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
    173c:	c7 01       	movw	r24, r14
    173e:	92 95       	swap	r25
    1740:	82 95       	swap	r24
    1742:	8f 70       	andi	r24, 0x0F	; 15
    1744:	89 27       	eor	r24, r25
    1746:	9f 70       	andi	r25, 0x0F	; 15
    1748:	89 27       	eor	r24, r25
	while (pages_num--)
    174a:	11 c0       	rjmp	.+34     	; 0x176e <Eeprom_24_readPacket+0xec>
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    174c:	b6 01       	movw	r22, r12
    174e:	6a 0d       	add	r22, r10
    1750:	7b 1d       	adc	r23, r11
    1752:	80 2f       	mov	r24, r16
    1754:	87 0d       	add	r24, r7
    1756:	0e 94 2f 0a 	call	0x145e	; 0x145e <Eeprom_24_readPage>
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	b9 f5       	brne	.+110    	; 0x17cc <Eeprom_24_readPacket+0x14a>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    175e:	0f 5f       	subi	r16, 0xFF	; 255
		u16_dataLen -= 16;
    1760:	80 e1       	ldi	r24, 0x10	; 16
    1762:	e8 1a       	sub	r14, r24
    1764:	f1 08       	sbc	r15, r1
		u16dataIndex += 16;
    1766:	80 e1       	ldi	r24, 0x10	; 16
    1768:	a8 0e       	add	r10, r24
    176a:	b1 1c       	adc	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
    176c:	86 2d       	mov	r24, r6
    176e:	66 24       	eor	r6, r6
    1770:	6a 94       	dec	r6
    1772:	68 0e       	add	r6, r24
    1774:	81 11       	cpse	r24, r1
    1776:	ea cf       	rjmp	.-44     	; 0x174c <Eeprom_24_readPacket+0xca>
		i++;
		u16_dataLen -= 16;
		u16dataIndex += 16;
	}

	if (u16_dataLen > 0)
    1778:	e1 14       	cp	r14, r1
    177a:	f1 04       	cpc	r15, r1
    177c:	51 f1       	breq	.+84     	; 0x17d2 <Eeprom_24_readPacket+0x150>
	{
		uint16_t new_location = (u8_pageStart + i) << 4;
    177e:	a4 01       	movw	r20, r8
    1780:	40 0f       	add	r20, r16
    1782:	51 1d       	adc	r21, r1
    1784:	42 95       	swap	r20
    1786:	52 95       	swap	r21
    1788:	50 7f       	andi	r21, 0xF0	; 240
    178a:	54 27       	eor	r21, r20
    178c:	40 7f       	andi	r20, 0xF0	; 240
    178e:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
    1790:	be 01       	movw	r22, r28
    1792:	6e 5f       	subi	r22, 0xFE	; 254
    1794:	7f 4f       	sbci	r23, 0xFF	; 255
    1796:	ce 01       	movw	r24, r28
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <EEPROM_getAddresses>
    179e:	18 2f       	mov	r17, r24
    17a0:	81 30       	cpi	r24, 0x01	; 1
    17a2:	b1 f4       	brne	.+44     	; 0x17d0 <Eeprom_24_readPacket+0x14e>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    17a4:	a6 01       	movw	r20, r12
    17a6:	4a 0d       	add	r20, r10
    17a8:	5b 1d       	adc	r21, r11
    17aa:	97 01       	movw	r18, r14
    17ac:	6a 81       	ldd	r22, Y+2	; 0x02
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <I2C_MasterReceiveFromLocation>
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	69 f0       	breq	.+26     	; 0x17d2 <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_NOK;
    17b8:	10 e0       	ldi	r17, 0x00	; 0
    17ba:	0b c0       	rjmp	.+22     	; 0x17d2 <Eeprom_24_readPacket+0x150>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    17bc:	12 e0       	ldi	r17, 0x02	; 2
    17be:	09 c0       	rjmp	.+18     	; 0x17d2 <Eeprom_24_readPacket+0x150>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    17c0:	14 e0       	ldi	r17, 0x04	; 4
    17c2:	07 c0       	rjmp	.+14     	; 0x17d2 <Eeprom_24_readPacket+0x150>
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    17c4:	10 e0       	ldi	r17, 0x00	; 0
    17c6:	05 c0       	rjmp	.+10     	; 0x17d2 <Eeprom_24_readPacket+0x150>
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    17c8:	10 e0       	ldi	r17, 0x00	; 0
    17ca:	03 c0       	rjmp	.+6      	; 0x17d2 <Eeprom_24_readPacket+0x150>
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    17cc:	10 e0       	ldi	r17, 0x00	; 0
    17ce:	01 c0       	rjmp	.+2      	; 0x17d2 <Eeprom_24_readPacket+0x150>

	if (u16_dataLen > 0)
	{
		uint16_t new_location = (u8_pageStart + i) << 4;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    17d0:	10 e0       	ldi	r17, 0x00	; 0
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
	return EEPROM_24_STATUS_ERROR_OK;
    17d2:	81 2f       	mov	r24, r17
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	df 90       	pop	r13
    17e6:	cf 90       	pop	r12
    17e8:	bf 90       	pop	r11
    17ea:	af 90       	pop	r10
    17ec:	9f 90       	pop	r9
    17ee:	8f 90       	pop	r8
    17f0:	7f 90       	pop	r7
    17f2:	6f 90       	pop	r6
    17f4:	08 95       	ret

000017f6 <Keypad_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is already initialized */
	if (genu_KeypadModuleState == KEYPAD_STATUS_INIT)
    17f6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <genu_KeypadModuleState>
    17fa:	85 30       	cpi	r24, 0x05	; 5
    17fc:	71 f0       	breq	.+28     	; 0x181a <Keypad_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    17fe:	8a e8       	ldi	r24, 0x8A	; 138
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 a3 10 	call	0x2146	; 0x2146 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	11 f0       	breq	.+4      	; 0x180e <Keypad_init+0x18>
    180a:	87 30       	cpi	r24, 0x07	; 7
    180c:	29 f4       	brne	.+10     	; 0x1818 <Keypad_init+0x22>
		return KEYPAD_STATUS_ERROR_NOK;
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
    180e:	85 e0       	ldi	r24, 0x05	; 5
    1810:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <genu_KeypadModuleState>
	return KEYPAD_STATUS_ERROR_OK;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return KEYPAD_STATUS_ERROR_NOK;
    1818:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
	return KEYPAD_STATUS_ERROR_OK;
}
    181a:	08 95       	ret

0000181c <Keypad_readKey>:
* Parameters (out): pu8_pressedKey - Pointer to a Char to hold the pressed key.
* Return value: enuKeypad_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current pressed Key.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuKeypad_Status_t Keypad_readKey(uint8_t * pu8_pressedKey)
{
    181c:	af 92       	push	r10
    181e:	bf 92       	push	r11
    1820:	cf 92       	push	r12
    1822:	df 92       	push	r13
    1824:	ef 92       	push	r14
    1826:	ff 92       	push	r15
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	1f 92       	push	r1
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	6c 01       	movw	r12, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
    1838:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <genu_KeypadModuleState>
    183c:	95 30       	cpi	r25, 0x05	; 5
    183e:	09 f0       	breq	.+2      	; 0x1842 <Keypad_readKey+0x26>
    1840:	50 c0       	rjmp	.+160    	; 0x18e2 <Keypad_readKey+0xc6>
	{
		return KEYPAD_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
    1842:	c1 14       	cp	r12, r1
    1844:	d1 04       	cpc	r13, r1
    1846:	09 f4       	brne	.+2      	; 0x184a <Keypad_readKey+0x2e>
    1848:	4e c0       	rjmp	.+156    	; 0x18e6 <Keypad_readKey+0xca>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	89 83       	std	Y+1, r24	; 0x01
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    184e:	00 e0       	ldi	r16, 0x00	; 0
    1850:	43 c0       	rjmp	.+134    	; 0x18d8 <Keypad_readKey+0xbc>
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
    1852:	a0 2e       	mov	r10, r16
    1854:	b1 2c       	mov	r11, r1
    1856:	f5 01       	movw	r30, r10
    1858:	e1 58       	subi	r30, 0x81	; 129
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    1864:	81 30       	cpi	r24, 0x01	; 1
    1866:	09 f0       	breq	.+2      	; 0x186a <Keypad_readKey+0x4e>
    1868:	40 c0       	rjmp	.+128    	; 0x18ea <Keypad_readKey+0xce>
    186a:	10 e0       	ldi	r17, 0x00	; 0
    186c:	29 c0       	rjmp	.+82     	; 0x18c0 <Keypad_readKey+0xa4>
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
    186e:	e1 2e       	mov	r14, r17
    1870:	f1 2c       	mov	r15, r1
    1872:	f7 01       	movw	r30, r14
    1874:	e5 58       	subi	r30, 0x85	; 133
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	be 01       	movw	r22, r28
    187a:	6f 5f       	subi	r22, 0xFF	; 255
    187c:	7f 4f       	sbci	r23, 0xFF	; 255
    187e:	80 81       	ld	r24, Z
    1880:	0e 94 82 12 	call	0x2504	; 0x2504 <Dio_readPin>
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	99 f5       	brne	.+102    	; 0x18ee <Keypad_readKey+0xd2>
				return KEYPAD_STATUS_ERROR_NOK;
			if(u8_pinValue == PIN_LOW)
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	81 11       	cpse	r24, r1
    188c:	18 c0       	rjmp	.+48     	; 0x18be <Keypad_readKey+0xa2>
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	f5 01       	movw	r30, r10
    1892:	e1 58       	subi	r30, 0x81	; 129
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	80 81       	ld	r24, Z
    1898:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	49 f5       	brne	.+82     	; 0x18f2 <Keypad_readKey+0xd6>
					return KEYPAD_STATUS_ERROR_NOK;
				*pu8_pressedKey = gau8_ButtonSymbols[u8_RowIndex][u8_ColumnIndex];
    18a0:	97 01       	movw	r18, r14
    18a2:	22 0f       	add	r18, r18
    18a4:	33 1f       	adc	r19, r19
    18a6:	22 0f       	add	r18, r18
    18a8:	33 1f       	adc	r19, r19
    18aa:	25 59       	subi	r18, 0x95	; 149
    18ac:	3f 4f       	sbci	r19, 0xFF	; 255
    18ae:	f9 01       	movw	r30, r18
    18b0:	ea 0d       	add	r30, r10
    18b2:	fb 1d       	adc	r31, r11
    18b4:	80 81       	ld	r24, Z
    18b6:	f6 01       	movw	r30, r12
    18b8:	80 83       	st	Z, r24
				return KEYPAD_STATUS_PRESSED;
    18ba:	86 e0       	ldi	r24, 0x06	; 6
    18bc:	1d c0       	rjmp	.+58     	; 0x18f8 <Keypad_readKey+0xdc>
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
    18be:	1f 5f       	subi	r17, 0xFF	; 255
    18c0:	14 30       	cpi	r17, 0x04	; 4
    18c2:	a8 f2       	brcs	.-86     	; 0x186e <Keypad_readKey+0x52>
				return KEYPAD_STATUS_PRESSED;
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    18c4:	f5 01       	movw	r30, r10
    18c6:	e1 58       	subi	r30, 0x81	; 129
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	61 e0       	ldi	r22, 0x01	; 1
    18cc:	80 81       	ld	r24, Z
    18ce:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    18d2:	81 30       	cpi	r24, 0x01	; 1
    18d4:	81 f4       	brne	.+32     	; 0x18f6 <Keypad_readKey+0xda>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    18d6:	0f 5f       	subi	r16, 0xFF	; 255
    18d8:	04 30       	cpi	r16, 0x04	; 4
    18da:	08 f4       	brcc	.+2      	; 0x18de <Keypad_readKey+0xc2>
    18dc:	ba cf       	rjmp	.-140    	; 0x1852 <Keypad_readKey+0x36>
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    18de:	87 e0       	ldi	r24, 0x07	; 7
    18e0:	0b c0       	rjmp	.+22     	; 0x18f8 <Keypad_readKey+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
	{
		return KEYPAD_STATUS_NOT_INIT;
    18e2:	84 e0       	ldi	r24, 0x04	; 4
    18e4:	09 c0       	rjmp	.+18     	; 0x18f8 <Keypad_readKey+0xdc>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
	{
		return KEYPAD_STATUS_ERROR_NULL;
    18e6:	83 e0       	ldi	r24, 0x03	; 3
    18e8:	07 c0       	rjmp	.+14     	; 0x18f8 <Keypad_readKey+0xdc>
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	05 c0       	rjmp	.+10     	; 0x18f8 <Keypad_readKey+0xdc>
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
				return KEYPAD_STATUS_ERROR_NOK;
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <Keypad_readKey+0xdc>
			if(u8_pinValue == PIN_LOW)
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
					return KEYPAD_STATUS_ERROR_NOK;
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	01 c0       	rjmp	.+2      	; 0x18f8 <Keypad_readKey+0xdc>
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    18f6:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    18f8:	0f 90       	pop	r0
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	ff 90       	pop	r15
    1904:	ef 90       	pop	r14
    1906:	df 90       	pop	r13
    1908:	cf 90       	pop	r12
    190a:	bf 90       	pop	r11
    190c:	af 90       	pop	r10
    190e:	08 95       	ret

00001910 <Lcd_WriteData>:
{
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, BIN);
	Lcd_printString(au8_snum);
	return LCD_STATUS_ERROR_OK;
}
    1910:	cf 93       	push	r28
    1912:	c8 2f       	mov	r28, r24
    1914:	80 ff       	sbrs	r24, 0
    1916:	05 c0       	rjmp	.+10     	; 0x1922 <Lcd_WriteData+0x12>
    1918:	61 e0       	ldi	r22, 0x01	; 1
    191a:	8a e0       	ldi	r24, 0x0A	; 10
    191c:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    1920:	04 c0       	rjmp	.+8      	; 0x192a <Lcd_WriteData+0x1a>
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	8a e0       	ldi	r24, 0x0A	; 10
    1926:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    192a:	c1 ff       	sbrs	r28, 1
    192c:	05 c0       	rjmp	.+10     	; 0x1938 <Lcd_WriteData+0x28>
    192e:	61 e0       	ldi	r22, 0x01	; 1
    1930:	8b e0       	ldi	r24, 0x0B	; 11
    1932:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    1936:	04 c0       	rjmp	.+8      	; 0x1940 <Lcd_WriteData+0x30>
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	8b e0       	ldi	r24, 0x0B	; 11
    193c:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    1940:	c2 ff       	sbrs	r28, 2
    1942:	05 c0       	rjmp	.+10     	; 0x194e <Lcd_WriteData+0x3e>
    1944:	61 e0       	ldi	r22, 0x01	; 1
    1946:	8c e0       	ldi	r24, 0x0C	; 12
    1948:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    194c:	04 c0       	rjmp	.+8      	; 0x1956 <Lcd_WriteData+0x46>
    194e:	60 e0       	ldi	r22, 0x00	; 0
    1950:	8c e0       	ldi	r24, 0x0C	; 12
    1952:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    1956:	c3 ff       	sbrs	r28, 3
    1958:	05 c0       	rjmp	.+10     	; 0x1964 <Lcd_WriteData+0x54>
    195a:	61 e0       	ldi	r22, 0x01	; 1
    195c:	8d e0       	ldi	r24, 0x0D	; 13
    195e:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    1962:	04 c0       	rjmp	.+8      	; 0x196c <Lcd_WriteData+0x5c>
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	8d e0       	ldi	r24, 0x0D	; 13
    1968:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    196c:	cf 91       	pop	r28
    196e:	08 95       	ret

00001970 <Lcd_EnableToggle>:
    1970:	61 e0       	ldi	r22, 0x01	; 1
    1972:	89 e0       	ldi	r24, 0x09	; 9
    1974:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    1978:	21 e0       	ldi	r18, 0x01	; 1
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 13 10 	call	0x2026	; 0x2026 <Delay_ms>
    198c:	60 e0       	ldi	r22, 0x00	; 0
    198e:	89 e0       	ldi	r24, 0x09	; 9
    1990:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    1994:	08 95       	ret

00001996 <Lcd_sendCommand>:
    1996:	cf 93       	push	r28
    1998:	c8 2f       	mov	r28, r24
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	87 e0       	ldi	r24, 0x07	; 7
    199e:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    19a2:	8c 2f       	mov	r24, r28
    19a4:	82 95       	swap	r24
    19a6:	8f 70       	andi	r24, 0x0F	; 15
    19a8:	0e 94 88 0c 	call	0x1910	; 0x1910 <Lcd_WriteData>
    19ac:	0e 94 b8 0c 	call	0x1970	; 0x1970 <Lcd_EnableToggle>
    19b0:	8c 2f       	mov	r24, r28
    19b2:	8f 70       	andi	r24, 0x0F	; 15
    19b4:	0e 94 88 0c 	call	0x1910	; 0x1910 <Lcd_WriteData>
    19b8:	0e 94 b8 0c 	call	0x1970	; 0x1970 <Lcd_EnableToggle>
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	cf 91       	pop	r28
    19c0:	08 95       	ret

000019c2 <Lcd_init>:
    19c2:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <genu_LcdModuleState>
    19c6:	86 30       	cpi	r24, 0x06	; 6
    19c8:	59 f1       	breq	.+86     	; 0x1a20 <Lcd_init+0x5e>
    19ca:	8a e8       	ldi	r24, 0x8A	; 138
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	0e 94 a3 10 	call	0x2146	; 0x2146 <Dio_init>
    19d2:	81 30       	cpi	r24, 0x01	; 1
    19d4:	11 f0       	breq	.+4      	; 0x19da <Lcd_init+0x18>
    19d6:	87 30       	cpi	r24, 0x07	; 7
    19d8:	11 f5       	brne	.+68     	; 0x1a1e <Lcd_init+0x5c>
    19da:	60 e0       	ldi	r22, 0x00	; 0
    19dc:	87 e0       	ldi	r24, 0x07	; 7
    19de:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    19e2:	60 e0       	ldi	r22, 0x00	; 0
    19e4:	89 e0       	ldi	r24, 0x09	; 9
    19e6:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    19ea:	83 e3       	ldi	r24, 0x33	; 51
    19ec:	0e 94 cb 0c 	call	0x1996	; 0x1996 <Lcd_sendCommand>
    19f0:	82 e3       	ldi	r24, 0x32	; 50
    19f2:	0e 94 cb 0c 	call	0x1996	; 0x1996 <Lcd_sendCommand>
    19f6:	88 e2       	ldi	r24, 0x28	; 40
    19f8:	0e 94 cb 0c 	call	0x1996	; 0x1996 <Lcd_sendCommand>
    19fc:	88 e0       	ldi	r24, 0x08	; 8
    19fe:	0e 94 cb 0c 	call	0x1996	; 0x1996 <Lcd_sendCommand>
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	0e 94 cb 0c 	call	0x1996	; 0x1996 <Lcd_sendCommand>
    1a08:	86 e0       	ldi	r24, 0x06	; 6
    1a0a:	0e 94 cb 0c 	call	0x1996	; 0x1996 <Lcd_sendCommand>
    1a0e:	8c e0       	ldi	r24, 0x0C	; 12
    1a10:	0e 94 cb 0c 	call	0x1996	; 0x1996 <Lcd_sendCommand>
    1a14:	86 e0       	ldi	r24, 0x06	; 6
    1a16:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <genu_LcdModuleState>
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	08 95       	ret
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	08 95       	ret

00001a22 <Lcd_setCursor>:
    1a22:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <genu_LcdModuleState>
    1a26:	96 30       	cpi	r25, 0x06	; 6
    1a28:	89 f4       	brne	.+34     	; 0x1a4c <Lcd_setCursor+0x2a>
    1a2a:	83 30       	cpi	r24, 0x03	; 3
    1a2c:	88 f4       	brcc	.+34     	; 0x1a50 <Lcd_setCursor+0x2e>
    1a2e:	61 31       	cpi	r22, 0x11	; 17
    1a30:	88 f4       	brcc	.+34     	; 0x1a54 <Lcd_setCursor+0x32>
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	2e 5f       	subi	r18, 0xFE	; 254
    1a38:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3a:	86 2f       	mov	r24, r22
    1a3c:	90 e4       	ldi	r25, 0x40	; 64
    1a3e:	29 9f       	mul	r18, r25
    1a40:	80 0d       	add	r24, r0
    1a42:	11 24       	eor	r1, r1
    1a44:	0e 94 cb 0c 	call	0x1996	; 0x1996 <Lcd_sendCommand>
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	08 95       	ret
    1a4c:	85 e0       	ldi	r24, 0x05	; 5
    1a4e:	08 95       	ret
    1a50:	83 e0       	ldi	r24, 0x03	; 3
    1a52:	08 95       	ret
    1a54:	82 e0       	ldi	r24, 0x02	; 2
    1a56:	08 95       	ret

00001a58 <Lcd_printChar>:
    1a58:	cf 93       	push	r28
    1a5a:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <genu_LcdModuleState>
    1a5e:	96 30       	cpi	r25, 0x06	; 6
    1a60:	a1 f4       	brne	.+40     	; 0x1a8a <Lcd_printChar+0x32>
    1a62:	c8 2f       	mov	r28, r24
    1a64:	61 e0       	ldi	r22, 0x01	; 1
    1a66:	87 e0       	ldi	r24, 0x07	; 7
    1a68:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    1a6c:	8c 2f       	mov	r24, r28
    1a6e:	82 95       	swap	r24
    1a70:	8f 70       	andi	r24, 0x0F	; 15
    1a72:	0e 94 88 0c 	call	0x1910	; 0x1910 <Lcd_WriteData>
    1a76:	0e 94 b8 0c 	call	0x1970	; 0x1970 <Lcd_EnableToggle>
    1a7a:	8c 2f       	mov	r24, r28
    1a7c:	8f 70       	andi	r24, 0x0F	; 15
    1a7e:	0e 94 88 0c 	call	0x1910	; 0x1910 <Lcd_WriteData>
    1a82:	0e 94 b8 0c 	call	0x1970	; 0x1970 <Lcd_EnableToggle>
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	01 c0       	rjmp	.+2      	; 0x1a8c <Lcd_printChar+0x34>
    1a8a:	85 e0       	ldi	r24, 0x05	; 5
    1a8c:	cf 91       	pop	r28
    1a8e:	08 95       	ret

00001a90 <Lcd_printString>:
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	ec 01       	movw	r28, r24
    1a96:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <genu_LcdModuleState>
    1a9a:	86 30       	cpi	r24, 0x06	; 6
    1a9c:	49 f4       	brne	.+18     	; 0x1ab0 <Lcd_printString+0x20>
    1a9e:	03 c0       	rjmp	.+6      	; 0x1aa6 <Lcd_printString+0x16>
    1aa0:	21 96       	adiw	r28, 0x01	; 1
    1aa2:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <Lcd_printChar>
    1aa6:	88 81       	ld	r24, Y
    1aa8:	81 11       	cpse	r24, r1
    1aaa:	fa cf       	rjmp	.-12     	; 0x1aa0 <Lcd_printString+0x10>
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	01 c0       	rjmp	.+2      	; 0x1ab2 <Lcd_printString+0x22>
    1ab0:	85 e0       	ldi	r24, 0x05	; 5
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	08 95       	ret

00001ab8 <Lcd_clear>:
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	0e 94 cb 0c 	call	0x1996	; 0x1996 <Lcd_sendCommand>
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	08 95       	ret

00001ac2 <Lcd_printDecimal>:
enuLcd_Status_t Lcd_printDecimal(uint16_t u16_num)
{
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	61 97       	sbiw	r28, 0x11	; 17
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, DEC);
    1ad6:	41 e0       	ldi	r20, 0x01	; 1
    1ad8:	be 01       	movw	r22, r28
    1ada:	6f 5f       	subi	r22, 0xFF	; 255
    1adc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ade:	0e 94 2c 18 	call	0x3058	; 0x3058 <integerToString>
	Lcd_printString(au8_snum);
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	01 96       	adiw	r24, 0x01	; 1
    1ae6:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Lcd_printString>
	return LCD_STATUS_ERROR_OK;
}
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	61 96       	adiw	r28, 0x11	; 17
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	08 95       	ret

00001afe <LM35_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is already initialized */
	if (genu_LM35ModuleState == LM35_STATUS_INIT)
    1afe:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <genu_LM35ModuleState>
    1b02:	85 30       	cpi	r24, 0x05	; 5
    1b04:	51 f0       	breq	.+20     	; 0x1b1a <LM35_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
    1b06:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Adc_init>
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	29 f4       	brne	.+10     	; 0x1b18 <LM35_init+0x1a>
		return LM35_STATUS_ERROR_NOK;
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
    1b0e:	85 e0       	ldi	r24, 0x05	; 5
    1b10:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <genu_LM35ModuleState>
	return LM35_STATUS_ERROR_OK;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
		return LM35_STATUS_ERROR_NOK;
    1b18:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
	return LM35_STATUS_ERROR_OK;
}
    1b1a:	08 95       	ret

00001b1c <LM35_readTemp>:
* Parameters (out): pu8_Temp - Pointer to a Char to hold the temperature.
* Return value: enuLM35_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current temperature and return in celsius.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLM35_Status_t LM35_readTemp(uint8_t * pu8_Temp)
{
    1b1c:	0f 93       	push	r16
    1b1e:	1f 93       	push	r17
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <LM35_readTemp+0xa>
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <LM35_readTemp+0xc>
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	9c 01       	movw	r18, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
    1b2e:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <genu_LM35ModuleState>
    1b32:	95 30       	cpi	r25, 0x05	; 5
    1b34:	f1 f4       	brne	.+60     	; 0x1b72 <LM35_readTemp+0x56>
	{
	return LM35_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
    1b36:	21 15       	cp	r18, r1
    1b38:	31 05       	cpc	r19, r1
    1b3a:	e9 f0       	breq	.+58     	; 0x1b76 <LM35_readTemp+0x5a>
    1b3c:	89 01       	movw	r16, r18
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
    1b3e:	19 82       	std	Y+1, r1	; 0x01
    1b40:	1a 82       	std	Y+2, r1	; 0x02
    1b42:	1b 82       	std	Y+3, r1	; 0x03
    1b44:	1c 82       	std	Y+4, r1	; 0x04
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
    1b46:	be 01       	movw	r22, r28
    1b48:	6f 5f       	subi	r22, 0xFF	; 255
    1b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <Adc_start>
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	91 f4       	brne	.+36     	; 0x1b7a <LM35_readTemp+0x5e>
		return LM35_STATUS_ERROR_NOK;
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
    1b56:	69 81       	ldd	r22, Y+1	; 0x01
    1b58:	7a 81       	ldd	r23, Y+2	; 0x02
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5e:	2a e0       	ldi	r18, 0x0A	; 10
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <__udivmodsi4>
    1b6a:	f8 01       	movw	r30, r16
    1b6c:	20 83       	st	Z, r18
	return LM35_STATUS_ERROR_OK;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	05 c0       	rjmp	.+10     	; 0x1b7c <LM35_readTemp+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
	{
	return LM35_STATUS_NOT_INIT;
    1b72:	84 e0       	ldi	r24, 0x04	; 4
    1b74:	03 c0       	rjmp	.+6      	; 0x1b7c <LM35_readTemp+0x60>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
	{
		return LM35_STATUS_ERROR_NULL;
    1b76:	83 e0       	ldi	r24, 0x03	; 3
    1b78:	01 c0       	rjmp	.+2      	; 0x1b7c <LM35_readTemp+0x60>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
		return LM35_STATUS_ERROR_NOK;
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
	return LM35_STATUS_ERROR_OK;
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	08 95       	ret

00001b8e <Motor_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
    1b8e:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <gu8_MotorModuleStatus>
    1b92:	86 30       	cpi	r24, 0x06	; 6
    1b94:	49 f0       	breq	.+18     	; 0x1ba8 <Motor_init+0x1a>
/**************************************************************************************/
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
    1b96:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <SWPwm_Init>
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	39 f4       	brne	.+14     	; 0x1bac <Motor_init+0x1e>
		return MOTOR_STATUS_ERROR_NOK;
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
    1b9e:	86 e0       	ldi	r24, 0x06	; 6
    1ba0:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <gu8_MotorModuleStatus>
	return MOTOR_STATUS_ERROR_OK;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_INIT;
    1ba8:	86 e0       	ldi	r24, 0x06	; 6
    1baa:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
		return MOTOR_STATUS_ERROR_NOK;
    1bac:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
	return MOTOR_STATUS_ERROR_OK;
}
    1bae:	08 95       	ret

00001bb0 <Motor_stop>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the motor.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to stop motor */
enuMotor_Status_t Motor_stop(uint8_t u8_motorID)
{
    1bb0:	df 92       	push	r13
    1bb2:	ef 92       	push	r14
    1bb4:	ff 92       	push	r15
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    1bbe:	81 11       	cpse	r24, r1
    1bc0:	5d c0       	rjmp	.+186    	; 0x1c7c <Motor_stop+0xcc>
    1bc2:	d8 2e       	mov	r13, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Stop the Motor by driving the pins to LOW */
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    1bc4:	08 2f       	mov	r16, r24
    1bc6:	10 e0       	ldi	r17, 0x00	; 0
    1bc8:	78 01       	movw	r14, r16
    1bca:	ee 0c       	add	r14, r14
    1bcc:	ff 1c       	adc	r15, r15
    1bce:	ee 0c       	add	r14, r14
    1bd0:	ff 1c       	adc	r15, r15
    1bd2:	c7 01       	movw	r24, r14
    1bd4:	80 0f       	add	r24, r16
    1bd6:	91 1f       	adc	r25, r17
    1bd8:	ec 01       	movw	r28, r24
    1bda:	ce 5f       	subi	r28, 0xFE	; 254
    1bdc:	db 4f       	sbci	r29, 0xFB	; 251
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1bee:	e0 e0       	ldi	r30, 0x00	; 0
    1bf0:	1c c0       	rjmp	.+56     	; 0x1c2a <Motor_stop+0x7a>
	{
		if(u8_loopIndex == u8_motorID) /* Skip the current motor */
    1bf2:	ed 15       	cp	r30, r13
    1bf4:	c9 f0       	breq	.+50     	; 0x1c28 <Motor_stop+0x78>
		{
			continue;
		}
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
    1bf6:	d8 01       	movw	r26, r16
    1bf8:	aa 0f       	add	r26, r26
    1bfa:	bb 1f       	adc	r27, r27
    1bfc:	aa 0f       	add	r26, r26
    1bfe:	bb 1f       	adc	r27, r27
    1c00:	a0 0f       	add	r26, r16
    1c02:	b1 1f       	adc	r27, r17
    1c04:	ae 5f       	subi	r26, 0xFE	; 254
    1c06:	bb 4f       	sbci	r27, 0xFB	; 251
    1c08:	2c 91       	ld	r18, X
    1c0a:	8e 2f       	mov	r24, r30
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	dc 01       	movw	r26, r24
    1c10:	aa 0f       	add	r26, r26
    1c12:	bb 1f       	adc	r27, r27
    1c14:	aa 0f       	add	r26, r26
    1c16:	bb 1f       	adc	r27, r27
    1c18:	8a 0f       	add	r24, r26
    1c1a:	9b 1f       	adc	r25, r27
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	ae 5f       	subi	r26, 0xFE	; 254
    1c20:	bb 4f       	sbci	r27, 0xFB	; 251
    1c22:	8c 91       	ld	r24, X
    1c24:	28 17       	cp	r18, r24
    1c26:	19 f0       	breq	.+6      	; 0x1c2e <Motor_stop+0x7e>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1c28:	ef 5f       	subi	r30, 0xFF	; 255
    1c2a:	ee 23       	and	r30, r30
    1c2c:	11 f3       	breq	.-60     	; 0x1bf2 <Motor_stop+0x42>
			break;
		}
	}
	
	
	if(u8_loopIndex == MOTORS_USED_NUM)
    1c2e:	e1 30       	cpi	r30, 0x01	; 1
    1c30:	69 f4       	brne	.+26     	; 0x1c4c <Motor_stop+0x9c>
	{ /* In case that there isn't any motor using the same PWM Channel --> Stop the PWM */
		SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1c32:	f8 01       	movw	r30, r16
    1c34:	ee 0f       	add	r30, r30
    1c36:	ff 1f       	adc	r31, r31
    1c38:	ee 0f       	add	r30, r30
    1c3a:	ff 1f       	adc	r31, r31
    1c3c:	e0 0f       	add	r30, r16
    1c3e:	f1 1f       	adc	r31, r17
    1c40:	ee 5f       	subi	r30, 0xFE	; 254
    1c42:	fb 4f       	sbci	r31, 0xFB	; 251
    1c44:	80 81       	ld	r24, Z
    1c46:	0e 94 4b 1a 	call	0x3496	; 0x3496 <SWPwm_Stop>
    1c4a:	12 c0       	rjmp	.+36     	; 0x1c70 <Motor_stop+0xc0>
	}else
	{/* In case that there is another motor using the same PWM Channel */
		if (gau8_MotorsState[u8_loopIndex] == MOTOR_STOPPED) /* Check if the other motor is not running */
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	ea 5a       	subi	r30, 0xAA	; 170
    1c50:	fb 4f       	sbci	r31, 0xFB	; 251
    1c52:	80 81       	ld	r24, Z
    1c54:	81 11       	cpse	r24, r1
    1c56:	0c c0       	rjmp	.+24     	; 0x1c70 <Motor_stop+0xc0>
		{/* In case that the other motor is not running --> Stop the PWM */
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1c58:	f8 01       	movw	r30, r16
    1c5a:	ee 0f       	add	r30, r30
    1c5c:	ff 1f       	adc	r31, r31
    1c5e:	ee 0f       	add	r30, r30
    1c60:	ff 1f       	adc	r31, r31
    1c62:	e0 0f       	add	r30, r16
    1c64:	f1 1f       	adc	r31, r17
    1c66:	ee 5f       	subi	r30, 0xFE	; 254
    1c68:	fb 4f       	sbci	r31, 0xFB	; 251
    1c6a:	80 81       	ld	r24, Z
    1c6c:	0e 94 4b 1a 	call	0x3496	; 0x3496 <SWPwm_Stop>
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
    1c70:	f8 01       	movw	r30, r16
    1c72:	ea 5a       	subi	r30, 0xAA	; 170
    1c74:	fb 4f       	sbci	r31, 0xFB	; 251
    1c76:	10 82       	st	Z, r1
	return MOTOR_STATUS_ERROR_OK;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	01 c0       	rjmp	.+2      	; 0x1c7e <Motor_stop+0xce>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    1c7c:	82 e0       	ldi	r24, 0x02	; 2
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
	return MOTOR_STATUS_ERROR_OK;
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	1f 91       	pop	r17
    1c84:	0f 91       	pop	r16
    1c86:	ff 90       	pop	r15
    1c88:	ef 90       	pop	r14
    1c8a:	df 90       	pop	r13
    1c8c:	08 95       	ret

00001c8e <Motor_run>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Move the motor in the given direction.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to move the motor forward with given speed in % */
enuMotor_Status_t Motor_run(uint8_t u8_motorID, uint8_t u8_speed, uint8_t u8_direction)
{
    1c8e:	ff 92       	push	r15
    1c90:	0f 93       	push	r16
    1c92:	1f 93       	push	r17
    1c94:	cf 93       	push	r28
    1c96:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
    1c98:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <gu8_MotorModuleStatus>
    1c9c:	96 30       	cpi	r25, 0x06	; 6
    1c9e:	09 f0       	breq	.+2      	; 0x1ca2 <Motor_run+0x14>
    1ca0:	57 c0       	rjmp	.+174    	; 0x1d50 <Motor_run+0xc2>
	{
		return MOTOR_STATUS_UNINIT;
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    1ca2:	81 11       	cpse	r24, r1
    1ca4:	57 c0       	rjmp	.+174    	; 0x1d54 <Motor_run+0xc6>
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
    1ca6:	65 36       	cpi	r22, 0x65	; 101
    1ca8:	08 f0       	brcs	.+2      	; 0x1cac <Motor_run+0x1e>
    1caa:	56 c0       	rjmp	.+172    	; 0x1d58 <Motor_run+0xca>
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
    1cac:	42 30       	cpi	r20, 0x02	; 2
    1cae:	08 f0       	brcs	.+2      	; 0x1cb2 <Motor_run+0x24>
    1cb0:	55 c0       	rjmp	.+170    	; 0x1d5c <Motor_run+0xce>
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
    1cb2:	08 2f       	mov	r16, r24
    1cb4:	10 e0       	ldi	r17, 0x00	; 0
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	ea 5a       	subi	r30, 0xAA	; 170
    1cba:	fb 4f       	sbci	r31, 0xFB	; 251
    1cbc:	90 81       	ld	r25, Z
    1cbe:	91 30       	cpi	r25, 0x01	; 1
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <Motor_run+0x36>
    1cc2:	4e c0       	rjmp	.+156    	; 0x1d60 <Motor_run+0xd2>
    1cc4:	f6 2e       	mov	r15, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_speed == 0) 
    1cc6:	61 11       	cpse	r22, r1
    1cc8:	04 c0       	rjmp	.+8      	; 0x1cd2 <Motor_run+0x44>
	{
		Motor_stop(u8_motorID);
    1cca:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Motor_stop>
		return MOTOR_STATUS_ERROR_OK;
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	48 c0       	rjmp	.+144    	; 0x1d62 <Motor_run+0xd4>
	}
	if(u8_direction == MOTOR_DIR_CLK_WISE) /* Activate the Motor in the Clock Wise Direction */
    1cd2:	41 11       	cpse	r20, r1
    1cd4:	12 c0       	rjmp	.+36     	; 0x1cfa <Motor_run+0x6c>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_HIGH);
    1cd6:	25 e0       	ldi	r18, 0x05	; 5
    1cd8:	20 9f       	mul	r18, r16
    1cda:	c0 01       	movw	r24, r0
    1cdc:	21 9f       	mul	r18, r17
    1cde:	90 0d       	add	r25, r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	ec 01       	movw	r28, r24
    1ce4:	ce 5f       	subi	r28, 0xFE	; 254
    1ce6:	db 4f       	sbci	r29, 0xFB	; 251
    1ce8:	61 e0       	ldi	r22, 0x01	; 1
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    1cf8:	13 c0       	rjmp	.+38     	; 0x1d20 <Motor_run+0x92>
	}else if(u8_direction == MOTOR_DIR_ANTI_CLK_WISE) /* Activate the Motor in the Anti Clock Wise Direction */
    1cfa:	41 30       	cpi	r20, 0x01	; 1
    1cfc:	89 f4       	brne	.+34     	; 0x1d20 <Motor_run+0x92>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    1cfe:	25 e0       	ldi	r18, 0x05	; 5
    1d00:	20 9f       	mul	r18, r16
    1d02:	c0 01       	movw	r24, r0
    1d04:	21 9f       	mul	r18, r17
    1d06:	90 0d       	add	r25, r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	ec 01       	movw	r28, r24
    1d0c:	ce 5f       	subi	r28, 0xFE	; 254
    1d0e:	db 4f       	sbci	r29, 0xFB	; 251
    1d10:	60 e0       	ldi	r22, 0x00	; 0
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_HIGH);
    1d18:	61 e0       	ldi	r22, 0x01	; 1
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
	}
	
	/* Change the state of the Motor to Running */
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
    1d20:	f8 01       	movw	r30, r16
    1d22:	ea 5a       	subi	r30, 0xAA	; 170
    1d24:	fb 4f       	sbci	r31, 0xFB	; 251
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	80 83       	st	Z, r24
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
    1d2a:	f8 01       	movw	r30, r16
    1d2c:	ee 0f       	add	r30, r30
    1d2e:	ff 1f       	adc	r31, r31
    1d30:	ee 0f       	add	r30, r30
    1d32:	ff 1f       	adc	r31, r31
    1d34:	e0 0f       	add	r30, r16
    1d36:	f1 1f       	adc	r31, r17
    1d38:	ee 5f       	subi	r30, 0xFE	; 254
    1d3a:	fb 4f       	sbci	r31, 0xFB	; 251
    1d3c:	43 81       	ldd	r20, Z+3	; 0x03
    1d3e:	54 81       	ldd	r21, Z+4	; 0x04
    1d40:	60 e0       	ldi	r22, 0x00	; 0
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	2f 2d       	mov	r18, r15
    1d46:	80 81       	ld	r24, Z
    1d48:	0e 94 17 19 	call	0x322e	; 0x322e <SWPwm_Start>
	
	return MOTOR_STATUS_ERROR_OK;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	09 c0       	rjmp	.+18     	; 0x1d62 <Motor_run+0xd4>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_UNINIT;
    1d50:	87 e0       	ldi	r24, 0x07	; 7
    1d52:	07 c0       	rjmp	.+14     	; 0x1d62 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	05 c0       	rjmp	.+10     	; 0x1d62 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
    1d58:	83 e0       	ldi	r24, 0x03	; 3
    1d5a:	03 c0       	rjmp	.+6      	; 0x1d62 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
    1d5c:	84 e0       	ldi	r24, 0x04	; 4
    1d5e:	01 c0       	rjmp	.+2      	; 0x1d62 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
	{
		return MOTOR_STATUS_ERROR_RUNNING;
    1d60:	85 e0       	ldi	r24, 0x05	; 5
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
	
	return MOTOR_STATUS_ERROR_OK;
}
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	1f 91       	pop	r17
    1d68:	0f 91       	pop	r16
    1d6a:	ff 90       	pop	r15
    1d6c:	08 95       	ret

00001d6e <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
    1d72:	c0 91 58 04 	lds	r28, 0x0458	; 0x800458 <gu8_counter>
    1d76:	d0 e0       	ldi	r29, 0x00	; 0
    1d78:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <Uart_DataRegister>
    1d7c:	c7 5a       	subi	r28, 0xA7	; 167
    1d7e:	db 4f       	sbci	r29, 0xFB	; 251
    1d80:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
    1d82:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <gu8_counter>
    1d86:	e9 2f       	mov	r30, r25
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	e7 5a       	subi	r30, 0xA7	; 167
    1d8c:	fb 4f       	sbci	r31, 0xFB	; 251
    1d8e:	80 81       	ld	r24, Z
    1d90:	8d 30       	cpi	r24, 0x0D	; 13
    1d92:	71 f4       	brne	.+28     	; 0x1db0 <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    1d94:	0e 94 a9 1a 	call	0x3552	; 0x3552 <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
    1d98:	e0 91 58 04 	lds	r30, 0x0458	; 0x800458 <gu8_counter>
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	e7 5a       	subi	r30, 0xA7	; 167
    1da0:	fb 4f       	sbci	r31, 0xFB	; 251
    1da2:	10 82       	st	Z, r1
		gu8_counter = 0;
    1da4:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <gu8_counter>
		gu8_flag = 1;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <gu8_flag>
    1dae:	1d c0       	rjmp	.+58     	; 0x1dea <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
    1db0:	88 30       	cpi	r24, 0x08	; 8
    1db2:	51 f4       	brne	.+20     	; 0x1dc8 <Uart_RXC_ISR+0x5a>
    1db4:	99 23       	and	r25, r25
    1db6:	41 f0       	breq	.+16     	; 0x1dc8 <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    1db8:	0e 94 a9 1a 	call	0x3552	; 0x3552 <Uart_sendByte>
		gu8_counter--;
    1dbc:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <gu8_counter>
    1dc0:	81 50       	subi	r24, 0x01	; 1
    1dc2:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <gu8_counter>
    1dc6:	11 c0       	rjmp	.+34     	; 0x1dea <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
    1dc8:	88 30       	cpi	r24, 0x08	; 8
    1dca:	79 f0       	breq	.+30     	; 0x1dea <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
    1dcc:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <gu8_visibility>
    1dd0:	91 30       	cpi	r25, 0x01	; 1
    1dd2:	21 f4       	brne	.+8      	; 0x1ddc <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
    1dd4:	8a e2       	ldi	r24, 0x2A	; 42
    1dd6:	0e 94 a9 1a 	call	0x3552	; 0x3552 <Uart_sendByte>
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
    1ddc:	0e 94 a9 1a 	call	0x3552	; 0x3552 <Uart_sendByte>
		}
		gu8_counter++;
    1de0:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <gu8_counter>
    1de4:	8f 5f       	subi	r24, 0xFF	; 255
    1de6:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <gu8_counter>
	}
}
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	08 95       	ret

00001df0 <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
    1df0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <genu_TerminalModuleState>
    1df4:	83 30       	cpi	r24, 0x03	; 3
    1df6:	81 f0       	breq	.+32     	; 0x1e18 <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
    1df8:	0e 94 93 1a 	call	0x3526	; 0x3526 <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
    1dfc:	81 30       	cpi	r24, 0x01	; 1
    1dfe:	11 f0       	breq	.+4      	; 0x1e04 <Terminal_init+0x14>
    1e00:	87 30       	cpi	r24, 0x07	; 7
    1e02:	49 f4       	brne	.+18     	; 0x1e16 <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
    1e04:	87 eb       	ldi	r24, 0xB7	; 183
    1e06:	9e e0       	ldi	r25, 0x0E	; 14
    1e08:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
    1e0c:	83 e0       	ldi	r24, 0x03	; 3
    1e0e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
    1e16:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
    1e18:	08 95       	ret

00001e1a <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	81 f0       	breq	.+32     	; 0x1e42 <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    1e22:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <genu_TerminalModuleState>
    1e26:	22 30       	cpi	r18, 0x02	; 2
    1e28:	79 f0       	breq	.+30     	; 0x1e48 <Terminal_Out+0x2e>
    1e2a:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
    1e2c:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <stringLength>
    1e30:	68 2f       	mov	r22, r24
    1e32:	70 e0       	ldi	r23, 0x00	; 0
    1e34:	ce 01       	movw	r24, r28
    1e36:	0e 94 b4 1a 	call	0x3568	; 0x3568 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	21 f0       	breq	.+8      	; 0x1e46 <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	03 c0       	rjmp	.+6      	; 0x1e48 <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    1e42:	24 e0       	ldi	r18, 0x04	; 4
    1e44:	01 c0       	rjmp	.+2      	; 0x1e48 <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
    1e46:	21 e0       	ldi	r18, 0x01	; 1
}
    1e48:	82 2f       	mov	r24, r18
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	08 95       	ret

00001e50 <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
    1e50:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
    1e52:	89 2b       	or	r24, r25
    1e54:	a1 f0       	breq	.+40     	; 0x1e7e <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    1e56:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <genu_TerminalModuleState>
    1e5a:	82 30       	cpi	r24, 0x02	; 2
    1e5c:	99 f0       	breq	.+38     	; 0x1e84 <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
    1e5e:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <gu8_flag>
    1e62:	81 30       	cpi	r24, 0x01	; 1
    1e64:	71 f4       	brne	.+28     	; 0x1e82 <Terminal_In+0x32>
	{
		gu8_flag = 0;
    1e66:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
    1e6a:	89 e5       	ldi	r24, 0x59	; 89
    1e6c:	94 e0       	ldi	r25, 0x04	; 4
    1e6e:	0e 94 1b 18 	call	0x3036	; 0x3036 <stringCopy>
		EmptyString(gau8_data);
    1e72:	89 e5       	ldi	r24, 0x59	; 89
    1e74:	94 e0       	ldi	r25, 0x04	; 4
    1e76:	0e 94 0f 18 	call	0x301e	; 0x301e <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
    1e7a:	85 e0       	ldi	r24, 0x05	; 5
    1e7c:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    1e7e:	84 e0       	ldi	r24, 0x04	; 4
    1e80:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
}
    1e84:	08 95       	ret

00001e86 <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
    1e8c:	08 95       	ret

00001e8e <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
    1e8e:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	08 95       	ret

00001e96 <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
    1e96:	0e 94 b6 08 	call	0x116c	; 0x116c <App_start>
    1e9a:	ff cf       	rjmp	.-2      	; 0x1e9a <main+0x4>

00001e9c <Adc_init>:
		f32_Resolution = (1000*ADC_AREF_VALUE)/ADC_STEPS_NUM;
	}
	*pu32_data = u16_Result*f32_Resolution;
		
	return ADC_STATUS_ERROR_OK;
}
    1e9c:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <genuAdc_Status>
    1ea0:	87 30       	cpi	r24, 0x07	; 7
    1ea2:	11 f1       	breq	.+68     	; 0x1ee8 <Adc_init+0x4c>
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	13 c0       	rjmp	.+38     	; 0x1ece <Adc_init+0x32>
    1ea8:	3b b3       	in	r19, 0x1b	; 27
    1eaa:	e2 2f       	mov	r30, r18
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	ee 0f       	add	r30, r30
    1eb0:	ff 1f       	adc	r31, r31
    1eb2:	e8 57       	subi	r30, 0x78	; 120
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	00 80       	ld	r0, Z
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <Adc_init+0x26>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	0a 94       	dec	r0
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <Adc_init+0x22>
    1ec6:	80 95       	com	r24
    1ec8:	83 23       	and	r24, r19
    1eca:	8b bb       	out	0x1b, r24	; 27
    1ecc:	2f 5f       	subi	r18, 0xFF	; 255
    1ece:	22 23       	and	r18, r18
    1ed0:	59 f3       	breq	.-42     	; 0x1ea8 <Adc_init+0xc>
    1ed2:	97 e0       	ldi	r25, 0x07	; 7
    1ed4:	96 b9       	out	0x06, r25	; 6
    1ed6:	86 b1       	in	r24, 0x06	; 6
    1ed8:	8f 7d       	andi	r24, 0xDF	; 223
    1eda:	86 b9       	out	0x06, r24	; 6
    1edc:	86 b1       	in	r24, 0x06	; 6
    1ede:	86 b9       	out	0x06, r24	; 6
    1ee0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <genuAdc_Status>
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	08 95       	ret
    1ee8:	88 e0       	ldi	r24, 0x08	; 8
    1eea:	08 95       	ret

00001eec <Adc_start>:
    1eec:	cf 92       	push	r12
    1eee:	df 92       	push	r13
    1ef0:	ef 92       	push	r14
    1ef2:	ff 92       	push	r15
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <genuAdc_Status>
    1efc:	97 30       	cpi	r25, 0x07	; 7
    1efe:	09 f0       	breq	.+2      	; 0x1f02 <Adc_start+0x16>
    1f00:	61 c0       	rjmp	.+194    	; 0x1fc4 <Adc_start+0xd8>
    1f02:	61 15       	cp	r22, r1
    1f04:	71 05       	cpc	r23, r1
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <Adc_start+0x1e>
    1f08:	5f c0       	rjmp	.+190    	; 0x1fc8 <Adc_start+0xdc>
    1f0a:	37 b1       	in	r19, 0x07	; 7
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	fc 01       	movw	r30, r24
    1f10:	ee 0f       	add	r30, r30
    1f12:	ff 1f       	adc	r31, r31
    1f14:	e8 57       	subi	r30, 0x78	; 120
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	20 81       	ld	r18, Z
    1f1a:	23 2b       	or	r18, r19
    1f1c:	27 b9       	out	0x07, r18	; 7
    1f1e:	47 b1       	in	r20, 0x07	; 7
    1f20:	31 81       	ldd	r19, Z+1	; 0x01
    1f22:	50 e4       	ldi	r21, 0x40	; 64
    1f24:	35 9f       	mul	r19, r21
    1f26:	90 01       	movw	r18, r0
    1f28:	11 24       	eor	r1, r1
    1f2a:	24 2b       	or	r18, r20
    1f2c:	27 b9       	out	0x07, r18	; 7
    1f2e:	26 b1       	in	r18, 0x06	; 6
    1f30:	20 68       	ori	r18, 0x80	; 128
    1f32:	26 b9       	out	0x06, r18	; 6
    1f34:	26 b1       	in	r18, 0x06	; 6
    1f36:	20 64       	ori	r18, 0x40	; 64
    1f38:	26 b9       	out	0x06, r18	; 6
    1f3a:	34 9b       	sbis	0x06, 4	; 6
    1f3c:	fe cf       	rjmp	.-4      	; 0x1f3a <Adc_start+0x4e>
    1f3e:	44 b1       	in	r20, 0x04	; 4
    1f40:	25 b1       	in	r18, 0x05	; 5
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	32 2f       	mov	r19, r18
    1f46:	22 27       	eor	r18, r18
    1f48:	24 2b       	or	r18, r20
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	fc 01       	movw	r30, r24
    1f50:	e8 57       	subi	r30, 0x78	; 120
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	81 81       	ldd	r24, Z+1	; 0x01
    1f56:	83 30       	cpi	r24, 0x03	; 3
    1f58:	41 f0       	breq	.+16     	; 0x1f6a <Adc_start+0x7e>
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	69 f0       	breq	.+26     	; 0x1f78 <Adc_start+0x8c>
    1f5e:	88 23       	and	r24, r24
    1f60:	a1 f0       	breq	.+40     	; 0x1f8a <Adc_start+0x9e>
    1f62:	c1 2c       	mov	r12, r1
    1f64:	d1 2c       	mov	r13, r1
    1f66:	76 01       	movw	r14, r12
    1f68:	18 c0       	rjmp	.+48     	; 0x1f9a <Adc_start+0xae>
    1f6a:	c1 2c       	mov	r12, r1
    1f6c:	d1 2c       	mov	r13, r1
    1f6e:	76 01       	movw	r14, r12
    1f70:	68 94       	set
    1f72:	e5 f8       	bld	r14, 5
    1f74:	f6 f8       	bld	r15, 6
    1f76:	11 c0       	rjmp	.+34     	; 0x1f9a <Adc_start+0xae>
    1f78:	0f 2e       	mov	r0, r31
    1f7a:	c1 2c       	mov	r12, r1
    1f7c:	f0 e4       	ldi	r31, 0x40	; 64
    1f7e:	df 2e       	mov	r13, r31
    1f80:	fc e9       	ldi	r31, 0x9C	; 156
    1f82:	ef 2e       	mov	r14, r31
    1f84:	fd 2c       	mov	r15, r13
    1f86:	f0 2d       	mov	r31, r0
    1f88:	08 c0       	rjmp	.+16     	; 0x1f9a <Adc_start+0xae>
    1f8a:	0f 2e       	mov	r0, r31
    1f8c:	c1 2c       	mov	r12, r1
    1f8e:	f0 e4       	ldi	r31, 0x40	; 64
    1f90:	df 2e       	mov	r13, r31
    1f92:	fc e9       	ldi	r31, 0x9C	; 156
    1f94:	ef 2e       	mov	r14, r31
    1f96:	fd 2c       	mov	r15, r13
    1f98:	f0 2d       	mov	r31, r0
    1f9a:	eb 01       	movw	r28, r22
    1f9c:	b9 01       	movw	r22, r18
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__floatunsisf>
    1fa6:	a7 01       	movw	r20, r14
    1fa8:	96 01       	movw	r18, r12
    1faa:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <__mulsf3>
    1fae:	0e 94 46 1c 	call	0x388c	; 0x388c <__fixunssfsi>
    1fb2:	68 83       	st	Y, r22
    1fb4:	79 83       	std	Y+1, r23	; 0x01
    1fb6:	8a 83       	std	Y+2, r24	; 0x02
    1fb8:	9b 83       	std	Y+3, r25	; 0x03
    1fba:	86 b1       	in	r24, 0x06	; 6
    1fbc:	80 61       	ori	r24, 0x10	; 16
    1fbe:	86 b9       	out	0x06, r24	; 6
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	03 c0       	rjmp	.+6      	; 0x1fca <Adc_start+0xde>
    1fc4:	86 e0       	ldi	r24, 0x06	; 6
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <Adc_start+0xde>
    1fc8:	85 e0       	ldi	r24, 0x05	; 5
    1fca:	df 91       	pop	r29
    1fcc:	cf 91       	pop	r28
    1fce:	ff 90       	pop	r15
    1fd0:	ef 90       	pop	r14
    1fd2:	df 90       	pop	r13
    1fd4:	cf 90       	pop	r12
    1fd6:	08 95       	ret

00001fd8 <__vector_16>:

ISR(ADC_IRQ)
{
    1fd8:	1f 92       	push	r1
    1fda:	0f 92       	push	r0
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	0f 92       	push	r0
    1fe0:	11 24       	eor	r1, r1
    1fe2:	2f 93       	push	r18
    1fe4:	3f 93       	push	r19
    1fe6:	4f 93       	push	r20
    1fe8:	5f 93       	push	r21
    1fea:	6f 93       	push	r22
    1fec:	7f 93       	push	r23
    1fee:	8f 93       	push	r24
    1ff0:	9f 93       	push	r25
    1ff2:	af 93       	push	r26
    1ff4:	bf 93       	push	r27
    1ff6:	ef 93       	push	r30
    1ff8:	ff 93       	push	r31
	(*ADC_CallBackPtr)();
    1ffa:	e0 91 59 05 	lds	r30, 0x0559	; 0x800559 <ADC_CallBackPtr>
    1ffe:	f0 91 5a 05 	lds	r31, 0x055A	; 0x80055a <ADC_CallBackPtr+0x1>
    2002:	09 95       	icall
    2004:	ff 91       	pop	r31
    2006:	ef 91       	pop	r30
    2008:	bf 91       	pop	r27
    200a:	af 91       	pop	r26
    200c:	9f 91       	pop	r25
    200e:	8f 91       	pop	r24
    2010:	7f 91       	pop	r23
    2012:	6f 91       	pop	r22
    2014:	5f 91       	pop	r21
    2016:	4f 91       	pop	r20
    2018:	3f 91       	pop	r19
    201a:	2f 91       	pop	r18
    201c:	0f 90       	pop	r0
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	0f 90       	pop	r0
    2022:	1f 90       	pop	r1
    2024:	18 95       	reti

00002026 <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
    2026:	2f 92       	push	r2
    2028:	3f 92       	push	r3
    202a:	4f 92       	push	r4
    202c:	5f 92       	push	r5
    202e:	6f 92       	push	r6
    2030:	7f 92       	push	r7
    2032:	8f 92       	push	r8
    2034:	9f 92       	push	r9
    2036:	af 92       	push	r10
    2038:	bf 92       	push	r11
    203a:	cf 92       	push	r12
    203c:	df 92       	push	r13
    203e:	ef 92       	push	r14
    2040:	ff 92       	push	r15
    2042:	0f 93       	push	r16
    2044:	1f 93       	push	r17
    2046:	cf 93       	push	r28
    2048:	df 93       	push	r29
    204a:	00 d0       	rcall	.+0      	; 0x204c <Delay_ms+0x26>
    204c:	00 d0       	rcall	.+0      	; 0x204e <Delay_ms+0x28>
    204e:	1f 92       	push	r1
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	22 2e       	mov	r2, r18
    2056:	33 2e       	mov	r3, r19
    2058:	44 2e       	mov	r4, r20
    205a:	55 2e       	mov	r5, r21
    205c:	66 2e       	mov	r6, r22
    205e:	79 83       	std	Y+1, r23	; 0x01
    2060:	8a 83       	std	Y+2, r24	; 0x02
    2062:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    2064:	91 2c       	mov	r9, r1
    2066:	1d 82       	std	Y+5, r1	; 0x05
    2068:	1c 82       	std	Y+4, r1	; 0x04
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	e0 e0       	ldi	r30, 0x00	; 0
    2070:	71 2c       	mov	r7, r1
    2072:	81 2c       	mov	r8, r1
    2074:	3d c0       	rjmp	.+122    	; 0x20f0 <Delay_ms+0xca>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
    2076:	2c 2d       	mov	r18, r12
    2078:	3d 2d       	mov	r19, r13
    207a:	4e 2d       	mov	r20, r14
    207c:	5f 2d       	mov	r21, r15
    207e:	60 2f       	mov	r22, r16
    2080:	71 2f       	mov	r23, r17
    2082:	8a 2d       	mov	r24, r10
    2084:	9b 2d       	mov	r25, r11
    2086:	a1 e0       	ldi	r26, 0x01	; 1
    2088:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__adddi3_s8>
    208c:	c2 2e       	mov	r12, r18
    208e:	d3 2e       	mov	r13, r19
    2090:	e4 2e       	mov	r14, r20
    2092:	f5 2e       	mov	r15, r21
    2094:	06 2f       	mov	r16, r22
    2096:	17 2f       	mov	r17, r23
    2098:	a8 2e       	mov	r10, r24
    209a:	b9 2e       	mov	r11, r25
    209c:	08 c0       	rjmp	.+16     	; 0x20ae <Delay_ms+0x88>
    209e:	c1 2c       	mov	r12, r1
    20a0:	d1 2c       	mov	r13, r1
    20a2:	e1 2c       	mov	r14, r1
    20a4:	f1 2c       	mov	r15, r1
    20a6:	00 e0       	ldi	r16, 0x00	; 0
    20a8:	10 e0       	ldi	r17, 0x00	; 0
    20aa:	a1 2c       	mov	r10, r1
    20ac:	b1 2c       	mov	r11, r1
    20ae:	2c 2d       	mov	r18, r12
    20b0:	3d 2d       	mov	r19, r13
    20b2:	4e 2d       	mov	r20, r14
    20b4:	5f 2d       	mov	r21, r15
    20b6:	60 2f       	mov	r22, r16
    20b8:	71 2f       	mov	r23, r17
    20ba:	8a 2d       	mov	r24, r10
    20bc:	9b 2d       	mov	r25, r11
    20be:	ac e0       	ldi	r26, 0x0C	; 12
    20c0:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__cmpdi2_s8>
    20c4:	c1 f2       	breq	.-80     	; 0x2076 <Delay_ms+0x50>
    20c6:	b8 f2       	brcs	.-82     	; 0x2076 <Delay_ms+0x50>
    20c8:	8c 81       	ldd	r24, Y+4	; 0x04

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    20ca:	29 2d       	mov	r18, r9
    20cc:	3d 81       	ldd	r19, Y+5	; 0x05
    20ce:	48 2f       	mov	r20, r24
    20d0:	5b 2f       	mov	r21, r27
    20d2:	6f 2f       	mov	r22, r31
    20d4:	7e 2f       	mov	r23, r30
    20d6:	87 2d       	mov	r24, r7
    20d8:	98 2d       	mov	r25, r8
    20da:	a1 e0       	ldi	r26, 0x01	; 1
    20dc:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__adddi3_s8>
    20e0:	92 2e       	mov	r9, r18
    20e2:	3d 83       	std	Y+5, r19	; 0x05
    20e4:	4c 83       	std	Y+4, r20	; 0x04
    20e6:	b5 2f       	mov	r27, r21
    20e8:	f6 2f       	mov	r31, r22
    20ea:	e7 2f       	mov	r30, r23
    20ec:	78 2e       	mov	r7, r24
    20ee:	89 2e       	mov	r8, r25
    20f0:	29 2d       	mov	r18, r9
    20f2:	3d 81       	ldd	r19, Y+5	; 0x05
    20f4:	4c 81       	ldd	r20, Y+4	; 0x04
    20f6:	5b 2f       	mov	r21, r27
    20f8:	6f 2f       	mov	r22, r31
    20fa:	7e 2f       	mov	r23, r30
    20fc:	87 2d       	mov	r24, r7
    20fe:	98 2d       	mov	r25, r8
    2100:	a2 2c       	mov	r10, r2
    2102:	b3 2c       	mov	r11, r3
    2104:	c4 2c       	mov	r12, r4
    2106:	d5 2c       	mov	r13, r5
    2108:	e6 2c       	mov	r14, r6
    210a:	f9 80       	ldd	r15, Y+1	; 0x01
    210c:	0a 81       	ldd	r16, Y+2	; 0x02
    210e:	1b 81       	ldd	r17, Y+3	; 0x03
    2110:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <__cmpdi2>
    2114:	20 f2       	brcs	.-120    	; 0x209e <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	df 91       	pop	r29
    2122:	cf 91       	pop	r28
    2124:	1f 91       	pop	r17
    2126:	0f 91       	pop	r16
    2128:	ff 90       	pop	r15
    212a:	ef 90       	pop	r14
    212c:	df 90       	pop	r13
    212e:	cf 90       	pop	r12
    2130:	bf 90       	pop	r11
    2132:	af 90       	pop	r10
    2134:	9f 90       	pop	r9
    2136:	8f 90       	pop	r8
    2138:	7f 90       	pop	r7
    213a:	6f 90       	pop	r6
    213c:	5f 90       	pop	r5
    213e:	4f 90       	pop	r4
    2140:	3f 90       	pop	r3
    2142:	2f 90       	pop	r2
    2144:	08 95       	ret

00002146 <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
    2146:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
    2148:	89 2b       	or	r24, r25
    214a:	09 f4       	brne	.+2      	; 0x214e <Dio_init+0x8>
    214c:	e4 c0       	rjmp	.+456    	; 0x2316 <Dio_init+0x1d0>
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	d7 c0       	rjmp	.+430    	; 0x2300 <Dio_init+0x1ba>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
    2152:	e9 2f       	mov	r30, r25
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	ee 0f       	add	r30, r30
    2158:	ff 1f       	adc	r31, r31
    215a:	ee 0f       	add	r30, r30
    215c:	ff 1f       	adc	r31, r31
    215e:	e4 0f       	add	r30, r20
    2160:	f5 1f       	adc	r31, r21
    2162:	31 81       	ldd	r19, Z+1	; 0x01
    2164:	38 30       	cpi	r19, 0x08	; 8
    2166:	08 f0       	brcs	.+2      	; 0x216a <Dio_init+0x24>
    2168:	d8 c0       	rjmp	.+432    	; 0x231a <Dio_init+0x1d4>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
    216a:	20 81       	ld	r18, Z
    216c:	21 30       	cpi	r18, 0x01	; 1
    216e:	c1 f1       	breq	.+112    	; 0x21e0 <Dio_init+0x9a>
    2170:	38 f0       	brcs	.+14     	; 0x2180 <Dio_init+0x3a>
    2172:	22 30       	cpi	r18, 0x02	; 2
    2174:	09 f4       	brne	.+2      	; 0x2178 <Dio_init+0x32>
    2176:	64 c0       	rjmp	.+200    	; 0x2240 <Dio_init+0xfa>
    2178:	23 30       	cpi	r18, 0x03	; 3
    217a:	09 f4       	brne	.+2      	; 0x217e <Dio_init+0x38>
    217c:	91 c0       	rjmp	.+290    	; 0x22a0 <Dio_init+0x15a>
    217e:	cf c0       	rjmp	.+414    	; 0x231e <Dio_init+0x1d8>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2180:	2a b3       	in	r18, 0x1a	; 26
    2182:	61 e0       	ldi	r22, 0x01	; 1
    2184:	70 e0       	ldi	r23, 0x00	; 0
    2186:	db 01       	movw	r26, r22
    2188:	02 c0       	rjmp	.+4      	; 0x218e <Dio_init+0x48>
    218a:	aa 0f       	add	r26, r26
    218c:	bb 1f       	adc	r27, r27
    218e:	3a 95       	dec	r19
    2190:	e2 f7       	brpl	.-8      	; 0x218a <Dio_init+0x44>
    2192:	8a 2f       	mov	r24, r26
    2194:	80 95       	com	r24
    2196:	82 23       	and	r24, r18
    2198:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    219a:	aa b3       	in	r26, 0x1a	; 26
    219c:	82 81       	ldd	r24, Z+2	; 0x02
    219e:	28 2f       	mov	r18, r24
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	01 80       	ldd	r0, Z+1	; 0x01
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <Dio_init+0x64>
    21a6:	22 0f       	add	r18, r18
    21a8:	33 1f       	adc	r19, r19
    21aa:	0a 94       	dec	r0
    21ac:	e2 f7       	brpl	.-8      	; 0x21a6 <Dio_init+0x60>
    21ae:	2a 2b       	or	r18, r26
    21b0:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    21b2:	8b b3       	in	r24, 0x1b	; 27
    21b4:	01 80       	ldd	r0, Z+1	; 0x01
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <Dio_init+0x76>
    21b8:	66 0f       	add	r22, r22
    21ba:	77 1f       	adc	r23, r23
    21bc:	0a 94       	dec	r0
    21be:	e2 f7       	brpl	.-8      	; 0x21b8 <Dio_init+0x72>
    21c0:	60 95       	com	r22
    21c2:	68 23       	and	r22, r24
    21c4:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    21c6:	6b b3       	in	r22, 0x1b	; 27
    21c8:	83 81       	ldd	r24, Z+3	; 0x03
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	01 80       	ldd	r0, Z+1	; 0x01
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <Dio_init+0x90>
    21d2:	22 0f       	add	r18, r18
    21d4:	33 1f       	adc	r19, r19
    21d6:	0a 94       	dec	r0
    21d8:	e2 f7       	brpl	.-8      	; 0x21d2 <Dio_init+0x8c>
    21da:	26 2b       	or	r18, r22
    21dc:	2b bb       	out	0x1b, r18	; 27
				break;
    21de:	8f c0       	rjmp	.+286    	; 0x22fe <Dio_init+0x1b8>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    21e0:	27 b3       	in	r18, 0x17	; 23
    21e2:	61 e0       	ldi	r22, 0x01	; 1
    21e4:	70 e0       	ldi	r23, 0x00	; 0
    21e6:	db 01       	movw	r26, r22
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <Dio_init+0xa8>
    21ea:	aa 0f       	add	r26, r26
    21ec:	bb 1f       	adc	r27, r27
    21ee:	3a 95       	dec	r19
    21f0:	e2 f7       	brpl	.-8      	; 0x21ea <Dio_init+0xa4>
    21f2:	8a 2f       	mov	r24, r26
    21f4:	80 95       	com	r24
    21f6:	82 23       	and	r24, r18
    21f8:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    21fa:	a7 b3       	in	r26, 0x17	; 23
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	01 80       	ldd	r0, Z+1	; 0x01
    2204:	02 c0       	rjmp	.+4      	; 0x220a <Dio_init+0xc4>
    2206:	22 0f       	add	r18, r18
    2208:	33 1f       	adc	r19, r19
    220a:	0a 94       	dec	r0
    220c:	e2 f7       	brpl	.-8      	; 0x2206 <Dio_init+0xc0>
    220e:	2a 2b       	or	r18, r26
    2210:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2212:	88 b3       	in	r24, 0x18	; 24
    2214:	01 80       	ldd	r0, Z+1	; 0x01
    2216:	02 c0       	rjmp	.+4      	; 0x221c <Dio_init+0xd6>
    2218:	66 0f       	add	r22, r22
    221a:	77 1f       	adc	r23, r23
    221c:	0a 94       	dec	r0
    221e:	e2 f7       	brpl	.-8      	; 0x2218 <Dio_init+0xd2>
    2220:	60 95       	com	r22
    2222:	68 23       	and	r22, r24
    2224:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2226:	68 b3       	in	r22, 0x18	; 24
    2228:	83 81       	ldd	r24, Z+3	; 0x03
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	01 80       	ldd	r0, Z+1	; 0x01
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <Dio_init+0xf0>
    2232:	22 0f       	add	r18, r18
    2234:	33 1f       	adc	r19, r19
    2236:	0a 94       	dec	r0
    2238:	e2 f7       	brpl	.-8      	; 0x2232 <Dio_init+0xec>
    223a:	26 2b       	or	r18, r22
    223c:	28 bb       	out	0x18, r18	; 24
				break;
    223e:	5f c0       	rjmp	.+190    	; 0x22fe <Dio_init+0x1b8>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2240:	24 b3       	in	r18, 0x14	; 20
    2242:	61 e0       	ldi	r22, 0x01	; 1
    2244:	70 e0       	ldi	r23, 0x00	; 0
    2246:	db 01       	movw	r26, r22
    2248:	02 c0       	rjmp	.+4      	; 0x224e <Dio_init+0x108>
    224a:	aa 0f       	add	r26, r26
    224c:	bb 1f       	adc	r27, r27
    224e:	3a 95       	dec	r19
    2250:	e2 f7       	brpl	.-8      	; 0x224a <Dio_init+0x104>
    2252:	8a 2f       	mov	r24, r26
    2254:	80 95       	com	r24
    2256:	82 23       	and	r24, r18
    2258:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    225a:	a4 b3       	in	r26, 0x14	; 20
    225c:	82 81       	ldd	r24, Z+2	; 0x02
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	01 80       	ldd	r0, Z+1	; 0x01
    2264:	02 c0       	rjmp	.+4      	; 0x226a <Dio_init+0x124>
    2266:	22 0f       	add	r18, r18
    2268:	33 1f       	adc	r19, r19
    226a:	0a 94       	dec	r0
    226c:	e2 f7       	brpl	.-8      	; 0x2266 <Dio_init+0x120>
    226e:	2a 2b       	or	r18, r26
    2270:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2272:	85 b3       	in	r24, 0x15	; 21
    2274:	01 80       	ldd	r0, Z+1	; 0x01
    2276:	02 c0       	rjmp	.+4      	; 0x227c <Dio_init+0x136>
    2278:	66 0f       	add	r22, r22
    227a:	77 1f       	adc	r23, r23
    227c:	0a 94       	dec	r0
    227e:	e2 f7       	brpl	.-8      	; 0x2278 <Dio_init+0x132>
    2280:	60 95       	com	r22
    2282:	68 23       	and	r22, r24
    2284:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2286:	65 b3       	in	r22, 0x15	; 21
    2288:	83 81       	ldd	r24, Z+3	; 0x03
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	01 80       	ldd	r0, Z+1	; 0x01
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <Dio_init+0x150>
    2292:	22 0f       	add	r18, r18
    2294:	33 1f       	adc	r19, r19
    2296:	0a 94       	dec	r0
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <Dio_init+0x14c>
    229a:	26 2b       	or	r18, r22
    229c:	25 bb       	out	0x15, r18	; 21
				break;
    229e:	2f c0       	rjmp	.+94     	; 0x22fe <Dio_init+0x1b8>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    22a0:	21 b3       	in	r18, 0x11	; 17
    22a2:	61 e0       	ldi	r22, 0x01	; 1
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	db 01       	movw	r26, r22
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <Dio_init+0x168>
    22aa:	aa 0f       	add	r26, r26
    22ac:	bb 1f       	adc	r27, r27
    22ae:	3a 95       	dec	r19
    22b0:	e2 f7       	brpl	.-8      	; 0x22aa <Dio_init+0x164>
    22b2:	8a 2f       	mov	r24, r26
    22b4:	80 95       	com	r24
    22b6:	82 23       	and	r24, r18
    22b8:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    22ba:	a1 b3       	in	r26, 0x11	; 17
    22bc:	82 81       	ldd	r24, Z+2	; 0x02
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	01 80       	ldd	r0, Z+1	; 0x01
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <Dio_init+0x184>
    22c6:	22 0f       	add	r18, r18
    22c8:	33 1f       	adc	r19, r19
    22ca:	0a 94       	dec	r0
    22cc:	e2 f7       	brpl	.-8      	; 0x22c6 <Dio_init+0x180>
    22ce:	2a 2b       	or	r18, r26
    22d0:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    22d2:	82 b3       	in	r24, 0x12	; 18
    22d4:	01 80       	ldd	r0, Z+1	; 0x01
    22d6:	02 c0       	rjmp	.+4      	; 0x22dc <Dio_init+0x196>
    22d8:	66 0f       	add	r22, r22
    22da:	77 1f       	adc	r23, r23
    22dc:	0a 94       	dec	r0
    22de:	e2 f7       	brpl	.-8      	; 0x22d8 <Dio_init+0x192>
    22e0:	60 95       	com	r22
    22e2:	68 23       	and	r22, r24
    22e4:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    22e6:	62 b3       	in	r22, 0x12	; 18
    22e8:	83 81       	ldd	r24, Z+3	; 0x03
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	01 80       	ldd	r0, Z+1	; 0x01
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <Dio_init+0x1b0>
    22f2:	22 0f       	add	r18, r18
    22f4:	33 1f       	adc	r19, r19
    22f6:	0a 94       	dec	r0
    22f8:	e2 f7       	brpl	.-8      	; 0x22f2 <Dio_init+0x1ac>
    22fa:	26 2b       	or	r18, r22
    22fc:	22 bb       	out	0x12, r18	; 18
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
    22fe:	9f 5f       	subi	r25, 0xFF	; 255
    2300:	94 31       	cpi	r25, 0x14	; 20
    2302:	08 f4       	brcc	.+2      	; 0x2306 <Dio_init+0x1c0>
    2304:	26 cf       	rjmp	.-436    	; 0x2152 <Dio_init+0xc>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
    2306:	50 93 5d 05 	sts	0x055D, r21	; 0x80055d <pstrDio_pinsConfig+0x1>
    230a:	40 93 5c 05 	sts	0x055C, r20	; 0x80055c <pstrDio_pinsConfig>
	u8_Dio_Status = DIO_INITIALIZED;
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
    2314:	08 95       	ret
{
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
    2316:	85 e0       	ldi	r24, 0x05	; 5
    2318:	08 95       	ret
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
    231a:	83 e0       	ldi	r24, 0x03	; 3
    231c:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
    231e:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
    2320:	08 95       	ret

00002322 <Dio_writePin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    2322:	85 31       	cpi	r24, 0x15	; 21
    2324:	08 f0       	brcs	.+2      	; 0x2328 <Dio_writePin+0x6>
    2326:	90 c0       	rjmp	.+288    	; 0x2448 <Dio_writePin+0x126>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    2328:	90 91 5b 05 	lds	r25, 0x055B	; 0x80055b <u8_Dio_Status>
    232c:	99 23       	and	r25, r25
    232e:	09 f4       	brne	.+2      	; 0x2332 <Dio_writePin+0x10>
    2330:	8d c0       	rjmp	.+282    	; 0x244c <Dio_writePin+0x12a>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    2332:	e8 2f       	mov	r30, r24
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	cf 01       	movw	r24, r30
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	e0 91 5c 05 	lds	r30, 0x055C	; 0x80055c <pstrDio_pinsConfig>
    2344:	f0 91 5d 05 	lds	r31, 0x055D	; 0x80055d <pstrDio_pinsConfig+0x1>
    2348:	e8 0f       	add	r30, r24
    234a:	f9 1f       	adc	r31, r25
    234c:	80 81       	ld	r24, Z
    234e:	81 30       	cpi	r24, 0x01	; 1
    2350:	21 f1       	breq	.+72     	; 0x239a <Dio_writePin+0x78>
    2352:	30 f0       	brcs	.+12     	; 0x2360 <Dio_writePin+0x3e>
    2354:	82 30       	cpi	r24, 0x02	; 2
    2356:	f1 f1       	breq	.+124    	; 0x23d4 <Dio_writePin+0xb2>
    2358:	83 30       	cpi	r24, 0x03	; 3
    235a:	09 f4       	brne	.+2      	; 0x235e <Dio_writePin+0x3c>
    235c:	58 c0       	rjmp	.+176    	; 0x240e <Dio_writePin+0xec>
    235e:	78 c0       	rjmp	.+240    	; 0x2450 <Dio_writePin+0x12e>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
    2360:	61 30       	cpi	r22, 0x01	; 1
    2362:	69 f4       	brne	.+26     	; 0x237e <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2364:	2b b3       	in	r18, 0x1b	; 27
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	01 80       	ldd	r0, Z+1	; 0x01
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <Dio_writePin+0x50>
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	0a 94       	dec	r0
    2374:	e2 f7       	brpl	.-8      	; 0x236e <Dio_writePin+0x4c>
    2376:	82 2b       	or	r24, r18
    2378:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    237e:	2b b3       	in	r18, 0x1b	; 27
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	01 80       	ldd	r0, Z+1	; 0x01
    2386:	02 c0       	rjmp	.+4      	; 0x238c <Dio_writePin+0x6a>
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	0a 94       	dec	r0
    238e:	e2 f7       	brpl	.-8      	; 0x2388 <Dio_writePin+0x66>
    2390:	80 95       	com	r24
    2392:	82 23       	and	r24, r18
    2394:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
    239a:	61 30       	cpi	r22, 0x01	; 1
    239c:	69 f4       	brne	.+26     	; 0x23b8 <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    239e:	28 b3       	in	r18, 0x18	; 24
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	01 80       	ldd	r0, Z+1	; 0x01
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <Dio_writePin+0x8a>
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	0a 94       	dec	r0
    23ae:	e2 f7       	brpl	.-8      	; 0x23a8 <Dio_writePin+0x86>
    23b0:	82 2b       	or	r24, r18
    23b2:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    23b8:	28 b3       	in	r18, 0x18	; 24
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	01 80       	ldd	r0, Z+1	; 0x01
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <Dio_writePin+0xa4>
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	0a 94       	dec	r0
    23c8:	e2 f7       	brpl	.-8      	; 0x23c2 <Dio_writePin+0xa0>
    23ca:	80 95       	com	r24
    23cc:	82 23       	and	r24, r18
    23ce:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
    23d4:	61 30       	cpi	r22, 0x01	; 1
    23d6:	69 f4       	brne	.+26     	; 0x23f2 <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    23d8:	25 b3       	in	r18, 0x15	; 21
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	01 80       	ldd	r0, Z+1	; 0x01
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <Dio_writePin+0xc4>
    23e2:	88 0f       	add	r24, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	0a 94       	dec	r0
    23e8:	e2 f7       	brpl	.-8      	; 0x23e2 <Dio_writePin+0xc0>
    23ea:	82 2b       	or	r24, r18
    23ec:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    23f2:	25 b3       	in	r18, 0x15	; 21
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	01 80       	ldd	r0, Z+1	; 0x01
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <Dio_writePin+0xde>
    23fc:	88 0f       	add	r24, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	0a 94       	dec	r0
    2402:	e2 f7       	brpl	.-8      	; 0x23fc <Dio_writePin+0xda>
    2404:	80 95       	com	r24
    2406:	82 23       	and	r24, r18
    2408:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
    240e:	61 30       	cpi	r22, 0x01	; 1
    2410:	69 f4       	brne	.+26     	; 0x242c <Dio_writePin+0x10a>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2412:	22 b3       	in	r18, 0x12	; 18
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	01 80       	ldd	r0, Z+1	; 0x01
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <Dio_writePin+0xfe>
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	0a 94       	dec	r0
    2422:	e2 f7       	brpl	.-8      	; 0x241c <Dio_writePin+0xfa>
    2424:	82 2b       	or	r24, r18
    2426:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    242c:	22 b3       	in	r18, 0x12	; 18
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	01 80       	ldd	r0, Z+1	; 0x01
    2434:	02 c0       	rjmp	.+4      	; 0x243a <Dio_writePin+0x118>
    2436:	88 0f       	add	r24, r24
    2438:	99 1f       	adc	r25, r25
    243a:	0a 94       	dec	r0
    243c:	e2 f7       	brpl	.-8      	; 0x2436 <Dio_writePin+0x114>
    243e:	80 95       	com	r24
    2440:	82 23       	and	r24, r18
    2442:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	08 95       	ret
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    2448:	82 e0       	ldi	r24, 0x02	; 2
    244a:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    244c:	86 e0       	ldi	r24, 0x06	; 6
    244e:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    2450:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
    2452:	08 95       	ret

00002454 <Dio_togglePin>:
* Description: Function to Toggle data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    2454:	85 31       	cpi	r24, 0x15	; 21
    2456:	08 f0       	brcs	.+2      	; 0x245a <Dio_togglePin+0x6>
    2458:	4f c0       	rjmp	.+158    	; 0x24f8 <Dio_togglePin+0xa4>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    245a:	90 91 5b 05 	lds	r25, 0x055B	; 0x80055b <u8_Dio_Status>
    245e:	99 23       	and	r25, r25
    2460:	09 f4       	brne	.+2      	; 0x2464 <Dio_togglePin+0x10>
    2462:	4c c0       	rjmp	.+152    	; 0x24fc <Dio_togglePin+0xa8>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    2464:	e8 2f       	mov	r30, r24
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	cf 01       	movw	r24, r30
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	e0 91 5c 05 	lds	r30, 0x055C	; 0x80055c <pstrDio_pinsConfig>
    2476:	f0 91 5d 05 	lds	r31, 0x055D	; 0x80055d <pstrDio_pinsConfig+0x1>
    247a:	e8 0f       	add	r30, r24
    247c:	f9 1f       	adc	r31, r25
    247e:	80 81       	ld	r24, Z
    2480:	81 30       	cpi	r24, 0x01	; 1
    2482:	99 f0       	breq	.+38     	; 0x24aa <Dio_togglePin+0x56>
    2484:	28 f0       	brcs	.+10     	; 0x2490 <Dio_togglePin+0x3c>
    2486:	82 30       	cpi	r24, 0x02	; 2
    2488:	e9 f0       	breq	.+58     	; 0x24c4 <Dio_togglePin+0x70>
    248a:	83 30       	cpi	r24, 0x03	; 3
    248c:	41 f1       	breq	.+80     	; 0x24de <Dio_togglePin+0x8a>
    248e:	38 c0       	rjmp	.+112    	; 0x2500 <Dio_togglePin+0xac>
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2490:	2b b3       	in	r18, 0x1b	; 27
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	01 80       	ldd	r0, Z+1	; 0x01
    2498:	02 c0       	rjmp	.+4      	; 0x249e <Dio_togglePin+0x4a>
    249a:	88 0f       	add	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	0a 94       	dec	r0
    24a0:	e2 f7       	brpl	.-8      	; 0x249a <Dio_togglePin+0x46>
    24a2:	82 27       	eor	r24, r18
    24a4:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    24a8:	08 95       	ret
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    24aa:	28 b3       	in	r18, 0x18	; 24
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	01 80       	ldd	r0, Z+1	; 0x01
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <Dio_togglePin+0x64>
    24b4:	88 0f       	add	r24, r24
    24b6:	99 1f       	adc	r25, r25
    24b8:	0a 94       	dec	r0
    24ba:	e2 f7       	brpl	.-8      	; 0x24b4 <Dio_togglePin+0x60>
    24bc:	82 27       	eor	r24, r18
    24be:	88 bb       	out	0x18, r24	; 24
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    24c2:	08 95       	ret
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    24c4:	25 b3       	in	r18, 0x15	; 21
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	01 80       	ldd	r0, Z+1	; 0x01
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <Dio_togglePin+0x7e>
    24ce:	88 0f       	add	r24, r24
    24d0:	99 1f       	adc	r25, r25
    24d2:	0a 94       	dec	r0
    24d4:	e2 f7       	brpl	.-8      	; 0x24ce <Dio_togglePin+0x7a>
    24d6:	82 27       	eor	r24, r18
    24d8:	85 bb       	out	0x15, r24	; 21
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    24da:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    24dc:	08 95       	ret
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    24de:	22 b3       	in	r18, 0x12	; 18
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	01 80       	ldd	r0, Z+1	; 0x01
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <Dio_togglePin+0x98>
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	0a 94       	dec	r0
    24ee:	e2 f7       	brpl	.-8      	; 0x24e8 <Dio_togglePin+0x94>
    24f0:	82 27       	eor	r24, r18
    24f2:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    24f6:	08 95       	ret
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    24f8:	82 e0       	ldi	r24, 0x02	; 2
    24fa:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    24fc:	86 e0       	ldi	r24, 0x06	; 6
    24fe:	08 95       	ret
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    2500:	84 e0       	ldi	r24, 0x04	; 4
	}	
	return DIO_STATUS_ERROR_OK;
}
    2502:	08 95       	ret

00002504 <Dio_readPin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    2504:	85 31       	cpi	r24, 0x15	; 21
    2506:	08 f0       	brcs	.+2      	; 0x250a <Dio_readPin+0x6>
    2508:	7c c0       	rjmp	.+248    	; 0x2602 <Dio_readPin+0xfe>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    250a:	90 91 5b 05 	lds	r25, 0x055B	; 0x80055b <u8_Dio_Status>
    250e:	99 23       	and	r25, r25
    2510:	09 f4       	brne	.+2      	; 0x2514 <Dio_readPin+0x10>
    2512:	79 c0       	rjmp	.+242    	; 0x2606 <Dio_readPin+0x102>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    2514:	e8 2f       	mov	r30, r24
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	cf 01       	movw	r24, r30
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	e0 91 5c 05 	lds	r30, 0x055C	; 0x80055c <pstrDio_pinsConfig>
    2526:	f0 91 5d 05 	lds	r31, 0x055D	; 0x80055d <pstrDio_pinsConfig+0x1>
    252a:	e8 0f       	add	r30, r24
    252c:	f9 1f       	adc	r31, r25
    252e:	80 81       	ld	r24, Z
    2530:	81 30       	cpi	r24, 0x01	; 1
    2532:	f9 f0       	breq	.+62     	; 0x2572 <Dio_readPin+0x6e>
    2534:	30 f0       	brcs	.+12     	; 0x2542 <Dio_readPin+0x3e>
    2536:	82 30       	cpi	r24, 0x02	; 2
    2538:	a1 f1       	breq	.+104    	; 0x25a2 <Dio_readPin+0x9e>
    253a:	83 30       	cpi	r24, 0x03	; 3
    253c:	09 f4       	brne	.+2      	; 0x2540 <Dio_readPin+0x3c>
    253e:	49 c0       	rjmp	.+146    	; 0x25d2 <Dio_readPin+0xce>
    2540:	64 c0       	rjmp	.+200    	; 0x260a <Dio_readPin+0x106>
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2542:	49 b3       	in	r20, 0x19	; 25
    2544:	51 81       	ldd	r21, Z+1	; 0x01
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	9c 01       	movw	r18, r24
    254c:	05 2e       	mov	r0, r21
    254e:	02 c0       	rjmp	.+4      	; 0x2554 <Dio_readPin+0x50>
    2550:	22 0f       	add	r18, r18
    2552:	33 1f       	adc	r19, r19
    2554:	0a 94       	dec	r0
    2556:	e2 f7       	brpl	.-8      	; 0x2550 <Dio_readPin+0x4c>
    2558:	84 2f       	mov	r24, r20
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	82 23       	and	r24, r18
    255e:	93 23       	and	r25, r19
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <Dio_readPin+0x62>
    2562:	95 95       	asr	r25
    2564:	87 95       	ror	r24
    2566:	5a 95       	dec	r21
    2568:	e2 f7       	brpl	.-8      	; 0x2562 <Dio_readPin+0x5e>
    256a:	fb 01       	movw	r30, r22
    256c:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    256e:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2570:	08 95       	ret
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2572:	46 b3       	in	r20, 0x16	; 22
    2574:	51 81       	ldd	r21, Z+1	; 0x01
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	9c 01       	movw	r18, r24
    257c:	05 2e       	mov	r0, r21
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <Dio_readPin+0x80>
    2580:	22 0f       	add	r18, r18
    2582:	33 1f       	adc	r19, r19
    2584:	0a 94       	dec	r0
    2586:	e2 f7       	brpl	.-8      	; 0x2580 <Dio_readPin+0x7c>
    2588:	84 2f       	mov	r24, r20
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	82 23       	and	r24, r18
    258e:	93 23       	and	r25, r19
    2590:	02 c0       	rjmp	.+4      	; 0x2596 <Dio_readPin+0x92>
    2592:	95 95       	asr	r25
    2594:	87 95       	ror	r24
    2596:	5a 95       	dec	r21
    2598:	e2 f7       	brpl	.-8      	; 0x2592 <Dio_readPin+0x8e>
    259a:	fb 01       	movw	r30, r22
    259c:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    259e:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    25a0:	08 95       	ret
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    25a2:	43 b3       	in	r20, 0x13	; 19
    25a4:	51 81       	ldd	r21, Z+1	; 0x01
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	9c 01       	movw	r18, r24
    25ac:	05 2e       	mov	r0, r21
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <Dio_readPin+0xb0>
    25b0:	22 0f       	add	r18, r18
    25b2:	33 1f       	adc	r19, r19
    25b4:	0a 94       	dec	r0
    25b6:	e2 f7       	brpl	.-8      	; 0x25b0 <Dio_readPin+0xac>
    25b8:	84 2f       	mov	r24, r20
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	82 23       	and	r24, r18
    25be:	93 23       	and	r25, r19
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <Dio_readPin+0xc2>
    25c2:	95 95       	asr	r25
    25c4:	87 95       	ror	r24
    25c6:	5a 95       	dec	r21
    25c8:	e2 f7       	brpl	.-8      	; 0x25c2 <Dio_readPin+0xbe>
    25ca:	fb 01       	movw	r30, r22
    25cc:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    25d0:	08 95       	ret
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    25d2:	40 b3       	in	r20, 0x10	; 16
    25d4:	51 81       	ldd	r21, Z+1	; 0x01
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	9c 01       	movw	r18, r24
    25dc:	05 2e       	mov	r0, r21
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <Dio_readPin+0xe0>
    25e0:	22 0f       	add	r18, r18
    25e2:	33 1f       	adc	r19, r19
    25e4:	0a 94       	dec	r0
    25e6:	e2 f7       	brpl	.-8      	; 0x25e0 <Dio_readPin+0xdc>
    25e8:	84 2f       	mov	r24, r20
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	82 23       	and	r24, r18
    25ee:	93 23       	and	r25, r19
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <Dio_readPin+0xf2>
    25f2:	95 95       	asr	r25
    25f4:	87 95       	ror	r24
    25f6:	5a 95       	dec	r21
    25f8:	e2 f7       	brpl	.-8      	; 0x25f2 <Dio_readPin+0xee>
    25fa:	fb 01       	movw	r30, r22
    25fc:	80 83       	st	Z, r24
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2600:	08 95       	ret
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    2602:	82 e0       	ldi	r24, 0x02	; 2
    2604:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    2606:	86 e0       	ldi	r24, 0x06	; 6
    2608:	08 95       	ret
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    260a:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
    260c:	08 95       	ret

0000260e <__vector_1>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
    260e:	1f 92       	push	r1
    2610:	0f 92       	push	r0
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	0f 92       	push	r0
    2616:	11 24       	eor	r1, r1
    2618:	2f 93       	push	r18
    261a:	3f 93       	push	r19
    261c:	4f 93       	push	r20
    261e:	5f 93       	push	r21
    2620:	6f 93       	push	r22
    2622:	7f 93       	push	r23
    2624:	8f 93       	push	r24
    2626:	9f 93       	push	r25
    2628:	af 93       	push	r26
    262a:	bf 93       	push	r27
    262c:	ef 93       	push	r30
    262e:	ff 93       	push	r31
    2630:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <INT0_CallBackPtr>
    2634:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <INT0_CallBackPtr+0x1>
    2638:	09 95       	icall
    263a:	ff 91       	pop	r31
    263c:	ef 91       	pop	r30
    263e:	bf 91       	pop	r27
    2640:	af 91       	pop	r26
    2642:	9f 91       	pop	r25
    2644:	8f 91       	pop	r24
    2646:	7f 91       	pop	r23
    2648:	6f 91       	pop	r22
    264a:	5f 91       	pop	r21
    264c:	4f 91       	pop	r20
    264e:	3f 91       	pop	r19
    2650:	2f 91       	pop	r18
    2652:	0f 90       	pop	r0
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	0f 90       	pop	r0
    2658:	1f 90       	pop	r1
    265a:	18 95       	reti

0000265c <__vector_2>:
    265c:	1f 92       	push	r1
    265e:	0f 92       	push	r0
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	0f 92       	push	r0
    2664:	11 24       	eor	r1, r1
    2666:	2f 93       	push	r18
    2668:	3f 93       	push	r19
    266a:	4f 93       	push	r20
    266c:	5f 93       	push	r21
    266e:	6f 93       	push	r22
    2670:	7f 93       	push	r23
    2672:	8f 93       	push	r24
    2674:	9f 93       	push	r25
    2676:	af 93       	push	r26
    2678:	bf 93       	push	r27
    267a:	ef 93       	push	r30
    267c:	ff 93       	push	r31
    267e:	e0 91 60 05 	lds	r30, 0x0560	; 0x800560 <INT1_CallBackPtr>
    2682:	f0 91 61 05 	lds	r31, 0x0561	; 0x800561 <INT1_CallBackPtr+0x1>
    2686:	09 95       	icall
    2688:	ff 91       	pop	r31
    268a:	ef 91       	pop	r30
    268c:	bf 91       	pop	r27
    268e:	af 91       	pop	r26
    2690:	9f 91       	pop	r25
    2692:	8f 91       	pop	r24
    2694:	7f 91       	pop	r23
    2696:	6f 91       	pop	r22
    2698:	5f 91       	pop	r21
    269a:	4f 91       	pop	r20
    269c:	3f 91       	pop	r19
    269e:	2f 91       	pop	r18
    26a0:	0f 90       	pop	r0
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	0f 90       	pop	r0
    26a6:	1f 90       	pop	r1
    26a8:	18 95       	reti

000026aa <__vector_3>:
}
ISR(INT2_IRQ)
{
    26aa:	1f 92       	push	r1
    26ac:	0f 92       	push	r0
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	0f 92       	push	r0
    26b2:	11 24       	eor	r1, r1
    26b4:	2f 93       	push	r18
    26b6:	3f 93       	push	r19
    26b8:	4f 93       	push	r20
    26ba:	5f 93       	push	r21
    26bc:	6f 93       	push	r22
    26be:	7f 93       	push	r23
    26c0:	8f 93       	push	r24
    26c2:	9f 93       	push	r25
    26c4:	af 93       	push	r26
    26c6:	bf 93       	push	r27
    26c8:	ef 93       	push	r30
    26ca:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
    26cc:	e0 91 5e 05 	lds	r30, 0x055E	; 0x80055e <INT2_CallBackPtr>
    26d0:	f0 91 5f 05 	lds	r31, 0x055F	; 0x80055f <INT2_CallBackPtr+0x1>
    26d4:	09 95       	icall
}
    26d6:	ff 91       	pop	r31
    26d8:	ef 91       	pop	r30
    26da:	bf 91       	pop	r27
    26dc:	af 91       	pop	r26
    26de:	9f 91       	pop	r25
    26e0:	8f 91       	pop	r24
    26e2:	7f 91       	pop	r23
    26e4:	6f 91       	pop	r22
    26e6:	5f 91       	pop	r21
    26e8:	4f 91       	pop	r20
    26ea:	3f 91       	pop	r19
    26ec:	2f 91       	pop	r18
    26ee:	0f 90       	pop	r0
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	0f 90       	pop	r0
    26f4:	1f 90       	pop	r1
    26f6:	18 95       	reti

000026f8 <Gpt_ISRHandler>:
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_EXPIRED;
	return GPT_STATUS_ERROR_OK;
}
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	0e c0       	rjmp	.+28     	; 0x2718 <Gpt_ISRHandler+0x20>
    26fc:	29 2f       	mov	r18, r25
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	f9 01       	movw	r30, r18
    2702:	ee 0f       	add	r30, r30
    2704:	ff 1f       	adc	r31, r31
    2706:	2e 0f       	add	r18, r30
    2708:	3f 1f       	adc	r19, r31
    270a:	f9 01       	movw	r30, r18
    270c:	e9 5f       	subi	r30, 0xF9	; 249
    270e:	fb 4f       	sbci	r31, 0xFB	; 251
    2710:	20 81       	ld	r18, Z
    2712:	28 17       	cp	r18, r24
    2714:	19 f0       	breq	.+6      	; 0x271c <Gpt_ISRHandler+0x24>
    2716:	9f 5f       	subi	r25, 0xFF	; 255
    2718:	99 23       	and	r25, r25
    271a:	81 f3       	breq	.-32     	; 0x26fc <Gpt_ISRHandler+0x4>
    271c:	89 2f       	mov	r24, r25
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	fc 01       	movw	r30, r24
    2722:	ee 0f       	add	r30, r30
    2724:	ff 1f       	adc	r31, r31
    2726:	ee 0f       	add	r30, r30
    2728:	ff 1f       	adc	r31, r31
    272a:	eb 59       	subi	r30, 0x9B	; 155
    272c:	fa 4f       	sbci	r31, 0xFA	; 250
    272e:	40 81       	ld	r20, Z
    2730:	51 81       	ldd	r21, Z+1	; 0x01
    2732:	62 81       	ldd	r22, Z+2	; 0x02
    2734:	73 81       	ldd	r23, Z+3	; 0x03
    2736:	41 15       	cp	r20, r1
    2738:	51 05       	cpc	r21, r1
    273a:	61 05       	cpc	r22, r1
    273c:	71 05       	cpc	r23, r1
    273e:	81 f0       	breq	.+32     	; 0x2760 <Gpt_ISRHandler+0x68>
    2740:	88 0f       	add	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	88 0f       	add	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	fc 01       	movw	r30, r24
    274a:	eb 59       	subi	r30, 0x9B	; 155
    274c:	fa 4f       	sbci	r31, 0xFA	; 250
    274e:	41 50       	subi	r20, 0x01	; 1
    2750:	51 09       	sbc	r21, r1
    2752:	61 09       	sbc	r22, r1
    2754:	71 09       	sbc	r23, r1
    2756:	40 83       	st	Z, r20
    2758:	51 83       	std	Z+1, r21	; 0x01
    275a:	62 83       	std	Z+2, r22	; 0x02
    275c:	73 83       	std	Z+3, r23	; 0x03
    275e:	08 95       	ret
    2760:	23 b7       	in	r18, 0x33	; 51
    2762:	2e 7f       	andi	r18, 0xFE	; 254
    2764:	23 bf       	out	0x33, r18	; 51
    2766:	23 b7       	in	r18, 0x33	; 51
    2768:	2d 7f       	andi	r18, 0xFD	; 253
    276a:	23 bf       	out	0x33, r18	; 51
    276c:	23 b7       	in	r18, 0x33	; 51
    276e:	2b 7f       	andi	r18, 0xFB	; 251
    2770:	23 bf       	out	0x33, r18	; 51
    2772:	29 b7       	in	r18, 0x39	; 57
    2774:	2e 7f       	andi	r18, 0xFE	; 254
    2776:	29 bf       	out	0x39, r18	; 57
    2778:	fc 01       	movw	r30, r24
    277a:	e7 59       	subi	r30, 0x97	; 151
    277c:	fa 4f       	sbci	r31, 0xFA	; 250
    277e:	24 e0       	ldi	r18, 0x04	; 4
    2780:	20 83       	st	Z, r18
    2782:	e0 91 6a 05 	lds	r30, 0x056A	; 0x80056a <Gpt_Timer0_CallBackPtr>
    2786:	f0 91 6b 05 	lds	r31, 0x056B	; 0x80056b <Gpt_Timer0_CallBackPtr+0x1>
    278a:	09 95       	icall
    278c:	08 95       	ret

0000278e <GptInit>:
    278e:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <genu_GPTModStatus>
    2792:	81 30       	cpi	r24, 0x01	; 1
    2794:	61 f1       	breq	.+88     	; 0x27ee <GptInit+0x60>
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	24 c0       	rjmp	.+72     	; 0x27e2 <GptInit+0x54>
    279a:	82 2f       	mov	r24, r18
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	fc 01       	movw	r30, r24
    27a0:	ee 0f       	add	r30, r30
    27a2:	ff 1f       	adc	r31, r31
    27a4:	e8 0f       	add	r30, r24
    27a6:	f9 1f       	adc	r31, r25
    27a8:	e9 5f       	subi	r30, 0xF9	; 249
    27aa:	fb 4f       	sbci	r31, 0xFB	; 251
    27ac:	30 81       	ld	r19, Z
    27ae:	33 23       	and	r19, r19
    27b0:	19 f0       	breq	.+6      	; 0x27b8 <GptInit+0x2a>
    27b2:	33 30       	cpi	r19, 0x03	; 3
    27b4:	f0 f4       	brcc	.+60     	; 0x27f2 <GptInit+0x64>
    27b6:	0f c0       	rjmp	.+30     	; 0x27d6 <GptInit+0x48>
    27b8:	fc 01       	movw	r30, r24
    27ba:	ee 0f       	add	r30, r30
    27bc:	ff 1f       	adc	r31, r31
    27be:	e8 0f       	add	r30, r24
    27c0:	f9 1f       	adc	r31, r25
    27c2:	e9 5f       	subi	r30, 0xF9	; 249
    27c4:	fb 4f       	sbci	r31, 0xFB	; 251
    27c6:	32 81       	ldd	r19, Z+2	; 0x02
    27c8:	31 11       	cpse	r19, r1
    27ca:	05 c0       	rjmp	.+10     	; 0x27d6 <GptInit+0x48>
    27cc:	13 be       	out	0x33, r1	; 51
    27ce:	39 b7       	in	r19, 0x39	; 57
    27d0:	3c 7f       	andi	r19, 0xFC	; 252
    27d2:	39 bf       	out	0x39, r19	; 57
    27d4:	12 be       	out	0x32, r1	; 50
    27d6:	fc 01       	movw	r30, r24
    27d8:	e7 59       	subi	r30, 0x97	; 151
    27da:	fa 4f       	sbci	r31, 0xFA	; 250
    27dc:	31 e0       	ldi	r19, 0x01	; 1
    27de:	30 83       	st	Z, r19
    27e0:	2f 5f       	subi	r18, 0xFF	; 255
    27e2:	22 23       	and	r18, r18
    27e4:	d1 f2       	breq	.-76     	; 0x279a <GptInit+0xc>
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <genu_GPTModStatus>
    27ec:	08 95       	ret
    27ee:	83 e0       	ldi	r24, 0x03	; 3
    27f0:	08 95       	ret
    27f2:	85 e0       	ldi	r24, 0x05	; 5
    27f4:	08 95       	ret

000027f6 <GptStart_aSync>:
* Return value: enuGpt_Status_t - Returns the status of the function (if there is any error)
* Description: Function to Start the Timer module counting from 0x00 until (u16_Ticks)
               and generate interrupt when OVF.
************************************************************************************/
enuGpt_Status_t GptStart_aSync(u8Gpt_Channel_t ChannelId, u32Gpt_Value_t u16_Ticks, pfGpt_CallBack_t CallBack)
{
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	89 01       	movw	r16, r18
	
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    2800:	81 11       	cpse	r24, r1
    2802:	4a c0       	rjmp	.+148    	; 0x2898 <GptStart_aSync+0xa2>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    2804:	c8 2f       	mov	r28, r24
    2806:	d0 e0       	ldi	r29, 0x00	; 0
    2808:	fe 01       	movw	r30, r28
    280a:	e7 59       	subi	r30, 0x97	; 151
    280c:	fa 4f       	sbci	r31, 0xFA	; 250
    280e:	80 81       	ld	r24, Z
    2810:	88 23       	and	r24, r24
    2812:	09 f4       	brne	.+2      	; 0x2816 <GptStart_aSync+0x20>
    2814:	43 c0       	rjmp	.+134    	; 0x289c <GptStart_aSync+0xa6>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
    2816:	82 30       	cpi	r24, 0x02	; 2
    2818:	09 f4       	brne	.+2      	; 0x281c <GptStart_aSync+0x26>
    281a:	42 c0       	rjmp	.+132    	; 0x28a0 <GptStart_aSync+0xaa>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u16_remainderCount=0;
	
	enuChannelsState[ChannelId] = GPT_RUNNING;
    281c:	82 e0       	ldi	r24, 0x02	; 2
    281e:	fe 01       	movw	r30, r28
    2820:	e7 59       	subi	r30, 0x97	; 151
    2822:	fa 4f       	sbci	r31, 0xFA	; 250
    2824:	80 83       	st	Z, r24
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    2826:	fe 01       	movw	r30, r28
    2828:	ee 0f       	add	r30, r30
    282a:	ff 1f       	adc	r31, r31
    282c:	ec 0f       	add	r30, r28
    282e:	fd 1f       	adc	r31, r29
    2830:	e9 5f       	subi	r30, 0xF9	; 249
    2832:	fb 4f       	sbci	r31, 0xFB	; 251
    2834:	80 81       	ld	r24, Z
    2836:	88 23       	and	r24, r24
    2838:	21 f0       	breq	.+8      	; 0x2842 <GptStart_aSync+0x4c>
    283a:	83 30       	cpi	r24, 0x03	; 3
    283c:	98 f1       	brcs	.+102    	; 0x28a4 <GptStart_aSync+0xae>
		case GPT_TIMER_2: /* In case of Timer 2 */
			break;
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    283e:	85 e0       	ldi	r24, 0x05	; 5
    2840:	34 c0       	rjmp	.+104    	; 0x28aa <GptStart_aSync+0xb4>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Get Number of loops to overflow the timer counter */
			u32_Channels_ISR_Count[ChannelId] = u16_Ticks / GPT_MAX_VALUE_8BIT; //0xFF
    2842:	cb 01       	movw	r24, r22
    2844:	ba 01       	movw	r22, r20
    2846:	2f ef       	ldi	r18, 0xFF	; 255
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	40 e0       	ldi	r20, 0x00	; 0
    284c:	50 e0       	ldi	r21, 0x00	; 0
    284e:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <__udivmodsi4>
    2852:	fe 01       	movw	r30, r28
    2854:	ee 0f       	add	r30, r30
    2856:	ff 1f       	adc	r31, r31
    2858:	ee 0f       	add	r30, r30
    285a:	ff 1f       	adc	r31, r31
    285c:	eb 59       	subi	r30, 0x9B	; 155
    285e:	fa 4f       	sbci	r31, 0xFA	; 250
    2860:	20 83       	st	Z, r18
    2862:	31 83       	std	Z+1, r19	; 0x01
    2864:	42 83       	std	Z+2, r20	; 0x02
    2866:	53 83       	std	Z+3, r21	; 0x03
			/* Get Number of extra ticks (remainder) */
			u16_remainderCount = u16_Ticks % GPT_MAX_VALUE_8BIT;
    2868:	26 2f       	mov	r18, r22
    286a:	37 2f       	mov	r19, r23
			/* Set the interrupt enable */
			REG_SET_BIT(GPT_TIMSK_REG, GPT_TIMSK_TOIE0);
    286c:	89 b7       	in	r24, 0x39	; 57
    286e:	81 60       	ori	r24, 0x01	; 1
    2870:	89 bf       	out	0x39, r24	; 57
			/* Set the callback function pointer */
			Gpt_Timer0_CallBackPtr=CallBack;
    2872:	10 93 6b 05 	sts	0x056B, r17	; 0x80056b <Gpt_Timer0_CallBackPtr+0x1>
    2876:	00 93 6a 05 	sts	0x056A, r16	; 0x80056a <Gpt_Timer0_CallBackPtr>
			/* Start the clock with the given pre scaler */
			GPT_TCCR0_REG = (Timers_Configurations[ChannelId].enuClock_Src) << GPT_TCCR0_CS00;
    287a:	ce 01       	movw	r24, r28
    287c:	88 0f       	add	r24, r24
    287e:	99 1f       	adc	r25, r25
    2880:	c8 0f       	add	r28, r24
    2882:	d9 1f       	adc	r29, r25
    2884:	c9 5f       	subi	r28, 0xF9	; 249
    2886:	db 4f       	sbci	r29, 0xFB	; 251
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	83 bf       	out	0x33, r24	; 51
			/* Run the remainder ticks */
			/* Put the value of the 0xFF - remainderTicks to start count from it */
			if(u16_remainderCount != 0)
    288c:	23 2b       	or	r18, r19
    288e:	61 f0       	breq	.+24     	; 0x28a8 <GptStart_aSync+0xb2>
			{
				GPT_TCNT0_REG = 256 - u16_remainderCount;
    2890:	61 95       	neg	r22
    2892:	62 bf       	out	0x32, r22	; 50
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	09 c0       	rjmp	.+18     	; 0x28aa <GptStart_aSync+0xb4>
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    2898:	86 e0       	ldi	r24, 0x06	; 6
    289a:	07 c0       	rjmp	.+14     	; 0x28aa <GptStart_aSync+0xb4>
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    289c:	82 e0       	ldi	r24, 0x02	; 2
    289e:	05 c0       	rjmp	.+10     	; 0x28aa <GptStart_aSync+0xb4>
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_BUSY;
    28a0:	87 e0       	ldi	r24, 0x07	; 7
    28a2:	03 c0       	rjmp	.+6      	; 0x28aa <GptStart_aSync+0xb4>
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	01 c0       	rjmp	.+2      	; 0x28aa <GptStart_aSync+0xb4>
    28a8:	81 e0       	ldi	r24, 0x01	; 1
}
    28aa:	df 91       	pop	r29
    28ac:	cf 91       	pop	r28
    28ae:	1f 91       	pop	r17
    28b0:	0f 91       	pop	r16
    28b2:	08 95       	ret

000028b4 <GptStop>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    28b4:	81 11       	cpse	r24, r1
    28b6:	23 c0       	rjmp	.+70     	; 0x28fe <GptStop+0x4a>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	fc 01       	movw	r30, r24
    28bc:	e7 59       	subi	r30, 0x97	; 151
    28be:	fa 4f       	sbci	r31, 0xFA	; 250
    28c0:	20 81       	ld	r18, Z
    28c2:	22 23       	and	r18, r18
    28c4:	f1 f0       	breq	.+60     	; 0x2902 <GptStop+0x4e>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
    28c6:	22 30       	cpi	r18, 0x02	; 2
    28c8:	f1 f4       	brne	.+60     	; 0x2906 <GptStop+0x52>

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    28ca:	fc 01       	movw	r30, r24
    28cc:	ee 0f       	add	r30, r30
    28ce:	ff 1f       	adc	r31, r31
    28d0:	e8 0f       	add	r30, r24
    28d2:	f9 1f       	adc	r31, r25
    28d4:	e9 5f       	subi	r30, 0xF9	; 249
    28d6:	fb 4f       	sbci	r31, 0xFB	; 251
    28d8:	20 81       	ld	r18, Z
    28da:	22 23       	and	r18, r18
    28dc:	19 f0       	breq	.+6      	; 0x28e4 <GptStop+0x30>
    28de:	23 30       	cpi	r18, 0x03	; 3
    28e0:	a0 f4       	brcc	.+40     	; 0x290a <GptStop+0x56>
    28e2:	06 c0       	rjmp	.+12     	; 0x28f0 <GptStop+0x3c>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Stop the clock from the timer */
			GPT_TCCR0_REG &= ~(7 << GPT_TCCR0_CS00);
    28e4:	23 b7       	in	r18, 0x33	; 51
    28e6:	28 7f       	andi	r18, 0xF8	; 248
    28e8:	23 bf       	out	0x33, r18	; 51
			GPT_TIMSK_REG &= ~(3 << GPT_TIMSK_TOIE0);
    28ea:	29 b7       	in	r18, 0x39	; 57
    28ec:	2c 7f       	andi	r18, 0xFC	; 252
    28ee:	29 bf       	out	0x39, r18	; 57
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
    28f0:	fc 01       	movw	r30, r24
    28f2:	e7 59       	subi	r30, 0x97	; 151
    28f4:	fa 4f       	sbci	r31, 0xFA	; 250
    28f6:	23 e0       	ldi	r18, 0x03	; 3
    28f8:	20 83       	st	Z, r18
	return GPT_STATUS_ERROR_OK;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    28fe:	86 e0       	ldi	r24, 0x06	; 6
    2900:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    2902:	82 e0       	ldi	r24, 0x02	; 2
    2904:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_STOPPED;
    2906:	88 e0       	ldi	r24, 0x08	; 8
    2908:	08 95       	ret
		case GPT_TIMER_2: /* In case of Timer 2 */
		break;
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    290a:	85 e0       	ldi	r24, 0x05	; 5
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
    290c:	08 95       	ret

0000290e <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    290e:	1f 92       	push	r1
    2910:	0f 92       	push	r0
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	0f 92       	push	r0
    2916:	11 24       	eor	r1, r1
    2918:	2f 93       	push	r18
    291a:	3f 93       	push	r19
    291c:	4f 93       	push	r20
    291e:	5f 93       	push	r21
    2920:	6f 93       	push	r22
    2922:	7f 93       	push	r23
    2924:	8f 93       	push	r24
    2926:	9f 93       	push	r25
    2928:	af 93       	push	r26
    292a:	bf 93       	push	r27
    292c:	ef 93       	push	r30
    292e:	ff 93       	push	r31
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <Gpt_ISRHandler>
    2936:	ff 91       	pop	r31
    2938:	ef 91       	pop	r30
    293a:	bf 91       	pop	r27
    293c:	af 91       	pop	r26
    293e:	9f 91       	pop	r25
    2940:	8f 91       	pop	r24
    2942:	7f 91       	pop	r23
    2944:	6f 91       	pop	r22
    2946:	5f 91       	pop	r21
    2948:	4f 91       	pop	r20
    294a:	3f 91       	pop	r19
    294c:	2f 91       	pop	r18
    294e:	0f 90       	pop	r0
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	0f 90       	pop	r0
    2954:	1f 90       	pop	r1
    2956:	18 95       	reti

00002958 <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    2958:	1f 92       	push	r1
    295a:	0f 92       	push	r0
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	0f 92       	push	r0
    2960:	11 24       	eor	r1, r1
    2962:	2f 93       	push	r18
    2964:	3f 93       	push	r19
    2966:	4f 93       	push	r20
    2968:	5f 93       	push	r21
    296a:	6f 93       	push	r22
    296c:	7f 93       	push	r23
    296e:	8f 93       	push	r24
    2970:	9f 93       	push	r25
    2972:	af 93       	push	r26
    2974:	bf 93       	push	r27
    2976:	ef 93       	push	r30
    2978:	ff 93       	push	r31
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <Gpt_ISRHandler>
    2980:	ff 91       	pop	r31
    2982:	ef 91       	pop	r30
    2984:	bf 91       	pop	r27
    2986:	af 91       	pop	r26
    2988:	9f 91       	pop	r25
    298a:	8f 91       	pop	r24
    298c:	7f 91       	pop	r23
    298e:	6f 91       	pop	r22
    2990:	5f 91       	pop	r21
    2992:	4f 91       	pop	r20
    2994:	3f 91       	pop	r19
    2996:	2f 91       	pop	r18
    2998:	0f 90       	pop	r0
    299a:	0f be       	out	0x3f, r0	; 63
    299c:	0f 90       	pop	r0
    299e:	1f 90       	pop	r1
    29a0:	18 95       	reti

000029a2 <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    29a2:	1f 92       	push	r1
    29a4:	0f 92       	push	r0
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	0f 92       	push	r0
    29aa:	11 24       	eor	r1, r1
    29ac:	2f 93       	push	r18
    29ae:	3f 93       	push	r19
    29b0:	4f 93       	push	r20
    29b2:	5f 93       	push	r21
    29b4:	6f 93       	push	r22
    29b6:	7f 93       	push	r23
    29b8:	8f 93       	push	r24
    29ba:	9f 93       	push	r25
    29bc:	af 93       	push	r26
    29be:	bf 93       	push	r27
    29c0:	ef 93       	push	r30
    29c2:	ff 93       	push	r31
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <Gpt_ISRHandler>
    29ca:	ff 91       	pop	r31
    29cc:	ef 91       	pop	r30
    29ce:	bf 91       	pop	r27
    29d0:	af 91       	pop	r26
    29d2:	9f 91       	pop	r25
    29d4:	8f 91       	pop	r24
    29d6:	7f 91       	pop	r23
    29d8:	6f 91       	pop	r22
    29da:	5f 91       	pop	r21
    29dc:	4f 91       	pop	r20
    29de:	3f 91       	pop	r19
    29e0:	2f 91       	pop	r18
    29e2:	0f 90       	pop	r0
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	0f 90       	pop	r0
    29e8:	1f 90       	pop	r1
    29ea:	18 95       	reti

000029ec <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    29ec:	1f 92       	push	r1
    29ee:	0f 92       	push	r0
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	0f 92       	push	r0
    29f4:	11 24       	eor	r1, r1
    29f6:	2f 93       	push	r18
    29f8:	3f 93       	push	r19
    29fa:	4f 93       	push	r20
    29fc:	5f 93       	push	r21
    29fe:	6f 93       	push	r22
    2a00:	7f 93       	push	r23
    2a02:	8f 93       	push	r24
    2a04:	9f 93       	push	r25
    2a06:	af 93       	push	r26
    2a08:	bf 93       	push	r27
    2a0a:	ef 93       	push	r30
    2a0c:	ff 93       	push	r31
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <Gpt_ISRHandler>
    2a14:	ff 91       	pop	r31
    2a16:	ef 91       	pop	r30
    2a18:	bf 91       	pop	r27
    2a1a:	af 91       	pop	r26
    2a1c:	9f 91       	pop	r25
    2a1e:	8f 91       	pop	r24
    2a20:	7f 91       	pop	r23
    2a22:	6f 91       	pop	r22
    2a24:	5f 91       	pop	r21
    2a26:	4f 91       	pop	r20
    2a28:	3f 91       	pop	r19
    2a2a:	2f 91       	pop	r18
    2a2c:	0f 90       	pop	r0
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	0f 90       	pop	r0
    2a32:	1f 90       	pop	r1
    2a34:	18 95       	reti

00002a36 <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2a36:	1f 92       	push	r1
    2a38:	0f 92       	push	r0
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	0f 92       	push	r0
    2a3e:	11 24       	eor	r1, r1
    2a40:	2f 93       	push	r18
    2a42:	3f 93       	push	r19
    2a44:	4f 93       	push	r20
    2a46:	5f 93       	push	r21
    2a48:	6f 93       	push	r22
    2a4a:	7f 93       	push	r23
    2a4c:	8f 93       	push	r24
    2a4e:	9f 93       	push	r25
    2a50:	af 93       	push	r26
    2a52:	bf 93       	push	r27
    2a54:	ef 93       	push	r30
    2a56:	ff 93       	push	r31
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <Gpt_ISRHandler>
    2a5e:	ff 91       	pop	r31
    2a60:	ef 91       	pop	r30
    2a62:	bf 91       	pop	r27
    2a64:	af 91       	pop	r26
    2a66:	9f 91       	pop	r25
    2a68:	8f 91       	pop	r24
    2a6a:	7f 91       	pop	r23
    2a6c:	6f 91       	pop	r22
    2a6e:	5f 91       	pop	r21
    2a70:	4f 91       	pop	r20
    2a72:	3f 91       	pop	r19
    2a74:	2f 91       	pop	r18
    2a76:	0f 90       	pop	r0
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	0f 90       	pop	r0
    2a7c:	1f 90       	pop	r1
    2a7e:	18 95       	reti

00002a80 <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2a80:	1f 92       	push	r1
    2a82:	0f 92       	push	r0
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	0f 92       	push	r0
    2a88:	11 24       	eor	r1, r1
    2a8a:	2f 93       	push	r18
    2a8c:	3f 93       	push	r19
    2a8e:	4f 93       	push	r20
    2a90:	5f 93       	push	r21
    2a92:	6f 93       	push	r22
    2a94:	7f 93       	push	r23
    2a96:	8f 93       	push	r24
    2a98:	9f 93       	push	r25
    2a9a:	af 93       	push	r26
    2a9c:	bf 93       	push	r27
    2a9e:	ef 93       	push	r30
    2aa0:	ff 93       	push	r31
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <Gpt_ISRHandler>
    2aa8:	ff 91       	pop	r31
    2aaa:	ef 91       	pop	r30
    2aac:	bf 91       	pop	r27
    2aae:	af 91       	pop	r26
    2ab0:	9f 91       	pop	r25
    2ab2:	8f 91       	pop	r24
    2ab4:	7f 91       	pop	r23
    2ab6:	6f 91       	pop	r22
    2ab8:	5f 91       	pop	r21
    2aba:	4f 91       	pop	r20
    2abc:	3f 91       	pop	r19
    2abe:	2f 91       	pop	r18
    2ac0:	0f 90       	pop	r0
    2ac2:	0f be       	out	0x3f, r0	; 63
    2ac4:	0f 90       	pop	r0
    2ac6:	1f 90       	pop	r1
    2ac8:	18 95       	reti

00002aca <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2aca:	1f 92       	push	r1
    2acc:	0f 92       	push	r0
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	0f 92       	push	r0
    2ad2:	11 24       	eor	r1, r1
    2ad4:	2f 93       	push	r18
    2ad6:	3f 93       	push	r19
    2ad8:	4f 93       	push	r20
    2ada:	5f 93       	push	r21
    2adc:	6f 93       	push	r22
    2ade:	7f 93       	push	r23
    2ae0:	8f 93       	push	r24
    2ae2:	9f 93       	push	r25
    2ae4:	af 93       	push	r26
    2ae6:	bf 93       	push	r27
    2ae8:	ef 93       	push	r30
    2aea:	ff 93       	push	r31
    2aec:	82 e0       	ldi	r24, 0x02	; 2
    2aee:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <Gpt_ISRHandler>
    2af2:	ff 91       	pop	r31
    2af4:	ef 91       	pop	r30
    2af6:	bf 91       	pop	r27
    2af8:	af 91       	pop	r26
    2afa:	9f 91       	pop	r25
    2afc:	8f 91       	pop	r24
    2afe:	7f 91       	pop	r23
    2b00:	6f 91       	pop	r22
    2b02:	5f 91       	pop	r21
    2b04:	4f 91       	pop	r20
    2b06:	3f 91       	pop	r19
    2b08:	2f 91       	pop	r18
    2b0a:	0f 90       	pop	r0
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	0f 90       	pop	r0
    2b10:	1f 90       	pop	r1
    2b12:	18 95       	reti

00002b14 <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2b14:	1f 92       	push	r1
    2b16:	0f 92       	push	r0
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	0f 92       	push	r0
    2b1c:	11 24       	eor	r1, r1
    2b1e:	2f 93       	push	r18
    2b20:	3f 93       	push	r19
    2b22:	4f 93       	push	r20
    2b24:	5f 93       	push	r21
    2b26:	6f 93       	push	r22
    2b28:	7f 93       	push	r23
    2b2a:	8f 93       	push	r24
    2b2c:	9f 93       	push	r25
    2b2e:	af 93       	push	r26
    2b30:	bf 93       	push	r27
    2b32:	ef 93       	push	r30
    2b34:	ff 93       	push	r31
    2b36:	82 e0       	ldi	r24, 0x02	; 2
    2b38:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <Gpt_ISRHandler>
    2b3c:	ff 91       	pop	r31
    2b3e:	ef 91       	pop	r30
    2b40:	bf 91       	pop	r27
    2b42:	af 91       	pop	r26
    2b44:	9f 91       	pop	r25
    2b46:	8f 91       	pop	r24
    2b48:	7f 91       	pop	r23
    2b4a:	6f 91       	pop	r22
    2b4c:	5f 91       	pop	r21
    2b4e:	4f 91       	pop	r20
    2b50:	3f 91       	pop	r19
    2b52:	2f 91       	pop	r18
    2b54:	0f 90       	pop	r0
    2b56:	0f be       	out	0x3f, r0	; 63
    2b58:	0f 90       	pop	r0
    2b5a:	1f 90       	pop	r1
    2b5c:	18 95       	reti

00002b5e <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
    2b5e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2b62:	86 30       	cpi	r24, 0x06	; 6
    2b64:	41 f0       	breq	.+16     	; 0x2b76 <I2C_MasterInit+0x18>
    2b66:	11 b8       	out	0x01, r1	; 1
    2b68:	8a ef       	ldi	r24, 0xFA	; 250
    2b6a:	80 b9       	out	0x00, r24	; 0
    2b6c:	86 e0       	ldi	r24, 0x06	; 6
    2b6e:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <genuI2C_Status>
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	08 95       	ret
    2b76:	87 e0       	ldi	r24, 0x07	; 7
    2b78:	08 95       	ret

00002b7a <I2C_MasterSendSTART>:
    2b7a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2b7e:	86 30       	cpi	r24, 0x06	; 6
    2b80:	59 f4       	brne	.+22     	; 0x2b98 <I2C_MasterSendSTART+0x1e>
    2b82:	84 ea       	ldi	r24, 0xA4	; 164
    2b84:	86 bf       	out	0x36, r24	; 54
    2b86:	06 b6       	in	r0, 0x36	; 54
    2b88:	07 fe       	sbrs	r0, 7
    2b8a:	fd cf       	rjmp	.-6      	; 0x2b86 <I2C_MasterSendSTART+0xc>
    2b8c:	81 b1       	in	r24, 0x01	; 1
    2b8e:	88 7f       	andi	r24, 0xF8	; 248
    2b90:	88 30       	cpi	r24, 0x08	; 8
    2b92:	21 f0       	breq	.+8      	; 0x2b9c <I2C_MasterSendSTART+0x22>
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	08 95       	ret
    2b98:	85 e0       	ldi	r24, 0x05	; 5
    2b9a:	08 95       	ret
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	08 95       	ret

00002ba0 <I2C_MasterSendSlaveAddress>:
    2ba0:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <genuI2C_Status>
    2ba4:	96 30       	cpi	r25, 0x06	; 6
    2ba6:	29 f5       	brne	.+74     	; 0x2bf2 <I2C_MasterSendSlaveAddress+0x52>
    2ba8:	62 30       	cpi	r22, 0x02	; 2
    2baa:	28 f5       	brcc	.+74     	; 0x2bf6 <I2C_MasterSendSlaveAddress+0x56>
    2bac:	88 23       	and	r24, r24
    2bae:	2c f1       	brlt	.+74     	; 0x2bfa <I2C_MasterSendSlaveAddress+0x5a>
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	68 2b       	or	r22, r24
    2bb8:	63 b9       	out	0x03, r22	; 3
    2bba:	84 e8       	ldi	r24, 0x84	; 132
    2bbc:	86 bf       	out	0x36, r24	; 54
    2bbe:	06 b6       	in	r0, 0x36	; 54
    2bc0:	07 fe       	sbrs	r0, 7
    2bc2:	fd cf       	rjmp	.-6      	; 0x2bbe <I2C_MasterSendSlaveAddress+0x1e>
    2bc4:	81 b1       	in	r24, 0x01	; 1
    2bc6:	88 7f       	andi	r24, 0xF8	; 248
    2bc8:	88 33       	cpi	r24, 0x38	; 56
    2bca:	59 f0       	breq	.+22     	; 0x2be2 <I2C_MasterSendSlaveAddress+0x42>
    2bcc:	28 f4       	brcc	.+10     	; 0x2bd8 <I2C_MasterSendSlaveAddress+0x38>
    2bce:	88 31       	cpi	r24, 0x18	; 24
    2bd0:	b1 f0       	breq	.+44     	; 0x2bfe <I2C_MasterSendSlaveAddress+0x5e>
    2bd2:	80 32       	cpi	r24, 0x20	; 32
    2bd4:	41 f0       	breq	.+16     	; 0x2be6 <I2C_MasterSendSlaveAddress+0x46>
    2bd6:	0b c0       	rjmp	.+22     	; 0x2bee <I2C_MasterSendSlaveAddress+0x4e>
    2bd8:	80 34       	cpi	r24, 0x40	; 64
    2bda:	89 f0       	breq	.+34     	; 0x2bfe <I2C_MasterSendSlaveAddress+0x5e>
    2bdc:	88 34       	cpi	r24, 0x48	; 72
    2bde:	29 f0       	breq	.+10     	; 0x2bea <I2C_MasterSendSlaveAddress+0x4a>
    2be0:	06 c0       	rjmp	.+12     	; 0x2bee <I2C_MasterSendSlaveAddress+0x4e>
    2be2:	88 e3       	ldi	r24, 0x38	; 56
    2be4:	08 95       	ret
    2be6:	80 e2       	ldi	r24, 0x20	; 32
    2be8:	08 95       	ret
    2bea:	88 e4       	ldi	r24, 0x48	; 72
    2bec:	08 95       	ret
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	08 95       	ret
    2bf2:	85 e0       	ldi	r24, 0x05	; 5
    2bf4:	08 95       	ret
    2bf6:	82 e0       	ldi	r24, 0x02	; 2
    2bf8:	08 95       	ret
    2bfa:	83 e0       	ldi	r24, 0x03	; 3
    2bfc:	08 95       	ret
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	08 95       	ret

00002c02 <I2C_MasterSendRepSTART>:
    2c02:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2c06:	86 30       	cpi	r24, 0x06	; 6
    2c08:	59 f4       	brne	.+22     	; 0x2c20 <I2C_MasterSendRepSTART+0x1e>
    2c0a:	84 ea       	ldi	r24, 0xA4	; 164
    2c0c:	86 bf       	out	0x36, r24	; 54
    2c0e:	06 b6       	in	r0, 0x36	; 54
    2c10:	07 fe       	sbrs	r0, 7
    2c12:	fd cf       	rjmp	.-6      	; 0x2c0e <I2C_MasterSendRepSTART+0xc>
    2c14:	81 b1       	in	r24, 0x01	; 1
    2c16:	88 7f       	andi	r24, 0xF8	; 248
    2c18:	80 31       	cpi	r24, 0x10	; 16
    2c1a:	21 f0       	breq	.+8      	; 0x2c24 <I2C_MasterSendRepSTART+0x22>
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	08 95       	ret
    2c20:	85 e0       	ldi	r24, 0x05	; 5
    2c22:	08 95       	ret
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	08 95       	ret

00002c28 <I2C_MasterSendSTOP>:
    2c28:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2c2c:	86 30       	cpi	r24, 0x06	; 6
    2c2e:	39 f4       	brne	.+14     	; 0x2c3e <I2C_MasterSendSTOP+0x16>
    2c30:	84 e9       	ldi	r24, 0x94	; 148
    2c32:	86 bf       	out	0x36, r24	; 54
    2c34:	06 b6       	in	r0, 0x36	; 54
    2c36:	04 fc       	sbrc	r0, 4
    2c38:	fd cf       	rjmp	.-6      	; 0x2c34 <I2C_MasterSendSTOP+0xc>
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	08 95       	ret
    2c3e:	85 e0       	ldi	r24, 0x05	; 5
    2c40:	08 95       	ret

00002c42 <I2C_MasterSendByte>:
    2c42:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <genuI2C_Status>
    2c46:	96 30       	cpi	r25, 0x06	; 6
    2c48:	69 f4       	brne	.+26     	; 0x2c64 <I2C_MasterSendByte+0x22>
    2c4a:	83 b9       	out	0x03, r24	; 3
    2c4c:	84 e8       	ldi	r24, 0x84	; 132
    2c4e:	86 bf       	out	0x36, r24	; 54
    2c50:	06 b6       	in	r0, 0x36	; 54
    2c52:	07 fe       	sbrs	r0, 7
    2c54:	fd cf       	rjmp	.-6      	; 0x2c50 <I2C_MasterSendByte+0xe>
    2c56:	81 b1       	in	r24, 0x01	; 1
    2c58:	88 7f       	andi	r24, 0xF8	; 248
    2c5a:	88 32       	cpi	r24, 0x28	; 40
    2c5c:	29 f0       	breq	.+10     	; 0x2c68 <I2C_MasterSendByte+0x26>
    2c5e:	80 33       	cpi	r24, 0x30	; 48
    2c60:	29 f4       	brne	.+10     	; 0x2c6c <I2C_MasterSendByte+0x2a>
    2c62:	08 95       	ret
    2c64:	85 e0       	ldi	r24, 0x05	; 5
    2c66:	08 95       	ret
    2c68:	88 e2       	ldi	r24, 0x28	; 40
    2c6a:	08 95       	ret
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	08 95       	ret

00002c70 <I2C_MasterReceiveByte_ACK>:
    2c70:	fc 01       	movw	r30, r24
    2c72:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <genuI2C_Status>
    2c76:	96 30       	cpi	r25, 0x06	; 6
    2c78:	79 f4       	brne	.+30     	; 0x2c98 <I2C_MasterReceiveByte_ACK+0x28>
    2c7a:	30 97       	sbiw	r30, 0x00	; 0
    2c7c:	79 f0       	breq	.+30     	; 0x2c9c <I2C_MasterReceiveByte_ACK+0x2c>
    2c7e:	84 ec       	ldi	r24, 0xC4	; 196
    2c80:	86 bf       	out	0x36, r24	; 54
    2c82:	06 b6       	in	r0, 0x36	; 54
    2c84:	07 fe       	sbrs	r0, 7
    2c86:	fd cf       	rjmp	.-6      	; 0x2c82 <I2C_MasterReceiveByte_ACK+0x12>
    2c88:	81 b1       	in	r24, 0x01	; 1
    2c8a:	88 7f       	andi	r24, 0xF8	; 248
    2c8c:	80 35       	cpi	r24, 0x50	; 80
    2c8e:	41 f4       	brne	.+16     	; 0x2ca0 <I2C_MasterReceiveByte_ACK+0x30>
    2c90:	83 b1       	in	r24, 0x03	; 3
    2c92:	80 83       	st	Z, r24
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	08 95       	ret
    2c98:	85 e0       	ldi	r24, 0x05	; 5
    2c9a:	08 95       	ret
    2c9c:	84 e0       	ldi	r24, 0x04	; 4
    2c9e:	08 95       	ret
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	08 95       	ret

00002ca4 <I2C_MasterReceiveByte_NACK>:
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <genuI2C_Status>
    2caa:	96 30       	cpi	r25, 0x06	; 6
    2cac:	79 f4       	brne	.+30     	; 0x2ccc <I2C_MasterReceiveByte_NACK+0x28>
    2cae:	30 97       	sbiw	r30, 0x00	; 0
    2cb0:	79 f0       	breq	.+30     	; 0x2cd0 <I2C_MasterReceiveByte_NACK+0x2c>
    2cb2:	84 e8       	ldi	r24, 0x84	; 132
    2cb4:	86 bf       	out	0x36, r24	; 54
    2cb6:	06 b6       	in	r0, 0x36	; 54
    2cb8:	07 fe       	sbrs	r0, 7
    2cba:	fd cf       	rjmp	.-6      	; 0x2cb6 <I2C_MasterReceiveByte_NACK+0x12>
    2cbc:	81 b1       	in	r24, 0x01	; 1
    2cbe:	88 7f       	andi	r24, 0xF8	; 248
    2cc0:	88 35       	cpi	r24, 0x58	; 88
    2cc2:	41 f4       	brne	.+16     	; 0x2cd4 <I2C_MasterReceiveByte_NACK+0x30>
    2cc4:	83 b1       	in	r24, 0x03	; 3
    2cc6:	80 83       	st	Z, r24
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	08 95       	ret
    2ccc:	85 e0       	ldi	r24, 0x05	; 5
    2cce:	08 95       	ret
    2cd0:	84 e0       	ldi	r24, 0x04	; 4
    2cd2:	08 95       	ret
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	08 95       	ret

00002cd8 <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
    2cd8:	7f 92       	push	r7
    2cda:	8f 92       	push	r8
    2cdc:	9f 92       	push	r9
    2cde:	af 92       	push	r10
    2ce0:	bf 92       	push	r11
    2ce2:	cf 92       	push	r12
    2ce4:	df 92       	push	r13
    2ce6:	ef 92       	push	r14
    2ce8:	ff 92       	push	r15
    2cea:	0f 93       	push	r16
    2cec:	1f 93       	push	r17
    2cee:	cf 93       	push	r28
    2cf0:	df 93       	push	r29
    2cf2:	78 2e       	mov	r7, r24
    2cf4:	eb 01       	movw	r28, r22
    2cf6:	7a 01       	movw	r14, r20
    2cf8:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    2cfa:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2cfe:	86 30       	cpi	r24, 0x06	; 6
    2d00:	09 f0       	breq	.+2      	; 0x2d04 <I2C_MasterReceiveGeneral+0x2c>
    2d02:	47 c0       	rjmp	.+142    	; 0x2d92 <I2C_MasterReceiveGeneral+0xba>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
    2d04:	20 97       	sbiw	r28, 0x00	; 0
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <I2C_MasterReceiveGeneral+0x32>
    2d08:	46 c0       	rjmp	.+140    	; 0x2d96 <I2C_MasterReceiveGeneral+0xbe>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
    2d0a:	23 2b       	or	r18, r19
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <I2C_MasterReceiveGeneral+0x38>
    2d0e:	45 c0       	rjmp	.+138    	; 0x2d9a <I2C_MasterReceiveGeneral+0xc2>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    2d10:	77 20       	and	r7, r7
    2d12:	0c f4       	brge	.+2      	; 0x2d16 <I2C_MasterReceiveGeneral+0x3e>
    2d14:	44 c0       	rjmp	.+136    	; 0x2d9e <I2C_MasterReceiveGeneral+0xc6>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2d16:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <I2C_MasterSendSTART>
    2d1a:	88 23       	and	r24, r24
    2d1c:	09 f4       	brne	.+2      	; 0x2d20 <I2C_MasterReceiveGeneral+0x48>
    2d1e:	4a c0       	rjmp	.+148    	; 0x2db4 <I2C_MasterReceiveGeneral+0xdc>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2d20:	60 e0       	ldi	r22, 0x00	; 0
    2d22:	87 2d       	mov	r24, r7
    2d24:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <I2C_MasterSendSlaveAddress>
    2d28:	81 30       	cpi	r24, 0x01	; 1
    2d2a:	d9 f5       	brne	.+118    	; 0x2da2 <I2C_MasterReceiveGeneral+0xca>
    2d2c:	0b c0       	rjmp	.+22     	; 0x2d44 <I2C_MasterReceiveGeneral+0x6c>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2d2e:	4e 01       	movw	r8, r28
    2d30:	8f ef       	ldi	r24, 0xFF	; 255
    2d32:	88 1a       	sub	r8, r24
    2d34:	98 0a       	sbc	r9, r24
    2d36:	88 81       	ld	r24, Y
    2d38:	0e 94 21 16 	call	0x2c42	; 0x2c42 <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    2d3c:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2d3e:	88 23       	and	r24, r24
    2d40:	c9 f1       	breq	.+114    	; 0x2db4 <I2C_MasterReceiveGeneral+0xdc>
    2d42:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    2d44:	57 01       	movw	r10, r14
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	a8 1a       	sub	r10, r24
    2d4a:	b1 08       	sbc	r11, r1
    2d4c:	ef 28       	or	r14, r15
    2d4e:	79 f7       	brne	.-34     	; 0x2d2e <I2C_MasterReceiveGeneral+0x56>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
    2d50:	0e 94 01 16 	call	0x2c02	; 0x2c02 <I2C_MasterSendRepSTART>
    2d54:	81 30       	cpi	r24, 0x01	; 1
    2d56:	39 f5       	brne	.+78     	; 0x2da6 <I2C_MasterReceiveGeneral+0xce>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2d58:	61 e0       	ldi	r22, 0x01	; 1
    2d5a:	87 2d       	mov	r24, r7
    2d5c:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <I2C_MasterSendSlaveAddress>
    2d60:	81 30       	cpi	r24, 0x01	; 1
    2d62:	19 f5       	brne	.+70     	; 0x2daa <I2C_MasterReceiveGeneral+0xd2>
    2d64:	08 c0       	rjmp	.+16     	; 0x2d76 <I2C_MasterReceiveGeneral+0x9e>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
    2d66:	e6 01       	movw	r28, r12
    2d68:	21 96       	adiw	r28, 0x01	; 1
    2d6a:	c6 01       	movw	r24, r12
    2d6c:	0e 94 38 16 	call	0x2c70	; 0x2c70 <I2C_MasterReceiveByte_ACK>
    2d70:	81 30       	cpi	r24, 0x01	; 1
    2d72:	e9 f4       	brne	.+58     	; 0x2dae <I2C_MasterReceiveGeneral+0xd6>
    2d74:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
    2d76:	01 50       	subi	r16, 0x01	; 1
    2d78:	11 09       	sbc	r17, r1
    2d7a:	a9 f7       	brne	.-22     	; 0x2d66 <I2C_MasterReceiveGeneral+0x8e>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
    2d7c:	c6 01       	movw	r24, r12
    2d7e:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <I2C_MasterReceiveByte_NACK>
    2d82:	81 30       	cpi	r24, 0x01	; 1
    2d84:	b1 f4       	brne	.+44     	; 0x2db2 <I2C_MasterReceiveGeneral+0xda>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
    2d86:	0e 94 14 16 	call	0x2c28	; 0x2c28 <I2C_MasterSendSTOP>
    2d8a:	81 30       	cpi	r24, 0x01	; 1
    2d8c:	99 f0       	breq	.+38     	; 0x2db4 <I2C_MasterReceiveGeneral+0xdc>
		return I2C_STATUS_ERROR_NOK;
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	11 c0       	rjmp	.+34     	; 0x2db4 <I2C_MasterReceiveGeneral+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    2d92:	85 e0       	ldi	r24, 0x05	; 5
    2d94:	0f c0       	rjmp	.+30     	; 0x2db4 <I2C_MasterReceiveGeneral+0xdc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2d96:	84 e0       	ldi	r24, 0x04	; 4
    2d98:	0d c0       	rjmp	.+26     	; 0x2db4 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2d9a:	84 e0       	ldi	r24, 0x04	; 4
    2d9c:	0b c0       	rjmp	.+22     	; 0x2db4 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    2d9e:	83 e0       	ldi	r24, 0x03	; 3
    2da0:	09 c0       	rjmp	.+18     	; 0x2db4 <I2C_MasterReceiveGeneral+0xdc>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	07 c0       	rjmp	.+14     	; 0x2db4 <I2C_MasterReceiveGeneral+0xdc>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	05 c0       	rjmp	.+10     	; 0x2db4 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	03 c0       	rjmp	.+6      	; 0x2db4 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
    2dae:	80 e0       	ldi	r24, 0x00	; 0
    2db0:	01 c0       	rjmp	.+2      	; 0x2db4 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    2db2:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
    2db4:	df 91       	pop	r29
    2db6:	cf 91       	pop	r28
    2db8:	1f 91       	pop	r17
    2dba:	0f 91       	pop	r16
    2dbc:	ff 90       	pop	r15
    2dbe:	ef 90       	pop	r14
    2dc0:	df 90       	pop	r13
    2dc2:	cf 90       	pop	r12
    2dc4:	bf 90       	pop	r11
    2dc6:	af 90       	pop	r10
    2dc8:	9f 90       	pop	r9
    2dca:	8f 90       	pop	r8
    2dcc:	7f 90       	pop	r7
    2dce:	08 95       	ret

00002dd0 <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
    2dd0:	bf 92       	push	r11
    2dd2:	cf 92       	push	r12
    2dd4:	df 92       	push	r13
    2dd6:	ef 92       	push	r14
    2dd8:	ff 92       	push	r15
    2dda:	0f 93       	push	r16
    2ddc:	1f 93       	push	r17
    2dde:	cf 93       	push	r28
    2de0:	df 93       	push	r29
    2de2:	18 2f       	mov	r17, r24
    2de4:	06 2f       	mov	r16, r22
    2de6:	ea 01       	movw	r28, r20
    2de8:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    2dea:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2dee:	86 30       	cpi	r24, 0x06	; 6
    2df0:	59 f5       	brne	.+86     	; 0x2e48 <I2C_MasterSendToLocation+0x78>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    2df2:	20 97       	sbiw	r28, 0x00	; 0
    2df4:	59 f1       	breq	.+86     	; 0x2e4c <I2C_MasterSendToLocation+0x7c>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    2df6:	11 23       	and	r17, r17
    2df8:	5c f1       	brlt	.+86     	; 0x2e50 <I2C_MasterSendToLocation+0x80>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2dfa:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <I2C_MasterSendSTART>
    2dfe:	88 23       	and	r24, r24
    2e00:	61 f1       	breq	.+88     	; 0x2e5a <I2C_MasterSendToLocation+0x8a>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2e02:	60 e0       	ldi	r22, 0x00	; 0
    2e04:	81 2f       	mov	r24, r17
    2e06:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <I2C_MasterSendSlaveAddress>
    2e0a:	b8 2e       	mov	r11, r24
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	b8 12       	cpse	r11, r24
    2e10:	21 c0       	rjmp	.+66     	; 0x2e54 <I2C_MasterSendToLocation+0x84>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2e12:	80 2f       	mov	r24, r16
    2e14:	0e 94 21 16 	call	0x2c42	; 0x2c42 <I2C_MasterSendByte>
    2e18:	81 11       	cpse	r24, r1
    2e1a:	0c c0       	rjmp	.+24     	; 0x2e34 <I2C_MasterSendToLocation+0x64>
    2e1c:	1e c0       	rjmp	.+60     	; 0x2e5a <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2e1e:	6e 01       	movw	r12, r28
    2e20:	8f ef       	ldi	r24, 0xFF	; 255
    2e22:	c8 1a       	sub	r12, r24
    2e24:	d8 0a       	sbc	r13, r24
    2e26:	88 81       	ld	r24, Y
    2e28:	0e 94 21 16 	call	0x2c42	; 0x2c42 <I2C_MasterSendByte>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    2e2c:	78 01       	movw	r14, r16
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2e2e:	88 23       	and	r24, r24
    2e30:	a1 f0       	breq	.+40     	; 0x2e5a <I2C_MasterSendToLocation+0x8a>
    2e32:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    2e34:	87 01       	movw	r16, r14
    2e36:	01 50       	subi	r16, 0x01	; 1
    2e38:	11 09       	sbc	r17, r1
    2e3a:	ef 28       	or	r14, r15
    2e3c:	81 f7       	brne	.-32     	; 0x2e1e <I2C_MasterSendToLocation+0x4e>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2e3e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <I2C_MasterSendSTOP>
    2e42:	81 11       	cpse	r24, r1
    2e44:	09 c0       	rjmp	.+18     	; 0x2e58 <I2C_MasterSendToLocation+0x88>
    2e46:	09 c0       	rjmp	.+18     	; 0x2e5a <I2C_MasterSendToLocation+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    2e48:	85 e0       	ldi	r24, 0x05	; 5
    2e4a:	07 c0       	rjmp	.+14     	; 0x2e5a <I2C_MasterSendToLocation+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2e4c:	84 e0       	ldi	r24, 0x04	; 4
    2e4e:	05 c0       	rjmp	.+10     	; 0x2e5a <I2C_MasterSendToLocation+0x8a>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    2e50:	83 e0       	ldi	r24, 0x03	; 3
    2e52:	03 c0       	rjmp	.+6      	; 0x2e5a <I2C_MasterSendToLocation+0x8a>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	01 c0       	rjmp	.+2      	; 0x2e5a <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
    2e58:	8b 2d       	mov	r24, r11
}
    2e5a:	df 91       	pop	r29
    2e5c:	cf 91       	pop	r28
    2e5e:	1f 91       	pop	r17
    2e60:	0f 91       	pop	r16
    2e62:	ff 90       	pop	r15
    2e64:	ef 90       	pop	r14
    2e66:	df 90       	pop	r13
    2e68:	cf 90       	pop	r12
    2e6a:	bf 90       	pop	r11
    2e6c:	08 95       	ret

00002e6e <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
    2e6e:	0f 93       	push	r16
    2e70:	1f 93       	push	r17
    2e72:	cf 93       	push	r28
    2e74:	df 93       	push	r29
    2e76:	1f 92       	push	r1
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
    2e7e:	89 01       	movw	r16, r18
    2e80:	9a 01       	movw	r18, r20
    2e82:	41 e0       	ldi	r20, 0x01	; 1
    2e84:	50 e0       	ldi	r21, 0x00	; 0
    2e86:	be 01       	movw	r22, r28
    2e88:	6f 5f       	subi	r22, 0xFF	; 255
    2e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e8c:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <I2C_MasterReceiveGeneral>
}
    2e90:	0f 90       	pop	r0
    2e92:	df 91       	pop	r29
    2e94:	cf 91       	pop	r28
    2e96:	1f 91       	pop	r17
    2e98:	0f 91       	pop	r16
    2e9a:	08 95       	ret

00002e9c <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
    2e9c:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <genuSpi_Status>
    2ea0:	87 30       	cpi	r24, 0x07	; 7
    2ea2:	b9 f0       	breq	.+46     	; 0x2ed2 <Spi_init+0x36>
    2ea4:	87 b3       	in	r24, 0x17	; 23
    2ea6:	80 64       	ori	r24, 0x40	; 64
    2ea8:	87 bb       	out	0x17, r24	; 23
    2eaa:	87 b3       	in	r24, 0x17	; 23
    2eac:	8f 7d       	andi	r24, 0xDF	; 223
    2eae:	87 bb       	out	0x17, r24	; 23
    2eb0:	87 b3       	in	r24, 0x17	; 23
    2eb2:	8f 7e       	andi	r24, 0xEF	; 239
    2eb4:	87 bb       	out	0x17, r24	; 23
    2eb6:	87 b3       	in	r24, 0x17	; 23
    2eb8:	8f 77       	andi	r24, 0x7F	; 127
    2eba:	87 bb       	out	0x17, r24	; 23
    2ebc:	8d b1       	in	r24, 0x0d	; 13
    2ebe:	8f 7e       	andi	r24, 0xEF	; 239
    2ec0:	8d b9       	out	0x0d, r24	; 13
    2ec2:	8d b1       	in	r24, 0x0d	; 13
    2ec4:	80 64       	ori	r24, 0x40	; 64
    2ec6:	8d b9       	out	0x0d, r24	; 13
    2ec8:	87 e0       	ldi	r24, 0x07	; 7
    2eca:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <genuSpi_Status>
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	08 95       	ret
    2ed2:	88 e0       	ldi	r24, 0x08	; 8
    2ed4:	08 95       	ret

00002ed6 <Spi_SlaveReceiveByte>:
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <genuSpi_Status>
    2edc:	97 30       	cpi	r25, 0x07	; 7
    2ede:	41 f4       	brne	.+16     	; 0x2ef0 <Spi_SlaveReceiveByte+0x1a>
    2ee0:	30 97       	sbiw	r30, 0x00	; 0
    2ee2:	41 f0       	breq	.+16     	; 0x2ef4 <Spi_SlaveReceiveByte+0x1e>
    2ee4:	77 9b       	sbis	0x0e, 7	; 14
    2ee6:	fe cf       	rjmp	.-4      	; 0x2ee4 <Spi_SlaveReceiveByte+0xe>
    2ee8:	8f b1       	in	r24, 0x0f	; 15
    2eea:	80 83       	st	Z, r24
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	08 95       	ret
    2ef0:	86 e0       	ldi	r24, 0x06	; 6
    2ef2:	08 95       	ret
    2ef4:	85 e0       	ldi	r24, 0x05	; 5
    2ef6:	08 95       	ret

00002ef8 <Spi_SlaveReceivePacket>:
    2ef8:	cf 92       	push	r12
    2efa:	df 92       	push	r13
    2efc:	ef 92       	push	r14
    2efe:	ff 92       	push	r15
    2f00:	1f 93       	push	r17
    2f02:	cf 93       	push	r28
    2f04:	df 93       	push	r29
    2f06:	6c 01       	movw	r12, r24
    2f08:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <genuSpi_Status>
    2f0c:	97 30       	cpi	r25, 0x07	; 7
    2f0e:	b1 f4       	brne	.+44     	; 0x2f3c <Spi_SlaveReceivePacket+0x44>
    2f10:	7b 01       	movw	r14, r22
    2f12:	10 e0       	ldi	r17, 0x00	; 0
    2f14:	0c c0       	rjmp	.+24     	; 0x2f2e <Spi_SlaveReceivePacket+0x36>
    2f16:	e6 01       	movw	r28, r12
    2f18:	c8 0f       	add	r28, r24
    2f1a:	d9 1f       	adc	r29, r25
    2f1c:	ce 01       	movw	r24, r28
    2f1e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <Spi_SlaveReceiveByte>
    2f22:	81 30       	cpi	r24, 0x01	; 1
    2f24:	69 f4       	brne	.+26     	; 0x2f40 <Spi_SlaveReceivePacket+0x48>
    2f26:	98 81       	ld	r25, Y
    2f28:	99 23       	and	r25, r25
    2f2a:	59 f0       	breq	.+22     	; 0x2f42 <Spi_SlaveReceivePacket+0x4a>
    2f2c:	1f 5f       	subi	r17, 0xFF	; 255
    2f2e:	81 2f       	mov	r24, r17
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	8e 15       	cp	r24, r14
    2f34:	9f 05       	cpc	r25, r15
    2f36:	78 f3       	brcs	.-34     	; 0x2f16 <Spi_SlaveReceivePacket+0x1e>
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	03 c0       	rjmp	.+6      	; 0x2f42 <Spi_SlaveReceivePacket+0x4a>
    2f3c:	86 e0       	ldi	r24, 0x06	; 6
    2f3e:	01 c0       	rjmp	.+2      	; 0x2f42 <Spi_SlaveReceivePacket+0x4a>
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	df 91       	pop	r29
    2f44:	cf 91       	pop	r28
    2f46:	1f 91       	pop	r17
    2f48:	ff 90       	pop	r15
    2f4a:	ef 90       	pop	r14
    2f4c:	df 90       	pop	r13
    2f4e:	cf 90       	pop	r12
    2f50:	08 95       	ret

00002f52 <__vector_12>:


    2f52:	1f 92       	push	r1
    2f54:	0f 92       	push	r0
    2f56:	0f b6       	in	r0, 0x3f	; 63
    2f58:	0f 92       	push	r0
    2f5a:	11 24       	eor	r1, r1
    2f5c:	2f 93       	push	r18
    2f5e:	3f 93       	push	r19
    2f60:	4f 93       	push	r20
    2f62:	5f 93       	push	r21
    2f64:	6f 93       	push	r22
    2f66:	7f 93       	push	r23
    2f68:	8f 93       	push	r24
    2f6a:	9f 93       	push	r25
    2f6c:	af 93       	push	r26
    2f6e:	bf 93       	push	r27
    2f70:	ef 93       	push	r30
    2f72:	ff 93       	push	r31
    2f74:	e0 91 6c 05 	lds	r30, 0x056C	; 0x80056c <SPI_STC_CallBackPtr>
    2f78:	f0 91 6d 05 	lds	r31, 0x056D	; 0x80056d <SPI_STC_CallBackPtr+0x1>
    2f7c:	09 95       	icall
    2f7e:	ff 91       	pop	r31
    2f80:	ef 91       	pop	r30
    2f82:	bf 91       	pop	r27
    2f84:	af 91       	pop	r26
    2f86:	9f 91       	pop	r25
    2f88:	8f 91       	pop	r24
    2f8a:	7f 91       	pop	r23
    2f8c:	6f 91       	pop	r22
    2f8e:	5f 91       	pop	r21
    2f90:	4f 91       	pop	r20
    2f92:	3f 91       	pop	r19
    2f94:	2f 91       	pop	r18
    2f96:	0f 90       	pop	r0
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	0f 90       	pop	r0
    2f9c:	1f 90       	pop	r1
    2f9e:	18 95       	reti

00002fa0 <stringLength>:
			temp_val = pu8_String[s8_loopIndex] - 87;
			*pu16_Num += temp_val*power(16,u8_powerValue++);
		}

	}
}
    2fa0:	ac 01       	movw	r20, r24
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	01 c0       	rjmp	.+2      	; 0x2fa8 <stringLength+0x8>
    2fa6:	8f 5f       	subi	r24, 0xFF	; 255
    2fa8:	fa 01       	movw	r30, r20
    2faa:	e8 0f       	add	r30, r24
    2fac:	f1 1d       	adc	r31, r1
    2fae:	20 81       	ld	r18, Z
    2fb0:	21 11       	cpse	r18, r1
    2fb2:	f9 cf       	rjmp	.-14     	; 0x2fa6 <stringLength+0x6>
    2fb4:	8f 5f       	subi	r24, 0xFF	; 255
    2fb6:	08 95       	ret

00002fb8 <stringCompare>:
    2fb8:	ff 92       	push	r15
    2fba:	0f 93       	push	r16
    2fbc:	1f 93       	push	r17
    2fbe:	cf 93       	push	r28
    2fc0:	df 93       	push	r29
    2fc2:	8c 01       	movw	r16, r24
    2fc4:	eb 01       	movw	r28, r22
    2fc6:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <stringLength>
    2fca:	f8 2e       	mov	r15, r24
    2fcc:	ce 01       	movw	r24, r28
    2fce:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <stringLength>
    2fd2:	8f 15       	cp	r24, r15
    2fd4:	b8 f0       	brcs	.+46     	; 0x3004 <stringCompare+0x4c>
    2fd6:	f8 16       	cp	r15, r24
    2fd8:	b8 f0       	brcs	.+46     	; 0x3008 <stringCompare+0x50>
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	09 c0       	rjmp	.+18     	; 0x2ff0 <stringCompare+0x38>
    2fde:	fe 01       	movw	r30, r28
    2fe0:	e8 0f       	add	r30, r24
    2fe2:	f9 1f       	adc	r31, r25
    2fe4:	80 81       	ld	r24, Z
    2fe6:	82 17       	cp	r24, r18
    2fe8:	88 f0       	brcs	.+34     	; 0x300c <stringCompare+0x54>
    2fea:	28 17       	cp	r18, r24
    2fec:	88 f0       	brcs	.+34     	; 0x3010 <stringCompare+0x58>
    2fee:	3f 5f       	subi	r19, 0xFF	; 255
    2ff0:	83 2f       	mov	r24, r19
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	f8 01       	movw	r30, r16
    2ff6:	e8 0f       	add	r30, r24
    2ff8:	f9 1f       	adc	r31, r25
    2ffa:	20 81       	ld	r18, Z
    2ffc:	21 11       	cpse	r18, r1
    2ffe:	ef cf       	rjmp	.-34     	; 0x2fde <stringCompare+0x26>
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	07 c0       	rjmp	.+14     	; 0x3012 <stringCompare+0x5a>
    3004:	82 e0       	ldi	r24, 0x02	; 2
    3006:	05 c0       	rjmp	.+10     	; 0x3012 <stringCompare+0x5a>
    3008:	83 e0       	ldi	r24, 0x03	; 3
    300a:	03 c0       	rjmp	.+6      	; 0x3012 <stringCompare+0x5a>
    300c:	82 e0       	ldi	r24, 0x02	; 2
    300e:	01 c0       	rjmp	.+2      	; 0x3012 <stringCompare+0x5a>
    3010:	83 e0       	ldi	r24, 0x03	; 3
    3012:	df 91       	pop	r29
    3014:	cf 91       	pop	r28
    3016:	1f 91       	pop	r17
    3018:	0f 91       	pop	r16
    301a:	ff 90       	pop	r15
    301c:	08 95       	ret

0000301e <EmptyString>:
    301e:	ac 01       	movw	r20, r24
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	02 c0       	rjmp	.+4      	; 0x3028 <EmptyString+0xa>
    3024:	9f 5f       	subi	r25, 0xFF	; 255
    3026:	10 82       	st	Z, r1
    3028:	fa 01       	movw	r30, r20
    302a:	e9 0f       	add	r30, r25
    302c:	f1 1d       	adc	r31, r1
    302e:	20 81       	ld	r18, Z
    3030:	21 11       	cpse	r18, r1
    3032:	f8 cf       	rjmp	.-16     	; 0x3024 <EmptyString+0x6>
    3034:	08 95       	ret

00003036 <stringCopy>:
    3036:	dc 01       	movw	r26, r24
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	05 c0       	rjmp	.+10     	; 0x3046 <stringCopy+0x10>
    303c:	fb 01       	movw	r30, r22
    303e:	e2 0f       	add	r30, r18
    3040:	f3 1f       	adc	r31, r19
    3042:	40 83       	st	Z, r20
    3044:	9f 5f       	subi	r25, 0xFF	; 255
    3046:	29 2f       	mov	r18, r25
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	fd 01       	movw	r30, r26
    304c:	e2 0f       	add	r30, r18
    304e:	f3 1f       	adc	r31, r19
    3050:	40 81       	ld	r20, Z
    3052:	41 11       	cpse	r20, r1
    3054:	f3 cf       	rjmp	.-26     	; 0x303c <stringCopy+0x6>
    3056:	08 95       	ret

00003058 <integerToString>:

void integerToString(uint16_t u16_Num, uint8_t *pu8_String, uint8_t u8_base)
{
    3058:	0f 93       	push	r16
    305a:	1f 93       	push	r17
    305c:	cf 93       	push	r28
    305e:	df 93       	push	r29
    3060:	fc 01       	movw	r30, r24
    3062:	8b 01       	movw	r16, r22
	if(u8_base == DEC)
    3064:	41 30       	cpi	r20, 0x01	; 1
    3066:	d1 f5       	brne	.+116    	; 0x30dc <integerToString+0x84>
	{
		int i=0,n=0;
		n=u16_Num;
		for(i=0;;i++)
    3068:	c0 e0       	ldi	r28, 0x00	; 0
    306a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			n/=10;
    306c:	6a e0       	ldi	r22, 0x0A	; 10
    306e:	70 e0       	ldi	r23, 0x00	; 0
    3070:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__divmodhi4>
    3074:	cb 01       	movw	r24, r22
			if(n==0) break;
    3076:	00 97       	sbiw	r24, 0x00	; 0
    3078:	79 f1       	breq	.+94     	; 0x30d8 <integerToString+0x80>
{
	if(u8_base == DEC)
	{
		int i=0,n=0;
		n=u16_Num;
		for(i=0;;i++)
    307a:	21 96       	adiw	r28, 0x01	; 1
		{
			n/=10;
			if(n==0) break;
		}
    307c:	f7 cf       	rjmp	.-18     	; 0x306c <integerToString+0x14>
		while (u16_Num)
		{
			pu8_String[i--] = (u16_Num % 10) + '0';
    307e:	a8 01       	movw	r20, r16
    3080:	4c 0f       	add	r20, r28
    3082:	5d 1f       	adc	r21, r29
    3084:	9f 01       	movw	r18, r30
    3086:	ad ec       	ldi	r26, 0xCD	; 205
    3088:	bc ec       	ldi	r27, 0xCC	; 204
    308a:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <__umulhisi3>
    308e:	96 95       	lsr	r25
    3090:	87 95       	ror	r24
    3092:	96 95       	lsr	r25
    3094:	87 95       	ror	r24
    3096:	96 95       	lsr	r25
    3098:	87 95       	ror	r24
    309a:	9c 01       	movw	r18, r24
    309c:	22 0f       	add	r18, r18
    309e:	33 1f       	adc	r19, r19
    30a0:	88 0f       	add	r24, r24
    30a2:	99 1f       	adc	r25, r25
    30a4:	88 0f       	add	r24, r24
    30a6:	99 1f       	adc	r25, r25
    30a8:	88 0f       	add	r24, r24
    30aa:	99 1f       	adc	r25, r25
    30ac:	82 0f       	add	r24, r18
    30ae:	93 1f       	adc	r25, r19
    30b0:	9f 01       	movw	r18, r30
    30b2:	28 1b       	sub	r18, r24
    30b4:	39 0b       	sbc	r19, r25
    30b6:	c9 01       	movw	r24, r18
    30b8:	80 5d       	subi	r24, 0xD0	; 208
    30ba:	da 01       	movw	r26, r20
    30bc:	8c 93       	st	X, r24
			u16_Num /= 10;
    30be:	9f 01       	movw	r18, r30
    30c0:	ad ec       	ldi	r26, 0xCD	; 205
    30c2:	bc ec       	ldi	r27, 0xCC	; 204
    30c4:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <__umulhisi3>
    30c8:	fc 01       	movw	r30, r24
    30ca:	f6 95       	lsr	r31
    30cc:	e7 95       	ror	r30
    30ce:	f6 95       	lsr	r31
    30d0:	e7 95       	ror	r30
    30d2:	f6 95       	lsr	r31
    30d4:	e7 95       	ror	r30
			n/=10;
			if(n==0) break;
		}
		while (u16_Num)
		{
			pu8_String[i--] = (u16_Num % 10) + '0';
    30d6:	21 97       	sbiw	r28, 0x01	; 1
		for(i=0;;i++)
		{
			n/=10;
			if(n==0) break;
		}
		while (u16_Num)
    30d8:	30 97       	sbiw	r30, 0x00	; 0
    30da:	89 f6       	brne	.-94     	; 0x307e <integerToString+0x26>

	}else if(u8_base == HEX)
	{

	}
}
    30dc:	df 91       	pop	r29
    30de:	cf 91       	pop	r28
    30e0:	1f 91       	pop	r17
    30e2:	0f 91       	pop	r16
    30e4:	08 95       	ret

000030e6 <waveFunction>:
* Parameters (out): None
* Return value: None
* Description: Function to be called inside the timer's ISR.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
void waveFunction(void)
{
    30e6:	0f 93       	push	r16
    30e8:	1f 93       	push	r17
	/* Toggle the Pin of the PWM Channel */
	if(Dio_togglePin(SWPwm_Channels[gu8_currentPwmChannel].u8_DioChannelID) != DIO_STATUS_ERROR_OK)
    30ea:	e0 91 6f 05 	lds	r30, 0x056F	; 0x80056f <gu8_currentPwmChannel>
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	ee 0f       	add	r30, r30
    30f2:	ff 1f       	adc	r31, r31
    30f4:	e6 5f       	subi	r30, 0xF6	; 246
    30f6:	fb 4f       	sbci	r31, 0xFB	; 251
    30f8:	80 81       	ld	r24, Z
    30fa:	0e 94 2a 12 	call	0x2454	; 0x2454 <Dio_togglePin>
    30fe:	81 30       	cpi	r24, 0x01	; 1
    3100:	09 f0       	breq	.+2      	; 0x3104 <waveFunction+0x1e>
    3102:	76 c0       	rjmp	.+236    	; 0x31f0 <waveFunction+0x10a>
		return;
	/* Check if the PWM Channel is still in Running State */
	if (gstr_ChannelsData[gu8_currentPwmChannel].enuChannelState == SWPWM_RUNNING)
    3104:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <gu8_currentPwmChannel>
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	9c 01       	movw	r18, r24
    310c:	22 0f       	add	r18, r18
    310e:	33 1f       	adc	r19, r19
    3110:	f9 01       	movw	r30, r18
    3112:	ee 0f       	add	r30, r30
    3114:	ff 1f       	adc	r31, r31
    3116:	ee 0f       	add	r30, r30
    3118:	ff 1f       	adc	r31, r31
    311a:	ee 0f       	add	r30, r30
    311c:	ff 1f       	adc	r31, r31
    311e:	e2 1b       	sub	r30, r18
    3120:	f3 0b       	sbc	r31, r19
    3122:	e0 59       	subi	r30, 0x90	; 144
    3124:	fa 4f       	sbci	r31, 0xFA	; 250
    3126:	25 85       	ldd	r18, Z+13	; 0x0d
    3128:	22 30       	cpi	r18, 0x02	; 2
    312a:	09 f0       	breq	.+2      	; 0x312e <waveFunction+0x48>
    312c:	61 c0       	rjmp	.+194    	; 0x31f0 <waveFunction+0x10a>
	{
		/* Start the Timer again with the new ticks assigned */
		if(GptStart_aSync(SWPwm_Channels[gu8_currentPwmChannel].u8_GptChannelID,\
    312e:	88 0f       	add	r24, r24
    3130:	99 1f       	adc	r25, r25
    3132:	fc 01       	movw	r30, r24
    3134:	ee 0f       	add	r30, r30
    3136:	ff 1f       	adc	r31, r31
    3138:	ee 0f       	add	r30, r30
    313a:	ff 1f       	adc	r31, r31
    313c:	ee 0f       	add	r30, r30
    313e:	ff 1f       	adc	r31, r31
    3140:	e8 1b       	sub	r30, r24
    3142:	f9 0b       	sbc	r31, r25
    3144:	e0 59       	subi	r30, 0x90	; 144
    3146:	fa 4f       	sbci	r31, 0xFA	; 250
    3148:	41 85       	ldd	r20, Z+9	; 0x09
    314a:	52 85       	ldd	r21, Z+10	; 0x0a
    314c:	63 85       	ldd	r22, Z+11	; 0x0b
    314e:	74 85       	ldd	r23, Z+12	; 0x0c
    3150:	fc 01       	movw	r30, r24
    3152:	e6 5f       	subi	r30, 0xF6	; 246
    3154:	fb 4f       	sbci	r31, 0xFB	; 251
    3156:	23 e7       	ldi	r18, 0x73	; 115
    3158:	38 e1       	ldi	r19, 0x18	; 24
    315a:	81 81       	ldd	r24, Z+1	; 0x01
    315c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <GptStart_aSync>
    3160:	81 30       	cpi	r24, 0x01	; 1
    3162:	09 f0       	breq	.+2      	; 0x3166 <waveFunction+0x80>
    3164:	45 c0       	rjmp	.+138    	; 0x31f0 <waveFunction+0x10a>
		                  gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks,\
						   waveFunction) != GPT_STATUS_ERROR_OK)	return;
		
		/* Replace the next ticks to be counted between ONTicks and OFFTicks*/
		if(gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks == gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks)
    3166:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <gu8_currentPwmChannel>
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	9c 01       	movw	r18, r24
    316e:	22 0f       	add	r18, r18
    3170:	33 1f       	adc	r19, r19
    3172:	f9 01       	movw	r30, r18
    3174:	ee 0f       	add	r30, r30
    3176:	ff 1f       	adc	r31, r31
    3178:	ee 0f       	add	r30, r30
    317a:	ff 1f       	adc	r31, r31
    317c:	ee 0f       	add	r30, r30
    317e:	ff 1f       	adc	r31, r31
    3180:	e2 1b       	sub	r30, r18
    3182:	f3 0b       	sbc	r31, r19
    3184:	e0 59       	subi	r30, 0x90	; 144
    3186:	fa 4f       	sbci	r31, 0xFA	; 250
    3188:	01 85       	ldd	r16, Z+9	; 0x09
    318a:	12 85       	ldd	r17, Z+10	; 0x0a
    318c:	23 85       	ldd	r18, Z+11	; 0x0b
    318e:	34 85       	ldd	r19, Z+12	; 0x0c
    3190:	45 81       	ldd	r20, Z+5	; 0x05
    3192:	56 81       	ldd	r21, Z+6	; 0x06
    3194:	67 81       	ldd	r22, Z+7	; 0x07
    3196:	70 85       	ldd	r23, Z+8	; 0x08
    3198:	04 17       	cp	r16, r20
    319a:	15 07       	cpc	r17, r21
    319c:	26 07       	cpc	r18, r22
    319e:	37 07       	cpc	r19, r23
    31a0:	b1 f4       	brne	.+44     	; 0x31ce <waveFunction+0xe8>
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_ONTicks;
    31a2:	88 0f       	add	r24, r24
    31a4:	99 1f       	adc	r25, r25
    31a6:	fc 01       	movw	r30, r24
    31a8:	ee 0f       	add	r30, r30
    31aa:	ff 1f       	adc	r31, r31
    31ac:	ee 0f       	add	r30, r30
    31ae:	ff 1f       	adc	r31, r31
    31b0:	ee 0f       	add	r30, r30
    31b2:	ff 1f       	adc	r31, r31
    31b4:	e8 1b       	sub	r30, r24
    31b6:	f9 0b       	sbc	r31, r25
    31b8:	e0 59       	subi	r30, 0x90	; 144
    31ba:	fa 4f       	sbci	r31, 0xFA	; 250
    31bc:	81 81       	ldd	r24, Z+1	; 0x01
    31be:	92 81       	ldd	r25, Z+2	; 0x02
    31c0:	a3 81       	ldd	r26, Z+3	; 0x03
    31c2:	b4 81       	ldd	r27, Z+4	; 0x04
    31c4:	81 87       	std	Z+9, r24	; 0x09
    31c6:	92 87       	std	Z+10, r25	; 0x0a
    31c8:	a3 87       	std	Z+11, r26	; 0x0b
    31ca:	b4 87       	std	Z+12, r27	; 0x0c
    31cc:	11 c0       	rjmp	.+34     	; 0x31f0 <waveFunction+0x10a>
		else
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks;
    31ce:	88 0f       	add	r24, r24
    31d0:	99 1f       	adc	r25, r25
    31d2:	fc 01       	movw	r30, r24
    31d4:	ee 0f       	add	r30, r30
    31d6:	ff 1f       	adc	r31, r31
    31d8:	ee 0f       	add	r30, r30
    31da:	ff 1f       	adc	r31, r31
    31dc:	ee 0f       	add	r30, r30
    31de:	ff 1f       	adc	r31, r31
    31e0:	e8 1b       	sub	r30, r24
    31e2:	f9 0b       	sbc	r31, r25
    31e4:	e0 59       	subi	r30, 0x90	; 144
    31e6:	fa 4f       	sbci	r31, 0xFA	; 250
    31e8:	41 87       	std	Z+9, r20	; 0x09
    31ea:	52 87       	std	Z+10, r21	; 0x0a
    31ec:	63 87       	std	Z+11, r22	; 0x0b
    31ee:	74 87       	std	Z+12, r23	; 0x0c
	}
}
    31f0:	1f 91       	pop	r17
    31f2:	0f 91       	pop	r16
    31f4:	08 95       	ret

000031f6 <SWPwm_Init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
    31f6:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <genu_SWPwmModStatus>
    31fa:	81 30       	cpi	r24, 0x01	; 1
    31fc:	91 f0       	breq	.+36     	; 0x3222 <SWPwm_Init+0x2c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
    31fe:	0e 94 c7 13 	call	0x278e	; 0x278e <GptInit>
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
    3202:	81 30       	cpi	r24, 0x01	; 1
    3204:	11 f0       	breq	.+4      	; 0x320a <SWPwm_Init+0x14>
    3206:	83 30       	cpi	r24, 0x03	; 3
    3208:	71 f4       	brne	.+28     	; 0x3226 <SWPwm_Init+0x30>
		return SWPWM_STATUS_ERROR_NOK;
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    320a:	8a e8       	ldi	r24, 0x8A	; 138
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	0e 94 a3 10 	call	0x2146	; 0x2146 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    3212:	81 30       	cpi	r24, 0x01	; 1
    3214:	11 f0       	breq	.+4      	; 0x321a <SWPwm_Init+0x24>
    3216:	87 30       	cpi	r24, 0x07	; 7
    3218:	41 f4       	brne	.+16     	; 0x322a <SWPwm_Init+0x34>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <genu_SWPwmModStatus>
	return SWPWM_STATUS_ERROR_OK;
    3220:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_ERROR_NOK;
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
		return SWPWM_STATUS_ERROR_NOK;
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	08 95       	ret
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return SWPWM_STATUS_ERROR_NOK;
    322a:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
	return SWPWM_STATUS_ERROR_OK;
}
    322c:	08 95       	ret

0000322e <SWPwm_Start>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Start(u8SWPwm_Channel_t u8_ChannelID, uint32_t u32_Freq, uint8_t u8_DutyCycle)
{
    322e:	4f 92       	push	r4
    3230:	5f 92       	push	r5
    3232:	6f 92       	push	r6
    3234:	7f 92       	push	r7
    3236:	8f 92       	push	r8
    3238:	9f 92       	push	r9
    323a:	af 92       	push	r10
    323c:	bf 92       	push	r11
    323e:	cf 92       	push	r12
    3240:	df 92       	push	r13
    3242:	ef 92       	push	r14
    3244:	ff 92       	push	r15
    3246:	0f 93       	push	r16
    3248:	1f 93       	push	r17
    324a:	cf 93       	push	r28
    324c:	df 93       	push	r29
    324e:	00 d0       	rcall	.+0      	; 0x3250 <SWPwm_Start+0x22>
    3250:	00 d0       	rcall	.+0      	; 0x3252 <SWPwm_Start+0x24>
    3252:	00 d0       	rcall	.+0      	; 0x3254 <SWPwm_Start+0x26>
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    3258:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <genu_SWPwmModStatus>
    325c:	91 30       	cpi	r25, 0x01	; 1
    325e:	09 f0       	breq	.+2      	; 0x3262 <SWPwm_Start+0x34>
    3260:	f2 c0       	rjmp	.+484    	; 0x3446 <SWPwm_Start+0x218>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    3262:	81 11       	cpse	r24, r1
    3264:	f2 c0       	rjmp	.+484    	; 0x344a <SWPwm_Start+0x21c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
    3266:	25 36       	cpi	r18, 0x65	; 101
    3268:	08 f0       	brcs	.+2      	; 0x326c <SWPwm_Start+0x3e>
    326a:	f1 c0       	rjmp	.+482    	; 0x344e <SWPwm_Start+0x220>
	{
		return SWPWM_STATUS_DC_OUTRANGE;
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
    326c:	e8 2f       	mov	r30, r24
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	fe 83       	std	Y+6, r31	; 0x06
    3272:	ed 83       	std	Y+5, r30	; 0x05
    3274:	df 01       	movw	r26, r30
    3276:	aa 0f       	add	r26, r26
    3278:	bb 1f       	adc	r27, r27
    327a:	fd 01       	movw	r30, r26
    327c:	ee 0f       	add	r30, r30
    327e:	ff 1f       	adc	r31, r31
    3280:	ee 0f       	add	r30, r30
    3282:	ff 1f       	adc	r31, r31
    3284:	ee 0f       	add	r30, r30
    3286:	ff 1f       	adc	r31, r31
    3288:	ea 1b       	sub	r30, r26
    328a:	fb 0b       	sbc	r31, r27
    328c:	e0 59       	subi	r30, 0x90	; 144
    328e:	fa 4f       	sbci	r31, 0xFA	; 250
    3290:	95 85       	ldd	r25, Z+13	; 0x0d
    3292:	92 30       	cpi	r25, 0x02	; 2
    3294:	09 f4       	brne	.+2      	; 0x3298 <SWPwm_Start+0x6a>
    3296:	dd c0       	rjmp	.+442    	; 0x3452 <SWPwm_Start+0x224>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
    3298:	22 23       	and	r18, r18
    329a:	09 f4       	brne	.+2      	; 0x329e <SWPwm_Start+0x70>
    329c:	dc c0       	rjmp	.+440    	; 0x3456 <SWPwm_Start+0x228>
    329e:	12 2f       	mov	r17, r18
    32a0:	c8 2e       	mov	r12, r24
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
	}else if(u8_DutyCycle == 100)
    32a2:	24 36       	cpi	r18, 0x64	; 100
    32a4:	61 f4       	brne	.+24     	; 0x32be <SWPwm_Start+0x90>
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    32a6:	fd 01       	movw	r30, r26
    32a8:	e6 5f       	subi	r30, 0xF6	; 246
    32aa:	fb 4f       	sbci	r31, 0xFB	; 251
    32ac:	61 e0       	ldi	r22, 0x01	; 1
    32ae:	80 81       	ld	r24, Z
    32b0:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    32b4:	81 30       	cpi	r24, 0x01	; 1
    32b6:	09 f4       	brne	.+2      	; 0x32ba <SWPwm_Start+0x8c>
    32b8:	d0 c0       	rjmp	.+416    	; 0x345a <SWPwm_Start+0x22c>
			return SWPWM_STATUS_ERROR_NOK;
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	d5 c0       	rjmp	.+426    	; 0x3468 <SWPwm_Start+0x23a>
		return SWPWM_STATUS_ERROR_OK;
	}
	
	float32_t f32_wavePeriodTime = (float32_t)1 / u32_Freq;					/* The Periodic Time for the Generated Pulse in Seconds */
    32be:	cb 01       	movw	r24, r22
    32c0:	ba 01       	movw	r22, r20
    32c2:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__floatunsisf>
    32c6:	9b 01       	movw	r18, r22
    32c8:	ac 01       	movw	r20, r24
    32ca:	60 e0       	ldi	r22, 0x00	; 0
    32cc:	70 e0       	ldi	r23, 0x00	; 0
    32ce:	80 e8       	ldi	r24, 0x80	; 128
    32d0:	9f e3       	ldi	r25, 0x3F	; 63
    32d2:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__divsf3>
    32d6:	4b 01       	movw	r8, r22
    32d8:	5c 01       	movw	r10, r24
	float32_t f32_waveONTime = (f32_wavePeriodTime*u8_DutyCycle) / 100;		/* The HIGH Level Time in Seconds */
    32da:	61 2f       	mov	r22, r17
    32dc:	70 e0       	ldi	r23, 0x00	; 0
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	0e 94 77 1c 	call	0x38ee	; 0x38ee <__floatsisf>
    32e6:	a5 01       	movw	r20, r10
    32e8:	94 01       	movw	r18, r8
    32ea:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <__mulsf3>
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	48 ec       	ldi	r20, 0xC8	; 200
    32f4:	52 e4       	ldi	r21, 0x42	; 66
    32f6:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__divsf3>
    32fa:	2b 01       	movw	r4, r22
    32fc:	3c 01       	movw	r6, r24
	float32_t f32_waveOFFTime = f32_wavePeriodTime - f32_waveONTime;		/* The LOW Level Time in Seconds */
    32fe:	9b 01       	movw	r18, r22
    3300:	ac 01       	movw	r20, r24
    3302:	c5 01       	movw	r24, r10
    3304:	b4 01       	movw	r22, r8
    3306:	0e 94 67 1b 	call	0x36ce	; 0x36ce <__subsf3>
    330a:	4b 01       	movw	r8, r22
    330c:	5c 01       	movw	r10, r24
	float32_t f32_systemPeriodTime = 0.0;
	uint16_t  u16_prescalerValue = 0;
	
	/* Get the Prescaler Value of the used Timer Channel */
	switch(Timers_Configurations[SWPwm_Channels[u8_ChannelID].u8_GptChannelID].enuClock_Src)
    330e:	ed 81       	ldd	r30, Y+5	; 0x05
    3310:	fe 81       	ldd	r31, Y+6	; 0x06
    3312:	ee 0f       	add	r30, r30
    3314:	ff 1f       	adc	r31, r31
    3316:	e6 5f       	subi	r30, 0xF6	; 246
    3318:	fb 4f       	sbci	r31, 0xFB	; 251
    331a:	d1 80       	ldd	r13, Z+1	; 0x01
    331c:	8d 2d       	mov	r24, r13
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	fc 01       	movw	r30, r24
    3322:	ee 0f       	add	r30, r30
    3324:	ff 1f       	adc	r31, r31
    3326:	8e 0f       	add	r24, r30
    3328:	9f 1f       	adc	r25, r31
    332a:	fc 01       	movw	r30, r24
    332c:	e9 5f       	subi	r30, 0xF9	; 249
    332e:	fb 4f       	sbci	r31, 0xFB	; 251
    3330:	e1 81       	ldd	r30, Z+1	; 0x01
    3332:	8e 2f       	mov	r24, r30
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	fc 01       	movw	r30, r24
    3338:	31 97       	sbiw	r30, 0x01	; 1
    333a:	e7 30       	cpi	r30, 0x07	; 7
    333c:	f1 05       	cpc	r31, r1
    333e:	08 f0       	brcs	.+2      	; 0x3342 <SWPwm_Start+0x114>
    3340:	8e c0       	rjmp	.+284    	; 0x345e <SWPwm_Start+0x230>
    3342:	e6 5d       	subi	r30, 0xD6	; 214
    3344:	ff 4f       	sbci	r31, 0xFF	; 255
    3346:	0c 94 a6 1d 	jmp	0x3b4c	; 0x3b4c <__tablejump2__>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
    334a:	61 e0       	ldi	r22, 0x01	; 1
    334c:	70 e0       	ldi	r23, 0x00	; 0
    334e:	0b c0       	rjmp	.+22     	; 0x3366 <SWPwm_Start+0x138>
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
			break;
		case GPT_CLK_SRC_PRSCLR_64:
			u16_prescalerValue = 64;
    3350:	60 e4       	ldi	r22, 0x40	; 64
    3352:	70 e0       	ldi	r23, 0x00	; 0
			break;
    3354:	08 c0       	rjmp	.+16     	; 0x3366 <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_256:
			u16_prescalerValue = 256;
    3356:	60 e0       	ldi	r22, 0x00	; 0
    3358:	71 e0       	ldi	r23, 0x01	; 1
			break;
    335a:	05 c0       	rjmp	.+10     	; 0x3366 <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_1024:
			u16_prescalerValue = 1024;
    335c:	60 e0       	ldi	r22, 0x00	; 0
    335e:	74 e0       	ldi	r23, 0x04	; 4
			break;
    3360:	02 c0       	rjmp	.+4      	; 0x3366 <SWPwm_Start+0x138>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
    3362:	68 e0       	ldi	r22, 0x08	; 8
    3364:	70 e0       	ldi	r23, 0x00	; 0
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
	}
	
	f32_systemPeriodTime = (float32_t)u16_prescalerValue/SYS_CLOCK_FREQUENCY;				/* The Controllers Periodic Time in seconds based on the System Clock Frequency */
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__floatunsisf>
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	34 e2       	ldi	r19, 0x24	; 36
    3372:	44 e7       	ldi	r20, 0x74	; 116
    3374:	59 e4       	ldi	r21, 0x49	; 73
    3376:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__divsf3>
    337a:	69 83       	std	Y+1, r22	; 0x01
    337c:	7a 83       	std	Y+2, r23	; 0x02
    337e:	8b 83       	std	Y+3, r24	; 0x03
    3380:	9c 83       	std	Y+4, r25	; 0x04
	gu8_currentPwmChannel = u8_ChannelID;
    3382:	c0 92 6f 05 	sts	0x056F, r12	; 0x80056f <gu8_currentPwmChannel>
	gstr_ChannelsData[u8_ChannelID].u32_ONTicks = f32_waveONTime/f32_systemPeriodTime;		/* The HIGH Level Time in Ticks */
    3386:	9b 01       	movw	r18, r22
    3388:	ac 01       	movw	r20, r24
    338a:	c3 01       	movw	r24, r6
    338c:	b2 01       	movw	r22, r4
    338e:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__divsf3>
    3392:	ed 80       	ldd	r14, Y+5	; 0x05
    3394:	fe 80       	ldd	r15, Y+6	; 0x06
    3396:	ee 0c       	add	r14, r14
    3398:	ff 1c       	adc	r15, r15
    339a:	87 01       	movw	r16, r14
    339c:	00 0f       	add	r16, r16
    339e:	11 1f       	adc	r17, r17
    33a0:	00 0f       	add	r16, r16
    33a2:	11 1f       	adc	r17, r17
    33a4:	00 0f       	add	r16, r16
    33a6:	11 1f       	adc	r17, r17
    33a8:	0e 19       	sub	r16, r14
    33aa:	1f 09       	sbc	r17, r15
    33ac:	00 59       	subi	r16, 0x90	; 144
    33ae:	1a 4f       	sbci	r17, 0xFA	; 250
    33b0:	0e 94 46 1c 	call	0x388c	; 0x388c <__fixunssfsi>
    33b4:	f8 01       	movw	r30, r16
    33b6:	61 83       	std	Z+1, r22	; 0x01
    33b8:	72 83       	std	Z+2, r23	; 0x02
    33ba:	83 83       	std	Z+3, r24	; 0x03
    33bc:	94 83       	std	Z+4, r25	; 0x04
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
    33be:	29 81       	ldd	r18, Y+1	; 0x01
    33c0:	3a 81       	ldd	r19, Y+2	; 0x02
    33c2:	4b 81       	ldd	r20, Y+3	; 0x03
    33c4:	5c 81       	ldd	r21, Y+4	; 0x04
    33c6:	c5 01       	movw	r24, r10
    33c8:	b4 01       	movw	r22, r8
    33ca:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__divsf3>
    33ce:	0e 94 46 1c 	call	0x388c	; 0x388c <__fixunssfsi>
    33d2:	f8 01       	movw	r30, r16
    33d4:	65 83       	std	Z+5, r22	; 0x05
    33d6:	76 83       	std	Z+6, r23	; 0x06
    33d8:	87 83       	std	Z+7, r24	; 0x07
    33da:	90 87       	std	Z+8, r25	; 0x08
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;
    33dc:	c0 82       	st	Z, r12

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    33de:	f7 01       	movw	r30, r14
    33e0:	e6 5f       	subi	r30, 0xF6	; 246
    33e2:	fb 4f       	sbci	r31, 0xFB	; 251
    33e4:	61 e0       	ldi	r22, 0x01	; 1
    33e6:	80 81       	ld	r24, Z
    33e8:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    33ec:	81 30       	cpi	r24, 0x01	; 1
    33ee:	c9 f5       	brne	.+114    	; 0x3462 <SWPwm_Start+0x234>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
    33f0:	8e e0       	ldi	r24, 0x0E	; 14
    33f2:	2d 81       	ldd	r18, Y+5	; 0x05
    33f4:	3e 81       	ldd	r19, Y+6	; 0x06
    33f6:	82 9f       	mul	r24, r18
    33f8:	f0 01       	movw	r30, r0
    33fa:	83 9f       	mul	r24, r19
    33fc:	f0 0d       	add	r31, r0
    33fe:	11 24       	eor	r1, r1
    3400:	e0 59       	subi	r30, 0x90	; 144
    3402:	fa 4f       	sbci	r31, 0xFA	; 250
    3404:	41 81       	ldd	r20, Z+1	; 0x01
    3406:	52 81       	ldd	r21, Z+2	; 0x02
    3408:	63 81       	ldd	r22, Z+3	; 0x03
    340a:	74 81       	ldd	r23, Z+4	; 0x04
    340c:	23 e7       	ldi	r18, 0x73	; 115
    340e:	38 e1       	ldi	r19, 0x18	; 24
    3410:	8d 2d       	mov	r24, r13
    3412:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <GptStart_aSync>
    3416:	81 30       	cpi	r24, 0x01	; 1
    3418:	31 f5       	brne	.+76     	; 0x3466 <SWPwm_Start+0x238>
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
	
	/* Assign the Next Ticks to be counted by the Asynchronous Timer */
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
    341a:	8e e0       	ldi	r24, 0x0E	; 14
    341c:	2d 81       	ldd	r18, Y+5	; 0x05
    341e:	3e 81       	ldd	r19, Y+6	; 0x06
    3420:	82 9f       	mul	r24, r18
    3422:	f0 01       	movw	r30, r0
    3424:	83 9f       	mul	r24, r19
    3426:	f0 0d       	add	r31, r0
    3428:	11 24       	eor	r1, r1
    342a:	e0 59       	subi	r30, 0x90	; 144
    342c:	fa 4f       	sbci	r31, 0xFA	; 250
    342e:	85 81       	ldd	r24, Z+5	; 0x05
    3430:	96 81       	ldd	r25, Z+6	; 0x06
    3432:	a7 81       	ldd	r26, Z+7	; 0x07
    3434:	b0 85       	ldd	r27, Z+8	; 0x08
    3436:	81 87       	std	Z+9, r24	; 0x09
    3438:	92 87       	std	Z+10, r25	; 0x0a
    343a:	a3 87       	std	Z+11, r26	; 0x0b
    343c:	b4 87       	std	Z+12, r27	; 0x0c
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;
    343e:	82 e0       	ldi	r24, 0x02	; 2
    3440:	85 87       	std	Z+13, r24	; 0x0d

	return SWPWM_STATUS_ERROR_OK;
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	11 c0       	rjmp	.+34     	; 0x3468 <SWPwm_Start+0x23a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    3446:	82 e0       	ldi	r24, 0x02	; 2
    3448:	0f c0       	rjmp	.+30     	; 0x3468 <SWPwm_Start+0x23a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    344a:	83 e0       	ldi	r24, 0x03	; 3
    344c:	0d c0       	rjmp	.+26     	; 0x3468 <SWPwm_Start+0x23a>
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
	{
		return SWPWM_STATUS_DC_OUTRANGE;
    344e:	84 e0       	ldi	r24, 0x04	; 4
    3450:	0b c0       	rjmp	.+22     	; 0x3468 <SWPwm_Start+0x23a>
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    3452:	85 e0       	ldi	r24, 0x05	; 5
    3454:	09 c0       	rjmp	.+18     	; 0x3468 <SWPwm_Start+0x23a>
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	07 c0       	rjmp	.+14     	; 0x3468 <SWPwm_Start+0x23a>
	}else if(u8_DutyCycle == 100)
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return SWPWM_STATUS_ERROR_NOK;
		return SWPWM_STATUS_ERROR_OK;
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	05 c0       	rjmp	.+10     	; 0x3468 <SWPwm_Start+0x23a>
			break;
		case GPT_CLK_SRC_PRSCLR_EXT_RISE:
			u16_prescalerValue = 1;
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
    345e:	80 e0       	ldi	r24, 0x00	; 0
    3460:	03 c0       	rjmp	.+6      	; 0x3468 <SWPwm_Start+0x23a>
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	01 c0       	rjmp	.+2      	; 0x3468 <SWPwm_Start+0x23a>
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
    3466:	80 e0       	ldi	r24, 0x00	; 0
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;

	return SWPWM_STATUS_ERROR_OK;
}
    3468:	26 96       	adiw	r28, 0x06	; 6
    346a:	0f b6       	in	r0, 0x3f	; 63
    346c:	f8 94       	cli
    346e:	de bf       	out	0x3e, r29	; 62
    3470:	0f be       	out	0x3f, r0	; 63
    3472:	cd bf       	out	0x3d, r28	; 61
    3474:	df 91       	pop	r29
    3476:	cf 91       	pop	r28
    3478:	1f 91       	pop	r17
    347a:	0f 91       	pop	r16
    347c:	ff 90       	pop	r15
    347e:	ef 90       	pop	r14
    3480:	df 90       	pop	r13
    3482:	cf 90       	pop	r12
    3484:	bf 90       	pop	r11
    3486:	af 90       	pop	r10
    3488:	9f 90       	pop	r9
    348a:	8f 90       	pop	r8
    348c:	7f 90       	pop	r7
    348e:	6f 90       	pop	r6
    3490:	5f 90       	pop	r5
    3492:	4f 90       	pop	r4
    3494:	08 95       	ret

00003496 <SWPwm_Stop>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Stop(u8SWPwm_Channel_t u8_ChannelID)
{
    3496:	cf 93       	push	r28
    3498:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    349a:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <genu_SWPwmModStatus>
    349e:	91 30       	cpi	r25, 0x01	; 1
    34a0:	b1 f5       	brne	.+108    	; 0x350e <SWPwm_Stop+0x78>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    34a2:	81 11       	cpse	r24, r1
    34a4:	36 c0       	rjmp	.+108    	; 0x3512 <SWPwm_Stop+0x7c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
    34a6:	c8 2f       	mov	r28, r24
    34a8:	d0 e0       	ldi	r29, 0x00	; 0
    34aa:	ce 01       	movw	r24, r28
    34ac:	88 0f       	add	r24, r24
    34ae:	99 1f       	adc	r25, r25
    34b0:	fc 01       	movw	r30, r24
    34b2:	ee 0f       	add	r30, r30
    34b4:	ff 1f       	adc	r31, r31
    34b6:	ee 0f       	add	r30, r30
    34b8:	ff 1f       	adc	r31, r31
    34ba:	ee 0f       	add	r30, r30
    34bc:	ff 1f       	adc	r31, r31
    34be:	e8 1b       	sub	r30, r24
    34c0:	f9 0b       	sbc	r31, r25
    34c2:	e0 59       	subi	r30, 0x90	; 144
    34c4:	fa 4f       	sbci	r31, 0xFA	; 250
    34c6:	85 85       	ldd	r24, Z+13	; 0x0d
    34c8:	82 30       	cpi	r24, 0x02	; 2
    34ca:	29 f5       	brne	.+74     	; 0x3516 <SWPwm_Stop+0x80>
	
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
    34cc:	fe 01       	movw	r30, r28
    34ce:	ee 0f       	add	r30, r30
    34d0:	ff 1f       	adc	r31, r31
    34d2:	e6 5f       	subi	r30, 0xF6	; 246
    34d4:	fb 4f       	sbci	r31, 0xFB	; 251
    34d6:	60 e0       	ldi	r22, 0x00	; 0
    34d8:	80 81       	ld	r24, Z
    34da:	0e 94 91 11 	call	0x2322	; 0x2322 <Dio_writePin>
    34de:	81 30       	cpi	r24, 0x01	; 1
    34e0:	e1 f4       	brne	.+56     	; 0x351a <SWPwm_Stop+0x84>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the State of the PWM Channel to STOPPED */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
    34e2:	8e e0       	ldi	r24, 0x0E	; 14
    34e4:	8c 9f       	mul	r24, r28
    34e6:	f0 01       	movw	r30, r0
    34e8:	8d 9f       	mul	r24, r29
    34ea:	f0 0d       	add	r31, r0
    34ec:	11 24       	eor	r1, r1
    34ee:	e0 59       	subi	r30, 0x90	; 144
    34f0:	fa 4f       	sbci	r31, 0xFA	; 250
    34f2:	83 e0       	ldi	r24, 0x03	; 3
    34f4:	85 87       	std	Z+13, r24	; 0x0d
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
    34f6:	fe 01       	movw	r30, r28
    34f8:	ee 0f       	add	r30, r30
    34fa:	ff 1f       	adc	r31, r31
    34fc:	e6 5f       	subi	r30, 0xF6	; 246
    34fe:	fb 4f       	sbci	r31, 0xFB	; 251
    3500:	81 81       	ldd	r24, Z+1	; 0x01
    3502:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <GptStop>
    3506:	81 30       	cpi	r24, 0x01	; 1
    3508:	51 f0       	breq	.+20     	; 0x351e <SWPwm_Stop+0x88>
		return SWPWM_STATUS_ERROR_NOK;
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	09 c0       	rjmp	.+18     	; 0x3520 <SWPwm_Stop+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    350e:	82 e0       	ldi	r24, 0x02	; 2
    3510:	07 c0       	rjmp	.+14     	; 0x3520 <SWPwm_Stop+0x8a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    3512:	83 e0       	ldi	r24, 0x03	; 3
    3514:	05 c0       	rjmp	.+10     	; 0x3520 <SWPwm_Stop+0x8a>
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    3516:	85 e0       	ldi	r24, 0x05	; 5
    3518:	03 c0       	rjmp	.+6      	; 0x3520 <SWPwm_Stop+0x8a>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	01 c0       	rjmp	.+2      	; 0x3520 <SWPwm_Stop+0x8a>
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
	
	return SWPWM_STATUS_ERROR_OK;
    351e:	81 e0       	ldi	r24, 0x01	; 1
}
    3520:	df 91       	pop	r29
    3522:	cf 91       	pop	r28
    3524:	08 95       	ret

00003526 <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    3526:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <u8_Uart_Status>
    352a:	81 30       	cpi	r24, 0x01	; 1
    352c:	81 f0       	breq	.+32     	; 0x354e <Uart_init+0x28>
    352e:	10 bc       	out	0x20, r1	; 32
    3530:	8c e0       	ldi	r24, 0x0C	; 12
    3532:	89 b9       	out	0x09, r24	; 9
    3534:	82 e0       	ldi	r24, 0x02	; 2
    3536:	8b b9       	out	0x0b, r24	; 11
    3538:	88 e1       	ldi	r24, 0x18	; 24
    353a:	8a b9       	out	0x0a, r24	; 10
    353c:	80 e8       	ldi	r24, 0x80	; 128
    353e:	80 bd       	out	0x20, r24	; 32
    3540:	80 b5       	in	r24, 0x20	; 32
    3542:	86 68       	ori	r24, 0x86	; 134
    3544:	80 bd       	out	0x20, r24	; 32
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <u8_Uart_Status>
    354c:	08 95       	ret
    354e:	87 e0       	ldi	r24, 0x07	; 7
    3550:	08 95       	ret

00003552 <Uart_sendByte>:
    3552:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <u8_Uart_Status>
    3556:	99 23       	and	r25, r25
    3558:	29 f0       	breq	.+10     	; 0x3564 <Uart_sendByte+0x12>
    355a:	5d 9b       	sbis	0x0b, 5	; 11
    355c:	fe cf       	rjmp	.-4      	; 0x355a <Uart_sendByte+0x8>
    355e:	8c b9       	out	0x0c, r24	; 12
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	08 95       	ret
    3564:	86 e0       	ldi	r24, 0x06	; 6
    3566:	08 95       	ret

00003568 <Uart_sendPacket>:
    3568:	ef 92       	push	r14
    356a:	ff 92       	push	r15
    356c:	0f 93       	push	r16
    356e:	1f 93       	push	r17
    3570:	cf 93       	push	r28
    3572:	df 93       	push	r29
    3574:	20 91 7e 05 	lds	r18, 0x057E	; 0x80057e <u8_Uart_Status>
    3578:	22 23       	and	r18, r18
    357a:	99 f0       	breq	.+38     	; 0x35a2 <Uart_sendPacket+0x3a>
    357c:	8b 01       	movw	r16, r22
    357e:	7c 01       	movw	r14, r24
    3580:	c0 e0       	ldi	r28, 0x00	; 0
    3582:	d0 e0       	ldi	r29, 0x00	; 0
    3584:	09 c0       	rjmp	.+18     	; 0x3598 <Uart_sendPacket+0x30>
    3586:	f7 01       	movw	r30, r14
    3588:	ec 0f       	add	r30, r28
    358a:	fd 1f       	adc	r31, r29
    358c:	80 81       	ld	r24, Z
    358e:	0e 94 a9 1a 	call	0x3552	; 0x3552 <Uart_sendByte>
    3592:	81 30       	cpi	r24, 0x01	; 1
    3594:	41 f4       	brne	.+16     	; 0x35a6 <Uart_sendPacket+0x3e>
    3596:	21 96       	adiw	r28, 0x01	; 1
    3598:	c0 17       	cp	r28, r16
    359a:	d1 07       	cpc	r29, r17
    359c:	a0 f3       	brcs	.-24     	; 0x3586 <Uart_sendPacket+0x1e>
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	03 c0       	rjmp	.+6      	; 0x35a8 <Uart_sendPacket+0x40>
    35a2:	86 e0       	ldi	r24, 0x06	; 6
    35a4:	01 c0       	rjmp	.+2      	; 0x35a8 <Uart_sendPacket+0x40>
    35a6:	80 e0       	ldi	r24, 0x00	; 0
    35a8:	df 91       	pop	r29
    35aa:	cf 91       	pop	r28
    35ac:	1f 91       	pop	r17
    35ae:	0f 91       	pop	r16
    35b0:	ff 90       	pop	r15
    35b2:	ef 90       	pop	r14
    35b4:	08 95       	ret

000035b6 <Uart_EnableNotification_RXC>:
    35b6:	9c 01       	movw	r18, r24
    35b8:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <u8_Uart_Status>
    35bc:	99 23       	and	r25, r25
    35be:	61 f0       	breq	.+24     	; 0x35d8 <Uart_EnableNotification_RXC+0x22>
    35c0:	21 15       	cp	r18, r1
    35c2:	31 05       	cpc	r19, r1
    35c4:	59 f0       	breq	.+22     	; 0x35dc <Uart_EnableNotification_RXC+0x26>
    35c6:	8a b1       	in	r24, 0x0a	; 10
    35c8:	80 68       	ori	r24, 0x80	; 128
    35ca:	8a b9       	out	0x0a, r24	; 10
    35cc:	30 93 82 05 	sts	0x0582, r19	; 0x800582 <Uart_RXC_CallBackPtr+0x1>
    35d0:	20 93 81 05 	sts	0x0581, r18	; 0x800581 <Uart_RXC_CallBackPtr>
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	08 95       	ret
    35d8:	86 e0       	ldi	r24, 0x06	; 6
    35da:	08 95       	ret
    35dc:	85 e0       	ldi	r24, 0x05	; 5
    35de:	08 95       	ret

000035e0 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    35e0:	8c b1       	in	r24, 0x0c	; 12
}
    35e2:	08 95       	ret

000035e4 <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    35e4:	1f 92       	push	r1
    35e6:	0f 92       	push	r0
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	0f 92       	push	r0
    35ec:	11 24       	eor	r1, r1
    35ee:	2f 93       	push	r18
    35f0:	3f 93       	push	r19
    35f2:	4f 93       	push	r20
    35f4:	5f 93       	push	r21
    35f6:	6f 93       	push	r22
    35f8:	7f 93       	push	r23
    35fa:	8f 93       	push	r24
    35fc:	9f 93       	push	r25
    35fe:	af 93       	push	r26
    3600:	bf 93       	push	r27
    3602:	ef 93       	push	r30
    3604:	ff 93       	push	r31
    3606:	e0 91 83 05 	lds	r30, 0x0583	; 0x800583 <Uart_TXC_CallBackPtr>
    360a:	f0 91 84 05 	lds	r31, 0x0584	; 0x800584 <Uart_TXC_CallBackPtr+0x1>
    360e:	09 95       	icall
    3610:	ff 91       	pop	r31
    3612:	ef 91       	pop	r30
    3614:	bf 91       	pop	r27
    3616:	af 91       	pop	r26
    3618:	9f 91       	pop	r25
    361a:	8f 91       	pop	r24
    361c:	7f 91       	pop	r23
    361e:	6f 91       	pop	r22
    3620:	5f 91       	pop	r21
    3622:	4f 91       	pop	r20
    3624:	3f 91       	pop	r19
    3626:	2f 91       	pop	r18
    3628:	0f 90       	pop	r0
    362a:	0f be       	out	0x3f, r0	; 63
    362c:	0f 90       	pop	r0
    362e:	1f 90       	pop	r1
    3630:	18 95       	reti

00003632 <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    3632:	1f 92       	push	r1
    3634:	0f 92       	push	r0
    3636:	0f b6       	in	r0, 0x3f	; 63
    3638:	0f 92       	push	r0
    363a:	11 24       	eor	r1, r1
    363c:	2f 93       	push	r18
    363e:	3f 93       	push	r19
    3640:	4f 93       	push	r20
    3642:	5f 93       	push	r21
    3644:	6f 93       	push	r22
    3646:	7f 93       	push	r23
    3648:	8f 93       	push	r24
    364a:	9f 93       	push	r25
    364c:	af 93       	push	r26
    364e:	bf 93       	push	r27
    3650:	ef 93       	push	r30
    3652:	ff 93       	push	r31
    3654:	e0 91 81 05 	lds	r30, 0x0581	; 0x800581 <Uart_RXC_CallBackPtr>
    3658:	f0 91 82 05 	lds	r31, 0x0582	; 0x800582 <Uart_RXC_CallBackPtr+0x1>
    365c:	09 95       	icall
    365e:	ff 91       	pop	r31
    3660:	ef 91       	pop	r30
    3662:	bf 91       	pop	r27
    3664:	af 91       	pop	r26
    3666:	9f 91       	pop	r25
    3668:	8f 91       	pop	r24
    366a:	7f 91       	pop	r23
    366c:	6f 91       	pop	r22
    366e:	5f 91       	pop	r21
    3670:	4f 91       	pop	r20
    3672:	3f 91       	pop	r19
    3674:	2f 91       	pop	r18
    3676:	0f 90       	pop	r0
    3678:	0f be       	out	0x3f, r0	; 63
    367a:	0f 90       	pop	r0
    367c:	1f 90       	pop	r1
    367e:	18 95       	reti

00003680 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    3680:	1f 92       	push	r1
    3682:	0f 92       	push	r0
    3684:	0f b6       	in	r0, 0x3f	; 63
    3686:	0f 92       	push	r0
    3688:	11 24       	eor	r1, r1
    368a:	2f 93       	push	r18
    368c:	3f 93       	push	r19
    368e:	4f 93       	push	r20
    3690:	5f 93       	push	r21
    3692:	6f 93       	push	r22
    3694:	7f 93       	push	r23
    3696:	8f 93       	push	r24
    3698:	9f 93       	push	r25
    369a:	af 93       	push	r26
    369c:	bf 93       	push	r27
    369e:	ef 93       	push	r30
    36a0:	ff 93       	push	r31
    36a2:	e0 91 7f 05 	lds	r30, 0x057F	; 0x80057f <Uart_UDRE_CallBackPtr>
    36a6:	f0 91 80 05 	lds	r31, 0x0580	; 0x800580 <Uart_UDRE_CallBackPtr+0x1>
    36aa:	09 95       	icall
    36ac:	ff 91       	pop	r31
    36ae:	ef 91       	pop	r30
    36b0:	bf 91       	pop	r27
    36b2:	af 91       	pop	r26
    36b4:	9f 91       	pop	r25
    36b6:	8f 91       	pop	r24
    36b8:	7f 91       	pop	r23
    36ba:	6f 91       	pop	r22
    36bc:	5f 91       	pop	r21
    36be:	4f 91       	pop	r20
    36c0:	3f 91       	pop	r19
    36c2:	2f 91       	pop	r18
    36c4:	0f 90       	pop	r0
    36c6:	0f be       	out	0x3f, r0	; 63
    36c8:	0f 90       	pop	r0
    36ca:	1f 90       	pop	r1
    36cc:	18 95       	reti

000036ce <__subsf3>:
    36ce:	50 58       	subi	r21, 0x80	; 128

000036d0 <__addsf3>:
    36d0:	bb 27       	eor	r27, r27
    36d2:	aa 27       	eor	r26, r26
    36d4:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__addsf3x>
    36d8:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__fp_round>
    36dc:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__fp_pscA>
    36e0:	38 f0       	brcs	.+14     	; 0x36f0 <__addsf3+0x20>
    36e2:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__fp_pscB>
    36e6:	20 f0       	brcs	.+8      	; 0x36f0 <__addsf3+0x20>
    36e8:	39 f4       	brne	.+14     	; 0x36f8 <__addsf3+0x28>
    36ea:	9f 3f       	cpi	r25, 0xFF	; 255
    36ec:	19 f4       	brne	.+6      	; 0x36f4 <__addsf3+0x24>
    36ee:	26 f4       	brtc	.+8      	; 0x36f8 <__addsf3+0x28>
    36f0:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <__fp_nan>
    36f4:	0e f4       	brtc	.+2      	; 0x36f8 <__addsf3+0x28>
    36f6:	e0 95       	com	r30
    36f8:	e7 fb       	bst	r30, 7
    36fa:	0c 94 b2 1c 	jmp	0x3964	; 0x3964 <__fp_inf>

000036fe <__addsf3x>:
    36fe:	e9 2f       	mov	r30, r25
    3700:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <__fp_split3>
    3704:	58 f3       	brcs	.-42     	; 0x36dc <__addsf3+0xc>
    3706:	ba 17       	cp	r27, r26
    3708:	62 07       	cpc	r22, r18
    370a:	73 07       	cpc	r23, r19
    370c:	84 07       	cpc	r24, r20
    370e:	95 07       	cpc	r25, r21
    3710:	20 f0       	brcs	.+8      	; 0x371a <__addsf3x+0x1c>
    3712:	79 f4       	brne	.+30     	; 0x3732 <__addsf3x+0x34>
    3714:	a6 f5       	brtc	.+104    	; 0x377e <__addsf3x+0x80>
    3716:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__fp_zero>
    371a:	0e f4       	brtc	.+2      	; 0x371e <__addsf3x+0x20>
    371c:	e0 95       	com	r30
    371e:	0b 2e       	mov	r0, r27
    3720:	ba 2f       	mov	r27, r26
    3722:	a0 2d       	mov	r26, r0
    3724:	0b 01       	movw	r0, r22
    3726:	b9 01       	movw	r22, r18
    3728:	90 01       	movw	r18, r0
    372a:	0c 01       	movw	r0, r24
    372c:	ca 01       	movw	r24, r20
    372e:	a0 01       	movw	r20, r0
    3730:	11 24       	eor	r1, r1
    3732:	ff 27       	eor	r31, r31
    3734:	59 1b       	sub	r21, r25
    3736:	99 f0       	breq	.+38     	; 0x375e <__addsf3x+0x60>
    3738:	59 3f       	cpi	r21, 0xF9	; 249
    373a:	50 f4       	brcc	.+20     	; 0x3750 <__addsf3x+0x52>
    373c:	50 3e       	cpi	r21, 0xE0	; 224
    373e:	68 f1       	brcs	.+90     	; 0x379a <__addsf3x+0x9c>
    3740:	1a 16       	cp	r1, r26
    3742:	f0 40       	sbci	r31, 0x00	; 0
    3744:	a2 2f       	mov	r26, r18
    3746:	23 2f       	mov	r18, r19
    3748:	34 2f       	mov	r19, r20
    374a:	44 27       	eor	r20, r20
    374c:	58 5f       	subi	r21, 0xF8	; 248
    374e:	f3 cf       	rjmp	.-26     	; 0x3736 <__addsf3x+0x38>
    3750:	46 95       	lsr	r20
    3752:	37 95       	ror	r19
    3754:	27 95       	ror	r18
    3756:	a7 95       	ror	r26
    3758:	f0 40       	sbci	r31, 0x00	; 0
    375a:	53 95       	inc	r21
    375c:	c9 f7       	brne	.-14     	; 0x3750 <__addsf3x+0x52>
    375e:	7e f4       	brtc	.+30     	; 0x377e <__addsf3x+0x80>
    3760:	1f 16       	cp	r1, r31
    3762:	ba 0b       	sbc	r27, r26
    3764:	62 0b       	sbc	r22, r18
    3766:	73 0b       	sbc	r23, r19
    3768:	84 0b       	sbc	r24, r20
    376a:	ba f0       	brmi	.+46     	; 0x379a <__addsf3x+0x9c>
    376c:	91 50       	subi	r25, 0x01	; 1
    376e:	a1 f0       	breq	.+40     	; 0x3798 <__addsf3x+0x9a>
    3770:	ff 0f       	add	r31, r31
    3772:	bb 1f       	adc	r27, r27
    3774:	66 1f       	adc	r22, r22
    3776:	77 1f       	adc	r23, r23
    3778:	88 1f       	adc	r24, r24
    377a:	c2 f7       	brpl	.-16     	; 0x376c <__addsf3x+0x6e>
    377c:	0e c0       	rjmp	.+28     	; 0x379a <__addsf3x+0x9c>
    377e:	ba 0f       	add	r27, r26
    3780:	62 1f       	adc	r22, r18
    3782:	73 1f       	adc	r23, r19
    3784:	84 1f       	adc	r24, r20
    3786:	48 f4       	brcc	.+18     	; 0x379a <__addsf3x+0x9c>
    3788:	87 95       	ror	r24
    378a:	77 95       	ror	r23
    378c:	67 95       	ror	r22
    378e:	b7 95       	ror	r27
    3790:	f7 95       	ror	r31
    3792:	9e 3f       	cpi	r25, 0xFE	; 254
    3794:	08 f0       	brcs	.+2      	; 0x3798 <__addsf3x+0x9a>
    3796:	b0 cf       	rjmp	.-160    	; 0x36f8 <__addsf3+0x28>
    3798:	93 95       	inc	r25
    379a:	88 0f       	add	r24, r24
    379c:	08 f0       	brcs	.+2      	; 0x37a0 <__addsf3x+0xa2>
    379e:	99 27       	eor	r25, r25
    37a0:	ee 0f       	add	r30, r30
    37a2:	97 95       	ror	r25
    37a4:	87 95       	ror	r24
    37a6:	08 95       	ret

000037a8 <__divsf3>:
    37a8:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3x>
    37ac:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__fp_round>
    37b0:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__fp_pscB>
    37b4:	58 f0       	brcs	.+22     	; 0x37cc <__divsf3+0x24>
    37b6:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__fp_pscA>
    37ba:	40 f0       	brcs	.+16     	; 0x37cc <__divsf3+0x24>
    37bc:	29 f4       	brne	.+10     	; 0x37c8 <__divsf3+0x20>
    37be:	5f 3f       	cpi	r21, 0xFF	; 255
    37c0:	29 f0       	breq	.+10     	; 0x37cc <__divsf3+0x24>
    37c2:	0c 94 b2 1c 	jmp	0x3964	; 0x3964 <__fp_inf>
    37c6:	51 11       	cpse	r21, r1
    37c8:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <__fp_szero>
    37cc:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <__fp_nan>

000037d0 <__divsf3x>:
    37d0:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <__fp_split3>
    37d4:	68 f3       	brcs	.-38     	; 0x37b0 <__divsf3+0x8>

000037d6 <__divsf3_pse>:
    37d6:	99 23       	and	r25, r25
    37d8:	b1 f3       	breq	.-20     	; 0x37c6 <__divsf3+0x1e>
    37da:	55 23       	and	r21, r21
    37dc:	91 f3       	breq	.-28     	; 0x37c2 <__divsf3+0x1a>
    37de:	95 1b       	sub	r25, r21
    37e0:	55 0b       	sbc	r21, r21
    37e2:	bb 27       	eor	r27, r27
    37e4:	aa 27       	eor	r26, r26
    37e6:	62 17       	cp	r22, r18
    37e8:	73 07       	cpc	r23, r19
    37ea:	84 07       	cpc	r24, r20
    37ec:	38 f0       	brcs	.+14     	; 0x37fc <__divsf3_pse+0x26>
    37ee:	9f 5f       	subi	r25, 0xFF	; 255
    37f0:	5f 4f       	sbci	r21, 0xFF	; 255
    37f2:	22 0f       	add	r18, r18
    37f4:	33 1f       	adc	r19, r19
    37f6:	44 1f       	adc	r20, r20
    37f8:	aa 1f       	adc	r26, r26
    37fa:	a9 f3       	breq	.-22     	; 0x37e6 <__divsf3_pse+0x10>
    37fc:	35 d0       	rcall	.+106    	; 0x3868 <__divsf3_pse+0x92>
    37fe:	0e 2e       	mov	r0, r30
    3800:	3a f0       	brmi	.+14     	; 0x3810 <__divsf3_pse+0x3a>
    3802:	e0 e8       	ldi	r30, 0x80	; 128
    3804:	32 d0       	rcall	.+100    	; 0x386a <__divsf3_pse+0x94>
    3806:	91 50       	subi	r25, 0x01	; 1
    3808:	50 40       	sbci	r21, 0x00	; 0
    380a:	e6 95       	lsr	r30
    380c:	00 1c       	adc	r0, r0
    380e:	ca f7       	brpl	.-14     	; 0x3802 <__divsf3_pse+0x2c>
    3810:	2b d0       	rcall	.+86     	; 0x3868 <__divsf3_pse+0x92>
    3812:	fe 2f       	mov	r31, r30
    3814:	29 d0       	rcall	.+82     	; 0x3868 <__divsf3_pse+0x92>
    3816:	66 0f       	add	r22, r22
    3818:	77 1f       	adc	r23, r23
    381a:	88 1f       	adc	r24, r24
    381c:	bb 1f       	adc	r27, r27
    381e:	26 17       	cp	r18, r22
    3820:	37 07       	cpc	r19, r23
    3822:	48 07       	cpc	r20, r24
    3824:	ab 07       	cpc	r26, r27
    3826:	b0 e8       	ldi	r27, 0x80	; 128
    3828:	09 f0       	breq	.+2      	; 0x382c <__divsf3_pse+0x56>
    382a:	bb 0b       	sbc	r27, r27
    382c:	80 2d       	mov	r24, r0
    382e:	bf 01       	movw	r22, r30
    3830:	ff 27       	eor	r31, r31
    3832:	93 58       	subi	r25, 0x83	; 131
    3834:	5f 4f       	sbci	r21, 0xFF	; 255
    3836:	3a f0       	brmi	.+14     	; 0x3846 <__divsf3_pse+0x70>
    3838:	9e 3f       	cpi	r25, 0xFE	; 254
    383a:	51 05       	cpc	r21, r1
    383c:	78 f0       	brcs	.+30     	; 0x385c <__divsf3_pse+0x86>
    383e:	0c 94 b2 1c 	jmp	0x3964	; 0x3964 <__fp_inf>
    3842:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <__fp_szero>
    3846:	5f 3f       	cpi	r21, 0xFF	; 255
    3848:	e4 f3       	brlt	.-8      	; 0x3842 <__divsf3_pse+0x6c>
    384a:	98 3e       	cpi	r25, 0xE8	; 232
    384c:	d4 f3       	brlt	.-12     	; 0x3842 <__divsf3_pse+0x6c>
    384e:	86 95       	lsr	r24
    3850:	77 95       	ror	r23
    3852:	67 95       	ror	r22
    3854:	b7 95       	ror	r27
    3856:	f7 95       	ror	r31
    3858:	9f 5f       	subi	r25, 0xFF	; 255
    385a:	c9 f7       	brne	.-14     	; 0x384e <__divsf3_pse+0x78>
    385c:	88 0f       	add	r24, r24
    385e:	91 1d       	adc	r25, r1
    3860:	96 95       	lsr	r25
    3862:	87 95       	ror	r24
    3864:	97 f9       	bld	r25, 7
    3866:	08 95       	ret
    3868:	e1 e0       	ldi	r30, 0x01	; 1
    386a:	66 0f       	add	r22, r22
    386c:	77 1f       	adc	r23, r23
    386e:	88 1f       	adc	r24, r24
    3870:	bb 1f       	adc	r27, r27
    3872:	62 17       	cp	r22, r18
    3874:	73 07       	cpc	r23, r19
    3876:	84 07       	cpc	r24, r20
    3878:	ba 07       	cpc	r27, r26
    387a:	20 f0       	brcs	.+8      	; 0x3884 <__divsf3_pse+0xae>
    387c:	62 1b       	sub	r22, r18
    387e:	73 0b       	sbc	r23, r19
    3880:	84 0b       	sbc	r24, r20
    3882:	ba 0b       	sbc	r27, r26
    3884:	ee 1f       	adc	r30, r30
    3886:	88 f7       	brcc	.-30     	; 0x386a <__divsf3_pse+0x94>
    3888:	e0 95       	com	r30
    388a:	08 95       	ret

0000388c <__fixunssfsi>:
    388c:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <__fp_splitA>
    3890:	88 f0       	brcs	.+34     	; 0x38b4 <__fixunssfsi+0x28>
    3892:	9f 57       	subi	r25, 0x7F	; 127
    3894:	98 f0       	brcs	.+38     	; 0x38bc <__fixunssfsi+0x30>
    3896:	b9 2f       	mov	r27, r25
    3898:	99 27       	eor	r25, r25
    389a:	b7 51       	subi	r27, 0x17	; 23
    389c:	b0 f0       	brcs	.+44     	; 0x38ca <__fixunssfsi+0x3e>
    389e:	e1 f0       	breq	.+56     	; 0x38d8 <__fixunssfsi+0x4c>
    38a0:	66 0f       	add	r22, r22
    38a2:	77 1f       	adc	r23, r23
    38a4:	88 1f       	adc	r24, r24
    38a6:	99 1f       	adc	r25, r25
    38a8:	1a f0       	brmi	.+6      	; 0x38b0 <__fixunssfsi+0x24>
    38aa:	ba 95       	dec	r27
    38ac:	c9 f7       	brne	.-14     	; 0x38a0 <__fixunssfsi+0x14>
    38ae:	14 c0       	rjmp	.+40     	; 0x38d8 <__fixunssfsi+0x4c>
    38b0:	b1 30       	cpi	r27, 0x01	; 1
    38b2:	91 f0       	breq	.+36     	; 0x38d8 <__fixunssfsi+0x4c>
    38b4:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__fp_zero>
    38b8:	b1 e0       	ldi	r27, 0x01	; 1
    38ba:	08 95       	ret
    38bc:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__fp_zero>
    38c0:	67 2f       	mov	r22, r23
    38c2:	78 2f       	mov	r23, r24
    38c4:	88 27       	eor	r24, r24
    38c6:	b8 5f       	subi	r27, 0xF8	; 248
    38c8:	39 f0       	breq	.+14     	; 0x38d8 <__fixunssfsi+0x4c>
    38ca:	b9 3f       	cpi	r27, 0xF9	; 249
    38cc:	cc f3       	brlt	.-14     	; 0x38c0 <__fixunssfsi+0x34>
    38ce:	86 95       	lsr	r24
    38d0:	77 95       	ror	r23
    38d2:	67 95       	ror	r22
    38d4:	b3 95       	inc	r27
    38d6:	d9 f7       	brne	.-10     	; 0x38ce <__fixunssfsi+0x42>
    38d8:	3e f4       	brtc	.+14     	; 0x38e8 <__fixunssfsi+0x5c>
    38da:	90 95       	com	r25
    38dc:	80 95       	com	r24
    38de:	70 95       	com	r23
    38e0:	61 95       	neg	r22
    38e2:	7f 4f       	sbci	r23, 0xFF	; 255
    38e4:	8f 4f       	sbci	r24, 0xFF	; 255
    38e6:	9f 4f       	sbci	r25, 0xFF	; 255
    38e8:	08 95       	ret

000038ea <__floatunsisf>:
    38ea:	e8 94       	clt
    38ec:	09 c0       	rjmp	.+18     	; 0x3900 <__floatsisf+0x12>

000038ee <__floatsisf>:
    38ee:	97 fb       	bst	r25, 7
    38f0:	3e f4       	brtc	.+14     	; 0x3900 <__floatsisf+0x12>
    38f2:	90 95       	com	r25
    38f4:	80 95       	com	r24
    38f6:	70 95       	com	r23
    38f8:	61 95       	neg	r22
    38fa:	7f 4f       	sbci	r23, 0xFF	; 255
    38fc:	8f 4f       	sbci	r24, 0xFF	; 255
    38fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3900:	99 23       	and	r25, r25
    3902:	a9 f0       	breq	.+42     	; 0x392e <__floatsisf+0x40>
    3904:	f9 2f       	mov	r31, r25
    3906:	96 e9       	ldi	r25, 0x96	; 150
    3908:	bb 27       	eor	r27, r27
    390a:	93 95       	inc	r25
    390c:	f6 95       	lsr	r31
    390e:	87 95       	ror	r24
    3910:	77 95       	ror	r23
    3912:	67 95       	ror	r22
    3914:	b7 95       	ror	r27
    3916:	f1 11       	cpse	r31, r1
    3918:	f8 cf       	rjmp	.-16     	; 0x390a <__floatsisf+0x1c>
    391a:	fa f4       	brpl	.+62     	; 0x395a <__floatsisf+0x6c>
    391c:	bb 0f       	add	r27, r27
    391e:	11 f4       	brne	.+4      	; 0x3924 <__floatsisf+0x36>
    3920:	60 ff       	sbrs	r22, 0
    3922:	1b c0       	rjmp	.+54     	; 0x395a <__floatsisf+0x6c>
    3924:	6f 5f       	subi	r22, 0xFF	; 255
    3926:	7f 4f       	sbci	r23, 0xFF	; 255
    3928:	8f 4f       	sbci	r24, 0xFF	; 255
    392a:	9f 4f       	sbci	r25, 0xFF	; 255
    392c:	16 c0       	rjmp	.+44     	; 0x395a <__floatsisf+0x6c>
    392e:	88 23       	and	r24, r24
    3930:	11 f0       	breq	.+4      	; 0x3936 <__floatsisf+0x48>
    3932:	96 e9       	ldi	r25, 0x96	; 150
    3934:	11 c0       	rjmp	.+34     	; 0x3958 <__floatsisf+0x6a>
    3936:	77 23       	and	r23, r23
    3938:	21 f0       	breq	.+8      	; 0x3942 <__floatsisf+0x54>
    393a:	9e e8       	ldi	r25, 0x8E	; 142
    393c:	87 2f       	mov	r24, r23
    393e:	76 2f       	mov	r23, r22
    3940:	05 c0       	rjmp	.+10     	; 0x394c <__floatsisf+0x5e>
    3942:	66 23       	and	r22, r22
    3944:	71 f0       	breq	.+28     	; 0x3962 <__floatsisf+0x74>
    3946:	96 e8       	ldi	r25, 0x86	; 134
    3948:	86 2f       	mov	r24, r22
    394a:	70 e0       	ldi	r23, 0x00	; 0
    394c:	60 e0       	ldi	r22, 0x00	; 0
    394e:	2a f0       	brmi	.+10     	; 0x395a <__floatsisf+0x6c>
    3950:	9a 95       	dec	r25
    3952:	66 0f       	add	r22, r22
    3954:	77 1f       	adc	r23, r23
    3956:	88 1f       	adc	r24, r24
    3958:	da f7       	brpl	.-10     	; 0x3950 <__floatsisf+0x62>
    395a:	88 0f       	add	r24, r24
    395c:	96 95       	lsr	r25
    395e:	87 95       	ror	r24
    3960:	97 f9       	bld	r25, 7
    3962:	08 95       	ret

00003964 <__fp_inf>:
    3964:	97 f9       	bld	r25, 7
    3966:	9f 67       	ori	r25, 0x7F	; 127
    3968:	80 e8       	ldi	r24, 0x80	; 128
    396a:	70 e0       	ldi	r23, 0x00	; 0
    396c:	60 e0       	ldi	r22, 0x00	; 0
    396e:	08 95       	ret

00003970 <__fp_nan>:
    3970:	9f ef       	ldi	r25, 0xFF	; 255
    3972:	80 ec       	ldi	r24, 0xC0	; 192
    3974:	08 95       	ret

00003976 <__fp_pscA>:
    3976:	00 24       	eor	r0, r0
    3978:	0a 94       	dec	r0
    397a:	16 16       	cp	r1, r22
    397c:	17 06       	cpc	r1, r23
    397e:	18 06       	cpc	r1, r24
    3980:	09 06       	cpc	r0, r25
    3982:	08 95       	ret

00003984 <__fp_pscB>:
    3984:	00 24       	eor	r0, r0
    3986:	0a 94       	dec	r0
    3988:	12 16       	cp	r1, r18
    398a:	13 06       	cpc	r1, r19
    398c:	14 06       	cpc	r1, r20
    398e:	05 06       	cpc	r0, r21
    3990:	08 95       	ret

00003992 <__fp_round>:
    3992:	09 2e       	mov	r0, r25
    3994:	03 94       	inc	r0
    3996:	00 0c       	add	r0, r0
    3998:	11 f4       	brne	.+4      	; 0x399e <__fp_round+0xc>
    399a:	88 23       	and	r24, r24
    399c:	52 f0       	brmi	.+20     	; 0x39b2 <__fp_round+0x20>
    399e:	bb 0f       	add	r27, r27
    39a0:	40 f4       	brcc	.+16     	; 0x39b2 <__fp_round+0x20>
    39a2:	bf 2b       	or	r27, r31
    39a4:	11 f4       	brne	.+4      	; 0x39aa <__fp_round+0x18>
    39a6:	60 ff       	sbrs	r22, 0
    39a8:	04 c0       	rjmp	.+8      	; 0x39b2 <__fp_round+0x20>
    39aa:	6f 5f       	subi	r22, 0xFF	; 255
    39ac:	7f 4f       	sbci	r23, 0xFF	; 255
    39ae:	8f 4f       	sbci	r24, 0xFF	; 255
    39b0:	9f 4f       	sbci	r25, 0xFF	; 255
    39b2:	08 95       	ret

000039b4 <__fp_split3>:
    39b4:	57 fd       	sbrc	r21, 7
    39b6:	90 58       	subi	r25, 0x80	; 128
    39b8:	44 0f       	add	r20, r20
    39ba:	55 1f       	adc	r21, r21
    39bc:	59 f0       	breq	.+22     	; 0x39d4 <__fp_splitA+0x10>
    39be:	5f 3f       	cpi	r21, 0xFF	; 255
    39c0:	71 f0       	breq	.+28     	; 0x39de <__fp_splitA+0x1a>
    39c2:	47 95       	ror	r20

000039c4 <__fp_splitA>:
    39c4:	88 0f       	add	r24, r24
    39c6:	97 fb       	bst	r25, 7
    39c8:	99 1f       	adc	r25, r25
    39ca:	61 f0       	breq	.+24     	; 0x39e4 <__fp_splitA+0x20>
    39cc:	9f 3f       	cpi	r25, 0xFF	; 255
    39ce:	79 f0       	breq	.+30     	; 0x39ee <__fp_splitA+0x2a>
    39d0:	87 95       	ror	r24
    39d2:	08 95       	ret
    39d4:	12 16       	cp	r1, r18
    39d6:	13 06       	cpc	r1, r19
    39d8:	14 06       	cpc	r1, r20
    39da:	55 1f       	adc	r21, r21
    39dc:	f2 cf       	rjmp	.-28     	; 0x39c2 <__fp_split3+0xe>
    39de:	46 95       	lsr	r20
    39e0:	f1 df       	rcall	.-30     	; 0x39c4 <__fp_splitA>
    39e2:	08 c0       	rjmp	.+16     	; 0x39f4 <__fp_splitA+0x30>
    39e4:	16 16       	cp	r1, r22
    39e6:	17 06       	cpc	r1, r23
    39e8:	18 06       	cpc	r1, r24
    39ea:	99 1f       	adc	r25, r25
    39ec:	f1 cf       	rjmp	.-30     	; 0x39d0 <__fp_splitA+0xc>
    39ee:	86 95       	lsr	r24
    39f0:	71 05       	cpc	r23, r1
    39f2:	61 05       	cpc	r22, r1
    39f4:	08 94       	sec
    39f6:	08 95       	ret

000039f8 <__fp_zero>:
    39f8:	e8 94       	clt

000039fa <__fp_szero>:
    39fa:	bb 27       	eor	r27, r27
    39fc:	66 27       	eor	r22, r22
    39fe:	77 27       	eor	r23, r23
    3a00:	cb 01       	movw	r24, r22
    3a02:	97 f9       	bld	r25, 7
    3a04:	08 95       	ret

00003a06 <__mulsf3>:
    3a06:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__mulsf3x>
    3a0a:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__fp_round>
    3a0e:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__fp_pscA>
    3a12:	38 f0       	brcs	.+14     	; 0x3a22 <__mulsf3+0x1c>
    3a14:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__fp_pscB>
    3a18:	20 f0       	brcs	.+8      	; 0x3a22 <__mulsf3+0x1c>
    3a1a:	95 23       	and	r25, r21
    3a1c:	11 f0       	breq	.+4      	; 0x3a22 <__mulsf3+0x1c>
    3a1e:	0c 94 b2 1c 	jmp	0x3964	; 0x3964 <__fp_inf>
    3a22:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <__fp_nan>
    3a26:	11 24       	eor	r1, r1
    3a28:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <__fp_szero>

00003a2c <__mulsf3x>:
    3a2c:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <__fp_split3>
    3a30:	70 f3       	brcs	.-36     	; 0x3a0e <__mulsf3+0x8>

00003a32 <__mulsf3_pse>:
    3a32:	95 9f       	mul	r25, r21
    3a34:	c1 f3       	breq	.-16     	; 0x3a26 <__mulsf3+0x20>
    3a36:	95 0f       	add	r25, r21
    3a38:	50 e0       	ldi	r21, 0x00	; 0
    3a3a:	55 1f       	adc	r21, r21
    3a3c:	62 9f       	mul	r22, r18
    3a3e:	f0 01       	movw	r30, r0
    3a40:	72 9f       	mul	r23, r18
    3a42:	bb 27       	eor	r27, r27
    3a44:	f0 0d       	add	r31, r0
    3a46:	b1 1d       	adc	r27, r1
    3a48:	63 9f       	mul	r22, r19
    3a4a:	aa 27       	eor	r26, r26
    3a4c:	f0 0d       	add	r31, r0
    3a4e:	b1 1d       	adc	r27, r1
    3a50:	aa 1f       	adc	r26, r26
    3a52:	64 9f       	mul	r22, r20
    3a54:	66 27       	eor	r22, r22
    3a56:	b0 0d       	add	r27, r0
    3a58:	a1 1d       	adc	r26, r1
    3a5a:	66 1f       	adc	r22, r22
    3a5c:	82 9f       	mul	r24, r18
    3a5e:	22 27       	eor	r18, r18
    3a60:	b0 0d       	add	r27, r0
    3a62:	a1 1d       	adc	r26, r1
    3a64:	62 1f       	adc	r22, r18
    3a66:	73 9f       	mul	r23, r19
    3a68:	b0 0d       	add	r27, r0
    3a6a:	a1 1d       	adc	r26, r1
    3a6c:	62 1f       	adc	r22, r18
    3a6e:	83 9f       	mul	r24, r19
    3a70:	a0 0d       	add	r26, r0
    3a72:	61 1d       	adc	r22, r1
    3a74:	22 1f       	adc	r18, r18
    3a76:	74 9f       	mul	r23, r20
    3a78:	33 27       	eor	r19, r19
    3a7a:	a0 0d       	add	r26, r0
    3a7c:	61 1d       	adc	r22, r1
    3a7e:	23 1f       	adc	r18, r19
    3a80:	84 9f       	mul	r24, r20
    3a82:	60 0d       	add	r22, r0
    3a84:	21 1d       	adc	r18, r1
    3a86:	82 2f       	mov	r24, r18
    3a88:	76 2f       	mov	r23, r22
    3a8a:	6a 2f       	mov	r22, r26
    3a8c:	11 24       	eor	r1, r1
    3a8e:	9f 57       	subi	r25, 0x7F	; 127
    3a90:	50 40       	sbci	r21, 0x00	; 0
    3a92:	9a f0       	brmi	.+38     	; 0x3aba <__mulsf3_pse+0x88>
    3a94:	f1 f0       	breq	.+60     	; 0x3ad2 <__mulsf3_pse+0xa0>
    3a96:	88 23       	and	r24, r24
    3a98:	4a f0       	brmi	.+18     	; 0x3aac <__mulsf3_pse+0x7a>
    3a9a:	ee 0f       	add	r30, r30
    3a9c:	ff 1f       	adc	r31, r31
    3a9e:	bb 1f       	adc	r27, r27
    3aa0:	66 1f       	adc	r22, r22
    3aa2:	77 1f       	adc	r23, r23
    3aa4:	88 1f       	adc	r24, r24
    3aa6:	91 50       	subi	r25, 0x01	; 1
    3aa8:	50 40       	sbci	r21, 0x00	; 0
    3aaa:	a9 f7       	brne	.-22     	; 0x3a96 <__mulsf3_pse+0x64>
    3aac:	9e 3f       	cpi	r25, 0xFE	; 254
    3aae:	51 05       	cpc	r21, r1
    3ab0:	80 f0       	brcs	.+32     	; 0x3ad2 <__mulsf3_pse+0xa0>
    3ab2:	0c 94 b2 1c 	jmp	0x3964	; 0x3964 <__fp_inf>
    3ab6:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <__fp_szero>
    3aba:	5f 3f       	cpi	r21, 0xFF	; 255
    3abc:	e4 f3       	brlt	.-8      	; 0x3ab6 <__mulsf3_pse+0x84>
    3abe:	98 3e       	cpi	r25, 0xE8	; 232
    3ac0:	d4 f3       	brlt	.-12     	; 0x3ab6 <__mulsf3_pse+0x84>
    3ac2:	86 95       	lsr	r24
    3ac4:	77 95       	ror	r23
    3ac6:	67 95       	ror	r22
    3ac8:	b7 95       	ror	r27
    3aca:	f7 95       	ror	r31
    3acc:	e7 95       	ror	r30
    3ace:	9f 5f       	subi	r25, 0xFF	; 255
    3ad0:	c1 f7       	brne	.-16     	; 0x3ac2 <__mulsf3_pse+0x90>
    3ad2:	fe 2b       	or	r31, r30
    3ad4:	88 0f       	add	r24, r24
    3ad6:	91 1d       	adc	r25, r1
    3ad8:	96 95       	lsr	r25
    3ada:	87 95       	ror	r24
    3adc:	97 f9       	bld	r25, 7
    3ade:	08 95       	ret

00003ae0 <__divmodhi4>:
    3ae0:	97 fb       	bst	r25, 7
    3ae2:	07 2e       	mov	r0, r23
    3ae4:	16 f4       	brtc	.+4      	; 0x3aea <__divmodhi4+0xa>
    3ae6:	00 94       	com	r0
    3ae8:	07 d0       	rcall	.+14     	; 0x3af8 <__divmodhi4_neg1>
    3aea:	77 fd       	sbrc	r23, 7
    3aec:	09 d0       	rcall	.+18     	; 0x3b00 <__divmodhi4_neg2>
    3aee:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__udivmodhi4>
    3af2:	07 fc       	sbrc	r0, 7
    3af4:	05 d0       	rcall	.+10     	; 0x3b00 <__divmodhi4_neg2>
    3af6:	3e f4       	brtc	.+14     	; 0x3b06 <__divmodhi4_exit>

00003af8 <__divmodhi4_neg1>:
    3af8:	90 95       	com	r25
    3afa:	81 95       	neg	r24
    3afc:	9f 4f       	sbci	r25, 0xFF	; 255
    3afe:	08 95       	ret

00003b00 <__divmodhi4_neg2>:
    3b00:	70 95       	com	r23
    3b02:	61 95       	neg	r22
    3b04:	7f 4f       	sbci	r23, 0xFF	; 255

00003b06 <__divmodhi4_exit>:
    3b06:	08 95       	ret

00003b08 <__udivmodsi4>:
    3b08:	a1 e2       	ldi	r26, 0x21	; 33
    3b0a:	1a 2e       	mov	r1, r26
    3b0c:	aa 1b       	sub	r26, r26
    3b0e:	bb 1b       	sub	r27, r27
    3b10:	fd 01       	movw	r30, r26
    3b12:	0d c0       	rjmp	.+26     	; 0x3b2e <__udivmodsi4_ep>

00003b14 <__udivmodsi4_loop>:
    3b14:	aa 1f       	adc	r26, r26
    3b16:	bb 1f       	adc	r27, r27
    3b18:	ee 1f       	adc	r30, r30
    3b1a:	ff 1f       	adc	r31, r31
    3b1c:	a2 17       	cp	r26, r18
    3b1e:	b3 07       	cpc	r27, r19
    3b20:	e4 07       	cpc	r30, r20
    3b22:	f5 07       	cpc	r31, r21
    3b24:	20 f0       	brcs	.+8      	; 0x3b2e <__udivmodsi4_ep>
    3b26:	a2 1b       	sub	r26, r18
    3b28:	b3 0b       	sbc	r27, r19
    3b2a:	e4 0b       	sbc	r30, r20
    3b2c:	f5 0b       	sbc	r31, r21

00003b2e <__udivmodsi4_ep>:
    3b2e:	66 1f       	adc	r22, r22
    3b30:	77 1f       	adc	r23, r23
    3b32:	88 1f       	adc	r24, r24
    3b34:	99 1f       	adc	r25, r25
    3b36:	1a 94       	dec	r1
    3b38:	69 f7       	brne	.-38     	; 0x3b14 <__udivmodsi4_loop>
    3b3a:	60 95       	com	r22
    3b3c:	70 95       	com	r23
    3b3e:	80 95       	com	r24
    3b40:	90 95       	com	r25
    3b42:	9b 01       	movw	r18, r22
    3b44:	ac 01       	movw	r20, r24
    3b46:	bd 01       	movw	r22, r26
    3b48:	cf 01       	movw	r24, r30
    3b4a:	08 95       	ret

00003b4c <__tablejump2__>:
    3b4c:	ee 0f       	add	r30, r30
    3b4e:	ff 1f       	adc	r31, r31
    3b50:	05 90       	lpm	r0, Z+
    3b52:	f4 91       	lpm	r31, Z
    3b54:	e0 2d       	mov	r30, r0
    3b56:	09 94       	ijmp

00003b58 <__umulhisi3>:
    3b58:	a2 9f       	mul	r26, r18
    3b5a:	b0 01       	movw	r22, r0
    3b5c:	b3 9f       	mul	r27, r19
    3b5e:	c0 01       	movw	r24, r0
    3b60:	a3 9f       	mul	r26, r19
    3b62:	70 0d       	add	r23, r0
    3b64:	81 1d       	adc	r24, r1
    3b66:	11 24       	eor	r1, r1
    3b68:	91 1d       	adc	r25, r1
    3b6a:	b2 9f       	mul	r27, r18
    3b6c:	70 0d       	add	r23, r0
    3b6e:	81 1d       	adc	r24, r1
    3b70:	11 24       	eor	r1, r1
    3b72:	91 1d       	adc	r25, r1
    3b74:	08 95       	ret

00003b76 <__adddi3_s8>:
    3b76:	00 24       	eor	r0, r0
    3b78:	a7 fd       	sbrc	r26, 7
    3b7a:	00 94       	com	r0
    3b7c:	2a 0f       	add	r18, r26
    3b7e:	30 1d       	adc	r19, r0
    3b80:	40 1d       	adc	r20, r0
    3b82:	50 1d       	adc	r21, r0
    3b84:	60 1d       	adc	r22, r0
    3b86:	70 1d       	adc	r23, r0
    3b88:	80 1d       	adc	r24, r0
    3b8a:	90 1d       	adc	r25, r0
    3b8c:	08 95       	ret

00003b8e <__cmpdi2>:
    3b8e:	2a 15       	cp	r18, r10
    3b90:	3b 05       	cpc	r19, r11
    3b92:	4c 05       	cpc	r20, r12
    3b94:	5d 05       	cpc	r21, r13
    3b96:	6e 05       	cpc	r22, r14
    3b98:	7f 05       	cpc	r23, r15
    3b9a:	80 07       	cpc	r24, r16
    3b9c:	91 07       	cpc	r25, r17
    3b9e:	08 95       	ret

00003ba0 <__cmpdi2_s8>:
    3ba0:	00 24       	eor	r0, r0
    3ba2:	a7 fd       	sbrc	r26, 7
    3ba4:	00 94       	com	r0
    3ba6:	2a 17       	cp	r18, r26
    3ba8:	30 05       	cpc	r19, r0
    3baa:	40 05       	cpc	r20, r0
    3bac:	50 05       	cpc	r21, r0
    3bae:	60 05       	cpc	r22, r0
    3bb0:	70 05       	cpc	r23, r0
    3bb2:	80 05       	cpc	r24, r0
    3bb4:	90 05       	cpc	r25, r0
    3bb6:	08 95       	ret

00003bb8 <__udivmodhi4>:
    3bb8:	aa 1b       	sub	r26, r26
    3bba:	bb 1b       	sub	r27, r27
    3bbc:	51 e1       	ldi	r21, 0x11	; 17
    3bbe:	07 c0       	rjmp	.+14     	; 0x3bce <__udivmodhi4_ep>

00003bc0 <__udivmodhi4_loop>:
    3bc0:	aa 1f       	adc	r26, r26
    3bc2:	bb 1f       	adc	r27, r27
    3bc4:	a6 17       	cp	r26, r22
    3bc6:	b7 07       	cpc	r27, r23
    3bc8:	10 f0       	brcs	.+4      	; 0x3bce <__udivmodhi4_ep>
    3bca:	a6 1b       	sub	r26, r22
    3bcc:	b7 0b       	sbc	r27, r23

00003bce <__udivmodhi4_ep>:
    3bce:	88 1f       	adc	r24, r24
    3bd0:	99 1f       	adc	r25, r25
    3bd2:	5a 95       	dec	r21
    3bd4:	a9 f7       	brne	.-22     	; 0x3bc0 <__udivmodhi4_loop>
    3bd6:	80 95       	com	r24
    3bd8:	90 95       	com	r25
    3bda:	bc 01       	movw	r22, r24
    3bdc:	cd 01       	movw	r24, r26
    3bde:	08 95       	ret

00003be0 <_exit>:
    3be0:	f8 94       	cli

00003be2 <__stop_program>:
    3be2:	ff cf       	rjmp	.-2      	; 0x3be2 <__stop_program>
