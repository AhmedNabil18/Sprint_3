
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000038c  00800060  00003b2a  00003bbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000179  008003ec  008003ec  00003f4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003f4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003f7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006b8  00000000  00000000  00003fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006f1c  00000000  00000000  00004670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001dfc  00000000  00000000  0000b58c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000042ad  00000000  00000000  0000d388  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014b0  00000000  00000000  00011638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002abb  00000000  00000000  00012ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005383  00000000  00000000  000155a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000570  00000000  00000000  0001a926  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <__vector_1>
       8:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__vector_2>
       c:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__vector_3>
      10:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <__vector_4>
      14:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__vector_5>
      18:	0c 94 99 14 	jmp	0x2932	; 0x2932 <__vector_6>
      1c:	0c 94 be 14 	jmp	0x297c	; 0x297c <__vector_7>
      20:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <__vector_8>
      24:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__vector_9>
      28:	0c 94 4f 14 	jmp	0x289e	; 0x289e <__vector_10>
      2c:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__vector_11>
      30:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__vector_12>
      34:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <__vector_13>
      38:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__vector_14>
      3c:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__vector_15>
      40:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__vector_16>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	48 19       	sub	r20, r8
      56:	54 19       	sub	r21, r4
      58:	4b 19       	sub	r20, r11
      5a:	4e 19       	sub	r20, r14
      5c:	51 19       	sub	r21, r1
      5e:	48 19       	sub	r20, r8
      60:	48 19       	sub	r20, r8

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	13 e0       	ldi	r17, 0x03	; 3
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	ea e2       	ldi	r30, 0x2A	; 42
      76:	fb e3       	ldi	r31, 0x3B	; 59
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	ac 3e       	cpi	r26, 0xEC	; 236
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	25 e0       	ldi	r18, 0x05	; 5
      86:	ac ee       	ldi	r26, 0xEC	; 236
      88:	b3 e0       	ldi	r27, 0x03	; 3
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a5 36       	cpi	r26, 0x65	; 101
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <main>
      98:	0c 94 93 1d 	jmp	0x3b26	; 0x3b26 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
      a0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <enuCurrentAppStatus>
      a4:	84 30       	cpi	r24, 0x04	; 4
      a6:	09 f4       	brne	.+2      	; 0xaa <App_init+0xa>
      a8:	f8 c0       	rjmp	.+496    	; 0x29a <App_init+0x1fa>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
      aa:	0e 94 0d 09 	call	0x121a	; 0x121a <Eeprom_24_init>
      ae:	81 30       	cpi	r24, 0x01	; 1
      b0:	09 f0       	breq	.+2      	; 0xb4 <App_init+0x14>
      b2:	c2 c0       	rjmp	.+388    	; 0x238 <App_init+0x198>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
      b4:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <Terminal_init>
      b8:	81 30       	cpi	r24, 0x01	; 1
      ba:	09 f0       	breq	.+2      	; 0xbe <App_init+0x1e>
      bc:	bf c0       	rjmp	.+382    	; 0x23c <App_init+0x19c>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
      be:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <Spi_init>
      c2:	81 30       	cpi	r24, 0x01	; 1
      c4:	09 f0       	breq	.+2      	; 0xc8 <App_init+0x28>
      c6:	bc c0       	rjmp	.+376    	; 0x240 <App_init+0x1a0>
		return APP_STATUS_ERROR_NOK;
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
      c8:	0e 94 9e 0b 	call	0x173c	; 0x173c <Keypad_init>
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	09 f0       	breq	.+2      	; 0xd2 <App_init+0x32>
      d0:	b9 c0       	rjmp	.+370    	; 0x244 <App_init+0x1a4>
		return APP_STATUS_ERROR_NOK;
	if(LCD_STATUS_ERROR_OK != Lcd_init())
      d2:	0e 94 84 0c 	call	0x1908	; 0x1908 <Lcd_init>
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	09 f0       	breq	.+2      	; 0xdc <App_init+0x3c>
      da:	b6 c0       	rjmp	.+364    	; 0x248 <App_init+0x1a8>
		return APP_STATUS_ERROR_NOK;
	if(LM35_STATUS_ERROR_OK != LM35_init())
      dc:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <LM35_init>
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	09 f0       	breq	.+2      	; 0xe6 <App_init+0x46>
      e4:	b3 c0       	rjmp	.+358    	; 0x24c <App_init+0x1ac>
		return APP_STATUS_ERROR_NOK;
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
      e6:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Motor_init>
      ea:	81 30       	cpi	r24, 0x01	; 1
      ec:	09 f0       	breq	.+2      	; 0xf0 <App_init+0x50>
      ee:	b0 c0       	rjmp	.+352    	; 0x250 <App_init+0x1b0>
		return APP_STATUS_ERROR_NOK;
	if(BTTN_STATUS_ERROR_OK != Button_init())
      f0:	0e 94 66 08 	call	0x10cc	; 0x10cc <Button_init>
      f4:	81 30       	cpi	r24, 0x01	; 1
      f6:	09 f0       	breq	.+2      	; 0xfa <App_init+0x5a>
      f8:	ad c0       	rjmp	.+346    	; 0x254 <App_init+0x1b4>
//	DIO_PORTC_DIR |= 1<<3;
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
      fa:	81 ed       	ldi	r24, 0xD1	; 209
      fc:	93 e0       	ldi	r25, 0x03	; 3
      fe:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	09 f0       	breq	.+2      	; 0x108 <App_init+0x68>
     106:	a8 c0       	rjmp	.+336    	; 0x258 <App_init+0x1b8>
		return APP_STATUS_ERROR_NOK;
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
     108:	83 ec       	ldi	r24, 0xC3	; 195
     10a:	93 e0       	ldi	r25, 0x03	; 3
     10c:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     110:	81 30       	cpi	r24, 0x01	; 1
     112:	09 f0       	breq	.+2      	; 0x116 <App_init+0x76>
     114:	a3 c0       	rjmp	.+326    	; 0x25c <App_init+0x1bc>
		return APP_STATUS_ERROR_NOK;
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
     116:	66 e0       	ldi	r22, 0x06	; 6
     118:	74 e0       	ldi	r23, 0x04	; 4
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <Eeprom_24_readByte>
     122:	81 30       	cpi	r24, 0x01	; 1
     124:	09 f0       	breq	.+2      	; 0x128 <App_init+0x88>
     126:	9c c0       	rjmp	.+312    	; 0x260 <App_init+0x1c0>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     128:	2a e0       	ldi	r18, 0x0A	; 10
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	40 e0       	ldi	r20, 0x00	; 0
     12e:	50 e0       	ldi	r21, 0x00	; 0
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	70 e0       	ldi	r23, 0x00	; 0
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <Delay_ms>
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
     13c:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <gu8_initData>
     140:	8a 3a       	cpi	r24, 0xAA	; 170
     142:	a1 f1       	breq	.+104    	; 0x1ac <App_init+0x10c>
	{
		gu8_ATMMode = ATM_MODE_ADMIN;
     144:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <gu8_ATMMode>
		
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, ATM_DB_ATM_PIN_VAL,stringLength(ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
     148:	80 e6       	ldi	r24, 0x60	; 96
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <stringLength>
     150:	48 2f       	mov	r20, r24
     152:	50 e0       	ldi	r21, 0x00	; 0
     154:	60 e6       	ldi	r22, 0x60	; 96
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	8b e0       	ldi	r24, 0x0B	; 11
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 0b 0a 	call	0x1416	; 0x1416 <Eeprom_24_writePacket>
     160:	81 30       	cpi	r24, 0x01	; 1
     162:	09 f0       	breq	.+2      	; 0x166 <App_init+0xc6>
     164:	7f c0       	rjmp	.+254    	; 0x264 <App_init+0x1c4>
			return APP_STATUS_ERROR_NOK;
		
		if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
     166:	60 e0       	ldi	r22, 0x00	; 0
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     16e:	81 30       	cpi	r24, 0x01	; 1
     170:	09 f0       	breq	.+2      	; 0x174 <App_init+0xd4>
     172:	7a c0       	rjmp	.+244    	; 0x268 <App_init+0x1c8>
			return APP_STATUS_ERROR_OK;
		if(Lcd_printString((uint8_t*)"*******ATM******") != LCD_STATUS_ERROR_OK)
     174:	8c ed       	ldi	r24, 0xDC	; 220
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     17c:	81 30       	cpi	r24, 0x01	; 1
     17e:	09 f0       	breq	.+2      	; 0x182 <App_init+0xe2>
     180:	75 c0       	rjmp	.+234    	; 0x26c <App_init+0x1cc>
			return APP_STATUS_ERROR_NOK;
		if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     188:	81 30       	cpi	r24, 0x01	; 1
     18a:	09 f0       	breq	.+2      	; 0x18e <App_init+0xee>
     18c:	71 c0       	rjmp	.+226    	; 0x270 <App_init+0x1d0>
			return APP_STATUS_ERROR_OK;
		if(Lcd_printString((uint8_t*)"*****LOCKED*****") != LCD_STATUS_ERROR_OK)
     18e:	8d ee       	ldi	r24, 0xED	; 237
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     196:	81 30       	cpi	r24, 0x01	; 1
     198:	09 f0       	breq	.+2      	; 0x19c <App_init+0xfc>
     19a:	6c c0       	rjmp	.+216    	; 0x274 <App_init+0x1d4>
			return APP_STATUS_ERROR_NOK;
		
		if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     19c:	8e ef       	ldi	r24, 0xFE	; 254
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     1a4:	81 30       	cpi	r24, 0x01	; 1
     1a6:	09 f0       	breq	.+2      	; 0x1aa <App_init+0x10a>
     1a8:	67 c0       	rjmp	.+206    	; 0x278 <App_init+0x1d8>
     1aa:	41 c0       	rjmp	.+130    	; 0x22e <App_init+0x18e>
			return APP_STATUS_ERROR_NOK;
	}else
	{//gu8_ATMPin
		gu8_ATMMode = ATM_MODE_USER;
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu8_ATMMode>
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
     1b2:	48 e0       	ldi	r20, 0x08	; 8
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	68 ef       	ldi	r22, 0xF8	; 248
     1b8:	73 e0       	ldi	r23, 0x03	; 3
     1ba:	83 e0       	ldi	r24, 0x03	; 3
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <Eeprom_24_readPacket>
     1c2:	81 30       	cpi	r24, 0x01	; 1
     1c4:	09 f0       	breq	.+2      	; 0x1c8 <App_init+0x128>
     1c6:	5a c0       	rjmp	.+180    	; 0x27c <App_init+0x1dc>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     1c8:	65 e0       	ldi	r22, 0x05	; 5
     1ca:	74 e0       	ldi	r23, 0x04	; 4
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 58 09 	call	0x12b0	; 0x12b0 <Eeprom_24_readByte>
     1d4:	81 30       	cpi	r24, 0x01	; 1
     1d6:	09 f0       	breq	.+2      	; 0x1da <App_init+0x13a>
     1d8:	53 c0       	rjmp	.+166    	; 0x280 <App_init+0x1e0>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
     1da:	45 e0       	ldi	r20, 0x05	; 5
     1dc:	50 e0       	ldi	r21, 0x00	; 0
     1de:	60 e0       	ldi	r22, 0x00	; 0
     1e0:	74 e0       	ldi	r23, 0x04	; 4
     1e2:	8b e0       	ldi	r24, 0x0B	; 11
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <Eeprom_24_readPacket>
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	09 f0       	breq	.+2      	; 0x1f0 <App_init+0x150>
     1ee:	4a c0       	rjmp	.+148    	; 0x284 <App_init+0x1e4>
			return APP_STATUS_ERROR_NOK;
		
		if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     1f8:	81 30       	cpi	r24, 0x01	; 1
     1fa:	09 f0       	breq	.+2      	; 0x1fe <App_init+0x15e>
     1fc:	45 c0       	rjmp	.+138    	; 0x288 <App_init+0x1e8>
			return APP_STATUS_ERROR_OK;
		if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
     1fe:	80 e1       	ldi	r24, 0x10	; 16
     200:	91 e0       	ldi	r25, 0x01	; 1
     202:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	09 f0       	breq	.+2      	; 0x20c <App_init+0x16c>
     20a:	40 c0       	rjmp	.+128    	; 0x28c <App_init+0x1ec>
			return APP_STATUS_ERROR_NOK;
		if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	e9 f5       	brne	.+122    	; 0x290 <App_init+0x1f0>
			return APP_STATUS_ERROR_OK;
		if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
     216:	8e e1       	ldi	r24, 0x1E	; 30
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     21e:	81 30       	cpi	r24, 0x01	; 1
     220:	c9 f5       	brne	.+114    	; 0x294 <App_init+0x1f4>
			return APP_STATUS_ERROR_NOK;
			
		if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     222:	8d e2       	ldi	r24, 0x2D	; 45
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	a9 f5       	brne	.+106    	; 0x298 <App_init+0x1f8>
			return APP_STATUS_ERROR_NOK;
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     22e:	84 e0       	ldi	r24, 0x04	; 4
     230:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <enuCurrentAppStatus>
	return APP_STATUS_ERROR_OK;
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	08 95       	ret
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	08 95       	ret
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	08 95       	ret
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
		return APP_STATUS_ERROR_NOK;
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	08 95       	ret
	if(LCD_STATUS_ERROR_OK != Lcd_init())
		return APP_STATUS_ERROR_NOK;
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	08 95       	ret
	if(LM35_STATUS_ERROR_OK != LM35_init())
		return APP_STATUS_ERROR_NOK;
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	08 95       	ret
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
		return APP_STATUS_ERROR_NOK;
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	08 95       	ret
	if(BTTN_STATUS_ERROR_OK != Button_init())
		return APP_STATUS_ERROR_NOK;
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	08 95       	ret
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	08 95       	ret
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	08 95       	ret
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
	{
		gu8_ATMMode = ATM_MODE_ADMIN;
		
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, ATM_DB_ATM_PIN_VAL,stringLength(ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	08 95       	ret
		
		if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_OK;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	08 95       	ret
		if(Lcd_printString((uint8_t*)"*******ATM******") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	08 95       	ret
		if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_OK;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	08 95       	ret
		if(Lcd_printString((uint8_t*)"*****LOCKED*****") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	08 95       	ret
		
		if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	08 95       	ret
	}else
	{//gu8_ATMPin
		gu8_ATMMode = ATM_MODE_USER;
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	08 95       	ret
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	08 95       	ret
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 95       	ret
		
		if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_OK;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	08 95       	ret
		if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	08 95       	ret
		if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_OK;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	08 95       	ret
		if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	08 95       	ret
			
		if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     298:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     29a:	08 95       	ret

0000029c <AppUSER_checkPan>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	2a 97       	sbiw	r28, 0x0a	; 10
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_clientIndex = 0;
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
     2b2:	fe 01       	movw	r30, r28
     2b4:	31 96       	adiw	r30, 0x01	; 1
     2b6:	8a e0       	ldi	r24, 0x0A	; 10
     2b8:	df 01       	movw	r26, r30
     2ba:	1d 92       	st	X+, r1
     2bc:	8a 95       	dec	r24
     2be:	e9 f7       	brne	.-6      	; 0x2ba <AppUSER_checkPan+0x1e>
	
	for (u8_clientIndex=0; u8_clientIndex<gu8_registeredAccNum; u8_clientIndex++)
     2c0:	10 e0       	ldi	r17, 0x00	; 0
     2c2:	18 c0       	rjmp	.+48     	; 0x2f4 <AppUSER_checkPan+0x58>
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + u8_clientIndex*16;
     2c4:	81 2f       	mov	r24, r17
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	02 96       	adiw	r24, 0x02	; 2
     2ca:	82 95       	swap	r24
     2cc:	80 7f       	andi	r24, 0xF0	; 240
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     2ce:	4a e0       	ldi	r20, 0x0A	; 10
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	be 01       	movw	r22, r28
     2d4:	6f 5f       	subi	r22, 0xFF	; 255
     2d6:	7f 4f       	sbci	r23, 0xFF	; 255
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <Eeprom_24_readPacket>
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	29 f5       	brne	.+74     	; 0x32c <AppUSER_checkPan+0x90>
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
     2e2:	63 e2       	ldi	r22, 0x23	; 35
     2e4:	74 e0       	ldi	r23, 0x04	; 4
     2e6:	ce 01       	movw	r24, r28
     2e8:	01 96       	adiw	r24, 0x01	; 1
     2ea:	0e 94 7f 17 	call	0x2efe	; 0x2efe <stringCompare>
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	29 f0       	breq	.+10     	; 0x2fc <AppUSER_checkPan+0x60>
{
	uint8_t u8_clientIndex = 0;
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	
	for (u8_clientIndex=0; u8_clientIndex<gu8_registeredAccNum; u8_clientIndex++)
     2f2:	1f 5f       	subi	r17, 0xFF	; 255
     2f4:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <gu8_registeredAccNum>
     2f8:	18 17       	cp	r17, r24
     2fa:	20 f3       	brcs	.-56     	; 0x2c4 <AppUSER_checkPan+0x28>
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
			break;
	}	
	
	uint8_t u8_clientBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + u8_clientIndex*16;
     2fc:	81 2f       	mov	r24, r17
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	03 96       	adiw	r24, 0x03	; 3
     302:	18 2f       	mov	r17, r24
     304:	12 95       	swap	r17
     306:	10 7f       	andi	r17, 0xF0	; 240
	
	stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
     308:	67 e0       	ldi	r22, 0x07	; 7
     30a:	74 e0       	ldi	r23, 0x04	; 4
     30c:	ce 01       	movw	r24, r28
     30e:	01 96       	adiw	r24, 0x01	; 1
     310:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <stringCopy>
	
	if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     314:	49 e0       	ldi	r20, 0x09	; 9
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	61 e1       	ldi	r22, 0x11	; 17
     31a:	74 e0       	ldi	r23, 0x04	; 4
     31c:	81 2f       	mov	r24, r17
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <Eeprom_24_readPacket>
     324:	81 30       	cpi	r24, 0x01	; 1
     326:	21 f0       	breq	.+8      	; 0x330 <AppUSER_checkPan+0x94>
		return APP_STATUS_ERROR_NOK;
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	03 c0       	rjmp	.+6      	; 0x332 <AppUSER_checkPan+0x96>
	
	for (u8_clientIndex=0; u8_clientIndex<gu8_registeredAccNum; u8_clientIndex++)
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + u8_clientIndex*16;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	01 c0       	rjmp	.+2      	; 0x332 <AppUSER_checkPan+0x96>
	stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
	
	if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_PAN_FOUND;
     330:	89 e0       	ldi	r24, 0x09	; 9
}
     332:	2a 96       	adiw	r28, 0x0a	; 10
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	de bf       	out	0x3e, r29	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	cd bf       	out	0x3d, r28	; 61
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
     344:	08 95       	ret

00000346 <AppUSER_ReportKeypad>:
* Parameters (out): pu8_key - Pointer to variable to hold the button pressed
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the value pressed in the keypad.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_ReportKeypad(uint8_t* pu8_key)
{
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	ec 01       	movw	r28, r24
	static uint8_t u8_index = 0;
	static uint8_t sau8_data[10]={0};
	enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&sau8_data[u8_index]);
     34c:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <u8_index.2187>
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	84 51       	subi	r24, 0x14	; 20
     354:	9c 4f       	sbci	r25, 0xFC	; 252
     356:	0e 94 b1 0b 	call	0x1762	; 0x1762 <Keypad_readKey>
	
	if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
     35a:	86 30       	cpi	r24, 0x06	; 6
     35c:	09 f0       	breq	.+2      	; 0x360 <AppUSER_ReportKeypad+0x1a>
     35e:	61 c0       	rjmp	.+194    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
	{
		if(sau8_data[u8_index] == '=')
     360:	60 91 f6 03 	lds	r22, 0x03F6	; 0x8003f6 <u8_index.2187>
     364:	86 2f       	mov	r24, r22
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	fc 01       	movw	r30, r24
     36a:	e4 51       	subi	r30, 0x14	; 20
     36c:	fc 4f       	sbci	r31, 0xFC	; 252
     36e:	20 81       	ld	r18, Z
     370:	2d 33       	cpi	r18, 0x3D	; 61
     372:	09 f5       	brne	.+66     	; 0x3b6 <AppUSER_ReportKeypad+0x70>
		{
			sau8_data[u8_index] = '\0';
     374:	fc 01       	movw	r30, r24
     376:	e4 51       	subi	r30, 0x14	; 20
     378:	fc 4f       	sbci	r31, 0xFC	; 252
     37a:	10 82       	st	Z, r1
			u8_index = 0;
     37c:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <u8_index.2187>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     380:	66 e0       	ldi	r22, 0x06	; 6
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     388:	81 30       	cpi	r24, 0x01	; 1
     38a:	09 f0       	breq	.+2      	; 0x38e <AppUSER_ReportKeypad+0x48>
     38c:	4c c0       	rjmp	.+152    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
				return APP_STATUS_ERROR_NOK;
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
     38e:	88 e3       	ldi	r24, 0x38	; 56
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     396:	81 30       	cpi	r24, 0x01	; 1
     398:	09 f0       	breq	.+2      	; 0x39c <AppUSER_ReportKeypad+0x56>
     39a:	47 c0       	rjmp	.+142    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
				return APP_STATUS_ERROR_NOK;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     39c:	66 e0       	ldi	r22, 0x06	; 6
     39e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     3a2:	81 30       	cpi	r24, 0x01	; 1
     3a4:	09 f0       	breq	.+2      	; 0x3a8 <AppUSER_ReportKeypad+0x62>
     3a6:	43 c0       	rjmp	.+134    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
				return APP_STATUS_ERROR_NOK;
			stringCopy(sau8_data, pu8_key);
     3a8:	be 01       	movw	r22, r28
     3aa:	8c ee       	ldi	r24, 0xEC	; 236
     3ac:	93 e0       	ldi	r25, 0x03	; 3
     3ae:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <stringCopy>
			return APP_STATUS_KPD_NUM;
     3b2:	87 e0       	ldi	r24, 0x07	; 7
     3b4:	45 c0       	rjmp	.+138    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		}else if(sau8_data[u8_index] == '-')
     3b6:	2d 32       	cpi	r18, 0x2D	; 45
     3b8:	a9 f4       	brne	.+42     	; 0x3e4 <AppUSER_ReportKeypad+0x9e>
		{
			u8_index--;
     3ba:	ef ef       	ldi	r30, 0xFF	; 255
     3bc:	e6 0f       	add	r30, r22
     3be:	e0 93 f6 03 	sts	0x03F6, r30	; 0x8003f6 <u8_index.2187>
			sau8_data[u8_index] = '\0';
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	e4 51       	subi	r30, 0x14	; 20
     3c6:	fc 4f       	sbci	r31, 0xFC	; 252
     3c8:	10 82       	st	Z, r1
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     3ca:	6b 5f       	subi	r22, 0xFB	; 251
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	71 f5       	brne	.+92     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
				return APP_STATUS_ERROR_NOK;
			if(Lcd_printChar(' ') != LCD_STATUS_ERROR_OK)
     3d6:	80 e2       	ldi	r24, 0x20	; 32
     3d8:	0e 94 cf 0c 	call	0x199e	; 0x199e <Lcd_printChar>
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	59 f1       	breq	.+86     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
				return APP_STATUS_ERROR_NOK;
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	2e c0       	rjmp	.+92     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		}else
		{
			if(u8_index!=10)
     3e4:	6a 30       	cpi	r22, 0x0A	; 10
     3e6:	b9 f0       	breq	.+46     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     3e8:	6a 5f       	subi	r22, 0xFA	; 250
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     3f0:	81 30       	cpi	r24, 0x01	; 1
     3f2:	19 f5       	brne	.+70     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
     3f4:	e0 91 f6 03 	lds	r30, 0x03F6	; 0x8003f6 <u8_index.2187>
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	e4 51       	subi	r30, 0x14	; 20
     3fc:	fc 4f       	sbci	r31, 0xFC	; 252
     3fe:	80 81       	ld	r24, Z
     400:	0e 94 cf 0c 	call	0x199e	; 0x199e <Lcd_printChar>
     404:	81 30       	cpi	r24, 0x01	; 1
     406:	d9 f4       	brne	.+54     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
				return APP_STATUS_ERROR_NOK;
				u8_index++;
     408:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <u8_index.2187>
     40c:	8f 5f       	subi	r24, 0xFF	; 255
     40e:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <u8_index.2187>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
	
	return APP_STATUS_ERROR_OK;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	15 c0       	rjmp	.+42     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
				if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
				u8_index++;
			}else
			{
				sau8_data[u8_index] = '\0';
     416:	fc 01       	movw	r30, r24
     418:	e4 51       	subi	r30, 0x14	; 20
     41a:	fc 4f       	sbci	r31, 0xFC	; 252
     41c:	10 82       	st	Z, r1
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
	
	return APP_STATUS_ERROR_OK;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	0f c0       	rjmp	.+30     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
			}
			
		}
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	0d c0       	rjmp	.+26     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		if(sau8_data[u8_index] == '=')
		{
			sau8_data[u8_index] = '\0';
			u8_index = 0;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	0b c0       	rjmp	.+22     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	09 c0       	rjmp	.+18     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	07 c0       	rjmp	.+14     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		}else if(sau8_data[u8_index] == '-')
		{
			u8_index--;
			sau8_data[u8_index] = '\0';
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	05 c0       	rjmp	.+10     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
	
	return APP_STATUS_ERROR_OK;
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	03 c0       	rjmp	.+6      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		}else
		{
			if(u8_index!=10)
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	01 c0       	rjmp	.+2      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
				if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     43e:	80 e0       	ldi	r24, 0x00	; 0
	{
		return APP_STATUS_ERROR_OK;
	}
	
	return APP_STATUS_ERROR_OK;
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <AppUSER_startTransaction>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startTransaction(void)
{
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	28 97       	sbiw	r28, 0x08	; 8
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	f8 94       	cli
     454:	de bf       	out	0x3e, r29	; 62
     456:	0f be       	out	0x3f, r0	; 63
     458:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_inputKPD[8] = {0};
     45a:	fe 01       	movw	r30, r28
     45c:	31 96       	adiw	r30, 0x01	; 1
     45e:	88 e0       	ldi	r24, 0x08	; 8
     460:	df 01       	movw	r26, r30
     462:	1d 92       	st	X+, r1
     464:	8a 95       	dec	r24
     466:	e9 f7       	brne	.-6      	; 0x462 <AppUSER_startTransaction+0x1c>
	enuApp_Status_t KeypdaStatus = 0;
	while(1)
	{
		EmptyString(au8_inputKPD);
     468:	ce 01       	movw	r24, r28
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     470:	ce 01       	movw	r24, r28
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	0e 94 a3 01 	call	0x346	; 0x346 <AppUSER_ReportKeypad>
		
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     478:	87 30       	cpi	r24, 0x07	; 7
     47a:	09 f0       	breq	.+2      	; 0x47e <AppUSER_startTransaction+0x38>
     47c:	ee c0       	rjmp	.+476    	; 0x65a <AppUSER_startTransaction+0x214>
		{
			Terminal_Out(au8_inputKPD);
     47e:	ce 01       	movw	r24, r28
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
			Terminal_Out(gau8_maxAmount);
     486:	88 ef       	ldi	r24, 0xF8	; 248
     488:	93 e0       	ldi	r25, 0x03	; 3
     48a:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
			if(stringCompare(gau8_maxAmount, au8_inputKPD) == 3)
     48e:	be 01       	movw	r22, r28
     490:	6f 5f       	subi	r22, 0xFF	; 255
     492:	7f 4f       	sbci	r23, 0xFF	; 255
     494:	88 ef       	ldi	r24, 0xF8	; 248
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	0e 94 7f 17 	call	0x2efe	; 0x2efe <stringCompare>
     49c:	83 30       	cpi	r24, 0x03	; 3
     49e:	c1 f5       	brne	.+112    	; 0x510 <AppUSER_startTransaction+0xca>
			{
				Lcd_clear();
     4a0:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	09 f0       	breq	.+2      	; 0x4b2 <AppUSER_startTransaction+0x6c>
     4b0:	df c0       	rjmp	.+446    	; 0x670 <AppUSER_startTransaction+0x22a>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Max Amount") != LCD_STATUS_ERROR_OK)
     4b2:	8b e3       	ldi	r24, 0x3B	; 59
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     4ba:	81 30       	cpi	r24, 0x01	; 1
     4bc:	09 f0       	breq	.+2      	; 0x4c0 <AppUSER_startTransaction+0x7a>
     4be:	da c0       	rjmp	.+436    	; 0x674 <AppUSER_startTransaction+0x22e>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     4c6:	81 30       	cpi	r24, 0x01	; 1
     4c8:	09 f0       	breq	.+2      	; 0x4cc <AppUSER_startTransaction+0x86>
     4ca:	d6 c0       	rjmp	.+428    	; 0x678 <AppUSER_startTransaction+0x232>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Exceeded") != LCD_STATUS_ERROR_OK)
     4cc:	86 e4       	ldi	r24, 0x46	; 70
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     4d4:	81 30       	cpi	r24, 0x01	; 1
     4d6:	09 f0       	breq	.+2      	; 0x4da <AppUSER_startTransaction+0x94>
     4d8:	d1 c0       	rjmp	.+418    	; 0x67c <AppUSER_startTransaction+0x236>
				return APP_STATUS_ERROR_NOK;
				Delay_ms(500);
     4da:	24 ef       	ldi	r18, 0xF4	; 244
     4dc:	31 e0       	ldi	r19, 0x01	; 1
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <Delay_ms>
				Lcd_clear();
     4ee:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	09 f0       	breq	.+2      	; 0x500 <AppUSER_startTransaction+0xba>
     4fe:	c0 c0       	rjmp	.+384    	; 0x680 <AppUSER_startTransaction+0x23a>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     500:	8f e4       	ldi	r24, 0x4F	; 79
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     508:	81 30       	cpi	r24, 0x01	; 1
     50a:	09 f4       	brne	.+2      	; 0x50e <AppUSER_startTransaction+0xc8>
     50c:	a6 c0       	rjmp	.+332    	; 0x65a <AppUSER_startTransaction+0x214>
     50e:	ba c0       	rjmp	.+372    	; 0x684 <AppUSER_startTransaction+0x23e>
				return APP_STATUS_ERROR_NOK;
			}else
			{
				Lcd_clear();
     510:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     51c:	81 30       	cpi	r24, 0x01	; 1
     51e:	09 f0       	breq	.+2      	; 0x522 <AppUSER_startTransaction+0xdc>
     520:	b3 c0       	rjmp	.+358    	; 0x688 <AppUSER_startTransaction+0x242>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Please Wait") != LCD_STATUS_ERROR_OK)
     522:	8c e5       	ldi	r24, 0x5C	; 92
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     52a:	81 30       	cpi	r24, 0x01	; 1
     52c:	09 f0       	breq	.+2      	; 0x530 <AppUSER_startTransaction+0xea>
     52e:	ae c0       	rjmp	.+348    	; 0x68c <AppUSER_startTransaction+0x246>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     536:	81 30       	cpi	r24, 0x01	; 1
     538:	09 f0       	breq	.+2      	; 0x53c <AppUSER_startTransaction+0xf6>
     53a:	aa c0       	rjmp	.+340    	; 0x690 <AppUSER_startTransaction+0x24a>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Processing...") != LCD_STATUS_ERROR_OK)
     53c:	88 e6       	ldi	r24, 0x68	; 104
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     544:	81 30       	cpi	r24, 0x01	; 1
     546:	09 f0       	breq	.+2      	; 0x54a <AppUSER_startTransaction+0x104>
     548:	a5 c0       	rjmp	.+330    	; 0x694 <AppUSER_startTransaction+0x24e>
				return APP_STATUS_ERROR_NOK;
				if(stringCompare(gstr_clientdata.au8_Balance, au8_inputKPD) == 3)
     54a:	be 01       	movw	r22, r28
     54c:	6f 5f       	subi	r22, 0xFF	; 255
     54e:	7f 4f       	sbci	r23, 0xFF	; 255
     550:	81 e1       	ldi	r24, 0x11	; 17
     552:	94 e0       	ldi	r25, 0x04	; 4
     554:	0e 94 7f 17 	call	0x2efe	; 0x2efe <stringCompare>
     558:	83 30       	cpi	r24, 0x03	; 3
     55a:	c1 f5       	brne	.+112    	; 0x5cc <AppUSER_startTransaction+0x186>
				{
					Lcd_clear();
     55c:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Lcd_clear>
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     568:	81 30       	cpi	r24, 0x01	; 1
     56a:	09 f0       	breq	.+2      	; 0x56e <AppUSER_startTransaction+0x128>
     56c:	95 c0       	rjmp	.+298    	; 0x698 <AppUSER_startTransaction+0x252>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Insufficient") != LCD_STATUS_ERROR_OK)
     56e:	86 e7       	ldi	r24, 0x76	; 118
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     576:	81 30       	cpi	r24, 0x01	; 1
     578:	09 f0       	breq	.+2      	; 0x57c <AppUSER_startTransaction+0x136>
     57a:	90 c0       	rjmp	.+288    	; 0x69c <AppUSER_startTransaction+0x256>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	09 f0       	breq	.+2      	; 0x588 <AppUSER_startTransaction+0x142>
     586:	8c c0       	rjmp	.+280    	; 0x6a0 <AppUSER_startTransaction+0x25a>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Fund") != LCD_STATUS_ERROR_OK)
     588:	83 e8       	ldi	r24, 0x83	; 131
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     590:	81 30       	cpi	r24, 0x01	; 1
     592:	09 f0       	breq	.+2      	; 0x596 <AppUSER_startTransaction+0x150>
     594:	87 c0       	rjmp	.+270    	; 0x6a4 <AppUSER_startTransaction+0x25e>
						return APP_STATUS_ERROR_NOK;
					Delay_ms(500);
     596:	24 ef       	ldi	r18, 0xF4	; 244
     598:	31 e0       	ldi	r19, 0x01	; 1
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	60 e0       	ldi	r22, 0x00	; 0
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <Delay_ms>
					Lcd_clear();
     5aa:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Lcd_clear>
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     5ae:	60 e0       	ldi	r22, 0x00	; 0
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     5b6:	81 30       	cpi	r24, 0x01	; 1
     5b8:	09 f0       	breq	.+2      	; 0x5bc <AppUSER_startTransaction+0x176>
     5ba:	76 c0       	rjmp	.+236    	; 0x6a8 <AppUSER_startTransaction+0x262>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     5bc:	8f e4       	ldi	r24, 0x4F	; 79
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	09 f4       	brne	.+2      	; 0x5ca <AppUSER_startTransaction+0x184>
     5c8:	48 c0       	rjmp	.+144    	; 0x65a <AppUSER_startTransaction+0x214>
     5ca:	70 c0       	rjmp	.+224    	; 0x6ac <AppUSER_startTransaction+0x266>
						return APP_STATUS_ERROR_NOK;
				}else/****************** Transaction Successfull ******************/
				{
					Lcd_clear();
     5cc:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Lcd_clear>
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     5d8:	81 30       	cpi	r24, 0x01	; 1
     5da:	09 f0       	breq	.+2      	; 0x5de <AppUSER_startTransaction+0x198>
     5dc:	69 c0       	rjmp	.+210    	; 0x6b0 <AppUSER_startTransaction+0x26a>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Successful") != LCD_STATUS_ERROR_OK)
     5de:	88 e8       	ldi	r24, 0x88	; 136
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     5e6:	81 30       	cpi	r24, 0x01	; 1
     5e8:	09 f0       	breq	.+2      	; 0x5ec <AppUSER_startTransaction+0x1a6>
     5ea:	64 c0       	rjmp	.+200    	; 0x6b4 <AppUSER_startTransaction+0x26e>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     5f2:	81 30       	cpi	r24, 0x01	; 1
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <AppUSER_startTransaction+0x1b2>
     5f6:	60 c0       	rjmp	.+192    	; 0x6b8 <AppUSER_startTransaction+0x272>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Transaction") != LCD_STATUS_ERROR_OK)
     5f8:	83 e9       	ldi	r24, 0x93	; 147
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     600:	81 30       	cpi	r24, 0x01	; 1
     602:	09 f0       	breq	.+2      	; 0x606 <AppUSER_startTransaction+0x1c0>
     604:	5b c0       	rjmp	.+182    	; 0x6bc <AppUSER_startTransaction+0x276>
					return APP_STATUS_ERROR_NOK;
					Motor_run(MOTOR_CASH_ID, 100, MOTOR_DIR_CLK_WISE);
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	64 e6       	ldi	r22, 0x64	; 100
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <Motor_run>
					Delay_ms(1000);
     610:	28 ee       	ldi	r18, 0xE8	; 232
     612:	33 e0       	ldi	r19, 0x03	; 3
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <Delay_ms>
					Motor_stop(MOTOR_CASH_ID);
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Motor_stop>
					gu8_USER_Mode_State = USER_IDLE;
     62a:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <gu8_USER_Mode_State>
					Lcd_clear();
     62e:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Lcd_clear>
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
     632:	80 e1       	ldi	r24, 0x10	; 16
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     63a:	81 30       	cpi	r24, 0x01	; 1
     63c:	09 f0       	breq	.+2      	; 0x640 <AppUSER_startTransaction+0x1fa>
     63e:	40 c0       	rjmp	.+128    	; 0x6c0 <AppUSER_startTransaction+0x27a>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     646:	81 30       	cpi	r24, 0x01	; 1
     648:	e9 f5       	brne	.+122    	; 0x6c4 <AppUSER_startTransaction+0x27e>
					return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
     64a:	8e e1       	ldi	r24, 0x1E	; 30
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     652:	81 30       	cpi	r24, 0x01	; 1
     654:	c9 f1       	breq	.+114    	; 0x6c8 <AppUSER_startTransaction+0x282>
					return APP_STATUS_ERROR_NOK;
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	38 c0       	rjmp	.+112    	; 0x6ca <AppUSER_startTransaction+0x284>
					
					return APP_STATUS_ERROR_OK;
				}
			}
		}
		Delay_ms(155);
     65a:	2b e9       	ldi	r18, 0x9B	; 155
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e0       	ldi	r20, 0x00	; 0
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <Delay_ms>
	}
     66e:	fc ce       	rjmp	.-520    	; 0x468 <AppUSER_startTransaction+0x22>
			Terminal_Out(gau8_maxAmount);
			if(stringCompare(gau8_maxAmount, au8_inputKPD) == 3)
			{
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	2b c0       	rjmp	.+86     	; 0x6ca <AppUSER_startTransaction+0x284>
				if(Lcd_printString((uint8_t*)"Max Amount") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	29 c0       	rjmp	.+82     	; 0x6ca <AppUSER_startTransaction+0x284>
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	27 c0       	rjmp	.+78     	; 0x6ca <AppUSER_startTransaction+0x284>
				if(Lcd_printString((uint8_t*)"Exceeded") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	25 c0       	rjmp	.+74     	; 0x6ca <AppUSER_startTransaction+0x284>
				Delay_ms(500);
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	23 c0       	rjmp	.+70     	; 0x6ca <AppUSER_startTransaction+0x284>
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	21 c0       	rjmp	.+66     	; 0x6ca <AppUSER_startTransaction+0x284>
			}else
			{
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	1f c0       	rjmp	.+62     	; 0x6ca <AppUSER_startTransaction+0x284>
				if(Lcd_printString((uint8_t*)"Please Wait") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	1d c0       	rjmp	.+58     	; 0x6ca <AppUSER_startTransaction+0x284>
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	1b c0       	rjmp	.+54     	; 0x6ca <AppUSER_startTransaction+0x284>
				if(Lcd_printString((uint8_t*)"Processing...") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	19 c0       	rjmp	.+50     	; 0x6ca <AppUSER_startTransaction+0x284>
				if(stringCompare(gstr_clientdata.au8_Balance, au8_inputKPD) == 3)
				{
					Lcd_clear();
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	17 c0       	rjmp	.+46     	; 0x6ca <AppUSER_startTransaction+0x284>
					if(Lcd_printString((uint8_t*)"Insufficient") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	15 c0       	rjmp	.+42     	; 0x6ca <AppUSER_startTransaction+0x284>
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	13 c0       	rjmp	.+38     	; 0x6ca <AppUSER_startTransaction+0x284>
					if(Lcd_printString((uint8_t*)"Fund") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	11 c0       	rjmp	.+34     	; 0x6ca <AppUSER_startTransaction+0x284>
					Delay_ms(500);
					Lcd_clear();
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	0f c0       	rjmp	.+30     	; 0x6ca <AppUSER_startTransaction+0x284>
					if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	0d c0       	rjmp	.+26     	; 0x6ca <AppUSER_startTransaction+0x284>
				}else/****************** Transaction Successfull ******************/
				{
					Lcd_clear();
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	0b c0       	rjmp	.+22     	; 0x6ca <AppUSER_startTransaction+0x284>
					if(Lcd_printString((uint8_t*)"Successful") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	09 c0       	rjmp	.+18     	; 0x6ca <AppUSER_startTransaction+0x284>
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	07 c0       	rjmp	.+14     	; 0x6ca <AppUSER_startTransaction+0x284>
					if(Lcd_printString((uint8_t*)"Transaction") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	05 c0       	rjmp	.+10     	; 0x6ca <AppUSER_startTransaction+0x284>
					Delay_ms(1000);
					Motor_stop(MOTOR_CASH_ID);
					gu8_USER_Mode_State = USER_IDLE;
					Lcd_clear();
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	03 c0       	rjmp	.+6      	; 0x6ca <AppUSER_startTransaction+0x284>
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_OK;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	01 c0       	rjmp	.+2      	; 0x6ca <AppUSER_startTransaction+0x284>
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
					
					return APP_STATUS_ERROR_OK;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
		}
		Delay_ms(155);
	}
}
     6ca:	28 96       	adiw	r28, 0x08	; 8
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	cd bf       	out	0x3d, r28	; 61
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <AppUSER_checkPin>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the user's input pin if right or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPin(void)
{
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	00 d0       	rcall	.+0      	; 0x6e2 <AppUSER_checkPin+0x6>
     6e2:	00 d0       	rcall	.+0      	; 0x6e4 <AppUSER_checkPin+0x8>
     6e4:	1f 92       	push	r1
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_inputKPD[5] = {0};
     6ea:	fe 01       	movw	r30, r28
     6ec:	31 96       	adiw	r30, 0x01	; 1
     6ee:	85 e0       	ldi	r24, 0x05	; 5
     6f0:	df 01       	movw	r26, r30
     6f2:	1d 92       	st	X+, r1
     6f4:	8a 95       	dec	r24
     6f6:	e9 f7       	brne	.-6      	; 0x6f2 <AppUSER_checkPin+0x16>
	enuApp_Status_t KeypdaStatus = 0;
	while(1)
	{
		EmptyString(au8_inputKPD);
     6f8:	ce 01       	movw	r24, r28
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     700:	ce 01       	movw	r24, r28
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	0e 94 a3 01 	call	0x346	; 0x346 <AppUSER_ReportKeypad>
		
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     708:	87 30       	cpi	r24, 0x07	; 7
     70a:	09 f0       	breq	.+2      	; 0x70e <AppUSER_checkPin+0x32>
     70c:	59 c0       	rjmp	.+178    	; 0x7c0 <AppUSER_checkPin+0xe4>
		{
			if(stringCompare(au8_inputKPD, gstr_userCardData.au8_pinNum) != 1)
     70e:	6d e2       	ldi	r22, 0x2D	; 45
     710:	74 e0       	ldi	r23, 0x04	; 4
     712:	ce 01       	movw	r24, r28
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	0e 94 7f 17 	call	0x2efe	; 0x2efe <stringCompare>
     71a:	81 30       	cpi	r24, 0x01	; 1
     71c:	b1 f1       	breq	.+108    	; 0x78a <AppUSER_checkPin+0xae>
			{
				Lcd_clear();
     71e:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     72a:	81 30       	cpi	r24, 0x01	; 1
     72c:	09 f0       	breq	.+2      	; 0x730 <AppUSER_checkPin+0x54>
     72e:	53 c0       	rjmp	.+166    	; 0x7d6 <AppUSER_checkPin+0xfa>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Incorrect PIN") != LCD_STATUS_ERROR_OK)
     730:	8f e9       	ldi	r24, 0x9F	; 159
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     738:	81 30       	cpi	r24, 0x01	; 1
     73a:	09 f0       	breq	.+2      	; 0x73e <AppUSER_checkPin+0x62>
     73c:	4e c0       	rjmp	.+156    	; 0x7da <AppUSER_checkPin+0xfe>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	09 f0       	breq	.+2      	; 0x74a <AppUSER_checkPin+0x6e>
     748:	4a c0       	rjmp	.+148    	; 0x7de <AppUSER_checkPin+0x102>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Try Again") != LCD_STATUS_ERROR_OK)
     74a:	8d ea       	ldi	r24, 0xAD	; 173
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     752:	81 30       	cpi	r24, 0x01	; 1
     754:	09 f0       	breq	.+2      	; 0x758 <AppUSER_checkPin+0x7c>
     756:	45 c0       	rjmp	.+138    	; 0x7e2 <AppUSER_checkPin+0x106>
				return APP_STATUS_ERROR_NOK;
				Delay_ms(500);
     758:	24 ef       	ldi	r18, 0xF4	; 244
     75a:	31 e0       	ldi	r19, 0x01	; 1
     75c:	40 e0       	ldi	r20, 0x00	; 0
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <Delay_ms>
				Lcd_clear();
     76c:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     778:	81 30       	cpi	r24, 0x01	; 1
     77a:	a9 f5       	brne	.+106    	; 0x7e6 <AppUSER_checkPin+0x10a>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     77c:	87 eb       	ldi	r24, 0xB7	; 183
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     784:	81 30       	cpi	r24, 0x01	; 1
     786:	e1 f0       	breq	.+56     	; 0x7c0 <AppUSER_checkPin+0xe4>
     788:	30 c0       	rjmp	.+96     	; 0x7ea <AppUSER_checkPin+0x10e>
				return APP_STATUS_ERROR_NOK;
			}else
			{
				Lcd_clear();
     78a:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     796:	81 30       	cpi	r24, 0x01	; 1
     798:	51 f5       	brne	.+84     	; 0x7ee <AppUSER_checkPin+0x112>
					return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Please Wait") != LCD_STATUS_ERROR_OK)
     79a:	8c e5       	ldi	r24, 0x5C	; 92
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     7a2:	81 30       	cpi	r24, 0x01	; 1
     7a4:	31 f5       	brne	.+76     	; 0x7f2 <AppUSER_checkPin+0x116>
					return APP_STATUS_ERROR_NOK;
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     7ac:	81 30       	cpi	r24, 0x01	; 1
     7ae:	19 f5       	brne	.+70     	; 0x7f6 <AppUSER_checkPin+0x11a>
					return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Processing...") != LCD_STATUS_ERROR_OK)
     7b0:	88 e6       	ldi	r24, 0x68	; 104
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     7b8:	81 30       	cpi	r24, 0x01	; 1
     7ba:	f9 f0       	breq	.+62     	; 0x7fa <AppUSER_checkPin+0x11e>
					return APP_STATUS_ERROR_NOK;
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	1e c0       	rjmp	.+60     	; 0x7fc <AppUSER_checkPin+0x120>
				
				return APP_STATUS_PIN_CORRECT;
			}
		}
		Delay_ms(155);
     7c0:	2b e9       	ldi	r18, 0x9B	; 155
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <Delay_ms>
	}	
     7d4:	91 cf       	rjmp	.-222    	; 0x6f8 <AppUSER_checkPin+0x1c>
		{
			if(stringCompare(au8_inputKPD, gstr_userCardData.au8_pinNum) != 1)
			{
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	11 c0       	rjmp	.+34     	; 0x7fc <AppUSER_checkPin+0x120>
				if(Lcd_printString((uint8_t*)"Incorrect PIN") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	0f c0       	rjmp	.+30     	; 0x7fc <AppUSER_checkPin+0x120>
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	0d c0       	rjmp	.+26     	; 0x7fc <AppUSER_checkPin+0x120>
				if(Lcd_printString((uint8_t*)"Try Again") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	0b c0       	rjmp	.+22     	; 0x7fc <AppUSER_checkPin+0x120>
				Delay_ms(500);
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	09 c0       	rjmp	.+18     	; 0x7fc <AppUSER_checkPin+0x120>
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	07 c0       	rjmp	.+14     	; 0x7fc <AppUSER_checkPin+0x120>
			}else
			{
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	05 c0       	rjmp	.+10     	; 0x7fc <AppUSER_checkPin+0x120>
				if(Lcd_printString((uint8_t*)"Please Wait") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	03 c0       	rjmp	.+6      	; 0x7fc <AppUSER_checkPin+0x120>
				if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <AppUSER_checkPin+0x120>
				if(Lcd_printString((uint8_t*)"Processing...") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
				
				return APP_STATUS_PIN_CORRECT;
     7fa:	88 e0       	ldi	r24, 0x08	; 8
			}
		}
		Delay_ms(155);
	}	
}
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	08 95       	ret

0000080c <AppUSER_startProcess>:
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to start processing the card.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
     80c:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	11 f5       	brne	.+68     	; 0x860 <__stack+0x1>
		return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     81c:	87 eb       	ldi	r24, 0xB7	; 183
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     824:	81 30       	cpi	r24, 0x01	; 1
     826:	f1 f4       	brne	.+60     	; 0x864 <__stack+0x5>
		return APP_STATUS_ERROR_NOK;
	if(AppUSER_checkPin() != APP_STATUS_PIN_CORRECT)
     828:	0e 94 6e 03 	call	0x6dc	; 0x6dc <AppUSER_checkPin>
     82c:	88 30       	cpi	r24, 0x08	; 8
     82e:	e1 f4       	brne	.+56     	; 0x868 <__stack+0x9>
		return APP_STATUS_ERROR_NOK;
	
	if(AppUSER_checkPan() != APP_STATUS_PAN_FOUND)
     830:	0e 94 4e 01 	call	0x29c	; 0x29c <AppUSER_checkPan>
     834:	89 30       	cpi	r24, 0x09	; 9
     836:	d1 f4       	brne	.+52     	; 0x86c <__stack+0xd>
		return APP_STATUS_ERROR_NOK;
	
	Lcd_clear();
     838:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     844:	81 30       	cpi	r24, 0x01	; 1
     846:	a1 f4       	brne	.+40     	; 0x870 <__stack+0x11>
		return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     848:	8f e4       	ldi	r24, 0x4F	; 79
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     850:	81 30       	cpi	r24, 0x01	; 1
     852:	81 f4       	brne	.+32     	; 0x874 <__stack+0x15>
		return APP_STATUS_ERROR_NOK;
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
     854:	0e 94 23 02 	call	0x446	; 0x446 <AppUSER_startTransaction>
     858:	81 30       	cpi	r24, 0x01	; 1
     85a:	69 f0       	breq	.+26     	; 0x876 <__stack+0x17>
		return APP_STATUS_ERROR_NOK;
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	08 95       	ret
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	08 95       	ret
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	08 95       	ret
	if(AppUSER_checkPin() != APP_STATUS_PIN_CORRECT)
		return APP_STATUS_ERROR_NOK;
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	08 95       	ret
	
	if(AppUSER_checkPan() != APP_STATUS_PAN_FOUND)
		return APP_STATUS_ERROR_NOK;
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	08 95       	ret
	
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	08 95       	ret
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     874:	80 e0       	ldi	r24, 0x00	; 0
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     876:	08 95       	ret

00000878 <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	cf 5f       	subi	r28, 0xFF	; 255
     886:	d1 09       	sbc	r29, r1
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	f8 94       	cli
     88c:	de bf       	out	0x3e, r29	; 62
     88e:	0f be       	out	0x3f, r0	; 63
     890:	cd bf       	out	0x3d, r28	; 61
     892:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     894:	ce 01       	movw	r24, r28
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	fc 01       	movw	r30, r24
     89c:	11 92       	st	Z+, r1
     89e:	2a 95       	dec	r18
     8a0:	e9 f7       	brne	.-6      	; 0x89c <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
     8a2:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
     8a6:	85 30       	cpi	r24, 0x05	; 5
     8a8:	39 f4       	brne	.+14     	; 0x8b8 <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
     8aa:	b8 01       	movw	r22, r16
     8ac:	ce 01       	movw	r24, r28
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <stringCopy>
		return APP_STATUS_ERROR_OK;
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	05 c0       	rjmp	.+10     	; 0x8c2 <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     8b8:	81 30       	cpi	r24, 0x01	; 1
     8ba:	11 f0       	breq	.+4      	; 0x8c0 <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
     8c0:	86 e0       	ldi	r24, 0x06	; 6
}
     8c2:	c1 50       	subi	r28, 0x01	; 1
     8c4:	df 4f       	sbci	r29, 0xFF	; 255
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	08 95       	ret

000008da <AppADMIN_getInput>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the ADMIN Input Choice.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getInput(uint8_t* pu8_data)
{
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Your Input: ") != TERMINAL_STATUS_ERROR_OK)
     8e0:	86 ec       	ldi	r24, 0xC6	; 198
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	c1 f4       	brne	.+48     	; 0x91c <AppADMIN_getInput+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     8ec:	ce 01       	movw	r24, r28
     8ee:	0e 94 3c 04 	call	0x878	; 0x878 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     8f2:	81 30       	cpi	r24, 0x01	; 1
     8f4:	29 f0       	breq	.+10     	; 0x900 <AppADMIN_getInput+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     8f6:	11 f0       	breq	.+4      	; 0x8fc <AppADMIN_getInput+0x22>
     8f8:	86 30       	cpi	r24, 0x06	; 6
     8fa:	91 f4       	brne	.+36     	; 0x920 <AppADMIN_getInput+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     8fc:	86 30       	cpi	r24, 0x06	; 6
     8fe:	b1 f3       	breq	.-20     	; 0x8ec <AppADMIN_getInput+0x12>
		
		if (pu8_data[1] == '\0')
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	88 23       	and	r24, r24
     904:	79 f0       	breq	.+30     	; 0x924 <AppADMIN_getInput+0x4a>
		break;
		EmptyString(pu8_data);
     906:	ce 01       	movw	r24, r28
     908:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
     90c:	83 ed       	ldi	r24, 0xD3	; 211
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     914:	81 30       	cpi	r24, 0x01	; 1
     916:	21 f3       	breq	.-56     	; 0x8e0 <AppADMIN_getInput+0x6>
		return APP_STATUS_ERROR_NOK;
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	05 c0       	rjmp	.+10     	; 0x926 <AppADMIN_getInput+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Your Input: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	03 c0       	rjmp	.+6      	; 0x926 <AppADMIN_getInput+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	01 c0       	rjmp	.+2      	; 0x926 <AppADMIN_getInput+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     924:	81 e0       	ldi	r24, 0x01	; 1
}
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <AppADMIN_getnewMaxAmount>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getnewMaxAmount(uint8_t* pu8_data)
{
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Max Amount: ") != TERMINAL_STATUS_ERROR_OK)
     932:	8c ef       	ldi	r24, 0xFC	; 252
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     93a:	81 30       	cpi	r24, 0x01	; 1
     93c:	d9 f4       	brne	.+54     	; 0x974 <AppADMIN_getnewMaxAmount+0x48>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     93e:	ce 01       	movw	r24, r28
     940:	0e 94 3c 04 	call	0x878	; 0x878 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     944:	81 30       	cpi	r24, 0x01	; 1
     946:	29 f0       	breq	.+10     	; 0x952 <AppADMIN_getnewMaxAmount+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     948:	11 f0       	breq	.+4      	; 0x94e <AppADMIN_getnewMaxAmount+0x22>
     94a:	86 30       	cpi	r24, 0x06	; 6
     94c:	a9 f4       	brne	.+42     	; 0x978 <AppADMIN_getnewMaxAmount+0x4c>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     94e:	86 30       	cpi	r24, 0x06	; 6
     950:	b1 f3       	breq	.-20     	; 0x93e <AppADMIN_getnewMaxAmount+0x12>
		
		if ((pu8_data[7] == '\0') && (pu8_data[4] == '.'))
     952:	8f 81       	ldd	r24, Y+7	; 0x07
     954:	81 11       	cpse	r24, r1
     956:	03 c0       	rjmp	.+6      	; 0x95e <AppADMIN_getnewMaxAmount+0x32>
     958:	8c 81       	ldd	r24, Y+4	; 0x04
     95a:	8e 32       	cpi	r24, 0x2E	; 46
     95c:	79 f0       	breq	.+30     	; 0x97c <AppADMIN_getnewMaxAmount+0x50>
			break;
		EmptyString(pu8_data);
     95e:	ce 01       	movw	r24, r28
     960:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
     964:	89 e0       	ldi	r24, 0x09	; 9
     966:	92 e0       	ldi	r25, 0x02	; 2
     968:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	09 f3       	breq	.-62     	; 0x932 <AppADMIN_getnewMaxAmount+0x6>
			return APP_STATUS_ERROR_NOK;
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	05 c0       	rjmp	.+10     	; 0x97e <AppADMIN_getnewMaxAmount+0x52>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Max Amount: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	03 c0       	rjmp	.+6      	; 0x97e <AppADMIN_getnewMaxAmount+0x52>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	01 c0       	rjmp	.+2      	; 0x97e <AppADMIN_getnewMaxAmount+0x52>
			break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     97c:	81 e0       	ldi	r24, 0x01	; 1
}
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	08 95       	ret

00000984 <AppADMIN_getCustomerPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerPAN(uint8_t* pu8_data)
{
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"PAN: ") != TERMINAL_STATUS_ERROR_OK)
     98a:	89 e3       	ldi	r24, 0x39	; 57
     98c:	92 e0       	ldi	r25, 0x02	; 2
     98e:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     992:	81 30       	cpi	r24, 0x01	; 1
     994:	c1 f4       	brne	.+48     	; 0x9c6 <AppADMIN_getCustomerPAN+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     996:	ce 01       	movw	r24, r28
     998:	0e 94 3c 04 	call	0x878	; 0x878 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     99c:	81 30       	cpi	r24, 0x01	; 1
     99e:	29 f0       	breq	.+10     	; 0x9aa <AppADMIN_getCustomerPAN+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     9a0:	11 f0       	breq	.+4      	; 0x9a6 <AppADMIN_getCustomerPAN+0x22>
     9a2:	86 30       	cpi	r24, 0x06	; 6
     9a4:	91 f4       	brne	.+36     	; 0x9ca <AppADMIN_getCustomerPAN+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     9a6:	86 30       	cpi	r24, 0x06	; 6
     9a8:	b1 f3       	breq	.-20     	; 0x996 <AppADMIN_getCustomerPAN+0x12>
		
		if (pu8_data[9] == '\0')
     9aa:	89 85       	ldd	r24, Y+9	; 0x09
     9ac:	88 23       	and	r24, r24
     9ae:	79 f0       	breq	.+30     	; 0x9ce <AppADMIN_getCustomerPAN+0x4a>
		break;
		EmptyString(pu8_data);
     9b0:	ce 01       	movw	r24, r28
     9b2:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
     9b6:	8f e3       	ldi	r24, 0x3F	; 63
     9b8:	92 e0       	ldi	r25, 0x02	; 2
     9ba:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     9be:	81 30       	cpi	r24, 0x01	; 1
     9c0:	21 f3       	breq	.-56     	; 0x98a <AppADMIN_getCustomerPAN+0x6>
		return APP_STATUS_ERROR_NOK;
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	05 c0       	rjmp	.+10     	; 0x9d0 <AppADMIN_getCustomerPAN+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"PAN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <AppADMIN_getCustomerPAN+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <AppADMIN_getCustomerPAN+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     9ce:	81 e0       	ldi	r24, 0x01	; 1
}
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	08 95       	ret

000009d6 <AppADMIN_getCustomerBalance>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Balance by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the balance of the customer.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerBalance(uint8_t* pu8_data)
{
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Balance: ") != TERMINAL_STATUS_ERROR_OK)
     9dc:	8f e5       	ldi	r24, 0x5F	; 95
     9de:	92 e0       	ldi	r25, 0x02	; 2
     9e0:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	c1 f4       	brne	.+48     	; 0xa18 <AppADMIN_getCustomerBalance+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     9e8:	ce 01       	movw	r24, r28
     9ea:	0e 94 3c 04 	call	0x878	; 0x878 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	29 f0       	breq	.+10     	; 0x9fc <AppADMIN_getCustomerBalance+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     9f2:	11 f0       	breq	.+4      	; 0x9f8 <AppADMIN_getCustomerBalance+0x22>
     9f4:	86 30       	cpi	r24, 0x06	; 6
     9f6:	91 f4       	brne	.+36     	; 0xa1c <AppADMIN_getCustomerBalance+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     9f8:	86 30       	cpi	r24, 0x06	; 6
     9fa:	b1 f3       	breq	.-20     	; 0x9e8 <AppADMIN_getCustomerBalance+0x12>
		
		if (pu8_data[7] == '\0')
     9fc:	8f 81       	ldd	r24, Y+7	; 0x07
     9fe:	88 23       	and	r24, r24
     a00:	79 f0       	breq	.+30     	; 0xa20 <AppADMIN_getCustomerBalance+0x4a>
		break;
		EmptyString(pu8_data);
     a02:	ce 01       	movw	r24, r28
     a04:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters\r") != TERMINAL_STATUS_ERROR_OK)
     a08:	89 e6       	ldi	r24, 0x69	; 105
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     a10:	81 30       	cpi	r24, 0x01	; 1
     a12:	21 f3       	breq	.-56     	; 0x9dc <AppADMIN_getCustomerBalance+0x6>
		return APP_STATUS_ERROR_NOK;
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	05 c0       	rjmp	.+10     	; 0xa22 <AppADMIN_getCustomerBalance+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Balance: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	03 c0       	rjmp	.+6      	; 0xa22 <AppADMIN_getCustomerBalance+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	01 c0       	rjmp	.+2      	; 0xa22 <AppADMIN_getCustomerBalance+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     a20:	81 e0       	ldi	r24, 0x01	; 1
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	08 95       	ret

00000a28 <AppADMIN_getAtmPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input ATM PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the atm pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getAtmPIN(uint8_t* pu8_data)
{
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	
	Terminal_enablePasswordMode();
     a2e:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <Terminal_enablePasswordMode>
	do
	{
		if(Terminal_Out((uint8_t*)"ATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
     a32:	8d e8       	ldi	r24, 0x8D	; 141
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     a3a:	81 30       	cpi	r24, 0x01	; 1
     a3c:	69 f5       	brne	.+90     	; 0xa98 <AppADMIN_getAtmPIN+0x70>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     a3e:	ce 01       	movw	r24, r28
     a40:	0e 94 3c 04 	call	0x878	; 0x878 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	29 f0       	breq	.+10     	; 0xa52 <AppADMIN_getAtmPIN+0x2a>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     a48:	11 f0       	breq	.+4      	; 0xa4e <AppADMIN_getAtmPIN+0x26>
     a4a:	86 30       	cpi	r24, 0x06	; 6
     a4c:	39 f5       	brne	.+78     	; 0xa9c <AppADMIN_getAtmPIN+0x74>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     a4e:	86 30       	cpi	r24, 0x06	; 6
     a50:	b1 f3       	breq	.-20     	; 0xa3e <AppADMIN_getAtmPIN+0x16>
		
		if(stringCompare(ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
     a52:	be 01       	movw	r22, r28
     a54:	80 e6       	ldi	r24, 0x60	; 96
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 7f 17 	call	0x2efe	; 0x2efe <stringCompare>
     a5c:	81 30       	cpi	r24, 0x01	; 1
     a5e:	39 f0       	breq	.+14     	; 0xa6e <AppADMIN_getAtmPIN+0x46>
		{
			if(Terminal_Out((uint8_t*)"Incorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
     a60:	87 e9       	ldi	r24, 0x97	; 151
     a62:	92 e0       	ldi	r25, 0x02	; 2
     a64:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     a68:	81 30       	cpi	r24, 0x01	; 1
     a6a:	41 f0       	breq	.+16     	; 0xa7c <AppADMIN_getAtmPIN+0x54>
     a6c:	19 c0       	rjmp	.+50     	; 0xaa0 <AppADMIN_getAtmPIN+0x78>
				return APP_STATUS_ERROR_NOK;
		}else
		{
			if(Terminal_Out((uint8_t*)"Loading...\r") != TERMINAL_STATUS_ERROR_OK)
     a6e:	86 ea       	ldi	r24, 0xA6	; 166
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     a76:	81 30       	cpi	r24, 0x01	; 1
     a78:	a9 f4       	brne	.+42     	; 0xaa4 <AppADMIN_getAtmPIN+0x7c>
     a7a:	0a c0       	rjmp	.+20     	; 0xa90 <AppADMIN_getAtmPIN+0x68>
				return APP_STATUS_ERROR_NOK;
			break;
		}
		EmptyString(pu8_data);
     a7c:	ce 01       	movw	r24, r28
     a7e:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
     a82:	82 eb       	ldi	r24, 0xB2	; 178
     a84:	92 e0       	ldi	r25, 0x02	; 2
     a86:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	91 f2       	breq	.-92     	; 0xa32 <AppADMIN_getAtmPIN+0xa>
     a8e:	0c c0       	rjmp	.+24     	; 0xaa8 <AppADMIN_getAtmPIN+0x80>
			return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
     a90:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <Terminal_disablePasswordMode>
	return APP_STATUS_ERROR_OK;
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	09 c0       	rjmp	.+18     	; 0xaaa <AppADMIN_getAtmPIN+0x82>
	
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"ATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	07 c0       	rjmp	.+14     	; 0xaaa <AppADMIN_getAtmPIN+0x82>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	05 c0       	rjmp	.+10     	; 0xaaa <AppADMIN_getAtmPIN+0x82>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringCompare(ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
		{
			if(Terminal_Out((uint8_t*)"Incorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	03 c0       	rjmp	.+6      	; 0xaaa <AppADMIN_getAtmPIN+0x82>
		}else
		{
			if(Terminal_Out((uint8_t*)"Loading...\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	01 c0       	rjmp	.+2      	; 0xaaa <AppADMIN_getAtmPIN+0x82>
			break;
		}
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     aa8:	80 e0       	ldi	r24, 0x00	; 0
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_ERROR_OK;
}
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	08 95       	ret

00000ab0 <AppADMIN_saveNewCustomerData>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save PAN and Balance of a new Customer in the EEPROM
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveNewCustomerData(void)
{
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*16 ;
     ab4:	20 91 05 04 	lds	r18, 0x0405	; 0x800405 <gu8_registeredAccNum>
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	c9 01       	movw	r24, r18
     abc:	02 96       	adiw	r24, 0x02	; 2
     abe:	d8 2f       	mov	r29, r24
     ac0:	d2 95       	swap	r29
     ac2:	d0 7f       	andi	r29, 0xF0	; 240
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*16 ;
     ac4:	2d 5f       	subi	r18, 0xFD	; 253
     ac6:	3f 4f       	sbci	r19, 0xFF	; 255
     ac8:	c2 2f       	mov	r28, r18
     aca:	c2 95       	swap	r28
     acc:	c0 7f       	andi	r28, 0xF0	; 240
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
     ace:	87 e0       	ldi	r24, 0x07	; 7
     ad0:	94 e0       	ldi	r25, 0x04	; 4
     ad2:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <stringLength>
     ad6:	48 2f       	mov	r20, r24
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	67 e0       	ldi	r22, 0x07	; 7
     adc:	74 e0       	ldi	r23, 0x04	; 4
     ade:	8d 2f       	mov	r24, r29
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 0b 0a 	call	0x1416	; 0x1416 <Eeprom_24_writePacket>
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	d9 f4       	brne	.+54     	; 0xb20 <AppADMIN_saveNewCustomerData+0x70>
		return APP_STATUS_ERROR_NOK;
		
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     aea:	81 e1       	ldi	r24, 0x11	; 17
     aec:	94 e0       	ldi	r25, 0x04	; 4
     aee:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <stringLength>
     af2:	48 2f       	mov	r20, r24
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	61 e1       	ldi	r22, 0x11	; 17
     af8:	74 e0       	ldi	r23, 0x04	; 4
     afa:	8c 2f       	mov	r24, r28
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 0b 0a 	call	0x1416	; 0x1416 <Eeprom_24_writePacket>
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	79 f4       	brne	.+30     	; 0xb24 <AppADMIN_saveNewCustomerData+0x74>
		return APP_STATUS_ERROR_NOK;
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     b06:	60 91 05 04 	lds	r22, 0x0405	; 0x800405 <gu8_registeredAccNum>
     b0a:	6f 5f       	subi	r22, 0xFF	; 255
     b0c:	60 93 05 04 	sts	0x0405, r22	; 0x800405 <gu8_registeredAccNum>
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 1c 09 	call	0x1238	; 0x1238 <Eeprom_24_writeByte>
     b18:	81 30       	cpi	r24, 0x01	; 1
     b1a:	31 f0       	breq	.+12     	; 0xb28 <AppADMIN_saveNewCustomerData+0x78>
		return APP_STATUS_ERROR_NOK;
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	05 c0       	rjmp	.+10     	; 0xb2a <AppADMIN_saveNewCustomerData+0x7a>
{
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*16 ;
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*16 ;
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <AppADMIN_saveNewCustomerData+0x7a>
		
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <AppADMIN_saveNewCustomerData+0x7a>
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     b28:	81 e0       	ldi	r24, 0x01	; 1
}
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	08 95       	ret

00000b30 <AppUSER_getCardData>:
* Parameters (out): pstr_CardData - Structure to save the card's data in.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the Card data Struct
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_getCardData(strCardData_t* pstr_CardData, uint8_t *pu8_dataString)
{
     b30:	ac 01       	movw	r20, r24
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
     b32:	20 e0       	ldi	r18, 0x00	; 0
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	0a c0       	rjmp	.+20     	; 0xb4c <AppUSER_getCardData+0x1c>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     b38:	fb 01       	movw	r30, r22
     b3a:	e9 0f       	add	r30, r25
     b3c:	f1 1d       	adc	r31, r1
     b3e:	80 81       	ld	r24, Z
     b40:	fa 01       	movw	r30, r20
     b42:	e2 0f       	add	r30, r18
     b44:	f1 1d       	adc	r31, r1
     b46:	80 83       	st	Z, r24
		u8_dataIndex++;
     b48:	2f 5f       	subi	r18, 0xFF	; 255
{
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     b4a:	9f 5f       	subi	r25, 0xFF	; 255
     b4c:	9a 30       	cpi	r25, 0x0A	; 10
     b4e:	a0 f3       	brcs	.-24     	; 0xb38 <AppUSER_getCardData+0x8>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
     b50:	fa 01       	movw	r30, r20
     b52:	e2 0f       	add	r30, r18
     b54:	f1 1d       	adc	r31, r1
     b56:	10 82       	st	Z, r1
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
     b58:	20 e0       	ldi	r18, 0x00	; 0
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     b5a:	9b e0       	ldi	r25, 0x0B	; 11
     b5c:	0a c0       	rjmp	.+20     	; 0xb72 <AppUSER_getCardData+0x42>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     b5e:	fb 01       	movw	r30, r22
     b60:	e9 0f       	add	r30, r25
     b62:	f1 1d       	adc	r31, r1
     b64:	80 81       	ld	r24, Z
     b66:	fa 01       	movw	r30, r20
     b68:	e2 0f       	add	r30, r18
     b6a:	f1 1d       	adc	r31, r1
     b6c:	82 87       	std	Z+10, r24	; 0x0a
		u8_dataIndex++;
     b6e:	2f 5f       	subi	r18, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     b70:	9f 5f       	subi	r25, 0xFF	; 255
     b72:	94 31       	cpi	r25, 0x14	; 20
     b74:	a0 f3       	brcs	.-24     	; 0xb5e <AppUSER_getCardData+0x2e>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
     b76:	fa 01       	movw	r30, r20
     b78:	e2 0f       	add	r30, r18
     b7a:	f1 1d       	adc	r31, r1
     b7c:	12 86       	std	Z+10, r1	; 0x0a
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
     b7e:	90 e0       	ldi	r25, 0x00	; 0
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     b80:	85 e1       	ldi	r24, 0x15	; 21
     b82:	0a c0       	rjmp	.+20     	; 0xb98 <AppUSER_getCardData+0x68>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     b84:	fb 01       	movw	r30, r22
     b86:	e8 0f       	add	r30, r24
     b88:	f1 1d       	adc	r31, r1
     b8a:	20 81       	ld	r18, Z
     b8c:	fa 01       	movw	r30, r20
     b8e:	e9 0f       	add	r30, r25
     b90:	f1 1d       	adc	r31, r1
     b92:	24 8b       	std	Z+20, r18	; 0x14
		u8_dataIndex++;
     b94:	9f 5f       	subi	r25, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     b96:	8f 5f       	subi	r24, 0xFF	; 255
     b98:	89 31       	cpi	r24, 0x19	; 25
     b9a:	a0 f3       	brcs	.-24     	; 0xb84 <AppUSER_getCardData+0x54>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_pinNum[u8_dataIndex] = '\0';
     b9c:	fa 01       	movw	r30, r20
     b9e:	e9 0f       	add	r30, r25
     ba0:	f1 1d       	adc	r31, r1
     ba2:	14 8a       	std	Z+20, r1	; 0x14
	return APP_STATUS_ERROR_OK;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	08 95       	ret

00000ba8 <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	c0 52       	subi	r28, 0x20	; 32
     bb2:	d1 40       	sbci	r29, 0x01	; 1
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
     bbe:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <enuCurrentAppStatus>
     bc2:	84 30       	cpi	r24, 0x04	; 4
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <App_update+0x20>
     bc6:	6a c2       	rjmp	.+1236   	; 0x109c <App_update+0x4f4>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
     bc8:	fe 01       	movw	r30, r28
     bca:	31 96       	adiw	r30, 0x01	; 1
     bcc:	8a e0       	ldi	r24, 0x0A	; 10
     bce:	df 01       	movw	r26, r30
     bd0:	1d 92       	st	X+, r1
     bd2:	8a 95       	dec	r24
     bd4:	e9 f7       	brne	.-6      	; 0xbd0 <App_update+0x28>
	static uint8_t u8_passFlag = 0;
	if(gu8_ATMMode == ATM_MODE_ADMIN)
     bd6:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gu8_ATMMode>
     bda:	81 11       	cpse	r24, r1
     bdc:	e7 c0       	rjmp	.+462    	; 0xdac <App_update+0x204>
	{ /**************** PROGRAMMING MODE ****************/
			uint8_t au8_tempPAN[10]={0};
     bde:	3a 96       	adiw	r30, 0x0a	; 10
     be0:	8a e0       	ldi	r24, 0x0A	; 10
     be2:	df 01       	movw	r26, r30
     be4:	1d 92       	st	X+, r1
     be6:	8a 95       	dec	r24
     be8:	e9 f7       	brne	.-6      	; 0xbe4 <App_update+0x3c>
			uint8_t au8_tempBalance[8]={0};
     bea:	e9 5f       	subi	r30, 0xF9	; 249
     bec:	fe 4f       	sbci	r31, 0xFE	; 254
     bee:	88 e0       	ldi	r24, 0x08	; 8
     bf0:	df 01       	movw	r26, r30
     bf2:	98 2f       	mov	r25, r24
     bf4:	1d 92       	st	X+, r1
     bf6:	9a 95       	dec	r25
     bf8:	e9 f7       	brne	.-6      	; 0xbf4 <App_update+0x4c>
			uint8_t au8_Input[2]={0};
     bfa:	c1 5e       	subi	r28, 0xE1	; 225
     bfc:	de 4f       	sbci	r29, 0xFE	; 254
     bfe:	19 82       	std	Y+1, r1	; 0x01
     c00:	18 82       	st	Y, r1
     c02:	cf 51       	subi	r28, 0x1F	; 31
     c04:	d1 40       	sbci	r29, 0x01	; 1
			uint8_t au8_tempPinNum[5]={0};
     c06:	38 96       	adiw	r30, 0x08	; 8
     c08:	95 e0       	ldi	r25, 0x05	; 5
     c0a:	df 01       	movw	r26, r30
     c0c:	1d 92       	st	X+, r1
     c0e:	9a 95       	dec	r25
     c10:	e9 f7       	brne	.-6      	; 0xc0c <App_update+0x64>
			uint8_t au8_tempMaxAmount[8]={0};
     c12:	70 97       	sbiw	r30, 0x10	; 16
     c14:	df 01       	movw	r26, r30
     c16:	1d 92       	st	X+, r1
     c18:	8a 95       	dec	r24
     c1a:	e9 f7       	brne	.-6      	; 0xc16 <App_update+0x6e>
			
			if(u8_passFlag == 0)
     c1c:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <u8_passFlag.2141>
     c20:	81 11       	cpse	r24, r1
     c22:	0a c0       	rjmp	.+20     	; 0xc38 <App_update+0x90>
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
     c24:	ce 01       	movw	r24, r28
     c26:	86 5e       	subi	r24, 0xE6	; 230
     c28:	9e 4f       	sbci	r25, 0xFE	; 254
     c2a:	0e 94 14 05 	call	0xa28	; 0xa28 <AppADMIN_getAtmPIN>
     c2e:	81 30       	cpi	r24, 0x01	; 1
     c30:	09 f0       	breq	.+2      	; 0xc34 <App_update+0x8c>
     c32:	a2 c0       	rjmp	.+324    	; 0xd78 <App_update+0x1d0>
					return APP_STATUS_ERROR_NOK;
				u8_passFlag = 1;
     c34:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <u8_passFlag.2141>
			}
			
			if(Terminal_Out((uint8_t*)"1.Add New Customer\r2.Update Max Amount\r3.Exit\r") != TERMINAL_STATUS_ERROR_OK)
     c38:	82 ed       	ldi	r24, 0xD2	; 210
     c3a:	92 e0       	ldi	r25, 0x02	; 2
     c3c:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	09 f0       	breq	.+2      	; 0xc46 <App_update+0x9e>
     c44:	9b c0       	rjmp	.+310    	; 0xd7c <App_update+0x1d4>
				return APP_STATUS_ERROR_NOK;
				
			AppADMIN_getInput(au8_Input);
     c46:	ce 01       	movw	r24, r28
     c48:	81 5e       	subi	r24, 0xE1	; 225
     c4a:	9e 4f       	sbci	r25, 0xFE	; 254
     c4c:	0e 94 6d 04 	call	0x8da	; 0x8da <AppADMIN_getInput>
			if(au8_Input[0] == '1')//--------- New Customer OPTION -----------//
     c50:	c1 5e       	subi	r28, 0xE1	; 225
     c52:	de 4f       	sbci	r29, 0xFE	; 254
     c54:	88 81       	ld	r24, Y
     c56:	cf 51       	subi	r28, 0x1F	; 31
     c58:	d1 40       	sbci	r29, 0x01	; 1
     c5a:	81 33       	cpi	r24, 0x31	; 49
     c5c:	b9 f5       	brne	.+110    	; 0xccc <App_update+0x124>
			{
				/* Get the Customer's Primary Account Number from the ADMIN Terminal */
				if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     c5e:	ce 01       	movw	r24, r28
     c60:	0b 96       	adiw	r24, 0x0b	; 11
     c62:	0e 94 c2 04 	call	0x984	; 0x984 <AppADMIN_getCustomerPAN>
     c66:	81 30       	cpi	r24, 0x01	; 1
     c68:	09 f0       	breq	.+2      	; 0xc6c <App_update+0xc4>
     c6a:	8a c0       	rjmp	.+276    	; 0xd80 <App_update+0x1d8>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
     c6c:	67 e0       	ldi	r22, 0x07	; 7
     c6e:	74 e0       	ldi	r23, 0x04	; 4
     c70:	ce 01       	movw	r24, r28
     c72:	0b 96       	adiw	r24, 0x0b	; 11
     c74:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <stringCopy>
				
				/* Get the Customer's Balance from the ADMIN Terminal */
				if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
     c78:	ce 01       	movw	r24, r28
     c7a:	8e 5e       	subi	r24, 0xEE	; 238
     c7c:	9e 4f       	sbci	r25, 0xFE	; 254
     c7e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <AppADMIN_getCustomerBalance>
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	09 f0       	breq	.+2      	; 0xc88 <App_update+0xe0>
     c86:	7e c0       	rjmp	.+252    	; 0xd84 <App_update+0x1dc>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
     c88:	61 e1       	ldi	r22, 0x11	; 17
     c8a:	74 e0       	ldi	r23, 0x04	; 4
     c8c:	ce 01       	movw	r24, r28
     c8e:	8e 5e       	subi	r24, 0xEE	; 238
     c90:	9e 4f       	sbci	r25, 0xFE	; 254
     c92:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <stringCopy>
				
				if(AppADMIN_saveNewCustomerData() != APP_STATUS_ERROR_OK)
     c96:	0e 94 58 05 	call	0xab0	; 0xab0 <AppADMIN_saveNewCustomerData>
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	09 f0       	breq	.+2      	; 0xca0 <App_update+0xf8>
     c9e:	74 c0       	rjmp	.+232    	; 0xd88 <App_update+0x1e0>
					return APP_STATUS_ERROR_NOK;
				EmptyString(au8_Input);
     ca0:	ce 01       	movw	r24, r28
     ca2:	81 5e       	subi	r24, 0xE1	; 225
     ca4:	9e 4f       	sbci	r25, 0xFE	; 254
     ca6:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <EmptyString>
				if(gu8_registeredAccNum == 1)
     caa:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <gu8_registeredAccNum>
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <App_update+0x10c>
     cb2:	60 c0       	rjmp	.+192    	; 0xd74 <App_update+0x1cc>
				{
					gu8_initData = ATM_DB_FLAG_SET_VAL;
     cb4:	8a ea       	ldi	r24, 0xAA	; 170
     cb6:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <gu8_initData>
					if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
     cba:	6a ea       	ldi	r22, 0xAA	; 170
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 1c 09 	call	0x1238	; 0x1238 <Eeprom_24_writeByte>
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	09 f0       	breq	.+2      	; 0xcca <App_update+0x122>
     cc8:	61 c0       	rjmp	.+194    	; 0xd8c <App_update+0x1e4>
     cca:	54 c0       	rjmp	.+168    	; 0xd74 <App_update+0x1cc>
					return APP_STATUS_ERROR_NOK;
				}

			}else if(au8_Input[0] == '2')//--------- Max Amount OPTION -----------//
     ccc:	82 33       	cpi	r24, 0x32	; 50
     cce:	f1 f4       	brne	.+60     	; 0xd0c <App_update+0x164>
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
     cd0:	ce 01       	movw	r24, r28
     cd2:	86 5f       	subi	r24, 0xF6	; 246
     cd4:	9e 4f       	sbci	r25, 0xFE	; 254
     cd6:	0e 94 96 04 	call	0x92c	; 0x92c <AppADMIN_getnewMaxAmount>
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
     cda:	ce 01       	movw	r24, r28
     cdc:	86 5f       	subi	r24, 0xF6	; 246
     cde:	9e 4f       	sbci	r25, 0xFE	; 254
     ce0:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <stringLength>
     ce4:	48 2f       	mov	r20, r24
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	be 01       	movw	r22, r28
     cea:	66 5f       	subi	r22, 0xF6	; 246
     cec:	7e 4f       	sbci	r23, 0xFE	; 254
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 0b 0a 	call	0x1416	; 0x1416 <Eeprom_24_writePacket>
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	09 f0       	breq	.+2      	; 0xcfc <App_update+0x154>
     cfa:	4a c0       	rjmp	.+148    	; 0xd90 <App_update+0x1e8>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempMaxAmount, gau8_maxAmount);
     cfc:	68 ef       	ldi	r22, 0xF8	; 248
     cfe:	73 e0       	ldi	r23, 0x03	; 3
     d00:	ce 01       	movw	r24, r28
     d02:	86 5f       	subi	r24, 0xF6	; 246
     d04:	9e 4f       	sbci	r25, 0xFE	; 254
     d06:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <stringCopy>
     d0a:	34 c0       	rjmp	.+104    	; 0xd74 <App_update+0x1cc>
					
			}else if(au8_Input[0] == '3')//--------- EXIT OPTION -----------//
     d0c:	83 33       	cpi	r24, 0x33	; 51
     d0e:	91 f5       	brne	.+100    	; 0xd74 <App_update+0x1cc>
			{
				if(gu8_initData == ATM_DB_FLAG_SET_VAL)
     d10:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <gu8_initData>
     d14:	8a 3a       	cpi	r24, 0xAA	; 170
     d16:	31 f5       	brne	.+76     	; 0xd64 <App_update+0x1bc>
				{
					u8_passFlag = 0;
     d18:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <u8_passFlag.2141>
					gu8_ATMMode = ATM_MODE_USER;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu8_ATMMode>
					Lcd_clear();
     d22:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Lcd_clear>
					if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     d26:	8d e2       	ldi	r24, 0x2D	; 45
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	89 f5       	brne	.+98     	; 0xd94 <App_update+0x1ec>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	69 f5       	brne	.+90     	; 0xd98 <App_update+0x1f0>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
     d3e:	80 e1       	ldi	r24, 0x10	; 16
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	49 f5       	brne	.+82     	; 0xd9c <App_update+0x1f4>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     d50:	81 30       	cpi	r24, 0x01	; 1
     d52:	31 f5       	brne	.+76     	; 0xda0 <App_update+0x1f8>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
     d54:	8e e1       	ldi	r24, 0x1E	; 30
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	11 f1       	breq	.+68     	; 0xda4 <App_update+0x1fc>
						return APP_STATUS_ERROR_NOK;
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	9d c1       	rjmp	.+826    	; 0x109e <App_update+0x4f6>
					
					return APP_STATUS_ERROR_OK;
				}else
				{
					if(Terminal_Out((uint8_t*)"Data Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	93 e0       	ldi	r25, 0x03	; 3
     d68:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	e1 f0       	breq	.+56     	; 0xda8 <App_update+0x200>
						return APP_STATUS_ERROR_NOK;
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	95 c1       	rjmp	.+810    	; 0x109e <App_update+0x4f6>
				}
			}
	/****************************************************************/
	}
	
	return APP_STATUS_ERROR_OK;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	93 c1       	rjmp	.+806    	; 0x109e <App_update+0x4f6>
			
			if(u8_passFlag == 0)
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	91 c1       	rjmp	.+802    	; 0x109e <App_update+0x4f6>
				u8_passFlag = 1;
			}
			
			if(Terminal_Out((uint8_t*)"1.Add New Customer\r2.Update Max Amount\r3.Exit\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	8f c1       	rjmp	.+798    	; 0x109e <App_update+0x4f6>
			AppADMIN_getInput(au8_Input);
			if(au8_Input[0] == '1')//--------- New Customer OPTION -----------//
			{
				/* Get the Customer's Primary Account Number from the ADMIN Terminal */
				if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	8d c1       	rjmp	.+794    	; 0x109e <App_update+0x4f6>
				stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
				
				/* Get the Customer's Balance from the ADMIN Terminal */
				if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	8b c1       	rjmp	.+790    	; 0x109e <App_update+0x4f6>
				stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
				
				if(AppADMIN_saveNewCustomerData() != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	89 c1       	rjmp	.+786    	; 0x109e <App_update+0x4f6>
				EmptyString(au8_Input);
				if(gu8_registeredAccNum == 1)
				{
					gu8_initData = ATM_DB_FLAG_SET_VAL;
					if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	87 c1       	rjmp	.+782    	; 0x109e <App_update+0x4f6>

			}else if(au8_Input[0] == '2')//--------- Max Amount OPTION -----------//
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	85 c1       	rjmp	.+778    	; 0x109e <App_update+0x4f6>
				{
					u8_passFlag = 0;
					gu8_ATMMode = ATM_MODE_USER;
					Lcd_clear();
					if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	83 c1       	rjmp	.+774    	; 0x109e <App_update+0x4f6>
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	81 c1       	rjmp	.+770    	; 0x109e <App_update+0x4f6>
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	7f c1       	rjmp	.+766    	; 0x109e <App_update+0x4f6>
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	7d c1       	rjmp	.+762    	; 0x109e <App_update+0x4f6>
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					
					return APP_STATUS_ERROR_OK;
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	7b c1       	rjmp	.+758    	; 0x109e <App_update+0x4f6>
				}else
				{
					if(Terminal_Out((uint8_t*)"Data Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					return APP_STATUS_ERROR_OK;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	79 c1       	rjmp	.+754    	; 0x109e <App_update+0x4f6>
	{							/************* User Mode **************/
		/********************************************************************************************/
		/************************************ ADMIN ENTERED ****************************************/
		/********************************************************************************************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
     dac:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <gu8_ADMIN_Request>
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	31 f4       	brne	.+12     	; 0xdc0 <App_update+0x218>
     db4:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <gu8_USER_Mode_State>
     db8:	81 11       	cpse	r24, r1
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <App_update+0x218>
			{
				gu8_ATMMode = ATM_MODE_ADMIN;
     dbc:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <gu8_ATMMode>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
     dc0:	ce 01       	movw	r24, r28
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	0e 94 3c 04 	call	0x878	; 0x878 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	f1 f5       	brne	.+124    	; 0xe48 <App_update+0x2a0>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
     dcc:	6b ed       	ldi	r22, 0xDB	; 219
     dce:	73 e0       	ldi	r23, 0x03	; 3
     dd0:	ce 01       	movw	r24, r28
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	0e 94 7f 17 	call	0x2efe	; 0x2efe <stringCompare>
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	d9 f5       	brne	.+118    	; 0xe52 <App_update+0x2aa>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
     ddc:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <gu8_USER_Mode_State>
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	51 f4       	brne	.+20     	; 0xdf8 <App_update+0x250>
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
     de4:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <gu8_ADMIN_Request>
						if(Terminal_Out((uint8_t*)"ATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
     de8:	8e e3       	ldi	r24, 0x3E	; 62
     dea:	93 e0       	ldi	r25, 0x03	; 3
     dec:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	09 f0       	breq	.+2      	; 0xdf6 <App_update+0x24e>
     df4:	3d c1       	rjmp	.+634    	; 0x1070 <App_update+0x4c8>
     df6:	2d c0       	rjmp	.+90     	; 0xe52 <App_update+0x2aa>
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The ATM is not used by User */
					{
						gu8_ATMMode = ATM_MODE_ADMIN;
     df8:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <gu8_ATMMode>
						Lcd_clear();
     dfc:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Lcd_clear>
						if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	09 f0       	breq	.+2      	; 0xe0e <App_update+0x266>
     e0c:	33 c1       	rjmp	.+614    	; 0x1074 <App_update+0x4cc>
							return APP_STATUS_ERROR_OK;
						if(Lcd_printString((uint8_t*)"*******ATM******") != LCD_STATUS_ERROR_OK)
     e0e:	8c ed       	ldi	r24, 0xDC	; 220
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	09 f0       	breq	.+2      	; 0xe1c <App_update+0x274>
     e1a:	2e c1       	rjmp	.+604    	; 0x1078 <App_update+0x4d0>
							return APP_STATUS_ERROR_NOK;
						if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	09 f0       	breq	.+2      	; 0xe28 <App_update+0x280>
     e26:	2a c1       	rjmp	.+596    	; 0x107c <App_update+0x4d4>
							return APP_STATUS_ERROR_OK;
						if(Lcd_printString((uint8_t*)"*****LOCKED*****") != LCD_STATUS_ERROR_OK)
     e28:	8d ee       	ldi	r24, 0xED	; 237
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	09 f0       	breq	.+2      	; 0xe36 <App_update+0x28e>
     e34:	25 c1       	rjmp	.+586    	; 0x1080 <App_update+0x4d8>
							return APP_STATUS_ERROR_NOK;
						if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     e36:	8e ef       	ldi	r24, 0xFE	; 254
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <Terminal_Out>
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	09 f4       	brne	.+2      	; 0xe44 <App_update+0x29c>
     e42:	20 c1       	rjmp	.+576    	; 0x1084 <App_update+0x4dc>
							return APP_STATUS_ERROR_NOK;
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	2b c1       	rjmp	.+598    	; 0x109e <App_update+0x4f6>
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	19 f0       	breq	.+6      	; 0xe52 <App_update+0x2aa>
     e4c:	86 30       	cpi	r24, 0x06	; 6
     e4e:	09 f0       	breq	.+2      	; 0xe52 <App_update+0x2aa>
     e50:	1b c1       	rjmp	.+566    	; 0x1088 <App_update+0x4e0>
				return APP_STATUS_ERROR_NOK;
			/****************************************************************/
			/********************** Getting Input from User ************************/
			uint8_t au8_data=0;
     e52:	ce 5e       	subi	r28, 0xEE	; 238
     e54:	de 4f       	sbci	r29, 0xFE	; 254
     e56:	18 82       	st	Y, r1
     e58:	c2 51       	subi	r28, 0x12	; 18
     e5a:	d1 40       	sbci	r29, 0x01	; 1
			enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&au8_data);
     e5c:	ce 01       	movw	r24, r28
     e5e:	8e 5e       	subi	r24, 0xEE	; 238
     e60:	9e 4f       	sbci	r25, 0xFE	; 254
     e62:	0e 94 b1 0b 	call	0x1762	; 0x1762 <Keypad_readKey>
			if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
     e66:	86 30       	cpi	r24, 0x06	; 6
     e68:	09 f0       	breq	.+2      	; 0xe6c <App_update+0x2c4>
     e6a:	e8 c0       	rjmp	.+464    	; 0x103c <App_update+0x494>
			{
			/********************************************************************************************/
			/************************************ KEYPAD PRESSED ****************************************/
			/********************************************************************************************/
				/********* Insert Card Chosen ********/
				if(au8_data == '1') 
     e6c:	ce 5e       	subi	r28, 0xEE	; 238
     e6e:	de 4f       	sbci	r29, 0xFE	; 254
     e70:	88 81       	ld	r24, Y
     e72:	c2 51       	subi	r28, 0x12	; 18
     e74:	d1 40       	sbci	r29, 0x01	; 1
     e76:	81 33       	cpi	r24, 0x31	; 49
     e78:	09 f0       	breq	.+2      	; 0xe7c <App_update+0x2d4>
     e7a:	95 c0       	rjmp	.+298    	; 0xfa6 <App_update+0x3fe>
				{
					gu8_USER_Mode_State = USER_BUSY;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <gu8_USER_Mode_State>
					uint8_t u8_buttonVal = PIN_LOW;
     e82:	c6 5f       	subi	r28, 0xF6	; 246
     e84:	de 4f       	sbci	r29, 0xFE	; 254
     e86:	18 82       	st	Y, r1
     e88:	ca 50       	subi	r28, 0x0A	; 10
     e8a:	d1 40       	sbci	r29, 0x01	; 1
					uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     e8c:	fe 01       	movw	r30, r28
     e8e:	3b 96       	adiw	r30, 0x0b	; 11
     e90:	8f ef       	ldi	r24, 0xFF	; 255
     e92:	df 01       	movw	r26, r30
     e94:	1d 92       	st	X+, r1
     e96:	8a 95       	dec	r24
     e98:	e9 f7       	brne	.-6      	; 0xe94 <App_update+0x2ec>
					Lcd_clear();
     e9a:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Lcd_clear>
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	09 f0       	breq	.+2      	; 0xeac <App_update+0x304>
     eaa:	6b c0       	rjmp	.+214    	; 0xf82 <App_update+0x3da>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"Waiting for Card") != LCD_STATUS_ERROR_OK)
     eac:	82 e8       	ldi	r24, 0x82	; 130
     eae:	93 e0       	ldi	r25, 0x03	; 3
     eb0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	09 f0       	breq	.+2      	; 0xeba <App_update+0x312>
     eb8:	66 c0       	rjmp	.+204    	; 0xf86 <App_update+0x3de>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	09 f0       	breq	.+2      	; 0xec6 <App_update+0x31e>
     ec4:	62 c0       	rjmp	.+196    	; 0xf8a <App_update+0x3e2>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"Press Button ;)") != LCD_STATUS_ERROR_OK)
     ec6:	83 e9       	ldi	r24, 0x93	; 147
     ec8:	93 e0       	ldi	r25, 0x03	; 3
     eca:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	09 f0       	breq	.+2      	; 0xed4 <App_update+0x32c>
     ed2:	5d c0       	rjmp	.+186    	; 0xf8e <App_update+0x3e6>
     ed4:	0f c0       	rjmp	.+30     	; 0xef4 <App_update+0x34c>
						return APP_STATUS_ERROR_NOK;
					while(u8_buttonVal == PIN_LOW)
					{
						if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	0e 94 8b 08 	call	0x1116	; 0x1116 <Button_updateState>
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	09 f0       	breq	.+2      	; 0xee2 <App_update+0x33a>
     ee0:	58 c0       	rjmp	.+176    	; 0xf92 <App_update+0x3ea>
							return APP_STATUS_ERROR_NOK;
						if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
     ee2:	be 01       	movw	r22, r28
     ee4:	66 5f       	subi	r22, 0xF6	; 246
     ee6:	7e 4f       	sbci	r23, 0xFE	; 254
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	0e 94 79 08 	call	0x10f2	; 0x10f2 <Button_getState>
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	09 f0       	breq	.+2      	; 0xef4 <App_update+0x34c>
     ef2:	51 c0       	rjmp	.+162    	; 0xf96 <App_update+0x3ee>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"Press Button ;)") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					while(u8_buttonVal == PIN_LOW)
     ef4:	c6 5f       	subi	r28, 0xF6	; 246
     ef6:	de 4f       	sbci	r29, 0xFE	; 254
     ef8:	88 81       	ld	r24, Y
     efa:	ca 50       	subi	r28, 0x0A	; 10
     efc:	d1 40       	sbci	r29, 0x01	; 1
     efe:	88 23       	and	r24, r24
     f00:	51 f3       	breq	.-44     	; 0xed6 <App_update+0x32e>
						if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
						if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
					}
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	82 e1       	ldi	r24, 0x12	; 18
     f06:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
					Delay_ms(1);
     f0a:	21 e0       	ldi	r18, 0x01	; 1
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <Delay_ms>
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	82 e1       	ldi	r24, 0x12	; 18
     f22:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
					while (au8_inputString[0] != '#')
     f26:	08 c0       	rjmp	.+16     	; 0xf38 <App_update+0x390>
					{
						if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
     f28:	6c e1       	ldi	r22, 0x1C	; 28
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	ce 01       	movw	r24, r28
     f2e:	0b 96       	adiw	r24, 0x0b	; 11
     f30:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <Spi_SlaveReceivePacket>
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	89 f5       	brne	.+98     	; 0xf9a <App_update+0x3f2>
							return APP_STATUS_ERROR_NOK;
					}
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
					Delay_ms(1);
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
					while (au8_inputString[0] != '#')
     f38:	8b 85       	ldd	r24, Y+11	; 0x0b
     f3a:	83 32       	cpi	r24, 0x23	; 35
     f3c:	a9 f7       	brne	.-22     	; 0xf28 <App_update+0x380>
					{
						if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
					}
					
					if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
     f3e:	be 01       	movw	r22, r28
     f40:	65 5f       	subi	r22, 0xF5	; 245
     f42:	7f 4f       	sbci	r23, 0xFF	; 255
     f44:	89 e1       	ldi	r24, 0x19	; 25
     f46:	94 e0       	ldi	r25, 0x04	; 4
     f48:	0e 94 98 05 	call	0xb30	; 0xb30 <AppUSER_getCardData>
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	39 f5       	brne	.+78     	; 0xf9e <App_update+0x3f6>
						return APP_STATUS_ERROR_NOK;
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	82 e1       	ldi	r24, 0x12	; 18
     f54:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
					Delay_ms(1);
     f58:	21 e0       	ldi	r18, 0x01	; 1
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	40 e0       	ldi	r20, 0x00	; 0
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <Delay_ms>
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     f6c:	61 e0       	ldi	r22, 0x01	; 1
     f6e:	82 e1       	ldi	r24, 0x12	; 18
     f70:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
					if(AppUSER_startProcess(&gstr_userCardData) != APP_STATUS_ERROR_OK)
     f74:	89 e1       	ldi	r24, 0x19	; 25
     f76:	94 e0       	ldi	r25, 0x04	; 4
     f78:	0e 94 06 04 	call	0x80c	; 0x80c <AppUSER_startProcess>
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	89 f4       	brne	.+34     	; 0xfa2 <App_update+0x3fa>
     f80:	75 c0       	rjmp	.+234    	; 0x106c <App_update+0x4c4>
					gu8_USER_Mode_State = USER_BUSY;
					uint8_t u8_buttonVal = PIN_LOW;
					uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
					Lcd_clear();
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	8c c0       	rjmp	.+280    	; 0x109e <App_update+0x4f6>
					if(Lcd_printString((uint8_t*)"Waiting for Card") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	8a c0       	rjmp	.+276    	; 0x109e <App_update+0x4f6>
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	88 c0       	rjmp	.+272    	; 0x109e <App_update+0x4f6>
					if(Lcd_printString((uint8_t*)"Press Button ;)") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	86 c0       	rjmp	.+268    	; 0x109e <App_update+0x4f6>
					while(u8_buttonVal == PIN_LOW)
					{
						if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	84 c0       	rjmp	.+264    	; 0x109e <App_update+0x4f6>
						if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	82 c0       	rjmp	.+260    	; 0x109e <App_update+0x4f6>
					Delay_ms(1);
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
					while (au8_inputString[0] != '#')
					{
						if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	80 c0       	rjmp	.+256    	; 0x109e <App_update+0x4f6>
					}
					
					if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	7e c0       	rjmp	.+252    	; 0x109e <App_update+0x4f6>
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
					Delay_ms(1);
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
					if(AppUSER_startProcess(&gstr_userCardData) != APP_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	7c c0       	rjmp	.+248    	; 0x109e <App_update+0x4f6>
			/********************************************************************************************/
			/********************************************************************************************/
			/********************************************************************************************/
			/******* Display Temp Chosen *******/
				}else if(au8_data == '2')
     fa6:	82 33       	cpi	r24, 0x32	; 50
     fa8:	59 f5       	brne	.+86     	; 0x1000 <App_update+0x458>
				{
					uint8_t u8_currentTemp=0;
     faa:	1b 86       	std	Y+11, r1	; 0x0b
					gu8_displayFlag = DISPLAY_TEMP;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <gu8_displayFlag>
					Lcd_clear();
     fb2:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Lcd_clear>
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	e9 f4       	brne	.+58     	; 0xffc <App_update+0x454>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
     fc2:	83 ea       	ldi	r24, 0xA3	; 163
     fc4:	93 e0       	ldi	r25, 0x03	; 3
     fc6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	b9 f4       	brne	.+46     	; 0xffc <App_update+0x454>
						return APP_STATUS_ERROR_NOK;
					if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
     fce:	ce 01       	movw	r24, r28
     fd0:	0b 96       	adiw	r24, 0x0b	; 11
     fd2:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LM35_readTemp>
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	59 f4       	brne	.+22     	; 0xff0 <App_update+0x448>
					{
						if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	61 f4       	brne	.+24     	; 0xffc <App_update+0x454>
						return APP_STATUS_ERROR_NOK;
						if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
     fe4:	8b 85       	ldd	r24, Y+11	; 0x0b
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <Lcd_printDecimal>
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	31 f4       	brne	.+12     	; 0xffc <App_update+0x454>
						return APP_STATUS_ERROR_NOK;
					}
					if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
     ff0:	84 eb       	ldi	r24, 0xB4	; 180
     ff2:	93 e0       	ldi	r25, 0x03	; 3
     ff4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	c1 f1       	breq	.+112    	; 0x106c <App_update+0x4c4>
				{
					uint8_t u8_currentTemp=0;
					gu8_displayFlag = DISPLAY_TEMP;
					Lcd_clear();
					if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	4f c0       	rjmp	.+158    	; 0x109e <App_update+0x4f6>
						if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					}
					if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
				}else if(au8_data == '-')
    1000:	8d 32       	cpi	r24, 0x2D	; 45
    1002:	a1 f5       	brne	.+104    	; 0x106c <App_update+0x4c4>
				{
					gu8_displayFlag = 0;
    1004:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <gu8_displayFlag>
					Lcd_clear();
    1008:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Lcd_clear>
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	d1 f5       	brne	.+116    	; 0x108c <App_update+0x4e4>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
    1018:	80 e1       	ldi	r24, 0x10	; 16
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	b1 f5       	brne	.+108    	; 0x1090 <App_update+0x4e8>
						return APP_STATUS_ERROR_NOK;
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	99 f5       	brne	.+102    	; 0x1094 <App_update+0x4ec>
						return APP_STATUS_ERROR_OK;
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
    102e:	8e e1       	ldi	r24, 0x1E	; 30
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	79 f5       	brne	.+94     	; 0x1098 <App_update+0x4f0>
    103a:	18 c0       	rjmp	.+48     	; 0x106c <App_update+0x4c4>
						return APP_STATUS_ERROR_NOK;
				}
			}else if(gu8_displayFlag == DISPLAY_TEMP)
    103c:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <gu8_displayFlag>
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	a1 f4       	brne	.+40     	; 0x106c <App_update+0x4c4>
			{
				uint8_t u8_currentTemp=0;
    1044:	1b 86       	std	Y+11, r1	; 0x0b
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
    1046:	ce 01       	movw	r24, r28
    1048:	0b 96       	adiw	r24, 0x0b	; 11
    104a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LM35_readTemp>
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	69 f4       	brne	.+26     	; 0x106c <App_update+0x4c4>
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Lcd_setCursor>
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	31 f4       	brne	.+12     	; 0x1068 <App_update+0x4c0>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
    105c:	8b 85       	ldd	r24, Y+11	; 0x0b
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <Lcd_printDecimal>
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	11 f0       	breq	.+4      	; 0x106c <App_update+0x4c4>
			{
				uint8_t u8_currentTemp=0;
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	19 c0       	rjmp	.+50     	; 0x109e <App_update+0x4f6>
				}
			}
	/****************************************************************/
	}
	
	return APP_STATUS_ERROR_OK;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	17 c0       	rjmp	.+46     	; 0x109e <App_update+0x4f6>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"ATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	15 c0       	rjmp	.+42     	; 0x109e <App_update+0x4f6>
					}else /* User Mode is Idle ==> The ATM is not used by User */
					{
						gu8_ATMMode = ATM_MODE_ADMIN;
						Lcd_clear();
						if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_OK;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	13 c0       	rjmp	.+38     	; 0x109e <App_update+0x4f6>
						if(Lcd_printString((uint8_t*)"*******ATM******") != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	11 c0       	rjmp	.+34     	; 0x109e <App_update+0x4f6>
						if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_OK;
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	0f c0       	rjmp	.+30     	; 0x109e <App_update+0x4f6>
						if(Lcd_printString((uint8_t*)"*****LOCKED*****") != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	0d c0       	rjmp	.+26     	; 0x109e <App_update+0x4f6>
						if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
						return APP_STATUS_ERROR_OK;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	0b c0       	rjmp	.+22     	; 0x109e <App_update+0x4f6>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	09 c0       	rjmp	.+18     	; 0x109e <App_update+0x4f6>
				}else if(au8_data == '-')
				{
					gu8_displayFlag = 0;
					Lcd_clear();
					if(Lcd_setCursor(0,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	07 c0       	rjmp	.+14     	; 0x109e <App_update+0x4f6>
					if(Lcd_printString((uint8_t*)"1.Insert Card") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	05 c0       	rjmp	.+10     	; 0x109e <App_update+0x4f6>
					if(Lcd_setCursor(1,0) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_OK;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	03 c0       	rjmp	.+6      	; 0x109e <App_update+0x4f6>
					if(Lcd_printString((uint8_t*)"2.Display Temp") != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	01 c0       	rjmp	.+2      	; 0x109e <App_update+0x4f6>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
    109c:	85 e0       	ldi	r24, 0x05	; 5
			}
	/****************************************************************/
	}
	
	return APP_STATUS_ERROR_OK;
}
    109e:	c0 5e       	subi	r28, 0xE0	; 224
    10a0:	de 4f       	sbci	r29, 0xFE	; 254
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	08 95       	ret

000010b2 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
    10b2:	0e 94 50 00 	call	0xa0	; 0xa0 <App_init>
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	39 f4       	brne	.+14     	; 0x10c8 <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
    10ba:	8f b7       	in	r24, 0x3f	; 63
    10bc:	80 68       	ori	r24, 0x80	; 128
    10be:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
    10c0:	0e 94 d4 05 	call	0xba8	; 0xba8 <App_update>
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	e1 f3       	breq	.-8      	; 0x10c0 <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
	}
}
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	08 95       	ret

000010cc <Button_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button module is already initialized */
	if (genu_BttnModuleState == BTTN_STATUS_INIT)
    10cc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <genu_BttnModuleState>
    10d0:	85 30       	cpi	r24, 0x05	; 5
    10d2:	71 f0       	breq	.+28     	; 0x10f0 <Button_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    10d4:	8a e8       	ldi	r24, 0x8A	; 138
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 46 10 	call	0x208c	; 0x208c <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	11 f0       	breq	.+4      	; 0x10e4 <Button_init+0x18>
    10e0:	87 30       	cpi	r24, 0x07	; 7
    10e2:	29 f4       	brne	.+10     	; 0x10ee <Button_init+0x22>
		return BTTN_STATUS_ERROR_NOK;
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
    10e4:	85 e0       	ldi	r24, 0x05	; 5
    10e6:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <genu_BttnModuleState>
	return BTTN_STATUS_ERROR_OK;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return BTTN_STATUS_ERROR_NOK;
    10ee:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
	return BTTN_STATUS_ERROR_OK;
}
    10f0:	08 95       	ret

000010f2 <Button_getState>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
    10f2:	82 30       	cpi	r24, 0x02	; 2
    10f4:	60 f4       	brcc	.+24     	; 0x110e <Button_getState+0x1c>
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
    10f6:	61 15       	cp	r22, r1
    10f8:	71 05       	cpc	r23, r1
    10fa:	59 f0       	breq	.+22     	; 0x1112 <Button_getState+0x20>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
    10fc:	e8 2f       	mov	r30, r24
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	eb 5c       	subi	r30, 0xCB	; 203
    1102:	fb 4f       	sbci	r31, 0xFB	; 251
    1104:	80 81       	ld	r24, Z
    1106:	fb 01       	movw	r30, r22
    1108:	80 83       	st	Z, r24
	return BTTN_STATUS_ERROR_OK;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
	{
		return BTTN_STATUS_ERROR_NULL;
    1112:	83 e0       	ldi	r24, 0x03	; 3
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
	return BTTN_STATUS_ERROR_OK;
}
    1114:	08 95       	ret

00001116 <Button_updateState>:
* Parameters (out): None
* Return value: enuBttn_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to update the state of the button (Pressed or Released) by reading the Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuBttn_Status_t Button_updateState(uint8_t u8_bttnID)
{
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	1f 92       	push	r1
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
    1124:	82 30       	cpi	r24, 0x02	; 2
    1126:	08 f0       	brcs	.+2      	; 0x112a <Button_updateState+0x14>
    1128:	58 c0       	rjmp	.+176    	; 0x11da <Button_updateState+0xc4>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
    112a:	19 82       	std	Y+1, r1	; 0x01
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
    112c:	08 2f       	mov	r16, r24
    112e:	10 e0       	ldi	r17, 0x00	; 0
    1130:	f8 01       	movw	r30, r16
    1132:	e8 59       	subi	r30, 0x98	; 152
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	be 01       	movw	r22, r28
    1138:	6f 5f       	subi	r22, 0xFF	; 255
    113a:	7f 4f       	sbci	r23, 0xFF	; 255
    113c:	80 81       	ld	r24, Z
    113e:	0e 94 25 12 	call	0x244a	; 0x244a <Dio_readPin>
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	09 f0       	breq	.+2      	; 0x1148 <Button_updateState+0x32>
    1146:	4b c0       	rjmp	.+150    	; 0x11de <Button_updateState+0xc8>
		return BTTN_STATUS_ERROR_NOK;
	if(u8_valueTemp == PIN_HIGH)
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	09 f5       	brne	.+66     	; 0x1190 <Button_updateState+0x7a>
    114e:	04 c0       	rjmp	.+8      	; 0x1158 <Button_updateState+0x42>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	a1 1d       	adc	r26, r1
    1154:	b1 1d       	adc	r27, r1
    1156:	03 c0       	rjmp	.+6      	; 0x115e <Button_updateState+0x48>
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	dc 01       	movw	r26, r24
    115e:	88 3b       	cpi	r24, 0xB8	; 184
    1160:	2b e0       	ldi	r18, 0x0B	; 11
    1162:	92 07       	cpc	r25, r18
    1164:	a1 05       	cpc	r26, r1
    1166:	b1 05       	cpc	r27, r1
    1168:	98 f3       	brcs	.-26     	; 0x1150 <Button_updateState+0x3a>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    116a:	be 01       	movw	r22, r28
    116c:	6f 5f       	subi	r22, 0xFF	; 255
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	f8 01       	movw	r30, r16
    1172:	e8 59       	subi	r30, 0x98	; 152
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	80 81       	ld	r24, Z
    1178:	0e 94 25 12 	call	0x244a	; 0x244a <Dio_readPin>
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	89 f5       	brne	.+98     	; 0x11e2 <Button_updateState+0xcc>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_HIGH)
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	81 f5       	brne	.+96     	; 0x11e6 <Button_updateState+0xd0>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
    1186:	f8 01       	movw	r30, r16
    1188:	eb 5c       	subi	r30, 0xCB	; 203
    118a:	fb 4f       	sbci	r31, 0xFB	; 251
    118c:	80 83       	st	Z, r24
    118e:	30 c0       	rjmp	.+96     	; 0x11f0 <Button_updateState+0xda>
	}else if (u8_valueTemp == PIN_LOW)
    1190:	88 23       	and	r24, r24
    1192:	31 f0       	breq	.+12     	; 0x11a0 <Button_updateState+0x8a>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	2c c0       	rjmp	.+88     	; 0x11f0 <Button_updateState+0xda>
		if(u8_valueTemp == PIN_HIGH)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
	}else if (u8_valueTemp == PIN_LOW)
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	a1 1d       	adc	r26, r1
    119c:	b1 1d       	adc	r27, r1
    119e:	03 c0       	rjmp	.+6      	; 0x11a6 <Button_updateState+0x90>
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	dc 01       	movw	r26, r24
    11a6:	88 3b       	cpi	r24, 0xB8	; 184
    11a8:	2b e0       	ldi	r18, 0x0B	; 11
    11aa:	92 07       	cpc	r25, r18
    11ac:	a1 05       	cpc	r26, r1
    11ae:	b1 05       	cpc	r27, r1
    11b0:	98 f3       	brcs	.-26     	; 0x1198 <Button_updateState+0x82>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    11b2:	be 01       	movw	r22, r28
    11b4:	6f 5f       	subi	r22, 0xFF	; 255
    11b6:	7f 4f       	sbci	r23, 0xFF	; 255
    11b8:	f8 01       	movw	r30, r16
    11ba:	e8 59       	subi	r30, 0x98	; 152
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	80 81       	ld	r24, Z
    11c0:	0e 94 25 12 	call	0x244a	; 0x244a <Dio_readPin>
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	89 f4       	brne	.+34     	; 0x11ea <Button_updateState+0xd4>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	81 11       	cpse	r24, r1
    11cc:	10 c0       	rjmp	.+32     	; 0x11ee <Button_updateState+0xd8>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
    11ce:	f8 01       	movw	r30, r16
    11d0:	eb 5c       	subi	r30, 0xCB	; 203
    11d2:	fb 4f       	sbci	r31, 0xFB	; 251
    11d4:	10 82       	st	Z, r1
	}
	return BTTN_STATUS_ERROR_OK;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	0b c0       	rjmp	.+22     	; 0x11f0 <Button_updateState+0xda>
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
		return BTTN_STATUS_ERROR_ID_INVALID;
    11da:	82 e0       	ldi	r24, 0x02	; 2
    11dc:	09 c0       	rjmp	.+18     	; 0x11f0 <Button_updateState+0xda>
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
		return BTTN_STATUS_ERROR_NOK;
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	07 c0       	rjmp	.+14     	; 0x11f0 <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	05 c0       	rjmp	.+10     	; 0x11f0 <Button_updateState+0xda>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	03 c0       	rjmp	.+6      	; 0x11f0 <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	01 c0       	rjmp	.+2      	; 0x11f0 <Button_updateState+0xda>
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
}
    11f0:	0f 90       	pop	r0
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	08 95       	ret

000011fc <EEPROM_getAddresses>:
* Description: Function to Calculate the slave address byte and the word address byte from the location
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
    11fc:	9a 01       	movw	r18, r20
    11fe:	22 27       	eor	r18, r18
    1200:	37 70       	andi	r19, 0x07	; 7
    1202:	22 0f       	add	r18, r18
    1204:	23 2f       	mov	r18, r19
    1206:	22 1f       	adc	r18, r18
    1208:	33 0b       	sbc	r19, r19
    120a:	31 95       	neg	r19
    120c:	20 65       	ori	r18, 0x50	; 80
    120e:	fc 01       	movw	r30, r24
    1210:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
    1212:	fb 01       	movw	r30, r22
    1214:	40 83       	st	Z, r20
	return EEPROM_24_STATUS_ERROR_OK;
}
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	08 95       	ret

0000121a <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
    121a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <genu_eepromModuleState>
    121e:	83 30       	cpi	r24, 0x03	; 3
    1220:	51 f0       	breq	.+20     	; 0x1236 <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
    1222:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
    1226:	85 30       	cpi	r24, 0x05	; 5
    1228:	29 f0       	breq	.+10     	; 0x1234 <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
    122a:	83 e0       	ldi	r24, 0x03	; 3
    122c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
    1234:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
    1236:	08 95       	ret

00001238 <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	00 d0       	rcall	.+0      	; 0x1240 <Eeprom_24_writeByte+0x8>
    1240:	1f 92       	push	r1
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	ac 01       	movw	r20, r24
    1248:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    124a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <genu_eepromModuleState>
    124e:	93 30       	cpi	r25, 0x03	; 3
    1250:	11 f5       	brne	.+68     	; 0x1296 <Eeprom_24_writeByte+0x5e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    1252:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    1254:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    1256:	be 01       	movw	r22, r28
    1258:	6e 5f       	subi	r22, 0xFE	; 254
    125a:	7f 4f       	sbci	r23, 0xFF	; 255
    125c:	ce 01       	movw	r24, r28
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	0e 94 fe 08 	call	0x11fc	; 0x11fc <EEPROM_getAddresses>
    1264:	18 2f       	mov	r17, r24
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	c1 f4       	brne	.+48     	; 0x129a <Eeprom_24_writeByte+0x62>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    126a:	21 e0       	ldi	r18, 0x01	; 1
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	ae 01       	movw	r20, r28
    1270:	4d 5f       	subi	r20, 0xFD	; 253
    1272:	5f 4f       	sbci	r21, 0xFF	; 255
    1274:	6a 81       	ldd	r22, Y+2	; 0x02
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <I2C_MasterSendToLocation>
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	79 f4       	brne	.+30     	; 0x129e <Eeprom_24_writeByte+0x66>
		return EEPROM_24_STATUS_ERROR_NOK;
	Delay_ms(15);
    1280:	2f e0       	ldi	r18, 0x0F	; 15
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <Eeprom_24_writeByte+0x68>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1296:	12 e0       	ldi	r17, 0x02	; 2
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <Eeprom_24_writeByte+0x68>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    129a:	10 e0       	ldi	r17, 0x00	; 0
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <Eeprom_24_writeByte+0x68>
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    129e:	10 e0       	ldi	r17, 0x00	; 0
	Delay_ms(15);
	return EEPROM_24_STATUS_ERROR_OK;
}
    12a0:	81 2f       	mov	r24, r17
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	1f 91       	pop	r17
    12ae:	08 95       	ret

000012b0 <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <Eeprom_24_readByte+0xc>
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    12c2:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <genu_eepromModuleState>
    12c6:	93 30       	cpi	r25, 0x03	; 3
    12c8:	21 f5       	brne	.+72     	; 0x1312 <Eeprom_24_readByte+0x62>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    12ca:	61 15       	cp	r22, r1
    12cc:	71 05       	cpc	r23, r1
    12ce:	19 f1       	breq	.+70     	; 0x1316 <Eeprom_24_readByte+0x66>
    12d0:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
    12d2:	19 82       	std	Y+1, r1	; 0x01
	uint8_t word_addr=0;
    12d4:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    12d6:	be 01       	movw	r22, r28
    12d8:	6e 5f       	subi	r22, 0xFE	; 254
    12da:	7f 4f       	sbci	r23, 0xFF	; 255
    12dc:	ce 01       	movw	r24, r28
    12de:	01 96       	adiw	r24, 0x01	; 1
    12e0:	0e 94 fe 08 	call	0x11fc	; 0x11fc <EEPROM_getAddresses>
    12e4:	18 2f       	mov	r17, r24
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	c1 f4       	brne	.+48     	; 0x131a <Eeprom_24_readByte+0x6a>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    12ea:	21 e0       	ldi	r18, 0x01	; 1
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	a7 01       	movw	r20, r14
    12f0:	6a 81       	ldd	r22, Y+2	; 0x02
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	0e 94 da 16 	call	0x2db4	; 0x2db4 <I2C_MasterReceiveFromLocation>
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	89 f4       	brne	.+34     	; 0x131e <Eeprom_24_readByte+0x6e>
		return EEPROM_24_STATUS_ERROR_NOK;
	Delay_ms(5);
    12fc:	25 e0       	ldi	r18, 0x05	; 5
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	50 e0       	ldi	r21, 0x00	; 0
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    1310:	07 c0       	rjmp	.+14     	; 0x1320 <Eeprom_24_readByte+0x70>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1312:	12 e0       	ldi	r17, 0x02	; 2
    1314:	05 c0       	rjmp	.+10     	; 0x1320 <Eeprom_24_readByte+0x70>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1316:	14 e0       	ldi	r17, 0x04	; 4
    1318:	03 c0       	rjmp	.+6      	; 0x1320 <Eeprom_24_readByte+0x70>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
	uint8_t word_addr=0;
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    131a:	10 e0       	ldi	r17, 0x00	; 0
    131c:	01 c0       	rjmp	.+2      	; 0x1320 <Eeprom_24_readByte+0x70>
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    131e:	10 e0       	ldi	r17, 0x00	; 0
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
    1320:	81 2f       	mov	r24, r17
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	ff 90       	pop	r15
    132e:	ef 90       	pop	r14
    1330:	08 95       	ret

00001332 <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
    1332:	ef 92       	push	r14
    1334:	ff 92       	push	r15
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	00 d0       	rcall	.+0      	; 0x133e <Eeprom_24_writePage+0xc>
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1342:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <genu_eepromModuleState>
    1346:	93 30       	cpi	r25, 0x03	; 3
    1348:	f9 f4       	brne	.+62     	; 0x1388 <Eeprom_24_writePage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    134a:	61 15       	cp	r22, r1
    134c:	71 05       	cpc	r23, r1
    134e:	f1 f0       	breq	.+60     	; 0x138c <Eeprom_24_writePage+0x5a>
    1350:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
    1352:	90 e1       	ldi	r25, 0x10	; 16
    1354:	89 9f       	mul	r24, r25
    1356:	a0 01       	movw	r20, r0
    1358:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    135a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    135c:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    135e:	be 01       	movw	r22, r28
    1360:	6e 5f       	subi	r22, 0xFE	; 254
    1362:	7f 4f       	sbci	r23, 0xFF	; 255
    1364:	ce 01       	movw	r24, r28
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	0e 94 fe 08 	call	0x11fc	; 0x11fc <EEPROM_getAddresses>
    136c:	18 2f       	mov	r17, r24
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	79 f4       	brne	.+30     	; 0x1390 <Eeprom_24_writePage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    1372:	20 e1       	ldi	r18, 0x10	; 16
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	a7 01       	movw	r20, r14
    1378:	6a 81       	ldd	r22, Y+2	; 0x02
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <I2C_MasterSendToLocation>
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	39 f0       	breq	.+14     	; 0x1392 <Eeprom_24_writePage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    1384:	10 e0       	ldi	r17, 0x00	; 0
    1386:	05 c0       	rjmp	.+10     	; 0x1392 <Eeprom_24_writePage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1388:	12 e0       	ldi	r17, 0x02	; 2
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <Eeprom_24_writePage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    138c:	14 e0       	ldi	r17, 0x04	; 4
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <Eeprom_24_writePage+0x60>
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1390:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
    1392:	81 2f       	mov	r24, r17
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	08 95       	ret

000013a4 <Eeprom_24_readPage>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory page.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read data inside a specific page in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPage(uint8_t u8_page, uint8_t *pu8_data)
{
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <Eeprom_24_readPage+0xc>
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    13b4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <genu_eepromModuleState>
    13b8:	93 30       	cpi	r25, 0x03	; 3
    13ba:	f9 f4       	brne	.+62     	; 0x13fa <Eeprom_24_readPage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    13bc:	61 15       	cp	r22, r1
    13be:	71 05       	cpc	r23, r1
    13c0:	f1 f0       	breq	.+60     	; 0x13fe <Eeprom_24_readPage+0x5a>
    13c2:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
    13c4:	90 e1       	ldi	r25, 0x10	; 16
    13c6:	89 9f       	mul	r24, r25
    13c8:	a0 01       	movw	r20, r0
    13ca:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    13cc:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    13ce:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    13d0:	be 01       	movw	r22, r28
    13d2:	6e 5f       	subi	r22, 0xFE	; 254
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	ce 01       	movw	r24, r28
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	0e 94 fe 08 	call	0x11fc	; 0x11fc <EEPROM_getAddresses>
    13de:	18 2f       	mov	r17, r24
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	79 f4       	brne	.+30     	; 0x1402 <Eeprom_24_readPage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    13e4:	20 e1       	ldi	r18, 0x10	; 16
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	a7 01       	movw	r20, r14
    13ea:	6a 81       	ldd	r22, Y+2	; 0x02
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	0e 94 da 16 	call	0x2db4	; 0x2db4 <I2C_MasterReceiveFromLocation>
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	39 f0       	breq	.+14     	; 0x1404 <Eeprom_24_readPage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    13f6:	10 e0       	ldi	r17, 0x00	; 0
    13f8:	05 c0       	rjmp	.+10     	; 0x1404 <Eeprom_24_readPage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    13fa:	12 e0       	ldi	r17, 0x02	; 2
    13fc:	03 c0       	rjmp	.+6      	; 0x1404 <Eeprom_24_readPage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    13fe:	14 e0       	ldi	r17, 0x04	; 4
    1400:	01 c0       	rjmp	.+2      	; 0x1404 <Eeprom_24_readPage+0x60>
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1402:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
    1404:	81 2f       	mov	r24, r17
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	ff 90       	pop	r15
    1412:	ef 90       	pop	r14
    1414:	08 95       	ret

00001416 <Eeprom_24_writePacket>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Multiple data bytes to a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    1416:	6f 92       	push	r6
    1418:	7f 92       	push	r7
    141a:	8f 92       	push	r8
    141c:	9f 92       	push	r9
    141e:	af 92       	push	r10
    1420:	bf 92       	push	r11
    1422:	cf 92       	push	r12
    1424:	df 92       	push	r13
    1426:	ef 92       	push	r14
    1428:	ff 92       	push	r15
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	00 d0       	rcall	.+0      	; 0x1434 <Eeprom_24_writePacket+0x1e>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	5c 01       	movw	r10, r24
    143a:	6b 01       	movw	r12, r22
    143c:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    143e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <genu_eepromModuleState>
    1442:	83 30       	cpi	r24, 0x03	; 3
    1444:	09 f0       	breq	.+2      	; 0x1448 <Eeprom_24_writePacket+0x32>
    1446:	a1 c0       	rjmp	.+322    	; 0x158a <Eeprom_24_writePacket+0x174>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1448:	67 2b       	or	r22, r23
    144a:	09 f4       	brne	.+2      	; 0x144e <Eeprom_24_writePacket+0x38>
    144c:	a0 c0       	rjmp	.+320    	; 0x158e <Eeprom_24_writePacket+0x178>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    144e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    1450:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    1452:	a5 01       	movw	r20, r10
    1454:	be 01       	movw	r22, r28
    1456:	6e 5f       	subi	r22, 0xFE	; 254
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	ce 01       	movw	r24, r28
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <EEPROM_getAddresses>
    1462:	18 2f       	mov	r17, r24
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	09 f0       	breq	.+2      	; 0x146a <Eeprom_24_writePacket+0x54>
    1468:	94 c0       	rjmp	.+296    	; 0x1592 <Eeprom_24_writePacket+0x17c>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & 0x7F0)>>4;
    146a:	45 01       	movw	r8, r10
    146c:	80 ef       	ldi	r24, 0xF0	; 240
    146e:	88 22       	and	r8, r24
    1470:	87 e0       	ldi	r24, 0x07	; 7
    1472:	98 22       	and	r9, r24
    1474:	96 94       	lsr	r9
    1476:	87 94       	ror	r8
    1478:	96 94       	lsr	r9
    147a:	87 94       	ror	r8
    147c:	96 94       	lsr	r9
    147e:	87 94       	ror	r8
    1480:	96 94       	lsr	r9
    1482:	87 94       	ror	r8
    1484:	68 2c       	mov	r6, r8
	uint8_t u8_byteOffset = u16_location & 0x00F;
    1486:	8a 2d       	mov	r24, r10
    1488:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
    148a:	51 f1       	breq	.+84     	; 0x14e0 <Eeprom_24_writePacket+0xca>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    148c:	90 e1       	ldi	r25, 0x10	; 16
    148e:	a9 2e       	mov	r10, r25
    1490:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    1492:	b1 2c       	mov	r11, r1
    1494:	ea 14       	cp	r14, r10
    1496:	fb 04       	cpc	r15, r11
    1498:	58 f4       	brcc	.+22     	; 0x14b0 <Eeprom_24_writePacket+0x9a>
		{
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
    149a:	97 01       	movw	r18, r14
    149c:	a6 01       	movw	r20, r12
    149e:	6a 81       	ldd	r22, Y+2	; 0x02
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <I2C_MasterSendToLocation>
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	09 f4       	brne	.+2      	; 0x14ac <Eeprom_24_writePacket+0x96>
    14aa:	7c c0       	rjmp	.+248    	; 0x15a4 <Eeprom_24_writePacket+0x18e>
				return EEPROM_24_STATUS_ERROR_NOK;
    14ac:	10 e0       	ldi	r17, 0x00	; 0
    14ae:	7a c0       	rjmp	.+244    	; 0x15a4 <Eeprom_24_writePacket+0x18e>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    14b0:	95 01       	movw	r18, r10
    14b2:	a6 01       	movw	r20, r12
    14b4:	6a 81       	ldd	r22, Y+2	; 0x02
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <I2C_MasterSendToLocation>
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	09 f0       	breq	.+2      	; 0x14c2 <Eeprom_24_writePacket+0xac>
    14c0:	6a c0       	rjmp	.+212    	; 0x1596 <Eeprom_24_writePacket+0x180>
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    14c2:	ea 18       	sub	r14, r10
    14c4:	fb 08       	sbc	r15, r11
		i=1;
		Delay_ms(15);
    14c6:	2f e0       	ldi	r18, 0x0F	; 15
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <Delay_ms>
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
    14da:	77 24       	eor	r7, r7
    14dc:	73 94       	inc	r7
    14de:	03 c0       	rjmp	.+6      	; 0x14e6 <Eeprom_24_writePacket+0xd0>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
    14e0:	71 2c       	mov	r7, r1
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
    14e2:	a1 2c       	mov	r10, r1
    14e4:	b1 2c       	mov	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
    14e6:	c7 01       	movw	r24, r14
    14e8:	92 95       	swap	r25
    14ea:	82 95       	swap	r24
    14ec:	8f 70       	andi	r24, 0x0F	; 15
    14ee:	89 27       	eor	r24, r25
    14f0:	9f 70       	andi	r25, 0x0F	; 15
    14f2:	89 27       	eor	r24, r25
    14f4:	08 2f       	mov	r16, r24
	while (pages_num > 0)
    14f6:	1c c0       	rjmp	.+56     	; 0x1530 <Eeprom_24_writePacket+0x11a>
	{
		pages_num--;
    14f8:	01 50       	subi	r16, 0x01	; 1
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    14fa:	b6 01       	movw	r22, r12
    14fc:	6a 0d       	add	r22, r10
    14fe:	7b 1d       	adc	r23, r11
    1500:	87 2d       	mov	r24, r7
    1502:	86 0d       	add	r24, r6
    1504:	0e 94 99 09 	call	0x1332	; 0x1332 <Eeprom_24_writePage>
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	09 f0       	breq	.+2      	; 0x150e <Eeprom_24_writePacket+0xf8>
    150c:	46 c0       	rjmp	.+140    	; 0x159a <Eeprom_24_writePacket+0x184>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    150e:	73 94       	inc	r7
		u16_dataLen -= 16;
    1510:	80 e1       	ldi	r24, 0x10	; 16
    1512:	e8 1a       	sub	r14, r24
    1514:	f1 08       	sbc	r15, r1
		u8_dataIndex += 16;
    1516:	80 e1       	ldi	r24, 0x10	; 16
    1518:	a8 0e       	add	r10, r24
    151a:	b1 1c       	adc	r11, r1
		Delay_ms(15);
    151c:	2f e0       	ldi	r18, 0x0F	; 15
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <Delay_ms>
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
    1530:	10 16       	cp	r1, r16
    1532:	14 f3       	brlt	.-60     	; 0x14f8 <Eeprom_24_writePacket+0xe2>
		u16_dataLen -= 16;
		u8_dataIndex += 16;
		Delay_ms(15);
	}
	
	if (u16_dataLen > 0)
    1534:	e1 14       	cp	r14, r1
    1536:	f1 04       	cpc	r15, r1
    1538:	a9 f1       	breq	.+106    	; 0x15a4 <Eeprom_24_writePacket+0x18e>
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << 4;
    153a:	a4 01       	movw	r20, r8
    153c:	47 0d       	add	r20, r7
    153e:	51 1d       	adc	r21, r1
    1540:	42 95       	swap	r20
    1542:	52 95       	swap	r21
    1544:	50 7f       	andi	r21, 0xF0	; 240
    1546:	54 27       	eor	r21, r20
    1548:	40 7f       	andi	r20, 0xF0	; 240
    154a:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
    154c:	be 01       	movw	r22, r28
    154e:	6e 5f       	subi	r22, 0xFE	; 254
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	ce 01       	movw	r24, r28
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	0e 94 fe 08 	call	0x11fc	; 0x11fc <EEPROM_getAddresses>
    155a:	18 2f       	mov	r17, r24
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	f9 f4       	brne	.+62     	; 0x159e <Eeprom_24_writePacket+0x188>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1560:	a6 01       	movw	r20, r12
    1562:	4a 0d       	add	r20, r10
    1564:	5b 1d       	adc	r21, r11
    1566:	97 01       	movw	r18, r14
    1568:	6a 81       	ldd	r22, Y+2	; 0x02
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <I2C_MasterSendToLocation>
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	b9 f4       	brne	.+46     	; 0x15a2 <Eeprom_24_writePacket+0x18c>
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
    1574:	2f e0       	ldi	r18, 0x0F	; 15
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e0       	ldi	r20, 0x00	; 0
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <Delay_ms>
    1588:	0d c0       	rjmp	.+26     	; 0x15a4 <Eeprom_24_writePacket+0x18e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    158a:	12 e0       	ldi	r17, 0x02	; 2
    158c:	0b c0       	rjmp	.+22     	; 0x15a4 <Eeprom_24_writePacket+0x18e>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    158e:	14 e0       	ldi	r17, 0x04	; 4
    1590:	09 c0       	rjmp	.+18     	; 0x15a4 <Eeprom_24_writePacket+0x18e>
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1592:	10 e0       	ldi	r17, 0x00	; 0
    1594:	07 c0       	rjmp	.+14     	; 0x15a4 <Eeprom_24_writePacket+0x18e>
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1596:	10 e0       	ldi	r17, 0x00	; 0
    1598:	05 c0       	rjmp	.+10     	; 0x15a4 <Eeprom_24_writePacket+0x18e>
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
	{
		pages_num--;
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    159a:	10 e0       	ldi	r17, 0x00	; 0
    159c:	03 c0       	rjmp	.+6      	; 0x15a4 <Eeprom_24_writePacket+0x18e>
	
	if (u16_dataLen > 0)
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << 4;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    159e:	10 e0       	ldi	r17, 0x00	; 0
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <Eeprom_24_writePacket+0x18e>
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    15a2:	10 e0       	ldi	r17, 0x00	; 0
		Delay_ms(15);
	}
	return EEPROM_24_STATUS_ERROR_OK;
}
    15a4:	81 2f       	mov	r24, r17
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	ff 90       	pop	r15
    15b4:	ef 90       	pop	r14
    15b6:	df 90       	pop	r13
    15b8:	cf 90       	pop	r12
    15ba:	bf 90       	pop	r11
    15bc:	af 90       	pop	r10
    15be:	9f 90       	pop	r9
    15c0:	8f 90       	pop	r8
    15c2:	7f 90       	pop	r7
    15c4:	6f 90       	pop	r6
    15c6:	08 95       	ret

000015c8 <Eeprom_24_readPacket>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read Multiple data bytes from a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    15c8:	6f 92       	push	r6
    15ca:	7f 92       	push	r7
    15cc:	8f 92       	push	r8
    15ce:	9f 92       	push	r9
    15d0:	af 92       	push	r10
    15d2:	bf 92       	push	r11
    15d4:	cf 92       	push	r12
    15d6:	df 92       	push	r13
    15d8:	ef 92       	push	r14
    15da:	ff 92       	push	r15
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <Eeprom_24_readPacket+0x1e>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	5c 01       	movw	r10, r24
    15ec:	6b 01       	movw	r12, r22
    15ee:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    15f0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <genu_eepromModuleState>
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	09 f0       	breq	.+2      	; 0x15fa <Eeprom_24_readPacket+0x32>
    15f8:	84 c0       	rjmp	.+264    	; 0x1702 <Eeprom_24_readPacket+0x13a>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    15fa:	67 2b       	or	r22, r23
    15fc:	09 f4       	brne	.+2      	; 0x1600 <Eeprom_24_readPacket+0x38>
    15fe:	83 c0       	rjmp	.+262    	; 0x1706 <Eeprom_24_readPacket+0x13e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    1600:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    1602:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t u16dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    1604:	a5 01       	movw	r20, r10
    1606:	be 01       	movw	r22, r28
    1608:	6e 5f       	subi	r22, 0xFE	; 254
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	ce 01       	movw	r24, r28
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	0e 94 fe 08 	call	0x11fc	; 0x11fc <EEPROM_getAddresses>
    1614:	18 2f       	mov	r17, r24
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	09 f0       	breq	.+2      	; 0x161c <Eeprom_24_readPacket+0x54>
    161a:	77 c0       	rjmp	.+238    	; 0x170a <Eeprom_24_readPacket+0x142>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & 0x7F0)>>4;		//The first page to write in
    161c:	45 01       	movw	r8, r10
    161e:	80 ef       	ldi	r24, 0xF0	; 240
    1620:	88 22       	and	r8, r24
    1622:	87 e0       	ldi	r24, 0x07	; 7
    1624:	98 22       	and	r9, r24
    1626:	96 94       	lsr	r9
    1628:	87 94       	ror	r8
    162a:	96 94       	lsr	r9
    162c:	87 94       	ror	r8
    162e:	96 94       	lsr	r9
    1630:	87 94       	ror	r8
    1632:	96 94       	lsr	r9
    1634:	87 94       	ror	r8
    1636:	78 2c       	mov	r7, r8
	uint8_t u8_byteOffset = u16_location & 0x00F;
    1638:	8a 2d       	mov	r24, r10
    163a:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
    163c:	f9 f0       	breq	.+62     	; 0x167c <Eeprom_24_readPacket+0xb4>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    163e:	90 e1       	ldi	r25, 0x10	; 16
    1640:	a9 2e       	mov	r10, r25
    1642:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    1644:	b1 2c       	mov	r11, r1
    1646:	ea 14       	cp	r14, r10
    1648:	fb 04       	cpc	r15, r11
    164a:	58 f4       	brcc	.+22     	; 0x1662 <Eeprom_24_readPacket+0x9a>
		{
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    164c:	95 01       	movw	r18, r10
    164e:	a6 01       	movw	r20, r12
    1650:	6a 81       	ldd	r22, Y+2	; 0x02
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	0e 94 da 16 	call	0x2db4	; 0x2db4 <I2C_MasterReceiveFromLocation>
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	09 f4       	brne	.+2      	; 0x165e <Eeprom_24_readPacket+0x96>
    165c:	5d c0       	rjmp	.+186    	; 0x1718 <Eeprom_24_readPacket+0x150>
				return EEPROM_24_STATUS_ERROR_NOK;
    165e:	10 e0       	ldi	r17, 0x00	; 0
    1660:	5b c0       	rjmp	.+182    	; 0x1718 <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    1662:	95 01       	movw	r18, r10
    1664:	a6 01       	movw	r20, r12
    1666:	6a 81       	ldd	r22, Y+2	; 0x02
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	0e 94 da 16 	call	0x2db4	; 0x2db4 <I2C_MasterReceiveFromLocation>
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	09 f0       	breq	.+2      	; 0x1674 <Eeprom_24_readPacket+0xac>
    1672:	4d c0       	rjmp	.+154    	; 0x170e <Eeprom_24_readPacket+0x146>
			return EEPROM_24_STATUS_ERROR_NOK;
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    1674:	ea 18       	sub	r14, r10
    1676:	fb 08       	sbc	r15, r11
		i=1;
    1678:	01 e0       	ldi	r16, 0x01	; 1
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <Eeprom_24_readPacket+0xba>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
    167c:	00 e0       	ldi	r16, 0x00	; 0
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
    167e:	a1 2c       	mov	r10, r1
    1680:	b1 2c       	mov	r11, r1
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
    1682:	c7 01       	movw	r24, r14
    1684:	92 95       	swap	r25
    1686:	82 95       	swap	r24
    1688:	8f 70       	andi	r24, 0x0F	; 15
    168a:	89 27       	eor	r24, r25
    168c:	9f 70       	andi	r25, 0x0F	; 15
    168e:	89 27       	eor	r24, r25
	while (pages_num--)
    1690:	11 c0       	rjmp	.+34     	; 0x16b4 <Eeprom_24_readPacket+0xec>
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    1692:	b6 01       	movw	r22, r12
    1694:	6a 0d       	add	r22, r10
    1696:	7b 1d       	adc	r23, r11
    1698:	80 2f       	mov	r24, r16
    169a:	87 0d       	add	r24, r7
    169c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <Eeprom_24_readPage>
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	b9 f5       	brne	.+110    	; 0x1712 <Eeprom_24_readPacket+0x14a>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    16a4:	0f 5f       	subi	r16, 0xFF	; 255
		u16_dataLen -= 16;
    16a6:	80 e1       	ldi	r24, 0x10	; 16
    16a8:	e8 1a       	sub	r14, r24
    16aa:	f1 08       	sbc	r15, r1
		u16dataIndex += 16;
    16ac:	80 e1       	ldi	r24, 0x10	; 16
    16ae:	a8 0e       	add	r10, r24
    16b0:	b1 1c       	adc	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
    16b2:	86 2d       	mov	r24, r6
    16b4:	66 24       	eor	r6, r6
    16b6:	6a 94       	dec	r6
    16b8:	68 0e       	add	r6, r24
    16ba:	81 11       	cpse	r24, r1
    16bc:	ea cf       	rjmp	.-44     	; 0x1692 <Eeprom_24_readPacket+0xca>
		i++;
		u16_dataLen -= 16;
		u16dataIndex += 16;
	}

	if (u16_dataLen > 0)
    16be:	e1 14       	cp	r14, r1
    16c0:	f1 04       	cpc	r15, r1
    16c2:	51 f1       	breq	.+84     	; 0x1718 <Eeprom_24_readPacket+0x150>
	{
		uint16_t new_location = (u8_pageStart + i) << 4;
    16c4:	a4 01       	movw	r20, r8
    16c6:	40 0f       	add	r20, r16
    16c8:	51 1d       	adc	r21, r1
    16ca:	42 95       	swap	r20
    16cc:	52 95       	swap	r21
    16ce:	50 7f       	andi	r21, 0xF0	; 240
    16d0:	54 27       	eor	r21, r20
    16d2:	40 7f       	andi	r20, 0xF0	; 240
    16d4:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
    16d6:	be 01       	movw	r22, r28
    16d8:	6e 5f       	subi	r22, 0xFE	; 254
    16da:	7f 4f       	sbci	r23, 0xFF	; 255
    16dc:	ce 01       	movw	r24, r28
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	0e 94 fe 08 	call	0x11fc	; 0x11fc <EEPROM_getAddresses>
    16e4:	18 2f       	mov	r17, r24
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	b1 f4       	brne	.+44     	; 0x1716 <Eeprom_24_readPacket+0x14e>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    16ea:	a6 01       	movw	r20, r12
    16ec:	4a 0d       	add	r20, r10
    16ee:	5b 1d       	adc	r21, r11
    16f0:	97 01       	movw	r18, r14
    16f2:	6a 81       	ldd	r22, Y+2	; 0x02
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	0e 94 da 16 	call	0x2db4	; 0x2db4 <I2C_MasterReceiveFromLocation>
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	69 f0       	breq	.+26     	; 0x1718 <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_NOK;
    16fe:	10 e0       	ldi	r17, 0x00	; 0
    1700:	0b c0       	rjmp	.+22     	; 0x1718 <Eeprom_24_readPacket+0x150>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1702:	12 e0       	ldi	r17, 0x02	; 2
    1704:	09 c0       	rjmp	.+18     	; 0x1718 <Eeprom_24_readPacket+0x150>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1706:	14 e0       	ldi	r17, 0x04	; 4
    1708:	07 c0       	rjmp	.+14     	; 0x1718 <Eeprom_24_readPacket+0x150>
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    170a:	10 e0       	ldi	r17, 0x00	; 0
    170c:	05 c0       	rjmp	.+10     	; 0x1718 <Eeprom_24_readPacket+0x150>
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    170e:	10 e0       	ldi	r17, 0x00	; 0
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <Eeprom_24_readPacket+0x150>
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1712:	10 e0       	ldi	r17, 0x00	; 0
    1714:	01 c0       	rjmp	.+2      	; 0x1718 <Eeprom_24_readPacket+0x150>

	if (u16_dataLen > 0)
	{
		uint16_t new_location = (u8_pageStart + i) << 4;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1716:	10 e0       	ldi	r17, 0x00	; 0
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
	return EEPROM_24_STATUS_ERROR_OK;
    1718:	81 2f       	mov	r24, r17
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	af 90       	pop	r10
    1732:	9f 90       	pop	r9
    1734:	8f 90       	pop	r8
    1736:	7f 90       	pop	r7
    1738:	6f 90       	pop	r6
    173a:	08 95       	ret

0000173c <Keypad_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is already initialized */
	if (genu_KeypadModuleState == KEYPAD_STATUS_INIT)
    173c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <genu_KeypadModuleState>
    1740:	85 30       	cpi	r24, 0x05	; 5
    1742:	71 f0       	breq	.+28     	; 0x1760 <Keypad_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    1744:	8a e8       	ldi	r24, 0x8A	; 138
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	0e 94 46 10 	call	0x208c	; 0x208c <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	11 f0       	breq	.+4      	; 0x1754 <Keypad_init+0x18>
    1750:	87 30       	cpi	r24, 0x07	; 7
    1752:	29 f4       	brne	.+10     	; 0x175e <Keypad_init+0x22>
		return KEYPAD_STATUS_ERROR_NOK;
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
    1754:	85 e0       	ldi	r24, 0x05	; 5
    1756:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <genu_KeypadModuleState>
	return KEYPAD_STATUS_ERROR_OK;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return KEYPAD_STATUS_ERROR_NOK;
    175e:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
	return KEYPAD_STATUS_ERROR_OK;
}
    1760:	08 95       	ret

00001762 <Keypad_readKey>:
* Parameters (out): pu8_pressedKey - Pointer to a Char to hold the pressed key.
* Return value: enuKeypad_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current pressed Key.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuKeypad_Status_t Keypad_readKey(uint8_t * pu8_pressedKey)
{
    1762:	af 92       	push	r10
    1764:	bf 92       	push	r11
    1766:	cf 92       	push	r12
    1768:	df 92       	push	r13
    176a:	ef 92       	push	r14
    176c:	ff 92       	push	r15
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	1f 92       	push	r1
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	6c 01       	movw	r12, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
    177e:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <genu_KeypadModuleState>
    1782:	95 30       	cpi	r25, 0x05	; 5
    1784:	09 f0       	breq	.+2      	; 0x1788 <Keypad_readKey+0x26>
    1786:	50 c0       	rjmp	.+160    	; 0x1828 <Keypad_readKey+0xc6>
	{
		return KEYPAD_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
    1788:	c1 14       	cp	r12, r1
    178a:	d1 04       	cpc	r13, r1
    178c:	09 f4       	brne	.+2      	; 0x1790 <Keypad_readKey+0x2e>
    178e:	4e c0       	rjmp	.+156    	; 0x182c <Keypad_readKey+0xca>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	89 83       	std	Y+1, r24	; 0x01
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    1794:	00 e0       	ldi	r16, 0x00	; 0
    1796:	43 c0       	rjmp	.+134    	; 0x181e <Keypad_readKey+0xbc>
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
    1798:	a0 2e       	mov	r10, r16
    179a:	b1 2c       	mov	r11, r1
    179c:	f5 01       	movw	r30, r10
    179e:	e1 58       	subi	r30, 0x81	; 129
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <Keypad_readKey+0x4e>
    17ae:	40 c0       	rjmp	.+128    	; 0x1830 <Keypad_readKey+0xce>
    17b0:	10 e0       	ldi	r17, 0x00	; 0
    17b2:	29 c0       	rjmp	.+82     	; 0x1806 <Keypad_readKey+0xa4>
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
    17b4:	e1 2e       	mov	r14, r17
    17b6:	f1 2c       	mov	r15, r1
    17b8:	f7 01       	movw	r30, r14
    17ba:	e5 58       	subi	r30, 0x85	; 133
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	be 01       	movw	r22, r28
    17c0:	6f 5f       	subi	r22, 0xFF	; 255
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	80 81       	ld	r24, Z
    17c6:	0e 94 25 12 	call	0x244a	; 0x244a <Dio_readPin>
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	99 f5       	brne	.+102    	; 0x1834 <Keypad_readKey+0xd2>
				return KEYPAD_STATUS_ERROR_NOK;
			if(u8_pinValue == PIN_LOW)
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	81 11       	cpse	r24, r1
    17d2:	18 c0       	rjmp	.+48     	; 0x1804 <Keypad_readKey+0xa2>
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    17d4:	61 e0       	ldi	r22, 0x01	; 1
    17d6:	f5 01       	movw	r30, r10
    17d8:	e1 58       	subi	r30, 0x81	; 129
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	80 81       	ld	r24, Z
    17de:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	49 f5       	brne	.+82     	; 0x1838 <Keypad_readKey+0xd6>
					return KEYPAD_STATUS_ERROR_NOK;
				*pu8_pressedKey = gau8_ButtonSymbols[u8_RowIndex][u8_ColumnIndex];
    17e6:	97 01       	movw	r18, r14
    17e8:	22 0f       	add	r18, r18
    17ea:	33 1f       	adc	r19, r19
    17ec:	22 0f       	add	r18, r18
    17ee:	33 1f       	adc	r19, r19
    17f0:	25 59       	subi	r18, 0x95	; 149
    17f2:	3f 4f       	sbci	r19, 0xFF	; 255
    17f4:	f9 01       	movw	r30, r18
    17f6:	ea 0d       	add	r30, r10
    17f8:	fb 1d       	adc	r31, r11
    17fa:	80 81       	ld	r24, Z
    17fc:	f6 01       	movw	r30, r12
    17fe:	80 83       	st	Z, r24
				return KEYPAD_STATUS_PRESSED;
    1800:	86 e0       	ldi	r24, 0x06	; 6
    1802:	1d c0       	rjmp	.+58     	; 0x183e <Keypad_readKey+0xdc>
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
    1804:	1f 5f       	subi	r17, 0xFF	; 255
    1806:	14 30       	cpi	r17, 0x04	; 4
    1808:	a8 f2       	brcs	.-86     	; 0x17b4 <Keypad_readKey+0x52>
				return KEYPAD_STATUS_PRESSED;
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    180a:	f5 01       	movw	r30, r10
    180c:	e1 58       	subi	r30, 0x81	; 129
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	80 81       	ld	r24, Z
    1814:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	81 f4       	brne	.+32     	; 0x183c <Keypad_readKey+0xda>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    181c:	0f 5f       	subi	r16, 0xFF	; 255
    181e:	04 30       	cpi	r16, 0x04	; 4
    1820:	08 f4       	brcc	.+2      	; 0x1824 <Keypad_readKey+0xc2>
    1822:	ba cf       	rjmp	.-140    	; 0x1798 <Keypad_readKey+0x36>
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    1824:	87 e0       	ldi	r24, 0x07	; 7
    1826:	0b c0       	rjmp	.+22     	; 0x183e <Keypad_readKey+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
	{
		return KEYPAD_STATUS_NOT_INIT;
    1828:	84 e0       	ldi	r24, 0x04	; 4
    182a:	09 c0       	rjmp	.+18     	; 0x183e <Keypad_readKey+0xdc>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
	{
		return KEYPAD_STATUS_ERROR_NULL;
    182c:	83 e0       	ldi	r24, 0x03	; 3
    182e:	07 c0       	rjmp	.+14     	; 0x183e <Keypad_readKey+0xdc>
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	05 c0       	rjmp	.+10     	; 0x183e <Keypad_readKey+0xdc>
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
				return KEYPAD_STATUS_ERROR_NOK;
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	03 c0       	rjmp	.+6      	; 0x183e <Keypad_readKey+0xdc>
			if(u8_pinValue == PIN_LOW)
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
					return KEYPAD_STATUS_ERROR_NOK;
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	01 c0       	rjmp	.+2      	; 0x183e <Keypad_readKey+0xdc>
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    183c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    183e:	0f 90       	pop	r0
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	1f 91       	pop	r17
    1846:	0f 91       	pop	r16
    1848:	ff 90       	pop	r15
    184a:	ef 90       	pop	r14
    184c:	df 90       	pop	r13
    184e:	cf 90       	pop	r12
    1850:	bf 90       	pop	r11
    1852:	af 90       	pop	r10
    1854:	08 95       	ret

00001856 <Lcd_WriteData>:
{
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, BIN);
	Lcd_printString(au8_snum);
	return LCD_STATUS_ERROR_OK;
}
    1856:	cf 93       	push	r28
    1858:	c8 2f       	mov	r28, r24
    185a:	80 ff       	sbrs	r24, 0
    185c:	05 c0       	rjmp	.+10     	; 0x1868 <Lcd_WriteData+0x12>
    185e:	61 e0       	ldi	r22, 0x01	; 1
    1860:	8a e0       	ldi	r24, 0x0A	; 10
    1862:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    1866:	04 c0       	rjmp	.+8      	; 0x1870 <Lcd_WriteData+0x1a>
    1868:	60 e0       	ldi	r22, 0x00	; 0
    186a:	8a e0       	ldi	r24, 0x0A	; 10
    186c:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    1870:	c1 ff       	sbrs	r28, 1
    1872:	05 c0       	rjmp	.+10     	; 0x187e <Lcd_WriteData+0x28>
    1874:	61 e0       	ldi	r22, 0x01	; 1
    1876:	8b e0       	ldi	r24, 0x0B	; 11
    1878:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    187c:	04 c0       	rjmp	.+8      	; 0x1886 <Lcd_WriteData+0x30>
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	8b e0       	ldi	r24, 0x0B	; 11
    1882:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    1886:	c2 ff       	sbrs	r28, 2
    1888:	05 c0       	rjmp	.+10     	; 0x1894 <Lcd_WriteData+0x3e>
    188a:	61 e0       	ldi	r22, 0x01	; 1
    188c:	8c e0       	ldi	r24, 0x0C	; 12
    188e:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    1892:	04 c0       	rjmp	.+8      	; 0x189c <Lcd_WriteData+0x46>
    1894:	60 e0       	ldi	r22, 0x00	; 0
    1896:	8c e0       	ldi	r24, 0x0C	; 12
    1898:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    189c:	c3 ff       	sbrs	r28, 3
    189e:	05 c0       	rjmp	.+10     	; 0x18aa <Lcd_WriteData+0x54>
    18a0:	61 e0       	ldi	r22, 0x01	; 1
    18a2:	8d e0       	ldi	r24, 0x0D	; 13
    18a4:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    18a8:	04 c0       	rjmp	.+8      	; 0x18b2 <Lcd_WriteData+0x5c>
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	8d e0       	ldi	r24, 0x0D	; 13
    18ae:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    18b2:	cf 91       	pop	r28
    18b4:	08 95       	ret

000018b6 <Lcd_EnableToggle>:
    18b6:	61 e0       	ldi	r22, 0x01	; 1
    18b8:	89 e0       	ldi	r24, 0x09	; 9
    18ba:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    18be:	21 e0       	ldi	r18, 0x01	; 1
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	50 e0       	ldi	r21, 0x00	; 0
    18c6:	60 e0       	ldi	r22, 0x00	; 0
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <Delay_ms>
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	89 e0       	ldi	r24, 0x09	; 9
    18d6:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    18da:	08 95       	ret

000018dc <Lcd_sendCommand>:
    18dc:	cf 93       	push	r28
    18de:	c8 2f       	mov	r28, r24
    18e0:	60 e0       	ldi	r22, 0x00	; 0
    18e2:	87 e0       	ldi	r24, 0x07	; 7
    18e4:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    18e8:	8c 2f       	mov	r24, r28
    18ea:	82 95       	swap	r24
    18ec:	8f 70       	andi	r24, 0x0F	; 15
    18ee:	0e 94 2b 0c 	call	0x1856	; 0x1856 <Lcd_WriteData>
    18f2:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_EnableToggle>
    18f6:	8c 2f       	mov	r24, r28
    18f8:	8f 70       	andi	r24, 0x0F	; 15
    18fa:	0e 94 2b 0c 	call	0x1856	; 0x1856 <Lcd_WriteData>
    18fe:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_EnableToggle>
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	cf 91       	pop	r28
    1906:	08 95       	ret

00001908 <Lcd_init>:
    1908:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <genu_LcdModuleState>
    190c:	86 30       	cpi	r24, 0x06	; 6
    190e:	59 f1       	breq	.+86     	; 0x1966 <Lcd_init+0x5e>
    1910:	8a e8       	ldi	r24, 0x8A	; 138
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 46 10 	call	0x208c	; 0x208c <Dio_init>
    1918:	81 30       	cpi	r24, 0x01	; 1
    191a:	11 f0       	breq	.+4      	; 0x1920 <Lcd_init+0x18>
    191c:	87 30       	cpi	r24, 0x07	; 7
    191e:	11 f5       	brne	.+68     	; 0x1964 <Lcd_init+0x5c>
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	87 e0       	ldi	r24, 0x07	; 7
    1924:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	89 e0       	ldi	r24, 0x09	; 9
    192c:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    1930:	83 e3       	ldi	r24, 0x33	; 51
    1932:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Lcd_sendCommand>
    1936:	82 e3       	ldi	r24, 0x32	; 50
    1938:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Lcd_sendCommand>
    193c:	88 e2       	ldi	r24, 0x28	; 40
    193e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Lcd_sendCommand>
    1942:	88 e0       	ldi	r24, 0x08	; 8
    1944:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Lcd_sendCommand>
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Lcd_sendCommand>
    194e:	86 e0       	ldi	r24, 0x06	; 6
    1950:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Lcd_sendCommand>
    1954:	8c e0       	ldi	r24, 0x0C	; 12
    1956:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Lcd_sendCommand>
    195a:	86 e0       	ldi	r24, 0x06	; 6
    195c:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <genu_LcdModuleState>
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	08 95       	ret
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	08 95       	ret

00001968 <Lcd_setCursor>:
    1968:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <genu_LcdModuleState>
    196c:	96 30       	cpi	r25, 0x06	; 6
    196e:	89 f4       	brne	.+34     	; 0x1992 <Lcd_setCursor+0x2a>
    1970:	83 30       	cpi	r24, 0x03	; 3
    1972:	88 f4       	brcc	.+34     	; 0x1996 <Lcd_setCursor+0x2e>
    1974:	61 31       	cpi	r22, 0x11	; 17
    1976:	88 f4       	brcc	.+34     	; 0x199a <Lcd_setCursor+0x32>
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	2e 5f       	subi	r18, 0xFE	; 254
    197e:	3f 4f       	sbci	r19, 0xFF	; 255
    1980:	86 2f       	mov	r24, r22
    1982:	90 e4       	ldi	r25, 0x40	; 64
    1984:	29 9f       	mul	r18, r25
    1986:	80 0d       	add	r24, r0
    1988:	11 24       	eor	r1, r1
    198a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Lcd_sendCommand>
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	08 95       	ret
    1992:	85 e0       	ldi	r24, 0x05	; 5
    1994:	08 95       	ret
    1996:	83 e0       	ldi	r24, 0x03	; 3
    1998:	08 95       	ret
    199a:	82 e0       	ldi	r24, 0x02	; 2
    199c:	08 95       	ret

0000199e <Lcd_printChar>:
    199e:	cf 93       	push	r28
    19a0:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <genu_LcdModuleState>
    19a4:	96 30       	cpi	r25, 0x06	; 6
    19a6:	a1 f4       	brne	.+40     	; 0x19d0 <Lcd_printChar+0x32>
    19a8:	c8 2f       	mov	r28, r24
    19aa:	61 e0       	ldi	r22, 0x01	; 1
    19ac:	87 e0       	ldi	r24, 0x07	; 7
    19ae:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    19b2:	8c 2f       	mov	r24, r28
    19b4:	82 95       	swap	r24
    19b6:	8f 70       	andi	r24, 0x0F	; 15
    19b8:	0e 94 2b 0c 	call	0x1856	; 0x1856 <Lcd_WriteData>
    19bc:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_EnableToggle>
    19c0:	8c 2f       	mov	r24, r28
    19c2:	8f 70       	andi	r24, 0x0F	; 15
    19c4:	0e 94 2b 0c 	call	0x1856	; 0x1856 <Lcd_WriteData>
    19c8:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_EnableToggle>
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <Lcd_printChar+0x34>
    19d0:	85 e0       	ldi	r24, 0x05	; 5
    19d2:	cf 91       	pop	r28
    19d4:	08 95       	ret

000019d6 <Lcd_printString>:
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	ec 01       	movw	r28, r24
    19dc:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <genu_LcdModuleState>
    19e0:	86 30       	cpi	r24, 0x06	; 6
    19e2:	49 f4       	brne	.+18     	; 0x19f6 <Lcd_printString+0x20>
    19e4:	03 c0       	rjmp	.+6      	; 0x19ec <Lcd_printString+0x16>
    19e6:	21 96       	adiw	r28, 0x01	; 1
    19e8:	0e 94 cf 0c 	call	0x199e	; 0x199e <Lcd_printChar>
    19ec:	88 81       	ld	r24, Y
    19ee:	81 11       	cpse	r24, r1
    19f0:	fa cf       	rjmp	.-12     	; 0x19e6 <Lcd_printString+0x10>
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <Lcd_printString+0x22>
    19f6:	85 e0       	ldi	r24, 0x05	; 5
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	08 95       	ret

000019fe <Lcd_clear>:
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Lcd_sendCommand>
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	08 95       	ret

00001a08 <Lcd_printDecimal>:
enuLcd_Status_t Lcd_printDecimal(uint16_t u16_num)
{
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	61 97       	sbiw	r28, 0x11	; 17
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, DEC);
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	be 01       	movw	r22, r28
    1a20:	6f 5f       	subi	r22, 0xFF	; 255
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255
    1a24:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <integerToString>
	Lcd_printString(au8_snum);
    1a28:	ce 01       	movw	r24, r28
    1a2a:	01 96       	adiw	r24, 0x01	; 1
    1a2c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Lcd_printString>
	return LCD_STATUS_ERROR_OK;
}
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	61 96       	adiw	r28, 0x11	; 17
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	de bf       	out	0x3e, r29	; 62
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	08 95       	ret

00001a44 <LM35_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is already initialized */
	if (genu_LM35ModuleState == LM35_STATUS_INIT)
    1a44:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <genu_LM35ModuleState>
    1a48:	85 30       	cpi	r24, 0x05	; 5
    1a4a:	51 f0       	breq	.+20     	; 0x1a60 <LM35_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
    1a4c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Adc_init>
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	29 f4       	brne	.+10     	; 0x1a5e <LM35_init+0x1a>
		return LM35_STATUS_ERROR_NOK;
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
    1a54:	85 e0       	ldi	r24, 0x05	; 5
    1a56:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <genu_LM35ModuleState>
	return LM35_STATUS_ERROR_OK;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
		return LM35_STATUS_ERROR_NOK;
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
	return LM35_STATUS_ERROR_OK;
}
    1a60:	08 95       	ret

00001a62 <LM35_readTemp>:
* Parameters (out): pu8_Temp - Pointer to a Char to hold the temperature.
* Return value: enuLM35_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current temperature and return in celsius.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLM35_Status_t LM35_readTemp(uint8_t * pu8_Temp)
{
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <LM35_readTemp+0xa>
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <LM35_readTemp+0xc>
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	9c 01       	movw	r18, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
    1a74:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <genu_LM35ModuleState>
    1a78:	95 30       	cpi	r25, 0x05	; 5
    1a7a:	f1 f4       	brne	.+60     	; 0x1ab8 <LM35_readTemp+0x56>
	{
	return LM35_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
    1a7c:	21 15       	cp	r18, r1
    1a7e:	31 05       	cpc	r19, r1
    1a80:	e9 f0       	breq	.+58     	; 0x1abc <LM35_readTemp+0x5a>
    1a82:	89 01       	movw	r16, r18
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
    1a84:	19 82       	std	Y+1, r1	; 0x01
    1a86:	1a 82       	std	Y+2, r1	; 0x02
    1a88:	1b 82       	std	Y+3, r1	; 0x03
    1a8a:	1c 82       	std	Y+4, r1	; 0x04
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
    1a8c:	be 01       	movw	r22, r28
    1a8e:	6f 5f       	subi	r22, 0xFF	; 255
    1a90:	7f 4f       	sbci	r23, 0xFF	; 255
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <Adc_start>
    1a98:	81 30       	cpi	r24, 0x01	; 1
    1a9a:	91 f4       	brne	.+36     	; 0x1ac0 <LM35_readTemp+0x5e>
		return LM35_STATUS_ERROR_NOK;
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
    1a9c:	69 81       	ldd	r22, Y+1	; 0x01
    1a9e:	7a 81       	ldd	r23, Y+2	; 0x02
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa4:	2a e0       	ldi	r18, 0x0A	; 10
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	50 e0       	ldi	r21, 0x00	; 0
    1aac:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__udivmodsi4>
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	20 83       	st	Z, r18
	return LM35_STATUS_ERROR_OK;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <LM35_readTemp+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
	{
	return LM35_STATUS_NOT_INIT;
    1ab8:	84 e0       	ldi	r24, 0x04	; 4
    1aba:	03 c0       	rjmp	.+6      	; 0x1ac2 <LM35_readTemp+0x60>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
	{
		return LM35_STATUS_ERROR_NULL;
    1abc:	83 e0       	ldi	r24, 0x03	; 3
    1abe:	01 c0       	rjmp	.+2      	; 0x1ac2 <LM35_readTemp+0x60>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
		return LM35_STATUS_ERROR_NOK;
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
	return LM35_STATUS_ERROR_OK;
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	08 95       	ret

00001ad4 <Motor_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
    1ad4:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <gu8_MotorModuleStatus>
    1ad8:	86 30       	cpi	r24, 0x06	; 6
    1ada:	49 f0       	breq	.+18     	; 0x1aee <Motor_init+0x1a>
/**************************************************************************************/
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
    1adc:	0e 94 9e 18 	call	0x313c	; 0x313c <SWPwm_Init>
    1ae0:	81 30       	cpi	r24, 0x01	; 1
    1ae2:	39 f4       	brne	.+14     	; 0x1af2 <Motor_init+0x1e>
		return MOTOR_STATUS_ERROR_NOK;
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
    1ae4:	86 e0       	ldi	r24, 0x06	; 6
    1ae6:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <gu8_MotorModuleStatus>
	return MOTOR_STATUS_ERROR_OK;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_INIT;
    1aee:	86 e0       	ldi	r24, 0x06	; 6
    1af0:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
		return MOTOR_STATUS_ERROR_NOK;
    1af2:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
	return MOTOR_STATUS_ERROR_OK;
}
    1af4:	08 95       	ret

00001af6 <Motor_stop>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the motor.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to stop motor */
enuMotor_Status_t Motor_stop(uint8_t u8_motorID)
{
    1af6:	df 92       	push	r13
    1af8:	ef 92       	push	r14
    1afa:	ff 92       	push	r15
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    1b04:	81 11       	cpse	r24, r1
    1b06:	5d c0       	rjmp	.+186    	; 0x1bc2 <Motor_stop+0xcc>
    1b08:	d8 2e       	mov	r13, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Stop the Motor by driving the pins to LOW */
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    1b0a:	08 2f       	mov	r16, r24
    1b0c:	10 e0       	ldi	r17, 0x00	; 0
    1b0e:	78 01       	movw	r14, r16
    1b10:	ee 0c       	add	r14, r14
    1b12:	ff 1c       	adc	r15, r15
    1b14:	ee 0c       	add	r14, r14
    1b16:	ff 1c       	adc	r15, r15
    1b18:	c7 01       	movw	r24, r14
    1b1a:	80 0f       	add	r24, r16
    1b1c:	91 1f       	adc	r25, r17
    1b1e:	ec 01       	movw	r28, r24
    1b20:	cf 51       	subi	r28, 0x1F	; 31
    1b22:	dc 4f       	sbci	r29, 0xFC	; 252
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1b34:	e0 e0       	ldi	r30, 0x00	; 0
    1b36:	1c c0       	rjmp	.+56     	; 0x1b70 <Motor_stop+0x7a>
	{
		if(u8_loopIndex == u8_motorID) /* Skip the current motor */
    1b38:	ed 15       	cp	r30, r13
    1b3a:	c9 f0       	breq	.+50     	; 0x1b6e <Motor_stop+0x78>
		{
			continue;
		}
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
    1b3c:	d8 01       	movw	r26, r16
    1b3e:	aa 0f       	add	r26, r26
    1b40:	bb 1f       	adc	r27, r27
    1b42:	aa 0f       	add	r26, r26
    1b44:	bb 1f       	adc	r27, r27
    1b46:	a0 0f       	add	r26, r16
    1b48:	b1 1f       	adc	r27, r17
    1b4a:	af 51       	subi	r26, 0x1F	; 31
    1b4c:	bc 4f       	sbci	r27, 0xFC	; 252
    1b4e:	2c 91       	ld	r18, X
    1b50:	8e 2f       	mov	r24, r30
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	dc 01       	movw	r26, r24
    1b56:	aa 0f       	add	r26, r26
    1b58:	bb 1f       	adc	r27, r27
    1b5a:	aa 0f       	add	r26, r26
    1b5c:	bb 1f       	adc	r27, r27
    1b5e:	8a 0f       	add	r24, r26
    1b60:	9b 1f       	adc	r25, r27
    1b62:	dc 01       	movw	r26, r24
    1b64:	af 51       	subi	r26, 0x1F	; 31
    1b66:	bc 4f       	sbci	r27, 0xFC	; 252
    1b68:	8c 91       	ld	r24, X
    1b6a:	28 17       	cp	r18, r24
    1b6c:	19 f0       	breq	.+6      	; 0x1b74 <Motor_stop+0x7e>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1b6e:	ef 5f       	subi	r30, 0xFF	; 255
    1b70:	ee 23       	and	r30, r30
    1b72:	11 f3       	breq	.-60     	; 0x1b38 <Motor_stop+0x42>
			break;
		}
	}
	
	
	if(u8_loopIndex == MOTORS_USED_NUM)
    1b74:	e1 30       	cpi	r30, 0x01	; 1
    1b76:	69 f4       	brne	.+26     	; 0x1b92 <Motor_stop+0x9c>
	{ /* In case that there isn't any motor using the same PWM Channel --> Stop the PWM */
		SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1b78:	f8 01       	movw	r30, r16
    1b7a:	ee 0f       	add	r30, r30
    1b7c:	ff 1f       	adc	r31, r31
    1b7e:	ee 0f       	add	r30, r30
    1b80:	ff 1f       	adc	r31, r31
    1b82:	e0 0f       	add	r30, r16
    1b84:	f1 1f       	adc	r31, r17
    1b86:	ef 51       	subi	r30, 0x1F	; 31
    1b88:	fc 4f       	sbci	r31, 0xFC	; 252
    1b8a:	80 81       	ld	r24, Z
    1b8c:	0e 94 ee 19 	call	0x33dc	; 0x33dc <SWPwm_Stop>
    1b90:	12 c0       	rjmp	.+36     	; 0x1bb6 <Motor_stop+0xc0>
	}else
	{/* In case that there is another motor using the same PWM Channel */
		if (gau8_MotorsState[u8_loopIndex] == MOTOR_STOPPED) /* Check if the other motor is not running */
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	ea 5c       	subi	r30, 0xCA	; 202
    1b96:	fb 4f       	sbci	r31, 0xFB	; 251
    1b98:	80 81       	ld	r24, Z
    1b9a:	81 11       	cpse	r24, r1
    1b9c:	0c c0       	rjmp	.+24     	; 0x1bb6 <Motor_stop+0xc0>
		{/* In case that the other motor is not running --> Stop the PWM */
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	ee 0f       	add	r30, r30
    1ba2:	ff 1f       	adc	r31, r31
    1ba4:	ee 0f       	add	r30, r30
    1ba6:	ff 1f       	adc	r31, r31
    1ba8:	e0 0f       	add	r30, r16
    1baa:	f1 1f       	adc	r31, r17
    1bac:	ef 51       	subi	r30, 0x1F	; 31
    1bae:	fc 4f       	sbci	r31, 0xFC	; 252
    1bb0:	80 81       	ld	r24, Z
    1bb2:	0e 94 ee 19 	call	0x33dc	; 0x33dc <SWPwm_Stop>
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	ea 5c       	subi	r30, 0xCA	; 202
    1bba:	fb 4f       	sbci	r31, 0xFB	; 251
    1bbc:	10 82       	st	Z, r1
	return MOTOR_STATUS_ERROR_OK;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	01 c0       	rjmp	.+2      	; 0x1bc4 <Motor_stop+0xce>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    1bc2:	82 e0       	ldi	r24, 0x02	; 2
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
	return MOTOR_STATUS_ERROR_OK;
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	1f 91       	pop	r17
    1bca:	0f 91       	pop	r16
    1bcc:	ff 90       	pop	r15
    1bce:	ef 90       	pop	r14
    1bd0:	df 90       	pop	r13
    1bd2:	08 95       	ret

00001bd4 <Motor_run>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Move the motor in the given direction.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to move the motor forward with given speed in % */
enuMotor_Status_t Motor_run(uint8_t u8_motorID, uint8_t u8_speed, uint8_t u8_direction)
{
    1bd4:	ff 92       	push	r15
    1bd6:	0f 93       	push	r16
    1bd8:	1f 93       	push	r17
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
    1bde:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <gu8_MotorModuleStatus>
    1be2:	96 30       	cpi	r25, 0x06	; 6
    1be4:	09 f0       	breq	.+2      	; 0x1be8 <Motor_run+0x14>
    1be6:	57 c0       	rjmp	.+174    	; 0x1c96 <Motor_run+0xc2>
	{
		return MOTOR_STATUS_UNINIT;
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    1be8:	81 11       	cpse	r24, r1
    1bea:	57 c0       	rjmp	.+174    	; 0x1c9a <Motor_run+0xc6>
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
    1bec:	65 36       	cpi	r22, 0x65	; 101
    1bee:	08 f0       	brcs	.+2      	; 0x1bf2 <Motor_run+0x1e>
    1bf0:	56 c0       	rjmp	.+172    	; 0x1c9e <Motor_run+0xca>
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
    1bf2:	42 30       	cpi	r20, 0x02	; 2
    1bf4:	08 f0       	brcs	.+2      	; 0x1bf8 <Motor_run+0x24>
    1bf6:	55 c0       	rjmp	.+170    	; 0x1ca2 <Motor_run+0xce>
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
    1bf8:	08 2f       	mov	r16, r24
    1bfa:	10 e0       	ldi	r17, 0x00	; 0
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	ea 5c       	subi	r30, 0xCA	; 202
    1c00:	fb 4f       	sbci	r31, 0xFB	; 251
    1c02:	90 81       	ld	r25, Z
    1c04:	91 30       	cpi	r25, 0x01	; 1
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <Motor_run+0x36>
    1c08:	4e c0       	rjmp	.+156    	; 0x1ca6 <Motor_run+0xd2>
    1c0a:	f6 2e       	mov	r15, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_speed == 0) 
    1c0c:	61 11       	cpse	r22, r1
    1c0e:	04 c0       	rjmp	.+8      	; 0x1c18 <Motor_run+0x44>
	{
		Motor_stop(u8_motorID);
    1c10:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Motor_stop>
		return MOTOR_STATUS_ERROR_OK;
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	48 c0       	rjmp	.+144    	; 0x1ca8 <Motor_run+0xd4>
	}
	if(u8_direction == MOTOR_DIR_CLK_WISE) /* Activate the Motor in the Clock Wise Direction */
    1c18:	41 11       	cpse	r20, r1
    1c1a:	12 c0       	rjmp	.+36     	; 0x1c40 <Motor_run+0x6c>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_HIGH);
    1c1c:	25 e0       	ldi	r18, 0x05	; 5
    1c1e:	20 9f       	mul	r18, r16
    1c20:	c0 01       	movw	r24, r0
    1c22:	21 9f       	mul	r18, r17
    1c24:	90 0d       	add	r25, r0
    1c26:	11 24       	eor	r1, r1
    1c28:	ec 01       	movw	r28, r24
    1c2a:	cf 51       	subi	r28, 0x1F	; 31
    1c2c:	dc 4f       	sbci	r29, 0xFC	; 252
    1c2e:	61 e0       	ldi	r22, 0x01	; 1
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    1c3e:	13 c0       	rjmp	.+38     	; 0x1c66 <Motor_run+0x92>
	}else if(u8_direction == MOTOR_DIR_ANTI_CLK_WISE) /* Activate the Motor in the Anti Clock Wise Direction */
    1c40:	41 30       	cpi	r20, 0x01	; 1
    1c42:	89 f4       	brne	.+34     	; 0x1c66 <Motor_run+0x92>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    1c44:	25 e0       	ldi	r18, 0x05	; 5
    1c46:	20 9f       	mul	r18, r16
    1c48:	c0 01       	movw	r24, r0
    1c4a:	21 9f       	mul	r18, r17
    1c4c:	90 0d       	add	r25, r0
    1c4e:	11 24       	eor	r1, r1
    1c50:	ec 01       	movw	r28, r24
    1c52:	cf 51       	subi	r28, 0x1F	; 31
    1c54:	dc 4f       	sbci	r29, 0xFC	; 252
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_HIGH);
    1c5e:	61 e0       	ldi	r22, 0x01	; 1
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
	}
	
	/* Change the state of the Motor to Running */
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
    1c66:	f8 01       	movw	r30, r16
    1c68:	ea 5c       	subi	r30, 0xCA	; 202
    1c6a:	fb 4f       	sbci	r31, 0xFB	; 251
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	80 83       	st	Z, r24
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
    1c70:	f8 01       	movw	r30, r16
    1c72:	ee 0f       	add	r30, r30
    1c74:	ff 1f       	adc	r31, r31
    1c76:	ee 0f       	add	r30, r30
    1c78:	ff 1f       	adc	r31, r31
    1c7a:	e0 0f       	add	r30, r16
    1c7c:	f1 1f       	adc	r31, r17
    1c7e:	ef 51       	subi	r30, 0x1F	; 31
    1c80:	fc 4f       	sbci	r31, 0xFC	; 252
    1c82:	43 81       	ldd	r20, Z+3	; 0x03
    1c84:	54 81       	ldd	r21, Z+4	; 0x04
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	2f 2d       	mov	r18, r15
    1c8c:	80 81       	ld	r24, Z
    1c8e:	0e 94 ba 18 	call	0x3174	; 0x3174 <SWPwm_Start>
	
	return MOTOR_STATUS_ERROR_OK;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	09 c0       	rjmp	.+18     	; 0x1ca8 <Motor_run+0xd4>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_UNINIT;
    1c96:	87 e0       	ldi	r24, 0x07	; 7
    1c98:	07 c0       	rjmp	.+14     	; 0x1ca8 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    1c9a:	82 e0       	ldi	r24, 0x02	; 2
    1c9c:	05 c0       	rjmp	.+10     	; 0x1ca8 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
    1c9e:	83 e0       	ldi	r24, 0x03	; 3
    1ca0:	03 c0       	rjmp	.+6      	; 0x1ca8 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
    1ca2:	84 e0       	ldi	r24, 0x04	; 4
    1ca4:	01 c0       	rjmp	.+2      	; 0x1ca8 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
	{
		return MOTOR_STATUS_ERROR_RUNNING;
    1ca6:	85 e0       	ldi	r24, 0x05	; 5
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
	
	return MOTOR_STATUS_ERROR_OK;
}
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	1f 91       	pop	r17
    1cae:	0f 91       	pop	r16
    1cb0:	ff 90       	pop	r15
    1cb2:	08 95       	ret

00001cb4 <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
    1cb8:	c0 91 38 04 	lds	r28, 0x0438	; 0x800438 <gu8_counter>
    1cbc:	d0 e0       	ldi	r29, 0x00	; 0
    1cbe:	0e 94 93 1a 	call	0x3526	; 0x3526 <Uart_DataRegister>
    1cc2:	c7 5c       	subi	r28, 0xC7	; 199
    1cc4:	db 4f       	sbci	r29, 0xFB	; 251
    1cc6:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
    1cc8:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <gu8_counter>
    1ccc:	e9 2f       	mov	r30, r25
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	e7 5c       	subi	r30, 0xC7	; 199
    1cd2:	fb 4f       	sbci	r31, 0xFB	; 251
    1cd4:	80 81       	ld	r24, Z
    1cd6:	8d 30       	cpi	r24, 0x0D	; 13
    1cd8:	71 f4       	brne	.+28     	; 0x1cf6 <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    1cda:	0e 94 4c 1a 	call	0x3498	; 0x3498 <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
    1cde:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <gu8_counter>
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	e7 5c       	subi	r30, 0xC7	; 199
    1ce6:	fb 4f       	sbci	r31, 0xFB	; 251
    1ce8:	10 82       	st	Z, r1
		gu8_counter = 0;
    1cea:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <gu8_counter>
		gu8_flag = 1;
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <gu8_flag>
    1cf4:	1d c0       	rjmp	.+58     	; 0x1d30 <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
    1cf6:	88 30       	cpi	r24, 0x08	; 8
    1cf8:	51 f4       	brne	.+20     	; 0x1d0e <Uart_RXC_ISR+0x5a>
    1cfa:	99 23       	and	r25, r25
    1cfc:	41 f0       	breq	.+16     	; 0x1d0e <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    1cfe:	0e 94 4c 1a 	call	0x3498	; 0x3498 <Uart_sendByte>
		gu8_counter--;
    1d02:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <gu8_counter>
    1d06:	81 50       	subi	r24, 0x01	; 1
    1d08:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <gu8_counter>
    1d0c:	11 c0       	rjmp	.+34     	; 0x1d30 <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
    1d0e:	88 30       	cpi	r24, 0x08	; 8
    1d10:	79 f0       	breq	.+30     	; 0x1d30 <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
    1d12:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <gu8_visibility>
    1d16:	91 30       	cpi	r25, 0x01	; 1
    1d18:	21 f4       	brne	.+8      	; 0x1d22 <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
    1d1a:	8a e2       	ldi	r24, 0x2A	; 42
    1d1c:	0e 94 4c 1a 	call	0x3498	; 0x3498 <Uart_sendByte>
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
    1d22:	0e 94 4c 1a 	call	0x3498	; 0x3498 <Uart_sendByte>
		}
		gu8_counter++;
    1d26:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <gu8_counter>
    1d2a:	8f 5f       	subi	r24, 0xFF	; 255
    1d2c:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <gu8_counter>
	}
}
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	08 95       	ret

00001d36 <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
    1d36:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <genu_TerminalModuleState>
    1d3a:	83 30       	cpi	r24, 0x03	; 3
    1d3c:	81 f0       	breq	.+32     	; 0x1d5e <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
    1d3e:	0e 94 36 1a 	call	0x346c	; 0x346c <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	11 f0       	breq	.+4      	; 0x1d4a <Terminal_init+0x14>
    1d46:	87 30       	cpi	r24, 0x07	; 7
    1d48:	49 f4       	brne	.+18     	; 0x1d5c <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
    1d4a:	8a e5       	ldi	r24, 0x5A	; 90
    1d4c:	9e e0       	ldi	r25, 0x0E	; 14
    1d4e:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
    1d52:	83 e0       	ldi	r24, 0x03	; 3
    1d54:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
    1d5e:	08 95       	ret

00001d60 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
    1d60:	cf 93       	push	r28
    1d62:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	81 f0       	breq	.+32     	; 0x1d88 <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    1d68:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <genu_TerminalModuleState>
    1d6c:	22 30       	cpi	r18, 0x02	; 2
    1d6e:	79 f0       	breq	.+30     	; 0x1d8e <Terminal_Out+0x2e>
    1d70:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
    1d72:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <stringLength>
    1d76:	68 2f       	mov	r22, r24
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	0e 94 57 1a 	call	0x34ae	; 0x34ae <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
    1d80:	81 30       	cpi	r24, 0x01	; 1
    1d82:	21 f0       	breq	.+8      	; 0x1d8c <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	03 c0       	rjmp	.+6      	; 0x1d8e <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    1d88:	24 e0       	ldi	r18, 0x04	; 4
    1d8a:	01 c0       	rjmp	.+2      	; 0x1d8e <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
    1d8c:	21 e0       	ldi	r18, 0x01	; 1
}
    1d8e:	82 2f       	mov	r24, r18
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	08 95       	ret

00001d96 <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
    1d96:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
    1d98:	89 2b       	or	r24, r25
    1d9a:	a1 f0       	breq	.+40     	; 0x1dc4 <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    1d9c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <genu_TerminalModuleState>
    1da0:	82 30       	cpi	r24, 0x02	; 2
    1da2:	99 f0       	breq	.+38     	; 0x1dca <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
    1da4:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <gu8_flag>
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	71 f4       	brne	.+28     	; 0x1dc8 <Terminal_In+0x32>
	{
		gu8_flag = 0;
    1dac:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
    1db0:	89 e3       	ldi	r24, 0x39	; 57
    1db2:	94 e0       	ldi	r25, 0x04	; 4
    1db4:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <stringCopy>
		EmptyString(gau8_data);
    1db8:	89 e3       	ldi	r24, 0x39	; 57
    1dba:	94 e0       	ldi	r25, 0x04	; 4
    1dbc:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
    1dc0:	85 e0       	ldi	r24, 0x05	; 5
    1dc2:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    1dc4:	84 e0       	ldi	r24, 0x04	; 4
    1dc6:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
}
    1dca:	08 95       	ret

00001dcc <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
    1dd2:	08 95       	ret

00001dd4 <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
    1dd4:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	08 95       	ret

00001ddc <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
    1ddc:	0e 94 59 08 	call	0x10b2	; 0x10b2 <App_start>
    1de0:	ff cf       	rjmp	.-2      	; 0x1de0 <main+0x4>

00001de2 <Adc_init>:
		f32_Resolution = (1000*ADC_AREF_VALUE)/ADC_STEPS_NUM;
	}
	*pu32_data = u16_Result*f32_Resolution;
		
	return ADC_STATUS_ERROR_OK;
}
    1de2:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <genuAdc_Status>
    1de6:	87 30       	cpi	r24, 0x07	; 7
    1de8:	11 f1       	breq	.+68     	; 0x1e2e <Adc_init+0x4c>
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	13 c0       	rjmp	.+38     	; 0x1e14 <Adc_init+0x32>
    1dee:	3b b3       	in	r19, 0x1b	; 27
    1df0:	e2 2f       	mov	r30, r18
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	ee 0f       	add	r30, r30
    1df6:	ff 1f       	adc	r31, r31
    1df8:	e8 57       	subi	r30, 0x78	; 120
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	00 80       	ld	r0, Z
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <Adc_init+0x26>
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	0a 94       	dec	r0
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <Adc_init+0x22>
    1e0c:	80 95       	com	r24
    1e0e:	83 23       	and	r24, r19
    1e10:	8b bb       	out	0x1b, r24	; 27
    1e12:	2f 5f       	subi	r18, 0xFF	; 255
    1e14:	22 23       	and	r18, r18
    1e16:	59 f3       	breq	.-42     	; 0x1dee <Adc_init+0xc>
    1e18:	97 e0       	ldi	r25, 0x07	; 7
    1e1a:	96 b9       	out	0x06, r25	; 6
    1e1c:	86 b1       	in	r24, 0x06	; 6
    1e1e:	8f 7d       	andi	r24, 0xDF	; 223
    1e20:	86 b9       	out	0x06, r24	; 6
    1e22:	86 b1       	in	r24, 0x06	; 6
    1e24:	86 b9       	out	0x06, r24	; 6
    1e26:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <genuAdc_Status>
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	08 95       	ret
    1e2e:	88 e0       	ldi	r24, 0x08	; 8
    1e30:	08 95       	ret

00001e32 <Adc_start>:
    1e32:	cf 92       	push	r12
    1e34:	df 92       	push	r13
    1e36:	ef 92       	push	r14
    1e38:	ff 92       	push	r15
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <genuAdc_Status>
    1e42:	97 30       	cpi	r25, 0x07	; 7
    1e44:	09 f0       	breq	.+2      	; 0x1e48 <Adc_start+0x16>
    1e46:	61 c0       	rjmp	.+194    	; 0x1f0a <Adc_start+0xd8>
    1e48:	61 15       	cp	r22, r1
    1e4a:	71 05       	cpc	r23, r1
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <Adc_start+0x1e>
    1e4e:	5f c0       	rjmp	.+190    	; 0x1f0e <Adc_start+0xdc>
    1e50:	37 b1       	in	r19, 0x07	; 7
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	fc 01       	movw	r30, r24
    1e56:	ee 0f       	add	r30, r30
    1e58:	ff 1f       	adc	r31, r31
    1e5a:	e8 57       	subi	r30, 0x78	; 120
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	20 81       	ld	r18, Z
    1e60:	23 2b       	or	r18, r19
    1e62:	27 b9       	out	0x07, r18	; 7
    1e64:	47 b1       	in	r20, 0x07	; 7
    1e66:	31 81       	ldd	r19, Z+1	; 0x01
    1e68:	50 e4       	ldi	r21, 0x40	; 64
    1e6a:	35 9f       	mul	r19, r21
    1e6c:	90 01       	movw	r18, r0
    1e6e:	11 24       	eor	r1, r1
    1e70:	24 2b       	or	r18, r20
    1e72:	27 b9       	out	0x07, r18	; 7
    1e74:	26 b1       	in	r18, 0x06	; 6
    1e76:	20 68       	ori	r18, 0x80	; 128
    1e78:	26 b9       	out	0x06, r18	; 6
    1e7a:	26 b1       	in	r18, 0x06	; 6
    1e7c:	20 64       	ori	r18, 0x40	; 64
    1e7e:	26 b9       	out	0x06, r18	; 6
    1e80:	34 9b       	sbis	0x06, 4	; 6
    1e82:	fe cf       	rjmp	.-4      	; 0x1e80 <Adc_start+0x4e>
    1e84:	44 b1       	in	r20, 0x04	; 4
    1e86:	25 b1       	in	r18, 0x05	; 5
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	32 2f       	mov	r19, r18
    1e8c:	22 27       	eor	r18, r18
    1e8e:	24 2b       	or	r18, r20
    1e90:	88 0f       	add	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	fc 01       	movw	r30, r24
    1e96:	e8 57       	subi	r30, 0x78	; 120
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	81 81       	ldd	r24, Z+1	; 0x01
    1e9c:	83 30       	cpi	r24, 0x03	; 3
    1e9e:	41 f0       	breq	.+16     	; 0x1eb0 <Adc_start+0x7e>
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	69 f0       	breq	.+26     	; 0x1ebe <Adc_start+0x8c>
    1ea4:	88 23       	and	r24, r24
    1ea6:	a1 f0       	breq	.+40     	; 0x1ed0 <Adc_start+0x9e>
    1ea8:	c1 2c       	mov	r12, r1
    1eaa:	d1 2c       	mov	r13, r1
    1eac:	76 01       	movw	r14, r12
    1eae:	18 c0       	rjmp	.+48     	; 0x1ee0 <Adc_start+0xae>
    1eb0:	c1 2c       	mov	r12, r1
    1eb2:	d1 2c       	mov	r13, r1
    1eb4:	76 01       	movw	r14, r12
    1eb6:	68 94       	set
    1eb8:	e5 f8       	bld	r14, 5
    1eba:	f6 f8       	bld	r15, 6
    1ebc:	11 c0       	rjmp	.+34     	; 0x1ee0 <Adc_start+0xae>
    1ebe:	0f 2e       	mov	r0, r31
    1ec0:	c1 2c       	mov	r12, r1
    1ec2:	f0 e4       	ldi	r31, 0x40	; 64
    1ec4:	df 2e       	mov	r13, r31
    1ec6:	fc e9       	ldi	r31, 0x9C	; 156
    1ec8:	ef 2e       	mov	r14, r31
    1eca:	fd 2c       	mov	r15, r13
    1ecc:	f0 2d       	mov	r31, r0
    1ece:	08 c0       	rjmp	.+16     	; 0x1ee0 <Adc_start+0xae>
    1ed0:	0f 2e       	mov	r0, r31
    1ed2:	c1 2c       	mov	r12, r1
    1ed4:	f0 e4       	ldi	r31, 0x40	; 64
    1ed6:	df 2e       	mov	r13, r31
    1ed8:	fc e9       	ldi	r31, 0x9C	; 156
    1eda:	ef 2e       	mov	r14, r31
    1edc:	fd 2c       	mov	r15, r13
    1ede:	f0 2d       	mov	r31, r0
    1ee0:	eb 01       	movw	r28, r22
    1ee2:	b9 01       	movw	r22, r18
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 18 1c 	call	0x3830	; 0x3830 <__floatunsisf>
    1eec:	a7 01       	movw	r20, r14
    1eee:	96 01       	movw	r18, r12
    1ef0:	0e 94 a6 1c 	call	0x394c	; 0x394c <__mulsf3>
    1ef4:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <__fixunssfsi>
    1ef8:	68 83       	st	Y, r22
    1efa:	79 83       	std	Y+1, r23	; 0x01
    1efc:	8a 83       	std	Y+2, r24	; 0x02
    1efe:	9b 83       	std	Y+3, r25	; 0x03
    1f00:	86 b1       	in	r24, 0x06	; 6
    1f02:	80 61       	ori	r24, 0x10	; 16
    1f04:	86 b9       	out	0x06, r24	; 6
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	03 c0       	rjmp	.+6      	; 0x1f10 <Adc_start+0xde>
    1f0a:	86 e0       	ldi	r24, 0x06	; 6
    1f0c:	01 c0       	rjmp	.+2      	; 0x1f10 <Adc_start+0xde>
    1f0e:	85 e0       	ldi	r24, 0x05	; 5
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	ff 90       	pop	r15
    1f16:	ef 90       	pop	r14
    1f18:	df 90       	pop	r13
    1f1a:	cf 90       	pop	r12
    1f1c:	08 95       	ret

00001f1e <__vector_16>:

ISR(ADC_IRQ)
{
    1f1e:	1f 92       	push	r1
    1f20:	0f 92       	push	r0
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	0f 92       	push	r0
    1f26:	11 24       	eor	r1, r1
    1f28:	2f 93       	push	r18
    1f2a:	3f 93       	push	r19
    1f2c:	4f 93       	push	r20
    1f2e:	5f 93       	push	r21
    1f30:	6f 93       	push	r22
    1f32:	7f 93       	push	r23
    1f34:	8f 93       	push	r24
    1f36:	9f 93       	push	r25
    1f38:	af 93       	push	r26
    1f3a:	bf 93       	push	r27
    1f3c:	ef 93       	push	r30
    1f3e:	ff 93       	push	r31
	(*ADC_CallBackPtr)();
    1f40:	e0 91 39 05 	lds	r30, 0x0539	; 0x800539 <ADC_CallBackPtr>
    1f44:	f0 91 3a 05 	lds	r31, 0x053A	; 0x80053a <ADC_CallBackPtr+0x1>
    1f48:	09 95       	icall
    1f4a:	ff 91       	pop	r31
    1f4c:	ef 91       	pop	r30
    1f4e:	bf 91       	pop	r27
    1f50:	af 91       	pop	r26
    1f52:	9f 91       	pop	r25
    1f54:	8f 91       	pop	r24
    1f56:	7f 91       	pop	r23
    1f58:	6f 91       	pop	r22
    1f5a:	5f 91       	pop	r21
    1f5c:	4f 91       	pop	r20
    1f5e:	3f 91       	pop	r19
    1f60:	2f 91       	pop	r18
    1f62:	0f 90       	pop	r0
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	0f 90       	pop	r0
    1f68:	1f 90       	pop	r1
    1f6a:	18 95       	reti

00001f6c <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
    1f6c:	2f 92       	push	r2
    1f6e:	3f 92       	push	r3
    1f70:	4f 92       	push	r4
    1f72:	5f 92       	push	r5
    1f74:	6f 92       	push	r6
    1f76:	7f 92       	push	r7
    1f78:	8f 92       	push	r8
    1f7a:	9f 92       	push	r9
    1f7c:	af 92       	push	r10
    1f7e:	bf 92       	push	r11
    1f80:	cf 92       	push	r12
    1f82:	df 92       	push	r13
    1f84:	ef 92       	push	r14
    1f86:	ff 92       	push	r15
    1f88:	0f 93       	push	r16
    1f8a:	1f 93       	push	r17
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <Delay_ms+0x26>
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <Delay_ms+0x28>
    1f94:	1f 92       	push	r1
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	22 2e       	mov	r2, r18
    1f9c:	33 2e       	mov	r3, r19
    1f9e:	44 2e       	mov	r4, r20
    1fa0:	55 2e       	mov	r5, r21
    1fa2:	66 2e       	mov	r6, r22
    1fa4:	79 83       	std	Y+1, r23	; 0x01
    1fa6:	8a 83       	std	Y+2, r24	; 0x02
    1fa8:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    1faa:	91 2c       	mov	r9, r1
    1fac:	1d 82       	std	Y+5, r1	; 0x05
    1fae:	1c 82       	std	Y+4, r1	; 0x04
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	e0 e0       	ldi	r30, 0x00	; 0
    1fb6:	71 2c       	mov	r7, r1
    1fb8:	81 2c       	mov	r8, r1
    1fba:	3d c0       	rjmp	.+122    	; 0x2036 <Delay_ms+0xca>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
    1fbc:	2c 2d       	mov	r18, r12
    1fbe:	3d 2d       	mov	r19, r13
    1fc0:	4e 2d       	mov	r20, r14
    1fc2:	5f 2d       	mov	r21, r15
    1fc4:	60 2f       	mov	r22, r16
    1fc6:	71 2f       	mov	r23, r17
    1fc8:	8a 2d       	mov	r24, r10
    1fca:	9b 2d       	mov	r25, r11
    1fcc:	a1 e0       	ldi	r26, 0x01	; 1
    1fce:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <__adddi3_s8>
    1fd2:	c2 2e       	mov	r12, r18
    1fd4:	d3 2e       	mov	r13, r19
    1fd6:	e4 2e       	mov	r14, r20
    1fd8:	f5 2e       	mov	r15, r21
    1fda:	06 2f       	mov	r16, r22
    1fdc:	17 2f       	mov	r17, r23
    1fde:	a8 2e       	mov	r10, r24
    1fe0:	b9 2e       	mov	r11, r25
    1fe2:	08 c0       	rjmp	.+16     	; 0x1ff4 <Delay_ms+0x88>
    1fe4:	c1 2c       	mov	r12, r1
    1fe6:	d1 2c       	mov	r13, r1
    1fe8:	e1 2c       	mov	r14, r1
    1fea:	f1 2c       	mov	r15, r1
    1fec:	00 e0       	ldi	r16, 0x00	; 0
    1fee:	10 e0       	ldi	r17, 0x00	; 0
    1ff0:	a1 2c       	mov	r10, r1
    1ff2:	b1 2c       	mov	r11, r1
    1ff4:	2c 2d       	mov	r18, r12
    1ff6:	3d 2d       	mov	r19, r13
    1ff8:	4e 2d       	mov	r20, r14
    1ffa:	5f 2d       	mov	r21, r15
    1ffc:	60 2f       	mov	r22, r16
    1ffe:	71 2f       	mov	r23, r17
    2000:	8a 2d       	mov	r24, r10
    2002:	9b 2d       	mov	r25, r11
    2004:	ac e0       	ldi	r26, 0x0C	; 12
    2006:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__cmpdi2_s8>
    200a:	c1 f2       	breq	.-80     	; 0x1fbc <Delay_ms+0x50>
    200c:	b8 f2       	brcs	.-82     	; 0x1fbc <Delay_ms+0x50>
    200e:	8c 81       	ldd	r24, Y+4	; 0x04

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    2010:	29 2d       	mov	r18, r9
    2012:	3d 81       	ldd	r19, Y+5	; 0x05
    2014:	48 2f       	mov	r20, r24
    2016:	5b 2f       	mov	r21, r27
    2018:	6f 2f       	mov	r22, r31
    201a:	7e 2f       	mov	r23, r30
    201c:	87 2d       	mov	r24, r7
    201e:	98 2d       	mov	r25, r8
    2020:	a1 e0       	ldi	r26, 0x01	; 1
    2022:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <__adddi3_s8>
    2026:	92 2e       	mov	r9, r18
    2028:	3d 83       	std	Y+5, r19	; 0x05
    202a:	4c 83       	std	Y+4, r20	; 0x04
    202c:	b5 2f       	mov	r27, r21
    202e:	f6 2f       	mov	r31, r22
    2030:	e7 2f       	mov	r30, r23
    2032:	78 2e       	mov	r7, r24
    2034:	89 2e       	mov	r8, r25
    2036:	29 2d       	mov	r18, r9
    2038:	3d 81       	ldd	r19, Y+5	; 0x05
    203a:	4c 81       	ldd	r20, Y+4	; 0x04
    203c:	5b 2f       	mov	r21, r27
    203e:	6f 2f       	mov	r22, r31
    2040:	7e 2f       	mov	r23, r30
    2042:	87 2d       	mov	r24, r7
    2044:	98 2d       	mov	r25, r8
    2046:	a2 2c       	mov	r10, r2
    2048:	b3 2c       	mov	r11, r3
    204a:	c4 2c       	mov	r12, r4
    204c:	d5 2c       	mov	r13, r5
    204e:	e6 2c       	mov	r14, r6
    2050:	f9 80       	ldd	r15, Y+1	; 0x01
    2052:	0a 81       	ldd	r16, Y+2	; 0x02
    2054:	1b 81       	ldd	r17, Y+3	; 0x03
    2056:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <__cmpdi2>
    205a:	20 f2       	brcs	.-120    	; 0x1fe4 <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	1f 91       	pop	r17
    206c:	0f 91       	pop	r16
    206e:	ff 90       	pop	r15
    2070:	ef 90       	pop	r14
    2072:	df 90       	pop	r13
    2074:	cf 90       	pop	r12
    2076:	bf 90       	pop	r11
    2078:	af 90       	pop	r10
    207a:	9f 90       	pop	r9
    207c:	8f 90       	pop	r8
    207e:	7f 90       	pop	r7
    2080:	6f 90       	pop	r6
    2082:	5f 90       	pop	r5
    2084:	4f 90       	pop	r4
    2086:	3f 90       	pop	r3
    2088:	2f 90       	pop	r2
    208a:	08 95       	ret

0000208c <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
    208c:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
    208e:	89 2b       	or	r24, r25
    2090:	09 f4       	brne	.+2      	; 0x2094 <Dio_init+0x8>
    2092:	e4 c0       	rjmp	.+456    	; 0x225c <Dio_init+0x1d0>
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	d7 c0       	rjmp	.+430    	; 0x2246 <Dio_init+0x1ba>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
    2098:	e9 2f       	mov	r30, r25
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	ee 0f       	add	r30, r30
    209e:	ff 1f       	adc	r31, r31
    20a0:	ee 0f       	add	r30, r30
    20a2:	ff 1f       	adc	r31, r31
    20a4:	e4 0f       	add	r30, r20
    20a6:	f5 1f       	adc	r31, r21
    20a8:	31 81       	ldd	r19, Z+1	; 0x01
    20aa:	38 30       	cpi	r19, 0x08	; 8
    20ac:	08 f0       	brcs	.+2      	; 0x20b0 <Dio_init+0x24>
    20ae:	d8 c0       	rjmp	.+432    	; 0x2260 <Dio_init+0x1d4>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
    20b0:	20 81       	ld	r18, Z
    20b2:	21 30       	cpi	r18, 0x01	; 1
    20b4:	c1 f1       	breq	.+112    	; 0x2126 <Dio_init+0x9a>
    20b6:	38 f0       	brcs	.+14     	; 0x20c6 <Dio_init+0x3a>
    20b8:	22 30       	cpi	r18, 0x02	; 2
    20ba:	09 f4       	brne	.+2      	; 0x20be <Dio_init+0x32>
    20bc:	64 c0       	rjmp	.+200    	; 0x2186 <Dio_init+0xfa>
    20be:	23 30       	cpi	r18, 0x03	; 3
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <Dio_init+0x38>
    20c2:	91 c0       	rjmp	.+290    	; 0x21e6 <Dio_init+0x15a>
    20c4:	cf c0       	rjmp	.+414    	; 0x2264 <Dio_init+0x1d8>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    20c6:	2a b3       	in	r18, 0x1a	; 26
    20c8:	61 e0       	ldi	r22, 0x01	; 1
    20ca:	70 e0       	ldi	r23, 0x00	; 0
    20cc:	db 01       	movw	r26, r22
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <Dio_init+0x48>
    20d0:	aa 0f       	add	r26, r26
    20d2:	bb 1f       	adc	r27, r27
    20d4:	3a 95       	dec	r19
    20d6:	e2 f7       	brpl	.-8      	; 0x20d0 <Dio_init+0x44>
    20d8:	8a 2f       	mov	r24, r26
    20da:	80 95       	com	r24
    20dc:	82 23       	and	r24, r18
    20de:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    20e0:	aa b3       	in	r26, 0x1a	; 26
    20e2:	82 81       	ldd	r24, Z+2	; 0x02
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	01 80       	ldd	r0, Z+1	; 0x01
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <Dio_init+0x64>
    20ec:	22 0f       	add	r18, r18
    20ee:	33 1f       	adc	r19, r19
    20f0:	0a 94       	dec	r0
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <Dio_init+0x60>
    20f4:	2a 2b       	or	r18, r26
    20f6:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    20f8:	8b b3       	in	r24, 0x1b	; 27
    20fa:	01 80       	ldd	r0, Z+1	; 0x01
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <Dio_init+0x76>
    20fe:	66 0f       	add	r22, r22
    2100:	77 1f       	adc	r23, r23
    2102:	0a 94       	dec	r0
    2104:	e2 f7       	brpl	.-8      	; 0x20fe <Dio_init+0x72>
    2106:	60 95       	com	r22
    2108:	68 23       	and	r22, r24
    210a:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    210c:	6b b3       	in	r22, 0x1b	; 27
    210e:	83 81       	ldd	r24, Z+3	; 0x03
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	01 80       	ldd	r0, Z+1	; 0x01
    2116:	02 c0       	rjmp	.+4      	; 0x211c <Dio_init+0x90>
    2118:	22 0f       	add	r18, r18
    211a:	33 1f       	adc	r19, r19
    211c:	0a 94       	dec	r0
    211e:	e2 f7       	brpl	.-8      	; 0x2118 <Dio_init+0x8c>
    2120:	26 2b       	or	r18, r22
    2122:	2b bb       	out	0x1b, r18	; 27
				break;
    2124:	8f c0       	rjmp	.+286    	; 0x2244 <Dio_init+0x1b8>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2126:	27 b3       	in	r18, 0x17	; 23
    2128:	61 e0       	ldi	r22, 0x01	; 1
    212a:	70 e0       	ldi	r23, 0x00	; 0
    212c:	db 01       	movw	r26, r22
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <Dio_init+0xa8>
    2130:	aa 0f       	add	r26, r26
    2132:	bb 1f       	adc	r27, r27
    2134:	3a 95       	dec	r19
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <Dio_init+0xa4>
    2138:	8a 2f       	mov	r24, r26
    213a:	80 95       	com	r24
    213c:	82 23       	and	r24, r18
    213e:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2140:	a7 b3       	in	r26, 0x17	; 23
    2142:	82 81       	ldd	r24, Z+2	; 0x02
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	01 80       	ldd	r0, Z+1	; 0x01
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <Dio_init+0xc4>
    214c:	22 0f       	add	r18, r18
    214e:	33 1f       	adc	r19, r19
    2150:	0a 94       	dec	r0
    2152:	e2 f7       	brpl	.-8      	; 0x214c <Dio_init+0xc0>
    2154:	2a 2b       	or	r18, r26
    2156:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2158:	88 b3       	in	r24, 0x18	; 24
    215a:	01 80       	ldd	r0, Z+1	; 0x01
    215c:	02 c0       	rjmp	.+4      	; 0x2162 <Dio_init+0xd6>
    215e:	66 0f       	add	r22, r22
    2160:	77 1f       	adc	r23, r23
    2162:	0a 94       	dec	r0
    2164:	e2 f7       	brpl	.-8      	; 0x215e <Dio_init+0xd2>
    2166:	60 95       	com	r22
    2168:	68 23       	and	r22, r24
    216a:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    216c:	68 b3       	in	r22, 0x18	; 24
    216e:	83 81       	ldd	r24, Z+3	; 0x03
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	01 80       	ldd	r0, Z+1	; 0x01
    2176:	02 c0       	rjmp	.+4      	; 0x217c <Dio_init+0xf0>
    2178:	22 0f       	add	r18, r18
    217a:	33 1f       	adc	r19, r19
    217c:	0a 94       	dec	r0
    217e:	e2 f7       	brpl	.-8      	; 0x2178 <Dio_init+0xec>
    2180:	26 2b       	or	r18, r22
    2182:	28 bb       	out	0x18, r18	; 24
				break;
    2184:	5f c0       	rjmp	.+190    	; 0x2244 <Dio_init+0x1b8>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2186:	24 b3       	in	r18, 0x14	; 20
    2188:	61 e0       	ldi	r22, 0x01	; 1
    218a:	70 e0       	ldi	r23, 0x00	; 0
    218c:	db 01       	movw	r26, r22
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <Dio_init+0x108>
    2190:	aa 0f       	add	r26, r26
    2192:	bb 1f       	adc	r27, r27
    2194:	3a 95       	dec	r19
    2196:	e2 f7       	brpl	.-8      	; 0x2190 <Dio_init+0x104>
    2198:	8a 2f       	mov	r24, r26
    219a:	80 95       	com	r24
    219c:	82 23       	and	r24, r18
    219e:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    21a0:	a4 b3       	in	r26, 0x14	; 20
    21a2:	82 81       	ldd	r24, Z+2	; 0x02
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	01 80       	ldd	r0, Z+1	; 0x01
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <Dio_init+0x124>
    21ac:	22 0f       	add	r18, r18
    21ae:	33 1f       	adc	r19, r19
    21b0:	0a 94       	dec	r0
    21b2:	e2 f7       	brpl	.-8      	; 0x21ac <Dio_init+0x120>
    21b4:	2a 2b       	or	r18, r26
    21b6:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    21b8:	85 b3       	in	r24, 0x15	; 21
    21ba:	01 80       	ldd	r0, Z+1	; 0x01
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <Dio_init+0x136>
    21be:	66 0f       	add	r22, r22
    21c0:	77 1f       	adc	r23, r23
    21c2:	0a 94       	dec	r0
    21c4:	e2 f7       	brpl	.-8      	; 0x21be <Dio_init+0x132>
    21c6:	60 95       	com	r22
    21c8:	68 23       	and	r22, r24
    21ca:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    21cc:	65 b3       	in	r22, 0x15	; 21
    21ce:	83 81       	ldd	r24, Z+3	; 0x03
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	01 80       	ldd	r0, Z+1	; 0x01
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <Dio_init+0x150>
    21d8:	22 0f       	add	r18, r18
    21da:	33 1f       	adc	r19, r19
    21dc:	0a 94       	dec	r0
    21de:	e2 f7       	brpl	.-8      	; 0x21d8 <Dio_init+0x14c>
    21e0:	26 2b       	or	r18, r22
    21e2:	25 bb       	out	0x15, r18	; 21
				break;
    21e4:	2f c0       	rjmp	.+94     	; 0x2244 <Dio_init+0x1b8>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    21e6:	21 b3       	in	r18, 0x11	; 17
    21e8:	61 e0       	ldi	r22, 0x01	; 1
    21ea:	70 e0       	ldi	r23, 0x00	; 0
    21ec:	db 01       	movw	r26, r22
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <Dio_init+0x168>
    21f0:	aa 0f       	add	r26, r26
    21f2:	bb 1f       	adc	r27, r27
    21f4:	3a 95       	dec	r19
    21f6:	e2 f7       	brpl	.-8      	; 0x21f0 <Dio_init+0x164>
    21f8:	8a 2f       	mov	r24, r26
    21fa:	80 95       	com	r24
    21fc:	82 23       	and	r24, r18
    21fe:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2200:	a1 b3       	in	r26, 0x11	; 17
    2202:	82 81       	ldd	r24, Z+2	; 0x02
    2204:	28 2f       	mov	r18, r24
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	01 80       	ldd	r0, Z+1	; 0x01
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <Dio_init+0x184>
    220c:	22 0f       	add	r18, r18
    220e:	33 1f       	adc	r19, r19
    2210:	0a 94       	dec	r0
    2212:	e2 f7       	brpl	.-8      	; 0x220c <Dio_init+0x180>
    2214:	2a 2b       	or	r18, r26
    2216:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2218:	82 b3       	in	r24, 0x12	; 18
    221a:	01 80       	ldd	r0, Z+1	; 0x01
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <Dio_init+0x196>
    221e:	66 0f       	add	r22, r22
    2220:	77 1f       	adc	r23, r23
    2222:	0a 94       	dec	r0
    2224:	e2 f7       	brpl	.-8      	; 0x221e <Dio_init+0x192>
    2226:	60 95       	com	r22
    2228:	68 23       	and	r22, r24
    222a:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    222c:	62 b3       	in	r22, 0x12	; 18
    222e:	83 81       	ldd	r24, Z+3	; 0x03
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	01 80       	ldd	r0, Z+1	; 0x01
    2236:	02 c0       	rjmp	.+4      	; 0x223c <Dio_init+0x1b0>
    2238:	22 0f       	add	r18, r18
    223a:	33 1f       	adc	r19, r19
    223c:	0a 94       	dec	r0
    223e:	e2 f7       	brpl	.-8      	; 0x2238 <Dio_init+0x1ac>
    2240:	26 2b       	or	r18, r22
    2242:	22 bb       	out	0x12, r18	; 18
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
    2244:	9f 5f       	subi	r25, 0xFF	; 255
    2246:	94 31       	cpi	r25, 0x14	; 20
    2248:	08 f4       	brcc	.+2      	; 0x224c <Dio_init+0x1c0>
    224a:	26 cf       	rjmp	.-436    	; 0x2098 <Dio_init+0xc>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
    224c:	50 93 3d 05 	sts	0x053D, r21	; 0x80053d <pstrDio_pinsConfig+0x1>
    2250:	40 93 3c 05 	sts	0x053C, r20	; 0x80053c <pstrDio_pinsConfig>
	u8_Dio_Status = DIO_INITIALIZED;
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
    225a:	08 95       	ret
{
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
    225c:	85 e0       	ldi	r24, 0x05	; 5
    225e:	08 95       	ret
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
    2260:	83 e0       	ldi	r24, 0x03	; 3
    2262:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
    2264:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
    2266:	08 95       	ret

00002268 <Dio_writePin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    2268:	85 31       	cpi	r24, 0x15	; 21
    226a:	08 f0       	brcs	.+2      	; 0x226e <Dio_writePin+0x6>
    226c:	90 c0       	rjmp	.+288    	; 0x238e <Dio_writePin+0x126>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    226e:	90 91 3b 05 	lds	r25, 0x053B	; 0x80053b <u8_Dio_Status>
    2272:	99 23       	and	r25, r25
    2274:	09 f4       	brne	.+2      	; 0x2278 <Dio_writePin+0x10>
    2276:	8d c0       	rjmp	.+282    	; 0x2392 <Dio_writePin+0x12a>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    2278:	e8 2f       	mov	r30, r24
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	cf 01       	movw	r24, r30
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <pstrDio_pinsConfig>
    228a:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <pstrDio_pinsConfig+0x1>
    228e:	e8 0f       	add	r30, r24
    2290:	f9 1f       	adc	r31, r25
    2292:	80 81       	ld	r24, Z
    2294:	81 30       	cpi	r24, 0x01	; 1
    2296:	21 f1       	breq	.+72     	; 0x22e0 <Dio_writePin+0x78>
    2298:	30 f0       	brcs	.+12     	; 0x22a6 <Dio_writePin+0x3e>
    229a:	82 30       	cpi	r24, 0x02	; 2
    229c:	f1 f1       	breq	.+124    	; 0x231a <Dio_writePin+0xb2>
    229e:	83 30       	cpi	r24, 0x03	; 3
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <Dio_writePin+0x3c>
    22a2:	58 c0       	rjmp	.+176    	; 0x2354 <Dio_writePin+0xec>
    22a4:	78 c0       	rjmp	.+240    	; 0x2396 <Dio_writePin+0x12e>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
    22a6:	61 30       	cpi	r22, 0x01	; 1
    22a8:	69 f4       	brne	.+26     	; 0x22c4 <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    22aa:	2b b3       	in	r18, 0x1b	; 27
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	01 80       	ldd	r0, Z+1	; 0x01
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <Dio_writePin+0x50>
    22b4:	88 0f       	add	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	0a 94       	dec	r0
    22ba:	e2 f7       	brpl	.-8      	; 0x22b4 <Dio_writePin+0x4c>
    22bc:	82 2b       	or	r24, r18
    22be:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    22c4:	2b b3       	in	r18, 0x1b	; 27
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	01 80       	ldd	r0, Z+1	; 0x01
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <Dio_writePin+0x6a>
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	0a 94       	dec	r0
    22d4:	e2 f7       	brpl	.-8      	; 0x22ce <Dio_writePin+0x66>
    22d6:	80 95       	com	r24
    22d8:	82 23       	and	r24, r18
    22da:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
    22e0:	61 30       	cpi	r22, 0x01	; 1
    22e2:	69 f4       	brne	.+26     	; 0x22fe <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    22e4:	28 b3       	in	r18, 0x18	; 24
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	01 80       	ldd	r0, Z+1	; 0x01
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <Dio_writePin+0x8a>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	0a 94       	dec	r0
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <Dio_writePin+0x86>
    22f6:	82 2b       	or	r24, r18
    22f8:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    22fe:	28 b3       	in	r18, 0x18	; 24
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	01 80       	ldd	r0, Z+1	; 0x01
    2306:	02 c0       	rjmp	.+4      	; 0x230c <Dio_writePin+0xa4>
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	0a 94       	dec	r0
    230e:	e2 f7       	brpl	.-8      	; 0x2308 <Dio_writePin+0xa0>
    2310:	80 95       	com	r24
    2312:	82 23       	and	r24, r18
    2314:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
    231a:	61 30       	cpi	r22, 0x01	; 1
    231c:	69 f4       	brne	.+26     	; 0x2338 <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    231e:	25 b3       	in	r18, 0x15	; 21
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	01 80       	ldd	r0, Z+1	; 0x01
    2326:	02 c0       	rjmp	.+4      	; 0x232c <Dio_writePin+0xc4>
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	0a 94       	dec	r0
    232e:	e2 f7       	brpl	.-8      	; 0x2328 <Dio_writePin+0xc0>
    2330:	82 2b       	or	r24, r18
    2332:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2338:	25 b3       	in	r18, 0x15	; 21
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	01 80       	ldd	r0, Z+1	; 0x01
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <Dio_writePin+0xde>
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	0a 94       	dec	r0
    2348:	e2 f7       	brpl	.-8      	; 0x2342 <Dio_writePin+0xda>
    234a:	80 95       	com	r24
    234c:	82 23       	and	r24, r18
    234e:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
    2354:	61 30       	cpi	r22, 0x01	; 1
    2356:	69 f4       	brne	.+26     	; 0x2372 <Dio_writePin+0x10a>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2358:	22 b3       	in	r18, 0x12	; 18
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	01 80       	ldd	r0, Z+1	; 0x01
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <Dio_writePin+0xfe>
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	0a 94       	dec	r0
    2368:	e2 f7       	brpl	.-8      	; 0x2362 <Dio_writePin+0xfa>
    236a:	82 2b       	or	r24, r18
    236c:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2372:	22 b3       	in	r18, 0x12	; 18
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	01 80       	ldd	r0, Z+1	; 0x01
    237a:	02 c0       	rjmp	.+4      	; 0x2380 <Dio_writePin+0x118>
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	0a 94       	dec	r0
    2382:	e2 f7       	brpl	.-8      	; 0x237c <Dio_writePin+0x114>
    2384:	80 95       	com	r24
    2386:	82 23       	and	r24, r18
    2388:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	08 95       	ret
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    238e:	82 e0       	ldi	r24, 0x02	; 2
    2390:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    2392:	86 e0       	ldi	r24, 0x06	; 6
    2394:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    2396:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
    2398:	08 95       	ret

0000239a <Dio_togglePin>:
* Description: Function to Toggle data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    239a:	85 31       	cpi	r24, 0x15	; 21
    239c:	08 f0       	brcs	.+2      	; 0x23a0 <Dio_togglePin+0x6>
    239e:	4f c0       	rjmp	.+158    	; 0x243e <Dio_togglePin+0xa4>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    23a0:	90 91 3b 05 	lds	r25, 0x053B	; 0x80053b <u8_Dio_Status>
    23a4:	99 23       	and	r25, r25
    23a6:	09 f4       	brne	.+2      	; 0x23aa <Dio_togglePin+0x10>
    23a8:	4c c0       	rjmp	.+152    	; 0x2442 <Dio_togglePin+0xa8>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    23aa:	e8 2f       	mov	r30, r24
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	cf 01       	movw	r24, r30
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <pstrDio_pinsConfig>
    23bc:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <pstrDio_pinsConfig+0x1>
    23c0:	e8 0f       	add	r30, r24
    23c2:	f9 1f       	adc	r31, r25
    23c4:	80 81       	ld	r24, Z
    23c6:	81 30       	cpi	r24, 0x01	; 1
    23c8:	99 f0       	breq	.+38     	; 0x23f0 <Dio_togglePin+0x56>
    23ca:	28 f0       	brcs	.+10     	; 0x23d6 <Dio_togglePin+0x3c>
    23cc:	82 30       	cpi	r24, 0x02	; 2
    23ce:	e9 f0       	breq	.+58     	; 0x240a <Dio_togglePin+0x70>
    23d0:	83 30       	cpi	r24, 0x03	; 3
    23d2:	41 f1       	breq	.+80     	; 0x2424 <Dio_togglePin+0x8a>
    23d4:	38 c0       	rjmp	.+112    	; 0x2446 <Dio_togglePin+0xac>
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    23d6:	2b b3       	in	r18, 0x1b	; 27
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	01 80       	ldd	r0, Z+1	; 0x01
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <Dio_togglePin+0x4a>
    23e0:	88 0f       	add	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	0a 94       	dec	r0
    23e6:	e2 f7       	brpl	.-8      	; 0x23e0 <Dio_togglePin+0x46>
    23e8:	82 27       	eor	r24, r18
    23ea:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    23ee:	08 95       	ret
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    23f0:	28 b3       	in	r18, 0x18	; 24
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	01 80       	ldd	r0, Z+1	; 0x01
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <Dio_togglePin+0x64>
    23fa:	88 0f       	add	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	0a 94       	dec	r0
    2400:	e2 f7       	brpl	.-8      	; 0x23fa <Dio_togglePin+0x60>
    2402:	82 27       	eor	r24, r18
    2404:	88 bb       	out	0x18, r24	; 24
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    2406:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    2408:	08 95       	ret
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    240a:	25 b3       	in	r18, 0x15	; 21
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	01 80       	ldd	r0, Z+1	; 0x01
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <Dio_togglePin+0x7e>
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	0a 94       	dec	r0
    241a:	e2 f7       	brpl	.-8      	; 0x2414 <Dio_togglePin+0x7a>
    241c:	82 27       	eor	r24, r18
    241e:	85 bb       	out	0x15, r24	; 21
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    2420:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    2422:	08 95       	ret
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2424:	22 b3       	in	r18, 0x12	; 18
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	01 80       	ldd	r0, Z+1	; 0x01
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <Dio_togglePin+0x98>
    242e:	88 0f       	add	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	0a 94       	dec	r0
    2434:	e2 f7       	brpl	.-8      	; 0x242e <Dio_togglePin+0x94>
    2436:	82 27       	eor	r24, r18
    2438:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    243a:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    243c:	08 95       	ret
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    243e:	82 e0       	ldi	r24, 0x02	; 2
    2440:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    2442:	86 e0       	ldi	r24, 0x06	; 6
    2444:	08 95       	ret
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    2446:	84 e0       	ldi	r24, 0x04	; 4
	}	
	return DIO_STATUS_ERROR_OK;
}
    2448:	08 95       	ret

0000244a <Dio_readPin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    244a:	85 31       	cpi	r24, 0x15	; 21
    244c:	08 f0       	brcs	.+2      	; 0x2450 <Dio_readPin+0x6>
    244e:	7c c0       	rjmp	.+248    	; 0x2548 <Dio_readPin+0xfe>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    2450:	90 91 3b 05 	lds	r25, 0x053B	; 0x80053b <u8_Dio_Status>
    2454:	99 23       	and	r25, r25
    2456:	09 f4       	brne	.+2      	; 0x245a <Dio_readPin+0x10>
    2458:	79 c0       	rjmp	.+242    	; 0x254c <Dio_readPin+0x102>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    245a:	e8 2f       	mov	r30, r24
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	cf 01       	movw	r24, r30
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <pstrDio_pinsConfig>
    246c:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <pstrDio_pinsConfig+0x1>
    2470:	e8 0f       	add	r30, r24
    2472:	f9 1f       	adc	r31, r25
    2474:	80 81       	ld	r24, Z
    2476:	81 30       	cpi	r24, 0x01	; 1
    2478:	f9 f0       	breq	.+62     	; 0x24b8 <Dio_readPin+0x6e>
    247a:	30 f0       	brcs	.+12     	; 0x2488 <Dio_readPin+0x3e>
    247c:	82 30       	cpi	r24, 0x02	; 2
    247e:	a1 f1       	breq	.+104    	; 0x24e8 <Dio_readPin+0x9e>
    2480:	83 30       	cpi	r24, 0x03	; 3
    2482:	09 f4       	brne	.+2      	; 0x2486 <Dio_readPin+0x3c>
    2484:	49 c0       	rjmp	.+146    	; 0x2518 <Dio_readPin+0xce>
    2486:	64 c0       	rjmp	.+200    	; 0x2550 <Dio_readPin+0x106>
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2488:	49 b3       	in	r20, 0x19	; 25
    248a:	51 81       	ldd	r21, Z+1	; 0x01
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	9c 01       	movw	r18, r24
    2492:	05 2e       	mov	r0, r21
    2494:	02 c0       	rjmp	.+4      	; 0x249a <Dio_readPin+0x50>
    2496:	22 0f       	add	r18, r18
    2498:	33 1f       	adc	r19, r19
    249a:	0a 94       	dec	r0
    249c:	e2 f7       	brpl	.-8      	; 0x2496 <Dio_readPin+0x4c>
    249e:	84 2f       	mov	r24, r20
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	82 23       	and	r24, r18
    24a4:	93 23       	and	r25, r19
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <Dio_readPin+0x62>
    24a8:	95 95       	asr	r25
    24aa:	87 95       	ror	r24
    24ac:	5a 95       	dec	r21
    24ae:	e2 f7       	brpl	.-8      	; 0x24a8 <Dio_readPin+0x5e>
    24b0:	fb 01       	movw	r30, r22
    24b2:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    24b6:	08 95       	ret
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    24b8:	46 b3       	in	r20, 0x16	; 22
    24ba:	51 81       	ldd	r21, Z+1	; 0x01
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	9c 01       	movw	r18, r24
    24c2:	05 2e       	mov	r0, r21
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <Dio_readPin+0x80>
    24c6:	22 0f       	add	r18, r18
    24c8:	33 1f       	adc	r19, r19
    24ca:	0a 94       	dec	r0
    24cc:	e2 f7       	brpl	.-8      	; 0x24c6 <Dio_readPin+0x7c>
    24ce:	84 2f       	mov	r24, r20
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	82 23       	and	r24, r18
    24d4:	93 23       	and	r25, r19
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <Dio_readPin+0x92>
    24d8:	95 95       	asr	r25
    24da:	87 95       	ror	r24
    24dc:	5a 95       	dec	r21
    24de:	e2 f7       	brpl	.-8      	; 0x24d8 <Dio_readPin+0x8e>
    24e0:	fb 01       	movw	r30, r22
    24e2:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    24e4:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    24e6:	08 95       	ret
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    24e8:	43 b3       	in	r20, 0x13	; 19
    24ea:	51 81       	ldd	r21, Z+1	; 0x01
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	9c 01       	movw	r18, r24
    24f2:	05 2e       	mov	r0, r21
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <Dio_readPin+0xb0>
    24f6:	22 0f       	add	r18, r18
    24f8:	33 1f       	adc	r19, r19
    24fa:	0a 94       	dec	r0
    24fc:	e2 f7       	brpl	.-8      	; 0x24f6 <Dio_readPin+0xac>
    24fe:	84 2f       	mov	r24, r20
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	82 23       	and	r24, r18
    2504:	93 23       	and	r25, r19
    2506:	02 c0       	rjmp	.+4      	; 0x250c <Dio_readPin+0xc2>
    2508:	95 95       	asr	r25
    250a:	87 95       	ror	r24
    250c:	5a 95       	dec	r21
    250e:	e2 f7       	brpl	.-8      	; 0x2508 <Dio_readPin+0xbe>
    2510:	fb 01       	movw	r30, r22
    2512:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2514:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2516:	08 95       	ret
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2518:	40 b3       	in	r20, 0x10	; 16
    251a:	51 81       	ldd	r21, Z+1	; 0x01
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	9c 01       	movw	r18, r24
    2522:	05 2e       	mov	r0, r21
    2524:	02 c0       	rjmp	.+4      	; 0x252a <Dio_readPin+0xe0>
    2526:	22 0f       	add	r18, r18
    2528:	33 1f       	adc	r19, r19
    252a:	0a 94       	dec	r0
    252c:	e2 f7       	brpl	.-8      	; 0x2526 <Dio_readPin+0xdc>
    252e:	84 2f       	mov	r24, r20
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	82 23       	and	r24, r18
    2534:	93 23       	and	r25, r19
    2536:	02 c0       	rjmp	.+4      	; 0x253c <Dio_readPin+0xf2>
    2538:	95 95       	asr	r25
    253a:	87 95       	ror	r24
    253c:	5a 95       	dec	r21
    253e:	e2 f7       	brpl	.-8      	; 0x2538 <Dio_readPin+0xee>
    2540:	fb 01       	movw	r30, r22
    2542:	80 83       	st	Z, r24
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2544:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2546:	08 95       	ret
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    2548:	82 e0       	ldi	r24, 0x02	; 2
    254a:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    254c:	86 e0       	ldi	r24, 0x06	; 6
    254e:	08 95       	ret
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    2550:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
    2552:	08 95       	ret

00002554 <__vector_1>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
    2554:	1f 92       	push	r1
    2556:	0f 92       	push	r0
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	0f 92       	push	r0
    255c:	11 24       	eor	r1, r1
    255e:	2f 93       	push	r18
    2560:	3f 93       	push	r19
    2562:	4f 93       	push	r20
    2564:	5f 93       	push	r21
    2566:	6f 93       	push	r22
    2568:	7f 93       	push	r23
    256a:	8f 93       	push	r24
    256c:	9f 93       	push	r25
    256e:	af 93       	push	r26
    2570:	bf 93       	push	r27
    2572:	ef 93       	push	r30
    2574:	ff 93       	push	r31
    2576:	e0 91 42 05 	lds	r30, 0x0542	; 0x800542 <INT0_CallBackPtr>
    257a:	f0 91 43 05 	lds	r31, 0x0543	; 0x800543 <INT0_CallBackPtr+0x1>
    257e:	09 95       	icall
    2580:	ff 91       	pop	r31
    2582:	ef 91       	pop	r30
    2584:	bf 91       	pop	r27
    2586:	af 91       	pop	r26
    2588:	9f 91       	pop	r25
    258a:	8f 91       	pop	r24
    258c:	7f 91       	pop	r23
    258e:	6f 91       	pop	r22
    2590:	5f 91       	pop	r21
    2592:	4f 91       	pop	r20
    2594:	3f 91       	pop	r19
    2596:	2f 91       	pop	r18
    2598:	0f 90       	pop	r0
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	0f 90       	pop	r0
    259e:	1f 90       	pop	r1
    25a0:	18 95       	reti

000025a2 <__vector_2>:
    25a2:	1f 92       	push	r1
    25a4:	0f 92       	push	r0
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	0f 92       	push	r0
    25aa:	11 24       	eor	r1, r1
    25ac:	2f 93       	push	r18
    25ae:	3f 93       	push	r19
    25b0:	4f 93       	push	r20
    25b2:	5f 93       	push	r21
    25b4:	6f 93       	push	r22
    25b6:	7f 93       	push	r23
    25b8:	8f 93       	push	r24
    25ba:	9f 93       	push	r25
    25bc:	af 93       	push	r26
    25be:	bf 93       	push	r27
    25c0:	ef 93       	push	r30
    25c2:	ff 93       	push	r31
    25c4:	e0 91 40 05 	lds	r30, 0x0540	; 0x800540 <INT1_CallBackPtr>
    25c8:	f0 91 41 05 	lds	r31, 0x0541	; 0x800541 <INT1_CallBackPtr+0x1>
    25cc:	09 95       	icall
    25ce:	ff 91       	pop	r31
    25d0:	ef 91       	pop	r30
    25d2:	bf 91       	pop	r27
    25d4:	af 91       	pop	r26
    25d6:	9f 91       	pop	r25
    25d8:	8f 91       	pop	r24
    25da:	7f 91       	pop	r23
    25dc:	6f 91       	pop	r22
    25de:	5f 91       	pop	r21
    25e0:	4f 91       	pop	r20
    25e2:	3f 91       	pop	r19
    25e4:	2f 91       	pop	r18
    25e6:	0f 90       	pop	r0
    25e8:	0f be       	out	0x3f, r0	; 63
    25ea:	0f 90       	pop	r0
    25ec:	1f 90       	pop	r1
    25ee:	18 95       	reti

000025f0 <__vector_3>:
}
ISR(INT2_IRQ)
{
    25f0:	1f 92       	push	r1
    25f2:	0f 92       	push	r0
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	0f 92       	push	r0
    25f8:	11 24       	eor	r1, r1
    25fa:	2f 93       	push	r18
    25fc:	3f 93       	push	r19
    25fe:	4f 93       	push	r20
    2600:	5f 93       	push	r21
    2602:	6f 93       	push	r22
    2604:	7f 93       	push	r23
    2606:	8f 93       	push	r24
    2608:	9f 93       	push	r25
    260a:	af 93       	push	r26
    260c:	bf 93       	push	r27
    260e:	ef 93       	push	r30
    2610:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
    2612:	e0 91 3e 05 	lds	r30, 0x053E	; 0x80053e <INT2_CallBackPtr>
    2616:	f0 91 3f 05 	lds	r31, 0x053F	; 0x80053f <INT2_CallBackPtr+0x1>
    261a:	09 95       	icall
}
    261c:	ff 91       	pop	r31
    261e:	ef 91       	pop	r30
    2620:	bf 91       	pop	r27
    2622:	af 91       	pop	r26
    2624:	9f 91       	pop	r25
    2626:	8f 91       	pop	r24
    2628:	7f 91       	pop	r23
    262a:	6f 91       	pop	r22
    262c:	5f 91       	pop	r21
    262e:	4f 91       	pop	r20
    2630:	3f 91       	pop	r19
    2632:	2f 91       	pop	r18
    2634:	0f 90       	pop	r0
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	0f 90       	pop	r0
    263a:	1f 90       	pop	r1
    263c:	18 95       	reti

0000263e <Gpt_ISRHandler>:
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_EXPIRED;
	return GPT_STATUS_ERROR_OK;
}
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	0e c0       	rjmp	.+28     	; 0x265e <Gpt_ISRHandler+0x20>
    2642:	29 2f       	mov	r18, r25
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	f9 01       	movw	r30, r18
    2648:	ee 0f       	add	r30, r30
    264a:	ff 1f       	adc	r31, r31
    264c:	2e 0f       	add	r18, r30
    264e:	3f 1f       	adc	r19, r31
    2650:	f9 01       	movw	r30, r18
    2652:	ea 51       	subi	r30, 0x1A	; 26
    2654:	fc 4f       	sbci	r31, 0xFC	; 252
    2656:	20 81       	ld	r18, Z
    2658:	28 17       	cp	r18, r24
    265a:	19 f0       	breq	.+6      	; 0x2662 <Gpt_ISRHandler+0x24>
    265c:	9f 5f       	subi	r25, 0xFF	; 255
    265e:	99 23       	and	r25, r25
    2660:	81 f3       	breq	.-32     	; 0x2642 <Gpt_ISRHandler+0x4>
    2662:	89 2f       	mov	r24, r25
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	fc 01       	movw	r30, r24
    2668:	ee 0f       	add	r30, r30
    266a:	ff 1f       	adc	r31, r31
    266c:	ee 0f       	add	r30, r30
    266e:	ff 1f       	adc	r31, r31
    2670:	eb 5b       	subi	r30, 0xBB	; 187
    2672:	fa 4f       	sbci	r31, 0xFA	; 250
    2674:	40 81       	ld	r20, Z
    2676:	51 81       	ldd	r21, Z+1	; 0x01
    2678:	62 81       	ldd	r22, Z+2	; 0x02
    267a:	73 81       	ldd	r23, Z+3	; 0x03
    267c:	41 15       	cp	r20, r1
    267e:	51 05       	cpc	r21, r1
    2680:	61 05       	cpc	r22, r1
    2682:	71 05       	cpc	r23, r1
    2684:	81 f0       	breq	.+32     	; 0x26a6 <Gpt_ISRHandler+0x68>
    2686:	88 0f       	add	r24, r24
    2688:	99 1f       	adc	r25, r25
    268a:	88 0f       	add	r24, r24
    268c:	99 1f       	adc	r25, r25
    268e:	fc 01       	movw	r30, r24
    2690:	eb 5b       	subi	r30, 0xBB	; 187
    2692:	fa 4f       	sbci	r31, 0xFA	; 250
    2694:	41 50       	subi	r20, 0x01	; 1
    2696:	51 09       	sbc	r21, r1
    2698:	61 09       	sbc	r22, r1
    269a:	71 09       	sbc	r23, r1
    269c:	40 83       	st	Z, r20
    269e:	51 83       	std	Z+1, r21	; 0x01
    26a0:	62 83       	std	Z+2, r22	; 0x02
    26a2:	73 83       	std	Z+3, r23	; 0x03
    26a4:	08 95       	ret
    26a6:	23 b7       	in	r18, 0x33	; 51
    26a8:	2e 7f       	andi	r18, 0xFE	; 254
    26aa:	23 bf       	out	0x33, r18	; 51
    26ac:	23 b7       	in	r18, 0x33	; 51
    26ae:	2d 7f       	andi	r18, 0xFD	; 253
    26b0:	23 bf       	out	0x33, r18	; 51
    26b2:	23 b7       	in	r18, 0x33	; 51
    26b4:	2b 7f       	andi	r18, 0xFB	; 251
    26b6:	23 bf       	out	0x33, r18	; 51
    26b8:	29 b7       	in	r18, 0x39	; 57
    26ba:	2e 7f       	andi	r18, 0xFE	; 254
    26bc:	29 bf       	out	0x39, r18	; 57
    26be:	fc 01       	movw	r30, r24
    26c0:	e7 5b       	subi	r30, 0xB7	; 183
    26c2:	fa 4f       	sbci	r31, 0xFA	; 250
    26c4:	24 e0       	ldi	r18, 0x04	; 4
    26c6:	20 83       	st	Z, r18
    26c8:	e0 91 4a 05 	lds	r30, 0x054A	; 0x80054a <Gpt_Timer0_CallBackPtr>
    26cc:	f0 91 4b 05 	lds	r31, 0x054B	; 0x80054b <Gpt_Timer0_CallBackPtr+0x1>
    26d0:	09 95       	icall
    26d2:	08 95       	ret

000026d4 <GptInit>:
    26d4:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <genu_GPTModStatus>
    26d8:	81 30       	cpi	r24, 0x01	; 1
    26da:	61 f1       	breq	.+88     	; 0x2734 <GptInit+0x60>
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	24 c0       	rjmp	.+72     	; 0x2728 <GptInit+0x54>
    26e0:	82 2f       	mov	r24, r18
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	fc 01       	movw	r30, r24
    26e6:	ee 0f       	add	r30, r30
    26e8:	ff 1f       	adc	r31, r31
    26ea:	e8 0f       	add	r30, r24
    26ec:	f9 1f       	adc	r31, r25
    26ee:	ea 51       	subi	r30, 0x1A	; 26
    26f0:	fc 4f       	sbci	r31, 0xFC	; 252
    26f2:	30 81       	ld	r19, Z
    26f4:	33 23       	and	r19, r19
    26f6:	19 f0       	breq	.+6      	; 0x26fe <GptInit+0x2a>
    26f8:	33 30       	cpi	r19, 0x03	; 3
    26fa:	f0 f4       	brcc	.+60     	; 0x2738 <GptInit+0x64>
    26fc:	0f c0       	rjmp	.+30     	; 0x271c <GptInit+0x48>
    26fe:	fc 01       	movw	r30, r24
    2700:	ee 0f       	add	r30, r30
    2702:	ff 1f       	adc	r31, r31
    2704:	e8 0f       	add	r30, r24
    2706:	f9 1f       	adc	r31, r25
    2708:	ea 51       	subi	r30, 0x1A	; 26
    270a:	fc 4f       	sbci	r31, 0xFC	; 252
    270c:	32 81       	ldd	r19, Z+2	; 0x02
    270e:	31 11       	cpse	r19, r1
    2710:	05 c0       	rjmp	.+10     	; 0x271c <GptInit+0x48>
    2712:	13 be       	out	0x33, r1	; 51
    2714:	39 b7       	in	r19, 0x39	; 57
    2716:	3c 7f       	andi	r19, 0xFC	; 252
    2718:	39 bf       	out	0x39, r19	; 57
    271a:	12 be       	out	0x32, r1	; 50
    271c:	fc 01       	movw	r30, r24
    271e:	e7 5b       	subi	r30, 0xB7	; 183
    2720:	fa 4f       	sbci	r31, 0xFA	; 250
    2722:	31 e0       	ldi	r19, 0x01	; 1
    2724:	30 83       	st	Z, r19
    2726:	2f 5f       	subi	r18, 0xFF	; 255
    2728:	22 23       	and	r18, r18
    272a:	d1 f2       	breq	.-76     	; 0x26e0 <GptInit+0xc>
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <genu_GPTModStatus>
    2732:	08 95       	ret
    2734:	83 e0       	ldi	r24, 0x03	; 3
    2736:	08 95       	ret
    2738:	85 e0       	ldi	r24, 0x05	; 5
    273a:	08 95       	ret

0000273c <GptStart_aSync>:
* Return value: enuGpt_Status_t - Returns the status of the function (if there is any error)
* Description: Function to Start the Timer module counting from 0x00 until (u16_Ticks)
               and generate interrupt when OVF.
************************************************************************************/
enuGpt_Status_t GptStart_aSync(u8Gpt_Channel_t ChannelId, u32Gpt_Value_t u16_Ticks, pfGpt_CallBack_t CallBack)
{
    273c:	0f 93       	push	r16
    273e:	1f 93       	push	r17
    2740:	cf 93       	push	r28
    2742:	df 93       	push	r29
    2744:	89 01       	movw	r16, r18
	
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    2746:	81 11       	cpse	r24, r1
    2748:	4a c0       	rjmp	.+148    	; 0x27de <GptStart_aSync+0xa2>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    274a:	c8 2f       	mov	r28, r24
    274c:	d0 e0       	ldi	r29, 0x00	; 0
    274e:	fe 01       	movw	r30, r28
    2750:	e7 5b       	subi	r30, 0xB7	; 183
    2752:	fa 4f       	sbci	r31, 0xFA	; 250
    2754:	80 81       	ld	r24, Z
    2756:	88 23       	and	r24, r24
    2758:	09 f4       	brne	.+2      	; 0x275c <GptStart_aSync+0x20>
    275a:	43 c0       	rjmp	.+134    	; 0x27e2 <GptStart_aSync+0xa6>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
    275c:	82 30       	cpi	r24, 0x02	; 2
    275e:	09 f4       	brne	.+2      	; 0x2762 <GptStart_aSync+0x26>
    2760:	42 c0       	rjmp	.+132    	; 0x27e6 <GptStart_aSync+0xaa>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u16_remainderCount=0;
	
	enuChannelsState[ChannelId] = GPT_RUNNING;
    2762:	82 e0       	ldi	r24, 0x02	; 2
    2764:	fe 01       	movw	r30, r28
    2766:	e7 5b       	subi	r30, 0xB7	; 183
    2768:	fa 4f       	sbci	r31, 0xFA	; 250
    276a:	80 83       	st	Z, r24
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    276c:	fe 01       	movw	r30, r28
    276e:	ee 0f       	add	r30, r30
    2770:	ff 1f       	adc	r31, r31
    2772:	ec 0f       	add	r30, r28
    2774:	fd 1f       	adc	r31, r29
    2776:	ea 51       	subi	r30, 0x1A	; 26
    2778:	fc 4f       	sbci	r31, 0xFC	; 252
    277a:	80 81       	ld	r24, Z
    277c:	88 23       	and	r24, r24
    277e:	21 f0       	breq	.+8      	; 0x2788 <GptStart_aSync+0x4c>
    2780:	83 30       	cpi	r24, 0x03	; 3
    2782:	98 f1       	brcs	.+102    	; 0x27ea <GptStart_aSync+0xae>
		case GPT_TIMER_2: /* In case of Timer 2 */
			break;
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    2784:	85 e0       	ldi	r24, 0x05	; 5
    2786:	34 c0       	rjmp	.+104    	; 0x27f0 <GptStart_aSync+0xb4>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Get Number of loops to overflow the timer counter */
			u32_Channels_ISR_Count[ChannelId] = u16_Ticks / GPT_MAX_VALUE_8BIT; //0xFF
    2788:	cb 01       	movw	r24, r22
    278a:	ba 01       	movw	r22, r20
    278c:	2f ef       	ldi	r18, 0xFF	; 255
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__udivmodsi4>
    2798:	fe 01       	movw	r30, r28
    279a:	ee 0f       	add	r30, r30
    279c:	ff 1f       	adc	r31, r31
    279e:	ee 0f       	add	r30, r30
    27a0:	ff 1f       	adc	r31, r31
    27a2:	eb 5b       	subi	r30, 0xBB	; 187
    27a4:	fa 4f       	sbci	r31, 0xFA	; 250
    27a6:	20 83       	st	Z, r18
    27a8:	31 83       	std	Z+1, r19	; 0x01
    27aa:	42 83       	std	Z+2, r20	; 0x02
    27ac:	53 83       	std	Z+3, r21	; 0x03
			/* Get Number of extra ticks (remainder) */
			u16_remainderCount = u16_Ticks % GPT_MAX_VALUE_8BIT;
    27ae:	26 2f       	mov	r18, r22
    27b0:	37 2f       	mov	r19, r23
			/* Set the interrupt enable */
			REG_SET_BIT(GPT_TIMSK_REG, GPT_TIMSK_TOIE0);
    27b2:	89 b7       	in	r24, 0x39	; 57
    27b4:	81 60       	ori	r24, 0x01	; 1
    27b6:	89 bf       	out	0x39, r24	; 57
			/* Set the callback function pointer */
			Gpt_Timer0_CallBackPtr=CallBack;
    27b8:	10 93 4b 05 	sts	0x054B, r17	; 0x80054b <Gpt_Timer0_CallBackPtr+0x1>
    27bc:	00 93 4a 05 	sts	0x054A, r16	; 0x80054a <Gpt_Timer0_CallBackPtr>
			/* Start the clock with the given pre scaler */
			GPT_TCCR0_REG = (Timers_Configurations[ChannelId].enuClock_Src) << GPT_TCCR0_CS00;
    27c0:	ce 01       	movw	r24, r28
    27c2:	88 0f       	add	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	c8 0f       	add	r28, r24
    27c8:	d9 1f       	adc	r29, r25
    27ca:	ca 51       	subi	r28, 0x1A	; 26
    27cc:	dc 4f       	sbci	r29, 0xFC	; 252
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	83 bf       	out	0x33, r24	; 51
			/* Run the remainder ticks */
			/* Put the value of the 0xFF - remainderTicks to start count from it */
			if(u16_remainderCount != 0)
    27d2:	23 2b       	or	r18, r19
    27d4:	61 f0       	breq	.+24     	; 0x27ee <GptStart_aSync+0xb2>
			{
				GPT_TCNT0_REG = 256 - u16_remainderCount;
    27d6:	61 95       	neg	r22
    27d8:	62 bf       	out	0x32, r22	; 50
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	09 c0       	rjmp	.+18     	; 0x27f0 <GptStart_aSync+0xb4>
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    27de:	86 e0       	ldi	r24, 0x06	; 6
    27e0:	07 c0       	rjmp	.+14     	; 0x27f0 <GptStart_aSync+0xb4>
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    27e2:	82 e0       	ldi	r24, 0x02	; 2
    27e4:	05 c0       	rjmp	.+10     	; 0x27f0 <GptStart_aSync+0xb4>
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_BUSY;
    27e6:	87 e0       	ldi	r24, 0x07	; 7
    27e8:	03 c0       	rjmp	.+6      	; 0x27f0 <GptStart_aSync+0xb4>
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	01 c0       	rjmp	.+2      	; 0x27f0 <GptStart_aSync+0xb4>
    27ee:	81 e0       	ldi	r24, 0x01	; 1
}
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	1f 91       	pop	r17
    27f6:	0f 91       	pop	r16
    27f8:	08 95       	ret

000027fa <GptStop>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    27fa:	81 11       	cpse	r24, r1
    27fc:	23 c0       	rjmp	.+70     	; 0x2844 <GptStop+0x4a>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	fc 01       	movw	r30, r24
    2802:	e7 5b       	subi	r30, 0xB7	; 183
    2804:	fa 4f       	sbci	r31, 0xFA	; 250
    2806:	20 81       	ld	r18, Z
    2808:	22 23       	and	r18, r18
    280a:	f1 f0       	breq	.+60     	; 0x2848 <GptStop+0x4e>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
    280c:	22 30       	cpi	r18, 0x02	; 2
    280e:	f1 f4       	brne	.+60     	; 0x284c <GptStop+0x52>

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    2810:	fc 01       	movw	r30, r24
    2812:	ee 0f       	add	r30, r30
    2814:	ff 1f       	adc	r31, r31
    2816:	e8 0f       	add	r30, r24
    2818:	f9 1f       	adc	r31, r25
    281a:	ea 51       	subi	r30, 0x1A	; 26
    281c:	fc 4f       	sbci	r31, 0xFC	; 252
    281e:	20 81       	ld	r18, Z
    2820:	22 23       	and	r18, r18
    2822:	19 f0       	breq	.+6      	; 0x282a <GptStop+0x30>
    2824:	23 30       	cpi	r18, 0x03	; 3
    2826:	a0 f4       	brcc	.+40     	; 0x2850 <GptStop+0x56>
    2828:	06 c0       	rjmp	.+12     	; 0x2836 <GptStop+0x3c>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Stop the clock from the timer */
			GPT_TCCR0_REG &= ~(7 << GPT_TCCR0_CS00);
    282a:	23 b7       	in	r18, 0x33	; 51
    282c:	28 7f       	andi	r18, 0xF8	; 248
    282e:	23 bf       	out	0x33, r18	; 51
			GPT_TIMSK_REG &= ~(3 << GPT_TIMSK_TOIE0);
    2830:	29 b7       	in	r18, 0x39	; 57
    2832:	2c 7f       	andi	r18, 0xFC	; 252
    2834:	29 bf       	out	0x39, r18	; 57
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
    2836:	fc 01       	movw	r30, r24
    2838:	e7 5b       	subi	r30, 0xB7	; 183
    283a:	fa 4f       	sbci	r31, 0xFA	; 250
    283c:	23 e0       	ldi	r18, 0x03	; 3
    283e:	20 83       	st	Z, r18
	return GPT_STATUS_ERROR_OK;
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    2844:	86 e0       	ldi	r24, 0x06	; 6
    2846:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    2848:	82 e0       	ldi	r24, 0x02	; 2
    284a:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_STOPPED;
    284c:	88 e0       	ldi	r24, 0x08	; 8
    284e:	08 95       	ret
		case GPT_TIMER_2: /* In case of Timer 2 */
		break;
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    2850:	85 e0       	ldi	r24, 0x05	; 5
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
    2852:	08 95       	ret

00002854 <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    2854:	1f 92       	push	r1
    2856:	0f 92       	push	r0
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	0f 92       	push	r0
    285c:	11 24       	eor	r1, r1
    285e:	2f 93       	push	r18
    2860:	3f 93       	push	r19
    2862:	4f 93       	push	r20
    2864:	5f 93       	push	r21
    2866:	6f 93       	push	r22
    2868:	7f 93       	push	r23
    286a:	8f 93       	push	r24
    286c:	9f 93       	push	r25
    286e:	af 93       	push	r26
    2870:	bf 93       	push	r27
    2872:	ef 93       	push	r30
    2874:	ff 93       	push	r31
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	0e 94 1f 13 	call	0x263e	; 0x263e <Gpt_ISRHandler>
    287c:	ff 91       	pop	r31
    287e:	ef 91       	pop	r30
    2880:	bf 91       	pop	r27
    2882:	af 91       	pop	r26
    2884:	9f 91       	pop	r25
    2886:	8f 91       	pop	r24
    2888:	7f 91       	pop	r23
    288a:	6f 91       	pop	r22
    288c:	5f 91       	pop	r21
    288e:	4f 91       	pop	r20
    2890:	3f 91       	pop	r19
    2892:	2f 91       	pop	r18
    2894:	0f 90       	pop	r0
    2896:	0f be       	out	0x3f, r0	; 63
    2898:	0f 90       	pop	r0
    289a:	1f 90       	pop	r1
    289c:	18 95       	reti

0000289e <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    289e:	1f 92       	push	r1
    28a0:	0f 92       	push	r0
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	0f 92       	push	r0
    28a6:	11 24       	eor	r1, r1
    28a8:	2f 93       	push	r18
    28aa:	3f 93       	push	r19
    28ac:	4f 93       	push	r20
    28ae:	5f 93       	push	r21
    28b0:	6f 93       	push	r22
    28b2:	7f 93       	push	r23
    28b4:	8f 93       	push	r24
    28b6:	9f 93       	push	r25
    28b8:	af 93       	push	r26
    28ba:	bf 93       	push	r27
    28bc:	ef 93       	push	r30
    28be:	ff 93       	push	r31
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	0e 94 1f 13 	call	0x263e	; 0x263e <Gpt_ISRHandler>
    28c6:	ff 91       	pop	r31
    28c8:	ef 91       	pop	r30
    28ca:	bf 91       	pop	r27
    28cc:	af 91       	pop	r26
    28ce:	9f 91       	pop	r25
    28d0:	8f 91       	pop	r24
    28d2:	7f 91       	pop	r23
    28d4:	6f 91       	pop	r22
    28d6:	5f 91       	pop	r21
    28d8:	4f 91       	pop	r20
    28da:	3f 91       	pop	r19
    28dc:	2f 91       	pop	r18
    28de:	0f 90       	pop	r0
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	0f 90       	pop	r0
    28e4:	1f 90       	pop	r1
    28e6:	18 95       	reti

000028e8 <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    28e8:	1f 92       	push	r1
    28ea:	0f 92       	push	r0
    28ec:	0f b6       	in	r0, 0x3f	; 63
    28ee:	0f 92       	push	r0
    28f0:	11 24       	eor	r1, r1
    28f2:	2f 93       	push	r18
    28f4:	3f 93       	push	r19
    28f6:	4f 93       	push	r20
    28f8:	5f 93       	push	r21
    28fa:	6f 93       	push	r22
    28fc:	7f 93       	push	r23
    28fe:	8f 93       	push	r24
    2900:	9f 93       	push	r25
    2902:	af 93       	push	r26
    2904:	bf 93       	push	r27
    2906:	ef 93       	push	r30
    2908:	ff 93       	push	r31
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	0e 94 1f 13 	call	0x263e	; 0x263e <Gpt_ISRHandler>
    2910:	ff 91       	pop	r31
    2912:	ef 91       	pop	r30
    2914:	bf 91       	pop	r27
    2916:	af 91       	pop	r26
    2918:	9f 91       	pop	r25
    291a:	8f 91       	pop	r24
    291c:	7f 91       	pop	r23
    291e:	6f 91       	pop	r22
    2920:	5f 91       	pop	r21
    2922:	4f 91       	pop	r20
    2924:	3f 91       	pop	r19
    2926:	2f 91       	pop	r18
    2928:	0f 90       	pop	r0
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	0f 90       	pop	r0
    292e:	1f 90       	pop	r1
    2930:	18 95       	reti

00002932 <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2932:	1f 92       	push	r1
    2934:	0f 92       	push	r0
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	0f 92       	push	r0
    293a:	11 24       	eor	r1, r1
    293c:	2f 93       	push	r18
    293e:	3f 93       	push	r19
    2940:	4f 93       	push	r20
    2942:	5f 93       	push	r21
    2944:	6f 93       	push	r22
    2946:	7f 93       	push	r23
    2948:	8f 93       	push	r24
    294a:	9f 93       	push	r25
    294c:	af 93       	push	r26
    294e:	bf 93       	push	r27
    2950:	ef 93       	push	r30
    2952:	ff 93       	push	r31
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	0e 94 1f 13 	call	0x263e	; 0x263e <Gpt_ISRHandler>
    295a:	ff 91       	pop	r31
    295c:	ef 91       	pop	r30
    295e:	bf 91       	pop	r27
    2960:	af 91       	pop	r26
    2962:	9f 91       	pop	r25
    2964:	8f 91       	pop	r24
    2966:	7f 91       	pop	r23
    2968:	6f 91       	pop	r22
    296a:	5f 91       	pop	r21
    296c:	4f 91       	pop	r20
    296e:	3f 91       	pop	r19
    2970:	2f 91       	pop	r18
    2972:	0f 90       	pop	r0
    2974:	0f be       	out	0x3f, r0	; 63
    2976:	0f 90       	pop	r0
    2978:	1f 90       	pop	r1
    297a:	18 95       	reti

0000297c <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    297c:	1f 92       	push	r1
    297e:	0f 92       	push	r0
    2980:	0f b6       	in	r0, 0x3f	; 63
    2982:	0f 92       	push	r0
    2984:	11 24       	eor	r1, r1
    2986:	2f 93       	push	r18
    2988:	3f 93       	push	r19
    298a:	4f 93       	push	r20
    298c:	5f 93       	push	r21
    298e:	6f 93       	push	r22
    2990:	7f 93       	push	r23
    2992:	8f 93       	push	r24
    2994:	9f 93       	push	r25
    2996:	af 93       	push	r26
    2998:	bf 93       	push	r27
    299a:	ef 93       	push	r30
    299c:	ff 93       	push	r31
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	0e 94 1f 13 	call	0x263e	; 0x263e <Gpt_ISRHandler>
    29a4:	ff 91       	pop	r31
    29a6:	ef 91       	pop	r30
    29a8:	bf 91       	pop	r27
    29aa:	af 91       	pop	r26
    29ac:	9f 91       	pop	r25
    29ae:	8f 91       	pop	r24
    29b0:	7f 91       	pop	r23
    29b2:	6f 91       	pop	r22
    29b4:	5f 91       	pop	r21
    29b6:	4f 91       	pop	r20
    29b8:	3f 91       	pop	r19
    29ba:	2f 91       	pop	r18
    29bc:	0f 90       	pop	r0
    29be:	0f be       	out	0x3f, r0	; 63
    29c0:	0f 90       	pop	r0
    29c2:	1f 90       	pop	r1
    29c4:	18 95       	reti

000029c6 <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    29c6:	1f 92       	push	r1
    29c8:	0f 92       	push	r0
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	0f 92       	push	r0
    29ce:	11 24       	eor	r1, r1
    29d0:	2f 93       	push	r18
    29d2:	3f 93       	push	r19
    29d4:	4f 93       	push	r20
    29d6:	5f 93       	push	r21
    29d8:	6f 93       	push	r22
    29da:	7f 93       	push	r23
    29dc:	8f 93       	push	r24
    29de:	9f 93       	push	r25
    29e0:	af 93       	push	r26
    29e2:	bf 93       	push	r27
    29e4:	ef 93       	push	r30
    29e6:	ff 93       	push	r31
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	0e 94 1f 13 	call	0x263e	; 0x263e <Gpt_ISRHandler>
    29ee:	ff 91       	pop	r31
    29f0:	ef 91       	pop	r30
    29f2:	bf 91       	pop	r27
    29f4:	af 91       	pop	r26
    29f6:	9f 91       	pop	r25
    29f8:	8f 91       	pop	r24
    29fa:	7f 91       	pop	r23
    29fc:	6f 91       	pop	r22
    29fe:	5f 91       	pop	r21
    2a00:	4f 91       	pop	r20
    2a02:	3f 91       	pop	r19
    2a04:	2f 91       	pop	r18
    2a06:	0f 90       	pop	r0
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	0f 90       	pop	r0
    2a0c:	1f 90       	pop	r1
    2a0e:	18 95       	reti

00002a10 <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2a10:	1f 92       	push	r1
    2a12:	0f 92       	push	r0
    2a14:	0f b6       	in	r0, 0x3f	; 63
    2a16:	0f 92       	push	r0
    2a18:	11 24       	eor	r1, r1
    2a1a:	2f 93       	push	r18
    2a1c:	3f 93       	push	r19
    2a1e:	4f 93       	push	r20
    2a20:	5f 93       	push	r21
    2a22:	6f 93       	push	r22
    2a24:	7f 93       	push	r23
    2a26:	8f 93       	push	r24
    2a28:	9f 93       	push	r25
    2a2a:	af 93       	push	r26
    2a2c:	bf 93       	push	r27
    2a2e:	ef 93       	push	r30
    2a30:	ff 93       	push	r31
    2a32:	82 e0       	ldi	r24, 0x02	; 2
    2a34:	0e 94 1f 13 	call	0x263e	; 0x263e <Gpt_ISRHandler>
    2a38:	ff 91       	pop	r31
    2a3a:	ef 91       	pop	r30
    2a3c:	bf 91       	pop	r27
    2a3e:	af 91       	pop	r26
    2a40:	9f 91       	pop	r25
    2a42:	8f 91       	pop	r24
    2a44:	7f 91       	pop	r23
    2a46:	6f 91       	pop	r22
    2a48:	5f 91       	pop	r21
    2a4a:	4f 91       	pop	r20
    2a4c:	3f 91       	pop	r19
    2a4e:	2f 91       	pop	r18
    2a50:	0f 90       	pop	r0
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	0f 90       	pop	r0
    2a56:	1f 90       	pop	r1
    2a58:	18 95       	reti

00002a5a <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2a5a:	1f 92       	push	r1
    2a5c:	0f 92       	push	r0
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	0f 92       	push	r0
    2a62:	11 24       	eor	r1, r1
    2a64:	2f 93       	push	r18
    2a66:	3f 93       	push	r19
    2a68:	4f 93       	push	r20
    2a6a:	5f 93       	push	r21
    2a6c:	6f 93       	push	r22
    2a6e:	7f 93       	push	r23
    2a70:	8f 93       	push	r24
    2a72:	9f 93       	push	r25
    2a74:	af 93       	push	r26
    2a76:	bf 93       	push	r27
    2a78:	ef 93       	push	r30
    2a7a:	ff 93       	push	r31
    2a7c:	82 e0       	ldi	r24, 0x02	; 2
    2a7e:	0e 94 1f 13 	call	0x263e	; 0x263e <Gpt_ISRHandler>
    2a82:	ff 91       	pop	r31
    2a84:	ef 91       	pop	r30
    2a86:	bf 91       	pop	r27
    2a88:	af 91       	pop	r26
    2a8a:	9f 91       	pop	r25
    2a8c:	8f 91       	pop	r24
    2a8e:	7f 91       	pop	r23
    2a90:	6f 91       	pop	r22
    2a92:	5f 91       	pop	r21
    2a94:	4f 91       	pop	r20
    2a96:	3f 91       	pop	r19
    2a98:	2f 91       	pop	r18
    2a9a:	0f 90       	pop	r0
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	0f 90       	pop	r0
    2aa0:	1f 90       	pop	r1
    2aa2:	18 95       	reti

00002aa4 <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
    2aa4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2aa8:	86 30       	cpi	r24, 0x06	; 6
    2aaa:	41 f0       	breq	.+16     	; 0x2abc <I2C_MasterInit+0x18>
    2aac:	11 b8       	out	0x01, r1	; 1
    2aae:	8a ef       	ldi	r24, 0xFA	; 250
    2ab0:	80 b9       	out	0x00, r24	; 0
    2ab2:	86 e0       	ldi	r24, 0x06	; 6
    2ab4:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <genuI2C_Status>
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	08 95       	ret
    2abc:	87 e0       	ldi	r24, 0x07	; 7
    2abe:	08 95       	ret

00002ac0 <I2C_MasterSendSTART>:
    2ac0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2ac4:	86 30       	cpi	r24, 0x06	; 6
    2ac6:	59 f4       	brne	.+22     	; 0x2ade <I2C_MasterSendSTART+0x1e>
    2ac8:	84 ea       	ldi	r24, 0xA4	; 164
    2aca:	86 bf       	out	0x36, r24	; 54
    2acc:	06 b6       	in	r0, 0x36	; 54
    2ace:	07 fe       	sbrs	r0, 7
    2ad0:	fd cf       	rjmp	.-6      	; 0x2acc <I2C_MasterSendSTART+0xc>
    2ad2:	81 b1       	in	r24, 0x01	; 1
    2ad4:	88 7f       	andi	r24, 0xF8	; 248
    2ad6:	88 30       	cpi	r24, 0x08	; 8
    2ad8:	21 f0       	breq	.+8      	; 0x2ae2 <I2C_MasterSendSTART+0x22>
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	08 95       	ret
    2ade:	85 e0       	ldi	r24, 0x05	; 5
    2ae0:	08 95       	ret
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	08 95       	ret

00002ae6 <I2C_MasterSendSlaveAddress>:
    2ae6:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <genuI2C_Status>
    2aea:	96 30       	cpi	r25, 0x06	; 6
    2aec:	29 f5       	brne	.+74     	; 0x2b38 <I2C_MasterSendSlaveAddress+0x52>
    2aee:	62 30       	cpi	r22, 0x02	; 2
    2af0:	28 f5       	brcc	.+74     	; 0x2b3c <I2C_MasterSendSlaveAddress+0x56>
    2af2:	88 23       	and	r24, r24
    2af4:	2c f1       	brlt	.+74     	; 0x2b40 <I2C_MasterSendSlaveAddress+0x5a>
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	88 0f       	add	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	68 2b       	or	r22, r24
    2afe:	63 b9       	out	0x03, r22	; 3
    2b00:	84 e8       	ldi	r24, 0x84	; 132
    2b02:	86 bf       	out	0x36, r24	; 54
    2b04:	06 b6       	in	r0, 0x36	; 54
    2b06:	07 fe       	sbrs	r0, 7
    2b08:	fd cf       	rjmp	.-6      	; 0x2b04 <I2C_MasterSendSlaveAddress+0x1e>
    2b0a:	81 b1       	in	r24, 0x01	; 1
    2b0c:	88 7f       	andi	r24, 0xF8	; 248
    2b0e:	88 33       	cpi	r24, 0x38	; 56
    2b10:	59 f0       	breq	.+22     	; 0x2b28 <I2C_MasterSendSlaveAddress+0x42>
    2b12:	28 f4       	brcc	.+10     	; 0x2b1e <I2C_MasterSendSlaveAddress+0x38>
    2b14:	88 31       	cpi	r24, 0x18	; 24
    2b16:	b1 f0       	breq	.+44     	; 0x2b44 <I2C_MasterSendSlaveAddress+0x5e>
    2b18:	80 32       	cpi	r24, 0x20	; 32
    2b1a:	41 f0       	breq	.+16     	; 0x2b2c <I2C_MasterSendSlaveAddress+0x46>
    2b1c:	0b c0       	rjmp	.+22     	; 0x2b34 <I2C_MasterSendSlaveAddress+0x4e>
    2b1e:	80 34       	cpi	r24, 0x40	; 64
    2b20:	89 f0       	breq	.+34     	; 0x2b44 <I2C_MasterSendSlaveAddress+0x5e>
    2b22:	88 34       	cpi	r24, 0x48	; 72
    2b24:	29 f0       	breq	.+10     	; 0x2b30 <I2C_MasterSendSlaveAddress+0x4a>
    2b26:	06 c0       	rjmp	.+12     	; 0x2b34 <I2C_MasterSendSlaveAddress+0x4e>
    2b28:	88 e3       	ldi	r24, 0x38	; 56
    2b2a:	08 95       	ret
    2b2c:	80 e2       	ldi	r24, 0x20	; 32
    2b2e:	08 95       	ret
    2b30:	88 e4       	ldi	r24, 0x48	; 72
    2b32:	08 95       	ret
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	08 95       	ret
    2b38:	85 e0       	ldi	r24, 0x05	; 5
    2b3a:	08 95       	ret
    2b3c:	82 e0       	ldi	r24, 0x02	; 2
    2b3e:	08 95       	ret
    2b40:	83 e0       	ldi	r24, 0x03	; 3
    2b42:	08 95       	ret
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	08 95       	ret

00002b48 <I2C_MasterSendRepSTART>:
    2b48:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2b4c:	86 30       	cpi	r24, 0x06	; 6
    2b4e:	59 f4       	brne	.+22     	; 0x2b66 <I2C_MasterSendRepSTART+0x1e>
    2b50:	84 ea       	ldi	r24, 0xA4	; 164
    2b52:	86 bf       	out	0x36, r24	; 54
    2b54:	06 b6       	in	r0, 0x36	; 54
    2b56:	07 fe       	sbrs	r0, 7
    2b58:	fd cf       	rjmp	.-6      	; 0x2b54 <I2C_MasterSendRepSTART+0xc>
    2b5a:	81 b1       	in	r24, 0x01	; 1
    2b5c:	88 7f       	andi	r24, 0xF8	; 248
    2b5e:	80 31       	cpi	r24, 0x10	; 16
    2b60:	21 f0       	breq	.+8      	; 0x2b6a <I2C_MasterSendRepSTART+0x22>
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	08 95       	ret
    2b66:	85 e0       	ldi	r24, 0x05	; 5
    2b68:	08 95       	ret
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	08 95       	ret

00002b6e <I2C_MasterSendSTOP>:
    2b6e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2b72:	86 30       	cpi	r24, 0x06	; 6
    2b74:	39 f4       	brne	.+14     	; 0x2b84 <I2C_MasterSendSTOP+0x16>
    2b76:	84 e9       	ldi	r24, 0x94	; 148
    2b78:	86 bf       	out	0x36, r24	; 54
    2b7a:	06 b6       	in	r0, 0x36	; 54
    2b7c:	04 fc       	sbrc	r0, 4
    2b7e:	fd cf       	rjmp	.-6      	; 0x2b7a <I2C_MasterSendSTOP+0xc>
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	08 95       	ret
    2b84:	85 e0       	ldi	r24, 0x05	; 5
    2b86:	08 95       	ret

00002b88 <I2C_MasterSendByte>:
    2b88:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <genuI2C_Status>
    2b8c:	96 30       	cpi	r25, 0x06	; 6
    2b8e:	69 f4       	brne	.+26     	; 0x2baa <I2C_MasterSendByte+0x22>
    2b90:	83 b9       	out	0x03, r24	; 3
    2b92:	84 e8       	ldi	r24, 0x84	; 132
    2b94:	86 bf       	out	0x36, r24	; 54
    2b96:	06 b6       	in	r0, 0x36	; 54
    2b98:	07 fe       	sbrs	r0, 7
    2b9a:	fd cf       	rjmp	.-6      	; 0x2b96 <I2C_MasterSendByte+0xe>
    2b9c:	81 b1       	in	r24, 0x01	; 1
    2b9e:	88 7f       	andi	r24, 0xF8	; 248
    2ba0:	88 32       	cpi	r24, 0x28	; 40
    2ba2:	29 f0       	breq	.+10     	; 0x2bae <I2C_MasterSendByte+0x26>
    2ba4:	80 33       	cpi	r24, 0x30	; 48
    2ba6:	29 f4       	brne	.+10     	; 0x2bb2 <I2C_MasterSendByte+0x2a>
    2ba8:	08 95       	ret
    2baa:	85 e0       	ldi	r24, 0x05	; 5
    2bac:	08 95       	ret
    2bae:	88 e2       	ldi	r24, 0x28	; 40
    2bb0:	08 95       	ret
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	08 95       	ret

00002bb6 <I2C_MasterReceiveByte_ACK>:
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <genuI2C_Status>
    2bbc:	96 30       	cpi	r25, 0x06	; 6
    2bbe:	79 f4       	brne	.+30     	; 0x2bde <I2C_MasterReceiveByte_ACK+0x28>
    2bc0:	30 97       	sbiw	r30, 0x00	; 0
    2bc2:	79 f0       	breq	.+30     	; 0x2be2 <I2C_MasterReceiveByte_ACK+0x2c>
    2bc4:	84 ec       	ldi	r24, 0xC4	; 196
    2bc6:	86 bf       	out	0x36, r24	; 54
    2bc8:	06 b6       	in	r0, 0x36	; 54
    2bca:	07 fe       	sbrs	r0, 7
    2bcc:	fd cf       	rjmp	.-6      	; 0x2bc8 <I2C_MasterReceiveByte_ACK+0x12>
    2bce:	81 b1       	in	r24, 0x01	; 1
    2bd0:	88 7f       	andi	r24, 0xF8	; 248
    2bd2:	80 35       	cpi	r24, 0x50	; 80
    2bd4:	41 f4       	brne	.+16     	; 0x2be6 <I2C_MasterReceiveByte_ACK+0x30>
    2bd6:	83 b1       	in	r24, 0x03	; 3
    2bd8:	80 83       	st	Z, r24
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	08 95       	ret
    2bde:	85 e0       	ldi	r24, 0x05	; 5
    2be0:	08 95       	ret
    2be2:	84 e0       	ldi	r24, 0x04	; 4
    2be4:	08 95       	ret
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	08 95       	ret

00002bea <I2C_MasterReceiveByte_NACK>:
    2bea:	fc 01       	movw	r30, r24
    2bec:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <genuI2C_Status>
    2bf0:	96 30       	cpi	r25, 0x06	; 6
    2bf2:	79 f4       	brne	.+30     	; 0x2c12 <I2C_MasterReceiveByte_NACK+0x28>
    2bf4:	30 97       	sbiw	r30, 0x00	; 0
    2bf6:	79 f0       	breq	.+30     	; 0x2c16 <I2C_MasterReceiveByte_NACK+0x2c>
    2bf8:	84 e8       	ldi	r24, 0x84	; 132
    2bfa:	86 bf       	out	0x36, r24	; 54
    2bfc:	06 b6       	in	r0, 0x36	; 54
    2bfe:	07 fe       	sbrs	r0, 7
    2c00:	fd cf       	rjmp	.-6      	; 0x2bfc <I2C_MasterReceiveByte_NACK+0x12>
    2c02:	81 b1       	in	r24, 0x01	; 1
    2c04:	88 7f       	andi	r24, 0xF8	; 248
    2c06:	88 35       	cpi	r24, 0x58	; 88
    2c08:	41 f4       	brne	.+16     	; 0x2c1a <I2C_MasterReceiveByte_NACK+0x30>
    2c0a:	83 b1       	in	r24, 0x03	; 3
    2c0c:	80 83       	st	Z, r24
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	08 95       	ret
    2c12:	85 e0       	ldi	r24, 0x05	; 5
    2c14:	08 95       	ret
    2c16:	84 e0       	ldi	r24, 0x04	; 4
    2c18:	08 95       	ret
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	08 95       	ret

00002c1e <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
    2c1e:	7f 92       	push	r7
    2c20:	8f 92       	push	r8
    2c22:	9f 92       	push	r9
    2c24:	af 92       	push	r10
    2c26:	bf 92       	push	r11
    2c28:	cf 92       	push	r12
    2c2a:	df 92       	push	r13
    2c2c:	ef 92       	push	r14
    2c2e:	ff 92       	push	r15
    2c30:	0f 93       	push	r16
    2c32:	1f 93       	push	r17
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	78 2e       	mov	r7, r24
    2c3a:	eb 01       	movw	r28, r22
    2c3c:	7a 01       	movw	r14, r20
    2c3e:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    2c40:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2c44:	86 30       	cpi	r24, 0x06	; 6
    2c46:	09 f0       	breq	.+2      	; 0x2c4a <I2C_MasterReceiveGeneral+0x2c>
    2c48:	47 c0       	rjmp	.+142    	; 0x2cd8 <I2C_MasterReceiveGeneral+0xba>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
    2c4a:	20 97       	sbiw	r28, 0x00	; 0
    2c4c:	09 f4       	brne	.+2      	; 0x2c50 <I2C_MasterReceiveGeneral+0x32>
    2c4e:	46 c0       	rjmp	.+140    	; 0x2cdc <I2C_MasterReceiveGeneral+0xbe>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
    2c50:	23 2b       	or	r18, r19
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <I2C_MasterReceiveGeneral+0x38>
    2c54:	45 c0       	rjmp	.+138    	; 0x2ce0 <I2C_MasterReceiveGeneral+0xc2>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    2c56:	77 20       	and	r7, r7
    2c58:	0c f4       	brge	.+2      	; 0x2c5c <I2C_MasterReceiveGeneral+0x3e>
    2c5a:	44 c0       	rjmp	.+136    	; 0x2ce4 <I2C_MasterReceiveGeneral+0xc6>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2c5c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <I2C_MasterSendSTART>
    2c60:	88 23       	and	r24, r24
    2c62:	09 f4       	brne	.+2      	; 0x2c66 <I2C_MasterReceiveGeneral+0x48>
    2c64:	4a c0       	rjmp	.+148    	; 0x2cfa <I2C_MasterReceiveGeneral+0xdc>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2c66:	60 e0       	ldi	r22, 0x00	; 0
    2c68:	87 2d       	mov	r24, r7
    2c6a:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <I2C_MasterSendSlaveAddress>
    2c6e:	81 30       	cpi	r24, 0x01	; 1
    2c70:	d9 f5       	brne	.+118    	; 0x2ce8 <I2C_MasterReceiveGeneral+0xca>
    2c72:	0b c0       	rjmp	.+22     	; 0x2c8a <I2C_MasterReceiveGeneral+0x6c>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2c74:	4e 01       	movw	r8, r28
    2c76:	8f ef       	ldi	r24, 0xFF	; 255
    2c78:	88 1a       	sub	r8, r24
    2c7a:	98 0a       	sbc	r9, r24
    2c7c:	88 81       	ld	r24, Y
    2c7e:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    2c82:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2c84:	88 23       	and	r24, r24
    2c86:	c9 f1       	breq	.+114    	; 0x2cfa <I2C_MasterReceiveGeneral+0xdc>
    2c88:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    2c8a:	57 01       	movw	r10, r14
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	a8 1a       	sub	r10, r24
    2c90:	b1 08       	sbc	r11, r1
    2c92:	ef 28       	or	r14, r15
    2c94:	79 f7       	brne	.-34     	; 0x2c74 <I2C_MasterReceiveGeneral+0x56>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
    2c96:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <I2C_MasterSendRepSTART>
    2c9a:	81 30       	cpi	r24, 0x01	; 1
    2c9c:	39 f5       	brne	.+78     	; 0x2cec <I2C_MasterReceiveGeneral+0xce>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2c9e:	61 e0       	ldi	r22, 0x01	; 1
    2ca0:	87 2d       	mov	r24, r7
    2ca2:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <I2C_MasterSendSlaveAddress>
    2ca6:	81 30       	cpi	r24, 0x01	; 1
    2ca8:	19 f5       	brne	.+70     	; 0x2cf0 <I2C_MasterReceiveGeneral+0xd2>
    2caa:	08 c0       	rjmp	.+16     	; 0x2cbc <I2C_MasterReceiveGeneral+0x9e>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
    2cac:	e6 01       	movw	r28, r12
    2cae:	21 96       	adiw	r28, 0x01	; 1
    2cb0:	c6 01       	movw	r24, r12
    2cb2:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <I2C_MasterReceiveByte_ACK>
    2cb6:	81 30       	cpi	r24, 0x01	; 1
    2cb8:	e9 f4       	brne	.+58     	; 0x2cf4 <I2C_MasterReceiveGeneral+0xd6>
    2cba:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
    2cbc:	01 50       	subi	r16, 0x01	; 1
    2cbe:	11 09       	sbc	r17, r1
    2cc0:	a9 f7       	brne	.-22     	; 0x2cac <I2C_MasterReceiveGeneral+0x8e>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
    2cc2:	c6 01       	movw	r24, r12
    2cc4:	0e 94 f5 15 	call	0x2bea	; 0x2bea <I2C_MasterReceiveByte_NACK>
    2cc8:	81 30       	cpi	r24, 0x01	; 1
    2cca:	b1 f4       	brne	.+44     	; 0x2cf8 <I2C_MasterReceiveGeneral+0xda>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
    2ccc:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <I2C_MasterSendSTOP>
    2cd0:	81 30       	cpi	r24, 0x01	; 1
    2cd2:	99 f0       	breq	.+38     	; 0x2cfa <I2C_MasterReceiveGeneral+0xdc>
		return I2C_STATUS_ERROR_NOK;
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	11 c0       	rjmp	.+34     	; 0x2cfa <I2C_MasterReceiveGeneral+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    2cd8:	85 e0       	ldi	r24, 0x05	; 5
    2cda:	0f c0       	rjmp	.+30     	; 0x2cfa <I2C_MasterReceiveGeneral+0xdc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2cdc:	84 e0       	ldi	r24, 0x04	; 4
    2cde:	0d c0       	rjmp	.+26     	; 0x2cfa <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2ce0:	84 e0       	ldi	r24, 0x04	; 4
    2ce2:	0b c0       	rjmp	.+22     	; 0x2cfa <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    2ce4:	83 e0       	ldi	r24, 0x03	; 3
    2ce6:	09 c0       	rjmp	.+18     	; 0x2cfa <I2C_MasterReceiveGeneral+0xdc>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	07 c0       	rjmp	.+14     	; 0x2cfa <I2C_MasterReceiveGeneral+0xdc>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	05 c0       	rjmp	.+10     	; 0x2cfa <I2C_MasterReceiveGeneral+0xdc>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	03 c0       	rjmp	.+6      	; 0x2cfa <I2C_MasterReceiveGeneral+0xdc>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	01 c0       	rjmp	.+2      	; 0x2cfa <I2C_MasterReceiveGeneral+0xdc>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
    2cfa:	df 91       	pop	r29
    2cfc:	cf 91       	pop	r28
    2cfe:	1f 91       	pop	r17
    2d00:	0f 91       	pop	r16
    2d02:	ff 90       	pop	r15
    2d04:	ef 90       	pop	r14
    2d06:	df 90       	pop	r13
    2d08:	cf 90       	pop	r12
    2d0a:	bf 90       	pop	r11
    2d0c:	af 90       	pop	r10
    2d0e:	9f 90       	pop	r9
    2d10:	8f 90       	pop	r8
    2d12:	7f 90       	pop	r7
    2d14:	08 95       	ret

00002d16 <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
    2d16:	bf 92       	push	r11
    2d18:	cf 92       	push	r12
    2d1a:	df 92       	push	r13
    2d1c:	ef 92       	push	r14
    2d1e:	ff 92       	push	r15
    2d20:	0f 93       	push	r16
    2d22:	1f 93       	push	r17
    2d24:	cf 93       	push	r28
    2d26:	df 93       	push	r29
    2d28:	18 2f       	mov	r17, r24
    2d2a:	06 2f       	mov	r16, r22
    2d2c:	ea 01       	movw	r28, r20
    2d2e:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    2d30:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <genuI2C_Status>
    2d34:	86 30       	cpi	r24, 0x06	; 6
    2d36:	59 f5       	brne	.+86     	; 0x2d8e <I2C_MasterSendToLocation+0x78>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    2d38:	20 97       	sbiw	r28, 0x00	; 0
    2d3a:	59 f1       	breq	.+86     	; 0x2d92 <I2C_MasterSendToLocation+0x7c>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    2d3c:	11 23       	and	r17, r17
    2d3e:	5c f1       	brlt	.+86     	; 0x2d96 <I2C_MasterSendToLocation+0x80>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2d40:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <I2C_MasterSendSTART>
    2d44:	88 23       	and	r24, r24
    2d46:	61 f1       	breq	.+88     	; 0x2da0 <I2C_MasterSendToLocation+0x8a>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2d48:	60 e0       	ldi	r22, 0x00	; 0
    2d4a:	81 2f       	mov	r24, r17
    2d4c:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <I2C_MasterSendSlaveAddress>
    2d50:	b8 2e       	mov	r11, r24
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	b8 12       	cpse	r11, r24
    2d56:	21 c0       	rjmp	.+66     	; 0x2d9a <I2C_MasterSendToLocation+0x84>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2d58:	80 2f       	mov	r24, r16
    2d5a:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <I2C_MasterSendByte>
    2d5e:	81 11       	cpse	r24, r1
    2d60:	0c c0       	rjmp	.+24     	; 0x2d7a <I2C_MasterSendToLocation+0x64>
    2d62:	1e c0       	rjmp	.+60     	; 0x2da0 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2d64:	6e 01       	movw	r12, r28
    2d66:	8f ef       	ldi	r24, 0xFF	; 255
    2d68:	c8 1a       	sub	r12, r24
    2d6a:	d8 0a       	sbc	r13, r24
    2d6c:	88 81       	ld	r24, Y
    2d6e:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <I2C_MasterSendByte>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    2d72:	78 01       	movw	r14, r16
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2d74:	88 23       	and	r24, r24
    2d76:	a1 f0       	breq	.+40     	; 0x2da0 <I2C_MasterSendToLocation+0x8a>
    2d78:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    2d7a:	87 01       	movw	r16, r14
    2d7c:	01 50       	subi	r16, 0x01	; 1
    2d7e:	11 09       	sbc	r17, r1
    2d80:	ef 28       	or	r14, r15
    2d82:	81 f7       	brne	.-32     	; 0x2d64 <I2C_MasterSendToLocation+0x4e>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2d84:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <I2C_MasterSendSTOP>
    2d88:	81 11       	cpse	r24, r1
    2d8a:	09 c0       	rjmp	.+18     	; 0x2d9e <I2C_MasterSendToLocation+0x88>
    2d8c:	09 c0       	rjmp	.+18     	; 0x2da0 <I2C_MasterSendToLocation+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    2d8e:	85 e0       	ldi	r24, 0x05	; 5
    2d90:	07 c0       	rjmp	.+14     	; 0x2da0 <I2C_MasterSendToLocation+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2d92:	84 e0       	ldi	r24, 0x04	; 4
    2d94:	05 c0       	rjmp	.+10     	; 0x2da0 <I2C_MasterSendToLocation+0x8a>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    2d96:	83 e0       	ldi	r24, 0x03	; 3
    2d98:	03 c0       	rjmp	.+6      	; 0x2da0 <I2C_MasterSendToLocation+0x8a>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	01 c0       	rjmp	.+2      	; 0x2da0 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
    2d9e:	8b 2d       	mov	r24, r11
}
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28
    2da4:	1f 91       	pop	r17
    2da6:	0f 91       	pop	r16
    2da8:	ff 90       	pop	r15
    2daa:	ef 90       	pop	r14
    2dac:	df 90       	pop	r13
    2dae:	cf 90       	pop	r12
    2db0:	bf 90       	pop	r11
    2db2:	08 95       	ret

00002db4 <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
    2db4:	0f 93       	push	r16
    2db6:	1f 93       	push	r17
    2db8:	cf 93       	push	r28
    2dba:	df 93       	push	r29
    2dbc:	1f 92       	push	r1
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
    2dc2:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
    2dc4:	89 01       	movw	r16, r18
    2dc6:	9a 01       	movw	r18, r20
    2dc8:	41 e0       	ldi	r20, 0x01	; 1
    2dca:	50 e0       	ldi	r21, 0x00	; 0
    2dcc:	be 01       	movw	r22, r28
    2dce:	6f 5f       	subi	r22, 0xFF	; 255
    2dd0:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd2:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <I2C_MasterReceiveGeneral>
}
    2dd6:	0f 90       	pop	r0
    2dd8:	df 91       	pop	r29
    2dda:	cf 91       	pop	r28
    2ddc:	1f 91       	pop	r17
    2dde:	0f 91       	pop	r16
    2de0:	08 95       	ret

00002de2 <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
    2de2:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <genuSpi_Status>
    2de6:	87 30       	cpi	r24, 0x07	; 7
    2de8:	b9 f0       	breq	.+46     	; 0x2e18 <Spi_init+0x36>
    2dea:	87 b3       	in	r24, 0x17	; 23
    2dec:	80 64       	ori	r24, 0x40	; 64
    2dee:	87 bb       	out	0x17, r24	; 23
    2df0:	87 b3       	in	r24, 0x17	; 23
    2df2:	8f 7d       	andi	r24, 0xDF	; 223
    2df4:	87 bb       	out	0x17, r24	; 23
    2df6:	87 b3       	in	r24, 0x17	; 23
    2df8:	8f 7e       	andi	r24, 0xEF	; 239
    2dfa:	87 bb       	out	0x17, r24	; 23
    2dfc:	87 b3       	in	r24, 0x17	; 23
    2dfe:	8f 77       	andi	r24, 0x7F	; 127
    2e00:	87 bb       	out	0x17, r24	; 23
    2e02:	8d b1       	in	r24, 0x0d	; 13
    2e04:	8f 7e       	andi	r24, 0xEF	; 239
    2e06:	8d b9       	out	0x0d, r24	; 13
    2e08:	8d b1       	in	r24, 0x0d	; 13
    2e0a:	80 64       	ori	r24, 0x40	; 64
    2e0c:	8d b9       	out	0x0d, r24	; 13
    2e0e:	87 e0       	ldi	r24, 0x07	; 7
    2e10:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <genuSpi_Status>
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	08 95       	ret
    2e18:	88 e0       	ldi	r24, 0x08	; 8
    2e1a:	08 95       	ret

00002e1c <Spi_SlaveReceiveByte>:
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <genuSpi_Status>
    2e22:	97 30       	cpi	r25, 0x07	; 7
    2e24:	41 f4       	brne	.+16     	; 0x2e36 <Spi_SlaveReceiveByte+0x1a>
    2e26:	30 97       	sbiw	r30, 0x00	; 0
    2e28:	41 f0       	breq	.+16     	; 0x2e3a <Spi_SlaveReceiveByte+0x1e>
    2e2a:	77 9b       	sbis	0x0e, 7	; 14
    2e2c:	fe cf       	rjmp	.-4      	; 0x2e2a <Spi_SlaveReceiveByte+0xe>
    2e2e:	8f b1       	in	r24, 0x0f	; 15
    2e30:	80 83       	st	Z, r24
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	08 95       	ret
    2e36:	86 e0       	ldi	r24, 0x06	; 6
    2e38:	08 95       	ret
    2e3a:	85 e0       	ldi	r24, 0x05	; 5
    2e3c:	08 95       	ret

00002e3e <Spi_SlaveReceivePacket>:
    2e3e:	cf 92       	push	r12
    2e40:	df 92       	push	r13
    2e42:	ef 92       	push	r14
    2e44:	ff 92       	push	r15
    2e46:	1f 93       	push	r17
    2e48:	cf 93       	push	r28
    2e4a:	df 93       	push	r29
    2e4c:	6c 01       	movw	r12, r24
    2e4e:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <genuSpi_Status>
    2e52:	97 30       	cpi	r25, 0x07	; 7
    2e54:	b1 f4       	brne	.+44     	; 0x2e82 <Spi_SlaveReceivePacket+0x44>
    2e56:	7b 01       	movw	r14, r22
    2e58:	10 e0       	ldi	r17, 0x00	; 0
    2e5a:	0c c0       	rjmp	.+24     	; 0x2e74 <Spi_SlaveReceivePacket+0x36>
    2e5c:	e6 01       	movw	r28, r12
    2e5e:	c8 0f       	add	r28, r24
    2e60:	d9 1f       	adc	r29, r25
    2e62:	ce 01       	movw	r24, r28
    2e64:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <Spi_SlaveReceiveByte>
    2e68:	81 30       	cpi	r24, 0x01	; 1
    2e6a:	69 f4       	brne	.+26     	; 0x2e86 <Spi_SlaveReceivePacket+0x48>
    2e6c:	98 81       	ld	r25, Y
    2e6e:	99 23       	and	r25, r25
    2e70:	59 f0       	breq	.+22     	; 0x2e88 <Spi_SlaveReceivePacket+0x4a>
    2e72:	1f 5f       	subi	r17, 0xFF	; 255
    2e74:	81 2f       	mov	r24, r17
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	8e 15       	cp	r24, r14
    2e7a:	9f 05       	cpc	r25, r15
    2e7c:	78 f3       	brcs	.-34     	; 0x2e5c <Spi_SlaveReceivePacket+0x1e>
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	03 c0       	rjmp	.+6      	; 0x2e88 <Spi_SlaveReceivePacket+0x4a>
    2e82:	86 e0       	ldi	r24, 0x06	; 6
    2e84:	01 c0       	rjmp	.+2      	; 0x2e88 <Spi_SlaveReceivePacket+0x4a>
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	1f 91       	pop	r17
    2e8e:	ff 90       	pop	r15
    2e90:	ef 90       	pop	r14
    2e92:	df 90       	pop	r13
    2e94:	cf 90       	pop	r12
    2e96:	08 95       	ret

00002e98 <__vector_12>:


    2e98:	1f 92       	push	r1
    2e9a:	0f 92       	push	r0
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	0f 92       	push	r0
    2ea0:	11 24       	eor	r1, r1
    2ea2:	2f 93       	push	r18
    2ea4:	3f 93       	push	r19
    2ea6:	4f 93       	push	r20
    2ea8:	5f 93       	push	r21
    2eaa:	6f 93       	push	r22
    2eac:	7f 93       	push	r23
    2eae:	8f 93       	push	r24
    2eb0:	9f 93       	push	r25
    2eb2:	af 93       	push	r26
    2eb4:	bf 93       	push	r27
    2eb6:	ef 93       	push	r30
    2eb8:	ff 93       	push	r31
    2eba:	e0 91 4c 05 	lds	r30, 0x054C	; 0x80054c <SPI_STC_CallBackPtr>
    2ebe:	f0 91 4d 05 	lds	r31, 0x054D	; 0x80054d <SPI_STC_CallBackPtr+0x1>
    2ec2:	09 95       	icall
    2ec4:	ff 91       	pop	r31
    2ec6:	ef 91       	pop	r30
    2ec8:	bf 91       	pop	r27
    2eca:	af 91       	pop	r26
    2ecc:	9f 91       	pop	r25
    2ece:	8f 91       	pop	r24
    2ed0:	7f 91       	pop	r23
    2ed2:	6f 91       	pop	r22
    2ed4:	5f 91       	pop	r21
    2ed6:	4f 91       	pop	r20
    2ed8:	3f 91       	pop	r19
    2eda:	2f 91       	pop	r18
    2edc:	0f 90       	pop	r0
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	0f 90       	pop	r0
    2ee2:	1f 90       	pop	r1
    2ee4:	18 95       	reti

00002ee6 <stringLength>:
			temp_val = pu8_String[s8_loopIndex] - 87;
			*pu16_Num += temp_val*power(16,u8_powerValue++);
		}

	}
}
    2ee6:	ac 01       	movw	r20, r24
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	01 c0       	rjmp	.+2      	; 0x2eee <stringLength+0x8>
    2eec:	8f 5f       	subi	r24, 0xFF	; 255
    2eee:	fa 01       	movw	r30, r20
    2ef0:	e8 0f       	add	r30, r24
    2ef2:	f1 1d       	adc	r31, r1
    2ef4:	20 81       	ld	r18, Z
    2ef6:	21 11       	cpse	r18, r1
    2ef8:	f9 cf       	rjmp	.-14     	; 0x2eec <stringLength+0x6>
    2efa:	8f 5f       	subi	r24, 0xFF	; 255
    2efc:	08 95       	ret

00002efe <stringCompare>:
    2efe:	ff 92       	push	r15
    2f00:	0f 93       	push	r16
    2f02:	1f 93       	push	r17
    2f04:	cf 93       	push	r28
    2f06:	df 93       	push	r29
    2f08:	8c 01       	movw	r16, r24
    2f0a:	eb 01       	movw	r28, r22
    2f0c:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <stringLength>
    2f10:	f8 2e       	mov	r15, r24
    2f12:	ce 01       	movw	r24, r28
    2f14:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <stringLength>
    2f18:	8f 15       	cp	r24, r15
    2f1a:	b8 f0       	brcs	.+46     	; 0x2f4a <stringCompare+0x4c>
    2f1c:	f8 16       	cp	r15, r24
    2f1e:	b8 f0       	brcs	.+46     	; 0x2f4e <stringCompare+0x50>
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	09 c0       	rjmp	.+18     	; 0x2f36 <stringCompare+0x38>
    2f24:	fe 01       	movw	r30, r28
    2f26:	e8 0f       	add	r30, r24
    2f28:	f9 1f       	adc	r31, r25
    2f2a:	80 81       	ld	r24, Z
    2f2c:	82 17       	cp	r24, r18
    2f2e:	88 f0       	brcs	.+34     	; 0x2f52 <stringCompare+0x54>
    2f30:	28 17       	cp	r18, r24
    2f32:	88 f0       	brcs	.+34     	; 0x2f56 <stringCompare+0x58>
    2f34:	3f 5f       	subi	r19, 0xFF	; 255
    2f36:	83 2f       	mov	r24, r19
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	f8 01       	movw	r30, r16
    2f3c:	e8 0f       	add	r30, r24
    2f3e:	f9 1f       	adc	r31, r25
    2f40:	20 81       	ld	r18, Z
    2f42:	21 11       	cpse	r18, r1
    2f44:	ef cf       	rjmp	.-34     	; 0x2f24 <stringCompare+0x26>
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	07 c0       	rjmp	.+14     	; 0x2f58 <stringCompare+0x5a>
    2f4a:	82 e0       	ldi	r24, 0x02	; 2
    2f4c:	05 c0       	rjmp	.+10     	; 0x2f58 <stringCompare+0x5a>
    2f4e:	83 e0       	ldi	r24, 0x03	; 3
    2f50:	03 c0       	rjmp	.+6      	; 0x2f58 <stringCompare+0x5a>
    2f52:	82 e0       	ldi	r24, 0x02	; 2
    2f54:	01 c0       	rjmp	.+2      	; 0x2f58 <stringCompare+0x5a>
    2f56:	83 e0       	ldi	r24, 0x03	; 3
    2f58:	df 91       	pop	r29
    2f5a:	cf 91       	pop	r28
    2f5c:	1f 91       	pop	r17
    2f5e:	0f 91       	pop	r16
    2f60:	ff 90       	pop	r15
    2f62:	08 95       	ret

00002f64 <EmptyString>:
    2f64:	ac 01       	movw	r20, r24
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	02 c0       	rjmp	.+4      	; 0x2f6e <EmptyString+0xa>
    2f6a:	9f 5f       	subi	r25, 0xFF	; 255
    2f6c:	10 82       	st	Z, r1
    2f6e:	fa 01       	movw	r30, r20
    2f70:	e9 0f       	add	r30, r25
    2f72:	f1 1d       	adc	r31, r1
    2f74:	20 81       	ld	r18, Z
    2f76:	21 11       	cpse	r18, r1
    2f78:	f8 cf       	rjmp	.-16     	; 0x2f6a <EmptyString+0x6>
    2f7a:	08 95       	ret

00002f7c <stringCopy>:
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	05 c0       	rjmp	.+10     	; 0x2f8c <stringCopy+0x10>
    2f82:	fb 01       	movw	r30, r22
    2f84:	e2 0f       	add	r30, r18
    2f86:	f3 1f       	adc	r31, r19
    2f88:	40 83       	st	Z, r20
    2f8a:	9f 5f       	subi	r25, 0xFF	; 255
    2f8c:	29 2f       	mov	r18, r25
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	fd 01       	movw	r30, r26
    2f92:	e2 0f       	add	r30, r18
    2f94:	f3 1f       	adc	r31, r19
    2f96:	40 81       	ld	r20, Z
    2f98:	41 11       	cpse	r20, r1
    2f9a:	f3 cf       	rjmp	.-26     	; 0x2f82 <stringCopy+0x6>
    2f9c:	08 95       	ret

00002f9e <integerToString>:

void integerToString(uint16_t u16_Num, uint8_t *pu8_String, uint8_t u8_base)
{
    2f9e:	0f 93       	push	r16
    2fa0:	1f 93       	push	r17
    2fa2:	cf 93       	push	r28
    2fa4:	df 93       	push	r29
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	8b 01       	movw	r16, r22
	if(u8_base == DEC)
    2faa:	41 30       	cpi	r20, 0x01	; 1
    2fac:	d1 f5       	brne	.+116    	; 0x3022 <integerToString+0x84>
	{
		int i=0,n=0;
		n=u16_Num;
		for(i=0;;i++)
    2fae:	c0 e0       	ldi	r28, 0x00	; 0
    2fb0:	d0 e0       	ldi	r29, 0x00	; 0
		{
			n/=10;
    2fb2:	6a e0       	ldi	r22, 0x0A	; 10
    2fb4:	70 e0       	ldi	r23, 0x00	; 0
    2fb6:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <__divmodhi4>
    2fba:	cb 01       	movw	r24, r22
			if(n==0) break;
    2fbc:	00 97       	sbiw	r24, 0x00	; 0
    2fbe:	79 f1       	breq	.+94     	; 0x301e <integerToString+0x80>
{
	if(u8_base == DEC)
	{
		int i=0,n=0;
		n=u16_Num;
		for(i=0;;i++)
    2fc0:	21 96       	adiw	r28, 0x01	; 1
		{
			n/=10;
			if(n==0) break;
		}
    2fc2:	f7 cf       	rjmp	.-18     	; 0x2fb2 <integerToString+0x14>
		while (u16_Num)
		{
			pu8_String[i--] = (u16_Num % 10) + '0';
    2fc4:	a8 01       	movw	r20, r16
    2fc6:	4c 0f       	add	r20, r28
    2fc8:	5d 1f       	adc	r21, r29
    2fca:	9f 01       	movw	r18, r30
    2fcc:	ad ec       	ldi	r26, 0xCD	; 205
    2fce:	bc ec       	ldi	r27, 0xCC	; 204
    2fd0:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__umulhisi3>
    2fd4:	96 95       	lsr	r25
    2fd6:	87 95       	ror	r24
    2fd8:	96 95       	lsr	r25
    2fda:	87 95       	ror	r24
    2fdc:	96 95       	lsr	r25
    2fde:	87 95       	ror	r24
    2fe0:	9c 01       	movw	r18, r24
    2fe2:	22 0f       	add	r18, r18
    2fe4:	33 1f       	adc	r19, r19
    2fe6:	88 0f       	add	r24, r24
    2fe8:	99 1f       	adc	r25, r25
    2fea:	88 0f       	add	r24, r24
    2fec:	99 1f       	adc	r25, r25
    2fee:	88 0f       	add	r24, r24
    2ff0:	99 1f       	adc	r25, r25
    2ff2:	82 0f       	add	r24, r18
    2ff4:	93 1f       	adc	r25, r19
    2ff6:	9f 01       	movw	r18, r30
    2ff8:	28 1b       	sub	r18, r24
    2ffa:	39 0b       	sbc	r19, r25
    2ffc:	c9 01       	movw	r24, r18
    2ffe:	80 5d       	subi	r24, 0xD0	; 208
    3000:	da 01       	movw	r26, r20
    3002:	8c 93       	st	X, r24
			u16_Num /= 10;
    3004:	9f 01       	movw	r18, r30
    3006:	ad ec       	ldi	r26, 0xCD	; 205
    3008:	bc ec       	ldi	r27, 0xCC	; 204
    300a:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__umulhisi3>
    300e:	fc 01       	movw	r30, r24
    3010:	f6 95       	lsr	r31
    3012:	e7 95       	ror	r30
    3014:	f6 95       	lsr	r31
    3016:	e7 95       	ror	r30
    3018:	f6 95       	lsr	r31
    301a:	e7 95       	ror	r30
			n/=10;
			if(n==0) break;
		}
		while (u16_Num)
		{
			pu8_String[i--] = (u16_Num % 10) + '0';
    301c:	21 97       	sbiw	r28, 0x01	; 1
		for(i=0;;i++)
		{
			n/=10;
			if(n==0) break;
		}
		while (u16_Num)
    301e:	30 97       	sbiw	r30, 0x00	; 0
    3020:	89 f6       	brne	.-94     	; 0x2fc4 <integerToString+0x26>

	}else if(u8_base == HEX)
	{

	}
}
    3022:	df 91       	pop	r29
    3024:	cf 91       	pop	r28
    3026:	1f 91       	pop	r17
    3028:	0f 91       	pop	r16
    302a:	08 95       	ret

0000302c <waveFunction>:
* Parameters (out): None
* Return value: None
* Description: Function to be called inside the timer's ISR.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
void waveFunction(void)
{
    302c:	0f 93       	push	r16
    302e:	1f 93       	push	r17
	/* Toggle the Pin of the PWM Channel */
	if(Dio_togglePin(SWPwm_Channels[gu8_currentPwmChannel].u8_DioChannelID) != DIO_STATUS_ERROR_OK)
    3030:	e0 91 4f 05 	lds	r30, 0x054F	; 0x80054f <gu8_currentPwmChannel>
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	ee 0f       	add	r30, r30
    3038:	ff 1f       	adc	r31, r31
    303a:	e7 51       	subi	r30, 0x17	; 23
    303c:	fc 4f       	sbci	r31, 0xFC	; 252
    303e:	80 81       	ld	r24, Z
    3040:	0e 94 cd 11 	call	0x239a	; 0x239a <Dio_togglePin>
    3044:	81 30       	cpi	r24, 0x01	; 1
    3046:	09 f0       	breq	.+2      	; 0x304a <waveFunction+0x1e>
    3048:	76 c0       	rjmp	.+236    	; 0x3136 <waveFunction+0x10a>
		return;
	/* Check if the PWM Channel is still in Running State */
	if (gstr_ChannelsData[gu8_currentPwmChannel].enuChannelState == SWPWM_RUNNING)
    304a:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <gu8_currentPwmChannel>
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	9c 01       	movw	r18, r24
    3052:	22 0f       	add	r18, r18
    3054:	33 1f       	adc	r19, r19
    3056:	f9 01       	movw	r30, r18
    3058:	ee 0f       	add	r30, r30
    305a:	ff 1f       	adc	r31, r31
    305c:	ee 0f       	add	r30, r30
    305e:	ff 1f       	adc	r31, r31
    3060:	ee 0f       	add	r30, r30
    3062:	ff 1f       	adc	r31, r31
    3064:	e2 1b       	sub	r30, r18
    3066:	f3 0b       	sbc	r31, r19
    3068:	e0 5b       	subi	r30, 0xB0	; 176
    306a:	fa 4f       	sbci	r31, 0xFA	; 250
    306c:	25 85       	ldd	r18, Z+13	; 0x0d
    306e:	22 30       	cpi	r18, 0x02	; 2
    3070:	09 f0       	breq	.+2      	; 0x3074 <waveFunction+0x48>
    3072:	61 c0       	rjmp	.+194    	; 0x3136 <waveFunction+0x10a>
	{
		/* Start the Timer again with the new ticks assigned */
		if(GptStart_aSync(SWPwm_Channels[gu8_currentPwmChannel].u8_GptChannelID,\
    3074:	88 0f       	add	r24, r24
    3076:	99 1f       	adc	r25, r25
    3078:	fc 01       	movw	r30, r24
    307a:	ee 0f       	add	r30, r30
    307c:	ff 1f       	adc	r31, r31
    307e:	ee 0f       	add	r30, r30
    3080:	ff 1f       	adc	r31, r31
    3082:	ee 0f       	add	r30, r30
    3084:	ff 1f       	adc	r31, r31
    3086:	e8 1b       	sub	r30, r24
    3088:	f9 0b       	sbc	r31, r25
    308a:	e0 5b       	subi	r30, 0xB0	; 176
    308c:	fa 4f       	sbci	r31, 0xFA	; 250
    308e:	41 85       	ldd	r20, Z+9	; 0x09
    3090:	52 85       	ldd	r21, Z+10	; 0x0a
    3092:	63 85       	ldd	r22, Z+11	; 0x0b
    3094:	74 85       	ldd	r23, Z+12	; 0x0c
    3096:	fc 01       	movw	r30, r24
    3098:	e7 51       	subi	r30, 0x17	; 23
    309a:	fc 4f       	sbci	r31, 0xFC	; 252
    309c:	26 e1       	ldi	r18, 0x16	; 22
    309e:	38 e1       	ldi	r19, 0x18	; 24
    30a0:	81 81       	ldd	r24, Z+1	; 0x01
    30a2:	0e 94 9e 13 	call	0x273c	; 0x273c <GptStart_aSync>
    30a6:	81 30       	cpi	r24, 0x01	; 1
    30a8:	09 f0       	breq	.+2      	; 0x30ac <waveFunction+0x80>
    30aa:	45 c0       	rjmp	.+138    	; 0x3136 <waveFunction+0x10a>
		                  gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks,\
						   waveFunction) != GPT_STATUS_ERROR_OK)	return;
		
		/* Replace the next ticks to be counted between ONTicks and OFFTicks*/
		if(gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks == gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks)
    30ac:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <gu8_currentPwmChannel>
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	9c 01       	movw	r18, r24
    30b4:	22 0f       	add	r18, r18
    30b6:	33 1f       	adc	r19, r19
    30b8:	f9 01       	movw	r30, r18
    30ba:	ee 0f       	add	r30, r30
    30bc:	ff 1f       	adc	r31, r31
    30be:	ee 0f       	add	r30, r30
    30c0:	ff 1f       	adc	r31, r31
    30c2:	ee 0f       	add	r30, r30
    30c4:	ff 1f       	adc	r31, r31
    30c6:	e2 1b       	sub	r30, r18
    30c8:	f3 0b       	sbc	r31, r19
    30ca:	e0 5b       	subi	r30, 0xB0	; 176
    30cc:	fa 4f       	sbci	r31, 0xFA	; 250
    30ce:	01 85       	ldd	r16, Z+9	; 0x09
    30d0:	12 85       	ldd	r17, Z+10	; 0x0a
    30d2:	23 85       	ldd	r18, Z+11	; 0x0b
    30d4:	34 85       	ldd	r19, Z+12	; 0x0c
    30d6:	45 81       	ldd	r20, Z+5	; 0x05
    30d8:	56 81       	ldd	r21, Z+6	; 0x06
    30da:	67 81       	ldd	r22, Z+7	; 0x07
    30dc:	70 85       	ldd	r23, Z+8	; 0x08
    30de:	04 17       	cp	r16, r20
    30e0:	15 07       	cpc	r17, r21
    30e2:	26 07       	cpc	r18, r22
    30e4:	37 07       	cpc	r19, r23
    30e6:	b1 f4       	brne	.+44     	; 0x3114 <waveFunction+0xe8>
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_ONTicks;
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	fc 01       	movw	r30, r24
    30ee:	ee 0f       	add	r30, r30
    30f0:	ff 1f       	adc	r31, r31
    30f2:	ee 0f       	add	r30, r30
    30f4:	ff 1f       	adc	r31, r31
    30f6:	ee 0f       	add	r30, r30
    30f8:	ff 1f       	adc	r31, r31
    30fa:	e8 1b       	sub	r30, r24
    30fc:	f9 0b       	sbc	r31, r25
    30fe:	e0 5b       	subi	r30, 0xB0	; 176
    3100:	fa 4f       	sbci	r31, 0xFA	; 250
    3102:	81 81       	ldd	r24, Z+1	; 0x01
    3104:	92 81       	ldd	r25, Z+2	; 0x02
    3106:	a3 81       	ldd	r26, Z+3	; 0x03
    3108:	b4 81       	ldd	r27, Z+4	; 0x04
    310a:	81 87       	std	Z+9, r24	; 0x09
    310c:	92 87       	std	Z+10, r25	; 0x0a
    310e:	a3 87       	std	Z+11, r26	; 0x0b
    3110:	b4 87       	std	Z+12, r27	; 0x0c
    3112:	11 c0       	rjmp	.+34     	; 0x3136 <waveFunction+0x10a>
		else
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks;
    3114:	88 0f       	add	r24, r24
    3116:	99 1f       	adc	r25, r25
    3118:	fc 01       	movw	r30, r24
    311a:	ee 0f       	add	r30, r30
    311c:	ff 1f       	adc	r31, r31
    311e:	ee 0f       	add	r30, r30
    3120:	ff 1f       	adc	r31, r31
    3122:	ee 0f       	add	r30, r30
    3124:	ff 1f       	adc	r31, r31
    3126:	e8 1b       	sub	r30, r24
    3128:	f9 0b       	sbc	r31, r25
    312a:	e0 5b       	subi	r30, 0xB0	; 176
    312c:	fa 4f       	sbci	r31, 0xFA	; 250
    312e:	41 87       	std	Z+9, r20	; 0x09
    3130:	52 87       	std	Z+10, r21	; 0x0a
    3132:	63 87       	std	Z+11, r22	; 0x0b
    3134:	74 87       	std	Z+12, r23	; 0x0c
	}
}
    3136:	1f 91       	pop	r17
    3138:	0f 91       	pop	r16
    313a:	08 95       	ret

0000313c <SWPwm_Init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
    313c:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <genu_SWPwmModStatus>
    3140:	81 30       	cpi	r24, 0x01	; 1
    3142:	91 f0       	breq	.+36     	; 0x3168 <SWPwm_Init+0x2c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
    3144:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <GptInit>
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
    3148:	81 30       	cpi	r24, 0x01	; 1
    314a:	11 f0       	breq	.+4      	; 0x3150 <SWPwm_Init+0x14>
    314c:	83 30       	cpi	r24, 0x03	; 3
    314e:	71 f4       	brne	.+28     	; 0x316c <SWPwm_Init+0x30>
		return SWPWM_STATUS_ERROR_NOK;
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    3150:	8a e8       	ldi	r24, 0x8A	; 138
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	0e 94 46 10 	call	0x208c	; 0x208c <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    3158:	81 30       	cpi	r24, 0x01	; 1
    315a:	11 f0       	breq	.+4      	; 0x3160 <SWPwm_Init+0x24>
    315c:	87 30       	cpi	r24, 0x07	; 7
    315e:	41 f4       	brne	.+16     	; 0x3170 <SWPwm_Init+0x34>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <genu_SWPwmModStatus>
	return SWPWM_STATUS_ERROR_OK;
    3166:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_ERROR_NOK;
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
		return SWPWM_STATUS_ERROR_NOK;
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	08 95       	ret
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return SWPWM_STATUS_ERROR_NOK;
    3170:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
	return SWPWM_STATUS_ERROR_OK;
}
    3172:	08 95       	ret

00003174 <SWPwm_Start>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Start(u8SWPwm_Channel_t u8_ChannelID, uint32_t u32_Freq, uint8_t u8_DutyCycle)
{
    3174:	4f 92       	push	r4
    3176:	5f 92       	push	r5
    3178:	6f 92       	push	r6
    317a:	7f 92       	push	r7
    317c:	8f 92       	push	r8
    317e:	9f 92       	push	r9
    3180:	af 92       	push	r10
    3182:	bf 92       	push	r11
    3184:	cf 92       	push	r12
    3186:	df 92       	push	r13
    3188:	ef 92       	push	r14
    318a:	ff 92       	push	r15
    318c:	0f 93       	push	r16
    318e:	1f 93       	push	r17
    3190:	cf 93       	push	r28
    3192:	df 93       	push	r29
    3194:	00 d0       	rcall	.+0      	; 0x3196 <SWPwm_Start+0x22>
    3196:	00 d0       	rcall	.+0      	; 0x3198 <SWPwm_Start+0x24>
    3198:	00 d0       	rcall	.+0      	; 0x319a <SWPwm_Start+0x26>
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    319e:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <genu_SWPwmModStatus>
    31a2:	91 30       	cpi	r25, 0x01	; 1
    31a4:	09 f0       	breq	.+2      	; 0x31a8 <SWPwm_Start+0x34>
    31a6:	f2 c0       	rjmp	.+484    	; 0x338c <SWPwm_Start+0x218>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    31a8:	81 11       	cpse	r24, r1
    31aa:	f2 c0       	rjmp	.+484    	; 0x3390 <SWPwm_Start+0x21c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
    31ac:	25 36       	cpi	r18, 0x65	; 101
    31ae:	08 f0       	brcs	.+2      	; 0x31b2 <SWPwm_Start+0x3e>
    31b0:	f1 c0       	rjmp	.+482    	; 0x3394 <SWPwm_Start+0x220>
	{
		return SWPWM_STATUS_DC_OUTRANGE;
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
    31b2:	e8 2f       	mov	r30, r24
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	fe 83       	std	Y+6, r31	; 0x06
    31b8:	ed 83       	std	Y+5, r30	; 0x05
    31ba:	df 01       	movw	r26, r30
    31bc:	aa 0f       	add	r26, r26
    31be:	bb 1f       	adc	r27, r27
    31c0:	fd 01       	movw	r30, r26
    31c2:	ee 0f       	add	r30, r30
    31c4:	ff 1f       	adc	r31, r31
    31c6:	ee 0f       	add	r30, r30
    31c8:	ff 1f       	adc	r31, r31
    31ca:	ee 0f       	add	r30, r30
    31cc:	ff 1f       	adc	r31, r31
    31ce:	ea 1b       	sub	r30, r26
    31d0:	fb 0b       	sbc	r31, r27
    31d2:	e0 5b       	subi	r30, 0xB0	; 176
    31d4:	fa 4f       	sbci	r31, 0xFA	; 250
    31d6:	95 85       	ldd	r25, Z+13	; 0x0d
    31d8:	92 30       	cpi	r25, 0x02	; 2
    31da:	09 f4       	brne	.+2      	; 0x31de <SWPwm_Start+0x6a>
    31dc:	dd c0       	rjmp	.+442    	; 0x3398 <SWPwm_Start+0x224>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
    31de:	22 23       	and	r18, r18
    31e0:	09 f4       	brne	.+2      	; 0x31e4 <SWPwm_Start+0x70>
    31e2:	dc c0       	rjmp	.+440    	; 0x339c <SWPwm_Start+0x228>
    31e4:	12 2f       	mov	r17, r18
    31e6:	c8 2e       	mov	r12, r24
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
	}else if(u8_DutyCycle == 100)
    31e8:	24 36       	cpi	r18, 0x64	; 100
    31ea:	61 f4       	brne	.+24     	; 0x3204 <SWPwm_Start+0x90>
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    31ec:	fd 01       	movw	r30, r26
    31ee:	e7 51       	subi	r30, 0x17	; 23
    31f0:	fc 4f       	sbci	r31, 0xFC	; 252
    31f2:	61 e0       	ldi	r22, 0x01	; 1
    31f4:	80 81       	ld	r24, Z
    31f6:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    31fa:	81 30       	cpi	r24, 0x01	; 1
    31fc:	09 f4       	brne	.+2      	; 0x3200 <SWPwm_Start+0x8c>
    31fe:	d0 c0       	rjmp	.+416    	; 0x33a0 <SWPwm_Start+0x22c>
			return SWPWM_STATUS_ERROR_NOK;
    3200:	80 e0       	ldi	r24, 0x00	; 0
    3202:	d5 c0       	rjmp	.+426    	; 0x33ae <SWPwm_Start+0x23a>
		return SWPWM_STATUS_ERROR_OK;
	}
	
	float32_t f32_wavePeriodTime = (float32_t)1 / u32_Freq;					/* The Periodic Time for the Generated Pulse in Seconds */
    3204:	cb 01       	movw	r24, r22
    3206:	ba 01       	movw	r22, r20
    3208:	0e 94 18 1c 	call	0x3830	; 0x3830 <__floatunsisf>
    320c:	9b 01       	movw	r18, r22
    320e:	ac 01       	movw	r20, r24
    3210:	60 e0       	ldi	r22, 0x00	; 0
    3212:	70 e0       	ldi	r23, 0x00	; 0
    3214:	80 e8       	ldi	r24, 0x80	; 128
    3216:	9f e3       	ldi	r25, 0x3F	; 63
    3218:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    321c:	4b 01       	movw	r8, r22
    321e:	5c 01       	movw	r10, r24
	float32_t f32_waveONTime = (f32_wavePeriodTime*u8_DutyCycle) / 100;		/* The HIGH Level Time in Seconds */
    3220:	61 2f       	mov	r22, r17
    3222:	70 e0       	ldi	r23, 0x00	; 0
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
    322c:	a5 01       	movw	r20, r10
    322e:	94 01       	movw	r18, r8
    3230:	0e 94 a6 1c 	call	0x394c	; 0x394c <__mulsf3>
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	48 ec       	ldi	r20, 0xC8	; 200
    323a:	52 e4       	ldi	r21, 0x42	; 66
    323c:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    3240:	2b 01       	movw	r4, r22
    3242:	3c 01       	movw	r6, r24
	float32_t f32_waveOFFTime = f32_wavePeriodTime - f32_waveONTime;		/* The LOW Level Time in Seconds */
    3244:	9b 01       	movw	r18, r22
    3246:	ac 01       	movw	r20, r24
    3248:	c5 01       	movw	r24, r10
    324a:	b4 01       	movw	r22, r8
    324c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__subsf3>
    3250:	4b 01       	movw	r8, r22
    3252:	5c 01       	movw	r10, r24
	float32_t f32_systemPeriodTime = 0.0;
	uint16_t  u16_prescalerValue = 0;
	
	/* Get the Prescaler Value of the used Timer Channel */
	switch(Timers_Configurations[SWPwm_Channels[u8_ChannelID].u8_GptChannelID].enuClock_Src)
    3254:	ed 81       	ldd	r30, Y+5	; 0x05
    3256:	fe 81       	ldd	r31, Y+6	; 0x06
    3258:	ee 0f       	add	r30, r30
    325a:	ff 1f       	adc	r31, r31
    325c:	e7 51       	subi	r30, 0x17	; 23
    325e:	fc 4f       	sbci	r31, 0xFC	; 252
    3260:	d1 80       	ldd	r13, Z+1	; 0x01
    3262:	8d 2d       	mov	r24, r13
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	fc 01       	movw	r30, r24
    3268:	ee 0f       	add	r30, r30
    326a:	ff 1f       	adc	r31, r31
    326c:	8e 0f       	add	r24, r30
    326e:	9f 1f       	adc	r25, r31
    3270:	fc 01       	movw	r30, r24
    3272:	ea 51       	subi	r30, 0x1A	; 26
    3274:	fc 4f       	sbci	r31, 0xFC	; 252
    3276:	e1 81       	ldd	r30, Z+1	; 0x01
    3278:	8e 2f       	mov	r24, r30
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	fc 01       	movw	r30, r24
    327e:	31 97       	sbiw	r30, 0x01	; 1
    3280:	e7 30       	cpi	r30, 0x07	; 7
    3282:	f1 05       	cpc	r31, r1
    3284:	08 f0       	brcs	.+2      	; 0x3288 <SWPwm_Start+0x114>
    3286:	8e c0       	rjmp	.+284    	; 0x33a4 <SWPwm_Start+0x230>
    3288:	e6 5d       	subi	r30, 0xD6	; 214
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	0c 94 49 1d 	jmp	0x3a92	; 0x3a92 <__tablejump2__>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
    3290:	61 e0       	ldi	r22, 0x01	; 1
    3292:	70 e0       	ldi	r23, 0x00	; 0
    3294:	0b c0       	rjmp	.+22     	; 0x32ac <SWPwm_Start+0x138>
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
			break;
		case GPT_CLK_SRC_PRSCLR_64:
			u16_prescalerValue = 64;
    3296:	60 e4       	ldi	r22, 0x40	; 64
    3298:	70 e0       	ldi	r23, 0x00	; 0
			break;
    329a:	08 c0       	rjmp	.+16     	; 0x32ac <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_256:
			u16_prescalerValue = 256;
    329c:	60 e0       	ldi	r22, 0x00	; 0
    329e:	71 e0       	ldi	r23, 0x01	; 1
			break;
    32a0:	05 c0       	rjmp	.+10     	; 0x32ac <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_1024:
			u16_prescalerValue = 1024;
    32a2:	60 e0       	ldi	r22, 0x00	; 0
    32a4:	74 e0       	ldi	r23, 0x04	; 4
			break;
    32a6:	02 c0       	rjmp	.+4      	; 0x32ac <SWPwm_Start+0x138>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
    32a8:	68 e0       	ldi	r22, 0x08	; 8
    32aa:	70 e0       	ldi	r23, 0x00	; 0
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
	}
	
	f32_systemPeriodTime = (float32_t)u16_prescalerValue/SYS_CLOCK_FREQUENCY;				/* The Controllers Periodic Time in seconds based on the System Clock Frequency */
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	0e 94 18 1c 	call	0x3830	; 0x3830 <__floatunsisf>
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	34 e2       	ldi	r19, 0x24	; 36
    32b8:	44 e7       	ldi	r20, 0x74	; 116
    32ba:	59 e4       	ldi	r21, 0x49	; 73
    32bc:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    32c0:	69 83       	std	Y+1, r22	; 0x01
    32c2:	7a 83       	std	Y+2, r23	; 0x02
    32c4:	8b 83       	std	Y+3, r24	; 0x03
    32c6:	9c 83       	std	Y+4, r25	; 0x04
	gu8_currentPwmChannel = u8_ChannelID;
    32c8:	c0 92 4f 05 	sts	0x054F, r12	; 0x80054f <gu8_currentPwmChannel>
	gstr_ChannelsData[u8_ChannelID].u32_ONTicks = f32_waveONTime/f32_systemPeriodTime;		/* The HIGH Level Time in Ticks */
    32cc:	9b 01       	movw	r18, r22
    32ce:	ac 01       	movw	r20, r24
    32d0:	c3 01       	movw	r24, r6
    32d2:	b2 01       	movw	r22, r4
    32d4:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    32d8:	ed 80       	ldd	r14, Y+5	; 0x05
    32da:	fe 80       	ldd	r15, Y+6	; 0x06
    32dc:	ee 0c       	add	r14, r14
    32de:	ff 1c       	adc	r15, r15
    32e0:	87 01       	movw	r16, r14
    32e2:	00 0f       	add	r16, r16
    32e4:	11 1f       	adc	r17, r17
    32e6:	00 0f       	add	r16, r16
    32e8:	11 1f       	adc	r17, r17
    32ea:	00 0f       	add	r16, r16
    32ec:	11 1f       	adc	r17, r17
    32ee:	0e 19       	sub	r16, r14
    32f0:	1f 09       	sbc	r17, r15
    32f2:	00 5b       	subi	r16, 0xB0	; 176
    32f4:	1a 4f       	sbci	r17, 0xFA	; 250
    32f6:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <__fixunssfsi>
    32fa:	f8 01       	movw	r30, r16
    32fc:	61 83       	std	Z+1, r22	; 0x01
    32fe:	72 83       	std	Z+2, r23	; 0x02
    3300:	83 83       	std	Z+3, r24	; 0x03
    3302:	94 83       	std	Z+4, r25	; 0x04
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
    3304:	29 81       	ldd	r18, Y+1	; 0x01
    3306:	3a 81       	ldd	r19, Y+2	; 0x02
    3308:	4b 81       	ldd	r20, Y+3	; 0x03
    330a:	5c 81       	ldd	r21, Y+4	; 0x04
    330c:	c5 01       	movw	r24, r10
    330e:	b4 01       	movw	r22, r8
    3310:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    3314:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <__fixunssfsi>
    3318:	f8 01       	movw	r30, r16
    331a:	65 83       	std	Z+5, r22	; 0x05
    331c:	76 83       	std	Z+6, r23	; 0x06
    331e:	87 83       	std	Z+7, r24	; 0x07
    3320:	90 87       	std	Z+8, r25	; 0x08
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;
    3322:	c0 82       	st	Z, r12

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    3324:	f7 01       	movw	r30, r14
    3326:	e7 51       	subi	r30, 0x17	; 23
    3328:	fc 4f       	sbci	r31, 0xFC	; 252
    332a:	61 e0       	ldi	r22, 0x01	; 1
    332c:	80 81       	ld	r24, Z
    332e:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    3332:	81 30       	cpi	r24, 0x01	; 1
    3334:	c9 f5       	brne	.+114    	; 0x33a8 <SWPwm_Start+0x234>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
    3336:	8e e0       	ldi	r24, 0x0E	; 14
    3338:	2d 81       	ldd	r18, Y+5	; 0x05
    333a:	3e 81       	ldd	r19, Y+6	; 0x06
    333c:	82 9f       	mul	r24, r18
    333e:	f0 01       	movw	r30, r0
    3340:	83 9f       	mul	r24, r19
    3342:	f0 0d       	add	r31, r0
    3344:	11 24       	eor	r1, r1
    3346:	e0 5b       	subi	r30, 0xB0	; 176
    3348:	fa 4f       	sbci	r31, 0xFA	; 250
    334a:	41 81       	ldd	r20, Z+1	; 0x01
    334c:	52 81       	ldd	r21, Z+2	; 0x02
    334e:	63 81       	ldd	r22, Z+3	; 0x03
    3350:	74 81       	ldd	r23, Z+4	; 0x04
    3352:	26 e1       	ldi	r18, 0x16	; 22
    3354:	38 e1       	ldi	r19, 0x18	; 24
    3356:	8d 2d       	mov	r24, r13
    3358:	0e 94 9e 13 	call	0x273c	; 0x273c <GptStart_aSync>
    335c:	81 30       	cpi	r24, 0x01	; 1
    335e:	31 f5       	brne	.+76     	; 0x33ac <SWPwm_Start+0x238>
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
	
	/* Assign the Next Ticks to be counted by the Asynchronous Timer */
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
    3360:	8e e0       	ldi	r24, 0x0E	; 14
    3362:	2d 81       	ldd	r18, Y+5	; 0x05
    3364:	3e 81       	ldd	r19, Y+6	; 0x06
    3366:	82 9f       	mul	r24, r18
    3368:	f0 01       	movw	r30, r0
    336a:	83 9f       	mul	r24, r19
    336c:	f0 0d       	add	r31, r0
    336e:	11 24       	eor	r1, r1
    3370:	e0 5b       	subi	r30, 0xB0	; 176
    3372:	fa 4f       	sbci	r31, 0xFA	; 250
    3374:	85 81       	ldd	r24, Z+5	; 0x05
    3376:	96 81       	ldd	r25, Z+6	; 0x06
    3378:	a7 81       	ldd	r26, Z+7	; 0x07
    337a:	b0 85       	ldd	r27, Z+8	; 0x08
    337c:	81 87       	std	Z+9, r24	; 0x09
    337e:	92 87       	std	Z+10, r25	; 0x0a
    3380:	a3 87       	std	Z+11, r26	; 0x0b
    3382:	b4 87       	std	Z+12, r27	; 0x0c
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;
    3384:	82 e0       	ldi	r24, 0x02	; 2
    3386:	85 87       	std	Z+13, r24	; 0x0d

	return SWPWM_STATUS_ERROR_OK;
    3388:	81 e0       	ldi	r24, 0x01	; 1
    338a:	11 c0       	rjmp	.+34     	; 0x33ae <SWPwm_Start+0x23a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    338c:	82 e0       	ldi	r24, 0x02	; 2
    338e:	0f c0       	rjmp	.+30     	; 0x33ae <SWPwm_Start+0x23a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    3390:	83 e0       	ldi	r24, 0x03	; 3
    3392:	0d c0       	rjmp	.+26     	; 0x33ae <SWPwm_Start+0x23a>
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
	{
		return SWPWM_STATUS_DC_OUTRANGE;
    3394:	84 e0       	ldi	r24, 0x04	; 4
    3396:	0b c0       	rjmp	.+22     	; 0x33ae <SWPwm_Start+0x23a>
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    3398:	85 e0       	ldi	r24, 0x05	; 5
    339a:	09 c0       	rjmp	.+18     	; 0x33ae <SWPwm_Start+0x23a>
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	07 c0       	rjmp	.+14     	; 0x33ae <SWPwm_Start+0x23a>
	}else if(u8_DutyCycle == 100)
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return SWPWM_STATUS_ERROR_NOK;
		return SWPWM_STATUS_ERROR_OK;
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	05 c0       	rjmp	.+10     	; 0x33ae <SWPwm_Start+0x23a>
			break;
		case GPT_CLK_SRC_PRSCLR_EXT_RISE:
			u16_prescalerValue = 1;
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	03 c0       	rjmp	.+6      	; 0x33ae <SWPwm_Start+0x23a>
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	01 c0       	rjmp	.+2      	; 0x33ae <SWPwm_Start+0x23a>
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
    33ac:	80 e0       	ldi	r24, 0x00	; 0
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;

	return SWPWM_STATUS_ERROR_OK;
}
    33ae:	26 96       	adiw	r28, 0x06	; 6
    33b0:	0f b6       	in	r0, 0x3f	; 63
    33b2:	f8 94       	cli
    33b4:	de bf       	out	0x3e, r29	; 62
    33b6:	0f be       	out	0x3f, r0	; 63
    33b8:	cd bf       	out	0x3d, r28	; 61
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	1f 91       	pop	r17
    33c0:	0f 91       	pop	r16
    33c2:	ff 90       	pop	r15
    33c4:	ef 90       	pop	r14
    33c6:	df 90       	pop	r13
    33c8:	cf 90       	pop	r12
    33ca:	bf 90       	pop	r11
    33cc:	af 90       	pop	r10
    33ce:	9f 90       	pop	r9
    33d0:	8f 90       	pop	r8
    33d2:	7f 90       	pop	r7
    33d4:	6f 90       	pop	r6
    33d6:	5f 90       	pop	r5
    33d8:	4f 90       	pop	r4
    33da:	08 95       	ret

000033dc <SWPwm_Stop>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Stop(u8SWPwm_Channel_t u8_ChannelID)
{
    33dc:	cf 93       	push	r28
    33de:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    33e0:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <genu_SWPwmModStatus>
    33e4:	91 30       	cpi	r25, 0x01	; 1
    33e6:	b1 f5       	brne	.+108    	; 0x3454 <SWPwm_Stop+0x78>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    33e8:	81 11       	cpse	r24, r1
    33ea:	36 c0       	rjmp	.+108    	; 0x3458 <SWPwm_Stop+0x7c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
    33ec:	c8 2f       	mov	r28, r24
    33ee:	d0 e0       	ldi	r29, 0x00	; 0
    33f0:	ce 01       	movw	r24, r28
    33f2:	88 0f       	add	r24, r24
    33f4:	99 1f       	adc	r25, r25
    33f6:	fc 01       	movw	r30, r24
    33f8:	ee 0f       	add	r30, r30
    33fa:	ff 1f       	adc	r31, r31
    33fc:	ee 0f       	add	r30, r30
    33fe:	ff 1f       	adc	r31, r31
    3400:	ee 0f       	add	r30, r30
    3402:	ff 1f       	adc	r31, r31
    3404:	e8 1b       	sub	r30, r24
    3406:	f9 0b       	sbc	r31, r25
    3408:	e0 5b       	subi	r30, 0xB0	; 176
    340a:	fa 4f       	sbci	r31, 0xFA	; 250
    340c:	85 85       	ldd	r24, Z+13	; 0x0d
    340e:	82 30       	cpi	r24, 0x02	; 2
    3410:	29 f5       	brne	.+74     	; 0x345c <SWPwm_Stop+0x80>
	
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
    3412:	fe 01       	movw	r30, r28
    3414:	ee 0f       	add	r30, r30
    3416:	ff 1f       	adc	r31, r31
    3418:	e7 51       	subi	r30, 0x17	; 23
    341a:	fc 4f       	sbci	r31, 0xFC	; 252
    341c:	60 e0       	ldi	r22, 0x00	; 0
    341e:	80 81       	ld	r24, Z
    3420:	0e 94 34 11 	call	0x2268	; 0x2268 <Dio_writePin>
    3424:	81 30       	cpi	r24, 0x01	; 1
    3426:	e1 f4       	brne	.+56     	; 0x3460 <SWPwm_Stop+0x84>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the State of the PWM Channel to STOPPED */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
    3428:	8e e0       	ldi	r24, 0x0E	; 14
    342a:	8c 9f       	mul	r24, r28
    342c:	f0 01       	movw	r30, r0
    342e:	8d 9f       	mul	r24, r29
    3430:	f0 0d       	add	r31, r0
    3432:	11 24       	eor	r1, r1
    3434:	e0 5b       	subi	r30, 0xB0	; 176
    3436:	fa 4f       	sbci	r31, 0xFA	; 250
    3438:	83 e0       	ldi	r24, 0x03	; 3
    343a:	85 87       	std	Z+13, r24	; 0x0d
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
    343c:	fe 01       	movw	r30, r28
    343e:	ee 0f       	add	r30, r30
    3440:	ff 1f       	adc	r31, r31
    3442:	e7 51       	subi	r30, 0x17	; 23
    3444:	fc 4f       	sbci	r31, 0xFC	; 252
    3446:	81 81       	ldd	r24, Z+1	; 0x01
    3448:	0e 94 fd 13 	call	0x27fa	; 0x27fa <GptStop>
    344c:	81 30       	cpi	r24, 0x01	; 1
    344e:	51 f0       	breq	.+20     	; 0x3464 <SWPwm_Stop+0x88>
		return SWPWM_STATUS_ERROR_NOK;
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	09 c0       	rjmp	.+18     	; 0x3466 <SWPwm_Stop+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    3454:	82 e0       	ldi	r24, 0x02	; 2
    3456:	07 c0       	rjmp	.+14     	; 0x3466 <SWPwm_Stop+0x8a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    3458:	83 e0       	ldi	r24, 0x03	; 3
    345a:	05 c0       	rjmp	.+10     	; 0x3466 <SWPwm_Stop+0x8a>
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    345c:	85 e0       	ldi	r24, 0x05	; 5
    345e:	03 c0       	rjmp	.+6      	; 0x3466 <SWPwm_Stop+0x8a>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	01 c0       	rjmp	.+2      	; 0x3466 <SWPwm_Stop+0x8a>
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
	
	return SWPWM_STATUS_ERROR_OK;
    3464:	81 e0       	ldi	r24, 0x01	; 1
}
    3466:	df 91       	pop	r29
    3468:	cf 91       	pop	r28
    346a:	08 95       	ret

0000346c <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    346c:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <u8_Uart_Status>
    3470:	81 30       	cpi	r24, 0x01	; 1
    3472:	81 f0       	breq	.+32     	; 0x3494 <Uart_init+0x28>
    3474:	10 bc       	out	0x20, r1	; 32
    3476:	8c e0       	ldi	r24, 0x0C	; 12
    3478:	89 b9       	out	0x09, r24	; 9
    347a:	82 e0       	ldi	r24, 0x02	; 2
    347c:	8b b9       	out	0x0b, r24	; 11
    347e:	88 e1       	ldi	r24, 0x18	; 24
    3480:	8a b9       	out	0x0a, r24	; 10
    3482:	80 e8       	ldi	r24, 0x80	; 128
    3484:	80 bd       	out	0x20, r24	; 32
    3486:	80 b5       	in	r24, 0x20	; 32
    3488:	86 68       	ori	r24, 0x86	; 134
    348a:	80 bd       	out	0x20, r24	; 32
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <u8_Uart_Status>
    3492:	08 95       	ret
    3494:	87 e0       	ldi	r24, 0x07	; 7
    3496:	08 95       	ret

00003498 <Uart_sendByte>:
    3498:	90 91 5e 05 	lds	r25, 0x055E	; 0x80055e <u8_Uart_Status>
    349c:	99 23       	and	r25, r25
    349e:	29 f0       	breq	.+10     	; 0x34aa <Uart_sendByte+0x12>
    34a0:	5d 9b       	sbis	0x0b, 5	; 11
    34a2:	fe cf       	rjmp	.-4      	; 0x34a0 <Uart_sendByte+0x8>
    34a4:	8c b9       	out	0x0c, r24	; 12
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	08 95       	ret
    34aa:	86 e0       	ldi	r24, 0x06	; 6
    34ac:	08 95       	ret

000034ae <Uart_sendPacket>:
    34ae:	ef 92       	push	r14
    34b0:	ff 92       	push	r15
    34b2:	0f 93       	push	r16
    34b4:	1f 93       	push	r17
    34b6:	cf 93       	push	r28
    34b8:	df 93       	push	r29
    34ba:	20 91 5e 05 	lds	r18, 0x055E	; 0x80055e <u8_Uart_Status>
    34be:	22 23       	and	r18, r18
    34c0:	99 f0       	breq	.+38     	; 0x34e8 <Uart_sendPacket+0x3a>
    34c2:	8b 01       	movw	r16, r22
    34c4:	7c 01       	movw	r14, r24
    34c6:	c0 e0       	ldi	r28, 0x00	; 0
    34c8:	d0 e0       	ldi	r29, 0x00	; 0
    34ca:	09 c0       	rjmp	.+18     	; 0x34de <Uart_sendPacket+0x30>
    34cc:	f7 01       	movw	r30, r14
    34ce:	ec 0f       	add	r30, r28
    34d0:	fd 1f       	adc	r31, r29
    34d2:	80 81       	ld	r24, Z
    34d4:	0e 94 4c 1a 	call	0x3498	; 0x3498 <Uart_sendByte>
    34d8:	81 30       	cpi	r24, 0x01	; 1
    34da:	41 f4       	brne	.+16     	; 0x34ec <Uart_sendPacket+0x3e>
    34dc:	21 96       	adiw	r28, 0x01	; 1
    34de:	c0 17       	cp	r28, r16
    34e0:	d1 07       	cpc	r29, r17
    34e2:	a0 f3       	brcs	.-24     	; 0x34cc <Uart_sendPacket+0x1e>
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	03 c0       	rjmp	.+6      	; 0x34ee <Uart_sendPacket+0x40>
    34e8:	86 e0       	ldi	r24, 0x06	; 6
    34ea:	01 c0       	rjmp	.+2      	; 0x34ee <Uart_sendPacket+0x40>
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	df 91       	pop	r29
    34f0:	cf 91       	pop	r28
    34f2:	1f 91       	pop	r17
    34f4:	0f 91       	pop	r16
    34f6:	ff 90       	pop	r15
    34f8:	ef 90       	pop	r14
    34fa:	08 95       	ret

000034fc <Uart_EnableNotification_RXC>:
    34fc:	9c 01       	movw	r18, r24
    34fe:	90 91 5e 05 	lds	r25, 0x055E	; 0x80055e <u8_Uart_Status>
    3502:	99 23       	and	r25, r25
    3504:	61 f0       	breq	.+24     	; 0x351e <Uart_EnableNotification_RXC+0x22>
    3506:	21 15       	cp	r18, r1
    3508:	31 05       	cpc	r19, r1
    350a:	59 f0       	breq	.+22     	; 0x3522 <Uart_EnableNotification_RXC+0x26>
    350c:	8a b1       	in	r24, 0x0a	; 10
    350e:	80 68       	ori	r24, 0x80	; 128
    3510:	8a b9       	out	0x0a, r24	; 10
    3512:	30 93 62 05 	sts	0x0562, r19	; 0x800562 <Uart_RXC_CallBackPtr+0x1>
    3516:	20 93 61 05 	sts	0x0561, r18	; 0x800561 <Uart_RXC_CallBackPtr>
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	08 95       	ret
    351e:	86 e0       	ldi	r24, 0x06	; 6
    3520:	08 95       	ret
    3522:	85 e0       	ldi	r24, 0x05	; 5
    3524:	08 95       	ret

00003526 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    3526:	8c b1       	in	r24, 0x0c	; 12
}
    3528:	08 95       	ret

0000352a <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    352a:	1f 92       	push	r1
    352c:	0f 92       	push	r0
    352e:	0f b6       	in	r0, 0x3f	; 63
    3530:	0f 92       	push	r0
    3532:	11 24       	eor	r1, r1
    3534:	2f 93       	push	r18
    3536:	3f 93       	push	r19
    3538:	4f 93       	push	r20
    353a:	5f 93       	push	r21
    353c:	6f 93       	push	r22
    353e:	7f 93       	push	r23
    3540:	8f 93       	push	r24
    3542:	9f 93       	push	r25
    3544:	af 93       	push	r26
    3546:	bf 93       	push	r27
    3548:	ef 93       	push	r30
    354a:	ff 93       	push	r31
    354c:	e0 91 63 05 	lds	r30, 0x0563	; 0x800563 <Uart_TXC_CallBackPtr>
    3550:	f0 91 64 05 	lds	r31, 0x0564	; 0x800564 <Uart_TXC_CallBackPtr+0x1>
    3554:	09 95       	icall
    3556:	ff 91       	pop	r31
    3558:	ef 91       	pop	r30
    355a:	bf 91       	pop	r27
    355c:	af 91       	pop	r26
    355e:	9f 91       	pop	r25
    3560:	8f 91       	pop	r24
    3562:	7f 91       	pop	r23
    3564:	6f 91       	pop	r22
    3566:	5f 91       	pop	r21
    3568:	4f 91       	pop	r20
    356a:	3f 91       	pop	r19
    356c:	2f 91       	pop	r18
    356e:	0f 90       	pop	r0
    3570:	0f be       	out	0x3f, r0	; 63
    3572:	0f 90       	pop	r0
    3574:	1f 90       	pop	r1
    3576:	18 95       	reti

00003578 <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    3578:	1f 92       	push	r1
    357a:	0f 92       	push	r0
    357c:	0f b6       	in	r0, 0x3f	; 63
    357e:	0f 92       	push	r0
    3580:	11 24       	eor	r1, r1
    3582:	2f 93       	push	r18
    3584:	3f 93       	push	r19
    3586:	4f 93       	push	r20
    3588:	5f 93       	push	r21
    358a:	6f 93       	push	r22
    358c:	7f 93       	push	r23
    358e:	8f 93       	push	r24
    3590:	9f 93       	push	r25
    3592:	af 93       	push	r26
    3594:	bf 93       	push	r27
    3596:	ef 93       	push	r30
    3598:	ff 93       	push	r31
    359a:	e0 91 61 05 	lds	r30, 0x0561	; 0x800561 <Uart_RXC_CallBackPtr>
    359e:	f0 91 62 05 	lds	r31, 0x0562	; 0x800562 <Uart_RXC_CallBackPtr+0x1>
    35a2:	09 95       	icall
    35a4:	ff 91       	pop	r31
    35a6:	ef 91       	pop	r30
    35a8:	bf 91       	pop	r27
    35aa:	af 91       	pop	r26
    35ac:	9f 91       	pop	r25
    35ae:	8f 91       	pop	r24
    35b0:	7f 91       	pop	r23
    35b2:	6f 91       	pop	r22
    35b4:	5f 91       	pop	r21
    35b6:	4f 91       	pop	r20
    35b8:	3f 91       	pop	r19
    35ba:	2f 91       	pop	r18
    35bc:	0f 90       	pop	r0
    35be:	0f be       	out	0x3f, r0	; 63
    35c0:	0f 90       	pop	r0
    35c2:	1f 90       	pop	r1
    35c4:	18 95       	reti

000035c6 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    35c6:	1f 92       	push	r1
    35c8:	0f 92       	push	r0
    35ca:	0f b6       	in	r0, 0x3f	; 63
    35cc:	0f 92       	push	r0
    35ce:	11 24       	eor	r1, r1
    35d0:	2f 93       	push	r18
    35d2:	3f 93       	push	r19
    35d4:	4f 93       	push	r20
    35d6:	5f 93       	push	r21
    35d8:	6f 93       	push	r22
    35da:	7f 93       	push	r23
    35dc:	8f 93       	push	r24
    35de:	9f 93       	push	r25
    35e0:	af 93       	push	r26
    35e2:	bf 93       	push	r27
    35e4:	ef 93       	push	r30
    35e6:	ff 93       	push	r31
    35e8:	e0 91 5f 05 	lds	r30, 0x055F	; 0x80055f <Uart_UDRE_CallBackPtr>
    35ec:	f0 91 60 05 	lds	r31, 0x0560	; 0x800560 <Uart_UDRE_CallBackPtr+0x1>
    35f0:	09 95       	icall
    35f2:	ff 91       	pop	r31
    35f4:	ef 91       	pop	r30
    35f6:	bf 91       	pop	r27
    35f8:	af 91       	pop	r26
    35fa:	9f 91       	pop	r25
    35fc:	8f 91       	pop	r24
    35fe:	7f 91       	pop	r23
    3600:	6f 91       	pop	r22
    3602:	5f 91       	pop	r21
    3604:	4f 91       	pop	r20
    3606:	3f 91       	pop	r19
    3608:	2f 91       	pop	r18
    360a:	0f 90       	pop	r0
    360c:	0f be       	out	0x3f, r0	; 63
    360e:	0f 90       	pop	r0
    3610:	1f 90       	pop	r1
    3612:	18 95       	reti

00003614 <__subsf3>:
    3614:	50 58       	subi	r21, 0x80	; 128

00003616 <__addsf3>:
    3616:	bb 27       	eor	r27, r27
    3618:	aa 27       	eor	r26, r26
    361a:	0e 94 22 1b 	call	0x3644	; 0x3644 <__addsf3x>
    361e:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <__fp_round>
    3622:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <__fp_pscA>
    3626:	38 f0       	brcs	.+14     	; 0x3636 <__addsf3+0x20>
    3628:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__fp_pscB>
    362c:	20 f0       	brcs	.+8      	; 0x3636 <__addsf3+0x20>
    362e:	39 f4       	brne	.+14     	; 0x363e <__addsf3+0x28>
    3630:	9f 3f       	cpi	r25, 0xFF	; 255
    3632:	19 f4       	brne	.+6      	; 0x363a <__addsf3+0x24>
    3634:	26 f4       	brtc	.+8      	; 0x363e <__addsf3+0x28>
    3636:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__fp_nan>
    363a:	0e f4       	brtc	.+2      	; 0x363e <__addsf3+0x28>
    363c:	e0 95       	com	r30
    363e:	e7 fb       	bst	r30, 7
    3640:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__fp_inf>

00003644 <__addsf3x>:
    3644:	e9 2f       	mov	r30, r25
    3646:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__fp_split3>
    364a:	58 f3       	brcs	.-42     	; 0x3622 <__addsf3+0xc>
    364c:	ba 17       	cp	r27, r26
    364e:	62 07       	cpc	r22, r18
    3650:	73 07       	cpc	r23, r19
    3652:	84 07       	cpc	r24, r20
    3654:	95 07       	cpc	r25, r21
    3656:	20 f0       	brcs	.+8      	; 0x3660 <__addsf3x+0x1c>
    3658:	79 f4       	brne	.+30     	; 0x3678 <__addsf3x+0x34>
    365a:	a6 f5       	brtc	.+104    	; 0x36c4 <__addsf3x+0x80>
    365c:	0c 94 9f 1c 	jmp	0x393e	; 0x393e <__fp_zero>
    3660:	0e f4       	brtc	.+2      	; 0x3664 <__addsf3x+0x20>
    3662:	e0 95       	com	r30
    3664:	0b 2e       	mov	r0, r27
    3666:	ba 2f       	mov	r27, r26
    3668:	a0 2d       	mov	r26, r0
    366a:	0b 01       	movw	r0, r22
    366c:	b9 01       	movw	r22, r18
    366e:	90 01       	movw	r18, r0
    3670:	0c 01       	movw	r0, r24
    3672:	ca 01       	movw	r24, r20
    3674:	a0 01       	movw	r20, r0
    3676:	11 24       	eor	r1, r1
    3678:	ff 27       	eor	r31, r31
    367a:	59 1b       	sub	r21, r25
    367c:	99 f0       	breq	.+38     	; 0x36a4 <__addsf3x+0x60>
    367e:	59 3f       	cpi	r21, 0xF9	; 249
    3680:	50 f4       	brcc	.+20     	; 0x3696 <__addsf3x+0x52>
    3682:	50 3e       	cpi	r21, 0xE0	; 224
    3684:	68 f1       	brcs	.+90     	; 0x36e0 <__addsf3x+0x9c>
    3686:	1a 16       	cp	r1, r26
    3688:	f0 40       	sbci	r31, 0x00	; 0
    368a:	a2 2f       	mov	r26, r18
    368c:	23 2f       	mov	r18, r19
    368e:	34 2f       	mov	r19, r20
    3690:	44 27       	eor	r20, r20
    3692:	58 5f       	subi	r21, 0xF8	; 248
    3694:	f3 cf       	rjmp	.-26     	; 0x367c <__addsf3x+0x38>
    3696:	46 95       	lsr	r20
    3698:	37 95       	ror	r19
    369a:	27 95       	ror	r18
    369c:	a7 95       	ror	r26
    369e:	f0 40       	sbci	r31, 0x00	; 0
    36a0:	53 95       	inc	r21
    36a2:	c9 f7       	brne	.-14     	; 0x3696 <__addsf3x+0x52>
    36a4:	7e f4       	brtc	.+30     	; 0x36c4 <__addsf3x+0x80>
    36a6:	1f 16       	cp	r1, r31
    36a8:	ba 0b       	sbc	r27, r26
    36aa:	62 0b       	sbc	r22, r18
    36ac:	73 0b       	sbc	r23, r19
    36ae:	84 0b       	sbc	r24, r20
    36b0:	ba f0       	brmi	.+46     	; 0x36e0 <__addsf3x+0x9c>
    36b2:	91 50       	subi	r25, 0x01	; 1
    36b4:	a1 f0       	breq	.+40     	; 0x36de <__addsf3x+0x9a>
    36b6:	ff 0f       	add	r31, r31
    36b8:	bb 1f       	adc	r27, r27
    36ba:	66 1f       	adc	r22, r22
    36bc:	77 1f       	adc	r23, r23
    36be:	88 1f       	adc	r24, r24
    36c0:	c2 f7       	brpl	.-16     	; 0x36b2 <__addsf3x+0x6e>
    36c2:	0e c0       	rjmp	.+28     	; 0x36e0 <__addsf3x+0x9c>
    36c4:	ba 0f       	add	r27, r26
    36c6:	62 1f       	adc	r22, r18
    36c8:	73 1f       	adc	r23, r19
    36ca:	84 1f       	adc	r24, r20
    36cc:	48 f4       	brcc	.+18     	; 0x36e0 <__addsf3x+0x9c>
    36ce:	87 95       	ror	r24
    36d0:	77 95       	ror	r23
    36d2:	67 95       	ror	r22
    36d4:	b7 95       	ror	r27
    36d6:	f7 95       	ror	r31
    36d8:	9e 3f       	cpi	r25, 0xFE	; 254
    36da:	08 f0       	brcs	.+2      	; 0x36de <__addsf3x+0x9a>
    36dc:	b0 cf       	rjmp	.-160    	; 0x363e <__addsf3+0x28>
    36de:	93 95       	inc	r25
    36e0:	88 0f       	add	r24, r24
    36e2:	08 f0       	brcs	.+2      	; 0x36e6 <__addsf3x+0xa2>
    36e4:	99 27       	eor	r25, r25
    36e6:	ee 0f       	add	r30, r30
    36e8:	97 95       	ror	r25
    36ea:	87 95       	ror	r24
    36ec:	08 95       	ret

000036ee <__divsf3>:
    36ee:	0e 94 8b 1b 	call	0x3716	; 0x3716 <__divsf3x>
    36f2:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <__fp_round>
    36f6:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__fp_pscB>
    36fa:	58 f0       	brcs	.+22     	; 0x3712 <__divsf3+0x24>
    36fc:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <__fp_pscA>
    3700:	40 f0       	brcs	.+16     	; 0x3712 <__divsf3+0x24>
    3702:	29 f4       	brne	.+10     	; 0x370e <__divsf3+0x20>
    3704:	5f 3f       	cpi	r21, 0xFF	; 255
    3706:	29 f0       	breq	.+10     	; 0x3712 <__divsf3+0x24>
    3708:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__fp_inf>
    370c:	51 11       	cpse	r21, r1
    370e:	0c 94 a0 1c 	jmp	0x3940	; 0x3940 <__fp_szero>
    3712:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__fp_nan>

00003716 <__divsf3x>:
    3716:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__fp_split3>
    371a:	68 f3       	brcs	.-38     	; 0x36f6 <__divsf3+0x8>

0000371c <__divsf3_pse>:
    371c:	99 23       	and	r25, r25
    371e:	b1 f3       	breq	.-20     	; 0x370c <__divsf3+0x1e>
    3720:	55 23       	and	r21, r21
    3722:	91 f3       	breq	.-28     	; 0x3708 <__divsf3+0x1a>
    3724:	95 1b       	sub	r25, r21
    3726:	55 0b       	sbc	r21, r21
    3728:	bb 27       	eor	r27, r27
    372a:	aa 27       	eor	r26, r26
    372c:	62 17       	cp	r22, r18
    372e:	73 07       	cpc	r23, r19
    3730:	84 07       	cpc	r24, r20
    3732:	38 f0       	brcs	.+14     	; 0x3742 <__divsf3_pse+0x26>
    3734:	9f 5f       	subi	r25, 0xFF	; 255
    3736:	5f 4f       	sbci	r21, 0xFF	; 255
    3738:	22 0f       	add	r18, r18
    373a:	33 1f       	adc	r19, r19
    373c:	44 1f       	adc	r20, r20
    373e:	aa 1f       	adc	r26, r26
    3740:	a9 f3       	breq	.-22     	; 0x372c <__divsf3_pse+0x10>
    3742:	35 d0       	rcall	.+106    	; 0x37ae <__divsf3_pse+0x92>
    3744:	0e 2e       	mov	r0, r30
    3746:	3a f0       	brmi	.+14     	; 0x3756 <__divsf3_pse+0x3a>
    3748:	e0 e8       	ldi	r30, 0x80	; 128
    374a:	32 d0       	rcall	.+100    	; 0x37b0 <__divsf3_pse+0x94>
    374c:	91 50       	subi	r25, 0x01	; 1
    374e:	50 40       	sbci	r21, 0x00	; 0
    3750:	e6 95       	lsr	r30
    3752:	00 1c       	adc	r0, r0
    3754:	ca f7       	brpl	.-14     	; 0x3748 <__divsf3_pse+0x2c>
    3756:	2b d0       	rcall	.+86     	; 0x37ae <__divsf3_pse+0x92>
    3758:	fe 2f       	mov	r31, r30
    375a:	29 d0       	rcall	.+82     	; 0x37ae <__divsf3_pse+0x92>
    375c:	66 0f       	add	r22, r22
    375e:	77 1f       	adc	r23, r23
    3760:	88 1f       	adc	r24, r24
    3762:	bb 1f       	adc	r27, r27
    3764:	26 17       	cp	r18, r22
    3766:	37 07       	cpc	r19, r23
    3768:	48 07       	cpc	r20, r24
    376a:	ab 07       	cpc	r26, r27
    376c:	b0 e8       	ldi	r27, 0x80	; 128
    376e:	09 f0       	breq	.+2      	; 0x3772 <__divsf3_pse+0x56>
    3770:	bb 0b       	sbc	r27, r27
    3772:	80 2d       	mov	r24, r0
    3774:	bf 01       	movw	r22, r30
    3776:	ff 27       	eor	r31, r31
    3778:	93 58       	subi	r25, 0x83	; 131
    377a:	5f 4f       	sbci	r21, 0xFF	; 255
    377c:	3a f0       	brmi	.+14     	; 0x378c <__divsf3_pse+0x70>
    377e:	9e 3f       	cpi	r25, 0xFE	; 254
    3780:	51 05       	cpc	r21, r1
    3782:	78 f0       	brcs	.+30     	; 0x37a2 <__divsf3_pse+0x86>
    3784:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__fp_inf>
    3788:	0c 94 a0 1c 	jmp	0x3940	; 0x3940 <__fp_szero>
    378c:	5f 3f       	cpi	r21, 0xFF	; 255
    378e:	e4 f3       	brlt	.-8      	; 0x3788 <__divsf3_pse+0x6c>
    3790:	98 3e       	cpi	r25, 0xE8	; 232
    3792:	d4 f3       	brlt	.-12     	; 0x3788 <__divsf3_pse+0x6c>
    3794:	86 95       	lsr	r24
    3796:	77 95       	ror	r23
    3798:	67 95       	ror	r22
    379a:	b7 95       	ror	r27
    379c:	f7 95       	ror	r31
    379e:	9f 5f       	subi	r25, 0xFF	; 255
    37a0:	c9 f7       	brne	.-14     	; 0x3794 <__divsf3_pse+0x78>
    37a2:	88 0f       	add	r24, r24
    37a4:	91 1d       	adc	r25, r1
    37a6:	96 95       	lsr	r25
    37a8:	87 95       	ror	r24
    37aa:	97 f9       	bld	r25, 7
    37ac:	08 95       	ret
    37ae:	e1 e0       	ldi	r30, 0x01	; 1
    37b0:	66 0f       	add	r22, r22
    37b2:	77 1f       	adc	r23, r23
    37b4:	88 1f       	adc	r24, r24
    37b6:	bb 1f       	adc	r27, r27
    37b8:	62 17       	cp	r22, r18
    37ba:	73 07       	cpc	r23, r19
    37bc:	84 07       	cpc	r24, r20
    37be:	ba 07       	cpc	r27, r26
    37c0:	20 f0       	brcs	.+8      	; 0x37ca <__divsf3_pse+0xae>
    37c2:	62 1b       	sub	r22, r18
    37c4:	73 0b       	sbc	r23, r19
    37c6:	84 0b       	sbc	r24, r20
    37c8:	ba 0b       	sbc	r27, r26
    37ca:	ee 1f       	adc	r30, r30
    37cc:	88 f7       	brcc	.-30     	; 0x37b0 <__divsf3_pse+0x94>
    37ce:	e0 95       	com	r30
    37d0:	08 95       	ret

000037d2 <__fixunssfsi>:
    37d2:	0e 94 85 1c 	call	0x390a	; 0x390a <__fp_splitA>
    37d6:	88 f0       	brcs	.+34     	; 0x37fa <__fixunssfsi+0x28>
    37d8:	9f 57       	subi	r25, 0x7F	; 127
    37da:	98 f0       	brcs	.+38     	; 0x3802 <__fixunssfsi+0x30>
    37dc:	b9 2f       	mov	r27, r25
    37de:	99 27       	eor	r25, r25
    37e0:	b7 51       	subi	r27, 0x17	; 23
    37e2:	b0 f0       	brcs	.+44     	; 0x3810 <__fixunssfsi+0x3e>
    37e4:	e1 f0       	breq	.+56     	; 0x381e <__fixunssfsi+0x4c>
    37e6:	66 0f       	add	r22, r22
    37e8:	77 1f       	adc	r23, r23
    37ea:	88 1f       	adc	r24, r24
    37ec:	99 1f       	adc	r25, r25
    37ee:	1a f0       	brmi	.+6      	; 0x37f6 <__fixunssfsi+0x24>
    37f0:	ba 95       	dec	r27
    37f2:	c9 f7       	brne	.-14     	; 0x37e6 <__fixunssfsi+0x14>
    37f4:	14 c0       	rjmp	.+40     	; 0x381e <__fixunssfsi+0x4c>
    37f6:	b1 30       	cpi	r27, 0x01	; 1
    37f8:	91 f0       	breq	.+36     	; 0x381e <__fixunssfsi+0x4c>
    37fa:	0e 94 9f 1c 	call	0x393e	; 0x393e <__fp_zero>
    37fe:	b1 e0       	ldi	r27, 0x01	; 1
    3800:	08 95       	ret
    3802:	0c 94 9f 1c 	jmp	0x393e	; 0x393e <__fp_zero>
    3806:	67 2f       	mov	r22, r23
    3808:	78 2f       	mov	r23, r24
    380a:	88 27       	eor	r24, r24
    380c:	b8 5f       	subi	r27, 0xF8	; 248
    380e:	39 f0       	breq	.+14     	; 0x381e <__fixunssfsi+0x4c>
    3810:	b9 3f       	cpi	r27, 0xF9	; 249
    3812:	cc f3       	brlt	.-14     	; 0x3806 <__fixunssfsi+0x34>
    3814:	86 95       	lsr	r24
    3816:	77 95       	ror	r23
    3818:	67 95       	ror	r22
    381a:	b3 95       	inc	r27
    381c:	d9 f7       	brne	.-10     	; 0x3814 <__fixunssfsi+0x42>
    381e:	3e f4       	brtc	.+14     	; 0x382e <__fixunssfsi+0x5c>
    3820:	90 95       	com	r25
    3822:	80 95       	com	r24
    3824:	70 95       	com	r23
    3826:	61 95       	neg	r22
    3828:	7f 4f       	sbci	r23, 0xFF	; 255
    382a:	8f 4f       	sbci	r24, 0xFF	; 255
    382c:	9f 4f       	sbci	r25, 0xFF	; 255
    382e:	08 95       	ret

00003830 <__floatunsisf>:
    3830:	e8 94       	clt
    3832:	09 c0       	rjmp	.+18     	; 0x3846 <__floatsisf+0x12>

00003834 <__floatsisf>:
    3834:	97 fb       	bst	r25, 7
    3836:	3e f4       	brtc	.+14     	; 0x3846 <__floatsisf+0x12>
    3838:	90 95       	com	r25
    383a:	80 95       	com	r24
    383c:	70 95       	com	r23
    383e:	61 95       	neg	r22
    3840:	7f 4f       	sbci	r23, 0xFF	; 255
    3842:	8f 4f       	sbci	r24, 0xFF	; 255
    3844:	9f 4f       	sbci	r25, 0xFF	; 255
    3846:	99 23       	and	r25, r25
    3848:	a9 f0       	breq	.+42     	; 0x3874 <__floatsisf+0x40>
    384a:	f9 2f       	mov	r31, r25
    384c:	96 e9       	ldi	r25, 0x96	; 150
    384e:	bb 27       	eor	r27, r27
    3850:	93 95       	inc	r25
    3852:	f6 95       	lsr	r31
    3854:	87 95       	ror	r24
    3856:	77 95       	ror	r23
    3858:	67 95       	ror	r22
    385a:	b7 95       	ror	r27
    385c:	f1 11       	cpse	r31, r1
    385e:	f8 cf       	rjmp	.-16     	; 0x3850 <__floatsisf+0x1c>
    3860:	fa f4       	brpl	.+62     	; 0x38a0 <__floatsisf+0x6c>
    3862:	bb 0f       	add	r27, r27
    3864:	11 f4       	brne	.+4      	; 0x386a <__floatsisf+0x36>
    3866:	60 ff       	sbrs	r22, 0
    3868:	1b c0       	rjmp	.+54     	; 0x38a0 <__floatsisf+0x6c>
    386a:	6f 5f       	subi	r22, 0xFF	; 255
    386c:	7f 4f       	sbci	r23, 0xFF	; 255
    386e:	8f 4f       	sbci	r24, 0xFF	; 255
    3870:	9f 4f       	sbci	r25, 0xFF	; 255
    3872:	16 c0       	rjmp	.+44     	; 0x38a0 <__floatsisf+0x6c>
    3874:	88 23       	and	r24, r24
    3876:	11 f0       	breq	.+4      	; 0x387c <__floatsisf+0x48>
    3878:	96 e9       	ldi	r25, 0x96	; 150
    387a:	11 c0       	rjmp	.+34     	; 0x389e <__floatsisf+0x6a>
    387c:	77 23       	and	r23, r23
    387e:	21 f0       	breq	.+8      	; 0x3888 <__floatsisf+0x54>
    3880:	9e e8       	ldi	r25, 0x8E	; 142
    3882:	87 2f       	mov	r24, r23
    3884:	76 2f       	mov	r23, r22
    3886:	05 c0       	rjmp	.+10     	; 0x3892 <__floatsisf+0x5e>
    3888:	66 23       	and	r22, r22
    388a:	71 f0       	breq	.+28     	; 0x38a8 <__floatsisf+0x74>
    388c:	96 e8       	ldi	r25, 0x86	; 134
    388e:	86 2f       	mov	r24, r22
    3890:	70 e0       	ldi	r23, 0x00	; 0
    3892:	60 e0       	ldi	r22, 0x00	; 0
    3894:	2a f0       	brmi	.+10     	; 0x38a0 <__floatsisf+0x6c>
    3896:	9a 95       	dec	r25
    3898:	66 0f       	add	r22, r22
    389a:	77 1f       	adc	r23, r23
    389c:	88 1f       	adc	r24, r24
    389e:	da f7       	brpl	.-10     	; 0x3896 <__floatsisf+0x62>
    38a0:	88 0f       	add	r24, r24
    38a2:	96 95       	lsr	r25
    38a4:	87 95       	ror	r24
    38a6:	97 f9       	bld	r25, 7
    38a8:	08 95       	ret

000038aa <__fp_inf>:
    38aa:	97 f9       	bld	r25, 7
    38ac:	9f 67       	ori	r25, 0x7F	; 127
    38ae:	80 e8       	ldi	r24, 0x80	; 128
    38b0:	70 e0       	ldi	r23, 0x00	; 0
    38b2:	60 e0       	ldi	r22, 0x00	; 0
    38b4:	08 95       	ret

000038b6 <__fp_nan>:
    38b6:	9f ef       	ldi	r25, 0xFF	; 255
    38b8:	80 ec       	ldi	r24, 0xC0	; 192
    38ba:	08 95       	ret

000038bc <__fp_pscA>:
    38bc:	00 24       	eor	r0, r0
    38be:	0a 94       	dec	r0
    38c0:	16 16       	cp	r1, r22
    38c2:	17 06       	cpc	r1, r23
    38c4:	18 06       	cpc	r1, r24
    38c6:	09 06       	cpc	r0, r25
    38c8:	08 95       	ret

000038ca <__fp_pscB>:
    38ca:	00 24       	eor	r0, r0
    38cc:	0a 94       	dec	r0
    38ce:	12 16       	cp	r1, r18
    38d0:	13 06       	cpc	r1, r19
    38d2:	14 06       	cpc	r1, r20
    38d4:	05 06       	cpc	r0, r21
    38d6:	08 95       	ret

000038d8 <__fp_round>:
    38d8:	09 2e       	mov	r0, r25
    38da:	03 94       	inc	r0
    38dc:	00 0c       	add	r0, r0
    38de:	11 f4       	brne	.+4      	; 0x38e4 <__fp_round+0xc>
    38e0:	88 23       	and	r24, r24
    38e2:	52 f0       	brmi	.+20     	; 0x38f8 <__fp_round+0x20>
    38e4:	bb 0f       	add	r27, r27
    38e6:	40 f4       	brcc	.+16     	; 0x38f8 <__fp_round+0x20>
    38e8:	bf 2b       	or	r27, r31
    38ea:	11 f4       	brne	.+4      	; 0x38f0 <__fp_round+0x18>
    38ec:	60 ff       	sbrs	r22, 0
    38ee:	04 c0       	rjmp	.+8      	; 0x38f8 <__fp_round+0x20>
    38f0:	6f 5f       	subi	r22, 0xFF	; 255
    38f2:	7f 4f       	sbci	r23, 0xFF	; 255
    38f4:	8f 4f       	sbci	r24, 0xFF	; 255
    38f6:	9f 4f       	sbci	r25, 0xFF	; 255
    38f8:	08 95       	ret

000038fa <__fp_split3>:
    38fa:	57 fd       	sbrc	r21, 7
    38fc:	90 58       	subi	r25, 0x80	; 128
    38fe:	44 0f       	add	r20, r20
    3900:	55 1f       	adc	r21, r21
    3902:	59 f0       	breq	.+22     	; 0x391a <__fp_splitA+0x10>
    3904:	5f 3f       	cpi	r21, 0xFF	; 255
    3906:	71 f0       	breq	.+28     	; 0x3924 <__fp_splitA+0x1a>
    3908:	47 95       	ror	r20

0000390a <__fp_splitA>:
    390a:	88 0f       	add	r24, r24
    390c:	97 fb       	bst	r25, 7
    390e:	99 1f       	adc	r25, r25
    3910:	61 f0       	breq	.+24     	; 0x392a <__fp_splitA+0x20>
    3912:	9f 3f       	cpi	r25, 0xFF	; 255
    3914:	79 f0       	breq	.+30     	; 0x3934 <__fp_splitA+0x2a>
    3916:	87 95       	ror	r24
    3918:	08 95       	ret
    391a:	12 16       	cp	r1, r18
    391c:	13 06       	cpc	r1, r19
    391e:	14 06       	cpc	r1, r20
    3920:	55 1f       	adc	r21, r21
    3922:	f2 cf       	rjmp	.-28     	; 0x3908 <__fp_split3+0xe>
    3924:	46 95       	lsr	r20
    3926:	f1 df       	rcall	.-30     	; 0x390a <__fp_splitA>
    3928:	08 c0       	rjmp	.+16     	; 0x393a <__fp_splitA+0x30>
    392a:	16 16       	cp	r1, r22
    392c:	17 06       	cpc	r1, r23
    392e:	18 06       	cpc	r1, r24
    3930:	99 1f       	adc	r25, r25
    3932:	f1 cf       	rjmp	.-30     	; 0x3916 <__fp_splitA+0xc>
    3934:	86 95       	lsr	r24
    3936:	71 05       	cpc	r23, r1
    3938:	61 05       	cpc	r22, r1
    393a:	08 94       	sec
    393c:	08 95       	ret

0000393e <__fp_zero>:
    393e:	e8 94       	clt

00003940 <__fp_szero>:
    3940:	bb 27       	eor	r27, r27
    3942:	66 27       	eor	r22, r22
    3944:	77 27       	eor	r23, r23
    3946:	cb 01       	movw	r24, r22
    3948:	97 f9       	bld	r25, 7
    394a:	08 95       	ret

0000394c <__mulsf3>:
    394c:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__mulsf3x>
    3950:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <__fp_round>
    3954:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <__fp_pscA>
    3958:	38 f0       	brcs	.+14     	; 0x3968 <__mulsf3+0x1c>
    395a:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__fp_pscB>
    395e:	20 f0       	brcs	.+8      	; 0x3968 <__mulsf3+0x1c>
    3960:	95 23       	and	r25, r21
    3962:	11 f0       	breq	.+4      	; 0x3968 <__mulsf3+0x1c>
    3964:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__fp_inf>
    3968:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__fp_nan>
    396c:	11 24       	eor	r1, r1
    396e:	0c 94 a0 1c 	jmp	0x3940	; 0x3940 <__fp_szero>

00003972 <__mulsf3x>:
    3972:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__fp_split3>
    3976:	70 f3       	brcs	.-36     	; 0x3954 <__mulsf3+0x8>

00003978 <__mulsf3_pse>:
    3978:	95 9f       	mul	r25, r21
    397a:	c1 f3       	breq	.-16     	; 0x396c <__mulsf3+0x20>
    397c:	95 0f       	add	r25, r21
    397e:	50 e0       	ldi	r21, 0x00	; 0
    3980:	55 1f       	adc	r21, r21
    3982:	62 9f       	mul	r22, r18
    3984:	f0 01       	movw	r30, r0
    3986:	72 9f       	mul	r23, r18
    3988:	bb 27       	eor	r27, r27
    398a:	f0 0d       	add	r31, r0
    398c:	b1 1d       	adc	r27, r1
    398e:	63 9f       	mul	r22, r19
    3990:	aa 27       	eor	r26, r26
    3992:	f0 0d       	add	r31, r0
    3994:	b1 1d       	adc	r27, r1
    3996:	aa 1f       	adc	r26, r26
    3998:	64 9f       	mul	r22, r20
    399a:	66 27       	eor	r22, r22
    399c:	b0 0d       	add	r27, r0
    399e:	a1 1d       	adc	r26, r1
    39a0:	66 1f       	adc	r22, r22
    39a2:	82 9f       	mul	r24, r18
    39a4:	22 27       	eor	r18, r18
    39a6:	b0 0d       	add	r27, r0
    39a8:	a1 1d       	adc	r26, r1
    39aa:	62 1f       	adc	r22, r18
    39ac:	73 9f       	mul	r23, r19
    39ae:	b0 0d       	add	r27, r0
    39b0:	a1 1d       	adc	r26, r1
    39b2:	62 1f       	adc	r22, r18
    39b4:	83 9f       	mul	r24, r19
    39b6:	a0 0d       	add	r26, r0
    39b8:	61 1d       	adc	r22, r1
    39ba:	22 1f       	adc	r18, r18
    39bc:	74 9f       	mul	r23, r20
    39be:	33 27       	eor	r19, r19
    39c0:	a0 0d       	add	r26, r0
    39c2:	61 1d       	adc	r22, r1
    39c4:	23 1f       	adc	r18, r19
    39c6:	84 9f       	mul	r24, r20
    39c8:	60 0d       	add	r22, r0
    39ca:	21 1d       	adc	r18, r1
    39cc:	82 2f       	mov	r24, r18
    39ce:	76 2f       	mov	r23, r22
    39d0:	6a 2f       	mov	r22, r26
    39d2:	11 24       	eor	r1, r1
    39d4:	9f 57       	subi	r25, 0x7F	; 127
    39d6:	50 40       	sbci	r21, 0x00	; 0
    39d8:	9a f0       	brmi	.+38     	; 0x3a00 <__mulsf3_pse+0x88>
    39da:	f1 f0       	breq	.+60     	; 0x3a18 <__mulsf3_pse+0xa0>
    39dc:	88 23       	and	r24, r24
    39de:	4a f0       	brmi	.+18     	; 0x39f2 <__mulsf3_pse+0x7a>
    39e0:	ee 0f       	add	r30, r30
    39e2:	ff 1f       	adc	r31, r31
    39e4:	bb 1f       	adc	r27, r27
    39e6:	66 1f       	adc	r22, r22
    39e8:	77 1f       	adc	r23, r23
    39ea:	88 1f       	adc	r24, r24
    39ec:	91 50       	subi	r25, 0x01	; 1
    39ee:	50 40       	sbci	r21, 0x00	; 0
    39f0:	a9 f7       	brne	.-22     	; 0x39dc <__mulsf3_pse+0x64>
    39f2:	9e 3f       	cpi	r25, 0xFE	; 254
    39f4:	51 05       	cpc	r21, r1
    39f6:	80 f0       	brcs	.+32     	; 0x3a18 <__mulsf3_pse+0xa0>
    39f8:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__fp_inf>
    39fc:	0c 94 a0 1c 	jmp	0x3940	; 0x3940 <__fp_szero>
    3a00:	5f 3f       	cpi	r21, 0xFF	; 255
    3a02:	e4 f3       	brlt	.-8      	; 0x39fc <__mulsf3_pse+0x84>
    3a04:	98 3e       	cpi	r25, 0xE8	; 232
    3a06:	d4 f3       	brlt	.-12     	; 0x39fc <__mulsf3_pse+0x84>
    3a08:	86 95       	lsr	r24
    3a0a:	77 95       	ror	r23
    3a0c:	67 95       	ror	r22
    3a0e:	b7 95       	ror	r27
    3a10:	f7 95       	ror	r31
    3a12:	e7 95       	ror	r30
    3a14:	9f 5f       	subi	r25, 0xFF	; 255
    3a16:	c1 f7       	brne	.-16     	; 0x3a08 <__mulsf3_pse+0x90>
    3a18:	fe 2b       	or	r31, r30
    3a1a:	88 0f       	add	r24, r24
    3a1c:	91 1d       	adc	r25, r1
    3a1e:	96 95       	lsr	r25
    3a20:	87 95       	ror	r24
    3a22:	97 f9       	bld	r25, 7
    3a24:	08 95       	ret

00003a26 <__divmodhi4>:
    3a26:	97 fb       	bst	r25, 7
    3a28:	07 2e       	mov	r0, r23
    3a2a:	16 f4       	brtc	.+4      	; 0x3a30 <__divmodhi4+0xa>
    3a2c:	00 94       	com	r0
    3a2e:	07 d0       	rcall	.+14     	; 0x3a3e <__divmodhi4_neg1>
    3a30:	77 fd       	sbrc	r23, 7
    3a32:	09 d0       	rcall	.+18     	; 0x3a46 <__divmodhi4_neg2>
    3a34:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__udivmodhi4>
    3a38:	07 fc       	sbrc	r0, 7
    3a3a:	05 d0       	rcall	.+10     	; 0x3a46 <__divmodhi4_neg2>
    3a3c:	3e f4       	brtc	.+14     	; 0x3a4c <__divmodhi4_exit>

00003a3e <__divmodhi4_neg1>:
    3a3e:	90 95       	com	r25
    3a40:	81 95       	neg	r24
    3a42:	9f 4f       	sbci	r25, 0xFF	; 255
    3a44:	08 95       	ret

00003a46 <__divmodhi4_neg2>:
    3a46:	70 95       	com	r23
    3a48:	61 95       	neg	r22
    3a4a:	7f 4f       	sbci	r23, 0xFF	; 255

00003a4c <__divmodhi4_exit>:
    3a4c:	08 95       	ret

00003a4e <__udivmodsi4>:
    3a4e:	a1 e2       	ldi	r26, 0x21	; 33
    3a50:	1a 2e       	mov	r1, r26
    3a52:	aa 1b       	sub	r26, r26
    3a54:	bb 1b       	sub	r27, r27
    3a56:	fd 01       	movw	r30, r26
    3a58:	0d c0       	rjmp	.+26     	; 0x3a74 <__udivmodsi4_ep>

00003a5a <__udivmodsi4_loop>:
    3a5a:	aa 1f       	adc	r26, r26
    3a5c:	bb 1f       	adc	r27, r27
    3a5e:	ee 1f       	adc	r30, r30
    3a60:	ff 1f       	adc	r31, r31
    3a62:	a2 17       	cp	r26, r18
    3a64:	b3 07       	cpc	r27, r19
    3a66:	e4 07       	cpc	r30, r20
    3a68:	f5 07       	cpc	r31, r21
    3a6a:	20 f0       	brcs	.+8      	; 0x3a74 <__udivmodsi4_ep>
    3a6c:	a2 1b       	sub	r26, r18
    3a6e:	b3 0b       	sbc	r27, r19
    3a70:	e4 0b       	sbc	r30, r20
    3a72:	f5 0b       	sbc	r31, r21

00003a74 <__udivmodsi4_ep>:
    3a74:	66 1f       	adc	r22, r22
    3a76:	77 1f       	adc	r23, r23
    3a78:	88 1f       	adc	r24, r24
    3a7a:	99 1f       	adc	r25, r25
    3a7c:	1a 94       	dec	r1
    3a7e:	69 f7       	brne	.-38     	; 0x3a5a <__udivmodsi4_loop>
    3a80:	60 95       	com	r22
    3a82:	70 95       	com	r23
    3a84:	80 95       	com	r24
    3a86:	90 95       	com	r25
    3a88:	9b 01       	movw	r18, r22
    3a8a:	ac 01       	movw	r20, r24
    3a8c:	bd 01       	movw	r22, r26
    3a8e:	cf 01       	movw	r24, r30
    3a90:	08 95       	ret

00003a92 <__tablejump2__>:
    3a92:	ee 0f       	add	r30, r30
    3a94:	ff 1f       	adc	r31, r31
    3a96:	05 90       	lpm	r0, Z+
    3a98:	f4 91       	lpm	r31, Z
    3a9a:	e0 2d       	mov	r30, r0
    3a9c:	09 94       	ijmp

00003a9e <__umulhisi3>:
    3a9e:	a2 9f       	mul	r26, r18
    3aa0:	b0 01       	movw	r22, r0
    3aa2:	b3 9f       	mul	r27, r19
    3aa4:	c0 01       	movw	r24, r0
    3aa6:	a3 9f       	mul	r26, r19
    3aa8:	70 0d       	add	r23, r0
    3aaa:	81 1d       	adc	r24, r1
    3aac:	11 24       	eor	r1, r1
    3aae:	91 1d       	adc	r25, r1
    3ab0:	b2 9f       	mul	r27, r18
    3ab2:	70 0d       	add	r23, r0
    3ab4:	81 1d       	adc	r24, r1
    3ab6:	11 24       	eor	r1, r1
    3ab8:	91 1d       	adc	r25, r1
    3aba:	08 95       	ret

00003abc <__adddi3_s8>:
    3abc:	00 24       	eor	r0, r0
    3abe:	a7 fd       	sbrc	r26, 7
    3ac0:	00 94       	com	r0
    3ac2:	2a 0f       	add	r18, r26
    3ac4:	30 1d       	adc	r19, r0
    3ac6:	40 1d       	adc	r20, r0
    3ac8:	50 1d       	adc	r21, r0
    3aca:	60 1d       	adc	r22, r0
    3acc:	70 1d       	adc	r23, r0
    3ace:	80 1d       	adc	r24, r0
    3ad0:	90 1d       	adc	r25, r0
    3ad2:	08 95       	ret

00003ad4 <__cmpdi2>:
    3ad4:	2a 15       	cp	r18, r10
    3ad6:	3b 05       	cpc	r19, r11
    3ad8:	4c 05       	cpc	r20, r12
    3ada:	5d 05       	cpc	r21, r13
    3adc:	6e 05       	cpc	r22, r14
    3ade:	7f 05       	cpc	r23, r15
    3ae0:	80 07       	cpc	r24, r16
    3ae2:	91 07       	cpc	r25, r17
    3ae4:	08 95       	ret

00003ae6 <__cmpdi2_s8>:
    3ae6:	00 24       	eor	r0, r0
    3ae8:	a7 fd       	sbrc	r26, 7
    3aea:	00 94       	com	r0
    3aec:	2a 17       	cp	r18, r26
    3aee:	30 05       	cpc	r19, r0
    3af0:	40 05       	cpc	r20, r0
    3af2:	50 05       	cpc	r21, r0
    3af4:	60 05       	cpc	r22, r0
    3af6:	70 05       	cpc	r23, r0
    3af8:	80 05       	cpc	r24, r0
    3afa:	90 05       	cpc	r25, r0
    3afc:	08 95       	ret

00003afe <__udivmodhi4>:
    3afe:	aa 1b       	sub	r26, r26
    3b00:	bb 1b       	sub	r27, r27
    3b02:	51 e1       	ldi	r21, 0x11	; 17
    3b04:	07 c0       	rjmp	.+14     	; 0x3b14 <__udivmodhi4_ep>

00003b06 <__udivmodhi4_loop>:
    3b06:	aa 1f       	adc	r26, r26
    3b08:	bb 1f       	adc	r27, r27
    3b0a:	a6 17       	cp	r26, r22
    3b0c:	b7 07       	cpc	r27, r23
    3b0e:	10 f0       	brcs	.+4      	; 0x3b14 <__udivmodhi4_ep>
    3b10:	a6 1b       	sub	r26, r22
    3b12:	b7 0b       	sbc	r27, r23

00003b14 <__udivmodhi4_ep>:
    3b14:	88 1f       	adc	r24, r24
    3b16:	99 1f       	adc	r25, r25
    3b18:	5a 95       	dec	r21
    3b1a:	a9 f7       	brne	.-22     	; 0x3b06 <__udivmodhi4_loop>
    3b1c:	80 95       	com	r24
    3b1e:	90 95       	com	r25
    3b20:	bc 01       	movw	r22, r24
    3b22:	cd 01       	movw	r24, r26
    3b24:	08 95       	ret

00003b26 <_exit>:
    3b26:	f8 94       	cli

00003b28 <__stop_program>:
    3b28:	ff cf       	rjmp	.-2      	; 0x3b28 <__stop_program>
