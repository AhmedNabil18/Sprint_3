
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003e2  00800060  00003c8a  00003d1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000017a  00800442  00800442  00004100  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004100  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004130  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006e8  00000000  00000000  0000416c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006ff0  00000000  00000000  00004854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e86  00000000  00000000  0000b844  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004324  00000000  00000000  0000d6ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001614  00000000  00000000  000119f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002bd8  00000000  00000000  00013004  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005b81  00000000  00000000  00015bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005d0  00000000  00000000  0001b75d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__vector_1>
       8:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__vector_2>
       c:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__vector_3>
      10:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__vector_4>
      14:	0c 94 a7 14 	jmp	0x294e	; 0x294e <__vector_5>
      18:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__vector_6>
      1c:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__vector_7>
      20:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <__vector_8>
      24:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__vector_9>
      28:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__vector_10>
      2c:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <__vector_11>
      30:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__vector_12>
      34:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__vector_13>
      38:	0c 94 6a 1b 	jmp	0x36d4	; 0x36d4 <__vector_14>
      3c:	0c 94 1c 1b 	jmp	0x3638	; 0x3638 <__vector_15>
      40:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <__vector_16>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	cf 19       	sub	r28, r15
      56:	db 19       	sub	r29, r11
      58:	d2 19       	sub	r29, r2
      5a:	d5 19       	sub	r29, r5
      5c:	d8 19       	sub	r29, r8
      5e:	cf 19       	sub	r28, r15
      60:	cf 19       	sub	r28, r15

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	14 e0       	ldi	r17, 0x04	; 4
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	ea e8       	ldi	r30, 0x8A	; 138
      76:	fc e3       	ldi	r31, 0x3C	; 60
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a2 34       	cpi	r26, 0x42	; 66
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	25 e0       	ldi	r18, 0x05	; 5
      86:	a2 e4       	ldi	r26, 0x42	; 66
      88:	b4 e0       	ldi	r27, 0x04	; 4
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	ac 3b       	cpi	r26, 0xBC	; 188
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <main>
      98:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <AppADMIN_saveNewCustomerData>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save PAN and Balance of a new Customer in the EEPROM
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveNewCustomerData(void)
{
      a0:	cf 93       	push	r28
      a2:	df 93       	push	r29
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*16 ;
      a4:	20 91 5c 04 	lds	r18, 0x045C	; 0x80045c <gu8_registeredAccNum>
      a8:	30 e0       	ldi	r19, 0x00	; 0
      aa:	c9 01       	movw	r24, r18
      ac:	02 96       	adiw	r24, 0x02	; 2
      ae:	d8 2f       	mov	r29, r24
      b0:	d2 95       	swap	r29
      b2:	d0 7f       	andi	r29, 0xF0	; 240
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*16 ;
      b4:	2d 5f       	subi	r18, 0xFD	; 253
      b6:	3f 4f       	sbci	r19, 0xFF	; 255
      b8:	c2 2f       	mov	r28, r18
      ba:	c2 95       	swap	r28
      bc:	c0 7f       	andi	r28, 0xF0	; 240
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
      be:	8e e5       	ldi	r24, 0x5E	; 94
      c0:	94 e0       	ldi	r25, 0x04	; 4
      c2:	0e 94 ed 16 	call	0x2dda	; 0x2dda <stringLength>
      c6:	48 2f       	mov	r20, r24
      c8:	50 e0       	ldi	r21, 0x00	; 0
      ca:	6e e5       	ldi	r22, 0x5E	; 94
      cc:	74 e0       	ldi	r23, 0x04	; 4
      ce:	8d 2f       	mov	r24, r29
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <Eeprom_24_writePacket>
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	d9 f4       	brne	.+54     	; 0x110 <AppADMIN_saveNewCustomerData+0x70>
	return APP_STATUS_ERROR_NOK;
	
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
      da:	88 e6       	ldi	r24, 0x68	; 104
      dc:	94 e0       	ldi	r25, 0x04	; 4
      de:	0e 94 ed 16 	call	0x2dda	; 0x2dda <stringLength>
      e2:	48 2f       	mov	r20, r24
      e4:	50 e0       	ldi	r21, 0x00	; 0
      e6:	68 e6       	ldi	r22, 0x68	; 104
      e8:	74 e0       	ldi	r23, 0x04	; 4
      ea:	8c 2f       	mov	r24, r28
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <Eeprom_24_writePacket>
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	79 f4       	brne	.+30     	; 0x114 <AppADMIN_saveNewCustomerData+0x74>
	return APP_STATUS_ERROR_NOK;
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
      f6:	60 91 5c 04 	lds	r22, 0x045C	; 0x80045c <gu8_registeredAccNum>
      fa:	6f 5f       	subi	r22, 0xFF	; 255
      fc:	60 93 5c 04 	sts	0x045C, r22	; 0x80045c <gu8_registeredAccNum>
     100:	82 e0       	ldi	r24, 0x02	; 2
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 6d 08 	call	0x10da	; 0x10da <Eeprom_24_writeByte>
     108:	81 30       	cpi	r24, 0x01	; 1
     10a:	31 f0       	breq	.+12     	; 0x118 <AppADMIN_saveNewCustomerData+0x78>
	return APP_STATUS_ERROR_NOK;
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	05 c0       	rjmp	.+10     	; 0x11a <AppADMIN_saveNewCustomerData+0x7a>
{
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*16 ;
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*16 ;
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	03 c0       	rjmp	.+6      	; 0x11a <AppADMIN_saveNewCustomerData+0x7a>
	
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	01 c0       	rjmp	.+2      	; 0x11a <AppADMIN_saveNewCustomerData+0x7a>
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     118:	81 e0       	ldi	r24, 0x01	; 1
}
     11a:	df 91       	pop	r29
     11c:	cf 91       	pop	r28
     11e:	08 95       	ret

00000120 <AppUSER_displayTemp>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to display the temperature.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_displayTemp(void)
{
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	1f 92       	push	r1
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_currentTemp=0;
     12a:	19 82       	std	Y+1, r1	; 0x01
	gu8_displayFlag = DISPLAY_TEMP;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <gu8_displayFlag>
	Lcd_clear();
     132:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	0e 94 05 0c 	call	0x180a	; 0x180a <Lcd_setCursor>
     13e:	81 30       	cpi	r24, 0x01	; 1
     140:	f9 f4       	brne	.+62     	; 0x180 <AppUSER_displayTemp+0x60>
	return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
     142:	87 ed       	ldi	r24, 0xD7	; 215
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 3c 0c 	call	0x1878	; 0x1878 <Lcd_printString>
     14a:	81 30       	cpi	r24, 0x01	; 1
     14c:	d9 f4       	brne	.+54     	; 0x184 <AppUSER_displayTemp+0x64>
	return APP_STATUS_ERROR_NOK;
	if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
     14e:	ce 01       	movw	r24, r28
     150:	01 96       	adiw	r24, 0x01	; 1
     152:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LM35_readTemp>
     156:	81 30       	cpi	r24, 0x01	; 1
     158:	59 f4       	brne	.+22     	; 0x170 <AppUSER_displayTemp+0x50>
	{
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     15a:	60 e0       	ldi	r22, 0x00	; 0
     15c:	0e 94 05 0c 	call	0x180a	; 0x180a <Lcd_setCursor>
     160:	81 30       	cpi	r24, 0x01	; 1
     162:	91 f4       	brne	.+36     	; 0x188 <AppUSER_displayTemp+0x68>
		return APP_STATUS_ERROR_NOK;
		if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
     164:	89 81       	ldd	r24, Y+1	; 0x01
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <Lcd_printDecimal>
     16c:	81 30       	cpi	r24, 0x01	; 1
     16e:	71 f4       	brne	.+28     	; 0x18c <AppUSER_displayTemp+0x6c>
		return APP_STATUS_ERROR_NOK;
	}
	if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
     170:	88 ee       	ldi	r24, 0xE8	; 232
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 3c 0c 	call	0x1878	; 0x1878 <Lcd_printString>
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	51 f0       	breq	.+20     	; 0x190 <AppUSER_displayTemp+0x70>
	return APP_STATUS_ERROR_NOK;
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	09 c0       	rjmp	.+18     	; 0x192 <AppUSER_displayTemp+0x72>
{
	uint8_t u8_currentTemp=0;
	gu8_displayFlag = DISPLAY_TEMP;
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	07 c0       	rjmp	.+14     	; 0x192 <AppUSER_displayTemp+0x72>
	if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	05 c0       	rjmp	.+10     	; 0x192 <AppUSER_displayTemp+0x72>
	if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
	{
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	03 c0       	rjmp	.+6      	; 0x192 <AppUSER_displayTemp+0x72>
		if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	01 c0       	rjmp	.+2      	; 0x192 <AppUSER_displayTemp+0x72>
	}
	if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	return APP_STATUS_ERROR_OK;
     190:	81 e0       	ldi	r24, 0x01	; 1
}
     192:	0f 90       	pop	r0
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	08 95       	ret

0000019a <AppUSER_checkPan>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
     19a:	1f 93       	push	r17
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
     1a4:	2a 97       	sbiw	r28, 0x0a	; 10
     1a6:	0f b6       	in	r0, 0x3f	; 63
     1a8:	f8 94       	cli
     1aa:	de bf       	out	0x3e, r29	; 62
     1ac:	0f be       	out	0x3f, r0	; 63
     1ae:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
     1b0:	fe 01       	movw	r30, r28
     1b2:	31 96       	adiw	r30, 0x01	; 1
     1b4:	8a e0       	ldi	r24, 0x0A	; 10
     1b6:	df 01       	movw	r26, r30
     1b8:	1d 92       	st	X+, r1
     1ba:	8a 95       	dec	r24
     1bc:	e9 f7       	brne	.-6      	; 0x1b8 <AppUSER_checkPan+0x1e>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     1be:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <gu8_clientIndex>
     1c2:	1b c0       	rjmp	.+54     	; 0x1fa <AppUSER_checkPan+0x60>
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*16;
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	02 96       	adiw	r24, 0x02	; 2
     1c8:	82 95       	swap	r24
     1ca:	80 7f       	andi	r24, 0xF0	; 240
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     1cc:	4a e0       	ldi	r20, 0x0A	; 10
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	be 01       	movw	r22, r28
     1d2:	6f 5f       	subi	r22, 0xFF	; 255
     1d4:	7f 4f       	sbci	r23, 0xFF	; 255
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 35 0a 	call	0x146a	; 0x146a <Eeprom_24_readPacket>
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	89 f5       	brne	.+98     	; 0x242 <AppUSER_checkPan+0xa8>
		return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
     1e0:	6a e7       	ldi	r22, 0x7A	; 122
     1e2:	74 e0       	ldi	r23, 0x04	; 4
     1e4:	ce 01       	movw	r24, r28
     1e6:	01 96       	adiw	r24, 0x01	; 1
     1e8:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <stringCompare>
     1ec:	81 30       	cpi	r24, 0x01	; 1
     1ee:	69 f0       	breq	.+26     	; 0x20a <AppUSER_checkPan+0x70>
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     1f0:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <gu8_clientIndex>
     1f4:	8f 5f       	subi	r24, 0xFF	; 255
     1f6:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <gu8_clientIndex>
     1fa:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <gu8_clientIndex>
     1fe:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <gu8_registeredAccNum>
     202:	89 17       	cp	r24, r25
     204:	f8 f2       	brcs	.-66     	; 0x1c4 <AppUSER_checkPan+0x2a>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	01 c0       	rjmp	.+2      	; 0x20c <AppUSER_checkPan+0x72>
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*16;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
		{
			u8_panFound = 1;
     20a:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
		
	if(u8_panFound == 1)
     20c:	81 30       	cpi	r24, 0x01	; 1
     20e:	d9 f4       	brne	.+54     	; 0x246 <AppUSER_checkPan+0xac>
	{
		uint8_t u8_clientBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*16;
     210:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <gu8_clientIndex>
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	03 96       	adiw	r24, 0x03	; 3
     218:	18 2f       	mov	r17, r24
     21a:	12 95       	swap	r17
     21c:	10 7f       	andi	r17, 0xF0	; 240
			
		stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
     21e:	6e e5       	ldi	r22, 0x5E	; 94
     220:	74 e0       	ldi	r23, 0x04	; 4
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	0e 94 38 17 	call	0x2e70	; 0x2e70 <stringCopy>
			
		if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     22a:	49 e0       	ldi	r20, 0x09	; 9
     22c:	50 e0       	ldi	r21, 0x00	; 0
     22e:	68 e6       	ldi	r22, 0x68	; 104
     230:	74 e0       	ldi	r23, 0x04	; 4
     232:	81 2f       	mov	r24, r17
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 35 0a 	call	0x146a	; 0x146a <Eeprom_24_readPacket>
     23a:	81 30       	cpi	r24, 0x01	; 1
     23c:	31 f0       	breq	.+12     	; 0x24a <AppUSER_checkPan+0xb0>
		return APP_STATUS_ERROR_NOK;
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	05 c0       	rjmp	.+10     	; 0x24c <AppUSER_checkPan+0xb2>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*16;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	03 c0       	rjmp	.+6      	; 0x24c <AppUSER_checkPan+0xb2>
		return APP_STATUS_ERROR_NOK;
			
		return APP_STATUS_PAN_FOUND;
	}

	return APP_STATUS_PAN_NOT_FOUND;
     246:	8a e0       	ldi	r24, 0x0A	; 10
     248:	01 c0       	rjmp	.+2      	; 0x24c <AppUSER_checkPan+0xb2>
		stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
			
		if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
			
		return APP_STATUS_PAN_FOUND;
     24a:	89 e0       	ldi	r24, 0x09	; 9
	}

	return APP_STATUS_PAN_NOT_FOUND;
}
     24c:	2a 96       	adiw	r28, 0x0a	; 10
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	de bf       	out	0x3e, r29	; 62
     254:	0f be       	out	0x3f, r0	; 63
     256:	cd bf       	out	0x3d, r28	; 61
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	1f 91       	pop	r17
     25e:	08 95       	ret

00000260 <AppUSER_ReportKeypad>:
* Parameters (out): pu8_key - Pointer to variable to hold the button pressed
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the value pressed in the keypad.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_ReportKeypad(uint8_t* pu8_key)
{
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	ec 01       	movw	r28, r24
	static uint8_t u8_index = 0;
	static uint8_t sau8_data[10]={0};
	enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&sau8_data[u8_index]);
     266:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <u8_index.2244>
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	8d 5b       	subi	r24, 0xBD	; 189
     26e:	9b 4f       	sbci	r25, 0xFB	; 251
     270:	0e 94 02 0b 	call	0x1604	; 0x1604 <Keypad_readKey>
		
	if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
     274:	86 30       	cpi	r24, 0x06	; 6
     276:	09 f0       	breq	.+2      	; 0x27a <AppUSER_ReportKeypad+0x1a>
     278:	61 c0       	rjmp	.+194    	; 0x33c <AppUSER_ReportKeypad+0xdc>
	{
		if(sau8_data[u8_index] == '=')
     27a:	60 91 4d 04 	lds	r22, 0x044D	; 0x80044d <u8_index.2244>
     27e:	86 2f       	mov	r24, r22
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	fc 01       	movw	r30, r24
     284:	ed 5b       	subi	r30, 0xBD	; 189
     286:	fb 4f       	sbci	r31, 0xFB	; 251
     288:	20 81       	ld	r18, Z
     28a:	2d 33       	cpi	r18, 0x3D	; 61
     28c:	09 f5       	brne	.+66     	; 0x2d0 <AppUSER_ReportKeypad+0x70>
		{
			sau8_data[u8_index] = '\0';
     28e:	fc 01       	movw	r30, r24
     290:	ed 5b       	subi	r30, 0xBD	; 189
     292:	fb 4f       	sbci	r31, 0xFB	; 251
     294:	10 82       	st	Z, r1
			u8_index = 0;
     296:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <u8_index.2244>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     29a:	66 e0       	ldi	r22, 0x06	; 6
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	0e 94 05 0c 	call	0x180a	; 0x180a <Lcd_setCursor>
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <AppUSER_ReportKeypad+0x48>
     2a6:	4c c0       	rjmp	.+152    	; 0x340 <AppUSER_ReportKeypad+0xe0>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
     2a8:	87 ef       	ldi	r24, 0xF7	; 247
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 3c 0c 	call	0x1878	; 0x1878 <Lcd_printString>
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	09 f0       	breq	.+2      	; 0x2b6 <AppUSER_ReportKeypad+0x56>
     2b4:	47 c0       	rjmp	.+142    	; 0x344 <AppUSER_ReportKeypad+0xe4>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     2b6:	66 e0       	ldi	r22, 0x06	; 6
     2b8:	0e 94 05 0c 	call	0x180a	; 0x180a <Lcd_setCursor>
     2bc:	81 30       	cpi	r24, 0x01	; 1
     2be:	09 f0       	breq	.+2      	; 0x2c2 <AppUSER_ReportKeypad+0x62>
     2c0:	43 c0       	rjmp	.+134    	; 0x348 <AppUSER_ReportKeypad+0xe8>
			return APP_STATUS_ERROR_NOK;
			stringCopy(sau8_data, pu8_key);
     2c2:	be 01       	movw	r22, r28
     2c4:	83 e4       	ldi	r24, 0x43	; 67
     2c6:	94 e0       	ldi	r25, 0x04	; 4
     2c8:	0e 94 38 17 	call	0x2e70	; 0x2e70 <stringCopy>
			return APP_STATUS_KPD_NUM;
     2cc:	87 e0       	ldi	r24, 0x07	; 7
     2ce:	45 c0       	rjmp	.+138    	; 0x35a <AppUSER_ReportKeypad+0xfa>
		}else if(sau8_data[u8_index] == '-')
     2d0:	2d 32       	cpi	r18, 0x2D	; 45
     2d2:	a9 f4       	brne	.+42     	; 0x2fe <AppUSER_ReportKeypad+0x9e>
		{
			u8_index--;
     2d4:	ef ef       	ldi	r30, 0xFF	; 255
     2d6:	e6 0f       	add	r30, r22
     2d8:	e0 93 4d 04 	sts	0x044D, r30	; 0x80044d <u8_index.2244>
			sau8_data[u8_index] = '\0';
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	ed 5b       	subi	r30, 0xBD	; 189
     2e0:	fb 4f       	sbci	r31, 0xFB	; 251
     2e2:	10 82       	st	Z, r1
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     2e4:	6b 5f       	subi	r22, 0xFB	; 251
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	0e 94 05 0c 	call	0x180a	; 0x180a <Lcd_setCursor>
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	71 f5       	brne	.+92     	; 0x34c <AppUSER_ReportKeypad+0xec>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_printChar(' ') != LCD_STATUS_ERROR_OK)
     2f0:	80 e2       	ldi	r24, 0x20	; 32
     2f2:	0e 94 20 0c 	call	0x1840	; 0x1840 <Lcd_printChar>
     2f6:	81 30       	cpi	r24, 0x01	; 1
     2f8:	59 f1       	breq	.+86     	; 0x350 <AppUSER_ReportKeypad+0xf0>
			return APP_STATUS_ERROR_NOK;
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	2e c0       	rjmp	.+92     	; 0x35a <AppUSER_ReportKeypad+0xfa>
		}else
		{
			if(u8_index!=10)
     2fe:	6a 30       	cpi	r22, 0x0A	; 10
     300:	b9 f0       	breq	.+46     	; 0x330 <AppUSER_ReportKeypad+0xd0>
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     302:	6a 5f       	subi	r22, 0xFA	; 250
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	0e 94 05 0c 	call	0x180a	; 0x180a <Lcd_setCursor>
     30a:	81 30       	cpi	r24, 0x01	; 1
     30c:	19 f5       	brne	.+70     	; 0x354 <AppUSER_ReportKeypad+0xf4>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
     30e:	e0 91 4d 04 	lds	r30, 0x044D	; 0x80044d <u8_index.2244>
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	ed 5b       	subi	r30, 0xBD	; 189
     316:	fb 4f       	sbci	r31, 0xFB	; 251
     318:	80 81       	ld	r24, Z
     31a:	0e 94 20 0c 	call	0x1840	; 0x1840 <Lcd_printChar>
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	d9 f4       	brne	.+54     	; 0x358 <AppUSER_ReportKeypad+0xf8>
				return APP_STATUS_ERROR_NOK;
				u8_index++;
     322:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <u8_index.2244>
     326:	8f 5f       	subi	r24, 0xFF	; 255
     328:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <u8_index.2244>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	15 c0       	rjmp	.+42     	; 0x35a <AppUSER_ReportKeypad+0xfa>
				if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
				u8_index++;
			}else
			{
				sau8_data[u8_index] = '\0';
     330:	fc 01       	movw	r30, r24
     332:	ed 5b       	subi	r30, 0xBD	; 189
     334:	fb 4f       	sbci	r31, 0xFB	; 251
     336:	10 82       	st	Z, r1
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	0f c0       	rjmp	.+30     	; 0x35a <AppUSER_ReportKeypad+0xfa>
			}
				
		}
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	0d c0       	rjmp	.+26     	; 0x35a <AppUSER_ReportKeypad+0xfa>
		if(sau8_data[u8_index] == '=')
		{
			sau8_data[u8_index] = '\0';
			u8_index = 0;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	0b c0       	rjmp	.+22     	; 0x35a <AppUSER_ReportKeypad+0xfa>
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	09 c0       	rjmp	.+18     	; 0x35a <AppUSER_ReportKeypad+0xfa>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	07 c0       	rjmp	.+14     	; 0x35a <AppUSER_ReportKeypad+0xfa>
		}else if(sau8_data[u8_index] == '-')
		{
			u8_index--;
			sau8_data[u8_index] = '\0';
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	05 c0       	rjmp	.+10     	; 0x35a <AppUSER_ReportKeypad+0xfa>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	03 c0       	rjmp	.+6      	; 0x35a <AppUSER_ReportKeypad+0xfa>
		}else
		{
			if(u8_index!=10)
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	01 c0       	rjmp	.+2      	; 0x35a <AppUSER_ReportKeypad+0xfa>
				if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     358:	80 e0       	ldi	r24, 0x00	; 0
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <AppUSER_startTransaction>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startTransaction(void)
{
     360:	4f 92       	push	r4
     362:	5f 92       	push	r5
     364:	6f 92       	push	r6
     366:	7f 92       	push	r7
     368:	8f 92       	push	r8
     36a:	9f 92       	push	r9
     36c:	af 92       	push	r10
     36e:	bf 92       	push	r11
     370:	cf 92       	push	r12
     372:	df 92       	push	r13
     374:	ef 92       	push	r14
     376:	ff 92       	push	r15
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	28 97       	sbiw	r28, 0x08	; 8
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_inputKPD[8] = {0};
     38c:	fe 01       	movw	r30, r28
     38e:	31 96       	adiw	r30, 0x01	; 1
     390:	88 e0       	ldi	r24, 0x08	; 8
     392:	df 01       	movw	r26, r30
     394:	1d 92       	st	X+, r1
     396:	8a 95       	dec	r24
     398:	e9 f7       	brne	.-6      	; 0x394 <AppUSER_startTransaction+0x34>
	enuApp_Status_t KeypdaStatus = 0;
	float32_t f32_balance = stringToFloat(gstr_clientdata.au8_Balance);
     39a:	88 e6       	ldi	r24, 0x68	; 104
     39c:	94 e0       	ldi	r25, 0x04	; 4
     39e:	0e 94 90 17 	call	0x2f20	; 0x2f20 <stringToFloat>
     3a2:	2b 01       	movw	r4, r22
     3a4:	3c 01       	movw	r6, r24
	float32_t f32_maxAmount = stringToFloat(gau8_maxAmount);
     3a6:	8f e4       	ldi	r24, 0x4F	; 79
     3a8:	94 e0       	ldi	r25, 0x04	; 4
     3aa:	0e 94 90 17 	call	0x2f20	; 0x2f20 <stringToFloat>
     3ae:	4b 01       	movw	r8, r22
     3b0:	5c 01       	movw	r10, r24
	float32_t f32_amount = 0;
	while(1)
	{
		EmptyString(au8_inputKPD);
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     3ba:	ce 01       	movw	r24, r28
     3bc:	01 96       	adiw	r24, 0x01	; 1
     3be:	0e 94 30 01 	call	0x260	; 0x260 <AppUSER_ReportKeypad>
		
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     3c2:	87 30       	cpi	r24, 0x07	; 7
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <AppUSER_startTransaction+0x68>
     3c6:	af c0       	rjmp	.+350    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
		{
			
			f32_amount = stringToFloat(au8_inputKPD);
     3c8:	ce 01       	movw	r24, r28
     3ca:	01 96       	adiw	r24, 0x01	; 1
     3cc:	0e 94 90 17 	call	0x2f20	; 0x2f20 <stringToFloat>
     3d0:	6b 01       	movw	r12, r22
     3d2:	7c 01       	movw	r14, r24
			
			if(f32_maxAmount < f32_amount)
     3d4:	9b 01       	movw	r18, r22
     3d6:	ac 01       	movw	r20, r24
     3d8:	c5 01       	movw	r24, r10
     3da:	b4 01       	movw	r22, r8
     3dc:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__cmpsf2>
     3e0:	88 23       	and	r24, r24
     3e2:	0c f5       	brge	.+66     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
			{
				Lcd_printLCD((uint8_t*)"   Max Amount", (uint8_t*)"    Exceeded");
     3e4:	6a ef       	ldi	r22, 0xFA	; 250
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	87 e0       	ldi	r24, 0x07	; 7
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
				
				Delay_ms(500);
     3f0:	24 ef       	ldi	r18, 0xF4	; 244
     3f2:	31 e0       	ldi	r19, 0x01	; 1
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
				
				Lcd_clear();
     404:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	0e 94 05 0c 	call	0x180a	; 0x180a <Lcd_setCursor>
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	09 f0       	breq	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     414:	93 c0       	rjmp	.+294    	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     416:	85 e1       	ldi	r24, 0x15	; 21
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <Lcd_printString>
     41e:	81 30       	cpi	r24, 0x01	; 1
     420:	09 f4       	brne	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     422:	81 c0       	rjmp	.+258    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
     424:	8d c0       	rjmp	.+282    	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
				return APP_STATUS_ERROR_NOK;
			}else
			{
			Lcd_printLCD((uint8_t*)"  Please Wait", (uint8_t*)" Processing....");
     426:	62 e2       	ldi	r22, 0x22	; 34
     428:	71 e0       	ldi	r23, 0x01	; 1
     42a:	82 e3       	ldi	r24, 0x32	; 50
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
				
			if(f32_balance < f32_amount)
     432:	a7 01       	movw	r20, r14
     434:	96 01       	movw	r18, r12
     436:	c3 01       	movw	r24, r6
     438:	b2 01       	movw	r22, r4
     43a:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__cmpsf2>
     43e:	88 23       	and	r24, r24
     440:	0c f5       	brge	.+66     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
			{
				Lcd_printLCD((uint8_t*)"  Insufficient", (uint8_t*)"      Fund");
     442:	60 e4       	ldi	r22, 0x40	; 64
     444:	71 e0       	ldi	r23, 0x01	; 1
     446:	8b e4       	ldi	r24, 0x4B	; 75
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
					
				Delay_ms(500);
     44e:	24 ef       	ldi	r18, 0xF4	; 244
     450:	31 e0       	ldi	r19, 0x01	; 1
     452:	40 e0       	ldi	r20, 0x00	; 0
     454:	50 e0       	ldi	r21, 0x00	; 0
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
					
				Lcd_clear();
     462:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	0e 94 05 0c 	call	0x180a	; 0x180a <Lcd_setCursor>
     46e:	81 30       	cpi	r24, 0x01	; 1
     470:	09 f0       	breq	.+2      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     472:	68 c0       	rjmp	.+208    	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     474:	85 e1       	ldi	r24, 0x15	; 21
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	0e 94 3c 0c 	call	0x1878	; 0x1878 <Lcd_printString>
     47c:	81 30       	cpi	r24, 0x01	; 1
     47e:	09 f4       	brne	.+2      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     480:	52 c0       	rjmp	.+164    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
     482:	62 c0       	rjmp	.+196    	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
				return APP_STATUS_ERROR_NOK;
				}else/****************** Transaction Successfull ******************/
				{
					Lcd_printLCD((uint8_t*)"   Successful", (uint8_t*)"  Transaction");
     484:	6a e5       	ldi	r22, 0x5A	; 90
     486:	71 e0       	ldi	r23, 0x01	; 1
     488:	88 e6       	ldi	r24, 0x68	; 104
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
						
					Motor_run(MOTOR_CASH_ID, 100, MOTOR_DIR_CLK_WISE);
     490:	40 e0       	ldi	r20, 0x00	; 0
     492:	64 e6       	ldi	r22, 0x64	; 100
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <Motor_run>
					Delay_ms(1000);
     49a:	28 ee       	ldi	r18, 0xE8	; 232
     49c:	33 e0       	ldi	r19, 0x03	; 3
     49e:	40 e0       	ldi	r20, 0x00	; 0
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
					Motor_stop(MOTOR_CASH_ID);
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Motor_stop>
					gu8_USER_Mode_State = USER_IDLE;
     4b4:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <gu8_USER_Mode_State>
						
					f32_balance -= f32_amount;
     4b8:	a7 01       	movw	r20, r14
     4ba:	96 01       	movw	r18, r12
     4bc:	c3 01       	movw	r24, r6
     4be:	b2 01       	movw	r22, r4
     4c0:	0e 94 91 1b 	call	0x3722	; 0x3722 <__subsf3>
     4c4:	6b 01       	movw	r12, r22
     4c6:	7c 01       	movw	r14, r24
					EmptyString(gstr_clientdata.au8_Balance);
     4c8:	88 e6       	ldi	r24, 0x68	; 104
     4ca:	94 e0       	ldi	r25, 0x04	; 4
     4cc:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <EmptyString>
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
     4d0:	48 e6       	ldi	r20, 0x68	; 104
     4d2:	54 e0       	ldi	r21, 0x04	; 4
     4d4:	c7 01       	movw	r24, r14
     4d6:	b6 01       	movw	r22, r12
     4d8:	0e 94 0e 18 	call	0x301c	; 0x301c <floatToString>
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*16 ;
     4dc:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <gu8_clientIndex>
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	03 96       	adiw	r24, 0x03	; 3
     4e4:	f8 2e       	mov	r15, r24
     4e6:	ff 0c       	add	r15, r15
     4e8:	ff 0c       	add	r15, r15
     4ea:	ff 0c       	add	r15, r15
     4ec:	ff 0c       	add	r15, r15
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     4ee:	88 e6       	ldi	r24, 0x68	; 104
     4f0:	94 e0       	ldi	r25, 0x04	; 4
     4f2:	0e 94 ed 16 	call	0x2dda	; 0x2dda <stringLength>
					f32_balance -= f32_amount;
					EmptyString(gstr_clientdata.au8_Balance);
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*16 ;
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
     4f6:	48 2f       	mov	r20, r24
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	68 e6       	ldi	r22, 0x68	; 104
     4fc:	74 e0       	ldi	r23, 0x04	; 4
     4fe:	8f 2d       	mov	r24, r15
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <Eeprom_24_writePacket>
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	09 f5       	brne	.+66     	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
						
					Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
     50a:	68 e6       	ldi	r22, 0x68	; 104
     50c:	74 e0       	ldi	r23, 0x04	; 4
     50e:	86 e7       	ldi	r24, 0x76	; 118
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
						
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     516:	65 e8       	ldi	r22, 0x85	; 133
     518:	71 e0       	ldi	r23, 0x01	; 1
     51a:	84 e9       	ldi	r24, 0x94	; 148
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
						
					return APP_STATUS_ERROR_OK;
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	14 c0       	rjmp	.+40     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
				}
			}
		}
		Delay_ms(155);
     526:	2b e9       	ldi	r18, 0x9B	; 155
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	40 e0       	ldi	r20, 0x00	; 0
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
	}
     53a:	3b cf       	rjmp	.-394    	; 0x3b2 <AppUSER_startTransaction+0x52>
				
				Delay_ms(500);
				
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	07 c0       	rjmp	.+14     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	05 c0       	rjmp	.+10     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
					
				Delay_ms(500);
					
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	03 c0       	rjmp	.+6      	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	01 c0       	rjmp	.+2      	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*16 ;
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     54c:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
		Delay_ms(155);
	}
}
     54e:	28 96       	adiw	r28, 0x08	; 8
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	ff 90       	pop	r15
     560:	ef 90       	pop	r14
     562:	df 90       	pop	r13
     564:	cf 90       	pop	r12
     566:	bf 90       	pop	r11
     568:	af 90       	pop	r10
     56a:	9f 90       	pop	r9
     56c:	8f 90       	pop	r8
     56e:	7f 90       	pop	r7
     570:	6f 90       	pop	r6
     572:	5f 90       	pop	r5
     574:	4f 90       	pop	r4
     576:	08 95       	ret

00000578 <AppUSER_checkPin>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the user's input pin if right or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPin(void)
{
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	00 d0       	rcall	.+0      	; 0x57e <AppUSER_checkPin+0x6>
     57e:	00 d0       	rcall	.+0      	; 0x580 <AppUSER_checkPin+0x8>
     580:	1f 92       	push	r1
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_inputKPD[5] = {0};
     586:	fe 01       	movw	r30, r28
     588:	31 96       	adiw	r30, 0x01	; 1
     58a:	85 e0       	ldi	r24, 0x05	; 5
     58c:	df 01       	movw	r26, r30
     58e:	1d 92       	st	X+, r1
     590:	8a 95       	dec	r24
     592:	e9 f7       	brne	.-6      	; 0x58e <AppUSER_checkPin+0x16>
	enuApp_Status_t KeypdaStatus = 0;
	while(1)
	{
		EmptyString(au8_inputKPD);
     594:	ce 01       	movw	r24, r28
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     59c:	ce 01       	movw	r24, r28
     59e:	01 96       	adiw	r24, 0x01	; 1
     5a0:	0e 94 30 01 	call	0x260	; 0x260 <AppUSER_ReportKeypad>
			
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     5a4:	87 30       	cpi	r24, 0x07	; 7
     5a6:	79 f5       	brne	.+94     	; 0x606 <AppUSER_checkPin+0x8e>
		{
			if(stringCompare(au8_inputKPD, gstr_userCardData.au8_pinNum) != 1)
     5a8:	64 e8       	ldi	r22, 0x84	; 132
     5aa:	74 e0       	ldi	r23, 0x04	; 4
     5ac:	ce 01       	movw	r24, r28
     5ae:	01 96       	adiw	r24, 0x01	; 1
     5b0:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <stringCompare>
     5b4:	81 30       	cpi	r24, 0x01	; 1
     5b6:	f9 f0       	breq	.+62     	; 0x5f6 <AppUSER_checkPin+0x7e>
			{
				Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)"   Try Again");
     5b8:	62 ea       	ldi	r22, 0xA2	; 162
     5ba:	71 e0       	ldi	r23, 0x01	; 1
     5bc:	8f ea       	ldi	r24, 0xAF	; 175
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
				Delay_ms(500);
     5c4:	24 ef       	ldi	r18, 0xF4	; 244
     5c6:	31 e0       	ldi	r19, 0x01	; 1
     5c8:	40 e0       	ldi	r20, 0x00	; 0
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
					
				Lcd_clear();
     5d8:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	0e 94 05 0c 	call	0x180a	; 0x180a <Lcd_setCursor>
     5e4:	81 30       	cpi	r24, 0x01	; 1
     5e6:	d1 f4       	brne	.+52     	; 0x61c <AppUSER_checkPin+0xa4>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     5e8:	8e eb       	ldi	r24, 0xBE	; 190
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	0e 94 3c 0c 	call	0x1878	; 0x1878 <Lcd_printString>
     5f0:	81 30       	cpi	r24, 0x01	; 1
     5f2:	49 f0       	breq	.+18     	; 0x606 <AppUSER_checkPin+0x8e>
     5f4:	15 c0       	rjmp	.+42     	; 0x620 <AppUSER_checkPin+0xa8>
				return APP_STATUS_ERROR_NOK;
			}else
			{
				Lcd_printLCD((uint8_t*)"  Please Wait", (uint8_t*)" Processing....");
     5f6:	62 e2       	ldi	r22, 0x22	; 34
     5f8:	71 e0       	ldi	r23, 0x01	; 1
     5fa:	82 e3       	ldi	r24, 0x32	; 50
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
					
				return APP_STATUS_PIN_CORRECT;
     602:	88 e0       	ldi	r24, 0x08	; 8
     604:	0e c0       	rjmp	.+28     	; 0x622 <AppUSER_checkPin+0xaa>
			}
		}
		Delay_ms(155);
     606:	2b e9       	ldi	r18, 0x9B	; 155
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	40 e0       	ldi	r20, 0x00	; 0
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
	}
     61a:	bc cf       	rjmp	.-136    	; 0x594 <AppUSER_checkPin+0x1c>
				Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)"   Try Again");
				Delay_ms(500);
					
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	01 c0       	rjmp	.+2      	; 0x622 <AppUSER_checkPin+0xaa>
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     620:	80 e0       	ldi	r24, 0x00	; 0
				return APP_STATUS_PIN_CORRECT;
			}
		}
		Delay_ms(155);
	}
}
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <AppUSER_startProcess>:
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to start processing the card.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
     632:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	0e 94 05 0c 	call	0x180a	; 0x180a <Lcd_setCursor>
     63e:	81 30       	cpi	r24, 0x01	; 1
     640:	09 f0       	breq	.+2      	; 0x644 <AppUSER_startProcess+0x12>
     642:	4a c0       	rjmp	.+148    	; 0x6d8 <AppUSER_startProcess+0xa6>
	return APP_STATUS_ERROR_NOK;
	enuApp_Status_t PAN_status = AppUSER_checkPan();
     644:	0e 94 cd 00 	call	0x19a	; 0x19a <AppUSER_checkPan>
	if(PAN_status == APP_STATUS_PAN_NOT_FOUND)
     648:	8a 30       	cpi	r24, 0x0A	; 10
     64a:	41 f4       	brne	.+16     	; 0x65c <AppUSER_startProcess+0x2a>
	{
		Lcd_printLCD((uint8_t*)"Your Card is not", (uint8_t*)"in the Database");
     64c:	6d ec       	ldi	r22, 0xCD	; 205
     64e:	71 e0       	ldi	r23, 0x01	; 1
     650:	8d ed       	ldi	r24, 0xDD	; 221
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
		return APP_STATUS_PAN_NOT_FOUND;
     658:	8a e0       	ldi	r24, 0x0A	; 10
     65a:	08 95       	ret
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     65c:	8e eb       	ldi	r24, 0xBE	; 190
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	0e 94 3c 0c 	call	0x1878	; 0x1878 <Lcd_printString>
     664:	81 30       	cpi	r24, 0x01	; 1
     666:	d1 f5       	brne	.+116    	; 0x6dc <AppUSER_startProcess+0xaa>
	return APP_STATUS_ERROR_NOK;
	if(AppUSER_checkPin() != APP_STATUS_PIN_CORRECT)
     668:	0e 94 bc 02 	call	0x578	; 0x578 <AppUSER_checkPin>
     66c:	88 30       	cpi	r24, 0x08	; 8
     66e:	c1 f5       	brne	.+112    	; 0x6e0 <AppUSER_startProcess+0xae>
	return APP_STATUS_ERROR_NOK;
	
	
	Lcd_printLCD((uint8_t*)"    Welcome", gstr_userCardData.au8_cardHolderName);
     670:	60 e7       	ldi	r22, 0x70	; 112
     672:	74 e0       	ldi	r23, 0x04	; 4
     674:	8e ee       	ldi	r24, 0xEE	; 238
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
	Delay_ms(2000);
     67c:	20 ed       	ldi	r18, 0xD0	; 208
     67e:	37 e0       	ldi	r19, 0x07	; 7
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	50 e0       	ldi	r21, 0x00	; 0
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
	
	Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
     690:	68 e6       	ldi	r22, 0x68	; 104
     692:	74 e0       	ldi	r23, 0x04	; 4
     694:	86 e7       	ldi	r24, 0x76	; 118
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
	Delay_ms(2000);
     69c:	20 ed       	ldi	r18, 0xD0	; 208
     69e:	37 e0       	ldi	r19, 0x07	; 7
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
	
	Lcd_clear();
     6b0:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	0e 94 05 0c 	call	0x180a	; 0x180a <Lcd_setCursor>
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	91 f4       	brne	.+36     	; 0x6e4 <AppUSER_startProcess+0xb2>
	return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     6c0:	85 e1       	ldi	r24, 0x15	; 21
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	0e 94 3c 0c 	call	0x1878	; 0x1878 <Lcd_printString>
     6c8:	81 30       	cpi	r24, 0x01	; 1
     6ca:	71 f4       	brne	.+28     	; 0x6e8 <AppUSER_startProcess+0xb6>
	return APP_STATUS_ERROR_NOK;
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
     6cc:	0e 94 b0 01 	call	0x360	; 0x360 <AppUSER_startTransaction>
     6d0:	81 30       	cpi	r24, 0x01	; 1
     6d2:	59 f0       	breq	.+22     	; 0x6ea <AppUSER_startProcess+0xb8>
	return APP_STATUS_ERROR_NOK;
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	08 95       	ret
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	08 95       	ret
		Lcd_printLCD((uint8_t*)"Your Card is not", (uint8_t*)"in the Database");
		return APP_STATUS_PAN_NOT_FOUND;
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	08 95       	ret
	if(AppUSER_checkPin() != APP_STATUS_PIN_CORRECT)
	return APP_STATUS_ERROR_NOK;
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	08 95       	ret
	Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
	Delay_ms(2000);
	
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	08 95       	ret
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     6e8:	80 e0       	ldi	r24, 0x00	; 0
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     6ea:	08 95       	ret

000006ec <AppUSER_getCardData>:
* Parameters (out): pstr_CardData - Structure to save the card's data in.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the Card data Struct
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_getCardData(strCardData_t* pstr_CardData, uint8_t *pu8_dataString)
{
     6ec:	ac 01       	movw	r20, r24
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
     6ee:	20 e0       	ldi	r18, 0x00	; 0
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	0a c0       	rjmp	.+20     	; 0x708 <AppUSER_getCardData+0x1c>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     6f4:	fb 01       	movw	r30, r22
     6f6:	e9 0f       	add	r30, r25
     6f8:	f1 1d       	adc	r31, r1
     6fa:	80 81       	ld	r24, Z
     6fc:	fa 01       	movw	r30, r20
     6fe:	e2 0f       	add	r30, r18
     700:	f1 1d       	adc	r31, r1
     702:	80 83       	st	Z, r24
		u8_dataIndex++;
     704:	2f 5f       	subi	r18, 0xFF	; 255
{
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     706:	9f 5f       	subi	r25, 0xFF	; 255
     708:	9a 30       	cpi	r25, 0x0A	; 10
     70a:	a0 f3       	brcs	.-24     	; 0x6f4 <AppUSER_getCardData+0x8>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
     70c:	fa 01       	movw	r30, r20
     70e:	e2 0f       	add	r30, r18
     710:	f1 1d       	adc	r31, r1
     712:	10 82       	st	Z, r1
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
     714:	20 e0       	ldi	r18, 0x00	; 0
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     716:	9b e0       	ldi	r25, 0x0B	; 11
     718:	0a c0       	rjmp	.+20     	; 0x72e <AppUSER_getCardData+0x42>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     71a:	fb 01       	movw	r30, r22
     71c:	e9 0f       	add	r30, r25
     71e:	f1 1d       	adc	r31, r1
     720:	80 81       	ld	r24, Z
     722:	fa 01       	movw	r30, r20
     724:	e2 0f       	add	r30, r18
     726:	f1 1d       	adc	r31, r1
     728:	82 87       	std	Z+10, r24	; 0x0a
		u8_dataIndex++;
     72a:	2f 5f       	subi	r18, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     72c:	9f 5f       	subi	r25, 0xFF	; 255
     72e:	94 31       	cpi	r25, 0x14	; 20
     730:	a0 f3       	brcs	.-24     	; 0x71a <AppUSER_getCardData+0x2e>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
     732:	fa 01       	movw	r30, r20
     734:	e2 0f       	add	r30, r18
     736:	f1 1d       	adc	r31, r1
     738:	12 86       	std	Z+10, r1	; 0x0a
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
     73a:	90 e0       	ldi	r25, 0x00	; 0
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     73c:	85 e1       	ldi	r24, 0x15	; 21
     73e:	0a c0       	rjmp	.+20     	; 0x754 <AppUSER_getCardData+0x68>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     740:	fb 01       	movw	r30, r22
     742:	e8 0f       	add	r30, r24
     744:	f1 1d       	adc	r31, r1
     746:	20 81       	ld	r18, Z
     748:	fa 01       	movw	r30, r20
     74a:	e9 0f       	add	r30, r25
     74c:	f1 1d       	adc	r31, r1
     74e:	24 8b       	std	Z+20, r18	; 0x14
		u8_dataIndex++;
     750:	9f 5f       	subi	r25, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     752:	8f 5f       	subi	r24, 0xFF	; 255
     754:	89 31       	cpi	r24, 0x19	; 25
     756:	a0 f3       	brcs	.-24     	; 0x740 <AppUSER_getCardData+0x54>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_pinNum[u8_dataIndex] = '\0';
     758:	fa 01       	movw	r30, r20
     75a:	e9 0f       	add	r30, r25
     75c:	f1 1d       	adc	r31, r1
     75e:	14 8a       	std	Z+20, r1	; 0x14
	return APP_STATUS_ERROR_OK;
}
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	08 95       	ret

00000764 <AppUSER_insertCard>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to run the Card Inserting Process.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_insertCard(void)
{
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
     76e:	da 95       	dec	r29
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61
	gu8_USER_Mode_State = USER_BUSY;
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <gu8_USER_Mode_State>
	uint8_t u8_buttonVal = PIN_LOW;
     780:	19 82       	std	Y+1, r1	; 0x01
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     782:	fe 01       	movw	r30, r28
     784:	32 96       	adiw	r30, 0x02	; 2
     786:	8f ef       	ldi	r24, 0xFF	; 255
     788:	df 01       	movw	r26, r30
     78a:	1d 92       	st	X+, r1
     78c:	8a 95       	dec	r24
     78e:	e9 f7       	brne	.-6      	; 0x78a <AppUSER_insertCard+0x26>
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
     790:	6a ef       	ldi	r22, 0xFA	; 250
     792:	71 e0       	ldi	r23, 0x01	; 1
     794:	89 e0       	ldi	r24, 0x09	; 9
     796:	92 e0       	ldi	r25, 0x02	; 2
     798:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
	while(u8_buttonVal == PIN_LOW)
     79c:	0f c0       	rjmp	.+30     	; 0x7bc <AppUSER_insertCard+0x58>
	{
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <Button_updateState>
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	09 f0       	breq	.+2      	; 0x7aa <AppUSER_insertCard+0x46>
     7a8:	64 c0       	rjmp	.+200    	; 0x872 <__stack+0x13>
		return APP_STATUS_ERROR_NOK;
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
     7aa:	be 01       	movw	r22, r28
     7ac:	6f 5f       	subi	r22, 0xFF	; 255
     7ae:	7f 4f       	sbci	r23, 0xFF	; 255
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	0e 94 ca 07 	call	0xf94	; 0xf94 <Button_getState>
     7b6:	81 30       	cpi	r24, 0x01	; 1
     7b8:	09 f0       	breq	.+2      	; 0x7bc <AppUSER_insertCard+0x58>
     7ba:	5d c0       	rjmp	.+186    	; 0x876 <__stack+0x17>
	gu8_USER_Mode_State = USER_BUSY;
	uint8_t u8_buttonVal = PIN_LOW;
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
	while(u8_buttonVal == PIN_LOW)
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	88 23       	and	r24, r24
     7c0:	71 f3       	breq	.-36     	; 0x79e <AppUSER_insertCard+0x3a>
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	}
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	82 e1       	ldi	r24, 0x12	; 18
     7c6:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
	Delay_ms(1);
     7ca:	21 e0       	ldi	r18, 0x01	; 1
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     7de:	61 e0       	ldi	r22, 0x01	; 1
     7e0:	82 e1       	ldi	r24, 0x12	; 18
     7e2:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
	while (au8_inputString[0] != '#')
     7e6:	09 c0       	rjmp	.+18     	; 0x7fa <AppUSER_insertCard+0x96>
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
     7e8:	6c e1       	ldi	r22, 0x1C	; 28
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	ce 01       	movw	r24, r28
     7ee:	02 96       	adiw	r24, 0x02	; 2
     7f0:	0e 94 99 16 	call	0x2d32	; 0x2d32 <Spi_SlaveReceivePacket>
     7f4:	81 30       	cpi	r24, 0x01	; 1
     7f6:	09 f0       	breq	.+2      	; 0x7fa <AppUSER_insertCard+0x96>
     7f8:	40 c0       	rjmp	.+128    	; 0x87a <__stack+0x1b>
		return APP_STATUS_ERROR_NOK;
	}
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
	Delay_ms(1);
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
	while (au8_inputString[0] != '#')
     7fa:	8a 81       	ldd	r24, Y+2	; 0x02
     7fc:	83 32       	cpi	r24, 0x23	; 35
     7fe:	a1 f7       	brne	.-24     	; 0x7e8 <AppUSER_insertCard+0x84>
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	}
	
	if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
     800:	be 01       	movw	r22, r28
     802:	6e 5f       	subi	r22, 0xFE	; 254
     804:	7f 4f       	sbci	r23, 0xFF	; 255
     806:	80 e7       	ldi	r24, 0x70	; 112
     808:	94 e0       	ldi	r25, 0x04	; 4
     80a:	0e 94 76 03 	call	0x6ec	; 0x6ec <AppUSER_getCardData>
     80e:	18 2f       	mov	r17, r24
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	a9 f5       	brne	.+106    	; 0x87e <__stack+0x1f>
	return APP_STATUS_ERROR_NOK;
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	82 e1       	ldi	r24, 0x12	; 18
     818:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
	Delay_ms(1);
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	82 e1       	ldi	r24, 0x12	; 18
     834:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
	enuApp_Status_t processState = AppUSER_startProcess(&gstr_userCardData);
     838:	80 e7       	ldi	r24, 0x70	; 112
     83a:	94 e0       	ldi	r25, 0x04	; 4
     83c:	0e 94 19 03 	call	0x632	; 0x632 <AppUSER_startProcess>
	if(processState == APP_STATUS_PAN_NOT_FOUND)
     840:	8a 30       	cpi	r24, 0x0A	; 10
     842:	99 f4       	brne	.+38     	; 0x86a <__stack+0xb>
	{
		Delay_ms(1000);
     844:	28 ee       	ldi	r18, 0xE8	; 232
     846:	33 e0       	ldi	r19, 0x03	; 3
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
		gu8_USER_Mode_State = USER_IDLE;
     858:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <gu8_USER_Mode_State>
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     85c:	65 e8       	ldi	r22, 0x85	; 133
     85e:	71 e0       	ldi	r23, 0x01	; 1
     860:	84 e9       	ldi	r24, 0x94	; 148
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
     868:	0b c0       	rjmp	.+22     	; 0x880 <__stack+0x21>
	}else if (processState != APP_STATUS_ERROR_OK)
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	49 f0       	breq	.+18     	; 0x880 <__stack+0x21>
	return APP_STATUS_ERROR_NOK;
     86e:	10 e0       	ldi	r17, 0x00	; 0
     870:	07 c0       	rjmp	.+14     	; 0x880 <__stack+0x21>
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
	while(u8_buttonVal == PIN_LOW)
	{
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     872:	10 e0       	ldi	r17, 0x00	; 0
     874:	05 c0       	rjmp	.+10     	; 0x880 <__stack+0x21>
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     876:	10 e0       	ldi	r17, 0x00	; 0
     878:	03 c0       	rjmp	.+6      	; 0x880 <__stack+0x21>
	Delay_ms(1);
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
	while (au8_inputString[0] != '#')
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     87a:	10 e0       	ldi	r17, 0x00	; 0
     87c:	01 c0       	rjmp	.+2      	; 0x880 <__stack+0x21>
	}
	
	if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     87e:	10 e0       	ldi	r17, 0x00	; 0
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
	}else if (processState != APP_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     880:	81 2f       	mov	r24, r17
     882:	d3 95       	inc	r29
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	de bf       	out	0x3e, r29	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	cd bf       	out	0x3d, r28	; 61
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	08 95       	ret

00000896 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
     896:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enuCurrentAppStatus>
     89a:	84 30       	cpi	r24, 0x04	; 4
     89c:	09 f4       	brne	.+2      	; 0x8a0 <App_init+0xa>
     89e:	d2 c0       	rjmp	.+420    	; 0xa44 <App_init+0x1ae>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
     8a0:	0e 94 5e 08 	call	0x10bc	; 0x10bc <Eeprom_24_init>
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	09 f0       	breq	.+2      	; 0x8aa <App_init+0x14>
     8a8:	aa c0       	rjmp	.+340    	; 0x9fe <App_init+0x168>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
     8aa:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <Terminal_init>
     8ae:	81 30       	cpi	r24, 0x01	; 1
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <App_init+0x1e>
     8b2:	a7 c0       	rjmp	.+334    	; 0xa02 <App_init+0x16c>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
     8b4:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <Spi_init>
     8b8:	81 30       	cpi	r24, 0x01	; 1
     8ba:	09 f0       	breq	.+2      	; 0x8be <App_init+0x28>
     8bc:	a4 c0       	rjmp	.+328    	; 0xa06 <App_init+0x170>
		return APP_STATUS_ERROR_NOK;
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
     8be:	0e 94 ef 0a 	call	0x15de	; 0x15de <Keypad_init>
     8c2:	81 30       	cpi	r24, 0x01	; 1
     8c4:	09 f0       	breq	.+2      	; 0x8c8 <App_init+0x32>
     8c6:	a1 c0       	rjmp	.+322    	; 0xa0a <App_init+0x174>
		return APP_STATUS_ERROR_NOK;
	if(LCD_STATUS_ERROR_OK != Lcd_init())
     8c8:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <Lcd_init>
     8cc:	81 30       	cpi	r24, 0x01	; 1
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <App_init+0x3c>
     8d0:	9e c0       	rjmp	.+316    	; 0xa0e <App_init+0x178>
		return APP_STATUS_ERROR_NOK;
	if(LM35_STATUS_ERROR_OK != LM35_init())
     8d2:	0e 94 9c 0c 	call	0x1938	; 0x1938 <LM35_init>
     8d6:	81 30       	cpi	r24, 0x01	; 1
     8d8:	09 f0       	breq	.+2      	; 0x8dc <App_init+0x46>
     8da:	9b c0       	rjmp	.+310    	; 0xa12 <App_init+0x17c>
		return APP_STATUS_ERROR_NOK;
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
     8dc:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <Motor_init>
     8e0:	81 30       	cpi	r24, 0x01	; 1
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <App_init+0x50>
     8e4:	98 c0       	rjmp	.+304    	; 0xa16 <App_init+0x180>
		return APP_STATUS_ERROR_NOK;
	if(BTTN_STATUS_ERROR_OK != Button_init())
     8e6:	0e 94 b7 07 	call	0xf6e	; 0xf6e <Button_init>
     8ea:	81 30       	cpi	r24, 0x01	; 1
     8ec:	09 f0       	breq	.+2      	; 0x8f0 <App_init+0x5a>
     8ee:	95 c0       	rjmp	.+298    	; 0xa1a <App_init+0x184>
		return APP_STATUS_ERROR_NOK;
	/**************************/
	/* Only for Testing */
	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
     8f0:	6f ef       	ldi	r22, 0xFF	; 255
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 6d 08 	call	0x10da	; 0x10da <Eeprom_24_writeByte>
     8fa:	81 30       	cpi	r24, 0x01	; 1
     8fc:	09 f0       	breq	.+2      	; 0x900 <App_init+0x6a>
     8fe:	8f c0       	rjmp	.+286    	; 0xa1e <App_init+0x188>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     900:	2a e0       	ldi	r18, 0x0A	; 10
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
     914:	83 e2       	ldi	r24, 0x23	; 35
     916:	94 e0       	ldi	r25, 0x04	; 4
     918:	0e 94 3c 0c 	call	0x1878	; 0x1878 <Lcd_printString>
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	09 f0       	breq	.+2      	; 0x922 <App_init+0x8c>
     920:	80 c0       	rjmp	.+256    	; 0xa22 <App_init+0x18c>
		return APP_STATUS_ERROR_NOK;
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
     922:	85 e1       	ldi	r24, 0x15	; 21
     924:	94 e0       	ldi	r25, 0x04	; 4
     926:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     92a:	81 30       	cpi	r24, 0x01	; 1
     92c:	09 f0       	breq	.+2      	; 0x930 <App_init+0x9a>
     92e:	7b c0       	rjmp	.+246    	; 0xa26 <App_init+0x190>
		return APP_STATUS_ERROR_NOK;
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
     930:	6d e5       	ldi	r22, 0x5D	; 93
     932:	74 e0       	ldi	r23, 0x04	; 4
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 a9 08 	call	0x1152	; 0x1152 <Eeprom_24_readByte>
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	09 f0       	breq	.+2      	; 0x942 <App_init+0xac>
     940:	74 c0       	rjmp	.+232    	; 0xa2a <App_init+0x194>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     942:	2a e0       	ldi	r18, 0x0A	; 10
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
	
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
     956:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <gu8_initData>
     95a:	8a 3a       	cpi	r24, 0xAA	; 170
     95c:	f9 f0       	breq	.+62     	; 0x99c <App_init+0x106>
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
     95e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
     962:	8d e2       	ldi	r24, 0x2D	; 45
     964:	94 e0       	ldi	r25, 0x04	; 4
     966:	0e 94 ed 16 	call	0x2dda	; 0x2dda <stringLength>
	
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
     96a:	48 2f       	mov	r20, r24
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	6d e2       	ldi	r22, 0x2D	; 45
     970:	74 e0       	ldi	r23, 0x04	; 4
     972:	8b e0       	ldi	r24, 0x0B	; 11
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <Eeprom_24_writePacket>
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	09 f0       	breq	.+2      	; 0x980 <App_init+0xea>
     97e:	57 c0       	rjmp	.+174    	; 0xa2e <App_init+0x198>
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		/* Lock the ATM For the User */
		Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
     980:	6a e1       	ldi	r22, 0x1A	; 26
     982:	72 e0       	ldi	r23, 0x02	; 2
     984:	8b e2       	ldi	r24, 0x2B	; 43
     986:	92 e0       	ldi	r25, 0x02	; 2
     988:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
		
		if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     98c:	8c e3       	ldi	r24, 0x3C	; 60
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	09 f0       	breq	.+2      	; 0x99a <App_init+0x104>
     998:	4c c0       	rjmp	.+152    	; 0xa32 <App_init+0x19c>
     99a:	2c c0       	rjmp	.+88     	; 0x9f4 <App_init+0x15e>
			return APP_STATUS_ERROR_NOK;
	}else
	{ /* Case it was previously registered == Contains data in the DB */
		gu8_ATMMode = ATM_MODE_USER;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
     9a2:	48 e0       	ldi	r20, 0x08	; 8
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	6f e4       	ldi	r22, 0x4F	; 79
     9a8:	74 e0       	ldi	r23, 0x04	; 4
     9aa:	83 e0       	ldi	r24, 0x03	; 3
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 35 0a 	call	0x146a	; 0x146a <Eeprom_24_readPacket>
     9b2:	81 30       	cpi	r24, 0x01	; 1
     9b4:	09 f0       	breq	.+2      	; 0x9b8 <App_init+0x122>
     9b6:	3f c0       	rjmp	.+126    	; 0xa36 <App_init+0x1a0>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     9b8:	6c e5       	ldi	r22, 0x5C	; 92
     9ba:	74 e0       	ldi	r23, 0x04	; 4
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 a9 08 	call	0x1152	; 0x1152 <Eeprom_24_readByte>
     9c4:	81 30       	cpi	r24, 0x01	; 1
     9c6:	c9 f5       	brne	.+114    	; 0xa3a <App_init+0x1a4>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
     9c8:	45 e0       	ldi	r20, 0x05	; 5
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	67 e5       	ldi	r22, 0x57	; 87
     9ce:	74 e0       	ldi	r23, 0x04	; 4
     9d0:	8b e0       	ldi	r24, 0x0B	; 11
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	0e 94 35 0a 	call	0x146a	; 0x146a <Eeprom_24_readPacket>
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	89 f5       	brne	.+98     	; 0xa3e <App_init+0x1a8>
			return APP_STATUS_ERROR_NOK;
		
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     9dc:	65 e8       	ldi	r22, 0x85	; 133
     9de:	71 e0       	ldi	r23, 0x01	; 1
     9e0:	84 e9       	ldi	r24, 0x94	; 148
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
			
		if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     9e8:	8e e4       	ldi	r24, 0x4E	; 78
     9ea:	92 e0       	ldi	r25, 0x02	; 2
     9ec:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	39 f5       	brne	.+78     	; 0xa42 <App_init+0x1ac>
			return APP_STATUS_ERROR_NOK;
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     9f4:	84 e0       	ldi	r24, 0x04	; 4
     9f6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enuCurrentAppStatus>
	return APP_STATUS_ERROR_OK;
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	08 95       	ret
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	08 95       	ret
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	08 95       	ret
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
		return APP_STATUS_ERROR_NOK;
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	08 95       	ret
	if(LCD_STATUS_ERROR_OK != Lcd_init())
		return APP_STATUS_ERROR_NOK;
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	08 95       	ret
	if(LM35_STATUS_ERROR_OK != LM35_init())
		return APP_STATUS_ERROR_NOK;
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	08 95       	ret
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
		return APP_STATUS_ERROR_NOK;
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	08 95       	ret
	if(BTTN_STATUS_ERROR_OK != Button_init())
		return APP_STATUS_ERROR_NOK;
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	08 95       	ret
	/**************************/
	/* Only for Testing */
	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	08 95       	ret
	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	08 95       	ret
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	08 95       	ret
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	08 95       	ret
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	08 95       	ret
		/* Lock the ATM For the User */
		Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
		
		if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	08 95       	ret
	}else
	{ /* Case it was previously registered == Contains data in the DB */
		gu8_ATMMode = ATM_MODE_USER;
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	08 95       	ret
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	08 95       	ret
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	08 95       	ret
		
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
			
		if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a42:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     a44:	08 95       	ret

00000a46 <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	cf 5f       	subi	r28, 0xFF	; 255
     a54:	d1 09       	sbc	r29, r1
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     a62:	ce 01       	movw	r24, r28
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	2f ef       	ldi	r18, 0xFF	; 255
     a68:	fc 01       	movw	r30, r24
     a6a:	11 92       	st	Z+, r1
     a6c:	2a 95       	dec	r18
     a6e:	e9 f7       	brne	.-6      	; 0xa6a <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
     a70:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
     a74:	85 30       	cpi	r24, 0x05	; 5
     a76:	39 f4       	brne	.+14     	; 0xa86 <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
     a78:	b8 01       	movw	r22, r16
     a7a:	ce 01       	movw	r24, r28
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	0e 94 38 17 	call	0x2e70	; 0x2e70 <stringCopy>
		return APP_STATUS_ERROR_OK;
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     a86:	81 30       	cpi	r24, 0x01	; 1
     a88:	11 f0       	breq	.+4      	; 0xa8e <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	01 c0       	rjmp	.+2      	; 0xa90 <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
     a8e:	86 e0       	ldi	r24, 0x06	; 6
}
     a90:	c1 50       	subi	r28, 0x01	; 1
     a92:	df 4f       	sbci	r29, 0xFF	; 255
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	f8 94       	cli
     a98:	de bf       	out	0x3e, r29	; 62
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	cd bf       	out	0x3d, r28	; 61
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	08 95       	ret

00000aa8 <AppADMIN_getInput>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the ADMIN Input Choice.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getInput(uint8_t* pu8_data)
{
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Your Input: ") != TERMINAL_STATUS_ERROR_OK)
     aae:	89 e5       	ldi	r24, 0x59	; 89
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	c1 f4       	brne	.+48     	; 0xaea <AppADMIN_getInput+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     aba:	ce 01       	movw	r24, r28
     abc:	0e 94 23 05 	call	0xa46	; 0xa46 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     ac0:	81 30       	cpi	r24, 0x01	; 1
     ac2:	29 f0       	breq	.+10     	; 0xace <AppADMIN_getInput+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     ac4:	11 f0       	breq	.+4      	; 0xaca <AppADMIN_getInput+0x22>
     ac6:	86 30       	cpi	r24, 0x06	; 6
     ac8:	91 f4       	brne	.+36     	; 0xaee <AppADMIN_getInput+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     aca:	86 30       	cpi	r24, 0x06	; 6
     acc:	b1 f3       	breq	.-20     	; 0xaba <AppADMIN_getInput+0x12>
		
		if (pu8_data[1] == '\0')
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	79 f0       	breq	.+30     	; 0xaf2 <AppADMIN_getInput+0x4a>
		break;
		EmptyString(pu8_data);
     ad4:	ce 01       	movw	r24, r28
     ad6:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
     ada:	86 e6       	ldi	r24, 0x66	; 102
     adc:	92 e0       	ldi	r25, 0x02	; 2
     ade:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     ae2:	81 30       	cpi	r24, 0x01	; 1
     ae4:	21 f3       	breq	.-56     	; 0xaae <AppADMIN_getInput+0x6>
		return APP_STATUS_ERROR_NOK;
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	05 c0       	rjmp	.+10     	; 0xaf4 <AppADMIN_getInput+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Your Input: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	03 c0       	rjmp	.+6      	; 0xaf4 <AppADMIN_getInput+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <AppADMIN_getInput+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     af2:	81 e0       	ldi	r24, 0x01	; 1
}
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	08 95       	ret

00000afa <AppADMIN_getnewMaxAmount>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getnewMaxAmount(uint8_t* pu8_data)
{
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Max Amount: ") != TERMINAL_STATUS_ERROR_OK)
     b00:	8f e8       	ldi	r24, 0x8F	; 143
     b02:	92 e0       	ldi	r25, 0x02	; 2
     b04:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	d9 f4       	brne	.+54     	; 0xb42 <AppADMIN_getnewMaxAmount+0x48>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     b0c:	ce 01       	movw	r24, r28
     b0e:	0e 94 23 05 	call	0xa46	; 0xa46 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     b12:	81 30       	cpi	r24, 0x01	; 1
     b14:	29 f0       	breq	.+10     	; 0xb20 <AppADMIN_getnewMaxAmount+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     b16:	11 f0       	breq	.+4      	; 0xb1c <AppADMIN_getnewMaxAmount+0x22>
     b18:	86 30       	cpi	r24, 0x06	; 6
     b1a:	a9 f4       	brne	.+42     	; 0xb46 <AppADMIN_getnewMaxAmount+0x4c>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     b1c:	86 30       	cpi	r24, 0x06	; 6
     b1e:	b1 f3       	breq	.-20     	; 0xb0c <AppADMIN_getnewMaxAmount+0x12>
		
		if ((pu8_data[7] == '\0') && (pu8_data[4] == '.'))
     b20:	8f 81       	ldd	r24, Y+7	; 0x07
     b22:	81 11       	cpse	r24, r1
     b24:	03 c0       	rjmp	.+6      	; 0xb2c <AppADMIN_getnewMaxAmount+0x32>
     b26:	8c 81       	ldd	r24, Y+4	; 0x04
     b28:	8e 32       	cpi	r24, 0x2E	; 46
     b2a:	79 f0       	breq	.+30     	; 0xb4a <AppADMIN_getnewMaxAmount+0x50>
		break;
		EmptyString(pu8_data);
     b2c:	ce 01       	movw	r24, r28
     b2e:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
     b32:	8c e9       	ldi	r24, 0x9C	; 156
     b34:	92 e0       	ldi	r25, 0x02	; 2
     b36:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	09 f3       	breq	.-62     	; 0xb00 <AppADMIN_getnewMaxAmount+0x6>
		return APP_STATUS_ERROR_NOK;
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	05 c0       	rjmp	.+10     	; 0xb4c <AppADMIN_getnewMaxAmount+0x52>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Max Amount: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	03 c0       	rjmp	.+6      	; 0xb4c <AppADMIN_getnewMaxAmount+0x52>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <AppADMIN_getnewMaxAmount+0x52>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
}
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	08 95       	ret

00000b52 <AppADMIN_getCustomerPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerPAN(uint8_t* pu8_data)
{
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"PAN: ") != TERMINAL_STATUS_ERROR_OK)
     b58:	8c ec       	ldi	r24, 0xCC	; 204
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	c1 f4       	brne	.+48     	; 0xb94 <AppADMIN_getCustomerPAN+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     b64:	ce 01       	movw	r24, r28
     b66:	0e 94 23 05 	call	0xa46	; 0xa46 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	29 f0       	breq	.+10     	; 0xb78 <AppADMIN_getCustomerPAN+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     b6e:	11 f0       	breq	.+4      	; 0xb74 <AppADMIN_getCustomerPAN+0x22>
     b70:	86 30       	cpi	r24, 0x06	; 6
     b72:	91 f4       	brne	.+36     	; 0xb98 <AppADMIN_getCustomerPAN+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     b74:	86 30       	cpi	r24, 0x06	; 6
     b76:	b1 f3       	breq	.-20     	; 0xb64 <AppADMIN_getCustomerPAN+0x12>
		
		if (pu8_data[9] == '\0')
     b78:	89 85       	ldd	r24, Y+9	; 0x09
     b7a:	88 23       	and	r24, r24
     b7c:	79 f0       	breq	.+30     	; 0xb9c <AppADMIN_getCustomerPAN+0x4a>
		break;
		EmptyString(pu8_data);
     b7e:	ce 01       	movw	r24, r28
     b80:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
     b84:	82 ed       	ldi	r24, 0xD2	; 210
     b86:	92 e0       	ldi	r25, 0x02	; 2
     b88:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     b8c:	81 30       	cpi	r24, 0x01	; 1
     b8e:	21 f3       	breq	.-56     	; 0xb58 <AppADMIN_getCustomerPAN+0x6>
		return APP_STATUS_ERROR_NOK;
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <AppADMIN_getCustomerPAN+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"PAN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	03 c0       	rjmp	.+6      	; 0xb9e <AppADMIN_getCustomerPAN+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <AppADMIN_getCustomerPAN+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
}
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	08 95       	ret

00000ba4 <AppADMIN_getCustomerBalance>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Balance by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the balance of the customer.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerBalance(uint8_t* pu8_data)
{
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Balance: ") != TERMINAL_STATUS_ERROR_OK)
     baa:	82 ef       	ldi	r24, 0xF2	; 242
     bac:	92 e0       	ldi	r25, 0x02	; 2
     bae:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     bb2:	81 30       	cpi	r24, 0x01	; 1
     bb4:	c1 f4       	brne	.+48     	; 0xbe6 <AppADMIN_getCustomerBalance+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     bb6:	ce 01       	movw	r24, r28
     bb8:	0e 94 23 05 	call	0xa46	; 0xa46 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	29 f0       	breq	.+10     	; 0xbca <AppADMIN_getCustomerBalance+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     bc0:	11 f0       	breq	.+4      	; 0xbc6 <AppADMIN_getCustomerBalance+0x22>
     bc2:	86 30       	cpi	r24, 0x06	; 6
     bc4:	91 f4       	brne	.+36     	; 0xbea <AppADMIN_getCustomerBalance+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     bc6:	86 30       	cpi	r24, 0x06	; 6
     bc8:	b1 f3       	breq	.-20     	; 0xbb6 <AppADMIN_getCustomerBalance+0x12>
		
		if (pu8_data[7] == '\0')
     bca:	8f 81       	ldd	r24, Y+7	; 0x07
     bcc:	88 23       	and	r24, r24
     bce:	79 f0       	breq	.+30     	; 0xbee <AppADMIN_getCustomerBalance+0x4a>
		break;
		EmptyString(pu8_data);
     bd0:	ce 01       	movw	r24, r28
     bd2:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters\r") != TERMINAL_STATUS_ERROR_OK)
     bd6:	8c ef       	ldi	r24, 0xFC	; 252
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	21 f3       	breq	.-56     	; 0xbaa <AppADMIN_getCustomerBalance+0x6>
		return APP_STATUS_ERROR_NOK;
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	05 c0       	rjmp	.+10     	; 0xbf0 <AppADMIN_getCustomerBalance+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"Balance: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	03 c0       	rjmp	.+6      	; 0xbf0 <AppADMIN_getCustomerBalance+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <AppADMIN_getCustomerBalance+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid Balance, Only 7 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     bee:	81 e0       	ldi	r24, 0x01	; 1
}
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	08 95       	ret

00000bf6 <AppADMIN_processNewCustomer>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to process adding a new customer in the data base.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_processNewCustomer(void)
{
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	62 97       	sbiw	r28, 0x12	; 18
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_tempPAN[10]={0};
     c0c:	ce 01       	movw	r24, r28
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	2a e0       	ldi	r18, 0x0A	; 10
     c12:	dc 01       	movw	r26, r24
     c14:	1d 92       	st	X+, r1
     c16:	2a 95       	dec	r18
     c18:	e9 f7       	brne	.-6      	; 0xc14 <AppADMIN_processNewCustomer+0x1e>
	uint8_t au8_tempBalance[8]={0};
     c1a:	fe 01       	movw	r30, r28
     c1c:	3b 96       	adiw	r30, 0x0b	; 11
     c1e:	28 e0       	ldi	r18, 0x08	; 8
     c20:	df 01       	movw	r26, r30
     c22:	1d 92       	st	X+, r1
     c24:	2a 95       	dec	r18
     c26:	e9 f7       	brne	.-6      	; 0xc22 <AppADMIN_processNewCustomer+0x2c>
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     c28:	0e 94 a9 05 	call	0xb52	; 0xb52 <AppADMIN_getCustomerPAN>
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	39 f5       	brne	.+78     	; 0xc7e <AppADMIN_processNewCustomer+0x88>
	return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
     c30:	6e e5       	ldi	r22, 0x5E	; 94
     c32:	74 e0       	ldi	r23, 0x04	; 4
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	0e 94 38 17 	call	0x2e70	; 0x2e70 <stringCopy>
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
     c3c:	ce 01       	movw	r24, r28
     c3e:	0b 96       	adiw	r24, 0x0b	; 11
     c40:	0e 94 d2 05 	call	0xba4	; 0xba4 <AppADMIN_getCustomerBalance>
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	e9 f4       	brne	.+58     	; 0xc82 <AppADMIN_processNewCustomer+0x8c>
	return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
     c48:	68 e6       	ldi	r22, 0x68	; 104
     c4a:	74 e0       	ldi	r23, 0x04	; 4
     c4c:	ce 01       	movw	r24, r28
     c4e:	0b 96       	adiw	r24, 0x0b	; 11
     c50:	0e 94 38 17 	call	0x2e70	; 0x2e70 <stringCopy>
	
	if(AppADMIN_saveNewCustomerData() != APP_STATUS_ERROR_OK)
     c54:	0e 94 50 00 	call	0xa0	; 0xa0 <AppADMIN_saveNewCustomerData>
     c58:	18 2f       	mov	r17, r24
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	a1 f4       	brne	.+40     	; 0xc86 <AppADMIN_processNewCustomer+0x90>
	return APP_STATUS_ERROR_NOK;
	if(gu8_registeredAccNum == 1)
     c5e:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <gu8_registeredAccNum>
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	89 f4       	brne	.+34     	; 0xc88 <AppADMIN_processNewCustomer+0x92>
	{
		gu8_initData = ATM_DB_FLAG_SET_VAL;
     c66:	8a ea       	ldi	r24, 0xAA	; 170
     c68:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <gu8_initData>
		if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
     c6c:	6a ea       	ldi	r22, 0xAA	; 170
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 6d 08 	call	0x10da	; 0x10da <Eeprom_24_writeByte>
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	39 f0       	breq	.+14     	; 0xc88 <AppADMIN_processNewCustomer+0x92>
		return APP_STATUS_ERROR_NOK;
     c7a:	10 e0       	ldi	r17, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <AppADMIN_processNewCustomer+0x92>
{
	uint8_t au8_tempPAN[10]={0};
	uint8_t au8_tempBalance[8]={0};
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     c7e:	10 e0       	ldi	r17, 0x00	; 0
     c80:	03 c0       	rjmp	.+6      	; 0xc88 <AppADMIN_processNewCustomer+0x92>
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     c82:	10 e0       	ldi	r17, 0x00	; 0
     c84:	01 c0       	rjmp	.+2      	; 0xc88 <AppADMIN_processNewCustomer+0x92>
	stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
	
	if(AppADMIN_saveNewCustomerData() != APP_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     c86:	10 e0       	ldi	r17, 0x00	; 0
		gu8_initData = ATM_DB_FLAG_SET_VAL;
		if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	}
	return APP_STATUS_ERROR_OK;
}
     c88:	81 2f       	mov	r24, r17
     c8a:	62 96       	adiw	r28, 0x12	; 18
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <AppADMIN_getAtmPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input ATM PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the atm pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getAtmPIN(uint8_t* pu8_data)
{
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	
	Terminal_enablePasswordMode();
     ca4:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <Terminal_enablePasswordMode>
	do
	{
		if(Terminal_Out((uint8_t*)"ATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
     ca8:	80 e2       	ldi	r24, 0x20	; 32
     caa:	93 e0       	ldi	r25, 0x03	; 3
     cac:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	69 f5       	brne	.+90     	; 0xd0e <AppADMIN_getAtmPIN+0x70>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     cb4:	ce 01       	movw	r24, r28
     cb6:	0e 94 23 05 	call	0xa46	; 0xa46 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	29 f0       	breq	.+10     	; 0xcc8 <AppADMIN_getAtmPIN+0x2a>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     cbe:	11 f0       	breq	.+4      	; 0xcc4 <AppADMIN_getAtmPIN+0x26>
     cc0:	86 30       	cpi	r24, 0x06	; 6
     cc2:	39 f5       	brne	.+78     	; 0xd12 <AppADMIN_getAtmPIN+0x74>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     cc4:	86 30       	cpi	r24, 0x06	; 6
     cc6:	b1 f3       	breq	.-20     	; 0xcb4 <AppADMIN_getAtmPIN+0x16>
		
		if(stringCompare((uint8_t*)ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
     cc8:	be 01       	movw	r22, r28
     cca:	8d e2       	ldi	r24, 0x2D	; 45
     ccc:	94 e0       	ldi	r25, 0x04	; 4
     cce:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <stringCompare>
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	39 f0       	breq	.+14     	; 0xce4 <AppADMIN_getAtmPIN+0x46>
		{
			if(Terminal_Out((uint8_t*)"Incorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
     cd6:	8a e2       	ldi	r24, 0x2A	; 42
     cd8:	93 e0       	ldi	r25, 0x03	; 3
     cda:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	41 f0       	breq	.+16     	; 0xcf2 <AppADMIN_getAtmPIN+0x54>
     ce2:	19 c0       	rjmp	.+50     	; 0xd16 <AppADMIN_getAtmPIN+0x78>
			return APP_STATUS_ERROR_NOK;
		}else
		{
			if(Terminal_Out((uint8_t*)"Loading...\r") != TERMINAL_STATUS_ERROR_OK)
     ce4:	89 e3       	ldi	r24, 0x39	; 57
     ce6:	93 e0       	ldi	r25, 0x03	; 3
     ce8:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	a9 f4       	brne	.+42     	; 0xd1a <AppADMIN_getAtmPIN+0x7c>
     cf0:	0a c0       	rjmp	.+20     	; 0xd06 <AppADMIN_getAtmPIN+0x68>
			return APP_STATUS_ERROR_NOK;
			break;
		}
		EmptyString(pu8_data);
     cf2:	ce 01       	movw	r24, r28
     cf4:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <EmptyString>
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
     cf8:	85 e4       	ldi	r24, 0x45	; 69
     cfa:	93 e0       	ldi	r25, 0x03	; 3
     cfc:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	91 f2       	breq	.-92     	; 0xca8 <AppADMIN_getAtmPIN+0xa>
     d04:	0c c0       	rjmp	.+24     	; 0xd1e <AppADMIN_getAtmPIN+0x80>
		return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
     d06:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <Terminal_disablePasswordMode>
	return APP_STATUS_ERROR_OK;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	09 c0       	rjmp	.+18     	; 0xd20 <AppADMIN_getAtmPIN+0x82>
	
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"ATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	07 c0       	rjmp	.+14     	; 0xd20 <AppADMIN_getAtmPIN+0x82>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	05 c0       	rjmp	.+10     	; 0xd20 <AppADMIN_getAtmPIN+0x82>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringCompare((uint8_t*)ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
		{
			if(Terminal_Out((uint8_t*)"Incorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	03 c0       	rjmp	.+6      	; 0xd20 <AppADMIN_getAtmPIN+0x82>
		}else
		{
			if(Terminal_Out((uint8_t*)"Loading...\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	01 c0       	rjmp	.+2      	; 0xd20 <AppADMIN_getAtmPIN+0x82>
			break;
		}
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"Invalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     d1e:	80 e0       	ldi	r24, 0x00	; 0
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_ERROR_OK;
}
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	69 97       	sbiw	r28, 0x19	; 25
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
     d3a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enuCurrentAppStatus>
     d3e:	84 30       	cpi	r24, 0x04	; 4
     d40:	09 f0       	breq	.+2      	; 0xd44 <App_update+0x1e>
     d42:	fe c0       	rjmp	.+508    	; 0xf40 <App_update+0x21a>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
     d44:	fe 01       	movw	r30, r28
     d46:	31 96       	adiw	r30, 0x01	; 1
     d48:	8a e0       	ldi	r24, 0x0A	; 10
     d4a:	df 01       	movw	r26, r30
     d4c:	1d 92       	st	X+, r1
     d4e:	8a 95       	dec	r24
     d50:	e9 f7       	brne	.-6      	; 0xd4c <App_update+0x26>
	static uint8_t u8_passFlag = 0;
	if(gu8_ATMMode == ATM_MODE_ADMIN)
     d52:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     d56:	81 11       	cpse	r24, r1
     d58:	7b c0       	rjmp	.+246    	; 0xe50 <App_update+0x12a>
	{ /**************** PROGRAMMING MODE ****************/
			uint8_t au8_Input[2]={0};
     d5a:	19 8e       	std	Y+25, r1	; 0x19
     d5c:	18 8e       	std	Y+24, r1	; 0x18
			uint8_t au8_tempPinNum[5]={0};
     d5e:	72 96       	adiw	r30, 0x12	; 18
     d60:	85 e0       	ldi	r24, 0x05	; 5
     d62:	df 01       	movw	r26, r30
     d64:	1d 92       	st	X+, r1
     d66:	8a 95       	dec	r24
     d68:	e9 f7       	brne	.-6      	; 0xd64 <App_update+0x3e>
			uint8_t au8_tempMaxAmount[8]={0};
     d6a:	38 97       	sbiw	r30, 0x08	; 8
     d6c:	88 e0       	ldi	r24, 0x08	; 8
     d6e:	df 01       	movw	r26, r30
     d70:	1d 92       	st	X+, r1
     d72:	8a 95       	dec	r24
     d74:	e9 f7       	brne	.-6      	; 0xd70 <App_update+0x4a>
			
			if(u8_passFlag == 0)
     d76:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <__data_end>
     d7a:	81 11       	cpse	r24, r1
     d7c:	09 c0       	rjmp	.+18     	; 0xd90 <App_update+0x6a>
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
     d7e:	ce 01       	movw	r24, r28
     d80:	43 96       	adiw	r24, 0x13	; 19
     d82:	0e 94 4f 06 	call	0xc9e	; 0xc9e <AppADMIN_getAtmPIN>
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	09 f0       	breq	.+2      	; 0xd8c <App_update+0x66>
     d8a:	58 c0       	rjmp	.+176    	; 0xe3c <App_update+0x116>
					return APP_STATUS_ERROR_NOK;
				u8_passFlag = 1;
     d8c:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <__data_end>
			}
			
			if(Terminal_Out((uint8_t*)"1.Add New Customer\r2.Update Max Amount\r3.Exit\r") != TERMINAL_STATUS_ERROR_OK)
     d90:	85 e6       	ldi	r24, 0x65	; 101
     d92:	93 e0       	ldi	r25, 0x03	; 3
     d94:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	09 f0       	breq	.+2      	; 0xd9e <App_update+0x78>
     d9c:	51 c0       	rjmp	.+162    	; 0xe40 <App_update+0x11a>
				return APP_STATUS_ERROR_NOK;
				
			AppADMIN_getInput(au8_Input);
     d9e:	ce 01       	movw	r24, r28
     da0:	48 96       	adiw	r24, 0x18	; 24
     da2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <AppADMIN_getInput>
			if(au8_Input[0] == '1')//--------- New Customer OPTION -----------//
     da6:	88 8d       	ldd	r24, Y+24	; 0x18
     da8:	81 33       	cpi	r24, 0x31	; 49
     daa:	39 f4       	brne	.+14     	; 0xdba <App_update+0x94>
			{
				AppADMIN_processNewCustomer();
     dac:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <AppADMIN_processNewCustomer>
				EmptyString(au8_Input);
     db0:	ce 01       	movw	r24, r28
     db2:	48 96       	adiw	r24, 0x18	; 24
     db4:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <EmptyString>
     db8:	3f c0       	rjmp	.+126    	; 0xe38 <App_update+0x112>

			}else if(au8_Input[0] == '2')//--------- Max Amount OPTION -----------//
     dba:	82 33       	cpi	r24, 0x32	; 50
     dbc:	d1 f4       	brne	.+52     	; 0xdf2 <App_update+0xcc>
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
     dbe:	ce 01       	movw	r24, r28
     dc0:	0b 96       	adiw	r24, 0x0b	; 11
     dc2:	0e 94 7d 05 	call	0xafa	; 0xafa <AppADMIN_getnewMaxAmount>
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
     dc6:	ce 01       	movw	r24, r28
     dc8:	0b 96       	adiw	r24, 0x0b	; 11
     dca:	0e 94 ed 16 	call	0x2dda	; 0x2dda <stringLength>
     dce:	48 2f       	mov	r20, r24
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	be 01       	movw	r22, r28
     dd4:	65 5f       	subi	r22, 0xF5	; 245
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	83 e0       	ldi	r24, 0x03	; 3
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <Eeprom_24_writePacket>
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	81 f5       	brne	.+96     	; 0xe44 <App_update+0x11e>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempMaxAmount, gau8_maxAmount);
     de4:	6f e4       	ldi	r22, 0x4F	; 79
     de6:	74 e0       	ldi	r23, 0x04	; 4
     de8:	ce 01       	movw	r24, r28
     dea:	0b 96       	adiw	r24, 0x0b	; 11
     dec:	0e 94 38 17 	call	0x2e70	; 0x2e70 <stringCopy>
     df0:	23 c0       	rjmp	.+70     	; 0xe38 <App_update+0x112>
					
			}else if(au8_Input[0] == '3')//--------- EXIT OPTION -----------//
     df2:	83 33       	cpi	r24, 0x33	; 51
     df4:	09 f5       	brne	.+66     	; 0xe38 <App_update+0x112>
			{
				if(gu8_initData == ATM_DB_FLAG_SET_VAL)
     df6:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <gu8_initData>
     dfa:	8a 3a       	cpi	r24, 0xAA	; 170
     dfc:	a9 f4       	brne	.+42     	; 0xe28 <App_update+0x102>
				{
					u8_passFlag = 0;
     dfe:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <__data_end>
					gu8_ATMMode = ATM_MODE_USER;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					Lcd_clear();
     e08:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Lcd_clear>
					if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     e0c:	8e e4       	ldi	r24, 0x4E	; 78
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	c1 f4       	brne	.+48     	; 0xe48 <App_update+0x122>
						return APP_STATUS_ERROR_NOK;
					
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     e18:	65 e8       	ldi	r22, 0x85	; 133
     e1a:	71 e0       	ldi	r23, 0x01	; 1
     e1c:	84 e9       	ldi	r24, 0x94	; 148
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
					
					return APP_STATUS_ERROR_OK;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	8d c0       	rjmp	.+282    	; 0xf42 <App_update+0x21c>
				}else
				{
					if(Terminal_Out((uint8_t*)"Data Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
     e28:	84 e9       	ldi	r24, 0x94	; 148
     e2a:	93 e0       	ldi	r25, 0x03	; 3
     e2c:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	61 f0       	breq	.+24     	; 0xe4c <App_update+0x126>
						return APP_STATUS_ERROR_NOK;
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	85 c0       	rjmp	.+266    	; 0xf42 <App_update+0x21c>
				}
			}
	/****************************************************************/
	}
	
	return APP_STATUS_ERROR_OK;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	83 c0       	rjmp	.+262    	; 0xf42 <App_update+0x21c>
			
			if(u8_passFlag == 0)
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	81 c0       	rjmp	.+258    	; 0xf42 <App_update+0x21c>
				u8_passFlag = 1;
			}
			
			if(Terminal_Out((uint8_t*)"1.Add New Customer\r2.Update Max Amount\r3.Exit\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	7f c0       	rjmp	.+254    	; 0xf42 <App_update+0x21c>

			}else if(au8_Input[0] == '2')//--------- Max Amount OPTION -----------//
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	7d c0       	rjmp	.+250    	; 0xf42 <App_update+0x21c>
				{
					u8_passFlag = 0;
					gu8_ATMMode = ATM_MODE_USER;
					Lcd_clear();
					if(Terminal_Out((uint8_t*)"USER Mode\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	7b c0       	rjmp	.+246    	; 0xf42 <App_update+0x21c>
					return APP_STATUS_ERROR_OK;
				}else
				{
					if(Terminal_Out((uint8_t*)"Data Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					return APP_STATUS_ERROR_OK;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	79 c0       	rjmp	.+242    	; 0xf42 <App_update+0x21c>
	{							/************* User Mode **************/
		/********************************************************************************************/
		/************************************ ADMIN ENTERED ****************************************/
		/********************************************************************************************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
     e50:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <gu8_ADMIN_Request>
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	31 f4       	brne	.+12     	; 0xe64 <App_update+0x13e>
     e58:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <gu8_USER_Mode_State>
     e5c:	81 11       	cpse	r24, r1
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <App_update+0x13e>
			{
				gu8_ATMMode = ATM_MODE_ADMIN;
     e60:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
     e64:	ce 01       	movw	r24, r28
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	0e 94 23 05 	call	0xa46	; 0xa46 <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	39 f5       	brne	.+78     	; 0xebe <App_update+0x198>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
     e70:	62 e3       	ldi	r22, 0x32	; 50
     e72:	74 e0       	ldi	r23, 0x04	; 4
     e74:	ce 01       	movw	r24, r28
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <stringCompare>
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	19 f5       	brne	.+70     	; 0xec6 <App_update+0x1a0>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
     e80:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <gu8_USER_Mode_State>
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	51 f4       	brne	.+20     	; 0xe9c <App_update+0x176>
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
     e88:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <gu8_ADMIN_Request>
						if(Terminal_Out((uint8_t*)"ATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
     e8c:	81 ed       	ldi	r24, 0xD1	; 209
     e8e:	93 e0       	ldi	r25, 0x03	; 3
     e90:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	09 f0       	breq	.+2      	; 0xe9a <App_update+0x174>
     e98:	4d c0       	rjmp	.+154    	; 0xf34 <App_update+0x20e>
     e9a:	15 c0       	rjmp	.+42     	; 0xec6 <App_update+0x1a0>
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The ATM is not used by User */
					{
						gu8_ATMMode = ATM_MODE_ADMIN;
     e9c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
						
						Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
     ea0:	6a e1       	ldi	r22, 0x1A	; 26
     ea2:	72 e0       	ldi	r23, 0x02	; 2
     ea4:	8b e2       	ldi	r24, 0x2B	; 43
     ea6:	92 e0       	ldi	r25, 0x02	; 2
     ea8:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
						
						if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     eac:	8c e3       	ldi	r24, 0x3C	; 60
     eae:	92 e0       	ldi	r25, 0x02	; 2
     eb0:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Terminal_Out>
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	09 f4       	brne	.+2      	; 0xeba <App_update+0x194>
     eb8:	3f c0       	rjmp	.+126    	; 0xf38 <App_update+0x212>
							return APP_STATUS_ERROR_NOK;
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	42 c0       	rjmp	.+132    	; 0xf42 <App_update+0x21c>
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	11 f0       	breq	.+4      	; 0xec6 <App_update+0x1a0>
     ec2:	86 30       	cpi	r24, 0x06	; 6
     ec4:	d9 f5       	brne	.+118    	; 0xf3c <App_update+0x216>
				return APP_STATUS_ERROR_NOK;
			/****************************************************************/
			/********************** Getting Input from User ************************/
			uint8_t au8_data=0;
     ec6:	1b 8a       	std	Y+19, r1	; 0x13
			enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&au8_data);
     ec8:	ce 01       	movw	r24, r28
     eca:	43 96       	adiw	r24, 0x13	; 19
     ecc:	0e 94 02 0b 	call	0x1604	; 0x1604 <Keypad_readKey>
			if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
     ed0:	86 30       	cpi	r24, 0x06	; 6
     ed2:	b1 f4       	brne	.+44     	; 0xf00 <App_update+0x1da>
			{
			/************************************ KEYPAD PRESSED ****************************************/
			/********* Insert Card Chosen ********/
				if(au8_data == '1') 
     ed4:	8b 89       	ldd	r24, Y+19	; 0x13
     ed6:	81 33       	cpi	r24, 0x31	; 49
     ed8:	19 f4       	brne	.+6      	; 0xee0 <App_update+0x1ba>
				{
					AppUSER_insertCard();
     eda:	0e 94 b2 03 	call	0x764	; 0x764 <AppUSER_insertCard>
     ede:	28 c0       	rjmp	.+80     	; 0xf30 <App_update+0x20a>
			/******* Display Temp Chosen *******/
				}else if(au8_data == '2')
     ee0:	82 33       	cpi	r24, 0x32	; 50
     ee2:	19 f4       	brne	.+6      	; 0xeea <App_update+0x1c4>
				{
					AppUSER_displayTemp();
     ee4:	0e 94 90 00 	call	0x120	; 0x120 <AppUSER_displayTemp>
     ee8:	23 c0       	rjmp	.+70     	; 0xf30 <App_update+0x20a>
				}else if(au8_data == '-')
     eea:	8d 32       	cpi	r24, 0x2D	; 45
     eec:	09 f5       	brne	.+66     	; 0xf30 <App_update+0x20a>
				{
					gu8_displayFlag = 0;
     eee:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <gu8_displayFlag>
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     ef2:	65 e8       	ldi	r22, 0x85	; 133
     ef4:	71 e0       	ldi	r23, 0x01	; 1
     ef6:	84 e9       	ldi	r24, 0x94	; 148
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd_printLCD>
     efe:	18 c0       	rjmp	.+48     	; 0xf30 <App_update+0x20a>
				}
			}else if(gu8_displayFlag == DISPLAY_TEMP) /* If in temperature screen >> Update the temp value */
     f00:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <gu8_displayFlag>
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	a1 f4       	brne	.+40     	; 0xf30 <App_update+0x20a>
			{
				uint8_t u8_currentTemp=0;
     f08:	1b 86       	std	Y+11, r1	; 0x0b
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
     f0a:	ce 01       	movw	r24, r28
     f0c:	0b 96       	adiw	r24, 0x0b	; 11
     f0e:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LM35_readTemp>
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	69 f4       	brne	.+26     	; 0xf30 <App_update+0x20a>
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	0e 94 05 0c 	call	0x180a	; 0x180a <Lcd_setCursor>
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	31 f4       	brne	.+12     	; 0xf2c <App_update+0x206>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
     f20:	8b 85       	ldd	r24, Y+11	; 0x0b
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <Lcd_printDecimal>
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	11 f0       	breq	.+4      	; 0xf30 <App_update+0x20a>
			{
				uint8_t u8_currentTemp=0;
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	09 c0       	rjmp	.+18     	; 0xf42 <App_update+0x21c>
				}
			}
	/****************************************************************/
	}
	
	return APP_STATUS_ERROR_OK;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	07 c0       	rjmp	.+14     	; 0xf42 <App_update+0x21c>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"ATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	05 c0       	rjmp	.+10     	; 0xf42 <App_update+0x21c>
						
						Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
						
						if(Terminal_Out((uint8_t*)"Programming Mode\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
						return APP_STATUS_ERROR_OK;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	03 c0       	rjmp	.+6      	; 0xf42 <App_update+0x21c>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <App_update+0x21c>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
     f40:	85 e0       	ldi	r24, 0x05	; 5
			}
	/****************************************************************/
	}
	
	return APP_STATUS_ERROR_OK;
}
     f42:	69 96       	adiw	r28, 0x19	; 25
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	08 95       	ret

00000f54 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
     f54:	0e 94 4b 04 	call	0x896	; 0x896 <App_init>
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	39 f4       	brne	.+14     	; 0xf6a <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
     f5c:	8f b7       	in	r24, 0x3f	; 63
     f5e:	80 68       	ori	r24, 0x80	; 128
     f60:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
     f62:	0e 94 93 06 	call	0xd26	; 0xd26 <App_update>
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	e1 f3       	breq	.-8      	; 0xf62 <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
	}
}
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	08 95       	ret

00000f6e <Button_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button module is already initialized */
	if (genu_BttnModuleState == BTTN_STATUS_INIT)
     f6e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_BttnModuleState>
     f72:	85 30       	cpi	r24, 0x05	; 5
     f74:	71 f0       	breq	.+28     	; 0xf92 <Button_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
     f76:	85 e8       	ldi	r24, 0x85	; 133
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	11 f0       	breq	.+4      	; 0xf86 <Button_init+0x18>
     f82:	87 30       	cpi	r24, 0x07	; 7
     f84:	29 f4       	brne	.+10     	; 0xf90 <Button_init+0x22>
		return BTTN_STATUS_ERROR_NOK;
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
     f86:	85 e0       	ldi	r24, 0x05	; 5
     f88:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genu_BttnModuleState>
	return BTTN_STATUS_ERROR_OK;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return BTTN_STATUS_ERROR_NOK;
     f90:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
	return BTTN_STATUS_ERROR_OK;
}
     f92:	08 95       	ret

00000f94 <Button_getState>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
     f94:	82 30       	cpi	r24, 0x02	; 2
     f96:	60 f4       	brcc	.+24     	; 0xfb0 <Button_getState+0x1c>
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
     f98:	61 15       	cp	r22, r1
     f9a:	71 05       	cpc	r23, r1
     f9c:	59 f0       	breq	.+22     	; 0xfb4 <Button_getState+0x20>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
     f9e:	e8 2f       	mov	r30, r24
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	e4 57       	subi	r30, 0x74	; 116
     fa4:	fb 4f       	sbci	r31, 0xFB	; 251
     fa6:	80 81       	ld	r24, Z
     fa8:	fb 01       	movw	r30, r22
     faa:	80 83       	st	Z, r24
	return BTTN_STATUS_ERROR_OK;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
	{
		return BTTN_STATUS_ERROR_NULL;
     fb4:	83 e0       	ldi	r24, 0x03	; 3
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
	return BTTN_STATUS_ERROR_OK;
}
     fb6:	08 95       	ret

00000fb8 <Button_updateState>:
* Parameters (out): None
* Return value: enuBttn_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to update the state of the button (Pressed or Released) by reading the Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuBttn_Status_t Button_updateState(uint8_t u8_bttnID)
{
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	1f 92       	push	r1
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <Button_updateState+0x14>
     fca:	58 c0       	rjmp	.+176    	; 0x107c <Button_updateState+0xc4>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
     fcc:	19 82       	std	Y+1, r1	; 0x01
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
     fce:	08 2f       	mov	r16, r24
     fd0:	10 e0       	ldi	r17, 0x00	; 0
     fd2:	f8 01       	movw	r30, r16
     fd4:	ed 59       	subi	r30, 0x9D	; 157
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	be 01       	movw	r22, r28
     fda:	6f 5f       	subi	r22, 0xFF	; 255
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	80 81       	ld	r24, Z
     fe0:	0e 94 9f 11 	call	0x233e	; 0x233e <Dio_readPin>
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	09 f0       	breq	.+2      	; 0xfea <Button_updateState+0x32>
     fe8:	4b c0       	rjmp	.+150    	; 0x1080 <Button_updateState+0xc8>
		return BTTN_STATUS_ERROR_NOK;
	if(u8_valueTemp == PIN_HIGH)
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	09 f5       	brne	.+66     	; 0x1032 <Button_updateState+0x7a>
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <Button_updateState+0x42>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	a1 1d       	adc	r26, r1
     ff6:	b1 1d       	adc	r27, r1
     ff8:	03 c0       	rjmp	.+6      	; 0x1000 <Button_updateState+0x48>
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	dc 01       	movw	r26, r24
    1000:	88 3b       	cpi	r24, 0xB8	; 184
    1002:	2b e0       	ldi	r18, 0x0B	; 11
    1004:	92 07       	cpc	r25, r18
    1006:	a1 05       	cpc	r26, r1
    1008:	b1 05       	cpc	r27, r1
    100a:	98 f3       	brcs	.-26     	; 0xff2 <Button_updateState+0x3a>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    100c:	be 01       	movw	r22, r28
    100e:	6f 5f       	subi	r22, 0xFF	; 255
    1010:	7f 4f       	sbci	r23, 0xFF	; 255
    1012:	f8 01       	movw	r30, r16
    1014:	ed 59       	subi	r30, 0x9D	; 157
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	80 81       	ld	r24, Z
    101a:	0e 94 9f 11 	call	0x233e	; 0x233e <Dio_readPin>
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	89 f5       	brne	.+98     	; 0x1084 <Button_updateState+0xcc>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_HIGH)
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	81 f5       	brne	.+96     	; 0x1088 <Button_updateState+0xd0>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
    1028:	f8 01       	movw	r30, r16
    102a:	e4 57       	subi	r30, 0x74	; 116
    102c:	fb 4f       	sbci	r31, 0xFB	; 251
    102e:	80 83       	st	Z, r24
    1030:	30 c0       	rjmp	.+96     	; 0x1092 <Button_updateState+0xda>
	}else if (u8_valueTemp == PIN_LOW)
    1032:	88 23       	and	r24, r24
    1034:	31 f0       	breq	.+12     	; 0x1042 <Button_updateState+0x8a>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	2c c0       	rjmp	.+88     	; 0x1092 <Button_updateState+0xda>
		if(u8_valueTemp == PIN_HIGH)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
	}else if (u8_valueTemp == PIN_LOW)
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	a1 1d       	adc	r26, r1
    103e:	b1 1d       	adc	r27, r1
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <Button_updateState+0x90>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	dc 01       	movw	r26, r24
    1048:	88 3b       	cpi	r24, 0xB8	; 184
    104a:	2b e0       	ldi	r18, 0x0B	; 11
    104c:	92 07       	cpc	r25, r18
    104e:	a1 05       	cpc	r26, r1
    1050:	b1 05       	cpc	r27, r1
    1052:	98 f3       	brcs	.-26     	; 0x103a <Button_updateState+0x82>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    1054:	be 01       	movw	r22, r28
    1056:	6f 5f       	subi	r22, 0xFF	; 255
    1058:	7f 4f       	sbci	r23, 0xFF	; 255
    105a:	f8 01       	movw	r30, r16
    105c:	ed 59       	subi	r30, 0x9D	; 157
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	80 81       	ld	r24, Z
    1062:	0e 94 9f 11 	call	0x233e	; 0x233e <Dio_readPin>
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	89 f4       	brne	.+34     	; 0x108c <Button_updateState+0xd4>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	81 11       	cpse	r24, r1
    106e:	10 c0       	rjmp	.+32     	; 0x1090 <Button_updateState+0xd8>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
    1070:	f8 01       	movw	r30, r16
    1072:	e4 57       	subi	r30, 0x74	; 116
    1074:	fb 4f       	sbci	r31, 0xFB	; 251
    1076:	10 82       	st	Z, r1
	}
	return BTTN_STATUS_ERROR_OK;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	0b c0       	rjmp	.+22     	; 0x1092 <Button_updateState+0xda>
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
		return BTTN_STATUS_ERROR_ID_INVALID;
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	09 c0       	rjmp	.+18     	; 0x1092 <Button_updateState+0xda>
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
		return BTTN_STATUS_ERROR_NOK;
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	07 c0       	rjmp	.+14     	; 0x1092 <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	05 c0       	rjmp	.+10     	; 0x1092 <Button_updateState+0xda>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	03 c0       	rjmp	.+6      	; 0x1092 <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	01 c0       	rjmp	.+2      	; 0x1092 <Button_updateState+0xda>
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    1090:	81 e0       	ldi	r24, 0x01	; 1
}
    1092:	0f 90       	pop	r0
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	08 95       	ret

0000109e <EEPROM_getAddresses>:
* Description: Function to Calculate the slave address byte and the word address byte from the location
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
    109e:	9a 01       	movw	r18, r20
    10a0:	22 27       	eor	r18, r18
    10a2:	37 70       	andi	r19, 0x07	; 7
    10a4:	22 0f       	add	r18, r18
    10a6:	23 2f       	mov	r18, r19
    10a8:	22 1f       	adc	r18, r18
    10aa:	33 0b       	sbc	r19, r19
    10ac:	31 95       	neg	r19
    10ae:	20 65       	ori	r18, 0x50	; 80
    10b0:	fc 01       	movw	r30, r24
    10b2:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
    10b4:	fb 01       	movw	r30, r22
    10b6:	40 83       	st	Z, r20
	return EEPROM_24_STATUS_ERROR_OK;
}
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	08 95       	ret

000010bc <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
    10bc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    10c0:	83 30       	cpi	r24, 0x03	; 3
    10c2:	51 f0       	breq	.+20     	; 0x10d8 <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
    10c4:	0e 94 cc 14 	call	0x2998	; 0x2998 <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
    10c8:	85 30       	cpi	r24, 0x05	; 5
    10ca:	29 f0       	breq	.+10     	; 0x10d6 <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
    10d6:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
    10d8:	08 95       	ret

000010da <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <Eeprom_24_writeByte+0x8>
    10e2:	1f 92       	push	r1
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	ac 01       	movw	r20, r24
    10ea:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    10ec:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    10f0:	93 30       	cpi	r25, 0x03	; 3
    10f2:	11 f5       	brne	.+68     	; 0x1138 <Eeprom_24_writeByte+0x5e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    10f4:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    10f6:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    10f8:	be 01       	movw	r22, r28
    10fa:	6e 5f       	subi	r22, 0xFE	; 254
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255
    10fe:	ce 01       	movw	r24, r28
    1100:	01 96       	adiw	r24, 0x01	; 1
    1102:	0e 94 4f 08 	call	0x109e	; 0x109e <EEPROM_getAddresses>
    1106:	18 2f       	mov	r17, r24
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	c1 f4       	brne	.+48     	; 0x113c <Eeprom_24_writeByte+0x62>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    110c:	21 e0       	ldi	r18, 0x01	; 1
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	ae 01       	movw	r20, r28
    1112:	4d 5f       	subi	r20, 0xFD	; 253
    1114:	5f 4f       	sbci	r21, 0xFF	; 255
    1116:	6a 81       	ldd	r22, Y+2	; 0x02
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <I2C_MasterSendToLocation>
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	79 f4       	brne	.+30     	; 0x1140 <Eeprom_24_writeByte+0x66>
		return EEPROM_24_STATUS_ERROR_NOK;
	Delay_ms(15);
    1122:	2f e0       	ldi	r18, 0x0F	; 15
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    1136:	05 c0       	rjmp	.+10     	; 0x1142 <Eeprom_24_writeByte+0x68>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1138:	12 e0       	ldi	r17, 0x02	; 2
    113a:	03 c0       	rjmp	.+6      	; 0x1142 <Eeprom_24_writeByte+0x68>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    113c:	10 e0       	ldi	r17, 0x00	; 0
    113e:	01 c0       	rjmp	.+2      	; 0x1142 <Eeprom_24_writeByte+0x68>
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1140:	10 e0       	ldi	r17, 0x00	; 0
	Delay_ms(15);
	return EEPROM_24_STATUS_ERROR_OK;
}
    1142:	81 2f       	mov	r24, r17
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	08 95       	ret

00001152 <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	00 d0       	rcall	.+0      	; 0x115e <Eeprom_24_readByte+0xc>
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1164:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    1168:	93 30       	cpi	r25, 0x03	; 3
    116a:	21 f5       	brne	.+72     	; 0x11b4 <Eeprom_24_readByte+0x62>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    116c:	61 15       	cp	r22, r1
    116e:	71 05       	cpc	r23, r1
    1170:	19 f1       	breq	.+70     	; 0x11b8 <Eeprom_24_readByte+0x66>
    1172:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
    1174:	19 82       	std	Y+1, r1	; 0x01
	uint8_t word_addr=0;
    1176:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    1178:	be 01       	movw	r22, r28
    117a:	6e 5f       	subi	r22, 0xFE	; 254
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	ce 01       	movw	r24, r28
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	0e 94 4f 08 	call	0x109e	; 0x109e <EEPROM_getAddresses>
    1186:	18 2f       	mov	r17, r24
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	c1 f4       	brne	.+48     	; 0x11bc <Eeprom_24_readByte+0x6a>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    118c:	21 e0       	ldi	r18, 0x01	; 1
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	a7 01       	movw	r20, r14
    1192:	6a 81       	ldd	r22, Y+2	; 0x02
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <I2C_MasterReceiveFromLocation>
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	89 f4       	brne	.+34     	; 0x11c0 <Eeprom_24_readByte+0x6e>
		return EEPROM_24_STATUS_ERROR_NOK;
	Delay_ms(5);
    119e:	25 e0       	ldi	r18, 0x05	; 5
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    11b2:	07 c0       	rjmp	.+14     	; 0x11c2 <Eeprom_24_readByte+0x70>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    11b4:	12 e0       	ldi	r17, 0x02	; 2
    11b6:	05 c0       	rjmp	.+10     	; 0x11c2 <Eeprom_24_readByte+0x70>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    11b8:	14 e0       	ldi	r17, 0x04	; 4
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <Eeprom_24_readByte+0x70>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t slv_addr=0;
	uint8_t word_addr=0;
	if(EEPROM_getAddresses(&slv_addr, &word_addr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    11bc:	10 e0       	ldi	r17, 0x00	; 0
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <Eeprom_24_readByte+0x70>
	
	if(I2C_MasterReceiveFromLocation(slv_addr, word_addr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    11c0:	10 e0       	ldi	r17, 0x00	; 0
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
    11c2:	81 2f       	mov	r24, r17
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	ff 90       	pop	r15
    11d0:	ef 90       	pop	r14
    11d2:	08 95       	ret

000011d4 <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
    11d4:	ef 92       	push	r14
    11d6:	ff 92       	push	r15
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <Eeprom_24_writePage+0xc>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    11e4:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    11e8:	93 30       	cpi	r25, 0x03	; 3
    11ea:	f9 f4       	brne	.+62     	; 0x122a <Eeprom_24_writePage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    11ec:	61 15       	cp	r22, r1
    11ee:	71 05       	cpc	r23, r1
    11f0:	f1 f0       	breq	.+60     	; 0x122e <Eeprom_24_writePage+0x5a>
    11f2:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
    11f4:	90 e1       	ldi	r25, 0x10	; 16
    11f6:	89 9f       	mul	r24, r25
    11f8:	a0 01       	movw	r20, r0
    11fa:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    11fc:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    11fe:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    1200:	be 01       	movw	r22, r28
    1202:	6e 5f       	subi	r22, 0xFE	; 254
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	ce 01       	movw	r24, r28
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	0e 94 4f 08 	call	0x109e	; 0x109e <EEPROM_getAddresses>
    120e:	18 2f       	mov	r17, r24
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	79 f4       	brne	.+30     	; 0x1232 <Eeprom_24_writePage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    1214:	20 e1       	ldi	r18, 0x10	; 16
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	a7 01       	movw	r20, r14
    121a:	6a 81       	ldd	r22, Y+2	; 0x02
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <I2C_MasterSendToLocation>
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	39 f0       	breq	.+14     	; 0x1234 <Eeprom_24_writePage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    1226:	10 e0       	ldi	r17, 0x00	; 0
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <Eeprom_24_writePage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    122a:	12 e0       	ldi	r17, 0x02	; 2
    122c:	03 c0       	rjmp	.+6      	; 0x1234 <Eeprom_24_writePage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    122e:	14 e0       	ldi	r17, 0x04	; 4
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <Eeprom_24_writePage+0x60>
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1232:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
    1234:	81 2f       	mov	r24, r17
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	1f 91       	pop	r17
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	08 95       	ret

00001246 <Eeprom_24_readPage>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory page.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read data inside a specific page in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPage(uint8_t u8_page, uint8_t *pu8_data)
{
    1246:	ef 92       	push	r14
    1248:	ff 92       	push	r15
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	00 d0       	rcall	.+0      	; 0x1252 <Eeprom_24_readPage+0xc>
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1256:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    125a:	93 30       	cpi	r25, 0x03	; 3
    125c:	f9 f4       	brne	.+62     	; 0x129c <Eeprom_24_readPage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    125e:	61 15       	cp	r22, r1
    1260:	71 05       	cpc	r23, r1
    1262:	f1 f0       	breq	.+60     	; 0x12a0 <Eeprom_24_readPage+0x5a>
    1264:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
    1266:	90 e1       	ldi	r25, 0x10	; 16
    1268:	89 9f       	mul	r24, r25
    126a:	a0 01       	movw	r20, r0
    126c:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    126e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    1270:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    1272:	be 01       	movw	r22, r28
    1274:	6e 5f       	subi	r22, 0xFE	; 254
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	ce 01       	movw	r24, r28
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	0e 94 4f 08 	call	0x109e	; 0x109e <EEPROM_getAddresses>
    1280:	18 2f       	mov	r17, r24
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	79 f4       	brne	.+30     	; 0x12a4 <Eeprom_24_readPage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    1286:	20 e1       	ldi	r18, 0x10	; 16
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	a7 01       	movw	r20, r14
    128c:	6a 81       	ldd	r22, Y+2	; 0x02
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <I2C_MasterReceiveFromLocation>
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	39 f0       	breq	.+14     	; 0x12a6 <Eeprom_24_readPage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    1298:	10 e0       	ldi	r17, 0x00	; 0
    129a:	05 c0       	rjmp	.+10     	; 0x12a6 <Eeprom_24_readPage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    129c:	12 e0       	ldi	r17, 0x02	; 2
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <Eeprom_24_readPage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    12a0:	14 e0       	ldi	r17, 0x04	; 4
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <Eeprom_24_readPage+0x60>
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<4;
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    12a4:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

	return EEPROM_24_STATUS_ERROR_OK;
}
    12a6:	81 2f       	mov	r24, r17
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	1f 91       	pop	r17
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	08 95       	ret

000012b8 <Eeprom_24_writePacket>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Multiple data bytes to a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    12b8:	6f 92       	push	r6
    12ba:	7f 92       	push	r7
    12bc:	8f 92       	push	r8
    12be:	9f 92       	push	r9
    12c0:	af 92       	push	r10
    12c2:	bf 92       	push	r11
    12c4:	cf 92       	push	r12
    12c6:	df 92       	push	r13
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <Eeprom_24_writePacket+0x1e>
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	5c 01       	movw	r10, r24
    12dc:	6b 01       	movw	r12, r22
    12de:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    12e0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    12e4:	83 30       	cpi	r24, 0x03	; 3
    12e6:	09 f0       	breq	.+2      	; 0x12ea <Eeprom_24_writePacket+0x32>
    12e8:	a1 c0       	rjmp	.+322    	; 0x142c <Eeprom_24_writePacket+0x174>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    12ea:	67 2b       	or	r22, r23
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <Eeprom_24_writePacket+0x38>
    12ee:	a0 c0       	rjmp	.+320    	; 0x1430 <Eeprom_24_writePacket+0x178>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    12f0:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    12f2:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    12f4:	a5 01       	movw	r20, r10
    12f6:	be 01       	movw	r22, r28
    12f8:	6e 5f       	subi	r22, 0xFE	; 254
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255
    12fc:	ce 01       	movw	r24, r28
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	0e 94 4f 08 	call	0x109e	; 0x109e <EEPROM_getAddresses>
    1304:	18 2f       	mov	r17, r24
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	09 f0       	breq	.+2      	; 0x130c <Eeprom_24_writePacket+0x54>
    130a:	94 c0       	rjmp	.+296    	; 0x1434 <Eeprom_24_writePacket+0x17c>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & 0x7F0)>>4;
    130c:	45 01       	movw	r8, r10
    130e:	80 ef       	ldi	r24, 0xF0	; 240
    1310:	88 22       	and	r8, r24
    1312:	87 e0       	ldi	r24, 0x07	; 7
    1314:	98 22       	and	r9, r24
    1316:	96 94       	lsr	r9
    1318:	87 94       	ror	r8
    131a:	96 94       	lsr	r9
    131c:	87 94       	ror	r8
    131e:	96 94       	lsr	r9
    1320:	87 94       	ror	r8
    1322:	96 94       	lsr	r9
    1324:	87 94       	ror	r8
    1326:	68 2c       	mov	r6, r8
	uint8_t u8_byteOffset = u16_location & 0x00F;
    1328:	8a 2d       	mov	r24, r10
    132a:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
    132c:	51 f1       	breq	.+84     	; 0x1382 <Eeprom_24_writePacket+0xca>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    132e:	90 e1       	ldi	r25, 0x10	; 16
    1330:	a9 2e       	mov	r10, r25
    1332:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    1334:	b1 2c       	mov	r11, r1
    1336:	ea 14       	cp	r14, r10
    1338:	fb 04       	cpc	r15, r11
    133a:	58 f4       	brcc	.+22     	; 0x1352 <Eeprom_24_writePacket+0x9a>
		{
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
    133c:	97 01       	movw	r18, r14
    133e:	a6 01       	movw	r20, r12
    1340:	6a 81       	ldd	r22, Y+2	; 0x02
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <I2C_MasterSendToLocation>
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	09 f4       	brne	.+2      	; 0x134e <Eeprom_24_writePacket+0x96>
    134c:	7c c0       	rjmp	.+248    	; 0x1446 <Eeprom_24_writePacket+0x18e>
				return EEPROM_24_STATUS_ERROR_NOK;
    134e:	10 e0       	ldi	r17, 0x00	; 0
    1350:	7a c0       	rjmp	.+244    	; 0x1446 <Eeprom_24_writePacket+0x18e>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    1352:	95 01       	movw	r18, r10
    1354:	a6 01       	movw	r20, r12
    1356:	6a 81       	ldd	r22, Y+2	; 0x02
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <I2C_MasterSendToLocation>
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	09 f0       	breq	.+2      	; 0x1364 <Eeprom_24_writePacket+0xac>
    1362:	6a c0       	rjmp	.+212    	; 0x1438 <Eeprom_24_writePacket+0x180>
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    1364:	ea 18       	sub	r14, r10
    1366:	fb 08       	sbc	r15, r11
		i=1;
		Delay_ms(15);
    1368:	2f e0       	ldi	r18, 0x0F	; 15
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
    137c:	77 24       	eor	r7, r7
    137e:	73 94       	inc	r7
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <Eeprom_24_writePacket+0xd0>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
    1382:	71 2c       	mov	r7, r1
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
    1384:	a1 2c       	mov	r10, r1
    1386:	b1 2c       	mov	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
    1388:	c7 01       	movw	r24, r14
    138a:	92 95       	swap	r25
    138c:	82 95       	swap	r24
    138e:	8f 70       	andi	r24, 0x0F	; 15
    1390:	89 27       	eor	r24, r25
    1392:	9f 70       	andi	r25, 0x0F	; 15
    1394:	89 27       	eor	r24, r25
    1396:	08 2f       	mov	r16, r24
	while (pages_num > 0)
    1398:	1c c0       	rjmp	.+56     	; 0x13d2 <Eeprom_24_writePacket+0x11a>
	{
		pages_num--;
    139a:	01 50       	subi	r16, 0x01	; 1
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    139c:	b6 01       	movw	r22, r12
    139e:	6a 0d       	add	r22, r10
    13a0:	7b 1d       	adc	r23, r11
    13a2:	87 2d       	mov	r24, r7
    13a4:	86 0d       	add	r24, r6
    13a6:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <Eeprom_24_writePage>
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <Eeprom_24_writePacket+0xf8>
    13ae:	46 c0       	rjmp	.+140    	; 0x143c <Eeprom_24_writePacket+0x184>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    13b0:	73 94       	inc	r7
		u16_dataLen -= 16;
    13b2:	80 e1       	ldi	r24, 0x10	; 16
    13b4:	e8 1a       	sub	r14, r24
    13b6:	f1 08       	sbc	r15, r1
		u8_dataIndex += 16;
    13b8:	80 e1       	ldi	r24, 0x10	; 16
    13ba:	a8 0e       	add	r10, r24
    13bc:	b1 1c       	adc	r11, r1
		Delay_ms(15);
    13be:	2f e0       	ldi	r18, 0x0F	; 15
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
    13d2:	10 16       	cp	r1, r16
    13d4:	14 f3       	brlt	.-60     	; 0x139a <Eeprom_24_writePacket+0xe2>
		u16_dataLen -= 16;
		u8_dataIndex += 16;
		Delay_ms(15);
	}
	
	if (u16_dataLen > 0)
    13d6:	e1 14       	cp	r14, r1
    13d8:	f1 04       	cpc	r15, r1
    13da:	a9 f1       	breq	.+106    	; 0x1446 <Eeprom_24_writePacket+0x18e>
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << 4;
    13dc:	a4 01       	movw	r20, r8
    13de:	47 0d       	add	r20, r7
    13e0:	51 1d       	adc	r21, r1
    13e2:	42 95       	swap	r20
    13e4:	52 95       	swap	r21
    13e6:	50 7f       	andi	r21, 0xF0	; 240
    13e8:	54 27       	eor	r21, r20
    13ea:	40 7f       	andi	r20, 0xF0	; 240
    13ec:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
    13ee:	be 01       	movw	r22, r28
    13f0:	6e 5f       	subi	r22, 0xFE	; 254
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	ce 01       	movw	r24, r28
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	0e 94 4f 08 	call	0x109e	; 0x109e <EEPROM_getAddresses>
    13fc:	18 2f       	mov	r17, r24
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	f9 f4       	brne	.+62     	; 0x1440 <Eeprom_24_writePacket+0x188>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1402:	a6 01       	movw	r20, r12
    1404:	4a 0d       	add	r20, r10
    1406:	5b 1d       	adc	r21, r11
    1408:	97 01       	movw	r18, r14
    140a:	6a 81       	ldd	r22, Y+2	; 0x02
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <I2C_MasterSendToLocation>
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	b9 f4       	brne	.+46     	; 0x1444 <Eeprom_24_writePacket+0x18c>
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
    1416:	2f e0       	ldi	r18, 0x0F	; 15
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e0       	ldi	r20, 0x00	; 0
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
    142a:	0d c0       	rjmp	.+26     	; 0x1446 <Eeprom_24_writePacket+0x18e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    142c:	12 e0       	ldi	r17, 0x02	; 2
    142e:	0b c0       	rjmp	.+22     	; 0x1446 <Eeprom_24_writePacket+0x18e>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1430:	14 e0       	ldi	r17, 0x04	; 4
    1432:	09 c0       	rjmp	.+18     	; 0x1446 <Eeprom_24_writePacket+0x18e>
	uint8_t u8_wordAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1434:	10 e0       	ldi	r17, 0x00	; 0
    1436:	07 c0       	rjmp	.+14     	; 0x1446 <Eeprom_24_writePacket+0x18e>
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1438:	10 e0       	ldi	r17, 0x00	; 0
    143a:	05 c0       	rjmp	.+10     	; 0x1446 <Eeprom_24_writePacket+0x18e>
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
	{
		pages_num--;
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    143c:	10 e0       	ldi	r17, 0x00	; 0
    143e:	03 c0       	rjmp	.+6      	; 0x1446 <Eeprom_24_writePacket+0x18e>
	
	if (u16_dataLen > 0)
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << 4;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1440:	10 e0       	ldi	r17, 0x00	; 0
    1442:	01 c0       	rjmp	.+2      	; 0x1446 <Eeprom_24_writePacket+0x18e>
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1444:	10 e0       	ldi	r17, 0x00	; 0
		Delay_ms(15);
	}
	return EEPROM_24_STATUS_ERROR_OK;
}
    1446:	81 2f       	mov	r24, r17
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	df 90       	pop	r13
    145a:	cf 90       	pop	r12
    145c:	bf 90       	pop	r11
    145e:	af 90       	pop	r10
    1460:	9f 90       	pop	r9
    1462:	8f 90       	pop	r8
    1464:	7f 90       	pop	r7
    1466:	6f 90       	pop	r6
    1468:	08 95       	ret

0000146a <Eeprom_24_readPacket>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read Multiple data bytes from a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    146a:	6f 92       	push	r6
    146c:	7f 92       	push	r7
    146e:	8f 92       	push	r8
    1470:	9f 92       	push	r9
    1472:	af 92       	push	r10
    1474:	bf 92       	push	r11
    1476:	cf 92       	push	r12
    1478:	df 92       	push	r13
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	00 d0       	rcall	.+0      	; 0x1488 <Eeprom_24_readPacket+0x1e>
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	5c 01       	movw	r10, r24
    148e:	6b 01       	movw	r12, r22
    1490:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1492:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    1496:	83 30       	cpi	r24, 0x03	; 3
    1498:	09 f0       	breq	.+2      	; 0x149c <Eeprom_24_readPacket+0x32>
    149a:	84 c0       	rjmp	.+264    	; 0x15a4 <Eeprom_24_readPacket+0x13a>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    149c:	67 2b       	or	r22, r23
    149e:	09 f4       	brne	.+2      	; 0x14a2 <Eeprom_24_readPacket+0x38>
    14a0:	83 c0       	rjmp	.+262    	; 0x15a8 <Eeprom_24_readPacket+0x13e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    14a2:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_wordAddr=0;
    14a4:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t u16dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    14a6:	a5 01       	movw	r20, r10
    14a8:	be 01       	movw	r22, r28
    14aa:	6e 5f       	subi	r22, 0xFE	; 254
    14ac:	7f 4f       	sbci	r23, 0xFF	; 255
    14ae:	ce 01       	movw	r24, r28
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	0e 94 4f 08 	call	0x109e	; 0x109e <EEPROM_getAddresses>
    14b6:	18 2f       	mov	r17, r24
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	09 f0       	breq	.+2      	; 0x14be <Eeprom_24_readPacket+0x54>
    14bc:	77 c0       	rjmp	.+238    	; 0x15ac <Eeprom_24_readPacket+0x142>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & 0x7F0)>>4;		//The first page to write in
    14be:	45 01       	movw	r8, r10
    14c0:	80 ef       	ldi	r24, 0xF0	; 240
    14c2:	88 22       	and	r8, r24
    14c4:	87 e0       	ldi	r24, 0x07	; 7
    14c6:	98 22       	and	r9, r24
    14c8:	96 94       	lsr	r9
    14ca:	87 94       	ror	r8
    14cc:	96 94       	lsr	r9
    14ce:	87 94       	ror	r8
    14d0:	96 94       	lsr	r9
    14d2:	87 94       	ror	r8
    14d4:	96 94       	lsr	r9
    14d6:	87 94       	ror	r8
    14d8:	78 2c       	mov	r7, r8
	uint8_t u8_byteOffset = u16_location & 0x00F;
    14da:	8a 2d       	mov	r24, r10
    14dc:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
    14de:	f9 f0       	breq	.+62     	; 0x151e <Eeprom_24_readPacket+0xb4>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    14e0:	90 e1       	ldi	r25, 0x10	; 16
    14e2:	a9 2e       	mov	r10, r25
    14e4:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    14e6:	b1 2c       	mov	r11, r1
    14e8:	ea 14       	cp	r14, r10
    14ea:	fb 04       	cpc	r15, r11
    14ec:	58 f4       	brcc	.+22     	; 0x1504 <Eeprom_24_readPacket+0x9a>
		{
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    14ee:	95 01       	movw	r18, r10
    14f0:	a6 01       	movw	r20, r12
    14f2:	6a 81       	ldd	r22, Y+2	; 0x02
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <I2C_MasterReceiveFromLocation>
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <Eeprom_24_readPacket+0x96>
    14fe:	5d c0       	rjmp	.+186    	; 0x15ba <Eeprom_24_readPacket+0x150>
				return EEPROM_24_STATUS_ERROR_NOK;
    1500:	10 e0       	ldi	r17, 0x00	; 0
    1502:	5b c0       	rjmp	.+182    	; 0x15ba <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    1504:	95 01       	movw	r18, r10
    1506:	a6 01       	movw	r20, r12
    1508:	6a 81       	ldd	r22, Y+2	; 0x02
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <I2C_MasterReceiveFromLocation>
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	09 f0       	breq	.+2      	; 0x1516 <Eeprom_24_readPacket+0xac>
    1514:	4d c0       	rjmp	.+154    	; 0x15b0 <Eeprom_24_readPacket+0x146>
			return EEPROM_24_STATUS_ERROR_NOK;
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    1516:	ea 18       	sub	r14, r10
    1518:	fb 08       	sbc	r15, r11
		i=1;
    151a:	01 e0       	ldi	r16, 0x01	; 1
    151c:	03 c0       	rjmp	.+6      	; 0x1524 <Eeprom_24_readPacket+0xba>
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
    151e:	00 e0       	ldi	r16, 0x00	; 0
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
    1520:	a1 2c       	mov	r10, r1
    1522:	b1 2c       	mov	r11, r1
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
    1524:	c7 01       	movw	r24, r14
    1526:	92 95       	swap	r25
    1528:	82 95       	swap	r24
    152a:	8f 70       	andi	r24, 0x0F	; 15
    152c:	89 27       	eor	r24, r25
    152e:	9f 70       	andi	r25, 0x0F	; 15
    1530:	89 27       	eor	r24, r25
	while (pages_num--)
    1532:	11 c0       	rjmp	.+34     	; 0x1556 <Eeprom_24_readPacket+0xec>
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    1534:	b6 01       	movw	r22, r12
    1536:	6a 0d       	add	r22, r10
    1538:	7b 1d       	adc	r23, r11
    153a:	80 2f       	mov	r24, r16
    153c:	87 0d       	add	r24, r7
    153e:	0e 94 23 09 	call	0x1246	; 0x1246 <Eeprom_24_readPage>
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	b9 f5       	brne	.+110    	; 0x15b4 <Eeprom_24_readPacket+0x14a>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    1546:	0f 5f       	subi	r16, 0xFF	; 255
		u16_dataLen -= 16;
    1548:	80 e1       	ldi	r24, 0x10	; 16
    154a:	e8 1a       	sub	r14, r24
    154c:	f1 08       	sbc	r15, r1
		u16dataIndex += 16;
    154e:	80 e1       	ldi	r24, 0x10	; 16
    1550:	a8 0e       	add	r10, r24
    1552:	b1 1c       	adc	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
    1554:	86 2d       	mov	r24, r6
    1556:	66 24       	eor	r6, r6
    1558:	6a 94       	dec	r6
    155a:	68 0e       	add	r6, r24
    155c:	81 11       	cpse	r24, r1
    155e:	ea cf       	rjmp	.-44     	; 0x1534 <Eeprom_24_readPacket+0xca>
		i++;
		u16_dataLen -= 16;
		u16dataIndex += 16;
	}

	if (u16_dataLen > 0)
    1560:	e1 14       	cp	r14, r1
    1562:	f1 04       	cpc	r15, r1
    1564:	51 f1       	breq	.+84     	; 0x15ba <Eeprom_24_readPacket+0x150>
	{
		uint16_t new_location = (u8_pageStart + i) << 4;
    1566:	a4 01       	movw	r20, r8
    1568:	40 0f       	add	r20, r16
    156a:	51 1d       	adc	r21, r1
    156c:	42 95       	swap	r20
    156e:	52 95       	swap	r21
    1570:	50 7f       	andi	r21, 0xF0	; 240
    1572:	54 27       	eor	r21, r20
    1574:	40 7f       	andi	r20, 0xF0	; 240
    1576:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
    1578:	be 01       	movw	r22, r28
    157a:	6e 5f       	subi	r22, 0xFE	; 254
    157c:	7f 4f       	sbci	r23, 0xFF	; 255
    157e:	ce 01       	movw	r24, r28
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	0e 94 4f 08 	call	0x109e	; 0x109e <EEPROM_getAddresses>
    1586:	18 2f       	mov	r17, r24
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	b1 f4       	brne	.+44     	; 0x15b8 <Eeprom_24_readPacket+0x14e>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    158c:	a6 01       	movw	r20, r12
    158e:	4a 0d       	add	r20, r10
    1590:	5b 1d       	adc	r21, r11
    1592:	97 01       	movw	r18, r14
    1594:	6a 81       	ldd	r22, Y+2	; 0x02
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <I2C_MasterReceiveFromLocation>
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	69 f0       	breq	.+26     	; 0x15ba <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_NOK;
    15a0:	10 e0       	ldi	r17, 0x00	; 0
    15a2:	0b c0       	rjmp	.+22     	; 0x15ba <Eeprom_24_readPacket+0x150>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    15a4:	12 e0       	ldi	r17, 0x02	; 2
    15a6:	09 c0       	rjmp	.+18     	; 0x15ba <Eeprom_24_readPacket+0x150>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    15a8:	14 e0       	ldi	r17, 0x04	; 4
    15aa:	07 c0       	rjmp	.+14     	; 0x15ba <Eeprom_24_readPacket+0x150>
	uint8_t u8_wordAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    15ac:	10 e0       	ldi	r17, 0x00	; 0
    15ae:	05 c0       	rjmp	.+10     	; 0x15ba <Eeprom_24_readPacket+0x150>
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    15b0:	10 e0       	ldi	r17, 0x00	; 0
    15b2:	03 c0       	rjmp	.+6      	; 0x15ba <Eeprom_24_readPacket+0x150>
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    15b4:	10 e0       	ldi	r17, 0x00	; 0
    15b6:	01 c0       	rjmp	.+2      	; 0x15ba <Eeprom_24_readPacket+0x150>

	if (u16_dataLen > 0)
	{
		uint16_t new_location = (u8_pageStart + i) << 4;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    15b8:	10 e0       	ldi	r17, 0x00	; 0
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
	return EEPROM_24_STATUS_ERROR_OK;
    15ba:	81 2f       	mov	r24, r17
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	df 90       	pop	r13
    15ce:	cf 90       	pop	r12
    15d0:	bf 90       	pop	r11
    15d2:	af 90       	pop	r10
    15d4:	9f 90       	pop	r9
    15d6:	8f 90       	pop	r8
    15d8:	7f 90       	pop	r7
    15da:	6f 90       	pop	r6
    15dc:	08 95       	ret

000015de <Keypad_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is already initialized */
	if (genu_KeypadModuleState == KEYPAD_STATUS_INIT)
    15de:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <genu_KeypadModuleState>
    15e2:	85 30       	cpi	r24, 0x05	; 5
    15e4:	71 f0       	breq	.+28     	; 0x1602 <Keypad_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    15e6:	85 e8       	ldi	r24, 0x85	; 133
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	11 f0       	breq	.+4      	; 0x15f6 <Keypad_init+0x18>
    15f2:	87 30       	cpi	r24, 0x07	; 7
    15f4:	29 f4       	brne	.+10     	; 0x1600 <Keypad_init+0x22>
		return KEYPAD_STATUS_ERROR_NOK;
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
    15f6:	85 e0       	ldi	r24, 0x05	; 5
    15f8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <genu_KeypadModuleState>
	return KEYPAD_STATUS_ERROR_OK;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return KEYPAD_STATUS_ERROR_NOK;
    1600:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
	return KEYPAD_STATUS_ERROR_OK;
}
    1602:	08 95       	ret

00001604 <Keypad_readKey>:
* Parameters (out): pu8_pressedKey - Pointer to a Char to hold the pressed key.
* Return value: enuKeypad_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current pressed Key.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuKeypad_Status_t Keypad_readKey(uint8_t * pu8_pressedKey)
{
    1604:	af 92       	push	r10
    1606:	bf 92       	push	r11
    1608:	cf 92       	push	r12
    160a:	df 92       	push	r13
    160c:	ef 92       	push	r14
    160e:	ff 92       	push	r15
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	1f 92       	push	r1
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	6c 01       	movw	r12, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
    1620:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <genu_KeypadModuleState>
    1624:	95 30       	cpi	r25, 0x05	; 5
    1626:	09 f0       	breq	.+2      	; 0x162a <Keypad_readKey+0x26>
    1628:	50 c0       	rjmp	.+160    	; 0x16ca <Keypad_readKey+0xc6>
	{
		return KEYPAD_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
    162a:	c1 14       	cp	r12, r1
    162c:	d1 04       	cpc	r13, r1
    162e:	09 f4       	brne	.+2      	; 0x1632 <Keypad_readKey+0x2e>
    1630:	4e c0       	rjmp	.+156    	; 0x16ce <Keypad_readKey+0xca>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	89 83       	std	Y+1, r24	; 0x01
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    1636:	00 e0       	ldi	r16, 0x00	; 0
    1638:	43 c0       	rjmp	.+134    	; 0x16c0 <Keypad_readKey+0xbc>
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
    163a:	a0 2e       	mov	r10, r16
    163c:	b1 2c       	mov	r11, r1
    163e:	f5 01       	movw	r30, r10
    1640:	e6 58       	subi	r30, 0x86	; 134
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	60 e0       	ldi	r22, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	09 f0       	breq	.+2      	; 0x1652 <Keypad_readKey+0x4e>
    1650:	40 c0       	rjmp	.+128    	; 0x16d2 <Keypad_readKey+0xce>
    1652:	10 e0       	ldi	r17, 0x00	; 0
    1654:	29 c0       	rjmp	.+82     	; 0x16a8 <Keypad_readKey+0xa4>
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
    1656:	e1 2e       	mov	r14, r17
    1658:	f1 2c       	mov	r15, r1
    165a:	f7 01       	movw	r30, r14
    165c:	ea 58       	subi	r30, 0x8A	; 138
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	be 01       	movw	r22, r28
    1662:	6f 5f       	subi	r22, 0xFF	; 255
    1664:	7f 4f       	sbci	r23, 0xFF	; 255
    1666:	80 81       	ld	r24, Z
    1668:	0e 94 9f 11 	call	0x233e	; 0x233e <Dio_readPin>
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	99 f5       	brne	.+102    	; 0x16d6 <Keypad_readKey+0xd2>
				return KEYPAD_STATUS_ERROR_NOK;
			if(u8_pinValue == PIN_LOW)
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	81 11       	cpse	r24, r1
    1674:	18 c0       	rjmp	.+48     	; 0x16a6 <Keypad_readKey+0xa2>
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    1676:	61 e0       	ldi	r22, 0x01	; 1
    1678:	f5 01       	movw	r30, r10
    167a:	e6 58       	subi	r30, 0x86	; 134
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	80 81       	ld	r24, Z
    1680:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	49 f5       	brne	.+82     	; 0x16da <Keypad_readKey+0xd6>
					return KEYPAD_STATUS_ERROR_NOK;
				*pu8_pressedKey = gau8_ButtonSymbols[u8_RowIndex][u8_ColumnIndex];
    1688:	97 01       	movw	r18, r14
    168a:	22 0f       	add	r18, r18
    168c:	33 1f       	adc	r19, r19
    168e:	22 0f       	add	r18, r18
    1690:	33 1f       	adc	r19, r19
    1692:	2a 59       	subi	r18, 0x9A	; 154
    1694:	3f 4f       	sbci	r19, 0xFF	; 255
    1696:	f9 01       	movw	r30, r18
    1698:	ea 0d       	add	r30, r10
    169a:	fb 1d       	adc	r31, r11
    169c:	80 81       	ld	r24, Z
    169e:	f6 01       	movw	r30, r12
    16a0:	80 83       	st	Z, r24
				return KEYPAD_STATUS_PRESSED;
    16a2:	86 e0       	ldi	r24, 0x06	; 6
    16a4:	1d c0       	rjmp	.+58     	; 0x16e0 <Keypad_readKey+0xdc>
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
    16a6:	1f 5f       	subi	r17, 0xFF	; 255
    16a8:	14 30       	cpi	r17, 0x04	; 4
    16aa:	a8 f2       	brcs	.-86     	; 0x1656 <Keypad_readKey+0x52>
				return KEYPAD_STATUS_PRESSED;
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    16ac:	f5 01       	movw	r30, r10
    16ae:	e6 58       	subi	r30, 0x86	; 134
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	80 81       	ld	r24, Z
    16b6:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	81 f4       	brne	.+32     	; 0x16de <Keypad_readKey+0xda>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    16be:	0f 5f       	subi	r16, 0xFF	; 255
    16c0:	04 30       	cpi	r16, 0x04	; 4
    16c2:	08 f4       	brcc	.+2      	; 0x16c6 <Keypad_readKey+0xc2>
    16c4:	ba cf       	rjmp	.-140    	; 0x163a <Keypad_readKey+0x36>
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    16c6:	87 e0       	ldi	r24, 0x07	; 7
    16c8:	0b c0       	rjmp	.+22     	; 0x16e0 <Keypad_readKey+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
	{
		return KEYPAD_STATUS_NOT_INIT;
    16ca:	84 e0       	ldi	r24, 0x04	; 4
    16cc:	09 c0       	rjmp	.+18     	; 0x16e0 <Keypad_readKey+0xdc>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
	{
		return KEYPAD_STATUS_ERROR_NULL;
    16ce:	83 e0       	ldi	r24, 0x03	; 3
    16d0:	07 c0       	rjmp	.+14     	; 0x16e0 <Keypad_readKey+0xdc>
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	05 c0       	rjmp	.+10     	; 0x16e0 <Keypad_readKey+0xdc>
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
				return KEYPAD_STATUS_ERROR_NOK;
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	03 c0       	rjmp	.+6      	; 0x16e0 <Keypad_readKey+0xdc>
			if(u8_pinValue == PIN_LOW)
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
					return KEYPAD_STATUS_ERROR_NOK;
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	01 c0       	rjmp	.+2      	; 0x16e0 <Keypad_readKey+0xdc>
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    16de:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    16e0:	0f 90       	pop	r0
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	df 90       	pop	r13
    16f0:	cf 90       	pop	r12
    16f2:	bf 90       	pop	r11
    16f4:	af 90       	pop	r10
    16f6:	08 95       	ret

000016f8 <Lcd_WriteData>:
{
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, BIN);
	Lcd_printString(au8_snum);
	return LCD_STATUS_ERROR_OK;
}
    16f8:	cf 93       	push	r28
    16fa:	c8 2f       	mov	r28, r24
    16fc:	80 ff       	sbrs	r24, 0
    16fe:	05 c0       	rjmp	.+10     	; 0x170a <Lcd_WriteData+0x12>
    1700:	61 e0       	ldi	r22, 0x01	; 1
    1702:	8a e0       	ldi	r24, 0x0A	; 10
    1704:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    1708:	04 c0       	rjmp	.+8      	; 0x1712 <Lcd_WriteData+0x1a>
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	8a e0       	ldi	r24, 0x0A	; 10
    170e:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    1712:	c1 ff       	sbrs	r28, 1
    1714:	05 c0       	rjmp	.+10     	; 0x1720 <Lcd_WriteData+0x28>
    1716:	61 e0       	ldi	r22, 0x01	; 1
    1718:	8b e0       	ldi	r24, 0x0B	; 11
    171a:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <Lcd_WriteData+0x30>
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	8b e0       	ldi	r24, 0x0B	; 11
    1724:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    1728:	c2 ff       	sbrs	r28, 2
    172a:	05 c0       	rjmp	.+10     	; 0x1736 <Lcd_WriteData+0x3e>
    172c:	61 e0       	ldi	r22, 0x01	; 1
    172e:	8c e0       	ldi	r24, 0x0C	; 12
    1730:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    1734:	04 c0       	rjmp	.+8      	; 0x173e <Lcd_WriteData+0x46>
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	8c e0       	ldi	r24, 0x0C	; 12
    173a:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    173e:	c3 ff       	sbrs	r28, 3
    1740:	05 c0       	rjmp	.+10     	; 0x174c <Lcd_WriteData+0x54>
    1742:	61 e0       	ldi	r22, 0x01	; 1
    1744:	8d e0       	ldi	r24, 0x0D	; 13
    1746:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    174a:	04 c0       	rjmp	.+8      	; 0x1754 <Lcd_WriteData+0x5c>
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	8d e0       	ldi	r24, 0x0D	; 13
    1750:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    1754:	cf 91       	pop	r28
    1756:	08 95       	ret

00001758 <Lcd_EnableToggle>:
    1758:	61 e0       	ldi	r22, 0x01	; 1
    175a:	89 e0       	ldi	r24, 0x09	; 9
    175c:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    1760:	21 e0       	ldi	r18, 0x01	; 1
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e0       	ldi	r20, 0x00	; 0
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Delay_ms>
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	89 e0       	ldi	r24, 0x09	; 9
    1778:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    177c:	08 95       	ret

0000177e <Lcd_sendCommand>:
    177e:	cf 93       	push	r28
    1780:	c8 2f       	mov	r28, r24
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	87 e0       	ldi	r24, 0x07	; 7
    1786:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    178a:	8c 2f       	mov	r24, r28
    178c:	82 95       	swap	r24
    178e:	8f 70       	andi	r24, 0x0F	; 15
    1790:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <Lcd_WriteData>
    1794:	0e 94 ac 0b 	call	0x1758	; 0x1758 <Lcd_EnableToggle>
    1798:	8c 2f       	mov	r24, r28
    179a:	8f 70       	andi	r24, 0x0F	; 15
    179c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <Lcd_WriteData>
    17a0:	0e 94 ac 0b 	call	0x1758	; 0x1758 <Lcd_EnableToggle>
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	cf 91       	pop	r28
    17a8:	08 95       	ret

000017aa <Lcd_init>:
    17aa:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <genu_LcdModuleState>
    17ae:	86 30       	cpi	r24, 0x06	; 6
    17b0:	59 f1       	breq	.+86     	; 0x1808 <Lcd_init+0x5e>
    17b2:	85 e8       	ldi	r24, 0x85	; 133
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <Dio_init>
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	11 f0       	breq	.+4      	; 0x17c2 <Lcd_init+0x18>
    17be:	87 30       	cpi	r24, 0x07	; 7
    17c0:	11 f5       	brne	.+68     	; 0x1806 <Lcd_init+0x5c>
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	87 e0       	ldi	r24, 0x07	; 7
    17c6:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	89 e0       	ldi	r24, 0x09	; 9
    17ce:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    17d2:	83 e3       	ldi	r24, 0x33	; 51
    17d4:	0e 94 bf 0b 	call	0x177e	; 0x177e <Lcd_sendCommand>
    17d8:	82 e3       	ldi	r24, 0x32	; 50
    17da:	0e 94 bf 0b 	call	0x177e	; 0x177e <Lcd_sendCommand>
    17de:	88 e2       	ldi	r24, 0x28	; 40
    17e0:	0e 94 bf 0b 	call	0x177e	; 0x177e <Lcd_sendCommand>
    17e4:	88 e0       	ldi	r24, 0x08	; 8
    17e6:	0e 94 bf 0b 	call	0x177e	; 0x177e <Lcd_sendCommand>
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	0e 94 bf 0b 	call	0x177e	; 0x177e <Lcd_sendCommand>
    17f0:	86 e0       	ldi	r24, 0x06	; 6
    17f2:	0e 94 bf 0b 	call	0x177e	; 0x177e <Lcd_sendCommand>
    17f6:	8c e0       	ldi	r24, 0x0C	; 12
    17f8:	0e 94 bf 0b 	call	0x177e	; 0x177e <Lcd_sendCommand>
    17fc:	86 e0       	ldi	r24, 0x06	; 6
    17fe:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <genu_LcdModuleState>
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	08 95       	ret
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	08 95       	ret

0000180a <Lcd_setCursor>:
    180a:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <genu_LcdModuleState>
    180e:	96 30       	cpi	r25, 0x06	; 6
    1810:	89 f4       	brne	.+34     	; 0x1834 <Lcd_setCursor+0x2a>
    1812:	83 30       	cpi	r24, 0x03	; 3
    1814:	88 f4       	brcc	.+34     	; 0x1838 <Lcd_setCursor+0x2e>
    1816:	61 31       	cpi	r22, 0x11	; 17
    1818:	88 f4       	brcc	.+34     	; 0x183c <Lcd_setCursor+0x32>
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	2e 5f       	subi	r18, 0xFE	; 254
    1820:	3f 4f       	sbci	r19, 0xFF	; 255
    1822:	86 2f       	mov	r24, r22
    1824:	90 e4       	ldi	r25, 0x40	; 64
    1826:	29 9f       	mul	r18, r25
    1828:	80 0d       	add	r24, r0
    182a:	11 24       	eor	r1, r1
    182c:	0e 94 bf 0b 	call	0x177e	; 0x177e <Lcd_sendCommand>
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	08 95       	ret
    1834:	85 e0       	ldi	r24, 0x05	; 5
    1836:	08 95       	ret
    1838:	83 e0       	ldi	r24, 0x03	; 3
    183a:	08 95       	ret
    183c:	82 e0       	ldi	r24, 0x02	; 2
    183e:	08 95       	ret

00001840 <Lcd_printChar>:
    1840:	cf 93       	push	r28
    1842:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <genu_LcdModuleState>
    1846:	96 30       	cpi	r25, 0x06	; 6
    1848:	a1 f4       	brne	.+40     	; 0x1872 <Lcd_printChar+0x32>
    184a:	c8 2f       	mov	r28, r24
    184c:	61 e0       	ldi	r22, 0x01	; 1
    184e:	87 e0       	ldi	r24, 0x07	; 7
    1850:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    1854:	8c 2f       	mov	r24, r28
    1856:	82 95       	swap	r24
    1858:	8f 70       	andi	r24, 0x0F	; 15
    185a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <Lcd_WriteData>
    185e:	0e 94 ac 0b 	call	0x1758	; 0x1758 <Lcd_EnableToggle>
    1862:	8c 2f       	mov	r24, r28
    1864:	8f 70       	andi	r24, 0x0F	; 15
    1866:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <Lcd_WriteData>
    186a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <Lcd_EnableToggle>
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	01 c0       	rjmp	.+2      	; 0x1874 <Lcd_printChar+0x34>
    1872:	85 e0       	ldi	r24, 0x05	; 5
    1874:	cf 91       	pop	r28
    1876:	08 95       	ret

00001878 <Lcd_printString>:
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	ec 01       	movw	r28, r24
    187e:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <genu_LcdModuleState>
    1882:	86 30       	cpi	r24, 0x06	; 6
    1884:	49 f4       	brne	.+18     	; 0x1898 <Lcd_printString+0x20>
    1886:	03 c0       	rjmp	.+6      	; 0x188e <Lcd_printString+0x16>
    1888:	21 96       	adiw	r28, 0x01	; 1
    188a:	0e 94 20 0c 	call	0x1840	; 0x1840 <Lcd_printChar>
    188e:	88 81       	ld	r24, Y
    1890:	81 11       	cpse	r24, r1
    1892:	fa cf       	rjmp	.-12     	; 0x1888 <Lcd_printString+0x10>
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	01 c0       	rjmp	.+2      	; 0x189a <Lcd_printString+0x22>
    1898:	85 e0       	ldi	r24, 0x05	; 5
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	08 95       	ret

000018a0 <Lcd_clear>:
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	0e 94 bf 0b 	call	0x177e	; 0x177e <Lcd_sendCommand>
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	08 95       	ret

000018aa <Lcd_printLCD>:
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	ec 01       	movw	r28, r24
    18b4:	8b 01       	movw	r16, r22
    18b6:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Lcd_clear>
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	0e 94 05 0c 	call	0x180a	; 0x180a <Lcd_setCursor>
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	89 f4       	brne	.+34     	; 0x18e8 <Lcd_printLCD+0x3e>
    18c6:	ce 01       	movw	r24, r28
    18c8:	0e 94 3c 0c 	call	0x1878	; 0x1878 <Lcd_printString>
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	71 f4       	brne	.+28     	; 0x18ec <Lcd_printLCD+0x42>
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	0e 94 05 0c 	call	0x180a	; 0x180a <Lcd_setCursor>
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	59 f4       	brne	.+22     	; 0x18f0 <Lcd_printLCD+0x46>
    18da:	c8 01       	movw	r24, r16
    18dc:	0e 94 3c 0c 	call	0x1878	; 0x1878 <Lcd_printString>
    18e0:	81 30       	cpi	r24, 0x01	; 1
    18e2:	39 f0       	breq	.+14     	; 0x18f2 <Lcd_printLCD+0x48>
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	05 c0       	rjmp	.+10     	; 0x18f2 <Lcd_printLCD+0x48>
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	03 c0       	rjmp	.+6      	; 0x18f2 <Lcd_printLCD+0x48>
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	01 c0       	rjmp	.+2      	; 0x18f2 <Lcd_printLCD+0x48>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	08 95       	ret

000018fc <Lcd_printDecimal>:
enuLcd_Status_t Lcd_printDecimal(uint16_t u16_num)
{
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	61 97       	sbiw	r28, 0x11	; 17
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, DEC);
    1910:	41 e0       	ldi	r20, 0x01	; 1
    1912:	be 01       	movw	r22, r28
    1914:	6f 5f       	subi	r22, 0xFF	; 255
    1916:	7f 4f       	sbci	r23, 0xFF	; 255
    1918:	0e 94 49 17 	call	0x2e92	; 0x2e92 <integerToString>
	Lcd_printString(au8_snum);
    191c:	ce 01       	movw	r24, r28
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	0e 94 3c 0c 	call	0x1878	; 0x1878 <Lcd_printString>
	return LCD_STATUS_ERROR_OK;
}
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	61 96       	adiw	r28, 0x11	; 17
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	de bf       	out	0x3e, r29	; 62
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	cd bf       	out	0x3d, r28	; 61
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	08 95       	ret

00001938 <LM35_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is already initialized */
	if (genu_LM35ModuleState == LM35_STATUS_INIT)
    1938:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <genu_LM35ModuleState>
    193c:	85 30       	cpi	r24, 0x05	; 5
    193e:	51 f0       	breq	.+20     	; 0x1954 <LM35_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
    1940:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <Adc_init>
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	29 f4       	brne	.+10     	; 0x1952 <LM35_init+0x1a>
		return LM35_STATUS_ERROR_NOK;
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
    1948:	85 e0       	ldi	r24, 0x05	; 5
    194a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <genu_LM35ModuleState>
	return LM35_STATUS_ERROR_OK;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
		return LM35_STATUS_ERROR_NOK;
    1952:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
	return LM35_STATUS_ERROR_OK;
}
    1954:	08 95       	ret

00001956 <LM35_readTemp>:
* Parameters (out): pu8_Temp - Pointer to a Char to hold the temperature.
* Return value: enuLM35_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current temperature and return in celsius.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLM35_Status_t LM35_readTemp(uint8_t * pu8_Temp)
{
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	00 d0       	rcall	.+0      	; 0x1960 <LM35_readTemp+0xa>
    1960:	00 d0       	rcall	.+0      	; 0x1962 <LM35_readTemp+0xc>
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	9c 01       	movw	r18, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
    1968:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <genu_LM35ModuleState>
    196c:	95 30       	cpi	r25, 0x05	; 5
    196e:	f1 f4       	brne	.+60     	; 0x19ac <LM35_readTemp+0x56>
	{
	return LM35_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
    1970:	21 15       	cp	r18, r1
    1972:	31 05       	cpc	r19, r1
    1974:	e9 f0       	breq	.+58     	; 0x19b0 <LM35_readTemp+0x5a>
    1976:	89 01       	movw	r16, r18
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
    1978:	19 82       	std	Y+1, r1	; 0x01
    197a:	1a 82       	std	Y+2, r1	; 0x02
    197c:	1b 82       	std	Y+3, r1	; 0x03
    197e:	1c 82       	std	Y+4, r1	; 0x04
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
    1980:	be 01       	movw	r22, r28
    1982:	6f 5f       	subi	r22, 0xFF	; 255
    1984:	7f 4f       	sbci	r23, 0xFF	; 255
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <Adc_start>
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	91 f4       	brne	.+36     	; 0x19b4 <LM35_readTemp+0x5e>
		return LM35_STATUS_ERROR_NOK;
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
    1990:	69 81       	ldd	r22, Y+1	; 0x01
    1992:	7a 81       	ldd	r23, Y+2	; 0x02
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	9c 81       	ldd	r25, Y+4	; 0x04
    1998:	2a e0       	ldi	r18, 0x0A	; 10
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	50 e0       	ldi	r21, 0x00	; 0
    19a0:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    19a4:	f8 01       	movw	r30, r16
    19a6:	20 83       	st	Z, r18
	return LM35_STATUS_ERROR_OK;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	05 c0       	rjmp	.+10     	; 0x19b6 <LM35_readTemp+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
	{
	return LM35_STATUS_NOT_INIT;
    19ac:	84 e0       	ldi	r24, 0x04	; 4
    19ae:	03 c0       	rjmp	.+6      	; 0x19b6 <LM35_readTemp+0x60>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
	{
		return LM35_STATUS_ERROR_NULL;
    19b0:	83 e0       	ldi	r24, 0x03	; 3
    19b2:	01 c0       	rjmp	.+2      	; 0x19b6 <LM35_readTemp+0x60>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
		return LM35_STATUS_ERROR_NOK;
    19b4:	80 e0       	ldi	r24, 0x00	; 0
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
	return LM35_STATUS_ERROR_OK;
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	08 95       	ret

000019c8 <Motor_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
    19c8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <gu8_MotorModuleStatus>
    19cc:	86 30       	cpi	r24, 0x06	; 6
    19ce:	49 f0       	breq	.+18     	; 0x19e2 <Motor_init+0x1a>
/**************************************************************************************/
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
    19d0:	0e 94 25 19 	call	0x324a	; 0x324a <SWPwm_Init>
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	39 f4       	brne	.+14     	; 0x19e6 <Motor_init+0x1e>
		return MOTOR_STATUS_ERROR_NOK;
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
    19d8:	86 e0       	ldi	r24, 0x06	; 6
    19da:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <gu8_MotorModuleStatus>
	return MOTOR_STATUS_ERROR_OK;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_INIT;
    19e2:	86 e0       	ldi	r24, 0x06	; 6
    19e4:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
		return MOTOR_STATUS_ERROR_NOK;
    19e6:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
	return MOTOR_STATUS_ERROR_OK;
}
    19e8:	08 95       	ret

000019ea <Motor_stop>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the motor.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to stop motor */
enuMotor_Status_t Motor_stop(uint8_t u8_motorID)
{
    19ea:	df 92       	push	r13
    19ec:	ef 92       	push	r14
    19ee:	ff 92       	push	r15
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    19f8:	81 11       	cpse	r24, r1
    19fa:	5d c0       	rjmp	.+186    	; 0x1ab6 <Motor_stop+0xcc>
    19fc:	d8 2e       	mov	r13, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Stop the Motor by driving the pins to LOW */
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    19fe:	08 2f       	mov	r16, r24
    1a00:	10 e0       	ldi	r17, 0x00	; 0
    1a02:	78 01       	movw	r14, r16
    1a04:	ee 0c       	add	r14, r14
    1a06:	ff 1c       	adc	r15, r15
    1a08:	ee 0c       	add	r14, r14
    1a0a:	ff 1c       	adc	r15, r15
    1a0c:	c7 01       	movw	r24, r14
    1a0e:	80 0f       	add	r24, r16
    1a10:	91 1f       	adc	r25, r17
    1a12:	ec 01       	movw	r28, r24
    1a14:	c8 5c       	subi	r28, 0xC8	; 200
    1a16:	db 4f       	sbci	r29, 0xFB	; 251
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1a28:	e0 e0       	ldi	r30, 0x00	; 0
    1a2a:	1c c0       	rjmp	.+56     	; 0x1a64 <Motor_stop+0x7a>
	{
		if(u8_loopIndex == u8_motorID) /* Skip the current motor */
    1a2c:	ed 15       	cp	r30, r13
    1a2e:	c9 f0       	breq	.+50     	; 0x1a62 <Motor_stop+0x78>
		{
			continue;
		}
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
    1a30:	d8 01       	movw	r26, r16
    1a32:	aa 0f       	add	r26, r26
    1a34:	bb 1f       	adc	r27, r27
    1a36:	aa 0f       	add	r26, r26
    1a38:	bb 1f       	adc	r27, r27
    1a3a:	a0 0f       	add	r26, r16
    1a3c:	b1 1f       	adc	r27, r17
    1a3e:	a8 5c       	subi	r26, 0xC8	; 200
    1a40:	bb 4f       	sbci	r27, 0xFB	; 251
    1a42:	2c 91       	ld	r18, X
    1a44:	8e 2f       	mov	r24, r30
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	dc 01       	movw	r26, r24
    1a4a:	aa 0f       	add	r26, r26
    1a4c:	bb 1f       	adc	r27, r27
    1a4e:	aa 0f       	add	r26, r26
    1a50:	bb 1f       	adc	r27, r27
    1a52:	8a 0f       	add	r24, r26
    1a54:	9b 1f       	adc	r25, r27
    1a56:	dc 01       	movw	r26, r24
    1a58:	a8 5c       	subi	r26, 0xC8	; 200
    1a5a:	bb 4f       	sbci	r27, 0xFB	; 251
    1a5c:	8c 91       	ld	r24, X
    1a5e:	28 17       	cp	r18, r24
    1a60:	19 f0       	breq	.+6      	; 0x1a68 <Motor_stop+0x7e>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1a62:	ef 5f       	subi	r30, 0xFF	; 255
    1a64:	ee 23       	and	r30, r30
    1a66:	11 f3       	breq	.-60     	; 0x1a2c <Motor_stop+0x42>
			break;
		}
	}
	
	
	if(u8_loopIndex == MOTORS_USED_NUM)
    1a68:	e1 30       	cpi	r30, 0x01	; 1
    1a6a:	69 f4       	brne	.+26     	; 0x1a86 <Motor_stop+0x9c>
	{ /* In case that there isn't any motor using the same PWM Channel --> Stop the PWM */
		SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	ee 0f       	add	r30, r30
    1a70:	ff 1f       	adc	r31, r31
    1a72:	ee 0f       	add	r30, r30
    1a74:	ff 1f       	adc	r31, r31
    1a76:	e0 0f       	add	r30, r16
    1a78:	f1 1f       	adc	r31, r17
    1a7a:	e8 5c       	subi	r30, 0xC8	; 200
    1a7c:	fb 4f       	sbci	r31, 0xFB	; 251
    1a7e:	80 81       	ld	r24, Z
    1a80:	0e 94 75 1a 	call	0x34ea	; 0x34ea <SWPwm_Stop>
    1a84:	12 c0       	rjmp	.+36     	; 0x1aaa <Motor_stop+0xc0>
	}else
	{/* In case that there is another motor using the same PWM Channel */
		if (gau8_MotorsState[u8_loopIndex] == MOTOR_STOPPED) /* Check if the other motor is not running */
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	e3 57       	subi	r30, 0x73	; 115
    1a8a:	fb 4f       	sbci	r31, 0xFB	; 251
    1a8c:	80 81       	ld	r24, Z
    1a8e:	81 11       	cpse	r24, r1
    1a90:	0c c0       	rjmp	.+24     	; 0x1aaa <Motor_stop+0xc0>
		{/* In case that the other motor is not running --> Stop the PWM */
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1a92:	f8 01       	movw	r30, r16
    1a94:	ee 0f       	add	r30, r30
    1a96:	ff 1f       	adc	r31, r31
    1a98:	ee 0f       	add	r30, r30
    1a9a:	ff 1f       	adc	r31, r31
    1a9c:	e0 0f       	add	r30, r16
    1a9e:	f1 1f       	adc	r31, r17
    1aa0:	e8 5c       	subi	r30, 0xC8	; 200
    1aa2:	fb 4f       	sbci	r31, 0xFB	; 251
    1aa4:	80 81       	ld	r24, Z
    1aa6:	0e 94 75 1a 	call	0x34ea	; 0x34ea <SWPwm_Stop>
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
    1aaa:	f8 01       	movw	r30, r16
    1aac:	e3 57       	subi	r30, 0x73	; 115
    1aae:	fb 4f       	sbci	r31, 0xFB	; 251
    1ab0:	10 82       	st	Z, r1
	return MOTOR_STATUS_ERROR_OK;
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	01 c0       	rjmp	.+2      	; 0x1ab8 <Motor_stop+0xce>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    1ab6:	82 e0       	ldi	r24, 0x02	; 2
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
	return MOTOR_STATUS_ERROR_OK;
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	1f 91       	pop	r17
    1abe:	0f 91       	pop	r16
    1ac0:	ff 90       	pop	r15
    1ac2:	ef 90       	pop	r14
    1ac4:	df 90       	pop	r13
    1ac6:	08 95       	ret

00001ac8 <Motor_run>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Move the motor in the given direction.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to move the motor forward with given speed in % */
enuMotor_Status_t Motor_run(uint8_t u8_motorID, uint8_t u8_speed, uint8_t u8_direction)
{
    1ac8:	ff 92       	push	r15
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
    1ad2:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <gu8_MotorModuleStatus>
    1ad6:	96 30       	cpi	r25, 0x06	; 6
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <Motor_run+0x14>
    1ada:	57 c0       	rjmp	.+174    	; 0x1b8a <Motor_run+0xc2>
	{
		return MOTOR_STATUS_UNINIT;
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    1adc:	81 11       	cpse	r24, r1
    1ade:	57 c0       	rjmp	.+174    	; 0x1b8e <Motor_run+0xc6>
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
    1ae0:	65 36       	cpi	r22, 0x65	; 101
    1ae2:	08 f0       	brcs	.+2      	; 0x1ae6 <Motor_run+0x1e>
    1ae4:	56 c0       	rjmp	.+172    	; 0x1b92 <Motor_run+0xca>
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
    1ae6:	42 30       	cpi	r20, 0x02	; 2
    1ae8:	08 f0       	brcs	.+2      	; 0x1aec <Motor_run+0x24>
    1aea:	55 c0       	rjmp	.+170    	; 0x1b96 <Motor_run+0xce>
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
    1aec:	08 2f       	mov	r16, r24
    1aee:	10 e0       	ldi	r17, 0x00	; 0
    1af0:	f8 01       	movw	r30, r16
    1af2:	e3 57       	subi	r30, 0x73	; 115
    1af4:	fb 4f       	sbci	r31, 0xFB	; 251
    1af6:	90 81       	ld	r25, Z
    1af8:	91 30       	cpi	r25, 0x01	; 1
    1afa:	09 f4       	brne	.+2      	; 0x1afe <Motor_run+0x36>
    1afc:	4e c0       	rjmp	.+156    	; 0x1b9a <Motor_run+0xd2>
    1afe:	f6 2e       	mov	r15, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_speed == 0) 
    1b00:	61 11       	cpse	r22, r1
    1b02:	04 c0       	rjmp	.+8      	; 0x1b0c <Motor_run+0x44>
	{
		Motor_stop(u8_motorID);
    1b04:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Motor_stop>
		return MOTOR_STATUS_ERROR_OK;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	48 c0       	rjmp	.+144    	; 0x1b9c <Motor_run+0xd4>
	}
	if(u8_direction == MOTOR_DIR_CLK_WISE) /* Activate the Motor in the Clock Wise Direction */
    1b0c:	41 11       	cpse	r20, r1
    1b0e:	12 c0       	rjmp	.+36     	; 0x1b34 <Motor_run+0x6c>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_HIGH);
    1b10:	25 e0       	ldi	r18, 0x05	; 5
    1b12:	20 9f       	mul	r18, r16
    1b14:	c0 01       	movw	r24, r0
    1b16:	21 9f       	mul	r18, r17
    1b18:	90 0d       	add	r25, r0
    1b1a:	11 24       	eor	r1, r1
    1b1c:	ec 01       	movw	r28, r24
    1b1e:	c8 5c       	subi	r28, 0xC8	; 200
    1b20:	db 4f       	sbci	r29, 0xFB	; 251
    1b22:	61 e0       	ldi	r22, 0x01	; 1
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    1b32:	13 c0       	rjmp	.+38     	; 0x1b5a <Motor_run+0x92>
	}else if(u8_direction == MOTOR_DIR_ANTI_CLK_WISE) /* Activate the Motor in the Anti Clock Wise Direction */
    1b34:	41 30       	cpi	r20, 0x01	; 1
    1b36:	89 f4       	brne	.+34     	; 0x1b5a <Motor_run+0x92>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    1b38:	25 e0       	ldi	r18, 0x05	; 5
    1b3a:	20 9f       	mul	r18, r16
    1b3c:	c0 01       	movw	r24, r0
    1b3e:	21 9f       	mul	r18, r17
    1b40:	90 0d       	add	r25, r0
    1b42:	11 24       	eor	r1, r1
    1b44:	ec 01       	movw	r28, r24
    1b46:	c8 5c       	subi	r28, 0xC8	; 200
    1b48:	db 4f       	sbci	r29, 0xFB	; 251
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_HIGH);
    1b52:	61 e0       	ldi	r22, 0x01	; 1
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
	}
	
	/* Change the state of the Motor to Running */
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
    1b5a:	f8 01       	movw	r30, r16
    1b5c:	e3 57       	subi	r30, 0x73	; 115
    1b5e:	fb 4f       	sbci	r31, 0xFB	; 251
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	80 83       	st	Z, r24
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
    1b64:	f8 01       	movw	r30, r16
    1b66:	ee 0f       	add	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	ee 0f       	add	r30, r30
    1b6c:	ff 1f       	adc	r31, r31
    1b6e:	e0 0f       	add	r30, r16
    1b70:	f1 1f       	adc	r31, r17
    1b72:	e8 5c       	subi	r30, 0xC8	; 200
    1b74:	fb 4f       	sbci	r31, 0xFB	; 251
    1b76:	43 81       	ldd	r20, Z+3	; 0x03
    1b78:	54 81       	ldd	r21, Z+4	; 0x04
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	2f 2d       	mov	r18, r15
    1b80:	80 81       	ld	r24, Z
    1b82:	0e 94 41 19 	call	0x3282	; 0x3282 <SWPwm_Start>
	
	return MOTOR_STATUS_ERROR_OK;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	09 c0       	rjmp	.+18     	; 0x1b9c <Motor_run+0xd4>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_UNINIT;
    1b8a:	87 e0       	ldi	r24, 0x07	; 7
    1b8c:	07 c0       	rjmp	.+14     	; 0x1b9c <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    1b8e:	82 e0       	ldi	r24, 0x02	; 2
    1b90:	05 c0       	rjmp	.+10     	; 0x1b9c <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
    1b92:	83 e0       	ldi	r24, 0x03	; 3
    1b94:	03 c0       	rjmp	.+6      	; 0x1b9c <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
    1b96:	84 e0       	ldi	r24, 0x04	; 4
    1b98:	01 c0       	rjmp	.+2      	; 0x1b9c <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
	{
		return MOTOR_STATUS_ERROR_RUNNING;
    1b9a:	85 e0       	ldi	r24, 0x05	; 5
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
	
	return MOTOR_STATUS_ERROR_OK;
}
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	1f 91       	pop	r17
    1ba2:	0f 91       	pop	r16
    1ba4:	ff 90       	pop	r15
    1ba6:	08 95       	ret

00001ba8 <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
    1bac:	c0 91 8f 04 	lds	r28, 0x048F	; 0x80048f <gu8_counter>
    1bb0:	d0 e0       	ldi	r29, 0x00	; 0
    1bb2:	0e 94 1a 1b 	call	0x3634	; 0x3634 <Uart_DataRegister>
    1bb6:	c0 57       	subi	r28, 0x70	; 112
    1bb8:	db 4f       	sbci	r29, 0xFB	; 251
    1bba:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
    1bbc:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <gu8_counter>
    1bc0:	e9 2f       	mov	r30, r25
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	e0 57       	subi	r30, 0x70	; 112
    1bc6:	fb 4f       	sbci	r31, 0xFB	; 251
    1bc8:	80 81       	ld	r24, Z
    1bca:	8d 30       	cpi	r24, 0x0D	; 13
    1bcc:	71 f4       	brne	.+28     	; 0x1bea <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    1bce:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
    1bd2:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <gu8_counter>
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	e0 57       	subi	r30, 0x70	; 112
    1bda:	fb 4f       	sbci	r31, 0xFB	; 251
    1bdc:	10 82       	st	Z, r1
		gu8_counter = 0;
    1bde:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <gu8_counter>
		gu8_flag = 1;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <gu8_flag>
    1be8:	1d c0       	rjmp	.+58     	; 0x1c24 <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
    1bea:	88 30       	cpi	r24, 0x08	; 8
    1bec:	51 f4       	brne	.+20     	; 0x1c02 <Uart_RXC_ISR+0x5a>
    1bee:	99 23       	and	r25, r25
    1bf0:	41 f0       	breq	.+16     	; 0x1c02 <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    1bf2:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <Uart_sendByte>
		gu8_counter--;
    1bf6:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <gu8_counter>
    1bfa:	81 50       	subi	r24, 0x01	; 1
    1bfc:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <gu8_counter>
    1c00:	11 c0       	rjmp	.+34     	; 0x1c24 <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
    1c02:	88 30       	cpi	r24, 0x08	; 8
    1c04:	79 f0       	breq	.+30     	; 0x1c24 <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
    1c06:	90 91 8f 05 	lds	r25, 0x058F	; 0x80058f <gu8_visibility>
    1c0a:	91 30       	cpi	r25, 0x01	; 1
    1c0c:	21 f4       	brne	.+8      	; 0x1c16 <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
    1c0e:	8a e2       	ldi	r24, 0x2A	; 42
    1c10:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <Uart_sendByte>
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
    1c16:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <Uart_sendByte>
		}
		gu8_counter++;
    1c1a:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <gu8_counter>
    1c1e:	8f 5f       	subi	r24, 0xFF	; 255
    1c20:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <gu8_counter>
	}
}
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	08 95       	ret

00001c2a <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
    1c2a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <genu_TerminalModuleState>
    1c2e:	83 30       	cpi	r24, 0x03	; 3
    1c30:	81 f0       	breq	.+32     	; 0x1c52 <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
    1c32:	0e 94 bd 1a 	call	0x357a	; 0x357a <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
    1c36:	81 30       	cpi	r24, 0x01	; 1
    1c38:	11 f0       	breq	.+4      	; 0x1c3e <Terminal_init+0x14>
    1c3a:	87 30       	cpi	r24, 0x07	; 7
    1c3c:	49 f4       	brne	.+18     	; 0x1c50 <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
    1c3e:	84 ed       	ldi	r24, 0xD4	; 212
    1c40:	9d e0       	ldi	r25, 0x0D	; 13
    1c42:	0e 94 05 1b 	call	0x360a	; 0x360a <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
    1c46:	83 e0       	ldi	r24, 0x03	; 3
    1c48:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
    1c50:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
    1c52:	08 95       	ret

00001c54 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	81 f0       	breq	.+32     	; 0x1c7c <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    1c5c:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <genu_TerminalModuleState>
    1c60:	22 30       	cpi	r18, 0x02	; 2
    1c62:	79 f0       	breq	.+30     	; 0x1c82 <Terminal_Out+0x2e>
    1c64:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
    1c66:	0e 94 ed 16 	call	0x2dda	; 0x2dda <stringLength>
    1c6a:	68 2f       	mov	r22, r24
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	ce 01       	movw	r24, r28
    1c70:	0e 94 de 1a 	call	0x35bc	; 0x35bc <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	21 f0       	breq	.+8      	; 0x1c80 <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	03 c0       	rjmp	.+6      	; 0x1c82 <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    1c7c:	24 e0       	ldi	r18, 0x04	; 4
    1c7e:	01 c0       	rjmp	.+2      	; 0x1c82 <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
    1c80:	21 e0       	ldi	r18, 0x01	; 1
}
    1c82:	82 2f       	mov	r24, r18
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	08 95       	ret

00001c8a <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
    1c8a:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
    1c8c:	89 2b       	or	r24, r25
    1c8e:	a1 f0       	breq	.+40     	; 0x1cb8 <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    1c90:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <genu_TerminalModuleState>
    1c94:	82 30       	cpi	r24, 0x02	; 2
    1c96:	99 f0       	breq	.+38     	; 0x1cbe <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
    1c98:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <gu8_flag>
    1c9c:	81 30       	cpi	r24, 0x01	; 1
    1c9e:	71 f4       	brne	.+28     	; 0x1cbc <Terminal_In+0x32>
	{
		gu8_flag = 0;
    1ca0:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
    1ca4:	80 e9       	ldi	r24, 0x90	; 144
    1ca6:	94 e0       	ldi	r25, 0x04	; 4
    1ca8:	0e 94 38 17 	call	0x2e70	; 0x2e70 <stringCopy>
		EmptyString(gau8_data);
    1cac:	80 e9       	ldi	r24, 0x90	; 144
    1cae:	94 e0       	ldi	r25, 0x04	; 4
    1cb0:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
    1cb4:	85 e0       	ldi	r24, 0x05	; 5
    1cb6:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    1cb8:	84 e0       	ldi	r24, 0x04	; 4
    1cba:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
}
    1cbe:	08 95       	ret

00001cc0 <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
    1cc6:	08 95       	ret

00001cc8 <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
    1cc8:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	08 95       	ret

00001cd0 <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
    1cd0:	0e 94 aa 07 	call	0xf54	; 0xf54 <App_start>
    1cd4:	ff cf       	rjmp	.-2      	; 0x1cd4 <main+0x4>

00001cd6 <Adc_init>:
		f32_Resolution = (1000*ADC_AREF_VALUE)/ADC_STEPS_NUM;
	}
	*pu32_data = u16_Result*f32_Resolution;
		
	return ADC_STATUS_ERROR_OK;
}
    1cd6:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <genuAdc_Status>
    1cda:	87 30       	cpi	r24, 0x07	; 7
    1cdc:	11 f1       	breq	.+68     	; 0x1d22 <Adc_init+0x4c>
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	13 c0       	rjmp	.+38     	; 0x1d08 <Adc_init+0x32>
    1ce2:	3b b3       	in	r19, 0x1b	; 27
    1ce4:	e2 2f       	mov	r30, r18
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	ee 0f       	add	r30, r30
    1cea:	ff 1f       	adc	r31, r31
    1cec:	ed 57       	subi	r30, 0x7D	; 125
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	00 80       	ld	r0, Z
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <Adc_init+0x26>
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	0a 94       	dec	r0
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <Adc_init+0x22>
    1d00:	80 95       	com	r24
    1d02:	83 23       	and	r24, r19
    1d04:	8b bb       	out	0x1b, r24	; 27
    1d06:	2f 5f       	subi	r18, 0xFF	; 255
    1d08:	22 23       	and	r18, r18
    1d0a:	59 f3       	breq	.-42     	; 0x1ce2 <Adc_init+0xc>
    1d0c:	97 e0       	ldi	r25, 0x07	; 7
    1d0e:	96 b9       	out	0x06, r25	; 6
    1d10:	86 b1       	in	r24, 0x06	; 6
    1d12:	8f 7d       	andi	r24, 0xDF	; 223
    1d14:	86 b9       	out	0x06, r24	; 6
    1d16:	86 b1       	in	r24, 0x06	; 6
    1d18:	86 b9       	out	0x06, r24	; 6
    1d1a:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <genuAdc_Status>
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	08 95       	ret
    1d22:	88 e0       	ldi	r24, 0x08	; 8
    1d24:	08 95       	ret

00001d26 <Adc_start>:
    1d26:	cf 92       	push	r12
    1d28:	df 92       	push	r13
    1d2a:	ef 92       	push	r14
    1d2c:	ff 92       	push	r15
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <genuAdc_Status>
    1d36:	97 30       	cpi	r25, 0x07	; 7
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <Adc_start+0x16>
    1d3a:	61 c0       	rjmp	.+194    	; 0x1dfe <Adc_start+0xd8>
    1d3c:	61 15       	cp	r22, r1
    1d3e:	71 05       	cpc	r23, r1
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <Adc_start+0x1e>
    1d42:	5f c0       	rjmp	.+190    	; 0x1e02 <Adc_start+0xdc>
    1d44:	37 b1       	in	r19, 0x07	; 7
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	fc 01       	movw	r30, r24
    1d4a:	ee 0f       	add	r30, r30
    1d4c:	ff 1f       	adc	r31, r31
    1d4e:	ed 57       	subi	r30, 0x7D	; 125
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	20 81       	ld	r18, Z
    1d54:	23 2b       	or	r18, r19
    1d56:	27 b9       	out	0x07, r18	; 7
    1d58:	47 b1       	in	r20, 0x07	; 7
    1d5a:	31 81       	ldd	r19, Z+1	; 0x01
    1d5c:	50 e4       	ldi	r21, 0x40	; 64
    1d5e:	35 9f       	mul	r19, r21
    1d60:	90 01       	movw	r18, r0
    1d62:	11 24       	eor	r1, r1
    1d64:	24 2b       	or	r18, r20
    1d66:	27 b9       	out	0x07, r18	; 7
    1d68:	26 b1       	in	r18, 0x06	; 6
    1d6a:	20 68       	ori	r18, 0x80	; 128
    1d6c:	26 b9       	out	0x06, r18	; 6
    1d6e:	26 b1       	in	r18, 0x06	; 6
    1d70:	20 64       	ori	r18, 0x40	; 64
    1d72:	26 b9       	out	0x06, r18	; 6
    1d74:	34 9b       	sbis	0x06, 4	; 6
    1d76:	fe cf       	rjmp	.-4      	; 0x1d74 <Adc_start+0x4e>
    1d78:	44 b1       	in	r20, 0x04	; 4
    1d7a:	25 b1       	in	r18, 0x05	; 5
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	32 2f       	mov	r19, r18
    1d80:	22 27       	eor	r18, r18
    1d82:	24 2b       	or	r18, r20
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	fc 01       	movw	r30, r24
    1d8a:	ed 57       	subi	r30, 0x7D	; 125
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	81 81       	ldd	r24, Z+1	; 0x01
    1d90:	83 30       	cpi	r24, 0x03	; 3
    1d92:	41 f0       	breq	.+16     	; 0x1da4 <Adc_start+0x7e>
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	69 f0       	breq	.+26     	; 0x1db2 <Adc_start+0x8c>
    1d98:	88 23       	and	r24, r24
    1d9a:	a1 f0       	breq	.+40     	; 0x1dc4 <Adc_start+0x9e>
    1d9c:	c1 2c       	mov	r12, r1
    1d9e:	d1 2c       	mov	r13, r1
    1da0:	76 01       	movw	r14, r12
    1da2:	18 c0       	rjmp	.+48     	; 0x1dd4 <Adc_start+0xae>
    1da4:	c1 2c       	mov	r12, r1
    1da6:	d1 2c       	mov	r13, r1
    1da8:	76 01       	movw	r14, r12
    1daa:	68 94       	set
    1dac:	e5 f8       	bld	r14, 5
    1dae:	f6 f8       	bld	r15, 6
    1db0:	11 c0       	rjmp	.+34     	; 0x1dd4 <Adc_start+0xae>
    1db2:	0f 2e       	mov	r0, r31
    1db4:	c1 2c       	mov	r12, r1
    1db6:	f0 e4       	ldi	r31, 0x40	; 64
    1db8:	df 2e       	mov	r13, r31
    1dba:	fc e9       	ldi	r31, 0x9C	; 156
    1dbc:	ef 2e       	mov	r14, r31
    1dbe:	fd 2c       	mov	r15, r13
    1dc0:	f0 2d       	mov	r31, r0
    1dc2:	08 c0       	rjmp	.+16     	; 0x1dd4 <Adc_start+0xae>
    1dc4:	0f 2e       	mov	r0, r31
    1dc6:	c1 2c       	mov	r12, r1
    1dc8:	f0 e4       	ldi	r31, 0x40	; 64
    1dca:	df 2e       	mov	r13, r31
    1dcc:	fc e9       	ldi	r31, 0x9C	; 156
    1dce:	ef 2e       	mov	r14, r31
    1dd0:	fd 2c       	mov	r15, r13
    1dd2:	f0 2d       	mov	r31, r0
    1dd4:	eb 01       	movw	r28, r22
    1dd6:	b9 01       	movw	r22, r18
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	0e 94 a4 1c 	call	0x3948	; 0x3948 <__floatunsisf>
    1de0:	a7 01       	movw	r20, r14
    1de2:	96 01       	movw	r18, r12
    1de4:	0e 94 56 1d 	call	0x3aac	; 0x3aac <__mulsf3>
    1de8:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__fixunssfsi>
    1dec:	68 83       	st	Y, r22
    1dee:	79 83       	std	Y+1, r23	; 0x01
    1df0:	8a 83       	std	Y+2, r24	; 0x02
    1df2:	9b 83       	std	Y+3, r25	; 0x03
    1df4:	86 b1       	in	r24, 0x06	; 6
    1df6:	80 61       	ori	r24, 0x10	; 16
    1df8:	86 b9       	out	0x06, r24	; 6
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	03 c0       	rjmp	.+6      	; 0x1e04 <Adc_start+0xde>
    1dfe:	86 e0       	ldi	r24, 0x06	; 6
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <Adc_start+0xde>
    1e02:	85 e0       	ldi	r24, 0x05	; 5
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	ff 90       	pop	r15
    1e0a:	ef 90       	pop	r14
    1e0c:	df 90       	pop	r13
    1e0e:	cf 90       	pop	r12
    1e10:	08 95       	ret

00001e12 <__vector_16>:

ISR(ADC_IRQ)
{
    1e12:	1f 92       	push	r1
    1e14:	0f 92       	push	r0
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	0f 92       	push	r0
    1e1a:	11 24       	eor	r1, r1
    1e1c:	2f 93       	push	r18
    1e1e:	3f 93       	push	r19
    1e20:	4f 93       	push	r20
    1e22:	5f 93       	push	r21
    1e24:	6f 93       	push	r22
    1e26:	7f 93       	push	r23
    1e28:	8f 93       	push	r24
    1e2a:	9f 93       	push	r25
    1e2c:	af 93       	push	r26
    1e2e:	bf 93       	push	r27
    1e30:	ef 93       	push	r30
    1e32:	ff 93       	push	r31
	(*ADC_CallBackPtr)();
    1e34:	e0 91 90 05 	lds	r30, 0x0590	; 0x800590 <ADC_CallBackPtr>
    1e38:	f0 91 91 05 	lds	r31, 0x0591	; 0x800591 <ADC_CallBackPtr+0x1>
    1e3c:	09 95       	icall
    1e3e:	ff 91       	pop	r31
    1e40:	ef 91       	pop	r30
    1e42:	bf 91       	pop	r27
    1e44:	af 91       	pop	r26
    1e46:	9f 91       	pop	r25
    1e48:	8f 91       	pop	r24
    1e4a:	7f 91       	pop	r23
    1e4c:	6f 91       	pop	r22
    1e4e:	5f 91       	pop	r21
    1e50:	4f 91       	pop	r20
    1e52:	3f 91       	pop	r19
    1e54:	2f 91       	pop	r18
    1e56:	0f 90       	pop	r0
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	0f 90       	pop	r0
    1e5c:	1f 90       	pop	r1
    1e5e:	18 95       	reti

00001e60 <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
    1e60:	2f 92       	push	r2
    1e62:	3f 92       	push	r3
    1e64:	4f 92       	push	r4
    1e66:	5f 92       	push	r5
    1e68:	6f 92       	push	r6
    1e6a:	7f 92       	push	r7
    1e6c:	8f 92       	push	r8
    1e6e:	9f 92       	push	r9
    1e70:	af 92       	push	r10
    1e72:	bf 92       	push	r11
    1e74:	cf 92       	push	r12
    1e76:	df 92       	push	r13
    1e78:	ef 92       	push	r14
    1e7a:	ff 92       	push	r15
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <Delay_ms+0x26>
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <Delay_ms+0x28>
    1e88:	1f 92       	push	r1
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	22 2e       	mov	r2, r18
    1e90:	33 2e       	mov	r3, r19
    1e92:	44 2e       	mov	r4, r20
    1e94:	55 2e       	mov	r5, r21
    1e96:	66 2e       	mov	r6, r22
    1e98:	79 83       	std	Y+1, r23	; 0x01
    1e9a:	8a 83       	std	Y+2, r24	; 0x02
    1e9c:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    1e9e:	91 2c       	mov	r9, r1
    1ea0:	1d 82       	std	Y+5, r1	; 0x05
    1ea2:	1c 82       	std	Y+4, r1	; 0x04
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	e0 e0       	ldi	r30, 0x00	; 0
    1eaa:	71 2c       	mov	r7, r1
    1eac:	81 2c       	mov	r8, r1
    1eae:	3d c0       	rjmp	.+122    	; 0x1f2a <Delay_ms+0xca>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
    1eb0:	2c 2d       	mov	r18, r12
    1eb2:	3d 2d       	mov	r19, r13
    1eb4:	4e 2d       	mov	r20, r14
    1eb6:	5f 2d       	mov	r21, r15
    1eb8:	60 2f       	mov	r22, r16
    1eba:	71 2f       	mov	r23, r17
    1ebc:	8a 2d       	mov	r24, r10
    1ebe:	9b 2d       	mov	r25, r11
    1ec0:	a1 e0       	ldi	r26, 0x01	; 1
    1ec2:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__adddi3_s8>
    1ec6:	c2 2e       	mov	r12, r18
    1ec8:	d3 2e       	mov	r13, r19
    1eca:	e4 2e       	mov	r14, r20
    1ecc:	f5 2e       	mov	r15, r21
    1ece:	06 2f       	mov	r16, r22
    1ed0:	17 2f       	mov	r17, r23
    1ed2:	a8 2e       	mov	r10, r24
    1ed4:	b9 2e       	mov	r11, r25
    1ed6:	08 c0       	rjmp	.+16     	; 0x1ee8 <Delay_ms+0x88>
    1ed8:	c1 2c       	mov	r12, r1
    1eda:	d1 2c       	mov	r13, r1
    1edc:	e1 2c       	mov	r14, r1
    1ede:	f1 2c       	mov	r15, r1
    1ee0:	00 e0       	ldi	r16, 0x00	; 0
    1ee2:	10 e0       	ldi	r17, 0x00	; 0
    1ee4:	a1 2c       	mov	r10, r1
    1ee6:	b1 2c       	mov	r11, r1
    1ee8:	2c 2d       	mov	r18, r12
    1eea:	3d 2d       	mov	r19, r13
    1eec:	4e 2d       	mov	r20, r14
    1eee:	5f 2d       	mov	r21, r15
    1ef0:	60 2f       	mov	r22, r16
    1ef2:	71 2f       	mov	r23, r17
    1ef4:	8a 2d       	mov	r24, r10
    1ef6:	9b 2d       	mov	r25, r11
    1ef8:	ac e0       	ldi	r26, 0x0C	; 12
    1efa:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__cmpdi2_s8>
    1efe:	c1 f2       	breq	.-80     	; 0x1eb0 <Delay_ms+0x50>
    1f00:	b8 f2       	brcs	.-82     	; 0x1eb0 <Delay_ms+0x50>
    1f02:	8c 81       	ldd	r24, Y+4	; 0x04

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    1f04:	29 2d       	mov	r18, r9
    1f06:	3d 81       	ldd	r19, Y+5	; 0x05
    1f08:	48 2f       	mov	r20, r24
    1f0a:	5b 2f       	mov	r21, r27
    1f0c:	6f 2f       	mov	r22, r31
    1f0e:	7e 2f       	mov	r23, r30
    1f10:	87 2d       	mov	r24, r7
    1f12:	98 2d       	mov	r25, r8
    1f14:	a1 e0       	ldi	r26, 0x01	; 1
    1f16:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__adddi3_s8>
    1f1a:	92 2e       	mov	r9, r18
    1f1c:	3d 83       	std	Y+5, r19	; 0x05
    1f1e:	4c 83       	std	Y+4, r20	; 0x04
    1f20:	b5 2f       	mov	r27, r21
    1f22:	f6 2f       	mov	r31, r22
    1f24:	e7 2f       	mov	r30, r23
    1f26:	78 2e       	mov	r7, r24
    1f28:	89 2e       	mov	r8, r25
    1f2a:	29 2d       	mov	r18, r9
    1f2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f2e:	4c 81       	ldd	r20, Y+4	; 0x04
    1f30:	5b 2f       	mov	r21, r27
    1f32:	6f 2f       	mov	r22, r31
    1f34:	7e 2f       	mov	r23, r30
    1f36:	87 2d       	mov	r24, r7
    1f38:	98 2d       	mov	r25, r8
    1f3a:	a2 2c       	mov	r10, r2
    1f3c:	b3 2c       	mov	r11, r3
    1f3e:	c4 2c       	mov	r12, r4
    1f40:	d5 2c       	mov	r13, r5
    1f42:	e6 2c       	mov	r14, r6
    1f44:	f9 80       	ldd	r15, Y+1	; 0x01
    1f46:	0a 81       	ldd	r16, Y+2	; 0x02
    1f48:	1b 81       	ldd	r17, Y+3	; 0x03
    1f4a:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__cmpdi2>
    1f4e:	20 f2       	brcs	.-120    	; 0x1ed8 <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	1f 91       	pop	r17
    1f60:	0f 91       	pop	r16
    1f62:	ff 90       	pop	r15
    1f64:	ef 90       	pop	r14
    1f66:	df 90       	pop	r13
    1f68:	cf 90       	pop	r12
    1f6a:	bf 90       	pop	r11
    1f6c:	af 90       	pop	r10
    1f6e:	9f 90       	pop	r9
    1f70:	8f 90       	pop	r8
    1f72:	7f 90       	pop	r7
    1f74:	6f 90       	pop	r6
    1f76:	5f 90       	pop	r5
    1f78:	4f 90       	pop	r4
    1f7a:	3f 90       	pop	r3
    1f7c:	2f 90       	pop	r2
    1f7e:	08 95       	ret

00001f80 <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
    1f80:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
    1f82:	89 2b       	or	r24, r25
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <Dio_init+0x8>
    1f86:	e4 c0       	rjmp	.+456    	; 0x2150 <Dio_init+0x1d0>
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	d7 c0       	rjmp	.+430    	; 0x213a <Dio_init+0x1ba>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
    1f8c:	e9 2f       	mov	r30, r25
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	ee 0f       	add	r30, r30
    1f92:	ff 1f       	adc	r31, r31
    1f94:	ee 0f       	add	r30, r30
    1f96:	ff 1f       	adc	r31, r31
    1f98:	e4 0f       	add	r30, r20
    1f9a:	f5 1f       	adc	r31, r21
    1f9c:	31 81       	ldd	r19, Z+1	; 0x01
    1f9e:	38 30       	cpi	r19, 0x08	; 8
    1fa0:	08 f0       	brcs	.+2      	; 0x1fa4 <Dio_init+0x24>
    1fa2:	d8 c0       	rjmp	.+432    	; 0x2154 <Dio_init+0x1d4>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
    1fa4:	20 81       	ld	r18, Z
    1fa6:	21 30       	cpi	r18, 0x01	; 1
    1fa8:	c1 f1       	breq	.+112    	; 0x201a <Dio_init+0x9a>
    1faa:	38 f0       	brcs	.+14     	; 0x1fba <Dio_init+0x3a>
    1fac:	22 30       	cpi	r18, 0x02	; 2
    1fae:	09 f4       	brne	.+2      	; 0x1fb2 <Dio_init+0x32>
    1fb0:	64 c0       	rjmp	.+200    	; 0x207a <Dio_init+0xfa>
    1fb2:	23 30       	cpi	r18, 0x03	; 3
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <Dio_init+0x38>
    1fb6:	91 c0       	rjmp	.+290    	; 0x20da <Dio_init+0x15a>
    1fb8:	cf c0       	rjmp	.+414    	; 0x2158 <Dio_init+0x1d8>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    1fba:	2a b3       	in	r18, 0x1a	; 26
    1fbc:	61 e0       	ldi	r22, 0x01	; 1
    1fbe:	70 e0       	ldi	r23, 0x00	; 0
    1fc0:	db 01       	movw	r26, r22
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <Dio_init+0x48>
    1fc4:	aa 0f       	add	r26, r26
    1fc6:	bb 1f       	adc	r27, r27
    1fc8:	3a 95       	dec	r19
    1fca:	e2 f7       	brpl	.-8      	; 0x1fc4 <Dio_init+0x44>
    1fcc:	8a 2f       	mov	r24, r26
    1fce:	80 95       	com	r24
    1fd0:	82 23       	and	r24, r18
    1fd2:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    1fd4:	aa b3       	in	r26, 0x1a	; 26
    1fd6:	82 81       	ldd	r24, Z+2	; 0x02
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	01 80       	ldd	r0, Z+1	; 0x01
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <Dio_init+0x64>
    1fe0:	22 0f       	add	r18, r18
    1fe2:	33 1f       	adc	r19, r19
    1fe4:	0a 94       	dec	r0
    1fe6:	e2 f7       	brpl	.-8      	; 0x1fe0 <Dio_init+0x60>
    1fe8:	2a 2b       	or	r18, r26
    1fea:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    1fec:	8b b3       	in	r24, 0x1b	; 27
    1fee:	01 80       	ldd	r0, Z+1	; 0x01
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <Dio_init+0x76>
    1ff2:	66 0f       	add	r22, r22
    1ff4:	77 1f       	adc	r23, r23
    1ff6:	0a 94       	dec	r0
    1ff8:	e2 f7       	brpl	.-8      	; 0x1ff2 <Dio_init+0x72>
    1ffa:	60 95       	com	r22
    1ffc:	68 23       	and	r22, r24
    1ffe:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2000:	6b b3       	in	r22, 0x1b	; 27
    2002:	83 81       	ldd	r24, Z+3	; 0x03
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	01 80       	ldd	r0, Z+1	; 0x01
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <Dio_init+0x90>
    200c:	22 0f       	add	r18, r18
    200e:	33 1f       	adc	r19, r19
    2010:	0a 94       	dec	r0
    2012:	e2 f7       	brpl	.-8      	; 0x200c <Dio_init+0x8c>
    2014:	26 2b       	or	r18, r22
    2016:	2b bb       	out	0x1b, r18	; 27
				break;
    2018:	8f c0       	rjmp	.+286    	; 0x2138 <Dio_init+0x1b8>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    201a:	27 b3       	in	r18, 0x17	; 23
    201c:	61 e0       	ldi	r22, 0x01	; 1
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	db 01       	movw	r26, r22
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <Dio_init+0xa8>
    2024:	aa 0f       	add	r26, r26
    2026:	bb 1f       	adc	r27, r27
    2028:	3a 95       	dec	r19
    202a:	e2 f7       	brpl	.-8      	; 0x2024 <Dio_init+0xa4>
    202c:	8a 2f       	mov	r24, r26
    202e:	80 95       	com	r24
    2030:	82 23       	and	r24, r18
    2032:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2034:	a7 b3       	in	r26, 0x17	; 23
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	01 80       	ldd	r0, Z+1	; 0x01
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <Dio_init+0xc4>
    2040:	22 0f       	add	r18, r18
    2042:	33 1f       	adc	r19, r19
    2044:	0a 94       	dec	r0
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <Dio_init+0xc0>
    2048:	2a 2b       	or	r18, r26
    204a:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    204c:	88 b3       	in	r24, 0x18	; 24
    204e:	01 80       	ldd	r0, Z+1	; 0x01
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <Dio_init+0xd6>
    2052:	66 0f       	add	r22, r22
    2054:	77 1f       	adc	r23, r23
    2056:	0a 94       	dec	r0
    2058:	e2 f7       	brpl	.-8      	; 0x2052 <Dio_init+0xd2>
    205a:	60 95       	com	r22
    205c:	68 23       	and	r22, r24
    205e:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2060:	68 b3       	in	r22, 0x18	; 24
    2062:	83 81       	ldd	r24, Z+3	; 0x03
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	01 80       	ldd	r0, Z+1	; 0x01
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <Dio_init+0xf0>
    206c:	22 0f       	add	r18, r18
    206e:	33 1f       	adc	r19, r19
    2070:	0a 94       	dec	r0
    2072:	e2 f7       	brpl	.-8      	; 0x206c <Dio_init+0xec>
    2074:	26 2b       	or	r18, r22
    2076:	28 bb       	out	0x18, r18	; 24
				break;
    2078:	5f c0       	rjmp	.+190    	; 0x2138 <Dio_init+0x1b8>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    207a:	24 b3       	in	r18, 0x14	; 20
    207c:	61 e0       	ldi	r22, 0x01	; 1
    207e:	70 e0       	ldi	r23, 0x00	; 0
    2080:	db 01       	movw	r26, r22
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <Dio_init+0x108>
    2084:	aa 0f       	add	r26, r26
    2086:	bb 1f       	adc	r27, r27
    2088:	3a 95       	dec	r19
    208a:	e2 f7       	brpl	.-8      	; 0x2084 <Dio_init+0x104>
    208c:	8a 2f       	mov	r24, r26
    208e:	80 95       	com	r24
    2090:	82 23       	and	r24, r18
    2092:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2094:	a4 b3       	in	r26, 0x14	; 20
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	01 80       	ldd	r0, Z+1	; 0x01
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <Dio_init+0x124>
    20a0:	22 0f       	add	r18, r18
    20a2:	33 1f       	adc	r19, r19
    20a4:	0a 94       	dec	r0
    20a6:	e2 f7       	brpl	.-8      	; 0x20a0 <Dio_init+0x120>
    20a8:	2a 2b       	or	r18, r26
    20aa:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    20ac:	85 b3       	in	r24, 0x15	; 21
    20ae:	01 80       	ldd	r0, Z+1	; 0x01
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <Dio_init+0x136>
    20b2:	66 0f       	add	r22, r22
    20b4:	77 1f       	adc	r23, r23
    20b6:	0a 94       	dec	r0
    20b8:	e2 f7       	brpl	.-8      	; 0x20b2 <Dio_init+0x132>
    20ba:	60 95       	com	r22
    20bc:	68 23       	and	r22, r24
    20be:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    20c0:	65 b3       	in	r22, 0x15	; 21
    20c2:	83 81       	ldd	r24, Z+3	; 0x03
    20c4:	28 2f       	mov	r18, r24
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	01 80       	ldd	r0, Z+1	; 0x01
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <Dio_init+0x150>
    20cc:	22 0f       	add	r18, r18
    20ce:	33 1f       	adc	r19, r19
    20d0:	0a 94       	dec	r0
    20d2:	e2 f7       	brpl	.-8      	; 0x20cc <Dio_init+0x14c>
    20d4:	26 2b       	or	r18, r22
    20d6:	25 bb       	out	0x15, r18	; 21
				break;
    20d8:	2f c0       	rjmp	.+94     	; 0x2138 <Dio_init+0x1b8>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    20da:	21 b3       	in	r18, 0x11	; 17
    20dc:	61 e0       	ldi	r22, 0x01	; 1
    20de:	70 e0       	ldi	r23, 0x00	; 0
    20e0:	db 01       	movw	r26, r22
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <Dio_init+0x168>
    20e4:	aa 0f       	add	r26, r26
    20e6:	bb 1f       	adc	r27, r27
    20e8:	3a 95       	dec	r19
    20ea:	e2 f7       	brpl	.-8      	; 0x20e4 <Dio_init+0x164>
    20ec:	8a 2f       	mov	r24, r26
    20ee:	80 95       	com	r24
    20f0:	82 23       	and	r24, r18
    20f2:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    20f4:	a1 b3       	in	r26, 0x11	; 17
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	01 80       	ldd	r0, Z+1	; 0x01
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <Dio_init+0x184>
    2100:	22 0f       	add	r18, r18
    2102:	33 1f       	adc	r19, r19
    2104:	0a 94       	dec	r0
    2106:	e2 f7       	brpl	.-8      	; 0x2100 <Dio_init+0x180>
    2108:	2a 2b       	or	r18, r26
    210a:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    210c:	82 b3       	in	r24, 0x12	; 18
    210e:	01 80       	ldd	r0, Z+1	; 0x01
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <Dio_init+0x196>
    2112:	66 0f       	add	r22, r22
    2114:	77 1f       	adc	r23, r23
    2116:	0a 94       	dec	r0
    2118:	e2 f7       	brpl	.-8      	; 0x2112 <Dio_init+0x192>
    211a:	60 95       	com	r22
    211c:	68 23       	and	r22, r24
    211e:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2120:	62 b3       	in	r22, 0x12	; 18
    2122:	83 81       	ldd	r24, Z+3	; 0x03
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	01 80       	ldd	r0, Z+1	; 0x01
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <Dio_init+0x1b0>
    212c:	22 0f       	add	r18, r18
    212e:	33 1f       	adc	r19, r19
    2130:	0a 94       	dec	r0
    2132:	e2 f7       	brpl	.-8      	; 0x212c <Dio_init+0x1ac>
    2134:	26 2b       	or	r18, r22
    2136:	22 bb       	out	0x12, r18	; 18
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
    2138:	9f 5f       	subi	r25, 0xFF	; 255
    213a:	94 31       	cpi	r25, 0x14	; 20
    213c:	08 f4       	brcc	.+2      	; 0x2140 <Dio_init+0x1c0>
    213e:	26 cf       	rjmp	.-436    	; 0x1f8c <Dio_init+0xc>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
    2140:	50 93 94 05 	sts	0x0594, r21	; 0x800594 <pstrDio_pinsConfig+0x1>
    2144:	40 93 93 05 	sts	0x0593, r20	; 0x800593 <pstrDio_pinsConfig>
	u8_Dio_Status = DIO_INITIALIZED;
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
    214e:	08 95       	ret
{
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
    2150:	85 e0       	ldi	r24, 0x05	; 5
    2152:	08 95       	ret
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
    2154:	83 e0       	ldi	r24, 0x03	; 3
    2156:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
    2158:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
    215a:	08 95       	ret

0000215c <Dio_writePin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    215c:	85 31       	cpi	r24, 0x15	; 21
    215e:	08 f0       	brcs	.+2      	; 0x2162 <Dio_writePin+0x6>
    2160:	90 c0       	rjmp	.+288    	; 0x2282 <Dio_writePin+0x126>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    2162:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <u8_Dio_Status>
    2166:	99 23       	and	r25, r25
    2168:	09 f4       	brne	.+2      	; 0x216c <Dio_writePin+0x10>
    216a:	8d c0       	rjmp	.+282    	; 0x2286 <Dio_writePin+0x12a>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    216c:	e8 2f       	mov	r30, r24
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	cf 01       	movw	r24, r30
    2172:	88 0f       	add	r24, r24
    2174:	99 1f       	adc	r25, r25
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	e0 91 93 05 	lds	r30, 0x0593	; 0x800593 <pstrDio_pinsConfig>
    217e:	f0 91 94 05 	lds	r31, 0x0594	; 0x800594 <pstrDio_pinsConfig+0x1>
    2182:	e8 0f       	add	r30, r24
    2184:	f9 1f       	adc	r31, r25
    2186:	80 81       	ld	r24, Z
    2188:	81 30       	cpi	r24, 0x01	; 1
    218a:	21 f1       	breq	.+72     	; 0x21d4 <Dio_writePin+0x78>
    218c:	30 f0       	brcs	.+12     	; 0x219a <Dio_writePin+0x3e>
    218e:	82 30       	cpi	r24, 0x02	; 2
    2190:	f1 f1       	breq	.+124    	; 0x220e <Dio_writePin+0xb2>
    2192:	83 30       	cpi	r24, 0x03	; 3
    2194:	09 f4       	brne	.+2      	; 0x2198 <Dio_writePin+0x3c>
    2196:	58 c0       	rjmp	.+176    	; 0x2248 <Dio_writePin+0xec>
    2198:	78 c0       	rjmp	.+240    	; 0x228a <Dio_writePin+0x12e>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
    219a:	61 30       	cpi	r22, 0x01	; 1
    219c:	69 f4       	brne	.+26     	; 0x21b8 <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    219e:	2b b3       	in	r18, 0x1b	; 27
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	01 80       	ldd	r0, Z+1	; 0x01
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <Dio_writePin+0x50>
    21a8:	88 0f       	add	r24, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	0a 94       	dec	r0
    21ae:	e2 f7       	brpl	.-8      	; 0x21a8 <Dio_writePin+0x4c>
    21b0:	82 2b       	or	r24, r18
    21b2:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    21b8:	2b b3       	in	r18, 0x1b	; 27
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	01 80       	ldd	r0, Z+1	; 0x01
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <Dio_writePin+0x6a>
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	0a 94       	dec	r0
    21c8:	e2 f7       	brpl	.-8      	; 0x21c2 <Dio_writePin+0x66>
    21ca:	80 95       	com	r24
    21cc:	82 23       	and	r24, r18
    21ce:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
    21d4:	61 30       	cpi	r22, 0x01	; 1
    21d6:	69 f4       	brne	.+26     	; 0x21f2 <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    21d8:	28 b3       	in	r18, 0x18	; 24
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	01 80       	ldd	r0, Z+1	; 0x01
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <Dio_writePin+0x8a>
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	0a 94       	dec	r0
    21e8:	e2 f7       	brpl	.-8      	; 0x21e2 <Dio_writePin+0x86>
    21ea:	82 2b       	or	r24, r18
    21ec:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    21f2:	28 b3       	in	r18, 0x18	; 24
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	01 80       	ldd	r0, Z+1	; 0x01
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <Dio_writePin+0xa4>
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	0a 94       	dec	r0
    2202:	e2 f7       	brpl	.-8      	; 0x21fc <Dio_writePin+0xa0>
    2204:	80 95       	com	r24
    2206:	82 23       	and	r24, r18
    2208:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
    220e:	61 30       	cpi	r22, 0x01	; 1
    2210:	69 f4       	brne	.+26     	; 0x222c <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2212:	25 b3       	in	r18, 0x15	; 21
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	01 80       	ldd	r0, Z+1	; 0x01
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <Dio_writePin+0xc4>
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	0a 94       	dec	r0
    2222:	e2 f7       	brpl	.-8      	; 0x221c <Dio_writePin+0xc0>
    2224:	82 2b       	or	r24, r18
    2226:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    222c:	25 b3       	in	r18, 0x15	; 21
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	01 80       	ldd	r0, Z+1	; 0x01
    2234:	02 c0       	rjmp	.+4      	; 0x223a <Dio_writePin+0xde>
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	0a 94       	dec	r0
    223c:	e2 f7       	brpl	.-8      	; 0x2236 <Dio_writePin+0xda>
    223e:	80 95       	com	r24
    2240:	82 23       	and	r24, r18
    2242:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
    2248:	61 30       	cpi	r22, 0x01	; 1
    224a:	69 f4       	brne	.+26     	; 0x2266 <Dio_writePin+0x10a>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    224c:	22 b3       	in	r18, 0x12	; 18
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	01 80       	ldd	r0, Z+1	; 0x01
    2254:	02 c0       	rjmp	.+4      	; 0x225a <Dio_writePin+0xfe>
    2256:	88 0f       	add	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	0a 94       	dec	r0
    225c:	e2 f7       	brpl	.-8      	; 0x2256 <Dio_writePin+0xfa>
    225e:	82 2b       	or	r24, r18
    2260:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2266:	22 b3       	in	r18, 0x12	; 18
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	01 80       	ldd	r0, Z+1	; 0x01
    226e:	02 c0       	rjmp	.+4      	; 0x2274 <Dio_writePin+0x118>
    2270:	88 0f       	add	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	0a 94       	dec	r0
    2276:	e2 f7       	brpl	.-8      	; 0x2270 <Dio_writePin+0x114>
    2278:	80 95       	com	r24
    227a:	82 23       	and	r24, r18
    227c:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	08 95       	ret
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    2282:	82 e0       	ldi	r24, 0x02	; 2
    2284:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    2286:	86 e0       	ldi	r24, 0x06	; 6
    2288:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    228a:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
    228c:	08 95       	ret

0000228e <Dio_togglePin>:
* Description: Function to Toggle data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    228e:	85 31       	cpi	r24, 0x15	; 21
    2290:	08 f0       	brcs	.+2      	; 0x2294 <Dio_togglePin+0x6>
    2292:	4f c0       	rjmp	.+158    	; 0x2332 <Dio_togglePin+0xa4>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    2294:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <u8_Dio_Status>
    2298:	99 23       	and	r25, r25
    229a:	09 f4       	brne	.+2      	; 0x229e <Dio_togglePin+0x10>
    229c:	4c c0       	rjmp	.+152    	; 0x2336 <Dio_togglePin+0xa8>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    229e:	e8 2f       	mov	r30, r24
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	cf 01       	movw	r24, r30
    22a4:	88 0f       	add	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	e0 91 93 05 	lds	r30, 0x0593	; 0x800593 <pstrDio_pinsConfig>
    22b0:	f0 91 94 05 	lds	r31, 0x0594	; 0x800594 <pstrDio_pinsConfig+0x1>
    22b4:	e8 0f       	add	r30, r24
    22b6:	f9 1f       	adc	r31, r25
    22b8:	80 81       	ld	r24, Z
    22ba:	81 30       	cpi	r24, 0x01	; 1
    22bc:	99 f0       	breq	.+38     	; 0x22e4 <Dio_togglePin+0x56>
    22be:	28 f0       	brcs	.+10     	; 0x22ca <Dio_togglePin+0x3c>
    22c0:	82 30       	cpi	r24, 0x02	; 2
    22c2:	e9 f0       	breq	.+58     	; 0x22fe <Dio_togglePin+0x70>
    22c4:	83 30       	cpi	r24, 0x03	; 3
    22c6:	41 f1       	breq	.+80     	; 0x2318 <Dio_togglePin+0x8a>
    22c8:	38 c0       	rjmp	.+112    	; 0x233a <Dio_togglePin+0xac>
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    22ca:	2b b3       	in	r18, 0x1b	; 27
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	01 80       	ldd	r0, Z+1	; 0x01
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <Dio_togglePin+0x4a>
    22d4:	88 0f       	add	r24, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	0a 94       	dec	r0
    22da:	e2 f7       	brpl	.-8      	; 0x22d4 <Dio_togglePin+0x46>
    22dc:	82 27       	eor	r24, r18
    22de:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    22e2:	08 95       	ret
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    22e4:	28 b3       	in	r18, 0x18	; 24
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	01 80       	ldd	r0, Z+1	; 0x01
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <Dio_togglePin+0x64>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	0a 94       	dec	r0
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <Dio_togglePin+0x60>
    22f6:	82 27       	eor	r24, r18
    22f8:	88 bb       	out	0x18, r24	; 24
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    22fa:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    22fc:	08 95       	ret
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    22fe:	25 b3       	in	r18, 0x15	; 21
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	01 80       	ldd	r0, Z+1	; 0x01
    2306:	02 c0       	rjmp	.+4      	; 0x230c <Dio_togglePin+0x7e>
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	0a 94       	dec	r0
    230e:	e2 f7       	brpl	.-8      	; 0x2308 <Dio_togglePin+0x7a>
    2310:	82 27       	eor	r24, r18
    2312:	85 bb       	out	0x15, r24	; 21
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    2314:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    2316:	08 95       	ret
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2318:	22 b3       	in	r18, 0x12	; 18
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	01 80       	ldd	r0, Z+1	; 0x01
    2320:	02 c0       	rjmp	.+4      	; 0x2326 <Dio_togglePin+0x98>
    2322:	88 0f       	add	r24, r24
    2324:	99 1f       	adc	r25, r25
    2326:	0a 94       	dec	r0
    2328:	e2 f7       	brpl	.-8      	; 0x2322 <Dio_togglePin+0x94>
    232a:	82 27       	eor	r24, r18
    232c:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    232e:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    2330:	08 95       	ret
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    2332:	82 e0       	ldi	r24, 0x02	; 2
    2334:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    2336:	86 e0       	ldi	r24, 0x06	; 6
    2338:	08 95       	ret
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    233a:	84 e0       	ldi	r24, 0x04	; 4
	}	
	return DIO_STATUS_ERROR_OK;
}
    233c:	08 95       	ret

0000233e <Dio_readPin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    233e:	85 31       	cpi	r24, 0x15	; 21
    2340:	08 f0       	brcs	.+2      	; 0x2344 <Dio_readPin+0x6>
    2342:	7c c0       	rjmp	.+248    	; 0x243c <Dio_readPin+0xfe>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    2344:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <u8_Dio_Status>
    2348:	99 23       	and	r25, r25
    234a:	09 f4       	brne	.+2      	; 0x234e <Dio_readPin+0x10>
    234c:	79 c0       	rjmp	.+242    	; 0x2440 <Dio_readPin+0x102>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    234e:	e8 2f       	mov	r30, r24
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	cf 01       	movw	r24, r30
    2354:	88 0f       	add	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	e0 91 93 05 	lds	r30, 0x0593	; 0x800593 <pstrDio_pinsConfig>
    2360:	f0 91 94 05 	lds	r31, 0x0594	; 0x800594 <pstrDio_pinsConfig+0x1>
    2364:	e8 0f       	add	r30, r24
    2366:	f9 1f       	adc	r31, r25
    2368:	80 81       	ld	r24, Z
    236a:	81 30       	cpi	r24, 0x01	; 1
    236c:	f9 f0       	breq	.+62     	; 0x23ac <Dio_readPin+0x6e>
    236e:	30 f0       	brcs	.+12     	; 0x237c <Dio_readPin+0x3e>
    2370:	82 30       	cpi	r24, 0x02	; 2
    2372:	a1 f1       	breq	.+104    	; 0x23dc <Dio_readPin+0x9e>
    2374:	83 30       	cpi	r24, 0x03	; 3
    2376:	09 f4       	brne	.+2      	; 0x237a <Dio_readPin+0x3c>
    2378:	49 c0       	rjmp	.+146    	; 0x240c <Dio_readPin+0xce>
    237a:	64 c0       	rjmp	.+200    	; 0x2444 <Dio_readPin+0x106>
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    237c:	49 b3       	in	r20, 0x19	; 25
    237e:	51 81       	ldd	r21, Z+1	; 0x01
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9c 01       	movw	r18, r24
    2386:	05 2e       	mov	r0, r21
    2388:	02 c0       	rjmp	.+4      	; 0x238e <Dio_readPin+0x50>
    238a:	22 0f       	add	r18, r18
    238c:	33 1f       	adc	r19, r19
    238e:	0a 94       	dec	r0
    2390:	e2 f7       	brpl	.-8      	; 0x238a <Dio_readPin+0x4c>
    2392:	84 2f       	mov	r24, r20
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	82 23       	and	r24, r18
    2398:	93 23       	and	r25, r19
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <Dio_readPin+0x62>
    239c:	95 95       	asr	r25
    239e:	87 95       	ror	r24
    23a0:	5a 95       	dec	r21
    23a2:	e2 f7       	brpl	.-8      	; 0x239c <Dio_readPin+0x5e>
    23a4:	fb 01       	movw	r30, r22
    23a6:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    23aa:	08 95       	ret
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    23ac:	46 b3       	in	r20, 0x16	; 22
    23ae:	51 81       	ldd	r21, Z+1	; 0x01
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	9c 01       	movw	r18, r24
    23b6:	05 2e       	mov	r0, r21
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <Dio_readPin+0x80>
    23ba:	22 0f       	add	r18, r18
    23bc:	33 1f       	adc	r19, r19
    23be:	0a 94       	dec	r0
    23c0:	e2 f7       	brpl	.-8      	; 0x23ba <Dio_readPin+0x7c>
    23c2:	84 2f       	mov	r24, r20
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	82 23       	and	r24, r18
    23c8:	93 23       	and	r25, r19
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <Dio_readPin+0x92>
    23cc:	95 95       	asr	r25
    23ce:	87 95       	ror	r24
    23d0:	5a 95       	dec	r21
    23d2:	e2 f7       	brpl	.-8      	; 0x23cc <Dio_readPin+0x8e>
    23d4:	fb 01       	movw	r30, r22
    23d6:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    23d8:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    23da:	08 95       	ret
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    23dc:	43 b3       	in	r20, 0x13	; 19
    23de:	51 81       	ldd	r21, Z+1	; 0x01
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	9c 01       	movw	r18, r24
    23e6:	05 2e       	mov	r0, r21
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <Dio_readPin+0xb0>
    23ea:	22 0f       	add	r18, r18
    23ec:	33 1f       	adc	r19, r19
    23ee:	0a 94       	dec	r0
    23f0:	e2 f7       	brpl	.-8      	; 0x23ea <Dio_readPin+0xac>
    23f2:	84 2f       	mov	r24, r20
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	82 23       	and	r24, r18
    23f8:	93 23       	and	r25, r19
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <Dio_readPin+0xc2>
    23fc:	95 95       	asr	r25
    23fe:	87 95       	ror	r24
    2400:	5a 95       	dec	r21
    2402:	e2 f7       	brpl	.-8      	; 0x23fc <Dio_readPin+0xbe>
    2404:	fb 01       	movw	r30, r22
    2406:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2408:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    240a:	08 95       	ret
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    240c:	40 b3       	in	r20, 0x10	; 16
    240e:	51 81       	ldd	r21, Z+1	; 0x01
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	9c 01       	movw	r18, r24
    2416:	05 2e       	mov	r0, r21
    2418:	02 c0       	rjmp	.+4      	; 0x241e <Dio_readPin+0xe0>
    241a:	22 0f       	add	r18, r18
    241c:	33 1f       	adc	r19, r19
    241e:	0a 94       	dec	r0
    2420:	e2 f7       	brpl	.-8      	; 0x241a <Dio_readPin+0xdc>
    2422:	84 2f       	mov	r24, r20
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	82 23       	and	r24, r18
    2428:	93 23       	and	r25, r19
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <Dio_readPin+0xf2>
    242c:	95 95       	asr	r25
    242e:	87 95       	ror	r24
    2430:	5a 95       	dec	r21
    2432:	e2 f7       	brpl	.-8      	; 0x242c <Dio_readPin+0xee>
    2434:	fb 01       	movw	r30, r22
    2436:	80 83       	st	Z, r24
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2438:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    243a:	08 95       	ret
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    243c:	82 e0       	ldi	r24, 0x02	; 2
    243e:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    2440:	86 e0       	ldi	r24, 0x06	; 6
    2442:	08 95       	ret
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    2444:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
    2446:	08 95       	ret

00002448 <__vector_1>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
    2448:	1f 92       	push	r1
    244a:	0f 92       	push	r0
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	0f 92       	push	r0
    2450:	11 24       	eor	r1, r1
    2452:	2f 93       	push	r18
    2454:	3f 93       	push	r19
    2456:	4f 93       	push	r20
    2458:	5f 93       	push	r21
    245a:	6f 93       	push	r22
    245c:	7f 93       	push	r23
    245e:	8f 93       	push	r24
    2460:	9f 93       	push	r25
    2462:	af 93       	push	r26
    2464:	bf 93       	push	r27
    2466:	ef 93       	push	r30
    2468:	ff 93       	push	r31
    246a:	e0 91 99 05 	lds	r30, 0x0599	; 0x800599 <INT0_CallBackPtr>
    246e:	f0 91 9a 05 	lds	r31, 0x059A	; 0x80059a <INT0_CallBackPtr+0x1>
    2472:	09 95       	icall
    2474:	ff 91       	pop	r31
    2476:	ef 91       	pop	r30
    2478:	bf 91       	pop	r27
    247a:	af 91       	pop	r26
    247c:	9f 91       	pop	r25
    247e:	8f 91       	pop	r24
    2480:	7f 91       	pop	r23
    2482:	6f 91       	pop	r22
    2484:	5f 91       	pop	r21
    2486:	4f 91       	pop	r20
    2488:	3f 91       	pop	r19
    248a:	2f 91       	pop	r18
    248c:	0f 90       	pop	r0
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	0f 90       	pop	r0
    2492:	1f 90       	pop	r1
    2494:	18 95       	reti

00002496 <__vector_2>:
    2496:	1f 92       	push	r1
    2498:	0f 92       	push	r0
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	0f 92       	push	r0
    249e:	11 24       	eor	r1, r1
    24a0:	2f 93       	push	r18
    24a2:	3f 93       	push	r19
    24a4:	4f 93       	push	r20
    24a6:	5f 93       	push	r21
    24a8:	6f 93       	push	r22
    24aa:	7f 93       	push	r23
    24ac:	8f 93       	push	r24
    24ae:	9f 93       	push	r25
    24b0:	af 93       	push	r26
    24b2:	bf 93       	push	r27
    24b4:	ef 93       	push	r30
    24b6:	ff 93       	push	r31
    24b8:	e0 91 97 05 	lds	r30, 0x0597	; 0x800597 <INT1_CallBackPtr>
    24bc:	f0 91 98 05 	lds	r31, 0x0598	; 0x800598 <INT1_CallBackPtr+0x1>
    24c0:	09 95       	icall
    24c2:	ff 91       	pop	r31
    24c4:	ef 91       	pop	r30
    24c6:	bf 91       	pop	r27
    24c8:	af 91       	pop	r26
    24ca:	9f 91       	pop	r25
    24cc:	8f 91       	pop	r24
    24ce:	7f 91       	pop	r23
    24d0:	6f 91       	pop	r22
    24d2:	5f 91       	pop	r21
    24d4:	4f 91       	pop	r20
    24d6:	3f 91       	pop	r19
    24d8:	2f 91       	pop	r18
    24da:	0f 90       	pop	r0
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	0f 90       	pop	r0
    24e0:	1f 90       	pop	r1
    24e2:	18 95       	reti

000024e4 <__vector_3>:
}
ISR(INT2_IRQ)
{
    24e4:	1f 92       	push	r1
    24e6:	0f 92       	push	r0
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	0f 92       	push	r0
    24ec:	11 24       	eor	r1, r1
    24ee:	2f 93       	push	r18
    24f0:	3f 93       	push	r19
    24f2:	4f 93       	push	r20
    24f4:	5f 93       	push	r21
    24f6:	6f 93       	push	r22
    24f8:	7f 93       	push	r23
    24fa:	8f 93       	push	r24
    24fc:	9f 93       	push	r25
    24fe:	af 93       	push	r26
    2500:	bf 93       	push	r27
    2502:	ef 93       	push	r30
    2504:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
    2506:	e0 91 95 05 	lds	r30, 0x0595	; 0x800595 <INT2_CallBackPtr>
    250a:	f0 91 96 05 	lds	r31, 0x0596	; 0x800596 <INT2_CallBackPtr+0x1>
    250e:	09 95       	icall
}
    2510:	ff 91       	pop	r31
    2512:	ef 91       	pop	r30
    2514:	bf 91       	pop	r27
    2516:	af 91       	pop	r26
    2518:	9f 91       	pop	r25
    251a:	8f 91       	pop	r24
    251c:	7f 91       	pop	r23
    251e:	6f 91       	pop	r22
    2520:	5f 91       	pop	r21
    2522:	4f 91       	pop	r20
    2524:	3f 91       	pop	r19
    2526:	2f 91       	pop	r18
    2528:	0f 90       	pop	r0
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	0f 90       	pop	r0
    252e:	1f 90       	pop	r1
    2530:	18 95       	reti

00002532 <Gpt_ISRHandler>:
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_EXPIRED;
	return GPT_STATUS_ERROR_OK;
}
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	0e c0       	rjmp	.+28     	; 0x2552 <Gpt_ISRHandler+0x20>
    2536:	29 2f       	mov	r18, r25
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	f9 01       	movw	r30, r18
    253c:	ee 0f       	add	r30, r30
    253e:	ff 1f       	adc	r31, r31
    2540:	2e 0f       	add	r18, r30
    2542:	3f 1f       	adc	r19, r31
    2544:	f9 01       	movw	r30, r18
    2546:	e3 5c       	subi	r30, 0xC3	; 195
    2548:	fb 4f       	sbci	r31, 0xFB	; 251
    254a:	20 81       	ld	r18, Z
    254c:	28 17       	cp	r18, r24
    254e:	19 f0       	breq	.+6      	; 0x2556 <Gpt_ISRHandler+0x24>
    2550:	9f 5f       	subi	r25, 0xFF	; 255
    2552:	99 23       	and	r25, r25
    2554:	81 f3       	breq	.-32     	; 0x2536 <Gpt_ISRHandler+0x4>
    2556:	89 2f       	mov	r24, r25
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	fc 01       	movw	r30, r24
    255c:	ee 0f       	add	r30, r30
    255e:	ff 1f       	adc	r31, r31
    2560:	ee 0f       	add	r30, r30
    2562:	ff 1f       	adc	r31, r31
    2564:	e4 56       	subi	r30, 0x64	; 100
    2566:	fa 4f       	sbci	r31, 0xFA	; 250
    2568:	40 81       	ld	r20, Z
    256a:	51 81       	ldd	r21, Z+1	; 0x01
    256c:	62 81       	ldd	r22, Z+2	; 0x02
    256e:	73 81       	ldd	r23, Z+3	; 0x03
    2570:	41 15       	cp	r20, r1
    2572:	51 05       	cpc	r21, r1
    2574:	61 05       	cpc	r22, r1
    2576:	71 05       	cpc	r23, r1
    2578:	81 f0       	breq	.+32     	; 0x259a <Gpt_ISRHandler+0x68>
    257a:	88 0f       	add	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	fc 01       	movw	r30, r24
    2584:	e4 56       	subi	r30, 0x64	; 100
    2586:	fa 4f       	sbci	r31, 0xFA	; 250
    2588:	41 50       	subi	r20, 0x01	; 1
    258a:	51 09       	sbc	r21, r1
    258c:	61 09       	sbc	r22, r1
    258e:	71 09       	sbc	r23, r1
    2590:	40 83       	st	Z, r20
    2592:	51 83       	std	Z+1, r21	; 0x01
    2594:	62 83       	std	Z+2, r22	; 0x02
    2596:	73 83       	std	Z+3, r23	; 0x03
    2598:	08 95       	ret
    259a:	23 b7       	in	r18, 0x33	; 51
    259c:	2e 7f       	andi	r18, 0xFE	; 254
    259e:	23 bf       	out	0x33, r18	; 51
    25a0:	23 b7       	in	r18, 0x33	; 51
    25a2:	2d 7f       	andi	r18, 0xFD	; 253
    25a4:	23 bf       	out	0x33, r18	; 51
    25a6:	23 b7       	in	r18, 0x33	; 51
    25a8:	2b 7f       	andi	r18, 0xFB	; 251
    25aa:	23 bf       	out	0x33, r18	; 51
    25ac:	29 b7       	in	r18, 0x39	; 57
    25ae:	2e 7f       	andi	r18, 0xFE	; 254
    25b0:	29 bf       	out	0x39, r18	; 57
    25b2:	fc 01       	movw	r30, r24
    25b4:	e0 56       	subi	r30, 0x60	; 96
    25b6:	fa 4f       	sbci	r31, 0xFA	; 250
    25b8:	24 e0       	ldi	r18, 0x04	; 4
    25ba:	20 83       	st	Z, r18
    25bc:	e0 91 a1 05 	lds	r30, 0x05A1	; 0x8005a1 <Gpt_Timer0_CallBackPtr>
    25c0:	f0 91 a2 05 	lds	r31, 0x05A2	; 0x8005a2 <Gpt_Timer0_CallBackPtr+0x1>
    25c4:	09 95       	icall
    25c6:	08 95       	ret

000025c8 <GptInit>:
    25c8:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <genu_GPTModStatus>
    25cc:	81 30       	cpi	r24, 0x01	; 1
    25ce:	61 f1       	breq	.+88     	; 0x2628 <GptInit+0x60>
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	24 c0       	rjmp	.+72     	; 0x261c <GptInit+0x54>
    25d4:	82 2f       	mov	r24, r18
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	fc 01       	movw	r30, r24
    25da:	ee 0f       	add	r30, r30
    25dc:	ff 1f       	adc	r31, r31
    25de:	e8 0f       	add	r30, r24
    25e0:	f9 1f       	adc	r31, r25
    25e2:	e3 5c       	subi	r30, 0xC3	; 195
    25e4:	fb 4f       	sbci	r31, 0xFB	; 251
    25e6:	30 81       	ld	r19, Z
    25e8:	33 23       	and	r19, r19
    25ea:	19 f0       	breq	.+6      	; 0x25f2 <GptInit+0x2a>
    25ec:	33 30       	cpi	r19, 0x03	; 3
    25ee:	f0 f4       	brcc	.+60     	; 0x262c <GptInit+0x64>
    25f0:	0f c0       	rjmp	.+30     	; 0x2610 <GptInit+0x48>
    25f2:	fc 01       	movw	r30, r24
    25f4:	ee 0f       	add	r30, r30
    25f6:	ff 1f       	adc	r31, r31
    25f8:	e8 0f       	add	r30, r24
    25fa:	f9 1f       	adc	r31, r25
    25fc:	e3 5c       	subi	r30, 0xC3	; 195
    25fe:	fb 4f       	sbci	r31, 0xFB	; 251
    2600:	32 81       	ldd	r19, Z+2	; 0x02
    2602:	31 11       	cpse	r19, r1
    2604:	05 c0       	rjmp	.+10     	; 0x2610 <GptInit+0x48>
    2606:	13 be       	out	0x33, r1	; 51
    2608:	39 b7       	in	r19, 0x39	; 57
    260a:	3c 7f       	andi	r19, 0xFC	; 252
    260c:	39 bf       	out	0x39, r19	; 57
    260e:	12 be       	out	0x32, r1	; 50
    2610:	fc 01       	movw	r30, r24
    2612:	e0 56       	subi	r30, 0x60	; 96
    2614:	fa 4f       	sbci	r31, 0xFA	; 250
    2616:	31 e0       	ldi	r19, 0x01	; 1
    2618:	30 83       	st	Z, r19
    261a:	2f 5f       	subi	r18, 0xFF	; 255
    261c:	22 23       	and	r18, r18
    261e:	d1 f2       	breq	.-76     	; 0x25d4 <GptInit+0xc>
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <genu_GPTModStatus>
    2626:	08 95       	ret
    2628:	83 e0       	ldi	r24, 0x03	; 3
    262a:	08 95       	ret
    262c:	85 e0       	ldi	r24, 0x05	; 5
    262e:	08 95       	ret

00002630 <GptStart_aSync>:
* Return value: enuGpt_Status_t - Returns the status of the function (if there is any error)
* Description: Function to Start the Timer module counting from 0x00 until (u16_Ticks)
               and generate interrupt when OVF.
************************************************************************************/
enuGpt_Status_t GptStart_aSync(u8Gpt_Channel_t ChannelId, u32Gpt_Value_t u16_Ticks, pfGpt_CallBack_t CallBack)
{
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	89 01       	movw	r16, r18
	
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    263a:	81 11       	cpse	r24, r1
    263c:	4a c0       	rjmp	.+148    	; 0x26d2 <GptStart_aSync+0xa2>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    263e:	c8 2f       	mov	r28, r24
    2640:	d0 e0       	ldi	r29, 0x00	; 0
    2642:	fe 01       	movw	r30, r28
    2644:	e0 56       	subi	r30, 0x60	; 96
    2646:	fa 4f       	sbci	r31, 0xFA	; 250
    2648:	80 81       	ld	r24, Z
    264a:	88 23       	and	r24, r24
    264c:	09 f4       	brne	.+2      	; 0x2650 <GptStart_aSync+0x20>
    264e:	43 c0       	rjmp	.+134    	; 0x26d6 <GptStart_aSync+0xa6>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
    2650:	82 30       	cpi	r24, 0x02	; 2
    2652:	09 f4       	brne	.+2      	; 0x2656 <GptStart_aSync+0x26>
    2654:	42 c0       	rjmp	.+132    	; 0x26da <GptStart_aSync+0xaa>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u16_remainderCount=0;
	
	enuChannelsState[ChannelId] = GPT_RUNNING;
    2656:	82 e0       	ldi	r24, 0x02	; 2
    2658:	fe 01       	movw	r30, r28
    265a:	e0 56       	subi	r30, 0x60	; 96
    265c:	fa 4f       	sbci	r31, 0xFA	; 250
    265e:	80 83       	st	Z, r24
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    2660:	fe 01       	movw	r30, r28
    2662:	ee 0f       	add	r30, r30
    2664:	ff 1f       	adc	r31, r31
    2666:	ec 0f       	add	r30, r28
    2668:	fd 1f       	adc	r31, r29
    266a:	e3 5c       	subi	r30, 0xC3	; 195
    266c:	fb 4f       	sbci	r31, 0xFB	; 251
    266e:	80 81       	ld	r24, Z
    2670:	88 23       	and	r24, r24
    2672:	21 f0       	breq	.+8      	; 0x267c <GptStart_aSync+0x4c>
    2674:	83 30       	cpi	r24, 0x03	; 3
    2676:	98 f1       	brcs	.+102    	; 0x26de <GptStart_aSync+0xae>
		case GPT_TIMER_2: /* In case of Timer 2 */
			break;
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    2678:	85 e0       	ldi	r24, 0x05	; 5
    267a:	34 c0       	rjmp	.+104    	; 0x26e4 <GptStart_aSync+0xb4>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Get Number of loops to overflow the timer counter */
			u32_Channels_ISR_Count[ChannelId] = u16_Ticks / GPT_MAX_VALUE_8BIT; //0xFF
    267c:	cb 01       	movw	r24, r22
    267e:	ba 01       	movw	r22, r20
    2680:	2f ef       	ldi	r18, 0xFF	; 255
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e0       	ldi	r20, 0x00	; 0
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    268c:	fe 01       	movw	r30, r28
    268e:	ee 0f       	add	r30, r30
    2690:	ff 1f       	adc	r31, r31
    2692:	ee 0f       	add	r30, r30
    2694:	ff 1f       	adc	r31, r31
    2696:	e4 56       	subi	r30, 0x64	; 100
    2698:	fa 4f       	sbci	r31, 0xFA	; 250
    269a:	20 83       	st	Z, r18
    269c:	31 83       	std	Z+1, r19	; 0x01
    269e:	42 83       	std	Z+2, r20	; 0x02
    26a0:	53 83       	std	Z+3, r21	; 0x03
			/* Get Number of extra ticks (remainder) */
			u16_remainderCount = u16_Ticks % GPT_MAX_VALUE_8BIT;
    26a2:	26 2f       	mov	r18, r22
    26a4:	37 2f       	mov	r19, r23
			/* Set the interrupt enable */
			REG_SET_BIT(GPT_TIMSK_REG, GPT_TIMSK_TOIE0);
    26a6:	89 b7       	in	r24, 0x39	; 57
    26a8:	81 60       	ori	r24, 0x01	; 1
    26aa:	89 bf       	out	0x39, r24	; 57
			/* Set the callback function pointer */
			Gpt_Timer0_CallBackPtr=CallBack;
    26ac:	10 93 a2 05 	sts	0x05A2, r17	; 0x8005a2 <Gpt_Timer0_CallBackPtr+0x1>
    26b0:	00 93 a1 05 	sts	0x05A1, r16	; 0x8005a1 <Gpt_Timer0_CallBackPtr>
			/* Start the clock with the given pre scaler */
			GPT_TCCR0_REG = (Timers_Configurations[ChannelId].enuClock_Src) << GPT_TCCR0_CS00;
    26b4:	ce 01       	movw	r24, r28
    26b6:	88 0f       	add	r24, r24
    26b8:	99 1f       	adc	r25, r25
    26ba:	c8 0f       	add	r28, r24
    26bc:	d9 1f       	adc	r29, r25
    26be:	c3 5c       	subi	r28, 0xC3	; 195
    26c0:	db 4f       	sbci	r29, 0xFB	; 251
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	83 bf       	out	0x33, r24	; 51
			/* Run the remainder ticks */
			/* Put the value of the 0xFF - remainderTicks to start count from it */
			if(u16_remainderCount != 0)
    26c6:	23 2b       	or	r18, r19
    26c8:	61 f0       	breq	.+24     	; 0x26e2 <GptStart_aSync+0xb2>
			{
				GPT_TCNT0_REG = 256 - u16_remainderCount;
    26ca:	61 95       	neg	r22
    26cc:	62 bf       	out	0x32, r22	; 50
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	09 c0       	rjmp	.+18     	; 0x26e4 <GptStart_aSync+0xb4>
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    26d2:	86 e0       	ldi	r24, 0x06	; 6
    26d4:	07 c0       	rjmp	.+14     	; 0x26e4 <GptStart_aSync+0xb4>
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    26d6:	82 e0       	ldi	r24, 0x02	; 2
    26d8:	05 c0       	rjmp	.+10     	; 0x26e4 <GptStart_aSync+0xb4>
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_BUSY;
    26da:	87 e0       	ldi	r24, 0x07	; 7
    26dc:	03 c0       	rjmp	.+6      	; 0x26e4 <GptStart_aSync+0xb4>
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	01 c0       	rjmp	.+2      	; 0x26e4 <GptStart_aSync+0xb4>
    26e2:	81 e0       	ldi	r24, 0x01	; 1
}
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	1f 91       	pop	r17
    26ea:	0f 91       	pop	r16
    26ec:	08 95       	ret

000026ee <GptStop>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    26ee:	81 11       	cpse	r24, r1
    26f0:	23 c0       	rjmp	.+70     	; 0x2738 <GptStop+0x4a>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	fc 01       	movw	r30, r24
    26f6:	e0 56       	subi	r30, 0x60	; 96
    26f8:	fa 4f       	sbci	r31, 0xFA	; 250
    26fa:	20 81       	ld	r18, Z
    26fc:	22 23       	and	r18, r18
    26fe:	f1 f0       	breq	.+60     	; 0x273c <GptStop+0x4e>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
    2700:	22 30       	cpi	r18, 0x02	; 2
    2702:	f1 f4       	brne	.+60     	; 0x2740 <GptStop+0x52>

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    2704:	fc 01       	movw	r30, r24
    2706:	ee 0f       	add	r30, r30
    2708:	ff 1f       	adc	r31, r31
    270a:	e8 0f       	add	r30, r24
    270c:	f9 1f       	adc	r31, r25
    270e:	e3 5c       	subi	r30, 0xC3	; 195
    2710:	fb 4f       	sbci	r31, 0xFB	; 251
    2712:	20 81       	ld	r18, Z
    2714:	22 23       	and	r18, r18
    2716:	19 f0       	breq	.+6      	; 0x271e <GptStop+0x30>
    2718:	23 30       	cpi	r18, 0x03	; 3
    271a:	a0 f4       	brcc	.+40     	; 0x2744 <GptStop+0x56>
    271c:	06 c0       	rjmp	.+12     	; 0x272a <GptStop+0x3c>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Stop the clock from the timer */
			GPT_TCCR0_REG &= ~(7 << GPT_TCCR0_CS00);
    271e:	23 b7       	in	r18, 0x33	; 51
    2720:	28 7f       	andi	r18, 0xF8	; 248
    2722:	23 bf       	out	0x33, r18	; 51
			GPT_TIMSK_REG &= ~(3 << GPT_TIMSK_TOIE0);
    2724:	29 b7       	in	r18, 0x39	; 57
    2726:	2c 7f       	andi	r18, 0xFC	; 252
    2728:	29 bf       	out	0x39, r18	; 57
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
    272a:	fc 01       	movw	r30, r24
    272c:	e0 56       	subi	r30, 0x60	; 96
    272e:	fa 4f       	sbci	r31, 0xFA	; 250
    2730:	23 e0       	ldi	r18, 0x03	; 3
    2732:	20 83       	st	Z, r18
	return GPT_STATUS_ERROR_OK;
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    2738:	86 e0       	ldi	r24, 0x06	; 6
    273a:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    273c:	82 e0       	ldi	r24, 0x02	; 2
    273e:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_STOPPED;
    2740:	88 e0       	ldi	r24, 0x08	; 8
    2742:	08 95       	ret
		case GPT_TIMER_2: /* In case of Timer 2 */
		break;
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    2744:	85 e0       	ldi	r24, 0x05	; 5
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
    2746:	08 95       	ret

00002748 <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    2748:	1f 92       	push	r1
    274a:	0f 92       	push	r0
    274c:	0f b6       	in	r0, 0x3f	; 63
    274e:	0f 92       	push	r0
    2750:	11 24       	eor	r1, r1
    2752:	2f 93       	push	r18
    2754:	3f 93       	push	r19
    2756:	4f 93       	push	r20
    2758:	5f 93       	push	r21
    275a:	6f 93       	push	r22
    275c:	7f 93       	push	r23
    275e:	8f 93       	push	r24
    2760:	9f 93       	push	r25
    2762:	af 93       	push	r26
    2764:	bf 93       	push	r27
    2766:	ef 93       	push	r30
    2768:	ff 93       	push	r31
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	0e 94 99 12 	call	0x2532	; 0x2532 <Gpt_ISRHandler>
    2770:	ff 91       	pop	r31
    2772:	ef 91       	pop	r30
    2774:	bf 91       	pop	r27
    2776:	af 91       	pop	r26
    2778:	9f 91       	pop	r25
    277a:	8f 91       	pop	r24
    277c:	7f 91       	pop	r23
    277e:	6f 91       	pop	r22
    2780:	5f 91       	pop	r21
    2782:	4f 91       	pop	r20
    2784:	3f 91       	pop	r19
    2786:	2f 91       	pop	r18
    2788:	0f 90       	pop	r0
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	0f 90       	pop	r0
    278e:	1f 90       	pop	r1
    2790:	18 95       	reti

00002792 <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    2792:	1f 92       	push	r1
    2794:	0f 92       	push	r0
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	0f 92       	push	r0
    279a:	11 24       	eor	r1, r1
    279c:	2f 93       	push	r18
    279e:	3f 93       	push	r19
    27a0:	4f 93       	push	r20
    27a2:	5f 93       	push	r21
    27a4:	6f 93       	push	r22
    27a6:	7f 93       	push	r23
    27a8:	8f 93       	push	r24
    27aa:	9f 93       	push	r25
    27ac:	af 93       	push	r26
    27ae:	bf 93       	push	r27
    27b0:	ef 93       	push	r30
    27b2:	ff 93       	push	r31
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	0e 94 99 12 	call	0x2532	; 0x2532 <Gpt_ISRHandler>
    27ba:	ff 91       	pop	r31
    27bc:	ef 91       	pop	r30
    27be:	bf 91       	pop	r27
    27c0:	af 91       	pop	r26
    27c2:	9f 91       	pop	r25
    27c4:	8f 91       	pop	r24
    27c6:	7f 91       	pop	r23
    27c8:	6f 91       	pop	r22
    27ca:	5f 91       	pop	r21
    27cc:	4f 91       	pop	r20
    27ce:	3f 91       	pop	r19
    27d0:	2f 91       	pop	r18
    27d2:	0f 90       	pop	r0
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	0f 90       	pop	r0
    27d8:	1f 90       	pop	r1
    27da:	18 95       	reti

000027dc <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    27dc:	1f 92       	push	r1
    27de:	0f 92       	push	r0
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	0f 92       	push	r0
    27e4:	11 24       	eor	r1, r1
    27e6:	2f 93       	push	r18
    27e8:	3f 93       	push	r19
    27ea:	4f 93       	push	r20
    27ec:	5f 93       	push	r21
    27ee:	6f 93       	push	r22
    27f0:	7f 93       	push	r23
    27f2:	8f 93       	push	r24
    27f4:	9f 93       	push	r25
    27f6:	af 93       	push	r26
    27f8:	bf 93       	push	r27
    27fa:	ef 93       	push	r30
    27fc:	ff 93       	push	r31
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	0e 94 99 12 	call	0x2532	; 0x2532 <Gpt_ISRHandler>
    2804:	ff 91       	pop	r31
    2806:	ef 91       	pop	r30
    2808:	bf 91       	pop	r27
    280a:	af 91       	pop	r26
    280c:	9f 91       	pop	r25
    280e:	8f 91       	pop	r24
    2810:	7f 91       	pop	r23
    2812:	6f 91       	pop	r22
    2814:	5f 91       	pop	r21
    2816:	4f 91       	pop	r20
    2818:	3f 91       	pop	r19
    281a:	2f 91       	pop	r18
    281c:	0f 90       	pop	r0
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	0f 90       	pop	r0
    2822:	1f 90       	pop	r1
    2824:	18 95       	reti

00002826 <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2826:	1f 92       	push	r1
    2828:	0f 92       	push	r0
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	0f 92       	push	r0
    282e:	11 24       	eor	r1, r1
    2830:	2f 93       	push	r18
    2832:	3f 93       	push	r19
    2834:	4f 93       	push	r20
    2836:	5f 93       	push	r21
    2838:	6f 93       	push	r22
    283a:	7f 93       	push	r23
    283c:	8f 93       	push	r24
    283e:	9f 93       	push	r25
    2840:	af 93       	push	r26
    2842:	bf 93       	push	r27
    2844:	ef 93       	push	r30
    2846:	ff 93       	push	r31
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	0e 94 99 12 	call	0x2532	; 0x2532 <Gpt_ISRHandler>
    284e:	ff 91       	pop	r31
    2850:	ef 91       	pop	r30
    2852:	bf 91       	pop	r27
    2854:	af 91       	pop	r26
    2856:	9f 91       	pop	r25
    2858:	8f 91       	pop	r24
    285a:	7f 91       	pop	r23
    285c:	6f 91       	pop	r22
    285e:	5f 91       	pop	r21
    2860:	4f 91       	pop	r20
    2862:	3f 91       	pop	r19
    2864:	2f 91       	pop	r18
    2866:	0f 90       	pop	r0
    2868:	0f be       	out	0x3f, r0	; 63
    286a:	0f 90       	pop	r0
    286c:	1f 90       	pop	r1
    286e:	18 95       	reti

00002870 <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2870:	1f 92       	push	r1
    2872:	0f 92       	push	r0
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	0f 92       	push	r0
    2878:	11 24       	eor	r1, r1
    287a:	2f 93       	push	r18
    287c:	3f 93       	push	r19
    287e:	4f 93       	push	r20
    2880:	5f 93       	push	r21
    2882:	6f 93       	push	r22
    2884:	7f 93       	push	r23
    2886:	8f 93       	push	r24
    2888:	9f 93       	push	r25
    288a:	af 93       	push	r26
    288c:	bf 93       	push	r27
    288e:	ef 93       	push	r30
    2890:	ff 93       	push	r31
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	0e 94 99 12 	call	0x2532	; 0x2532 <Gpt_ISRHandler>
    2898:	ff 91       	pop	r31
    289a:	ef 91       	pop	r30
    289c:	bf 91       	pop	r27
    289e:	af 91       	pop	r26
    28a0:	9f 91       	pop	r25
    28a2:	8f 91       	pop	r24
    28a4:	7f 91       	pop	r23
    28a6:	6f 91       	pop	r22
    28a8:	5f 91       	pop	r21
    28aa:	4f 91       	pop	r20
    28ac:	3f 91       	pop	r19
    28ae:	2f 91       	pop	r18
    28b0:	0f 90       	pop	r0
    28b2:	0f be       	out	0x3f, r0	; 63
    28b4:	0f 90       	pop	r0
    28b6:	1f 90       	pop	r1
    28b8:	18 95       	reti

000028ba <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    28ba:	1f 92       	push	r1
    28bc:	0f 92       	push	r0
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	0f 92       	push	r0
    28c2:	11 24       	eor	r1, r1
    28c4:	2f 93       	push	r18
    28c6:	3f 93       	push	r19
    28c8:	4f 93       	push	r20
    28ca:	5f 93       	push	r21
    28cc:	6f 93       	push	r22
    28ce:	7f 93       	push	r23
    28d0:	8f 93       	push	r24
    28d2:	9f 93       	push	r25
    28d4:	af 93       	push	r26
    28d6:	bf 93       	push	r27
    28d8:	ef 93       	push	r30
    28da:	ff 93       	push	r31
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	0e 94 99 12 	call	0x2532	; 0x2532 <Gpt_ISRHandler>
    28e2:	ff 91       	pop	r31
    28e4:	ef 91       	pop	r30
    28e6:	bf 91       	pop	r27
    28e8:	af 91       	pop	r26
    28ea:	9f 91       	pop	r25
    28ec:	8f 91       	pop	r24
    28ee:	7f 91       	pop	r23
    28f0:	6f 91       	pop	r22
    28f2:	5f 91       	pop	r21
    28f4:	4f 91       	pop	r20
    28f6:	3f 91       	pop	r19
    28f8:	2f 91       	pop	r18
    28fa:	0f 90       	pop	r0
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	0f 90       	pop	r0
    2900:	1f 90       	pop	r1
    2902:	18 95       	reti

00002904 <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2904:	1f 92       	push	r1
    2906:	0f 92       	push	r0
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	0f 92       	push	r0
    290c:	11 24       	eor	r1, r1
    290e:	2f 93       	push	r18
    2910:	3f 93       	push	r19
    2912:	4f 93       	push	r20
    2914:	5f 93       	push	r21
    2916:	6f 93       	push	r22
    2918:	7f 93       	push	r23
    291a:	8f 93       	push	r24
    291c:	9f 93       	push	r25
    291e:	af 93       	push	r26
    2920:	bf 93       	push	r27
    2922:	ef 93       	push	r30
    2924:	ff 93       	push	r31
    2926:	82 e0       	ldi	r24, 0x02	; 2
    2928:	0e 94 99 12 	call	0x2532	; 0x2532 <Gpt_ISRHandler>
    292c:	ff 91       	pop	r31
    292e:	ef 91       	pop	r30
    2930:	bf 91       	pop	r27
    2932:	af 91       	pop	r26
    2934:	9f 91       	pop	r25
    2936:	8f 91       	pop	r24
    2938:	7f 91       	pop	r23
    293a:	6f 91       	pop	r22
    293c:	5f 91       	pop	r21
    293e:	4f 91       	pop	r20
    2940:	3f 91       	pop	r19
    2942:	2f 91       	pop	r18
    2944:	0f 90       	pop	r0
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	0f 90       	pop	r0
    294a:	1f 90       	pop	r1
    294c:	18 95       	reti

0000294e <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    294e:	1f 92       	push	r1
    2950:	0f 92       	push	r0
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	0f 92       	push	r0
    2956:	11 24       	eor	r1, r1
    2958:	2f 93       	push	r18
    295a:	3f 93       	push	r19
    295c:	4f 93       	push	r20
    295e:	5f 93       	push	r21
    2960:	6f 93       	push	r22
    2962:	7f 93       	push	r23
    2964:	8f 93       	push	r24
    2966:	9f 93       	push	r25
    2968:	af 93       	push	r26
    296a:	bf 93       	push	r27
    296c:	ef 93       	push	r30
    296e:	ff 93       	push	r31
    2970:	82 e0       	ldi	r24, 0x02	; 2
    2972:	0e 94 99 12 	call	0x2532	; 0x2532 <Gpt_ISRHandler>
    2976:	ff 91       	pop	r31
    2978:	ef 91       	pop	r30
    297a:	bf 91       	pop	r27
    297c:	af 91       	pop	r26
    297e:	9f 91       	pop	r25
    2980:	8f 91       	pop	r24
    2982:	7f 91       	pop	r23
    2984:	6f 91       	pop	r22
    2986:	5f 91       	pop	r21
    2988:	4f 91       	pop	r20
    298a:	3f 91       	pop	r19
    298c:	2f 91       	pop	r18
    298e:	0f 90       	pop	r0
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	0f 90       	pop	r0
    2994:	1f 90       	pop	r1
    2996:	18 95       	reti

00002998 <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
    2998:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    299c:	86 30       	cpi	r24, 0x06	; 6
    299e:	41 f0       	breq	.+16     	; 0x29b0 <I2C_MasterInit+0x18>
    29a0:	11 b8       	out	0x01, r1	; 1
    29a2:	8a ef       	ldi	r24, 0xFA	; 250
    29a4:	80 b9       	out	0x00, r24	; 0
    29a6:	86 e0       	ldi	r24, 0x06	; 6
    29a8:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <genuI2C_Status>
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	08 95       	ret
    29b0:	87 e0       	ldi	r24, 0x07	; 7
    29b2:	08 95       	ret

000029b4 <I2C_MasterSendSTART>:
    29b4:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    29b8:	86 30       	cpi	r24, 0x06	; 6
    29ba:	59 f4       	brne	.+22     	; 0x29d2 <I2C_MasterSendSTART+0x1e>
    29bc:	84 ea       	ldi	r24, 0xA4	; 164
    29be:	86 bf       	out	0x36, r24	; 54
    29c0:	06 b6       	in	r0, 0x36	; 54
    29c2:	07 fe       	sbrs	r0, 7
    29c4:	fd cf       	rjmp	.-6      	; 0x29c0 <I2C_MasterSendSTART+0xc>
    29c6:	81 b1       	in	r24, 0x01	; 1
    29c8:	88 7f       	andi	r24, 0xF8	; 248
    29ca:	88 30       	cpi	r24, 0x08	; 8
    29cc:	21 f0       	breq	.+8      	; 0x29d6 <I2C_MasterSendSTART+0x22>
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	08 95       	ret
    29d2:	85 e0       	ldi	r24, 0x05	; 5
    29d4:	08 95       	ret
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	08 95       	ret

000029da <I2C_MasterSendSlaveAddress>:
    29da:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    29de:	96 30       	cpi	r25, 0x06	; 6
    29e0:	29 f5       	brne	.+74     	; 0x2a2c <I2C_MasterSendSlaveAddress+0x52>
    29e2:	62 30       	cpi	r22, 0x02	; 2
    29e4:	28 f5       	brcc	.+74     	; 0x2a30 <I2C_MasterSendSlaveAddress+0x56>
    29e6:	88 23       	and	r24, r24
    29e8:	2c f1       	brlt	.+74     	; 0x2a34 <I2C_MasterSendSlaveAddress+0x5a>
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	88 0f       	add	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	68 2b       	or	r22, r24
    29f2:	63 b9       	out	0x03, r22	; 3
    29f4:	84 e8       	ldi	r24, 0x84	; 132
    29f6:	86 bf       	out	0x36, r24	; 54
    29f8:	06 b6       	in	r0, 0x36	; 54
    29fa:	07 fe       	sbrs	r0, 7
    29fc:	fd cf       	rjmp	.-6      	; 0x29f8 <I2C_MasterSendSlaveAddress+0x1e>
    29fe:	81 b1       	in	r24, 0x01	; 1
    2a00:	88 7f       	andi	r24, 0xF8	; 248
    2a02:	88 33       	cpi	r24, 0x38	; 56
    2a04:	59 f0       	breq	.+22     	; 0x2a1c <I2C_MasterSendSlaveAddress+0x42>
    2a06:	28 f4       	brcc	.+10     	; 0x2a12 <I2C_MasterSendSlaveAddress+0x38>
    2a08:	88 31       	cpi	r24, 0x18	; 24
    2a0a:	b1 f0       	breq	.+44     	; 0x2a38 <I2C_MasterSendSlaveAddress+0x5e>
    2a0c:	80 32       	cpi	r24, 0x20	; 32
    2a0e:	41 f0       	breq	.+16     	; 0x2a20 <I2C_MasterSendSlaveAddress+0x46>
    2a10:	0b c0       	rjmp	.+22     	; 0x2a28 <I2C_MasterSendSlaveAddress+0x4e>
    2a12:	80 34       	cpi	r24, 0x40	; 64
    2a14:	89 f0       	breq	.+34     	; 0x2a38 <I2C_MasterSendSlaveAddress+0x5e>
    2a16:	88 34       	cpi	r24, 0x48	; 72
    2a18:	29 f0       	breq	.+10     	; 0x2a24 <I2C_MasterSendSlaveAddress+0x4a>
    2a1a:	06 c0       	rjmp	.+12     	; 0x2a28 <I2C_MasterSendSlaveAddress+0x4e>
    2a1c:	88 e3       	ldi	r24, 0x38	; 56
    2a1e:	08 95       	ret
    2a20:	80 e2       	ldi	r24, 0x20	; 32
    2a22:	08 95       	ret
    2a24:	88 e4       	ldi	r24, 0x48	; 72
    2a26:	08 95       	ret
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	08 95       	ret
    2a2c:	85 e0       	ldi	r24, 0x05	; 5
    2a2e:	08 95       	ret
    2a30:	82 e0       	ldi	r24, 0x02	; 2
    2a32:	08 95       	ret
    2a34:	83 e0       	ldi	r24, 0x03	; 3
    2a36:	08 95       	ret
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	08 95       	ret

00002a3c <I2C_MasterSendRepSTART>:
    2a3c:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2a40:	86 30       	cpi	r24, 0x06	; 6
    2a42:	59 f4       	brne	.+22     	; 0x2a5a <I2C_MasterSendRepSTART+0x1e>
    2a44:	84 ea       	ldi	r24, 0xA4	; 164
    2a46:	86 bf       	out	0x36, r24	; 54
    2a48:	06 b6       	in	r0, 0x36	; 54
    2a4a:	07 fe       	sbrs	r0, 7
    2a4c:	fd cf       	rjmp	.-6      	; 0x2a48 <I2C_MasterSendRepSTART+0xc>
    2a4e:	81 b1       	in	r24, 0x01	; 1
    2a50:	88 7f       	andi	r24, 0xF8	; 248
    2a52:	80 31       	cpi	r24, 0x10	; 16
    2a54:	21 f0       	breq	.+8      	; 0x2a5e <I2C_MasterSendRepSTART+0x22>
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	08 95       	ret
    2a5a:	85 e0       	ldi	r24, 0x05	; 5
    2a5c:	08 95       	ret
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	08 95       	ret

00002a62 <I2C_MasterSendSTOP>:
    2a62:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2a66:	86 30       	cpi	r24, 0x06	; 6
    2a68:	39 f4       	brne	.+14     	; 0x2a78 <I2C_MasterSendSTOP+0x16>
    2a6a:	84 e9       	ldi	r24, 0x94	; 148
    2a6c:	86 bf       	out	0x36, r24	; 54
    2a6e:	06 b6       	in	r0, 0x36	; 54
    2a70:	04 fc       	sbrc	r0, 4
    2a72:	fd cf       	rjmp	.-6      	; 0x2a6e <I2C_MasterSendSTOP+0xc>
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	08 95       	ret
    2a78:	85 e0       	ldi	r24, 0x05	; 5
    2a7a:	08 95       	ret

00002a7c <I2C_MasterSendByte>:
    2a7c:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2a80:	96 30       	cpi	r25, 0x06	; 6
    2a82:	69 f4       	brne	.+26     	; 0x2a9e <I2C_MasterSendByte+0x22>
    2a84:	83 b9       	out	0x03, r24	; 3
    2a86:	84 e8       	ldi	r24, 0x84	; 132
    2a88:	86 bf       	out	0x36, r24	; 54
    2a8a:	06 b6       	in	r0, 0x36	; 54
    2a8c:	07 fe       	sbrs	r0, 7
    2a8e:	fd cf       	rjmp	.-6      	; 0x2a8a <I2C_MasterSendByte+0xe>
    2a90:	81 b1       	in	r24, 0x01	; 1
    2a92:	88 7f       	andi	r24, 0xF8	; 248
    2a94:	88 32       	cpi	r24, 0x28	; 40
    2a96:	29 f0       	breq	.+10     	; 0x2aa2 <I2C_MasterSendByte+0x26>
    2a98:	80 33       	cpi	r24, 0x30	; 48
    2a9a:	29 f4       	brne	.+10     	; 0x2aa6 <I2C_MasterSendByte+0x2a>
    2a9c:	08 95       	ret
    2a9e:	85 e0       	ldi	r24, 0x05	; 5
    2aa0:	08 95       	ret
    2aa2:	88 e2       	ldi	r24, 0x28	; 40
    2aa4:	08 95       	ret
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	08 95       	ret

00002aaa <I2C_MasterReceiveByte_ACK>:
    2aaa:	fc 01       	movw	r30, r24
    2aac:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2ab0:	96 30       	cpi	r25, 0x06	; 6
    2ab2:	79 f4       	brne	.+30     	; 0x2ad2 <I2C_MasterReceiveByte_ACK+0x28>
    2ab4:	30 97       	sbiw	r30, 0x00	; 0
    2ab6:	79 f0       	breq	.+30     	; 0x2ad6 <I2C_MasterReceiveByte_ACK+0x2c>
    2ab8:	84 ec       	ldi	r24, 0xC4	; 196
    2aba:	86 bf       	out	0x36, r24	; 54
    2abc:	06 b6       	in	r0, 0x36	; 54
    2abe:	07 fe       	sbrs	r0, 7
    2ac0:	fd cf       	rjmp	.-6      	; 0x2abc <I2C_MasterReceiveByte_ACK+0x12>
    2ac2:	81 b1       	in	r24, 0x01	; 1
    2ac4:	88 7f       	andi	r24, 0xF8	; 248
    2ac6:	80 35       	cpi	r24, 0x50	; 80
    2ac8:	41 f4       	brne	.+16     	; 0x2ada <I2C_MasterReceiveByte_ACK+0x30>
    2aca:	83 b1       	in	r24, 0x03	; 3
    2acc:	80 83       	st	Z, r24
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	08 95       	ret
    2ad2:	85 e0       	ldi	r24, 0x05	; 5
    2ad4:	08 95       	ret
    2ad6:	84 e0       	ldi	r24, 0x04	; 4
    2ad8:	08 95       	ret
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	08 95       	ret

00002ade <I2C_MasterReceiveByte_NACK>:
    2ade:	fc 01       	movw	r30, r24
    2ae0:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2ae4:	96 30       	cpi	r25, 0x06	; 6
    2ae6:	79 f4       	brne	.+30     	; 0x2b06 <I2C_MasterReceiveByte_NACK+0x28>
    2ae8:	30 97       	sbiw	r30, 0x00	; 0
    2aea:	79 f0       	breq	.+30     	; 0x2b0a <I2C_MasterReceiveByte_NACK+0x2c>
    2aec:	84 e8       	ldi	r24, 0x84	; 132
    2aee:	86 bf       	out	0x36, r24	; 54
    2af0:	06 b6       	in	r0, 0x36	; 54
    2af2:	07 fe       	sbrs	r0, 7
    2af4:	fd cf       	rjmp	.-6      	; 0x2af0 <I2C_MasterReceiveByte_NACK+0x12>
    2af6:	81 b1       	in	r24, 0x01	; 1
    2af8:	88 7f       	andi	r24, 0xF8	; 248
    2afa:	88 35       	cpi	r24, 0x58	; 88
    2afc:	41 f4       	brne	.+16     	; 0x2b0e <I2C_MasterReceiveByte_NACK+0x30>
    2afe:	83 b1       	in	r24, 0x03	; 3
    2b00:	80 83       	st	Z, r24
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	08 95       	ret
    2b06:	85 e0       	ldi	r24, 0x05	; 5
    2b08:	08 95       	ret
    2b0a:	84 e0       	ldi	r24, 0x04	; 4
    2b0c:	08 95       	ret
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	08 95       	ret

00002b12 <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
    2b12:	7f 92       	push	r7
    2b14:	8f 92       	push	r8
    2b16:	9f 92       	push	r9
    2b18:	af 92       	push	r10
    2b1a:	bf 92       	push	r11
    2b1c:	cf 92       	push	r12
    2b1e:	df 92       	push	r13
    2b20:	ef 92       	push	r14
    2b22:	ff 92       	push	r15
    2b24:	0f 93       	push	r16
    2b26:	1f 93       	push	r17
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	78 2e       	mov	r7, r24
    2b2e:	eb 01       	movw	r28, r22
    2b30:	7a 01       	movw	r14, r20
    2b32:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    2b34:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2b38:	86 30       	cpi	r24, 0x06	; 6
    2b3a:	09 f0       	breq	.+2      	; 0x2b3e <I2C_MasterReceiveGeneral+0x2c>
    2b3c:	47 c0       	rjmp	.+142    	; 0x2bcc <I2C_MasterReceiveGeneral+0xba>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
    2b3e:	20 97       	sbiw	r28, 0x00	; 0
    2b40:	09 f4       	brne	.+2      	; 0x2b44 <I2C_MasterReceiveGeneral+0x32>
    2b42:	46 c0       	rjmp	.+140    	; 0x2bd0 <I2C_MasterReceiveGeneral+0xbe>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
    2b44:	23 2b       	or	r18, r19
    2b46:	09 f4       	brne	.+2      	; 0x2b4a <I2C_MasterReceiveGeneral+0x38>
    2b48:	45 c0       	rjmp	.+138    	; 0x2bd4 <I2C_MasterReceiveGeneral+0xc2>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    2b4a:	77 20       	and	r7, r7
    2b4c:	0c f4       	brge	.+2      	; 0x2b50 <I2C_MasterReceiveGeneral+0x3e>
    2b4e:	44 c0       	rjmp	.+136    	; 0x2bd8 <I2C_MasterReceiveGeneral+0xc6>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2b50:	0e 94 da 14 	call	0x29b4	; 0x29b4 <I2C_MasterSendSTART>
    2b54:	88 23       	and	r24, r24
    2b56:	09 f4       	brne	.+2      	; 0x2b5a <I2C_MasterReceiveGeneral+0x48>
    2b58:	4a c0       	rjmp	.+148    	; 0x2bee <I2C_MasterReceiveGeneral+0xdc>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2b5a:	60 e0       	ldi	r22, 0x00	; 0
    2b5c:	87 2d       	mov	r24, r7
    2b5e:	0e 94 ed 14 	call	0x29da	; 0x29da <I2C_MasterSendSlaveAddress>
    2b62:	81 30       	cpi	r24, 0x01	; 1
    2b64:	d9 f5       	brne	.+118    	; 0x2bdc <I2C_MasterReceiveGeneral+0xca>
    2b66:	0b c0       	rjmp	.+22     	; 0x2b7e <I2C_MasterReceiveGeneral+0x6c>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2b68:	4e 01       	movw	r8, r28
    2b6a:	8f ef       	ldi	r24, 0xFF	; 255
    2b6c:	88 1a       	sub	r8, r24
    2b6e:	98 0a       	sbc	r9, r24
    2b70:	88 81       	ld	r24, Y
    2b72:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    2b76:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2b78:	88 23       	and	r24, r24
    2b7a:	c9 f1       	breq	.+114    	; 0x2bee <I2C_MasterReceiveGeneral+0xdc>
    2b7c:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    2b7e:	57 01       	movw	r10, r14
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	a8 1a       	sub	r10, r24
    2b84:	b1 08       	sbc	r11, r1
    2b86:	ef 28       	or	r14, r15
    2b88:	79 f7       	brne	.-34     	; 0x2b68 <I2C_MasterReceiveGeneral+0x56>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
    2b8a:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <I2C_MasterSendRepSTART>
    2b8e:	81 30       	cpi	r24, 0x01	; 1
    2b90:	39 f5       	brne	.+78     	; 0x2be0 <I2C_MasterReceiveGeneral+0xce>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2b92:	61 e0       	ldi	r22, 0x01	; 1
    2b94:	87 2d       	mov	r24, r7
    2b96:	0e 94 ed 14 	call	0x29da	; 0x29da <I2C_MasterSendSlaveAddress>
    2b9a:	81 30       	cpi	r24, 0x01	; 1
    2b9c:	19 f5       	brne	.+70     	; 0x2be4 <I2C_MasterReceiveGeneral+0xd2>
    2b9e:	08 c0       	rjmp	.+16     	; 0x2bb0 <I2C_MasterReceiveGeneral+0x9e>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
    2ba0:	e6 01       	movw	r28, r12
    2ba2:	21 96       	adiw	r28, 0x01	; 1
    2ba4:	c6 01       	movw	r24, r12
    2ba6:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <I2C_MasterReceiveByte_ACK>
    2baa:	81 30       	cpi	r24, 0x01	; 1
    2bac:	e9 f4       	brne	.+58     	; 0x2be8 <I2C_MasterReceiveGeneral+0xd6>
    2bae:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
    2bb0:	01 50       	subi	r16, 0x01	; 1
    2bb2:	11 09       	sbc	r17, r1
    2bb4:	a9 f7       	brne	.-22     	; 0x2ba0 <I2C_MasterReceiveGeneral+0x8e>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
    2bb6:	c6 01       	movw	r24, r12
    2bb8:	0e 94 6f 15 	call	0x2ade	; 0x2ade <I2C_MasterReceiveByte_NACK>
    2bbc:	81 30       	cpi	r24, 0x01	; 1
    2bbe:	b1 f4       	brne	.+44     	; 0x2bec <I2C_MasterReceiveGeneral+0xda>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
    2bc0:	0e 94 31 15 	call	0x2a62	; 0x2a62 <I2C_MasterSendSTOP>
    2bc4:	81 30       	cpi	r24, 0x01	; 1
    2bc6:	99 f0       	breq	.+38     	; 0x2bee <I2C_MasterReceiveGeneral+0xdc>
		return I2C_STATUS_ERROR_NOK;
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	11 c0       	rjmp	.+34     	; 0x2bee <I2C_MasterReceiveGeneral+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    2bcc:	85 e0       	ldi	r24, 0x05	; 5
    2bce:	0f c0       	rjmp	.+30     	; 0x2bee <I2C_MasterReceiveGeneral+0xdc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2bd0:	84 e0       	ldi	r24, 0x04	; 4
    2bd2:	0d c0       	rjmp	.+26     	; 0x2bee <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2bd4:	84 e0       	ldi	r24, 0x04	; 4
    2bd6:	0b c0       	rjmp	.+22     	; 0x2bee <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    2bd8:	83 e0       	ldi	r24, 0x03	; 3
    2bda:	09 c0       	rjmp	.+18     	; 0x2bee <I2C_MasterReceiveGeneral+0xdc>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	07 c0       	rjmp	.+14     	; 0x2bee <I2C_MasterReceiveGeneral+0xdc>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	05 c0       	rjmp	.+10     	; 0x2bee <I2C_MasterReceiveGeneral+0xdc>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	03 c0       	rjmp	.+6      	; 0x2bee <I2C_MasterReceiveGeneral+0xdc>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	01 c0       	rjmp	.+2      	; 0x2bee <I2C_MasterReceiveGeneral+0xdc>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    2bec:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
    2bee:	df 91       	pop	r29
    2bf0:	cf 91       	pop	r28
    2bf2:	1f 91       	pop	r17
    2bf4:	0f 91       	pop	r16
    2bf6:	ff 90       	pop	r15
    2bf8:	ef 90       	pop	r14
    2bfa:	df 90       	pop	r13
    2bfc:	cf 90       	pop	r12
    2bfe:	bf 90       	pop	r11
    2c00:	af 90       	pop	r10
    2c02:	9f 90       	pop	r9
    2c04:	8f 90       	pop	r8
    2c06:	7f 90       	pop	r7
    2c08:	08 95       	ret

00002c0a <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
    2c0a:	bf 92       	push	r11
    2c0c:	cf 92       	push	r12
    2c0e:	df 92       	push	r13
    2c10:	ef 92       	push	r14
    2c12:	ff 92       	push	r15
    2c14:	0f 93       	push	r16
    2c16:	1f 93       	push	r17
    2c18:	cf 93       	push	r28
    2c1a:	df 93       	push	r29
    2c1c:	18 2f       	mov	r17, r24
    2c1e:	06 2f       	mov	r16, r22
    2c20:	ea 01       	movw	r28, r20
    2c22:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    2c24:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2c28:	86 30       	cpi	r24, 0x06	; 6
    2c2a:	59 f5       	brne	.+86     	; 0x2c82 <I2C_MasterSendToLocation+0x78>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    2c2c:	20 97       	sbiw	r28, 0x00	; 0
    2c2e:	59 f1       	breq	.+86     	; 0x2c86 <I2C_MasterSendToLocation+0x7c>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    2c30:	11 23       	and	r17, r17
    2c32:	5c f1       	brlt	.+86     	; 0x2c8a <I2C_MasterSendToLocation+0x80>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2c34:	0e 94 da 14 	call	0x29b4	; 0x29b4 <I2C_MasterSendSTART>
    2c38:	88 23       	and	r24, r24
    2c3a:	61 f1       	breq	.+88     	; 0x2c94 <I2C_MasterSendToLocation+0x8a>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2c3c:	60 e0       	ldi	r22, 0x00	; 0
    2c3e:	81 2f       	mov	r24, r17
    2c40:	0e 94 ed 14 	call	0x29da	; 0x29da <I2C_MasterSendSlaveAddress>
    2c44:	b8 2e       	mov	r11, r24
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	b8 12       	cpse	r11, r24
    2c4a:	21 c0       	rjmp	.+66     	; 0x2c8e <I2C_MasterSendToLocation+0x84>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2c4c:	80 2f       	mov	r24, r16
    2c4e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <I2C_MasterSendByte>
    2c52:	81 11       	cpse	r24, r1
    2c54:	0c c0       	rjmp	.+24     	; 0x2c6e <I2C_MasterSendToLocation+0x64>
    2c56:	1e c0       	rjmp	.+60     	; 0x2c94 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2c58:	6e 01       	movw	r12, r28
    2c5a:	8f ef       	ldi	r24, 0xFF	; 255
    2c5c:	c8 1a       	sub	r12, r24
    2c5e:	d8 0a       	sbc	r13, r24
    2c60:	88 81       	ld	r24, Y
    2c62:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <I2C_MasterSendByte>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    2c66:	78 01       	movw	r14, r16
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2c68:	88 23       	and	r24, r24
    2c6a:	a1 f0       	breq	.+40     	; 0x2c94 <I2C_MasterSendToLocation+0x8a>
    2c6c:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    2c6e:	87 01       	movw	r16, r14
    2c70:	01 50       	subi	r16, 0x01	; 1
    2c72:	11 09       	sbc	r17, r1
    2c74:	ef 28       	or	r14, r15
    2c76:	81 f7       	brne	.-32     	; 0x2c58 <I2C_MasterSendToLocation+0x4e>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2c78:	0e 94 31 15 	call	0x2a62	; 0x2a62 <I2C_MasterSendSTOP>
    2c7c:	81 11       	cpse	r24, r1
    2c7e:	09 c0       	rjmp	.+18     	; 0x2c92 <I2C_MasterSendToLocation+0x88>
    2c80:	09 c0       	rjmp	.+18     	; 0x2c94 <I2C_MasterSendToLocation+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    2c82:	85 e0       	ldi	r24, 0x05	; 5
    2c84:	07 c0       	rjmp	.+14     	; 0x2c94 <I2C_MasterSendToLocation+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2c86:	84 e0       	ldi	r24, 0x04	; 4
    2c88:	05 c0       	rjmp	.+10     	; 0x2c94 <I2C_MasterSendToLocation+0x8a>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    2c8a:	83 e0       	ldi	r24, 0x03	; 3
    2c8c:	03 c0       	rjmp	.+6      	; 0x2c94 <I2C_MasterSendToLocation+0x8a>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	01 c0       	rjmp	.+2      	; 0x2c94 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
    2c92:	8b 2d       	mov	r24, r11
}
    2c94:	df 91       	pop	r29
    2c96:	cf 91       	pop	r28
    2c98:	1f 91       	pop	r17
    2c9a:	0f 91       	pop	r16
    2c9c:	ff 90       	pop	r15
    2c9e:	ef 90       	pop	r14
    2ca0:	df 90       	pop	r13
    2ca2:	cf 90       	pop	r12
    2ca4:	bf 90       	pop	r11
    2ca6:	08 95       	ret

00002ca8 <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
    2ca8:	0f 93       	push	r16
    2caa:	1f 93       	push	r17
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    2cb0:	1f 92       	push	r1
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    2cb6:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
    2cb8:	89 01       	movw	r16, r18
    2cba:	9a 01       	movw	r18, r20
    2cbc:	41 e0       	ldi	r20, 0x01	; 1
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	be 01       	movw	r22, r28
    2cc2:	6f 5f       	subi	r22, 0xFF	; 255
    2cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc6:	0e 94 89 15 	call	0x2b12	; 0x2b12 <I2C_MasterReceiveGeneral>
}
    2cca:	0f 90       	pop	r0
    2ccc:	df 91       	pop	r29
    2cce:	cf 91       	pop	r28
    2cd0:	1f 91       	pop	r17
    2cd2:	0f 91       	pop	r16
    2cd4:	08 95       	ret

00002cd6 <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
    2cd6:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <genuSpi_Status>
    2cda:	87 30       	cpi	r24, 0x07	; 7
    2cdc:	b9 f0       	breq	.+46     	; 0x2d0c <Spi_init+0x36>
    2cde:	87 b3       	in	r24, 0x17	; 23
    2ce0:	80 64       	ori	r24, 0x40	; 64
    2ce2:	87 bb       	out	0x17, r24	; 23
    2ce4:	87 b3       	in	r24, 0x17	; 23
    2ce6:	8f 7d       	andi	r24, 0xDF	; 223
    2ce8:	87 bb       	out	0x17, r24	; 23
    2cea:	87 b3       	in	r24, 0x17	; 23
    2cec:	8f 7e       	andi	r24, 0xEF	; 239
    2cee:	87 bb       	out	0x17, r24	; 23
    2cf0:	87 b3       	in	r24, 0x17	; 23
    2cf2:	8f 77       	andi	r24, 0x7F	; 127
    2cf4:	87 bb       	out	0x17, r24	; 23
    2cf6:	8d b1       	in	r24, 0x0d	; 13
    2cf8:	8f 7e       	andi	r24, 0xEF	; 239
    2cfa:	8d b9       	out	0x0d, r24	; 13
    2cfc:	8d b1       	in	r24, 0x0d	; 13
    2cfe:	80 64       	ori	r24, 0x40	; 64
    2d00:	8d b9       	out	0x0d, r24	; 13
    2d02:	87 e0       	ldi	r24, 0x07	; 7
    2d04:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <genuSpi_Status>
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	08 95       	ret
    2d0c:	88 e0       	ldi	r24, 0x08	; 8
    2d0e:	08 95       	ret

00002d10 <Spi_SlaveReceiveByte>:
    2d10:	fc 01       	movw	r30, r24
    2d12:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <genuSpi_Status>
    2d16:	97 30       	cpi	r25, 0x07	; 7
    2d18:	41 f4       	brne	.+16     	; 0x2d2a <Spi_SlaveReceiveByte+0x1a>
    2d1a:	30 97       	sbiw	r30, 0x00	; 0
    2d1c:	41 f0       	breq	.+16     	; 0x2d2e <Spi_SlaveReceiveByte+0x1e>
    2d1e:	77 9b       	sbis	0x0e, 7	; 14
    2d20:	fe cf       	rjmp	.-4      	; 0x2d1e <Spi_SlaveReceiveByte+0xe>
    2d22:	8f b1       	in	r24, 0x0f	; 15
    2d24:	80 83       	st	Z, r24
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	08 95       	ret
    2d2a:	86 e0       	ldi	r24, 0x06	; 6
    2d2c:	08 95       	ret
    2d2e:	85 e0       	ldi	r24, 0x05	; 5
    2d30:	08 95       	ret

00002d32 <Spi_SlaveReceivePacket>:
    2d32:	cf 92       	push	r12
    2d34:	df 92       	push	r13
    2d36:	ef 92       	push	r14
    2d38:	ff 92       	push	r15
    2d3a:	1f 93       	push	r17
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	6c 01       	movw	r12, r24
    2d42:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <genuSpi_Status>
    2d46:	97 30       	cpi	r25, 0x07	; 7
    2d48:	b1 f4       	brne	.+44     	; 0x2d76 <Spi_SlaveReceivePacket+0x44>
    2d4a:	7b 01       	movw	r14, r22
    2d4c:	10 e0       	ldi	r17, 0x00	; 0
    2d4e:	0c c0       	rjmp	.+24     	; 0x2d68 <Spi_SlaveReceivePacket+0x36>
    2d50:	e6 01       	movw	r28, r12
    2d52:	c8 0f       	add	r28, r24
    2d54:	d9 1f       	adc	r29, r25
    2d56:	ce 01       	movw	r24, r28
    2d58:	0e 94 88 16 	call	0x2d10	; 0x2d10 <Spi_SlaveReceiveByte>
    2d5c:	81 30       	cpi	r24, 0x01	; 1
    2d5e:	69 f4       	brne	.+26     	; 0x2d7a <Spi_SlaveReceivePacket+0x48>
    2d60:	98 81       	ld	r25, Y
    2d62:	99 23       	and	r25, r25
    2d64:	59 f0       	breq	.+22     	; 0x2d7c <Spi_SlaveReceivePacket+0x4a>
    2d66:	1f 5f       	subi	r17, 0xFF	; 255
    2d68:	81 2f       	mov	r24, r17
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	8e 15       	cp	r24, r14
    2d6e:	9f 05       	cpc	r25, r15
    2d70:	78 f3       	brcs	.-34     	; 0x2d50 <Spi_SlaveReceivePacket+0x1e>
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	03 c0       	rjmp	.+6      	; 0x2d7c <Spi_SlaveReceivePacket+0x4a>
    2d76:	86 e0       	ldi	r24, 0x06	; 6
    2d78:	01 c0       	rjmp	.+2      	; 0x2d7c <Spi_SlaveReceivePacket+0x4a>
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	1f 91       	pop	r17
    2d82:	ff 90       	pop	r15
    2d84:	ef 90       	pop	r14
    2d86:	df 90       	pop	r13
    2d88:	cf 90       	pop	r12
    2d8a:	08 95       	ret

00002d8c <__vector_12>:


    2d8c:	1f 92       	push	r1
    2d8e:	0f 92       	push	r0
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	0f 92       	push	r0
    2d94:	11 24       	eor	r1, r1
    2d96:	2f 93       	push	r18
    2d98:	3f 93       	push	r19
    2d9a:	4f 93       	push	r20
    2d9c:	5f 93       	push	r21
    2d9e:	6f 93       	push	r22
    2da0:	7f 93       	push	r23
    2da2:	8f 93       	push	r24
    2da4:	9f 93       	push	r25
    2da6:	af 93       	push	r26
    2da8:	bf 93       	push	r27
    2daa:	ef 93       	push	r30
    2dac:	ff 93       	push	r31
    2dae:	e0 91 a3 05 	lds	r30, 0x05A3	; 0x8005a3 <SPI_STC_CallBackPtr>
    2db2:	f0 91 a4 05 	lds	r31, 0x05A4	; 0x8005a4 <SPI_STC_CallBackPtr+0x1>
    2db6:	09 95       	icall
    2db8:	ff 91       	pop	r31
    2dba:	ef 91       	pop	r30
    2dbc:	bf 91       	pop	r27
    2dbe:	af 91       	pop	r26
    2dc0:	9f 91       	pop	r25
    2dc2:	8f 91       	pop	r24
    2dc4:	7f 91       	pop	r23
    2dc6:	6f 91       	pop	r22
    2dc8:	5f 91       	pop	r21
    2dca:	4f 91       	pop	r20
    2dcc:	3f 91       	pop	r19
    2dce:	2f 91       	pop	r18
    2dd0:	0f 90       	pop	r0
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	0f 90       	pop	r0
    2dd6:	1f 90       	pop	r1
    2dd8:	18 95       	reti

00002dda <stringLength>:
	for (s8_loopIndex=length-2; s8_loopIndex>=0; s8_loopIndex--)
	{
		*pu32_Num += (pu8_String[s8_loopIndex]-'0') *digit;
		digit*=10;
	}
}
    2dda:	ac 01       	movw	r20, r24
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	01 c0       	rjmp	.+2      	; 0x2de2 <stringLength+0x8>
    2de0:	8f 5f       	subi	r24, 0xFF	; 255
    2de2:	fa 01       	movw	r30, r20
    2de4:	e8 0f       	add	r30, r24
    2de6:	f1 1d       	adc	r31, r1
    2de8:	20 81       	ld	r18, Z
    2dea:	21 11       	cpse	r18, r1
    2dec:	f9 cf       	rjmp	.-14     	; 0x2de0 <stringLength+0x6>
    2dee:	8f 5f       	subi	r24, 0xFF	; 255
    2df0:	08 95       	ret

00002df2 <stringCompare>:
    2df2:	ff 92       	push	r15
    2df4:	0f 93       	push	r16
    2df6:	1f 93       	push	r17
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	8c 01       	movw	r16, r24
    2dfe:	eb 01       	movw	r28, r22
    2e00:	0e 94 ed 16 	call	0x2dda	; 0x2dda <stringLength>
    2e04:	f8 2e       	mov	r15, r24
    2e06:	ce 01       	movw	r24, r28
    2e08:	0e 94 ed 16 	call	0x2dda	; 0x2dda <stringLength>
    2e0c:	8f 15       	cp	r24, r15
    2e0e:	b8 f0       	brcs	.+46     	; 0x2e3e <stringCompare+0x4c>
    2e10:	f8 16       	cp	r15, r24
    2e12:	b8 f0       	brcs	.+46     	; 0x2e42 <stringCompare+0x50>
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	09 c0       	rjmp	.+18     	; 0x2e2a <stringCompare+0x38>
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e8 0f       	add	r30, r24
    2e1c:	f9 1f       	adc	r31, r25
    2e1e:	80 81       	ld	r24, Z
    2e20:	82 17       	cp	r24, r18
    2e22:	88 f0       	brcs	.+34     	; 0x2e46 <stringCompare+0x54>
    2e24:	28 17       	cp	r18, r24
    2e26:	88 f0       	brcs	.+34     	; 0x2e4a <stringCompare+0x58>
    2e28:	3f 5f       	subi	r19, 0xFF	; 255
    2e2a:	83 2f       	mov	r24, r19
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	f8 01       	movw	r30, r16
    2e30:	e8 0f       	add	r30, r24
    2e32:	f9 1f       	adc	r31, r25
    2e34:	20 81       	ld	r18, Z
    2e36:	21 11       	cpse	r18, r1
    2e38:	ef cf       	rjmp	.-34     	; 0x2e18 <stringCompare+0x26>
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	07 c0       	rjmp	.+14     	; 0x2e4c <stringCompare+0x5a>
    2e3e:	82 e0       	ldi	r24, 0x02	; 2
    2e40:	05 c0       	rjmp	.+10     	; 0x2e4c <stringCompare+0x5a>
    2e42:	83 e0       	ldi	r24, 0x03	; 3
    2e44:	03 c0       	rjmp	.+6      	; 0x2e4c <stringCompare+0x5a>
    2e46:	82 e0       	ldi	r24, 0x02	; 2
    2e48:	01 c0       	rjmp	.+2      	; 0x2e4c <stringCompare+0x5a>
    2e4a:	83 e0       	ldi	r24, 0x03	; 3
    2e4c:	df 91       	pop	r29
    2e4e:	cf 91       	pop	r28
    2e50:	1f 91       	pop	r17
    2e52:	0f 91       	pop	r16
    2e54:	ff 90       	pop	r15
    2e56:	08 95       	ret

00002e58 <EmptyString>:
    2e58:	ac 01       	movw	r20, r24
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <EmptyString+0xa>
    2e5e:	9f 5f       	subi	r25, 0xFF	; 255
    2e60:	10 82       	st	Z, r1
    2e62:	fa 01       	movw	r30, r20
    2e64:	e9 0f       	add	r30, r25
    2e66:	f1 1d       	adc	r31, r1
    2e68:	20 81       	ld	r18, Z
    2e6a:	21 11       	cpse	r18, r1
    2e6c:	f8 cf       	rjmp	.-16     	; 0x2e5e <EmptyString+0x6>
    2e6e:	08 95       	ret

00002e70 <stringCopy>:
    2e70:	dc 01       	movw	r26, r24
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	05 c0       	rjmp	.+10     	; 0x2e80 <stringCopy+0x10>
    2e76:	fb 01       	movw	r30, r22
    2e78:	e2 0f       	add	r30, r18
    2e7a:	f3 1f       	adc	r31, r19
    2e7c:	40 83       	st	Z, r20
    2e7e:	9f 5f       	subi	r25, 0xFF	; 255
    2e80:	29 2f       	mov	r18, r25
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	fd 01       	movw	r30, r26
    2e86:	e2 0f       	add	r30, r18
    2e88:	f3 1f       	adc	r31, r19
    2e8a:	40 81       	ld	r20, Z
    2e8c:	41 11       	cpse	r20, r1
    2e8e:	f3 cf       	rjmp	.-26     	; 0x2e76 <stringCopy+0x6>
    2e90:	08 95       	ret

00002e92 <integerToString>:
    2e92:	0f 93       	push	r16
    2e94:	1f 93       	push	r17
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	8b 01       	movw	r16, r22
    2e9e:	41 30       	cpi	r20, 0x01	; 1
    2ea0:	d1 f5       	brne	.+116    	; 0x2f16 <integerToString+0x84>
    2ea2:	c0 e0       	ldi	r28, 0x00	; 0
    2ea4:	d0 e0       	ldi	r29, 0x00	; 0
    2ea6:	6a e0       	ldi	r22, 0x0A	; 10
    2ea8:	70 e0       	ldi	r23, 0x00	; 0
    2eaa:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__divmodhi4>
    2eae:	cb 01       	movw	r24, r22
    2eb0:	00 97       	sbiw	r24, 0x00	; 0
    2eb2:	79 f1       	breq	.+94     	; 0x2f12 <integerToString+0x80>
    2eb4:	21 96       	adiw	r28, 0x01	; 1
    2eb6:	f7 cf       	rjmp	.-18     	; 0x2ea6 <integerToString+0x14>
    2eb8:	a8 01       	movw	r20, r16
    2eba:	4c 0f       	add	r20, r28
    2ebc:	5d 1f       	adc	r21, r29
    2ebe:	9f 01       	movw	r18, r30
    2ec0:	ad ec       	ldi	r26, 0xCD	; 205
    2ec2:	bc ec       	ldi	r27, 0xCC	; 204
    2ec4:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <__umulhisi3>
    2ec8:	96 95       	lsr	r25
    2eca:	87 95       	ror	r24
    2ecc:	96 95       	lsr	r25
    2ece:	87 95       	ror	r24
    2ed0:	96 95       	lsr	r25
    2ed2:	87 95       	ror	r24
    2ed4:	9c 01       	movw	r18, r24
    2ed6:	22 0f       	add	r18, r18
    2ed8:	33 1f       	adc	r19, r19
    2eda:	88 0f       	add	r24, r24
    2edc:	99 1f       	adc	r25, r25
    2ede:	88 0f       	add	r24, r24
    2ee0:	99 1f       	adc	r25, r25
    2ee2:	88 0f       	add	r24, r24
    2ee4:	99 1f       	adc	r25, r25
    2ee6:	82 0f       	add	r24, r18
    2ee8:	93 1f       	adc	r25, r19
    2eea:	9f 01       	movw	r18, r30
    2eec:	28 1b       	sub	r18, r24
    2eee:	39 0b       	sbc	r19, r25
    2ef0:	c9 01       	movw	r24, r18
    2ef2:	80 5d       	subi	r24, 0xD0	; 208
    2ef4:	da 01       	movw	r26, r20
    2ef6:	8c 93       	st	X, r24
    2ef8:	9f 01       	movw	r18, r30
    2efa:	ad ec       	ldi	r26, 0xCD	; 205
    2efc:	bc ec       	ldi	r27, 0xCC	; 204
    2efe:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <__umulhisi3>
    2f02:	fc 01       	movw	r30, r24
    2f04:	f6 95       	lsr	r31
    2f06:	e7 95       	ror	r30
    2f08:	f6 95       	lsr	r31
    2f0a:	e7 95       	ror	r30
    2f0c:	f6 95       	lsr	r31
    2f0e:	e7 95       	ror	r30
    2f10:	21 97       	sbiw	r28, 0x01	; 1
    2f12:	30 97       	sbiw	r30, 0x00	; 0
    2f14:	89 f6       	brne	.-94     	; 0x2eb8 <integerToString+0x26>
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	1f 91       	pop	r17
    2f1c:	0f 91       	pop	r16
    2f1e:	08 95       	ret

00002f20 <stringToFloat>:

float32_t stringToFloat(uint8_t* string)
{
    2f20:	8f 92       	push	r8
    2f22:	9f 92       	push	r9
    2f24:	af 92       	push	r10
    2f26:	bf 92       	push	r11
    2f28:	cf 92       	push	r12
    2f2a:	df 92       	push	r13
    2f2c:	ef 92       	push	r14
    2f2e:	ff 92       	push	r15
    2f30:	0f 93       	push	r16
    2f32:	1f 93       	push	r17
    2f34:	cf 93       	push	r28
    2f36:	df 93       	push	r29
    2f38:	ec 01       	movw	r28, r24
	uint8_t strLen = stringLength(string)-1;
    2f3a:	0e 94 ed 16 	call	0x2dda	; 0x2dda <stringLength>
    2f3e:	0f ef       	ldi	r16, 0xFF	; 255
    2f40:	08 0f       	add	r16, r24
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
    2f42:	c1 2c       	mov	r12, r1
    2f44:	d1 2c       	mov	r13, r1
    2f46:	76 01       	movw	r14, r12
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    2f48:	10 e0       	ldi	r17, 0x00	; 0
    2f4a:	1e c0       	rjmp	.+60     	; 0x2f88 <stringToFloat+0x68>
	{
		if(string[u8_loopIndex] == '.')
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	e1 0f       	add	r30, r17
    2f50:	f1 1d       	adc	r31, r1
    2f52:	60 81       	ld	r22, Z
    2f54:	6e 32       	cpi	r22, 0x2E	; 46
    2f56:	11 f4       	brne	.+4      	; 0x2f5c <stringToFloat+0x3c>
		{
			u8_loopIndex++;
    2f58:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    2f5a:	18 c0       	rjmp	.+48     	; 0x2f8c <stringToFloat+0x6c>
		}
		f32_num += string[u8_loopIndex] - '0';
    2f5c:	70 e0       	ldi	r23, 0x00	; 0
    2f5e:	60 53       	subi	r22, 0x30	; 48
    2f60:	71 09       	sbc	r23, r1
    2f62:	07 2e       	mov	r0, r23
    2f64:	00 0c       	add	r0, r0
    2f66:	88 0b       	sbc	r24, r24
    2f68:	99 0b       	sbc	r25, r25
    2f6a:	0e 94 a6 1c 	call	0x394c	; 0x394c <__floatsisf>
    2f6e:	a7 01       	movw	r20, r14
    2f70:	96 01       	movw	r18, r12
    2f72:	0e 94 92 1b 	call	0x3724	; 0x3724 <__addsf3>
		f32_num *= 10;
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e2       	ldi	r20, 0x20	; 32
    2f7c:	51 e4       	ldi	r21, 0x41	; 65
    2f7e:	0e 94 56 1d 	call	0x3aac	; 0x3aac <__mulsf3>
    2f82:	6b 01       	movw	r12, r22
    2f84:	7c 01       	movw	r14, r24
{
	uint8_t strLen = stringLength(string)-1;
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    2f86:	1f 5f       	subi	r17, 0xFF	; 255
    2f88:	10 17       	cp	r17, r16
    2f8a:	00 f3       	brcs	.-64     	; 0x2f4c <stringToFloat+0x2c>
			break;
		}
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e2       	ldi	r20, 0x20	; 32
    2f92:	51 e4       	ldi	r21, 0x41	; 65
    2f94:	c7 01       	movw	r24, r14
    2f96:	b6 01       	movw	r22, r12
    2f98:	0e 94 03 1c 	call	0x3806	; 0x3806 <__divsf3>
    2f9c:	4b 01       	movw	r8, r22
    2f9e:	5c 01       	movw	r10, r24
	f32_digit = 1;
    2fa0:	0f 2e       	mov	r0, r31
    2fa2:	c1 2c       	mov	r12, r1
    2fa4:	d1 2c       	mov	r13, r1
    2fa6:	f0 e8       	ldi	r31, 0x80	; 128
    2fa8:	ef 2e       	mov	r14, r31
    2faa:	ff e3       	ldi	r31, 0x3F	; 63
    2fac:	ff 2e       	mov	r15, r31
    2fae:	f0 2d       	mov	r31, r0
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    2fb0:	24 c0       	rjmp	.+72     	; 0x2ffa <stringToFloat+0xda>
	{
		f32_digit/=10;
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	40 e2       	ldi	r20, 0x20	; 32
    2fb8:	51 e4       	ldi	r21, 0x41	; 65
    2fba:	c7 01       	movw	r24, r14
    2fbc:	b6 01       	movw	r22, r12
    2fbe:	0e 94 03 1c 	call	0x3806	; 0x3806 <__divsf3>
    2fc2:	6b 01       	movw	r12, r22
    2fc4:	7c 01       	movw	r14, r24
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	e1 0f       	add	r30, r17
    2fca:	f1 1d       	adc	r31, r1
    2fcc:	60 81       	ld	r22, Z
    2fce:	70 e0       	ldi	r23, 0x00	; 0
    2fd0:	60 53       	subi	r22, 0x30	; 48
    2fd2:	71 09       	sbc	r23, r1
    2fd4:	07 2e       	mov	r0, r23
    2fd6:	00 0c       	add	r0, r0
    2fd8:	88 0b       	sbc	r24, r24
    2fda:	99 0b       	sbc	r25, r25
    2fdc:	0e 94 a6 1c 	call	0x394c	; 0x394c <__floatsisf>
    2fe0:	a7 01       	movw	r20, r14
    2fe2:	96 01       	movw	r18, r12
    2fe4:	0e 94 56 1d 	call	0x3aac	; 0x3aac <__mulsf3>
    2fe8:	9b 01       	movw	r18, r22
    2fea:	ac 01       	movw	r20, r24
    2fec:	c5 01       	movw	r24, r10
    2fee:	b4 01       	movw	r22, r8
    2ff0:	0e 94 92 1b 	call	0x3724	; 0x3724 <__addsf3>
    2ff4:	4b 01       	movw	r8, r22
    2ff6:	5c 01       	movw	r10, r24
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
	f32_digit = 1;
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    2ff8:	1f 5f       	subi	r17, 0xFF	; 255
    2ffa:	10 17       	cp	r17, r16
    2ffc:	d0 f2       	brcs	.-76     	; 0x2fb2 <stringToFloat+0x92>
	{
		f32_digit/=10;
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
	}
	return f32_num;
}
    2ffe:	c5 01       	movw	r24, r10
    3000:	b4 01       	movw	r22, r8
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	1f 91       	pop	r17
    3008:	0f 91       	pop	r16
    300a:	ff 90       	pop	r15
    300c:	ef 90       	pop	r14
    300e:	df 90       	pop	r13
    3010:	cf 90       	pop	r12
    3012:	bf 90       	pop	r11
    3014:	af 90       	pop	r10
    3016:	9f 90       	pop	r9
    3018:	8f 90       	pop	r8
    301a:	08 95       	ret

0000301c <floatToString>:

void floatToString(float32_t f32_num, uint8_t* string)
{
    301c:	8f 92       	push	r8
    301e:	9f 92       	push	r9
    3020:	af 92       	push	r10
    3022:	bf 92       	push	r11
    3024:	cf 92       	push	r12
    3026:	df 92       	push	r13
    3028:	ef 92       	push	r14
    302a:	ff 92       	push	r15
    302c:	0f 93       	push	r16
    302e:	1f 93       	push	r17
    3030:	cf 93       	push	r28
    3032:	df 93       	push	r29
    3034:	4b 01       	movw	r8, r22
    3036:	5c 01       	movw	r10, r24
    3038:	8a 01       	movw	r16, r20
	uint32_t u32_num = (uint32_t)f32_num;
    303a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__fixunssfsi>
    303e:	c6 2e       	mov	r12, r22
    3040:	d7 2e       	mov	r13, r23
    3042:	e8 2e       	mov	r14, r24
    3044:	f9 2e       	mov	r15, r25
    3046:	26 2f       	mov	r18, r22
    3048:	37 2f       	mov	r19, r23
    304a:	48 2f       	mov	r20, r24
    304c:	59 2f       	mov	r21, r25
	uint8_t u8_digitCount=0;
    304e:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    3050:	09 c0       	rjmp	.+18     	; 0x3064 <floatToString+0x48>
	{
		u32_num/=10;
    3052:	ca 01       	movw	r24, r20
    3054:	b9 01       	movw	r22, r18
    3056:	2a e0       	ldi	r18, 0x0A	; 10
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	40 e0       	ldi	r20, 0x00	; 0
    305c:	50 e0       	ldi	r21, 0x00	; 0
    305e:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
		u8_digitCount++;
    3062:	df 5f       	subi	r29, 0xFF	; 255
{
	uint32_t u32_num = (uint32_t)f32_num;
	uint8_t u8_digitCount=0;
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    3064:	21 15       	cp	r18, r1
    3066:	31 05       	cpc	r19, r1
    3068:	41 05       	cpc	r20, r1
    306a:	51 05       	cpc	r21, r1
    306c:	91 f7       	brne	.-28     	; 0x3052 <floatToString+0x36>
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
    306e:	cf ef       	ldi	r28, 0xFF	; 255
    3070:	cd 0f       	add	r28, r29
	while(u32_num !=0)
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
    3072:	6c 2d       	mov	r22, r12
    3074:	7d 2d       	mov	r23, r13
    3076:	8e 2d       	mov	r24, r14
    3078:	9f 2d       	mov	r25, r15
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    307a:	14 c0       	rjmp	.+40     	; 0x30a4 <floatToString+0x88>
	{
		temp = (u32_num % 10)+ '0';
    307c:	2a e0       	ldi	r18, 0x0A	; 10
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e0       	ldi	r20, 0x00	; 0
    3082:	50 e0       	ldi	r21, 0x00	; 0
    3084:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	c0 96       	adiw	r24, 0x30	; 48
    308e:	a1 1d       	adc	r26, r1
    3090:	b1 1d       	adc	r27, r1
		string[u8_digitCount--] = temp;
    3092:	f8 01       	movw	r30, r16
    3094:	ec 0f       	add	r30, r28
    3096:	f1 1d       	adc	r31, r1
    3098:	80 83       	st	Z, r24
		u32_num /= 10;
    309a:	62 2f       	mov	r22, r18
    309c:	73 2f       	mov	r23, r19
    309e:	84 2f       	mov	r24, r20
    30a0:	95 2f       	mov	r25, r21
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
	{
		temp = (u32_num % 10)+ '0';
		string[u8_digitCount--] = temp;
    30a2:	c1 50       	subi	r28, 0x01	; 1
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    30a4:	61 15       	cp	r22, r1
    30a6:	71 05       	cpc	r23, r1
    30a8:	81 05       	cpc	r24, r1
    30aa:	91 05       	cpc	r25, r1
    30ac:	39 f7       	brne	.-50     	; 0x307c <floatToString+0x60>
		string[u8_digitCount--] = temp;
		u32_num /= 10;

	}
	u32_num = (uint32_t)f32_num;
	f32_num -= u32_num;
    30ae:	6c 2d       	mov	r22, r12
    30b0:	7d 2d       	mov	r23, r13
    30b2:	8e 2d       	mov	r24, r14
    30b4:	9f 2d       	mov	r25, r15
    30b6:	0e 94 a4 1c 	call	0x3948	; 0x3948 <__floatunsisf>
    30ba:	9b 01       	movw	r18, r22
    30bc:	ac 01       	movw	r20, r24
    30be:	c5 01       	movw	r24, r10
    30c0:	b4 01       	movw	r22, r8
    30c2:	0e 94 91 1b 	call	0x3722	; 0x3722 <__subsf3>
	u32_num = f32_num*10;
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	40 e2       	ldi	r20, 0x20	; 32
    30cc:	51 e4       	ldi	r21, 0x41	; 65
    30ce:	0e 94 56 1d 	call	0x3aac	; 0x3aac <__mulsf3>
    30d2:	6b 01       	movw	r12, r22
    30d4:	7c 01       	movw	r14, r24
    30d6:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__fixunssfsi>
	string[u8_indexDot++] = '.';
    30da:	21 e0       	ldi	r18, 0x01	; 1
    30dc:	2d 0f       	add	r18, r29
    30de:	f8 01       	movw	r30, r16
    30e0:	ed 0f       	add	r30, r29
    30e2:	f1 1d       	adc	r31, r1
    30e4:	3e e2       	ldi	r19, 0x2E	; 46
    30e6:	30 83       	st	Z, r19
	string[u8_indexDot++] = u32_num + '0';
    30e8:	de 5f       	subi	r29, 0xFE	; 254
    30ea:	f8 01       	movw	r30, r16
    30ec:	e2 0f       	add	r30, r18
    30ee:	f1 1d       	adc	r31, r1
    30f0:	20 e3       	ldi	r18, 0x30	; 48
    30f2:	26 0f       	add	r18, r22
    30f4:	20 83       	st	Z, r18
	f32_num *=10;
	f32_num -= u32_num;
    30f6:	0e 94 a4 1c 	call	0x3948	; 0x3948 <__floatunsisf>
    30fa:	9b 01       	movw	r18, r22
    30fc:	ac 01       	movw	r20, r24
    30fe:	c7 01       	movw	r24, r14
    3100:	b6 01       	movw	r22, r12
    3102:	0e 94 91 1b 	call	0x3722	; 0x3722 <__subsf3>
	u32_num = f32_num*10;
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	40 e2       	ldi	r20, 0x20	; 32
    310c:	51 e4       	ldi	r21, 0x41	; 65
    310e:	0e 94 56 1d 	call	0x3aac	; 0x3aac <__mulsf3>
    3112:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__fixunssfsi>
	string[u8_indexDot] = u32_num + '0';
    3116:	f8 01       	movw	r30, r16
    3118:	ed 0f       	add	r30, r29
    311a:	f1 1d       	adc	r31, r1
    311c:	60 5d       	subi	r22, 0xD0	; 208
    311e:	60 83       	st	Z, r22
    3120:	df 91       	pop	r29
    3122:	cf 91       	pop	r28
    3124:	1f 91       	pop	r17
    3126:	0f 91       	pop	r16
    3128:	ff 90       	pop	r15
    312a:	ef 90       	pop	r14
    312c:	df 90       	pop	r13
    312e:	cf 90       	pop	r12
    3130:	bf 90       	pop	r11
    3132:	af 90       	pop	r10
    3134:	9f 90       	pop	r9
    3136:	8f 90       	pop	r8
    3138:	08 95       	ret

0000313a <waveFunction>:
* Parameters (out): None
* Return value: None
* Description: Function to be called inside the timer's ISR.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
void waveFunction(void)
{
    313a:	0f 93       	push	r16
    313c:	1f 93       	push	r17
	/* Toggle the Pin of the PWM Channel */
	if(Dio_togglePin(SWPwm_Channels[gu8_currentPwmChannel].u8_DioChannelID) != DIO_STATUS_ERROR_OK)
    313e:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <gu8_currentPwmChannel>
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	ee 0f       	add	r30, r30
    3146:	ff 1f       	adc	r31, r31
    3148:	e0 5c       	subi	r30, 0xC0	; 192
    314a:	fb 4f       	sbci	r31, 0xFB	; 251
    314c:	80 81       	ld	r24, Z
    314e:	0e 94 47 11 	call	0x228e	; 0x228e <Dio_togglePin>
    3152:	81 30       	cpi	r24, 0x01	; 1
    3154:	09 f0       	breq	.+2      	; 0x3158 <waveFunction+0x1e>
    3156:	76 c0       	rjmp	.+236    	; 0x3244 <waveFunction+0x10a>
		return;
	/* Check if the PWM Channel is still in Running State */
	if (gstr_ChannelsData[gu8_currentPwmChannel].enuChannelState == SWPWM_RUNNING)
    3158:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <gu8_currentPwmChannel>
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	9c 01       	movw	r18, r24
    3160:	22 0f       	add	r18, r18
    3162:	33 1f       	adc	r19, r19
    3164:	f9 01       	movw	r30, r18
    3166:	ee 0f       	add	r30, r30
    3168:	ff 1f       	adc	r31, r31
    316a:	ee 0f       	add	r30, r30
    316c:	ff 1f       	adc	r31, r31
    316e:	ee 0f       	add	r30, r30
    3170:	ff 1f       	adc	r31, r31
    3172:	e2 1b       	sub	r30, r18
    3174:	f3 0b       	sbc	r31, r19
    3176:	e9 55       	subi	r30, 0x59	; 89
    3178:	fa 4f       	sbci	r31, 0xFA	; 250
    317a:	25 85       	ldd	r18, Z+13	; 0x0d
    317c:	22 30       	cpi	r18, 0x02	; 2
    317e:	09 f0       	breq	.+2      	; 0x3182 <waveFunction+0x48>
    3180:	61 c0       	rjmp	.+194    	; 0x3244 <waveFunction+0x10a>
	{
		/* Start the Timer again with the new ticks assigned */
		if(GptStart_aSync(SWPwm_Channels[gu8_currentPwmChannel].u8_GptChannelID,\
    3182:	88 0f       	add	r24, r24
    3184:	99 1f       	adc	r25, r25
    3186:	fc 01       	movw	r30, r24
    3188:	ee 0f       	add	r30, r30
    318a:	ff 1f       	adc	r31, r31
    318c:	ee 0f       	add	r30, r30
    318e:	ff 1f       	adc	r31, r31
    3190:	ee 0f       	add	r30, r30
    3192:	ff 1f       	adc	r31, r31
    3194:	e8 1b       	sub	r30, r24
    3196:	f9 0b       	sbc	r31, r25
    3198:	e9 55       	subi	r30, 0x59	; 89
    319a:	fa 4f       	sbci	r31, 0xFA	; 250
    319c:	41 85       	ldd	r20, Z+9	; 0x09
    319e:	52 85       	ldd	r21, Z+10	; 0x0a
    31a0:	63 85       	ldd	r22, Z+11	; 0x0b
    31a2:	74 85       	ldd	r23, Z+12	; 0x0c
    31a4:	fc 01       	movw	r30, r24
    31a6:	e0 5c       	subi	r30, 0xC0	; 192
    31a8:	fb 4f       	sbci	r31, 0xFB	; 251
    31aa:	2d e9       	ldi	r18, 0x9D	; 157
    31ac:	38 e1       	ldi	r19, 0x18	; 24
    31ae:	81 81       	ldd	r24, Z+1	; 0x01
    31b0:	0e 94 18 13 	call	0x2630	; 0x2630 <GptStart_aSync>
    31b4:	81 30       	cpi	r24, 0x01	; 1
    31b6:	09 f0       	breq	.+2      	; 0x31ba <waveFunction+0x80>
    31b8:	45 c0       	rjmp	.+138    	; 0x3244 <waveFunction+0x10a>
		                  gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks,\
						   waveFunction) != GPT_STATUS_ERROR_OK)	return;
		
		/* Replace the next ticks to be counted between ONTicks and OFFTicks*/
		if(gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks == gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks)
    31ba:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <gu8_currentPwmChannel>
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	9c 01       	movw	r18, r24
    31c2:	22 0f       	add	r18, r18
    31c4:	33 1f       	adc	r19, r19
    31c6:	f9 01       	movw	r30, r18
    31c8:	ee 0f       	add	r30, r30
    31ca:	ff 1f       	adc	r31, r31
    31cc:	ee 0f       	add	r30, r30
    31ce:	ff 1f       	adc	r31, r31
    31d0:	ee 0f       	add	r30, r30
    31d2:	ff 1f       	adc	r31, r31
    31d4:	e2 1b       	sub	r30, r18
    31d6:	f3 0b       	sbc	r31, r19
    31d8:	e9 55       	subi	r30, 0x59	; 89
    31da:	fa 4f       	sbci	r31, 0xFA	; 250
    31dc:	01 85       	ldd	r16, Z+9	; 0x09
    31de:	12 85       	ldd	r17, Z+10	; 0x0a
    31e0:	23 85       	ldd	r18, Z+11	; 0x0b
    31e2:	34 85       	ldd	r19, Z+12	; 0x0c
    31e4:	45 81       	ldd	r20, Z+5	; 0x05
    31e6:	56 81       	ldd	r21, Z+6	; 0x06
    31e8:	67 81       	ldd	r22, Z+7	; 0x07
    31ea:	70 85       	ldd	r23, Z+8	; 0x08
    31ec:	04 17       	cp	r16, r20
    31ee:	15 07       	cpc	r17, r21
    31f0:	26 07       	cpc	r18, r22
    31f2:	37 07       	cpc	r19, r23
    31f4:	b1 f4       	brne	.+44     	; 0x3222 <waveFunction+0xe8>
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_ONTicks;
    31f6:	88 0f       	add	r24, r24
    31f8:	99 1f       	adc	r25, r25
    31fa:	fc 01       	movw	r30, r24
    31fc:	ee 0f       	add	r30, r30
    31fe:	ff 1f       	adc	r31, r31
    3200:	ee 0f       	add	r30, r30
    3202:	ff 1f       	adc	r31, r31
    3204:	ee 0f       	add	r30, r30
    3206:	ff 1f       	adc	r31, r31
    3208:	e8 1b       	sub	r30, r24
    320a:	f9 0b       	sbc	r31, r25
    320c:	e9 55       	subi	r30, 0x59	; 89
    320e:	fa 4f       	sbci	r31, 0xFA	; 250
    3210:	81 81       	ldd	r24, Z+1	; 0x01
    3212:	92 81       	ldd	r25, Z+2	; 0x02
    3214:	a3 81       	ldd	r26, Z+3	; 0x03
    3216:	b4 81       	ldd	r27, Z+4	; 0x04
    3218:	81 87       	std	Z+9, r24	; 0x09
    321a:	92 87       	std	Z+10, r25	; 0x0a
    321c:	a3 87       	std	Z+11, r26	; 0x0b
    321e:	b4 87       	std	Z+12, r27	; 0x0c
    3220:	11 c0       	rjmp	.+34     	; 0x3244 <waveFunction+0x10a>
		else
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks;
    3222:	88 0f       	add	r24, r24
    3224:	99 1f       	adc	r25, r25
    3226:	fc 01       	movw	r30, r24
    3228:	ee 0f       	add	r30, r30
    322a:	ff 1f       	adc	r31, r31
    322c:	ee 0f       	add	r30, r30
    322e:	ff 1f       	adc	r31, r31
    3230:	ee 0f       	add	r30, r30
    3232:	ff 1f       	adc	r31, r31
    3234:	e8 1b       	sub	r30, r24
    3236:	f9 0b       	sbc	r31, r25
    3238:	e9 55       	subi	r30, 0x59	; 89
    323a:	fa 4f       	sbci	r31, 0xFA	; 250
    323c:	41 87       	std	Z+9, r20	; 0x09
    323e:	52 87       	std	Z+10, r21	; 0x0a
    3240:	63 87       	std	Z+11, r22	; 0x0b
    3242:	74 87       	std	Z+12, r23	; 0x0c
	}
}
    3244:	1f 91       	pop	r17
    3246:	0f 91       	pop	r16
    3248:	08 95       	ret

0000324a <SWPwm_Init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
    324a:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <genu_SWPwmModStatus>
    324e:	81 30       	cpi	r24, 0x01	; 1
    3250:	91 f0       	breq	.+36     	; 0x3276 <SWPwm_Init+0x2c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
    3252:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <GptInit>
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
    3256:	81 30       	cpi	r24, 0x01	; 1
    3258:	11 f0       	breq	.+4      	; 0x325e <SWPwm_Init+0x14>
    325a:	83 30       	cpi	r24, 0x03	; 3
    325c:	71 f4       	brne	.+28     	; 0x327a <SWPwm_Init+0x30>
		return SWPWM_STATUS_ERROR_NOK;
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    325e:	85 e8       	ldi	r24, 0x85	; 133
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    3266:	81 30       	cpi	r24, 0x01	; 1
    3268:	11 f0       	breq	.+4      	; 0x326e <SWPwm_Init+0x24>
    326a:	87 30       	cpi	r24, 0x07	; 7
    326c:	41 f4       	brne	.+16     	; 0x327e <SWPwm_Init+0x34>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <genu_SWPwmModStatus>
	return SWPWM_STATUS_ERROR_OK;
    3274:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_ERROR_NOK;
    3276:	80 e0       	ldi	r24, 0x00	; 0
    3278:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
		return SWPWM_STATUS_ERROR_NOK;
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	08 95       	ret
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return SWPWM_STATUS_ERROR_NOK;
    327e:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
	return SWPWM_STATUS_ERROR_OK;
}
    3280:	08 95       	ret

00003282 <SWPwm_Start>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Start(u8SWPwm_Channel_t u8_ChannelID, uint32_t u32_Freq, uint8_t u8_DutyCycle)
{
    3282:	4f 92       	push	r4
    3284:	5f 92       	push	r5
    3286:	6f 92       	push	r6
    3288:	7f 92       	push	r7
    328a:	8f 92       	push	r8
    328c:	9f 92       	push	r9
    328e:	af 92       	push	r10
    3290:	bf 92       	push	r11
    3292:	cf 92       	push	r12
    3294:	df 92       	push	r13
    3296:	ef 92       	push	r14
    3298:	ff 92       	push	r15
    329a:	0f 93       	push	r16
    329c:	1f 93       	push	r17
    329e:	cf 93       	push	r28
    32a0:	df 93       	push	r29
    32a2:	00 d0       	rcall	.+0      	; 0x32a4 <SWPwm_Start+0x22>
    32a4:	00 d0       	rcall	.+0      	; 0x32a6 <SWPwm_Start+0x24>
    32a6:	00 d0       	rcall	.+0      	; 0x32a8 <SWPwm_Start+0x26>
    32a8:	cd b7       	in	r28, 0x3d	; 61
    32aa:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    32ac:	90 91 a5 05 	lds	r25, 0x05A5	; 0x8005a5 <genu_SWPwmModStatus>
    32b0:	91 30       	cpi	r25, 0x01	; 1
    32b2:	09 f0       	breq	.+2      	; 0x32b6 <SWPwm_Start+0x34>
    32b4:	f2 c0       	rjmp	.+484    	; 0x349a <SWPwm_Start+0x218>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    32b6:	81 11       	cpse	r24, r1
    32b8:	f2 c0       	rjmp	.+484    	; 0x349e <SWPwm_Start+0x21c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
    32ba:	25 36       	cpi	r18, 0x65	; 101
    32bc:	08 f0       	brcs	.+2      	; 0x32c0 <SWPwm_Start+0x3e>
    32be:	f1 c0       	rjmp	.+482    	; 0x34a2 <SWPwm_Start+0x220>
	{
		return SWPWM_STATUS_DC_OUTRANGE;
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
    32c0:	e8 2f       	mov	r30, r24
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	fe 83       	std	Y+6, r31	; 0x06
    32c6:	ed 83       	std	Y+5, r30	; 0x05
    32c8:	df 01       	movw	r26, r30
    32ca:	aa 0f       	add	r26, r26
    32cc:	bb 1f       	adc	r27, r27
    32ce:	fd 01       	movw	r30, r26
    32d0:	ee 0f       	add	r30, r30
    32d2:	ff 1f       	adc	r31, r31
    32d4:	ee 0f       	add	r30, r30
    32d6:	ff 1f       	adc	r31, r31
    32d8:	ee 0f       	add	r30, r30
    32da:	ff 1f       	adc	r31, r31
    32dc:	ea 1b       	sub	r30, r26
    32de:	fb 0b       	sbc	r31, r27
    32e0:	e9 55       	subi	r30, 0x59	; 89
    32e2:	fa 4f       	sbci	r31, 0xFA	; 250
    32e4:	95 85       	ldd	r25, Z+13	; 0x0d
    32e6:	92 30       	cpi	r25, 0x02	; 2
    32e8:	09 f4       	brne	.+2      	; 0x32ec <SWPwm_Start+0x6a>
    32ea:	dd c0       	rjmp	.+442    	; 0x34a6 <SWPwm_Start+0x224>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
    32ec:	22 23       	and	r18, r18
    32ee:	09 f4       	brne	.+2      	; 0x32f2 <SWPwm_Start+0x70>
    32f0:	dc c0       	rjmp	.+440    	; 0x34aa <SWPwm_Start+0x228>
    32f2:	12 2f       	mov	r17, r18
    32f4:	c8 2e       	mov	r12, r24
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
	}else if(u8_DutyCycle == 100)
    32f6:	24 36       	cpi	r18, 0x64	; 100
    32f8:	61 f4       	brne	.+24     	; 0x3312 <SWPwm_Start+0x90>
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    32fa:	fd 01       	movw	r30, r26
    32fc:	e0 5c       	subi	r30, 0xC0	; 192
    32fe:	fb 4f       	sbci	r31, 0xFB	; 251
    3300:	61 e0       	ldi	r22, 0x01	; 1
    3302:	80 81       	ld	r24, Z
    3304:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    3308:	81 30       	cpi	r24, 0x01	; 1
    330a:	09 f4       	brne	.+2      	; 0x330e <SWPwm_Start+0x8c>
    330c:	d0 c0       	rjmp	.+416    	; 0x34ae <SWPwm_Start+0x22c>
			return SWPWM_STATUS_ERROR_NOK;
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	d5 c0       	rjmp	.+426    	; 0x34bc <SWPwm_Start+0x23a>
		return SWPWM_STATUS_ERROR_OK;
	}
	
	float32_t f32_wavePeriodTime = (float32_t)1 / u32_Freq;					/* The Periodic Time for the Generated Pulse in Seconds */
    3312:	cb 01       	movw	r24, r22
    3314:	ba 01       	movw	r22, r20
    3316:	0e 94 a4 1c 	call	0x3948	; 0x3948 <__floatunsisf>
    331a:	9b 01       	movw	r18, r22
    331c:	ac 01       	movw	r20, r24
    331e:	60 e0       	ldi	r22, 0x00	; 0
    3320:	70 e0       	ldi	r23, 0x00	; 0
    3322:	80 e8       	ldi	r24, 0x80	; 128
    3324:	9f e3       	ldi	r25, 0x3F	; 63
    3326:	0e 94 03 1c 	call	0x3806	; 0x3806 <__divsf3>
    332a:	4b 01       	movw	r8, r22
    332c:	5c 01       	movw	r10, r24
	float32_t f32_waveONTime = (f32_wavePeriodTime*u8_DutyCycle) / 100;		/* The HIGH Level Time in Seconds */
    332e:	61 2f       	mov	r22, r17
    3330:	70 e0       	ldi	r23, 0x00	; 0
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	0e 94 a6 1c 	call	0x394c	; 0x394c <__floatsisf>
    333a:	a5 01       	movw	r20, r10
    333c:	94 01       	movw	r18, r8
    333e:	0e 94 56 1d 	call	0x3aac	; 0x3aac <__mulsf3>
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	48 ec       	ldi	r20, 0xC8	; 200
    3348:	52 e4       	ldi	r21, 0x42	; 66
    334a:	0e 94 03 1c 	call	0x3806	; 0x3806 <__divsf3>
    334e:	2b 01       	movw	r4, r22
    3350:	3c 01       	movw	r6, r24
	float32_t f32_waveOFFTime = f32_wavePeriodTime - f32_waveONTime;		/* The LOW Level Time in Seconds */
    3352:	9b 01       	movw	r18, r22
    3354:	ac 01       	movw	r20, r24
    3356:	c5 01       	movw	r24, r10
    3358:	b4 01       	movw	r22, r8
    335a:	0e 94 91 1b 	call	0x3722	; 0x3722 <__subsf3>
    335e:	4b 01       	movw	r8, r22
    3360:	5c 01       	movw	r10, r24
	float32_t f32_systemPeriodTime = 0.0;
	uint16_t  u16_prescalerValue = 0;
	
	/* Get the Prescaler Value of the used Timer Channel */
	switch(Timers_Configurations[SWPwm_Channels[u8_ChannelID].u8_GptChannelID].enuClock_Src)
    3362:	ed 81       	ldd	r30, Y+5	; 0x05
    3364:	fe 81       	ldd	r31, Y+6	; 0x06
    3366:	ee 0f       	add	r30, r30
    3368:	ff 1f       	adc	r31, r31
    336a:	e0 5c       	subi	r30, 0xC0	; 192
    336c:	fb 4f       	sbci	r31, 0xFB	; 251
    336e:	d1 80       	ldd	r13, Z+1	; 0x01
    3370:	8d 2d       	mov	r24, r13
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	fc 01       	movw	r30, r24
    3376:	ee 0f       	add	r30, r30
    3378:	ff 1f       	adc	r31, r31
    337a:	8e 0f       	add	r24, r30
    337c:	9f 1f       	adc	r25, r31
    337e:	fc 01       	movw	r30, r24
    3380:	e3 5c       	subi	r30, 0xC3	; 195
    3382:	fb 4f       	sbci	r31, 0xFB	; 251
    3384:	e1 81       	ldd	r30, Z+1	; 0x01
    3386:	8e 2f       	mov	r24, r30
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	fc 01       	movw	r30, r24
    338c:	31 97       	sbiw	r30, 0x01	; 1
    338e:	e7 30       	cpi	r30, 0x07	; 7
    3390:	f1 05       	cpc	r31, r1
    3392:	08 f0       	brcs	.+2      	; 0x3396 <SWPwm_Start+0x114>
    3394:	8e c0       	rjmp	.+284    	; 0x34b2 <SWPwm_Start+0x230>
    3396:	e6 5d       	subi	r30, 0xD6	; 214
    3398:	ff 4f       	sbci	r31, 0xFF	; 255
    339a:	0c 94 f9 1d 	jmp	0x3bf2	; 0x3bf2 <__tablejump2__>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
    339e:	61 e0       	ldi	r22, 0x01	; 1
    33a0:	70 e0       	ldi	r23, 0x00	; 0
    33a2:	0b c0       	rjmp	.+22     	; 0x33ba <SWPwm_Start+0x138>
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
			break;
		case GPT_CLK_SRC_PRSCLR_64:
			u16_prescalerValue = 64;
    33a4:	60 e4       	ldi	r22, 0x40	; 64
    33a6:	70 e0       	ldi	r23, 0x00	; 0
			break;
    33a8:	08 c0       	rjmp	.+16     	; 0x33ba <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_256:
			u16_prescalerValue = 256;
    33aa:	60 e0       	ldi	r22, 0x00	; 0
    33ac:	71 e0       	ldi	r23, 0x01	; 1
			break;
    33ae:	05 c0       	rjmp	.+10     	; 0x33ba <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_1024:
			u16_prescalerValue = 1024;
    33b0:	60 e0       	ldi	r22, 0x00	; 0
    33b2:	74 e0       	ldi	r23, 0x04	; 4
			break;
    33b4:	02 c0       	rjmp	.+4      	; 0x33ba <SWPwm_Start+0x138>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
    33b6:	68 e0       	ldi	r22, 0x08	; 8
    33b8:	70 e0       	ldi	r23, 0x00	; 0
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
	}
	
	f32_systemPeriodTime = (float32_t)u16_prescalerValue/SYS_CLOCK_FREQUENCY;				/* The Controllers Periodic Time in seconds based on the System Clock Frequency */
    33ba:	80 e0       	ldi	r24, 0x00	; 0
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	0e 94 a4 1c 	call	0x3948	; 0x3948 <__floatunsisf>
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	34 e2       	ldi	r19, 0x24	; 36
    33c6:	44 e7       	ldi	r20, 0x74	; 116
    33c8:	59 e4       	ldi	r21, 0x49	; 73
    33ca:	0e 94 03 1c 	call	0x3806	; 0x3806 <__divsf3>
    33ce:	69 83       	std	Y+1, r22	; 0x01
    33d0:	7a 83       	std	Y+2, r23	; 0x02
    33d2:	8b 83       	std	Y+3, r24	; 0x03
    33d4:	9c 83       	std	Y+4, r25	; 0x04
	gu8_currentPwmChannel = u8_ChannelID;
    33d6:	c0 92 a6 05 	sts	0x05A6, r12	; 0x8005a6 <gu8_currentPwmChannel>
	gstr_ChannelsData[u8_ChannelID].u32_ONTicks = f32_waveONTime/f32_systemPeriodTime;		/* The HIGH Level Time in Ticks */
    33da:	9b 01       	movw	r18, r22
    33dc:	ac 01       	movw	r20, r24
    33de:	c3 01       	movw	r24, r6
    33e0:	b2 01       	movw	r22, r4
    33e2:	0e 94 03 1c 	call	0x3806	; 0x3806 <__divsf3>
    33e6:	ed 80       	ldd	r14, Y+5	; 0x05
    33e8:	fe 80       	ldd	r15, Y+6	; 0x06
    33ea:	ee 0c       	add	r14, r14
    33ec:	ff 1c       	adc	r15, r15
    33ee:	87 01       	movw	r16, r14
    33f0:	00 0f       	add	r16, r16
    33f2:	11 1f       	adc	r17, r17
    33f4:	00 0f       	add	r16, r16
    33f6:	11 1f       	adc	r17, r17
    33f8:	00 0f       	add	r16, r16
    33fa:	11 1f       	adc	r17, r17
    33fc:	0e 19       	sub	r16, r14
    33fe:	1f 09       	sbc	r17, r15
    3400:	09 55       	subi	r16, 0x59	; 89
    3402:	1a 4f       	sbci	r17, 0xFA	; 250
    3404:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__fixunssfsi>
    3408:	f8 01       	movw	r30, r16
    340a:	61 83       	std	Z+1, r22	; 0x01
    340c:	72 83       	std	Z+2, r23	; 0x02
    340e:	83 83       	std	Z+3, r24	; 0x03
    3410:	94 83       	std	Z+4, r25	; 0x04
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
    3412:	29 81       	ldd	r18, Y+1	; 0x01
    3414:	3a 81       	ldd	r19, Y+2	; 0x02
    3416:	4b 81       	ldd	r20, Y+3	; 0x03
    3418:	5c 81       	ldd	r21, Y+4	; 0x04
    341a:	c5 01       	movw	r24, r10
    341c:	b4 01       	movw	r22, r8
    341e:	0e 94 03 1c 	call	0x3806	; 0x3806 <__divsf3>
    3422:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__fixunssfsi>
    3426:	f8 01       	movw	r30, r16
    3428:	65 83       	std	Z+5, r22	; 0x05
    342a:	76 83       	std	Z+6, r23	; 0x06
    342c:	87 83       	std	Z+7, r24	; 0x07
    342e:	90 87       	std	Z+8, r25	; 0x08
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;
    3430:	c0 82       	st	Z, r12

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    3432:	f7 01       	movw	r30, r14
    3434:	e0 5c       	subi	r30, 0xC0	; 192
    3436:	fb 4f       	sbci	r31, 0xFB	; 251
    3438:	61 e0       	ldi	r22, 0x01	; 1
    343a:	80 81       	ld	r24, Z
    343c:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    3440:	81 30       	cpi	r24, 0x01	; 1
    3442:	c9 f5       	brne	.+114    	; 0x34b6 <SWPwm_Start+0x234>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
    3444:	8e e0       	ldi	r24, 0x0E	; 14
    3446:	2d 81       	ldd	r18, Y+5	; 0x05
    3448:	3e 81       	ldd	r19, Y+6	; 0x06
    344a:	82 9f       	mul	r24, r18
    344c:	f0 01       	movw	r30, r0
    344e:	83 9f       	mul	r24, r19
    3450:	f0 0d       	add	r31, r0
    3452:	11 24       	eor	r1, r1
    3454:	e9 55       	subi	r30, 0x59	; 89
    3456:	fa 4f       	sbci	r31, 0xFA	; 250
    3458:	41 81       	ldd	r20, Z+1	; 0x01
    345a:	52 81       	ldd	r21, Z+2	; 0x02
    345c:	63 81       	ldd	r22, Z+3	; 0x03
    345e:	74 81       	ldd	r23, Z+4	; 0x04
    3460:	2d e9       	ldi	r18, 0x9D	; 157
    3462:	38 e1       	ldi	r19, 0x18	; 24
    3464:	8d 2d       	mov	r24, r13
    3466:	0e 94 18 13 	call	0x2630	; 0x2630 <GptStart_aSync>
    346a:	81 30       	cpi	r24, 0x01	; 1
    346c:	31 f5       	brne	.+76     	; 0x34ba <SWPwm_Start+0x238>
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
	
	/* Assign the Next Ticks to be counted by the Asynchronous Timer */
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
    346e:	8e e0       	ldi	r24, 0x0E	; 14
    3470:	2d 81       	ldd	r18, Y+5	; 0x05
    3472:	3e 81       	ldd	r19, Y+6	; 0x06
    3474:	82 9f       	mul	r24, r18
    3476:	f0 01       	movw	r30, r0
    3478:	83 9f       	mul	r24, r19
    347a:	f0 0d       	add	r31, r0
    347c:	11 24       	eor	r1, r1
    347e:	e9 55       	subi	r30, 0x59	; 89
    3480:	fa 4f       	sbci	r31, 0xFA	; 250
    3482:	85 81       	ldd	r24, Z+5	; 0x05
    3484:	96 81       	ldd	r25, Z+6	; 0x06
    3486:	a7 81       	ldd	r26, Z+7	; 0x07
    3488:	b0 85       	ldd	r27, Z+8	; 0x08
    348a:	81 87       	std	Z+9, r24	; 0x09
    348c:	92 87       	std	Z+10, r25	; 0x0a
    348e:	a3 87       	std	Z+11, r26	; 0x0b
    3490:	b4 87       	std	Z+12, r27	; 0x0c
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;
    3492:	82 e0       	ldi	r24, 0x02	; 2
    3494:	85 87       	std	Z+13, r24	; 0x0d

	return SWPWM_STATUS_ERROR_OK;
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	11 c0       	rjmp	.+34     	; 0x34bc <SWPwm_Start+0x23a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    349a:	82 e0       	ldi	r24, 0x02	; 2
    349c:	0f c0       	rjmp	.+30     	; 0x34bc <SWPwm_Start+0x23a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    349e:	83 e0       	ldi	r24, 0x03	; 3
    34a0:	0d c0       	rjmp	.+26     	; 0x34bc <SWPwm_Start+0x23a>
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
	{
		return SWPWM_STATUS_DC_OUTRANGE;
    34a2:	84 e0       	ldi	r24, 0x04	; 4
    34a4:	0b c0       	rjmp	.+22     	; 0x34bc <SWPwm_Start+0x23a>
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    34a6:	85 e0       	ldi	r24, 0x05	; 5
    34a8:	09 c0       	rjmp	.+18     	; 0x34bc <SWPwm_Start+0x23a>
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	07 c0       	rjmp	.+14     	; 0x34bc <SWPwm_Start+0x23a>
	}else if(u8_DutyCycle == 100)
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return SWPWM_STATUS_ERROR_NOK;
		return SWPWM_STATUS_ERROR_OK;
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	05 c0       	rjmp	.+10     	; 0x34bc <SWPwm_Start+0x23a>
			break;
		case GPT_CLK_SRC_PRSCLR_EXT_RISE:
			u16_prescalerValue = 1;
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	03 c0       	rjmp	.+6      	; 0x34bc <SWPwm_Start+0x23a>
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    34b6:	80 e0       	ldi	r24, 0x00	; 0
    34b8:	01 c0       	rjmp	.+2      	; 0x34bc <SWPwm_Start+0x23a>
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
    34ba:	80 e0       	ldi	r24, 0x00	; 0
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;

	return SWPWM_STATUS_ERROR_OK;
}
    34bc:	26 96       	adiw	r28, 0x06	; 6
    34be:	0f b6       	in	r0, 0x3f	; 63
    34c0:	f8 94       	cli
    34c2:	de bf       	out	0x3e, r29	; 62
    34c4:	0f be       	out	0x3f, r0	; 63
    34c6:	cd bf       	out	0x3d, r28	; 61
    34c8:	df 91       	pop	r29
    34ca:	cf 91       	pop	r28
    34cc:	1f 91       	pop	r17
    34ce:	0f 91       	pop	r16
    34d0:	ff 90       	pop	r15
    34d2:	ef 90       	pop	r14
    34d4:	df 90       	pop	r13
    34d6:	cf 90       	pop	r12
    34d8:	bf 90       	pop	r11
    34da:	af 90       	pop	r10
    34dc:	9f 90       	pop	r9
    34de:	8f 90       	pop	r8
    34e0:	7f 90       	pop	r7
    34e2:	6f 90       	pop	r6
    34e4:	5f 90       	pop	r5
    34e6:	4f 90       	pop	r4
    34e8:	08 95       	ret

000034ea <SWPwm_Stop>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Stop(u8SWPwm_Channel_t u8_ChannelID)
{
    34ea:	cf 93       	push	r28
    34ec:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    34ee:	90 91 a5 05 	lds	r25, 0x05A5	; 0x8005a5 <genu_SWPwmModStatus>
    34f2:	91 30       	cpi	r25, 0x01	; 1
    34f4:	b1 f5       	brne	.+108    	; 0x3562 <SWPwm_Stop+0x78>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    34f6:	81 11       	cpse	r24, r1
    34f8:	36 c0       	rjmp	.+108    	; 0x3566 <SWPwm_Stop+0x7c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
    34fa:	c8 2f       	mov	r28, r24
    34fc:	d0 e0       	ldi	r29, 0x00	; 0
    34fe:	ce 01       	movw	r24, r28
    3500:	88 0f       	add	r24, r24
    3502:	99 1f       	adc	r25, r25
    3504:	fc 01       	movw	r30, r24
    3506:	ee 0f       	add	r30, r30
    3508:	ff 1f       	adc	r31, r31
    350a:	ee 0f       	add	r30, r30
    350c:	ff 1f       	adc	r31, r31
    350e:	ee 0f       	add	r30, r30
    3510:	ff 1f       	adc	r31, r31
    3512:	e8 1b       	sub	r30, r24
    3514:	f9 0b       	sbc	r31, r25
    3516:	e9 55       	subi	r30, 0x59	; 89
    3518:	fa 4f       	sbci	r31, 0xFA	; 250
    351a:	85 85       	ldd	r24, Z+13	; 0x0d
    351c:	82 30       	cpi	r24, 0x02	; 2
    351e:	29 f5       	brne	.+74     	; 0x356a <SWPwm_Stop+0x80>
	
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
    3520:	fe 01       	movw	r30, r28
    3522:	ee 0f       	add	r30, r30
    3524:	ff 1f       	adc	r31, r31
    3526:	e0 5c       	subi	r30, 0xC0	; 192
    3528:	fb 4f       	sbci	r31, 0xFB	; 251
    352a:	60 e0       	ldi	r22, 0x00	; 0
    352c:	80 81       	ld	r24, Z
    352e:	0e 94 ae 10 	call	0x215c	; 0x215c <Dio_writePin>
    3532:	81 30       	cpi	r24, 0x01	; 1
    3534:	e1 f4       	brne	.+56     	; 0x356e <SWPwm_Stop+0x84>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the State of the PWM Channel to STOPPED */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
    3536:	8e e0       	ldi	r24, 0x0E	; 14
    3538:	8c 9f       	mul	r24, r28
    353a:	f0 01       	movw	r30, r0
    353c:	8d 9f       	mul	r24, r29
    353e:	f0 0d       	add	r31, r0
    3540:	11 24       	eor	r1, r1
    3542:	e9 55       	subi	r30, 0x59	; 89
    3544:	fa 4f       	sbci	r31, 0xFA	; 250
    3546:	83 e0       	ldi	r24, 0x03	; 3
    3548:	85 87       	std	Z+13, r24	; 0x0d
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
    354a:	fe 01       	movw	r30, r28
    354c:	ee 0f       	add	r30, r30
    354e:	ff 1f       	adc	r31, r31
    3550:	e0 5c       	subi	r30, 0xC0	; 192
    3552:	fb 4f       	sbci	r31, 0xFB	; 251
    3554:	81 81       	ldd	r24, Z+1	; 0x01
    3556:	0e 94 77 13 	call	0x26ee	; 0x26ee <GptStop>
    355a:	81 30       	cpi	r24, 0x01	; 1
    355c:	51 f0       	breq	.+20     	; 0x3572 <SWPwm_Stop+0x88>
		return SWPWM_STATUS_ERROR_NOK;
    355e:	80 e0       	ldi	r24, 0x00	; 0
    3560:	09 c0       	rjmp	.+18     	; 0x3574 <SWPwm_Stop+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    3562:	82 e0       	ldi	r24, 0x02	; 2
    3564:	07 c0       	rjmp	.+14     	; 0x3574 <SWPwm_Stop+0x8a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    3566:	83 e0       	ldi	r24, 0x03	; 3
    3568:	05 c0       	rjmp	.+10     	; 0x3574 <SWPwm_Stop+0x8a>
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    356a:	85 e0       	ldi	r24, 0x05	; 5
    356c:	03 c0       	rjmp	.+6      	; 0x3574 <SWPwm_Stop+0x8a>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	01 c0       	rjmp	.+2      	; 0x3574 <SWPwm_Stop+0x8a>
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
	
	return SWPWM_STATUS_ERROR_OK;
    3572:	81 e0       	ldi	r24, 0x01	; 1
}
    3574:	df 91       	pop	r29
    3576:	cf 91       	pop	r28
    3578:	08 95       	ret

0000357a <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    357a:	80 91 b5 05 	lds	r24, 0x05B5	; 0x8005b5 <u8_Uart_Status>
    357e:	81 30       	cpi	r24, 0x01	; 1
    3580:	81 f0       	breq	.+32     	; 0x35a2 <Uart_init+0x28>
    3582:	10 bc       	out	0x20, r1	; 32
    3584:	8c e0       	ldi	r24, 0x0C	; 12
    3586:	89 b9       	out	0x09, r24	; 9
    3588:	82 e0       	ldi	r24, 0x02	; 2
    358a:	8b b9       	out	0x0b, r24	; 11
    358c:	88 e1       	ldi	r24, 0x18	; 24
    358e:	8a b9       	out	0x0a, r24	; 10
    3590:	80 e8       	ldi	r24, 0x80	; 128
    3592:	80 bd       	out	0x20, r24	; 32
    3594:	80 b5       	in	r24, 0x20	; 32
    3596:	86 68       	ori	r24, 0x86	; 134
    3598:	80 bd       	out	0x20, r24	; 32
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <u8_Uart_Status>
    35a0:	08 95       	ret
    35a2:	87 e0       	ldi	r24, 0x07	; 7
    35a4:	08 95       	ret

000035a6 <Uart_sendByte>:
    35a6:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <u8_Uart_Status>
    35aa:	99 23       	and	r25, r25
    35ac:	29 f0       	breq	.+10     	; 0x35b8 <Uart_sendByte+0x12>
    35ae:	5d 9b       	sbis	0x0b, 5	; 11
    35b0:	fe cf       	rjmp	.-4      	; 0x35ae <Uart_sendByte+0x8>
    35b2:	8c b9       	out	0x0c, r24	; 12
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	08 95       	ret
    35b8:	86 e0       	ldi	r24, 0x06	; 6
    35ba:	08 95       	ret

000035bc <Uart_sendPacket>:
    35bc:	ef 92       	push	r14
    35be:	ff 92       	push	r15
    35c0:	0f 93       	push	r16
    35c2:	1f 93       	push	r17
    35c4:	cf 93       	push	r28
    35c6:	df 93       	push	r29
    35c8:	20 91 b5 05 	lds	r18, 0x05B5	; 0x8005b5 <u8_Uart_Status>
    35cc:	22 23       	and	r18, r18
    35ce:	99 f0       	breq	.+38     	; 0x35f6 <Uart_sendPacket+0x3a>
    35d0:	8b 01       	movw	r16, r22
    35d2:	7c 01       	movw	r14, r24
    35d4:	c0 e0       	ldi	r28, 0x00	; 0
    35d6:	d0 e0       	ldi	r29, 0x00	; 0
    35d8:	09 c0       	rjmp	.+18     	; 0x35ec <Uart_sendPacket+0x30>
    35da:	f7 01       	movw	r30, r14
    35dc:	ec 0f       	add	r30, r28
    35de:	fd 1f       	adc	r31, r29
    35e0:	80 81       	ld	r24, Z
    35e2:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <Uart_sendByte>
    35e6:	81 30       	cpi	r24, 0x01	; 1
    35e8:	41 f4       	brne	.+16     	; 0x35fa <Uart_sendPacket+0x3e>
    35ea:	21 96       	adiw	r28, 0x01	; 1
    35ec:	c0 17       	cp	r28, r16
    35ee:	d1 07       	cpc	r29, r17
    35f0:	a0 f3       	brcs	.-24     	; 0x35da <Uart_sendPacket+0x1e>
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	03 c0       	rjmp	.+6      	; 0x35fc <Uart_sendPacket+0x40>
    35f6:	86 e0       	ldi	r24, 0x06	; 6
    35f8:	01 c0       	rjmp	.+2      	; 0x35fc <Uart_sendPacket+0x40>
    35fa:	80 e0       	ldi	r24, 0x00	; 0
    35fc:	df 91       	pop	r29
    35fe:	cf 91       	pop	r28
    3600:	1f 91       	pop	r17
    3602:	0f 91       	pop	r16
    3604:	ff 90       	pop	r15
    3606:	ef 90       	pop	r14
    3608:	08 95       	ret

0000360a <Uart_EnableNotification_RXC>:
    360a:	9c 01       	movw	r18, r24
    360c:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <u8_Uart_Status>
    3610:	99 23       	and	r25, r25
    3612:	61 f0       	breq	.+24     	; 0x362c <Uart_EnableNotification_RXC+0x22>
    3614:	21 15       	cp	r18, r1
    3616:	31 05       	cpc	r19, r1
    3618:	59 f0       	breq	.+22     	; 0x3630 <Uart_EnableNotification_RXC+0x26>
    361a:	8a b1       	in	r24, 0x0a	; 10
    361c:	80 68       	ori	r24, 0x80	; 128
    361e:	8a b9       	out	0x0a, r24	; 10
    3620:	30 93 b9 05 	sts	0x05B9, r19	; 0x8005b9 <Uart_RXC_CallBackPtr+0x1>
    3624:	20 93 b8 05 	sts	0x05B8, r18	; 0x8005b8 <Uart_RXC_CallBackPtr>
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	08 95       	ret
    362c:	86 e0       	ldi	r24, 0x06	; 6
    362e:	08 95       	ret
    3630:	85 e0       	ldi	r24, 0x05	; 5
    3632:	08 95       	ret

00003634 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    3634:	8c b1       	in	r24, 0x0c	; 12
}
    3636:	08 95       	ret

00003638 <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    3638:	1f 92       	push	r1
    363a:	0f 92       	push	r0
    363c:	0f b6       	in	r0, 0x3f	; 63
    363e:	0f 92       	push	r0
    3640:	11 24       	eor	r1, r1
    3642:	2f 93       	push	r18
    3644:	3f 93       	push	r19
    3646:	4f 93       	push	r20
    3648:	5f 93       	push	r21
    364a:	6f 93       	push	r22
    364c:	7f 93       	push	r23
    364e:	8f 93       	push	r24
    3650:	9f 93       	push	r25
    3652:	af 93       	push	r26
    3654:	bf 93       	push	r27
    3656:	ef 93       	push	r30
    3658:	ff 93       	push	r31
    365a:	e0 91 ba 05 	lds	r30, 0x05BA	; 0x8005ba <Uart_TXC_CallBackPtr>
    365e:	f0 91 bb 05 	lds	r31, 0x05BB	; 0x8005bb <Uart_TXC_CallBackPtr+0x1>
    3662:	09 95       	icall
    3664:	ff 91       	pop	r31
    3666:	ef 91       	pop	r30
    3668:	bf 91       	pop	r27
    366a:	af 91       	pop	r26
    366c:	9f 91       	pop	r25
    366e:	8f 91       	pop	r24
    3670:	7f 91       	pop	r23
    3672:	6f 91       	pop	r22
    3674:	5f 91       	pop	r21
    3676:	4f 91       	pop	r20
    3678:	3f 91       	pop	r19
    367a:	2f 91       	pop	r18
    367c:	0f 90       	pop	r0
    367e:	0f be       	out	0x3f, r0	; 63
    3680:	0f 90       	pop	r0
    3682:	1f 90       	pop	r1
    3684:	18 95       	reti

00003686 <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    3686:	1f 92       	push	r1
    3688:	0f 92       	push	r0
    368a:	0f b6       	in	r0, 0x3f	; 63
    368c:	0f 92       	push	r0
    368e:	11 24       	eor	r1, r1
    3690:	2f 93       	push	r18
    3692:	3f 93       	push	r19
    3694:	4f 93       	push	r20
    3696:	5f 93       	push	r21
    3698:	6f 93       	push	r22
    369a:	7f 93       	push	r23
    369c:	8f 93       	push	r24
    369e:	9f 93       	push	r25
    36a0:	af 93       	push	r26
    36a2:	bf 93       	push	r27
    36a4:	ef 93       	push	r30
    36a6:	ff 93       	push	r31
    36a8:	e0 91 b8 05 	lds	r30, 0x05B8	; 0x8005b8 <Uart_RXC_CallBackPtr>
    36ac:	f0 91 b9 05 	lds	r31, 0x05B9	; 0x8005b9 <Uart_RXC_CallBackPtr+0x1>
    36b0:	09 95       	icall
    36b2:	ff 91       	pop	r31
    36b4:	ef 91       	pop	r30
    36b6:	bf 91       	pop	r27
    36b8:	af 91       	pop	r26
    36ba:	9f 91       	pop	r25
    36bc:	8f 91       	pop	r24
    36be:	7f 91       	pop	r23
    36c0:	6f 91       	pop	r22
    36c2:	5f 91       	pop	r21
    36c4:	4f 91       	pop	r20
    36c6:	3f 91       	pop	r19
    36c8:	2f 91       	pop	r18
    36ca:	0f 90       	pop	r0
    36cc:	0f be       	out	0x3f, r0	; 63
    36ce:	0f 90       	pop	r0
    36d0:	1f 90       	pop	r1
    36d2:	18 95       	reti

000036d4 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    36d4:	1f 92       	push	r1
    36d6:	0f 92       	push	r0
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	0f 92       	push	r0
    36dc:	11 24       	eor	r1, r1
    36de:	2f 93       	push	r18
    36e0:	3f 93       	push	r19
    36e2:	4f 93       	push	r20
    36e4:	5f 93       	push	r21
    36e6:	6f 93       	push	r22
    36e8:	7f 93       	push	r23
    36ea:	8f 93       	push	r24
    36ec:	9f 93       	push	r25
    36ee:	af 93       	push	r26
    36f0:	bf 93       	push	r27
    36f2:	ef 93       	push	r30
    36f4:	ff 93       	push	r31
    36f6:	e0 91 b6 05 	lds	r30, 0x05B6	; 0x8005b6 <Uart_UDRE_CallBackPtr>
    36fa:	f0 91 b7 05 	lds	r31, 0x05B7	; 0x8005b7 <Uart_UDRE_CallBackPtr+0x1>
    36fe:	09 95       	icall
    3700:	ff 91       	pop	r31
    3702:	ef 91       	pop	r30
    3704:	bf 91       	pop	r27
    3706:	af 91       	pop	r26
    3708:	9f 91       	pop	r25
    370a:	8f 91       	pop	r24
    370c:	7f 91       	pop	r23
    370e:	6f 91       	pop	r22
    3710:	5f 91       	pop	r21
    3712:	4f 91       	pop	r20
    3714:	3f 91       	pop	r19
    3716:	2f 91       	pop	r18
    3718:	0f 90       	pop	r0
    371a:	0f be       	out	0x3f, r0	; 63
    371c:	0f 90       	pop	r0
    371e:	1f 90       	pop	r1
    3720:	18 95       	reti

00003722 <__subsf3>:
    3722:	50 58       	subi	r21, 0x80	; 128

00003724 <__addsf3>:
    3724:	bb 27       	eor	r27, r27
    3726:	aa 27       	eor	r26, r26
    3728:	0e 94 a9 1b 	call	0x3752	; 0x3752 <__addsf3x>
    372c:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <__fp_round>
    3730:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__fp_pscA>
    3734:	38 f0       	brcs	.+14     	; 0x3744 <__addsf3+0x20>
    3736:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__fp_pscB>
    373a:	20 f0       	brcs	.+8      	; 0x3744 <__addsf3+0x20>
    373c:	39 f4       	brne	.+14     	; 0x374c <__addsf3+0x28>
    373e:	9f 3f       	cpi	r25, 0xFF	; 255
    3740:	19 f4       	brne	.+6      	; 0x3748 <__addsf3+0x24>
    3742:	26 f4       	brtc	.+8      	; 0x374c <__addsf3+0x28>
    3744:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__fp_nan>
    3748:	0e f4       	brtc	.+2      	; 0x374c <__addsf3+0x28>
    374a:	e0 95       	com	r30
    374c:	e7 fb       	bst	r30, 7
    374e:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__fp_inf>

00003752 <__addsf3x>:
    3752:	e9 2f       	mov	r30, r25
    3754:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <__fp_split3>
    3758:	58 f3       	brcs	.-42     	; 0x3730 <__addsf3+0xc>
    375a:	ba 17       	cp	r27, r26
    375c:	62 07       	cpc	r22, r18
    375e:	73 07       	cpc	r23, r19
    3760:	84 07       	cpc	r24, r20
    3762:	95 07       	cpc	r25, r21
    3764:	20 f0       	brcs	.+8      	; 0x376e <__addsf3x+0x1c>
    3766:	79 f4       	brne	.+30     	; 0x3786 <__addsf3x+0x34>
    3768:	a6 f5       	brtc	.+104    	; 0x37d2 <__addsf3x+0x80>
    376a:	0c 94 4f 1d 	jmp	0x3a9e	; 0x3a9e <__fp_zero>
    376e:	0e f4       	brtc	.+2      	; 0x3772 <__addsf3x+0x20>
    3770:	e0 95       	com	r30
    3772:	0b 2e       	mov	r0, r27
    3774:	ba 2f       	mov	r27, r26
    3776:	a0 2d       	mov	r26, r0
    3778:	0b 01       	movw	r0, r22
    377a:	b9 01       	movw	r22, r18
    377c:	90 01       	movw	r18, r0
    377e:	0c 01       	movw	r0, r24
    3780:	ca 01       	movw	r24, r20
    3782:	a0 01       	movw	r20, r0
    3784:	11 24       	eor	r1, r1
    3786:	ff 27       	eor	r31, r31
    3788:	59 1b       	sub	r21, r25
    378a:	99 f0       	breq	.+38     	; 0x37b2 <__addsf3x+0x60>
    378c:	59 3f       	cpi	r21, 0xF9	; 249
    378e:	50 f4       	brcc	.+20     	; 0x37a4 <__addsf3x+0x52>
    3790:	50 3e       	cpi	r21, 0xE0	; 224
    3792:	68 f1       	brcs	.+90     	; 0x37ee <__addsf3x+0x9c>
    3794:	1a 16       	cp	r1, r26
    3796:	f0 40       	sbci	r31, 0x00	; 0
    3798:	a2 2f       	mov	r26, r18
    379a:	23 2f       	mov	r18, r19
    379c:	34 2f       	mov	r19, r20
    379e:	44 27       	eor	r20, r20
    37a0:	58 5f       	subi	r21, 0xF8	; 248
    37a2:	f3 cf       	rjmp	.-26     	; 0x378a <__addsf3x+0x38>
    37a4:	46 95       	lsr	r20
    37a6:	37 95       	ror	r19
    37a8:	27 95       	ror	r18
    37aa:	a7 95       	ror	r26
    37ac:	f0 40       	sbci	r31, 0x00	; 0
    37ae:	53 95       	inc	r21
    37b0:	c9 f7       	brne	.-14     	; 0x37a4 <__addsf3x+0x52>
    37b2:	7e f4       	brtc	.+30     	; 0x37d2 <__addsf3x+0x80>
    37b4:	1f 16       	cp	r1, r31
    37b6:	ba 0b       	sbc	r27, r26
    37b8:	62 0b       	sbc	r22, r18
    37ba:	73 0b       	sbc	r23, r19
    37bc:	84 0b       	sbc	r24, r20
    37be:	ba f0       	brmi	.+46     	; 0x37ee <__addsf3x+0x9c>
    37c0:	91 50       	subi	r25, 0x01	; 1
    37c2:	a1 f0       	breq	.+40     	; 0x37ec <__addsf3x+0x9a>
    37c4:	ff 0f       	add	r31, r31
    37c6:	bb 1f       	adc	r27, r27
    37c8:	66 1f       	adc	r22, r22
    37ca:	77 1f       	adc	r23, r23
    37cc:	88 1f       	adc	r24, r24
    37ce:	c2 f7       	brpl	.-16     	; 0x37c0 <__addsf3x+0x6e>
    37d0:	0e c0       	rjmp	.+28     	; 0x37ee <__addsf3x+0x9c>
    37d2:	ba 0f       	add	r27, r26
    37d4:	62 1f       	adc	r22, r18
    37d6:	73 1f       	adc	r23, r19
    37d8:	84 1f       	adc	r24, r20
    37da:	48 f4       	brcc	.+18     	; 0x37ee <__addsf3x+0x9c>
    37dc:	87 95       	ror	r24
    37de:	77 95       	ror	r23
    37e0:	67 95       	ror	r22
    37e2:	b7 95       	ror	r27
    37e4:	f7 95       	ror	r31
    37e6:	9e 3f       	cpi	r25, 0xFE	; 254
    37e8:	08 f0       	brcs	.+2      	; 0x37ec <__addsf3x+0x9a>
    37ea:	b0 cf       	rjmp	.-160    	; 0x374c <__addsf3+0x28>
    37ec:	93 95       	inc	r25
    37ee:	88 0f       	add	r24, r24
    37f0:	08 f0       	brcs	.+2      	; 0x37f4 <__addsf3x+0xa2>
    37f2:	99 27       	eor	r25, r25
    37f4:	ee 0f       	add	r30, r30
    37f6:	97 95       	ror	r25
    37f8:	87 95       	ror	r24
    37fa:	08 95       	ret

000037fc <__cmpsf2>:
    37fc:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <__fp_cmp>
    3800:	08 f4       	brcc	.+2      	; 0x3804 <__cmpsf2+0x8>
    3802:	81 e0       	ldi	r24, 0x01	; 1
    3804:	08 95       	ret

00003806 <__divsf3>:
    3806:	0e 94 17 1c 	call	0x382e	; 0x382e <__divsf3x>
    380a:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <__fp_round>
    380e:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__fp_pscB>
    3812:	58 f0       	brcs	.+22     	; 0x382a <__divsf3+0x24>
    3814:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__fp_pscA>
    3818:	40 f0       	brcs	.+16     	; 0x382a <__divsf3+0x24>
    381a:	29 f4       	brne	.+10     	; 0x3826 <__divsf3+0x20>
    381c:	5f 3f       	cpi	r21, 0xFF	; 255
    381e:	29 f0       	breq	.+10     	; 0x382a <__divsf3+0x24>
    3820:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__fp_inf>
    3824:	51 11       	cpse	r21, r1
    3826:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__fp_szero>
    382a:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__fp_nan>

0000382e <__divsf3x>:
    382e:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <__fp_split3>
    3832:	68 f3       	brcs	.-38     	; 0x380e <__divsf3+0x8>

00003834 <__divsf3_pse>:
    3834:	99 23       	and	r25, r25
    3836:	b1 f3       	breq	.-20     	; 0x3824 <__divsf3+0x1e>
    3838:	55 23       	and	r21, r21
    383a:	91 f3       	breq	.-28     	; 0x3820 <__divsf3+0x1a>
    383c:	95 1b       	sub	r25, r21
    383e:	55 0b       	sbc	r21, r21
    3840:	bb 27       	eor	r27, r27
    3842:	aa 27       	eor	r26, r26
    3844:	62 17       	cp	r22, r18
    3846:	73 07       	cpc	r23, r19
    3848:	84 07       	cpc	r24, r20
    384a:	38 f0       	brcs	.+14     	; 0x385a <__divsf3_pse+0x26>
    384c:	9f 5f       	subi	r25, 0xFF	; 255
    384e:	5f 4f       	sbci	r21, 0xFF	; 255
    3850:	22 0f       	add	r18, r18
    3852:	33 1f       	adc	r19, r19
    3854:	44 1f       	adc	r20, r20
    3856:	aa 1f       	adc	r26, r26
    3858:	a9 f3       	breq	.-22     	; 0x3844 <__divsf3_pse+0x10>
    385a:	35 d0       	rcall	.+106    	; 0x38c6 <__divsf3_pse+0x92>
    385c:	0e 2e       	mov	r0, r30
    385e:	3a f0       	brmi	.+14     	; 0x386e <__divsf3_pse+0x3a>
    3860:	e0 e8       	ldi	r30, 0x80	; 128
    3862:	32 d0       	rcall	.+100    	; 0x38c8 <__divsf3_pse+0x94>
    3864:	91 50       	subi	r25, 0x01	; 1
    3866:	50 40       	sbci	r21, 0x00	; 0
    3868:	e6 95       	lsr	r30
    386a:	00 1c       	adc	r0, r0
    386c:	ca f7       	brpl	.-14     	; 0x3860 <__divsf3_pse+0x2c>
    386e:	2b d0       	rcall	.+86     	; 0x38c6 <__divsf3_pse+0x92>
    3870:	fe 2f       	mov	r31, r30
    3872:	29 d0       	rcall	.+82     	; 0x38c6 <__divsf3_pse+0x92>
    3874:	66 0f       	add	r22, r22
    3876:	77 1f       	adc	r23, r23
    3878:	88 1f       	adc	r24, r24
    387a:	bb 1f       	adc	r27, r27
    387c:	26 17       	cp	r18, r22
    387e:	37 07       	cpc	r19, r23
    3880:	48 07       	cpc	r20, r24
    3882:	ab 07       	cpc	r26, r27
    3884:	b0 e8       	ldi	r27, 0x80	; 128
    3886:	09 f0       	breq	.+2      	; 0x388a <__divsf3_pse+0x56>
    3888:	bb 0b       	sbc	r27, r27
    388a:	80 2d       	mov	r24, r0
    388c:	bf 01       	movw	r22, r30
    388e:	ff 27       	eor	r31, r31
    3890:	93 58       	subi	r25, 0x83	; 131
    3892:	5f 4f       	sbci	r21, 0xFF	; 255
    3894:	3a f0       	brmi	.+14     	; 0x38a4 <__divsf3_pse+0x70>
    3896:	9e 3f       	cpi	r25, 0xFE	; 254
    3898:	51 05       	cpc	r21, r1
    389a:	78 f0       	brcs	.+30     	; 0x38ba <__divsf3_pse+0x86>
    389c:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__fp_inf>
    38a0:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__fp_szero>
    38a4:	5f 3f       	cpi	r21, 0xFF	; 255
    38a6:	e4 f3       	brlt	.-8      	; 0x38a0 <__divsf3_pse+0x6c>
    38a8:	98 3e       	cpi	r25, 0xE8	; 232
    38aa:	d4 f3       	brlt	.-12     	; 0x38a0 <__divsf3_pse+0x6c>
    38ac:	86 95       	lsr	r24
    38ae:	77 95       	ror	r23
    38b0:	67 95       	ror	r22
    38b2:	b7 95       	ror	r27
    38b4:	f7 95       	ror	r31
    38b6:	9f 5f       	subi	r25, 0xFF	; 255
    38b8:	c9 f7       	brne	.-14     	; 0x38ac <__divsf3_pse+0x78>
    38ba:	88 0f       	add	r24, r24
    38bc:	91 1d       	adc	r25, r1
    38be:	96 95       	lsr	r25
    38c0:	87 95       	ror	r24
    38c2:	97 f9       	bld	r25, 7
    38c4:	08 95       	ret
    38c6:	e1 e0       	ldi	r30, 0x01	; 1
    38c8:	66 0f       	add	r22, r22
    38ca:	77 1f       	adc	r23, r23
    38cc:	88 1f       	adc	r24, r24
    38ce:	bb 1f       	adc	r27, r27
    38d0:	62 17       	cp	r22, r18
    38d2:	73 07       	cpc	r23, r19
    38d4:	84 07       	cpc	r24, r20
    38d6:	ba 07       	cpc	r27, r26
    38d8:	20 f0       	brcs	.+8      	; 0x38e2 <__divsf3_pse+0xae>
    38da:	62 1b       	sub	r22, r18
    38dc:	73 0b       	sbc	r23, r19
    38de:	84 0b       	sbc	r24, r20
    38e0:	ba 0b       	sbc	r27, r26
    38e2:	ee 1f       	adc	r30, r30
    38e4:	88 f7       	brcc	.-30     	; 0x38c8 <__divsf3_pse+0x94>
    38e6:	e0 95       	com	r30
    38e8:	08 95       	ret

000038ea <__fixunssfsi>:
    38ea:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <__fp_splitA>
    38ee:	88 f0       	brcs	.+34     	; 0x3912 <__fixunssfsi+0x28>
    38f0:	9f 57       	subi	r25, 0x7F	; 127
    38f2:	98 f0       	brcs	.+38     	; 0x391a <__fixunssfsi+0x30>
    38f4:	b9 2f       	mov	r27, r25
    38f6:	99 27       	eor	r25, r25
    38f8:	b7 51       	subi	r27, 0x17	; 23
    38fa:	b0 f0       	brcs	.+44     	; 0x3928 <__fixunssfsi+0x3e>
    38fc:	e1 f0       	breq	.+56     	; 0x3936 <__fixunssfsi+0x4c>
    38fe:	66 0f       	add	r22, r22
    3900:	77 1f       	adc	r23, r23
    3902:	88 1f       	adc	r24, r24
    3904:	99 1f       	adc	r25, r25
    3906:	1a f0       	brmi	.+6      	; 0x390e <__fixunssfsi+0x24>
    3908:	ba 95       	dec	r27
    390a:	c9 f7       	brne	.-14     	; 0x38fe <__fixunssfsi+0x14>
    390c:	14 c0       	rjmp	.+40     	; 0x3936 <__fixunssfsi+0x4c>
    390e:	b1 30       	cpi	r27, 0x01	; 1
    3910:	91 f0       	breq	.+36     	; 0x3936 <__fixunssfsi+0x4c>
    3912:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__fp_zero>
    3916:	b1 e0       	ldi	r27, 0x01	; 1
    3918:	08 95       	ret
    391a:	0c 94 4f 1d 	jmp	0x3a9e	; 0x3a9e <__fp_zero>
    391e:	67 2f       	mov	r22, r23
    3920:	78 2f       	mov	r23, r24
    3922:	88 27       	eor	r24, r24
    3924:	b8 5f       	subi	r27, 0xF8	; 248
    3926:	39 f0       	breq	.+14     	; 0x3936 <__fixunssfsi+0x4c>
    3928:	b9 3f       	cpi	r27, 0xF9	; 249
    392a:	cc f3       	brlt	.-14     	; 0x391e <__fixunssfsi+0x34>
    392c:	86 95       	lsr	r24
    392e:	77 95       	ror	r23
    3930:	67 95       	ror	r22
    3932:	b3 95       	inc	r27
    3934:	d9 f7       	brne	.-10     	; 0x392c <__fixunssfsi+0x42>
    3936:	3e f4       	brtc	.+14     	; 0x3946 <__fixunssfsi+0x5c>
    3938:	90 95       	com	r25
    393a:	80 95       	com	r24
    393c:	70 95       	com	r23
    393e:	61 95       	neg	r22
    3940:	7f 4f       	sbci	r23, 0xFF	; 255
    3942:	8f 4f       	sbci	r24, 0xFF	; 255
    3944:	9f 4f       	sbci	r25, 0xFF	; 255
    3946:	08 95       	ret

00003948 <__floatunsisf>:
    3948:	e8 94       	clt
    394a:	09 c0       	rjmp	.+18     	; 0x395e <__floatsisf+0x12>

0000394c <__floatsisf>:
    394c:	97 fb       	bst	r25, 7
    394e:	3e f4       	brtc	.+14     	; 0x395e <__floatsisf+0x12>
    3950:	90 95       	com	r25
    3952:	80 95       	com	r24
    3954:	70 95       	com	r23
    3956:	61 95       	neg	r22
    3958:	7f 4f       	sbci	r23, 0xFF	; 255
    395a:	8f 4f       	sbci	r24, 0xFF	; 255
    395c:	9f 4f       	sbci	r25, 0xFF	; 255
    395e:	99 23       	and	r25, r25
    3960:	a9 f0       	breq	.+42     	; 0x398c <__floatsisf+0x40>
    3962:	f9 2f       	mov	r31, r25
    3964:	96 e9       	ldi	r25, 0x96	; 150
    3966:	bb 27       	eor	r27, r27
    3968:	93 95       	inc	r25
    396a:	f6 95       	lsr	r31
    396c:	87 95       	ror	r24
    396e:	77 95       	ror	r23
    3970:	67 95       	ror	r22
    3972:	b7 95       	ror	r27
    3974:	f1 11       	cpse	r31, r1
    3976:	f8 cf       	rjmp	.-16     	; 0x3968 <__floatsisf+0x1c>
    3978:	fa f4       	brpl	.+62     	; 0x39b8 <__floatsisf+0x6c>
    397a:	bb 0f       	add	r27, r27
    397c:	11 f4       	brne	.+4      	; 0x3982 <__floatsisf+0x36>
    397e:	60 ff       	sbrs	r22, 0
    3980:	1b c0       	rjmp	.+54     	; 0x39b8 <__floatsisf+0x6c>
    3982:	6f 5f       	subi	r22, 0xFF	; 255
    3984:	7f 4f       	sbci	r23, 0xFF	; 255
    3986:	8f 4f       	sbci	r24, 0xFF	; 255
    3988:	9f 4f       	sbci	r25, 0xFF	; 255
    398a:	16 c0       	rjmp	.+44     	; 0x39b8 <__floatsisf+0x6c>
    398c:	88 23       	and	r24, r24
    398e:	11 f0       	breq	.+4      	; 0x3994 <__floatsisf+0x48>
    3990:	96 e9       	ldi	r25, 0x96	; 150
    3992:	11 c0       	rjmp	.+34     	; 0x39b6 <__floatsisf+0x6a>
    3994:	77 23       	and	r23, r23
    3996:	21 f0       	breq	.+8      	; 0x39a0 <__floatsisf+0x54>
    3998:	9e e8       	ldi	r25, 0x8E	; 142
    399a:	87 2f       	mov	r24, r23
    399c:	76 2f       	mov	r23, r22
    399e:	05 c0       	rjmp	.+10     	; 0x39aa <__floatsisf+0x5e>
    39a0:	66 23       	and	r22, r22
    39a2:	71 f0       	breq	.+28     	; 0x39c0 <__floatsisf+0x74>
    39a4:	96 e8       	ldi	r25, 0x86	; 134
    39a6:	86 2f       	mov	r24, r22
    39a8:	70 e0       	ldi	r23, 0x00	; 0
    39aa:	60 e0       	ldi	r22, 0x00	; 0
    39ac:	2a f0       	brmi	.+10     	; 0x39b8 <__floatsisf+0x6c>
    39ae:	9a 95       	dec	r25
    39b0:	66 0f       	add	r22, r22
    39b2:	77 1f       	adc	r23, r23
    39b4:	88 1f       	adc	r24, r24
    39b6:	da f7       	brpl	.-10     	; 0x39ae <__floatsisf+0x62>
    39b8:	88 0f       	add	r24, r24
    39ba:	96 95       	lsr	r25
    39bc:	87 95       	ror	r24
    39be:	97 f9       	bld	r25, 7
    39c0:	08 95       	ret

000039c2 <__fp_cmp>:
    39c2:	99 0f       	add	r25, r25
    39c4:	00 08       	sbc	r0, r0
    39c6:	55 0f       	add	r21, r21
    39c8:	aa 0b       	sbc	r26, r26
    39ca:	e0 e8       	ldi	r30, 0x80	; 128
    39cc:	fe ef       	ldi	r31, 0xFE	; 254
    39ce:	16 16       	cp	r1, r22
    39d0:	17 06       	cpc	r1, r23
    39d2:	e8 07       	cpc	r30, r24
    39d4:	f9 07       	cpc	r31, r25
    39d6:	c0 f0       	brcs	.+48     	; 0x3a08 <__fp_cmp+0x46>
    39d8:	12 16       	cp	r1, r18
    39da:	13 06       	cpc	r1, r19
    39dc:	e4 07       	cpc	r30, r20
    39de:	f5 07       	cpc	r31, r21
    39e0:	98 f0       	brcs	.+38     	; 0x3a08 <__fp_cmp+0x46>
    39e2:	62 1b       	sub	r22, r18
    39e4:	73 0b       	sbc	r23, r19
    39e6:	84 0b       	sbc	r24, r20
    39e8:	95 0b       	sbc	r25, r21
    39ea:	39 f4       	brne	.+14     	; 0x39fa <__fp_cmp+0x38>
    39ec:	0a 26       	eor	r0, r26
    39ee:	61 f0       	breq	.+24     	; 0x3a08 <__fp_cmp+0x46>
    39f0:	23 2b       	or	r18, r19
    39f2:	24 2b       	or	r18, r20
    39f4:	25 2b       	or	r18, r21
    39f6:	21 f4       	brne	.+8      	; 0x3a00 <__fp_cmp+0x3e>
    39f8:	08 95       	ret
    39fa:	0a 26       	eor	r0, r26
    39fc:	09 f4       	brne	.+2      	; 0x3a00 <__fp_cmp+0x3e>
    39fe:	a1 40       	sbci	r26, 0x01	; 1
    3a00:	a6 95       	lsr	r26
    3a02:	8f ef       	ldi	r24, 0xFF	; 255
    3a04:	81 1d       	adc	r24, r1
    3a06:	81 1d       	adc	r24, r1
    3a08:	08 95       	ret

00003a0a <__fp_inf>:
    3a0a:	97 f9       	bld	r25, 7
    3a0c:	9f 67       	ori	r25, 0x7F	; 127
    3a0e:	80 e8       	ldi	r24, 0x80	; 128
    3a10:	70 e0       	ldi	r23, 0x00	; 0
    3a12:	60 e0       	ldi	r22, 0x00	; 0
    3a14:	08 95       	ret

00003a16 <__fp_nan>:
    3a16:	9f ef       	ldi	r25, 0xFF	; 255
    3a18:	80 ec       	ldi	r24, 0xC0	; 192
    3a1a:	08 95       	ret

00003a1c <__fp_pscA>:
    3a1c:	00 24       	eor	r0, r0
    3a1e:	0a 94       	dec	r0
    3a20:	16 16       	cp	r1, r22
    3a22:	17 06       	cpc	r1, r23
    3a24:	18 06       	cpc	r1, r24
    3a26:	09 06       	cpc	r0, r25
    3a28:	08 95       	ret

00003a2a <__fp_pscB>:
    3a2a:	00 24       	eor	r0, r0
    3a2c:	0a 94       	dec	r0
    3a2e:	12 16       	cp	r1, r18
    3a30:	13 06       	cpc	r1, r19
    3a32:	14 06       	cpc	r1, r20
    3a34:	05 06       	cpc	r0, r21
    3a36:	08 95       	ret

00003a38 <__fp_round>:
    3a38:	09 2e       	mov	r0, r25
    3a3a:	03 94       	inc	r0
    3a3c:	00 0c       	add	r0, r0
    3a3e:	11 f4       	brne	.+4      	; 0x3a44 <__fp_round+0xc>
    3a40:	88 23       	and	r24, r24
    3a42:	52 f0       	brmi	.+20     	; 0x3a58 <__fp_round+0x20>
    3a44:	bb 0f       	add	r27, r27
    3a46:	40 f4       	brcc	.+16     	; 0x3a58 <__fp_round+0x20>
    3a48:	bf 2b       	or	r27, r31
    3a4a:	11 f4       	brne	.+4      	; 0x3a50 <__fp_round+0x18>
    3a4c:	60 ff       	sbrs	r22, 0
    3a4e:	04 c0       	rjmp	.+8      	; 0x3a58 <__fp_round+0x20>
    3a50:	6f 5f       	subi	r22, 0xFF	; 255
    3a52:	7f 4f       	sbci	r23, 0xFF	; 255
    3a54:	8f 4f       	sbci	r24, 0xFF	; 255
    3a56:	9f 4f       	sbci	r25, 0xFF	; 255
    3a58:	08 95       	ret

00003a5a <__fp_split3>:
    3a5a:	57 fd       	sbrc	r21, 7
    3a5c:	90 58       	subi	r25, 0x80	; 128
    3a5e:	44 0f       	add	r20, r20
    3a60:	55 1f       	adc	r21, r21
    3a62:	59 f0       	breq	.+22     	; 0x3a7a <__fp_splitA+0x10>
    3a64:	5f 3f       	cpi	r21, 0xFF	; 255
    3a66:	71 f0       	breq	.+28     	; 0x3a84 <__fp_splitA+0x1a>
    3a68:	47 95       	ror	r20

00003a6a <__fp_splitA>:
    3a6a:	88 0f       	add	r24, r24
    3a6c:	97 fb       	bst	r25, 7
    3a6e:	99 1f       	adc	r25, r25
    3a70:	61 f0       	breq	.+24     	; 0x3a8a <__fp_splitA+0x20>
    3a72:	9f 3f       	cpi	r25, 0xFF	; 255
    3a74:	79 f0       	breq	.+30     	; 0x3a94 <__fp_splitA+0x2a>
    3a76:	87 95       	ror	r24
    3a78:	08 95       	ret
    3a7a:	12 16       	cp	r1, r18
    3a7c:	13 06       	cpc	r1, r19
    3a7e:	14 06       	cpc	r1, r20
    3a80:	55 1f       	adc	r21, r21
    3a82:	f2 cf       	rjmp	.-28     	; 0x3a68 <__fp_split3+0xe>
    3a84:	46 95       	lsr	r20
    3a86:	f1 df       	rcall	.-30     	; 0x3a6a <__fp_splitA>
    3a88:	08 c0       	rjmp	.+16     	; 0x3a9a <__fp_splitA+0x30>
    3a8a:	16 16       	cp	r1, r22
    3a8c:	17 06       	cpc	r1, r23
    3a8e:	18 06       	cpc	r1, r24
    3a90:	99 1f       	adc	r25, r25
    3a92:	f1 cf       	rjmp	.-30     	; 0x3a76 <__fp_splitA+0xc>
    3a94:	86 95       	lsr	r24
    3a96:	71 05       	cpc	r23, r1
    3a98:	61 05       	cpc	r22, r1
    3a9a:	08 94       	sec
    3a9c:	08 95       	ret

00003a9e <__fp_zero>:
    3a9e:	e8 94       	clt

00003aa0 <__fp_szero>:
    3aa0:	bb 27       	eor	r27, r27
    3aa2:	66 27       	eor	r22, r22
    3aa4:	77 27       	eor	r23, r23
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	97 f9       	bld	r25, 7
    3aaa:	08 95       	ret

00003aac <__mulsf3>:
    3aac:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <__mulsf3x>
    3ab0:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <__fp_round>
    3ab4:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__fp_pscA>
    3ab8:	38 f0       	brcs	.+14     	; 0x3ac8 <__mulsf3+0x1c>
    3aba:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__fp_pscB>
    3abe:	20 f0       	brcs	.+8      	; 0x3ac8 <__mulsf3+0x1c>
    3ac0:	95 23       	and	r25, r21
    3ac2:	11 f0       	breq	.+4      	; 0x3ac8 <__mulsf3+0x1c>
    3ac4:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__fp_inf>
    3ac8:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__fp_nan>
    3acc:	11 24       	eor	r1, r1
    3ace:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__fp_szero>

00003ad2 <__mulsf3x>:
    3ad2:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <__fp_split3>
    3ad6:	70 f3       	brcs	.-36     	; 0x3ab4 <__mulsf3+0x8>

00003ad8 <__mulsf3_pse>:
    3ad8:	95 9f       	mul	r25, r21
    3ada:	c1 f3       	breq	.-16     	; 0x3acc <__mulsf3+0x20>
    3adc:	95 0f       	add	r25, r21
    3ade:	50 e0       	ldi	r21, 0x00	; 0
    3ae0:	55 1f       	adc	r21, r21
    3ae2:	62 9f       	mul	r22, r18
    3ae4:	f0 01       	movw	r30, r0
    3ae6:	72 9f       	mul	r23, r18
    3ae8:	bb 27       	eor	r27, r27
    3aea:	f0 0d       	add	r31, r0
    3aec:	b1 1d       	adc	r27, r1
    3aee:	63 9f       	mul	r22, r19
    3af0:	aa 27       	eor	r26, r26
    3af2:	f0 0d       	add	r31, r0
    3af4:	b1 1d       	adc	r27, r1
    3af6:	aa 1f       	adc	r26, r26
    3af8:	64 9f       	mul	r22, r20
    3afa:	66 27       	eor	r22, r22
    3afc:	b0 0d       	add	r27, r0
    3afe:	a1 1d       	adc	r26, r1
    3b00:	66 1f       	adc	r22, r22
    3b02:	82 9f       	mul	r24, r18
    3b04:	22 27       	eor	r18, r18
    3b06:	b0 0d       	add	r27, r0
    3b08:	a1 1d       	adc	r26, r1
    3b0a:	62 1f       	adc	r22, r18
    3b0c:	73 9f       	mul	r23, r19
    3b0e:	b0 0d       	add	r27, r0
    3b10:	a1 1d       	adc	r26, r1
    3b12:	62 1f       	adc	r22, r18
    3b14:	83 9f       	mul	r24, r19
    3b16:	a0 0d       	add	r26, r0
    3b18:	61 1d       	adc	r22, r1
    3b1a:	22 1f       	adc	r18, r18
    3b1c:	74 9f       	mul	r23, r20
    3b1e:	33 27       	eor	r19, r19
    3b20:	a0 0d       	add	r26, r0
    3b22:	61 1d       	adc	r22, r1
    3b24:	23 1f       	adc	r18, r19
    3b26:	84 9f       	mul	r24, r20
    3b28:	60 0d       	add	r22, r0
    3b2a:	21 1d       	adc	r18, r1
    3b2c:	82 2f       	mov	r24, r18
    3b2e:	76 2f       	mov	r23, r22
    3b30:	6a 2f       	mov	r22, r26
    3b32:	11 24       	eor	r1, r1
    3b34:	9f 57       	subi	r25, 0x7F	; 127
    3b36:	50 40       	sbci	r21, 0x00	; 0
    3b38:	9a f0       	brmi	.+38     	; 0x3b60 <__mulsf3_pse+0x88>
    3b3a:	f1 f0       	breq	.+60     	; 0x3b78 <__mulsf3_pse+0xa0>
    3b3c:	88 23       	and	r24, r24
    3b3e:	4a f0       	brmi	.+18     	; 0x3b52 <__mulsf3_pse+0x7a>
    3b40:	ee 0f       	add	r30, r30
    3b42:	ff 1f       	adc	r31, r31
    3b44:	bb 1f       	adc	r27, r27
    3b46:	66 1f       	adc	r22, r22
    3b48:	77 1f       	adc	r23, r23
    3b4a:	88 1f       	adc	r24, r24
    3b4c:	91 50       	subi	r25, 0x01	; 1
    3b4e:	50 40       	sbci	r21, 0x00	; 0
    3b50:	a9 f7       	brne	.-22     	; 0x3b3c <__mulsf3_pse+0x64>
    3b52:	9e 3f       	cpi	r25, 0xFE	; 254
    3b54:	51 05       	cpc	r21, r1
    3b56:	80 f0       	brcs	.+32     	; 0x3b78 <__mulsf3_pse+0xa0>
    3b58:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__fp_inf>
    3b5c:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__fp_szero>
    3b60:	5f 3f       	cpi	r21, 0xFF	; 255
    3b62:	e4 f3       	brlt	.-8      	; 0x3b5c <__mulsf3_pse+0x84>
    3b64:	98 3e       	cpi	r25, 0xE8	; 232
    3b66:	d4 f3       	brlt	.-12     	; 0x3b5c <__mulsf3_pse+0x84>
    3b68:	86 95       	lsr	r24
    3b6a:	77 95       	ror	r23
    3b6c:	67 95       	ror	r22
    3b6e:	b7 95       	ror	r27
    3b70:	f7 95       	ror	r31
    3b72:	e7 95       	ror	r30
    3b74:	9f 5f       	subi	r25, 0xFF	; 255
    3b76:	c1 f7       	brne	.-16     	; 0x3b68 <__mulsf3_pse+0x90>
    3b78:	fe 2b       	or	r31, r30
    3b7a:	88 0f       	add	r24, r24
    3b7c:	91 1d       	adc	r25, r1
    3b7e:	96 95       	lsr	r25
    3b80:	87 95       	ror	r24
    3b82:	97 f9       	bld	r25, 7
    3b84:	08 95       	ret

00003b86 <__divmodhi4>:
    3b86:	97 fb       	bst	r25, 7
    3b88:	07 2e       	mov	r0, r23
    3b8a:	16 f4       	brtc	.+4      	; 0x3b90 <__divmodhi4+0xa>
    3b8c:	00 94       	com	r0
    3b8e:	07 d0       	rcall	.+14     	; 0x3b9e <__divmodhi4_neg1>
    3b90:	77 fd       	sbrc	r23, 7
    3b92:	09 d0       	rcall	.+18     	; 0x3ba6 <__divmodhi4_neg2>
    3b94:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <__udivmodhi4>
    3b98:	07 fc       	sbrc	r0, 7
    3b9a:	05 d0       	rcall	.+10     	; 0x3ba6 <__divmodhi4_neg2>
    3b9c:	3e f4       	brtc	.+14     	; 0x3bac <__divmodhi4_exit>

00003b9e <__divmodhi4_neg1>:
    3b9e:	90 95       	com	r25
    3ba0:	81 95       	neg	r24
    3ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba4:	08 95       	ret

00003ba6 <__divmodhi4_neg2>:
    3ba6:	70 95       	com	r23
    3ba8:	61 95       	neg	r22
    3baa:	7f 4f       	sbci	r23, 0xFF	; 255

00003bac <__divmodhi4_exit>:
    3bac:	08 95       	ret

00003bae <__udivmodsi4>:
    3bae:	a1 e2       	ldi	r26, 0x21	; 33
    3bb0:	1a 2e       	mov	r1, r26
    3bb2:	aa 1b       	sub	r26, r26
    3bb4:	bb 1b       	sub	r27, r27
    3bb6:	fd 01       	movw	r30, r26
    3bb8:	0d c0       	rjmp	.+26     	; 0x3bd4 <__udivmodsi4_ep>

00003bba <__udivmodsi4_loop>:
    3bba:	aa 1f       	adc	r26, r26
    3bbc:	bb 1f       	adc	r27, r27
    3bbe:	ee 1f       	adc	r30, r30
    3bc0:	ff 1f       	adc	r31, r31
    3bc2:	a2 17       	cp	r26, r18
    3bc4:	b3 07       	cpc	r27, r19
    3bc6:	e4 07       	cpc	r30, r20
    3bc8:	f5 07       	cpc	r31, r21
    3bca:	20 f0       	brcs	.+8      	; 0x3bd4 <__udivmodsi4_ep>
    3bcc:	a2 1b       	sub	r26, r18
    3bce:	b3 0b       	sbc	r27, r19
    3bd0:	e4 0b       	sbc	r30, r20
    3bd2:	f5 0b       	sbc	r31, r21

00003bd4 <__udivmodsi4_ep>:
    3bd4:	66 1f       	adc	r22, r22
    3bd6:	77 1f       	adc	r23, r23
    3bd8:	88 1f       	adc	r24, r24
    3bda:	99 1f       	adc	r25, r25
    3bdc:	1a 94       	dec	r1
    3bde:	69 f7       	brne	.-38     	; 0x3bba <__udivmodsi4_loop>
    3be0:	60 95       	com	r22
    3be2:	70 95       	com	r23
    3be4:	80 95       	com	r24
    3be6:	90 95       	com	r25
    3be8:	9b 01       	movw	r18, r22
    3bea:	ac 01       	movw	r20, r24
    3bec:	bd 01       	movw	r22, r26
    3bee:	cf 01       	movw	r24, r30
    3bf0:	08 95       	ret

00003bf2 <__tablejump2__>:
    3bf2:	ee 0f       	add	r30, r30
    3bf4:	ff 1f       	adc	r31, r31
    3bf6:	05 90       	lpm	r0, Z+
    3bf8:	f4 91       	lpm	r31, Z
    3bfa:	e0 2d       	mov	r30, r0
    3bfc:	09 94       	ijmp

00003bfe <__umulhisi3>:
    3bfe:	a2 9f       	mul	r26, r18
    3c00:	b0 01       	movw	r22, r0
    3c02:	b3 9f       	mul	r27, r19
    3c04:	c0 01       	movw	r24, r0
    3c06:	a3 9f       	mul	r26, r19
    3c08:	70 0d       	add	r23, r0
    3c0a:	81 1d       	adc	r24, r1
    3c0c:	11 24       	eor	r1, r1
    3c0e:	91 1d       	adc	r25, r1
    3c10:	b2 9f       	mul	r27, r18
    3c12:	70 0d       	add	r23, r0
    3c14:	81 1d       	adc	r24, r1
    3c16:	11 24       	eor	r1, r1
    3c18:	91 1d       	adc	r25, r1
    3c1a:	08 95       	ret

00003c1c <__adddi3_s8>:
    3c1c:	00 24       	eor	r0, r0
    3c1e:	a7 fd       	sbrc	r26, 7
    3c20:	00 94       	com	r0
    3c22:	2a 0f       	add	r18, r26
    3c24:	30 1d       	adc	r19, r0
    3c26:	40 1d       	adc	r20, r0
    3c28:	50 1d       	adc	r21, r0
    3c2a:	60 1d       	adc	r22, r0
    3c2c:	70 1d       	adc	r23, r0
    3c2e:	80 1d       	adc	r24, r0
    3c30:	90 1d       	adc	r25, r0
    3c32:	08 95       	ret

00003c34 <__cmpdi2>:
    3c34:	2a 15       	cp	r18, r10
    3c36:	3b 05       	cpc	r19, r11
    3c38:	4c 05       	cpc	r20, r12
    3c3a:	5d 05       	cpc	r21, r13
    3c3c:	6e 05       	cpc	r22, r14
    3c3e:	7f 05       	cpc	r23, r15
    3c40:	80 07       	cpc	r24, r16
    3c42:	91 07       	cpc	r25, r17
    3c44:	08 95       	ret

00003c46 <__cmpdi2_s8>:
    3c46:	00 24       	eor	r0, r0
    3c48:	a7 fd       	sbrc	r26, 7
    3c4a:	00 94       	com	r0
    3c4c:	2a 17       	cp	r18, r26
    3c4e:	30 05       	cpc	r19, r0
    3c50:	40 05       	cpc	r20, r0
    3c52:	50 05       	cpc	r21, r0
    3c54:	60 05       	cpc	r22, r0
    3c56:	70 05       	cpc	r23, r0
    3c58:	80 05       	cpc	r24, r0
    3c5a:	90 05       	cpc	r25, r0
    3c5c:	08 95       	ret

00003c5e <__udivmodhi4>:
    3c5e:	aa 1b       	sub	r26, r26
    3c60:	bb 1b       	sub	r27, r27
    3c62:	51 e1       	ldi	r21, 0x11	; 17
    3c64:	07 c0       	rjmp	.+14     	; 0x3c74 <__udivmodhi4_ep>

00003c66 <__udivmodhi4_loop>:
    3c66:	aa 1f       	adc	r26, r26
    3c68:	bb 1f       	adc	r27, r27
    3c6a:	a6 17       	cp	r26, r22
    3c6c:	b7 07       	cpc	r27, r23
    3c6e:	10 f0       	brcs	.+4      	; 0x3c74 <__udivmodhi4_ep>
    3c70:	a6 1b       	sub	r26, r22
    3c72:	b7 0b       	sbc	r27, r23

00003c74 <__udivmodhi4_ep>:
    3c74:	88 1f       	adc	r24, r24
    3c76:	99 1f       	adc	r25, r25
    3c78:	5a 95       	dec	r21
    3c7a:	a9 f7       	brne	.-22     	; 0x3c66 <__udivmodhi4_loop>
    3c7c:	80 95       	com	r24
    3c7e:	90 95       	com	r25
    3c80:	bc 01       	movw	r22, r24
    3c82:	cd 01       	movw	r24, r26
    3c84:	08 95       	ret

00003c86 <_exit>:
    3c86:	f8 94       	cli

00003c88 <__stop_program>:
    3c88:	ff cf       	rjmp	.-2      	; 0x3c88 <__stop_program>
