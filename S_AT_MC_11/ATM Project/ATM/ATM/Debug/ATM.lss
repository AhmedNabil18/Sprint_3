
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003ea  00800060  00003c96  00003d2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000017b  0080044a  0080044a  00004114  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004114  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004144  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f0  00000000  00000000  00004180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007094  00000000  00000000  00004870  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e7f  00000000  00000000  0000b904  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000043b3  00000000  00000000  0000d783  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001660  00000000  00000000  00011b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002bfb  00000000  00000000  00013198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005dca  00000000  00000000  00015d93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a8  00000000  00000000  0001bb5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__vector_1>
       8:	0c 94 51 12 	jmp	0x24a2	; 0x24a2 <__vector_2>
       c:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__vector_3>
      10:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__vector_4>
      14:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__vector_5>
      18:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__vector_6>
      1c:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__vector_7>
      20:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <__vector_8>
      24:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__vector_9>
      28:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__vector_10>
      2c:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__vector_11>
      30:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__vector_12>
      34:	0c 94 49 1b 	jmp	0x3692	; 0x3692 <__vector_13>
      38:	0c 94 70 1b 	jmp	0x36e0	; 0x36e0 <__vector_14>
      3c:	0c 94 22 1b 	jmp	0x3644	; 0x3644 <__vector_15>
      40:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__vector_16>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	d5 19       	sub	r29, r5
      56:	e1 19       	sub	r30, r1
      58:	d8 19       	sub	r29, r8
      5a:	db 19       	sub	r29, r11
      5c:	de 19       	sub	r29, r14
      5e:	d5 19       	sub	r29, r5
      60:	d5 19       	sub	r29, r5

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	14 e0       	ldi	r17, 0x04	; 4
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e6 e9       	ldi	r30, 0x96	; 150
      76:	fc e3       	ldi	r31, 0x3C	; 60
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	aa 34       	cpi	r26, 0x4A	; 74
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	25 e0       	ldi	r18, 0x05	; 5
      86:	aa e4       	ldi	r26, 0x4A	; 74
      88:	b4 e0       	ldi	r27, 0x04	; 4
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a5 3c       	cpi	r26, 0xC5	; 197
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <main>
      98:	0c 94 49 1e 	jmp	0x3c92	; 0x3c92 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <AppADMIN_saveNewCustomerData>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save PAN and Balance of a new Customer in the EEPROM
*			   Also this function sets the INIT Flag in the memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_saveNewCustomerData(void)
{
      a0:	cf 93       	push	r28
      a2:	df 93       	push	r29
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*16 ;
      a4:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <gu8_registeredAccNum>
      a8:	30 e0       	ldi	r19, 0x00	; 0
      aa:	c9 01       	movw	r24, r18
      ac:	02 96       	adiw	r24, 0x02	; 2
      ae:	d8 2f       	mov	r29, r24
      b0:	d2 95       	swap	r29
      b2:	d0 7f       	andi	r29, 0xF0	; 240
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*16 ;
      b4:	2d 5f       	subi	r18, 0xFD	; 253
      b6:	3f 4f       	sbci	r19, 0xFF	; 255
      b8:	c2 2f       	mov	r28, r18
      ba:	c2 95       	swap	r28
      bc:	c0 7f       	andi	r28, 0xF0	; 240
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
      be:	87 e6       	ldi	r24, 0x67	; 103
      c0:	94 e0       	ldi	r25, 0x04	; 4
      c2:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <stringLength>
      c6:	48 2f       	mov	r20, r24
      c8:	50 e0       	ldi	r21, 0x00	; 0
      ca:	67 e6       	ldi	r22, 0x67	; 103
      cc:	74 e0       	ldi	r23, 0x04	; 4
      ce:	8d 2f       	mov	r24, r29
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	0e 94 58 09 	call	0x12b0	; 0x12b0 <Eeprom_24_writePacket>
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	d9 f4       	brne	.+54     	; 0x110 <AppADMIN_saveNewCustomerData+0x70>
	return APP_STATUS_ERROR_NOK;
	
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
      da:	81 e7       	ldi	r24, 0x71	; 113
      dc:	94 e0       	ldi	r25, 0x04	; 4
      de:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <stringLength>
      e2:	48 2f       	mov	r20, r24
      e4:	50 e0       	ldi	r21, 0x00	; 0
      e6:	61 e7       	ldi	r22, 0x71	; 113
      e8:	74 e0       	ldi	r23, 0x04	; 4
      ea:	8c 2f       	mov	r24, r28
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 58 09 	call	0x12b0	; 0x12b0 <Eeprom_24_writePacket>
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	79 f4       	brne	.+30     	; 0x114 <AppADMIN_saveNewCustomerData+0x74>
	return APP_STATUS_ERROR_NOK;
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
      f6:	60 91 65 04 	lds	r22, 0x0465	; 0x800465 <gu8_registeredAccNum>
      fa:	6f 5f       	subi	r22, 0xFF	; 255
      fc:	60 93 65 04 	sts	0x0465, r22	; 0x800465 <gu8_registeredAccNum>
     100:	82 e0       	ldi	r24, 0x02	; 2
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 69 08 	call	0x10d2	; 0x10d2 <Eeprom_24_writeByte>
     108:	81 30       	cpi	r24, 0x01	; 1
     10a:	31 f0       	breq	.+12     	; 0x118 <AppADMIN_saveNewCustomerData+0x78>
	return APP_STATUS_ERROR_NOK;
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	05 c0       	rjmp	.+10     	; 0x11a <AppADMIN_saveNewCustomerData+0x7a>
{
	uint8_t u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*16 ;
	uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*16 ;
	
	if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	03 c0       	rjmp	.+6      	; 0x11a <AppADMIN_saveNewCustomerData+0x7a>
	
	if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	01 c0       	rjmp	.+2      	; 0x11a <AppADMIN_saveNewCustomerData+0x7a>
	
	if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
     118:	81 e0       	ldi	r24, 0x01	; 1
}
     11a:	df 91       	pop	r29
     11c:	cf 91       	pop	r28
     11e:	08 95       	ret

00000120 <AppUSER_displayTemp>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to display the temperature.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_displayTemp(void)
{
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	1f 92       	push	r1
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_currentTemp=0;
     12a:	19 82       	std	Y+1, r1	; 0x01
	gu8_displayFlag = DISPLAY_TEMP;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <gu8_displayFlag>
	Lcd_clear();
     132:	0e 94 56 0c 	call	0x18ac	; 0x18ac <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Lcd_setCursor>
     13e:	81 30       	cpi	r24, 0x01	; 1
     140:	f9 f4       	brne	.+62     	; 0x180 <AppUSER_displayTemp+0x60>
		return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
     142:	87 ed       	ldi	r24, 0xD7	; 215
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 42 0c 	call	0x1884	; 0x1884 <Lcd_printString>
     14a:	81 30       	cpi	r24, 0x01	; 1
     14c:	d9 f4       	brne	.+54     	; 0x184 <AppUSER_displayTemp+0x64>
		return APP_STATUS_ERROR_NOK;
	if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
     14e:	ce 01       	movw	r24, r28
     150:	01 96       	adiw	r24, 0x01	; 1
     152:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LM35_readTemp>
     156:	81 30       	cpi	r24, 0x01	; 1
     158:	59 f4       	brne	.+22     	; 0x170 <AppUSER_displayTemp+0x50>
	{
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     15a:	60 e0       	ldi	r22, 0x00	; 0
     15c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Lcd_setCursor>
     160:	81 30       	cpi	r24, 0x01	; 1
     162:	91 f4       	brne	.+36     	; 0x188 <AppUSER_displayTemp+0x68>
			return APP_STATUS_ERROR_NOK;
		if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
     164:	89 81       	ldd	r24, Y+1	; 0x01
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 84 0c 	call	0x1908	; 0x1908 <Lcd_printDecimal>
     16c:	81 30       	cpi	r24, 0x01	; 1
     16e:	71 f4       	brne	.+28     	; 0x18c <AppUSER_displayTemp+0x6c>
			return APP_STATUS_ERROR_NOK;
	}
	if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
     170:	88 ee       	ldi	r24, 0xE8	; 232
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 42 0c 	call	0x1884	; 0x1884 <Lcd_printString>
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	51 f0       	breq	.+20     	; 0x190 <AppUSER_displayTemp+0x70>
		return APP_STATUS_ERROR_NOK;
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	09 c0       	rjmp	.+18     	; 0x192 <AppUSER_displayTemp+0x72>
{
	uint8_t u8_currentTemp=0;
	gu8_displayFlag = DISPLAY_TEMP;
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	07 c0       	rjmp	.+14     	; 0x192 <AppUSER_displayTemp+0x72>
	if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	05 c0       	rjmp	.+10     	; 0x192 <AppUSER_displayTemp+0x72>
	if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
	{
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	03 c0       	rjmp	.+6      	; 0x192 <AppUSER_displayTemp+0x72>
		if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	01 c0       	rjmp	.+2      	; 0x192 <AppUSER_displayTemp+0x72>
	}
	if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	return APP_STATUS_ERROR_OK;
     190:	81 e0       	ldi	r24, 0x01	; 1
}
     192:	0f 90       	pop	r0
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	08 95       	ret

0000019a <AppUSER_checkPan>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
     19a:	1f 93       	push	r17
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
     1a4:	2a 97       	sbiw	r28, 0x0a	; 10
     1a6:	0f b6       	in	r0, 0x3f	; 63
     1a8:	f8 94       	cli
     1aa:	de bf       	out	0x3e, r29	; 62
     1ac:	0f be       	out	0x3f, r0	; 63
     1ae:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
     1b0:	fe 01       	movw	r30, r28
     1b2:	31 96       	adiw	r30, 0x01	; 1
     1b4:	8a e0       	ldi	r24, 0x0A	; 10
     1b6:	df 01       	movw	r26, r30
     1b8:	1d 92       	st	X+, r1
     1ba:	8a 95       	dec	r24
     1bc:	e9 f7       	brne	.-6      	; 0x1b8 <AppUSER_checkPan+0x1e>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     1be:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <gu8_clientIndex>
     1c2:	1b c0       	rjmp	.+54     	; 0x1fa <AppUSER_checkPan+0x60>
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*16;
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	02 96       	adiw	r24, 0x02	; 2
     1c8:	82 95       	swap	r24
     1ca:	80 7f       	andi	r24, 0xF0	; 240
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     1cc:	4a e0       	ldi	r20, 0x0A	; 10
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	be 01       	movw	r22, r28
     1d2:	6f 5f       	subi	r22, 0xFF	; 255
     1d4:	7f 4f       	sbci	r23, 0xFF	; 255
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 31 0a 	call	0x1462	; 0x1462 <Eeprom_24_readPacket>
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	89 f5       	brne	.+98     	; 0x242 <AppUSER_checkPan+0xa8>
		return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
     1e0:	63 e8       	ldi	r22, 0x83	; 131
     1e2:	74 e0       	ldi	r23, 0x04	; 4
     1e4:	ce 01       	movw	r24, r28
     1e6:	01 96       	adiw	r24, 0x01	; 1
     1e8:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <stringCompare>
     1ec:	81 30       	cpi	r24, 0x01	; 1
     1ee:	69 f0       	breq	.+26     	; 0x20a <AppUSER_checkPan+0x70>
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     1f0:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <gu8_clientIndex>
     1f4:	8f 5f       	subi	r24, 0xFF	; 255
     1f6:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <gu8_clientIndex>
     1fa:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <gu8_clientIndex>
     1fe:	90 91 65 04 	lds	r25, 0x0465	; 0x800465 <gu8_registeredAccNum>
     202:	89 17       	cp	r24, r25
     204:	f8 f2       	brcs	.-66     	; 0x1c4 <AppUSER_checkPan+0x2a>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	01 c0       	rjmp	.+2      	; 0x20c <AppUSER_checkPan+0x72>
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*16;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
		{
			u8_panFound = 1;
     20a:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
		
	if(u8_panFound == 1)
     20c:	81 30       	cpi	r24, 0x01	; 1
     20e:	d9 f4       	brne	.+54     	; 0x246 <AppUSER_checkPan+0xac>
	{
		uint8_t u8_clientBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*16;
     210:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <gu8_clientIndex>
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	03 96       	adiw	r24, 0x03	; 3
     218:	18 2f       	mov	r17, r24
     21a:	12 95       	swap	r17
     21c:	10 7f       	andi	r17, 0xF0	; 240
			
		stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
     21e:	67 e6       	ldi	r22, 0x67	; 103
     220:	74 e0       	ldi	r23, 0x04	; 4
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <stringCopy>
			
		if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     22a:	49 e0       	ldi	r20, 0x09	; 9
     22c:	50 e0       	ldi	r21, 0x00	; 0
     22e:	61 e7       	ldi	r22, 0x71	; 113
     230:	74 e0       	ldi	r23, 0x04	; 4
     232:	81 2f       	mov	r24, r17
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 31 0a 	call	0x1462	; 0x1462 <Eeprom_24_readPacket>
     23a:	81 30       	cpi	r24, 0x01	; 1
     23c:	31 f0       	breq	.+12     	; 0x24a <AppUSER_checkPan+0xb0>
		return APP_STATUS_ERROR_NOK;
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	05 c0       	rjmp	.+10     	; 0x24c <AppUSER_checkPan+0xb2>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*16;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	03 c0       	rjmp	.+6      	; 0x24c <AppUSER_checkPan+0xb2>
		return APP_STATUS_ERROR_NOK;
			
		return APP_STATUS_PAN_FOUND;
	}

	return APP_STATUS_PAN_NOT_FOUND;
     246:	8a e0       	ldi	r24, 0x0A	; 10
     248:	01 c0       	rjmp	.+2      	; 0x24c <AppUSER_checkPan+0xb2>
		stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
			
		if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
			
		return APP_STATUS_PAN_FOUND;
     24a:	89 e0       	ldi	r24, 0x09	; 9
	}

	return APP_STATUS_PAN_NOT_FOUND;
}
     24c:	2a 96       	adiw	r28, 0x0a	; 10
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	de bf       	out	0x3e, r29	; 62
     254:	0f be       	out	0x3f, r0	; 63
     256:	cd bf       	out	0x3d, r28	; 61
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	1f 91       	pop	r17
     25e:	08 95       	ret

00000260 <AppUSER_ReportKeypad>:
* Parameters (out): pu8_key - Pointer to variable to hold the button pressed
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the value pressed in the keypad.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_ReportKeypad(uint8_t* pu8_key)
{
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	ec 01       	movw	r28, r24
	static uint8_t u8_index = 0;
	static uint8_t sau8_data[10]={0};
	enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&sau8_data[u8_index]);
     266:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <u8_index.2251>
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	85 5b       	subi	r24, 0xB5	; 181
     26e:	9b 4f       	sbci	r25, 0xFB	; 251
     270:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <Keypad_readKey>
		
	if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
     274:	86 30       	cpi	r24, 0x06	; 6
     276:	09 f0       	breq	.+2      	; 0x27a <AppUSER_ReportKeypad+0x1a>
     278:	6b c0       	rjmp	.+214    	; 0x350 <AppUSER_ReportKeypad+0xf0>
	{
		if(sau8_data[u8_index] == '=')
     27a:	60 91 55 04 	lds	r22, 0x0455	; 0x800455 <u8_index.2251>
     27e:	86 2f       	mov	r24, r22
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	fc 01       	movw	r30, r24
     284:	e5 5b       	subi	r30, 0xB5	; 181
     286:	fb 4f       	sbci	r31, 0xFB	; 251
     288:	20 81       	ld	r18, Z
     28a:	2d 33       	cpi	r18, 0x3D	; 61
     28c:	09 f5       	brne	.+66     	; 0x2d0 <AppUSER_ReportKeypad+0x70>
		{
			sau8_data[u8_index] = '\0';
     28e:	fc 01       	movw	r30, r24
     290:	e5 5b       	subi	r30, 0xB5	; 181
     292:	fb 4f       	sbci	r31, 0xFB	; 251
     294:	10 82       	st	Z, r1
			u8_index = 0;
     296:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <u8_index.2251>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     29a:	66 e0       	ldi	r22, 0x06	; 6
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Lcd_setCursor>
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <AppUSER_ReportKeypad+0x48>
     2a6:	56 c0       	rjmp	.+172    	; 0x354 <AppUSER_ReportKeypad+0xf4>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
     2a8:	87 ef       	ldi	r24, 0xF7	; 247
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 42 0c 	call	0x1884	; 0x1884 <Lcd_printString>
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	09 f0       	breq	.+2      	; 0x2b6 <AppUSER_ReportKeypad+0x56>
     2b4:	51 c0       	rjmp	.+162    	; 0x358 <AppUSER_ReportKeypad+0xf8>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     2b6:	66 e0       	ldi	r22, 0x06	; 6
     2b8:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Lcd_setCursor>
     2bc:	81 30       	cpi	r24, 0x01	; 1
     2be:	09 f0       	breq	.+2      	; 0x2c2 <AppUSER_ReportKeypad+0x62>
     2c0:	4d c0       	rjmp	.+154    	; 0x35c <AppUSER_ReportKeypad+0xfc>
			return APP_STATUS_ERROR_NOK;
			stringCopy(sau8_data, pu8_key);
     2c2:	be 01       	movw	r22, r28
     2c4:	8b e4       	ldi	r24, 0x4B	; 75
     2c6:	94 e0       	ldi	r25, 0x04	; 4
     2c8:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <stringCopy>
			return APP_STATUS_KPD_NUM;
     2cc:	87 e0       	ldi	r24, 0x07	; 7
     2ce:	51 c0       	rjmp	.+162    	; 0x372 <AppUSER_ReportKeypad+0x112>
		}else if(sau8_data[u8_index] == '-')
     2d0:	2d 32       	cpi	r18, 0x2D	; 45
     2d2:	a9 f4       	brne	.+42     	; 0x2fe <AppUSER_ReportKeypad+0x9e>
		{
			u8_index--;
     2d4:	ef ef       	ldi	r30, 0xFF	; 255
     2d6:	e6 0f       	add	r30, r22
     2d8:	e0 93 55 04 	sts	0x0455, r30	; 0x800455 <u8_index.2251>
			sau8_data[u8_index] = '\0';
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	e5 5b       	subi	r30, 0xB5	; 181
     2e0:	fb 4f       	sbci	r31, 0xFB	; 251
     2e2:	10 82       	st	Z, r1
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     2e4:	6b 5f       	subi	r22, 0xFB	; 251
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Lcd_setCursor>
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	c1 f5       	brne	.+112    	; 0x360 <AppUSER_ReportKeypad+0x100>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_printChar(' ') != LCD_STATUS_ERROR_OK)
     2f0:	80 e2       	ldi	r24, 0x20	; 32
     2f2:	0e 94 26 0c 	call	0x184c	; 0x184c <Lcd_printChar>
     2f6:	81 30       	cpi	r24, 0x01	; 1
     2f8:	a9 f1       	breq	.+106    	; 0x364 <AppUSER_ReportKeypad+0x104>
			return APP_STATUS_ERROR_NOK;
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	3a c0       	rjmp	.+116    	; 0x372 <AppUSER_ReportKeypad+0x112>
		}else
		{
			if(u8_index!=10)
     2fe:	6a 30       	cpi	r22, 0x0A	; 10
     300:	09 f1       	breq	.+66     	; 0x344 <AppUSER_ReportKeypad+0xe4>
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     302:	6a 5f       	subi	r22, 0xFA	; 250
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Lcd_setCursor>
     30a:	81 30       	cpi	r24, 0x01	; 1
     30c:	69 f5       	brne	.+90     	; 0x368 <AppUSER_ReportKeypad+0x108>
				return APP_STATUS_ERROR_NOK;
				if(Kpd_enablePass == 0)
     30e:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <Kpd_enablePass>
     312:	81 11       	cpse	r24, r1
     314:	0b c0       	rjmp	.+22     	; 0x32c <AppUSER_ReportKeypad+0xcc>
				{
					if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
     316:	e0 91 55 04 	lds	r30, 0x0455	; 0x800455 <u8_index.2251>
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	e5 5b       	subi	r30, 0xB5	; 181
     31e:	fb 4f       	sbci	r31, 0xFB	; 251
     320:	80 81       	ld	r24, Z
     322:	0e 94 26 0c 	call	0x184c	; 0x184c <Lcd_printChar>
     326:	81 30       	cpi	r24, 0x01	; 1
     328:	09 f5       	brne	.+66     	; 0x36c <AppUSER_ReportKeypad+0x10c>
     32a:	05 c0       	rjmp	.+10     	; 0x336 <AppUSER_ReportKeypad+0xd6>
						return APP_STATUS_ERROR_NOK;
				}
				else
				{
					if(Lcd_printChar('*') != LCD_STATUS_ERROR_OK)
     32c:	8a e2       	ldi	r24, 0x2A	; 42
     32e:	0e 94 26 0c 	call	0x184c	; 0x184c <Lcd_printChar>
     332:	81 30       	cpi	r24, 0x01	; 1
     334:	e9 f4       	brne	.+58     	; 0x370 <AppUSER_ReportKeypad+0x110>
						return APP_STATUS_ERROR_NOK;
				}
				u8_index++;
     336:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <u8_index.2251>
     33a:	8f 5f       	subi	r24, 0xFF	; 255
     33c:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <u8_index.2251>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	17 c0       	rjmp	.+46     	; 0x372 <AppUSER_ReportKeypad+0x112>
						return APP_STATUS_ERROR_NOK;
				}
				u8_index++;
			}else
			{
				sau8_data[u8_index] = '\0';
     344:	fc 01       	movw	r30, r24
     346:	e5 5b       	subi	r30, 0xB5	; 181
     348:	fb 4f       	sbci	r31, 0xFB	; 251
     34a:	10 82       	st	Z, r1
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	11 c0       	rjmp	.+34     	; 0x372 <AppUSER_ReportKeypad+0x112>
			}
				
		}
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	0f c0       	rjmp	.+30     	; 0x372 <AppUSER_ReportKeypad+0x112>
		if(sau8_data[u8_index] == '=')
		{
			sau8_data[u8_index] = '\0';
			u8_index = 0;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	0d c0       	rjmp	.+26     	; 0x372 <AppUSER_ReportKeypad+0x112>
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	0b c0       	rjmp	.+22     	; 0x372 <AppUSER_ReportKeypad+0x112>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	09 c0       	rjmp	.+18     	; 0x372 <AppUSER_ReportKeypad+0x112>
		}else if(sau8_data[u8_index] == '-')
		{
			u8_index--;
			sau8_data[u8_index] = '\0';
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	07 c0       	rjmp	.+14     	; 0x372 <AppUSER_ReportKeypad+0x112>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	05 c0       	rjmp	.+10     	; 0x372 <AppUSER_ReportKeypad+0x112>
		}else
		{
			if(u8_index!=10)
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	03 c0       	rjmp	.+6      	; 0x372 <AppUSER_ReportKeypad+0x112>
				if(Kpd_enablePass == 0)
				{
					if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	01 c0       	rjmp	.+2      	; 0x372 <AppUSER_ReportKeypad+0x112>
				}
				else
				{
					if(Lcd_printChar('*') != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     370:	80 e0       	ldi	r24, 0x00	; 0
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	08 95       	ret

00000378 <AppUSER_startTransaction>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startTransaction(void)
{
     378:	4f 92       	push	r4
     37a:	5f 92       	push	r5
     37c:	6f 92       	push	r6
     37e:	7f 92       	push	r7
     380:	8f 92       	push	r8
     382:	9f 92       	push	r9
     384:	af 92       	push	r10
     386:	bf 92       	push	r11
     388:	cf 92       	push	r12
     38a:	df 92       	push	r13
     38c:	ef 92       	push	r14
     38e:	ff 92       	push	r15
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	28 97       	sbiw	r28, 0x08	; 8
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_inputKPD[8] = {0};
     3a4:	fe 01       	movw	r30, r28
     3a6:	31 96       	adiw	r30, 0x01	; 1
     3a8:	88 e0       	ldi	r24, 0x08	; 8
     3aa:	df 01       	movw	r26, r30
     3ac:	1d 92       	st	X+, r1
     3ae:	8a 95       	dec	r24
     3b0:	e9 f7       	brne	.-6      	; 0x3ac <AppUSER_startTransaction+0x34>
	enuApp_Status_t KeypdaStatus = 0;
	float32_t f32_balance = stringToFloat(gstr_clientdata.au8_Balance);
     3b2:	81 e7       	ldi	r24, 0x71	; 113
     3b4:	94 e0       	ldi	r25, 0x04	; 4
     3b6:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <stringToFloat>
     3ba:	2b 01       	movw	r4, r22
     3bc:	3c 01       	movw	r6, r24
	float32_t f32_maxAmount = stringToFloat(gau8_maxAmount);
     3be:	88 e5       	ldi	r24, 0x58	; 88
     3c0:	94 e0       	ldi	r25, 0x04	; 4
     3c2:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <stringToFloat>
     3c6:	4b 01       	movw	r8, r22
     3c8:	5c 01       	movw	r10, r24
	float32_t f32_amount = 0;
	while(1)
	{
		EmptyString(au8_inputKPD);
     3ca:	ce 01       	movw	r24, r28
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	0e 94 32 17 	call	0x2e64	; 0x2e64 <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     3d2:	ce 01       	movw	r24, r28
     3d4:	01 96       	adiw	r24, 0x01	; 1
     3d6:	0e 94 30 01 	call	0x260	; 0x260 <AppUSER_ReportKeypad>
		
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     3da:	87 30       	cpi	r24, 0x07	; 7
     3dc:	09 f0       	breq	.+2      	; 0x3e0 <AppUSER_startTransaction+0x68>
     3de:	b9 c0       	rjmp	.+370    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
		{
			
			f32_amount = stringToFloat(au8_inputKPD);
     3e0:	ce 01       	movw	r24, r28
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <stringToFloat>
     3e8:	6b 01       	movw	r12, r22
     3ea:	7c 01       	movw	r14, r24
			
			if(f32_maxAmount < f32_amount)
     3ec:	9b 01       	movw	r18, r22
     3ee:	ac 01       	movw	r20, r24
     3f0:	c5 01       	movw	r24, r10
     3f2:	b4 01       	movw	r22, r8
     3f4:	0e 94 04 1c 	call	0x3808	; 0x3808 <__cmpsf2>
     3f8:	88 23       	and	r24, r24
     3fa:	0c f5       	brge	.+66     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
			{
				Lcd_printLCD((uint8_t*)"   Max Amount", (uint8_t*)"    Exceeded");
     3fc:	6a ef       	ldi	r22, 0xFA	; 250
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	87 e0       	ldi	r24, 0x07	; 7
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_printLCD>
				
				Delay_ms(500);
     408:	24 ef       	ldi	r18, 0xF4	; 244
     40a:	31 e0       	ldi	r19, 0x01	; 1
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
				
				Lcd_clear();
     41c:	0e 94 56 0c 	call	0x18ac	; 0x18ac <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Lcd_setCursor>
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	09 f0       	breq	.+2      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42c:	9d c0       	rjmp	.+314    	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     42e:	85 e1       	ldi	r24, 0x15	; 21
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	0e 94 42 0c 	call	0x1884	; 0x1884 <Lcd_printString>
     436:	81 30       	cpi	r24, 0x01	; 1
     438:	09 f4       	brne	.+2      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     43a:	8b c0       	rjmp	.+278    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
     43c:	97 c0       	rjmp	.+302    	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
				return APP_STATUS_ERROR_NOK;
			}else
			{
			Lcd_printLCD((uint8_t*)"  Please Wait", (uint8_t*)" Processing....");
     43e:	62 e2       	ldi	r22, 0x22	; 34
     440:	71 e0       	ldi	r23, 0x01	; 1
     442:	82 e3       	ldi	r24, 0x32	; 50
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_printLCD>
				
			if(f32_balance < f32_amount)
     44a:	a7 01       	movw	r20, r14
     44c:	96 01       	movw	r18, r12
     44e:	c3 01       	movw	r24, r6
     450:	b2 01       	movw	r22, r4
     452:	0e 94 04 1c 	call	0x3808	; 0x3808 <__cmpsf2>
     456:	88 23       	and	r24, r24
     458:	0c f5       	brge	.+66     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
			{
				Lcd_printLCD((uint8_t*)"  Insufficient", (uint8_t*)"      Fund");
     45a:	60 e4       	ldi	r22, 0x40	; 64
     45c:	71 e0       	ldi	r23, 0x01	; 1
     45e:	8b e4       	ldi	r24, 0x4B	; 75
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_printLCD>
					
				Delay_ms(500);
     466:	24 ef       	ldi	r18, 0xF4	; 244
     468:	31 e0       	ldi	r19, 0x01	; 1
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
					
				Lcd_clear();
     47a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Lcd_setCursor>
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	09 f0       	breq	.+2      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
     48a:	72 c0       	rjmp	.+228    	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     48c:	85 e1       	ldi	r24, 0x15	; 21
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 42 0c 	call	0x1884	; 0x1884 <Lcd_printString>
     494:	81 30       	cpi	r24, 0x01	; 1
     496:	09 f4       	brne	.+2      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
     498:	5c c0       	rjmp	.+184    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
     49a:	6c c0       	rjmp	.+216    	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
				return APP_STATUS_ERROR_NOK;
				}else/****************** Transaction Successfull ******************/
				{
					Lcd_printLCD((uint8_t*)"   Successful", (uint8_t*)"  Transaction");
     49c:	6a e5       	ldi	r22, 0x5A	; 90
     49e:	71 e0       	ldi	r23, 0x01	; 1
     4a0:	88 e6       	ldi	r24, 0x68	; 104
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_printLCD>
						
					Motor_run(MOTOR_CASH_ID, 100, MOTOR_DIR_CLK_WISE);
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	64 e6       	ldi	r22, 0x64	; 100
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Motor_run>
					Delay_ms(1000);
     4b2:	28 ee       	ldi	r18, 0xE8	; 232
     4b4:	33 e0       	ldi	r19, 0x03	; 3
     4b6:	40 e0       	ldi	r20, 0x00	; 0
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
					Motor_stop(MOTOR_CASH_ID);
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Motor_stop>
					gu8_USER_Mode_State = USER_IDLE;
     4cc:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <gu8_USER_Mode_State>
						
					f32_balance -= f32_amount;
     4d0:	a7 01       	movw	r20, r14
     4d2:	96 01       	movw	r18, r12
     4d4:	c3 01       	movw	r24, r6
     4d6:	b2 01       	movw	r22, r4
     4d8:	0e 94 97 1b 	call	0x372e	; 0x372e <__subsf3>
     4dc:	6b 01       	movw	r12, r22
     4de:	7c 01       	movw	r14, r24
					EmptyString(gstr_clientdata.au8_Balance);
     4e0:	81 e7       	ldi	r24, 0x71	; 113
     4e2:	94 e0       	ldi	r25, 0x04	; 4
     4e4:	0e 94 32 17 	call	0x2e64	; 0x2e64 <EmptyString>
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
     4e8:	41 e7       	ldi	r20, 0x71	; 113
     4ea:	54 e0       	ldi	r21, 0x04	; 4
     4ec:	c7 01       	movw	r24, r14
     4ee:	b6 01       	movw	r22, r12
     4f0:	0e 94 14 18 	call	0x3028	; 0x3028 <floatToString>
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*16 ;
     4f4:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <gu8_clientIndex>
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	03 96       	adiw	r24, 0x03	; 3
     4fc:	f8 2e       	mov	r15, r24
     4fe:	ff 0c       	add	r15, r15
     500:	ff 0c       	add	r15, r15
     502:	ff 0c       	add	r15, r15
     504:	ff 0c       	add	r15, r15
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
										stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     506:	81 e7       	ldi	r24, 0x71	; 113
     508:	94 e0       	ldi	r25, 0x04	; 4
     50a:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <stringLength>
					f32_balance -= f32_amount;
					EmptyString(gstr_clientdata.au8_Balance);
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*16 ;
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
     50e:	48 2f       	mov	r20, r24
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	61 e7       	ldi	r22, 0x71	; 113
     514:	74 e0       	ldi	r23, 0x04	; 4
     516:	8f 2d       	mov	r24, r15
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <Eeprom_24_writePacket>
     51e:	81 30       	cpi	r24, 0x01	; 1
     520:	59 f5       	brne	.+86     	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
										stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
						
					Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
     522:	61 e7       	ldi	r22, 0x71	; 113
     524:	74 e0       	ldi	r23, 0x04	; 4
     526:	86 e7       	ldi	r24, 0x76	; 118
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_printLCD>
					
					Delay_ms(1000);
     52e:	28 ee       	ldi	r18, 0xE8	; 232
     530:	33 e0       	ldi	r19, 0x03	; 3
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     542:	65 e8       	ldi	r22, 0x85	; 133
     544:	71 e0       	ldi	r23, 0x01	; 1
     546:	84 e9       	ldi	r24, 0x94	; 148
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_printLCD>
						
					return APP_STATUS_ERROR_OK;
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	14 c0       	rjmp	.+40     	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
				}
			}
		}
		Delay_ms(155);
     552:	2b e9       	ldi	r18, 0x9B	; 155
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	40 e0       	ldi	r20, 0x00	; 0
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
	}
     566:	31 cf       	rjmp	.-414    	; 0x3ca <AppUSER_startTransaction+0x52>
				
				Delay_ms(500);
				
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	07 c0       	rjmp	.+14     	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	05 c0       	rjmp	.+10     	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
					
				Delay_ms(500);
					
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	03 c0       	rjmp	.+6      	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
				if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	01 c0       	rjmp	.+2      	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*16 ;
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
										stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     578:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
		Delay_ms(155);
	}
}
     57a:	28 96       	adiw	r28, 0x08	; 8
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	df 90       	pop	r13
     590:	cf 90       	pop	r12
     592:	bf 90       	pop	r11
     594:	af 90       	pop	r10
     596:	9f 90       	pop	r9
     598:	8f 90       	pop	r8
     59a:	7f 90       	pop	r7
     59c:	6f 90       	pop	r6
     59e:	5f 90       	pop	r5
     5a0:	4f 90       	pop	r4
     5a2:	08 95       	ret

000005a4 <AppUSER_checkPin>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the user's input pin if right or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPin(void)
{
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	00 d0       	rcall	.+0      	; 0x5aa <AppUSER_checkPin+0x6>
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <AppUSER_checkPin+0x8>
     5ac:	1f 92       	push	r1
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_inputKPD[5] = {0};
     5b2:	fe 01       	movw	r30, r28
     5b4:	31 96       	adiw	r30, 0x01	; 1
     5b6:	85 e0       	ldi	r24, 0x05	; 5
     5b8:	df 01       	movw	r26, r30
     5ba:	1d 92       	st	X+, r1
     5bc:	8a 95       	dec	r24
     5be:	e9 f7       	brne	.-6      	; 0x5ba <AppUSER_checkPin+0x16>
	enuApp_Status_t KeypdaStatus = 0;
	Kpd_enablePass = 1;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <Kpd_enablePass>
	while(1)
	{
		EmptyString(au8_inputKPD);
     5c6:	ce 01       	movw	r24, r28
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	0e 94 32 17 	call	0x2e64	; 0x2e64 <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     5ce:	ce 01       	movw	r24, r28
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	0e 94 30 01 	call	0x260	; 0x260 <AppUSER_ReportKeypad>
			
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     5d6:	87 30       	cpi	r24, 0x07	; 7
     5d8:	b1 f7       	brne	.-20     	; 0x5c6 <AppUSER_checkPin+0x22>
		{
			if(stringCompare(au8_inputKPD, gstr_userCardData.au8_pinNum) != 1)
     5da:	6d e8       	ldi	r22, 0x8D	; 141
     5dc:	74 e0       	ldi	r23, 0x04	; 4
     5de:	ce 01       	movw	r24, r28
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <stringCompare>
     5e6:	81 30       	cpi	r24, 0x01	; 1
     5e8:	f9 f0       	breq	.+62     	; 0x628 <AppUSER_checkPin+0x84>
			{
				Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)"   Try Again");
     5ea:	62 ea       	ldi	r22, 0xA2	; 162
     5ec:	71 e0       	ldi	r23, 0x01	; 1
     5ee:	8f ea       	ldi	r24, 0xAF	; 175
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_printLCD>
				Delay_ms(500);
     5f6:	24 ef       	ldi	r18, 0xF4	; 244
     5f8:	31 e0       	ldi	r19, 0x01	; 1
     5fa:	40 e0       	ldi	r20, 0x00	; 0
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
					
				Lcd_clear();
     60a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Lcd_setCursor>
     616:	81 30       	cpi	r24, 0x01	; 1
     618:	d9 f4       	brne	.+54     	; 0x650 <AppUSER_checkPin+0xac>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     61a:	8e eb       	ldi	r24, 0xBE	; 190
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	0e 94 42 0c 	call	0x1884	; 0x1884 <Lcd_printString>
     622:	81 30       	cpi	r24, 0x01	; 1
     624:	81 f2       	breq	.-96     	; 0x5c6 <AppUSER_checkPin+0x22>
     626:	16 c0       	rjmp	.+44     	; 0x654 <AppUSER_checkPin+0xb0>
				return APP_STATUS_ERROR_NOK;
			}else
			{
				Lcd_printLCD((uint8_t*)"  Please Wait", (uint8_t*)" Processing....");
     628:	62 e2       	ldi	r22, 0x22	; 34
     62a:	71 e0       	ldi	r23, 0x01	; 1
     62c:	82 e3       	ldi	r24, 0x32	; 50
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_printLCD>
					
				Delay_ms(155);
     634:	2b e9       	ldi	r18, 0x9B	; 155
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	40 e0       	ldi	r20, 0x00	; 0
     63a:	50 e0       	ldi	r21, 0x00	; 0
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
				Kpd_enablePass = 0;
     648:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <Kpd_enablePass>
				return APP_STATUS_PIN_CORRECT;
     64c:	88 e0       	ldi	r24, 0x08	; 8
     64e:	03 c0       	rjmp	.+6      	; 0x656 <AppUSER_checkPin+0xb2>
				Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)"   Try Again");
				Delay_ms(500);
					
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	01 c0       	rjmp	.+2      	; 0x656 <AppUSER_checkPin+0xb2>
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     654:	80 e0       	ldi	r24, 0x00	; 0
				Kpd_enablePass = 0;
				return APP_STATUS_PIN_CORRECT;
			}
		}
	}
}
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	08 95       	ret

00000666 <AppUSER_startProcess>:
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to start processing the card.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
     666:	0e 94 56 0c 	call	0x18ac	; 0x18ac <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Lcd_setCursor>
     672:	81 30       	cpi	r24, 0x01	; 1
     674:	d1 f5       	brne	.+116    	; 0x6ea <AppUSER_startProcess+0x84>
	return APP_STATUS_ERROR_NOK;
	enuApp_Status_t PAN_status = AppUSER_checkPan();
     676:	0e 94 cd 00 	call	0x19a	; 0x19a <AppUSER_checkPan>
	if(PAN_status == APP_STATUS_PAN_NOT_FOUND)
     67a:	8a 30       	cpi	r24, 0x0A	; 10
     67c:	41 f4       	brne	.+16     	; 0x68e <AppUSER_startProcess+0x28>
	{
		Lcd_printLCD((uint8_t*)"Your Card is not", (uint8_t*)"in the Database");
     67e:	6d ec       	ldi	r22, 0xCD	; 205
     680:	71 e0       	ldi	r23, 0x01	; 1
     682:	8d ed       	ldi	r24, 0xDD	; 221
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_printLCD>
		return APP_STATUS_PAN_NOT_FOUND;
     68a:	8a e0       	ldi	r24, 0x0A	; 10
     68c:	08 95       	ret
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     68e:	8e eb       	ldi	r24, 0xBE	; 190
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	0e 94 42 0c 	call	0x1884	; 0x1884 <Lcd_printString>
     696:	81 30       	cpi	r24, 0x01	; 1
     698:	51 f5       	brne	.+84     	; 0x6ee <AppUSER_startProcess+0x88>
	return APP_STATUS_ERROR_NOK;
	if(AppUSER_checkPin() != APP_STATUS_PIN_CORRECT)
     69a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <AppUSER_checkPin>
     69e:	88 30       	cpi	r24, 0x08	; 8
     6a0:	41 f5       	brne	.+80     	; 0x6f2 <AppUSER_startProcess+0x8c>
	
	
// 	Lcd_printLCD((uint8_t*)"    Welcome", gstr_userCardData.au8_cardHolderName);
// 	Delay_ms(2000);
	
	Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
     6a2:	61 e7       	ldi	r22, 0x71	; 113
     6a4:	74 e0       	ldi	r23, 0x04	; 4
     6a6:	86 e7       	ldi	r24, 0x76	; 118
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_printLCD>
	Delay_ms(2000);
     6ae:	20 ed       	ldi	r18, 0xD0	; 208
     6b0:	37 e0       	ldi	r19, 0x07	; 7
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
	
	Lcd_clear();
     6c2:	0e 94 56 0c 	call	0x18ac	; 0x18ac <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Lcd_setCursor>
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	91 f4       	brne	.+36     	; 0x6f6 <AppUSER_startProcess+0x90>
	return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
     6d2:	85 e1       	ldi	r24, 0x15	; 21
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	0e 94 42 0c 	call	0x1884	; 0x1884 <Lcd_printString>
     6da:	81 30       	cpi	r24, 0x01	; 1
     6dc:	71 f4       	brne	.+28     	; 0x6fa <AppUSER_startProcess+0x94>
	return APP_STATUS_ERROR_NOK;
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
     6de:	0e 94 bc 01 	call	0x378	; 0x378 <AppUSER_startTransaction>
     6e2:	81 30       	cpi	r24, 0x01	; 1
     6e4:	59 f0       	breq	.+22     	; 0x6fc <AppUSER_startProcess+0x96>
	return APP_STATUS_ERROR_NOK;
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	08 95       	ret
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	08 95       	ret
		Lcd_printLCD((uint8_t*)"Your Card is not", (uint8_t*)"in the Database");
		return APP_STATUS_PAN_NOT_FOUND;
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	08 95       	ret
	if(AppUSER_checkPin() != APP_STATUS_PIN_CORRECT)
	return APP_STATUS_ERROR_NOK;
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	08 95       	ret
	Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
	Delay_ms(2000);
	
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	08 95       	ret
	if(Lcd_printString((uint8_t*)"Enter Amount") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     6fa:	80 e0       	ldi	r24, 0x00	; 0
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     6fc:	08 95       	ret

000006fe <AppUSER_getCardData>:
* Parameters (out): pstr_CardData - Structure to save the card's data in.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the Card data Struct
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_getCardData(strCardData_t* pstr_CardData, uint8_t *pu8_dataString)
{
     6fe:	ac 01       	movw	r20, r24
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
     700:	20 e0       	ldi	r18, 0x00	; 0
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	0a c0       	rjmp	.+20     	; 0x71a <AppUSER_getCardData+0x1c>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     706:	fb 01       	movw	r30, r22
     708:	e9 0f       	add	r30, r25
     70a:	f1 1d       	adc	r31, r1
     70c:	80 81       	ld	r24, Z
     70e:	fa 01       	movw	r30, r20
     710:	e2 0f       	add	r30, r18
     712:	f1 1d       	adc	r31, r1
     714:	80 83       	st	Z, r24
		u8_dataIndex++;
     716:	2f 5f       	subi	r18, 0xFF	; 255
{
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     718:	9f 5f       	subi	r25, 0xFF	; 255
     71a:	9a 30       	cpi	r25, 0x0A	; 10
     71c:	a0 f3       	brcs	.-24     	; 0x706 <AppUSER_getCardData+0x8>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
     71e:	fa 01       	movw	r30, r20
     720:	e2 0f       	add	r30, r18
     722:	f1 1d       	adc	r31, r1
     724:	10 82       	st	Z, r1
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
     726:	20 e0       	ldi	r18, 0x00	; 0
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     728:	9b e0       	ldi	r25, 0x0B	; 11
     72a:	0a c0       	rjmp	.+20     	; 0x740 <AppUSER_getCardData+0x42>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     72c:	fb 01       	movw	r30, r22
     72e:	e9 0f       	add	r30, r25
     730:	f1 1d       	adc	r31, r1
     732:	80 81       	ld	r24, Z
     734:	fa 01       	movw	r30, r20
     736:	e2 0f       	add	r30, r18
     738:	f1 1d       	adc	r31, r1
     73a:	82 87       	std	Z+10, r24	; 0x0a
		u8_dataIndex++;
     73c:	2f 5f       	subi	r18, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     73e:	9f 5f       	subi	r25, 0xFF	; 255
     740:	94 31       	cpi	r25, 0x14	; 20
     742:	a0 f3       	brcs	.-24     	; 0x72c <AppUSER_getCardData+0x2e>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
     744:	fa 01       	movw	r30, r20
     746:	e2 0f       	add	r30, r18
     748:	f1 1d       	adc	r31, r1
     74a:	12 86       	std	Z+10, r1	; 0x0a
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
     74c:	90 e0       	ldi	r25, 0x00	; 0
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     74e:	85 e1       	ldi	r24, 0x15	; 21
     750:	0a c0       	rjmp	.+20     	; 0x766 <AppUSER_getCardData+0x68>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     752:	fb 01       	movw	r30, r22
     754:	e8 0f       	add	r30, r24
     756:	f1 1d       	adc	r31, r1
     758:	20 81       	ld	r18, Z
     75a:	fa 01       	movw	r30, r20
     75c:	e9 0f       	add	r30, r25
     75e:	f1 1d       	adc	r31, r1
     760:	24 8b       	std	Z+20, r18	; 0x14
		u8_dataIndex++;
     762:	9f 5f       	subi	r25, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     764:	8f 5f       	subi	r24, 0xFF	; 255
     766:	89 31       	cpi	r24, 0x19	; 25
     768:	a0 f3       	brcs	.-24     	; 0x752 <AppUSER_getCardData+0x54>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_pinNum[u8_dataIndex] = '\0';
     76a:	fa 01       	movw	r30, r20
     76c:	e9 0f       	add	r30, r25
     76e:	f1 1d       	adc	r31, r1
     770:	14 8a       	std	Z+20, r1	; 0x14
	return APP_STATUS_ERROR_OK;
}
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	08 95       	ret

00000776 <AppUSER_insertCard>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to run the Card Inserting Process.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_insertCard(void)
{
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
     780:	da 95       	dec	r29
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
	gu8_USER_Mode_State = USER_BUSY;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <gu8_USER_Mode_State>
	uint8_t u8_buttonVal = PIN_LOW;
     792:	19 82       	std	Y+1, r1	; 0x01
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     794:	fe 01       	movw	r30, r28
     796:	32 96       	adiw	r30, 0x02	; 2
     798:	8f ef       	ldi	r24, 0xFF	; 255
     79a:	df 01       	movw	r26, r30
     79c:	1d 92       	st	X+, r1
     79e:	8a 95       	dec	r24
     7a0:	e9 f7       	brne	.-6      	; 0x79c <AppUSER_insertCard+0x26>
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
     7a2:	6e ee       	ldi	r22, 0xEE	; 238
     7a4:	71 e0       	ldi	r23, 0x01	; 1
     7a6:	8d ef       	ldi	r24, 0xFD	; 253
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_printLCD>
	while(u8_buttonVal == PIN_LOW)
     7ae:	0f c0       	rjmp	.+30     	; 0x7ce <AppUSER_insertCard+0x58>
	{
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <Button_updateState>
     7b6:	81 30       	cpi	r24, 0x01	; 1
     7b8:	09 f0       	breq	.+2      	; 0x7bc <AppUSER_insertCard+0x46>
     7ba:	64 c0       	rjmp	.+200    	; 0x884 <__stack+0x25>
		return APP_STATUS_ERROR_NOK;
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
     7bc:	be 01       	movw	r22, r28
     7be:	6f 5f       	subi	r22, 0xFF	; 255
     7c0:	7f 4f       	sbci	r23, 0xFF	; 255
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <Button_getState>
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	09 f0       	breq	.+2      	; 0x7ce <AppUSER_insertCard+0x58>
     7cc:	5d c0       	rjmp	.+186    	; 0x888 <__stack+0x29>
	gu8_USER_Mode_State = USER_BUSY;
	uint8_t u8_buttonVal = PIN_LOW;
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
	while(u8_buttonVal == PIN_LOW)
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	88 23       	and	r24, r24
     7d2:	71 f3       	breq	.-36     	; 0x7b0 <AppUSER_insertCard+0x3a>
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	}
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	82 e1       	ldi	r24, 0x12	; 18
     7d8:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
	Delay_ms(1);
     7dc:	21 e0       	ldi	r18, 0x01	; 1
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e0       	ldi	r20, 0x00	; 0
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	82 e1       	ldi	r24, 0x12	; 18
     7f4:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
	while (au8_inputString[0] != '#')
     7f8:	09 c0       	rjmp	.+18     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
     7fa:	6c e1       	ldi	r22, 0x1C	; 28
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	ce 01       	movw	r24, r28
     800:	02 96       	adiw	r24, 0x02	; 2
     802:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <Spi_SlaveReceivePacket>
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	09 f0       	breq	.+2      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80a:	40 c0       	rjmp	.+128    	; 0x88c <__stack+0x2d>
		return APP_STATUS_ERROR_NOK;
	}
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
	Delay_ms(1);
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
	while (au8_inputString[0] != '#')
     80c:	8a 81       	ldd	r24, Y+2	; 0x02
     80e:	83 32       	cpi	r24, 0x23	; 35
     810:	a1 f7       	brne	.-24     	; 0x7fa <AppUSER_insertCard+0x84>
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	}
	
	if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
     812:	be 01       	movw	r22, r28
     814:	6e 5f       	subi	r22, 0xFE	; 254
     816:	7f 4f       	sbci	r23, 0xFF	; 255
     818:	89 e7       	ldi	r24, 0x79	; 121
     81a:	94 e0       	ldi	r25, 0x04	; 4
     81c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <AppUSER_getCardData>
     820:	18 2f       	mov	r17, r24
     822:	81 30       	cpi	r24, 0x01	; 1
     824:	a9 f5       	brne	.+106    	; 0x890 <__stack+0x31>
	return APP_STATUS_ERROR_NOK;
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	82 e1       	ldi	r24, 0x12	; 18
     82a:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
	Delay_ms(1);
     82e:	21 e0       	ldi	r18, 0x01	; 1
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	40 e0       	ldi	r20, 0x00	; 0
     834:	50 e0       	ldi	r21, 0x00	; 0
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     842:	61 e0       	ldi	r22, 0x01	; 1
     844:	82 e1       	ldi	r24, 0x12	; 18
     846:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
	enuApp_Status_t processState = AppUSER_startProcess(&gstr_userCardData);
     84a:	89 e7       	ldi	r24, 0x79	; 121
     84c:	94 e0       	ldi	r25, 0x04	; 4
     84e:	0e 94 33 03 	call	0x666	; 0x666 <AppUSER_startProcess>
	if(processState == APP_STATUS_PAN_NOT_FOUND)
     852:	8a 30       	cpi	r24, 0x0A	; 10
     854:	99 f4       	brne	.+38     	; 0x87c <__stack+0x1d>
	{
		Delay_ms(1000);
     856:	28 ee       	ldi	r18, 0xE8	; 232
     858:	33 e0       	ldi	r19, 0x03	; 3
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
		gu8_USER_Mode_State = USER_IDLE;
     86a:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <gu8_USER_Mode_State>
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     86e:	65 e8       	ldi	r22, 0x85	; 133
     870:	71 e0       	ldi	r23, 0x01	; 1
     872:	84 e9       	ldi	r24, 0x94	; 148
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_printLCD>
     87a:	0b c0       	rjmp	.+22     	; 0x892 <__stack+0x33>
	}else if (processState != APP_STATUS_ERROR_OK)
     87c:	81 30       	cpi	r24, 0x01	; 1
     87e:	49 f0       	breq	.+18     	; 0x892 <__stack+0x33>
	return APP_STATUS_ERROR_NOK;
     880:	10 e0       	ldi	r17, 0x00	; 0
     882:	07 c0       	rjmp	.+14     	; 0x892 <__stack+0x33>
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
	while(u8_buttonVal == PIN_LOW)
	{
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     884:	10 e0       	ldi	r17, 0x00	; 0
     886:	05 c0       	rjmp	.+10     	; 0x892 <__stack+0x33>
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     888:	10 e0       	ldi	r17, 0x00	; 0
     88a:	03 c0       	rjmp	.+6      	; 0x892 <__stack+0x33>
	Delay_ms(1);
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
	while (au8_inputString[0] != '#')
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     88c:	10 e0       	ldi	r17, 0x00	; 0
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
	}
	
	if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     890:	10 e0       	ldi	r17, 0x00	; 0
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
	}else if (processState != APP_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     892:	81 2f       	mov	r24, r17
     894:	d3 95       	inc	r29
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	cd bf       	out	0x3d, r28	; 61
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	08 95       	ret

000008a8 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
     8a8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enuCurrentAppStatus>
     8ac:	84 30       	cpi	r24, 0x04	; 4
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <App_init+0xa>
     8b0:	bd c0       	rjmp	.+378    	; 0xa2c <App_init+0x184>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
     8b2:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Eeprom_24_init>
     8b6:	81 30       	cpi	r24, 0x01	; 1
     8b8:	09 f0       	breq	.+2      	; 0x8bc <App_init+0x14>
     8ba:	97 c0       	rjmp	.+302    	; 0x9ea <App_init+0x142>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
     8bc:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <Terminal_init>
     8c0:	81 30       	cpi	r24, 0x01	; 1
     8c2:	09 f0       	breq	.+2      	; 0x8c6 <App_init+0x1e>
     8c4:	94 c0       	rjmp	.+296    	; 0x9ee <App_init+0x146>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
     8c6:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <Spi_init>
     8ca:	81 30       	cpi	r24, 0x01	; 1
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <App_init+0x28>
     8ce:	91 c0       	rjmp	.+290    	; 0x9f2 <App_init+0x14a>
		return APP_STATUS_ERROR_NOK;
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
     8d0:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <Keypad_init>
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	09 f0       	breq	.+2      	; 0x8da <App_init+0x32>
     8d8:	8e c0       	rjmp	.+284    	; 0x9f6 <App_init+0x14e>
		return APP_STATUS_ERROR_NOK;
	if(LCD_STATUS_ERROR_OK != Lcd_init())
     8da:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <Lcd_init>
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <App_init+0x3c>
     8e2:	8b c0       	rjmp	.+278    	; 0x9fa <App_init+0x152>
		return APP_STATUS_ERROR_NOK;
	if(LM35_STATUS_ERROR_OK != LM35_init())
     8e4:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LM35_init>
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	09 f0       	breq	.+2      	; 0x8ee <App_init+0x46>
     8ec:	88 c0       	rjmp	.+272    	; 0x9fe <App_init+0x156>
		return APP_STATUS_ERROR_NOK;
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
     8ee:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <Motor_init>
     8f2:	81 30       	cpi	r24, 0x01	; 1
     8f4:	09 f0       	breq	.+2      	; 0x8f8 <App_init+0x50>
     8f6:	85 c0       	rjmp	.+266    	; 0xa02 <App_init+0x15a>
		return APP_STATUS_ERROR_NOK;
	if(BTTN_STATUS_ERROR_OK != Button_init())
     8f8:	0e 94 b3 07 	call	0xf66	; 0xf66 <Button_init>
     8fc:	81 30       	cpi	r24, 0x01	; 1
     8fe:	09 f0       	breq	.+2      	; 0x902 <App_init+0x5a>
     900:	82 c0       	rjmp	.+260    	; 0xa06 <App_init+0x15e>
	/* Only for Testing */
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
     902:	8a e2       	ldi	r24, 0x2A	; 42
     904:	94 e0       	ldi	r25, 0x04	; 4
     906:	0e 94 42 0c 	call	0x1884	; 0x1884 <Lcd_printString>
     90a:	81 30       	cpi	r24, 0x01	; 1
     90c:	09 f0       	breq	.+2      	; 0x910 <App_init+0x68>
     90e:	7d c0       	rjmp	.+250    	; 0xa0a <App_init+0x162>
		return APP_STATUS_ERROR_NOK;
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
     910:	8c e1       	ldi	r24, 0x1C	; 28
     912:	94 e0       	ldi	r25, 0x04	; 4
     914:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     918:	81 30       	cpi	r24, 0x01	; 1
     91a:	09 f0       	breq	.+2      	; 0x91e <App_init+0x76>
     91c:	78 c0       	rjmp	.+240    	; 0xa0e <App_init+0x166>
		return APP_STATUS_ERROR_NOK;
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
     91e:	66 e6       	ldi	r22, 0x66	; 102
     920:	74 e0       	ldi	r23, 0x04	; 4
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 a5 08 	call	0x114a	; 0x114a <Eeprom_24_readByte>
     92a:	81 30       	cpi	r24, 0x01	; 1
     92c:	09 f0       	breq	.+2      	; 0x930 <App_init+0x88>
     92e:	71 c0       	rjmp	.+226    	; 0xa12 <App_init+0x16a>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     930:	2a e0       	ldi	r18, 0x0A	; 10
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
	
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
     944:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <gu8_initData>
     948:	8a 3a       	cpi	r24, 0xAA	; 170
     94a:	f9 f0       	breq	.+62     	; 0x98a <App_init+0xe2>
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
     94c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
     950:	84 e3       	ldi	r24, 0x34	; 52
     952:	94 e0       	ldi	r25, 0x04	; 4
     954:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <stringLength>
	
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
     958:	48 2f       	mov	r20, r24
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	64 e3       	ldi	r22, 0x34	; 52
     95e:	74 e0       	ldi	r23, 0x04	; 4
     960:	8b e0       	ldi	r24, 0x0B	; 11
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 58 09 	call	0x12b0	; 0x12b0 <Eeprom_24_writePacket>
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	09 f0       	breq	.+2      	; 0x96e <App_init+0xc6>
     96c:	54 c0       	rjmp	.+168    	; 0xa16 <App_init+0x16e>
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		/* Lock the ATM For the User */
		Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
     96e:	6e e0       	ldi	r22, 0x0E	; 14
     970:	72 e0       	ldi	r23, 0x02	; 2
     972:	8f e1       	ldi	r24, 0x1F	; 31
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_printLCD>
		
		if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     97a:	80 e3       	ldi	r24, 0x30	; 48
     97c:	92 e0       	ldi	r25, 0x02	; 2
     97e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     982:	81 30       	cpi	r24, 0x01	; 1
     984:	09 f0       	breq	.+2      	; 0x988 <App_init+0xe0>
     986:	49 c0       	rjmp	.+146    	; 0xa1a <App_init+0x172>
     988:	2b c0       	rjmp	.+86     	; 0x9e0 <App_init+0x138>
			return APP_STATUS_ERROR_NOK;
	}else
	{ /* Case it was previously registered == Contains data in the DB */
		gu8_ATMMode = ATM_MODE_USER;
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
     990:	48 e0       	ldi	r20, 0x08	; 8
     992:	50 e0       	ldi	r21, 0x00	; 0
     994:	68 e5       	ldi	r22, 0x58	; 88
     996:	74 e0       	ldi	r23, 0x04	; 4
     998:	83 e0       	ldi	r24, 0x03	; 3
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 31 0a 	call	0x1462	; 0x1462 <Eeprom_24_readPacket>
     9a0:	81 30       	cpi	r24, 0x01	; 1
     9a2:	e9 f5       	brne	.+122    	; 0xa1e <App_init+0x176>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     9a4:	65 e6       	ldi	r22, 0x65	; 101
     9a6:	74 e0       	ldi	r23, 0x04	; 4
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 a5 08 	call	0x114a	; 0x114a <Eeprom_24_readByte>
     9b0:	81 30       	cpi	r24, 0x01	; 1
     9b2:	b9 f5       	brne	.+110    	; 0xa22 <App_init+0x17a>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
     9b4:	45 e0       	ldi	r20, 0x05	; 5
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e6       	ldi	r22, 0x60	; 96
     9ba:	74 e0       	ldi	r23, 0x04	; 4
     9bc:	8b e0       	ldi	r24, 0x0B	; 11
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 31 0a 	call	0x1462	; 0x1462 <Eeprom_24_readPacket>
     9c4:	81 30       	cpi	r24, 0x01	; 1
     9c6:	79 f5       	brne	.+94     	; 0xa26 <App_init+0x17e>
			return APP_STATUS_ERROR_NOK;
		
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     9c8:	65 e8       	ldi	r22, 0x85	; 133
     9ca:	71 e0       	ldi	r23, 0x01	; 1
     9cc:	84 e9       	ldi	r24, 0x94	; 148
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_printLCD>
			
		if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     9d4:	83 e4       	ldi	r24, 0x43	; 67
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     9dc:	81 30       	cpi	r24, 0x01	; 1
     9de:	29 f5       	brne	.+74     	; 0xa2a <App_init+0x182>
			return APP_STATUS_ERROR_NOK;
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     9e0:	84 e0       	ldi	r24, 0x04	; 4
     9e2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enuCurrentAppStatus>
	return APP_STATUS_ERROR_OK;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	08 95       	ret
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	08 95       	ret
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	08 95       	ret
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
		return APP_STATUS_ERROR_NOK;
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	08 95       	ret
	if(LCD_STATUS_ERROR_OK != Lcd_init())
		return APP_STATUS_ERROR_NOK;
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	08 95       	ret
	if(LM35_STATUS_ERROR_OK != LM35_init())
		return APP_STATUS_ERROR_NOK;
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	08 95       	ret
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
		return APP_STATUS_ERROR_NOK;
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	08 95       	ret
	if(BTTN_STATUS_ERROR_OK != Button_init())
		return APP_STATUS_ERROR_NOK;
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	08 95       	ret
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	08 95       	ret
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	08 95       	ret
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	08 95       	ret
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	08 95       	ret
		/* Lock the ATM For the User */
		Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
		
		if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	08 95       	ret
	}else
	{ /* Case it was previously registered == Contains data in the DB */
		gu8_ATMMode = ATM_MODE_USER;
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	08 95       	ret
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	08 95       	ret
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	08 95       	ret
		
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
			
		if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     a2a:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     a2c:	08 95       	ret

00000a2e <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	cf 5f       	subi	r28, 0xFF	; 255
     a3c:	d1 09       	sbc	r29, r1
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	f8 94       	cli
     a42:	de bf       	out	0x3e, r29	; 62
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	cd bf       	out	0x3d, r28	; 61
     a48:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     a4a:	ce 01       	movw	r24, r28
     a4c:	01 96       	adiw	r24, 0x01	; 1
     a4e:	2f ef       	ldi	r18, 0xFF	; 255
     a50:	fc 01       	movw	r30, r24
     a52:	11 92       	st	Z+, r1
     a54:	2a 95       	dec	r18
     a56:	e9 f7       	brne	.-6      	; 0xa52 <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
     a58:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
     a5c:	85 30       	cpi	r24, 0x05	; 5
     a5e:	39 f4       	brne	.+14     	; 0xa6e <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
     a60:	b8 01       	movw	r22, r16
     a62:	ce 01       	movw	r24, r28
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <stringCopy>
		return APP_STATUS_ERROR_OK;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	05 c0       	rjmp	.+10     	; 0xa78 <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     a6e:	81 30       	cpi	r24, 0x01	; 1
     a70:	11 f0       	breq	.+4      	; 0xa76 <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
     a76:	86 e0       	ldi	r24, 0x06	; 6
}
     a78:	c1 50       	subi	r28, 0x01	; 1
     a7a:	df 4f       	sbci	r29, 0xFF	; 255
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	08 95       	ret

00000a90 <AppADMIN_getInput>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the ADMIN Input Choice.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getInput(uint8_t* pu8_data)
{
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nYour Input: ") != TERMINAL_STATUS_ERROR_OK)
     a96:	8f e4       	ldi	r24, 0x4F	; 79
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	c1 f4       	brne	.+48     	; 0xad2 <AppADMIN_getInput+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     aa2:	ce 01       	movw	r24, r28
     aa4:	0e 94 17 05 	call	0xa2e	; 0xa2e <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     aa8:	81 30       	cpi	r24, 0x01	; 1
     aaa:	29 f0       	breq	.+10     	; 0xab6 <AppADMIN_getInput+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     aac:	11 f0       	breq	.+4      	; 0xab2 <AppADMIN_getInput+0x22>
     aae:	86 30       	cpi	r24, 0x06	; 6
     ab0:	91 f4       	brne	.+36     	; 0xad6 <AppADMIN_getInput+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     ab2:	86 30       	cpi	r24, 0x06	; 6
     ab4:	b1 f3       	breq	.-20     	; 0xaa2 <AppADMIN_getInput+0x12>
		
		if (pu8_data[1] == '\0')
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
     ab8:	88 23       	and	r24, r24
     aba:	79 f0       	breq	.+30     	; 0xada <AppADMIN_getInput+0x4a>
		break;
		EmptyString(pu8_data);
     abc:	ce 01       	movw	r24, r28
     abe:	0e 94 32 17 	call	0x2e64	; 0x2e64 <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
     ac2:	8d e5       	ldi	r24, 0x5D	; 93
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     aca:	81 30       	cpi	r24, 0x01	; 1
     acc:	21 f3       	breq	.-56     	; 0xa96 <AppADMIN_getInput+0x6>
		return APP_STATUS_ERROR_NOK;
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <AppADMIN_getInput+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nYour Input: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	03 c0       	rjmp	.+6      	; 0xadc <AppADMIN_getInput+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	01 c0       	rjmp	.+2      	; 0xadc <AppADMIN_getInput+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     ada:	81 e0       	ldi	r24, 0x01	; 1
}
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	08 95       	ret

00000ae2 <AppADMIN_getnewMaxAmount>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getnewMaxAmount(uint8_t* pu8_data)
{
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nMax Amount: ") != TERMINAL_STATUS_ERROR_OK)
     ae8:	87 e8       	ldi	r24, 0x87	; 135
     aea:	92 e0       	ldi	r25, 0x02	; 2
     aec:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     af0:	81 30       	cpi	r24, 0x01	; 1
     af2:	d9 f4       	brne	.+54     	; 0xb2a <AppADMIN_getnewMaxAmount+0x48>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     af4:	ce 01       	movw	r24, r28
     af6:	0e 94 17 05 	call	0xa2e	; 0xa2e <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     afa:	81 30       	cpi	r24, 0x01	; 1
     afc:	29 f0       	breq	.+10     	; 0xb08 <AppADMIN_getnewMaxAmount+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     afe:	11 f0       	breq	.+4      	; 0xb04 <AppADMIN_getnewMaxAmount+0x22>
     b00:	86 30       	cpi	r24, 0x06	; 6
     b02:	a9 f4       	brne	.+42     	; 0xb2e <AppADMIN_getnewMaxAmount+0x4c>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     b04:	86 30       	cpi	r24, 0x06	; 6
     b06:	b1 f3       	breq	.-20     	; 0xaf4 <AppADMIN_getnewMaxAmount+0x12>
		
		if ((pu8_data[7] == '\0') && (pu8_data[4] == '.'))
     b08:	8f 81       	ldd	r24, Y+7	; 0x07
     b0a:	81 11       	cpse	r24, r1
     b0c:	03 c0       	rjmp	.+6      	; 0xb14 <AppADMIN_getnewMaxAmount+0x32>
     b0e:	8c 81       	ldd	r24, Y+4	; 0x04
     b10:	8e 32       	cpi	r24, 0x2E	; 46
     b12:	79 f0       	breq	.+30     	; 0xb32 <AppADMIN_getnewMaxAmount+0x50>
		break;
		EmptyString(pu8_data);
     b14:	ce 01       	movw	r24, r28
     b16:	0e 94 32 17 	call	0x2e64	; 0x2e64 <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
     b1a:	85 e9       	ldi	r24, 0x95	; 149
     b1c:	92 e0       	ldi	r25, 0x02	; 2
     b1e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     b22:	81 30       	cpi	r24, 0x01	; 1
     b24:	09 f3       	breq	.-62     	; 0xae8 <AppADMIN_getnewMaxAmount+0x6>
		return APP_STATUS_ERROR_NOK;
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	05 c0       	rjmp	.+10     	; 0xb34 <AppADMIN_getnewMaxAmount+0x52>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nMax Amount: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	03 c0       	rjmp	.+6      	; 0xb34 <AppADMIN_getnewMaxAmount+0x52>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	01 c0       	rjmp	.+2      	; 0xb34 <AppADMIN_getnewMaxAmount+0x52>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Only 7 characters eg. 1234.56\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     b32:	81 e0       	ldi	r24, 0x01	; 1
}
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	08 95       	ret

00000b3a <AppADMIN_getCustomerPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerPAN(uint8_t* pu8_data)
{
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nPAN: ") != TERMINAL_STATUS_ERROR_OK)
     b40:	86 ec       	ldi	r24, 0xC6	; 198
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     b48:	81 30       	cpi	r24, 0x01	; 1
     b4a:	c1 f4       	brne	.+48     	; 0xb7c <AppADMIN_getCustomerPAN+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     b4c:	ce 01       	movw	r24, r28
     b4e:	0e 94 17 05 	call	0xa2e	; 0xa2e <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	29 f0       	breq	.+10     	; 0xb60 <AppADMIN_getCustomerPAN+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     b56:	11 f0       	breq	.+4      	; 0xb5c <AppADMIN_getCustomerPAN+0x22>
     b58:	86 30       	cpi	r24, 0x06	; 6
     b5a:	91 f4       	brne	.+36     	; 0xb80 <AppADMIN_getCustomerPAN+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     b5c:	86 30       	cpi	r24, 0x06	; 6
     b5e:	b1 f3       	breq	.-20     	; 0xb4c <AppADMIN_getCustomerPAN+0x12>
		
		if (pu8_data[9] == '\0')
     b60:	89 85       	ldd	r24, Y+9	; 0x09
     b62:	88 23       	and	r24, r24
     b64:	79 f0       	breq	.+30     	; 0xb84 <AppADMIN_getCustomerPAN+0x4a>
		break;
		EmptyString(pu8_data);
     b66:	ce 01       	movw	r24, r28
     b68:	0e 94 32 17 	call	0x2e64	; 0x2e64 <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
     b6c:	8d ec       	ldi	r24, 0xCD	; 205
     b6e:	92 e0       	ldi	r25, 0x02	; 2
     b70:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	21 f3       	breq	.-56     	; 0xb40 <AppADMIN_getCustomerPAN+0x6>
		return APP_STATUS_ERROR_NOK;
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	05 c0       	rjmp	.+10     	; 0xb86 <AppADMIN_getCustomerPAN+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nPAN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	03 c0       	rjmp	.+6      	; 0xb86 <AppADMIN_getCustomerPAN+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	01 c0       	rjmp	.+2      	; 0xb86 <AppADMIN_getCustomerPAN+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid PAN, Only 9 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     b84:	81 e0       	ldi	r24, 0x01	; 1
}
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <AppADMIN_getCustomerBalance>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Balance by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the balance of the customer.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerBalance(uint8_t* pu8_data)
{
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nBalance: ") != TERMINAL_STATUS_ERROR_OK)
     b92:	8e ee       	ldi	r24, 0xEE	; 238
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	c1 f4       	brne	.+48     	; 0xbce <AppADMIN_getCustomerBalance+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     b9e:	ce 01       	movw	r24, r28
     ba0:	0e 94 17 05 	call	0xa2e	; 0xa2e <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	29 f0       	breq	.+10     	; 0xbb2 <AppADMIN_getCustomerBalance+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     ba8:	11 f0       	breq	.+4      	; 0xbae <AppADMIN_getCustomerBalance+0x22>
     baa:	86 30       	cpi	r24, 0x06	; 6
     bac:	91 f4       	brne	.+36     	; 0xbd2 <AppADMIN_getCustomerBalance+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     bae:	86 30       	cpi	r24, 0x06	; 6
     bb0:	b1 f3       	breq	.-20     	; 0xb9e <AppADMIN_getCustomerBalance+0x12>
		
		if (pu8_data[7] == '\0')
     bb2:	8f 81       	ldd	r24, Y+7	; 0x07
     bb4:	88 23       	and	r24, r24
     bb6:	79 f0       	breq	.+30     	; 0xbd6 <AppADMIN_getCustomerBalance+0x4a>
		break;
		EmptyString(pu8_data);
     bb8:	ce 01       	movw	r24, r28
     bba:	0e 94 32 17 	call	0x2e64	; 0x2e64 <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Only 7 characters\r") != TERMINAL_STATUS_ERROR_OK)
     bbe:	89 ef       	ldi	r24, 0xF9	; 249
     bc0:	92 e0       	ldi	r25, 0x02	; 2
     bc2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	21 f3       	breq	.-56     	; 0xb92 <AppADMIN_getCustomerBalance+0x6>
		return APP_STATUS_ERROR_NOK;
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <AppADMIN_getCustomerBalance+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nBalance: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	03 c0       	rjmp	.+6      	; 0xbd8 <AppADMIN_getCustomerBalance+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <AppADMIN_getCustomerBalance+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Only 7 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
}
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	08 95       	ret

00000bde <AppADMIN_processNewCustomer>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to process adding a new customer in the data base.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_processNewCustomer(void)
{
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	62 97       	sbiw	r28, 0x12	; 18
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_tempPAN[10]={0};
     bf4:	ce 01       	movw	r24, r28
     bf6:	01 96       	adiw	r24, 0x01	; 1
     bf8:	2a e0       	ldi	r18, 0x0A	; 10
     bfa:	dc 01       	movw	r26, r24
     bfc:	1d 92       	st	X+, r1
     bfe:	2a 95       	dec	r18
     c00:	e9 f7       	brne	.-6      	; 0xbfc <AppADMIN_processNewCustomer+0x1e>
	uint8_t au8_tempBalance[8]={0};
     c02:	fe 01       	movw	r30, r28
     c04:	3b 96       	adiw	r30, 0x0b	; 11
     c06:	28 e0       	ldi	r18, 0x08	; 8
     c08:	df 01       	movw	r26, r30
     c0a:	1d 92       	st	X+, r1
     c0c:	2a 95       	dec	r18
     c0e:	e9 f7       	brne	.-6      	; 0xc0a <AppADMIN_processNewCustomer+0x2c>
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     c10:	0e 94 9d 05 	call	0xb3a	; 0xb3a <AppADMIN_getCustomerPAN>
     c14:	81 30       	cpi	r24, 0x01	; 1
     c16:	39 f5       	brne	.+78     	; 0xc66 <AppADMIN_processNewCustomer+0x88>
	return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
     c18:	67 e6       	ldi	r22, 0x67	; 103
     c1a:	74 e0       	ldi	r23, 0x04	; 4
     c1c:	ce 01       	movw	r24, r28
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <stringCopy>
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
     c24:	ce 01       	movw	r24, r28
     c26:	0b 96       	adiw	r24, 0x0b	; 11
     c28:	0e 94 c6 05 	call	0xb8c	; 0xb8c <AppADMIN_getCustomerBalance>
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	e9 f4       	brne	.+58     	; 0xc6a <AppADMIN_processNewCustomer+0x8c>
	return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
     c30:	61 e7       	ldi	r22, 0x71	; 113
     c32:	74 e0       	ldi	r23, 0x04	; 4
     c34:	ce 01       	movw	r24, r28
     c36:	0b 96       	adiw	r24, 0x0b	; 11
     c38:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <stringCopy>
	
	if(AppADMIN_saveNewCustomerData() != APP_STATUS_ERROR_OK)
     c3c:	0e 94 50 00 	call	0xa0	; 0xa0 <AppADMIN_saveNewCustomerData>
     c40:	18 2f       	mov	r17, r24
     c42:	81 30       	cpi	r24, 0x01	; 1
     c44:	a1 f4       	brne	.+40     	; 0xc6e <AppADMIN_processNewCustomer+0x90>
	return APP_STATUS_ERROR_NOK;
	if(gu8_registeredAccNum == 1)
     c46:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <gu8_registeredAccNum>
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	89 f4       	brne	.+34     	; 0xc70 <AppADMIN_processNewCustomer+0x92>
	{
		gu8_initData = ATM_DB_FLAG_SET_VAL;
     c4e:	8a ea       	ldi	r24, 0xAA	; 170
     c50:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <gu8_initData>
		if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
     c54:	6a ea       	ldi	r22, 0xAA	; 170
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <Eeprom_24_writeByte>
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	39 f0       	breq	.+14     	; 0xc70 <AppADMIN_processNewCustomer+0x92>
		return APP_STATUS_ERROR_NOK;
     c62:	10 e0       	ldi	r17, 0x00	; 0
     c64:	05 c0       	rjmp	.+10     	; 0xc70 <AppADMIN_processNewCustomer+0x92>
{
	uint8_t au8_tempPAN[10]={0};
	uint8_t au8_tempBalance[8]={0};
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     c66:	10 e0       	ldi	r17, 0x00	; 0
     c68:	03 c0       	rjmp	.+6      	; 0xc70 <AppADMIN_processNewCustomer+0x92>
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     c6a:	10 e0       	ldi	r17, 0x00	; 0
     c6c:	01 c0       	rjmp	.+2      	; 0xc70 <AppADMIN_processNewCustomer+0x92>
	stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
	
	if(AppADMIN_saveNewCustomerData() != APP_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     c6e:	10 e0       	ldi	r17, 0x00	; 0
		gu8_initData = ATM_DB_FLAG_SET_VAL;
		if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	}
	return APP_STATUS_ERROR_OK;
}
     c70:	81 2f       	mov	r24, r17
     c72:	62 96       	adiw	r28, 0x12	; 18
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	1f 91       	pop	r17
     c84:	08 95       	ret

00000c86 <AppADMIN_getAtmPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input ATM PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the atm pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getAtmPIN(uint8_t* pu8_data)
{
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	
	Terminal_enablePasswordMode();
     c8c:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <Terminal_enablePasswordMode>
	do
	{
		if(Terminal_Out((uint8_t*)"\nATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
     c90:	8e e1       	ldi	r24, 0x1E	; 30
     c92:	93 e0       	ldi	r25, 0x03	; 3
     c94:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     c98:	81 30       	cpi	r24, 0x01	; 1
     c9a:	69 f5       	brne	.+90     	; 0xcf6 <AppADMIN_getAtmPIN+0x70>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     c9c:	ce 01       	movw	r24, r28
     c9e:	0e 94 17 05 	call	0xa2e	; 0xa2e <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	29 f0       	breq	.+10     	; 0xcb0 <AppADMIN_getAtmPIN+0x2a>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     ca6:	11 f0       	breq	.+4      	; 0xcac <AppADMIN_getAtmPIN+0x26>
     ca8:	86 30       	cpi	r24, 0x06	; 6
     caa:	39 f5       	brne	.+78     	; 0xcfa <AppADMIN_getAtmPIN+0x74>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     cac:	86 30       	cpi	r24, 0x06	; 6
     cae:	b1 f3       	breq	.-20     	; 0xc9c <AppADMIN_getAtmPIN+0x16>
		
		if(stringCompare((uint8_t*)ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
     cb0:	be 01       	movw	r22, r28
     cb2:	84 e3       	ldi	r24, 0x34	; 52
     cb4:	94 e0       	ldi	r25, 0x04	; 4
     cb6:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <stringCompare>
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	39 f0       	breq	.+14     	; 0xccc <AppADMIN_getAtmPIN+0x46>
		{
			if(Terminal_Out((uint8_t*)"\nIncorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
     cbe:	89 e2       	ldi	r24, 0x29	; 41
     cc0:	93 e0       	ldi	r25, 0x03	; 3
     cc2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	41 f0       	breq	.+16     	; 0xcda <AppADMIN_getAtmPIN+0x54>
     cca:	19 c0       	rjmp	.+50     	; 0xcfe <AppADMIN_getAtmPIN+0x78>
			return APP_STATUS_ERROR_NOK;
		}else
		{
			if(Terminal_Out((uint8_t*)"\nLoading...\r") != TERMINAL_STATUS_ERROR_OK)
     ccc:	89 e3       	ldi	r24, 0x39	; 57
     cce:	93 e0       	ldi	r25, 0x03	; 3
     cd0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	a9 f4       	brne	.+42     	; 0xd02 <AppADMIN_getAtmPIN+0x7c>
     cd8:	0a c0       	rjmp	.+20     	; 0xcee <AppADMIN_getAtmPIN+0x68>
			return APP_STATUS_ERROR_NOK;
			break;
		}
		EmptyString(pu8_data);
     cda:	ce 01       	movw	r24, r28
     cdc:	0e 94 32 17 	call	0x2e64	; 0x2e64 <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
     ce0:	86 e4       	ldi	r24, 0x46	; 70
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	91 f2       	breq	.-92     	; 0xc90 <AppADMIN_getAtmPIN+0xa>
     cec:	0c c0       	rjmp	.+24     	; 0xd06 <AppADMIN_getAtmPIN+0x80>
		return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
     cee:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <Terminal_disablePasswordMode>
	return APP_STATUS_ERROR_OK;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	09 c0       	rjmp	.+18     	; 0xd08 <AppADMIN_getAtmPIN+0x82>
	
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"\nATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	07 c0       	rjmp	.+14     	; 0xd08 <AppADMIN_getAtmPIN+0x82>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <AppADMIN_getAtmPIN+0x82>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringCompare((uint8_t*)ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
		{
			if(Terminal_Out((uint8_t*)"\nIncorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	03 c0       	rjmp	.+6      	; 0xd08 <AppADMIN_getAtmPIN+0x82>
		}else
		{
			if(Terminal_Out((uint8_t*)"\nLoading...\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	01 c0       	rjmp	.+2      	; 0xd08 <AppADMIN_getAtmPIN+0x82>
			break;
		}
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     d06:	80 e0       	ldi	r24, 0x00	; 0
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_ERROR_OK;
}
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	08 95       	ret

00000d0e <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	69 97       	sbiw	r28, 0x19	; 25
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
     d22:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enuCurrentAppStatus>
     d26:	84 30       	cpi	r24, 0x04	; 4
     d28:	09 f0       	breq	.+2      	; 0xd2c <App_update+0x1e>
     d2a:	06 c1       	rjmp	.+524    	; 0xf38 <App_update+0x22a>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
     d2c:	fe 01       	movw	r30, r28
     d2e:	31 96       	adiw	r30, 0x01	; 1
     d30:	8a e0       	ldi	r24, 0x0A	; 10
     d32:	df 01       	movw	r26, r30
     d34:	1d 92       	st	X+, r1
     d36:	8a 95       	dec	r24
     d38:	e9 f7       	brne	.-6      	; 0xd34 <App_update+0x26>
	static uint8_t u8_passFlag = 0;
	if(gu8_ATMMode == ATM_MODE_ADMIN)
     d3a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     d3e:	81 11       	cpse	r24, r1
     d40:	7a c0       	rjmp	.+244    	; 0xe36 <App_update+0x128>
	{ /**************** PROGRAMMING MODE ****************/
			uint8_t au8_Input[2]={0};
     d42:	19 8e       	std	Y+25, r1	; 0x19
     d44:	18 8e       	std	Y+24, r1	; 0x18
			uint8_t au8_tempPinNum[5]={0};
     d46:	72 96       	adiw	r30, 0x12	; 18
     d48:	85 e0       	ldi	r24, 0x05	; 5
     d4a:	df 01       	movw	r26, r30
     d4c:	1d 92       	st	X+, r1
     d4e:	8a 95       	dec	r24
     d50:	e9 f7       	brne	.-6      	; 0xd4c <App_update+0x3e>
			uint8_t au8_tempMaxAmount[8]={0};
     d52:	38 97       	sbiw	r30, 0x08	; 8
     d54:	88 e0       	ldi	r24, 0x08	; 8
     d56:	df 01       	movw	r26, r30
     d58:	1d 92       	st	X+, r1
     d5a:	8a 95       	dec	r24
     d5c:	e9 f7       	brne	.-6      	; 0xd58 <App_update+0x4a>
			
			if(u8_passFlag == 0)
     d5e:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <__data_end>
     d62:	81 11       	cpse	r24, r1
     d64:	09 c0       	rjmp	.+18     	; 0xd78 <App_update+0x6a>
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
     d66:	ce 01       	movw	r24, r28
     d68:	43 96       	adiw	r24, 0x13	; 19
     d6a:	0e 94 43 06 	call	0xc86	; 0xc86 <AppADMIN_getAtmPIN>
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	09 f0       	breq	.+2      	; 0xd74 <App_update+0x66>
     d72:	57 c0       	rjmp	.+174    	; 0xe22 <App_update+0x114>
					return APP_STATUS_ERROR_NOK;
				u8_passFlag = 1;
     d74:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <__data_end>
			}
			
			if(Terminal_Out((uint8_t*)"\n1.Add New Customer\n\r2.Update Max Amount\n\r3.Exit\r") != TERMINAL_STATUS_ERROR_OK)
     d78:	87 e6       	ldi	r24, 0x67	; 103
     d7a:	93 e0       	ldi	r25, 0x03	; 3
     d7c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     d80:	81 30       	cpi	r24, 0x01	; 1
     d82:	09 f0       	breq	.+2      	; 0xd86 <App_update+0x78>
     d84:	50 c0       	rjmp	.+160    	; 0xe26 <App_update+0x118>
				return APP_STATUS_ERROR_NOK;
				
			AppADMIN_getInput(au8_Input);
     d86:	ce 01       	movw	r24, r28
     d88:	48 96       	adiw	r24, 0x18	; 24
     d8a:	0e 94 48 05 	call	0xa90	; 0xa90 <AppADMIN_getInput>
			if(au8_Input[0] == '1')//--------- New Customer OPTION -----------//
     d8e:	88 8d       	ldd	r24, Y+24	; 0x18
     d90:	81 33       	cpi	r24, 0x31	; 49
     d92:	39 f4       	brne	.+14     	; 0xda2 <App_update+0x94>
			{
				AppADMIN_processNewCustomer();
     d94:	0e 94 ef 05 	call	0xbde	; 0xbde <AppADMIN_processNewCustomer>
				EmptyString(au8_Input);
     d98:	ce 01       	movw	r24, r28
     d9a:	48 96       	adiw	r24, 0x18	; 24
     d9c:	0e 94 32 17 	call	0x2e64	; 0x2e64 <EmptyString>
     da0:	bf c0       	rjmp	.+382    	; 0xf20 <App_update+0x212>

			}else if(au8_Input[0] == '2')//--------- Max Amount OPTION -----------//
     da2:	82 33       	cpi	r24, 0x32	; 50
     da4:	d1 f4       	brne	.+52     	; 0xdda <App_update+0xcc>
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
     da6:	ce 01       	movw	r24, r28
     da8:	0b 96       	adiw	r24, 0x0b	; 11
     daa:	0e 94 71 05 	call	0xae2	; 0xae2 <AppADMIN_getnewMaxAmount>
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
     dae:	ce 01       	movw	r24, r28
     db0:	0b 96       	adiw	r24, 0x0b	; 11
     db2:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <stringLength>
     db6:	48 2f       	mov	r20, r24
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	be 01       	movw	r22, r28
     dbc:	65 5f       	subi	r22, 0xF5	; 245
     dbe:	7f 4f       	sbci	r23, 0xFF	; 255
     dc0:	83 e0       	ldi	r24, 0x03	; 3
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 58 09 	call	0x12b0	; 0x12b0 <Eeprom_24_writePacket>
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	79 f5       	brne	.+94     	; 0xe2a <App_update+0x11c>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempMaxAmount, gau8_maxAmount);
     dcc:	68 e5       	ldi	r22, 0x58	; 88
     dce:	74 e0       	ldi	r23, 0x04	; 4
     dd0:	ce 01       	movw	r24, r28
     dd2:	0b 96       	adiw	r24, 0x0b	; 11
     dd4:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <stringCopy>
     dd8:	a3 c0       	rjmp	.+326    	; 0xf20 <App_update+0x212>
					
			}else if(au8_Input[0] == '3')//--------- EXIT OPTION -----------//
     dda:	83 33       	cpi	r24, 0x33	; 51
     ddc:	09 f0       	breq	.+2      	; 0xde0 <App_update+0xd2>
     dde:	a0 c0       	rjmp	.+320    	; 0xf20 <App_update+0x212>
			{
				if(gu8_initData == ATM_DB_FLAG_SET_VAL)
     de0:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <gu8_initData>
     de4:	8a 3a       	cpi	r24, 0xAA	; 170
     de6:	a9 f4       	brne	.+42     	; 0xe12 <App_update+0x104>
				{
					u8_passFlag = 0;
     de8:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <__data_end>
					gu8_ATMMode = ATM_MODE_USER;
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					Lcd_clear();
     df2:	0e 94 56 0c 	call	0x18ac	; 0x18ac <Lcd_clear>
					if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     df6:	83 e4       	ldi	r24, 0x43	; 67
     df8:	92 e0       	ldi	r25, 0x02	; 2
     dfa:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	b1 f4       	brne	.+44     	; 0xe2e <App_update+0x120>
						return APP_STATUS_ERROR_NOK;
					
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     e02:	65 e8       	ldi	r22, 0x85	; 133
     e04:	71 e0       	ldi	r23, 0x01	; 1
     e06:	84 e9       	ldi	r24, 0x94	; 148
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_printLCD>
					
					return APP_STATUS_ERROR_OK;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	94 c0       	rjmp	.+296    	; 0xf3a <App_update+0x22c>
				}else
				{
					if(Terminal_Out((uint8_t*)"\nData Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
     e12:	89 e9       	ldi	r24, 0x99	; 153
     e14:	93 e0       	ldi	r25, 0x03	; 3
     e16:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	51 f0       	breq	.+20     	; 0xe32 <App_update+0x124>
						return APP_STATUS_ERROR_NOK;
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	8c c0       	rjmp	.+280    	; 0xf3a <App_update+0x22c>
			
			if(u8_passFlag == 0)
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				if(AppADMIN_getAtmPIN(au8_tempPinNum) != APP_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	8a c0       	rjmp	.+276    	; 0xf3a <App_update+0x22c>
				u8_passFlag = 1;
			}
			
			if(Terminal_Out((uint8_t*)"\n1.Add New Customer\n\r2.Update Max Amount\n\r3.Exit\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	88 c0       	rjmp	.+272    	; 0xf3a <App_update+0x22c>

			}else if(au8_Input[0] == '2')//--------- Max Amount OPTION -----------//
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	86 c0       	rjmp	.+268    	; 0xf3a <App_update+0x22c>
				{
					u8_passFlag = 0;
					gu8_ATMMode = ATM_MODE_USER;
					Lcd_clear();
					if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	84 c0       	rjmp	.+264    	; 0xf3a <App_update+0x22c>
					return APP_STATUS_ERROR_OK;
				}else
				{
					if(Terminal_Out((uint8_t*)"\nData Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					return APP_STATUS_ERROR_OK;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	82 c0       	rjmp	.+260    	; 0xf3a <App_update+0x22c>
	{							/************* User Mode **************/
		/********************************************************************************************/
		/************************************ ADMIN ENTERED ****************************************/
		/********************************************************************************************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
     e36:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <gu8_ADMIN_Request>
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	31 f4       	brne	.+12     	; 0xe4a <App_update+0x13c>
     e3e:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <gu8_USER_Mode_State>
     e42:	81 11       	cpse	r24, r1
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <App_update+0x13c>
			{
				gu8_ATMMode = ATM_MODE_ADMIN;
     e46:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
     e4a:	ce 01       	movw	r24, r28
     e4c:	01 96       	adiw	r24, 0x01	; 1
     e4e:	0e 94 17 05 	call	0xa2e	; 0xa2e <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	31 f5       	brne	.+76     	; 0xea2 <App_update+0x194>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
     e56:	69 e3       	ldi	r22, 0x39	; 57
     e58:	74 e0       	ldi	r23, 0x04	; 4
     e5a:	ce 01       	movw	r24, r28
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <stringCompare>
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	11 f5       	brne	.+68     	; 0xeaa <App_update+0x19c>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
     e66:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <gu8_USER_Mode_State>
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	51 f4       	brne	.+20     	; 0xe82 <App_update+0x174>
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
     e6e:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <gu8_ADMIN_Request>
						if(Terminal_Out((uint8_t*)"\nATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
     e72:	87 ed       	ldi	r24, 0xD7	; 215
     e74:	93 e0       	ldi	r25, 0x03	; 3
     e76:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	09 f0       	breq	.+2      	; 0xe80 <App_update+0x172>
     e7e:	4a c0       	rjmp	.+148    	; 0xf14 <App_update+0x206>
     e80:	14 c0       	rjmp	.+40     	; 0xeaa <App_update+0x19c>
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The ATM is not used by User */
					{
						gu8_ATMMode = ATM_MODE_ADMIN;
     e82:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
						
						Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
     e86:	6e e0       	ldi	r22, 0x0E	; 14
     e88:	72 e0       	ldi	r23, 0x02	; 2
     e8a:	8f e1       	ldi	r24, 0x1F	; 31
     e8c:	92 e0       	ldi	r25, 0x02	; 2
     e8e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_printLCD>
						
						if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     e92:	80 e3       	ldi	r24, 0x30	; 48
     e94:	92 e0       	ldi	r25, 0x02	; 2
     e96:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Terminal_Out>
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	e9 f1       	breq	.+122    	; 0xf18 <App_update+0x20a>
							return APP_STATUS_ERROR_NOK;
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	4c c0       	rjmp	.+152    	; 0xf3a <App_update+0x22c>
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	11 f0       	breq	.+4      	; 0xeaa <App_update+0x19c>
     ea6:	86 30       	cpi	r24, 0x06	; 6
     ea8:	c9 f5       	brne	.+114    	; 0xf1c <App_update+0x20e>
				return APP_STATUS_ERROR_NOK;
			/****************************************************************/
			/********************** Getting Input from User ************************/
			uint8_t au8_data=0;
     eaa:	1b 8a       	std	Y+19, r1	; 0x13
			enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&au8_data);
     eac:	ce 01       	movw	r24, r28
     eae:	43 96       	adiw	r24, 0x13	; 19
     eb0:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <Keypad_readKey>
			if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
     eb4:	86 30       	cpi	r24, 0x06	; 6
     eb6:	b1 f4       	brne	.+44     	; 0xee4 <App_update+0x1d6>
			{
			/************************************ KEYPAD PRESSED ****************************************/
			/********* Insert Card Chosen ********/
				if(au8_data == '1') 
     eb8:	8b 89       	ldd	r24, Y+19	; 0x13
     eba:	81 33       	cpi	r24, 0x31	; 49
     ebc:	19 f4       	brne	.+6      	; 0xec4 <App_update+0x1b6>
				{
					AppUSER_insertCard();
     ebe:	0e 94 bb 03 	call	0x776	; 0x776 <AppUSER_insertCard>
     ec2:	2e c0       	rjmp	.+92     	; 0xf20 <App_update+0x212>
			/******* Display Temp Chosen *******/
				}else if(au8_data == '2')
     ec4:	82 33       	cpi	r24, 0x32	; 50
     ec6:	19 f4       	brne	.+6      	; 0xece <App_update+0x1c0>
				{
					AppUSER_displayTemp();
     ec8:	0e 94 90 00 	call	0x120	; 0x120 <AppUSER_displayTemp>
     ecc:	29 c0       	rjmp	.+82     	; 0xf20 <App_update+0x212>
				}else if(au8_data == '-') 
     ece:	8d 32       	cpi	r24, 0x2D	; 45
     ed0:	39 f5       	brne	.+78     	; 0xf20 <App_update+0x212>
				{
					gu8_displayFlag = 0;
     ed2:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <gu8_displayFlag>
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     ed6:	65 e8       	ldi	r22, 0x85	; 133
     ed8:	71 e0       	ldi	r23, 0x01	; 1
     eda:	84 e9       	ldi	r24, 0x94	; 148
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Lcd_printLCD>
     ee2:	1e c0       	rjmp	.+60     	; 0xf20 <App_update+0x212>
				}
			}else if(gu8_displayFlag == DISPLAY_TEMP) /* If in temperature screen >> Update the temp value */
     ee4:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <gu8_displayFlag>
     ee8:	81 30       	cpi	r24, 0x01	; 1
     eea:	d1 f4       	brne	.+52     	; 0xf20 <App_update+0x212>
			{
				uint8_t u8_currentTemp=0;
     eec:	1b 86       	std	Y+11, r1	; 0x0b
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
     eee:	ce 01       	movw	r24, r28
     ef0:	0b 96       	adiw	r24, 0x0b	; 11
     ef2:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LM35_readTemp>
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	99 f4       	brne	.+38     	; 0xf20 <App_update+0x212>
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Lcd_setCursor>
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	31 f4       	brne	.+12     	; 0xf10 <App_update+0x202>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
     f04:	8b 85       	ldd	r24, Y+11	; 0x0b
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 84 0c 	call	0x1908	; 0x1908 <Lcd_printDecimal>
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	41 f0       	breq	.+16     	; 0xf20 <App_update+0x212>
			{
				uint8_t u8_currentTemp=0;
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	13 c0       	rjmp	.+38     	; 0xf3a <App_update+0x22c>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"\nATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	11 c0       	rjmp	.+34     	; 0xf3a <App_update+0x22c>
						
						Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
						
						if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
						return APP_STATUS_ERROR_OK;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	0f c0       	rjmp	.+30     	; 0xf3a <App_update+0x22c>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	0d c0       	rjmp	.+26     	; 0xf3a <App_update+0x22c>
					return APP_STATUS_ERROR_NOK;
				}
			}
	/****************************************************************/
	}
	Delay_ms(100);
     f20:	24 e6       	ldi	r18, 0x64	; 100
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
	return APP_STATUS_ERROR_OK;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <App_update+0x22c>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
     f38:	85 e0       	ldi	r24, 0x05	; 5
			}
	/****************************************************************/
	}
	Delay_ms(100);
	return APP_STATUS_ERROR_OK;
}
     f3a:	69 96       	adiw	r28, 0x19	; 25
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	08 95       	ret

00000f4c <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
     f4c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <App_init>
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	39 f4       	brne	.+14     	; 0xf62 <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
     f54:	8f b7       	in	r24, 0x3f	; 63
     f56:	80 68       	ori	r24, 0x80	; 128
     f58:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
     f5a:	0e 94 87 06 	call	0xd0e	; 0xd0e <App_update>
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	e1 f3       	breq	.-8      	; 0xf5a <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
	}
}
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	08 95       	ret

00000f66 <Button_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button module is already initialized */
	if (genu_BttnModuleState == BTTN_STATUS_INIT)
     f66:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_BttnModuleState>
     f6a:	85 30       	cpi	r24, 0x05	; 5
     f6c:	71 f0       	breq	.+28     	; 0xf8a <Button_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
     f6e:	85 e8       	ldi	r24, 0x85	; 133
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	11 f0       	breq	.+4      	; 0xf7e <Button_init+0x18>
     f7a:	87 30       	cpi	r24, 0x07	; 7
     f7c:	29 f4       	brne	.+10     	; 0xf88 <Button_init+0x22>
		return BTTN_STATUS_ERROR_NOK;
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
     f7e:	85 e0       	ldi	r24, 0x05	; 5
     f80:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genu_BttnModuleState>
	return BTTN_STATUS_ERROR_OK;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return BTTN_STATUS_ERROR_NOK;
     f88:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
	return BTTN_STATUS_ERROR_OK;
}
     f8a:	08 95       	ret

00000f8c <Button_getState>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
     f8c:	82 30       	cpi	r24, 0x02	; 2
     f8e:	60 f4       	brcc	.+24     	; 0xfa8 <Button_getState+0x1c>
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
     f90:	61 15       	cp	r22, r1
     f92:	71 05       	cpc	r23, r1
     f94:	59 f0       	breq	.+22     	; 0xfac <Button_getState+0x20>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
     f96:	e8 2f       	mov	r30, r24
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	eb 56       	subi	r30, 0x6B	; 107
     f9c:	fb 4f       	sbci	r31, 0xFB	; 251
     f9e:	80 81       	ld	r24, Z
     fa0:	fb 01       	movw	r30, r22
     fa2:	80 83       	st	Z, r24
	return BTTN_STATUS_ERROR_OK;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
	{
		return BTTN_STATUS_ERROR_NULL;
     fac:	83 e0       	ldi	r24, 0x03	; 3
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
	return BTTN_STATUS_ERROR_OK;
}
     fae:	08 95       	ret

00000fb0 <Button_updateState>:
* Parameters (out): None
* Return value: enuBttn_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to update the state of the button (Pressed or Released) by reading the Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuBttn_Status_t Button_updateState(uint8_t u8_bttnID)
{
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	1f 92       	push	r1
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
     fbe:	82 30       	cpi	r24, 0x02	; 2
     fc0:	08 f0       	brcs	.+2      	; 0xfc4 <Button_updateState+0x14>
     fc2:	58 c0       	rjmp	.+176    	; 0x1074 <Button_updateState+0xc4>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
     fc4:	19 82       	std	Y+1, r1	; 0x01
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
     fc6:	08 2f       	mov	r16, r24
     fc8:	10 e0       	ldi	r17, 0x00	; 0
     fca:	f8 01       	movw	r30, r16
     fcc:	ed 59       	subi	r30, 0x9D	; 157
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	be 01       	movw	r22, r28
     fd2:	6f 5f       	subi	r22, 0xFF	; 255
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	80 81       	ld	r24, Z
     fd8:	0e 94 a5 11 	call	0x234a	; 0x234a <Dio_readPin>
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	09 f0       	breq	.+2      	; 0xfe2 <Button_updateState+0x32>
     fe0:	4b c0       	rjmp	.+150    	; 0x1078 <Button_updateState+0xc8>
		return BTTN_STATUS_ERROR_NOK;
	if(u8_valueTemp == PIN_HIGH)
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	09 f5       	brne	.+66     	; 0x102a <Button_updateState+0x7a>
     fe8:	04 c0       	rjmp	.+8      	; 0xff2 <Button_updateState+0x42>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	a1 1d       	adc	r26, r1
     fee:	b1 1d       	adc	r27, r1
     ff0:	03 c0       	rjmp	.+6      	; 0xff8 <Button_updateState+0x48>
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	dc 01       	movw	r26, r24
     ff8:	88 3b       	cpi	r24, 0xB8	; 184
     ffa:	2b e0       	ldi	r18, 0x0B	; 11
     ffc:	92 07       	cpc	r25, r18
     ffe:	a1 05       	cpc	r26, r1
    1000:	b1 05       	cpc	r27, r1
    1002:	98 f3       	brcs	.-26     	; 0xfea <Button_updateState+0x3a>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    1004:	be 01       	movw	r22, r28
    1006:	6f 5f       	subi	r22, 0xFF	; 255
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	f8 01       	movw	r30, r16
    100c:	ed 59       	subi	r30, 0x9D	; 157
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	80 81       	ld	r24, Z
    1012:	0e 94 a5 11 	call	0x234a	; 0x234a <Dio_readPin>
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	89 f5       	brne	.+98     	; 0x107c <Button_updateState+0xcc>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_HIGH)
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	81 f5       	brne	.+96     	; 0x1080 <Button_updateState+0xd0>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
    1020:	f8 01       	movw	r30, r16
    1022:	eb 56       	subi	r30, 0x6B	; 107
    1024:	fb 4f       	sbci	r31, 0xFB	; 251
    1026:	80 83       	st	Z, r24
    1028:	30 c0       	rjmp	.+96     	; 0x108a <Button_updateState+0xda>
	}else if (u8_valueTemp == PIN_LOW)
    102a:	88 23       	and	r24, r24
    102c:	31 f0       	breq	.+12     	; 0x103a <Button_updateState+0x8a>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	2c c0       	rjmp	.+88     	; 0x108a <Button_updateState+0xda>
		if(u8_valueTemp == PIN_HIGH)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
	}else if (u8_valueTemp == PIN_LOW)
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    1032:	01 96       	adiw	r24, 0x01	; 1
    1034:	a1 1d       	adc	r26, r1
    1036:	b1 1d       	adc	r27, r1
    1038:	03 c0       	rjmp	.+6      	; 0x1040 <Button_updateState+0x90>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	dc 01       	movw	r26, r24
    1040:	88 3b       	cpi	r24, 0xB8	; 184
    1042:	2b e0       	ldi	r18, 0x0B	; 11
    1044:	92 07       	cpc	r25, r18
    1046:	a1 05       	cpc	r26, r1
    1048:	b1 05       	cpc	r27, r1
    104a:	98 f3       	brcs	.-26     	; 0x1032 <Button_updateState+0x82>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    104c:	be 01       	movw	r22, r28
    104e:	6f 5f       	subi	r22, 0xFF	; 255
    1050:	7f 4f       	sbci	r23, 0xFF	; 255
    1052:	f8 01       	movw	r30, r16
    1054:	ed 59       	subi	r30, 0x9D	; 157
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	80 81       	ld	r24, Z
    105a:	0e 94 a5 11 	call	0x234a	; 0x234a <Dio_readPin>
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	89 f4       	brne	.+34     	; 0x1084 <Button_updateState+0xd4>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	81 11       	cpse	r24, r1
    1066:	10 c0       	rjmp	.+32     	; 0x1088 <Button_updateState+0xd8>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
    1068:	f8 01       	movw	r30, r16
    106a:	eb 56       	subi	r30, 0x6B	; 107
    106c:	fb 4f       	sbci	r31, 0xFB	; 251
    106e:	10 82       	st	Z, r1
	}
	return BTTN_STATUS_ERROR_OK;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	0b c0       	rjmp	.+22     	; 0x108a <Button_updateState+0xda>
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
		return BTTN_STATUS_ERROR_ID_INVALID;
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	09 c0       	rjmp	.+18     	; 0x108a <Button_updateState+0xda>
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
		return BTTN_STATUS_ERROR_NOK;
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	07 c0       	rjmp	.+14     	; 0x108a <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	05 c0       	rjmp	.+10     	; 0x108a <Button_updateState+0xda>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	03 c0       	rjmp	.+6      	; 0x108a <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	01 c0       	rjmp	.+2      	; 0x108a <Button_updateState+0xda>
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    1088:	81 e0       	ldi	r24, 0x01	; 1
}
    108a:	0f 90       	pop	r0
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	08 95       	ret

00001096 <EEPROM_getAddresses>:
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
#if EEPROM_24_MODEL	== AT24C16B
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
    1096:	9a 01       	movw	r18, r20
    1098:	22 27       	eor	r18, r18
    109a:	37 70       	andi	r19, 0x07	; 7
    109c:	22 0f       	add	r18, r18
    109e:	23 2f       	mov	r18, r19
    10a0:	22 1f       	adc	r18, r18
    10a2:	33 0b       	sbc	r19, r19
    10a4:	31 95       	neg	r19
    10a6:	20 65       	ori	r18, 0x50	; 80
    10a8:	fc 01       	movw	r30, r24
    10aa:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
    10ac:	fb 01       	movw	r30, r22
    10ae:	40 83       	st	Z, r20
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS;
	pu8_wordAddress[0] = (uint8_t)u16_location >> 8;
	pu8_wordAddress[1] = (uint8_t)u16_location;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	08 95       	ret

000010b4 <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
    10b4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    10b8:	83 30       	cpi	r24, 0x03	; 3
    10ba:	51 f0       	breq	.+20     	; 0x10d0 <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
    10bc:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
    10c0:	85 30       	cpi	r24, 0x05	; 5
    10c2:	29 f0       	breq	.+10     	; 0x10ce <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
    10c4:	83 e0       	ldi	r24, 0x03	; 3
    10c6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
    10ce:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
    10d0:	08 95       	ret

000010d2 <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	00 d0       	rcall	.+0      	; 0x10da <Eeprom_24_writeByte+0x8>
    10da:	1f 92       	push	r1
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	ac 01       	movw	r20, r24
    10e2:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    10e4:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    10e8:	93 30       	cpi	r25, 0x03	; 3
    10ea:	11 f5       	brne	.+68     	; 0x1130 <Eeprom_24_writeByte+0x5e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    10ec:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    10ee:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    10f0:	be 01       	movw	r22, r28
    10f2:	6e 5f       	subi	r22, 0xFE	; 254
    10f4:	7f 4f       	sbci	r23, 0xFF	; 255
    10f6:	ce 01       	movw	r24, r28
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	0e 94 4b 08 	call	0x1096	; 0x1096 <EEPROM_getAddresses>
    10fe:	18 2f       	mov	r17, r24
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	c1 f4       	brne	.+48     	; 0x1134 <Eeprom_24_writeByte+0x62>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    1104:	21 e0       	ldi	r18, 0x01	; 1
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	ae 01       	movw	r20, r28
    110a:	4d 5f       	subi	r20, 0xFD	; 253
    110c:	5f 4f       	sbci	r21, 0xFF	; 255
    110e:	6a 81       	ldd	r22, Y+2	; 0x02
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <I2C_MasterSendToLocation>
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	79 f4       	brne	.+30     	; 0x1138 <Eeprom_24_writeByte+0x66>

	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
    111a:	2f e0       	ldi	r18, 0x0F	; 15
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    112e:	05 c0       	rjmp	.+10     	; 0x113a <Eeprom_24_writeByte+0x68>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1130:	12 e0       	ldi	r17, 0x02	; 2
    1132:	03 c0       	rjmp	.+6      	; 0x113a <Eeprom_24_writeByte+0x68>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1134:	10 e0       	ldi	r17, 0x00	; 0
    1136:	01 c0       	rjmp	.+2      	; 0x113a <Eeprom_24_writeByte+0x68>
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1138:	10 e0       	ldi	r17, 0x00	; 0
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
	return EEPROM_24_STATUS_ERROR_OK;
}
    113a:	81 2f       	mov	r24, r17
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	08 95       	ret

0000114a <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	00 d0       	rcall	.+0      	; 0x1156 <Eeprom_24_readByte+0xc>
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    115c:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    1160:	93 30       	cpi	r25, 0x03	; 3
    1162:	21 f5       	brne	.+72     	; 0x11ac <Eeprom_24_readByte+0x62>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1164:	61 15       	cp	r22, r1
    1166:	71 05       	cpc	r23, r1
    1168:	19 f1       	breq	.+70     	; 0x11b0 <Eeprom_24_readByte+0x66>
    116a:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    116c:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    116e:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    1170:	be 01       	movw	r22, r28
    1172:	6e 5f       	subi	r22, 0xFE	; 254
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	ce 01       	movw	r24, r28
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	0e 94 4b 08 	call	0x1096	; 0x1096 <EEPROM_getAddresses>
    117e:	18 2f       	mov	r17, r24
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	c1 f4       	brne	.+48     	; 0x11b4 <Eeprom_24_readByte+0x6a>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    1184:	21 e0       	ldi	r18, 0x01	; 1
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	a7 01       	movw	r20, r14
    118a:	6a 81       	ldd	r22, Y+2	; 0x02
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <I2C_MasterReceiveFromLocation>
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	89 f4       	brne	.+34     	; 0x11b8 <Eeprom_24_readByte+0x6e>

	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(5);
    1196:	25 e0       	ldi	r18, 0x05	; 5
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    11aa:	07 c0       	rjmp	.+14     	; 0x11ba <Eeprom_24_readByte+0x70>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    11ac:	12 e0       	ldi	r17, 0x02	; 2
    11ae:	05 c0       	rjmp	.+10     	; 0x11ba <Eeprom_24_readByte+0x70>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    11b0:	14 e0       	ldi	r17, 0x04	; 4
    11b2:	03 c0       	rjmp	.+6      	; 0x11ba <Eeprom_24_readByte+0x70>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    11b4:	10 e0       	ldi	r17, 0x00	; 0
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <Eeprom_24_readByte+0x70>
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    11b8:	10 e0       	ldi	r17, 0x00	; 0
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
    11ba:	81 2f       	mov	r24, r17
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	08 95       	ret

000011cc <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
    11cc:	ef 92       	push	r14
    11ce:	ff 92       	push	r15
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <Eeprom_24_writePage+0xc>
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    11dc:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    11e0:	93 30       	cpi	r25, 0x03	; 3
    11e2:	f9 f4       	brne	.+62     	; 0x1222 <Eeprom_24_writePage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    11e4:	61 15       	cp	r22, r1
    11e6:	71 05       	cpc	r23, r1
    11e8:	f1 f0       	breq	.+60     	; 0x1226 <Eeprom_24_writePage+0x5a>
    11ea:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
    11ec:	90 e1       	ldi	r25, 0x10	; 16
    11ee:	89 9f       	mul	r24, r25
    11f0:	a0 01       	movw	r20, r0
    11f2:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    11f4:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
    11f6:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    11f8:	be 01       	movw	r22, r28
    11fa:	6e 5f       	subi	r22, 0xFE	; 254
    11fc:	7f 4f       	sbci	r23, 0xFF	; 255
    11fe:	ce 01       	movw	r24, r28
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	0e 94 4b 08 	call	0x1096	; 0x1096 <EEPROM_getAddresses>
    1206:	18 2f       	mov	r17, r24
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	79 f4       	brne	.+30     	; 0x122a <Eeprom_24_writePage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    120c:	20 e1       	ldi	r18, 0x10	; 16
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	a7 01       	movw	r20, r14
    1212:	6a 81       	ldd	r22, Y+2	; 0x02
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <I2C_MasterSendToLocation>
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	39 f0       	breq	.+14     	; 0x122c <Eeprom_24_writePage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    121e:	10 e0       	ldi	r17, 0x00	; 0
    1220:	05 c0       	rjmp	.+10     	; 0x122c <Eeprom_24_writePage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1222:	12 e0       	ldi	r17, 0x02	; 2
    1224:	03 c0       	rjmp	.+6      	; 0x122c <Eeprom_24_writePage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1226:	14 e0       	ldi	r17, 0x04	; 4
    1228:	01 c0       	rjmp	.+2      	; 0x122c <Eeprom_24_writePage+0x60>
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    122a:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    122c:	81 2f       	mov	r24, r17
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	ff 90       	pop	r15
    123a:	ef 90       	pop	r14
    123c:	08 95       	ret

0000123e <Eeprom_24_readPage>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory page.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read data inside a specific page in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPage(uint8_t u8_page, uint8_t *pu8_data)
{
    123e:	ef 92       	push	r14
    1240:	ff 92       	push	r15
    1242:	1f 93       	push	r17
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	00 d0       	rcall	.+0      	; 0x124a <Eeprom_24_readPage+0xc>
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    124e:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <genu_eepromModuleState>
    1252:	93 30       	cpi	r25, 0x03	; 3
    1254:	f9 f4       	brne	.+62     	; 0x1294 <Eeprom_24_readPage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1256:	61 15       	cp	r22, r1
    1258:	71 05       	cpc	r23, r1
    125a:	f1 f0       	breq	.+60     	; 0x1298 <Eeprom_24_readPage+0x5a>
    125c:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
    125e:	90 e1       	ldi	r25, 0x10	; 16
    1260:	89 9f       	mul	r24, r25
    1262:	a0 01       	movw	r20, r0
    1264:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    1266:	19 82       	std	Y+1, r1	; 0x01

#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
    1268:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    126a:	be 01       	movw	r22, r28
    126c:	6e 5f       	subi	r22, 0xFE	; 254
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	ce 01       	movw	r24, r28
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	0e 94 4b 08 	call	0x1096	; 0x1096 <EEPROM_getAddresses>
    1278:	18 2f       	mov	r17, r24
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	79 f4       	brne	.+30     	; 0x129c <Eeprom_24_readPage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    127e:	20 e1       	ldi	r18, 0x10	; 16
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	a7 01       	movw	r20, r14
    1284:	6a 81       	ldd	r22, Y+2	; 0x02
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <I2C_MasterReceiveFromLocation>
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	39 f0       	breq	.+14     	; 0x129e <Eeprom_24_readPage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    1290:	10 e0       	ldi	r17, 0x00	; 0
    1292:	05 c0       	rjmp	.+10     	; 0x129e <Eeprom_24_readPage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1294:	12 e0       	ldi	r17, 0x02	; 2
    1296:	03 c0       	rjmp	.+6      	; 0x129e <Eeprom_24_readPage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1298:	14 e0       	ldi	r17, 0x04	; 4
    129a:	01 c0       	rjmp	.+2      	; 0x129e <Eeprom_24_readPage+0x60>
	uint8_t u8_slaveAddr=0;

#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    129c:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    129e:	81 2f       	mov	r24, r17
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	1f 91       	pop	r17
    12aa:	ff 90       	pop	r15
    12ac:	ef 90       	pop	r14
    12ae:	08 95       	ret

000012b0 <Eeprom_24_writePacket>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Multiple data bytes to a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    12b0:	6f 92       	push	r6
    12b2:	7f 92       	push	r7
    12b4:	8f 92       	push	r8
    12b6:	9f 92       	push	r9
    12b8:	af 92       	push	r10
    12ba:	bf 92       	push	r11
    12bc:	cf 92       	push	r12
    12be:	df 92       	push	r13
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <Eeprom_24_writePacket+0x1e>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	5c 01       	movw	r10, r24
    12d4:	6b 01       	movw	r12, r22
    12d6:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    12d8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	09 f0       	breq	.+2      	; 0x12e2 <Eeprom_24_writePacket+0x32>
    12e0:	a1 c0       	rjmp	.+322    	; 0x1424 <Eeprom_24_writePacket+0x174>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    12e2:	67 2b       	or	r22, r23
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <Eeprom_24_writePacket+0x38>
    12e6:	a0 c0       	rjmp	.+320    	; 0x1428 <Eeprom_24_writePacket+0x178>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    12e8:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    12ea:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    12ec:	a5 01       	movw	r20, r10
    12ee:	be 01       	movw	r22, r28
    12f0:	6e 5f       	subi	r22, 0xFE	; 254
    12f2:	7f 4f       	sbci	r23, 0xFF	; 255
    12f4:	ce 01       	movw	r24, r28
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	0e 94 4b 08 	call	0x1096	; 0x1096 <EEPROM_getAddresses>
    12fc:	18 2f       	mov	r17, r24
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	09 f0       	breq	.+2      	; 0x1304 <Eeprom_24_writePacket+0x54>
    1302:	94 c0       	rjmp	.+296    	; 0x142c <Eeprom_24_writePacket+0x17c>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;
    1304:	45 01       	movw	r8, r10
    1306:	80 ef       	ldi	r24, 0xF0	; 240
    1308:	88 22       	and	r8, r24
    130a:	87 e0       	ldi	r24, 0x07	; 7
    130c:	98 22       	and	r9, r24
    130e:	96 94       	lsr	r9
    1310:	87 94       	ror	r8
    1312:	96 94       	lsr	r9
    1314:	87 94       	ror	r8
    1316:	96 94       	lsr	r9
    1318:	87 94       	ror	r8
    131a:	96 94       	lsr	r9
    131c:	87 94       	ror	r8
    131e:	68 2c       	mov	r6, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
    1320:	8a 2d       	mov	r24, r10
    1322:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
    1324:	51 f1       	breq	.+84     	; 0x137a <Eeprom_24_writePacket+0xca>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    1326:	90 e1       	ldi	r25, 0x10	; 16
    1328:	a9 2e       	mov	r10, r25
    132a:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    132c:	b1 2c       	mov	r11, r1
    132e:	ea 14       	cp	r14, r10
    1330:	fb 04       	cpc	r15, r11
    1332:	58 f4       	brcc	.+22     	; 0x134a <Eeprom_24_writePacket+0x9a>
		{
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1334:	97 01       	movw	r18, r14
    1336:	a6 01       	movw	r20, r12
    1338:	6a 81       	ldd	r22, Y+2	; 0x02
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <I2C_MasterSendToLocation>
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	09 f4       	brne	.+2      	; 0x1346 <Eeprom_24_writePacket+0x96>
    1344:	7c c0       	rjmp	.+248    	; 0x143e <Eeprom_24_writePacket+0x18e>
				return EEPROM_24_STATUS_ERROR_NOK;
    1346:	10 e0       	ldi	r17, 0x00	; 0
    1348:	7a c0       	rjmp	.+244    	; 0x143e <Eeprom_24_writePacket+0x18e>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    134a:	95 01       	movw	r18, r10
    134c:	a6 01       	movw	r20, r12
    134e:	6a 81       	ldd	r22, Y+2	; 0x02
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <I2C_MasterSendToLocation>
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	09 f0       	breq	.+2      	; 0x135c <Eeprom_24_writePacket+0xac>
    135a:	6a c0       	rjmp	.+212    	; 0x1430 <Eeprom_24_writePacket+0x180>
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    135c:	ea 18       	sub	r14, r10
    135e:	fb 08       	sbc	r15, r11
		i=1;
		Delay_ms(15);
    1360:	2f e0       	ldi	r18, 0x0F	; 15
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e0       	ldi	r20, 0x00	; 0
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
    1374:	77 24       	eor	r7, r7
    1376:	73 94       	inc	r7
    1378:	03 c0       	rjmp	.+6      	; 0x1380 <Eeprom_24_writePacket+0xd0>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
    137a:	71 2c       	mov	r7, r1

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
    137c:	a1 2c       	mov	r10, r1
    137e:	b1 2c       	mov	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
    1380:	c7 01       	movw	r24, r14
    1382:	92 95       	swap	r25
    1384:	82 95       	swap	r24
    1386:	8f 70       	andi	r24, 0x0F	; 15
    1388:	89 27       	eor	r24, r25
    138a:	9f 70       	andi	r25, 0x0F	; 15
    138c:	89 27       	eor	r24, r25
    138e:	08 2f       	mov	r16, r24
	while (pages_num > 0)
    1390:	1c c0       	rjmp	.+56     	; 0x13ca <Eeprom_24_writePacket+0x11a>
	{
		pages_num--;
    1392:	01 50       	subi	r16, 0x01	; 1
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    1394:	b6 01       	movw	r22, r12
    1396:	6a 0d       	add	r22, r10
    1398:	7b 1d       	adc	r23, r11
    139a:	87 2d       	mov	r24, r7
    139c:	86 0d       	add	r24, r6
    139e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <Eeprom_24_writePage>
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <Eeprom_24_writePacket+0xf8>
    13a6:	46 c0       	rjmp	.+140    	; 0x1434 <Eeprom_24_writePacket+0x184>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    13a8:	73 94       	inc	r7
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
    13aa:	80 e1       	ldi	r24, 0x10	; 16
    13ac:	e8 1a       	sub	r14, r24
    13ae:	f1 08       	sbc	r15, r1
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
    13b0:	80 e1       	ldi	r24, 0x10	; 16
    13b2:	a8 0e       	add	r10, r24
    13b4:	b1 1c       	adc	r11, r1
		Delay_ms(15);
    13b6:	2f e0       	ldi	r18, 0x0F	; 15
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
    13ca:	10 16       	cp	r1, r16
    13cc:	14 f3       	brlt	.-60     	; 0x1392 <Eeprom_24_writePacket+0xe2>
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
		Delay_ms(15);
	}
	
	if (u16_dataLen > 0)
    13ce:	e1 14       	cp	r14, r1
    13d0:	f1 04       	cpc	r15, r1
    13d2:	a9 f1       	breq	.+106    	; 0x143e <Eeprom_24_writePacket+0x18e>
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
    13d4:	a4 01       	movw	r20, r8
    13d6:	47 0d       	add	r20, r7
    13d8:	51 1d       	adc	r21, r1
    13da:	42 95       	swap	r20
    13dc:	52 95       	swap	r21
    13de:	50 7f       	andi	r21, 0xF0	; 240
    13e0:	54 27       	eor	r21, r20
    13e2:	40 7f       	andi	r20, 0xF0	; 240
    13e4:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
    13e6:	be 01       	movw	r22, r28
    13e8:	6e 5f       	subi	r22, 0xFE	; 254
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	ce 01       	movw	r24, r28
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	0e 94 4b 08 	call	0x1096	; 0x1096 <EEPROM_getAddresses>
    13f4:	18 2f       	mov	r17, r24
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	f9 f4       	brne	.+62     	; 0x1438 <Eeprom_24_writePacket+0x188>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    13fa:	a6 01       	movw	r20, r12
    13fc:	4a 0d       	add	r20, r10
    13fe:	5b 1d       	adc	r21, r11
    1400:	97 01       	movw	r18, r14
    1402:	6a 81       	ldd	r22, Y+2	; 0x02
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <I2C_MasterSendToLocation>
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	b9 f4       	brne	.+46     	; 0x143c <Eeprom_24_writePacket+0x18c>
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
    140e:	2f e0       	ldi	r18, 0x0F	; 15
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	50 e0       	ldi	r21, 0x00	; 0
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
    1422:	0d c0       	rjmp	.+26     	; 0x143e <Eeprom_24_writePacket+0x18e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1424:	12 e0       	ldi	r17, 0x02	; 2
    1426:	0b c0       	rjmp	.+22     	; 0x143e <Eeprom_24_writePacket+0x18e>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1428:	14 e0       	ldi	r17, 0x04	; 4
    142a:	09 c0       	rjmp	.+18     	; 0x143e <Eeprom_24_writePacket+0x18e>
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    142c:	10 e0       	ldi	r17, 0x00	; 0
    142e:	07 c0       	rjmp	.+14     	; 0x143e <Eeprom_24_writePacket+0x18e>
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1430:	10 e0       	ldi	r17, 0x00	; 0
    1432:	05 c0       	rjmp	.+10     	; 0x143e <Eeprom_24_writePacket+0x18e>
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
	{
		pages_num--;
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1434:	10 e0       	ldi	r17, 0x00	; 0
    1436:	03 c0       	rjmp	.+6      	; 0x143e <Eeprom_24_writePacket+0x18e>
	
	if (u16_dataLen > 0)
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1438:	10 e0       	ldi	r17, 0x00	; 0
    143a:	01 c0       	rjmp	.+2      	; 0x143e <Eeprom_24_writePacket+0x18e>
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    143c:	10 e0       	ldi	r17, 0x00	; 0
		Delay_ms(15);
	}

#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    143e:	81 2f       	mov	r24, r17
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	df 90       	pop	r13
    1452:	cf 90       	pop	r12
    1454:	bf 90       	pop	r11
    1456:	af 90       	pop	r10
    1458:	9f 90       	pop	r9
    145a:	8f 90       	pop	r8
    145c:	7f 90       	pop	r7
    145e:	6f 90       	pop	r6
    1460:	08 95       	ret

00001462 <Eeprom_24_readPacket>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read Multiple data bytes from a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    1462:	6f 92       	push	r6
    1464:	7f 92       	push	r7
    1466:	8f 92       	push	r8
    1468:	9f 92       	push	r9
    146a:	af 92       	push	r10
    146c:	bf 92       	push	r11
    146e:	cf 92       	push	r12
    1470:	df 92       	push	r13
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	00 d0       	rcall	.+0      	; 0x1480 <Eeprom_24_readPacket+0x1e>
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	5c 01       	movw	r10, r24
    1486:	6b 01       	movw	r12, r22
    1488:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    148a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <genu_eepromModuleState>
    148e:	83 30       	cpi	r24, 0x03	; 3
    1490:	09 f0       	breq	.+2      	; 0x1494 <Eeprom_24_readPacket+0x32>
    1492:	84 c0       	rjmp	.+264    	; 0x159c <Eeprom_24_readPacket+0x13a>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1494:	67 2b       	or	r22, r23
    1496:	09 f4       	brne	.+2      	; 0x149a <Eeprom_24_readPacket+0x38>
    1498:	83 c0       	rjmp	.+262    	; 0x15a0 <Eeprom_24_readPacket+0x13e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    149a:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u16dataIndex=0;
	uint8_t i=0;

#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;	
    149c:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    149e:	a5 01       	movw	r20, r10
    14a0:	be 01       	movw	r22, r28
    14a2:	6e 5f       	subi	r22, 0xFE	; 254
    14a4:	7f 4f       	sbci	r23, 0xFF	; 255
    14a6:	ce 01       	movw	r24, r28
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	0e 94 4b 08 	call	0x1096	; 0x1096 <EEPROM_getAddresses>
    14ae:	18 2f       	mov	r17, r24
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <Eeprom_24_readPacket+0x54>
    14b4:	77 c0       	rjmp	.+238    	; 0x15a4 <Eeprom_24_readPacket+0x142>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;		//The first page to write in
    14b6:	45 01       	movw	r8, r10
    14b8:	80 ef       	ldi	r24, 0xF0	; 240
    14ba:	88 22       	and	r8, r24
    14bc:	87 e0       	ldi	r24, 0x07	; 7
    14be:	98 22       	and	r9, r24
    14c0:	96 94       	lsr	r9
    14c2:	87 94       	ror	r8
    14c4:	96 94       	lsr	r9
    14c6:	87 94       	ror	r8
    14c8:	96 94       	lsr	r9
    14ca:	87 94       	ror	r8
    14cc:	96 94       	lsr	r9
    14ce:	87 94       	ror	r8
    14d0:	78 2c       	mov	r7, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
    14d2:	8a 2d       	mov	r24, r10
    14d4:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
    14d6:	f9 f0       	breq	.+62     	; 0x1516 <Eeprom_24_readPacket+0xb4>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    14d8:	90 e1       	ldi	r25, 0x10	; 16
    14da:	a9 2e       	mov	r10, r25
    14dc:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    14de:	b1 2c       	mov	r11, r1
    14e0:	ea 14       	cp	r14, r10
    14e2:	fb 04       	cpc	r15, r11
    14e4:	58 f4       	brcc	.+22     	; 0x14fc <Eeprom_24_readPacket+0x9a>
		{
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    14e6:	95 01       	movw	r18, r10
    14e8:	a6 01       	movw	r20, r12
    14ea:	6a 81       	ldd	r22, Y+2	; 0x02
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <I2C_MasterReceiveFromLocation>
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <Eeprom_24_readPacket+0x96>
    14f6:	5d c0       	rjmp	.+186    	; 0x15b2 <Eeprom_24_readPacket+0x150>
				return EEPROM_24_STATUS_ERROR_NOK;
    14f8:	10 e0       	ldi	r17, 0x00	; 0
    14fa:	5b c0       	rjmp	.+182    	; 0x15b2 <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    14fc:	95 01       	movw	r18, r10
    14fe:	a6 01       	movw	r20, r12
    1500:	6a 81       	ldd	r22, Y+2	; 0x02
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <I2C_MasterReceiveFromLocation>
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	09 f0       	breq	.+2      	; 0x150e <Eeprom_24_readPacket+0xac>
    150c:	4d c0       	rjmp	.+154    	; 0x15a8 <Eeprom_24_readPacket+0x146>
			return EEPROM_24_STATUS_ERROR_NOK;
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    150e:	ea 18       	sub	r14, r10
    1510:	fb 08       	sbc	r15, r11
		i=1;
    1512:	01 e0       	ldi	r16, 0x01	; 1
    1514:	03 c0       	rjmp	.+6      	; 0x151c <Eeprom_24_readPacket+0xba>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
    1516:	00 e0       	ldi	r16, 0x00	; 0

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
    1518:	a1 2c       	mov	r10, r1
    151a:	b1 2c       	mov	r11, r1
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
    151c:	c7 01       	movw	r24, r14
    151e:	92 95       	swap	r25
    1520:	82 95       	swap	r24
    1522:	8f 70       	andi	r24, 0x0F	; 15
    1524:	89 27       	eor	r24, r25
    1526:	9f 70       	andi	r25, 0x0F	; 15
    1528:	89 27       	eor	r24, r25
	while (pages_num--)
    152a:	11 c0       	rjmp	.+34     	; 0x154e <Eeprom_24_readPacket+0xec>
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    152c:	b6 01       	movw	r22, r12
    152e:	6a 0d       	add	r22, r10
    1530:	7b 1d       	adc	r23, r11
    1532:	80 2f       	mov	r24, r16
    1534:	87 0d       	add	r24, r7
    1536:	0e 94 1f 09 	call	0x123e	; 0x123e <Eeprom_24_readPage>
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	b9 f5       	brne	.+110    	; 0x15ac <Eeprom_24_readPacket+0x14a>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    153e:	0f 5f       	subi	r16, 0xFF	; 255
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
    1540:	80 e1       	ldi	r24, 0x10	; 16
    1542:	e8 1a       	sub	r14, r24
    1544:	f1 08       	sbc	r15, r1
		u16dataIndex += EEPROM_24_PAGE_BYTES;
    1546:	80 e1       	ldi	r24, 0x10	; 16
    1548:	a8 0e       	add	r10, r24
    154a:	b1 1c       	adc	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
    154c:	86 2d       	mov	r24, r6
    154e:	66 24       	eor	r6, r6
    1550:	6a 94       	dec	r6
    1552:	68 0e       	add	r6, r24
    1554:	81 11       	cpse	r24, r1
    1556:	ea cf       	rjmp	.-44     	; 0x152c <Eeprom_24_readPacket+0xca>
		i++;
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u16dataIndex += EEPROM_24_PAGE_BYTES;
	}

	if (u16_dataLen > 0)
    1558:	e1 14       	cp	r14, r1
    155a:	f1 04       	cpc	r15, r1
    155c:	51 f1       	breq	.+84     	; 0x15b2 <Eeprom_24_readPacket+0x150>
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
    155e:	a4 01       	movw	r20, r8
    1560:	40 0f       	add	r20, r16
    1562:	51 1d       	adc	r21, r1
    1564:	42 95       	swap	r20
    1566:	52 95       	swap	r21
    1568:	50 7f       	andi	r21, 0xF0	; 240
    156a:	54 27       	eor	r21, r20
    156c:	40 7f       	andi	r20, 0xF0	; 240
    156e:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
    1570:	be 01       	movw	r22, r28
    1572:	6e 5f       	subi	r22, 0xFE	; 254
    1574:	7f 4f       	sbci	r23, 0xFF	; 255
    1576:	ce 01       	movw	r24, r28
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	0e 94 4b 08 	call	0x1096	; 0x1096 <EEPROM_getAddresses>
    157e:	18 2f       	mov	r17, r24
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	b1 f4       	brne	.+44     	; 0x15b0 <Eeprom_24_readPacket+0x14e>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1584:	a6 01       	movw	r20, r12
    1586:	4a 0d       	add	r20, r10
    1588:	5b 1d       	adc	r21, r11
    158a:	97 01       	movw	r18, r14
    158c:	6a 81       	ldd	r22, Y+2	; 0x02
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <I2C_MasterReceiveFromLocation>
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	69 f0       	breq	.+26     	; 0x15b2 <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_NOK;
    1598:	10 e0       	ldi	r17, 0x00	; 0
    159a:	0b c0       	rjmp	.+22     	; 0x15b2 <Eeprom_24_readPacket+0x150>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    159c:	12 e0       	ldi	r17, 0x02	; 2
    159e:	09 c0       	rjmp	.+18     	; 0x15b2 <Eeprom_24_readPacket+0x150>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    15a0:	14 e0       	ldi	r17, 0x04	; 4
    15a2:	07 c0       	rjmp	.+14     	; 0x15b2 <Eeprom_24_readPacket+0x150>
	uint8_t i=0;

#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    15a4:	10 e0       	ldi	r17, 0x00	; 0
    15a6:	05 c0       	rjmp	.+10     	; 0x15b2 <Eeprom_24_readPacket+0x150>
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    15a8:	10 e0       	ldi	r17, 0x00	; 0
    15aa:	03 c0       	rjmp	.+6      	; 0x15b2 <Eeprom_24_readPacket+0x150>
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    15ac:	10 e0       	ldi	r17, 0x00	; 0
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <Eeprom_24_readPacket+0x150>

	if (u16_dataLen > 0)
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    15b0:	10 e0       	ldi	r17, 0x00	; 0
		if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    15b2:	81 2f       	mov	r24, r17
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	df 90       	pop	r13
    15c6:	cf 90       	pop	r12
    15c8:	bf 90       	pop	r11
    15ca:	af 90       	pop	r10
    15cc:	9f 90       	pop	r9
    15ce:	8f 90       	pop	r8
    15d0:	7f 90       	pop	r7
    15d2:	6f 90       	pop	r6
    15d4:	08 95       	ret

000015d6 <Keypad_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is already initialized */
	if (genu_KeypadModuleState == KEYPAD_STATUS_INIT)
    15d6:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <genu_KeypadModuleState>
    15da:	85 30       	cpi	r24, 0x05	; 5
    15dc:	71 f0       	breq	.+28     	; 0x15fa <Keypad_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    15de:	85 e8       	ldi	r24, 0x85	; 133
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	11 f0       	breq	.+4      	; 0x15ee <Keypad_init+0x18>
    15ea:	87 30       	cpi	r24, 0x07	; 7
    15ec:	29 f4       	brne	.+10     	; 0x15f8 <Keypad_init+0x22>
		return KEYPAD_STATUS_ERROR_NOK;
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
    15ee:	85 e0       	ldi	r24, 0x05	; 5
    15f0:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <genu_KeypadModuleState>
	return KEYPAD_STATUS_ERROR_OK;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return KEYPAD_STATUS_ERROR_NOK;
    15f8:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
	return KEYPAD_STATUS_ERROR_OK;
}
    15fa:	08 95       	ret

000015fc <Keypad_readKey>:
* Parameters (out): pu8_pressedKey - Pointer to a Char to hold the pressed key.
* Return value: enuKeypad_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current pressed Key.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuKeypad_Status_t Keypad_readKey(uint8_t * pu8_pressedKey)
{
    15fc:	af 92       	push	r10
    15fe:	bf 92       	push	r11
    1600:	cf 92       	push	r12
    1602:	df 92       	push	r13
    1604:	ef 92       	push	r14
    1606:	ff 92       	push	r15
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	1f 92       	push	r1
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	6c 01       	movw	r12, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
    1618:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <genu_KeypadModuleState>
    161c:	95 30       	cpi	r25, 0x05	; 5
    161e:	09 f0       	breq	.+2      	; 0x1622 <Keypad_readKey+0x26>
    1620:	50 c0       	rjmp	.+160    	; 0x16c2 <Keypad_readKey+0xc6>
	{
		return KEYPAD_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
    1622:	c1 14       	cp	r12, r1
    1624:	d1 04       	cpc	r13, r1
    1626:	09 f4       	brne	.+2      	; 0x162a <Keypad_readKey+0x2e>
    1628:	4e c0       	rjmp	.+156    	; 0x16c6 <Keypad_readKey+0xca>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	89 83       	std	Y+1, r24	; 0x01
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    162e:	00 e0       	ldi	r16, 0x00	; 0
    1630:	43 c0       	rjmp	.+134    	; 0x16b8 <Keypad_readKey+0xbc>
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
    1632:	a0 2e       	mov	r10, r16
    1634:	b1 2c       	mov	r11, r1
    1636:	f5 01       	movw	r30, r10
    1638:	e6 58       	subi	r30, 0x86	; 134
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	09 f0       	breq	.+2      	; 0x164a <Keypad_readKey+0x4e>
    1648:	40 c0       	rjmp	.+128    	; 0x16ca <Keypad_readKey+0xce>
    164a:	10 e0       	ldi	r17, 0x00	; 0
    164c:	29 c0       	rjmp	.+82     	; 0x16a0 <Keypad_readKey+0xa4>
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
    164e:	e1 2e       	mov	r14, r17
    1650:	f1 2c       	mov	r15, r1
    1652:	f7 01       	movw	r30, r14
    1654:	ea 58       	subi	r30, 0x8A	; 138
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	be 01       	movw	r22, r28
    165a:	6f 5f       	subi	r22, 0xFF	; 255
    165c:	7f 4f       	sbci	r23, 0xFF	; 255
    165e:	80 81       	ld	r24, Z
    1660:	0e 94 a5 11 	call	0x234a	; 0x234a <Dio_readPin>
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	99 f5       	brne	.+102    	; 0x16ce <Keypad_readKey+0xd2>
				return KEYPAD_STATUS_ERROR_NOK;
			if(u8_pinValue == PIN_LOW)
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	81 11       	cpse	r24, r1
    166c:	18 c0       	rjmp	.+48     	; 0x169e <Keypad_readKey+0xa2>
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    166e:	61 e0       	ldi	r22, 0x01	; 1
    1670:	f5 01       	movw	r30, r10
    1672:	e6 58       	subi	r30, 0x86	; 134
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	80 81       	ld	r24, Z
    1678:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	49 f5       	brne	.+82     	; 0x16d2 <Keypad_readKey+0xd6>
					return KEYPAD_STATUS_ERROR_NOK;
				*pu8_pressedKey = gau8_ButtonSymbols[u8_RowIndex][u8_ColumnIndex];
    1680:	97 01       	movw	r18, r14
    1682:	22 0f       	add	r18, r18
    1684:	33 1f       	adc	r19, r19
    1686:	22 0f       	add	r18, r18
    1688:	33 1f       	adc	r19, r19
    168a:	2a 59       	subi	r18, 0x9A	; 154
    168c:	3f 4f       	sbci	r19, 0xFF	; 255
    168e:	f9 01       	movw	r30, r18
    1690:	ea 0d       	add	r30, r10
    1692:	fb 1d       	adc	r31, r11
    1694:	80 81       	ld	r24, Z
    1696:	f6 01       	movw	r30, r12
    1698:	80 83       	st	Z, r24
				return KEYPAD_STATUS_PRESSED;
    169a:	86 e0       	ldi	r24, 0x06	; 6
    169c:	1d c0       	rjmp	.+58     	; 0x16d8 <Keypad_readKey+0xdc>
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
    169e:	1f 5f       	subi	r17, 0xFF	; 255
    16a0:	14 30       	cpi	r17, 0x04	; 4
    16a2:	a8 f2       	brcs	.-86     	; 0x164e <Keypad_readKey+0x52>
				return KEYPAD_STATUS_PRESSED;
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    16a4:	f5 01       	movw	r30, r10
    16a6:	e6 58       	subi	r30, 0x86	; 134
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	61 e0       	ldi	r22, 0x01	; 1
    16ac:	80 81       	ld	r24, Z
    16ae:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	81 f4       	brne	.+32     	; 0x16d6 <Keypad_readKey+0xda>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    16b6:	0f 5f       	subi	r16, 0xFF	; 255
    16b8:	04 30       	cpi	r16, 0x04	; 4
    16ba:	08 f4       	brcc	.+2      	; 0x16be <Keypad_readKey+0xc2>
    16bc:	ba cf       	rjmp	.-140    	; 0x1632 <Keypad_readKey+0x36>
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    16be:	87 e0       	ldi	r24, 0x07	; 7
    16c0:	0b c0       	rjmp	.+22     	; 0x16d8 <Keypad_readKey+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
	{
		return KEYPAD_STATUS_NOT_INIT;
    16c2:	84 e0       	ldi	r24, 0x04	; 4
    16c4:	09 c0       	rjmp	.+18     	; 0x16d8 <Keypad_readKey+0xdc>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
	{
		return KEYPAD_STATUS_ERROR_NULL;
    16c6:	83 e0       	ldi	r24, 0x03	; 3
    16c8:	07 c0       	rjmp	.+14     	; 0x16d8 <Keypad_readKey+0xdc>
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	05 c0       	rjmp	.+10     	; 0x16d8 <Keypad_readKey+0xdc>
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
				return KEYPAD_STATUS_ERROR_NOK;
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	03 c0       	rjmp	.+6      	; 0x16d8 <Keypad_readKey+0xdc>
			if(u8_pinValue == PIN_LOW)
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
					return KEYPAD_STATUS_ERROR_NOK;
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	01 c0       	rjmp	.+2      	; 0x16d8 <Keypad_readKey+0xdc>
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    16d6:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    16d8:	0f 90       	pop	r0
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	df 90       	pop	r13
    16e8:	cf 90       	pop	r12
    16ea:	bf 90       	pop	r11
    16ec:	af 90       	pop	r10
    16ee:	08 95       	ret

000016f0 <Lcd_WriteData>:
{
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, BIN);
	Lcd_printString(au8_snum);
	return LCD_STATUS_ERROR_OK;
}
    16f0:	cf 93       	push	r28
    16f2:	c8 2f       	mov	r28, r24
    16f4:	80 ff       	sbrs	r24, 0
    16f6:	05 c0       	rjmp	.+10     	; 0x1702 <Lcd_WriteData+0x12>
    16f8:	61 e0       	ldi	r22, 0x01	; 1
    16fa:	8a e0       	ldi	r24, 0x0A	; 10
    16fc:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    1700:	04 c0       	rjmp	.+8      	; 0x170a <Lcd_WriteData+0x1a>
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	8a e0       	ldi	r24, 0x0A	; 10
    1706:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    170a:	c1 ff       	sbrs	r28, 1
    170c:	05 c0       	rjmp	.+10     	; 0x1718 <Lcd_WriteData+0x28>
    170e:	61 e0       	ldi	r22, 0x01	; 1
    1710:	8b e0       	ldi	r24, 0x0B	; 11
    1712:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    1716:	04 c0       	rjmp	.+8      	; 0x1720 <Lcd_WriteData+0x30>
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	8b e0       	ldi	r24, 0x0B	; 11
    171c:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    1720:	c2 ff       	sbrs	r28, 2
    1722:	05 c0       	rjmp	.+10     	; 0x172e <Lcd_WriteData+0x3e>
    1724:	61 e0       	ldi	r22, 0x01	; 1
    1726:	8c e0       	ldi	r24, 0x0C	; 12
    1728:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <Lcd_WriteData+0x46>
    172e:	60 e0       	ldi	r22, 0x00	; 0
    1730:	8c e0       	ldi	r24, 0x0C	; 12
    1732:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    1736:	c3 ff       	sbrs	r28, 3
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <Lcd_WriteData+0x54>
    173a:	61 e0       	ldi	r22, 0x01	; 1
    173c:	8d e0       	ldi	r24, 0x0D	; 13
    173e:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    1742:	04 c0       	rjmp	.+8      	; 0x174c <Lcd_WriteData+0x5c>
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	8d e0       	ldi	r24, 0x0D	; 13
    1748:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    174c:	cf 91       	pop	r28
    174e:	08 95       	ret

00001750 <Lcd_EnableToggle>:
    1750:	61 e0       	ldi	r22, 0x01	; 1
    1752:	89 e0       	ldi	r24, 0x09	; 9
    1754:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    1758:	21 e0       	ldi	r18, 0x01	; 1
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	40 e0       	ldi	r20, 0x00	; 0
    175e:	50 e0       	ldi	r21, 0x00	; 0
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	89 e0       	ldi	r24, 0x09	; 9
    1770:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    1774:	08 95       	ret

00001776 <Lcd_sendCommand>:
    1776:	cf 93       	push	r28
    1778:	c8 2f       	mov	r28, r24
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	87 e0       	ldi	r24, 0x07	; 7
    177e:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    1782:	8c 2f       	mov	r24, r28
    1784:	82 95       	swap	r24
    1786:	8f 70       	andi	r24, 0x0F	; 15
    1788:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Lcd_WriteData>
    178c:	0e 94 a8 0b 	call	0x1750	; 0x1750 <Lcd_EnableToggle>
    1790:	8c 2f       	mov	r24, r28
    1792:	8f 70       	andi	r24, 0x0F	; 15
    1794:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Lcd_WriteData>
    1798:	0e 94 a8 0b 	call	0x1750	; 0x1750 <Lcd_EnableToggle>
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	cf 91       	pop	r28
    17a0:	08 95       	ret

000017a2 <Lcd_init>:
    17a2:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <genu_LcdModuleState>
    17a6:	86 30       	cpi	r24, 0x06	; 6
    17a8:	a9 f1       	breq	.+106    	; 0x1814 <Lcd_init+0x72>
    17aa:	85 e8       	ldi	r24, 0x85	; 133
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <Dio_init>
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	11 f0       	breq	.+4      	; 0x17ba <Lcd_init+0x18>
    17b6:	87 30       	cpi	r24, 0x07	; 7
    17b8:	61 f5       	brne	.+88     	; 0x1812 <Lcd_init+0x70>
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	87 e0       	ldi	r24, 0x07	; 7
    17be:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	89 e0       	ldi	r24, 0x09	; 9
    17c6:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    17ca:	83 e3       	ldi	r24, 0x33	; 51
    17cc:	0e 94 bb 0b 	call	0x1776	; 0x1776 <Lcd_sendCommand>
    17d0:	82 e3       	ldi	r24, 0x32	; 50
    17d2:	0e 94 bb 0b 	call	0x1776	; 0x1776 <Lcd_sendCommand>
    17d6:	88 e2       	ldi	r24, 0x28	; 40
    17d8:	0e 94 bb 0b 	call	0x1776	; 0x1776 <Lcd_sendCommand>
    17dc:	88 e0       	ldi	r24, 0x08	; 8
    17de:	0e 94 bb 0b 	call	0x1776	; 0x1776 <Lcd_sendCommand>
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	0e 94 bb 0b 	call	0x1776	; 0x1776 <Lcd_sendCommand>
    17e8:	86 e0       	ldi	r24, 0x06	; 6
    17ea:	0e 94 bb 0b 	call	0x1776	; 0x1776 <Lcd_sendCommand>
    17ee:	8c e0       	ldi	r24, 0x0C	; 12
    17f0:	0e 94 bb 0b 	call	0x1776	; 0x1776 <Lcd_sendCommand>
    17f4:	22 e0       	ldi	r18, 0x02	; 2
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Delay_ms>
    1808:	86 e0       	ldi	r24, 0x06	; 6
    180a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <genu_LcdModuleState>
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	08 95       	ret
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	08 95       	ret

00001816 <Lcd_setCursor>:
    1816:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <genu_LcdModuleState>
    181a:	96 30       	cpi	r25, 0x06	; 6
    181c:	89 f4       	brne	.+34     	; 0x1840 <Lcd_setCursor+0x2a>
    181e:	83 30       	cpi	r24, 0x03	; 3
    1820:	88 f4       	brcc	.+34     	; 0x1844 <Lcd_setCursor+0x2e>
    1822:	61 31       	cpi	r22, 0x11	; 17
    1824:	88 f4       	brcc	.+34     	; 0x1848 <Lcd_setCursor+0x32>
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	2e 5f       	subi	r18, 0xFE	; 254
    182c:	3f 4f       	sbci	r19, 0xFF	; 255
    182e:	86 2f       	mov	r24, r22
    1830:	90 e4       	ldi	r25, 0x40	; 64
    1832:	29 9f       	mul	r18, r25
    1834:	80 0d       	add	r24, r0
    1836:	11 24       	eor	r1, r1
    1838:	0e 94 bb 0b 	call	0x1776	; 0x1776 <Lcd_sendCommand>
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	08 95       	ret
    1840:	85 e0       	ldi	r24, 0x05	; 5
    1842:	08 95       	ret
    1844:	83 e0       	ldi	r24, 0x03	; 3
    1846:	08 95       	ret
    1848:	82 e0       	ldi	r24, 0x02	; 2
    184a:	08 95       	ret

0000184c <Lcd_printChar>:
    184c:	cf 93       	push	r28
    184e:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <genu_LcdModuleState>
    1852:	96 30       	cpi	r25, 0x06	; 6
    1854:	a1 f4       	brne	.+40     	; 0x187e <Lcd_printChar+0x32>
    1856:	c8 2f       	mov	r28, r24
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	87 e0       	ldi	r24, 0x07	; 7
    185c:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    1860:	8c 2f       	mov	r24, r28
    1862:	82 95       	swap	r24
    1864:	8f 70       	andi	r24, 0x0F	; 15
    1866:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Lcd_WriteData>
    186a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <Lcd_EnableToggle>
    186e:	8c 2f       	mov	r24, r28
    1870:	8f 70       	andi	r24, 0x0F	; 15
    1872:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Lcd_WriteData>
    1876:	0e 94 a8 0b 	call	0x1750	; 0x1750 <Lcd_EnableToggle>
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	01 c0       	rjmp	.+2      	; 0x1880 <Lcd_printChar+0x34>
    187e:	85 e0       	ldi	r24, 0x05	; 5
    1880:	cf 91       	pop	r28
    1882:	08 95       	ret

00001884 <Lcd_printString>:
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	ec 01       	movw	r28, r24
    188a:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <genu_LcdModuleState>
    188e:	86 30       	cpi	r24, 0x06	; 6
    1890:	49 f4       	brne	.+18     	; 0x18a4 <Lcd_printString+0x20>
    1892:	03 c0       	rjmp	.+6      	; 0x189a <Lcd_printString+0x16>
    1894:	21 96       	adiw	r28, 0x01	; 1
    1896:	0e 94 26 0c 	call	0x184c	; 0x184c <Lcd_printChar>
    189a:	88 81       	ld	r24, Y
    189c:	81 11       	cpse	r24, r1
    189e:	fa cf       	rjmp	.-12     	; 0x1894 <Lcd_printString+0x10>
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	01 c0       	rjmp	.+2      	; 0x18a6 <Lcd_printString+0x22>
    18a4:	85 e0       	ldi	r24, 0x05	; 5
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	08 95       	ret

000018ac <Lcd_clear>:
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	0e 94 bb 0b 	call	0x1776	; 0x1776 <Lcd_sendCommand>
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	08 95       	ret

000018b6 <Lcd_printLCD>:
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	ec 01       	movw	r28, r24
    18c0:	8b 01       	movw	r16, r22
    18c2:	0e 94 56 0c 	call	0x18ac	; 0x18ac <Lcd_clear>
    18c6:	60 e0       	ldi	r22, 0x00	; 0
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Lcd_setCursor>
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	89 f4       	brne	.+34     	; 0x18f4 <Lcd_printLCD+0x3e>
    18d2:	ce 01       	movw	r24, r28
    18d4:	0e 94 42 0c 	call	0x1884	; 0x1884 <Lcd_printString>
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	71 f4       	brne	.+28     	; 0x18f8 <Lcd_printLCD+0x42>
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Lcd_setCursor>
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	59 f4       	brne	.+22     	; 0x18fc <Lcd_printLCD+0x46>
    18e6:	c8 01       	movw	r24, r16
    18e8:	0e 94 42 0c 	call	0x1884	; 0x1884 <Lcd_printString>
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	39 f0       	breq	.+14     	; 0x18fe <Lcd_printLCD+0x48>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	05 c0       	rjmp	.+10     	; 0x18fe <Lcd_printLCD+0x48>
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	03 c0       	rjmp	.+6      	; 0x18fe <Lcd_printLCD+0x48>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	01 c0       	rjmp	.+2      	; 0x18fe <Lcd_printLCD+0x48>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	1f 91       	pop	r17
    1904:	0f 91       	pop	r16
    1906:	08 95       	ret

00001908 <Lcd_printDecimal>:
enuLcd_Status_t Lcd_printDecimal(uint16_t u16_num)
{
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	61 97       	sbiw	r28, 0x11	; 17
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, DEC);
    191c:	41 e0       	ldi	r20, 0x01	; 1
    191e:	be 01       	movw	r22, r28
    1920:	6f 5f       	subi	r22, 0xFF	; 255
    1922:	7f 4f       	sbci	r23, 0xFF	; 255
    1924:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <integerToString>
	Lcd_printString(au8_snum);
    1928:	ce 01       	movw	r24, r28
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	0e 94 42 0c 	call	0x1884	; 0x1884 <Lcd_printString>
	return LCD_STATUS_ERROR_OK;
}
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	61 96       	adiw	r28, 0x11	; 17
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	08 95       	ret

00001944 <LM35_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is already initialized */
	if (genu_LM35ModuleState == LM35_STATUS_INIT)
    1944:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <genu_LM35ModuleState>
    1948:	85 30       	cpi	r24, 0x05	; 5
    194a:	51 f0       	breq	.+20     	; 0x1960 <LM35_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
    194c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <Adc_init>
    1950:	81 30       	cpi	r24, 0x01	; 1
    1952:	29 f4       	brne	.+10     	; 0x195e <LM35_init+0x1a>
		return LM35_STATUS_ERROR_NOK;
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
    1954:	85 e0       	ldi	r24, 0x05	; 5
    1956:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <genu_LM35ModuleState>
	return LM35_STATUS_ERROR_OK;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
		return LM35_STATUS_ERROR_NOK;
    195e:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
	return LM35_STATUS_ERROR_OK;
}
    1960:	08 95       	ret

00001962 <LM35_readTemp>:
* Parameters (out): pu8_Temp - Pointer to a Char to hold the temperature.
* Return value: enuLM35_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current temperature and return in celsius.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLM35_Status_t LM35_readTemp(uint8_t * pu8_Temp)
{
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	00 d0       	rcall	.+0      	; 0x196c <LM35_readTemp+0xa>
    196c:	00 d0       	rcall	.+0      	; 0x196e <LM35_readTemp+0xc>
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	9c 01       	movw	r18, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
    1974:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <genu_LM35ModuleState>
    1978:	95 30       	cpi	r25, 0x05	; 5
    197a:	f1 f4       	brne	.+60     	; 0x19b8 <LM35_readTemp+0x56>
	{
	return LM35_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
    197c:	21 15       	cp	r18, r1
    197e:	31 05       	cpc	r19, r1
    1980:	e9 f0       	breq	.+58     	; 0x19bc <LM35_readTemp+0x5a>
    1982:	89 01       	movw	r16, r18
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
    1984:	19 82       	std	Y+1, r1	; 0x01
    1986:	1a 82       	std	Y+2, r1	; 0x02
    1988:	1b 82       	std	Y+3, r1	; 0x03
    198a:	1c 82       	std	Y+4, r1	; 0x04
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
    198c:	be 01       	movw	r22, r28
    198e:	6f 5f       	subi	r22, 0xFF	; 255
    1990:	7f 4f       	sbci	r23, 0xFF	; 255
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <Adc_start>
    1998:	81 30       	cpi	r24, 0x01	; 1
    199a:	91 f4       	brne	.+36     	; 0x19c0 <LM35_readTemp+0x5e>
		return LM35_STATUS_ERROR_NOK;
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
    199c:	69 81       	ldd	r22, Y+1	; 0x01
    199e:	7a 81       	ldd	r23, Y+2	; 0x02
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	2a e0       	ldi	r18, 0x0A	; 10
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__udivmodsi4>
    19b0:	f8 01       	movw	r30, r16
    19b2:	20 83       	st	Z, r18
	return LM35_STATUS_ERROR_OK;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	05 c0       	rjmp	.+10     	; 0x19c2 <LM35_readTemp+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
	{
	return LM35_STATUS_NOT_INIT;
    19b8:	84 e0       	ldi	r24, 0x04	; 4
    19ba:	03 c0       	rjmp	.+6      	; 0x19c2 <LM35_readTemp+0x60>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
	{
		return LM35_STATUS_ERROR_NULL;
    19bc:	83 e0       	ldi	r24, 0x03	; 3
    19be:	01 c0       	rjmp	.+2      	; 0x19c2 <LM35_readTemp+0x60>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
		return LM35_STATUS_ERROR_NOK;
    19c0:	80 e0       	ldi	r24, 0x00	; 0
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
	return LM35_STATUS_ERROR_OK;
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	08 95       	ret

000019d4 <Motor_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
    19d4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <gu8_MotorModuleStatus>
    19d8:	86 30       	cpi	r24, 0x06	; 6
    19da:	49 f0       	breq	.+18     	; 0x19ee <Motor_init+0x1a>
/**************************************************************************************/
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
    19dc:	0e 94 2b 19 	call	0x3256	; 0x3256 <SWPwm_Init>
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	39 f4       	brne	.+14     	; 0x19f2 <Motor_init+0x1e>
		return MOTOR_STATUS_ERROR_NOK;
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
    19e4:	86 e0       	ldi	r24, 0x06	; 6
    19e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <gu8_MotorModuleStatus>
	return MOTOR_STATUS_ERROR_OK;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_INIT;
    19ee:	86 e0       	ldi	r24, 0x06	; 6
    19f0:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
		return MOTOR_STATUS_ERROR_NOK;
    19f2:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
	return MOTOR_STATUS_ERROR_OK;
}
    19f4:	08 95       	ret

000019f6 <Motor_stop>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the motor.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to stop motor */
enuMotor_Status_t Motor_stop(uint8_t u8_motorID)
{
    19f6:	df 92       	push	r13
    19f8:	ef 92       	push	r14
    19fa:	ff 92       	push	r15
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    1a04:	81 11       	cpse	r24, r1
    1a06:	5d c0       	rjmp	.+186    	; 0x1ac2 <Motor_stop+0xcc>
    1a08:	d8 2e       	mov	r13, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Stop the Motor by driving the pins to LOW */
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    1a0a:	08 2f       	mov	r16, r24
    1a0c:	10 e0       	ldi	r17, 0x00	; 0
    1a0e:	78 01       	movw	r14, r16
    1a10:	ee 0c       	add	r14, r14
    1a12:	ff 1c       	adc	r15, r15
    1a14:	ee 0c       	add	r14, r14
    1a16:	ff 1c       	adc	r15, r15
    1a18:	c7 01       	movw	r24, r14
    1a1a:	80 0f       	add	r24, r16
    1a1c:	91 1f       	adc	r25, r17
    1a1e:	ec 01       	movw	r28, r24
    1a20:	c1 5c       	subi	r28, 0xC1	; 193
    1a22:	db 4f       	sbci	r29, 0xFB	; 251
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1a34:	e0 e0       	ldi	r30, 0x00	; 0
    1a36:	1c c0       	rjmp	.+56     	; 0x1a70 <Motor_stop+0x7a>
	{
		if(u8_loopIndex == u8_motorID) /* Skip the current motor */
    1a38:	ed 15       	cp	r30, r13
    1a3a:	c9 f0       	breq	.+50     	; 0x1a6e <Motor_stop+0x78>
		{
			continue;
		}
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
    1a3c:	d8 01       	movw	r26, r16
    1a3e:	aa 0f       	add	r26, r26
    1a40:	bb 1f       	adc	r27, r27
    1a42:	aa 0f       	add	r26, r26
    1a44:	bb 1f       	adc	r27, r27
    1a46:	a0 0f       	add	r26, r16
    1a48:	b1 1f       	adc	r27, r17
    1a4a:	a1 5c       	subi	r26, 0xC1	; 193
    1a4c:	bb 4f       	sbci	r27, 0xFB	; 251
    1a4e:	2c 91       	ld	r18, X
    1a50:	8e 2f       	mov	r24, r30
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	dc 01       	movw	r26, r24
    1a56:	aa 0f       	add	r26, r26
    1a58:	bb 1f       	adc	r27, r27
    1a5a:	aa 0f       	add	r26, r26
    1a5c:	bb 1f       	adc	r27, r27
    1a5e:	8a 0f       	add	r24, r26
    1a60:	9b 1f       	adc	r25, r27
    1a62:	dc 01       	movw	r26, r24
    1a64:	a1 5c       	subi	r26, 0xC1	; 193
    1a66:	bb 4f       	sbci	r27, 0xFB	; 251
    1a68:	8c 91       	ld	r24, X
    1a6a:	28 17       	cp	r18, r24
    1a6c:	19 f0       	breq	.+6      	; 0x1a74 <Motor_stop+0x7e>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1a6e:	ef 5f       	subi	r30, 0xFF	; 255
    1a70:	ee 23       	and	r30, r30
    1a72:	11 f3       	breq	.-60     	; 0x1a38 <Motor_stop+0x42>
			break;
		}
	}
	
	
	if(u8_loopIndex == MOTORS_USED_NUM)
    1a74:	e1 30       	cpi	r30, 0x01	; 1
    1a76:	69 f4       	brne	.+26     	; 0x1a92 <Motor_stop+0x9c>
	{ /* In case that there isn't any motor using the same PWM Channel --> Stop the PWM */
		SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1a78:	f8 01       	movw	r30, r16
    1a7a:	ee 0f       	add	r30, r30
    1a7c:	ff 1f       	adc	r31, r31
    1a7e:	ee 0f       	add	r30, r30
    1a80:	ff 1f       	adc	r31, r31
    1a82:	e0 0f       	add	r30, r16
    1a84:	f1 1f       	adc	r31, r17
    1a86:	e1 5c       	subi	r30, 0xC1	; 193
    1a88:	fb 4f       	sbci	r31, 0xFB	; 251
    1a8a:	80 81       	ld	r24, Z
    1a8c:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <SWPwm_Stop>
    1a90:	12 c0       	rjmp	.+36     	; 0x1ab6 <Motor_stop+0xc0>
	}else
	{/* In case that there is another motor using the same PWM Channel */
		if (gau8_MotorsState[u8_loopIndex] == MOTOR_STOPPED) /* Check if the other motor is not running */
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	ea 56       	subi	r30, 0x6A	; 106
    1a96:	fb 4f       	sbci	r31, 0xFB	; 251
    1a98:	80 81       	ld	r24, Z
    1a9a:	81 11       	cpse	r24, r1
    1a9c:	0c c0       	rjmp	.+24     	; 0x1ab6 <Motor_stop+0xc0>
		{/* In case that the other motor is not running --> Stop the PWM */
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	ee 0f       	add	r30, r30
    1aa2:	ff 1f       	adc	r31, r31
    1aa4:	ee 0f       	add	r30, r30
    1aa6:	ff 1f       	adc	r31, r31
    1aa8:	e0 0f       	add	r30, r16
    1aaa:	f1 1f       	adc	r31, r17
    1aac:	e1 5c       	subi	r30, 0xC1	; 193
    1aae:	fb 4f       	sbci	r31, 0xFB	; 251
    1ab0:	80 81       	ld	r24, Z
    1ab2:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <SWPwm_Stop>
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
    1ab6:	f8 01       	movw	r30, r16
    1ab8:	ea 56       	subi	r30, 0x6A	; 106
    1aba:	fb 4f       	sbci	r31, 0xFB	; 251
    1abc:	10 82       	st	Z, r1
	return MOTOR_STATUS_ERROR_OK;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	01 c0       	rjmp	.+2      	; 0x1ac4 <Motor_stop+0xce>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    1ac2:	82 e0       	ldi	r24, 0x02	; 2
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
	return MOTOR_STATUS_ERROR_OK;
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	08 95       	ret

00001ad4 <Motor_run>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Move the motor in the given direction.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to move the motor forward with given speed in % */
enuMotor_Status_t Motor_run(uint8_t u8_motorID, uint8_t u8_speed, uint8_t u8_direction)
{
    1ad4:	ff 92       	push	r15
    1ad6:	0f 93       	push	r16
    1ad8:	1f 93       	push	r17
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
    1ade:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <gu8_MotorModuleStatus>
    1ae2:	96 30       	cpi	r25, 0x06	; 6
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <Motor_run+0x14>
    1ae6:	57 c0       	rjmp	.+174    	; 0x1b96 <Motor_run+0xc2>
	{
		return MOTOR_STATUS_UNINIT;
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    1ae8:	81 11       	cpse	r24, r1
    1aea:	57 c0       	rjmp	.+174    	; 0x1b9a <Motor_run+0xc6>
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
    1aec:	65 36       	cpi	r22, 0x65	; 101
    1aee:	08 f0       	brcs	.+2      	; 0x1af2 <Motor_run+0x1e>
    1af0:	56 c0       	rjmp	.+172    	; 0x1b9e <Motor_run+0xca>
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
    1af2:	42 30       	cpi	r20, 0x02	; 2
    1af4:	08 f0       	brcs	.+2      	; 0x1af8 <Motor_run+0x24>
    1af6:	55 c0       	rjmp	.+170    	; 0x1ba2 <Motor_run+0xce>
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
    1af8:	08 2f       	mov	r16, r24
    1afa:	10 e0       	ldi	r17, 0x00	; 0
    1afc:	f8 01       	movw	r30, r16
    1afe:	ea 56       	subi	r30, 0x6A	; 106
    1b00:	fb 4f       	sbci	r31, 0xFB	; 251
    1b02:	90 81       	ld	r25, Z
    1b04:	91 30       	cpi	r25, 0x01	; 1
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <Motor_run+0x36>
    1b08:	4e c0       	rjmp	.+156    	; 0x1ba6 <Motor_run+0xd2>
    1b0a:	f6 2e       	mov	r15, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_speed == 0) 
    1b0c:	61 11       	cpse	r22, r1
    1b0e:	04 c0       	rjmp	.+8      	; 0x1b18 <Motor_run+0x44>
	{
		Motor_stop(u8_motorID);
    1b10:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Motor_stop>
		return MOTOR_STATUS_ERROR_OK;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	48 c0       	rjmp	.+144    	; 0x1ba8 <Motor_run+0xd4>
	}
	if(u8_direction == MOTOR_DIR_CLK_WISE) /* Activate the Motor in the Clock Wise Direction */
    1b18:	41 11       	cpse	r20, r1
    1b1a:	12 c0       	rjmp	.+36     	; 0x1b40 <Motor_run+0x6c>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_HIGH);
    1b1c:	25 e0       	ldi	r18, 0x05	; 5
    1b1e:	20 9f       	mul	r18, r16
    1b20:	c0 01       	movw	r24, r0
    1b22:	21 9f       	mul	r18, r17
    1b24:	90 0d       	add	r25, r0
    1b26:	11 24       	eor	r1, r1
    1b28:	ec 01       	movw	r28, r24
    1b2a:	c1 5c       	subi	r28, 0xC1	; 193
    1b2c:	db 4f       	sbci	r29, 0xFB	; 251
    1b2e:	61 e0       	ldi	r22, 0x01	; 1
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    1b3e:	13 c0       	rjmp	.+38     	; 0x1b66 <Motor_run+0x92>
	}else if(u8_direction == MOTOR_DIR_ANTI_CLK_WISE) /* Activate the Motor in the Anti Clock Wise Direction */
    1b40:	41 30       	cpi	r20, 0x01	; 1
    1b42:	89 f4       	brne	.+34     	; 0x1b66 <Motor_run+0x92>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    1b44:	25 e0       	ldi	r18, 0x05	; 5
    1b46:	20 9f       	mul	r18, r16
    1b48:	c0 01       	movw	r24, r0
    1b4a:	21 9f       	mul	r18, r17
    1b4c:	90 0d       	add	r25, r0
    1b4e:	11 24       	eor	r1, r1
    1b50:	ec 01       	movw	r28, r24
    1b52:	c1 5c       	subi	r28, 0xC1	; 193
    1b54:	db 4f       	sbci	r29, 0xFB	; 251
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_HIGH);
    1b5e:	61 e0       	ldi	r22, 0x01	; 1
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
	}
	
	/* Change the state of the Motor to Running */
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
    1b66:	f8 01       	movw	r30, r16
    1b68:	ea 56       	subi	r30, 0x6A	; 106
    1b6a:	fb 4f       	sbci	r31, 0xFB	; 251
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	80 83       	st	Z, r24
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
    1b70:	f8 01       	movw	r30, r16
    1b72:	ee 0f       	add	r30, r30
    1b74:	ff 1f       	adc	r31, r31
    1b76:	ee 0f       	add	r30, r30
    1b78:	ff 1f       	adc	r31, r31
    1b7a:	e0 0f       	add	r30, r16
    1b7c:	f1 1f       	adc	r31, r17
    1b7e:	e1 5c       	subi	r30, 0xC1	; 193
    1b80:	fb 4f       	sbci	r31, 0xFB	; 251
    1b82:	43 81       	ldd	r20, Z+3	; 0x03
    1b84:	54 81       	ldd	r21, Z+4	; 0x04
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	2f 2d       	mov	r18, r15
    1b8c:	80 81       	ld	r24, Z
    1b8e:	0e 94 47 19 	call	0x328e	; 0x328e <SWPwm_Start>
	
	return MOTOR_STATUS_ERROR_OK;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	09 c0       	rjmp	.+18     	; 0x1ba8 <Motor_run+0xd4>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_UNINIT;
    1b96:	87 e0       	ldi	r24, 0x07	; 7
    1b98:	07 c0       	rjmp	.+14     	; 0x1ba8 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    1b9a:	82 e0       	ldi	r24, 0x02	; 2
    1b9c:	05 c0       	rjmp	.+10     	; 0x1ba8 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
    1b9e:	83 e0       	ldi	r24, 0x03	; 3
    1ba0:	03 c0       	rjmp	.+6      	; 0x1ba8 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
    1ba2:	84 e0       	ldi	r24, 0x04	; 4
    1ba4:	01 c0       	rjmp	.+2      	; 0x1ba8 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
	{
		return MOTOR_STATUS_ERROR_RUNNING;
    1ba6:	85 e0       	ldi	r24, 0x05	; 5
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
	
	return MOTOR_STATUS_ERROR_OK;
}
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	ff 90       	pop	r15
    1bb2:	08 95       	ret

00001bb4 <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
    1bb8:	c0 91 98 04 	lds	r28, 0x0498	; 0x800498 <gu8_counter>
    1bbc:	d0 e0       	ldi	r29, 0x00	; 0
    1bbe:	0e 94 20 1b 	call	0x3640	; 0x3640 <Uart_DataRegister>
    1bc2:	c7 56       	subi	r28, 0x67	; 103
    1bc4:	db 4f       	sbci	r29, 0xFB	; 251
    1bc6:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
    1bc8:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <gu8_counter>
    1bcc:	e9 2f       	mov	r30, r25
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	e7 56       	subi	r30, 0x67	; 103
    1bd2:	fb 4f       	sbci	r31, 0xFB	; 251
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8d 30       	cpi	r24, 0x0D	; 13
    1bd8:	71 f4       	brne	.+28     	; 0x1bf6 <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    1bda:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
    1bde:	e0 91 98 04 	lds	r30, 0x0498	; 0x800498 <gu8_counter>
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	e7 56       	subi	r30, 0x67	; 103
    1be6:	fb 4f       	sbci	r31, 0xFB	; 251
    1be8:	10 82       	st	Z, r1
		gu8_counter = 0;
    1bea:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <gu8_counter>
		gu8_flag = 1;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <gu8_flag>
    1bf4:	1d c0       	rjmp	.+58     	; 0x1c30 <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
    1bf6:	88 30       	cpi	r24, 0x08	; 8
    1bf8:	51 f4       	brne	.+20     	; 0x1c0e <Uart_RXC_ISR+0x5a>
    1bfa:	99 23       	and	r25, r25
    1bfc:	41 f0       	breq	.+16     	; 0x1c0e <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    1bfe:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <Uart_sendByte>
		gu8_counter--;
    1c02:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <gu8_counter>
    1c06:	81 50       	subi	r24, 0x01	; 1
    1c08:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <gu8_counter>
    1c0c:	11 c0       	rjmp	.+34     	; 0x1c30 <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
    1c0e:	88 30       	cpi	r24, 0x08	; 8
    1c10:	79 f0       	breq	.+30     	; 0x1c30 <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
    1c12:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <gu8_visibility>
    1c16:	91 30       	cpi	r25, 0x01	; 1
    1c18:	21 f4       	brne	.+8      	; 0x1c22 <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
    1c1a:	8a e2       	ldi	r24, 0x2A	; 42
    1c1c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <Uart_sendByte>
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
    1c22:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <Uart_sendByte>
		}
		gu8_counter++;
    1c26:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <gu8_counter>
    1c2a:	8f 5f       	subi	r24, 0xFF	; 255
    1c2c:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <gu8_counter>
	}
}
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	08 95       	ret

00001c36 <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
    1c36:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <genu_TerminalModuleState>
    1c3a:	83 30       	cpi	r24, 0x03	; 3
    1c3c:	81 f0       	breq	.+32     	; 0x1c5e <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
    1c3e:	0e 94 c3 1a 	call	0x3586	; 0x3586 <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
    1c42:	81 30       	cpi	r24, 0x01	; 1
    1c44:	11 f0       	breq	.+4      	; 0x1c4a <Terminal_init+0x14>
    1c46:	87 30       	cpi	r24, 0x07	; 7
    1c48:	49 f4       	brne	.+18     	; 0x1c5c <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
    1c4a:	8a ed       	ldi	r24, 0xDA	; 218
    1c4c:	9d e0       	ldi	r25, 0x0D	; 13
    1c4e:	0e 94 0b 1b 	call	0x3616	; 0x3616 <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
    1c52:	83 e0       	ldi	r24, 0x03	; 3
    1c54:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
    1c5e:	08 95       	ret

00001c60 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	81 f0       	breq	.+32     	; 0x1c88 <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    1c68:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <genu_TerminalModuleState>
    1c6c:	22 30       	cpi	r18, 0x02	; 2
    1c6e:	79 f0       	breq	.+30     	; 0x1c8e <Terminal_Out+0x2e>
    1c70:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
    1c72:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <stringLength>
    1c76:	68 2f       	mov	r22, r24
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	21 f0       	breq	.+8      	; 0x1c8c <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	03 c0       	rjmp	.+6      	; 0x1c8e <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    1c88:	24 e0       	ldi	r18, 0x04	; 4
    1c8a:	01 c0       	rjmp	.+2      	; 0x1c8e <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
    1c8c:	21 e0       	ldi	r18, 0x01	; 1
}
    1c8e:	82 2f       	mov	r24, r18
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	08 95       	ret

00001c96 <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
    1c96:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
    1c98:	89 2b       	or	r24, r25
    1c9a:	a1 f0       	breq	.+40     	; 0x1cc4 <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    1c9c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <genu_TerminalModuleState>
    1ca0:	82 30       	cpi	r24, 0x02	; 2
    1ca2:	99 f0       	breq	.+38     	; 0x1cca <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
    1ca4:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <gu8_flag>
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	71 f4       	brne	.+28     	; 0x1cc8 <Terminal_In+0x32>
	{
		gu8_flag = 0;
    1cac:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
    1cb0:	89 e9       	ldi	r24, 0x99	; 153
    1cb2:	94 e0       	ldi	r25, 0x04	; 4
    1cb4:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <stringCopy>
		EmptyString(gau8_data);
    1cb8:	89 e9       	ldi	r24, 0x99	; 153
    1cba:	94 e0       	ldi	r25, 0x04	; 4
    1cbc:	0e 94 32 17 	call	0x2e64	; 0x2e64 <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
    1cc0:	85 e0       	ldi	r24, 0x05	; 5
    1cc2:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    1cc4:	84 e0       	ldi	r24, 0x04	; 4
    1cc6:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
}
    1cca:	08 95       	ret

00001ccc <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
    1cd2:	08 95       	ret

00001cd4 <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
    1cd4:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	08 95       	ret

00001cdc <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
    1cdc:	0e 94 a6 07 	call	0xf4c	; 0xf4c <App_start>
    1ce0:	ff cf       	rjmp	.-2      	; 0x1ce0 <main+0x4>

00001ce2 <Adc_init>:
		f32_Resolution = (1000*ADC_AREF_VALUE)/ADC_STEPS_NUM;
	}
	*pu32_data = u16_Result*f32_Resolution;
		
	return ADC_STATUS_ERROR_OK;
}
    1ce2:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <genuAdc_Status>
    1ce6:	87 30       	cpi	r24, 0x07	; 7
    1ce8:	11 f1       	breq	.+68     	; 0x1d2e <Adc_init+0x4c>
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	13 c0       	rjmp	.+38     	; 0x1d14 <Adc_init+0x32>
    1cee:	3b b3       	in	r19, 0x1b	; 27
    1cf0:	e2 2f       	mov	r30, r18
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	ee 0f       	add	r30, r30
    1cf6:	ff 1f       	adc	r31, r31
    1cf8:	ed 57       	subi	r30, 0x7D	; 125
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	00 80       	ld	r0, Z
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <Adc_init+0x26>
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	0a 94       	dec	r0
    1d0a:	e2 f7       	brpl	.-8      	; 0x1d04 <Adc_init+0x22>
    1d0c:	80 95       	com	r24
    1d0e:	83 23       	and	r24, r19
    1d10:	8b bb       	out	0x1b, r24	; 27
    1d12:	2f 5f       	subi	r18, 0xFF	; 255
    1d14:	22 23       	and	r18, r18
    1d16:	59 f3       	breq	.-42     	; 0x1cee <Adc_init+0xc>
    1d18:	97 e0       	ldi	r25, 0x07	; 7
    1d1a:	96 b9       	out	0x06, r25	; 6
    1d1c:	86 b1       	in	r24, 0x06	; 6
    1d1e:	8f 7d       	andi	r24, 0xDF	; 223
    1d20:	86 b9       	out	0x06, r24	; 6
    1d22:	86 b1       	in	r24, 0x06	; 6
    1d24:	86 b9       	out	0x06, r24	; 6
    1d26:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <genuAdc_Status>
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	08 95       	ret
    1d2e:	88 e0       	ldi	r24, 0x08	; 8
    1d30:	08 95       	ret

00001d32 <Adc_start>:
    1d32:	cf 92       	push	r12
    1d34:	df 92       	push	r13
    1d36:	ef 92       	push	r14
    1d38:	ff 92       	push	r15
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <genuAdc_Status>
    1d42:	97 30       	cpi	r25, 0x07	; 7
    1d44:	09 f0       	breq	.+2      	; 0x1d48 <Adc_start+0x16>
    1d46:	61 c0       	rjmp	.+194    	; 0x1e0a <Adc_start+0xd8>
    1d48:	61 15       	cp	r22, r1
    1d4a:	71 05       	cpc	r23, r1
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <Adc_start+0x1e>
    1d4e:	5f c0       	rjmp	.+190    	; 0x1e0e <Adc_start+0xdc>
    1d50:	37 b1       	in	r19, 0x07	; 7
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	fc 01       	movw	r30, r24
    1d56:	ee 0f       	add	r30, r30
    1d58:	ff 1f       	adc	r31, r31
    1d5a:	ed 57       	subi	r30, 0x7D	; 125
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	20 81       	ld	r18, Z
    1d60:	23 2b       	or	r18, r19
    1d62:	27 b9       	out	0x07, r18	; 7
    1d64:	47 b1       	in	r20, 0x07	; 7
    1d66:	31 81       	ldd	r19, Z+1	; 0x01
    1d68:	50 e4       	ldi	r21, 0x40	; 64
    1d6a:	35 9f       	mul	r19, r21
    1d6c:	90 01       	movw	r18, r0
    1d6e:	11 24       	eor	r1, r1
    1d70:	24 2b       	or	r18, r20
    1d72:	27 b9       	out	0x07, r18	; 7
    1d74:	26 b1       	in	r18, 0x06	; 6
    1d76:	20 68       	ori	r18, 0x80	; 128
    1d78:	26 b9       	out	0x06, r18	; 6
    1d7a:	26 b1       	in	r18, 0x06	; 6
    1d7c:	20 64       	ori	r18, 0x40	; 64
    1d7e:	26 b9       	out	0x06, r18	; 6
    1d80:	34 9b       	sbis	0x06, 4	; 6
    1d82:	fe cf       	rjmp	.-4      	; 0x1d80 <Adc_start+0x4e>
    1d84:	44 b1       	in	r20, 0x04	; 4
    1d86:	25 b1       	in	r18, 0x05	; 5
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	32 2f       	mov	r19, r18
    1d8c:	22 27       	eor	r18, r18
    1d8e:	24 2b       	or	r18, r20
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	fc 01       	movw	r30, r24
    1d96:	ed 57       	subi	r30, 0x7D	; 125
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	81 81       	ldd	r24, Z+1	; 0x01
    1d9c:	83 30       	cpi	r24, 0x03	; 3
    1d9e:	41 f0       	breq	.+16     	; 0x1db0 <Adc_start+0x7e>
    1da0:	81 30       	cpi	r24, 0x01	; 1
    1da2:	69 f0       	breq	.+26     	; 0x1dbe <Adc_start+0x8c>
    1da4:	88 23       	and	r24, r24
    1da6:	a1 f0       	breq	.+40     	; 0x1dd0 <Adc_start+0x9e>
    1da8:	c1 2c       	mov	r12, r1
    1daa:	d1 2c       	mov	r13, r1
    1dac:	76 01       	movw	r14, r12
    1dae:	18 c0       	rjmp	.+48     	; 0x1de0 <Adc_start+0xae>
    1db0:	c1 2c       	mov	r12, r1
    1db2:	d1 2c       	mov	r13, r1
    1db4:	76 01       	movw	r14, r12
    1db6:	68 94       	set
    1db8:	e5 f8       	bld	r14, 5
    1dba:	f6 f8       	bld	r15, 6
    1dbc:	11 c0       	rjmp	.+34     	; 0x1de0 <Adc_start+0xae>
    1dbe:	0f 2e       	mov	r0, r31
    1dc0:	c1 2c       	mov	r12, r1
    1dc2:	f0 e4       	ldi	r31, 0x40	; 64
    1dc4:	df 2e       	mov	r13, r31
    1dc6:	fc e9       	ldi	r31, 0x9C	; 156
    1dc8:	ef 2e       	mov	r14, r31
    1dca:	fd 2c       	mov	r15, r13
    1dcc:	f0 2d       	mov	r31, r0
    1dce:	08 c0       	rjmp	.+16     	; 0x1de0 <Adc_start+0xae>
    1dd0:	0f 2e       	mov	r0, r31
    1dd2:	c1 2c       	mov	r12, r1
    1dd4:	f0 e4       	ldi	r31, 0x40	; 64
    1dd6:	df 2e       	mov	r13, r31
    1dd8:	fc e9       	ldi	r31, 0x9C	; 156
    1dda:	ef 2e       	mov	r14, r31
    1ddc:	fd 2c       	mov	r15, r13
    1dde:	f0 2d       	mov	r31, r0
    1de0:	eb 01       	movw	r28, r22
    1de2:	b9 01       	movw	r22, r18
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__floatunsisf>
    1dec:	a7 01       	movw	r20, r14
    1dee:	96 01       	movw	r18, r12
    1df0:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__mulsf3>
    1df4:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__fixunssfsi>
    1df8:	68 83       	st	Y, r22
    1dfa:	79 83       	std	Y+1, r23	; 0x01
    1dfc:	8a 83       	std	Y+2, r24	; 0x02
    1dfe:	9b 83       	std	Y+3, r25	; 0x03
    1e00:	86 b1       	in	r24, 0x06	; 6
    1e02:	80 61       	ori	r24, 0x10	; 16
    1e04:	86 b9       	out	0x06, r24	; 6
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	03 c0       	rjmp	.+6      	; 0x1e10 <Adc_start+0xde>
    1e0a:	86 e0       	ldi	r24, 0x06	; 6
    1e0c:	01 c0       	rjmp	.+2      	; 0x1e10 <Adc_start+0xde>
    1e0e:	85 e0       	ldi	r24, 0x05	; 5
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	ff 90       	pop	r15
    1e16:	ef 90       	pop	r14
    1e18:	df 90       	pop	r13
    1e1a:	cf 90       	pop	r12
    1e1c:	08 95       	ret

00001e1e <__vector_16>:

ISR(ADC_IRQ)
{
    1e1e:	1f 92       	push	r1
    1e20:	0f 92       	push	r0
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	0f 92       	push	r0
    1e26:	11 24       	eor	r1, r1
    1e28:	2f 93       	push	r18
    1e2a:	3f 93       	push	r19
    1e2c:	4f 93       	push	r20
    1e2e:	5f 93       	push	r21
    1e30:	6f 93       	push	r22
    1e32:	7f 93       	push	r23
    1e34:	8f 93       	push	r24
    1e36:	9f 93       	push	r25
    1e38:	af 93       	push	r26
    1e3a:	bf 93       	push	r27
    1e3c:	ef 93       	push	r30
    1e3e:	ff 93       	push	r31
	(*ADC_CallBackPtr)();
    1e40:	e0 91 99 05 	lds	r30, 0x0599	; 0x800599 <ADC_CallBackPtr>
    1e44:	f0 91 9a 05 	lds	r31, 0x059A	; 0x80059a <ADC_CallBackPtr+0x1>
    1e48:	09 95       	icall
    1e4a:	ff 91       	pop	r31
    1e4c:	ef 91       	pop	r30
    1e4e:	bf 91       	pop	r27
    1e50:	af 91       	pop	r26
    1e52:	9f 91       	pop	r25
    1e54:	8f 91       	pop	r24
    1e56:	7f 91       	pop	r23
    1e58:	6f 91       	pop	r22
    1e5a:	5f 91       	pop	r21
    1e5c:	4f 91       	pop	r20
    1e5e:	3f 91       	pop	r19
    1e60:	2f 91       	pop	r18
    1e62:	0f 90       	pop	r0
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	0f 90       	pop	r0
    1e68:	1f 90       	pop	r1
    1e6a:	18 95       	reti

00001e6c <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
    1e6c:	2f 92       	push	r2
    1e6e:	3f 92       	push	r3
    1e70:	4f 92       	push	r4
    1e72:	5f 92       	push	r5
    1e74:	6f 92       	push	r6
    1e76:	7f 92       	push	r7
    1e78:	8f 92       	push	r8
    1e7a:	9f 92       	push	r9
    1e7c:	af 92       	push	r10
    1e7e:	bf 92       	push	r11
    1e80:	cf 92       	push	r12
    1e82:	df 92       	push	r13
    1e84:	ef 92       	push	r14
    1e86:	ff 92       	push	r15
    1e88:	0f 93       	push	r16
    1e8a:	1f 93       	push	r17
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <Delay_ms+0x26>
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <Delay_ms+0x28>
    1e94:	1f 92       	push	r1
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	22 2e       	mov	r2, r18
    1e9c:	33 2e       	mov	r3, r19
    1e9e:	44 2e       	mov	r4, r20
    1ea0:	55 2e       	mov	r5, r21
    1ea2:	66 2e       	mov	r6, r22
    1ea4:	79 83       	std	Y+1, r23	; 0x01
    1ea6:	8a 83       	std	Y+2, r24	; 0x02
    1ea8:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    1eaa:	91 2c       	mov	r9, r1
    1eac:	1d 82       	std	Y+5, r1	; 0x05
    1eae:	1c 82       	std	Y+4, r1	; 0x04
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	e0 e0       	ldi	r30, 0x00	; 0
    1eb6:	71 2c       	mov	r7, r1
    1eb8:	81 2c       	mov	r8, r1
    1eba:	3d c0       	rjmp	.+122    	; 0x1f36 <Delay_ms+0xca>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
    1ebc:	2c 2d       	mov	r18, r12
    1ebe:	3d 2d       	mov	r19, r13
    1ec0:	4e 2d       	mov	r20, r14
    1ec2:	5f 2d       	mov	r21, r15
    1ec4:	60 2f       	mov	r22, r16
    1ec6:	71 2f       	mov	r23, r17
    1ec8:	8a 2d       	mov	r24, r10
    1eca:	9b 2d       	mov	r25, r11
    1ecc:	a1 e0       	ldi	r26, 0x01	; 1
    1ece:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__adddi3_s8>
    1ed2:	c2 2e       	mov	r12, r18
    1ed4:	d3 2e       	mov	r13, r19
    1ed6:	e4 2e       	mov	r14, r20
    1ed8:	f5 2e       	mov	r15, r21
    1eda:	06 2f       	mov	r16, r22
    1edc:	17 2f       	mov	r17, r23
    1ede:	a8 2e       	mov	r10, r24
    1ee0:	b9 2e       	mov	r11, r25
    1ee2:	08 c0       	rjmp	.+16     	; 0x1ef4 <Delay_ms+0x88>
    1ee4:	c1 2c       	mov	r12, r1
    1ee6:	d1 2c       	mov	r13, r1
    1ee8:	e1 2c       	mov	r14, r1
    1eea:	f1 2c       	mov	r15, r1
    1eec:	00 e0       	ldi	r16, 0x00	; 0
    1eee:	10 e0       	ldi	r17, 0x00	; 0
    1ef0:	a1 2c       	mov	r10, r1
    1ef2:	b1 2c       	mov	r11, r1
    1ef4:	2c 2d       	mov	r18, r12
    1ef6:	3d 2d       	mov	r19, r13
    1ef8:	4e 2d       	mov	r20, r14
    1efa:	5f 2d       	mov	r21, r15
    1efc:	60 2f       	mov	r22, r16
    1efe:	71 2f       	mov	r23, r17
    1f00:	8a 2d       	mov	r24, r10
    1f02:	9b 2d       	mov	r25, r11
    1f04:	ac e0       	ldi	r26, 0x0C	; 12
    1f06:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <__cmpdi2_s8>
    1f0a:	c1 f2       	breq	.-80     	; 0x1ebc <Delay_ms+0x50>
    1f0c:	b8 f2       	brcs	.-82     	; 0x1ebc <Delay_ms+0x50>
    1f0e:	8c 81       	ldd	r24, Y+4	; 0x04

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    1f10:	29 2d       	mov	r18, r9
    1f12:	3d 81       	ldd	r19, Y+5	; 0x05
    1f14:	48 2f       	mov	r20, r24
    1f16:	5b 2f       	mov	r21, r27
    1f18:	6f 2f       	mov	r22, r31
    1f1a:	7e 2f       	mov	r23, r30
    1f1c:	87 2d       	mov	r24, r7
    1f1e:	98 2d       	mov	r25, r8
    1f20:	a1 e0       	ldi	r26, 0x01	; 1
    1f22:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__adddi3_s8>
    1f26:	92 2e       	mov	r9, r18
    1f28:	3d 83       	std	Y+5, r19	; 0x05
    1f2a:	4c 83       	std	Y+4, r20	; 0x04
    1f2c:	b5 2f       	mov	r27, r21
    1f2e:	f6 2f       	mov	r31, r22
    1f30:	e7 2f       	mov	r30, r23
    1f32:	78 2e       	mov	r7, r24
    1f34:	89 2e       	mov	r8, r25
    1f36:	29 2d       	mov	r18, r9
    1f38:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3a:	4c 81       	ldd	r20, Y+4	; 0x04
    1f3c:	5b 2f       	mov	r21, r27
    1f3e:	6f 2f       	mov	r22, r31
    1f40:	7e 2f       	mov	r23, r30
    1f42:	87 2d       	mov	r24, r7
    1f44:	98 2d       	mov	r25, r8
    1f46:	a2 2c       	mov	r10, r2
    1f48:	b3 2c       	mov	r11, r3
    1f4a:	c4 2c       	mov	r12, r4
    1f4c:	d5 2c       	mov	r13, r5
    1f4e:	e6 2c       	mov	r14, r6
    1f50:	f9 80       	ldd	r15, Y+1	; 0x01
    1f52:	0a 81       	ldd	r16, Y+2	; 0x02
    1f54:	1b 81       	ldd	r17, Y+3	; 0x03
    1f56:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__cmpdi2>
    1f5a:	20 f2       	brcs	.-120    	; 0x1ee4 <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	1f 91       	pop	r17
    1f6c:	0f 91       	pop	r16
    1f6e:	ff 90       	pop	r15
    1f70:	ef 90       	pop	r14
    1f72:	df 90       	pop	r13
    1f74:	cf 90       	pop	r12
    1f76:	bf 90       	pop	r11
    1f78:	af 90       	pop	r10
    1f7a:	9f 90       	pop	r9
    1f7c:	8f 90       	pop	r8
    1f7e:	7f 90       	pop	r7
    1f80:	6f 90       	pop	r6
    1f82:	5f 90       	pop	r5
    1f84:	4f 90       	pop	r4
    1f86:	3f 90       	pop	r3
    1f88:	2f 90       	pop	r2
    1f8a:	08 95       	ret

00001f8c <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
    1f8c:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
    1f8e:	89 2b       	or	r24, r25
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <Dio_init+0x8>
    1f92:	e4 c0       	rjmp	.+456    	; 0x215c <Dio_init+0x1d0>
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	d7 c0       	rjmp	.+430    	; 0x2146 <Dio_init+0x1ba>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
    1f98:	e9 2f       	mov	r30, r25
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	ee 0f       	add	r30, r30
    1f9e:	ff 1f       	adc	r31, r31
    1fa0:	ee 0f       	add	r30, r30
    1fa2:	ff 1f       	adc	r31, r31
    1fa4:	e4 0f       	add	r30, r20
    1fa6:	f5 1f       	adc	r31, r21
    1fa8:	31 81       	ldd	r19, Z+1	; 0x01
    1faa:	38 30       	cpi	r19, 0x08	; 8
    1fac:	08 f0       	brcs	.+2      	; 0x1fb0 <Dio_init+0x24>
    1fae:	d8 c0       	rjmp	.+432    	; 0x2160 <Dio_init+0x1d4>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
    1fb0:	20 81       	ld	r18, Z
    1fb2:	21 30       	cpi	r18, 0x01	; 1
    1fb4:	c1 f1       	breq	.+112    	; 0x2026 <Dio_init+0x9a>
    1fb6:	38 f0       	brcs	.+14     	; 0x1fc6 <Dio_init+0x3a>
    1fb8:	22 30       	cpi	r18, 0x02	; 2
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <Dio_init+0x32>
    1fbc:	64 c0       	rjmp	.+200    	; 0x2086 <Dio_init+0xfa>
    1fbe:	23 30       	cpi	r18, 0x03	; 3
    1fc0:	09 f4       	brne	.+2      	; 0x1fc4 <Dio_init+0x38>
    1fc2:	91 c0       	rjmp	.+290    	; 0x20e6 <Dio_init+0x15a>
    1fc4:	cf c0       	rjmp	.+414    	; 0x2164 <Dio_init+0x1d8>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    1fc6:	2a b3       	in	r18, 0x1a	; 26
    1fc8:	61 e0       	ldi	r22, 0x01	; 1
    1fca:	70 e0       	ldi	r23, 0x00	; 0
    1fcc:	db 01       	movw	r26, r22
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <Dio_init+0x48>
    1fd0:	aa 0f       	add	r26, r26
    1fd2:	bb 1f       	adc	r27, r27
    1fd4:	3a 95       	dec	r19
    1fd6:	e2 f7       	brpl	.-8      	; 0x1fd0 <Dio_init+0x44>
    1fd8:	8a 2f       	mov	r24, r26
    1fda:	80 95       	com	r24
    1fdc:	82 23       	and	r24, r18
    1fde:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    1fe0:	aa b3       	in	r26, 0x1a	; 26
    1fe2:	82 81       	ldd	r24, Z+2	; 0x02
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	01 80       	ldd	r0, Z+1	; 0x01
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <Dio_init+0x64>
    1fec:	22 0f       	add	r18, r18
    1fee:	33 1f       	adc	r19, r19
    1ff0:	0a 94       	dec	r0
    1ff2:	e2 f7       	brpl	.-8      	; 0x1fec <Dio_init+0x60>
    1ff4:	2a 2b       	or	r18, r26
    1ff6:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    1ff8:	8b b3       	in	r24, 0x1b	; 27
    1ffa:	01 80       	ldd	r0, Z+1	; 0x01
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <Dio_init+0x76>
    1ffe:	66 0f       	add	r22, r22
    2000:	77 1f       	adc	r23, r23
    2002:	0a 94       	dec	r0
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <Dio_init+0x72>
    2006:	60 95       	com	r22
    2008:	68 23       	and	r22, r24
    200a:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    200c:	6b b3       	in	r22, 0x1b	; 27
    200e:	83 81       	ldd	r24, Z+3	; 0x03
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	01 80       	ldd	r0, Z+1	; 0x01
    2016:	02 c0       	rjmp	.+4      	; 0x201c <Dio_init+0x90>
    2018:	22 0f       	add	r18, r18
    201a:	33 1f       	adc	r19, r19
    201c:	0a 94       	dec	r0
    201e:	e2 f7       	brpl	.-8      	; 0x2018 <Dio_init+0x8c>
    2020:	26 2b       	or	r18, r22
    2022:	2b bb       	out	0x1b, r18	; 27
				break;
    2024:	8f c0       	rjmp	.+286    	; 0x2144 <Dio_init+0x1b8>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2026:	27 b3       	in	r18, 0x17	; 23
    2028:	61 e0       	ldi	r22, 0x01	; 1
    202a:	70 e0       	ldi	r23, 0x00	; 0
    202c:	db 01       	movw	r26, r22
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <Dio_init+0xa8>
    2030:	aa 0f       	add	r26, r26
    2032:	bb 1f       	adc	r27, r27
    2034:	3a 95       	dec	r19
    2036:	e2 f7       	brpl	.-8      	; 0x2030 <Dio_init+0xa4>
    2038:	8a 2f       	mov	r24, r26
    203a:	80 95       	com	r24
    203c:	82 23       	and	r24, r18
    203e:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2040:	a7 b3       	in	r26, 0x17	; 23
    2042:	82 81       	ldd	r24, Z+2	; 0x02
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	01 80       	ldd	r0, Z+1	; 0x01
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <Dio_init+0xc4>
    204c:	22 0f       	add	r18, r18
    204e:	33 1f       	adc	r19, r19
    2050:	0a 94       	dec	r0
    2052:	e2 f7       	brpl	.-8      	; 0x204c <Dio_init+0xc0>
    2054:	2a 2b       	or	r18, r26
    2056:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2058:	88 b3       	in	r24, 0x18	; 24
    205a:	01 80       	ldd	r0, Z+1	; 0x01
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <Dio_init+0xd6>
    205e:	66 0f       	add	r22, r22
    2060:	77 1f       	adc	r23, r23
    2062:	0a 94       	dec	r0
    2064:	e2 f7       	brpl	.-8      	; 0x205e <Dio_init+0xd2>
    2066:	60 95       	com	r22
    2068:	68 23       	and	r22, r24
    206a:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    206c:	68 b3       	in	r22, 0x18	; 24
    206e:	83 81       	ldd	r24, Z+3	; 0x03
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	01 80       	ldd	r0, Z+1	; 0x01
    2076:	02 c0       	rjmp	.+4      	; 0x207c <Dio_init+0xf0>
    2078:	22 0f       	add	r18, r18
    207a:	33 1f       	adc	r19, r19
    207c:	0a 94       	dec	r0
    207e:	e2 f7       	brpl	.-8      	; 0x2078 <Dio_init+0xec>
    2080:	26 2b       	or	r18, r22
    2082:	28 bb       	out	0x18, r18	; 24
				break;
    2084:	5f c0       	rjmp	.+190    	; 0x2144 <Dio_init+0x1b8>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2086:	24 b3       	in	r18, 0x14	; 20
    2088:	61 e0       	ldi	r22, 0x01	; 1
    208a:	70 e0       	ldi	r23, 0x00	; 0
    208c:	db 01       	movw	r26, r22
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <Dio_init+0x108>
    2090:	aa 0f       	add	r26, r26
    2092:	bb 1f       	adc	r27, r27
    2094:	3a 95       	dec	r19
    2096:	e2 f7       	brpl	.-8      	; 0x2090 <Dio_init+0x104>
    2098:	8a 2f       	mov	r24, r26
    209a:	80 95       	com	r24
    209c:	82 23       	and	r24, r18
    209e:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    20a0:	a4 b3       	in	r26, 0x14	; 20
    20a2:	82 81       	ldd	r24, Z+2	; 0x02
    20a4:	28 2f       	mov	r18, r24
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	01 80       	ldd	r0, Z+1	; 0x01
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <Dio_init+0x124>
    20ac:	22 0f       	add	r18, r18
    20ae:	33 1f       	adc	r19, r19
    20b0:	0a 94       	dec	r0
    20b2:	e2 f7       	brpl	.-8      	; 0x20ac <Dio_init+0x120>
    20b4:	2a 2b       	or	r18, r26
    20b6:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    20b8:	85 b3       	in	r24, 0x15	; 21
    20ba:	01 80       	ldd	r0, Z+1	; 0x01
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <Dio_init+0x136>
    20be:	66 0f       	add	r22, r22
    20c0:	77 1f       	adc	r23, r23
    20c2:	0a 94       	dec	r0
    20c4:	e2 f7       	brpl	.-8      	; 0x20be <Dio_init+0x132>
    20c6:	60 95       	com	r22
    20c8:	68 23       	and	r22, r24
    20ca:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    20cc:	65 b3       	in	r22, 0x15	; 21
    20ce:	83 81       	ldd	r24, Z+3	; 0x03
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	01 80       	ldd	r0, Z+1	; 0x01
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <Dio_init+0x150>
    20d8:	22 0f       	add	r18, r18
    20da:	33 1f       	adc	r19, r19
    20dc:	0a 94       	dec	r0
    20de:	e2 f7       	brpl	.-8      	; 0x20d8 <Dio_init+0x14c>
    20e0:	26 2b       	or	r18, r22
    20e2:	25 bb       	out	0x15, r18	; 21
				break;
    20e4:	2f c0       	rjmp	.+94     	; 0x2144 <Dio_init+0x1b8>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    20e6:	21 b3       	in	r18, 0x11	; 17
    20e8:	61 e0       	ldi	r22, 0x01	; 1
    20ea:	70 e0       	ldi	r23, 0x00	; 0
    20ec:	db 01       	movw	r26, r22
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <Dio_init+0x168>
    20f0:	aa 0f       	add	r26, r26
    20f2:	bb 1f       	adc	r27, r27
    20f4:	3a 95       	dec	r19
    20f6:	e2 f7       	brpl	.-8      	; 0x20f0 <Dio_init+0x164>
    20f8:	8a 2f       	mov	r24, r26
    20fa:	80 95       	com	r24
    20fc:	82 23       	and	r24, r18
    20fe:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2100:	a1 b3       	in	r26, 0x11	; 17
    2102:	82 81       	ldd	r24, Z+2	; 0x02
    2104:	28 2f       	mov	r18, r24
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	01 80       	ldd	r0, Z+1	; 0x01
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <Dio_init+0x184>
    210c:	22 0f       	add	r18, r18
    210e:	33 1f       	adc	r19, r19
    2110:	0a 94       	dec	r0
    2112:	e2 f7       	brpl	.-8      	; 0x210c <Dio_init+0x180>
    2114:	2a 2b       	or	r18, r26
    2116:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2118:	82 b3       	in	r24, 0x12	; 18
    211a:	01 80       	ldd	r0, Z+1	; 0x01
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <Dio_init+0x196>
    211e:	66 0f       	add	r22, r22
    2120:	77 1f       	adc	r23, r23
    2122:	0a 94       	dec	r0
    2124:	e2 f7       	brpl	.-8      	; 0x211e <Dio_init+0x192>
    2126:	60 95       	com	r22
    2128:	68 23       	and	r22, r24
    212a:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    212c:	62 b3       	in	r22, 0x12	; 18
    212e:	83 81       	ldd	r24, Z+3	; 0x03
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	01 80       	ldd	r0, Z+1	; 0x01
    2136:	02 c0       	rjmp	.+4      	; 0x213c <Dio_init+0x1b0>
    2138:	22 0f       	add	r18, r18
    213a:	33 1f       	adc	r19, r19
    213c:	0a 94       	dec	r0
    213e:	e2 f7       	brpl	.-8      	; 0x2138 <Dio_init+0x1ac>
    2140:	26 2b       	or	r18, r22
    2142:	22 bb       	out	0x12, r18	; 18
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
    2144:	9f 5f       	subi	r25, 0xFF	; 255
    2146:	94 31       	cpi	r25, 0x14	; 20
    2148:	08 f4       	brcc	.+2      	; 0x214c <Dio_init+0x1c0>
    214a:	26 cf       	rjmp	.-436    	; 0x1f98 <Dio_init+0xc>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
    214c:	50 93 9d 05 	sts	0x059D, r21	; 0x80059d <pstrDio_pinsConfig+0x1>
    2150:	40 93 9c 05 	sts	0x059C, r20	; 0x80059c <pstrDio_pinsConfig>
	u8_Dio_Status = DIO_INITIALIZED;
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
    215a:	08 95       	ret
{
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
    215c:	85 e0       	ldi	r24, 0x05	; 5
    215e:	08 95       	ret
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
    2160:	83 e0       	ldi	r24, 0x03	; 3
    2162:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
    2164:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
    2166:	08 95       	ret

00002168 <Dio_writePin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    2168:	85 31       	cpi	r24, 0x15	; 21
    216a:	08 f0       	brcs	.+2      	; 0x216e <Dio_writePin+0x6>
    216c:	90 c0       	rjmp	.+288    	; 0x228e <Dio_writePin+0x126>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    216e:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <u8_Dio_Status>
    2172:	99 23       	and	r25, r25
    2174:	09 f4       	brne	.+2      	; 0x2178 <Dio_writePin+0x10>
    2176:	8d c0       	rjmp	.+282    	; 0x2292 <Dio_writePin+0x12a>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    2178:	e8 2f       	mov	r30, r24
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	cf 01       	movw	r24, r30
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	e0 91 9c 05 	lds	r30, 0x059C	; 0x80059c <pstrDio_pinsConfig>
    218a:	f0 91 9d 05 	lds	r31, 0x059D	; 0x80059d <pstrDio_pinsConfig+0x1>
    218e:	e8 0f       	add	r30, r24
    2190:	f9 1f       	adc	r31, r25
    2192:	80 81       	ld	r24, Z
    2194:	81 30       	cpi	r24, 0x01	; 1
    2196:	21 f1       	breq	.+72     	; 0x21e0 <Dio_writePin+0x78>
    2198:	30 f0       	brcs	.+12     	; 0x21a6 <Dio_writePin+0x3e>
    219a:	82 30       	cpi	r24, 0x02	; 2
    219c:	f1 f1       	breq	.+124    	; 0x221a <Dio_writePin+0xb2>
    219e:	83 30       	cpi	r24, 0x03	; 3
    21a0:	09 f4       	brne	.+2      	; 0x21a4 <Dio_writePin+0x3c>
    21a2:	58 c0       	rjmp	.+176    	; 0x2254 <Dio_writePin+0xec>
    21a4:	78 c0       	rjmp	.+240    	; 0x2296 <Dio_writePin+0x12e>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
    21a6:	61 30       	cpi	r22, 0x01	; 1
    21a8:	69 f4       	brne	.+26     	; 0x21c4 <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    21aa:	2b b3       	in	r18, 0x1b	; 27
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	01 80       	ldd	r0, Z+1	; 0x01
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <Dio_writePin+0x50>
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	0a 94       	dec	r0
    21ba:	e2 f7       	brpl	.-8      	; 0x21b4 <Dio_writePin+0x4c>
    21bc:	82 2b       	or	r24, r18
    21be:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    21c4:	2b b3       	in	r18, 0x1b	; 27
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	01 80       	ldd	r0, Z+1	; 0x01
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <Dio_writePin+0x6a>
    21ce:	88 0f       	add	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	0a 94       	dec	r0
    21d4:	e2 f7       	brpl	.-8      	; 0x21ce <Dio_writePin+0x66>
    21d6:	80 95       	com	r24
    21d8:	82 23       	and	r24, r18
    21da:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
    21e0:	61 30       	cpi	r22, 0x01	; 1
    21e2:	69 f4       	brne	.+26     	; 0x21fe <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    21e4:	28 b3       	in	r18, 0x18	; 24
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	01 80       	ldd	r0, Z+1	; 0x01
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <Dio_writePin+0x8a>
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	0a 94       	dec	r0
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <Dio_writePin+0x86>
    21f6:	82 2b       	or	r24, r18
    21f8:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    21fe:	28 b3       	in	r18, 0x18	; 24
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	01 80       	ldd	r0, Z+1	; 0x01
    2206:	02 c0       	rjmp	.+4      	; 0x220c <Dio_writePin+0xa4>
    2208:	88 0f       	add	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	0a 94       	dec	r0
    220e:	e2 f7       	brpl	.-8      	; 0x2208 <Dio_writePin+0xa0>
    2210:	80 95       	com	r24
    2212:	82 23       	and	r24, r18
    2214:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
    221a:	61 30       	cpi	r22, 0x01	; 1
    221c:	69 f4       	brne	.+26     	; 0x2238 <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    221e:	25 b3       	in	r18, 0x15	; 21
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	01 80       	ldd	r0, Z+1	; 0x01
    2226:	02 c0       	rjmp	.+4      	; 0x222c <Dio_writePin+0xc4>
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	0a 94       	dec	r0
    222e:	e2 f7       	brpl	.-8      	; 0x2228 <Dio_writePin+0xc0>
    2230:	82 2b       	or	r24, r18
    2232:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2238:	25 b3       	in	r18, 0x15	; 21
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	01 80       	ldd	r0, Z+1	; 0x01
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <Dio_writePin+0xde>
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	0a 94       	dec	r0
    2248:	e2 f7       	brpl	.-8      	; 0x2242 <Dio_writePin+0xda>
    224a:	80 95       	com	r24
    224c:	82 23       	and	r24, r18
    224e:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
    2254:	61 30       	cpi	r22, 0x01	; 1
    2256:	69 f4       	brne	.+26     	; 0x2272 <Dio_writePin+0x10a>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2258:	22 b3       	in	r18, 0x12	; 18
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	01 80       	ldd	r0, Z+1	; 0x01
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <Dio_writePin+0xfe>
    2262:	88 0f       	add	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	0a 94       	dec	r0
    2268:	e2 f7       	brpl	.-8      	; 0x2262 <Dio_writePin+0xfa>
    226a:	82 2b       	or	r24, r18
    226c:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2272:	22 b3       	in	r18, 0x12	; 18
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	01 80       	ldd	r0, Z+1	; 0x01
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <Dio_writePin+0x118>
    227c:	88 0f       	add	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	0a 94       	dec	r0
    2282:	e2 f7       	brpl	.-8      	; 0x227c <Dio_writePin+0x114>
    2284:	80 95       	com	r24
    2286:	82 23       	and	r24, r18
    2288:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	08 95       	ret
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    228e:	82 e0       	ldi	r24, 0x02	; 2
    2290:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    2292:	86 e0       	ldi	r24, 0x06	; 6
    2294:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    2296:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
    2298:	08 95       	ret

0000229a <Dio_togglePin>:
* Description: Function to Toggle data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    229a:	85 31       	cpi	r24, 0x15	; 21
    229c:	08 f0       	brcs	.+2      	; 0x22a0 <Dio_togglePin+0x6>
    229e:	4f c0       	rjmp	.+158    	; 0x233e <Dio_togglePin+0xa4>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    22a0:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <u8_Dio_Status>
    22a4:	99 23       	and	r25, r25
    22a6:	09 f4       	brne	.+2      	; 0x22aa <Dio_togglePin+0x10>
    22a8:	4c c0       	rjmp	.+152    	; 0x2342 <Dio_togglePin+0xa8>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    22aa:	e8 2f       	mov	r30, r24
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	cf 01       	movw	r24, r30
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	88 0f       	add	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	e0 91 9c 05 	lds	r30, 0x059C	; 0x80059c <pstrDio_pinsConfig>
    22bc:	f0 91 9d 05 	lds	r31, 0x059D	; 0x80059d <pstrDio_pinsConfig+0x1>
    22c0:	e8 0f       	add	r30, r24
    22c2:	f9 1f       	adc	r31, r25
    22c4:	80 81       	ld	r24, Z
    22c6:	81 30       	cpi	r24, 0x01	; 1
    22c8:	99 f0       	breq	.+38     	; 0x22f0 <Dio_togglePin+0x56>
    22ca:	28 f0       	brcs	.+10     	; 0x22d6 <Dio_togglePin+0x3c>
    22cc:	82 30       	cpi	r24, 0x02	; 2
    22ce:	e9 f0       	breq	.+58     	; 0x230a <Dio_togglePin+0x70>
    22d0:	83 30       	cpi	r24, 0x03	; 3
    22d2:	41 f1       	breq	.+80     	; 0x2324 <Dio_togglePin+0x8a>
    22d4:	38 c0       	rjmp	.+112    	; 0x2346 <Dio_togglePin+0xac>
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    22d6:	2b b3       	in	r18, 0x1b	; 27
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	01 80       	ldd	r0, Z+1	; 0x01
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <Dio_togglePin+0x4a>
    22e0:	88 0f       	add	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	0a 94       	dec	r0
    22e6:	e2 f7       	brpl	.-8      	; 0x22e0 <Dio_togglePin+0x46>
    22e8:	82 27       	eor	r24, r18
    22ea:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    22ee:	08 95       	ret
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    22f0:	28 b3       	in	r18, 0x18	; 24
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	01 80       	ldd	r0, Z+1	; 0x01
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <Dio_togglePin+0x64>
    22fa:	88 0f       	add	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	0a 94       	dec	r0
    2300:	e2 f7       	brpl	.-8      	; 0x22fa <Dio_togglePin+0x60>
    2302:	82 27       	eor	r24, r18
    2304:	88 bb       	out	0x18, r24	; 24
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    2306:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    2308:	08 95       	ret
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    230a:	25 b3       	in	r18, 0x15	; 21
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	01 80       	ldd	r0, Z+1	; 0x01
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <Dio_togglePin+0x7e>
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	0a 94       	dec	r0
    231a:	e2 f7       	brpl	.-8      	; 0x2314 <Dio_togglePin+0x7a>
    231c:	82 27       	eor	r24, r18
    231e:	85 bb       	out	0x15, r24	; 21
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    2320:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    2322:	08 95       	ret
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2324:	22 b3       	in	r18, 0x12	; 18
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	01 80       	ldd	r0, Z+1	; 0x01
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <Dio_togglePin+0x98>
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	0a 94       	dec	r0
    2334:	e2 f7       	brpl	.-8      	; 0x232e <Dio_togglePin+0x94>
    2336:	82 27       	eor	r24, r18
    2338:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    233a:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    233c:	08 95       	ret
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    2342:	86 e0       	ldi	r24, 0x06	; 6
    2344:	08 95       	ret
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    2346:	84 e0       	ldi	r24, 0x04	; 4
	}	
	return DIO_STATUS_ERROR_OK;
}
    2348:	08 95       	ret

0000234a <Dio_readPin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    234a:	85 31       	cpi	r24, 0x15	; 21
    234c:	08 f0       	brcs	.+2      	; 0x2350 <Dio_readPin+0x6>
    234e:	7c c0       	rjmp	.+248    	; 0x2448 <Dio_readPin+0xfe>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    2350:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <u8_Dio_Status>
    2354:	99 23       	and	r25, r25
    2356:	09 f4       	brne	.+2      	; 0x235a <Dio_readPin+0x10>
    2358:	79 c0       	rjmp	.+242    	; 0x244c <Dio_readPin+0x102>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    235a:	e8 2f       	mov	r30, r24
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	cf 01       	movw	r24, r30
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	e0 91 9c 05 	lds	r30, 0x059C	; 0x80059c <pstrDio_pinsConfig>
    236c:	f0 91 9d 05 	lds	r31, 0x059D	; 0x80059d <pstrDio_pinsConfig+0x1>
    2370:	e8 0f       	add	r30, r24
    2372:	f9 1f       	adc	r31, r25
    2374:	80 81       	ld	r24, Z
    2376:	81 30       	cpi	r24, 0x01	; 1
    2378:	f9 f0       	breq	.+62     	; 0x23b8 <Dio_readPin+0x6e>
    237a:	30 f0       	brcs	.+12     	; 0x2388 <Dio_readPin+0x3e>
    237c:	82 30       	cpi	r24, 0x02	; 2
    237e:	a1 f1       	breq	.+104    	; 0x23e8 <Dio_readPin+0x9e>
    2380:	83 30       	cpi	r24, 0x03	; 3
    2382:	09 f4       	brne	.+2      	; 0x2386 <Dio_readPin+0x3c>
    2384:	49 c0       	rjmp	.+146    	; 0x2418 <Dio_readPin+0xce>
    2386:	64 c0       	rjmp	.+200    	; 0x2450 <Dio_readPin+0x106>
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2388:	49 b3       	in	r20, 0x19	; 25
    238a:	51 81       	ldd	r21, Z+1	; 0x01
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	9c 01       	movw	r18, r24
    2392:	05 2e       	mov	r0, r21
    2394:	02 c0       	rjmp	.+4      	; 0x239a <Dio_readPin+0x50>
    2396:	22 0f       	add	r18, r18
    2398:	33 1f       	adc	r19, r19
    239a:	0a 94       	dec	r0
    239c:	e2 f7       	brpl	.-8      	; 0x2396 <Dio_readPin+0x4c>
    239e:	84 2f       	mov	r24, r20
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	82 23       	and	r24, r18
    23a4:	93 23       	and	r25, r19
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <Dio_readPin+0x62>
    23a8:	95 95       	asr	r25
    23aa:	87 95       	ror	r24
    23ac:	5a 95       	dec	r21
    23ae:	e2 f7       	brpl	.-8      	; 0x23a8 <Dio_readPin+0x5e>
    23b0:	fb 01       	movw	r30, r22
    23b2:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    23b4:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    23b6:	08 95       	ret
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    23b8:	46 b3       	in	r20, 0x16	; 22
    23ba:	51 81       	ldd	r21, Z+1	; 0x01
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	9c 01       	movw	r18, r24
    23c2:	05 2e       	mov	r0, r21
    23c4:	02 c0       	rjmp	.+4      	; 0x23ca <Dio_readPin+0x80>
    23c6:	22 0f       	add	r18, r18
    23c8:	33 1f       	adc	r19, r19
    23ca:	0a 94       	dec	r0
    23cc:	e2 f7       	brpl	.-8      	; 0x23c6 <Dio_readPin+0x7c>
    23ce:	84 2f       	mov	r24, r20
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	82 23       	and	r24, r18
    23d4:	93 23       	and	r25, r19
    23d6:	02 c0       	rjmp	.+4      	; 0x23dc <Dio_readPin+0x92>
    23d8:	95 95       	asr	r25
    23da:	87 95       	ror	r24
    23dc:	5a 95       	dec	r21
    23de:	e2 f7       	brpl	.-8      	; 0x23d8 <Dio_readPin+0x8e>
    23e0:	fb 01       	movw	r30, r22
    23e2:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    23e6:	08 95       	ret
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    23e8:	43 b3       	in	r20, 0x13	; 19
    23ea:	51 81       	ldd	r21, Z+1	; 0x01
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	9c 01       	movw	r18, r24
    23f2:	05 2e       	mov	r0, r21
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <Dio_readPin+0xb0>
    23f6:	22 0f       	add	r18, r18
    23f8:	33 1f       	adc	r19, r19
    23fa:	0a 94       	dec	r0
    23fc:	e2 f7       	brpl	.-8      	; 0x23f6 <Dio_readPin+0xac>
    23fe:	84 2f       	mov	r24, r20
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	82 23       	and	r24, r18
    2404:	93 23       	and	r25, r19
    2406:	02 c0       	rjmp	.+4      	; 0x240c <Dio_readPin+0xc2>
    2408:	95 95       	asr	r25
    240a:	87 95       	ror	r24
    240c:	5a 95       	dec	r21
    240e:	e2 f7       	brpl	.-8      	; 0x2408 <Dio_readPin+0xbe>
    2410:	fb 01       	movw	r30, r22
    2412:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2414:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2416:	08 95       	ret
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2418:	40 b3       	in	r20, 0x10	; 16
    241a:	51 81       	ldd	r21, Z+1	; 0x01
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	9c 01       	movw	r18, r24
    2422:	05 2e       	mov	r0, r21
    2424:	02 c0       	rjmp	.+4      	; 0x242a <Dio_readPin+0xe0>
    2426:	22 0f       	add	r18, r18
    2428:	33 1f       	adc	r19, r19
    242a:	0a 94       	dec	r0
    242c:	e2 f7       	brpl	.-8      	; 0x2426 <Dio_readPin+0xdc>
    242e:	84 2f       	mov	r24, r20
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	82 23       	and	r24, r18
    2434:	93 23       	and	r25, r19
    2436:	02 c0       	rjmp	.+4      	; 0x243c <Dio_readPin+0xf2>
    2438:	95 95       	asr	r25
    243a:	87 95       	ror	r24
    243c:	5a 95       	dec	r21
    243e:	e2 f7       	brpl	.-8      	; 0x2438 <Dio_readPin+0xee>
    2440:	fb 01       	movw	r30, r22
    2442:	80 83       	st	Z, r24
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2444:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2446:	08 95       	ret
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    2448:	82 e0       	ldi	r24, 0x02	; 2
    244a:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    244c:	86 e0       	ldi	r24, 0x06	; 6
    244e:	08 95       	ret
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    2450:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
    2452:	08 95       	ret

00002454 <__vector_1>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
    2454:	1f 92       	push	r1
    2456:	0f 92       	push	r0
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	0f 92       	push	r0
    245c:	11 24       	eor	r1, r1
    245e:	2f 93       	push	r18
    2460:	3f 93       	push	r19
    2462:	4f 93       	push	r20
    2464:	5f 93       	push	r21
    2466:	6f 93       	push	r22
    2468:	7f 93       	push	r23
    246a:	8f 93       	push	r24
    246c:	9f 93       	push	r25
    246e:	af 93       	push	r26
    2470:	bf 93       	push	r27
    2472:	ef 93       	push	r30
    2474:	ff 93       	push	r31
    2476:	e0 91 a2 05 	lds	r30, 0x05A2	; 0x8005a2 <INT0_CallBackPtr>
    247a:	f0 91 a3 05 	lds	r31, 0x05A3	; 0x8005a3 <INT0_CallBackPtr+0x1>
    247e:	09 95       	icall
    2480:	ff 91       	pop	r31
    2482:	ef 91       	pop	r30
    2484:	bf 91       	pop	r27
    2486:	af 91       	pop	r26
    2488:	9f 91       	pop	r25
    248a:	8f 91       	pop	r24
    248c:	7f 91       	pop	r23
    248e:	6f 91       	pop	r22
    2490:	5f 91       	pop	r21
    2492:	4f 91       	pop	r20
    2494:	3f 91       	pop	r19
    2496:	2f 91       	pop	r18
    2498:	0f 90       	pop	r0
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	0f 90       	pop	r0
    249e:	1f 90       	pop	r1
    24a0:	18 95       	reti

000024a2 <__vector_2>:
    24a2:	1f 92       	push	r1
    24a4:	0f 92       	push	r0
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	0f 92       	push	r0
    24aa:	11 24       	eor	r1, r1
    24ac:	2f 93       	push	r18
    24ae:	3f 93       	push	r19
    24b0:	4f 93       	push	r20
    24b2:	5f 93       	push	r21
    24b4:	6f 93       	push	r22
    24b6:	7f 93       	push	r23
    24b8:	8f 93       	push	r24
    24ba:	9f 93       	push	r25
    24bc:	af 93       	push	r26
    24be:	bf 93       	push	r27
    24c0:	ef 93       	push	r30
    24c2:	ff 93       	push	r31
    24c4:	e0 91 a0 05 	lds	r30, 0x05A0	; 0x8005a0 <INT1_CallBackPtr>
    24c8:	f0 91 a1 05 	lds	r31, 0x05A1	; 0x8005a1 <INT1_CallBackPtr+0x1>
    24cc:	09 95       	icall
    24ce:	ff 91       	pop	r31
    24d0:	ef 91       	pop	r30
    24d2:	bf 91       	pop	r27
    24d4:	af 91       	pop	r26
    24d6:	9f 91       	pop	r25
    24d8:	8f 91       	pop	r24
    24da:	7f 91       	pop	r23
    24dc:	6f 91       	pop	r22
    24de:	5f 91       	pop	r21
    24e0:	4f 91       	pop	r20
    24e2:	3f 91       	pop	r19
    24e4:	2f 91       	pop	r18
    24e6:	0f 90       	pop	r0
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	0f 90       	pop	r0
    24ec:	1f 90       	pop	r1
    24ee:	18 95       	reti

000024f0 <__vector_3>:
}
ISR(INT2_IRQ)
{
    24f0:	1f 92       	push	r1
    24f2:	0f 92       	push	r0
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	0f 92       	push	r0
    24f8:	11 24       	eor	r1, r1
    24fa:	2f 93       	push	r18
    24fc:	3f 93       	push	r19
    24fe:	4f 93       	push	r20
    2500:	5f 93       	push	r21
    2502:	6f 93       	push	r22
    2504:	7f 93       	push	r23
    2506:	8f 93       	push	r24
    2508:	9f 93       	push	r25
    250a:	af 93       	push	r26
    250c:	bf 93       	push	r27
    250e:	ef 93       	push	r30
    2510:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
    2512:	e0 91 9e 05 	lds	r30, 0x059E	; 0x80059e <INT2_CallBackPtr>
    2516:	f0 91 9f 05 	lds	r31, 0x059F	; 0x80059f <INT2_CallBackPtr+0x1>
    251a:	09 95       	icall
}
    251c:	ff 91       	pop	r31
    251e:	ef 91       	pop	r30
    2520:	bf 91       	pop	r27
    2522:	af 91       	pop	r26
    2524:	9f 91       	pop	r25
    2526:	8f 91       	pop	r24
    2528:	7f 91       	pop	r23
    252a:	6f 91       	pop	r22
    252c:	5f 91       	pop	r21
    252e:	4f 91       	pop	r20
    2530:	3f 91       	pop	r19
    2532:	2f 91       	pop	r18
    2534:	0f 90       	pop	r0
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	0f 90       	pop	r0
    253a:	1f 90       	pop	r1
    253c:	18 95       	reti

0000253e <Gpt_ISRHandler>:
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_EXPIRED;
	return GPT_STATUS_ERROR_OK;
}
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	0e c0       	rjmp	.+28     	; 0x255e <Gpt_ISRHandler+0x20>
    2542:	29 2f       	mov	r18, r25
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	f9 01       	movw	r30, r18
    2548:	ee 0f       	add	r30, r30
    254a:	ff 1f       	adc	r31, r31
    254c:	2e 0f       	add	r18, r30
    254e:	3f 1f       	adc	r19, r31
    2550:	f9 01       	movw	r30, r18
    2552:	ec 5b       	subi	r30, 0xBC	; 188
    2554:	fb 4f       	sbci	r31, 0xFB	; 251
    2556:	20 81       	ld	r18, Z
    2558:	28 17       	cp	r18, r24
    255a:	19 f0       	breq	.+6      	; 0x2562 <Gpt_ISRHandler+0x24>
    255c:	9f 5f       	subi	r25, 0xFF	; 255
    255e:	99 23       	and	r25, r25
    2560:	81 f3       	breq	.-32     	; 0x2542 <Gpt_ISRHandler+0x4>
    2562:	89 2f       	mov	r24, r25
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	fc 01       	movw	r30, r24
    2568:	ee 0f       	add	r30, r30
    256a:	ff 1f       	adc	r31, r31
    256c:	ee 0f       	add	r30, r30
    256e:	ff 1f       	adc	r31, r31
    2570:	eb 55       	subi	r30, 0x5B	; 91
    2572:	fa 4f       	sbci	r31, 0xFA	; 250
    2574:	40 81       	ld	r20, Z
    2576:	51 81       	ldd	r21, Z+1	; 0x01
    2578:	62 81       	ldd	r22, Z+2	; 0x02
    257a:	73 81       	ldd	r23, Z+3	; 0x03
    257c:	41 15       	cp	r20, r1
    257e:	51 05       	cpc	r21, r1
    2580:	61 05       	cpc	r22, r1
    2582:	71 05       	cpc	r23, r1
    2584:	81 f0       	breq	.+32     	; 0x25a6 <Gpt_ISRHandler+0x68>
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	88 0f       	add	r24, r24
    258c:	99 1f       	adc	r25, r25
    258e:	fc 01       	movw	r30, r24
    2590:	eb 55       	subi	r30, 0x5B	; 91
    2592:	fa 4f       	sbci	r31, 0xFA	; 250
    2594:	41 50       	subi	r20, 0x01	; 1
    2596:	51 09       	sbc	r21, r1
    2598:	61 09       	sbc	r22, r1
    259a:	71 09       	sbc	r23, r1
    259c:	40 83       	st	Z, r20
    259e:	51 83       	std	Z+1, r21	; 0x01
    25a0:	62 83       	std	Z+2, r22	; 0x02
    25a2:	73 83       	std	Z+3, r23	; 0x03
    25a4:	08 95       	ret
    25a6:	23 b7       	in	r18, 0x33	; 51
    25a8:	2e 7f       	andi	r18, 0xFE	; 254
    25aa:	23 bf       	out	0x33, r18	; 51
    25ac:	23 b7       	in	r18, 0x33	; 51
    25ae:	2d 7f       	andi	r18, 0xFD	; 253
    25b0:	23 bf       	out	0x33, r18	; 51
    25b2:	23 b7       	in	r18, 0x33	; 51
    25b4:	2b 7f       	andi	r18, 0xFB	; 251
    25b6:	23 bf       	out	0x33, r18	; 51
    25b8:	29 b7       	in	r18, 0x39	; 57
    25ba:	2e 7f       	andi	r18, 0xFE	; 254
    25bc:	29 bf       	out	0x39, r18	; 57
    25be:	fc 01       	movw	r30, r24
    25c0:	e7 55       	subi	r30, 0x57	; 87
    25c2:	fa 4f       	sbci	r31, 0xFA	; 250
    25c4:	24 e0       	ldi	r18, 0x04	; 4
    25c6:	20 83       	st	Z, r18
    25c8:	e0 91 aa 05 	lds	r30, 0x05AA	; 0x8005aa <Gpt_Timer0_CallBackPtr>
    25cc:	f0 91 ab 05 	lds	r31, 0x05AB	; 0x8005ab <Gpt_Timer0_CallBackPtr+0x1>
    25d0:	09 95       	icall
    25d2:	08 95       	ret

000025d4 <GptInit>:
    25d4:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <genu_GPTModStatus>
    25d8:	81 30       	cpi	r24, 0x01	; 1
    25da:	61 f1       	breq	.+88     	; 0x2634 <GptInit+0x60>
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	24 c0       	rjmp	.+72     	; 0x2628 <GptInit+0x54>
    25e0:	82 2f       	mov	r24, r18
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	fc 01       	movw	r30, r24
    25e6:	ee 0f       	add	r30, r30
    25e8:	ff 1f       	adc	r31, r31
    25ea:	e8 0f       	add	r30, r24
    25ec:	f9 1f       	adc	r31, r25
    25ee:	ec 5b       	subi	r30, 0xBC	; 188
    25f0:	fb 4f       	sbci	r31, 0xFB	; 251
    25f2:	30 81       	ld	r19, Z
    25f4:	33 23       	and	r19, r19
    25f6:	19 f0       	breq	.+6      	; 0x25fe <GptInit+0x2a>
    25f8:	33 30       	cpi	r19, 0x03	; 3
    25fa:	f0 f4       	brcc	.+60     	; 0x2638 <GptInit+0x64>
    25fc:	0f c0       	rjmp	.+30     	; 0x261c <GptInit+0x48>
    25fe:	fc 01       	movw	r30, r24
    2600:	ee 0f       	add	r30, r30
    2602:	ff 1f       	adc	r31, r31
    2604:	e8 0f       	add	r30, r24
    2606:	f9 1f       	adc	r31, r25
    2608:	ec 5b       	subi	r30, 0xBC	; 188
    260a:	fb 4f       	sbci	r31, 0xFB	; 251
    260c:	32 81       	ldd	r19, Z+2	; 0x02
    260e:	31 11       	cpse	r19, r1
    2610:	05 c0       	rjmp	.+10     	; 0x261c <GptInit+0x48>
    2612:	13 be       	out	0x33, r1	; 51
    2614:	39 b7       	in	r19, 0x39	; 57
    2616:	3c 7f       	andi	r19, 0xFC	; 252
    2618:	39 bf       	out	0x39, r19	; 57
    261a:	12 be       	out	0x32, r1	; 50
    261c:	fc 01       	movw	r30, r24
    261e:	e7 55       	subi	r30, 0x57	; 87
    2620:	fa 4f       	sbci	r31, 0xFA	; 250
    2622:	31 e0       	ldi	r19, 0x01	; 1
    2624:	30 83       	st	Z, r19
    2626:	2f 5f       	subi	r18, 0xFF	; 255
    2628:	22 23       	and	r18, r18
    262a:	d1 f2       	breq	.-76     	; 0x25e0 <GptInit+0xc>
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <genu_GPTModStatus>
    2632:	08 95       	ret
    2634:	83 e0       	ldi	r24, 0x03	; 3
    2636:	08 95       	ret
    2638:	85 e0       	ldi	r24, 0x05	; 5
    263a:	08 95       	ret

0000263c <GptStart_aSync>:
* Return value: enuGpt_Status_t - Returns the status of the function (if there is any error)
* Description: Function to Start the Timer module counting from 0x00 until (u16_Ticks)
               and generate interrupt when OVF.
************************************************************************************/
enuGpt_Status_t GptStart_aSync(u8Gpt_Channel_t ChannelId, u32Gpt_Value_t u16_Ticks, pfGpt_CallBack_t CallBack)
{
    263c:	0f 93       	push	r16
    263e:	1f 93       	push	r17
    2640:	cf 93       	push	r28
    2642:	df 93       	push	r29
    2644:	89 01       	movw	r16, r18
	
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    2646:	81 11       	cpse	r24, r1
    2648:	4a c0       	rjmp	.+148    	; 0x26de <GptStart_aSync+0xa2>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    264a:	c8 2f       	mov	r28, r24
    264c:	d0 e0       	ldi	r29, 0x00	; 0
    264e:	fe 01       	movw	r30, r28
    2650:	e7 55       	subi	r30, 0x57	; 87
    2652:	fa 4f       	sbci	r31, 0xFA	; 250
    2654:	80 81       	ld	r24, Z
    2656:	88 23       	and	r24, r24
    2658:	09 f4       	brne	.+2      	; 0x265c <GptStart_aSync+0x20>
    265a:	43 c0       	rjmp	.+134    	; 0x26e2 <GptStart_aSync+0xa6>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
    265c:	82 30       	cpi	r24, 0x02	; 2
    265e:	09 f4       	brne	.+2      	; 0x2662 <GptStart_aSync+0x26>
    2660:	42 c0       	rjmp	.+132    	; 0x26e6 <GptStart_aSync+0xaa>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u16_remainderCount=0;
	
	enuChannelsState[ChannelId] = GPT_RUNNING;
    2662:	82 e0       	ldi	r24, 0x02	; 2
    2664:	fe 01       	movw	r30, r28
    2666:	e7 55       	subi	r30, 0x57	; 87
    2668:	fa 4f       	sbci	r31, 0xFA	; 250
    266a:	80 83       	st	Z, r24
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    266c:	fe 01       	movw	r30, r28
    266e:	ee 0f       	add	r30, r30
    2670:	ff 1f       	adc	r31, r31
    2672:	ec 0f       	add	r30, r28
    2674:	fd 1f       	adc	r31, r29
    2676:	ec 5b       	subi	r30, 0xBC	; 188
    2678:	fb 4f       	sbci	r31, 0xFB	; 251
    267a:	80 81       	ld	r24, Z
    267c:	88 23       	and	r24, r24
    267e:	21 f0       	breq	.+8      	; 0x2688 <GptStart_aSync+0x4c>
    2680:	83 30       	cpi	r24, 0x03	; 3
    2682:	98 f1       	brcs	.+102    	; 0x26ea <GptStart_aSync+0xae>
		case GPT_TIMER_2: /* In case of Timer 2 */
			break;
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    2684:	85 e0       	ldi	r24, 0x05	; 5
    2686:	34 c0       	rjmp	.+104    	; 0x26f0 <GptStart_aSync+0xb4>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Get Number of loops to overflow the timer counter */
			u32_Channels_ISR_Count[ChannelId] = u16_Ticks / GPT_MAX_VALUE_8BIT; //0xFF
    2688:	cb 01       	movw	r24, r22
    268a:	ba 01       	movw	r22, r20
    268c:	2f ef       	ldi	r18, 0xFF	; 255
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e0       	ldi	r20, 0x00	; 0
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__udivmodsi4>
    2698:	fe 01       	movw	r30, r28
    269a:	ee 0f       	add	r30, r30
    269c:	ff 1f       	adc	r31, r31
    269e:	ee 0f       	add	r30, r30
    26a0:	ff 1f       	adc	r31, r31
    26a2:	eb 55       	subi	r30, 0x5B	; 91
    26a4:	fa 4f       	sbci	r31, 0xFA	; 250
    26a6:	20 83       	st	Z, r18
    26a8:	31 83       	std	Z+1, r19	; 0x01
    26aa:	42 83       	std	Z+2, r20	; 0x02
    26ac:	53 83       	std	Z+3, r21	; 0x03
			/* Get Number of extra ticks (remainder) */
			u16_remainderCount = u16_Ticks % GPT_MAX_VALUE_8BIT;
    26ae:	26 2f       	mov	r18, r22
    26b0:	37 2f       	mov	r19, r23
			/* Set the interrupt enable */
			REG_SET_BIT(GPT_TIMSK_REG, GPT_TIMSK_TOIE0);
    26b2:	89 b7       	in	r24, 0x39	; 57
    26b4:	81 60       	ori	r24, 0x01	; 1
    26b6:	89 bf       	out	0x39, r24	; 57
			/* Set the callback function pointer */
			Gpt_Timer0_CallBackPtr=CallBack;
    26b8:	10 93 ab 05 	sts	0x05AB, r17	; 0x8005ab <Gpt_Timer0_CallBackPtr+0x1>
    26bc:	00 93 aa 05 	sts	0x05AA, r16	; 0x8005aa <Gpt_Timer0_CallBackPtr>
			/* Start the clock with the given pre scaler */
			GPT_TCCR0_REG = (Timers_Configurations[ChannelId].enuClock_Src) << GPT_TCCR0_CS00;
    26c0:	ce 01       	movw	r24, r28
    26c2:	88 0f       	add	r24, r24
    26c4:	99 1f       	adc	r25, r25
    26c6:	c8 0f       	add	r28, r24
    26c8:	d9 1f       	adc	r29, r25
    26ca:	cc 5b       	subi	r28, 0xBC	; 188
    26cc:	db 4f       	sbci	r29, 0xFB	; 251
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	83 bf       	out	0x33, r24	; 51
			/* Run the remainder ticks */
			/* Put the value of the 0xFF - remainderTicks to start count from it */
			if(u16_remainderCount != 0)
    26d2:	23 2b       	or	r18, r19
    26d4:	61 f0       	breq	.+24     	; 0x26ee <GptStart_aSync+0xb2>
			{
				GPT_TCNT0_REG = 256 - u16_remainderCount;
    26d6:	61 95       	neg	r22
    26d8:	62 bf       	out	0x32, r22	; 50
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	09 c0       	rjmp	.+18     	; 0x26f0 <GptStart_aSync+0xb4>
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    26de:	86 e0       	ldi	r24, 0x06	; 6
    26e0:	07 c0       	rjmp	.+14     	; 0x26f0 <GptStart_aSync+0xb4>
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    26e2:	82 e0       	ldi	r24, 0x02	; 2
    26e4:	05 c0       	rjmp	.+10     	; 0x26f0 <GptStart_aSync+0xb4>
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_BUSY;
    26e6:	87 e0       	ldi	r24, 0x07	; 7
    26e8:	03 c0       	rjmp	.+6      	; 0x26f0 <GptStart_aSync+0xb4>
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	01 c0       	rjmp	.+2      	; 0x26f0 <GptStart_aSync+0xb4>
    26ee:	81 e0       	ldi	r24, 0x01	; 1
}
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	1f 91       	pop	r17
    26f6:	0f 91       	pop	r16
    26f8:	08 95       	ret

000026fa <GptStop>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    26fa:	81 11       	cpse	r24, r1
    26fc:	23 c0       	rjmp	.+70     	; 0x2744 <GptStop+0x4a>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	fc 01       	movw	r30, r24
    2702:	e7 55       	subi	r30, 0x57	; 87
    2704:	fa 4f       	sbci	r31, 0xFA	; 250
    2706:	20 81       	ld	r18, Z
    2708:	22 23       	and	r18, r18
    270a:	f1 f0       	breq	.+60     	; 0x2748 <GptStop+0x4e>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
    270c:	22 30       	cpi	r18, 0x02	; 2
    270e:	f1 f4       	brne	.+60     	; 0x274c <GptStop+0x52>

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    2710:	fc 01       	movw	r30, r24
    2712:	ee 0f       	add	r30, r30
    2714:	ff 1f       	adc	r31, r31
    2716:	e8 0f       	add	r30, r24
    2718:	f9 1f       	adc	r31, r25
    271a:	ec 5b       	subi	r30, 0xBC	; 188
    271c:	fb 4f       	sbci	r31, 0xFB	; 251
    271e:	20 81       	ld	r18, Z
    2720:	22 23       	and	r18, r18
    2722:	19 f0       	breq	.+6      	; 0x272a <GptStop+0x30>
    2724:	23 30       	cpi	r18, 0x03	; 3
    2726:	a0 f4       	brcc	.+40     	; 0x2750 <GptStop+0x56>
    2728:	06 c0       	rjmp	.+12     	; 0x2736 <GptStop+0x3c>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Stop the clock from the timer */
			GPT_TCCR0_REG &= ~(7 << GPT_TCCR0_CS00);
    272a:	23 b7       	in	r18, 0x33	; 51
    272c:	28 7f       	andi	r18, 0xF8	; 248
    272e:	23 bf       	out	0x33, r18	; 51
			GPT_TIMSK_REG &= ~(3 << GPT_TIMSK_TOIE0);
    2730:	29 b7       	in	r18, 0x39	; 57
    2732:	2c 7f       	andi	r18, 0xFC	; 252
    2734:	29 bf       	out	0x39, r18	; 57
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
    2736:	fc 01       	movw	r30, r24
    2738:	e7 55       	subi	r30, 0x57	; 87
    273a:	fa 4f       	sbci	r31, 0xFA	; 250
    273c:	23 e0       	ldi	r18, 0x03	; 3
    273e:	20 83       	st	Z, r18
	return GPT_STATUS_ERROR_OK;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    2744:	86 e0       	ldi	r24, 0x06	; 6
    2746:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    2748:	82 e0       	ldi	r24, 0x02	; 2
    274a:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_STOPPED;
    274c:	88 e0       	ldi	r24, 0x08	; 8
    274e:	08 95       	ret
		case GPT_TIMER_2: /* In case of Timer 2 */
		break;
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    2750:	85 e0       	ldi	r24, 0x05	; 5
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
    2752:	08 95       	ret

00002754 <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    2754:	1f 92       	push	r1
    2756:	0f 92       	push	r0
    2758:	0f b6       	in	r0, 0x3f	; 63
    275a:	0f 92       	push	r0
    275c:	11 24       	eor	r1, r1
    275e:	2f 93       	push	r18
    2760:	3f 93       	push	r19
    2762:	4f 93       	push	r20
    2764:	5f 93       	push	r21
    2766:	6f 93       	push	r22
    2768:	7f 93       	push	r23
    276a:	8f 93       	push	r24
    276c:	9f 93       	push	r25
    276e:	af 93       	push	r26
    2770:	bf 93       	push	r27
    2772:	ef 93       	push	r30
    2774:	ff 93       	push	r31
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	0e 94 9f 12 	call	0x253e	; 0x253e <Gpt_ISRHandler>
    277c:	ff 91       	pop	r31
    277e:	ef 91       	pop	r30
    2780:	bf 91       	pop	r27
    2782:	af 91       	pop	r26
    2784:	9f 91       	pop	r25
    2786:	8f 91       	pop	r24
    2788:	7f 91       	pop	r23
    278a:	6f 91       	pop	r22
    278c:	5f 91       	pop	r21
    278e:	4f 91       	pop	r20
    2790:	3f 91       	pop	r19
    2792:	2f 91       	pop	r18
    2794:	0f 90       	pop	r0
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	0f 90       	pop	r0
    279a:	1f 90       	pop	r1
    279c:	18 95       	reti

0000279e <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    279e:	1f 92       	push	r1
    27a0:	0f 92       	push	r0
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	0f 92       	push	r0
    27a6:	11 24       	eor	r1, r1
    27a8:	2f 93       	push	r18
    27aa:	3f 93       	push	r19
    27ac:	4f 93       	push	r20
    27ae:	5f 93       	push	r21
    27b0:	6f 93       	push	r22
    27b2:	7f 93       	push	r23
    27b4:	8f 93       	push	r24
    27b6:	9f 93       	push	r25
    27b8:	af 93       	push	r26
    27ba:	bf 93       	push	r27
    27bc:	ef 93       	push	r30
    27be:	ff 93       	push	r31
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	0e 94 9f 12 	call	0x253e	; 0x253e <Gpt_ISRHandler>
    27c6:	ff 91       	pop	r31
    27c8:	ef 91       	pop	r30
    27ca:	bf 91       	pop	r27
    27cc:	af 91       	pop	r26
    27ce:	9f 91       	pop	r25
    27d0:	8f 91       	pop	r24
    27d2:	7f 91       	pop	r23
    27d4:	6f 91       	pop	r22
    27d6:	5f 91       	pop	r21
    27d8:	4f 91       	pop	r20
    27da:	3f 91       	pop	r19
    27dc:	2f 91       	pop	r18
    27de:	0f 90       	pop	r0
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	0f 90       	pop	r0
    27e4:	1f 90       	pop	r1
    27e6:	18 95       	reti

000027e8 <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    27e8:	1f 92       	push	r1
    27ea:	0f 92       	push	r0
    27ec:	0f b6       	in	r0, 0x3f	; 63
    27ee:	0f 92       	push	r0
    27f0:	11 24       	eor	r1, r1
    27f2:	2f 93       	push	r18
    27f4:	3f 93       	push	r19
    27f6:	4f 93       	push	r20
    27f8:	5f 93       	push	r21
    27fa:	6f 93       	push	r22
    27fc:	7f 93       	push	r23
    27fe:	8f 93       	push	r24
    2800:	9f 93       	push	r25
    2802:	af 93       	push	r26
    2804:	bf 93       	push	r27
    2806:	ef 93       	push	r30
    2808:	ff 93       	push	r31
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	0e 94 9f 12 	call	0x253e	; 0x253e <Gpt_ISRHandler>
    2810:	ff 91       	pop	r31
    2812:	ef 91       	pop	r30
    2814:	bf 91       	pop	r27
    2816:	af 91       	pop	r26
    2818:	9f 91       	pop	r25
    281a:	8f 91       	pop	r24
    281c:	7f 91       	pop	r23
    281e:	6f 91       	pop	r22
    2820:	5f 91       	pop	r21
    2822:	4f 91       	pop	r20
    2824:	3f 91       	pop	r19
    2826:	2f 91       	pop	r18
    2828:	0f 90       	pop	r0
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	0f 90       	pop	r0
    282e:	1f 90       	pop	r1
    2830:	18 95       	reti

00002832 <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2832:	1f 92       	push	r1
    2834:	0f 92       	push	r0
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	0f 92       	push	r0
    283a:	11 24       	eor	r1, r1
    283c:	2f 93       	push	r18
    283e:	3f 93       	push	r19
    2840:	4f 93       	push	r20
    2842:	5f 93       	push	r21
    2844:	6f 93       	push	r22
    2846:	7f 93       	push	r23
    2848:	8f 93       	push	r24
    284a:	9f 93       	push	r25
    284c:	af 93       	push	r26
    284e:	bf 93       	push	r27
    2850:	ef 93       	push	r30
    2852:	ff 93       	push	r31
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	0e 94 9f 12 	call	0x253e	; 0x253e <Gpt_ISRHandler>
    285a:	ff 91       	pop	r31
    285c:	ef 91       	pop	r30
    285e:	bf 91       	pop	r27
    2860:	af 91       	pop	r26
    2862:	9f 91       	pop	r25
    2864:	8f 91       	pop	r24
    2866:	7f 91       	pop	r23
    2868:	6f 91       	pop	r22
    286a:	5f 91       	pop	r21
    286c:	4f 91       	pop	r20
    286e:	3f 91       	pop	r19
    2870:	2f 91       	pop	r18
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	0f 90       	pop	r0
    2878:	1f 90       	pop	r1
    287a:	18 95       	reti

0000287c <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    287c:	1f 92       	push	r1
    287e:	0f 92       	push	r0
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	0f 92       	push	r0
    2884:	11 24       	eor	r1, r1
    2886:	2f 93       	push	r18
    2888:	3f 93       	push	r19
    288a:	4f 93       	push	r20
    288c:	5f 93       	push	r21
    288e:	6f 93       	push	r22
    2890:	7f 93       	push	r23
    2892:	8f 93       	push	r24
    2894:	9f 93       	push	r25
    2896:	af 93       	push	r26
    2898:	bf 93       	push	r27
    289a:	ef 93       	push	r30
    289c:	ff 93       	push	r31
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	0e 94 9f 12 	call	0x253e	; 0x253e <Gpt_ISRHandler>
    28a4:	ff 91       	pop	r31
    28a6:	ef 91       	pop	r30
    28a8:	bf 91       	pop	r27
    28aa:	af 91       	pop	r26
    28ac:	9f 91       	pop	r25
    28ae:	8f 91       	pop	r24
    28b0:	7f 91       	pop	r23
    28b2:	6f 91       	pop	r22
    28b4:	5f 91       	pop	r21
    28b6:	4f 91       	pop	r20
    28b8:	3f 91       	pop	r19
    28ba:	2f 91       	pop	r18
    28bc:	0f 90       	pop	r0
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	0f 90       	pop	r0
    28c2:	1f 90       	pop	r1
    28c4:	18 95       	reti

000028c6 <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    28c6:	1f 92       	push	r1
    28c8:	0f 92       	push	r0
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	0f 92       	push	r0
    28ce:	11 24       	eor	r1, r1
    28d0:	2f 93       	push	r18
    28d2:	3f 93       	push	r19
    28d4:	4f 93       	push	r20
    28d6:	5f 93       	push	r21
    28d8:	6f 93       	push	r22
    28da:	7f 93       	push	r23
    28dc:	8f 93       	push	r24
    28de:	9f 93       	push	r25
    28e0:	af 93       	push	r26
    28e2:	bf 93       	push	r27
    28e4:	ef 93       	push	r30
    28e6:	ff 93       	push	r31
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	0e 94 9f 12 	call	0x253e	; 0x253e <Gpt_ISRHandler>
    28ee:	ff 91       	pop	r31
    28f0:	ef 91       	pop	r30
    28f2:	bf 91       	pop	r27
    28f4:	af 91       	pop	r26
    28f6:	9f 91       	pop	r25
    28f8:	8f 91       	pop	r24
    28fa:	7f 91       	pop	r23
    28fc:	6f 91       	pop	r22
    28fe:	5f 91       	pop	r21
    2900:	4f 91       	pop	r20
    2902:	3f 91       	pop	r19
    2904:	2f 91       	pop	r18
    2906:	0f 90       	pop	r0
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	0f 90       	pop	r0
    290c:	1f 90       	pop	r1
    290e:	18 95       	reti

00002910 <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2910:	1f 92       	push	r1
    2912:	0f 92       	push	r0
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	0f 92       	push	r0
    2918:	11 24       	eor	r1, r1
    291a:	2f 93       	push	r18
    291c:	3f 93       	push	r19
    291e:	4f 93       	push	r20
    2920:	5f 93       	push	r21
    2922:	6f 93       	push	r22
    2924:	7f 93       	push	r23
    2926:	8f 93       	push	r24
    2928:	9f 93       	push	r25
    292a:	af 93       	push	r26
    292c:	bf 93       	push	r27
    292e:	ef 93       	push	r30
    2930:	ff 93       	push	r31
    2932:	82 e0       	ldi	r24, 0x02	; 2
    2934:	0e 94 9f 12 	call	0x253e	; 0x253e <Gpt_ISRHandler>
    2938:	ff 91       	pop	r31
    293a:	ef 91       	pop	r30
    293c:	bf 91       	pop	r27
    293e:	af 91       	pop	r26
    2940:	9f 91       	pop	r25
    2942:	8f 91       	pop	r24
    2944:	7f 91       	pop	r23
    2946:	6f 91       	pop	r22
    2948:	5f 91       	pop	r21
    294a:	4f 91       	pop	r20
    294c:	3f 91       	pop	r19
    294e:	2f 91       	pop	r18
    2950:	0f 90       	pop	r0
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	0f 90       	pop	r0
    2956:	1f 90       	pop	r1
    2958:	18 95       	reti

0000295a <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    295a:	1f 92       	push	r1
    295c:	0f 92       	push	r0
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	0f 92       	push	r0
    2962:	11 24       	eor	r1, r1
    2964:	2f 93       	push	r18
    2966:	3f 93       	push	r19
    2968:	4f 93       	push	r20
    296a:	5f 93       	push	r21
    296c:	6f 93       	push	r22
    296e:	7f 93       	push	r23
    2970:	8f 93       	push	r24
    2972:	9f 93       	push	r25
    2974:	af 93       	push	r26
    2976:	bf 93       	push	r27
    2978:	ef 93       	push	r30
    297a:	ff 93       	push	r31
    297c:	82 e0       	ldi	r24, 0x02	; 2
    297e:	0e 94 9f 12 	call	0x253e	; 0x253e <Gpt_ISRHandler>
    2982:	ff 91       	pop	r31
    2984:	ef 91       	pop	r30
    2986:	bf 91       	pop	r27
    2988:	af 91       	pop	r26
    298a:	9f 91       	pop	r25
    298c:	8f 91       	pop	r24
    298e:	7f 91       	pop	r23
    2990:	6f 91       	pop	r22
    2992:	5f 91       	pop	r21
    2994:	4f 91       	pop	r20
    2996:	3f 91       	pop	r19
    2998:	2f 91       	pop	r18
    299a:	0f 90       	pop	r0
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	0f 90       	pop	r0
    29a0:	1f 90       	pop	r1
    29a2:	18 95       	reti

000029a4 <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
    29a4:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    29a8:	86 30       	cpi	r24, 0x06	; 6
    29aa:	41 f0       	breq	.+16     	; 0x29bc <I2C_MasterInit+0x18>
    29ac:	11 b8       	out	0x01, r1	; 1
    29ae:	8a ef       	ldi	r24, 0xFA	; 250
    29b0:	80 b9       	out	0x00, r24	; 0
    29b2:	86 e0       	ldi	r24, 0x06	; 6
    29b4:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <genuI2C_Status>
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	08 95       	ret
    29bc:	87 e0       	ldi	r24, 0x07	; 7
    29be:	08 95       	ret

000029c0 <I2C_MasterSendSTART>:
    29c0:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    29c4:	86 30       	cpi	r24, 0x06	; 6
    29c6:	59 f4       	brne	.+22     	; 0x29de <I2C_MasterSendSTART+0x1e>
    29c8:	84 ea       	ldi	r24, 0xA4	; 164
    29ca:	86 bf       	out	0x36, r24	; 54
    29cc:	06 b6       	in	r0, 0x36	; 54
    29ce:	07 fe       	sbrs	r0, 7
    29d0:	fd cf       	rjmp	.-6      	; 0x29cc <I2C_MasterSendSTART+0xc>
    29d2:	81 b1       	in	r24, 0x01	; 1
    29d4:	88 7f       	andi	r24, 0xF8	; 248
    29d6:	88 30       	cpi	r24, 0x08	; 8
    29d8:	21 f0       	breq	.+8      	; 0x29e2 <I2C_MasterSendSTART+0x22>
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	08 95       	ret
    29de:	85 e0       	ldi	r24, 0x05	; 5
    29e0:	08 95       	ret
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	08 95       	ret

000029e6 <I2C_MasterSendSlaveAddress>:
    29e6:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    29ea:	96 30       	cpi	r25, 0x06	; 6
    29ec:	29 f5       	brne	.+74     	; 0x2a38 <I2C_MasterSendSlaveAddress+0x52>
    29ee:	62 30       	cpi	r22, 0x02	; 2
    29f0:	28 f5       	brcc	.+74     	; 0x2a3c <I2C_MasterSendSlaveAddress+0x56>
    29f2:	88 23       	and	r24, r24
    29f4:	2c f1       	brlt	.+74     	; 0x2a40 <I2C_MasterSendSlaveAddress+0x5a>
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	88 0f       	add	r24, r24
    29fa:	99 1f       	adc	r25, r25
    29fc:	68 2b       	or	r22, r24
    29fe:	63 b9       	out	0x03, r22	; 3
    2a00:	84 e8       	ldi	r24, 0x84	; 132
    2a02:	86 bf       	out	0x36, r24	; 54
    2a04:	06 b6       	in	r0, 0x36	; 54
    2a06:	07 fe       	sbrs	r0, 7
    2a08:	fd cf       	rjmp	.-6      	; 0x2a04 <I2C_MasterSendSlaveAddress+0x1e>
    2a0a:	81 b1       	in	r24, 0x01	; 1
    2a0c:	88 7f       	andi	r24, 0xF8	; 248
    2a0e:	88 33       	cpi	r24, 0x38	; 56
    2a10:	59 f0       	breq	.+22     	; 0x2a28 <I2C_MasterSendSlaveAddress+0x42>
    2a12:	28 f4       	brcc	.+10     	; 0x2a1e <I2C_MasterSendSlaveAddress+0x38>
    2a14:	88 31       	cpi	r24, 0x18	; 24
    2a16:	b1 f0       	breq	.+44     	; 0x2a44 <I2C_MasterSendSlaveAddress+0x5e>
    2a18:	80 32       	cpi	r24, 0x20	; 32
    2a1a:	41 f0       	breq	.+16     	; 0x2a2c <I2C_MasterSendSlaveAddress+0x46>
    2a1c:	0b c0       	rjmp	.+22     	; 0x2a34 <I2C_MasterSendSlaveAddress+0x4e>
    2a1e:	80 34       	cpi	r24, 0x40	; 64
    2a20:	89 f0       	breq	.+34     	; 0x2a44 <I2C_MasterSendSlaveAddress+0x5e>
    2a22:	88 34       	cpi	r24, 0x48	; 72
    2a24:	29 f0       	breq	.+10     	; 0x2a30 <I2C_MasterSendSlaveAddress+0x4a>
    2a26:	06 c0       	rjmp	.+12     	; 0x2a34 <I2C_MasterSendSlaveAddress+0x4e>
    2a28:	88 e3       	ldi	r24, 0x38	; 56
    2a2a:	08 95       	ret
    2a2c:	80 e2       	ldi	r24, 0x20	; 32
    2a2e:	08 95       	ret
    2a30:	88 e4       	ldi	r24, 0x48	; 72
    2a32:	08 95       	ret
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	08 95       	ret
    2a38:	85 e0       	ldi	r24, 0x05	; 5
    2a3a:	08 95       	ret
    2a3c:	82 e0       	ldi	r24, 0x02	; 2
    2a3e:	08 95       	ret
    2a40:	83 e0       	ldi	r24, 0x03	; 3
    2a42:	08 95       	ret
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	08 95       	ret

00002a48 <I2C_MasterSendRepSTART>:
    2a48:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2a4c:	86 30       	cpi	r24, 0x06	; 6
    2a4e:	59 f4       	brne	.+22     	; 0x2a66 <I2C_MasterSendRepSTART+0x1e>
    2a50:	84 ea       	ldi	r24, 0xA4	; 164
    2a52:	86 bf       	out	0x36, r24	; 54
    2a54:	06 b6       	in	r0, 0x36	; 54
    2a56:	07 fe       	sbrs	r0, 7
    2a58:	fd cf       	rjmp	.-6      	; 0x2a54 <I2C_MasterSendRepSTART+0xc>
    2a5a:	81 b1       	in	r24, 0x01	; 1
    2a5c:	88 7f       	andi	r24, 0xF8	; 248
    2a5e:	80 31       	cpi	r24, 0x10	; 16
    2a60:	21 f0       	breq	.+8      	; 0x2a6a <I2C_MasterSendRepSTART+0x22>
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	08 95       	ret
    2a66:	85 e0       	ldi	r24, 0x05	; 5
    2a68:	08 95       	ret
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	08 95       	ret

00002a6e <I2C_MasterSendSTOP>:
    2a6e:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2a72:	86 30       	cpi	r24, 0x06	; 6
    2a74:	39 f4       	brne	.+14     	; 0x2a84 <I2C_MasterSendSTOP+0x16>
    2a76:	84 e9       	ldi	r24, 0x94	; 148
    2a78:	86 bf       	out	0x36, r24	; 54
    2a7a:	06 b6       	in	r0, 0x36	; 54
    2a7c:	04 fc       	sbrc	r0, 4
    2a7e:	fd cf       	rjmp	.-6      	; 0x2a7a <I2C_MasterSendSTOP+0xc>
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	08 95       	ret
    2a84:	85 e0       	ldi	r24, 0x05	; 5
    2a86:	08 95       	ret

00002a88 <I2C_MasterSendByte>:
    2a88:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2a8c:	96 30       	cpi	r25, 0x06	; 6
    2a8e:	69 f4       	brne	.+26     	; 0x2aaa <I2C_MasterSendByte+0x22>
    2a90:	83 b9       	out	0x03, r24	; 3
    2a92:	84 e8       	ldi	r24, 0x84	; 132
    2a94:	86 bf       	out	0x36, r24	; 54
    2a96:	06 b6       	in	r0, 0x36	; 54
    2a98:	07 fe       	sbrs	r0, 7
    2a9a:	fd cf       	rjmp	.-6      	; 0x2a96 <I2C_MasterSendByte+0xe>
    2a9c:	81 b1       	in	r24, 0x01	; 1
    2a9e:	88 7f       	andi	r24, 0xF8	; 248
    2aa0:	88 32       	cpi	r24, 0x28	; 40
    2aa2:	29 f0       	breq	.+10     	; 0x2aae <I2C_MasterSendByte+0x26>
    2aa4:	80 33       	cpi	r24, 0x30	; 48
    2aa6:	29 f4       	brne	.+10     	; 0x2ab2 <I2C_MasterSendByte+0x2a>
    2aa8:	08 95       	ret
    2aaa:	85 e0       	ldi	r24, 0x05	; 5
    2aac:	08 95       	ret
    2aae:	88 e2       	ldi	r24, 0x28	; 40
    2ab0:	08 95       	ret
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	08 95       	ret

00002ab6 <I2C_MasterReceiveByte_ACK>:
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2abc:	96 30       	cpi	r25, 0x06	; 6
    2abe:	79 f4       	brne	.+30     	; 0x2ade <I2C_MasterReceiveByte_ACK+0x28>
    2ac0:	30 97       	sbiw	r30, 0x00	; 0
    2ac2:	79 f0       	breq	.+30     	; 0x2ae2 <I2C_MasterReceiveByte_ACK+0x2c>
    2ac4:	84 ec       	ldi	r24, 0xC4	; 196
    2ac6:	86 bf       	out	0x36, r24	; 54
    2ac8:	06 b6       	in	r0, 0x36	; 54
    2aca:	07 fe       	sbrs	r0, 7
    2acc:	fd cf       	rjmp	.-6      	; 0x2ac8 <I2C_MasterReceiveByte_ACK+0x12>
    2ace:	81 b1       	in	r24, 0x01	; 1
    2ad0:	88 7f       	andi	r24, 0xF8	; 248
    2ad2:	80 35       	cpi	r24, 0x50	; 80
    2ad4:	41 f4       	brne	.+16     	; 0x2ae6 <I2C_MasterReceiveByte_ACK+0x30>
    2ad6:	83 b1       	in	r24, 0x03	; 3
    2ad8:	80 83       	st	Z, r24
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	08 95       	ret
    2ade:	85 e0       	ldi	r24, 0x05	; 5
    2ae0:	08 95       	ret
    2ae2:	84 e0       	ldi	r24, 0x04	; 4
    2ae4:	08 95       	ret
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	08 95       	ret

00002aea <I2C_MasterReceiveByte_NACK>:
    2aea:	fc 01       	movw	r30, r24
    2aec:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2af0:	96 30       	cpi	r25, 0x06	; 6
    2af2:	79 f4       	brne	.+30     	; 0x2b12 <I2C_MasterReceiveByte_NACK+0x28>
    2af4:	30 97       	sbiw	r30, 0x00	; 0
    2af6:	79 f0       	breq	.+30     	; 0x2b16 <I2C_MasterReceiveByte_NACK+0x2c>
    2af8:	84 e8       	ldi	r24, 0x84	; 132
    2afa:	86 bf       	out	0x36, r24	; 54
    2afc:	06 b6       	in	r0, 0x36	; 54
    2afe:	07 fe       	sbrs	r0, 7
    2b00:	fd cf       	rjmp	.-6      	; 0x2afc <I2C_MasterReceiveByte_NACK+0x12>
    2b02:	81 b1       	in	r24, 0x01	; 1
    2b04:	88 7f       	andi	r24, 0xF8	; 248
    2b06:	88 35       	cpi	r24, 0x58	; 88
    2b08:	41 f4       	brne	.+16     	; 0x2b1a <I2C_MasterReceiveByte_NACK+0x30>
    2b0a:	83 b1       	in	r24, 0x03	; 3
    2b0c:	80 83       	st	Z, r24
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	08 95       	ret
    2b12:	85 e0       	ldi	r24, 0x05	; 5
    2b14:	08 95       	ret
    2b16:	84 e0       	ldi	r24, 0x04	; 4
    2b18:	08 95       	ret
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	08 95       	ret

00002b1e <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
    2b1e:	7f 92       	push	r7
    2b20:	8f 92       	push	r8
    2b22:	9f 92       	push	r9
    2b24:	af 92       	push	r10
    2b26:	bf 92       	push	r11
    2b28:	cf 92       	push	r12
    2b2a:	df 92       	push	r13
    2b2c:	ef 92       	push	r14
    2b2e:	ff 92       	push	r15
    2b30:	0f 93       	push	r16
    2b32:	1f 93       	push	r17
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	78 2e       	mov	r7, r24
    2b3a:	eb 01       	movw	r28, r22
    2b3c:	7a 01       	movw	r14, r20
    2b3e:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    2b40:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2b44:	86 30       	cpi	r24, 0x06	; 6
    2b46:	09 f0       	breq	.+2      	; 0x2b4a <I2C_MasterReceiveGeneral+0x2c>
    2b48:	47 c0       	rjmp	.+142    	; 0x2bd8 <I2C_MasterReceiveGeneral+0xba>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
    2b4a:	20 97       	sbiw	r28, 0x00	; 0
    2b4c:	09 f4       	brne	.+2      	; 0x2b50 <I2C_MasterReceiveGeneral+0x32>
    2b4e:	46 c0       	rjmp	.+140    	; 0x2bdc <I2C_MasterReceiveGeneral+0xbe>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
    2b50:	23 2b       	or	r18, r19
    2b52:	09 f4       	brne	.+2      	; 0x2b56 <I2C_MasterReceiveGeneral+0x38>
    2b54:	45 c0       	rjmp	.+138    	; 0x2be0 <I2C_MasterReceiveGeneral+0xc2>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    2b56:	77 20       	and	r7, r7
    2b58:	0c f4       	brge	.+2      	; 0x2b5c <I2C_MasterReceiveGeneral+0x3e>
    2b5a:	44 c0       	rjmp	.+136    	; 0x2be4 <I2C_MasterReceiveGeneral+0xc6>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2b5c:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <I2C_MasterSendSTART>
    2b60:	88 23       	and	r24, r24
    2b62:	09 f4       	brne	.+2      	; 0x2b66 <I2C_MasterReceiveGeneral+0x48>
    2b64:	4a c0       	rjmp	.+148    	; 0x2bfa <I2C_MasterReceiveGeneral+0xdc>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2b66:	60 e0       	ldi	r22, 0x00	; 0
    2b68:	87 2d       	mov	r24, r7
    2b6a:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <I2C_MasterSendSlaveAddress>
    2b6e:	81 30       	cpi	r24, 0x01	; 1
    2b70:	d9 f5       	brne	.+118    	; 0x2be8 <I2C_MasterReceiveGeneral+0xca>
    2b72:	0b c0       	rjmp	.+22     	; 0x2b8a <I2C_MasterReceiveGeneral+0x6c>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2b74:	4e 01       	movw	r8, r28
    2b76:	8f ef       	ldi	r24, 0xFF	; 255
    2b78:	88 1a       	sub	r8, r24
    2b7a:	98 0a       	sbc	r9, r24
    2b7c:	88 81       	ld	r24, Y
    2b7e:	0e 94 44 15 	call	0x2a88	; 0x2a88 <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    2b82:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2b84:	88 23       	and	r24, r24
    2b86:	c9 f1       	breq	.+114    	; 0x2bfa <I2C_MasterReceiveGeneral+0xdc>
    2b88:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    2b8a:	57 01       	movw	r10, r14
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	a8 1a       	sub	r10, r24
    2b90:	b1 08       	sbc	r11, r1
    2b92:	ef 28       	or	r14, r15
    2b94:	79 f7       	brne	.-34     	; 0x2b74 <I2C_MasterReceiveGeneral+0x56>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
    2b96:	0e 94 24 15 	call	0x2a48	; 0x2a48 <I2C_MasterSendRepSTART>
    2b9a:	81 30       	cpi	r24, 0x01	; 1
    2b9c:	39 f5       	brne	.+78     	; 0x2bec <I2C_MasterReceiveGeneral+0xce>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2b9e:	61 e0       	ldi	r22, 0x01	; 1
    2ba0:	87 2d       	mov	r24, r7
    2ba2:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <I2C_MasterSendSlaveAddress>
    2ba6:	81 30       	cpi	r24, 0x01	; 1
    2ba8:	19 f5       	brne	.+70     	; 0x2bf0 <I2C_MasterReceiveGeneral+0xd2>
    2baa:	08 c0       	rjmp	.+16     	; 0x2bbc <I2C_MasterReceiveGeneral+0x9e>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
    2bac:	e6 01       	movw	r28, r12
    2bae:	21 96       	adiw	r28, 0x01	; 1
    2bb0:	c6 01       	movw	r24, r12
    2bb2:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <I2C_MasterReceiveByte_ACK>
    2bb6:	81 30       	cpi	r24, 0x01	; 1
    2bb8:	e9 f4       	brne	.+58     	; 0x2bf4 <I2C_MasterReceiveGeneral+0xd6>
    2bba:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
    2bbc:	01 50       	subi	r16, 0x01	; 1
    2bbe:	11 09       	sbc	r17, r1
    2bc0:	a9 f7       	brne	.-22     	; 0x2bac <I2C_MasterReceiveGeneral+0x8e>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
    2bc2:	c6 01       	movw	r24, r12
    2bc4:	0e 94 75 15 	call	0x2aea	; 0x2aea <I2C_MasterReceiveByte_NACK>
    2bc8:	81 30       	cpi	r24, 0x01	; 1
    2bca:	b1 f4       	brne	.+44     	; 0x2bf8 <I2C_MasterReceiveGeneral+0xda>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
    2bcc:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <I2C_MasterSendSTOP>
    2bd0:	81 30       	cpi	r24, 0x01	; 1
    2bd2:	99 f0       	breq	.+38     	; 0x2bfa <I2C_MasterReceiveGeneral+0xdc>
		return I2C_STATUS_ERROR_NOK;
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	11 c0       	rjmp	.+34     	; 0x2bfa <I2C_MasterReceiveGeneral+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    2bd8:	85 e0       	ldi	r24, 0x05	; 5
    2bda:	0f c0       	rjmp	.+30     	; 0x2bfa <I2C_MasterReceiveGeneral+0xdc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2bdc:	84 e0       	ldi	r24, 0x04	; 4
    2bde:	0d c0       	rjmp	.+26     	; 0x2bfa <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2be0:	84 e0       	ldi	r24, 0x04	; 4
    2be2:	0b c0       	rjmp	.+22     	; 0x2bfa <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    2be4:	83 e0       	ldi	r24, 0x03	; 3
    2be6:	09 c0       	rjmp	.+18     	; 0x2bfa <I2C_MasterReceiveGeneral+0xdc>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	07 c0       	rjmp	.+14     	; 0x2bfa <I2C_MasterReceiveGeneral+0xdc>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	05 c0       	rjmp	.+10     	; 0x2bfa <I2C_MasterReceiveGeneral+0xdc>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	03 c0       	rjmp	.+6      	; 0x2bfa <I2C_MasterReceiveGeneral+0xdc>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <I2C_MasterReceiveGeneral+0xdc>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	1f 91       	pop	r17
    2c00:	0f 91       	pop	r16
    2c02:	ff 90       	pop	r15
    2c04:	ef 90       	pop	r14
    2c06:	df 90       	pop	r13
    2c08:	cf 90       	pop	r12
    2c0a:	bf 90       	pop	r11
    2c0c:	af 90       	pop	r10
    2c0e:	9f 90       	pop	r9
    2c10:	8f 90       	pop	r8
    2c12:	7f 90       	pop	r7
    2c14:	08 95       	ret

00002c16 <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
    2c16:	bf 92       	push	r11
    2c18:	cf 92       	push	r12
    2c1a:	df 92       	push	r13
    2c1c:	ef 92       	push	r14
    2c1e:	ff 92       	push	r15
    2c20:	0f 93       	push	r16
    2c22:	1f 93       	push	r17
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	18 2f       	mov	r17, r24
    2c2a:	06 2f       	mov	r16, r22
    2c2c:	ea 01       	movw	r28, r20
    2c2e:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    2c30:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <genuI2C_Status>
    2c34:	86 30       	cpi	r24, 0x06	; 6
    2c36:	59 f5       	brne	.+86     	; 0x2c8e <I2C_MasterSendToLocation+0x78>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    2c38:	20 97       	sbiw	r28, 0x00	; 0
    2c3a:	59 f1       	breq	.+86     	; 0x2c92 <I2C_MasterSendToLocation+0x7c>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    2c3c:	11 23       	and	r17, r17
    2c3e:	5c f1       	brlt	.+86     	; 0x2c96 <I2C_MasterSendToLocation+0x80>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2c40:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <I2C_MasterSendSTART>
    2c44:	88 23       	and	r24, r24
    2c46:	61 f1       	breq	.+88     	; 0x2ca0 <I2C_MasterSendToLocation+0x8a>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2c48:	60 e0       	ldi	r22, 0x00	; 0
    2c4a:	81 2f       	mov	r24, r17
    2c4c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <I2C_MasterSendSlaveAddress>
    2c50:	b8 2e       	mov	r11, r24
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	b8 12       	cpse	r11, r24
    2c56:	21 c0       	rjmp	.+66     	; 0x2c9a <I2C_MasterSendToLocation+0x84>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2c58:	80 2f       	mov	r24, r16
    2c5a:	0e 94 44 15 	call	0x2a88	; 0x2a88 <I2C_MasterSendByte>
    2c5e:	81 11       	cpse	r24, r1
    2c60:	0c c0       	rjmp	.+24     	; 0x2c7a <I2C_MasterSendToLocation+0x64>
    2c62:	1e c0       	rjmp	.+60     	; 0x2ca0 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2c64:	6e 01       	movw	r12, r28
    2c66:	8f ef       	ldi	r24, 0xFF	; 255
    2c68:	c8 1a       	sub	r12, r24
    2c6a:	d8 0a       	sbc	r13, r24
    2c6c:	88 81       	ld	r24, Y
    2c6e:	0e 94 44 15 	call	0x2a88	; 0x2a88 <I2C_MasterSendByte>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    2c72:	78 01       	movw	r14, r16
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2c74:	88 23       	and	r24, r24
    2c76:	a1 f0       	breq	.+40     	; 0x2ca0 <I2C_MasterSendToLocation+0x8a>
    2c78:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    2c7a:	87 01       	movw	r16, r14
    2c7c:	01 50       	subi	r16, 0x01	; 1
    2c7e:	11 09       	sbc	r17, r1
    2c80:	ef 28       	or	r14, r15
    2c82:	81 f7       	brne	.-32     	; 0x2c64 <I2C_MasterSendToLocation+0x4e>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    2c84:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <I2C_MasterSendSTOP>
    2c88:	81 11       	cpse	r24, r1
    2c8a:	09 c0       	rjmp	.+18     	; 0x2c9e <I2C_MasterSendToLocation+0x88>
    2c8c:	09 c0       	rjmp	.+18     	; 0x2ca0 <I2C_MasterSendToLocation+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    2c8e:	85 e0       	ldi	r24, 0x05	; 5
    2c90:	07 c0       	rjmp	.+14     	; 0x2ca0 <I2C_MasterSendToLocation+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    2c92:	84 e0       	ldi	r24, 0x04	; 4
    2c94:	05 c0       	rjmp	.+10     	; 0x2ca0 <I2C_MasterSendToLocation+0x8a>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    2c96:	83 e0       	ldi	r24, 0x03	; 3
    2c98:	03 c0       	rjmp	.+6      	; 0x2ca0 <I2C_MasterSendToLocation+0x8a>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	01 c0       	rjmp	.+2      	; 0x2ca0 <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
    2c9e:	8b 2d       	mov	r24, r11
}
    2ca0:	df 91       	pop	r29
    2ca2:	cf 91       	pop	r28
    2ca4:	1f 91       	pop	r17
    2ca6:	0f 91       	pop	r16
    2ca8:	ff 90       	pop	r15
    2caa:	ef 90       	pop	r14
    2cac:	df 90       	pop	r13
    2cae:	cf 90       	pop	r12
    2cb0:	bf 90       	pop	r11
    2cb2:	08 95       	ret

00002cb4 <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
    2cb4:	0f 93       	push	r16
    2cb6:	1f 93       	push	r17
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	1f 92       	push	r1
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
    2cc2:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
    2cc4:	89 01       	movw	r16, r18
    2cc6:	9a 01       	movw	r18, r20
    2cc8:	41 e0       	ldi	r20, 0x01	; 1
    2cca:	50 e0       	ldi	r21, 0x00	; 0
    2ccc:	be 01       	movw	r22, r28
    2cce:	6f 5f       	subi	r22, 0xFF	; 255
    2cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd2:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <I2C_MasterReceiveGeneral>
}
    2cd6:	0f 90       	pop	r0
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	1f 91       	pop	r17
    2cde:	0f 91       	pop	r16
    2ce0:	08 95       	ret

00002ce2 <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
    2ce2:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <genuSpi_Status>
    2ce6:	87 30       	cpi	r24, 0x07	; 7
    2ce8:	b9 f0       	breq	.+46     	; 0x2d18 <Spi_init+0x36>
    2cea:	87 b3       	in	r24, 0x17	; 23
    2cec:	80 64       	ori	r24, 0x40	; 64
    2cee:	87 bb       	out	0x17, r24	; 23
    2cf0:	87 b3       	in	r24, 0x17	; 23
    2cf2:	8f 7d       	andi	r24, 0xDF	; 223
    2cf4:	87 bb       	out	0x17, r24	; 23
    2cf6:	87 b3       	in	r24, 0x17	; 23
    2cf8:	8f 7e       	andi	r24, 0xEF	; 239
    2cfa:	87 bb       	out	0x17, r24	; 23
    2cfc:	87 b3       	in	r24, 0x17	; 23
    2cfe:	8f 77       	andi	r24, 0x7F	; 127
    2d00:	87 bb       	out	0x17, r24	; 23
    2d02:	8d b1       	in	r24, 0x0d	; 13
    2d04:	8f 7e       	andi	r24, 0xEF	; 239
    2d06:	8d b9       	out	0x0d, r24	; 13
    2d08:	8d b1       	in	r24, 0x0d	; 13
    2d0a:	80 64       	ori	r24, 0x40	; 64
    2d0c:	8d b9       	out	0x0d, r24	; 13
    2d0e:	87 e0       	ldi	r24, 0x07	; 7
    2d10:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <genuSpi_Status>
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	08 95       	ret
    2d18:	88 e0       	ldi	r24, 0x08	; 8
    2d1a:	08 95       	ret

00002d1c <Spi_SlaveReceiveByte>:
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <genuSpi_Status>
    2d22:	97 30       	cpi	r25, 0x07	; 7
    2d24:	41 f4       	brne	.+16     	; 0x2d36 <Spi_SlaveReceiveByte+0x1a>
    2d26:	30 97       	sbiw	r30, 0x00	; 0
    2d28:	41 f0       	breq	.+16     	; 0x2d3a <Spi_SlaveReceiveByte+0x1e>
    2d2a:	77 9b       	sbis	0x0e, 7	; 14
    2d2c:	fe cf       	rjmp	.-4      	; 0x2d2a <Spi_SlaveReceiveByte+0xe>
    2d2e:	8f b1       	in	r24, 0x0f	; 15
    2d30:	80 83       	st	Z, r24
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	08 95       	ret
    2d36:	86 e0       	ldi	r24, 0x06	; 6
    2d38:	08 95       	ret
    2d3a:	85 e0       	ldi	r24, 0x05	; 5
    2d3c:	08 95       	ret

00002d3e <Spi_SlaveReceivePacket>:
    2d3e:	cf 92       	push	r12
    2d40:	df 92       	push	r13
    2d42:	ef 92       	push	r14
    2d44:	ff 92       	push	r15
    2d46:	1f 93       	push	r17
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29
    2d4c:	6c 01       	movw	r12, r24
    2d4e:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <genuSpi_Status>
    2d52:	97 30       	cpi	r25, 0x07	; 7
    2d54:	b1 f4       	brne	.+44     	; 0x2d82 <Spi_SlaveReceivePacket+0x44>
    2d56:	7b 01       	movw	r14, r22
    2d58:	10 e0       	ldi	r17, 0x00	; 0
    2d5a:	0c c0       	rjmp	.+24     	; 0x2d74 <Spi_SlaveReceivePacket+0x36>
    2d5c:	e6 01       	movw	r28, r12
    2d5e:	c8 0f       	add	r28, r24
    2d60:	d9 1f       	adc	r29, r25
    2d62:	ce 01       	movw	r24, r28
    2d64:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <Spi_SlaveReceiveByte>
    2d68:	81 30       	cpi	r24, 0x01	; 1
    2d6a:	69 f4       	brne	.+26     	; 0x2d86 <Spi_SlaveReceivePacket+0x48>
    2d6c:	98 81       	ld	r25, Y
    2d6e:	99 23       	and	r25, r25
    2d70:	59 f0       	breq	.+22     	; 0x2d88 <Spi_SlaveReceivePacket+0x4a>
    2d72:	1f 5f       	subi	r17, 0xFF	; 255
    2d74:	81 2f       	mov	r24, r17
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	8e 15       	cp	r24, r14
    2d7a:	9f 05       	cpc	r25, r15
    2d7c:	78 f3       	brcs	.-34     	; 0x2d5c <Spi_SlaveReceivePacket+0x1e>
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	03 c0       	rjmp	.+6      	; 0x2d88 <Spi_SlaveReceivePacket+0x4a>
    2d82:	86 e0       	ldi	r24, 0x06	; 6
    2d84:	01 c0       	rjmp	.+2      	; 0x2d88 <Spi_SlaveReceivePacket+0x4a>
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	df 91       	pop	r29
    2d8a:	cf 91       	pop	r28
    2d8c:	1f 91       	pop	r17
    2d8e:	ff 90       	pop	r15
    2d90:	ef 90       	pop	r14
    2d92:	df 90       	pop	r13
    2d94:	cf 90       	pop	r12
    2d96:	08 95       	ret

00002d98 <__vector_12>:


    2d98:	1f 92       	push	r1
    2d9a:	0f 92       	push	r0
    2d9c:	0f b6       	in	r0, 0x3f	; 63
    2d9e:	0f 92       	push	r0
    2da0:	11 24       	eor	r1, r1
    2da2:	2f 93       	push	r18
    2da4:	3f 93       	push	r19
    2da6:	4f 93       	push	r20
    2da8:	5f 93       	push	r21
    2daa:	6f 93       	push	r22
    2dac:	7f 93       	push	r23
    2dae:	8f 93       	push	r24
    2db0:	9f 93       	push	r25
    2db2:	af 93       	push	r26
    2db4:	bf 93       	push	r27
    2db6:	ef 93       	push	r30
    2db8:	ff 93       	push	r31
    2dba:	e0 91 ac 05 	lds	r30, 0x05AC	; 0x8005ac <SPI_STC_CallBackPtr>
    2dbe:	f0 91 ad 05 	lds	r31, 0x05AD	; 0x8005ad <SPI_STC_CallBackPtr+0x1>
    2dc2:	09 95       	icall
    2dc4:	ff 91       	pop	r31
    2dc6:	ef 91       	pop	r30
    2dc8:	bf 91       	pop	r27
    2dca:	af 91       	pop	r26
    2dcc:	9f 91       	pop	r25
    2dce:	8f 91       	pop	r24
    2dd0:	7f 91       	pop	r23
    2dd2:	6f 91       	pop	r22
    2dd4:	5f 91       	pop	r21
    2dd6:	4f 91       	pop	r20
    2dd8:	3f 91       	pop	r19
    2dda:	2f 91       	pop	r18
    2ddc:	0f 90       	pop	r0
    2dde:	0f be       	out	0x3f, r0	; 63
    2de0:	0f 90       	pop	r0
    2de2:	1f 90       	pop	r1
    2de4:	18 95       	reti

00002de6 <stringLength>:
	for (s8_loopIndex=length-2; s8_loopIndex>=0; s8_loopIndex--)
	{
		*pu32_Num += (pu8_String[s8_loopIndex]-'0') *digit;
		digit*=10;
	}
}
    2de6:	ac 01       	movw	r20, r24
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	01 c0       	rjmp	.+2      	; 0x2dee <stringLength+0x8>
    2dec:	8f 5f       	subi	r24, 0xFF	; 255
    2dee:	fa 01       	movw	r30, r20
    2df0:	e8 0f       	add	r30, r24
    2df2:	f1 1d       	adc	r31, r1
    2df4:	20 81       	ld	r18, Z
    2df6:	21 11       	cpse	r18, r1
    2df8:	f9 cf       	rjmp	.-14     	; 0x2dec <stringLength+0x6>
    2dfa:	8f 5f       	subi	r24, 0xFF	; 255
    2dfc:	08 95       	ret

00002dfe <stringCompare>:
    2dfe:	ff 92       	push	r15
    2e00:	0f 93       	push	r16
    2e02:	1f 93       	push	r17
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	8c 01       	movw	r16, r24
    2e0a:	eb 01       	movw	r28, r22
    2e0c:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <stringLength>
    2e10:	f8 2e       	mov	r15, r24
    2e12:	ce 01       	movw	r24, r28
    2e14:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <stringLength>
    2e18:	8f 15       	cp	r24, r15
    2e1a:	b8 f0       	brcs	.+46     	; 0x2e4a <stringCompare+0x4c>
    2e1c:	f8 16       	cp	r15, r24
    2e1e:	b8 f0       	brcs	.+46     	; 0x2e4e <stringCompare+0x50>
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	09 c0       	rjmp	.+18     	; 0x2e36 <stringCompare+0x38>
    2e24:	fe 01       	movw	r30, r28
    2e26:	e8 0f       	add	r30, r24
    2e28:	f9 1f       	adc	r31, r25
    2e2a:	80 81       	ld	r24, Z
    2e2c:	82 17       	cp	r24, r18
    2e2e:	88 f0       	brcs	.+34     	; 0x2e52 <stringCompare+0x54>
    2e30:	28 17       	cp	r18, r24
    2e32:	88 f0       	brcs	.+34     	; 0x2e56 <stringCompare+0x58>
    2e34:	3f 5f       	subi	r19, 0xFF	; 255
    2e36:	83 2f       	mov	r24, r19
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	f8 01       	movw	r30, r16
    2e3c:	e8 0f       	add	r30, r24
    2e3e:	f9 1f       	adc	r31, r25
    2e40:	20 81       	ld	r18, Z
    2e42:	21 11       	cpse	r18, r1
    2e44:	ef cf       	rjmp	.-34     	; 0x2e24 <stringCompare+0x26>
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	07 c0       	rjmp	.+14     	; 0x2e58 <stringCompare+0x5a>
    2e4a:	82 e0       	ldi	r24, 0x02	; 2
    2e4c:	05 c0       	rjmp	.+10     	; 0x2e58 <stringCompare+0x5a>
    2e4e:	83 e0       	ldi	r24, 0x03	; 3
    2e50:	03 c0       	rjmp	.+6      	; 0x2e58 <stringCompare+0x5a>
    2e52:	82 e0       	ldi	r24, 0x02	; 2
    2e54:	01 c0       	rjmp	.+2      	; 0x2e58 <stringCompare+0x5a>
    2e56:	83 e0       	ldi	r24, 0x03	; 3
    2e58:	df 91       	pop	r29
    2e5a:	cf 91       	pop	r28
    2e5c:	1f 91       	pop	r17
    2e5e:	0f 91       	pop	r16
    2e60:	ff 90       	pop	r15
    2e62:	08 95       	ret

00002e64 <EmptyString>:
    2e64:	ac 01       	movw	r20, r24
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	02 c0       	rjmp	.+4      	; 0x2e6e <EmptyString+0xa>
    2e6a:	9f 5f       	subi	r25, 0xFF	; 255
    2e6c:	10 82       	st	Z, r1
    2e6e:	fa 01       	movw	r30, r20
    2e70:	e9 0f       	add	r30, r25
    2e72:	f1 1d       	adc	r31, r1
    2e74:	20 81       	ld	r18, Z
    2e76:	21 11       	cpse	r18, r1
    2e78:	f8 cf       	rjmp	.-16     	; 0x2e6a <EmptyString+0x6>
    2e7a:	08 95       	ret

00002e7c <stringCopy>:
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	05 c0       	rjmp	.+10     	; 0x2e8c <stringCopy+0x10>
    2e82:	fb 01       	movw	r30, r22
    2e84:	e2 0f       	add	r30, r18
    2e86:	f3 1f       	adc	r31, r19
    2e88:	40 83       	st	Z, r20
    2e8a:	9f 5f       	subi	r25, 0xFF	; 255
    2e8c:	29 2f       	mov	r18, r25
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	fd 01       	movw	r30, r26
    2e92:	e2 0f       	add	r30, r18
    2e94:	f3 1f       	adc	r31, r19
    2e96:	40 81       	ld	r20, Z
    2e98:	41 11       	cpse	r20, r1
    2e9a:	f3 cf       	rjmp	.-26     	; 0x2e82 <stringCopy+0x6>
    2e9c:	08 95       	ret

00002e9e <integerToString>:
    2e9e:	0f 93       	push	r16
    2ea0:	1f 93       	push	r17
    2ea2:	cf 93       	push	r28
    2ea4:	df 93       	push	r29
    2ea6:	fc 01       	movw	r30, r24
    2ea8:	8b 01       	movw	r16, r22
    2eaa:	41 30       	cpi	r20, 0x01	; 1
    2eac:	d1 f5       	brne	.+116    	; 0x2f22 <integerToString+0x84>
    2eae:	c0 e0       	ldi	r28, 0x00	; 0
    2eb0:	d0 e0       	ldi	r29, 0x00	; 0
    2eb2:	6a e0       	ldi	r22, 0x0A	; 10
    2eb4:	70 e0       	ldi	r23, 0x00	; 0
    2eb6:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__divmodhi4>
    2eba:	cb 01       	movw	r24, r22
    2ebc:	00 97       	sbiw	r24, 0x00	; 0
    2ebe:	79 f1       	breq	.+94     	; 0x2f1e <integerToString+0x80>
    2ec0:	21 96       	adiw	r28, 0x01	; 1
    2ec2:	f7 cf       	rjmp	.-18     	; 0x2eb2 <integerToString+0x14>
    2ec4:	a8 01       	movw	r20, r16
    2ec6:	4c 0f       	add	r20, r28
    2ec8:	5d 1f       	adc	r21, r29
    2eca:	9f 01       	movw	r18, r30
    2ecc:	ad ec       	ldi	r26, 0xCD	; 205
    2ece:	bc ec       	ldi	r27, 0xCC	; 204
    2ed0:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <__umulhisi3>
    2ed4:	96 95       	lsr	r25
    2ed6:	87 95       	ror	r24
    2ed8:	96 95       	lsr	r25
    2eda:	87 95       	ror	r24
    2edc:	96 95       	lsr	r25
    2ede:	87 95       	ror	r24
    2ee0:	9c 01       	movw	r18, r24
    2ee2:	22 0f       	add	r18, r18
    2ee4:	33 1f       	adc	r19, r19
    2ee6:	88 0f       	add	r24, r24
    2ee8:	99 1f       	adc	r25, r25
    2eea:	88 0f       	add	r24, r24
    2eec:	99 1f       	adc	r25, r25
    2eee:	88 0f       	add	r24, r24
    2ef0:	99 1f       	adc	r25, r25
    2ef2:	82 0f       	add	r24, r18
    2ef4:	93 1f       	adc	r25, r19
    2ef6:	9f 01       	movw	r18, r30
    2ef8:	28 1b       	sub	r18, r24
    2efa:	39 0b       	sbc	r19, r25
    2efc:	c9 01       	movw	r24, r18
    2efe:	80 5d       	subi	r24, 0xD0	; 208
    2f00:	da 01       	movw	r26, r20
    2f02:	8c 93       	st	X, r24
    2f04:	9f 01       	movw	r18, r30
    2f06:	ad ec       	ldi	r26, 0xCD	; 205
    2f08:	bc ec       	ldi	r27, 0xCC	; 204
    2f0a:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <__umulhisi3>
    2f0e:	fc 01       	movw	r30, r24
    2f10:	f6 95       	lsr	r31
    2f12:	e7 95       	ror	r30
    2f14:	f6 95       	lsr	r31
    2f16:	e7 95       	ror	r30
    2f18:	f6 95       	lsr	r31
    2f1a:	e7 95       	ror	r30
    2f1c:	21 97       	sbiw	r28, 0x01	; 1
    2f1e:	30 97       	sbiw	r30, 0x00	; 0
    2f20:	89 f6       	brne	.-94     	; 0x2ec4 <integerToString+0x26>
    2f22:	df 91       	pop	r29
    2f24:	cf 91       	pop	r28
    2f26:	1f 91       	pop	r17
    2f28:	0f 91       	pop	r16
    2f2a:	08 95       	ret

00002f2c <stringToFloat>:

float32_t stringToFloat(uint8_t* string)
{
    2f2c:	8f 92       	push	r8
    2f2e:	9f 92       	push	r9
    2f30:	af 92       	push	r10
    2f32:	bf 92       	push	r11
    2f34:	cf 92       	push	r12
    2f36:	df 92       	push	r13
    2f38:	ef 92       	push	r14
    2f3a:	ff 92       	push	r15
    2f3c:	0f 93       	push	r16
    2f3e:	1f 93       	push	r17
    2f40:	cf 93       	push	r28
    2f42:	df 93       	push	r29
    2f44:	ec 01       	movw	r28, r24
	uint8_t strLen = stringLength(string)-1;
    2f46:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <stringLength>
    2f4a:	0f ef       	ldi	r16, 0xFF	; 255
    2f4c:	08 0f       	add	r16, r24
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
    2f4e:	c1 2c       	mov	r12, r1
    2f50:	d1 2c       	mov	r13, r1
    2f52:	76 01       	movw	r14, r12
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    2f54:	10 e0       	ldi	r17, 0x00	; 0
    2f56:	1e c0       	rjmp	.+60     	; 0x2f94 <stringToFloat+0x68>
	{
		if(string[u8_loopIndex] == '.')
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e1 0f       	add	r30, r17
    2f5c:	f1 1d       	adc	r31, r1
    2f5e:	60 81       	ld	r22, Z
    2f60:	6e 32       	cpi	r22, 0x2E	; 46
    2f62:	11 f4       	brne	.+4      	; 0x2f68 <stringToFloat+0x3c>
		{
			u8_loopIndex++;
    2f64:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    2f66:	18 c0       	rjmp	.+48     	; 0x2f98 <stringToFloat+0x6c>
		}
		f32_num += string[u8_loopIndex] - '0';
    2f68:	70 e0       	ldi	r23, 0x00	; 0
    2f6a:	60 53       	subi	r22, 0x30	; 48
    2f6c:	71 09       	sbc	r23, r1
    2f6e:	07 2e       	mov	r0, r23
    2f70:	00 0c       	add	r0, r0
    2f72:	88 0b       	sbc	r24, r24
    2f74:	99 0b       	sbc	r25, r25
    2f76:	0e 94 ac 1c 	call	0x3958	; 0x3958 <__floatsisf>
    2f7a:	a7 01       	movw	r20, r14
    2f7c:	96 01       	movw	r18, r12
    2f7e:	0e 94 98 1b 	call	0x3730	; 0x3730 <__addsf3>
		f32_num *= 10;
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e2       	ldi	r20, 0x20	; 32
    2f88:	51 e4       	ldi	r21, 0x41	; 65
    2f8a:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__mulsf3>
    2f8e:	6b 01       	movw	r12, r22
    2f90:	7c 01       	movw	r14, r24
{
	uint8_t strLen = stringLength(string)-1;
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    2f92:	1f 5f       	subi	r17, 0xFF	; 255
    2f94:	10 17       	cp	r17, r16
    2f96:	00 f3       	brcs	.-64     	; 0x2f58 <stringToFloat+0x2c>
			break;
		}
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e2       	ldi	r20, 0x20	; 32
    2f9e:	51 e4       	ldi	r21, 0x41	; 65
    2fa0:	c7 01       	movw	r24, r14
    2fa2:	b6 01       	movw	r22, r12
    2fa4:	0e 94 09 1c 	call	0x3812	; 0x3812 <__divsf3>
    2fa8:	4b 01       	movw	r8, r22
    2faa:	5c 01       	movw	r10, r24
	f32_digit = 1;
    2fac:	0f 2e       	mov	r0, r31
    2fae:	c1 2c       	mov	r12, r1
    2fb0:	d1 2c       	mov	r13, r1
    2fb2:	f0 e8       	ldi	r31, 0x80	; 128
    2fb4:	ef 2e       	mov	r14, r31
    2fb6:	ff e3       	ldi	r31, 0x3F	; 63
    2fb8:	ff 2e       	mov	r15, r31
    2fba:	f0 2d       	mov	r31, r0
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    2fbc:	24 c0       	rjmp	.+72     	; 0x3006 <stringToFloat+0xda>
	{
		f32_digit/=10;
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e2       	ldi	r20, 0x20	; 32
    2fc4:	51 e4       	ldi	r21, 0x41	; 65
    2fc6:	c7 01       	movw	r24, r14
    2fc8:	b6 01       	movw	r22, r12
    2fca:	0e 94 09 1c 	call	0x3812	; 0x3812 <__divsf3>
    2fce:	6b 01       	movw	r12, r22
    2fd0:	7c 01       	movw	r14, r24
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	e1 0f       	add	r30, r17
    2fd6:	f1 1d       	adc	r31, r1
    2fd8:	60 81       	ld	r22, Z
    2fda:	70 e0       	ldi	r23, 0x00	; 0
    2fdc:	60 53       	subi	r22, 0x30	; 48
    2fde:	71 09       	sbc	r23, r1
    2fe0:	07 2e       	mov	r0, r23
    2fe2:	00 0c       	add	r0, r0
    2fe4:	88 0b       	sbc	r24, r24
    2fe6:	99 0b       	sbc	r25, r25
    2fe8:	0e 94 ac 1c 	call	0x3958	; 0x3958 <__floatsisf>
    2fec:	a7 01       	movw	r20, r14
    2fee:	96 01       	movw	r18, r12
    2ff0:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__mulsf3>
    2ff4:	9b 01       	movw	r18, r22
    2ff6:	ac 01       	movw	r20, r24
    2ff8:	c5 01       	movw	r24, r10
    2ffa:	b4 01       	movw	r22, r8
    2ffc:	0e 94 98 1b 	call	0x3730	; 0x3730 <__addsf3>
    3000:	4b 01       	movw	r8, r22
    3002:	5c 01       	movw	r10, r24
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
	f32_digit = 1;
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    3004:	1f 5f       	subi	r17, 0xFF	; 255
    3006:	10 17       	cp	r17, r16
    3008:	d0 f2       	brcs	.-76     	; 0x2fbe <stringToFloat+0x92>
	{
		f32_digit/=10;
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
	}
	return f32_num;
}
    300a:	c5 01       	movw	r24, r10
    300c:	b4 01       	movw	r22, r8
    300e:	df 91       	pop	r29
    3010:	cf 91       	pop	r28
    3012:	1f 91       	pop	r17
    3014:	0f 91       	pop	r16
    3016:	ff 90       	pop	r15
    3018:	ef 90       	pop	r14
    301a:	df 90       	pop	r13
    301c:	cf 90       	pop	r12
    301e:	bf 90       	pop	r11
    3020:	af 90       	pop	r10
    3022:	9f 90       	pop	r9
    3024:	8f 90       	pop	r8
    3026:	08 95       	ret

00003028 <floatToString>:

void floatToString(float32_t f32_num, uint8_t* string)
{
    3028:	8f 92       	push	r8
    302a:	9f 92       	push	r9
    302c:	af 92       	push	r10
    302e:	bf 92       	push	r11
    3030:	cf 92       	push	r12
    3032:	df 92       	push	r13
    3034:	ef 92       	push	r14
    3036:	ff 92       	push	r15
    3038:	0f 93       	push	r16
    303a:	1f 93       	push	r17
    303c:	cf 93       	push	r28
    303e:	df 93       	push	r29
    3040:	4b 01       	movw	r8, r22
    3042:	5c 01       	movw	r10, r24
    3044:	8a 01       	movw	r16, r20
	uint32_t u32_num = (uint32_t)f32_num;
    3046:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__fixunssfsi>
    304a:	c6 2e       	mov	r12, r22
    304c:	d7 2e       	mov	r13, r23
    304e:	e8 2e       	mov	r14, r24
    3050:	f9 2e       	mov	r15, r25
    3052:	26 2f       	mov	r18, r22
    3054:	37 2f       	mov	r19, r23
    3056:	48 2f       	mov	r20, r24
    3058:	59 2f       	mov	r21, r25
	uint8_t u8_digitCount=0;
    305a:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    305c:	09 c0       	rjmp	.+18     	; 0x3070 <floatToString+0x48>
	{
		u32_num/=10;
    305e:	ca 01       	movw	r24, r20
    3060:	b9 01       	movw	r22, r18
    3062:	2a e0       	ldi	r18, 0x0A	; 10
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	40 e0       	ldi	r20, 0x00	; 0
    3068:	50 e0       	ldi	r21, 0x00	; 0
    306a:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__udivmodsi4>
		u8_digitCount++;
    306e:	df 5f       	subi	r29, 0xFF	; 255
{
	uint32_t u32_num = (uint32_t)f32_num;
	uint8_t u8_digitCount=0;
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    3070:	21 15       	cp	r18, r1
    3072:	31 05       	cpc	r19, r1
    3074:	41 05       	cpc	r20, r1
    3076:	51 05       	cpc	r21, r1
    3078:	91 f7       	brne	.-28     	; 0x305e <floatToString+0x36>
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
    307a:	cf ef       	ldi	r28, 0xFF	; 255
    307c:	cd 0f       	add	r28, r29
	while(u32_num !=0)
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
    307e:	6c 2d       	mov	r22, r12
    3080:	7d 2d       	mov	r23, r13
    3082:	8e 2d       	mov	r24, r14
    3084:	9f 2d       	mov	r25, r15
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    3086:	14 c0       	rjmp	.+40     	; 0x30b0 <floatToString+0x88>
	{
		temp = (u32_num % 10)+ '0';
    3088:	2a e0       	ldi	r18, 0x0A	; 10
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	40 e0       	ldi	r20, 0x00	; 0
    308e:	50 e0       	ldi	r21, 0x00	; 0
    3090:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__udivmodsi4>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	c0 96       	adiw	r24, 0x30	; 48
    309a:	a1 1d       	adc	r26, r1
    309c:	b1 1d       	adc	r27, r1
		string[u8_digitCount--] = temp;
    309e:	f8 01       	movw	r30, r16
    30a0:	ec 0f       	add	r30, r28
    30a2:	f1 1d       	adc	r31, r1
    30a4:	80 83       	st	Z, r24
		u32_num /= 10;
    30a6:	62 2f       	mov	r22, r18
    30a8:	73 2f       	mov	r23, r19
    30aa:	84 2f       	mov	r24, r20
    30ac:	95 2f       	mov	r25, r21
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
	{
		temp = (u32_num % 10)+ '0';
		string[u8_digitCount--] = temp;
    30ae:	c1 50       	subi	r28, 0x01	; 1
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    30b0:	61 15       	cp	r22, r1
    30b2:	71 05       	cpc	r23, r1
    30b4:	81 05       	cpc	r24, r1
    30b6:	91 05       	cpc	r25, r1
    30b8:	39 f7       	brne	.-50     	; 0x3088 <floatToString+0x60>
		string[u8_digitCount--] = temp;
		u32_num /= 10;

	}
	u32_num = (uint32_t)f32_num;
	f32_num -= u32_num;
    30ba:	6c 2d       	mov	r22, r12
    30bc:	7d 2d       	mov	r23, r13
    30be:	8e 2d       	mov	r24, r14
    30c0:	9f 2d       	mov	r25, r15
    30c2:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__floatunsisf>
    30c6:	9b 01       	movw	r18, r22
    30c8:	ac 01       	movw	r20, r24
    30ca:	c5 01       	movw	r24, r10
    30cc:	b4 01       	movw	r22, r8
    30ce:	0e 94 97 1b 	call	0x372e	; 0x372e <__subsf3>
	u32_num = f32_num*10;
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e2       	ldi	r20, 0x20	; 32
    30d8:	51 e4       	ldi	r21, 0x41	; 65
    30da:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__mulsf3>
    30de:	6b 01       	movw	r12, r22
    30e0:	7c 01       	movw	r14, r24
    30e2:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__fixunssfsi>
	string[u8_indexDot++] = '.';
    30e6:	21 e0       	ldi	r18, 0x01	; 1
    30e8:	2d 0f       	add	r18, r29
    30ea:	f8 01       	movw	r30, r16
    30ec:	ed 0f       	add	r30, r29
    30ee:	f1 1d       	adc	r31, r1
    30f0:	3e e2       	ldi	r19, 0x2E	; 46
    30f2:	30 83       	st	Z, r19
	string[u8_indexDot++] = u32_num + '0';
    30f4:	de 5f       	subi	r29, 0xFE	; 254
    30f6:	f8 01       	movw	r30, r16
    30f8:	e2 0f       	add	r30, r18
    30fa:	f1 1d       	adc	r31, r1
    30fc:	20 e3       	ldi	r18, 0x30	; 48
    30fe:	26 0f       	add	r18, r22
    3100:	20 83       	st	Z, r18
	f32_num *=10;
	f32_num -= u32_num;
    3102:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__floatunsisf>
    3106:	9b 01       	movw	r18, r22
    3108:	ac 01       	movw	r20, r24
    310a:	c7 01       	movw	r24, r14
    310c:	b6 01       	movw	r22, r12
    310e:	0e 94 97 1b 	call	0x372e	; 0x372e <__subsf3>
	u32_num = f32_num*10;
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e2       	ldi	r20, 0x20	; 32
    3118:	51 e4       	ldi	r21, 0x41	; 65
    311a:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__mulsf3>
    311e:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__fixunssfsi>
	string[u8_indexDot] = u32_num + '0';
    3122:	f8 01       	movw	r30, r16
    3124:	ed 0f       	add	r30, r29
    3126:	f1 1d       	adc	r31, r1
    3128:	60 5d       	subi	r22, 0xD0	; 208
    312a:	60 83       	st	Z, r22
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	1f 91       	pop	r17
    3132:	0f 91       	pop	r16
    3134:	ff 90       	pop	r15
    3136:	ef 90       	pop	r14
    3138:	df 90       	pop	r13
    313a:	cf 90       	pop	r12
    313c:	bf 90       	pop	r11
    313e:	af 90       	pop	r10
    3140:	9f 90       	pop	r9
    3142:	8f 90       	pop	r8
    3144:	08 95       	ret

00003146 <waveFunction>:
* Parameters (out): None
* Return value: None
* Description: Function to be called inside the timer's ISR.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
void waveFunction(void)
{
    3146:	0f 93       	push	r16
    3148:	1f 93       	push	r17
	/* Toggle the Pin of the PWM Channel */
	if(Dio_togglePin(SWPwm_Channels[gu8_currentPwmChannel].u8_DioChannelID) != DIO_STATUS_ERROR_OK)
    314a:	e0 91 af 05 	lds	r30, 0x05AF	; 0x8005af <gu8_currentPwmChannel>
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	ee 0f       	add	r30, r30
    3152:	ff 1f       	adc	r31, r31
    3154:	e9 5b       	subi	r30, 0xB9	; 185
    3156:	fb 4f       	sbci	r31, 0xFB	; 251
    3158:	80 81       	ld	r24, Z
    315a:	0e 94 4d 11 	call	0x229a	; 0x229a <Dio_togglePin>
    315e:	81 30       	cpi	r24, 0x01	; 1
    3160:	09 f0       	breq	.+2      	; 0x3164 <waveFunction+0x1e>
    3162:	76 c0       	rjmp	.+236    	; 0x3250 <waveFunction+0x10a>
		return;
	/* Check if the PWM Channel is still in Running State */
	if (gstr_ChannelsData[gu8_currentPwmChannel].enuChannelState == SWPWM_RUNNING)
    3164:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <gu8_currentPwmChannel>
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	9c 01       	movw	r18, r24
    316c:	22 0f       	add	r18, r18
    316e:	33 1f       	adc	r19, r19
    3170:	f9 01       	movw	r30, r18
    3172:	ee 0f       	add	r30, r30
    3174:	ff 1f       	adc	r31, r31
    3176:	ee 0f       	add	r30, r30
    3178:	ff 1f       	adc	r31, r31
    317a:	ee 0f       	add	r30, r30
    317c:	ff 1f       	adc	r31, r31
    317e:	e2 1b       	sub	r30, r18
    3180:	f3 0b       	sbc	r31, r19
    3182:	e0 55       	subi	r30, 0x50	; 80
    3184:	fa 4f       	sbci	r31, 0xFA	; 250
    3186:	25 85       	ldd	r18, Z+13	; 0x0d
    3188:	22 30       	cpi	r18, 0x02	; 2
    318a:	09 f0       	breq	.+2      	; 0x318e <waveFunction+0x48>
    318c:	61 c0       	rjmp	.+194    	; 0x3250 <waveFunction+0x10a>
	{
		/* Start the Timer again with the new ticks assigned */
		if(GptStart_aSync(SWPwm_Channels[gu8_currentPwmChannel].u8_GptChannelID,\
    318e:	88 0f       	add	r24, r24
    3190:	99 1f       	adc	r25, r25
    3192:	fc 01       	movw	r30, r24
    3194:	ee 0f       	add	r30, r30
    3196:	ff 1f       	adc	r31, r31
    3198:	ee 0f       	add	r30, r30
    319a:	ff 1f       	adc	r31, r31
    319c:	ee 0f       	add	r30, r30
    319e:	ff 1f       	adc	r31, r31
    31a0:	e8 1b       	sub	r30, r24
    31a2:	f9 0b       	sbc	r31, r25
    31a4:	e0 55       	subi	r30, 0x50	; 80
    31a6:	fa 4f       	sbci	r31, 0xFA	; 250
    31a8:	41 85       	ldd	r20, Z+9	; 0x09
    31aa:	52 85       	ldd	r21, Z+10	; 0x0a
    31ac:	63 85       	ldd	r22, Z+11	; 0x0b
    31ae:	74 85       	ldd	r23, Z+12	; 0x0c
    31b0:	fc 01       	movw	r30, r24
    31b2:	e9 5b       	subi	r30, 0xB9	; 185
    31b4:	fb 4f       	sbci	r31, 0xFB	; 251
    31b6:	23 ea       	ldi	r18, 0xA3	; 163
    31b8:	38 e1       	ldi	r19, 0x18	; 24
    31ba:	81 81       	ldd	r24, Z+1	; 0x01
    31bc:	0e 94 1e 13 	call	0x263c	; 0x263c <GptStart_aSync>
    31c0:	81 30       	cpi	r24, 0x01	; 1
    31c2:	09 f0       	breq	.+2      	; 0x31c6 <waveFunction+0x80>
    31c4:	45 c0       	rjmp	.+138    	; 0x3250 <waveFunction+0x10a>
		                  gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks,\
						   waveFunction) != GPT_STATUS_ERROR_OK)	return;
		
		/* Replace the next ticks to be counted between ONTicks and OFFTicks*/
		if(gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks == gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks)
    31c6:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <gu8_currentPwmChannel>
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	9c 01       	movw	r18, r24
    31ce:	22 0f       	add	r18, r18
    31d0:	33 1f       	adc	r19, r19
    31d2:	f9 01       	movw	r30, r18
    31d4:	ee 0f       	add	r30, r30
    31d6:	ff 1f       	adc	r31, r31
    31d8:	ee 0f       	add	r30, r30
    31da:	ff 1f       	adc	r31, r31
    31dc:	ee 0f       	add	r30, r30
    31de:	ff 1f       	adc	r31, r31
    31e0:	e2 1b       	sub	r30, r18
    31e2:	f3 0b       	sbc	r31, r19
    31e4:	e0 55       	subi	r30, 0x50	; 80
    31e6:	fa 4f       	sbci	r31, 0xFA	; 250
    31e8:	01 85       	ldd	r16, Z+9	; 0x09
    31ea:	12 85       	ldd	r17, Z+10	; 0x0a
    31ec:	23 85       	ldd	r18, Z+11	; 0x0b
    31ee:	34 85       	ldd	r19, Z+12	; 0x0c
    31f0:	45 81       	ldd	r20, Z+5	; 0x05
    31f2:	56 81       	ldd	r21, Z+6	; 0x06
    31f4:	67 81       	ldd	r22, Z+7	; 0x07
    31f6:	70 85       	ldd	r23, Z+8	; 0x08
    31f8:	04 17       	cp	r16, r20
    31fa:	15 07       	cpc	r17, r21
    31fc:	26 07       	cpc	r18, r22
    31fe:	37 07       	cpc	r19, r23
    3200:	b1 f4       	brne	.+44     	; 0x322e <waveFunction+0xe8>
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_ONTicks;
    3202:	88 0f       	add	r24, r24
    3204:	99 1f       	adc	r25, r25
    3206:	fc 01       	movw	r30, r24
    3208:	ee 0f       	add	r30, r30
    320a:	ff 1f       	adc	r31, r31
    320c:	ee 0f       	add	r30, r30
    320e:	ff 1f       	adc	r31, r31
    3210:	ee 0f       	add	r30, r30
    3212:	ff 1f       	adc	r31, r31
    3214:	e8 1b       	sub	r30, r24
    3216:	f9 0b       	sbc	r31, r25
    3218:	e0 55       	subi	r30, 0x50	; 80
    321a:	fa 4f       	sbci	r31, 0xFA	; 250
    321c:	81 81       	ldd	r24, Z+1	; 0x01
    321e:	92 81       	ldd	r25, Z+2	; 0x02
    3220:	a3 81       	ldd	r26, Z+3	; 0x03
    3222:	b4 81       	ldd	r27, Z+4	; 0x04
    3224:	81 87       	std	Z+9, r24	; 0x09
    3226:	92 87       	std	Z+10, r25	; 0x0a
    3228:	a3 87       	std	Z+11, r26	; 0x0b
    322a:	b4 87       	std	Z+12, r27	; 0x0c
    322c:	11 c0       	rjmp	.+34     	; 0x3250 <waveFunction+0x10a>
		else
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks;
    322e:	88 0f       	add	r24, r24
    3230:	99 1f       	adc	r25, r25
    3232:	fc 01       	movw	r30, r24
    3234:	ee 0f       	add	r30, r30
    3236:	ff 1f       	adc	r31, r31
    3238:	ee 0f       	add	r30, r30
    323a:	ff 1f       	adc	r31, r31
    323c:	ee 0f       	add	r30, r30
    323e:	ff 1f       	adc	r31, r31
    3240:	e8 1b       	sub	r30, r24
    3242:	f9 0b       	sbc	r31, r25
    3244:	e0 55       	subi	r30, 0x50	; 80
    3246:	fa 4f       	sbci	r31, 0xFA	; 250
    3248:	41 87       	std	Z+9, r20	; 0x09
    324a:	52 87       	std	Z+10, r21	; 0x0a
    324c:	63 87       	std	Z+11, r22	; 0x0b
    324e:	74 87       	std	Z+12, r23	; 0x0c
	}
}
    3250:	1f 91       	pop	r17
    3252:	0f 91       	pop	r16
    3254:	08 95       	ret

00003256 <SWPwm_Init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
    3256:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <genu_SWPwmModStatus>
    325a:	81 30       	cpi	r24, 0x01	; 1
    325c:	91 f0       	breq	.+36     	; 0x3282 <SWPwm_Init+0x2c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
    325e:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <GptInit>
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
    3262:	81 30       	cpi	r24, 0x01	; 1
    3264:	11 f0       	breq	.+4      	; 0x326a <SWPwm_Init+0x14>
    3266:	83 30       	cpi	r24, 0x03	; 3
    3268:	71 f4       	brne	.+28     	; 0x3286 <SWPwm_Init+0x30>
		return SWPWM_STATUS_ERROR_NOK;
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    326a:	85 e8       	ldi	r24, 0x85	; 133
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    3272:	81 30       	cpi	r24, 0x01	; 1
    3274:	11 f0       	breq	.+4      	; 0x327a <SWPwm_Init+0x24>
    3276:	87 30       	cpi	r24, 0x07	; 7
    3278:	41 f4       	brne	.+16     	; 0x328a <SWPwm_Init+0x34>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <genu_SWPwmModStatus>
	return SWPWM_STATUS_ERROR_OK;
    3280:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_ERROR_NOK;
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
		return SWPWM_STATUS_ERROR_NOK;
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	08 95       	ret
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return SWPWM_STATUS_ERROR_NOK;
    328a:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
	return SWPWM_STATUS_ERROR_OK;
}
    328c:	08 95       	ret

0000328e <SWPwm_Start>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Start(u8SWPwm_Channel_t u8_ChannelID, uint32_t u32_Freq, uint8_t u8_DutyCycle)
{
    328e:	4f 92       	push	r4
    3290:	5f 92       	push	r5
    3292:	6f 92       	push	r6
    3294:	7f 92       	push	r7
    3296:	8f 92       	push	r8
    3298:	9f 92       	push	r9
    329a:	af 92       	push	r10
    329c:	bf 92       	push	r11
    329e:	cf 92       	push	r12
    32a0:	df 92       	push	r13
    32a2:	ef 92       	push	r14
    32a4:	ff 92       	push	r15
    32a6:	0f 93       	push	r16
    32a8:	1f 93       	push	r17
    32aa:	cf 93       	push	r28
    32ac:	df 93       	push	r29
    32ae:	00 d0       	rcall	.+0      	; 0x32b0 <SWPwm_Start+0x22>
    32b0:	00 d0       	rcall	.+0      	; 0x32b2 <SWPwm_Start+0x24>
    32b2:	00 d0       	rcall	.+0      	; 0x32b4 <SWPwm_Start+0x26>
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    32b8:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <genu_SWPwmModStatus>
    32bc:	91 30       	cpi	r25, 0x01	; 1
    32be:	09 f0       	breq	.+2      	; 0x32c2 <SWPwm_Start+0x34>
    32c0:	f2 c0       	rjmp	.+484    	; 0x34a6 <SWPwm_Start+0x218>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    32c2:	81 11       	cpse	r24, r1
    32c4:	f2 c0       	rjmp	.+484    	; 0x34aa <SWPwm_Start+0x21c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
    32c6:	25 36       	cpi	r18, 0x65	; 101
    32c8:	08 f0       	brcs	.+2      	; 0x32cc <SWPwm_Start+0x3e>
    32ca:	f1 c0       	rjmp	.+482    	; 0x34ae <SWPwm_Start+0x220>
	{
		return SWPWM_STATUS_DC_OUTRANGE;
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
    32cc:	e8 2f       	mov	r30, r24
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	fe 83       	std	Y+6, r31	; 0x06
    32d2:	ed 83       	std	Y+5, r30	; 0x05
    32d4:	df 01       	movw	r26, r30
    32d6:	aa 0f       	add	r26, r26
    32d8:	bb 1f       	adc	r27, r27
    32da:	fd 01       	movw	r30, r26
    32dc:	ee 0f       	add	r30, r30
    32de:	ff 1f       	adc	r31, r31
    32e0:	ee 0f       	add	r30, r30
    32e2:	ff 1f       	adc	r31, r31
    32e4:	ee 0f       	add	r30, r30
    32e6:	ff 1f       	adc	r31, r31
    32e8:	ea 1b       	sub	r30, r26
    32ea:	fb 0b       	sbc	r31, r27
    32ec:	e0 55       	subi	r30, 0x50	; 80
    32ee:	fa 4f       	sbci	r31, 0xFA	; 250
    32f0:	95 85       	ldd	r25, Z+13	; 0x0d
    32f2:	92 30       	cpi	r25, 0x02	; 2
    32f4:	09 f4       	brne	.+2      	; 0x32f8 <SWPwm_Start+0x6a>
    32f6:	dd c0       	rjmp	.+442    	; 0x34b2 <SWPwm_Start+0x224>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
    32f8:	22 23       	and	r18, r18
    32fa:	09 f4       	brne	.+2      	; 0x32fe <SWPwm_Start+0x70>
    32fc:	dc c0       	rjmp	.+440    	; 0x34b6 <SWPwm_Start+0x228>
    32fe:	12 2f       	mov	r17, r18
    3300:	c8 2e       	mov	r12, r24
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
	}else if(u8_DutyCycle == 100)
    3302:	24 36       	cpi	r18, 0x64	; 100
    3304:	61 f4       	brne	.+24     	; 0x331e <SWPwm_Start+0x90>
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    3306:	fd 01       	movw	r30, r26
    3308:	e9 5b       	subi	r30, 0xB9	; 185
    330a:	fb 4f       	sbci	r31, 0xFB	; 251
    330c:	61 e0       	ldi	r22, 0x01	; 1
    330e:	80 81       	ld	r24, Z
    3310:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    3314:	81 30       	cpi	r24, 0x01	; 1
    3316:	09 f4       	brne	.+2      	; 0x331a <SWPwm_Start+0x8c>
    3318:	d0 c0       	rjmp	.+416    	; 0x34ba <SWPwm_Start+0x22c>
			return SWPWM_STATUS_ERROR_NOK;
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	d5 c0       	rjmp	.+426    	; 0x34c8 <SWPwm_Start+0x23a>
		return SWPWM_STATUS_ERROR_OK;
	}
	
	float32_t f32_wavePeriodTime = (float32_t)1 / u32_Freq;					/* The Periodic Time for the Generated Pulse in Seconds */
    331e:	cb 01       	movw	r24, r22
    3320:	ba 01       	movw	r22, r20
    3322:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__floatunsisf>
    3326:	9b 01       	movw	r18, r22
    3328:	ac 01       	movw	r20, r24
    332a:	60 e0       	ldi	r22, 0x00	; 0
    332c:	70 e0       	ldi	r23, 0x00	; 0
    332e:	80 e8       	ldi	r24, 0x80	; 128
    3330:	9f e3       	ldi	r25, 0x3F	; 63
    3332:	0e 94 09 1c 	call	0x3812	; 0x3812 <__divsf3>
    3336:	4b 01       	movw	r8, r22
    3338:	5c 01       	movw	r10, r24
	float32_t f32_waveONTime = (f32_wavePeriodTime*u8_DutyCycle) / 100;		/* The HIGH Level Time in Seconds */
    333a:	61 2f       	mov	r22, r17
    333c:	70 e0       	ldi	r23, 0x00	; 0
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	0e 94 ac 1c 	call	0x3958	; 0x3958 <__floatsisf>
    3346:	a5 01       	movw	r20, r10
    3348:	94 01       	movw	r18, r8
    334a:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__mulsf3>
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	48 ec       	ldi	r20, 0xC8	; 200
    3354:	52 e4       	ldi	r21, 0x42	; 66
    3356:	0e 94 09 1c 	call	0x3812	; 0x3812 <__divsf3>
    335a:	2b 01       	movw	r4, r22
    335c:	3c 01       	movw	r6, r24
	float32_t f32_waveOFFTime = f32_wavePeriodTime - f32_waveONTime;		/* The LOW Level Time in Seconds */
    335e:	9b 01       	movw	r18, r22
    3360:	ac 01       	movw	r20, r24
    3362:	c5 01       	movw	r24, r10
    3364:	b4 01       	movw	r22, r8
    3366:	0e 94 97 1b 	call	0x372e	; 0x372e <__subsf3>
    336a:	4b 01       	movw	r8, r22
    336c:	5c 01       	movw	r10, r24
	float32_t f32_systemPeriodTime = 0.0;
	uint16_t  u16_prescalerValue = 0;
	
	/* Get the Prescaler Value of the used Timer Channel */
	switch(Timers_Configurations[SWPwm_Channels[u8_ChannelID].u8_GptChannelID].enuClock_Src)
    336e:	ed 81       	ldd	r30, Y+5	; 0x05
    3370:	fe 81       	ldd	r31, Y+6	; 0x06
    3372:	ee 0f       	add	r30, r30
    3374:	ff 1f       	adc	r31, r31
    3376:	e9 5b       	subi	r30, 0xB9	; 185
    3378:	fb 4f       	sbci	r31, 0xFB	; 251
    337a:	d1 80       	ldd	r13, Z+1	; 0x01
    337c:	8d 2d       	mov	r24, r13
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	fc 01       	movw	r30, r24
    3382:	ee 0f       	add	r30, r30
    3384:	ff 1f       	adc	r31, r31
    3386:	8e 0f       	add	r24, r30
    3388:	9f 1f       	adc	r25, r31
    338a:	fc 01       	movw	r30, r24
    338c:	ec 5b       	subi	r30, 0xBC	; 188
    338e:	fb 4f       	sbci	r31, 0xFB	; 251
    3390:	e1 81       	ldd	r30, Z+1	; 0x01
    3392:	8e 2f       	mov	r24, r30
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	fc 01       	movw	r30, r24
    3398:	31 97       	sbiw	r30, 0x01	; 1
    339a:	e7 30       	cpi	r30, 0x07	; 7
    339c:	f1 05       	cpc	r31, r1
    339e:	08 f0       	brcs	.+2      	; 0x33a2 <SWPwm_Start+0x114>
    33a0:	8e c0       	rjmp	.+284    	; 0x34be <SWPwm_Start+0x230>
    33a2:	e6 5d       	subi	r30, 0xD6	; 214
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__tablejump2__>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
    33aa:	61 e0       	ldi	r22, 0x01	; 1
    33ac:	70 e0       	ldi	r23, 0x00	; 0
    33ae:	0b c0       	rjmp	.+22     	; 0x33c6 <SWPwm_Start+0x138>
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
			break;
		case GPT_CLK_SRC_PRSCLR_64:
			u16_prescalerValue = 64;
    33b0:	60 e4       	ldi	r22, 0x40	; 64
    33b2:	70 e0       	ldi	r23, 0x00	; 0
			break;
    33b4:	08 c0       	rjmp	.+16     	; 0x33c6 <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_256:
			u16_prescalerValue = 256;
    33b6:	60 e0       	ldi	r22, 0x00	; 0
    33b8:	71 e0       	ldi	r23, 0x01	; 1
			break;
    33ba:	05 c0       	rjmp	.+10     	; 0x33c6 <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_1024:
			u16_prescalerValue = 1024;
    33bc:	60 e0       	ldi	r22, 0x00	; 0
    33be:	74 e0       	ldi	r23, 0x04	; 4
			break;
    33c0:	02 c0       	rjmp	.+4      	; 0x33c6 <SWPwm_Start+0x138>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
    33c2:	68 e0       	ldi	r22, 0x08	; 8
    33c4:	70 e0       	ldi	r23, 0x00	; 0
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
	}
	
	f32_systemPeriodTime = (float32_t)u16_prescalerValue/SYS_CLOCK_FREQUENCY;				/* The Controllers Periodic Time in seconds based on the System Clock Frequency */
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__floatunsisf>
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	34 e2       	ldi	r19, 0x24	; 36
    33d2:	44 e7       	ldi	r20, 0x74	; 116
    33d4:	59 e4       	ldi	r21, 0x49	; 73
    33d6:	0e 94 09 1c 	call	0x3812	; 0x3812 <__divsf3>
    33da:	69 83       	std	Y+1, r22	; 0x01
    33dc:	7a 83       	std	Y+2, r23	; 0x02
    33de:	8b 83       	std	Y+3, r24	; 0x03
    33e0:	9c 83       	std	Y+4, r25	; 0x04
	gu8_currentPwmChannel = u8_ChannelID;
    33e2:	c0 92 af 05 	sts	0x05AF, r12	; 0x8005af <gu8_currentPwmChannel>
	gstr_ChannelsData[u8_ChannelID].u32_ONTicks = f32_waveONTime/f32_systemPeriodTime;		/* The HIGH Level Time in Ticks */
    33e6:	9b 01       	movw	r18, r22
    33e8:	ac 01       	movw	r20, r24
    33ea:	c3 01       	movw	r24, r6
    33ec:	b2 01       	movw	r22, r4
    33ee:	0e 94 09 1c 	call	0x3812	; 0x3812 <__divsf3>
    33f2:	ed 80       	ldd	r14, Y+5	; 0x05
    33f4:	fe 80       	ldd	r15, Y+6	; 0x06
    33f6:	ee 0c       	add	r14, r14
    33f8:	ff 1c       	adc	r15, r15
    33fa:	87 01       	movw	r16, r14
    33fc:	00 0f       	add	r16, r16
    33fe:	11 1f       	adc	r17, r17
    3400:	00 0f       	add	r16, r16
    3402:	11 1f       	adc	r17, r17
    3404:	00 0f       	add	r16, r16
    3406:	11 1f       	adc	r17, r17
    3408:	0e 19       	sub	r16, r14
    340a:	1f 09       	sbc	r17, r15
    340c:	00 55       	subi	r16, 0x50	; 80
    340e:	1a 4f       	sbci	r17, 0xFA	; 250
    3410:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__fixunssfsi>
    3414:	f8 01       	movw	r30, r16
    3416:	61 83       	std	Z+1, r22	; 0x01
    3418:	72 83       	std	Z+2, r23	; 0x02
    341a:	83 83       	std	Z+3, r24	; 0x03
    341c:	94 83       	std	Z+4, r25	; 0x04
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
    341e:	29 81       	ldd	r18, Y+1	; 0x01
    3420:	3a 81       	ldd	r19, Y+2	; 0x02
    3422:	4b 81       	ldd	r20, Y+3	; 0x03
    3424:	5c 81       	ldd	r21, Y+4	; 0x04
    3426:	c5 01       	movw	r24, r10
    3428:	b4 01       	movw	r22, r8
    342a:	0e 94 09 1c 	call	0x3812	; 0x3812 <__divsf3>
    342e:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__fixunssfsi>
    3432:	f8 01       	movw	r30, r16
    3434:	65 83       	std	Z+5, r22	; 0x05
    3436:	76 83       	std	Z+6, r23	; 0x06
    3438:	87 83       	std	Z+7, r24	; 0x07
    343a:	90 87       	std	Z+8, r25	; 0x08
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;
    343c:	c0 82       	st	Z, r12

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    343e:	f7 01       	movw	r30, r14
    3440:	e9 5b       	subi	r30, 0xB9	; 185
    3442:	fb 4f       	sbci	r31, 0xFB	; 251
    3444:	61 e0       	ldi	r22, 0x01	; 1
    3446:	80 81       	ld	r24, Z
    3448:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    344c:	81 30       	cpi	r24, 0x01	; 1
    344e:	c9 f5       	brne	.+114    	; 0x34c2 <SWPwm_Start+0x234>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
    3450:	8e e0       	ldi	r24, 0x0E	; 14
    3452:	2d 81       	ldd	r18, Y+5	; 0x05
    3454:	3e 81       	ldd	r19, Y+6	; 0x06
    3456:	82 9f       	mul	r24, r18
    3458:	f0 01       	movw	r30, r0
    345a:	83 9f       	mul	r24, r19
    345c:	f0 0d       	add	r31, r0
    345e:	11 24       	eor	r1, r1
    3460:	e0 55       	subi	r30, 0x50	; 80
    3462:	fa 4f       	sbci	r31, 0xFA	; 250
    3464:	41 81       	ldd	r20, Z+1	; 0x01
    3466:	52 81       	ldd	r21, Z+2	; 0x02
    3468:	63 81       	ldd	r22, Z+3	; 0x03
    346a:	74 81       	ldd	r23, Z+4	; 0x04
    346c:	23 ea       	ldi	r18, 0xA3	; 163
    346e:	38 e1       	ldi	r19, 0x18	; 24
    3470:	8d 2d       	mov	r24, r13
    3472:	0e 94 1e 13 	call	0x263c	; 0x263c <GptStart_aSync>
    3476:	81 30       	cpi	r24, 0x01	; 1
    3478:	31 f5       	brne	.+76     	; 0x34c6 <SWPwm_Start+0x238>
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
	
	/* Assign the Next Ticks to be counted by the Asynchronous Timer */
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
    347a:	8e e0       	ldi	r24, 0x0E	; 14
    347c:	2d 81       	ldd	r18, Y+5	; 0x05
    347e:	3e 81       	ldd	r19, Y+6	; 0x06
    3480:	82 9f       	mul	r24, r18
    3482:	f0 01       	movw	r30, r0
    3484:	83 9f       	mul	r24, r19
    3486:	f0 0d       	add	r31, r0
    3488:	11 24       	eor	r1, r1
    348a:	e0 55       	subi	r30, 0x50	; 80
    348c:	fa 4f       	sbci	r31, 0xFA	; 250
    348e:	85 81       	ldd	r24, Z+5	; 0x05
    3490:	96 81       	ldd	r25, Z+6	; 0x06
    3492:	a7 81       	ldd	r26, Z+7	; 0x07
    3494:	b0 85       	ldd	r27, Z+8	; 0x08
    3496:	81 87       	std	Z+9, r24	; 0x09
    3498:	92 87       	std	Z+10, r25	; 0x0a
    349a:	a3 87       	std	Z+11, r26	; 0x0b
    349c:	b4 87       	std	Z+12, r27	; 0x0c
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;
    349e:	82 e0       	ldi	r24, 0x02	; 2
    34a0:	85 87       	std	Z+13, r24	; 0x0d

	return SWPWM_STATUS_ERROR_OK;
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	11 c0       	rjmp	.+34     	; 0x34c8 <SWPwm_Start+0x23a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    34a6:	82 e0       	ldi	r24, 0x02	; 2
    34a8:	0f c0       	rjmp	.+30     	; 0x34c8 <SWPwm_Start+0x23a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    34aa:	83 e0       	ldi	r24, 0x03	; 3
    34ac:	0d c0       	rjmp	.+26     	; 0x34c8 <SWPwm_Start+0x23a>
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
	{
		return SWPWM_STATUS_DC_OUTRANGE;
    34ae:	84 e0       	ldi	r24, 0x04	; 4
    34b0:	0b c0       	rjmp	.+22     	; 0x34c8 <SWPwm_Start+0x23a>
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    34b2:	85 e0       	ldi	r24, 0x05	; 5
    34b4:	09 c0       	rjmp	.+18     	; 0x34c8 <SWPwm_Start+0x23a>
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	07 c0       	rjmp	.+14     	; 0x34c8 <SWPwm_Start+0x23a>
	}else if(u8_DutyCycle == 100)
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return SWPWM_STATUS_ERROR_NOK;
		return SWPWM_STATUS_ERROR_OK;
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	05 c0       	rjmp	.+10     	; 0x34c8 <SWPwm_Start+0x23a>
			break;
		case GPT_CLK_SRC_PRSCLR_EXT_RISE:
			u16_prescalerValue = 1;
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	03 c0       	rjmp	.+6      	; 0x34c8 <SWPwm_Start+0x23a>
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    34c2:	80 e0       	ldi	r24, 0x00	; 0
    34c4:	01 c0       	rjmp	.+2      	; 0x34c8 <SWPwm_Start+0x23a>
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
    34c6:	80 e0       	ldi	r24, 0x00	; 0
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;

	return SWPWM_STATUS_ERROR_OK;
}
    34c8:	26 96       	adiw	r28, 0x06	; 6
    34ca:	0f b6       	in	r0, 0x3f	; 63
    34cc:	f8 94       	cli
    34ce:	de bf       	out	0x3e, r29	; 62
    34d0:	0f be       	out	0x3f, r0	; 63
    34d2:	cd bf       	out	0x3d, r28	; 61
    34d4:	df 91       	pop	r29
    34d6:	cf 91       	pop	r28
    34d8:	1f 91       	pop	r17
    34da:	0f 91       	pop	r16
    34dc:	ff 90       	pop	r15
    34de:	ef 90       	pop	r14
    34e0:	df 90       	pop	r13
    34e2:	cf 90       	pop	r12
    34e4:	bf 90       	pop	r11
    34e6:	af 90       	pop	r10
    34e8:	9f 90       	pop	r9
    34ea:	8f 90       	pop	r8
    34ec:	7f 90       	pop	r7
    34ee:	6f 90       	pop	r6
    34f0:	5f 90       	pop	r5
    34f2:	4f 90       	pop	r4
    34f4:	08 95       	ret

000034f6 <SWPwm_Stop>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Stop(u8SWPwm_Channel_t u8_ChannelID)
{
    34f6:	cf 93       	push	r28
    34f8:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    34fa:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <genu_SWPwmModStatus>
    34fe:	91 30       	cpi	r25, 0x01	; 1
    3500:	b1 f5       	brne	.+108    	; 0x356e <SWPwm_Stop+0x78>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    3502:	81 11       	cpse	r24, r1
    3504:	36 c0       	rjmp	.+108    	; 0x3572 <SWPwm_Stop+0x7c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
    3506:	c8 2f       	mov	r28, r24
    3508:	d0 e0       	ldi	r29, 0x00	; 0
    350a:	ce 01       	movw	r24, r28
    350c:	88 0f       	add	r24, r24
    350e:	99 1f       	adc	r25, r25
    3510:	fc 01       	movw	r30, r24
    3512:	ee 0f       	add	r30, r30
    3514:	ff 1f       	adc	r31, r31
    3516:	ee 0f       	add	r30, r30
    3518:	ff 1f       	adc	r31, r31
    351a:	ee 0f       	add	r30, r30
    351c:	ff 1f       	adc	r31, r31
    351e:	e8 1b       	sub	r30, r24
    3520:	f9 0b       	sbc	r31, r25
    3522:	e0 55       	subi	r30, 0x50	; 80
    3524:	fa 4f       	sbci	r31, 0xFA	; 250
    3526:	85 85       	ldd	r24, Z+13	; 0x0d
    3528:	82 30       	cpi	r24, 0x02	; 2
    352a:	29 f5       	brne	.+74     	; 0x3576 <SWPwm_Stop+0x80>
	
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
    352c:	fe 01       	movw	r30, r28
    352e:	ee 0f       	add	r30, r30
    3530:	ff 1f       	adc	r31, r31
    3532:	e9 5b       	subi	r30, 0xB9	; 185
    3534:	fb 4f       	sbci	r31, 0xFB	; 251
    3536:	60 e0       	ldi	r22, 0x00	; 0
    3538:	80 81       	ld	r24, Z
    353a:	0e 94 b4 10 	call	0x2168	; 0x2168 <Dio_writePin>
    353e:	81 30       	cpi	r24, 0x01	; 1
    3540:	e1 f4       	brne	.+56     	; 0x357a <SWPwm_Stop+0x84>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the State of the PWM Channel to STOPPED */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
    3542:	8e e0       	ldi	r24, 0x0E	; 14
    3544:	8c 9f       	mul	r24, r28
    3546:	f0 01       	movw	r30, r0
    3548:	8d 9f       	mul	r24, r29
    354a:	f0 0d       	add	r31, r0
    354c:	11 24       	eor	r1, r1
    354e:	e0 55       	subi	r30, 0x50	; 80
    3550:	fa 4f       	sbci	r31, 0xFA	; 250
    3552:	83 e0       	ldi	r24, 0x03	; 3
    3554:	85 87       	std	Z+13, r24	; 0x0d
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
    3556:	fe 01       	movw	r30, r28
    3558:	ee 0f       	add	r30, r30
    355a:	ff 1f       	adc	r31, r31
    355c:	e9 5b       	subi	r30, 0xB9	; 185
    355e:	fb 4f       	sbci	r31, 0xFB	; 251
    3560:	81 81       	ldd	r24, Z+1	; 0x01
    3562:	0e 94 7d 13 	call	0x26fa	; 0x26fa <GptStop>
    3566:	81 30       	cpi	r24, 0x01	; 1
    3568:	51 f0       	breq	.+20     	; 0x357e <SWPwm_Stop+0x88>
		return SWPWM_STATUS_ERROR_NOK;
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	09 c0       	rjmp	.+18     	; 0x3580 <SWPwm_Stop+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    356e:	82 e0       	ldi	r24, 0x02	; 2
    3570:	07 c0       	rjmp	.+14     	; 0x3580 <SWPwm_Stop+0x8a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    3572:	83 e0       	ldi	r24, 0x03	; 3
    3574:	05 c0       	rjmp	.+10     	; 0x3580 <SWPwm_Stop+0x8a>
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    3576:	85 e0       	ldi	r24, 0x05	; 5
    3578:	03 c0       	rjmp	.+6      	; 0x3580 <SWPwm_Stop+0x8a>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    357a:	80 e0       	ldi	r24, 0x00	; 0
    357c:	01 c0       	rjmp	.+2      	; 0x3580 <SWPwm_Stop+0x8a>
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
	
	return SWPWM_STATUS_ERROR_OK;
    357e:	81 e0       	ldi	r24, 0x01	; 1
}
    3580:	df 91       	pop	r29
    3582:	cf 91       	pop	r28
    3584:	08 95       	ret

00003586 <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    3586:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <u8_Uart_Status>
    358a:	81 30       	cpi	r24, 0x01	; 1
    358c:	81 f0       	breq	.+32     	; 0x35ae <Uart_init+0x28>
    358e:	10 bc       	out	0x20, r1	; 32
    3590:	8c e0       	ldi	r24, 0x0C	; 12
    3592:	89 b9       	out	0x09, r24	; 9
    3594:	82 e0       	ldi	r24, 0x02	; 2
    3596:	8b b9       	out	0x0b, r24	; 11
    3598:	88 e1       	ldi	r24, 0x18	; 24
    359a:	8a b9       	out	0x0a, r24	; 10
    359c:	80 e8       	ldi	r24, 0x80	; 128
    359e:	80 bd       	out	0x20, r24	; 32
    35a0:	80 b5       	in	r24, 0x20	; 32
    35a2:	86 68       	ori	r24, 0x86	; 134
    35a4:	80 bd       	out	0x20, r24	; 32
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <u8_Uart_Status>
    35ac:	08 95       	ret
    35ae:	87 e0       	ldi	r24, 0x07	; 7
    35b0:	08 95       	ret

000035b2 <Uart_sendByte>:
    35b2:	90 91 be 05 	lds	r25, 0x05BE	; 0x8005be <u8_Uart_Status>
    35b6:	99 23       	and	r25, r25
    35b8:	29 f0       	breq	.+10     	; 0x35c4 <Uart_sendByte+0x12>
    35ba:	5d 9b       	sbis	0x0b, 5	; 11
    35bc:	fe cf       	rjmp	.-4      	; 0x35ba <Uart_sendByte+0x8>
    35be:	8c b9       	out	0x0c, r24	; 12
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	08 95       	ret
    35c4:	86 e0       	ldi	r24, 0x06	; 6
    35c6:	08 95       	ret

000035c8 <Uart_sendPacket>:
    35c8:	ef 92       	push	r14
    35ca:	ff 92       	push	r15
    35cc:	0f 93       	push	r16
    35ce:	1f 93       	push	r17
    35d0:	cf 93       	push	r28
    35d2:	df 93       	push	r29
    35d4:	20 91 be 05 	lds	r18, 0x05BE	; 0x8005be <u8_Uart_Status>
    35d8:	22 23       	and	r18, r18
    35da:	99 f0       	breq	.+38     	; 0x3602 <Uart_sendPacket+0x3a>
    35dc:	8b 01       	movw	r16, r22
    35de:	7c 01       	movw	r14, r24
    35e0:	c0 e0       	ldi	r28, 0x00	; 0
    35e2:	d0 e0       	ldi	r29, 0x00	; 0
    35e4:	09 c0       	rjmp	.+18     	; 0x35f8 <Uart_sendPacket+0x30>
    35e6:	f7 01       	movw	r30, r14
    35e8:	ec 0f       	add	r30, r28
    35ea:	fd 1f       	adc	r31, r29
    35ec:	80 81       	ld	r24, Z
    35ee:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <Uart_sendByte>
    35f2:	81 30       	cpi	r24, 0x01	; 1
    35f4:	41 f4       	brne	.+16     	; 0x3606 <Uart_sendPacket+0x3e>
    35f6:	21 96       	adiw	r28, 0x01	; 1
    35f8:	c0 17       	cp	r28, r16
    35fa:	d1 07       	cpc	r29, r17
    35fc:	a0 f3       	brcs	.-24     	; 0x35e6 <Uart_sendPacket+0x1e>
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	03 c0       	rjmp	.+6      	; 0x3608 <Uart_sendPacket+0x40>
    3602:	86 e0       	ldi	r24, 0x06	; 6
    3604:	01 c0       	rjmp	.+2      	; 0x3608 <Uart_sendPacket+0x40>
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	df 91       	pop	r29
    360a:	cf 91       	pop	r28
    360c:	1f 91       	pop	r17
    360e:	0f 91       	pop	r16
    3610:	ff 90       	pop	r15
    3612:	ef 90       	pop	r14
    3614:	08 95       	ret

00003616 <Uart_EnableNotification_RXC>:
    3616:	9c 01       	movw	r18, r24
    3618:	90 91 be 05 	lds	r25, 0x05BE	; 0x8005be <u8_Uart_Status>
    361c:	99 23       	and	r25, r25
    361e:	61 f0       	breq	.+24     	; 0x3638 <Uart_EnableNotification_RXC+0x22>
    3620:	21 15       	cp	r18, r1
    3622:	31 05       	cpc	r19, r1
    3624:	59 f0       	breq	.+22     	; 0x363c <Uart_EnableNotification_RXC+0x26>
    3626:	8a b1       	in	r24, 0x0a	; 10
    3628:	80 68       	ori	r24, 0x80	; 128
    362a:	8a b9       	out	0x0a, r24	; 10
    362c:	30 93 c2 05 	sts	0x05C2, r19	; 0x8005c2 <Uart_RXC_CallBackPtr+0x1>
    3630:	20 93 c1 05 	sts	0x05C1, r18	; 0x8005c1 <Uart_RXC_CallBackPtr>
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	08 95       	ret
    3638:	86 e0       	ldi	r24, 0x06	; 6
    363a:	08 95       	ret
    363c:	85 e0       	ldi	r24, 0x05	; 5
    363e:	08 95       	ret

00003640 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    3640:	8c b1       	in	r24, 0x0c	; 12
}
    3642:	08 95       	ret

00003644 <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    3644:	1f 92       	push	r1
    3646:	0f 92       	push	r0
    3648:	0f b6       	in	r0, 0x3f	; 63
    364a:	0f 92       	push	r0
    364c:	11 24       	eor	r1, r1
    364e:	2f 93       	push	r18
    3650:	3f 93       	push	r19
    3652:	4f 93       	push	r20
    3654:	5f 93       	push	r21
    3656:	6f 93       	push	r22
    3658:	7f 93       	push	r23
    365a:	8f 93       	push	r24
    365c:	9f 93       	push	r25
    365e:	af 93       	push	r26
    3660:	bf 93       	push	r27
    3662:	ef 93       	push	r30
    3664:	ff 93       	push	r31
    3666:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <Uart_TXC_CallBackPtr>
    366a:	f0 91 c4 05 	lds	r31, 0x05C4	; 0x8005c4 <Uart_TXC_CallBackPtr+0x1>
    366e:	09 95       	icall
    3670:	ff 91       	pop	r31
    3672:	ef 91       	pop	r30
    3674:	bf 91       	pop	r27
    3676:	af 91       	pop	r26
    3678:	9f 91       	pop	r25
    367a:	8f 91       	pop	r24
    367c:	7f 91       	pop	r23
    367e:	6f 91       	pop	r22
    3680:	5f 91       	pop	r21
    3682:	4f 91       	pop	r20
    3684:	3f 91       	pop	r19
    3686:	2f 91       	pop	r18
    3688:	0f 90       	pop	r0
    368a:	0f be       	out	0x3f, r0	; 63
    368c:	0f 90       	pop	r0
    368e:	1f 90       	pop	r1
    3690:	18 95       	reti

00003692 <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    3692:	1f 92       	push	r1
    3694:	0f 92       	push	r0
    3696:	0f b6       	in	r0, 0x3f	; 63
    3698:	0f 92       	push	r0
    369a:	11 24       	eor	r1, r1
    369c:	2f 93       	push	r18
    369e:	3f 93       	push	r19
    36a0:	4f 93       	push	r20
    36a2:	5f 93       	push	r21
    36a4:	6f 93       	push	r22
    36a6:	7f 93       	push	r23
    36a8:	8f 93       	push	r24
    36aa:	9f 93       	push	r25
    36ac:	af 93       	push	r26
    36ae:	bf 93       	push	r27
    36b0:	ef 93       	push	r30
    36b2:	ff 93       	push	r31
    36b4:	e0 91 c1 05 	lds	r30, 0x05C1	; 0x8005c1 <Uart_RXC_CallBackPtr>
    36b8:	f0 91 c2 05 	lds	r31, 0x05C2	; 0x8005c2 <Uart_RXC_CallBackPtr+0x1>
    36bc:	09 95       	icall
    36be:	ff 91       	pop	r31
    36c0:	ef 91       	pop	r30
    36c2:	bf 91       	pop	r27
    36c4:	af 91       	pop	r26
    36c6:	9f 91       	pop	r25
    36c8:	8f 91       	pop	r24
    36ca:	7f 91       	pop	r23
    36cc:	6f 91       	pop	r22
    36ce:	5f 91       	pop	r21
    36d0:	4f 91       	pop	r20
    36d2:	3f 91       	pop	r19
    36d4:	2f 91       	pop	r18
    36d6:	0f 90       	pop	r0
    36d8:	0f be       	out	0x3f, r0	; 63
    36da:	0f 90       	pop	r0
    36dc:	1f 90       	pop	r1
    36de:	18 95       	reti

000036e0 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    36e0:	1f 92       	push	r1
    36e2:	0f 92       	push	r0
    36e4:	0f b6       	in	r0, 0x3f	; 63
    36e6:	0f 92       	push	r0
    36e8:	11 24       	eor	r1, r1
    36ea:	2f 93       	push	r18
    36ec:	3f 93       	push	r19
    36ee:	4f 93       	push	r20
    36f0:	5f 93       	push	r21
    36f2:	6f 93       	push	r22
    36f4:	7f 93       	push	r23
    36f6:	8f 93       	push	r24
    36f8:	9f 93       	push	r25
    36fa:	af 93       	push	r26
    36fc:	bf 93       	push	r27
    36fe:	ef 93       	push	r30
    3700:	ff 93       	push	r31
    3702:	e0 91 bf 05 	lds	r30, 0x05BF	; 0x8005bf <Uart_UDRE_CallBackPtr>
    3706:	f0 91 c0 05 	lds	r31, 0x05C0	; 0x8005c0 <Uart_UDRE_CallBackPtr+0x1>
    370a:	09 95       	icall
    370c:	ff 91       	pop	r31
    370e:	ef 91       	pop	r30
    3710:	bf 91       	pop	r27
    3712:	af 91       	pop	r26
    3714:	9f 91       	pop	r25
    3716:	8f 91       	pop	r24
    3718:	7f 91       	pop	r23
    371a:	6f 91       	pop	r22
    371c:	5f 91       	pop	r21
    371e:	4f 91       	pop	r20
    3720:	3f 91       	pop	r19
    3722:	2f 91       	pop	r18
    3724:	0f 90       	pop	r0
    3726:	0f be       	out	0x3f, r0	; 63
    3728:	0f 90       	pop	r0
    372a:	1f 90       	pop	r1
    372c:	18 95       	reti

0000372e <__subsf3>:
    372e:	50 58       	subi	r21, 0x80	; 128

00003730 <__addsf3>:
    3730:	bb 27       	eor	r27, r27
    3732:	aa 27       	eor	r26, r26
    3734:	0e 94 af 1b 	call	0x375e	; 0x375e <__addsf3x>
    3738:	0c 94 22 1d 	jmp	0x3a44	; 0x3a44 <__fp_round>
    373c:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <__fp_pscA>
    3740:	38 f0       	brcs	.+14     	; 0x3750 <__addsf3+0x20>
    3742:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <__fp_pscB>
    3746:	20 f0       	brcs	.+8      	; 0x3750 <__addsf3+0x20>
    3748:	39 f4       	brne	.+14     	; 0x3758 <__addsf3+0x28>
    374a:	9f 3f       	cpi	r25, 0xFF	; 255
    374c:	19 f4       	brne	.+6      	; 0x3754 <__addsf3+0x24>
    374e:	26 f4       	brtc	.+8      	; 0x3758 <__addsf3+0x28>
    3750:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__fp_nan>
    3754:	0e f4       	brtc	.+2      	; 0x3758 <__addsf3+0x28>
    3756:	e0 95       	com	r30
    3758:	e7 fb       	bst	r30, 7
    375a:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__fp_inf>

0000375e <__addsf3x>:
    375e:	e9 2f       	mov	r30, r25
    3760:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <__fp_split3>
    3764:	58 f3       	brcs	.-42     	; 0x373c <__addsf3+0xc>
    3766:	ba 17       	cp	r27, r26
    3768:	62 07       	cpc	r22, r18
    376a:	73 07       	cpc	r23, r19
    376c:	84 07       	cpc	r24, r20
    376e:	95 07       	cpc	r25, r21
    3770:	20 f0       	brcs	.+8      	; 0x377a <__addsf3x+0x1c>
    3772:	79 f4       	brne	.+30     	; 0x3792 <__addsf3x+0x34>
    3774:	a6 f5       	brtc	.+104    	; 0x37de <__addsf3x+0x80>
    3776:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <__fp_zero>
    377a:	0e f4       	brtc	.+2      	; 0x377e <__addsf3x+0x20>
    377c:	e0 95       	com	r30
    377e:	0b 2e       	mov	r0, r27
    3780:	ba 2f       	mov	r27, r26
    3782:	a0 2d       	mov	r26, r0
    3784:	0b 01       	movw	r0, r22
    3786:	b9 01       	movw	r22, r18
    3788:	90 01       	movw	r18, r0
    378a:	0c 01       	movw	r0, r24
    378c:	ca 01       	movw	r24, r20
    378e:	a0 01       	movw	r20, r0
    3790:	11 24       	eor	r1, r1
    3792:	ff 27       	eor	r31, r31
    3794:	59 1b       	sub	r21, r25
    3796:	99 f0       	breq	.+38     	; 0x37be <__addsf3x+0x60>
    3798:	59 3f       	cpi	r21, 0xF9	; 249
    379a:	50 f4       	brcc	.+20     	; 0x37b0 <__addsf3x+0x52>
    379c:	50 3e       	cpi	r21, 0xE0	; 224
    379e:	68 f1       	brcs	.+90     	; 0x37fa <__addsf3x+0x9c>
    37a0:	1a 16       	cp	r1, r26
    37a2:	f0 40       	sbci	r31, 0x00	; 0
    37a4:	a2 2f       	mov	r26, r18
    37a6:	23 2f       	mov	r18, r19
    37a8:	34 2f       	mov	r19, r20
    37aa:	44 27       	eor	r20, r20
    37ac:	58 5f       	subi	r21, 0xF8	; 248
    37ae:	f3 cf       	rjmp	.-26     	; 0x3796 <__addsf3x+0x38>
    37b0:	46 95       	lsr	r20
    37b2:	37 95       	ror	r19
    37b4:	27 95       	ror	r18
    37b6:	a7 95       	ror	r26
    37b8:	f0 40       	sbci	r31, 0x00	; 0
    37ba:	53 95       	inc	r21
    37bc:	c9 f7       	brne	.-14     	; 0x37b0 <__addsf3x+0x52>
    37be:	7e f4       	brtc	.+30     	; 0x37de <__addsf3x+0x80>
    37c0:	1f 16       	cp	r1, r31
    37c2:	ba 0b       	sbc	r27, r26
    37c4:	62 0b       	sbc	r22, r18
    37c6:	73 0b       	sbc	r23, r19
    37c8:	84 0b       	sbc	r24, r20
    37ca:	ba f0       	brmi	.+46     	; 0x37fa <__addsf3x+0x9c>
    37cc:	91 50       	subi	r25, 0x01	; 1
    37ce:	a1 f0       	breq	.+40     	; 0x37f8 <__addsf3x+0x9a>
    37d0:	ff 0f       	add	r31, r31
    37d2:	bb 1f       	adc	r27, r27
    37d4:	66 1f       	adc	r22, r22
    37d6:	77 1f       	adc	r23, r23
    37d8:	88 1f       	adc	r24, r24
    37da:	c2 f7       	brpl	.-16     	; 0x37cc <__addsf3x+0x6e>
    37dc:	0e c0       	rjmp	.+28     	; 0x37fa <__addsf3x+0x9c>
    37de:	ba 0f       	add	r27, r26
    37e0:	62 1f       	adc	r22, r18
    37e2:	73 1f       	adc	r23, r19
    37e4:	84 1f       	adc	r24, r20
    37e6:	48 f4       	brcc	.+18     	; 0x37fa <__addsf3x+0x9c>
    37e8:	87 95       	ror	r24
    37ea:	77 95       	ror	r23
    37ec:	67 95       	ror	r22
    37ee:	b7 95       	ror	r27
    37f0:	f7 95       	ror	r31
    37f2:	9e 3f       	cpi	r25, 0xFE	; 254
    37f4:	08 f0       	brcs	.+2      	; 0x37f8 <__addsf3x+0x9a>
    37f6:	b0 cf       	rjmp	.-160    	; 0x3758 <__addsf3+0x28>
    37f8:	93 95       	inc	r25
    37fa:	88 0f       	add	r24, r24
    37fc:	08 f0       	brcs	.+2      	; 0x3800 <__addsf3x+0xa2>
    37fe:	99 27       	eor	r25, r25
    3800:	ee 0f       	add	r30, r30
    3802:	97 95       	ror	r25
    3804:	87 95       	ror	r24
    3806:	08 95       	ret

00003808 <__cmpsf2>:
    3808:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__fp_cmp>
    380c:	08 f4       	brcc	.+2      	; 0x3810 <__cmpsf2+0x8>
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	08 95       	ret

00003812 <__divsf3>:
    3812:	0e 94 1d 1c 	call	0x383a	; 0x383a <__divsf3x>
    3816:	0c 94 22 1d 	jmp	0x3a44	; 0x3a44 <__fp_round>
    381a:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <__fp_pscB>
    381e:	58 f0       	brcs	.+22     	; 0x3836 <__divsf3+0x24>
    3820:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <__fp_pscA>
    3824:	40 f0       	brcs	.+16     	; 0x3836 <__divsf3+0x24>
    3826:	29 f4       	brne	.+10     	; 0x3832 <__divsf3+0x20>
    3828:	5f 3f       	cpi	r21, 0xFF	; 255
    382a:	29 f0       	breq	.+10     	; 0x3836 <__divsf3+0x24>
    382c:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__fp_inf>
    3830:	51 11       	cpse	r21, r1
    3832:	0c 94 56 1d 	jmp	0x3aac	; 0x3aac <__fp_szero>
    3836:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__fp_nan>

0000383a <__divsf3x>:
    383a:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <__fp_split3>
    383e:	68 f3       	brcs	.-38     	; 0x381a <__divsf3+0x8>

00003840 <__divsf3_pse>:
    3840:	99 23       	and	r25, r25
    3842:	b1 f3       	breq	.-20     	; 0x3830 <__divsf3+0x1e>
    3844:	55 23       	and	r21, r21
    3846:	91 f3       	breq	.-28     	; 0x382c <__divsf3+0x1a>
    3848:	95 1b       	sub	r25, r21
    384a:	55 0b       	sbc	r21, r21
    384c:	bb 27       	eor	r27, r27
    384e:	aa 27       	eor	r26, r26
    3850:	62 17       	cp	r22, r18
    3852:	73 07       	cpc	r23, r19
    3854:	84 07       	cpc	r24, r20
    3856:	38 f0       	brcs	.+14     	; 0x3866 <__divsf3_pse+0x26>
    3858:	9f 5f       	subi	r25, 0xFF	; 255
    385a:	5f 4f       	sbci	r21, 0xFF	; 255
    385c:	22 0f       	add	r18, r18
    385e:	33 1f       	adc	r19, r19
    3860:	44 1f       	adc	r20, r20
    3862:	aa 1f       	adc	r26, r26
    3864:	a9 f3       	breq	.-22     	; 0x3850 <__divsf3_pse+0x10>
    3866:	35 d0       	rcall	.+106    	; 0x38d2 <__divsf3_pse+0x92>
    3868:	0e 2e       	mov	r0, r30
    386a:	3a f0       	brmi	.+14     	; 0x387a <__divsf3_pse+0x3a>
    386c:	e0 e8       	ldi	r30, 0x80	; 128
    386e:	32 d0       	rcall	.+100    	; 0x38d4 <__divsf3_pse+0x94>
    3870:	91 50       	subi	r25, 0x01	; 1
    3872:	50 40       	sbci	r21, 0x00	; 0
    3874:	e6 95       	lsr	r30
    3876:	00 1c       	adc	r0, r0
    3878:	ca f7       	brpl	.-14     	; 0x386c <__divsf3_pse+0x2c>
    387a:	2b d0       	rcall	.+86     	; 0x38d2 <__divsf3_pse+0x92>
    387c:	fe 2f       	mov	r31, r30
    387e:	29 d0       	rcall	.+82     	; 0x38d2 <__divsf3_pse+0x92>
    3880:	66 0f       	add	r22, r22
    3882:	77 1f       	adc	r23, r23
    3884:	88 1f       	adc	r24, r24
    3886:	bb 1f       	adc	r27, r27
    3888:	26 17       	cp	r18, r22
    388a:	37 07       	cpc	r19, r23
    388c:	48 07       	cpc	r20, r24
    388e:	ab 07       	cpc	r26, r27
    3890:	b0 e8       	ldi	r27, 0x80	; 128
    3892:	09 f0       	breq	.+2      	; 0x3896 <__divsf3_pse+0x56>
    3894:	bb 0b       	sbc	r27, r27
    3896:	80 2d       	mov	r24, r0
    3898:	bf 01       	movw	r22, r30
    389a:	ff 27       	eor	r31, r31
    389c:	93 58       	subi	r25, 0x83	; 131
    389e:	5f 4f       	sbci	r21, 0xFF	; 255
    38a0:	3a f0       	brmi	.+14     	; 0x38b0 <__divsf3_pse+0x70>
    38a2:	9e 3f       	cpi	r25, 0xFE	; 254
    38a4:	51 05       	cpc	r21, r1
    38a6:	78 f0       	brcs	.+30     	; 0x38c6 <__divsf3_pse+0x86>
    38a8:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__fp_inf>
    38ac:	0c 94 56 1d 	jmp	0x3aac	; 0x3aac <__fp_szero>
    38b0:	5f 3f       	cpi	r21, 0xFF	; 255
    38b2:	e4 f3       	brlt	.-8      	; 0x38ac <__divsf3_pse+0x6c>
    38b4:	98 3e       	cpi	r25, 0xE8	; 232
    38b6:	d4 f3       	brlt	.-12     	; 0x38ac <__divsf3_pse+0x6c>
    38b8:	86 95       	lsr	r24
    38ba:	77 95       	ror	r23
    38bc:	67 95       	ror	r22
    38be:	b7 95       	ror	r27
    38c0:	f7 95       	ror	r31
    38c2:	9f 5f       	subi	r25, 0xFF	; 255
    38c4:	c9 f7       	brne	.-14     	; 0x38b8 <__divsf3_pse+0x78>
    38c6:	88 0f       	add	r24, r24
    38c8:	91 1d       	adc	r25, r1
    38ca:	96 95       	lsr	r25
    38cc:	87 95       	ror	r24
    38ce:	97 f9       	bld	r25, 7
    38d0:	08 95       	ret
    38d2:	e1 e0       	ldi	r30, 0x01	; 1
    38d4:	66 0f       	add	r22, r22
    38d6:	77 1f       	adc	r23, r23
    38d8:	88 1f       	adc	r24, r24
    38da:	bb 1f       	adc	r27, r27
    38dc:	62 17       	cp	r22, r18
    38de:	73 07       	cpc	r23, r19
    38e0:	84 07       	cpc	r24, r20
    38e2:	ba 07       	cpc	r27, r26
    38e4:	20 f0       	brcs	.+8      	; 0x38ee <__divsf3_pse+0xae>
    38e6:	62 1b       	sub	r22, r18
    38e8:	73 0b       	sbc	r23, r19
    38ea:	84 0b       	sbc	r24, r20
    38ec:	ba 0b       	sbc	r27, r26
    38ee:	ee 1f       	adc	r30, r30
    38f0:	88 f7       	brcc	.-30     	; 0x38d4 <__divsf3_pse+0x94>
    38f2:	e0 95       	com	r30
    38f4:	08 95       	ret

000038f6 <__fixunssfsi>:
    38f6:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__fp_splitA>
    38fa:	88 f0       	brcs	.+34     	; 0x391e <__fixunssfsi+0x28>
    38fc:	9f 57       	subi	r25, 0x7F	; 127
    38fe:	98 f0       	brcs	.+38     	; 0x3926 <__fixunssfsi+0x30>
    3900:	b9 2f       	mov	r27, r25
    3902:	99 27       	eor	r25, r25
    3904:	b7 51       	subi	r27, 0x17	; 23
    3906:	b0 f0       	brcs	.+44     	; 0x3934 <__fixunssfsi+0x3e>
    3908:	e1 f0       	breq	.+56     	; 0x3942 <__fixunssfsi+0x4c>
    390a:	66 0f       	add	r22, r22
    390c:	77 1f       	adc	r23, r23
    390e:	88 1f       	adc	r24, r24
    3910:	99 1f       	adc	r25, r25
    3912:	1a f0       	brmi	.+6      	; 0x391a <__fixunssfsi+0x24>
    3914:	ba 95       	dec	r27
    3916:	c9 f7       	brne	.-14     	; 0x390a <__fixunssfsi+0x14>
    3918:	14 c0       	rjmp	.+40     	; 0x3942 <__fixunssfsi+0x4c>
    391a:	b1 30       	cpi	r27, 0x01	; 1
    391c:	91 f0       	breq	.+36     	; 0x3942 <__fixunssfsi+0x4c>
    391e:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <__fp_zero>
    3922:	b1 e0       	ldi	r27, 0x01	; 1
    3924:	08 95       	ret
    3926:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <__fp_zero>
    392a:	67 2f       	mov	r22, r23
    392c:	78 2f       	mov	r23, r24
    392e:	88 27       	eor	r24, r24
    3930:	b8 5f       	subi	r27, 0xF8	; 248
    3932:	39 f0       	breq	.+14     	; 0x3942 <__fixunssfsi+0x4c>
    3934:	b9 3f       	cpi	r27, 0xF9	; 249
    3936:	cc f3       	brlt	.-14     	; 0x392a <__fixunssfsi+0x34>
    3938:	86 95       	lsr	r24
    393a:	77 95       	ror	r23
    393c:	67 95       	ror	r22
    393e:	b3 95       	inc	r27
    3940:	d9 f7       	brne	.-10     	; 0x3938 <__fixunssfsi+0x42>
    3942:	3e f4       	brtc	.+14     	; 0x3952 <__fixunssfsi+0x5c>
    3944:	90 95       	com	r25
    3946:	80 95       	com	r24
    3948:	70 95       	com	r23
    394a:	61 95       	neg	r22
    394c:	7f 4f       	sbci	r23, 0xFF	; 255
    394e:	8f 4f       	sbci	r24, 0xFF	; 255
    3950:	9f 4f       	sbci	r25, 0xFF	; 255
    3952:	08 95       	ret

00003954 <__floatunsisf>:
    3954:	e8 94       	clt
    3956:	09 c0       	rjmp	.+18     	; 0x396a <__floatsisf+0x12>

00003958 <__floatsisf>:
    3958:	97 fb       	bst	r25, 7
    395a:	3e f4       	brtc	.+14     	; 0x396a <__floatsisf+0x12>
    395c:	90 95       	com	r25
    395e:	80 95       	com	r24
    3960:	70 95       	com	r23
    3962:	61 95       	neg	r22
    3964:	7f 4f       	sbci	r23, 0xFF	; 255
    3966:	8f 4f       	sbci	r24, 0xFF	; 255
    3968:	9f 4f       	sbci	r25, 0xFF	; 255
    396a:	99 23       	and	r25, r25
    396c:	a9 f0       	breq	.+42     	; 0x3998 <__floatsisf+0x40>
    396e:	f9 2f       	mov	r31, r25
    3970:	96 e9       	ldi	r25, 0x96	; 150
    3972:	bb 27       	eor	r27, r27
    3974:	93 95       	inc	r25
    3976:	f6 95       	lsr	r31
    3978:	87 95       	ror	r24
    397a:	77 95       	ror	r23
    397c:	67 95       	ror	r22
    397e:	b7 95       	ror	r27
    3980:	f1 11       	cpse	r31, r1
    3982:	f8 cf       	rjmp	.-16     	; 0x3974 <__floatsisf+0x1c>
    3984:	fa f4       	brpl	.+62     	; 0x39c4 <__floatsisf+0x6c>
    3986:	bb 0f       	add	r27, r27
    3988:	11 f4       	brne	.+4      	; 0x398e <__floatsisf+0x36>
    398a:	60 ff       	sbrs	r22, 0
    398c:	1b c0       	rjmp	.+54     	; 0x39c4 <__floatsisf+0x6c>
    398e:	6f 5f       	subi	r22, 0xFF	; 255
    3990:	7f 4f       	sbci	r23, 0xFF	; 255
    3992:	8f 4f       	sbci	r24, 0xFF	; 255
    3994:	9f 4f       	sbci	r25, 0xFF	; 255
    3996:	16 c0       	rjmp	.+44     	; 0x39c4 <__floatsisf+0x6c>
    3998:	88 23       	and	r24, r24
    399a:	11 f0       	breq	.+4      	; 0x39a0 <__floatsisf+0x48>
    399c:	96 e9       	ldi	r25, 0x96	; 150
    399e:	11 c0       	rjmp	.+34     	; 0x39c2 <__floatsisf+0x6a>
    39a0:	77 23       	and	r23, r23
    39a2:	21 f0       	breq	.+8      	; 0x39ac <__floatsisf+0x54>
    39a4:	9e e8       	ldi	r25, 0x8E	; 142
    39a6:	87 2f       	mov	r24, r23
    39a8:	76 2f       	mov	r23, r22
    39aa:	05 c0       	rjmp	.+10     	; 0x39b6 <__floatsisf+0x5e>
    39ac:	66 23       	and	r22, r22
    39ae:	71 f0       	breq	.+28     	; 0x39cc <__floatsisf+0x74>
    39b0:	96 e8       	ldi	r25, 0x86	; 134
    39b2:	86 2f       	mov	r24, r22
    39b4:	70 e0       	ldi	r23, 0x00	; 0
    39b6:	60 e0       	ldi	r22, 0x00	; 0
    39b8:	2a f0       	brmi	.+10     	; 0x39c4 <__floatsisf+0x6c>
    39ba:	9a 95       	dec	r25
    39bc:	66 0f       	add	r22, r22
    39be:	77 1f       	adc	r23, r23
    39c0:	88 1f       	adc	r24, r24
    39c2:	da f7       	brpl	.-10     	; 0x39ba <__floatsisf+0x62>
    39c4:	88 0f       	add	r24, r24
    39c6:	96 95       	lsr	r25
    39c8:	87 95       	ror	r24
    39ca:	97 f9       	bld	r25, 7
    39cc:	08 95       	ret

000039ce <__fp_cmp>:
    39ce:	99 0f       	add	r25, r25
    39d0:	00 08       	sbc	r0, r0
    39d2:	55 0f       	add	r21, r21
    39d4:	aa 0b       	sbc	r26, r26
    39d6:	e0 e8       	ldi	r30, 0x80	; 128
    39d8:	fe ef       	ldi	r31, 0xFE	; 254
    39da:	16 16       	cp	r1, r22
    39dc:	17 06       	cpc	r1, r23
    39de:	e8 07       	cpc	r30, r24
    39e0:	f9 07       	cpc	r31, r25
    39e2:	c0 f0       	brcs	.+48     	; 0x3a14 <__fp_cmp+0x46>
    39e4:	12 16       	cp	r1, r18
    39e6:	13 06       	cpc	r1, r19
    39e8:	e4 07       	cpc	r30, r20
    39ea:	f5 07       	cpc	r31, r21
    39ec:	98 f0       	brcs	.+38     	; 0x3a14 <__fp_cmp+0x46>
    39ee:	62 1b       	sub	r22, r18
    39f0:	73 0b       	sbc	r23, r19
    39f2:	84 0b       	sbc	r24, r20
    39f4:	95 0b       	sbc	r25, r21
    39f6:	39 f4       	brne	.+14     	; 0x3a06 <__fp_cmp+0x38>
    39f8:	0a 26       	eor	r0, r26
    39fa:	61 f0       	breq	.+24     	; 0x3a14 <__fp_cmp+0x46>
    39fc:	23 2b       	or	r18, r19
    39fe:	24 2b       	or	r18, r20
    3a00:	25 2b       	or	r18, r21
    3a02:	21 f4       	brne	.+8      	; 0x3a0c <__fp_cmp+0x3e>
    3a04:	08 95       	ret
    3a06:	0a 26       	eor	r0, r26
    3a08:	09 f4       	brne	.+2      	; 0x3a0c <__fp_cmp+0x3e>
    3a0a:	a1 40       	sbci	r26, 0x01	; 1
    3a0c:	a6 95       	lsr	r26
    3a0e:	8f ef       	ldi	r24, 0xFF	; 255
    3a10:	81 1d       	adc	r24, r1
    3a12:	81 1d       	adc	r24, r1
    3a14:	08 95       	ret

00003a16 <__fp_inf>:
    3a16:	97 f9       	bld	r25, 7
    3a18:	9f 67       	ori	r25, 0x7F	; 127
    3a1a:	80 e8       	ldi	r24, 0x80	; 128
    3a1c:	70 e0       	ldi	r23, 0x00	; 0
    3a1e:	60 e0       	ldi	r22, 0x00	; 0
    3a20:	08 95       	ret

00003a22 <__fp_nan>:
    3a22:	9f ef       	ldi	r25, 0xFF	; 255
    3a24:	80 ec       	ldi	r24, 0xC0	; 192
    3a26:	08 95       	ret

00003a28 <__fp_pscA>:
    3a28:	00 24       	eor	r0, r0
    3a2a:	0a 94       	dec	r0
    3a2c:	16 16       	cp	r1, r22
    3a2e:	17 06       	cpc	r1, r23
    3a30:	18 06       	cpc	r1, r24
    3a32:	09 06       	cpc	r0, r25
    3a34:	08 95       	ret

00003a36 <__fp_pscB>:
    3a36:	00 24       	eor	r0, r0
    3a38:	0a 94       	dec	r0
    3a3a:	12 16       	cp	r1, r18
    3a3c:	13 06       	cpc	r1, r19
    3a3e:	14 06       	cpc	r1, r20
    3a40:	05 06       	cpc	r0, r21
    3a42:	08 95       	ret

00003a44 <__fp_round>:
    3a44:	09 2e       	mov	r0, r25
    3a46:	03 94       	inc	r0
    3a48:	00 0c       	add	r0, r0
    3a4a:	11 f4       	brne	.+4      	; 0x3a50 <__fp_round+0xc>
    3a4c:	88 23       	and	r24, r24
    3a4e:	52 f0       	brmi	.+20     	; 0x3a64 <__fp_round+0x20>
    3a50:	bb 0f       	add	r27, r27
    3a52:	40 f4       	brcc	.+16     	; 0x3a64 <__fp_round+0x20>
    3a54:	bf 2b       	or	r27, r31
    3a56:	11 f4       	brne	.+4      	; 0x3a5c <__fp_round+0x18>
    3a58:	60 ff       	sbrs	r22, 0
    3a5a:	04 c0       	rjmp	.+8      	; 0x3a64 <__fp_round+0x20>
    3a5c:	6f 5f       	subi	r22, 0xFF	; 255
    3a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a60:	8f 4f       	sbci	r24, 0xFF	; 255
    3a62:	9f 4f       	sbci	r25, 0xFF	; 255
    3a64:	08 95       	ret

00003a66 <__fp_split3>:
    3a66:	57 fd       	sbrc	r21, 7
    3a68:	90 58       	subi	r25, 0x80	; 128
    3a6a:	44 0f       	add	r20, r20
    3a6c:	55 1f       	adc	r21, r21
    3a6e:	59 f0       	breq	.+22     	; 0x3a86 <__fp_splitA+0x10>
    3a70:	5f 3f       	cpi	r21, 0xFF	; 255
    3a72:	71 f0       	breq	.+28     	; 0x3a90 <__fp_splitA+0x1a>
    3a74:	47 95       	ror	r20

00003a76 <__fp_splitA>:
    3a76:	88 0f       	add	r24, r24
    3a78:	97 fb       	bst	r25, 7
    3a7a:	99 1f       	adc	r25, r25
    3a7c:	61 f0       	breq	.+24     	; 0x3a96 <__fp_splitA+0x20>
    3a7e:	9f 3f       	cpi	r25, 0xFF	; 255
    3a80:	79 f0       	breq	.+30     	; 0x3aa0 <__fp_splitA+0x2a>
    3a82:	87 95       	ror	r24
    3a84:	08 95       	ret
    3a86:	12 16       	cp	r1, r18
    3a88:	13 06       	cpc	r1, r19
    3a8a:	14 06       	cpc	r1, r20
    3a8c:	55 1f       	adc	r21, r21
    3a8e:	f2 cf       	rjmp	.-28     	; 0x3a74 <__fp_split3+0xe>
    3a90:	46 95       	lsr	r20
    3a92:	f1 df       	rcall	.-30     	; 0x3a76 <__fp_splitA>
    3a94:	08 c0       	rjmp	.+16     	; 0x3aa6 <__fp_splitA+0x30>
    3a96:	16 16       	cp	r1, r22
    3a98:	17 06       	cpc	r1, r23
    3a9a:	18 06       	cpc	r1, r24
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	f1 cf       	rjmp	.-30     	; 0x3a82 <__fp_splitA+0xc>
    3aa0:	86 95       	lsr	r24
    3aa2:	71 05       	cpc	r23, r1
    3aa4:	61 05       	cpc	r22, r1
    3aa6:	08 94       	sec
    3aa8:	08 95       	ret

00003aaa <__fp_zero>:
    3aaa:	e8 94       	clt

00003aac <__fp_szero>:
    3aac:	bb 27       	eor	r27, r27
    3aae:	66 27       	eor	r22, r22
    3ab0:	77 27       	eor	r23, r23
    3ab2:	cb 01       	movw	r24, r22
    3ab4:	97 f9       	bld	r25, 7
    3ab6:	08 95       	ret

00003ab8 <__mulsf3>:
    3ab8:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <__mulsf3x>
    3abc:	0c 94 22 1d 	jmp	0x3a44	; 0x3a44 <__fp_round>
    3ac0:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <__fp_pscA>
    3ac4:	38 f0       	brcs	.+14     	; 0x3ad4 <__mulsf3+0x1c>
    3ac6:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <__fp_pscB>
    3aca:	20 f0       	brcs	.+8      	; 0x3ad4 <__mulsf3+0x1c>
    3acc:	95 23       	and	r25, r21
    3ace:	11 f0       	breq	.+4      	; 0x3ad4 <__mulsf3+0x1c>
    3ad0:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__fp_inf>
    3ad4:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__fp_nan>
    3ad8:	11 24       	eor	r1, r1
    3ada:	0c 94 56 1d 	jmp	0x3aac	; 0x3aac <__fp_szero>

00003ade <__mulsf3x>:
    3ade:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <__fp_split3>
    3ae2:	70 f3       	brcs	.-36     	; 0x3ac0 <__mulsf3+0x8>

00003ae4 <__mulsf3_pse>:
    3ae4:	95 9f       	mul	r25, r21
    3ae6:	c1 f3       	breq	.-16     	; 0x3ad8 <__mulsf3+0x20>
    3ae8:	95 0f       	add	r25, r21
    3aea:	50 e0       	ldi	r21, 0x00	; 0
    3aec:	55 1f       	adc	r21, r21
    3aee:	62 9f       	mul	r22, r18
    3af0:	f0 01       	movw	r30, r0
    3af2:	72 9f       	mul	r23, r18
    3af4:	bb 27       	eor	r27, r27
    3af6:	f0 0d       	add	r31, r0
    3af8:	b1 1d       	adc	r27, r1
    3afa:	63 9f       	mul	r22, r19
    3afc:	aa 27       	eor	r26, r26
    3afe:	f0 0d       	add	r31, r0
    3b00:	b1 1d       	adc	r27, r1
    3b02:	aa 1f       	adc	r26, r26
    3b04:	64 9f       	mul	r22, r20
    3b06:	66 27       	eor	r22, r22
    3b08:	b0 0d       	add	r27, r0
    3b0a:	a1 1d       	adc	r26, r1
    3b0c:	66 1f       	adc	r22, r22
    3b0e:	82 9f       	mul	r24, r18
    3b10:	22 27       	eor	r18, r18
    3b12:	b0 0d       	add	r27, r0
    3b14:	a1 1d       	adc	r26, r1
    3b16:	62 1f       	adc	r22, r18
    3b18:	73 9f       	mul	r23, r19
    3b1a:	b0 0d       	add	r27, r0
    3b1c:	a1 1d       	adc	r26, r1
    3b1e:	62 1f       	adc	r22, r18
    3b20:	83 9f       	mul	r24, r19
    3b22:	a0 0d       	add	r26, r0
    3b24:	61 1d       	adc	r22, r1
    3b26:	22 1f       	adc	r18, r18
    3b28:	74 9f       	mul	r23, r20
    3b2a:	33 27       	eor	r19, r19
    3b2c:	a0 0d       	add	r26, r0
    3b2e:	61 1d       	adc	r22, r1
    3b30:	23 1f       	adc	r18, r19
    3b32:	84 9f       	mul	r24, r20
    3b34:	60 0d       	add	r22, r0
    3b36:	21 1d       	adc	r18, r1
    3b38:	82 2f       	mov	r24, r18
    3b3a:	76 2f       	mov	r23, r22
    3b3c:	6a 2f       	mov	r22, r26
    3b3e:	11 24       	eor	r1, r1
    3b40:	9f 57       	subi	r25, 0x7F	; 127
    3b42:	50 40       	sbci	r21, 0x00	; 0
    3b44:	9a f0       	brmi	.+38     	; 0x3b6c <__mulsf3_pse+0x88>
    3b46:	f1 f0       	breq	.+60     	; 0x3b84 <__mulsf3_pse+0xa0>
    3b48:	88 23       	and	r24, r24
    3b4a:	4a f0       	brmi	.+18     	; 0x3b5e <__mulsf3_pse+0x7a>
    3b4c:	ee 0f       	add	r30, r30
    3b4e:	ff 1f       	adc	r31, r31
    3b50:	bb 1f       	adc	r27, r27
    3b52:	66 1f       	adc	r22, r22
    3b54:	77 1f       	adc	r23, r23
    3b56:	88 1f       	adc	r24, r24
    3b58:	91 50       	subi	r25, 0x01	; 1
    3b5a:	50 40       	sbci	r21, 0x00	; 0
    3b5c:	a9 f7       	brne	.-22     	; 0x3b48 <__mulsf3_pse+0x64>
    3b5e:	9e 3f       	cpi	r25, 0xFE	; 254
    3b60:	51 05       	cpc	r21, r1
    3b62:	80 f0       	brcs	.+32     	; 0x3b84 <__mulsf3_pse+0xa0>
    3b64:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__fp_inf>
    3b68:	0c 94 56 1d 	jmp	0x3aac	; 0x3aac <__fp_szero>
    3b6c:	5f 3f       	cpi	r21, 0xFF	; 255
    3b6e:	e4 f3       	brlt	.-8      	; 0x3b68 <__mulsf3_pse+0x84>
    3b70:	98 3e       	cpi	r25, 0xE8	; 232
    3b72:	d4 f3       	brlt	.-12     	; 0x3b68 <__mulsf3_pse+0x84>
    3b74:	86 95       	lsr	r24
    3b76:	77 95       	ror	r23
    3b78:	67 95       	ror	r22
    3b7a:	b7 95       	ror	r27
    3b7c:	f7 95       	ror	r31
    3b7e:	e7 95       	ror	r30
    3b80:	9f 5f       	subi	r25, 0xFF	; 255
    3b82:	c1 f7       	brne	.-16     	; 0x3b74 <__mulsf3_pse+0x90>
    3b84:	fe 2b       	or	r31, r30
    3b86:	88 0f       	add	r24, r24
    3b88:	91 1d       	adc	r25, r1
    3b8a:	96 95       	lsr	r25
    3b8c:	87 95       	ror	r24
    3b8e:	97 f9       	bld	r25, 7
    3b90:	08 95       	ret

00003b92 <__divmodhi4>:
    3b92:	97 fb       	bst	r25, 7
    3b94:	07 2e       	mov	r0, r23
    3b96:	16 f4       	brtc	.+4      	; 0x3b9c <__divmodhi4+0xa>
    3b98:	00 94       	com	r0
    3b9a:	07 d0       	rcall	.+14     	; 0x3baa <__divmodhi4_neg1>
    3b9c:	77 fd       	sbrc	r23, 7
    3b9e:	09 d0       	rcall	.+18     	; 0x3bb2 <__divmodhi4_neg2>
    3ba0:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__udivmodhi4>
    3ba4:	07 fc       	sbrc	r0, 7
    3ba6:	05 d0       	rcall	.+10     	; 0x3bb2 <__divmodhi4_neg2>
    3ba8:	3e f4       	brtc	.+14     	; 0x3bb8 <__divmodhi4_exit>

00003baa <__divmodhi4_neg1>:
    3baa:	90 95       	com	r25
    3bac:	81 95       	neg	r24
    3bae:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb0:	08 95       	ret

00003bb2 <__divmodhi4_neg2>:
    3bb2:	70 95       	com	r23
    3bb4:	61 95       	neg	r22
    3bb6:	7f 4f       	sbci	r23, 0xFF	; 255

00003bb8 <__divmodhi4_exit>:
    3bb8:	08 95       	ret

00003bba <__udivmodsi4>:
    3bba:	a1 e2       	ldi	r26, 0x21	; 33
    3bbc:	1a 2e       	mov	r1, r26
    3bbe:	aa 1b       	sub	r26, r26
    3bc0:	bb 1b       	sub	r27, r27
    3bc2:	fd 01       	movw	r30, r26
    3bc4:	0d c0       	rjmp	.+26     	; 0x3be0 <__udivmodsi4_ep>

00003bc6 <__udivmodsi4_loop>:
    3bc6:	aa 1f       	adc	r26, r26
    3bc8:	bb 1f       	adc	r27, r27
    3bca:	ee 1f       	adc	r30, r30
    3bcc:	ff 1f       	adc	r31, r31
    3bce:	a2 17       	cp	r26, r18
    3bd0:	b3 07       	cpc	r27, r19
    3bd2:	e4 07       	cpc	r30, r20
    3bd4:	f5 07       	cpc	r31, r21
    3bd6:	20 f0       	brcs	.+8      	; 0x3be0 <__udivmodsi4_ep>
    3bd8:	a2 1b       	sub	r26, r18
    3bda:	b3 0b       	sbc	r27, r19
    3bdc:	e4 0b       	sbc	r30, r20
    3bde:	f5 0b       	sbc	r31, r21

00003be0 <__udivmodsi4_ep>:
    3be0:	66 1f       	adc	r22, r22
    3be2:	77 1f       	adc	r23, r23
    3be4:	88 1f       	adc	r24, r24
    3be6:	99 1f       	adc	r25, r25
    3be8:	1a 94       	dec	r1
    3bea:	69 f7       	brne	.-38     	; 0x3bc6 <__udivmodsi4_loop>
    3bec:	60 95       	com	r22
    3bee:	70 95       	com	r23
    3bf0:	80 95       	com	r24
    3bf2:	90 95       	com	r25
    3bf4:	9b 01       	movw	r18, r22
    3bf6:	ac 01       	movw	r20, r24
    3bf8:	bd 01       	movw	r22, r26
    3bfa:	cf 01       	movw	r24, r30
    3bfc:	08 95       	ret

00003bfe <__tablejump2__>:
    3bfe:	ee 0f       	add	r30, r30
    3c00:	ff 1f       	adc	r31, r31
    3c02:	05 90       	lpm	r0, Z+
    3c04:	f4 91       	lpm	r31, Z
    3c06:	e0 2d       	mov	r30, r0
    3c08:	09 94       	ijmp

00003c0a <__umulhisi3>:
    3c0a:	a2 9f       	mul	r26, r18
    3c0c:	b0 01       	movw	r22, r0
    3c0e:	b3 9f       	mul	r27, r19
    3c10:	c0 01       	movw	r24, r0
    3c12:	a3 9f       	mul	r26, r19
    3c14:	70 0d       	add	r23, r0
    3c16:	81 1d       	adc	r24, r1
    3c18:	11 24       	eor	r1, r1
    3c1a:	91 1d       	adc	r25, r1
    3c1c:	b2 9f       	mul	r27, r18
    3c1e:	70 0d       	add	r23, r0
    3c20:	81 1d       	adc	r24, r1
    3c22:	11 24       	eor	r1, r1
    3c24:	91 1d       	adc	r25, r1
    3c26:	08 95       	ret

00003c28 <__adddi3_s8>:
    3c28:	00 24       	eor	r0, r0
    3c2a:	a7 fd       	sbrc	r26, 7
    3c2c:	00 94       	com	r0
    3c2e:	2a 0f       	add	r18, r26
    3c30:	30 1d       	adc	r19, r0
    3c32:	40 1d       	adc	r20, r0
    3c34:	50 1d       	adc	r21, r0
    3c36:	60 1d       	adc	r22, r0
    3c38:	70 1d       	adc	r23, r0
    3c3a:	80 1d       	adc	r24, r0
    3c3c:	90 1d       	adc	r25, r0
    3c3e:	08 95       	ret

00003c40 <__cmpdi2>:
    3c40:	2a 15       	cp	r18, r10
    3c42:	3b 05       	cpc	r19, r11
    3c44:	4c 05       	cpc	r20, r12
    3c46:	5d 05       	cpc	r21, r13
    3c48:	6e 05       	cpc	r22, r14
    3c4a:	7f 05       	cpc	r23, r15
    3c4c:	80 07       	cpc	r24, r16
    3c4e:	91 07       	cpc	r25, r17
    3c50:	08 95       	ret

00003c52 <__cmpdi2_s8>:
    3c52:	00 24       	eor	r0, r0
    3c54:	a7 fd       	sbrc	r26, 7
    3c56:	00 94       	com	r0
    3c58:	2a 17       	cp	r18, r26
    3c5a:	30 05       	cpc	r19, r0
    3c5c:	40 05       	cpc	r20, r0
    3c5e:	50 05       	cpc	r21, r0
    3c60:	60 05       	cpc	r22, r0
    3c62:	70 05       	cpc	r23, r0
    3c64:	80 05       	cpc	r24, r0
    3c66:	90 05       	cpc	r25, r0
    3c68:	08 95       	ret

00003c6a <__udivmodhi4>:
    3c6a:	aa 1b       	sub	r26, r26
    3c6c:	bb 1b       	sub	r27, r27
    3c6e:	51 e1       	ldi	r21, 0x11	; 17
    3c70:	07 c0       	rjmp	.+14     	; 0x3c80 <__udivmodhi4_ep>

00003c72 <__udivmodhi4_loop>:
    3c72:	aa 1f       	adc	r26, r26
    3c74:	bb 1f       	adc	r27, r27
    3c76:	a6 17       	cp	r26, r22
    3c78:	b7 07       	cpc	r27, r23
    3c7a:	10 f0       	brcs	.+4      	; 0x3c80 <__udivmodhi4_ep>
    3c7c:	a6 1b       	sub	r26, r22
    3c7e:	b7 0b       	sbc	r27, r23

00003c80 <__udivmodhi4_ep>:
    3c80:	88 1f       	adc	r24, r24
    3c82:	99 1f       	adc	r25, r25
    3c84:	5a 95       	dec	r21
    3c86:	a9 f7       	brne	.-22     	; 0x3c72 <__udivmodhi4_loop>
    3c88:	80 95       	com	r24
    3c8a:	90 95       	com	r25
    3c8c:	bc 01       	movw	r22, r24
    3c8e:	cd 01       	movw	r24, r26
    3c90:	08 95       	ret

00003c92 <_exit>:
    3c92:	f8 94       	cli

00003c94 <__stop_program>:
    3c94:	ff cf       	rjmp	.-2      	; 0x3c94 <__stop_program>
