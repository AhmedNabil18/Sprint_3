
Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00000a1e  00000ab2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000c2  008000c2  00000b14  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dd2  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000daf  00000000  00000000  00002b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001312  00000000  00000000  00003921  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b0  00000000  00000000  00004c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e93  00000000  00000000  000050e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001009  00000000  00000000  00005f77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00006f80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__vector_13>
  38:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__vector_14>
  3c:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3c       	cpi	r26, 0xC2	; 194
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ec       	ldi	r26, 0xC2	; 194
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3d       	cpi	r26, 0xD6	; 214
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c4 01 	call	0x388	; 0x388 <main>
  8a:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TrafficApp_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	84 30       	cpi	r24, 0x04	; 4
  98:	51 f0       	breq	.+20     	; 0xae <TrafficApp_init+0x1c>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	/* Call the initializer in service layer */
	if(SRVC_STATUS_ERROR_OK != Service_init())
  9a:	0e 94 22 04 	call	0x844	; 0x844 <Service_init>
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	29 f4       	brne	.+10     	; 0xac <TrafficApp_init+0x1a>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
  a2:	84 e0       	ldi	r24, 0x04	; 4
  a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return APP_STATUS_ERROR_OK;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	08 95       	ret
/**************************************************************************************/

	/* Call the initializer in service layer */
	if(SRVC_STATUS_ERROR_OK != Service_init())
	{
		return APP_STATUS_ERROR_NOK;
  ac:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
  ae:	08 95       	ret

000000b0 <TrafficApp_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t TrafficApp_update(void)
{
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	1f 92       	push	r1
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
  bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c0:	84 30       	cpi	r24, 0x04	; 4
  c2:	91 f5       	brne	.+100    	; 0x128 <TrafficApp_update+0x78>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Get the input from the service layer */
	enuTrafficState_t enu_trafficState = TRAFFIC_OFF;
  c4:	19 82       	std	Y+1, r1	; 0x01
	if(Service_ReportTerminal( (uint8_t*) &enu_trafficState) != SRVC_STATUS_ERROR_OK)
  c6:	ce 01       	movw	r24, r28
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	0e 94 37 04 	call	0x86e	; 0x86e <Service_ReportTerminal>
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	69 f5       	brne	.+90     	; 0x12c <TrafficApp_update+0x7c>
		return APP_STATUS_ERROR_NOK;
	if( (genu_AppState != enu_trafficState) || (TRAFFIC_AT == enu_trafficState))
  d2:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <__data_end>
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	98 13       	cpse	r25, r24
  da:	02 c0       	rjmp	.+4      	; 0xe0 <TrafficApp_update+0x30>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	41 f5       	brne	.+80     	; 0x130 <TrafficApp_update+0x80>
	{
		genu_AppState = enu_trafficState;
  e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__data_end>
		/* Check the input of the Terminal */
		uint8_t u8_Action = TRAFFIC_ACTION_IDLE;
		switch (enu_trafficState)
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	69 f0       	breq	.+26     	; 0x102 <TrafficApp_update+0x52>
  e8:	28 f4       	brcc	.+10     	; 0xf4 <TrafficApp_update+0x44>
  ea:	88 23       	and	r24, r24
  ec:	41 f0       	breq	.+16     	; 0xfe <TrafficApp_update+0x4e>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	71 f0       	breq	.+28     	; 0x10e <TrafficApp_update+0x5e>
  f2:	20 c0       	rjmp	.+64     	; 0x134 <TrafficApp_update+0x84>
  f4:	83 30       	cpi	r24, 0x03	; 3
  f6:	39 f0       	breq	.+14     	; 0x106 <TrafficApp_update+0x56>
  f8:	84 30       	cpi	r24, 0x04	; 4
  fa:	39 f0       	breq	.+14     	; 0x10a <TrafficApp_update+0x5a>
  fc:	1b c0       	rjmp	.+54     	; 0x134 <TrafficApp_update+0x84>
		{	/* Decide the Action of the application */
			case TRAFFIC_OFF:
				u8_Action = TRAFFIC_ACTION_IDLE;
  fe:	10 e0       	ldi	r17, 0x00	; 0
 100:	07 c0       	rjmp	.+14     	; 0x110 <TrafficApp_update+0x60>
				break;
			case TRAFFIC_AT:
				u8_Action = TRAFFIC_ACTION_OK;
				break;
			case TRAFFIC_GO:
				u8_Action = TRAFFIC_ACTION_GREEN;
 102:	12 e0       	ldi	r17, 0x02	; 2
				break;
 104:	05 c0       	rjmp	.+10     	; 0x110 <TrafficApp_update+0x60>
			case TRAFFIC_WAIT:
				u8_Action = TRAFFIC_ACTION_YELLOW;
 106:	13 e0       	ldi	r17, 0x03	; 3
				break;
 108:	03 c0       	rjmp	.+6      	; 0x110 <TrafficApp_update+0x60>
			case TRAFFIC_STOP:
				u8_Action = TRAFFIC_ACTION_RED;
 10a:	14 e0       	ldi	r17, 0x04	; 4
				break;
 10c:	01 c0       	rjmp	.+2      	; 0x110 <TrafficApp_update+0x60>
		{	/* Decide the Action of the application */
			case TRAFFIC_OFF:
				u8_Action = TRAFFIC_ACTION_IDLE;
				break;
			case TRAFFIC_AT:
				u8_Action = TRAFFIC_ACTION_OK;
 10e:	11 e0       	ldi	r17, 0x01	; 1
			default:
				return APP_STATUS_ERROR_NOK;
		}
		
		/* Send Action to the Service Layer */
		if(Service_UpdateLeds(u8_Action) != SRVC_STATUS_ERROR_OK)
 110:	81 2f       	mov	r24, r17
 112:	0e 94 9f 04 	call	0x93e	; 0x93e <Service_UpdateLeds>
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	79 f4       	brne	.+30     	; 0x138 <TrafficApp_update+0x88>
			return APP_STATUS_ERROR_NOK;
		if(Service_UpdateTerminal(u8_Action) != SRVC_STATUS_ERROR_OK)
 11a:	81 2f       	mov	r24, r17
 11c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <Service_UpdateTerminal>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	61 f0       	breq	.+24     	; 0x13c <TrafficApp_update+0x8c>
			return APP_STATUS_ERROR_NOK;	
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0b c0       	rjmp	.+22     	; 0x13e <TrafficApp_update+0x8e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
 128:	85 e0       	ldi	r24, 0x05	; 5
 12a:	09 c0       	rjmp	.+18     	; 0x13e <TrafficApp_update+0x8e>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Get the input from the service layer */
	enuTrafficState_t enu_trafficState = TRAFFIC_OFF;
	if(Service_ReportTerminal( (uint8_t*) &enu_trafficState) != SRVC_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	07 c0       	rjmp	.+14     	; 0x13e <TrafficApp_update+0x8e>
		if(Service_UpdateLeds(u8_Action) != SRVC_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		if(Service_UpdateTerminal(u8_Action) != SRVC_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;	
	}
	return APP_STATUS_ERROR_OK;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	05 c0       	rjmp	.+10     	; 0x13e <TrafficApp_update+0x8e>
				break;
			case TRAFFIC_STOP:
				u8_Action = TRAFFIC_ACTION_RED;
				break;
			default:
				return APP_STATUS_ERROR_NOK;
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	03 c0       	rjmp	.+6      	; 0x13e <TrafficApp_update+0x8e>
		}
		
		/* Send Action to the Service Layer */
		if(Service_UpdateLeds(u8_Action) != SRVC_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	01 c0       	rjmp	.+2      	; 0x13e <TrafficApp_update+0x8e>
		if(Service_UpdateTerminal(u8_Action) != SRVC_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;	
	}
	return APP_STATUS_ERROR_OK;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0f 90       	pop	r0
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	08 95       	ret

00000148 <TrafficApp_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the Traffic application */
	if(TrafficApp_init() != APP_STATUS_ERROR_OK)
 148:	0e 94 49 00 	call	0x92	; 0x92 <TrafficApp_init>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	39 f4       	brne	.+14     	; 0x15e <TrafficApp_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
 150:	8f b7       	in	r24, 0x3f	; 63
 152:	80 68       	ori	r24, 0x80	; 128
 154:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the Traffic status */
		if(TrafficApp_update() != APP_STATUS_ERROR_OK)
 156:	0e 94 58 00 	call	0xb0	; 0xb0 <TrafficApp_update>
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	e1 f3       	breq	.-8      	; 0x156 <TrafficApp_start+0xe>
			return APP_STATUS_ERROR_NOK;
			
	}
}
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	08 95       	ret

00000162 <Led_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the led module is already initialized */
	if (genu_LedModuleState == LED_STATUS_INIT)
 162:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_LedModuleState>
 166:	85 30       	cpi	r24, 0x05	; 5
 168:	71 f0       	breq	.+28     	; 0x186 <Led_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
 16a:	86 e6       	ldi	r24, 0x66	; 102
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 c7 01 	call	0x38e	; 0x38e <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	11 f0       	breq	.+4      	; 0x17a <Led_init+0x18>
 176:	87 30       	cpi	r24, 0x07	; 7
 178:	29 f4       	brne	.+10     	; 0x184 <Led_init+0x22>
		return LED_STATUS_ERROR_NOK;
	/* Change the state of the Led module to Initialized */
	genu_LedModuleState = LED_STATUS_INIT;
 17a:	85 e0       	ldi	r24, 0x05	; 5
 17c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <genu_LedModuleState>
	return LED_STATUS_ERROR_OK;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return LED_STATUS_ERROR_NOK;
 184:	80 e0       	ldi	r24, 0x00	; 0
	/* Change the state of the Led module to Initialized */
	genu_LedModuleState = LED_STATUS_INIT;
	return LED_STATUS_ERROR_OK;
}
 186:	08 95       	ret

00000188 <Led_On>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the leds index is invalid */
	if (LEDS_USED_NUM < u8_LedID)
 188:	84 30       	cpi	r24, 0x04	; 4
 18a:	60 f4       	brcc	.+24     	; 0x1a4 <Led_On+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Write Logic 1 on the Led's Pin and check if any error returned */
	enuDio_Status_t Dio_State = Dio_writePin(gau8_ledsUsed[u8_LedID], PIN_HIGH);
 18c:	e8 2f       	mov	r30, r24
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	ee 59       	subi	r30, 0x9E	; 158
 192:	ff 4f       	sbci	r31, 0xFF	; 255
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	80 81       	ld	r24, Z
 198:	0e 94 b5 02 	call	0x56a	; 0x56a <Dio_writePin>
	if(DIO_STATUS_ERROR_OK != Dio_State)
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	21 f0       	breq	.+8      	; 0x1a8 <Led_On+0x20>
		return LED_STATUS_ERROR_NOK;
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the leds index is invalid */
	if (LEDS_USED_NUM < u8_LedID)
	{
		return LED_STATUS_ERROR_ID_INVALID;
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	08 95       	ret
/**************************************************************************************/
	/* Write Logic 1 on the Led's Pin and check if any error returned */
	enuDio_Status_t Dio_State = Dio_writePin(gau8_ledsUsed[u8_LedID], PIN_HIGH);
	if(DIO_STATUS_ERROR_OK != Dio_State)
		return LED_STATUS_ERROR_NOK;
	return LED_STATUS_ERROR_OK;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
}
 1aa:	08 95       	ret

000001ac <Led_Off>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the leds index is invalid */
	if (LEDS_USED_NUM < u8_LedID)
 1ac:	84 30       	cpi	r24, 0x04	; 4
 1ae:	60 f4       	brcc	.+24     	; 0x1c8 <Led_Off+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Write Logic 0 on the Led's Pin and check if any error returned */
	enuDio_Status_t Dio_State = Dio_writePin(gau8_ledsUsed[u8_LedID], PIN_LOW);
 1b0:	e8 2f       	mov	r30, r24
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	ee 59       	subi	r30, 0x9E	; 158
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	0e 94 b5 02 	call	0x56a	; 0x56a <Dio_writePin>
	if(DIO_STATUS_ERROR_OK != Dio_State)
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	21 f0       	breq	.+8      	; 0x1cc <Led_Off+0x20>
		return LED_STATUS_ERROR_NOK;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the leds index is invalid */
	if (LEDS_USED_NUM < u8_LedID)
	{
		return LED_STATUS_ERROR_ID_INVALID;
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	08 95       	ret
/**************************************************************************************/
	/* Write Logic 0 on the Led's Pin and check if any error returned */
	enuDio_Status_t Dio_State = Dio_writePin(gau8_ledsUsed[u8_LedID], PIN_LOW);
	if(DIO_STATUS_ERROR_OK != Dio_State)
		return LED_STATUS_ERROR_NOK;
	return LED_STATUS_ERROR_OK;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
}
 1ce:	08 95       	ret

000001d0 <stringLength>:
        else if(string1[u8_loopIndex] < string2[u8_loopIndex])
            return 2;
        u8_loopIndex++;
    }
    return 3;
}
 1d0:	ac 01       	movw	r20, r24
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <stringLength+0x8>
 1d6:	8f 5f       	subi	r24, 0xFF	; 255
 1d8:	fa 01       	movw	r30, r20
 1da:	e8 0f       	add	r30, r24
 1dc:	f1 1d       	adc	r31, r1
 1de:	20 81       	ld	r18, Z
 1e0:	21 11       	cpse	r18, r1
 1e2:	f9 cf       	rjmp	.-14     	; 0x1d6 <stringLength+0x6>
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	08 95       	ret

000001e8 <stringCompare>:
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
 1f4:	8b 01       	movw	r16, r22
 1f6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <stringLength>
 1fa:	f8 2e       	mov	r15, r24
 1fc:	c8 01       	movw	r24, r16
 1fe:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <stringLength>
 202:	8f 15       	cp	r24, r15
 204:	a8 f0       	brcs	.+42     	; 0x230 <stringCompare+0x48>
 206:	f8 16       	cp	r15, r24
 208:	a8 f0       	brcs	.+42     	; 0x234 <stringCompare+0x4c>
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	07 c0       	rjmp	.+14     	; 0x21c <stringCompare+0x34>
 20e:	f8 01       	movw	r30, r16
 210:	e8 0f       	add	r30, r24
 212:	f9 1f       	adc	r31, r25
 214:	80 81       	ld	r24, Z
 216:	28 13       	cpse	r18, r24
 218:	0f c0       	rjmp	.+30     	; 0x238 <stringCompare+0x50>
 21a:	3f 5f       	subi	r19, 0xFF	; 255
 21c:	83 2f       	mov	r24, r19
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	fe 01       	movw	r30, r28
 222:	e8 0f       	add	r30, r24
 224:	f9 1f       	adc	r31, r25
 226:	20 81       	ld	r18, Z
 228:	21 11       	cpse	r18, r1
 22a:	f1 cf       	rjmp	.-30     	; 0x20e <stringCompare+0x26>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	05 c0       	rjmp	.+10     	; 0x23a <stringCompare+0x52>
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	03 c0       	rjmp	.+6      	; 0x23a <stringCompare+0x52>
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	01 c0       	rjmp	.+2      	; 0x23a <stringCompare+0x52>
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	ff 90       	pop	r15
 244:	08 95       	ret

00000246 <EmptyString>:

void EmptyString(uint8_t *string)
{
 246:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
 248:	90 e0       	ldi	r25, 0x00	; 0
	while(string[u8_loopIndex] != '\0')
 24a:	02 c0       	rjmp	.+4      	; 0x250 <EmptyString+0xa>
		string[u8_loopIndex++] = '\0';
 24c:	9f 5f       	subi	r25, 0xFF	; 255
 24e:	10 82       	st	Z, r1
}

void EmptyString(uint8_t *string)
{
	uint8_t u8_loopIndex=0;
	while(string[u8_loopIndex] != '\0')
 250:	fa 01       	movw	r30, r20
 252:	e9 0f       	add	r30, r25
 254:	f1 1d       	adc	r31, r1
 256:	20 81       	ld	r18, Z
 258:	21 11       	cpse	r18, r1
 25a:	f8 cf       	rjmp	.-16     	; 0x24c <EmptyString+0x6>
		string[u8_loopIndex++] = '\0';
}
 25c:	08 95       	ret

0000025e <stringCopy>:

void stringCopy(uint8_t* source, uint8_t* destination)
{
 25e:	dc 01       	movw	r26, r24
    uint8_t u8_loopIndex=0;
 260:	90 e0       	ldi	r25, 0x00	; 0
    while(source[u8_loopIndex] != '\0')
 262:	05 c0       	rjmp	.+10     	; 0x26e <stringCopy+0x10>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
 264:	fb 01       	movw	r30, r22
 266:	e2 0f       	add	r30, r18
 268:	f3 1f       	adc	r31, r19
 26a:	40 83       	st	Z, r20
	    u8_loopIndex++;
 26c:	9f 5f       	subi	r25, 0xFF	; 255
}

void stringCopy(uint8_t* source, uint8_t* destination)
{
    uint8_t u8_loopIndex=0;
    while(source[u8_loopIndex] != '\0')
 26e:	29 2f       	mov	r18, r25
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	fd 01       	movw	r30, r26
 274:	e2 0f       	add	r30, r18
 276:	f3 1f       	adc	r31, r19
 278:	40 81       	ld	r20, Z
 27a:	41 11       	cpse	r20, r1
 27c:	f3 cf       	rjmp	.-26     	; 0x264 <stringCopy+0x6>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
	    u8_loopIndex++;
    }
}
 27e:	08 95       	ret

00000280 <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
 284:	c0 91 c4 00 	lds	r28, 0x00C4	; 0x8000c4 <gu8_counter>
 288:	d0 e0       	ldi	r29, 0x00	; 0
 28a:	0e 94 ab 03 	call	0x756	; 0x756 <Uart_DataRegister>
 28e:	cb 53       	subi	r28, 0x3B	; 59
 290:	df 4f       	sbci	r29, 0xFF	; 255
 292:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
 294:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <gu8_counter>
 298:	e9 2f       	mov	r30, r25
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	eb 53       	subi	r30, 0x3B	; 59
 29e:	ff 4f       	sbci	r31, 0xFF	; 255
 2a0:	80 81       	ld	r24, Z
 2a2:	8d 30       	cpi	r24, 0x0D	; 13
 2a4:	71 f4       	brne	.+28     	; 0x2c2 <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
 2a6:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
 2aa:	e0 91 c4 00 	lds	r30, 0x00C4	; 0x8000c4 <gu8_counter>
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	eb 53       	subi	r30, 0x3B	; 59
 2b2:	ff 4f       	sbci	r31, 0xFF	; 255
 2b4:	10 82       	st	Z, r1
		gu8_counter = 0;
 2b6:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <gu8_counter>
		gu8_flag = 1;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <gu8_flag>
 2c0:	15 c0       	rjmp	.+42     	; 0x2ec <Uart_RXC_ISR+0x6c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
 2c2:	88 30       	cpi	r24, 0x08	; 8
 2c4:	51 f4       	brne	.+20     	; 0x2da <Uart_RXC_ISR+0x5a>
 2c6:	99 23       	and	r25, r25
 2c8:	41 f0       	breq	.+16     	; 0x2da <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
 2ca:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Uart_sendByte>
		gu8_counter--;
 2ce:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <gu8_counter>
 2d2:	81 50       	subi	r24, 0x01	; 1
 2d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <gu8_counter>
 2d8:	09 c0       	rjmp	.+18     	; 0x2ec <Uart_RXC_ISR+0x6c>
	}
	else if(gau8_data[gu8_counter] != '\b')
 2da:	88 30       	cpi	r24, 0x08	; 8
 2dc:	39 f0       	breq	.+14     	; 0x2ec <Uart_RXC_ISR+0x6c>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
 2de:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Uart_sendByte>
		gu8_counter++;
 2e2:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <gu8_counter>
 2e6:	8f 5f       	subi	r24, 0xFF	; 255
 2e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <gu8_counter>
	}
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
 2f2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <genu_TerminalModuleState>
 2f6:	83 30       	cpi	r24, 0x03	; 3
 2f8:	81 f0       	breq	.+32     	; 0x31a <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
 2fa:	0e 94 4e 03 	call	0x69c	; 0x69c <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	11 f0       	breq	.+4      	; 0x306 <Terminal_init+0x14>
 302:	87 30       	cpi	r24, 0x07	; 7
 304:	49 f4       	brne	.+18     	; 0x318 <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
 306:	80 e4       	ldi	r24, 0x40	; 64
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 96 03 	call	0x72c	; 0x72c <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
 30e:	83 e0       	ldi	r24, 0x03	; 3
 310:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
 318:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
 31a:	08 95       	ret

0000031c <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
 320:	00 97       	sbiw	r24, 0x00	; 0
 322:	81 f0       	breq	.+32     	; 0x344 <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
 324:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <genu_TerminalModuleState>
 328:	22 30       	cpi	r18, 0x02	; 2
 32a:	79 f0       	breq	.+30     	; 0x34a <Terminal_Out+0x2e>
 32c:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
 32e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <stringLength>
 332:	68 2f       	mov	r22, r24
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	ce 01       	movw	r24, r28
 338:	0e 94 6f 03 	call	0x6de	; 0x6de <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	21 f0       	breq	.+8      	; 0x348 <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	03 c0       	rjmp	.+6      	; 0x34a <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
 344:	24 e0       	ldi	r18, 0x04	; 4
 346:	01 c0       	rjmp	.+2      	; 0x34a <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
 348:	21 e0       	ldi	r18, 0x01	; 1
}
 34a:	82 2f       	mov	r24, r18
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
 352:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
 354:	89 2b       	or	r24, r25
 356:	a1 f0       	breq	.+40     	; 0x380 <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
 358:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <genu_TerminalModuleState>
 35c:	82 30       	cpi	r24, 0x02	; 2
 35e:	99 f0       	breq	.+38     	; 0x386 <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	
	if(gu8_flag == 1)
 360:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <gu8_flag>
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	71 f4       	brne	.+28     	; 0x384 <Terminal_In+0x32>
	{
		
		gu8_flag = 0;
 368:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
 36c:	85 ec       	ldi	r24, 0xC5	; 197
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 2f 01 	call	0x25e	; 0x25e <stringCopy>
		EmptyString(gau8_data);
 374:	85 ec       	ldi	r24, 0xC5	; 197
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 23 01 	call	0x246	; 0x246 <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
 37c:	85 e0       	ldi	r24, 0x05	; 5
 37e:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
 380:	84 e0       	ldi	r24, 0x04	; 4
 382:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
 384:	81 e0       	ldi	r24, 0x01	; 1
}
 386:	08 95       	ret

00000388 <main>:

#include "App Layer/App.h"

int main(void)
{
	TrafficApp_start();
 388:	0e 94 a4 00 	call	0x148	; 0x148 <TrafficApp_start>
 38c:	ff cf       	rjmp	.-2      	; 0x38c <main+0x4>

0000038e <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
 38e:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
 390:	89 2b       	or	r24, r25
 392:	09 f4       	brne	.+2      	; 0x396 <Dio_init+0x8>
 394:	e4 c0       	rjmp	.+456    	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	d7 c0       	rjmp	.+430    	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
 39a:	e9 2f       	mov	r30, r25
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	ee 0f       	add	r30, r30
 3a0:	ff 1f       	adc	r31, r31
 3a2:	ee 0f       	add	r30, r30
 3a4:	ff 1f       	adc	r31, r31
 3a6:	e4 0f       	add	r30, r20
 3a8:	f5 1f       	adc	r31, r21
 3aa:	81 81       	ldd	r24, Z+1	; 0x01
 3ac:	88 30       	cpi	r24, 0x08	; 8
 3ae:	08 f0       	brcs	.+2      	; 0x3b2 <Dio_init+0x24>
 3b0:	d8 c0       	rjmp	.+432    	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
 3b2:	20 81       	ld	r18, Z
 3b4:	21 30       	cpi	r18, 0x01	; 1
 3b6:	c1 f1       	breq	.+112    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3b8:	38 f0       	brcs	.+14     	; 0x3c8 <Dio_init+0x3a>
 3ba:	22 30       	cpi	r18, 0x02	; 2
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <Dio_init+0x32>
 3be:	64 c0       	rjmp	.+200    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 3c0:	23 30       	cpi	r18, 0x03	; 3
 3c2:	09 f4       	brne	.+2      	; 0x3c6 <Dio_init+0x38>
 3c4:	91 c0       	rjmp	.+290    	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 3c6:	cf c0       	rjmp	.+414    	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
 3c8:	2a b3       	in	r18, 0x1a	; 26
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	db 01       	movw	r26, r22
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <Dio_init+0x48>
 3d2:	aa 0f       	add	r26, r26
 3d4:	bb 1f       	adc	r27, r27
 3d6:	8a 95       	dec	r24
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <Dio_init+0x44>
 3da:	8a 2f       	mov	r24, r26
 3dc:	80 95       	com	r24
 3de:	82 23       	and	r24, r18
 3e0:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
 3e2:	aa b3       	in	r26, 0x1a	; 26
 3e4:	82 81       	ldd	r24, Z+2	; 0x02
 3e6:	28 2f       	mov	r18, r24
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	01 80       	ldd	r0, Z+1	; 0x01
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <Dio_init+0x64>
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	0a 94       	dec	r0
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <Dio_init+0x60>
 3f6:	2a 2b       	or	r18, r26
 3f8:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
 3fa:	8b b3       	in	r24, 0x1b	; 27
 3fc:	01 80       	ldd	r0, Z+1	; 0x01
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	66 0f       	add	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	0a 94       	dec	r0
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	60 95       	com	r22
 40a:	68 23       	and	r22, r24
 40c:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
 40e:	6b b3       	in	r22, 0x1b	; 27
 410:	83 81       	ldd	r24, Z+3	; 0x03
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	01 80       	ldd	r0, Z+1	; 0x01
 418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41a:	22 0f       	add	r18, r18
 41c:	33 1f       	adc	r19, r19
 41e:	0a 94       	dec	r0
 420:	e2 f7       	brpl	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	26 2b       	or	r18, r22
 424:	2b bb       	out	0x1b, r18	; 27
				break;
 426:	8f c0       	rjmp	.+286    	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
 428:	27 b3       	in	r18, 0x17	; 23
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	db 01       	movw	r26, r22
 430:	02 c0       	rjmp	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 432:	aa 0f       	add	r26, r26
 434:	bb 1f       	adc	r27, r27
 436:	8a 95       	dec	r24
 438:	e2 f7       	brpl	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	8a 2f       	mov	r24, r26
 43c:	80 95       	com	r24
 43e:	82 23       	and	r24, r18
 440:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
 442:	a7 b3       	in	r26, 0x17	; 23
 444:	82 81       	ldd	r24, Z+2	; 0x02
 446:	28 2f       	mov	r18, r24
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	01 80       	ldd	r0, Z+1	; 0x01
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	22 0f       	add	r18, r18
 450:	33 1f       	adc	r19, r19
 452:	0a 94       	dec	r0
 454:	e2 f7       	brpl	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	2a 2b       	or	r18, r26
 458:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
 45a:	88 b3       	in	r24, 0x18	; 24
 45c:	01 80       	ldd	r0, Z+1	; 0x01
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 460:	66 0f       	add	r22, r22
 462:	77 1f       	adc	r23, r23
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 468:	60 95       	com	r22
 46a:	68 23       	and	r22, r24
 46c:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
 46e:	68 b3       	in	r22, 0x18	; 24
 470:	83 81       	ldd	r24, Z+3	; 0x03
 472:	28 2f       	mov	r18, r24
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	01 80       	ldd	r0, Z+1	; 0x01
 478:	02 c0       	rjmp	.+4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 47a:	22 0f       	add	r18, r18
 47c:	33 1f       	adc	r19, r19
 47e:	0a 94       	dec	r0
 480:	e2 f7       	brpl	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 482:	26 2b       	or	r18, r22
 484:	28 bb       	out	0x18, r18	; 24
				break;
 486:	5f c0       	rjmp	.+190    	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
 488:	24 b3       	in	r18, 0x14	; 20
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	db 01       	movw	r26, r22
 490:	02 c0       	rjmp	.+4      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 492:	aa 0f       	add	r26, r26
 494:	bb 1f       	adc	r27, r27
 496:	8a 95       	dec	r24
 498:	e2 f7       	brpl	.-8      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 49a:	8a 2f       	mov	r24, r26
 49c:	80 95       	com	r24
 49e:	82 23       	and	r24, r18
 4a0:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
 4a2:	a4 b3       	in	r26, 0x14	; 20
 4a4:	82 81       	ldd	r24, Z+2	; 0x02
 4a6:	28 2f       	mov	r18, r24
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	01 80       	ldd	r0, Z+1	; 0x01
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ae:	22 0f       	add	r18, r18
 4b0:	33 1f       	adc	r19, r19
 4b2:	0a 94       	dec	r0
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4b6:	2a 2b       	or	r18, r26
 4b8:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
 4ba:	85 b3       	in	r24, 0x15	; 21
 4bc:	01 80       	ldd	r0, Z+1	; 0x01
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	0a 94       	dec	r0
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4c8:	60 95       	com	r22
 4ca:	68 23       	and	r22, r24
 4cc:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
 4ce:	65 b3       	in	r22, 0x15	; 21
 4d0:	83 81       	ldd	r24, Z+3	; 0x03
 4d2:	28 2f       	mov	r18, r24
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	01 80       	ldd	r0, Z+1	; 0x01
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4da:	22 0f       	add	r18, r18
 4dc:	33 1f       	adc	r19, r19
 4de:	0a 94       	dec	r0
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4e2:	26 2b       	or	r18, r22
 4e4:	25 bb       	out	0x15, r18	; 21
				break;
 4e6:	2f c0       	rjmp	.+94     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
 4e8:	21 b3       	in	r18, 0x11	; 17
 4ea:	61 e0       	ldi	r22, 0x01	; 1
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	db 01       	movw	r26, r22
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4f2:	aa 0f       	add	r26, r26
 4f4:	bb 1f       	adc	r27, r27
 4f6:	8a 95       	dec	r24
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4fa:	8a 2f       	mov	r24, r26
 4fc:	80 95       	com	r24
 4fe:	82 23       	and	r24, r18
 500:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
 502:	a1 b3       	in	r26, 0x11	; 17
 504:	82 81       	ldd	r24, Z+2	; 0x02
 506:	28 2f       	mov	r18, r24
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	01 80       	ldd	r0, Z+1	; 0x01
 50c:	02 c0       	rjmp	.+4      	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
 50e:	22 0f       	add	r18, r18
 510:	33 1f       	adc	r19, r19
 512:	0a 94       	dec	r0
 514:	e2 f7       	brpl	.-8      	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
 516:	2a 2b       	or	r18, r26
 518:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
 51a:	82 b3       	in	r24, 0x12	; 18
 51c:	01 80       	ldd	r0, Z+1	; 0x01
 51e:	02 c0       	rjmp	.+4      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 520:	66 0f       	add	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	0a 94       	dec	r0
 526:	e2 f7       	brpl	.-8      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 528:	60 95       	com	r22
 52a:	68 23       	and	r22, r24
 52c:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
 52e:	62 b3       	in	r22, 0x12	; 18
 530:	83 81       	ldd	r24, Z+3	; 0x03
 532:	28 2f       	mov	r18, r24
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	01 80       	ldd	r0, Z+1	; 0x01
 538:	02 c0       	rjmp	.+4      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
 53a:	22 0f       	add	r18, r18
 53c:	33 1f       	adc	r19, r19
 53e:	0a 94       	dec	r0
 540:	e2 f7       	brpl	.-8      	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 542:	26 2b       	or	r18, r22
 544:	22 bb       	out	0x12, r18	; 18
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
 546:	9f 5f       	subi	r25, 0xFF	; 255
 548:	93 30       	cpi	r25, 0x03	; 3
 54a:	08 f4       	brcc	.+2      	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
 54c:	26 cf       	rjmp	.-436    	; 0x39a <Dio_init+0xc>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
 54e:	50 93 cd 00 	sts	0x00CD, r21	; 0x8000cd <pstrDio_pinsConfig+0x1>
 552:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <pstrDio_pinsConfig>
	u8_Dio_Status = DIO_INITIALIZED;
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
 55c:	08 95       	ret
{
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
 55e:	85 e0       	ldi	r24, 0x05	; 5
 560:	08 95       	ret
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
 562:	83 e0       	ldi	r24, 0x03	; 3
 564:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
 566:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
 568:	08 95       	ret

0000056a <Dio_writePin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
 56a:	84 30       	cpi	r24, 0x04	; 4
 56c:	08 f0       	brcs	.+2      	; 0x570 <Dio_writePin+0x6>
 56e:	90 c0       	rjmp	.+288    	; 0x690 <Dio_writePin+0x126>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
 570:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <u8_Dio_Status>
 574:	99 23       	and	r25, r25
 576:	09 f4       	brne	.+2      	; 0x57a <Dio_writePin+0x10>
 578:	8d c0       	rjmp	.+282    	; 0x694 <Dio_writePin+0x12a>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
 57a:	e8 2f       	mov	r30, r24
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	cf 01       	movw	r24, r30
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <pstrDio_pinsConfig>
 58c:	f0 91 cd 00 	lds	r31, 0x00CD	; 0x8000cd <pstrDio_pinsConfig+0x1>
 590:	e8 0f       	add	r30, r24
 592:	f9 1f       	adc	r31, r25
 594:	80 81       	ld	r24, Z
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	21 f1       	breq	.+72     	; 0x5e2 <Dio_writePin+0x78>
 59a:	30 f0       	brcs	.+12     	; 0x5a8 <Dio_writePin+0x3e>
 59c:	82 30       	cpi	r24, 0x02	; 2
 59e:	f1 f1       	breq	.+124    	; 0x61c <Dio_writePin+0xb2>
 5a0:	83 30       	cpi	r24, 0x03	; 3
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <Dio_writePin+0x3c>
 5a4:	58 c0       	rjmp	.+176    	; 0x656 <Dio_writePin+0xec>
 5a6:	78 c0       	rjmp	.+240    	; 0x698 <Dio_writePin+0x12e>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
 5a8:	61 30       	cpi	r22, 0x01	; 1
 5aa:	69 f4       	brne	.+26     	; 0x5c6 <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
 5ac:	2b b3       	in	r18, 0x1b	; 27
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	01 80       	ldd	r0, Z+1	; 0x01
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <Dio_writePin+0x50>
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	0a 94       	dec	r0
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <Dio_writePin+0x4c>
 5be:	82 2b       	or	r24, r18
 5c0:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
 5c6:	2b b3       	in	r18, 0x1b	; 27
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	01 80       	ldd	r0, Z+1	; 0x01
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <Dio_writePin+0x6a>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	0a 94       	dec	r0
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <Dio_writePin+0x66>
 5d8:	80 95       	com	r24
 5da:	82 23       	and	r24, r18
 5dc:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
 5e2:	61 30       	cpi	r22, 0x01	; 1
 5e4:	69 f4       	brne	.+26     	; 0x600 <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
 5e6:	28 b3       	in	r18, 0x18	; 24
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	01 80       	ldd	r0, Z+1	; 0x01
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <Dio_writePin+0x8a>
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	0a 94       	dec	r0
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <Dio_writePin+0x86>
 5f8:	82 2b       	or	r24, r18
 5fa:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
 600:	28 b3       	in	r18, 0x18	; 24
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	01 80       	ldd	r0, Z+1	; 0x01
 608:	02 c0       	rjmp	.+4      	; 0x60e <Dio_writePin+0xa4>
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	0a 94       	dec	r0
 610:	e2 f7       	brpl	.-8      	; 0x60a <Dio_writePin+0xa0>
 612:	80 95       	com	r24
 614:	82 23       	and	r24, r18
 616:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
 61c:	61 30       	cpi	r22, 0x01	; 1
 61e:	69 f4       	brne	.+26     	; 0x63a <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
 620:	25 b3       	in	r18, 0x15	; 21
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	01 80       	ldd	r0, Z+1	; 0x01
 628:	02 c0       	rjmp	.+4      	; 0x62e <Dio_writePin+0xc4>
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	0a 94       	dec	r0
 630:	e2 f7       	brpl	.-8      	; 0x62a <Dio_writePin+0xc0>
 632:	82 2b       	or	r24, r18
 634:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
 63a:	25 b3       	in	r18, 0x15	; 21
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	01 80       	ldd	r0, Z+1	; 0x01
 642:	02 c0       	rjmp	.+4      	; 0x648 <Dio_writePin+0xde>
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	0a 94       	dec	r0
 64a:	e2 f7       	brpl	.-8      	; 0x644 <Dio_writePin+0xda>
 64c:	80 95       	com	r24
 64e:	82 23       	and	r24, r18
 650:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
 656:	61 30       	cpi	r22, 0x01	; 1
 658:	69 f4       	brne	.+26     	; 0x674 <Dio_writePin+0x10a>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
 65a:	22 b3       	in	r18, 0x12	; 18
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	01 80       	ldd	r0, Z+1	; 0x01
 662:	02 c0       	rjmp	.+4      	; 0x668 <Dio_writePin+0xfe>
 664:	88 0f       	add	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	0a 94       	dec	r0
 66a:	e2 f7       	brpl	.-8      	; 0x664 <Dio_writePin+0xfa>
 66c:	82 2b       	or	r24, r18
 66e:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
 674:	22 b3       	in	r18, 0x12	; 18
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	01 80       	ldd	r0, Z+1	; 0x01
 67c:	02 c0       	rjmp	.+4      	; 0x682 <Dio_writePin+0x118>
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	0a 94       	dec	r0
 684:	e2 f7       	brpl	.-8      	; 0x67e <Dio_writePin+0x114>
 686:	80 95       	com	r24
 688:	82 23       	and	r24, r18
 68a:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	08 95       	ret
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
 690:	82 e0       	ldi	r24, 0x02	; 2
 692:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
 694:	86 e0       	ldi	r24, 0x06	; 6
 696:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
 698:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
 69a:	08 95       	ret

0000069c <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
 69c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <u8_Uart_Status>
 6a0:	81 30       	cpi	r24, 0x01	; 1
 6a2:	81 f0       	breq	.+32     	; 0x6c4 <Uart_init+0x28>
 6a4:	10 bc       	out	0x20, r1	; 32
 6a6:	8c e0       	ldi	r24, 0x0C	; 12
 6a8:	89 b9       	out	0x09, r24	; 9
 6aa:	82 e0       	ldi	r24, 0x02	; 2
 6ac:	8b b9       	out	0x0b, r24	; 11
 6ae:	88 e1       	ldi	r24, 0x18	; 24
 6b0:	8a b9       	out	0x0a, r24	; 10
 6b2:	80 e8       	ldi	r24, 0x80	; 128
 6b4:	80 bd       	out	0x20, r24	; 32
 6b6:	80 b5       	in	r24, 0x20	; 32
 6b8:	86 68       	ori	r24, 0x86	; 134
 6ba:	80 bd       	out	0x20, r24	; 32
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <u8_Uart_Status>
 6c2:	08 95       	ret
 6c4:	87 e0       	ldi	r24, 0x07	; 7
 6c6:	08 95       	ret

000006c8 <Uart_sendByte>:
 6c8:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <u8_Uart_Status>
 6cc:	99 23       	and	r25, r25
 6ce:	29 f0       	breq	.+10     	; 0x6da <Uart_sendByte+0x12>
 6d0:	5d 9b       	sbis	0x0b, 5	; 11
 6d2:	fe cf       	rjmp	.-4      	; 0x6d0 <Uart_sendByte+0x8>
 6d4:	8c b9       	out	0x0c, r24	; 12
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	08 95       	ret
 6da:	86 e0       	ldi	r24, 0x06	; 6
 6dc:	08 95       	ret

000006de <Uart_sendPacket>:
 6de:	ef 92       	push	r14
 6e0:	ff 92       	push	r15
 6e2:	0f 93       	push	r16
 6e4:	1f 93       	push	r17
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <u8_Uart_Status>
 6ee:	22 23       	and	r18, r18
 6f0:	99 f0       	breq	.+38     	; 0x718 <Uart_sendPacket+0x3a>
 6f2:	8b 01       	movw	r16, r22
 6f4:	7c 01       	movw	r14, r24
 6f6:	c0 e0       	ldi	r28, 0x00	; 0
 6f8:	d0 e0       	ldi	r29, 0x00	; 0
 6fa:	09 c0       	rjmp	.+18     	; 0x70e <Uart_sendPacket+0x30>
 6fc:	f7 01       	movw	r30, r14
 6fe:	ec 0f       	add	r30, r28
 700:	fd 1f       	adc	r31, r29
 702:	80 81       	ld	r24, Z
 704:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Uart_sendByte>
 708:	81 30       	cpi	r24, 0x01	; 1
 70a:	41 f4       	brne	.+16     	; 0x71c <Uart_sendPacket+0x3e>
 70c:	21 96       	adiw	r28, 0x01	; 1
 70e:	c0 17       	cp	r28, r16
 710:	d1 07       	cpc	r29, r17
 712:	a0 f3       	brcs	.-24     	; 0x6fc <Uart_sendPacket+0x1e>
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	03 c0       	rjmp	.+6      	; 0x71e <Uart_sendPacket+0x40>
 718:	86 e0       	ldi	r24, 0x06	; 6
 71a:	01 c0       	rjmp	.+2      	; 0x71e <Uart_sendPacket+0x40>
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	1f 91       	pop	r17
 724:	0f 91       	pop	r16
 726:	ff 90       	pop	r15
 728:	ef 90       	pop	r14
 72a:	08 95       	ret

0000072c <Uart_EnableNotification_RXC>:
 72c:	9c 01       	movw	r18, r24
 72e:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <u8_Uart_Status>
 732:	99 23       	and	r25, r25
 734:	61 f0       	breq	.+24     	; 0x74e <Uart_EnableNotification_RXC+0x22>
 736:	21 15       	cp	r18, r1
 738:	31 05       	cpc	r19, r1
 73a:	59 f0       	breq	.+22     	; 0x752 <Uart_EnableNotification_RXC+0x26>
 73c:	8a b1       	in	r24, 0x0a	; 10
 73e:	80 68       	ori	r24, 0x80	; 128
 740:	8a b9       	out	0x0a, r24	; 10
 742:	30 93 d2 00 	sts	0x00D2, r19	; 0x8000d2 <Uart_RXC_CallBackPtr+0x1>
 746:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <Uart_RXC_CallBackPtr>
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	08 95       	ret
 74e:	86 e0       	ldi	r24, 0x06	; 6
 750:	08 95       	ret
 752:	85 e0       	ldi	r24, 0x05	; 5
 754:	08 95       	ret

00000756 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
 756:	8c b1       	in	r24, 0x0c	; 12
}
 758:	08 95       	ret

0000075a <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
 75a:	1f 92       	push	r1
 75c:	0f 92       	push	r0
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	0f 92       	push	r0
 762:	11 24       	eor	r1, r1
 764:	2f 93       	push	r18
 766:	3f 93       	push	r19
 768:	4f 93       	push	r20
 76a:	5f 93       	push	r21
 76c:	6f 93       	push	r22
 76e:	7f 93       	push	r23
 770:	8f 93       	push	r24
 772:	9f 93       	push	r25
 774:	af 93       	push	r26
 776:	bf 93       	push	r27
 778:	ef 93       	push	r30
 77a:	ff 93       	push	r31
 77c:	e0 91 d3 00 	lds	r30, 0x00D3	; 0x8000d3 <Uart_TXC_CallBackPtr>
 780:	f0 91 d4 00 	lds	r31, 0x00D4	; 0x8000d4 <Uart_TXC_CallBackPtr+0x1>
 784:	09 95       	icall
 786:	ff 91       	pop	r31
 788:	ef 91       	pop	r30
 78a:	bf 91       	pop	r27
 78c:	af 91       	pop	r26
 78e:	9f 91       	pop	r25
 790:	8f 91       	pop	r24
 792:	7f 91       	pop	r23
 794:	6f 91       	pop	r22
 796:	5f 91       	pop	r21
 798:	4f 91       	pop	r20
 79a:	3f 91       	pop	r19
 79c:	2f 91       	pop	r18
 79e:	0f 90       	pop	r0
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	0f 90       	pop	r0
 7a4:	1f 90       	pop	r1
 7a6:	18 95       	reti

000007a8 <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
 7a8:	1f 92       	push	r1
 7aa:	0f 92       	push	r0
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	0f 92       	push	r0
 7b0:	11 24       	eor	r1, r1
 7b2:	2f 93       	push	r18
 7b4:	3f 93       	push	r19
 7b6:	4f 93       	push	r20
 7b8:	5f 93       	push	r21
 7ba:	6f 93       	push	r22
 7bc:	7f 93       	push	r23
 7be:	8f 93       	push	r24
 7c0:	9f 93       	push	r25
 7c2:	af 93       	push	r26
 7c4:	bf 93       	push	r27
 7c6:	ef 93       	push	r30
 7c8:	ff 93       	push	r31
 7ca:	e0 91 d1 00 	lds	r30, 0x00D1	; 0x8000d1 <Uart_RXC_CallBackPtr>
 7ce:	f0 91 d2 00 	lds	r31, 0x00D2	; 0x8000d2 <Uart_RXC_CallBackPtr+0x1>
 7d2:	09 95       	icall
 7d4:	ff 91       	pop	r31
 7d6:	ef 91       	pop	r30
 7d8:	bf 91       	pop	r27
 7da:	af 91       	pop	r26
 7dc:	9f 91       	pop	r25
 7de:	8f 91       	pop	r24
 7e0:	7f 91       	pop	r23
 7e2:	6f 91       	pop	r22
 7e4:	5f 91       	pop	r21
 7e6:	4f 91       	pop	r20
 7e8:	3f 91       	pop	r19
 7ea:	2f 91       	pop	r18
 7ec:	0f 90       	pop	r0
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	0f 90       	pop	r0
 7f2:	1f 90       	pop	r1
 7f4:	18 95       	reti

000007f6 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
 7f6:	1f 92       	push	r1
 7f8:	0f 92       	push	r0
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	0f 92       	push	r0
 7fe:	11 24       	eor	r1, r1
 800:	2f 93       	push	r18
 802:	3f 93       	push	r19
 804:	4f 93       	push	r20
 806:	5f 93       	push	r21
 808:	6f 93       	push	r22
 80a:	7f 93       	push	r23
 80c:	8f 93       	push	r24
 80e:	9f 93       	push	r25
 810:	af 93       	push	r26
 812:	bf 93       	push	r27
 814:	ef 93       	push	r30
 816:	ff 93       	push	r31
 818:	e0 91 cf 00 	lds	r30, 0x00CF	; 0x8000cf <Uart_UDRE_CallBackPtr>
 81c:	f0 91 d0 00 	lds	r31, 0x00D0	; 0x8000d0 <Uart_UDRE_CallBackPtr+0x1>
 820:	09 95       	icall
 822:	ff 91       	pop	r31
 824:	ef 91       	pop	r30
 826:	bf 91       	pop	r27
 828:	af 91       	pop	r26
 82a:	9f 91       	pop	r25
 82c:	8f 91       	pop	r24
 82e:	7f 91       	pop	r23
 830:	6f 91       	pop	r22
 832:	5f 91       	pop	r21
 834:	4f 91       	pop	r20
 836:	3f 91       	pop	r19
 838:	2f 91       	pop	r18
 83a:	0f 90       	pop	r0
 83c:	0f be       	out	0x3f, r0	; 63
 83e:	0f 90       	pop	r0
 840:	1f 90       	pop	r1
 842:	18 95       	reti

00000844 <Service_init>:
* Description: Function to Initialize the Service layer -- Initialize all the below layers.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_init(void)
{
	/* Check if the Service Layer has been already initialized */
	if(genu_SrvcStatus == SRVC_STATUS_INITIALIZED)
 844:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <genu_SrvcStatus>
 848:	84 30       	cpi	r24, 0x04	; 4
 84a:	81 f0       	breq	.+32     	; 0x86c <__stack+0xd>
		return SRVC_STATUS_INITIALIZED;
		
	/* Call the initializer in Button and Motor*/
	if(LED_STATUS_ERROR_OK != Led_init())
 84c:	0e 94 b1 00 	call	0x162	; 0x162 <Led_init>
 850:	81 30       	cpi	r24, 0x01	; 1
 852:	49 f4       	brne	.+18     	; 0x866 <__stack+0x7>
		return SRVC_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
 854:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Terminal_init>
 858:	81 30       	cpi	r24, 0x01	; 1
 85a:	39 f4       	brne	.+14     	; 0x86a <__stack+0xb>
		return SRVC_STATUS_ERROR_NOK;
	
	genu_SrvcStatus = SRVC_STATUS_INITIALIZED;
 85c:	84 e0       	ldi	r24, 0x04	; 4
 85e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <genu_SrvcStatus>
	return SRVC_STATUS_ERROR_OK;
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	08 95       	ret
	if(genu_SrvcStatus == SRVC_STATUS_INITIALIZED)
		return SRVC_STATUS_INITIALIZED;
		
	/* Call the initializer in Button and Motor*/
	if(LED_STATUS_ERROR_OK != Led_init())
		return SRVC_STATUS_ERROR_NOK;
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	08 95       	ret
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return SRVC_STATUS_ERROR_NOK;
 86a:	80 e0       	ldi	r24, 0x00	; 0
	
	genu_SrvcStatus = SRVC_STATUS_INITIALIZED;
	return SRVC_STATUS_ERROR_OK;
}
 86c:	08 95       	ret

0000086e <Service_ReportTerminal>:
* Parameters (out): pu8_button - Pointer to variable to hold the button pressed
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_ReportTerminal(uint8_t* pu8_terminal)
{
 86e:	0f 93       	push	r16
 870:	1f 93       	push	r17
 872:	cf 93       	push	r28
 874:	df 93       	push	r29
 876:	00 d0       	rcall	.+0      	; 0x878 <Service_ReportTerminal+0xa>
 878:	00 d0       	rcall	.+0      	; 0x87a <Service_ReportTerminal+0xc>
 87a:	00 d0       	rcall	.+0      	; 0x87c <Service_ReportTerminal+0xe>
 87c:	cd b7       	in	r28, 0x3d	; 61
 87e:	de b7       	in	r29, 0x3e	; 62
 880:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
 882:	ce 01       	movw	r24, r28
 884:	01 96       	adiw	r24, 0x01	; 1
 886:	26 e0       	ldi	r18, 0x06	; 6
 888:	fc 01       	movw	r30, r24
 88a:	11 92       	st	Z+, r1
 88c:	2a 95       	dec	r18
 88e:	e9 f7       	brne	.-6      	; 0x88a <Service_ReportTerminal+0x1c>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
 890:	0e 94 a9 01 	call	0x352	; 0x352 <Terminal_In>
	
	if( (enuTermStatus != TERMINAL_STATUS_ERROR_OK) && (enuTermStatus != TERMINAL_STATUS_INPUT_CHANGED))
 894:	81 30       	cpi	r24, 0x01	; 1
 896:	19 f0       	breq	.+6      	; 0x89e <Service_ReportTerminal+0x30>
 898:	85 30       	cpi	r24, 0x05	; 5
 89a:	09 f0       	breq	.+2      	; 0x89e <Service_ReportTerminal+0x30>
 89c:	42 c0       	rjmp	.+132    	; 0x922 <Service_ReportTerminal+0xb4>
		return SRVC_STATUS_ERROR_NOK;
	if (stringCompare((uint8_t*)au8_inputString,(uint8_t*)cgau8_startString) == 1)
 89e:	6b eb       	ldi	r22, 0xBB	; 187
 8a0:	70 e0       	ldi	r23, 0x00	; 0
 8a2:	ce 01       	movw	r24, r28
 8a4:	01 96       	adiw	r24, 0x01	; 1
 8a6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <stringCompare>
 8aa:	81 30       	cpi	r24, 0x01	; 1
 8ac:	39 f4       	brne	.+14     	; 0x8bc <Service_ReportTerminal+0x4e>
	{
		*pu8_terminal = TERM_SRVC_START;
 8ae:	82 e0       	ldi	r24, 0x02	; 2
 8b0:	f8 01       	movw	r30, r16
 8b2:	80 83       	st	Z, r24
		gu8_terminalInput = TERM_SRVC_START;
 8b4:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <gu8_terminalInput>
		return SRVC_STATUS_ERROR_OK;
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	36 c0       	rjmp	.+108    	; 0x928 <Service_ReportTerminal+0xba>
	}
	else if (stringCompare((uint8_t*)au8_inputString,(uint8_t*)cgau8_waitString) == 1)
 8bc:	65 eb       	ldi	r22, 0xB5	; 181
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	ce 01       	movw	r24, r28
 8c2:	01 96       	adiw	r24, 0x01	; 1
 8c4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <stringCompare>
 8c8:	81 30       	cpi	r24, 0x01	; 1
 8ca:	39 f4       	brne	.+14     	; 0x8da <Service_ReportTerminal+0x6c>
	{
		*pu8_terminal = TERM_SRVC_WAIT;
 8cc:	83 e0       	ldi	r24, 0x03	; 3
 8ce:	f8 01       	movw	r30, r16
 8d0:	80 83       	st	Z, r24
		gu8_terminalInput = TERM_SRVC_WAIT;
 8d2:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <gu8_terminalInput>
		return SRVC_STATUS_ERROR_OK;
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	27 c0       	rjmp	.+78     	; 0x928 <Service_ReportTerminal+0xba>
	}
	else if (stringCompare((uint8_t*)au8_inputString,(uint8_t*)cgau8_stopString) == 1)
 8da:	6f ea       	ldi	r22, 0xAF	; 175
 8dc:	70 e0       	ldi	r23, 0x00	; 0
 8de:	ce 01       	movw	r24, r28
 8e0:	01 96       	adiw	r24, 0x01	; 1
 8e2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <stringCompare>
 8e6:	81 30       	cpi	r24, 0x01	; 1
 8e8:	39 f4       	brne	.+14     	; 0x8f8 <Service_ReportTerminal+0x8a>
	{
		*pu8_terminal = TERM_SRVC_STOP;
 8ea:	84 e0       	ldi	r24, 0x04	; 4
 8ec:	f8 01       	movw	r30, r16
 8ee:	80 83       	st	Z, r24
		gu8_terminalInput = TERM_SRVC_STOP;
 8f0:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <gu8_terminalInput>
		return SRVC_STATUS_ERROR_OK;
 8f4:	81 e0       	ldi	r24, 0x01	; 1
 8f6:	18 c0       	rjmp	.+48     	; 0x928 <Service_ReportTerminal+0xba>
	}
	else if (stringCompare((uint8_t*)au8_inputString,(uint8_t*)cgau8_atString) == 1)
 8f8:	69 ea       	ldi	r22, 0xA9	; 169
 8fa:	70 e0       	ldi	r23, 0x00	; 0
 8fc:	ce 01       	movw	r24, r28
 8fe:	01 96       	adiw	r24, 0x01	; 1
 900:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <stringCompare>
 904:	81 30       	cpi	r24, 0x01	; 1
 906:	29 f4       	brne	.+10     	; 0x912 <Service_ReportTerminal+0xa4>
	{
		*pu8_terminal = TERM_SRVC_AT;
 908:	f8 01       	movw	r30, r16
 90a:	80 83       	st	Z, r24
		gu8_terminalInput = TERM_SRVC_AT;
 90c:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <gu8_terminalInput>
		return SRVC_STATUS_ERROR_OK;
 910:	0b c0       	rjmp	.+22     	; 0x928 <Service_ReportTerminal+0xba>
	}else
	{
		if (gu8_terminalInput != TERM_SRVC_AT)
 912:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <gu8_terminalInput>
 916:	81 30       	cpi	r24, 0x01	; 1
 918:	31 f0       	breq	.+12     	; 0x926 <Service_ReportTerminal+0xb8>
		{
			*pu8_terminal = gu8_terminalInput;
 91a:	f8 01       	movw	r30, r16
 91c:	80 83       	st	Z, r24
		}
		return SRVC_STATUS_ERROR_OK;
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	03 c0       	rjmp	.+6      	; 0x928 <Service_ReportTerminal+0xba>
{
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
	
	if( (enuTermStatus != TERMINAL_STATUS_ERROR_OK) && (enuTermStatus != TERMINAL_STATUS_INPUT_CHANGED))
		return SRVC_STATUS_ERROR_NOK;
 922:	80 e0       	ldi	r24, 0x00	; 0
 924:	01 c0       	rjmp	.+2      	; 0x928 <Service_ReportTerminal+0xba>
	{
		if (gu8_terminalInput != TERM_SRVC_AT)
		{
			*pu8_terminal = gu8_terminalInput;
		}
		return SRVC_STATUS_ERROR_OK;
 926:	81 e0       	ldi	r24, 0x01	; 1
	}
	return SRVC_STATUS_ERROR_NOK;
}
 928:	26 96       	adiw	r28, 0x06	; 6
 92a:	0f b6       	in	r0, 0x3f	; 63
 92c:	f8 94       	cli
 92e:	de bf       	out	0x3e, r29	; 62
 930:	0f be       	out	0x3f, r0	; 63
 932:	cd bf       	out	0x3d, r28	; 61
 934:	df 91       	pop	r29
 936:	cf 91       	pop	r28
 938:	1f 91       	pop	r17
 93a:	0f 91       	pop	r16
 93c:	08 95       	ret

0000093e <Service_UpdateLeds>:
* Description: Function to Update the the terminal of the output.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_UpdateLeds(uint8_t u8_ledAction)
{
	
	switch (u8_ledAction)
 93e:	82 30       	cpi	r24, 0x02	; 2
 940:	09 f1       	breq	.+66     	; 0x984 <Service_UpdateLeds+0x46>
 942:	28 f4       	brcc	.+10     	; 0x94e <Service_UpdateLeds+0x10>
 944:	88 23       	and	r24, r24
 946:	41 f0       	breq	.+16     	; 0x958 <Service_UpdateLeds+0x1a>
 948:	81 30       	cpi	r24, 0x01	; 1
 94a:	89 f0       	breq	.+34     	; 0x96e <Service_UpdateLeds+0x30>
 94c:	3c c0       	rjmp	.+120    	; 0x9c6 <Service_UpdateLeds+0x88>
 94e:	83 30       	cpi	r24, 0x03	; 3
 950:	21 f1       	breq	.+72     	; 0x99a <Service_UpdateLeds+0x5c>
 952:	84 30       	cpi	r24, 0x04	; 4
 954:	69 f1       	breq	.+90     	; 0x9b0 <Service_UpdateLeds+0x72>
 956:	37 c0       	rjmp	.+110    	; 0x9c6 <Service_UpdateLeds+0x88>
	{
		case SRVC_ACTION_IDLE:
			Led_Off(LED_GREEN);
 958:	80 e0       	ldi	r24, 0x00	; 0
 95a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Led_Off>
			Led_Off(LED_YELLOW);
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Led_Off>
			Led_Off(LED_RED);
 964:	82 e0       	ldi	r24, 0x02	; 2
 966:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Led_Off>
			Led_On(LED_RED);
			break;
		default:
			return SRVC_STATUS_ERROR_NOK;
	}
	return  SRVC_STATUS_ERROR_OK;
 96a:	81 e0       	ldi	r24, 0x01	; 1
	{
		case SRVC_ACTION_IDLE:
			Led_Off(LED_GREEN);
			Led_Off(LED_YELLOW);
			Led_Off(LED_RED);
			break;
 96c:	08 95       	ret
		case SRVC_ACTION_OK:
			Led_Off(LED_GREEN);
 96e:	80 e0       	ldi	r24, 0x00	; 0
 970:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Led_Off>
			Led_Off(LED_YELLOW);
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Led_Off>
			Led_Off(LED_RED);
 97a:	82 e0       	ldi	r24, 0x02	; 2
 97c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Led_Off>
			Led_On(LED_RED);
			break;
		default:
			return SRVC_STATUS_ERROR_NOK;
	}
	return  SRVC_STATUS_ERROR_OK;
 980:	81 e0       	ldi	r24, 0x01	; 1
			break;
		case SRVC_ACTION_OK:
			Led_Off(LED_GREEN);
			Led_Off(LED_YELLOW);
			Led_Off(LED_RED);
			break;
 982:	08 95       	ret
		case SRVC_ACTION_GREEN:
			Led_On(LED_GREEN);
 984:	80 e0       	ldi	r24, 0x00	; 0
 986:	0e 94 c4 00 	call	0x188	; 0x188 <Led_On>
			Led_Off(LED_YELLOW);
 98a:	81 e0       	ldi	r24, 0x01	; 1
 98c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Led_Off>
			Led_Off(LED_RED);
 990:	82 e0       	ldi	r24, 0x02	; 2
 992:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Led_Off>
			Led_On(LED_RED);
			break;
		default:
			return SRVC_STATUS_ERROR_NOK;
	}
	return  SRVC_STATUS_ERROR_OK;
 996:	81 e0       	ldi	r24, 0x01	; 1
			break;
		case SRVC_ACTION_GREEN:
			Led_On(LED_GREEN);
			Led_Off(LED_YELLOW);
			Led_Off(LED_RED);
			break;
 998:	08 95       	ret
		case SRVC_ACTION_YELLOW:
			Led_Off(LED_GREEN);
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Led_Off>
			Led_On(LED_YELLOW);
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	0e 94 c4 00 	call	0x188	; 0x188 <Led_On>
			Led_Off(LED_RED);
 9a6:	82 e0       	ldi	r24, 0x02	; 2
 9a8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Led_Off>
			Led_On(LED_RED);
			break;
		default:
			return SRVC_STATUS_ERROR_NOK;
	}
	return  SRVC_STATUS_ERROR_OK;
 9ac:	81 e0       	ldi	r24, 0x01	; 1
			break;
		case SRVC_ACTION_YELLOW:
			Led_Off(LED_GREEN);
			Led_On(LED_YELLOW);
			Led_Off(LED_RED);
			break;
 9ae:	08 95       	ret
		case SRVC_ACTION_RED:
			Led_Off(LED_GREEN);
 9b0:	80 e0       	ldi	r24, 0x00	; 0
 9b2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Led_Off>
			Led_Off(LED_YELLOW);
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Led_Off>
			Led_On(LED_RED);
 9bc:	82 e0       	ldi	r24, 0x02	; 2
 9be:	0e 94 c4 00 	call	0x188	; 0x188 <Led_On>
			break;
		default:
			return SRVC_STATUS_ERROR_NOK;
	}
	return  SRVC_STATUS_ERROR_OK;
 9c2:	81 e0       	ldi	r24, 0x01	; 1
			break;
		case SRVC_ACTION_RED:
			Led_Off(LED_GREEN);
			Led_Off(LED_YELLOW);
			Led_On(LED_RED);
			break;
 9c4:	08 95       	ret
		default:
			return SRVC_STATUS_ERROR_NOK;
 9c6:	80 e0       	ldi	r24, 0x00	; 0
	}
	return  SRVC_STATUS_ERROR_OK;
}
 9c8:	08 95       	ret

000009ca <Service_UpdateTerminal>:
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the the output on the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_UpdateTerminal(uint8_t u8_terminalAction)
{
	switch (u8_terminalAction)
 9ca:	82 30       	cpi	r24, 0x02	; 2
 9cc:	91 f0       	breq	.+36     	; 0x9f2 <Service_UpdateTerminal+0x28>
 9ce:	28 f4       	brcc	.+10     	; 0x9da <Service_UpdateTerminal+0x10>
 9d0:	88 23       	and	r24, r24
 9d2:	09 f1       	breq	.+66     	; 0xa16 <Service_UpdateTerminal+0x4c>
 9d4:	81 30       	cpi	r24, 0x01	; 1
 9d6:	39 f0       	breq	.+14     	; 0x9e6 <Service_UpdateTerminal+0x1c>
 9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <Service_UpdateTerminal+0x18>
 9da:	83 30       	cpi	r24, 0x03	; 3
 9dc:	81 f0       	breq	.+32     	; 0x9fe <Service_UpdateTerminal+0x34>
 9de:	84 30       	cpi	r24, 0x04	; 4
 9e0:	a1 f0       	breq	.+40     	; 0xa0a <Service_UpdateTerminal+0x40>
			break;
		case SRVC_ACTION_RED:
			Terminal_Out((uint8_t*)"Red Led is On\r");
			break;
		default:
			return SRVC_STATUS_ERROR_NOK;
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	08 95       	ret
	switch (u8_terminalAction)
	{
		case SRVC_ACTION_IDLE:
			break;
		case SRVC_ACTION_OK:
			Terminal_Out((uint8_t*)"OK\r");
 9e6:	83 e7       	ldi	r24, 0x73	; 115
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	0e 94 8e 01 	call	0x31c	; 0x31c <Terminal_Out>
			Terminal_Out((uint8_t*)"Red Led is On\r");
			break;
		default:
			return SRVC_STATUS_ERROR_NOK;
	}
	return  SRVC_STATUS_ERROR_OK;
 9ee:	81 e0       	ldi	r24, 0x01	; 1
	{
		case SRVC_ACTION_IDLE:
			break;
		case SRVC_ACTION_OK:
			Terminal_Out((uint8_t*)"OK\r");
			break;
 9f0:	08 95       	ret
		case SRVC_ACTION_GREEN:
			Terminal_Out((uint8_t*)"Green Led is On\r");
 9f2:	87 e7       	ldi	r24, 0x77	; 119
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	0e 94 8e 01 	call	0x31c	; 0x31c <Terminal_Out>
			Terminal_Out((uint8_t*)"Red Led is On\r");
			break;
		default:
			return SRVC_STATUS_ERROR_NOK;
	}
	return  SRVC_STATUS_ERROR_OK;
 9fa:	81 e0       	ldi	r24, 0x01	; 1
		case SRVC_ACTION_OK:
			Terminal_Out((uint8_t*)"OK\r");
			break;
		case SRVC_ACTION_GREEN:
			Terminal_Out((uint8_t*)"Green Led is On\r");
			break;
 9fc:	08 95       	ret
		case SRVC_ACTION_YELLOW:
			Terminal_Out((uint8_t*)"Yellow Led is On\r");
 9fe:	88 e8       	ldi	r24, 0x88	; 136
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0e 94 8e 01 	call	0x31c	; 0x31c <Terminal_Out>
			Terminal_Out((uint8_t*)"Red Led is On\r");
			break;
		default:
			return SRVC_STATUS_ERROR_NOK;
	}
	return  SRVC_STATUS_ERROR_OK;
 a06:	81 e0       	ldi	r24, 0x01	; 1
		case SRVC_ACTION_GREEN:
			Terminal_Out((uint8_t*)"Green Led is On\r");
			break;
		case SRVC_ACTION_YELLOW:
			Terminal_Out((uint8_t*)"Yellow Led is On\r");
			break;
 a08:	08 95       	ret
		case SRVC_ACTION_RED:
			Terminal_Out((uint8_t*)"Red Led is On\r");
 a0a:	8a e9       	ldi	r24, 0x9A	; 154
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	0e 94 8e 01 	call	0x31c	; 0x31c <Terminal_Out>
			break;
		default:
			return SRVC_STATUS_ERROR_NOK;
	}
	return  SRVC_STATUS_ERROR_OK;
 a12:	81 e0       	ldi	r24, 0x01	; 1
		case SRVC_ACTION_YELLOW:
			Terminal_Out((uint8_t*)"Yellow Led is On\r");
			break;
		case SRVC_ACTION_RED:
			Terminal_Out((uint8_t*)"Red Led is On\r");
			break;
 a14:	08 95       	ret
		default:
			return SRVC_STATUS_ERROR_NOK;
	}
	return  SRVC_STATUS_ERROR_OK;
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	08 95       	ret

00000a1a <_exit>:
 a1a:	f8 94       	cli

00000a1c <__stop_program>:
 a1c:	ff cf       	rjmp	.-2      	; 0xa1c <__stop_program>
