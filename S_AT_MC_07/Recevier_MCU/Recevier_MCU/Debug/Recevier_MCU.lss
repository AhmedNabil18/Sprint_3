
Recevier_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000004c2  00000556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800064  00800064  0000055a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ce  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aff  00000000  00000000  00001b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c05  00000000  00000000  00002635  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  0000323c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000af3  00000000  00000000  000036b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d25  00000000  00000000  000041a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00004ec8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_12>
  34:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_13>
  38:	0c 94 38 02 	jmp	0x470	; 0x470 <__vector_14>
  3c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 06 01 	call	0x20c	; 0x20c <main>
  8a:	0c 94 5f 02 	jmp	0x4be	; 0x4be <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	84 30       	cpi	r24, 0x04	; 4
  98:	81 f0       	breq	.+32     	; 0xba <App_init+0x28>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	/* Call the initializer of the Terminal */
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
  9a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Terminal_init>
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	49 f4       	brne	.+18     	; 0xb4 <App_init+0x22>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Call the initializer of the Spi */
	if(SPI_STATUS_ERROR_OK != Spi_init())
  a2:	0e 94 09 01 	call	0x212	; 0x212 <Spi_init>
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	39 f4       	brne	.+14     	; 0xb8 <App_init+0x26>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return APP_STATUS_ERROR_OK;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	08 95       	ret
/**************************************************************************************/

	/* Call the initializer of the Terminal */
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
	{
		return APP_STATUS_ERROR_NOK;
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	08 95       	ret
	}
	/* Call the initializer of the Spi */
	if(SPI_STATUS_ERROR_OK != Spi_init())
	{
		return APP_STATUS_ERROR_NOK;
  b8:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
  ba:	08 95       	ret

000000bc <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	00 d0       	rcall	.+0      	; 0xc2 <App_update+0x6>
  c2:	00 d0       	rcall	.+0      	; 0xc4 <App_update+0x8>
  c4:	00 d0       	rcall	.+0      	; 0xc6 <App_update+0xa>
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
  ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ce:	84 30       	cpi	r24, 0x04	; 4
  d0:	99 f4       	brne	.+38     	; 0xf8 <App_update+0x3c>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
  d2:	ce 01       	movw	r24, r28
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	26 e0       	ldi	r18, 0x06	; 6
  d8:	fc 01       	movw	r30, r24
  da:	11 92       	st	Z+, r1
  dc:	2a 95       	dec	r18
  de:	e9 f7       	brne	.-6      	; 0xda <App_update+0x1e>
	if(Spi_SlaveReceivePacket(au8_inputString, MAX_INPUT_SIZE) != SPI_STATUS_ERROR_OK)
  e0:	66 e0       	ldi	r22, 0x06	; 6
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	0e 94 37 01 	call	0x26e	; 0x26e <Spi_SlaveReceivePacket>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	41 f4       	brne	.+16     	; 0xfc <App_update+0x40>
		return APP_STATUS_ERROR_NOK;
	Terminal_Out(au8_inputString);
  ec:	ce 01       	movw	r24, r28
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Terminal_Out>
	return APP_STATUS_ERROR_OK;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	03 c0       	rjmp	.+6      	; 0xfe <App_update+0x42>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
  f8:	85 e0       	ldi	r24, 0x05	; 5
  fa:	01 c0       	rjmp	.+2      	; 0xfe <App_update+0x42>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
	if(Spi_SlaveReceivePacket(au8_inputString, MAX_INPUT_SIZE) != SPI_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
  fc:	80 e0       	ldi	r24, 0x00	; 0
	Terminal_Out(au8_inputString);
	return APP_STATUS_ERROR_OK;
  fe:	26 96       	adiw	r28, 0x06	; 6
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	f8 94       	cli
 104:	de bf       	out	0x3e, r29	; 62
 106:	0f be       	out	0x3f, r0	; 63
 108:	cd bf       	out	0x3d, r28	; 61
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the Traffic application */
	if(App_init() != APP_STATUS_ERROR_OK)
 110:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	39 f4       	brne	.+14     	; 0x126 <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
 118:	8f b7       	in	r24, 0x3f	; 63
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
 11e:	0e 94 5e 00 	call	0xbc	; 0xbc <App_update>
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	e1 f3       	breq	.-8      	; 0x11e <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
			
	}
}
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret

0000012a <stringLength>:
*                          (-1) returned if the u32_number not found.
* Description: Function to search for u32_number inside the pau32_array and return its index
*              if found, otherwise returns (-1).
* *************************************************************************************/
uint8_t stringLength(uint8_t* string1)
{
 12a:	ac 01       	movw	r20, r24
    uint8_t u8_loopIndex=0;
 12c:	80 e0       	ldi	r24, 0x00	; 0
    while(string1[u8_loopIndex] != '\0')
 12e:	01 c0       	rjmp	.+2      	; 0x132 <stringLength+0x8>
    {
        u8_loopIndex++;
 130:	8f 5f       	subi	r24, 0xFF	; 255
*              if found, otherwise returns (-1).
* *************************************************************************************/
uint8_t stringLength(uint8_t* string1)
{
    uint8_t u8_loopIndex=0;
    while(string1[u8_loopIndex] != '\0')
 132:	fa 01       	movw	r30, r20
 134:	e8 0f       	add	r30, r24
 136:	f1 1d       	adc	r31, r1
 138:	20 81       	ld	r18, Z
 13a:	21 11       	cpse	r18, r1
 13c:	f9 cf       	rjmp	.-14     	; 0x130 <stringLength+0x6>
    {
        u8_loopIndex++;
    }
    return u8_loopIndex+1;
}
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	08 95       	ret

00000142 <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
 146:	c0 91 65 00 	lds	r28, 0x0065	; 0x800065 <gu8_counter>
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Uart_DataRegister>
 150:	ca 59       	subi	r28, 0x9A	; 154
 152:	df 4f       	sbci	r29, 0xFF	; 255
 154:	88 83       	st	Y, r24
	Uart_sendByte(gau8_data[gu8_counter]);
 156:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <gu8_counter>
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	ea 59       	subi	r30, 0x9A	; 154
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	80 81       	ld	r24, Z
 162:	0e 94 a1 01 	call	0x342	; 0x342 <Uart_sendByte>
	if (gau8_data[gu8_counter] == '\r')
 166:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gu8_counter>
 16a:	28 2f       	mov	r18, r24
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	f9 01       	movw	r30, r18
 170:	ea 59       	subi	r30, 0x9A	; 154
 172:	ff 4f       	sbci	r31, 0xFF	; 255
 174:	90 81       	ld	r25, Z
 176:	9d 30       	cpi	r25, 0x0D	; 13
 178:	51 f4       	brne	.+20     	; 0x18e <Uart_RXC_ISR+0x4c>
	{
		gau8_data[gu8_counter] = '\0';
 17a:	f9 01       	movw	r30, r18
 17c:	ea 59       	subi	r30, 0x9A	; 154
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	10 82       	st	Z, r1
		gu8_counter = 0;
 182:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <gu8_counter>
		gu8_flag = 1;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 18c:	09 c0       	rjmp	.+18     	; 0x1a0 <Uart_RXC_ISR+0x5e>
	}else if (gau8_data[gu8_counter] == '\b')
 18e:	98 30       	cpi	r25, 0x08	; 8
 190:	21 f4       	brne	.+8      	; 0x19a <Uart_RXC_ISR+0x58>
	{
		gu8_counter--;
 192:	81 50       	subi	r24, 0x01	; 1
 194:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu8_counter>
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <Uart_RXC_ISR+0x5e>
	}
	else
	{
		gu8_counter++;
 19a:	8f 5f       	subi	r24, 0xFF	; 255
 19c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu8_counter>
	}
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
 1a6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_TerminalModuleState>
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	81 f0       	breq	.+32     	; 0x1ce <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
 1ae:	0e 94 8b 01 	call	0x316	; 0x316 <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	11 f0       	breq	.+4      	; 0x1ba <Terminal_init+0x14>
 1b6:	87 30       	cpi	r24, 0x07	; 7
 1b8:	49 f4       	brne	.+18     	; 0x1cc <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
 1ba:	81 ea       	ldi	r24, 0xA1	; 161
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
 1ce:	08 95       	ret

000001d0 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
 1d4:	00 97       	sbiw	r24, 0x00	; 0
 1d6:	99 f0       	breq	.+38     	; 0x1fe <Terminal_Out+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
 1d8:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <genu_TerminalModuleState>
 1dc:	22 30       	cpi	r18, 0x02	; 2
 1de:	91 f0       	breq	.+36     	; 0x204 <Terminal_Out+0x34>
 1e0:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
 1e2:	0e 94 95 00 	call	0x12a	; 0x12a <stringLength>
 1e6:	68 2f       	mov	r22, r24
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	ce 01       	movw	r24, r28
 1ec:	0e 94 ac 01 	call	0x358	; 0x358 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	39 f4       	brne	.+14     	; 0x202 <Terminal_Out+0x32>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_State = Uart_sendByte('\r');
 1f4:	8d e0       	ldi	r24, 0x0D	; 13
 1f6:	0e 94 a1 01 	call	0x342	; 0x342 <Uart_sendByte>
	return TERMINAL_STATUS_ERROR_OK;
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <Terminal_Out+0x34>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
 1fe:	24 e0       	ldi	r18, 0x04	; 4
 200:	01 c0       	rjmp	.+2      	; 0x204 <Terminal_Out+0x34>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
 202:	20 e0       	ldi	r18, 0x00	; 0
	Uart_State = Uart_sendByte('\r');
	return TERMINAL_STATUS_ERROR_OK;
}
 204:	82 2f       	mov	r24, r18
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <main>:

#include "App Layer/App.h"

int main(void)
{
	App_start();
 20c:	0e 94 88 00 	call	0x110	; 0x110 <App_start>
 210:	ff cf       	rjmp	.-2      	; 0x210 <main+0x4>

00000212 <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
 212:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genuSpi_Status>
 216:	87 30       	cpi	r24, 0x07	; 7
 218:	b9 f0       	breq	.+46     	; 0x248 <Spi_init+0x36>
 21a:	87 b3       	in	r24, 0x17	; 23
 21c:	80 62       	ori	r24, 0x20	; 32
 21e:	87 bb       	out	0x17, r24	; 23
 220:	87 b3       	in	r24, 0x17	; 23
 222:	8f 7b       	andi	r24, 0xBF	; 191
 224:	87 bb       	out	0x17, r24	; 23
 226:	87 b3       	in	r24, 0x17	; 23
 228:	8f 7e       	andi	r24, 0xEF	; 239
 22a:	87 bb       	out	0x17, r24	; 23
 22c:	87 b3       	in	r24, 0x17	; 23
 22e:	8f 77       	andi	r24, 0x7F	; 127
 230:	87 bb       	out	0x17, r24	; 23
 232:	8d b1       	in	r24, 0x0d	; 13
 234:	8f 7e       	andi	r24, 0xEF	; 239
 236:	8d b9       	out	0x0d, r24	; 13
 238:	8d b1       	in	r24, 0x0d	; 13
 23a:	80 64       	ori	r24, 0x40	; 64
 23c:	8d b9       	out	0x0d, r24	; 13
 23e:	87 e0       	ldi	r24, 0x07	; 7
 240:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genuSpi_Status>
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	08 95       	ret
 248:	88 e0       	ldi	r24, 0x08	; 8
 24a:	08 95       	ret

0000024c <Spi_SlaveReceiveByte>:
 24c:	fc 01       	movw	r30, r24
 24e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <genuSpi_Status>
 252:	97 30       	cpi	r25, 0x07	; 7
 254:	41 f4       	brne	.+16     	; 0x266 <Spi_SlaveReceiveByte+0x1a>
 256:	30 97       	sbiw	r30, 0x00	; 0
 258:	41 f0       	breq	.+16     	; 0x26a <Spi_SlaveReceiveByte+0x1e>
 25a:	77 9b       	sbis	0x0e, 7	; 14
 25c:	fe cf       	rjmp	.-4      	; 0x25a <Spi_SlaveReceiveByte+0xe>
 25e:	8f b1       	in	r24, 0x0f	; 15
 260:	80 83       	st	Z, r24
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	08 95       	ret
 266:	86 e0       	ldi	r24, 0x06	; 6
 268:	08 95       	ret
 26a:	85 e0       	ldi	r24, 0x05	; 5
 26c:	08 95       	ret

0000026e <Spi_SlaveReceivePacket>:
 26e:	cf 92       	push	r12
 270:	df 92       	push	r13
 272:	ef 92       	push	r14
 274:	ff 92       	push	r15
 276:	1f 93       	push	r17
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	6c 01       	movw	r12, r24
 27e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <genuSpi_Status>
 282:	97 30       	cpi	r25, 0x07	; 7
 284:	b1 f4       	brne	.+44     	; 0x2b2 <Spi_SlaveReceivePacket+0x44>
 286:	7b 01       	movw	r14, r22
 288:	10 e0       	ldi	r17, 0x00	; 0
 28a:	0c c0       	rjmp	.+24     	; 0x2a4 <Spi_SlaveReceivePacket+0x36>
 28c:	e6 01       	movw	r28, r12
 28e:	c8 0f       	add	r28, r24
 290:	d9 1f       	adc	r29, r25
 292:	ce 01       	movw	r24, r28
 294:	0e 94 26 01 	call	0x24c	; 0x24c <Spi_SlaveReceiveByte>
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	69 f4       	brne	.+26     	; 0x2b6 <Spi_SlaveReceivePacket+0x48>
 29c:	98 81       	ld	r25, Y
 29e:	99 23       	and	r25, r25
 2a0:	59 f0       	breq	.+22     	; 0x2b8 <Spi_SlaveReceivePacket+0x4a>
 2a2:	1f 5f       	subi	r17, 0xFF	; 255
 2a4:	81 2f       	mov	r24, r17
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	8e 15       	cp	r24, r14
 2aa:	9f 05       	cpc	r25, r15
 2ac:	78 f3       	brcs	.-34     	; 0x28c <Spi_SlaveReceivePacket+0x1e>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <Spi_SlaveReceivePacket+0x4a>
 2b2:	86 e0       	ldi	r24, 0x06	; 6
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <Spi_SlaveReceivePacket+0x4a>
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	df 90       	pop	r13
 2c4:	cf 90       	pop	r12
 2c6:	08 95       	ret

000002c8 <__vector_12>:


 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	2f 93       	push	r18
 2d4:	3f 93       	push	r19
 2d6:	4f 93       	push	r20
 2d8:	5f 93       	push	r21
 2da:	6f 93       	push	r22
 2dc:	7f 93       	push	r23
 2de:	8f 93       	push	r24
 2e0:	9f 93       	push	r25
 2e2:	af 93       	push	r26
 2e4:	bf 93       	push	r27
 2e6:	ef 93       	push	r30
 2e8:	ff 93       	push	r31
 2ea:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <SPI_STC_CallBackPtr>
 2ee:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <SPI_STC_CallBackPtr+0x1>
 2f2:	09 95       	icall
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	7f 91       	pop	r23
 302:	6f 91       	pop	r22
 304:	5f 91       	pop	r21
 306:	4f 91       	pop	r20
 308:	3f 91       	pop	r19
 30a:	2f 91       	pop	r18
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
 316:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <u8_Uart_Status>
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	81 f0       	breq	.+32     	; 0x33e <Uart_init+0x28>
 31e:	10 bc       	out	0x20, r1	; 32
 320:	8c e0       	ldi	r24, 0x0C	; 12
 322:	89 b9       	out	0x09, r24	; 9
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	8b b9       	out	0x0b, r24	; 11
 328:	88 e1       	ldi	r24, 0x18	; 24
 32a:	8a b9       	out	0x0a, r24	; 10
 32c:	80 e8       	ldi	r24, 0x80	; 128
 32e:	80 bd       	out	0x20, r24	; 32
 330:	80 b5       	in	r24, 0x20	; 32
 332:	86 68       	ori	r24, 0x86	; 134
 334:	80 bd       	out	0x20, r24	; 32
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <u8_Uart_Status>
 33c:	08 95       	ret
 33e:	87 e0       	ldi	r24, 0x07	; 7
 340:	08 95       	ret

00000342 <Uart_sendByte>:
 342:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <u8_Uart_Status>
 346:	99 23       	and	r25, r25
 348:	29 f0       	breq	.+10     	; 0x354 <Uart_sendByte+0x12>
 34a:	5d 9b       	sbis	0x0b, 5	; 11
 34c:	fe cf       	rjmp	.-4      	; 0x34a <Uart_sendByte+0x8>
 34e:	8c b9       	out	0x0c, r24	; 12
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	08 95       	ret
 354:	86 e0       	ldi	r24, 0x06	; 6
 356:	08 95       	ret

00000358 <Uart_sendPacket>:
 358:	ef 92       	push	r14
 35a:	ff 92       	push	r15
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <u8_Uart_Status>
 368:	22 23       	and	r18, r18
 36a:	99 f0       	breq	.+38     	; 0x392 <Uart_sendPacket+0x3a>
 36c:	8b 01       	movw	r16, r22
 36e:	7c 01       	movw	r14, r24
 370:	c0 e0       	ldi	r28, 0x00	; 0
 372:	d0 e0       	ldi	r29, 0x00	; 0
 374:	09 c0       	rjmp	.+18     	; 0x388 <Uart_sendPacket+0x30>
 376:	f7 01       	movw	r30, r14
 378:	ec 0f       	add	r30, r28
 37a:	fd 1f       	adc	r31, r29
 37c:	80 81       	ld	r24, Z
 37e:	0e 94 a1 01 	call	0x342	; 0x342 <Uart_sendByte>
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	41 f4       	brne	.+16     	; 0x396 <Uart_sendPacket+0x3e>
 386:	21 96       	adiw	r28, 0x01	; 1
 388:	c0 17       	cp	r28, r16
 38a:	d1 07       	cpc	r29, r17
 38c:	a0 f3       	brcs	.-24     	; 0x376 <Uart_sendPacket+0x1e>
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	03 c0       	rjmp	.+6      	; 0x398 <Uart_sendPacket+0x40>
 392:	86 e0       	ldi	r24, 0x06	; 6
 394:	01 c0       	rjmp	.+2      	; 0x398 <Uart_sendPacket+0x40>
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	08 95       	ret

000003a6 <Uart_EnableNotification_RXC>:
 3a6:	9c 01       	movw	r18, r24
 3a8:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <u8_Uart_Status>
 3ac:	99 23       	and	r25, r25
 3ae:	61 f0       	breq	.+24     	; 0x3c8 <Uart_EnableNotification_RXC+0x22>
 3b0:	21 15       	cp	r18, r1
 3b2:	31 05       	cpc	r19, r1
 3b4:	59 f0       	breq	.+22     	; 0x3cc <Uart_EnableNotification_RXC+0x26>
 3b6:	8a b1       	in	r24, 0x0a	; 10
 3b8:	80 68       	ori	r24, 0x80	; 128
 3ba:	8a b9       	out	0x0a, r24	; 10
 3bc:	30 93 72 00 	sts	0x0072, r19	; 0x800072 <Uart_RXC_CallBackPtr+0x1>
 3c0:	20 93 71 00 	sts	0x0071, r18	; 0x800071 <Uart_RXC_CallBackPtr>
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	08 95       	ret
 3c8:	86 e0       	ldi	r24, 0x06	; 6
 3ca:	08 95       	ret
 3cc:	85 e0       	ldi	r24, 0x05	; 5
 3ce:	08 95       	ret

000003d0 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
 3d0:	8c b1       	in	r24, 0x0c	; 12
}
 3d2:	08 95       	ret

000003d4 <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	2f 93       	push	r18
 3e0:	3f 93       	push	r19
 3e2:	4f 93       	push	r20
 3e4:	5f 93       	push	r21
 3e6:	6f 93       	push	r22
 3e8:	7f 93       	push	r23
 3ea:	8f 93       	push	r24
 3ec:	9f 93       	push	r25
 3ee:	af 93       	push	r26
 3f0:	bf 93       	push	r27
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
 3f6:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <Uart_TXC_CallBackPtr>
 3fa:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <Uart_TXC_CallBackPtr+0x1>
 3fe:	09 95       	icall
 400:	ff 91       	pop	r31
 402:	ef 91       	pop	r30
 404:	bf 91       	pop	r27
 406:	af 91       	pop	r26
 408:	9f 91       	pop	r25
 40a:	8f 91       	pop	r24
 40c:	7f 91       	pop	r23
 40e:	6f 91       	pop	r22
 410:	5f 91       	pop	r21
 412:	4f 91       	pop	r20
 414:	3f 91       	pop	r19
 416:	2f 91       	pop	r18
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	2f 93       	push	r18
 42e:	3f 93       	push	r19
 430:	4f 93       	push	r20
 432:	5f 93       	push	r21
 434:	6f 93       	push	r22
 436:	7f 93       	push	r23
 438:	8f 93       	push	r24
 43a:	9f 93       	push	r25
 43c:	af 93       	push	r26
 43e:	bf 93       	push	r27
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
 444:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <Uart_RXC_CallBackPtr>
 448:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <Uart_RXC_CallBackPtr+0x1>
 44c:	09 95       	icall
 44e:	ff 91       	pop	r31
 450:	ef 91       	pop	r30
 452:	bf 91       	pop	r27
 454:	af 91       	pop	r26
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	7f 91       	pop	r23
 45c:	6f 91       	pop	r22
 45e:	5f 91       	pop	r21
 460:	4f 91       	pop	r20
 462:	3f 91       	pop	r19
 464:	2f 91       	pop	r18
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0
 46c:	1f 90       	pop	r1
 46e:	18 95       	reti

00000470 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
 470:	1f 92       	push	r1
 472:	0f 92       	push	r0
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	0f 92       	push	r0
 478:	11 24       	eor	r1, r1
 47a:	2f 93       	push	r18
 47c:	3f 93       	push	r19
 47e:	4f 93       	push	r20
 480:	5f 93       	push	r21
 482:	6f 93       	push	r22
 484:	7f 93       	push	r23
 486:	8f 93       	push	r24
 488:	9f 93       	push	r25
 48a:	af 93       	push	r26
 48c:	bf 93       	push	r27
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
 492:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <Uart_UDRE_CallBackPtr>
 496:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <Uart_UDRE_CallBackPtr+0x1>
 49a:	09 95       	icall
 49c:	ff 91       	pop	r31
 49e:	ef 91       	pop	r30
 4a0:	bf 91       	pop	r27
 4a2:	af 91       	pop	r26
 4a4:	9f 91       	pop	r25
 4a6:	8f 91       	pop	r24
 4a8:	7f 91       	pop	r23
 4aa:	6f 91       	pop	r22
 4ac:	5f 91       	pop	r21
 4ae:	4f 91       	pop	r20
 4b0:	3f 91       	pop	r19
 4b2:	2f 91       	pop	r18
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <_exit>:
 4be:	f8 94       	cli

000004c0 <__stop_program>:
 4c0:	ff cf       	rjmp	.-2      	; 0x4c0 <__stop_program>
