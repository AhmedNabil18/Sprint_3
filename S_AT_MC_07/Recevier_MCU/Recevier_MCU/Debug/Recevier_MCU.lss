
Recevier_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000004ec  00000580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010b  00800066  00800066  00000586  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000586  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017db  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7a  00000000  00000000  00001fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f5f  00000000  00000000  00002b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000618  00000000  00000000  00003a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c71  00000000  00000000  000040a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001866  00000000  00000000  00004d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000657f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_12>
  34:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_13>
  38:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_14>
  3c:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0f 01 	call	0x21e	; 0x21e <main>
  8a:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	84 30       	cpi	r24, 0x04	; 4
  98:	81 f0       	breq	.+32     	; 0xba <App_init+0x28>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	/* Call the initializer of the Terminal */
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
  9a:	0e 94 df 00 	call	0x1be	; 0x1be <Terminal_init>
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	49 f4       	brne	.+18     	; 0xb4 <App_init+0x22>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Call the initializer of the Spi */
	if(SPI_STATUS_ERROR_OK != Spi_init())
  a2:	0e 94 12 01 	call	0x224	; 0x224 <Spi_init>
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	39 f4       	brne	.+14     	; 0xb8 <App_init+0x26>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return APP_STATUS_ERROR_OK;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	08 95       	ret
/**************************************************************************************/

	/* Call the initializer of the Terminal */
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
	{
		return APP_STATUS_ERROR_NOK;
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	08 95       	ret
	}
	/* Call the initializer of the Spi */
	if(SPI_STATUS_ERROR_OK != Spi_init())
	{
		return APP_STATUS_ERROR_NOK;
  b8:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
  ba:	08 95       	ret

000000bc <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	cf 5f       	subi	r28, 0xFF	; 255
  c6:	d1 09       	sbc	r29, r1
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
  d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d6:	84 30       	cpi	r24, 0x04	; 4
  d8:	b9 f4       	brne	.+46     	; 0x108 <App_update+0x4c>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
  da:	ce 01       	movw	r24, r28
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	fc 01       	movw	r30, r24
  e2:	11 92       	st	Z+, r1
  e4:	2a 95       	dec	r18
  e6:	e9 f7       	brne	.-6      	; 0xe2 <App_update+0x26>
	if(Spi_SlaveReceivePacket(au8_inputString, MAX_INPUT_SIZE) != SPI_STATUS_ERROR_OK)
  e8:	6f ef       	ldi	r22, 0xFF	; 255
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	0e 94 40 01 	call	0x280	; 0x280 <Spi_SlaveReceivePacket>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	61 f4       	brne	.+24     	; 0x10c <App_update+0x50>
		return APP_STATUS_ERROR_NOK;
	Terminal_Out(au8_inputString);
  f4:	ce 01       	movw	r24, r28
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Terminal_Out>
	Terminal_Out((uint8_t*)"\r");
  fc:	83 e6       	ldi	r24, 0x63	; 99
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Terminal_Out>
	return APP_STATUS_ERROR_OK;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	03 c0       	rjmp	.+6      	; 0x10e <App_update+0x52>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
 108:	85 e0       	ldi	r24, 0x05	; 5
 10a:	01 c0       	rjmp	.+2      	; 0x10e <App_update+0x52>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
	if(Spi_SlaveReceivePacket(au8_inputString, MAX_INPUT_SIZE) != SPI_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
 10c:	80 e0       	ldi	r24, 0x00	; 0
	Terminal_Out(au8_inputString);
	Terminal_Out((uint8_t*)"\r");
	return APP_STATUS_ERROR_OK;
 10e:	c1 50       	subi	r28, 0x01	; 1
 110:	df 4f       	sbci	r29, 0xFF	; 255
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the Traffic application */
	if(App_init() != APP_STATUS_ERROR_OK)
 122:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	39 f4       	brne	.+14     	; 0x138 <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
 130:	0e 94 5e 00 	call	0xbc	; 0xbc <App_update>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	e1 f3       	breq	.-8      	; 0x130 <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
			
	}
}
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret

0000013c <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
 140:	c0 91 67 00 	lds	r28, 0x0067	; 0x800067 <gu8_counter>
 144:	d0 e0       	ldi	r29, 0x00	; 0
 146:	0e 94 fd 01 	call	0x3fa	; 0x3fa <Uart_DataRegister>
 14a:	c8 59       	subi	r28, 0x98	; 152
 14c:	df 4f       	sbci	r29, 0xFF	; 255
 14e:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
 150:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <gu8_counter>
 154:	e9 2f       	mov	r30, r25
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	e8 59       	subi	r30, 0x98	; 152
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	80 81       	ld	r24, Z
 15e:	8d 30       	cpi	r24, 0x0D	; 13
 160:	71 f4       	brne	.+28     	; 0x17e <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
 162:	0e 94 b6 01 	call	0x36c	; 0x36c <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
 166:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <gu8_counter>
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	e8 59       	subi	r30, 0x98	; 152
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	10 82       	st	Z, r1
		gu8_counter = 0;
 172:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <gu8_counter>
		gu8_flag = 1;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 17c:	1d c0       	rjmp	.+58     	; 0x1b8 <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
 17e:	88 30       	cpi	r24, 0x08	; 8
 180:	51 f4       	brne	.+20     	; 0x196 <Uart_RXC_ISR+0x5a>
 182:	99 23       	and	r25, r25
 184:	41 f0       	breq	.+16     	; 0x196 <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
 186:	0e 94 b6 01 	call	0x36c	; 0x36c <Uart_sendByte>
		gu8_counter--;
 18a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu8_counter>
 18e:	81 50       	subi	r24, 0x01	; 1
 190:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_counter>
 194:	11 c0       	rjmp	.+34     	; 0x1b8 <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
 196:	88 30       	cpi	r24, 0x08	; 8
 198:	79 f0       	breq	.+30     	; 0x1b8 <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
 19a:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <gu8_visibility>
 19e:	91 30       	cpi	r25, 0x01	; 1
 1a0:	21 f4       	brne	.+8      	; 0x1aa <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
 1a2:	8a e2       	ldi	r24, 0x2A	; 42
 1a4:	0e 94 b6 01 	call	0x36c	; 0x36c <Uart_sendByte>
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
 1aa:	0e 94 b6 01 	call	0x36c	; 0x36c <Uart_sendByte>
		}
		gu8_counter++;
 1ae:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu8_counter>
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_counter>
	}
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
 1be:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_TerminalModuleState>
 1c2:	83 30       	cpi	r24, 0x03	; 3
 1c4:	81 f0       	breq	.+32     	; 0x1e6 <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
 1c6:	0e 94 a0 01 	call	0x340	; 0x340 <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	11 f0       	breq	.+4      	; 0x1d2 <Terminal_init+0x14>
 1ce:	87 30       	cpi	r24, 0x07	; 7
 1d0:	49 f4       	brne	.+18     	; 0x1e4 <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
 1d2:	8e e9       	ldi	r24, 0x9E	; 158
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
 1da:	83 e0       	ldi	r24, 0x03	; 3
 1dc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
 1e4:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
 1e6:	08 95       	ret

000001e8 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
 1ec:	00 97       	sbiw	r24, 0x00	; 0
 1ee:	81 f0       	breq	.+32     	; 0x210 <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
 1f0:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <genu_TerminalModuleState>
 1f4:	22 30       	cpi	r18, 0x02	; 2
 1f6:	79 f0       	breq	.+30     	; 0x216 <Terminal_Out+0x2e>
 1f8:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
 1fa:	0e 94 94 01 	call	0x328	; 0x328 <stringLength>
 1fe:	68 2f       	mov	r22, r24
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	ce 01       	movw	r24, r28
 204:	0e 94 c1 01 	call	0x382	; 0x382 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	21 f0       	breq	.+8      	; 0x214 <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	03 c0       	rjmp	.+6      	; 0x216 <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
 210:	24 e0       	ldi	r18, 0x04	; 4
 212:	01 c0       	rjmp	.+2      	; 0x216 <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
 214:	21 e0       	ldi	r18, 0x01	; 1
}
 216:	82 2f       	mov	r24, r18
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <main>:

#include "App Layer/App.h"

int main(void)
{
	App_start();
 21e:	0e 94 91 00 	call	0x122	; 0x122 <App_start>
 222:	ff cf       	rjmp	.-2      	; 0x222 <main+0x4>

00000224 <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
 224:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genuSpi_Status>
 228:	87 30       	cpi	r24, 0x07	; 7
 22a:	b9 f0       	breq	.+46     	; 0x25a <Spi_init+0x36>
 22c:	87 b3       	in	r24, 0x17	; 23
 22e:	80 64       	ori	r24, 0x40	; 64
 230:	87 bb       	out	0x17, r24	; 23
 232:	87 b3       	in	r24, 0x17	; 23
 234:	8f 7d       	andi	r24, 0xDF	; 223
 236:	87 bb       	out	0x17, r24	; 23
 238:	87 b3       	in	r24, 0x17	; 23
 23a:	8f 7e       	andi	r24, 0xEF	; 239
 23c:	87 bb       	out	0x17, r24	; 23
 23e:	87 b3       	in	r24, 0x17	; 23
 240:	8f 77       	andi	r24, 0x7F	; 127
 242:	87 bb       	out	0x17, r24	; 23
 244:	8d b1       	in	r24, 0x0d	; 13
 246:	8f 7e       	andi	r24, 0xEF	; 239
 248:	8d b9       	out	0x0d, r24	; 13
 24a:	8d b1       	in	r24, 0x0d	; 13
 24c:	80 64       	ori	r24, 0x40	; 64
 24e:	8d b9       	out	0x0d, r24	; 13
 250:	87 e0       	ldi	r24, 0x07	; 7
 252:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genuSpi_Status>
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	08 95       	ret
 25a:	88 e0       	ldi	r24, 0x08	; 8
 25c:	08 95       	ret

0000025e <Spi_SlaveReceiveByte>:
 25e:	fc 01       	movw	r30, r24
 260:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <genuSpi_Status>
 264:	97 30       	cpi	r25, 0x07	; 7
 266:	41 f4       	brne	.+16     	; 0x278 <Spi_SlaveReceiveByte+0x1a>
 268:	30 97       	sbiw	r30, 0x00	; 0
 26a:	41 f0       	breq	.+16     	; 0x27c <Spi_SlaveReceiveByte+0x1e>
 26c:	77 9b       	sbis	0x0e, 7	; 14
 26e:	fe cf       	rjmp	.-4      	; 0x26c <Spi_SlaveReceiveByte+0xe>
 270:	8f b1       	in	r24, 0x0f	; 15
 272:	80 83       	st	Z, r24
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	08 95       	ret
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	08 95       	ret
 27c:	85 e0       	ldi	r24, 0x05	; 5
 27e:	08 95       	ret

00000280 <Spi_SlaveReceivePacket>:
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	6c 01       	movw	r12, r24
 290:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <genuSpi_Status>
 294:	97 30       	cpi	r25, 0x07	; 7
 296:	b1 f4       	brne	.+44     	; 0x2c4 <Spi_SlaveReceivePacket+0x44>
 298:	7b 01       	movw	r14, r22
 29a:	10 e0       	ldi	r17, 0x00	; 0
 29c:	0c c0       	rjmp	.+24     	; 0x2b6 <Spi_SlaveReceivePacket+0x36>
 29e:	e6 01       	movw	r28, r12
 2a0:	c8 0f       	add	r28, r24
 2a2:	d9 1f       	adc	r29, r25
 2a4:	ce 01       	movw	r24, r28
 2a6:	0e 94 2f 01 	call	0x25e	; 0x25e <Spi_SlaveReceiveByte>
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	69 f4       	brne	.+26     	; 0x2c8 <Spi_SlaveReceivePacket+0x48>
 2ae:	98 81       	ld	r25, Y
 2b0:	99 23       	and	r25, r25
 2b2:	59 f0       	breq	.+22     	; 0x2ca <Spi_SlaveReceivePacket+0x4a>
 2b4:	1f 5f       	subi	r17, 0xFF	; 255
 2b6:	81 2f       	mov	r24, r17
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	8e 15       	cp	r24, r14
 2bc:	9f 05       	cpc	r25, r15
 2be:	78 f3       	brcs	.-34     	; 0x29e <Spi_SlaveReceivePacket+0x1e>
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	03 c0       	rjmp	.+6      	; 0x2ca <Spi_SlaveReceivePacket+0x4a>
 2c4:	86 e0       	ldi	r24, 0x06	; 6
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <Spi_SlaveReceivePacket+0x4a>
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	ff 90       	pop	r15
 2d2:	ef 90       	pop	r14
 2d4:	df 90       	pop	r13
 2d6:	cf 90       	pop	r12
 2d8:	08 95       	ret

000002da <__vector_12>:


 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	2f 93       	push	r18
 2e6:	3f 93       	push	r19
 2e8:	4f 93       	push	r20
 2ea:	5f 93       	push	r21
 2ec:	6f 93       	push	r22
 2ee:	7f 93       	push	r23
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	af 93       	push	r26
 2f6:	bf 93       	push	r27
 2f8:	ef 93       	push	r30
 2fa:	ff 93       	push	r31
 2fc:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <SPI_STC_CallBackPtr>
 300:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <SPI_STC_CallBackPtr+0x1>
 304:	09 95       	icall
 306:	ff 91       	pop	r31
 308:	ef 91       	pop	r30
 30a:	bf 91       	pop	r27
 30c:	af 91       	pop	r26
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	7f 91       	pop	r23
 314:	6f 91       	pop	r22
 316:	5f 91       	pop	r21
 318:	4f 91       	pop	r20
 31a:	3f 91       	pop	r19
 31c:	2f 91       	pop	r18
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

00000328 <stringLength>:
		result *= base;
	}
	return result;
}
uint8_t stringLength(uint8_t* string1)
{
 328:	ac 01       	movw	r20, r24
    uint8_t u8_loopIndex=0;
 32a:	80 e0       	ldi	r24, 0x00	; 0
    while(string1[u8_loopIndex] != '\0')
 32c:	01 c0       	rjmp	.+2      	; 0x330 <stringLength+0x8>
    {
        u8_loopIndex++;
 32e:	8f 5f       	subi	r24, 0xFF	; 255
	return result;
}
uint8_t stringLength(uint8_t* string1)
{
    uint8_t u8_loopIndex=0;
    while(string1[u8_loopIndex] != '\0')
 330:	fa 01       	movw	r30, r20
 332:	e8 0f       	add	r30, r24
 334:	f1 1d       	adc	r31, r1
 336:	20 81       	ld	r18, Z
 338:	21 11       	cpse	r18, r1
 33a:	f9 cf       	rjmp	.-14     	; 0x32e <stringLength+0x6>
    {
        u8_loopIndex++;
    }
    return u8_loopIndex+1;
}
 33c:	8f 5f       	subi	r24, 0xFF	; 255
 33e:	08 95       	ret

00000340 <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
 340:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <u8_Uart_Status>
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	81 f0       	breq	.+32     	; 0x368 <Uart_init+0x28>
 348:	10 bc       	out	0x20, r1	; 32
 34a:	8c e0       	ldi	r24, 0x0C	; 12
 34c:	89 b9       	out	0x09, r24	; 9
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	8b b9       	out	0x0b, r24	; 11
 352:	88 e1       	ldi	r24, 0x18	; 24
 354:	8a b9       	out	0x0a, r24	; 10
 356:	80 e8       	ldi	r24, 0x80	; 128
 358:	80 bd       	out	0x20, r24	; 32
 35a:	80 b5       	in	r24, 0x20	; 32
 35c:	86 68       	ori	r24, 0x86	; 134
 35e:	80 bd       	out	0x20, r24	; 32
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <u8_Uart_Status>
 366:	08 95       	ret
 368:	87 e0       	ldi	r24, 0x07	; 7
 36a:	08 95       	ret

0000036c <Uart_sendByte>:
 36c:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <u8_Uart_Status>
 370:	99 23       	and	r25, r25
 372:	29 f0       	breq	.+10     	; 0x37e <Uart_sendByte+0x12>
 374:	5d 9b       	sbis	0x0b, 5	; 11
 376:	fe cf       	rjmp	.-4      	; 0x374 <Uart_sendByte+0x8>
 378:	8c b9       	out	0x0c, r24	; 12
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	08 95       	ret
 37e:	86 e0       	ldi	r24, 0x06	; 6
 380:	08 95       	ret

00000382 <Uart_sendPacket>:
 382:	ef 92       	push	r14
 384:	ff 92       	push	r15
 386:	0f 93       	push	r16
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <u8_Uart_Status>
 392:	22 23       	and	r18, r18
 394:	99 f0       	breq	.+38     	; 0x3bc <Uart_sendPacket+0x3a>
 396:	8b 01       	movw	r16, r22
 398:	7c 01       	movw	r14, r24
 39a:	c0 e0       	ldi	r28, 0x00	; 0
 39c:	d0 e0       	ldi	r29, 0x00	; 0
 39e:	09 c0       	rjmp	.+18     	; 0x3b2 <Uart_sendPacket+0x30>
 3a0:	f7 01       	movw	r30, r14
 3a2:	ec 0f       	add	r30, r28
 3a4:	fd 1f       	adc	r31, r29
 3a6:	80 81       	ld	r24, Z
 3a8:	0e 94 b6 01 	call	0x36c	; 0x36c <Uart_sendByte>
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	41 f4       	brne	.+16     	; 0x3c0 <Uart_sendPacket+0x3e>
 3b0:	21 96       	adiw	r28, 0x01	; 1
 3b2:	c0 17       	cp	r28, r16
 3b4:	d1 07       	cpc	r29, r17
 3b6:	a0 f3       	brcs	.-24     	; 0x3a0 <Uart_sendPacket+0x1e>
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <Uart_sendPacket+0x40>
 3bc:	86 e0       	ldi	r24, 0x06	; 6
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <Uart_sendPacket+0x40>
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	ff 90       	pop	r15
 3cc:	ef 90       	pop	r14
 3ce:	08 95       	ret

000003d0 <Uart_EnableNotification_RXC>:
 3d0:	9c 01       	movw	r18, r24
 3d2:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <u8_Uart_Status>
 3d6:	99 23       	and	r25, r25
 3d8:	61 f0       	breq	.+24     	; 0x3f2 <Uart_EnableNotification_RXC+0x22>
 3da:	21 15       	cp	r18, r1
 3dc:	31 05       	cpc	r19, r1
 3de:	59 f0       	breq	.+22     	; 0x3f6 <Uart_EnableNotification_RXC+0x26>
 3e0:	8a b1       	in	r24, 0x0a	; 10
 3e2:	80 68       	ori	r24, 0x80	; 128
 3e4:	8a b9       	out	0x0a, r24	; 10
 3e6:	30 93 6e 01 	sts	0x016E, r19	; 0x80016e <Uart_RXC_CallBackPtr+0x1>
 3ea:	20 93 6d 01 	sts	0x016D, r18	; 0x80016d <Uart_RXC_CallBackPtr>
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	08 95       	ret
 3f2:	86 e0       	ldi	r24, 0x06	; 6
 3f4:	08 95       	ret
 3f6:	85 e0       	ldi	r24, 0x05	; 5
 3f8:	08 95       	ret

000003fa <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
 3fa:	8c b1       	in	r24, 0x0c	; 12
}
 3fc:	08 95       	ret

000003fe <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
 3fe:	1f 92       	push	r1
 400:	0f 92       	push	r0
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	0f 92       	push	r0
 406:	11 24       	eor	r1, r1
 408:	2f 93       	push	r18
 40a:	3f 93       	push	r19
 40c:	4f 93       	push	r20
 40e:	5f 93       	push	r21
 410:	6f 93       	push	r22
 412:	7f 93       	push	r23
 414:	8f 93       	push	r24
 416:	9f 93       	push	r25
 418:	af 93       	push	r26
 41a:	bf 93       	push	r27
 41c:	ef 93       	push	r30
 41e:	ff 93       	push	r31
 420:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <Uart_TXC_CallBackPtr>
 424:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <Uart_TXC_CallBackPtr+0x1>
 428:	09 95       	icall
 42a:	ff 91       	pop	r31
 42c:	ef 91       	pop	r30
 42e:	bf 91       	pop	r27
 430:	af 91       	pop	r26
 432:	9f 91       	pop	r25
 434:	8f 91       	pop	r24
 436:	7f 91       	pop	r23
 438:	6f 91       	pop	r22
 43a:	5f 91       	pop	r21
 43c:	4f 91       	pop	r20
 43e:	3f 91       	pop	r19
 440:	2f 91       	pop	r18
 442:	0f 90       	pop	r0
 444:	0f be       	out	0x3f, r0	; 63
 446:	0f 90       	pop	r0
 448:	1f 90       	pop	r1
 44a:	18 95       	reti

0000044c <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
 44c:	1f 92       	push	r1
 44e:	0f 92       	push	r0
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	0f 92       	push	r0
 454:	11 24       	eor	r1, r1
 456:	2f 93       	push	r18
 458:	3f 93       	push	r19
 45a:	4f 93       	push	r20
 45c:	5f 93       	push	r21
 45e:	6f 93       	push	r22
 460:	7f 93       	push	r23
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
 466:	af 93       	push	r26
 468:	bf 93       	push	r27
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
 46e:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <Uart_RXC_CallBackPtr>
 472:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <Uart_RXC_CallBackPtr+0x1>
 476:	09 95       	icall
 478:	ff 91       	pop	r31
 47a:	ef 91       	pop	r30
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	7f 91       	pop	r23
 486:	6f 91       	pop	r22
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	2f 93       	push	r18
 4a6:	3f 93       	push	r19
 4a8:	4f 93       	push	r20
 4aa:	5f 93       	push	r21
 4ac:	6f 93       	push	r22
 4ae:	7f 93       	push	r23
 4b0:	8f 93       	push	r24
 4b2:	9f 93       	push	r25
 4b4:	af 93       	push	r26
 4b6:	bf 93       	push	r27
 4b8:	ef 93       	push	r30
 4ba:	ff 93       	push	r31
 4bc:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Uart_UDRE_CallBackPtr>
 4c0:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <Uart_UDRE_CallBackPtr+0x1>
 4c4:	09 95       	icall
 4c6:	ff 91       	pop	r31
 4c8:	ef 91       	pop	r30
 4ca:	bf 91       	pop	r27
 4cc:	af 91       	pop	r26
 4ce:	9f 91       	pop	r25
 4d0:	8f 91       	pop	r24
 4d2:	7f 91       	pop	r23
 4d4:	6f 91       	pop	r22
 4d6:	5f 91       	pop	r21
 4d8:	4f 91       	pop	r20
 4da:	3f 91       	pop	r19
 4dc:	2f 91       	pop	r18
 4de:	0f 90       	pop	r0
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	0f 90       	pop	r0
 4e4:	1f 90       	pop	r1
 4e6:	18 95       	reti

000004e8 <_exit>:
 4e8:	f8 94       	cli

000004ea <__stop_program>:
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <__stop_program>
