
Recevier_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000004ca  0000055e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800064  00800064  00000562  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000562  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ce  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aff  00000000  00000000  00001b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c17  00000000  00000000  0000263d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  00003254  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000af3  00000000  00000000  000036c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d25  00000000  00000000  000041bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00004ee0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_12>
  34:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_13>
  38:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_14>
  3c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  8a:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	84 30       	cpi	r24, 0x04	; 4
  98:	99 f0       	breq	.+38     	; 0xc0 <App_init+0x2e>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	/* Call the initializer of the Terminal */
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
  9a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Terminal_init>
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	61 f4       	brne	.+24     	; 0xba <App_init+0x28>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Call the initializer of the Spi */
	if(SPI_STATUS_ERROR_OK != Spi_init())
  a2:	0e 94 0d 01 	call	0x21a	; 0x21a <Spi_init>
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	51 f4       	brne	.+20     	; 0xbe <App_init+0x2c>
	{
		return APP_STATUS_ERROR_NOK;
	}
	DIO_PORTA_DIR = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	8a bb       	out	0x1a, r24	; 26
	DIO_PORTA_DATA = 0xFF;
  ae:	8b bb       	out	0x1b, r24	; 27
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return APP_STATUS_ERROR_OK;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	08 95       	ret
/**************************************************************************************/

	/* Call the initializer of the Terminal */
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
	{
		return APP_STATUS_ERROR_NOK;
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	08 95       	ret
	}
	/* Call the initializer of the Spi */
	if(SPI_STATUS_ERROR_OK != Spi_init())
	{
		return APP_STATUS_ERROR_NOK;
  be:	80 e0       	ldi	r24, 0x00	; 0
	DIO_PORTA_DIR = 0xFF;
	DIO_PORTA_DATA = 0xFF;
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
  c0:	08 95       	ret

000000c2 <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	00 d0       	rcall	.+0      	; 0xc8 <App_update+0x6>
  c8:	00 d0       	rcall	.+0      	; 0xca <App_update+0x8>
  ca:	00 d0       	rcall	.+0      	; 0xcc <App_update+0xa>
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
  d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d4:	84 30       	cpi	r24, 0x04	; 4
  d6:	a1 f4       	brne	.+40     	; 0x100 <App_update+0x3e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
  d8:	ce 01       	movw	r24, r28
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	26 e0       	ldi	r18, 0x06	; 6
  de:	fc 01       	movw	r30, r24
  e0:	11 92       	st	Z+, r1
  e2:	2a 95       	dec	r18
  e4:	e9 f7       	brne	.-6      	; 0xe0 <App_update+0x1e>
	if(Spi_SlaveReceivePacket(au8_inputString, MAX_INPUT_SIZE) != SPI_STATUS_ERROR_OK)
  e6:	66 e0       	ldi	r22, 0x06	; 6
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	0e 94 3b 01 	call	0x276	; 0x276 <Spi_SlaveReceivePacket>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	49 f4       	brne	.+18     	; 0x104 <App_update+0x42>
		return APP_STATUS_ERROR_NOK;
	Terminal_Out(au8_inputString);
  f2:	ce 01       	movw	r24, r28
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Terminal_Out>
	DIO_PORTA_DATA = 0x00;
  fa:	1b ba       	out	0x1b, r1	; 27
	
	return APP_STATUS_ERROR_OK;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	03 c0       	rjmp	.+6      	; 0x106 <App_update+0x44>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
 100:	85 e0       	ldi	r24, 0x05	; 5
 102:	01 c0       	rjmp	.+2      	; 0x106 <App_update+0x44>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
	if(Spi_SlaveReceivePacket(au8_inputString, MAX_INPUT_SIZE) != SPI_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
 104:	80 e0       	ldi	r24, 0x00	; 0
	Terminal_Out(au8_inputString);
	DIO_PORTA_DATA = 0x00;
	
	return APP_STATUS_ERROR_OK;
 106:	26 96       	adiw	r28, 0x06	; 6
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	0f be       	out	0x3f, r0	; 63
 110:	cd bf       	out	0x3d, r28	; 61
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the Traffic application */
	if(App_init() != APP_STATUS_ERROR_OK)
 118:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	39 f4       	brne	.+14     	; 0x12e <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
 120:	8f b7       	in	r24, 0x3f	; 63
 122:	80 68       	ori	r24, 0x80	; 128
 124:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
 126:	0e 94 61 00 	call	0xc2	; 0xc2 <App_update>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	e1 f3       	breq	.-8      	; 0x126 <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
			
	}
}
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	08 95       	ret

00000132 <stringLength>:
*                          (-1) returned if the u32_number not found.
* Description: Function to search for u32_number inside the pau32_array and return its index
*              if found, otherwise returns (-1).
* *************************************************************************************/
uint8_t stringLength(uint8_t* string1)
{
 132:	ac 01       	movw	r20, r24
    uint8_t u8_loopIndex=0;
 134:	80 e0       	ldi	r24, 0x00	; 0
    while(string1[u8_loopIndex] != '\0')
 136:	01 c0       	rjmp	.+2      	; 0x13a <stringLength+0x8>
    {
        u8_loopIndex++;
 138:	8f 5f       	subi	r24, 0xFF	; 255
*              if found, otherwise returns (-1).
* *************************************************************************************/
uint8_t stringLength(uint8_t* string1)
{
    uint8_t u8_loopIndex=0;
    while(string1[u8_loopIndex] != '\0')
 13a:	fa 01       	movw	r30, r20
 13c:	e8 0f       	add	r30, r24
 13e:	f1 1d       	adc	r31, r1
 140:	20 81       	ld	r18, Z
 142:	21 11       	cpse	r18, r1
 144:	f9 cf       	rjmp	.-14     	; 0x138 <stringLength+0x6>
    {
        u8_loopIndex++;
    }
    return u8_loopIndex+1;
}
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	08 95       	ret

0000014a <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
 14e:	c0 91 65 00 	lds	r28, 0x0065	; 0x800065 <gu8_counter>
 152:	d0 e0       	ldi	r29, 0x00	; 0
 154:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Uart_DataRegister>
 158:	ca 59       	subi	r28, 0x9A	; 154
 15a:	df 4f       	sbci	r29, 0xFF	; 255
 15c:	88 83       	st	Y, r24
	Uart_sendByte(gau8_data[gu8_counter]);
 15e:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <gu8_counter>
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	ea 59       	subi	r30, 0x9A	; 154
 166:	ff 4f       	sbci	r31, 0xFF	; 255
 168:	80 81       	ld	r24, Z
 16a:	0e 94 a5 01 	call	0x34a	; 0x34a <Uart_sendByte>
	if (gau8_data[gu8_counter] == '\r')
 16e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gu8_counter>
 172:	28 2f       	mov	r18, r24
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	f9 01       	movw	r30, r18
 178:	ea 59       	subi	r30, 0x9A	; 154
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	90 81       	ld	r25, Z
 17e:	9d 30       	cpi	r25, 0x0D	; 13
 180:	51 f4       	brne	.+20     	; 0x196 <Uart_RXC_ISR+0x4c>
	{
		gau8_data[gu8_counter] = '\0';
 182:	f9 01       	movw	r30, r18
 184:	ea 59       	subi	r30, 0x9A	; 154
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	10 82       	st	Z, r1
		gu8_counter = 0;
 18a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <gu8_counter>
		gu8_flag = 1;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 194:	09 c0       	rjmp	.+18     	; 0x1a8 <Uart_RXC_ISR+0x5e>
	}else if (gau8_data[gu8_counter] == '\b')
 196:	98 30       	cpi	r25, 0x08	; 8
 198:	21 f4       	brne	.+8      	; 0x1a2 <Uart_RXC_ISR+0x58>
	{
		gu8_counter--;
 19a:	81 50       	subi	r24, 0x01	; 1
 19c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu8_counter>
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <Uart_RXC_ISR+0x5e>
	}
	else
	{
		gu8_counter++;
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu8_counter>
	}
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
 1ae:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_TerminalModuleState>
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	81 f0       	breq	.+32     	; 0x1d6 <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
 1b6:	0e 94 8f 01 	call	0x31e	; 0x31e <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	11 f0       	breq	.+4      	; 0x1c2 <Terminal_init+0x14>
 1be:	87 30       	cpi	r24, 0x07	; 7
 1c0:	49 f4       	brne	.+18     	; 0x1d4 <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
 1c2:	85 ea       	ldi	r24, 0xA5	; 165
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
 1d4:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
 1d6:	08 95       	ret

000001d8 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
 1dc:	00 97       	sbiw	r24, 0x00	; 0
 1de:	99 f0       	breq	.+38     	; 0x206 <Terminal_Out+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
 1e0:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <genu_TerminalModuleState>
 1e4:	22 30       	cpi	r18, 0x02	; 2
 1e6:	91 f0       	breq	.+36     	; 0x20c <Terminal_Out+0x34>
 1e8:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
 1ea:	0e 94 99 00 	call	0x132	; 0x132 <stringLength>
 1ee:	68 2f       	mov	r22, r24
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	ce 01       	movw	r24, r28
 1f4:	0e 94 b0 01 	call	0x360	; 0x360 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	39 f4       	brne	.+14     	; 0x20a <Terminal_Out+0x32>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_State = Uart_sendByte('\r');
 1fc:	8d e0       	ldi	r24, 0x0D	; 13
 1fe:	0e 94 a5 01 	call	0x34a	; 0x34a <Uart_sendByte>
	return TERMINAL_STATUS_ERROR_OK;
 202:	21 e0       	ldi	r18, 0x01	; 1
 204:	03 c0       	rjmp	.+6      	; 0x20c <Terminal_Out+0x34>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
 206:	24 e0       	ldi	r18, 0x04	; 4
 208:	01 c0       	rjmp	.+2      	; 0x20c <Terminal_Out+0x34>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
 20a:	20 e0       	ldi	r18, 0x00	; 0
	Uart_State = Uart_sendByte('\r');
	return TERMINAL_STATUS_ERROR_OK;
}
 20c:	82 2f       	mov	r24, r18
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <main>:

#include "App Layer/App.h"

int main(void)
{
	App_start();
 214:	0e 94 8c 00 	call	0x118	; 0x118 <App_start>
 218:	ff cf       	rjmp	.-2      	; 0x218 <main+0x4>

0000021a <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
 21a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genuSpi_Status>
 21e:	87 30       	cpi	r24, 0x07	; 7
 220:	b9 f0       	breq	.+46     	; 0x250 <Spi_init+0x36>
 222:	87 b3       	in	r24, 0x17	; 23
 224:	80 62       	ori	r24, 0x20	; 32
 226:	87 bb       	out	0x17, r24	; 23
 228:	87 b3       	in	r24, 0x17	; 23
 22a:	8f 7b       	andi	r24, 0xBF	; 191
 22c:	87 bb       	out	0x17, r24	; 23
 22e:	87 b3       	in	r24, 0x17	; 23
 230:	8f 7e       	andi	r24, 0xEF	; 239
 232:	87 bb       	out	0x17, r24	; 23
 234:	87 b3       	in	r24, 0x17	; 23
 236:	8f 77       	andi	r24, 0x7F	; 127
 238:	87 bb       	out	0x17, r24	; 23
 23a:	8d b1       	in	r24, 0x0d	; 13
 23c:	8f 7e       	andi	r24, 0xEF	; 239
 23e:	8d b9       	out	0x0d, r24	; 13
 240:	8d b1       	in	r24, 0x0d	; 13
 242:	80 64       	ori	r24, 0x40	; 64
 244:	8d b9       	out	0x0d, r24	; 13
 246:	87 e0       	ldi	r24, 0x07	; 7
 248:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genuSpi_Status>
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	08 95       	ret
 250:	88 e0       	ldi	r24, 0x08	; 8
 252:	08 95       	ret

00000254 <Spi_SlaveReceiveByte>:
 254:	fc 01       	movw	r30, r24
 256:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <genuSpi_Status>
 25a:	97 30       	cpi	r25, 0x07	; 7
 25c:	41 f4       	brne	.+16     	; 0x26e <Spi_SlaveReceiveByte+0x1a>
 25e:	30 97       	sbiw	r30, 0x00	; 0
 260:	41 f0       	breq	.+16     	; 0x272 <Spi_SlaveReceiveByte+0x1e>
 262:	77 9b       	sbis	0x0e, 7	; 14
 264:	fe cf       	rjmp	.-4      	; 0x262 <Spi_SlaveReceiveByte+0xe>
 266:	8f b1       	in	r24, 0x0f	; 15
 268:	80 83       	st	Z, r24
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	08 95       	ret
 26e:	86 e0       	ldi	r24, 0x06	; 6
 270:	08 95       	ret
 272:	85 e0       	ldi	r24, 0x05	; 5
 274:	08 95       	ret

00000276 <Spi_SlaveReceivePacket>:
 276:	cf 92       	push	r12
 278:	df 92       	push	r13
 27a:	ef 92       	push	r14
 27c:	ff 92       	push	r15
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	6c 01       	movw	r12, r24
 286:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <genuSpi_Status>
 28a:	97 30       	cpi	r25, 0x07	; 7
 28c:	b1 f4       	brne	.+44     	; 0x2ba <Spi_SlaveReceivePacket+0x44>
 28e:	7b 01       	movw	r14, r22
 290:	10 e0       	ldi	r17, 0x00	; 0
 292:	0c c0       	rjmp	.+24     	; 0x2ac <Spi_SlaveReceivePacket+0x36>
 294:	e6 01       	movw	r28, r12
 296:	c8 0f       	add	r28, r24
 298:	d9 1f       	adc	r29, r25
 29a:	ce 01       	movw	r24, r28
 29c:	0e 94 2a 01 	call	0x254	; 0x254 <Spi_SlaveReceiveByte>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	69 f4       	brne	.+26     	; 0x2be <Spi_SlaveReceivePacket+0x48>
 2a4:	98 81       	ld	r25, Y
 2a6:	99 23       	and	r25, r25
 2a8:	59 f0       	breq	.+22     	; 0x2c0 <Spi_SlaveReceivePacket+0x4a>
 2aa:	1f 5f       	subi	r17, 0xFF	; 255
 2ac:	81 2f       	mov	r24, r17
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	8e 15       	cp	r24, r14
 2b2:	9f 05       	cpc	r25, r15
 2b4:	78 f3       	brcs	.-34     	; 0x294 <Spi_SlaveReceivePacket+0x1e>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <Spi_SlaveReceivePacket+0x4a>
 2ba:	86 e0       	ldi	r24, 0x06	; 6
 2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <Spi_SlaveReceivePacket+0x4a>
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	df 90       	pop	r13
 2cc:	cf 90       	pop	r12
 2ce:	08 95       	ret

000002d0 <__vector_12>:


 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
 2f2:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <SPI_STC_CallBackPtr>
 2f6:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <SPI_STC_CallBackPtr+0x1>
 2fa:	09 95       	icall
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	bf 91       	pop	r27
 302:	af 91       	pop	r26
 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	7f 91       	pop	r23
 30a:	6f 91       	pop	r22
 30c:	5f 91       	pop	r21
 30e:	4f 91       	pop	r20
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
 31e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <u8_Uart_Status>
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	81 f0       	breq	.+32     	; 0x346 <Uart_init+0x28>
 326:	10 bc       	out	0x20, r1	; 32
 328:	8c e0       	ldi	r24, 0x0C	; 12
 32a:	89 b9       	out	0x09, r24	; 9
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	8b b9       	out	0x0b, r24	; 11
 330:	88 e1       	ldi	r24, 0x18	; 24
 332:	8a b9       	out	0x0a, r24	; 10
 334:	80 e8       	ldi	r24, 0x80	; 128
 336:	80 bd       	out	0x20, r24	; 32
 338:	80 b5       	in	r24, 0x20	; 32
 33a:	86 68       	ori	r24, 0x86	; 134
 33c:	80 bd       	out	0x20, r24	; 32
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <u8_Uart_Status>
 344:	08 95       	ret
 346:	87 e0       	ldi	r24, 0x07	; 7
 348:	08 95       	ret

0000034a <Uart_sendByte>:
 34a:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <u8_Uart_Status>
 34e:	99 23       	and	r25, r25
 350:	29 f0       	breq	.+10     	; 0x35c <Uart_sendByte+0x12>
 352:	5d 9b       	sbis	0x0b, 5	; 11
 354:	fe cf       	rjmp	.-4      	; 0x352 <Uart_sendByte+0x8>
 356:	8c b9       	out	0x0c, r24	; 12
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	08 95       	ret
 35c:	86 e0       	ldi	r24, 0x06	; 6
 35e:	08 95       	ret

00000360 <Uart_sendPacket>:
 360:	ef 92       	push	r14
 362:	ff 92       	push	r15
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <u8_Uart_Status>
 370:	22 23       	and	r18, r18
 372:	99 f0       	breq	.+38     	; 0x39a <Uart_sendPacket+0x3a>
 374:	8b 01       	movw	r16, r22
 376:	7c 01       	movw	r14, r24
 378:	c0 e0       	ldi	r28, 0x00	; 0
 37a:	d0 e0       	ldi	r29, 0x00	; 0
 37c:	09 c0       	rjmp	.+18     	; 0x390 <Uart_sendPacket+0x30>
 37e:	f7 01       	movw	r30, r14
 380:	ec 0f       	add	r30, r28
 382:	fd 1f       	adc	r31, r29
 384:	80 81       	ld	r24, Z
 386:	0e 94 a5 01 	call	0x34a	; 0x34a <Uart_sendByte>
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	41 f4       	brne	.+16     	; 0x39e <Uart_sendPacket+0x3e>
 38e:	21 96       	adiw	r28, 0x01	; 1
 390:	c0 17       	cp	r28, r16
 392:	d1 07       	cpc	r29, r17
 394:	a0 f3       	brcs	.-24     	; 0x37e <Uart_sendPacket+0x1e>
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	03 c0       	rjmp	.+6      	; 0x3a0 <Uart_sendPacket+0x40>
 39a:	86 e0       	ldi	r24, 0x06	; 6
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <Uart_sendPacket+0x40>
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	ff 90       	pop	r15
 3aa:	ef 90       	pop	r14
 3ac:	08 95       	ret

000003ae <Uart_EnableNotification_RXC>:
 3ae:	9c 01       	movw	r18, r24
 3b0:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <u8_Uart_Status>
 3b4:	99 23       	and	r25, r25
 3b6:	61 f0       	breq	.+24     	; 0x3d0 <Uart_EnableNotification_RXC+0x22>
 3b8:	21 15       	cp	r18, r1
 3ba:	31 05       	cpc	r19, r1
 3bc:	59 f0       	breq	.+22     	; 0x3d4 <Uart_EnableNotification_RXC+0x26>
 3be:	8a b1       	in	r24, 0x0a	; 10
 3c0:	80 68       	ori	r24, 0x80	; 128
 3c2:	8a b9       	out	0x0a, r24	; 10
 3c4:	30 93 72 00 	sts	0x0072, r19	; 0x800072 <Uart_RXC_CallBackPtr+0x1>
 3c8:	20 93 71 00 	sts	0x0071, r18	; 0x800071 <Uart_RXC_CallBackPtr>
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	08 95       	ret
 3d0:	86 e0       	ldi	r24, 0x06	; 6
 3d2:	08 95       	ret
 3d4:	85 e0       	ldi	r24, 0x05	; 5
 3d6:	08 95       	ret

000003d8 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
 3d8:	8c b1       	in	r24, 0x0c	; 12
}
 3da:	08 95       	ret

000003dc <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
 3dc:	1f 92       	push	r1
 3de:	0f 92       	push	r0
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	0f 92       	push	r0
 3e4:	11 24       	eor	r1, r1
 3e6:	2f 93       	push	r18
 3e8:	3f 93       	push	r19
 3ea:	4f 93       	push	r20
 3ec:	5f 93       	push	r21
 3ee:	6f 93       	push	r22
 3f0:	7f 93       	push	r23
 3f2:	8f 93       	push	r24
 3f4:	9f 93       	push	r25
 3f6:	af 93       	push	r26
 3f8:	bf 93       	push	r27
 3fa:	ef 93       	push	r30
 3fc:	ff 93       	push	r31
 3fe:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <Uart_TXC_CallBackPtr>
 402:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <Uart_TXC_CallBackPtr+0x1>
 406:	09 95       	icall
 408:	ff 91       	pop	r31
 40a:	ef 91       	pop	r30
 40c:	bf 91       	pop	r27
 40e:	af 91       	pop	r26
 410:	9f 91       	pop	r25
 412:	8f 91       	pop	r24
 414:	7f 91       	pop	r23
 416:	6f 91       	pop	r22
 418:	5f 91       	pop	r21
 41a:	4f 91       	pop	r20
 41c:	3f 91       	pop	r19
 41e:	2f 91       	pop	r18
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	2f 93       	push	r18
 436:	3f 93       	push	r19
 438:	4f 93       	push	r20
 43a:	5f 93       	push	r21
 43c:	6f 93       	push	r22
 43e:	7f 93       	push	r23
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
 444:	af 93       	push	r26
 446:	bf 93       	push	r27
 448:	ef 93       	push	r30
 44a:	ff 93       	push	r31
 44c:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <Uart_RXC_CallBackPtr>
 450:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <Uart_RXC_CallBackPtr+0x1>
 454:	09 95       	icall
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	bf 91       	pop	r27
 45c:	af 91       	pop	r26
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	7f 91       	pop	r23
 464:	6f 91       	pop	r22
 466:	5f 91       	pop	r21
 468:	4f 91       	pop	r20
 46a:	3f 91       	pop	r19
 46c:	2f 91       	pop	r18
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	2f 93       	push	r18
 484:	3f 93       	push	r19
 486:	4f 93       	push	r20
 488:	5f 93       	push	r21
 48a:	6f 93       	push	r22
 48c:	7f 93       	push	r23
 48e:	8f 93       	push	r24
 490:	9f 93       	push	r25
 492:	af 93       	push	r26
 494:	bf 93       	push	r27
 496:	ef 93       	push	r30
 498:	ff 93       	push	r31
 49a:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <Uart_UDRE_CallBackPtr>
 49e:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <Uart_UDRE_CallBackPtr+0x1>
 4a2:	09 95       	icall
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	bf 91       	pop	r27
 4aa:	af 91       	pop	r26
 4ac:	9f 91       	pop	r25
 4ae:	8f 91       	pop	r24
 4b0:	7f 91       	pop	r23
 4b2:	6f 91       	pop	r22
 4b4:	5f 91       	pop	r21
 4b6:	4f 91       	pop	r20
 4b8:	3f 91       	pop	r19
 4ba:	2f 91       	pop	r18
 4bc:	0f 90       	pop	r0
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	0f 90       	pop	r0
 4c2:	1f 90       	pop	r1
 4c4:	18 95       	reti

000004c6 <_exit>:
 4c6:	f8 94       	cli

000004c8 <__stop_program>:
 4c8:	ff cf       	rjmp	.-2      	; 0x4c8 <__stop_program>
