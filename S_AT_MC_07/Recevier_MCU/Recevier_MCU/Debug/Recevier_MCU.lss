
Recevier_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000004e8  0000057c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800066  00800066  00000582  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000582  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017d8  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7a  00000000  00000000  00001fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f5f  00000000  00000000  00002b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000614  00000000  00000000  00003a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c71  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001865  00000000  00000000  00004d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00006576  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_12>
  34:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_13>
  38:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_14>
  3c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  8a:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	84 30       	cpi	r24, 0x04	; 4
  98:	81 f0       	breq	.+32     	; 0xba <App_init+0x28>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	/* Call the initializer of the Terminal */
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
  9a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <Terminal_init>
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	49 f4       	brne	.+18     	; 0xb4 <App_init+0x22>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Call the initializer of the Spi */
	if(SPI_STATUS_ERROR_OK != Spi_init())
  a2:	0e 94 10 01 	call	0x220	; 0x220 <Spi_init>
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	39 f4       	brne	.+14     	; 0xb8 <App_init+0x26>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return APP_STATUS_ERROR_OK;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	08 95       	ret
/**************************************************************************************/

	/* Call the initializer of the Terminal */
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
	{
		return APP_STATUS_ERROR_NOK;
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	08 95       	ret
	}
	/* Call the initializer of the Spi */
	if(SPI_STATUS_ERROR_OK != Spi_init())
	{
		return APP_STATUS_ERROR_NOK;
  b8:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
  ba:	08 95       	ret

000000bc <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	28 97       	sbiw	r28, 0x08	; 8
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
  d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d4:	84 30       	cpi	r24, 0x04	; 4
  d6:	b9 f4       	brne	.+46     	; 0x106 <App_update+0x4a>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
  d8:	ce 01       	movw	r24, r28
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	28 e0       	ldi	r18, 0x08	; 8
  de:	fc 01       	movw	r30, r24
  e0:	11 92       	st	Z+, r1
  e2:	2a 95       	dec	r18
  e4:	e9 f7       	brne	.-6      	; 0xe0 <App_update+0x24>
	if(Spi_SlaveReceivePacket(au8_inputString, MAX_INPUT_SIZE) != SPI_STATUS_ERROR_OK)
  e6:	68 e0       	ldi	r22, 0x08	; 8
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	0e 94 3e 01 	call	0x27c	; 0x27c <Spi_SlaveReceivePacket>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	61 f4       	brne	.+24     	; 0x10a <App_update+0x4e>
		return APP_STATUS_ERROR_NOK;
	Terminal_Out(au8_inputString);
  f2:	ce 01       	movw	r24, r28
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Terminal_Out>
	Terminal_Out((uint8_t*)"\r\n");
  fa:	83 e6       	ldi	r24, 0x63	; 99
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Terminal_Out>
	return APP_STATUS_ERROR_OK;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	03 c0       	rjmp	.+6      	; 0x10c <App_update+0x50>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
 106:	85 e0       	ldi	r24, 0x05	; 5
 108:	01 c0       	rjmp	.+2      	; 0x10c <App_update+0x50>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
	if(Spi_SlaveReceivePacket(au8_inputString, MAX_INPUT_SIZE) != SPI_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
 10a:	80 e0       	ldi	r24, 0x00	; 0
	Terminal_Out(au8_inputString);
	Terminal_Out((uint8_t*)"\r\n");
	return APP_STATUS_ERROR_OK;
 10c:	28 96       	adiw	r28, 0x08	; 8
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the Traffic application */
	if(App_init() != APP_STATUS_ERROR_OK)
 11e:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	39 f4       	brne	.+14     	; 0x134 <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
 126:	8f b7       	in	r24, 0x3f	; 63
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
 12c:	0e 94 5e 00 	call	0xbc	; 0xbc <App_update>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	e1 f3       	breq	.-8      	; 0x12c <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
			
	}
}
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret

00000138 <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
 13c:	c0 91 67 00 	lds	r28, 0x0067	; 0x800067 <gu8_counter>
 140:	d0 e0       	ldi	r29, 0x00	; 0
 142:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Uart_DataRegister>
 146:	c8 59       	subi	r28, 0x98	; 152
 148:	df 4f       	sbci	r29, 0xFF	; 255
 14a:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
 14c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <gu8_counter>
 150:	e9 2f       	mov	r30, r25
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	e8 59       	subi	r30, 0x98	; 152
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	80 81       	ld	r24, Z
 15a:	8d 30       	cpi	r24, 0x0D	; 13
 15c:	71 f4       	brne	.+28     	; 0x17a <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
 15e:	0e 94 b4 01 	call	0x368	; 0x368 <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
 162:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <gu8_counter>
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	e8 59       	subi	r30, 0x98	; 152
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	10 82       	st	Z, r1
		gu8_counter = 0;
 16e:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <gu8_counter>
		gu8_flag = 1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 178:	1d c0       	rjmp	.+58     	; 0x1b4 <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
 17a:	88 30       	cpi	r24, 0x08	; 8
 17c:	51 f4       	brne	.+20     	; 0x192 <Uart_RXC_ISR+0x5a>
 17e:	99 23       	and	r25, r25
 180:	41 f0       	breq	.+16     	; 0x192 <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
 182:	0e 94 b4 01 	call	0x368	; 0x368 <Uart_sendByte>
		gu8_counter--;
 186:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu8_counter>
 18a:	81 50       	subi	r24, 0x01	; 1
 18c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_counter>
 190:	11 c0       	rjmp	.+34     	; 0x1b4 <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
 192:	88 30       	cpi	r24, 0x08	; 8
 194:	79 f0       	breq	.+30     	; 0x1b4 <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
 196:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <gu8_visibility>
 19a:	91 30       	cpi	r25, 0x01	; 1
 19c:	21 f4       	brne	.+8      	; 0x1a6 <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
 19e:	8a e2       	ldi	r24, 0x2A	; 42
 1a0:	0e 94 b4 01 	call	0x368	; 0x368 <Uart_sendByte>
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
 1a6:	0e 94 b4 01 	call	0x368	; 0x368 <Uart_sendByte>
		}
		gu8_counter++;
 1aa:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu8_counter>
 1ae:	8f 5f       	subi	r24, 0xFF	; 255
 1b0:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_counter>
	}
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
 1ba:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_TerminalModuleState>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	81 f0       	breq	.+32     	; 0x1e2 <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
 1c2:	0e 94 9e 01 	call	0x33c	; 0x33c <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	11 f0       	breq	.+4      	; 0x1ce <Terminal_init+0x14>
 1ca:	87 30       	cpi	r24, 0x07	; 7
 1cc:	49 f4       	brne	.+18     	; 0x1e0 <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
 1ce:	8c e9       	ldi	r24, 0x9C	; 156
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
 1e2:	08 95       	ret

000001e4 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
 1e8:	00 97       	sbiw	r24, 0x00	; 0
 1ea:	81 f0       	breq	.+32     	; 0x20c <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
 1ec:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <genu_TerminalModuleState>
 1f0:	22 30       	cpi	r18, 0x02	; 2
 1f2:	79 f0       	breq	.+30     	; 0x212 <Terminal_Out+0x2e>
 1f4:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
 1f6:	0e 94 92 01 	call	0x324	; 0x324 <stringLength>
 1fa:	68 2f       	mov	r22, r24
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	ce 01       	movw	r24, r28
 200:	0e 94 bf 01 	call	0x37e	; 0x37e <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	21 f0       	breq	.+8      	; 0x210 <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	03 c0       	rjmp	.+6      	; 0x212 <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
 20c:	24 e0       	ldi	r18, 0x04	; 4
 20e:	01 c0       	rjmp	.+2      	; 0x212 <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
 210:	21 e0       	ldi	r18, 0x01	; 1
}
 212:	82 2f       	mov	r24, r18
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <main>:
#include "App Layer/App.h"


int main(void)
{
	App_start();
 21a:	0e 94 8f 00 	call	0x11e	; 0x11e <App_start>
 21e:	ff cf       	rjmp	.-2      	; 0x21e <main+0x4>

00000220 <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
 220:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genuSpi_Status>
 224:	87 30       	cpi	r24, 0x07	; 7
 226:	b9 f0       	breq	.+46     	; 0x256 <Spi_init+0x36>
 228:	87 b3       	in	r24, 0x17	; 23
 22a:	80 64       	ori	r24, 0x40	; 64
 22c:	87 bb       	out	0x17, r24	; 23
 22e:	87 b3       	in	r24, 0x17	; 23
 230:	8f 7d       	andi	r24, 0xDF	; 223
 232:	87 bb       	out	0x17, r24	; 23
 234:	87 b3       	in	r24, 0x17	; 23
 236:	8f 7e       	andi	r24, 0xEF	; 239
 238:	87 bb       	out	0x17, r24	; 23
 23a:	87 b3       	in	r24, 0x17	; 23
 23c:	8f 77       	andi	r24, 0x7F	; 127
 23e:	87 bb       	out	0x17, r24	; 23
 240:	8d b1       	in	r24, 0x0d	; 13
 242:	8f 7e       	andi	r24, 0xEF	; 239
 244:	8d b9       	out	0x0d, r24	; 13
 246:	8d b1       	in	r24, 0x0d	; 13
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	8d b9       	out	0x0d, r24	; 13
 24c:	87 e0       	ldi	r24, 0x07	; 7
 24e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genuSpi_Status>
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	08 95       	ret
 256:	88 e0       	ldi	r24, 0x08	; 8
 258:	08 95       	ret

0000025a <Spi_SlaveReceiveByte>:
 25a:	fc 01       	movw	r30, r24
 25c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <genuSpi_Status>
 260:	97 30       	cpi	r25, 0x07	; 7
 262:	41 f4       	brne	.+16     	; 0x274 <Spi_SlaveReceiveByte+0x1a>
 264:	30 97       	sbiw	r30, 0x00	; 0
 266:	41 f0       	breq	.+16     	; 0x278 <Spi_SlaveReceiveByte+0x1e>
 268:	77 9b       	sbis	0x0e, 7	; 14
 26a:	fe cf       	rjmp	.-4      	; 0x268 <Spi_SlaveReceiveByte+0xe>
 26c:	8f b1       	in	r24, 0x0f	; 15
 26e:	80 83       	st	Z, r24
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	08 95       	ret
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	08 95       	ret
 278:	85 e0       	ldi	r24, 0x05	; 5
 27a:	08 95       	ret

0000027c <Spi_SlaveReceivePacket>:
 27c:	cf 92       	push	r12
 27e:	df 92       	push	r13
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	6c 01       	movw	r12, r24
 28c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <genuSpi_Status>
 290:	97 30       	cpi	r25, 0x07	; 7
 292:	b1 f4       	brne	.+44     	; 0x2c0 <Spi_SlaveReceivePacket+0x44>
 294:	7b 01       	movw	r14, r22
 296:	10 e0       	ldi	r17, 0x00	; 0
 298:	0c c0       	rjmp	.+24     	; 0x2b2 <Spi_SlaveReceivePacket+0x36>
 29a:	e6 01       	movw	r28, r12
 29c:	c8 0f       	add	r28, r24
 29e:	d9 1f       	adc	r29, r25
 2a0:	ce 01       	movw	r24, r28
 2a2:	0e 94 2d 01 	call	0x25a	; 0x25a <Spi_SlaveReceiveByte>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	69 f4       	brne	.+26     	; 0x2c4 <Spi_SlaveReceivePacket+0x48>
 2aa:	98 81       	ld	r25, Y
 2ac:	99 23       	and	r25, r25
 2ae:	59 f0       	breq	.+22     	; 0x2c6 <Spi_SlaveReceivePacket+0x4a>
 2b0:	1f 5f       	subi	r17, 0xFF	; 255
 2b2:	81 2f       	mov	r24, r17
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	8e 15       	cp	r24, r14
 2b8:	9f 05       	cpc	r25, r15
 2ba:	78 f3       	brcs	.-34     	; 0x29a <Spi_SlaveReceivePacket+0x1e>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	03 c0       	rjmp	.+6      	; 0x2c6 <Spi_SlaveReceivePacket+0x4a>
 2c0:	86 e0       	ldi	r24, 0x06	; 6
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <Spi_SlaveReceivePacket+0x4a>
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	df 90       	pop	r13
 2d2:	cf 90       	pop	r12
 2d4:	08 95       	ret

000002d6 <__vector_12>:


 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	2f 93       	push	r18
 2e2:	3f 93       	push	r19
 2e4:	4f 93       	push	r20
 2e6:	5f 93       	push	r21
 2e8:	6f 93       	push	r22
 2ea:	7f 93       	push	r23
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
 2f0:	af 93       	push	r26
 2f2:	bf 93       	push	r27
 2f4:	ef 93       	push	r30
 2f6:	ff 93       	push	r31
 2f8:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <SPI_STC_CallBackPtr>
 2fc:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <SPI_STC_CallBackPtr+0x1>
 300:	09 95       	icall
 302:	ff 91       	pop	r31
 304:	ef 91       	pop	r30
 306:	bf 91       	pop	r27
 308:	af 91       	pop	r26
 30a:	9f 91       	pop	r25
 30c:	8f 91       	pop	r24
 30e:	7f 91       	pop	r23
 310:	6f 91       	pop	r22
 312:	5f 91       	pop	r21
 314:	4f 91       	pop	r20
 316:	3f 91       	pop	r19
 318:	2f 91       	pop	r18
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <stringLength>:
		result *= base;
	}
	return result;
}
uint8_t stringLength(uint8_t* string1)
{
 324:	ac 01       	movw	r20, r24
    uint8_t u8_loopIndex=0;
 326:	80 e0       	ldi	r24, 0x00	; 0
    while(string1[u8_loopIndex] != '\0')
 328:	01 c0       	rjmp	.+2      	; 0x32c <stringLength+0x8>
    {
        u8_loopIndex++;
 32a:	8f 5f       	subi	r24, 0xFF	; 255
	return result;
}
uint8_t stringLength(uint8_t* string1)
{
    uint8_t u8_loopIndex=0;
    while(string1[u8_loopIndex] != '\0')
 32c:	fa 01       	movw	r30, r20
 32e:	e8 0f       	add	r30, r24
 330:	f1 1d       	adc	r31, r1
 332:	20 81       	ld	r18, Z
 334:	21 11       	cpse	r18, r1
 336:	f9 cf       	rjmp	.-14     	; 0x32a <stringLength+0x6>
    {
        u8_loopIndex++;
    }
    return u8_loopIndex+1;
}
 338:	8f 5f       	subi	r24, 0xFF	; 255
 33a:	08 95       	ret

0000033c <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
 33c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <u8_Uart_Status>
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	81 f0       	breq	.+32     	; 0x364 <Uart_init+0x28>
 344:	10 bc       	out	0x20, r1	; 32
 346:	87 e6       	ldi	r24, 0x67	; 103
 348:	89 b9       	out	0x09, r24	; 9
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	8b b9       	out	0x0b, r24	; 11
 34e:	88 e1       	ldi	r24, 0x18	; 24
 350:	8a b9       	out	0x0a, r24	; 10
 352:	80 e8       	ldi	r24, 0x80	; 128
 354:	80 bd       	out	0x20, r24	; 32
 356:	80 b5       	in	r24, 0x20	; 32
 358:	86 68       	ori	r24, 0x86	; 134
 35a:	80 bd       	out	0x20, r24	; 32
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <u8_Uart_Status>
 362:	08 95       	ret
 364:	87 e0       	ldi	r24, 0x07	; 7
 366:	08 95       	ret

00000368 <Uart_sendByte>:
 368:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <u8_Uart_Status>
 36c:	99 23       	and	r25, r25
 36e:	29 f0       	breq	.+10     	; 0x37a <Uart_sendByte+0x12>
 370:	5d 9b       	sbis	0x0b, 5	; 11
 372:	fe cf       	rjmp	.-4      	; 0x370 <Uart_sendByte+0x8>
 374:	8c b9       	out	0x0c, r24	; 12
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	08 95       	ret
 37a:	86 e0       	ldi	r24, 0x06	; 6
 37c:	08 95       	ret

0000037e <Uart_sendPacket>:
 37e:	ef 92       	push	r14
 380:	ff 92       	push	r15
 382:	0f 93       	push	r16
 384:	1f 93       	push	r17
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <u8_Uart_Status>
 38e:	22 23       	and	r18, r18
 390:	99 f0       	breq	.+38     	; 0x3b8 <Uart_sendPacket+0x3a>
 392:	8b 01       	movw	r16, r22
 394:	7c 01       	movw	r14, r24
 396:	c0 e0       	ldi	r28, 0x00	; 0
 398:	d0 e0       	ldi	r29, 0x00	; 0
 39a:	09 c0       	rjmp	.+18     	; 0x3ae <Uart_sendPacket+0x30>
 39c:	f7 01       	movw	r30, r14
 39e:	ec 0f       	add	r30, r28
 3a0:	fd 1f       	adc	r31, r29
 3a2:	80 81       	ld	r24, Z
 3a4:	0e 94 b4 01 	call	0x368	; 0x368 <Uart_sendByte>
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	41 f4       	brne	.+16     	; 0x3bc <Uart_sendPacket+0x3e>
 3ac:	21 96       	adiw	r28, 0x01	; 1
 3ae:	c0 17       	cp	r28, r16
 3b0:	d1 07       	cpc	r29, r17
 3b2:	a0 f3       	brcs	.-24     	; 0x39c <Uart_sendPacket+0x1e>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	03 c0       	rjmp	.+6      	; 0x3be <Uart_sendPacket+0x40>
 3b8:	86 e0       	ldi	r24, 0x06	; 6
 3ba:	01 c0       	rjmp	.+2      	; 0x3be <Uart_sendPacket+0x40>
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	1f 91       	pop	r17
 3c4:	0f 91       	pop	r16
 3c6:	ff 90       	pop	r15
 3c8:	ef 90       	pop	r14
 3ca:	08 95       	ret

000003cc <Uart_EnableNotification_RXC>:
 3cc:	9c 01       	movw	r18, r24
 3ce:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <u8_Uart_Status>
 3d2:	99 23       	and	r25, r25
 3d4:	61 f0       	breq	.+24     	; 0x3ee <Uart_EnableNotification_RXC+0x22>
 3d6:	21 15       	cp	r18, r1
 3d8:	31 05       	cpc	r19, r1
 3da:	59 f0       	breq	.+22     	; 0x3f2 <Uart_EnableNotification_RXC+0x26>
 3dc:	8a b1       	in	r24, 0x0a	; 10
 3de:	80 68       	ori	r24, 0x80	; 128
 3e0:	8a b9       	out	0x0a, r24	; 10
 3e2:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <Uart_RXC_CallBackPtr+0x1>
 3e6:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <Uart_RXC_CallBackPtr>
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	08 95       	ret
 3ee:	86 e0       	ldi	r24, 0x06	; 6
 3f0:	08 95       	ret
 3f2:	85 e0       	ldi	r24, 0x05	; 5
 3f4:	08 95       	ret

000003f6 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
 3f6:	8c b1       	in	r24, 0x0c	; 12
}
 3f8:	08 95       	ret

000003fa <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	2f 93       	push	r18
 406:	3f 93       	push	r19
 408:	4f 93       	push	r20
 40a:	5f 93       	push	r21
 40c:	6f 93       	push	r22
 40e:	7f 93       	push	r23
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
 414:	af 93       	push	r26
 416:	bf 93       	push	r27
 418:	ef 93       	push	r30
 41a:	ff 93       	push	r31
 41c:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <Uart_TXC_CallBackPtr>
 420:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <Uart_TXC_CallBackPtr+0x1>
 424:	09 95       	icall
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	bf 91       	pop	r27
 42c:	af 91       	pop	r26
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	7f 91       	pop	r23
 434:	6f 91       	pop	r22
 436:	5f 91       	pop	r21
 438:	4f 91       	pop	r20
 43a:	3f 91       	pop	r19
 43c:	2f 91       	pop	r18
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	2f 93       	push	r18
 454:	3f 93       	push	r19
 456:	4f 93       	push	r20
 458:	5f 93       	push	r21
 45a:	6f 93       	push	r22
 45c:	7f 93       	push	r23
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
 462:	af 93       	push	r26
 464:	bf 93       	push	r27
 466:	ef 93       	push	r30
 468:	ff 93       	push	r31
 46a:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <Uart_RXC_CallBackPtr>
 46e:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <Uart_RXC_CallBackPtr+0x1>
 472:	09 95       	icall
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	bf 91       	pop	r27
 47a:	af 91       	pop	r26
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	7f 91       	pop	r23
 482:	6f 91       	pop	r22
 484:	5f 91       	pop	r21
 486:	4f 91       	pop	r20
 488:	3f 91       	pop	r19
 48a:	2f 91       	pop	r18
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

00000496 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
 4a0:	2f 93       	push	r18
 4a2:	3f 93       	push	r19
 4a4:	4f 93       	push	r20
 4a6:	5f 93       	push	r21
 4a8:	6f 93       	push	r22
 4aa:	7f 93       	push	r23
 4ac:	8f 93       	push	r24
 4ae:	9f 93       	push	r25
 4b0:	af 93       	push	r26
 4b2:	bf 93       	push	r27
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
 4b8:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <Uart_UDRE_CallBackPtr>
 4bc:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <Uart_UDRE_CallBackPtr+0x1>
 4c0:	09 95       	icall
 4c2:	ff 91       	pop	r31
 4c4:	ef 91       	pop	r30
 4c6:	bf 91       	pop	r27
 4c8:	af 91       	pop	r26
 4ca:	9f 91       	pop	r25
 4cc:	8f 91       	pop	r24
 4ce:	7f 91       	pop	r23
 4d0:	6f 91       	pop	r22
 4d2:	5f 91       	pop	r21
 4d4:	4f 91       	pop	r20
 4d6:	3f 91       	pop	r19
 4d8:	2f 91       	pop	r18
 4da:	0f 90       	pop	r0
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	0f 90       	pop	r0
 4e0:	1f 90       	pop	r1
 4e2:	18 95       	reti

000004e4 <_exit>:
 4e4:	f8 94       	cli

000004e6 <__stop_program>:
 4e6:	ff cf       	rjmp	.-2      	; 0x4e6 <__stop_program>
