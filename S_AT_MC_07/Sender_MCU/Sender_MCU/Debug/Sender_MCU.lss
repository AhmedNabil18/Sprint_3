
Sender_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000004f2  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010a  00800064  00800064  0000058a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013f5  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b09  00000000  00000000  00001b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c65  00000000  00000000  00002696  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000480  00000000  00000000  000032fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b07  00000000  00000000  0000377c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dc3  00000000  00000000  00004283  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00005046  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_12>
  34:	0c 94 29 02 	jmp	0x452	; 0x452 <__vector_13>
  38:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_14>
  3c:	0c 94 02 02 	jmp	0x404	; 0x404 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 37 01 	call	0x26e	; 0x26e <main>
  8a:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	84 30       	cpi	r24, 0x04	; 4
  98:	81 f0       	breq	.+32     	; 0xba <App_init+0x28>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	/* Call the initializer of the Terminal */
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
  9a:	0e 94 07 01 	call	0x20e	; 0x20e <Terminal_init>
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	49 f4       	brne	.+18     	; 0xb4 <App_init+0x22>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Call the initializer of the Spi */
	if(SPI_STATUS_ERROR_OK != Spi_init())
  a2:	0e 94 3a 01 	call	0x274	; 0x274 <Spi_init>
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	39 f4       	brne	.+14     	; 0xb8 <App_init+0x26>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return APP_STATUS_ERROR_OK;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	08 95       	ret
/**************************************************************************************/

	/* Call the initializer of the Terminal */
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
	{
		return APP_STATUS_ERROR_NOK;
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	08 95       	ret
	}
	/* Call the initializer of the Spi */
	if(SPI_STATUS_ERROR_OK != Spi_init())
	{
		return APP_STATUS_ERROR_NOK;
  b8:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
  ba:	08 95       	ret

000000bc <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	cf 5f       	subi	r28, 0xFF	; 255
  c6:	d1 09       	sbc	r29, r1
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
  d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d6:	84 30       	cpi	r24, 0x04	; 4
  d8:	19 f5       	brne	.+70     	; 0x120 <App_update+0x64>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
  da:	ce 01       	movw	r24, r28
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	fc 01       	movw	r30, r24
  e2:	11 92       	st	Z+, r1
  e4:	2a 95       	dec	r18
  e6:	e9 f7       	brne	.-6      	; 0xe2 <App_update+0x26>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
  e8:	0e 94 1c 01 	call	0x238	; 0x238 <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
  ec:	85 30       	cpi	r24, 0x05	; 5
  ee:	a1 f4       	brne	.+40     	; 0x118 <App_update+0x5c>
	{
		SPI_SS_ENABLE();
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	88 bb       	out	0x18, r24	; 24
		if(Spi_MasterSendPacket(au8_inputString, stringLength(au8_inputString)) != SPI_STATUS_ERROR_OK)
  f6:	ce 01       	movw	r24, r28
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	0e 94 ac 00 	call	0x158	; 0x158 <stringLength>
  fe:	68 2f       	mov	r22, r24
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	ce 01       	movw	r24, r28
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Spi_MasterSendPacket>
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	59 f4       	brne	.+22     	; 0x124 <App_update+0x68>
			return APP_STATUS_ERROR_NOK;
		SPI_SS_DISABLE();
 10e:	88 b3       	in	r24, 0x18	; 24
 110:	80 61       	ori	r24, 0x10	; 16
 112:	88 bb       	out	0x18, r24	; 24
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	09 c0       	rjmp	.+18     	; 0x12a <App_update+0x6e>
	{
		SPI_SS_ENABLE();
		if(Spi_MasterSendPacket(au8_inputString, stringLength(au8_inputString)) != SPI_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		SPI_SS_DISABLE();
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	31 f0       	breq	.+12     	; 0x128 <App_update+0x6c>
		return APP_STATUS_ERROR_NOK;
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	05 c0       	rjmp	.+10     	; 0x12a <App_update+0x6e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
 120:	85 e0       	ldi	r24, 0x05	; 5
 122:	03 c0       	rjmp	.+6      	; 0x12a <App_update+0x6e>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
	{
		SPI_SS_ENABLE();
		if(Spi_MasterSendPacket(au8_inputString, stringLength(au8_inputString)) != SPI_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	01 c0       	rjmp	.+2      	; 0x12a <App_update+0x6e>
		SPI_SS_DISABLE();
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	c1 50       	subi	r28, 0x01	; 1
 12c:	df 4f       	sbci	r29, 0xFF	; 255
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the Traffic application */
	if(App_init() != APP_STATUS_ERROR_OK)
 13e:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	39 f4       	brne	.+14     	; 0x154 <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
 146:	8f b7       	in	r24, 0x3f	; 63
 148:	80 68       	ori	r24, 0x80	; 128
 14a:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
 14c:	0e 94 5e 00 	call	0xbc	; 0xbc <App_update>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	e1 f3       	breq	.-8      	; 0x14c <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
			
	}
}
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	08 95       	ret

00000158 <stringLength>:
        else if(string1[u8_loopIndex] < string2[u8_loopIndex])
            return 2;
        u8_loopIndex++;
    }
    return 3;
}
 158:	ac 01       	movw	r20, r24
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	01 c0       	rjmp	.+2      	; 0x160 <stringLength+0x8>
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	fa 01       	movw	r30, r20
 162:	e8 0f       	add	r30, r24
 164:	f1 1d       	adc	r31, r1
 166:	20 81       	ld	r18, Z
 168:	21 11       	cpse	r18, r1
 16a:	f9 cf       	rjmp	.-14     	; 0x15e <stringLength+0x6>
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	08 95       	ret

00000170 <EmptyString>:

void EmptyString(uint8_t *string)
{
 170:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
 172:	90 e0       	ldi	r25, 0x00	; 0
	while(string[u8_loopIndex] != '\0')
 174:	02 c0       	rjmp	.+4      	; 0x17a <EmptyString+0xa>
		string[u8_loopIndex++] = '\0';
 176:	9f 5f       	subi	r25, 0xFF	; 255
 178:	10 82       	st	Z, r1
}

void EmptyString(uint8_t *string)
{
	uint8_t u8_loopIndex=0;
	while(string[u8_loopIndex] != '\0')
 17a:	fa 01       	movw	r30, r20
 17c:	e9 0f       	add	r30, r25
 17e:	f1 1d       	adc	r31, r1
 180:	20 81       	ld	r18, Z
 182:	21 11       	cpse	r18, r1
 184:	f8 cf       	rjmp	.-16     	; 0x176 <EmptyString+0x6>
		string[u8_loopIndex++] = '\0';
}
 186:	08 95       	ret

00000188 <stringCopy>:

void stringCopy(uint8_t* source, uint8_t* destination)
{
 188:	dc 01       	movw	r26, r24
    uint8_t u8_loopIndex=0;
 18a:	90 e0       	ldi	r25, 0x00	; 0
    while(source[u8_loopIndex] != '\0')
 18c:	05 c0       	rjmp	.+10     	; 0x198 <stringCopy+0x10>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
 18e:	fb 01       	movw	r30, r22
 190:	e2 0f       	add	r30, r18
 192:	f3 1f       	adc	r31, r19
 194:	40 83       	st	Z, r20
	    u8_loopIndex++;
 196:	9f 5f       	subi	r25, 0xFF	; 255
}

void stringCopy(uint8_t* source, uint8_t* destination)
{
    uint8_t u8_loopIndex=0;
    while(source[u8_loopIndex] != '\0')
 198:	29 2f       	mov	r18, r25
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	fd 01       	movw	r30, r26
 19e:	e2 0f       	add	r30, r18
 1a0:	f3 1f       	adc	r31, r19
 1a2:	40 81       	ld	r20, Z
 1a4:	41 11       	cpse	r20, r1
 1a6:	f3 cf       	rjmp	.-26     	; 0x18e <stringCopy+0x6>
    {
	    destination[u8_loopIndex] = source[u8_loopIndex];
	    u8_loopIndex++;
    }
}
 1a8:	08 95       	ret

000001aa <Uart_RXC_ISR>:
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
}
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	c0 91 65 00 	lds	r28, 0x0065	; 0x800065 <gu8_counter>
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
 1b4:	0e 94 00 02 	call	0x400	; 0x400 <Uart_DataRegister>
 1b8:	ca 59       	subi	r28, 0x9A	; 154
 1ba:	df 4f       	sbci	r29, 0xFF	; 255
 1bc:	88 83       	st	Y, r24
 1be:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <gu8_counter>
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	ea 59       	subi	r30, 0x9A	; 154
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	80 81       	ld	r24, Z
 1ca:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Uart_sendByte>
 1ce:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gu8_counter>
 1d2:	28 2f       	mov	r18, r24
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	f9 01       	movw	r30, r18
 1d8:	ea 59       	subi	r30, 0x9A	; 154
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	90 81       	ld	r25, Z
 1de:	9d 30       	cpi	r25, 0x0D	; 13
 1e0:	51 f4       	brne	.+20     	; 0x1f6 <Uart_RXC_ISR+0x4c>
 1e2:	f9 01       	movw	r30, r18
 1e4:	ea 59       	subi	r30, 0x9A	; 154
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	10 82       	st	Z, r1
 1ea:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <gu8_counter>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 1f4:	09 c0       	rjmp	.+18     	; 0x208 <Uart_RXC_ISR+0x5e>
 1f6:	98 30       	cpi	r25, 0x08	; 8
 1f8:	21 f4       	brne	.+8      	; 0x202 <Uart_RXC_ISR+0x58>
 1fa:	81 50       	subi	r24, 0x01	; 1
 1fc:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu8_counter>
 200:	03 c0       	rjmp	.+6      	; 0x208 <Uart_RXC_ISR+0x5e>
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu8_counter>
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <Terminal_init>:
 20e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_TerminalModuleState>
 212:	83 30       	cpi	r24, 0x03	; 3
 214:	81 f0       	breq	.+32     	; 0x236 <Terminal_init+0x28>
 216:	0e 94 ca 01 	call	0x394	; 0x394 <Uart_init>
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	11 f0       	breq	.+4      	; 0x222 <Terminal_init+0x14>
 21e:	87 30       	cpi	r24, 0x07	; 7
 220:	49 f4       	brne	.+18     	; 0x234 <Terminal_init+0x26>
 222:	85 ed       	ldi	r24, 0xD5	; 213
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <Uart_EnableNotification_RXC>
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <genu_TerminalModuleState>
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	08 95       	ret
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret

00000238 <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
 238:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
 23a:	89 2b       	or	r24, r25
 23c:	a1 f0       	breq	.+40     	; 0x266 <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
 23e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <genu_TerminalModuleState>
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	99 f0       	breq	.+38     	; 0x26c <Terminal_In+0x34>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(gu8_flag == 1)
 246:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	71 f4       	brne	.+28     	; 0x26a <Terminal_In+0x32>
	{
		gu8_flag = 0;
 24e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
		stringCopy(gau8_data, pu8_InputData);
 252:	86 e6       	ldi	r24, 0x66	; 102
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 c4 00 	call	0x188	; 0x188 <stringCopy>
		EmptyString(gau8_data);
 25a:	86 e6       	ldi	r24, 0x66	; 102
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 b8 00 	call	0x170	; 0x170 <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
 262:	85 e0       	ldi	r24, 0x05	; 5
 264:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
 26a:	81 e0       	ldi	r24, 0x01	; 1
}
 26c:	08 95       	ret

0000026e <main>:

#include "App Layer/App.h"

int main(void)
{
    App_start();
 26e:	0e 94 9f 00 	call	0x13e	; 0x13e <App_start>
 272:	ff cf       	rjmp	.-2      	; 0x272 <main+0x4>

00000274 <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
 274:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genuSpi_Status>
 278:	87 30       	cpi	r24, 0x07	; 7
 27a:	41 f1       	breq	.+80     	; 0x2cc <Spi_init+0x58>
 27c:	87 b3       	in	r24, 0x17	; 23
 27e:	80 6b       	ori	r24, 0xB0	; 176
 280:	87 bb       	out	0x17, r24	; 23
 282:	87 b3       	in	r24, 0x17	; 23
 284:	8f 7b       	andi	r24, 0xBF	; 191
 286:	87 bb       	out	0x17, r24	; 23
 288:	88 b3       	in	r24, 0x18	; 24
 28a:	80 61       	ori	r24, 0x10	; 16
 28c:	88 bb       	out	0x18, r24	; 24
 28e:	8d b1       	in	r24, 0x0d	; 13
 290:	80 61       	ori	r24, 0x10	; 16
 292:	8d b9       	out	0x0d, r24	; 13
 294:	8d b1       	in	r24, 0x0d	; 13
 296:	8f 7d       	andi	r24, 0xDF	; 223
 298:	8d b9       	out	0x0d, r24	; 13
 29a:	8d b1       	in	r24, 0x0d	; 13
 29c:	87 7f       	andi	r24, 0xF7	; 247
 29e:	8d b9       	out	0x0d, r24	; 13
 2a0:	8d b1       	in	r24, 0x0d	; 13
 2a2:	8b 7f       	andi	r24, 0xFB	; 251
 2a4:	8d b9       	out	0x0d, r24	; 13
 2a6:	8e b1       	in	r24, 0x0e	; 14
 2a8:	81 60       	ori	r24, 0x01	; 1
 2aa:	8e b9       	out	0x0e, r24	; 14
 2ac:	8d b1       	in	r24, 0x0d	; 13
 2ae:	8e 7f       	andi	r24, 0xFE	; 254
 2b0:	8d b9       	out	0x0d, r24	; 13
 2b2:	8d b1       	in	r24, 0x0d	; 13
 2b4:	8d 7f       	andi	r24, 0xFD	; 253
 2b6:	8d b9       	out	0x0d, r24	; 13
 2b8:	8d b1       	in	r24, 0x0d	; 13
 2ba:	8d b9       	out	0x0d, r24	; 13
 2bc:	8d b1       	in	r24, 0x0d	; 13
 2be:	80 64       	ori	r24, 0x40	; 64
 2c0:	8d b9       	out	0x0d, r24	; 13
 2c2:	87 e0       	ldi	r24, 0x07	; 7
 2c4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genuSpi_Status>
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	08 95       	ret
 2cc:	88 e0       	ldi	r24, 0x08	; 8
 2ce:	08 95       	ret

000002d0 <Spi_MasterSendByte>:
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	1f 92       	push	r1
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <genuSpi_Status>
 2de:	97 30       	cpi	r25, 0x07	; 7
 2e0:	39 f4       	brne	.+14     	; 0x2f0 <Spi_MasterSendByte+0x20>
 2e2:	8f b9       	out	0x0f, r24	; 15
 2e4:	77 9b       	sbis	0x0e, 7	; 14
 2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <Spi_MasterSendByte+0x14>
 2e8:	8f b1       	in	r24, 0x0f	; 15
 2ea:	89 83       	std	Y+1, r24	; 0x01
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <Spi_MasterSendByte+0x22>
 2f0:	86 e0       	ldi	r24, 0x06	; 6
 2f2:	0f 90       	pop	r0
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <Spi_MasterSendPacket>:
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <genuSpi_Status>
 308:	27 30       	cpi	r18, 0x07	; 7
 30a:	a1 f4       	brne	.+40     	; 0x334 <Spi_MasterSendPacket+0x3a>
 30c:	8b 01       	movw	r16, r22
 30e:	7c 01       	movw	r14, r24
 310:	c0 e0       	ldi	r28, 0x00	; 0
 312:	09 c0       	rjmp	.+18     	; 0x326 <Spi_MasterSendPacket+0x2c>
 314:	f7 01       	movw	r30, r14
 316:	e2 0f       	add	r30, r18
 318:	f3 1f       	adc	r31, r19
 31a:	80 81       	ld	r24, Z
 31c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Spi_MasterSendByte>
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	51 f4       	brne	.+20     	; 0x338 <Spi_MasterSendPacket+0x3e>
 324:	cf 5f       	subi	r28, 0xFF	; 255
 326:	2c 2f       	mov	r18, r28
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	20 17       	cp	r18, r16
 32c:	31 07       	cpc	r19, r17
 32e:	90 f3       	brcs	.-28     	; 0x314 <Spi_MasterSendPacket+0x1a>
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	03 c0       	rjmp	.+6      	; 0x33a <Spi_MasterSendPacket+0x40>
 334:	86 e0       	ldi	r24, 0x06	; 6
 336:	01 c0       	rjmp	.+2      	; 0x33a <Spi_MasterSendPacket+0x40>
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	ff 90       	pop	r15
 342:	ef 90       	pop	r14
 344:	08 95       	ret

00000346 <__vector_12>:


 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	2f 93       	push	r18
 352:	3f 93       	push	r19
 354:	4f 93       	push	r20
 356:	5f 93       	push	r21
 358:	6f 93       	push	r22
 35a:	7f 93       	push	r23
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
 360:	af 93       	push	r26
 362:	bf 93       	push	r27
 364:	ef 93       	push	r30
 366:	ff 93       	push	r31
 368:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <SPI_STC_CallBackPtr>
 36c:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <SPI_STC_CallBackPtr+0x1>
 370:	09 95       	icall
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	bf 91       	pop	r27
 378:	af 91       	pop	r26
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	7f 91       	pop	r23
 380:	6f 91       	pop	r22
 382:	5f 91       	pop	r21
 384:	4f 91       	pop	r20
 386:	3f 91       	pop	r19
 388:	2f 91       	pop	r18
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
 394:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <u8_Uart_Status>
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	81 f0       	breq	.+32     	; 0x3bc <Uart_init+0x28>
 39c:	10 bc       	out	0x20, r1	; 32
 39e:	8c e0       	ldi	r24, 0x0C	; 12
 3a0:	89 b9       	out	0x09, r24	; 9
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	8b b9       	out	0x0b, r24	; 11
 3a6:	88 e1       	ldi	r24, 0x18	; 24
 3a8:	8a b9       	out	0x0a, r24	; 10
 3aa:	80 e8       	ldi	r24, 0x80	; 128
 3ac:	80 bd       	out	0x20, r24	; 32
 3ae:	80 b5       	in	r24, 0x20	; 32
 3b0:	86 68       	ori	r24, 0x86	; 134
 3b2:	80 bd       	out	0x20, r24	; 32
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <u8_Uart_Status>
 3ba:	08 95       	ret
 3bc:	87 e0       	ldi	r24, 0x07	; 7
 3be:	08 95       	ret

000003c0 <Uart_sendByte>:
 3c0:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <u8_Uart_Status>
 3c4:	99 23       	and	r25, r25
 3c6:	29 f0       	breq	.+10     	; 0x3d2 <Uart_sendByte+0x12>
 3c8:	5d 9b       	sbis	0x0b, 5	; 11
 3ca:	fe cf       	rjmp	.-4      	; 0x3c8 <Uart_sendByte+0x8>
 3cc:	8c b9       	out	0x0c, r24	; 12
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	08 95       	ret
 3d2:	86 e0       	ldi	r24, 0x06	; 6
 3d4:	08 95       	ret

000003d6 <Uart_EnableNotification_RXC>:
 3d6:	9c 01       	movw	r18, r24
 3d8:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <u8_Uart_Status>
 3dc:	99 23       	and	r25, r25
 3de:	61 f0       	breq	.+24     	; 0x3f8 <Uart_EnableNotification_RXC+0x22>
 3e0:	21 15       	cp	r18, r1
 3e2:	31 05       	cpc	r19, r1
 3e4:	59 f0       	breq	.+22     	; 0x3fc <Uart_EnableNotification_RXC+0x26>
 3e6:	8a b1       	in	r24, 0x0a	; 10
 3e8:	80 68       	ori	r24, 0x80	; 128
 3ea:	8a b9       	out	0x0a, r24	; 10
 3ec:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <Uart_RXC_CallBackPtr+0x1>
 3f0:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <Uart_RXC_CallBackPtr>
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	08 95       	ret
 3f8:	86 e0       	ldi	r24, 0x06	; 6
 3fa:	08 95       	ret
 3fc:	85 e0       	ldi	r24, 0x05	; 5
 3fe:	08 95       	ret

00000400 <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
 400:	8c b1       	in	r24, 0x0c	; 12
}
 402:	08 95       	ret

00000404 <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
 404:	1f 92       	push	r1
 406:	0f 92       	push	r0
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	0f 92       	push	r0
 40c:	11 24       	eor	r1, r1
 40e:	2f 93       	push	r18
 410:	3f 93       	push	r19
 412:	4f 93       	push	r20
 414:	5f 93       	push	r21
 416:	6f 93       	push	r22
 418:	7f 93       	push	r23
 41a:	8f 93       	push	r24
 41c:	9f 93       	push	r25
 41e:	af 93       	push	r26
 420:	bf 93       	push	r27
 422:	ef 93       	push	r30
 424:	ff 93       	push	r31
 426:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <Uart_TXC_CallBackPtr>
 42a:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <Uart_TXC_CallBackPtr+0x1>
 42e:	09 95       	icall
 430:	ff 91       	pop	r31
 432:	ef 91       	pop	r30
 434:	bf 91       	pop	r27
 436:	af 91       	pop	r26
 438:	9f 91       	pop	r25
 43a:	8f 91       	pop	r24
 43c:	7f 91       	pop	r23
 43e:	6f 91       	pop	r22
 440:	5f 91       	pop	r21
 442:	4f 91       	pop	r20
 444:	3f 91       	pop	r19
 446:	2f 91       	pop	r18
 448:	0f 90       	pop	r0
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	0f 90       	pop	r0
 44e:	1f 90       	pop	r1
 450:	18 95       	reti

00000452 <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
 452:	1f 92       	push	r1
 454:	0f 92       	push	r0
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	0f 92       	push	r0
 45a:	11 24       	eor	r1, r1
 45c:	2f 93       	push	r18
 45e:	3f 93       	push	r19
 460:	4f 93       	push	r20
 462:	5f 93       	push	r21
 464:	6f 93       	push	r22
 466:	7f 93       	push	r23
 468:	8f 93       	push	r24
 46a:	9f 93       	push	r25
 46c:	af 93       	push	r26
 46e:	bf 93       	push	r27
 470:	ef 93       	push	r30
 472:	ff 93       	push	r31
 474:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <Uart_RXC_CallBackPtr>
 478:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <Uart_RXC_CallBackPtr+0x1>
 47c:	09 95       	icall
 47e:	ff 91       	pop	r31
 480:	ef 91       	pop	r30
 482:	bf 91       	pop	r27
 484:	af 91       	pop	r26
 486:	9f 91       	pop	r25
 488:	8f 91       	pop	r24
 48a:	7f 91       	pop	r23
 48c:	6f 91       	pop	r22
 48e:	5f 91       	pop	r21
 490:	4f 91       	pop	r20
 492:	3f 91       	pop	r19
 494:	2f 91       	pop	r18
 496:	0f 90       	pop	r0
 498:	0f be       	out	0x3f, r0	; 63
 49a:	0f 90       	pop	r0
 49c:	1f 90       	pop	r1
 49e:	18 95       	reti

000004a0 <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
 4a0:	1f 92       	push	r1
 4a2:	0f 92       	push	r0
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	0f 92       	push	r0
 4a8:	11 24       	eor	r1, r1
 4aa:	2f 93       	push	r18
 4ac:	3f 93       	push	r19
 4ae:	4f 93       	push	r20
 4b0:	5f 93       	push	r21
 4b2:	6f 93       	push	r22
 4b4:	7f 93       	push	r23
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	af 93       	push	r26
 4bc:	bf 93       	push	r27
 4be:	ef 93       	push	r30
 4c0:	ff 93       	push	r31
 4c2:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <Uart_UDRE_CallBackPtr>
 4c6:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <Uart_UDRE_CallBackPtr+0x1>
 4ca:	09 95       	icall
 4cc:	ff 91       	pop	r31
 4ce:	ef 91       	pop	r30
 4d0:	bf 91       	pop	r27
 4d2:	af 91       	pop	r26
 4d4:	9f 91       	pop	r25
 4d6:	8f 91       	pop	r24
 4d8:	7f 91       	pop	r23
 4da:	6f 91       	pop	r22
 4dc:	5f 91       	pop	r21
 4de:	4f 91       	pop	r20
 4e0:	3f 91       	pop	r19
 4e2:	2f 91       	pop	r18
 4e4:	0f 90       	pop	r0
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	0f 90       	pop	r0
 4ea:	1f 90       	pop	r1
 4ec:	18 95       	reti

000004ee <_exit>:
 4ee:	f8 94       	cli

000004f0 <__stop_program>:
 4f0:	ff cf       	rjmp	.-2      	; 0x4f0 <__stop_program>
