
SPI Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001a8  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  0000023e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007e4  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000651  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f2  00000000  00000000  00001151  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001544  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004de  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000249  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001d6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include "MCAL/Spi Module/Spi.h"

int main(void)
{
    Spi_init();
  92:	0e 94 68 00 	call	0xd0	; 0xd0 <Spi_init>
	uint8_t ch=0x01;
	uint32_t i=0;
	DIO_PORTA_DIR = 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a bb       	out	0x1a, r24	; 26
#include "MCAL/Spi Module/Spi.h"

int main(void)
{
    Spi_init();
	uint8_t ch=0x01;
  9a:	81 e0       	ldi	r24, 0x01	; 1
	uint32_t i=0;
	DIO_PORTA_DIR = 0xFF;
    while (1) 
    {
	    DIO_PORTA_DATA = ch;
  9c:	8b bb       	out	0x1b, r24	; 27
		SPI_SS_ENABLE();
  9e:	98 b3       	in	r25, 0x18	; 24
  a0:	9f 7e       	andi	r25, 0xEF	; 239
  a2:	98 bb       	out	0x18, r25	; 24
		Spi_MasterSendByte(ch++);
  a4:	c1 e0       	ldi	r28, 0x01	; 1
  a6:	c8 0f       	add	r28, r24
  a8:	0e 94 96 00 	call	0x12c	; 0x12c <Spi_MasterSendByte>
		SPI_SS_DISABLE();
  ac:	88 b3       	in	r24, 0x18	; 24
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	88 bb       	out	0x18, r24	; 24
		for(i=0;i<40000;i++);
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	dc 01       	movw	r26, r24
  b8:	03 c0       	rjmp	.+6      	; 0xc0 <main+0x2e>
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	a1 1d       	adc	r26, r1
  be:	b1 1d       	adc	r27, r1
  c0:	80 34       	cpi	r24, 0x40	; 64
  c2:	2c e9       	ldi	r18, 0x9C	; 156
  c4:	92 07       	cpc	r25, r18
  c6:	a1 05       	cpc	r26, r1
  c8:	b1 05       	cpc	r27, r1
  ca:	b8 f3       	brcs	.-18     	; 0xba <main+0x28>
	DIO_PORTA_DIR = 0xFF;
    while (1) 
    {
	    DIO_PORTA_DATA = ch;
		SPI_SS_ENABLE();
		Spi_MasterSendByte(ch++);
  cc:	8c 2f       	mov	r24, r28
  ce:	e6 cf       	rjmp	.-52     	; 0x9c <main+0xa>

000000d0 <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
  d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d4:	87 30       	cpi	r24, 0x07	; 7
  d6:	41 f1       	breq	.+80     	; 0x128 <Spi_init+0x58>
  d8:	87 b3       	in	r24, 0x17	; 23
  da:	80 6b       	ori	r24, 0xB0	; 176
  dc:	87 bb       	out	0x17, r24	; 23
  de:	87 b3       	in	r24, 0x17	; 23
  e0:	8f 7b       	andi	r24, 0xBF	; 191
  e2:	87 bb       	out	0x17, r24	; 23
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	8d b1       	in	r24, 0x0d	; 13
  ec:	80 61       	ori	r24, 0x10	; 16
  ee:	8d b9       	out	0x0d, r24	; 13
  f0:	8d b1       	in	r24, 0x0d	; 13
  f2:	8f 7d       	andi	r24, 0xDF	; 223
  f4:	8d b9       	out	0x0d, r24	; 13
  f6:	8d b1       	in	r24, 0x0d	; 13
  f8:	87 7f       	andi	r24, 0xF7	; 247
  fa:	8d b9       	out	0x0d, r24	; 13
  fc:	8d b1       	in	r24, 0x0d	; 13
  fe:	8b 7f       	andi	r24, 0xFB	; 251
 100:	8d b9       	out	0x0d, r24	; 13
 102:	8e b1       	in	r24, 0x0e	; 14
 104:	81 60       	ori	r24, 0x01	; 1
 106:	8e b9       	out	0x0e, r24	; 14
 108:	8d b1       	in	r24, 0x0d	; 13
 10a:	8e 7f       	andi	r24, 0xFE	; 254
 10c:	8d b9       	out	0x0d, r24	; 13
 10e:	8d b1       	in	r24, 0x0d	; 13
 110:	8d 7f       	andi	r24, 0xFD	; 253
 112:	8d b9       	out	0x0d, r24	; 13
 114:	8d b1       	in	r24, 0x0d	; 13
 116:	8d b9       	out	0x0d, r24	; 13
 118:	8d b1       	in	r24, 0x0d	; 13
 11a:	80 64       	ori	r24, 0x40	; 64
 11c:	8d b9       	out	0x0d, r24	; 13
 11e:	87 e0       	ldi	r24, 0x07	; 7
 120:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	08 95       	ret
 128:	88 e0       	ldi	r24, 0x08	; 8
 12a:	08 95       	ret

0000012c <Spi_MasterSendByte>:
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	1f 92       	push	r1
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 13a:	97 30       	cpi	r25, 0x07	; 7
 13c:	39 f4       	brne	.+14     	; 0x14c <Spi_MasterSendByte+0x20>
 13e:	8f b9       	out	0x0f, r24	; 15
 140:	77 9b       	sbis	0x0e, 7	; 14
 142:	fe cf       	rjmp	.-4      	; 0x140 <Spi_MasterSendByte+0x14>
 144:	8f b1       	in	r24, 0x0f	; 15
 146:	89 83       	std	Y+1, r24	; 0x01
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	01 c0       	rjmp	.+2      	; 0x14e <Spi_MasterSendByte+0x22>
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	0f 90       	pop	r0
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <__vector_12>:


 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	2f 93       	push	r18
 162:	3f 93       	push	r19
 164:	4f 93       	push	r20
 166:	5f 93       	push	r21
 168:	6f 93       	push	r22
 16a:	7f 93       	push	r23
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
 170:	af 93       	push	r26
 172:	bf 93       	push	r27
 174:	ef 93       	push	r30
 176:	ff 93       	push	r31
 178:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 17c:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 180:	09 95       	icall
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	7f 91       	pop	r23
 190:	6f 91       	pop	r22
 192:	5f 91       	pop	r21
 194:	4f 91       	pop	r20
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
