
SPI Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000168  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000168  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  000001fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007da  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000654  00000000  00000000  00000ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039c  00000000  00000000  0000110a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  000014a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d0  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001db  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001c53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
 * Author : Ahmed Nabil
 */ 
#include "MCAL/Spi Module/Spi.h"

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	Spi_init();
  9c:	0e 94 5d 00 	call	0xba	; 0xba <Spi_init>
	uint8_t data=0;
  a0:	19 82       	std	Y+1, r1	; 0x01
	uint32_t i=0;
	DIO_PORTA_DIR = 0xFF;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	8a bb       	out	0x1a, r24	; 26
	while (1)
	{
		/* Receive Data from master */
		Spi_SlaveReceiveByte(&data);
  a6:	ce 01       	movw	r24, r28
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	0e 94 7a 00 	call	0xf4	; 0xf4 <Spi_SlaveReceiveByte>
		/* Output the received data on PORT A */
		DIO_PORTA_DATA = data++;
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	98 0f       	add	r25, r24
  b4:	99 83       	std	Y+1, r25	; 0x01
  b6:	8b bb       	out	0x1b, r24	; 27
  b8:	f6 cf       	rjmp	.-20     	; 0xa6 <main+0x14>

000000ba <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
  ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  be:	87 30       	cpi	r24, 0x07	; 7
  c0:	b9 f0       	breq	.+46     	; 0xf0 <Spi_init+0x36>
  c2:	87 b3       	in	r24, 0x17	; 23
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	87 bb       	out	0x17, r24	; 23
  c8:	87 b3       	in	r24, 0x17	; 23
  ca:	8f 7b       	andi	r24, 0xBF	; 191
  cc:	87 bb       	out	0x17, r24	; 23
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	8f 7e       	andi	r24, 0xEF	; 239
  d2:	87 bb       	out	0x17, r24	; 23
  d4:	87 b3       	in	r24, 0x17	; 23
  d6:	8f 77       	andi	r24, 0x7F	; 127
  d8:	87 bb       	out	0x17, r24	; 23
  da:	8d b1       	in	r24, 0x0d	; 13
  dc:	8f 7e       	andi	r24, 0xEF	; 239
  de:	8d b9       	out	0x0d, r24	; 13
  e0:	8d b1       	in	r24, 0x0d	; 13
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	8d b9       	out	0x0d, r24	; 13
  e6:	87 e0       	ldi	r24, 0x07	; 7
  e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	08 95       	ret
  f0:	88 e0       	ldi	r24, 0x08	; 8
  f2:	08 95       	ret

000000f4 <Spi_SlaveReceiveByte>:
  f4:	fc 01       	movw	r30, r24
  f6:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  fa:	97 30       	cpi	r25, 0x07	; 7
  fc:	41 f4       	brne	.+16     	; 0x10e <Spi_SlaveReceiveByte+0x1a>
  fe:	30 97       	sbiw	r30, 0x00	; 0
 100:	41 f0       	breq	.+16     	; 0x112 <Spi_SlaveReceiveByte+0x1e>
 102:	77 9b       	sbis	0x0e, 7	; 14
 104:	fe cf       	rjmp	.-4      	; 0x102 <Spi_SlaveReceiveByte+0xe>
 106:	8f b1       	in	r24, 0x0f	; 15
 108:	80 83       	st	Z, r24
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	08 95       	ret
 10e:	86 e0       	ldi	r24, 0x06	; 6
 110:	08 95       	ret
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	08 95       	ret

00000116 <__vector_12>:


 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	5f 93       	push	r21
 128:	6f 93       	push	r22
 12a:	7f 93       	push	r23
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
 138:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 13c:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 140:	09 95       	icall
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	bf 91       	pop	r27
 148:	af 91       	pop	r26
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	7f 91       	pop	r23
 150:	6f 91       	pop	r22
 152:	5f 91       	pop	r21
 154:	4f 91       	pop	r20
 156:	3f 91       	pop	r19
 158:	2f 91       	pop	r18
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
